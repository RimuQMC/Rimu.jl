var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21237999746738898 ± 0.0017667243777086796\n   G2(1) = 0.917416059097798 ± 0.0008383906702990962\n   G2(2) = 0.9823662028516751 ± 0.0009129660223089327\n   G2(3) = 0.9880554786336649 ± 0.0009431280002852701\n   G2(4) = 0.9823662028516751 ± 0.0009129660223089327\n   G2(5) = 0.917416059097798 ± 0.0008383906702990962\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.055250428626346 ± 0.1278967442892898\n   Replica 2: -4.083612948333785 ± 0.1356259653471906\n   Replica 3: -4.025090025912712 ± 0.12806541505116553\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip570\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip570)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip571\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip570)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip572\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.1 2211.02,1003.1 \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.364 2211.02,745.364 \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.627 2211.02,487.627 \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.889 2211.02,229.889 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip570)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.1 423.181,1003.1 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.364 423.181,745.364 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.627 423.181,487.627 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.889 423.181,229.889 \"/>\n<path clip-path=\"url(#clip570)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.54 Q352.728 1275.09 356.339 1275.09 Q359.973 1275.09 361.779 1271.54 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.64 356.339 1246.64 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.21 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.21 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M290.043 1016.45 L306.363 1016.45 L306.363 1020.38 L284.418 1020.38 L284.418 1016.45 Q287.08 1013.69 291.664 1009.06 Q296.27 1004.41 297.451 1003.07 Q299.696 1000.54 300.576 998.807 Q301.478 997.048 301.478 995.358 Q301.478 992.603 299.534 990.867 Q297.613 989.131 294.511 989.131 Q292.312 989.131 289.858 989.895 Q287.427 990.659 284.65 992.21 L284.65 987.488 Q287.474 986.353 289.927 985.775 Q292.381 985.196 294.418 985.196 Q299.789 985.196 302.983 987.881 Q306.177 990.566 306.177 995.057 Q306.177 997.187 305.367 999.108 Q304.58 1001.01 302.474 1003.6 Q301.895 1004.27 298.793 1007.49 Q295.691 1010.68 290.043 1016.45 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M316.224 985.821 L334.58 985.821 L334.58 989.756 L320.506 989.756 L320.506 998.228 Q321.524 997.881 322.543 997.719 Q323.562 997.534 324.58 997.534 Q330.367 997.534 333.747 1000.71 Q337.126 1003.88 337.126 1009.29 Q337.126 1014.87 333.654 1017.97 Q330.182 1021.05 323.862 1021.05 Q321.687 1021.05 319.418 1020.68 Q317.173 1020.31 314.765 1019.57 L314.765 1014.87 Q316.849 1016.01 319.071 1016.56 Q321.293 1017.12 323.77 1017.12 Q327.774 1017.12 330.112 1015.01 Q332.45 1012.9 332.45 1009.29 Q332.45 1005.68 330.112 1003.58 Q327.774 1001.47 323.77 1001.47 Q321.895 1001.47 320.02 1001.89 Q318.168 1002.3 316.224 1003.18 L316.224 985.821 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M356.339 988.9 Q352.728 988.9 350.899 992.464 Q349.094 996.006 349.094 1003.14 Q349.094 1010.24 350.899 1013.81 Q352.728 1017.35 356.339 1017.35 Q359.973 1017.35 361.779 1013.81 Q363.608 1010.24 363.608 1003.14 Q363.608 996.006 361.779 992.464 Q359.973 988.9 356.339 988.9 M356.339 985.196 Q362.149 985.196 365.205 989.802 Q368.284 994.386 368.284 1003.14 Q368.284 1011.86 365.205 1016.47 Q362.149 1021.05 356.339 1021.05 Q350.529 1021.05 347.45 1016.47 Q344.395 1011.86 344.395 1003.14 Q344.395 994.386 347.45 989.802 Q350.529 985.196 356.339 985.196 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M286.062 728.084 L304.418 728.084 L304.418 732.019 L290.344 732.019 L290.344 740.491 Q291.363 740.144 292.381 739.982 Q293.4 739.797 294.418 739.797 Q300.205 739.797 303.585 742.968 Q306.964 746.139 306.964 751.556 Q306.964 757.135 303.492 760.236 Q300.02 763.315 293.701 763.315 Q291.525 763.315 289.256 762.945 Q287.011 762.574 284.603 761.834 L284.603 757.135 Q286.687 758.269 288.909 758.824 Q291.131 759.38 293.608 759.38 Q297.613 759.38 299.951 757.273 Q302.288 755.167 302.288 751.556 Q302.288 747.945 299.951 745.838 Q297.613 743.732 293.608 743.732 Q291.733 743.732 289.858 744.148 Q288.006 744.565 286.062 745.445 L286.062 728.084 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M326.177 731.162 Q322.566 731.162 320.737 734.727 Q318.932 738.269 318.932 745.398 Q318.932 752.505 320.737 756.07 Q322.566 759.611 326.177 759.611 Q329.811 759.611 331.617 756.07 Q333.446 752.505 333.446 745.398 Q333.446 738.269 331.617 734.727 Q329.811 731.162 326.177 731.162 M326.177 727.459 Q331.987 727.459 335.043 732.065 Q338.122 736.649 338.122 745.398 Q338.122 754.125 335.043 758.732 Q331.987 763.315 326.177 763.315 Q320.367 763.315 317.288 758.732 Q314.233 754.125 314.233 745.398 Q314.233 736.649 317.288 732.065 Q320.367 727.459 326.177 727.459 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M356.339 731.162 Q352.728 731.162 350.899 734.727 Q349.094 738.269 349.094 745.398 Q349.094 752.505 350.899 756.07 Q352.728 759.611 356.339 759.611 Q359.973 759.611 361.779 756.07 Q363.608 752.505 363.608 745.398 Q363.608 738.269 361.779 734.727 Q359.973 731.162 356.339 731.162 M356.339 727.459 Q362.149 727.459 365.205 732.065 Q368.284 736.649 368.284 745.398 Q368.284 754.125 365.205 758.732 Q362.149 763.315 356.339 763.315 Q350.529 763.315 347.45 758.732 Q344.395 754.125 344.395 745.398 Q344.395 736.649 347.45 732.065 Q350.529 727.459 356.339 727.459 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M284.835 470.347 L307.057 470.347 L307.057 472.337 L294.511 504.907 L289.627 504.907 L301.432 474.282 L284.835 474.282 L284.835 470.347 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M316.224 470.347 L334.58 470.347 L334.58 474.282 L320.506 474.282 L320.506 482.754 Q321.524 482.407 322.543 482.245 Q323.562 482.06 324.58 482.06 Q330.367 482.06 333.747 485.231 Q337.126 488.402 337.126 493.819 Q337.126 499.397 333.654 502.499 Q330.182 505.578 323.862 505.578 Q321.687 505.578 319.418 505.208 Q317.173 504.837 314.765 504.096 L314.765 499.397 Q316.849 500.532 319.071 501.087 Q321.293 501.643 323.77 501.643 Q327.774 501.643 330.112 499.536 Q332.45 497.43 332.45 493.819 Q332.45 490.208 330.112 488.101 Q327.774 485.995 323.77 485.995 Q321.895 485.995 320.02 486.411 Q318.168 486.828 316.224 487.708 L316.224 470.347 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M356.339 473.425 Q352.728 473.425 350.899 476.99 Q349.094 480.532 349.094 487.661 Q349.094 494.768 350.899 498.333 Q352.728 501.874 356.339 501.874 Q359.973 501.874 361.779 498.333 Q363.608 494.768 363.608 487.661 Q363.608 480.532 361.779 476.99 Q359.973 473.425 356.339 473.425 M356.339 469.722 Q362.149 469.722 365.205 474.328 Q368.284 478.911 368.284 487.661 Q368.284 496.388 365.205 500.995 Q362.149 505.578 356.339 505.578 Q350.529 505.578 347.45 500.995 Q344.395 496.388 344.395 487.661 Q344.395 478.911 347.45 474.328 Q350.529 469.722 356.339 469.722 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M256.664 243.234 L264.303 243.234 L264.303 216.869 L255.992 218.535 L255.992 214.276 L264.256 212.609 L268.932 212.609 L268.932 243.234 L276.571 243.234 L276.571 247.169 L256.664 247.169 L256.664 243.234 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M296.015 215.688 Q292.404 215.688 290.576 219.253 Q288.77 222.795 288.77 229.924 Q288.77 237.031 290.576 240.595 Q292.404 244.137 296.015 244.137 Q299.65 244.137 301.455 240.595 Q303.284 237.031 303.284 229.924 Q303.284 222.795 301.455 219.253 Q299.65 215.688 296.015 215.688 M296.015 211.984 Q301.826 211.984 304.881 216.591 Q307.96 221.174 307.96 229.924 Q307.96 238.651 304.881 243.257 Q301.826 247.841 296.015 247.841 Q290.205 247.841 287.127 243.257 Q284.071 238.651 284.071 229.924 Q284.071 221.174 287.127 216.591 Q290.205 211.984 296.015 211.984 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M326.177 215.688 Q322.566 215.688 320.737 219.253 Q318.932 222.795 318.932 229.924 Q318.932 237.031 320.737 240.595 Q322.566 244.137 326.177 244.137 Q329.811 244.137 331.617 240.595 Q333.446 237.031 333.446 229.924 Q333.446 222.795 331.617 219.253 Q329.811 215.688 326.177 215.688 M326.177 211.984 Q331.987 211.984 335.043 216.591 Q338.122 221.174 338.122 229.924 Q338.122 238.651 335.043 243.257 Q331.987 247.841 326.177 247.841 Q320.367 247.841 317.288 243.257 Q314.233 238.651 314.233 229.924 Q314.233 221.174 317.288 216.591 Q320.367 211.984 326.177 211.984 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M356.339 215.688 Q352.728 215.688 350.899 219.253 Q349.094 222.795 349.094 229.924 Q349.094 237.031 350.899 240.595 Q352.728 244.137 356.339 244.137 Q359.973 244.137 361.779 240.595 Q363.608 237.031 363.608 229.924 Q363.608 222.795 361.779 219.253 Q359.973 215.688 356.339 215.688 M356.339 211.984 Q362.149 211.984 365.205 216.591 Q368.284 221.174 368.284 229.924 Q368.284 238.651 365.205 243.257 Q362.149 247.841 356.339 247.841 Q350.529 247.841 347.45 243.257 Q344.395 238.651 344.395 229.924 Q344.395 221.174 347.45 216.591 Q350.529 211.984 356.339 211.984 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip572)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.889 4017.76,229.889 \"/>\n<polyline clip-path=\"url(#clip572)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1247.01 460.533,1246.42 461.101,1245.76 461.669,1243.99 462.238,1243.19 462.806,1242.3 463.375,1241.33 463.943,1239.2 464.511,1238.02 465.08,1236.72 465.648,1234.31 466.216,1230.76 466.785,1229.15 467.353,1227.42 467.921,1225.52 468.49,1223.5 469.058,1221.35 469.626,1219.06 470.195,1216.61 470.763,1213.95 471.331,1211.16 471.9,1208.17 472.468,1205 473.036,1201.64 473.605,1198.12 474.173,1194.36 474.741,1189.41 475.31,1185.23 475.878,1180.8 476.446,1175.18 477.015,1168.32 477.583,1161.15 478.152,1154.82 478.72,1149.42 479.288,1142.71 479.857,1136.74 480.425,1129.48 480.993,1122.02 481.562,1114.35 482.13,1105.56 482.698,1098.33 483.267,1088.96 483.835,1081.48 484.403,1073.78 484.972,1065.84 485.54,1057.63 486.108,1048.42 486.677,1039.03 487.245,1028.39 487.813,1017.81 488.382,1007.08 488.95,998.363 489.518,988.474 490.087,977.418 490.655,968.23 491.224,957.933 491.792,948.691 492.36,939.194 492.929,929.75 493.497,918.065 494.065,907.484 494.634,896.619 495.202,884.756 495.77,874.072 496.339,864.475 496.907,853.856 497.475,842.049 498.044,830.297 498.612,819.615 499.18,807.873 499.749,798.319 500.317,788.861 500.885,779.305 501.454,767.643 502.022,757.33 502.59,748.023 503.159,736.556 503.727,725.388 504.295,714.138 504.864,702.139 505.432,693.43 506.001,684.72 506.569,675.085 507.137,664.405 507.706,653.834 508.274,643.515 508.842,631.273 509.411,622.284 509.979,612.643 510.547,603.056 511.116,592.625 511.684,583.547 512.252,575.588 512.821,568.801 513.389,562.122 513.957,554.351 514.526,546.66 515.094,540.289 515.662,532.864 516.231,524.482 516.799,518.595 517.367,511.512 517.936,502.679 518.504,496.04 519.072,490.585 519.641,483.989 520.209,475.742 520.778,469.598 521.346,463.713 521.914,455.889 522.483,449.36 523.051,443.673 523.619,440.618 524.188,436.259 524.756,432.093 525.324,427.035 525.893,422.063 526.461,417.001 527.029,413.049 527.598,406.317 528.166,399.723 528.734,395.444 529.303,392.241 529.871,389.109 530.439,385.045 531.008,379.143 531.576,373.439 532.144,369.008 532.713,363.576 533.281,361.516 533.85,359.228 534.418,357.27 534.986,354.008 535.555,351.129 536.123,346.867 536.691,343.982 537.26,342.269 537.828,339.516 538.396,335.696 538.965,332.194 539.533,330.851 540.101,328.335 540.67,326.102 541.238,322.738 541.806,321.529 542.375,317.31 542.943,315.163 543.511,313.38 544.08,310.639 544.648,307.927 545.216,307.285 545.785,306.488 546.353,303.68 546.921,303.116 547.49,302.513 548.058,301.823 548.627,302.045 549.195,299.175 549.763,298.385 550.332,298.72 550.9,294.873 551.468,294.239 552.037,290.35 552.605,291.848 553.173,288.207 553.742,287.62 554.31,287.274 554.878,286.886 555.447,285.176 556.015,284.558 556.583,284.12 557.152,284.717 557.72,285.105 558.288,284.165 558.857,281.344 559.425,280.759 559.993,279.101 560.562,278.574 561.13,277.881 561.698,277.079 562.267,276.748 562.835,277.299 563.404,275.515 563.972,275.013 564.54,274.303 565.109,272.747 565.677,273.212 566.245,271.171 566.814,269.579 567.382,270.053 567.95,268.363 568.519,264.876 569.087,264.659 569.655,265.479 570.224,265.131 570.792,261.576 571.36,262.161 571.929,261.977 572.497,261.896 573.065,258.492 573.634,256.257 574.202,255.219 574.77,254.394 575.339,253.464 575.907,253.605 576.476,252.681 577.044,251.921 577.612,250.234 578.181,249.49 578.749,248.832 579.317,250.185 579.886,250.568 580.454,251.71 581.022,251.683 581.591,250.975 582.159,250.161 582.727,250.735 583.296,251.746 583.864,249.76 584.432,251.142 585.001,250.152 585.569,248.292 586.137,249.631 586.706,248.489 587.274,247.846 587.842,246.002 588.411,246.567 588.979,246.873 589.547,246.268 590.116,246.541 590.684,243.625 591.253,246.915 591.821,247.105 592.389,246.226 592.958,247.528 593.526,248.538 594.094,249.477 594.663,250.444 595.231,250.194 595.799,251.818 596.368,251.651 596.936,250.383 597.504,249.129 598.073,249.049 598.641,246.579 599.209,245.866 599.778,245.975 600.346,244.979 600.914,245.023 601.483,246.072 602.051,246.078 602.619,244.864 603.188,245.84 603.756,245.862 604.325,245.943 604.893,245.71 605.461,244.593 606.03,243.471 606.598,242.463 607.166,240.634 607.735,237.571 608.303,236.759 608.871,235.106 609.44,234.57 610.008,235.073 610.576,236.707 611.145,237.22 611.713,237.851 612.281,236.144 612.85,236.691 613.418,238.209 613.986,233.324 614.555,235.088 615.123,234.552 615.691,236.049 616.26,234.654 616.828,237.252 617.396,233.561 617.965,235.126 618.533,236.652 619.102,237.001 619.67,237.302 620.238,238.643 620.807,237.916 621.375,240.451 621.943,238.51 622.512,238.354 623.08,238.679 623.648,239.996 624.217,239.895 624.785,242.243 625.353,243.271 625.922,244.187 626.49,243.804 627.058,242.706 627.627,242.598 628.195,242.603 628.763,242.112 629.332,242.128 629.9,243.078 630.468,242.792 631.037,241.782 631.605,241.748 632.173,241.454 632.742,240.422 633.31,241.291 633.879,240.269 634.447,240.22 635.015,240.2 635.584,236.96 636.152,237.125 636.72,236.309 637.289,236.465 637.857,236.608 638.425,237.984 638.994,236.288 639.562,235.316 640.13,236.688 640.699,234.607 641.267,236.037 641.835,238.256 642.404,238.362 642.972,238.619 643.54,239.278 644.109,240.175 644.677,238.817 645.245,237.783 645.814,240.908 646.382,242.862 646.951,243.511 647.519,241.974 648.087,242.661 648.656,241.236 649.224,239.96 649.792,238.904 650.361,237.585 650.929,238.378 651.497,237.167 652.066,237.164 652.634,236.963 653.202,234.961 653.771,233.971 654.339,233.224 654.907,232.461 655.476,232.514 656.044,230.495 656.612,230.799 657.181,231.553 657.749,230.915 658.317,231.369 658.886,231.831 659.454,232.089 660.022,232.427 660.591,231.822 661.159,231.953 661.728,231.27 662.296,230.527 662.864,230.878 663.433,234.329 664.001,234.455 664.569,233.466 665.138,230.568 665.706,228.965 666.274,230.624 666.843,230.101 667.411,232.475 667.979,233.808 668.548,232.994 669.116,231.092 669.684,230.498 670.253,229.761 670.821,231.242 671.389,231.745 671.958,232.306 672.526,232.571 673.094,232.839 673.663,234.139 674.231,236.565 674.799,239.76 675.368,239.548 675.936,237.948 676.505,236.859 677.073,235.826 677.641,235.935 678.21,234.921 678.778,229.766 679.346,231.205 679.915,231.676 680.483,230.944 681.051,230.338 681.62,230.689 682.188,229.765 682.756,230.268 683.325,230.513 683.893,231.038 684.461,231.592 685.03,233.063 685.598,233.434 686.166,232.482 686.735,233.478 687.303,233.692 687.871,233.77 688.44,232.79 689.008,232.918 689.577,232.795 690.145,232.016 690.713,231.292 691.282,232.62 691.85,233.947 692.418,233.954 692.987,233.045 693.555,235.398 694.123,232.448 694.692,232.724 695.26,231.708 695.828,230.989 696.397,231.551 696.965,231.844 697.533,232.106 698.102,232.37 698.67,233.548 699.238,235.558 699.807,237.668 700.375,238.625 700.943,237.29 701.512,237.097 702.08,239.14 702.648,239.835 703.217,239.432 703.785,238.161 704.354,237.678 704.922,237.482 705.49,236.347 706.059,235.337 706.627,235.332 707.195,237.384 707.764,236.335 708.332,236.19 708.9,236.124 709.469,236.037 710.037,235.811 710.605,237.868 711.174,236.548 711.742,234.307 712.31,234.434 712.879,235.462 713.447,234.299 714.015,233.147 714.584,230.966 715.152,231.001 715.72,230.059 716.289,230.214 716.857,228.181 717.425,228.451 717.994,230.724 718.562,231.94 719.131,232.922 719.699,232.505 720.267,230.457 720.836,228.689 721.404,229 721.972,228.25 722.541,228.713 723.109,227.925 723.677,229.371 724.246,229.861 724.814,230.039 725.382,228.324 725.951,228.644 726.519,231.034 727.087,232.179 727.656,232.126 728.224,237.303 728.792,237.079 729.361,237.481 729.929,237.035 730.497,236.749 731.066,237.373 731.634,238.202 732.203,237.686 732.771,236.214 733.339,234.859 733.908,234.818 734.476,234.5 735.044,234.503 735.613,233.333 736.181,232.208 736.749,231.966 737.318,232.098 737.886,231.068 738.454,228.111 739.023,225.174 739.591,226.836 740.159,227.05 740.728,228.191 741.296,230.517 741.864,231.647 742.433,231.809 743.001,231.958 743.569,232.9 744.138,231.857 744.706,227.957 745.274,227.215 745.843,227.55 746.411,226.828 746.98,227.274 747.548,227.608 748.116,227.046 748.685,226.455 749.253,224.887 749.821,225.522 750.39,226.165 750.958,227.862 751.526,228.259 752.095,228.567 752.663,227.157 753.231,226.714 753.8,230.308 754.368,230.532 754.936,230.583 755.505,230.663 756.073,230.754 756.641,228.728 757.21,227.991 757.778,228.073 758.346,228.442 758.915,231.789 759.483,233.202 760.052,231.014 760.62,229.2 761.188,230.544 761.757,229.734 762.325,228.803 762.893,227.798 763.462,228.129 764.03,230.557 764.598,229.723 765.167,229.975 765.735,231.501 766.303,230.544 766.872,230.728 767.44,231.225 768.008,232.474 768.577,234.625 769.145,233.301 769.713,234.389 770.282,234.446 770.85,235.398 771.418,235.292 771.987,234.014 772.555,233.308 773.123,236.354 773.692,238.13 774.26,237.959 774.829,237.686 775.397,237.277 775.965,238.012 776.534,236.761 777.102,236.716 777.67,237.461 778.239,236.068 778.807,239.819 779.375,241.376 779.944,239.666 780.512,241.121 781.08,240.359 781.649,237.47 782.217,237.949 782.785,237.508 783.354,235.896 783.922,237.657 784.49,238.192 785.059,237.486 785.627,237.225 786.195,236.76 786.764,235.372 787.332,235.081 787.9,235.722 788.469,233.324 789.037,232.117 789.606,229.816 790.174,231.865 790.742,231.681 791.311,231.731 791.879,232.502 792.447,232.296 793.016,233.094 793.584,230.938 794.152,230.698 794.721,230.586 795.289,229.898 795.857,231.066 796.426,232.107 796.994,233.056 797.562,231.722 798.131,231.289 798.699,230.992 799.267,231.977 799.836,231.698 800.404,229.78 800.972,228.7 801.541,226.523 802.109,224.617 802.678,225.054 803.246,226.382 803.814,226.521 804.383,227.666 804.951,226.75 805.519,228.983 806.088,231.026 806.656,230.748 807.224,231.654 807.793,232.634 808.361,233.614 808.929,233.266 809.498,237.243 810.066,235.64 810.634,232.082 811.203,232.934 811.771,232.704 812.339,232.799 812.908,230.667 813.476,230.505 814.044,230.431 814.613,230.422 815.181,230.455 815.749,229.289 816.318,229.512 816.886,229.628 817.455,231.51 818.023,229.334 818.591,229.565 819.16,230.732 819.728,229.789 820.296,228.847 820.865,228.134 821.433,228.338 822.001,229.28 822.57,228.416 823.138,227.652 823.706,228.651 824.275,228.744 824.843,229.087 825.411,229.129 825.98,228.862 826.548,231.314 827.116,229.101 827.685,228.063 828.253,227.21 828.821,226.512 829.39,226.925 829.958,229.417 830.526,228.614 831.095,227.503 831.663,227.858 832.232,229.977 832.8,226.966 833.368,227.255 833.937,229.547 834.505,230.826 835.073,231.998 835.642,231.873 836.21,231.818 836.778,230.758 837.347,230.575 837.915,230.578 838.483,232.423 839.052,232.423 839.62,232.036 840.188,230.915 840.757,231.209 841.325,231.235 841.893,232.361 842.462,232.354 843.03,230.083 843.598,228.902 844.167,227.742 844.735,228.02 845.304,227.145 845.872,228.418 846.44,226.654 847.009,227.184 847.577,226.382 848.145,225.506 848.714,225.991 849.282,225.485 849.85,224.845 850.419,223.143 850.987,223.915 851.555,222.373 852.124,224.096 852.692,224.857 853.26,223.373 853.829,225.059 854.397,226.646 854.965,228.03 855.534,228.328 856.102,226.641 856.67,228.023 857.239,227.549 857.807,224.047 858.375,223.363 858.944,221.929 859.512,222.847 860.081,221.483 860.649,222.182 861.217,223.061 861.786,223.695 862.354,224.324 862.922,223.97 863.491,225.769 864.059,225.216 864.627,225.794 865.196,226.498 865.764,225.946 866.332,225.459 866.901,224.068 867.469,225.905 868.037,228.533 868.606,229.859 869.174,231.118 869.742,231.375 870.311,232.582 870.879,230.652 871.447,229.992 872.016,232.227 872.584,232.367 873.152,234.631 873.721,235.616 874.289,236.32 874.858,235.247 875.426,235.207 875.994,235.23 876.563,235.341 877.131,235.12 877.699,236.185 878.268,238.263 878.836,236.905 879.404,236.725 879.973,236.517 880.541,238.331 881.109,238.896 881.678,238.634 882.246,237.222 882.814,238.901 883.383,236.467 883.951,235.108 884.519,232.649 885.088,231.533 885.656,231.719 886.224,231.452 886.793,231.482 887.361,233.5 887.93,231.347 888.498,232.476 889.066,231.499 889.635,229.307 890.203,228.633 890.771,228.892 891.34,229.095 891.908,228.193 892.476,230.461 893.045,229.536 893.613,230.528 894.181,231.445 894.75,232.478 895.318,232.356 895.886,233.248 896.455,234.125 897.023,233.859 897.591,234.782 898.16,232.409 898.728,231.442 899.296,231.34 899.865,232.277 900.433,234.32 901.001,235.215 901.57,234.914 902.138,235.687 902.707,235.436 903.275,234.138 903.843,235.892 904.412,236.578 904.98,237.549 905.548,236.085 906.117,233.843 906.685,234.753 907.253,235.589 907.822,237.083 908.39,237.425 908.958,236.94 909.527,232.581 910.095,233.185 910.663,235.241 911.232,233.959 911.8,232.505 912.368,230.273 912.937,231.248 913.505,231.149 914.073,231.077 914.642,230.765 915.21,229.861 915.779,229.86 916.347,228.844 916.915,228.071 917.484,229.129 918.052,227.165 918.62,228.263 919.189,228.298 919.757,230.356 920.325,231.295 920.894,231.211 921.462,234.148 922.03,232.705 922.599,232.512 923.167,235.463 923.735,235.03 924.304,233.65 924.872,231.203 925.44,232.057 926.009,231.867 926.577,230.623 927.145,230.583 927.714,230.642 928.282,232.589 928.85,232.377 929.419,229.264 929.987,229.324 930.556,228.176 931.124,228.318 931.692,228.484 932.261,229.701 932.829,229.881 933.397,228.69 933.966,228.862 934.534,229.791 935.102,229.909 935.671,231.089 936.239,231.899 936.807,231.72 937.376,232.465 937.944,232.227 938.512,232.134 939.081,229.733 939.649,230.317 940.217,229.236 940.786,227.132 941.354,226.478 941.922,225.616 942.491,226.967 943.059,224.281 943.627,223.728 944.196,223.096 944.764,222.48 945.333,224.13 945.901,224.442 946.469,225.946 947.038,226.214 947.606,227.544 948.174,225.488 948.743,226.793 949.311,227.077 949.879,225.299 950.448,227.693 951.016,229.853 951.584,230.053 952.153,229.869 952.721,229.061 953.289,227.942 953.858,228.197 954.426,227.142 954.994,227.347 955.563,226.48 956.131,226.954 956.699,227.302 957.268,228.522 957.836,228.664 958.405,229.09 958.973,229.125 959.541,229.179 960.11,229.336 960.678,229.734 961.246,229.733 961.815,232.941 962.383,232.917 962.951,234.801 963.52,234.654 964.088,235.5 964.656,236.39 965.225,236.924 965.793,237.346 966.361,233.559 966.93,235.334 967.498,237.063 968.066,236.78 968.635,237.505 969.203,235.953 969.771,233.4 970.34,232.002 970.908,231.743 971.476,234.747 972.045,234.435 972.613,232.023 973.182,231.879 973.75,228.692 974.318,229.524 974.887,230.554 975.455,230.418 976.023,229.338 976.592,230.323 977.16,231.614 977.728,232.605 978.297,234.619 978.865,234.275 979.433,234.954 980.002,234.551 980.57,234.385 981.138,233.095 981.707,231.737 982.275,231.693 982.843,231.661 983.412,231.621 983.98,230.495 984.548,231.25 985.117,231.267 985.685,231.083 986.253,232.108 986.822,229.007 987.39,230.287 987.959,229.32 988.527,227.247 989.095,229.37 989.664,230.262 990.232,235.281 990.8,235.893 991.369,234.199 991.937,233.558 992.505,231.33 993.074,229.081 993.642,231.253 994.21,230.99 994.779,229.63 995.347,233.674 995.915,234.231 996.484,236.67 997.052,236.102 997.62,233.485 998.189,233.061 998.757,231.406 999.325,232.152 999.894,228.584 1000.46,229.568 1001.03,230.469 1001.6,231.176 1002.17,232.267 1002.74,230.924 1003.3,229.714 1003.87,229.621 1004.44,227.609 1005.01,227.738 1005.58,225.748 1006.15,225.836 1006.71,225.938 1007.28,228.208 1007.85,227.328 1008.42,227.367 1008.99,227.527 1009.56,225.562 1010.12,225.73 1010.69,225.823 1011.26,225.365 1011.83,226.633 1012.4,227.85 1012.97,228.897 1013.53,228.987 1014.1,228.073 1014.67,229.112 1015.24,229.029 1015.81,230.183 1016.38,229.065 1016.94,231.904 1017.51,233.525 1018.08,231.946 1018.65,232.878 1019.22,234.661 1019.79,234.228 1020.35,233.886 1020.92,232.425 1021.49,233.21 1022.06,232.119 1022.63,230.765 1023.2,231.614 1023.76,231.466 1024.33,230.313 1024.9,230.272 1025.47,231.118 1026.04,230.956 1026.61,228.681 1027.17,228.806 1027.74,226.798 1028.31,227.033 1028.88,227.358 1029.45,227.641 1030.02,227.584 1030.58,226.592 1031.15,229.929 1031.72,229.804 1032.29,229.531 1032.86,227.397 1033.43,227.6 1033.99,228.983 1034.56,228.022 1035.13,226.905 1035.7,226.868 1036.27,224.938 1036.84,225.181 1037.4,224.354 1037.97,225.541 1038.54,224.72 1039.11,227.144 1039.68,228.315 1040.25,228.337 1040.81,228.291 1041.38,228.381 1041.95,228.62 1042.52,229.62 1043.09,229.474 1043.66,232.581 1044.22,230.299 1044.79,228.294 1045.36,230.418 1045.93,228.365 1046.5,230.276 1047.07,230.145 1047.63,232.128 1048.2,230.881 1048.77,229.649 1049.34,228.664 1049.91,229.804 1050.48,229.642 1051.05,228.81 1051.61,228.881 1052.18,229.904 1052.75,229.716 1053.32,229.835 1053.89,228.909 1054.46,228.981 1055.02,229.289 1055.59,229.442 1056.16,228.366 1056.73,226.214 1057.3,228.583 1057.87,230.625 1058.43,230.686 1059,229.599 1059.57,229.692 1060.14,229.76 1060.71,230.774 1061.28,230.835 1061.84,229.732 1062.41,228.562 1062.98,231.721 1063.55,232.75 1064.12,231.589 1064.69,232.434 1065.25,233.309 1065.82,234.216 1066.39,232.73 1066.96,232.455 1067.53,230.154 1068.1,229.088 1068.66,230.339 1069.23,233.533 1069.8,235.571 1070.37,235.125 1070.94,233.648 1071.51,232.343 1072.07,232.152 1072.64,231.714 1073.21,232.534 1073.78,233.377 1074.35,230.078 1074.92,232.219 1075.48,233.006 1076.05,231.76 1076.62,231.749 1077.19,232.592 1077.76,231.27 1078.33,231.027 1078.89,229.639 1079.46,230.646 1080.03,229.569 1080.6,228.48 1081.17,227.341 1081.74,226.314 1082.3,227.39 1082.87,228.639 1083.44,227.569 1084.01,228.439 1084.58,227.501 1085.15,226.595 1085.71,226.92 1086.28,225.059 1086.85,225.11 1087.42,225.522 1087.99,223.741 1088.56,222.147 1089.12,222.644 1089.69,224.3 1090.26,223.632 1090.83,224.035 1091.4,225.671 1091.97,227.116 1092.53,229.546 1093.1,232.69 1093.67,231.462 1094.24,231.11 1094.81,230.004 1095.38,229.164 1095.94,227.251 1096.51,227.601 1097.08,228.75 1097.65,226.834 1098.22,225.728 1098.79,227.149 1099.35,227.353 1099.92,227.475 1100.49,225.698 1101.06,225.059 1101.63,226.506 1102.2,227.012 1102.76,229.19 1103.33,228.526 1103.9,229.832 1104.47,229.066 1105.04,230.36 1105.61,226.445 1106.17,225.563 1106.74,223.695 1107.31,225.258 1107.88,225.584 1108.45,227.031 1109.02,227.56 1109.58,227.842 1110.15,230.311 1110.72,229.524 1111.29,229.547 1111.86,227.653 1112.43,227.047 1112.99,228.469 1113.56,229.662 1114.13,231.809 1114.7,232.809 1115.27,236.769 1115.84,237.135 1116.4,237.936 1116.97,239.43 1117.54,236.868 1118.11,235.386 1118.68,232.913 1119.25,232.814 1119.81,232.758 1120.38,235.919 1120.95,236.62 1121.52,236.385 1122.09,236.042 1122.66,234.55 1123.23,233.235 1123.79,232.143 1124.36,231.98 1124.93,231.873 1125.5,232.848 1126.07,232.692 1126.64,232.446 1127.2,233.182 1127.77,233.891 1128.34,232.553 1128.91,230.232 1129.48,230.236 1130.05,233.348 1130.61,230.153 1131.18,229.999 1131.75,230.031 1132.32,231.876 1132.89,232.775 1133.46,233.504 1134.02,231.034 1134.59,230.744 1135.16,231.825 1135.73,231.889 1136.3,232.589 1136.87,232.18 1137.43,230.836 1138,230.721 1138.57,230.442 1139.14,230.566 1139.71,230.533 1140.28,230.495 1140.84,228.304 1141.41,229.52 1141.98,231.467 1142.55,231.269 1143.12,229.951 1143.69,228.091 1144.25,229.158 1144.82,229.056 1145.39,229.955 1145.96,228.94 1146.53,228.989 1147.1,227.93 1147.66,229.021 1148.23,227.947 1148.8,225.031 1149.37,226.454 1149.94,227.933 1150.51,229.098 1151.07,227.182 1151.64,227.374 1152.21,227.697 1152.78,225.813 1153.35,225.055 1153.92,224.386 1154.48,223.867 1155.05,221.049 1155.62,222.795 1156.19,222.275 1156.76,224.013 1157.33,224.376 1157.89,223.849 1158.46,224.311 1159.03,222.659 1159.6,221.114 1160.17,223.667 1160.74,224.203 1161.3,224.546 1161.87,224.171 1162.44,224.771 1163.01,225.288 1163.58,226.748 1164.15,228.132 1164.71,228.372 1165.28,229.698 1165.85,229.971 1166.42,232.068 1166.99,230.96 1167.56,228.941 1168.12,228.1 1168.69,227.628 1169.26,229.005 1169.83,229.332 1170.4,229.618 1170.97,229.853 1171.53,228.018 1172.1,228.29 1172.67,228.518 1173.24,229.689 1173.81,230.841 1174.38,229.836 1174.94,230.186 1175.51,231.278 1176.08,232.479 1176.65,232.382 1177.22,235.362 1177.79,234.048 1178.35,235.744 1178.92,236.417 1179.49,235.329 1180.06,235.94 1180.63,235.357 1181.2,234.124 1181.76,232.846 1182.33,231.698 1182.9,231.649 1183.47,232.668 1184.04,230.71 1184.61,229.609 1185.17,230.795 1185.74,233.904 1186.31,234.686 1186.88,234.281 1187.45,235.125 1188.02,233.539 1188.58,234.212 1189.15,236.87 1189.72,236.584 1190.29,238.285 1190.86,236.726 1191.43,237.241 1192,234.481 1192.56,231.968 1193.13,230.697 1193.7,232.507 1194.27,230.357 1194.84,228.164 1195.41,230.294 1195.97,227.399 1196.54,226.493 1197.11,224.669 1197.68,222.984 1198.25,223.575 1198.82,225.847 1199.38,225.048 1199.95,226.377 1200.52,225.694 1201.09,224.981 1201.66,224.287 1202.23,225.777 1202.79,226.036 1203.36,225.236 1203.93,224.342 1204.5,223.523 1205.07,225.236 1205.64,227.75 1206.2,226.863 1206.77,226.187 1207.34,226.544 1207.91,227.065 1208.48,229.428 1209.05,228.59 1209.61,226.859 1210.18,225.986 1210.75,229.412 1211.32,229.511 1211.89,233.733 1212.46,234.543 1213.02,234.246 1213.59,232.09 1214.16,231.906 1214.73,232.039 1215.3,233.006 1215.87,232.565 1216.43,231.392 1217,232.138 1217.57,232.021 1218.14,231.977 1218.71,231.667 1219.28,231.548 1219.84,232.565 1220.41,231.084 1220.98,231.927 1221.55,232.786 1222.12,233.576 1222.69,232.237 1223.25,233.179 1223.82,231.933 1224.39,234.694 1224.96,234.4 1225.53,233.872 1226.1,232.461 1226.66,235.353 1227.23,235.995 1227.8,235.484 1228.37,234.064 1228.94,232.808 1229.51,233.489 1230.07,233.949 1230.64,233.781 1231.21,231.476 1231.78,231.302 1232.35,230.337 1232.92,229.214 1233.48,227.257 1234.05,227.427 1234.62,227.547 1235.19,228.678 1235.76,228.778 1236.33,228.978 1236.89,228.977 1237.46,227.959 1238.03,230.256 1238.6,230.416 1239.17,230.394 1239.74,230.56 1240.3,230.523 1240.87,227.202 1241.44,226.108 1242.01,226.372 1242.58,229.617 1243.15,230.584 1243.71,228.573 1244.28,230.796 1244.85,229.764 1245.42,230.759 1245.99,229.666 1246.56,230.549 1247.12,230.653 1247.69,232.864 1248.26,235.841 1248.83,235.566 1249.4,234.294 1249.97,231.992 1250.53,232.871 1251.1,233.79 1251.67,232.42 1252.24,235.332 1252.81,232.816 1253.38,234.598 1253.94,232.193 1254.51,231.878 1255.08,231.81 1255.65,233.605 1256.22,233.509 1256.79,232.057 1257.35,230.616 1257.92,229.447 1258.49,228.505 1259.06,230.625 1259.63,230.602 1260.2,231.42 1260.76,230.134 1261.33,230.058 1261.9,229.881 1262.47,231.657 1263.04,231.53 1263.61,230.355 1264.18,230.18 1264.74,232.247 1265.31,234.107 1265.88,233.571 1266.45,234.42 1267.02,232.963 1267.59,233.618 1268.15,232.094 1268.72,230.923 1269.29,230.899 1269.86,228.662 1270.43,229.471 1271,230.225 1271.56,230.385 1272.13,232.248 1272.7,231.908 1273.27,231.512 1273.84,230.446 1274.41,228.16 1274.97,227.401 1275.54,228.524 1276.11,227.45 1276.68,227.872 1277.25,228.001 1277.82,229.058 1278.38,231.164 1278.95,228.79 1279.52,227.549 1280.09,227.698 1280.66,227.833 1281.23,228.787 1281.79,229.74 1282.36,229.792 1282.93,228.757 1283.5,227.892 1284.07,226.88 1284.64,228.098 1285.2,227.076 1285.77,228.328 1286.34,227.271 1286.91,226.335 1287.48,227.682 1288.05,227.943 1288.61,228.101 1289.18,228.271 1289.75,228.476 1290.32,230.55 1290.89,231.733 1291.46,231.603 1292.02,231.614 1292.59,230.388 1293.16,230.299 1293.73,231.376 1294.3,233.34 1294.87,233.862 1295.43,233.446 1296,235.051 1296.57,233.723 1297.14,235.349 1297.71,234.863 1298.28,234.563 1298.84,234.149 1299.41,232.7 1299.98,230.17 1300.55,226.909 1301.12,226.619 1301.69,227.907 1302.25,227.976 1302.82,226.962 1303.39,227.121 1303.96,226.108 1304.53,226.351 1305.1,226.568 1305.66,226.716 1306.23,226.898 1306.8,225.986 1307.37,226.176 1307.94,223.515 1308.51,223.942 1309.07,226.141 1309.64,226.339 1310.21,227.454 1310.78,225.546 1311.35,226.962 1311.92,227.219 1312.48,227.544 1313.05,225.466 1313.62,225.909 1314.19,225.335 1314.76,228.788 1315.33,230.837 1315.89,229.658 1316.46,229.885 1317.03,228.647 1317.6,227.752 1318.17,227.955 1318.74,226.067 1319.3,226.333 1319.87,225.8 1320.44,224.251 1321.01,226.908 1321.58,226.173 1322.15,227.277 1322.71,228.464 1323.28,228.704 1323.85,227.66 1324.42,226.848 1324.99,226.914 1325.56,229.14 1326.12,230.285 1326.69,231.258 1327.26,232.295 1327.83,233.032 1328.4,232.873 1328.97,233.684 1329.53,234.473 1330.1,235.046 1330.67,234.797 1331.24,234.591 1331.81,234.346 1332.38,235.023 1332.94,236.675 1333.51,234.979 1334.08,235.544 1334.65,234.111 1335.22,232.688 1335.79,231.399 1336.36,230.938 1336.92,230.046 1337.49,229.791 1338.06,228.642 1338.63,229.761 1339.2,231.865 1339.77,232.6 1340.33,233.2 1340.9,231.965 1341.47,231.392 1342.04,230.208 1342.61,228.007 1343.18,228.987 1343.74,229.878 1344.31,229.804 1344.88,230.778 1345.45,230.941 1346.02,230.718 1346.59,230.496 1347.15,229.316 1347.72,229.334 1348.29,226.272 1348.86,227.624 1349.43,225.619 1350,225.749 1350.56,225.905 1351.13,226.227 1351.7,226.615 1352.27,226.772 1352.84,226.956 1353.41,226.181 1353.97,226.334 1354.54,223.497 1355.11,223.025 1355.68,222.803 1356.25,225.408 1356.82,225.914 1357.38,228.23 1357.95,225.009 1358.52,227.338 1359.09,229.404 1359.66,227.568 1360.23,226.655 1360.79,227.686 1361.36,226.95 1361.93,228.386 1362.5,228.497 1363.07,228.551 1363.64,230.853 1364.2,231.747 1364.77,232.519 1365.34,232.375 1365.91,232.275 1366.48,232.118 1367.05,231.222 1367.61,230.059 1368.18,231.124 1368.75,231.007 1369.32,232.957 1369.89,232.977 1370.46,231.983 1371.02,231.909 1371.59,230.721 1372.16,229.58 1372.73,228.526 1373.3,227.61 1373.87,228.786 1374.43,228.878 1375,227.797 1375.57,227.069 1376.14,227.091 1376.71,227.319 1377.28,227.721 1377.84,228.99 1378.41,229.038 1378.98,230.324 1379.55,226.238 1380.12,225.411 1380.69,226.777 1381.25,229.142 1381.82,228.014 1382.39,226.504 1382.96,226.981 1383.53,228.403 1384.1,228.591 1384.66,228.688 1385.23,230.878 1385.8,230.915 1386.37,230.716 1386.94,229.67 1387.51,230.644 1388.07,229.691 1388.64,229.836 1389.21,228.914 1389.78,228.846 1390.35,228.996 1390.92,229.205 1391.48,229.24 1392.05,230.41 1392.62,230.593 1393.19,229.7 1393.76,229.629 1394.33,228.788 1394.89,226.079 1395.46,225.418 1396.03,223.737 1396.6,224.44 1397.17,226.943 1397.74,228.28 1398.3,229.558 1398.87,228.483 1399.44,226.644 1400.01,226.873 1400.58,225.93 1401.15,226.141 1401.71,224.396 1402.28,223.835 1402.85,224.256 1403.42,226.732 1403.99,226.937 1404.56,228.371 1405.13,229.468 1405.69,229.781 1406.26,230.113 1406.83,230.288 1407.4,229.134 1407.97,227.312 1408.54,228.659 1409.1,231.139 1409.67,230.301 1410.24,230.51 1410.81,230.453 1411.38,229.607 1411.95,230.959 1412.51,230.895 1413.08,231.982 1413.65,231.928 1414.22,231.789 1414.79,232.798 1415.36,234.859 1415.92,234.686 1416.49,235.383 1417.06,233.962 1417.63,234.858 1418.2,234.566 1418.77,234.134 1419.33,233.88 1419.9,233.77 1420.47,232.755 1421.04,232.549 1421.61,231.474 1422.18,232.332 1422.74,233.152 1423.31,235.05 1423.88,232.808 1424.45,232.917 1425.02,231.905 1425.59,229.728 1426.15,228.726 1426.72,228.929 1427.29,229.926 1427.86,227.867 1428.43,228.045 1429,233.48 1429.56,235.409 1430.13,234.065 1430.7,232.693 1431.27,232.63 1431.84,232.518 1432.41,234.208 1432.97,231.63 1433.54,230.496 1434.11,230.53 1434.68,227.233 1435.25,227.451 1435.82,227.765 1436.38,227.966 1436.95,229.188 1437.52,226.278 1438.09,227.59 1438.66,232.125 1439.23,230.07 1439.79,229.03 1440.36,228.083 1440.93,228.31 1441.5,226.252 1442.07,226.518 1442.64,224.878 1443.2,227.371 1443.77,227.559 1444.34,227.662 1444.91,229.818 1445.48,230.922 1446.05,232.856 1446.61,232.894 1447.18,230.579 1447.75,231.768 1448.32,228.613 1448.89,229.748 1449.46,230.753 1450.02,230.693 1450.59,231.554 1451.16,230.261 1451.73,230.073 1452.3,228.842 1452.87,228.789 1453.43,228.865 1454,227.87 1454.57,228.906 1455.14,231.079 1455.71,234.226 1456.28,232.771 1456.84,230.647 1457.41,230.666 1457.98,229.52 1458.55,230.61 1459.12,229.809 1459.69,228.986 1460.25,231.209 1460.82,231.449 1461.39,231.419 1461.96,232.384 1462.53,232.229 1463.1,231.122 1463.66,232.224 1464.23,231.359 1464.8,230.118 1465.37,231.365 1465.94,233.322 1466.51,233.195 1467.07,233.075 1467.64,233.866 1468.21,233.494 1468.78,231.09 1469.35,230.253 1469.92,228.098 1470.48,227.236 1471.05,227.579 1471.62,229.057 1472.19,230.028 1472.76,231.031 1473.33,231.057 1473.89,232.012 1474.46,232.113 1475.03,232.06 1475.6,233.14 1476.17,230.916 1476.74,226.621 1477.31,226.63 1477.87,225.627 1478.44,225.809 1479.01,227.028 1479.58,227.2 1480.15,227.282 1480.72,228.428 1481.28,227.349 1481.85,227.428 1482.42,227.676 1482.99,229.995 1483.56,231.206 1484.13,229.015 1484.69,229.427 1485.26,231.51 1485.83,232.59 1486.4,232.311 1486.97,231.171 1487.54,231.076 1488.1,231.991 1488.67,229.832 1489.24,231.925 1489.81,232.719 1490.38,230.637 1490.95,233.644 1491.51,232.235 1492.08,230.197 1492.65,231.137 1493.22,229.267 1493.79,230.043 1494.36,230.009 1494.92,232.147 1495.49,230.987 1496.06,232.07 1496.63,230.923 1497.2,232.738 1497.77,233.721 1498.33,233.426 1498.9,232.124 1499.47,232.861 1500.04,232.48 1500.61,232.306 1501.18,231.965 1501.74,229.686 1502.31,230.656 1502.88,230.663 1503.45,229.801 1504.02,229.957 1504.59,230.934 1505.15,230.783 1505.72,228.697 1506.29,229.812 1506.86,229.754 1507.43,228.692 1508,229.75 1508.56,230.731 1509.13,231.637 1509.7,230.55 1510.27,230.659 1510.84,230.732 1511.41,229.598 1511.97,229.833 1512.54,232.07 1513.11,232.006 1513.68,233.005 1514.25,232.995 1514.82,231.562 1515.38,228.591 1515.95,229.546 1516.52,228.395 1517.09,228.46 1517.66,228.623 1518.23,230.951 1518.79,231.896 1519.36,231.794 1519.93,234.901 1520.5,236.458 1521.07,234.883 1521.64,232.488 1522.2,233.12 1522.77,233.578 1523.34,232.286 1523.91,233.044 1524.48,233.923 1525.05,233.545 1525.61,232.288 1526.18,232.984 1526.75,232.665 1527.32,233.524 1527.89,235.243 1528.46,235.013 1529.02,235.459 1529.59,236.024 1530.16,233.38 1530.73,233.142 1531.3,230.58 1531.87,228.4 1532.43,230.786 1533,229.526 1533.57,229.519 1534.14,230.42 1534.71,229.502 1535.28,228.484 1535.84,228.546 1536.41,231.481 1536.98,231.246 1537.55,229.129 1538.12,227.835 1538.69,227.414 1539.25,227.311 1539.82,227.616 1540.39,226.51 1540.96,227.473 1541.53,225.576 1542.1,221.655 1542.66,222.067 1543.23,222.435 1543.8,222.521 1544.37,222.065 1544.94,221.434 1545.51,222.897 1546.08,222.424 1546.64,223.949 1547.21,226.682 1547.78,227.908 1548.35,223.911 1548.92,223.391 1549.49,223.981 1550.05,224.389 1550.62,225.767 1551.19,226.028 1551.76,224.275 1552.33,222.922 1552.9,221.486 1553.46,221.979 1554.03,221.699 1554.6,225.428 1555.17,223.641 1555.74,223.111 1556.31,224.813 1556.87,223.379 1557.44,228.176 1558.01,228.604 1558.58,226.904 1559.15,226.334 1559.72,224.51 1560.28,227.872 1560.85,228.308 1561.42,229.537 1561.99,231.67 1562.56,235.901 1563.13,234.496 1563.69,235.289 1564.26,235.885 1564.83,237.657 1565.4,236.185 1565.97,233.864 1566.54,233.802 1567.1,231.473 1567.67,231.552 1568.24,232.742 1568.81,232.562 1569.38,230.194 1569.95,230.283 1570.51,230.375 1571.08,232.446 1571.65,231.129 1572.22,230.082 1572.79,227.816 1573.36,230.123 1573.92,229.429 1574.49,230.687 1575.06,229.706 1575.63,231.81 1576.2,231.804 1576.77,231.686 1577.33,231.6 1577.9,232.661 1578.47,232.371 1579.04,233.302 1579.61,233.331 1580.18,232.197 1580.74,234.09 1581.31,233.037 1581.88,233.009 1582.45,231.826 1583.02,231.002 1583.59,231.87 1584.15,231.523 1584.72,232.529 1585.29,234.414 1585.86,233.048 1586.43,232.827 1587,230.606 1587.56,227.426 1588.13,225.552 1588.7,225.842 1589.27,226.959 1589.84,228.095 1590.41,228.152 1590.97,227.338 1591.54,227.582 1592.11,227.682 1592.68,226.811 1593.25,227.058 1593.82,228.418 1594.38,228.4 1594.95,229.518 1595.52,229.557 1596.09,230.69 1596.66,228.64 1597.23,225.722 1597.79,225.881 1598.36,224.892 1598.93,227.175 1599.5,226.307 1600.07,226.75 1600.64,227.005 1601.2,225.098 1601.77,226.289 1602.34,226.535 1602.91,224.796 1603.48,224.125 1604.05,225.633 1604.61,225.843 1605.18,227.068 1605.75,227.5 1606.32,225.92 1606.89,226.444 1607.46,226.721 1608.02,226.906 1608.59,227.098 1609.16,225.316 1609.73,227.775 1610.3,229.309 1610.87,230.392 1611.43,231.379 1612,232.537 1612.57,234.246 1613.14,233.078 1613.71,232.937 1614.28,233.981 1614.84,234.686 1615.41,233.091 1615.98,230.913 1616.55,231.578 1617.12,232.261 1617.69,232.357 1618.26,233.348 1618.82,231.127 1619.39,234.381 1619.96,236.183 1620.53,239.574 1621.1,240.182 1621.67,239.638 1622.23,240.963 1622.8,238.963 1623.37,238.306 1623.94,238.594 1624.51,238.81 1625.08,238.022 1625.64,238.477 1626.21,238.651 1626.78,235.926 1627.35,235.399 1627.92,231.026 1628.49,230.856 1629.05,230.778 1629.62,231.773 1630.19,234.684 1630.76,234.367 1631.33,233.983 1631.9,233.45 1632.46,232.088 1633.03,230.98 1633.6,228.991 1634.17,230.138 1634.74,229.913 1635.31,229.701 1635.87,230.481 1636.44,230.288 1637.01,230.155 1637.58,229.834 1638.15,229.806 1638.72,228.808 1639.28,229.997 1639.85,230.844 1640.42,230.762 1640.99,231.622 1641.56,231.44 1642.13,229.345 1642.69,228.32 1643.26,226.454 1643.83,226.66 1644.4,226.731 1644.97,228.844 1645.54,230.022 1646.1,228.622 1646.67,229.75 1647.24,229.692 1647.81,231.701 1648.38,232.755 1648.95,231.782 1649.51,232.691 1650.08,232.477 1650.65,233.134 1651.22,232.961 1651.79,231.873 1652.36,230.731 1652.92,231.82 1653.49,229.389 1654.06,230.148 1654.63,230.044 1655.2,229.904 1655.77,228.831 1656.33,226.836 1656.9,227.109 1657.47,227.029 1658.04,224.016 1658.61,224.489 1659.18,224.773 1659.74,228.089 1660.31,230.364 1660.88,230.341 1661.45,231.272 1662.02,227.898 1662.59,230.192 1663.15,229.972 1663.72,230.966 1664.29,230.717 1664.86,229.514 1665.43,232.341 1666,232.16 1666.56,233.02 1667.13,230.698 1667.7,233.597 1668.27,231.27 1668.84,229.995 1669.41,229.689 1669.97,230.535 1670.54,230.475 1671.11,229.448 1671.68,227.153 1672.25,227.01 1672.82,227.36 1673.38,227.603 1673.95,229.662 1674.52,230.466 1675.09,231.384 1675.66,229.064 1676.23,227.966 1676.79,227.91 1677.36,226.752 1677.93,223.538 1678.5,223.839 1679.07,224.384 1679.64,224.467 1680.2,223.738 1680.77,223.852 1681.34,225.203 1681.91,226.555 1682.48,225.753 1683.05,225.169 1683.61,225.541 1684.18,226.936 1684.75,228.25 1685.32,227.299 1685.89,225.257 1686.46,225.59 1687.02,225.142 1687.59,226.524 1688.16,228.015 1688.73,229.035 1689.3,229.2 1689.87,228.147 1690.44,226.342 1691,225.605 1691.57,225.934 1692.14,225.219 1692.71,223.363 1693.28,224.903 1693.85,228.585 1694.41,227.825 1694.98,225.206 1695.55,228.811 1696.12,231.198 1696.69,229.217 1697.26,229.379 1697.82,228.566 1698.39,228.4 1698.96,228.512 1699.53,228.763 1700.1,230.834 1700.67,230.961 1701.23,232.031 1701.8,230.969 1702.37,231.185 1702.94,234.008 1703.51,233.634 1704.08,233.481 1704.64,233.557 1705.21,233.166 1705.78,233.147 1706.35,232.799 1706.92,232.631 1707.49,232.634 1708.05,232.507 1708.62,233.338 1709.19,234.331 1709.76,236.035 1710.33,235.869 1710.9,233.576 1711.46,232.301 1712.03,232.167 1712.6,231.845 1713.17,232.649 1713.74,232.271 1714.31,234.21 1714.87,232.82 1715.44,231.475 1716.01,232.235 1716.58,230.878 1717.15,230.719 1717.72,229.623 1718.28,229.708 1718.85,229.68 1719.42,227.601 1719.99,227.476 1720.56,225.516 1721.13,225.687 1721.69,223.989 1722.26,225.448 1722.83,226.683 1723.4,228.043 1723.97,228.23 1724.54,228.475 1725.1,229.575 1725.67,230.647 1726.24,230.516 1726.81,231.469 1727.38,231.595 1727.95,232.505 1728.51,231.393 1729.08,232.187 1729.65,236.143 1730.22,234.716 1730.79,235.442 1731.36,234.911 1731.92,233.584 1732.49,233.204 1733.06,232.864 1733.63,232.555 1734.2,232.316 1734.77,232.178 1735.33,230.76 1735.9,229.647 1736.47,228.614 1737.04,227.527 1737.61,226.565 1738.18,224.756 1738.74,225.001 1739.31,225.358 1739.88,225.878 1740.45,230.386 1741.02,229.352 1741.59,230.692 1742.15,230.575 1742.72,230.646 1743.29,229.464 1743.86,229.456 1744.43,230.797 1745,230.693 1745.56,230.738 1746.13,230.56 1746.7,230.401 1747.27,232.482 1747.84,233.463 1748.41,232.189 1748.97,232.034 1749.54,230.838 1750.11,230.498 1750.68,232.224 1751.25,229.927 1751.82,231.233 1752.38,231.05 1752.95,230.882 1753.52,230.518 1754.09,230.464 1754.66,229.416 1755.23,229.454 1755.79,225.408 1756.36,225.849 1756.93,227.024 1757.5,227.227 1758.07,227.334 1758.64,228.552 1759.21,229.813 1759.77,231.662 1760.34,231.304 1760.91,231.243 1761.48,230.184 1762.05,230.11 1762.62,228.864 1763.18,226.768 1763.75,228.019 1764.32,227.044 1764.89,228.171 1765.46,228.222 1766.03,230.238 1766.59,227.941 1767.16,226.84 1767.73,228.235 1768.3,228.146 1768.87,224.387 1769.44,225.835 1770,224.235 1770.57,225.7 1771.14,226.072 1771.71,225.323 1772.28,226.687 1772.85,225.051 1773.41,225.473 1773.98,225.763 1774.55,224.977 1775.12,227.456 1775.69,229.807 1776.26,229.869 1776.82,231.161 1777.39,231.95 1777.96,231.805 1778.53,230.818 1779.1,230.665 1779.67,229.593 1780.23,228.753 1780.8,227.931 1781.37,228.308 1781.94,227.531 1782.51,228.911 1783.08,230.474 1783.64,232.377 1784.21,231.372 1784.78,230.187 1785.35,231.126 1785.92,230.097 1786.49,229.018 1787.05,229.088 1787.62,229.198 1788.19,227.137 1788.76,229.373 1789.33,230.325 1789.9,230.479 1790.46,230.255 1791.03,230.522 1791.6,227.58 1792.17,228.805 1792.74,229.08 1793.31,228.119 1793.87,228.36 1794.44,228.374 1795.01,226.513 1795.58,224.852 1796.15,225.314 1796.72,227.012 1797.28,228.247 1797.85,230.487 1798.42,229.412 1798.99,229.522 1799.56,229.543 1800.13,228.713 1800.69,229.883 1801.26,229.928 1801.83,226.949 1802.4,227.289 1802.97,225.644 1803.54,225.056 1804.1,226.394 1804.67,225.72 1805.24,227.188 1805.81,228.558 1806.38,229.765 1806.95,228.746 1807.51,229.369 1808.08,228.49 1808.65,227.459 1809.22,229.771 1809.79,226.941 1810.36,227.265 1810.92,227.472 1811.49,225.643 1812.06,227.102 1812.63,224.566 1813.2,225.099 1813.77,225.622 1814.33,229.1 1814.9,229.409 1815.47,231.741 1816.04,232.767 1816.61,233.871 1817.18,232.777 1817.74,231.674 1818.31,232.752 1818.88,232.971 1819.45,232.116 1820.02,233.91 1820.59,231.736 1821.15,231.689 1821.72,232.73 1822.29,232.8 1822.86,231.682 1823.43,235.8 1824,236.36 1824.56,237.162 1825.13,237.998 1825.7,237.438 1826.27,236.992 1826.84,237.565 1827.41,236.174 1827.97,235.755 1828.54,234.439 1829.11,233.234 1829.68,234.107 1830.25,235.866 1830.82,234.397 1831.39,235 1831.95,235.914 1832.52,235.523 1833.09,234.288 1833.66,235.185 1834.23,234.768 1834.8,235.657 1835.36,235.172 1835.93,233.853 1836.5,232.429 1837.07,232.169 1837.64,234.148 1838.21,235.967 1838.77,235.433 1839.34,234.863 1839.91,232.627 1840.48,235.263 1841.05,234.84 1841.62,235.545 1842.18,236.848 1842.75,235.308 1843.32,233.754 1843.89,231.343 1844.46,230.968 1845.03,232.733 1845.59,234.56 1846.16,234.019 1846.73,233.457 1847.3,232.855 1847.87,231.708 1848.44,229.515 1849,230.468 1849.57,229.205 1850.14,229.143 1850.71,228.144 1851.28,228.31 1851.85,230.211 1852.41,226.964 1852.98,227.164 1853.55,224.097 1854.12,223.285 1854.69,221.483 1855.26,222.935 1855.82,222.223 1856.39,223.725 1856.96,224.141 1857.53,224.354 1858.1,222.431 1858.67,223.973 1859.23,229.284 1859.8,230.198 1860.37,228.31 1860.94,227.219 1861.51,228.334 1862.08,226.194 1862.64,224.338 1863.21,226.761 1863.78,228.083 1864.35,227.26 1864.92,225.291 1865.49,225.454 1866.05,226.841 1866.62,224.885 1867.19,225.189 1867.76,223.359 1868.33,223.884 1868.9,223.332 1869.46,223.774 1870.03,224.18 1870.6,224.664 1871.17,223.993 1871.74,224.446 1872.31,224.744 1872.87,227.252 1873.44,226.574 1874.01,226.808 1874.58,227.089 1875.15,227.288 1875.72,229.68 1876.28,230.786 1876.85,229.823 1877.42,228.794 1877.99,229.979 1878.56,230.998 1879.13,234.099 1879.69,232.869 1880.26,232.651 1880.83,232.441 1881.4,233.433 1881.97,234.049 1882.54,235.92 1883.1,237.652 1883.67,235.24 1884.24,234.804 1884.81,234.488 1885.38,232.899 1885.95,233.562 1886.51,235.419 1887.08,235.845 1887.65,234.43 1888.22,232.925 1888.79,233.595 1889.36,234.08 1889.92,231.591 1890.49,230.283 1891.06,232.009 1891.63,230.692 1892.2,232.689 1892.77,231.59 1893.33,230.272 1893.9,230.15 1894.47,230.952 1895.04,229.728 1895.61,227.773 1896.18,228.777 1896.74,228.808 1897.31,227.812 1897.88,227.989 1898.45,228.061 1899.02,228.071 1899.59,227.104 1900.16,225.169 1900.72,228.452 1901.29,229.889 1901.86,228.784 1902.43,227.788 1903,227.854 1903.57,227.016 1904.13,228.141 1904.7,231.464 1905.27,230.439 1905.84,230.637 1906.41,230.459 1906.98,230.09 1907.54,229.022 1908.11,227.168 1908.68,226.524 1909.25,224.478 1909.82,224.717 1910.39,225.151 1910.95,227.59 1911.52,226.728 1912.09,227.962 1912.66,228.272 1913.23,226.604 1913.8,226.828 1914.36,226.088 1914.93,226.609 1915.5,227.939 1916.07,228.082 1916.64,229.232 1917.21,231.187 1917.77,231.102 1918.34,231.132 1918.91,230.988 1919.48,231.131 1920.05,232.186 1920.62,232.132 1921.18,229.912 1921.75,231.967 1922.32,229.733 1922.89,229.728 1923.46,231.24 1924.03,230.258 1924.59,231.206 1925.16,233.293 1925.73,233.038 1926.3,230.758 1926.87,230.602 1927.44,228.417 1928,227.281 1928.57,228.419 1929.14,228.799 1929.71,226.741 1930.28,225.116 1930.85,225.401 1931.41,225.847 1931.98,226.245 1932.55,226.751 1933.12,229.176 1933.69,232.258 1934.26,231.986 1934.82,231.66 1935.39,231.801 1935.96,231.715 1936.53,230.641 1937.1,229.45 1937.67,230.3 1938.23,230.246 1938.8,231.129 1939.37,232.174 1939.94,231.051 1940.51,233.158 1941.08,234.931 1941.64,236.509 1942.21,237.206 1942.78,237.697 1943.35,236.037 1943.92,234.489 1944.49,234.141 1945.05,232.828 1945.62,232.416 1946.19,233.291 1946.76,232.959 1947.33,233.057 1947.9,232.538 1948.46,232.403 1949.03,231.333 1949.6,233.189 1950.17,231.99 1950.74,231.917 1951.31,231.508 1951.87,230.605 1952.44,229.192 1953.01,231.264 1953.58,231.234 1954.15,230.005 1954.72,230.779 1955.28,228.747 1955.85,227.698 1956.42,225.562 1956.99,226.869 1957.56,224.933 1958.13,225.18 1958.69,224.461 1959.26,225.976 1959.83,228.43 1960.4,230.446 1960.97,232.3 1961.54,234.248 1962.1,232.825 1962.67,233.702 1963.24,229.32 1963.81,229.51 1964.38,229.537 1964.95,230.643 1965.51,230.516 1966.08,228.576 1966.65,231.736 1967.22,232.88 1967.79,231.647 1968.36,231.45 1968.92,232.279 1969.49,228.967 1970.06,227.978 1970.63,226.201 1971.2,228.451 1971.77,229.673 1972.34,231.693 1972.9,230.516 1973.47,230.608 1974.04,230.351 1974.61,227.197 1975.18,227.574 1975.75,228.575 1976.31,228.703 1976.88,229.707 1977.45,230.811 1978.02,231.721 1978.59,231.677 1979.16,231.674 1979.72,231.336 1980.29,229.06 1980.86,225.95 1981.43,225.127 1982,227.655 1982.57,230.925 1983.13,229.866 1983.7,227.782 1984.27,227.921 1984.84,226.074 1985.41,224.162 1985.98,223.46 1986.54,226.056 1987.11,226.412 1987.68,227.66 1988.25,227.999 1988.82,229.377 1989.39,228.473 1989.95,229.585 1990.52,232.77 1991.09,230.643 1991.66,229.649 1992.23,229.631 1992.8,229.673 1993.36,230.614 1993.93,230.713 1994.5,231.711 1995.07,232.521 1995.64,233.214 1996.21,232.768 1996.77,231.506 1997.34,235.44 1997.91,237.126 1998.48,237.381 1999.05,238.773 1999.62,236.941 2000.18,235.264 2000.75,234.84 2001.32,235.562 2001.89,236.073 2002.46,234.562 2003.03,234.997 2003.59,233.476 2004.16,232.011 2004.73,230.796 2005.3,228.315 2005.87,228.301 2006.44,228.441 2007,227.436 2007.57,227.546 2008.14,227.793 2008.71,229.781 2009.28,229.985 2009.85,230.841 2010.41,231.954 2010.98,233.966 2011.55,234.664 2012.12,235.083 2012.69,236.761 2013.26,236.152 2013.82,234.477 2014.39,235.245 2014.96,237.938 2015.53,237.035 2016.1,236.167 2016.67,236.701 2017.23,236.285 2017.8,235.708 2018.37,234.107 2018.94,233.655 2019.51,235.093 2020.08,234.685 2020.64,235.23 2021.21,234.649 2021.78,234.108 2022.35,232.575 2022.92,231.136 2023.49,230.943 2024.05,230.83 2024.62,229.604 2025.19,231.349 2025.76,232.15 2026.33,229.732 2026.9,230.545 2027.46,230.096 2028.03,225.86 2028.6,224.776 2029.17,223.608 2029.74,225.93 2030.31,224.853 2030.87,225.157 2031.44,225.313 2032.01,225.448 2032.58,226.73 2033.15,225.658 2033.72,223.757 2034.28,224.013 2034.85,223.461 2035.42,223.671 2035.99,224.137 2036.56,223.586 2037.13,221.946 2037.69,222.619 2038.26,223.042 2038.83,221.471 2039.4,219.895 2039.97,220.4 2040.54,221.044 2041.11,223.542 2041.67,223.863 2042.24,222.274 2042.81,223.91 2043.38,223.304 2043.95,222.044 2044.52,222.602 2045.08,225.088 2045.65,226.071 2046.22,227.395 2046.79,229.584 2047.36,227.502 2047.93,228.769 2048.49,229.651 2049.06,229.785 2049.63,231.903 2050.2,228.615 2050.77,227.919 2051.34,230.01 2051.9,227.929 2052.47,228.173 2053.04,228.237 2053.61,227.32 2054.18,226.547 2054.75,227.137 2055.31,226.282 2055.88,226.632 2056.45,227.067 2057.02,229.282 2057.59,230.551 2058.16,228.628 2058.72,228.7 2059.29,229.901 2059.86,230.082 2060.43,230.271 2061,229.393 2061.57,228.399 2062.13,227.612 2062.7,227.857 2063.27,227.06 2063.84,227.495 2064.41,227.767 2064.98,226.903 2065.54,227.301 2066.11,229.495 2066.68,228.556 2067.25,231.039 2067.82,230.847 2068.39,230.741 2068.95,232.826 2069.52,232.69 2070.09,233.541 2070.66,235.445 2071.23,236.151 2071.8,233.889 2072.36,231.647 2072.93,230.602 2073.5,231.508 2074.07,227.487 2074.64,226.628 2075.21,227.019 2075.77,228.357 2076.34,229.537 2076.91,230.62 2077.48,231.667 2078.05,229.424 2078.62,230.503 2079.18,227.483 2079.75,226.547 2080.32,227.761 2080.89,226.682 2081.46,226.912 2082.03,228.224 2082.59,228.369 2083.16,227.51 2083.73,226.632 2084.3,227.065 2084.87,227.583 2085.44,227.82 2086,228.964 2086.57,230.122 2087.14,230.272 2087.71,229.325 2088.28,229.45 2088.85,228.635 2089.41,229.531 2089.98,231.686 2090.55,233.684 2091.12,234.36 2091.69,234.133 2092.26,233.063 2092.82,234.857 2093.39,232.545 2093.96,233.193 2094.53,232.914 2095.1,233.761 2095.67,234.561 2096.23,234.218 2096.8,236.256 2097.37,234.851 2097.94,235.948 2098.51,236.805 2099.08,236.102 2099.64,237.707 2100.21,235.902 2100.78,236.326 2101.35,235.772 2101.92,235.499 2102.49,234.199 2103.05,234.998 2103.62,233.558 2104.19,234.447 2104.76,233.001 2105.33,233.307 2105.9,233.927 2106.46,232.73 2107.03,230.232 2107.6,231.023 2108.17,231.709 2108.74,231.363 2109.31,229.24 2109.87,229.324 2110.44,230.241 2111.01,231.349 2111.58,232.201 2112.15,231.782 2112.72,231.373 2113.29,232.25 2113.85,231.852 2114.42,231.703 2114.99,231.511 2115.56,232.422 2116.13,232.538 2116.7,232.153 2117.26,230.996 2117.83,229.717 2118.4,227.73 2118.97,229.783 2119.54,227.907 2120.11,228.691 2120.67,229.548 2121.24,229.387 2121.81,230.411 2122.38,229.47 2122.95,229.299 2123.52,232.201 2124.08,231.199 2124.65,231.011 2125.22,230.948 2125.79,229.887 2126.36,228.732 2126.93,229.691 2127.49,231.751 2128.06,228.383 2128.63,229.543 2129.2,229.554 2129.77,229.48 2130.34,230.27 2130.9,227.968 2131.47,225.881 2132.04,224.976 2132.61,223.307 2133.18,225.791 2133.75,226.042 2134.31,225.028 2134.88,224.387 2135.45,224.787 2136.02,226.319 2136.59,225.396 2137.16,225.701 2137.72,224.804 2138.29,226.284 2138.86,227.558 2139.43,227.687 2140,230.076 2140.57,230.053 2141.13,230.125 2141.7,228.122 2142.27,230.259 2142.84,230.15 2143.41,228.988 2143.98,230.096 2144.54,231.176 2145.11,231.038 2145.68,230.993 2146.25,230.98 2146.82,231.88 2147.39,231.617 2147.95,233.718 2148.52,233.381 2149.09,232.148 2149.66,233.048 2150.23,232.816 2150.8,231.564 2151.36,229.344 2151.93,227.147 2152.5,227.574 2153.07,230.821 2153.64,231.669 2154.21,231.584 2154.77,233.266 2155.34,232.949 2155.91,230.76 2156.48,228.674 2157.05,228.744 2157.62,228.824 2158.18,228.898 2158.75,229.041 2159.32,230.038 2159.89,230.898 \"/>\n<path clip-path=\"url(#clip570)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip570)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip570)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip570)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip570)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip570)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.031 ± 0.024\n  with uncertainty of ± 0.00213048014873939\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01518 ± (0.00300883, 0.00304122) (MC)\n  95% confidence interval: [-4.02163, -4.00945]) (MC)\n  linear error propagation: -4.0153 ± 0.00317761\n  |δ_y| = |0.003233| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.015176203710091, val_l = 0.006458680032269903, val_u = 0.005721308997818753)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip600\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip600)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip601\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip600)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip602\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip602)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip602)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip602)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip602)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip602)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1142.93 2211.02,1142.93 \"/>\n<polyline clip-path=\"url(#clip602)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,976.541 2211.02,976.541 \"/>\n<polyline clip-path=\"url(#clip602)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,810.156 2211.02,810.156 \"/>\n<polyline clip-path=\"url(#clip602)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,643.771 2211.02,643.771 \"/>\n<polyline clip-path=\"url(#clip602)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,477.385 2211.02,477.385 \"/>\n<polyline clip-path=\"url(#clip602)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,311 2211.02,311 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip600)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1142.93 365.751,1142.93 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,976.541 365.751,976.541 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,810.156 365.751,810.156 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,643.771 365.751,643.771 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,477.385 365.751,477.385 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,311 365.751,311 \"/>\n<path clip-path=\"url(#clip600)\" d=\"M298.909 1128.73 Q295.298 1128.73 293.469 1132.29 Q291.664 1135.83 291.664 1142.96 Q291.664 1150.07 293.469 1153.63 Q295.298 1157.17 298.909 1157.17 Q302.543 1157.17 304.349 1153.63 Q306.177 1150.07 306.177 1142.96 Q306.177 1135.83 304.349 1132.29 Q302.543 1128.73 298.909 1128.73 M298.909 1125.02 Q304.719 1125.02 307.775 1129.63 Q310.853 1134.21 310.853 1142.96 Q310.853 1151.69 307.775 1156.29 Q304.719 1160.88 298.909 1160.88 Q293.099 1160.88 290.02 1156.29 Q286.964 1151.69 286.964 1142.96 Q286.964 1134.21 290.02 1129.63 Q293.099 1125.02 298.909 1125.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M259.557 989.886 L267.196 989.886 L267.196 963.521 L258.886 965.187 L258.886 960.928 L267.15 959.261 L271.826 959.261 L271.826 989.886 L279.465 989.886 L279.465 993.821 L259.557 993.821 L259.557 989.886 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M298.909 962.34 Q295.298 962.34 293.469 965.905 Q291.664 969.447 291.664 976.576 Q291.664 983.683 293.469 987.247 Q295.298 990.789 298.909 990.789 Q302.543 990.789 304.349 987.247 Q306.177 983.683 306.177 976.576 Q306.177 969.447 304.349 965.905 Q302.543 962.34 298.909 962.34 M298.909 958.636 Q304.719 958.636 307.775 963.243 Q310.853 967.826 310.853 976.576 Q310.853 985.303 307.775 989.909 Q304.719 994.493 298.909 994.493 Q293.099 994.493 290.02 989.909 Q286.964 985.303 286.964 976.576 Q286.964 967.826 290.02 963.243 Q293.099 958.636 298.909 958.636 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M262.775 823.501 L279.094 823.501 L279.094 827.436 L257.15 827.436 L257.15 823.501 Q259.812 820.746 264.395 816.117 Q269.002 811.464 270.182 810.121 Q272.428 807.598 273.307 805.862 Q274.21 804.103 274.21 802.413 Q274.21 799.658 272.266 797.922 Q270.344 796.186 267.242 796.186 Q265.043 796.186 262.59 796.95 Q260.159 797.714 257.381 799.265 L257.381 794.543 Q260.205 793.408 262.659 792.83 Q265.113 792.251 267.15 792.251 Q272.52 792.251 275.715 794.936 Q278.909 797.621 278.909 802.112 Q278.909 804.242 278.099 806.163 Q277.312 808.061 275.205 810.654 Q274.627 811.325 271.525 814.543 Q268.423 817.737 262.775 823.501 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M298.909 795.955 Q295.298 795.955 293.469 799.519 Q291.664 803.061 291.664 810.191 Q291.664 817.297 293.469 820.862 Q295.298 824.404 298.909 824.404 Q302.543 824.404 304.349 820.862 Q306.177 817.297 306.177 810.191 Q306.177 803.061 304.349 799.519 Q302.543 795.955 298.909 795.955 M298.909 792.251 Q304.719 792.251 307.775 796.857 Q310.853 801.441 310.853 810.191 Q310.853 818.918 307.775 823.524 Q304.719 828.107 298.909 828.107 Q293.099 828.107 290.02 823.524 Q286.964 818.918 286.964 810.191 Q286.964 801.441 290.02 796.857 Q293.099 792.251 298.909 792.251 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M272.914 642.416 Q276.27 643.134 278.145 645.403 Q280.043 647.671 280.043 651.004 Q280.043 656.12 276.525 658.921 Q273.006 661.722 266.525 661.722 Q264.349 661.722 262.034 661.282 Q259.742 660.865 257.289 660.009 L257.289 655.495 Q259.233 656.629 261.548 657.208 Q263.863 657.787 266.386 657.787 Q270.784 657.787 273.076 656.051 Q275.39 654.315 275.39 651.004 Q275.39 647.949 273.238 646.236 Q271.108 644.5 267.289 644.5 L263.261 644.5 L263.261 640.657 L267.474 640.657 Q270.923 640.657 272.752 639.291 Q274.58 637.903 274.58 635.31 Q274.58 632.648 272.682 631.236 Q270.807 629.801 267.289 629.801 Q265.367 629.801 263.168 630.217 Q260.969 630.634 258.33 631.514 L258.33 627.347 Q260.992 626.606 263.307 626.236 Q265.645 625.866 267.705 625.866 Q273.029 625.866 276.131 628.296 Q279.233 630.704 279.233 634.824 Q279.233 637.694 277.59 639.685 Q275.946 641.653 272.914 642.416 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M298.909 629.569 Q295.298 629.569 293.469 633.134 Q291.664 636.676 291.664 643.805 Q291.664 650.912 293.469 654.477 Q295.298 658.018 298.909 658.018 Q302.543 658.018 304.349 654.477 Q306.177 650.912 306.177 643.805 Q306.177 636.676 304.349 633.134 Q302.543 629.569 298.909 629.569 M298.909 625.866 Q304.719 625.866 307.775 630.472 Q310.853 635.055 310.853 643.805 Q310.853 652.532 307.775 657.139 Q304.719 661.722 298.909 661.722 Q293.099 661.722 290.02 657.139 Q286.964 652.532 286.964 643.805 Q286.964 635.055 290.02 630.472 Q293.099 625.866 298.909 625.866 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M271.594 464.179 L259.789 482.628 L271.594 482.628 L271.594 464.179 M270.367 460.105 L276.247 460.105 L276.247 482.628 L281.177 482.628 L281.177 486.517 L276.247 486.517 L276.247 494.665 L271.594 494.665 L271.594 486.517 L255.992 486.517 L255.992 482.003 L270.367 460.105 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M298.909 463.184 Q295.298 463.184 293.469 466.749 Q291.664 470.29 291.664 477.42 Q291.664 484.526 293.469 488.091 Q295.298 491.633 298.909 491.633 Q302.543 491.633 304.349 488.091 Q306.177 484.526 306.177 477.42 Q306.177 470.29 304.349 466.749 Q302.543 463.184 298.909 463.184 M298.909 459.48 Q304.719 459.48 307.775 464.087 Q310.853 468.67 310.853 477.42 Q310.853 486.147 307.775 490.753 Q304.719 495.337 298.909 495.337 Q293.099 495.337 290.02 490.753 Q286.964 486.147 286.964 477.42 Q286.964 468.67 290.02 464.087 Q293.099 459.48 298.909 459.48 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M258.793 293.72 L277.15 293.72 L277.15 297.655 L263.076 297.655 L263.076 306.127 Q264.094 305.78 265.113 305.618 Q266.131 305.433 267.15 305.433 Q272.937 305.433 276.316 308.604 Q279.696 311.775 279.696 317.192 Q279.696 322.771 276.224 325.872 Q272.752 328.951 266.432 328.951 Q264.256 328.951 261.988 328.581 Q259.742 328.21 257.335 327.47 L257.335 322.771 Q259.418 323.905 261.641 324.46 Q263.863 325.016 266.34 325.016 Q270.344 325.016 272.682 322.909 Q275.02 320.803 275.02 317.192 Q275.02 313.581 272.682 311.474 Q270.344 309.368 266.34 309.368 Q264.465 309.368 262.59 309.785 Q260.738 310.201 258.793 311.081 L258.793 293.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M298.909 296.799 Q295.298 296.799 293.469 300.363 Q291.664 303.905 291.664 311.035 Q291.664 318.141 293.469 321.706 Q295.298 325.247 298.909 325.247 Q302.543 325.247 304.349 321.706 Q306.177 318.141 306.177 311.035 Q306.177 303.905 304.349 300.363 Q302.543 296.799 298.909 296.799 M298.909 293.095 Q304.719 293.095 307.775 297.701 Q310.853 302.285 310.853 311.035 Q310.853 319.761 307.775 324.368 Q304.719 328.951 298.909 328.951 Q293.099 328.951 290.02 324.368 Q286.964 319.761 286.964 311.035 Q286.964 302.285 290.02 297.701 Q293.099 293.095 298.909 293.095 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip602)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1020.33 400.199,907.699 400.786,804.358 401.372,709.68 401.958,623.088 402.545,544.05 403.131,472.071 403.718,406.691 404.304,452.675 404.891,394.205 405.477,341.402 406.063,379.645 406.65,333.158 407.236,291.508 407.823,254.381 408.409,289.115 408.995,258.163 409.582,232.303 410.168,261.541 410.755,334.637 411.341,311.44 411.927,290.749 412.514,274.654 413.1,260.43 413.687,247.889 414.273,237.746 414.86,229.835 415.446,225.231 416.032,221.255 416.619,219.895 417.205,220.096 417.792,221.884 418.378,224.178 418.964,228.782 419.551,253.278 420.137,259.362 420.724,267.182 421.31,291.237 421.896,329.579 422.483,366.728 423.069,388.222 423.656,395.126 424.242,415.281 424.829,424.557 425.415,445.324 426.001,465.462 426.588,485.146 427.174,512.311 427.761,523.686 428.347,550.631 428.933,560.744 429.52,571.243 430.106,582.308 430.693,593.94 431.279,610.86 431.865,627.565 432.452,650.249 433.038,671.032 433.625,691.22 434.211,699.778 434.798,713.57 435.384,732.159 435.97,741.095 436.557,754.528 437.143,762.724 437.73,771.611 438.316,779.892 438.902,796.747 439.489,808.708 440.075,821.32 440.662,837.138 441.248,848.325 441.835,855.503 442.421,865.951 443.007,880.033 443.594,893.628 444.18,903.656 444.767,916.72 445.353,923.168 445.939,929.312 446.526,935.726 447.112,947.949 447.699,956.419 448.285,962.206 448.871,973.642 449.458,984.258 450.044,995.048 450.631,1007.64 451.217,1012.33 451.804,1017.11 452.39,1024.14 452.976,1033.62 453.563,1042.91 454.149,1051.69 454.736,1064.7 455.322,1070.82 455.908,1078.41 456.495,1085.99 457.081,1095.39 457.668,1102.17 458.254,1106.85 458.84,1109.35 459.427,1111.78 460.013,1116.44 460.6,1121.08 461.186,1123.37 461.773,1127.75 462.359,1134.03 462.945,1135.88 463.532,1140.03 464.118,1147.45 464.705,1151.1 465.291,1152.8 465.877,1156.62 466.464,1163.42 467.05,1166.75 467.637,1169.77 468.223,1176.18 468.809,1180.56 469.396,1183.67 469.982,1182.55 470.569,1183.66 471.155,1184.56 471.742,1187.01 472.328,1189.43 472.914,1192.11 473.501,1193.12 474.087,1198.65 474.674,1204.09 475.26,1206.03 475.846,1206.38 476.433,1206.71 477.019,1208.56 477.606,1213.33 478.192,1217.93 478.778,1220.7 479.365,1225.08 479.951,1224.5 480.538,1224.31 481.124,1223.69 481.711,1225.07 482.297,1225.96 482.883,1228.97 483.47,1230.05 484.056,1229.46 484.643,1230.45 485.229,1233.07 485.815,1235.32 486.402,1234.5 486.988,1235.43 487.575,1236 488.161,1238.27 488.748,1237.51 489.334,1241.11 489.92,1241.84 490.507,1242.1 491.093,1243.77 491.68,1245.47 492.266,1244.29 492.852,1243.35 493.439,1245.28 494.025,1244.1 494.612,1243 495.198,1242.03 495.784,1239.79 496.371,1241.91 496.957,1241.18 497.544,1238.88 498.13,1242.45 498.717,1241.61 499.303,1245.35 499.889,1241.64 500.476,1245.08 501.062,1244.35 501.649,1243.3 502.235,1242.32 502.821,1243.18 503.408,1242.58 503.994,1241.73 504.581,1239.47 505.167,1237.47 505.753,1237.31 506.34,1239.79 506.926,1239.24 507.513,1240.18 508.099,1239.61 508.686,1239.28 509.272,1239.12 509.858,1238.33 510.445,1236.33 511.031,1237.54 511.618,1237.02 512.204,1236.81 512.79,1237.78 513.377,1236.01 513.963,1237.67 514.55,1238.76 515.136,1237.07 515.722,1238.32 516.309,1242.07 516.895,1241.45 517.482,1239.42 518.068,1238.96 518.655,1242.87 519.241,1241.24 519.827,1240.65 520.414,1239.92 521,1243.7 521.587,1245.97 522.173,1246.68 522.759,1247.13 523.346,1247.75 523.932,1246.94 524.519,1247.57 525.105,1248 525.691,1249.69 526.278,1250.16 526.864,1250.53 527.451,1248.22 528.037,1247.17 528.624,1245.1 529.21,1244.57 529.796,1244.95 530.383,1245.49 530.969,1244.19 531.556,1242.29 532.142,1244.39 532.728,1242.01 533.315,1242.79 533.901,1244.76 534.488,1242.48 535.074,1243.5 535.661,1243.88 536.247,1245.88 536.833,1244.7 537.42,1243.86 538.006,1244.23 538.593,1243.43 539.179,1246.9 539.765,1242.14 540.352,1241.45 540.938,1242.18 541.525,1240.01 542.111,1238.19 542.697,1236.45 543.284,1234.64 543.87,1234.44 544.457,1231.72 545.043,1231.38 545.63,1232.51 546.216,1233.66 546.802,1233.27 547.389,1236.08 547.975,1236.6 548.562,1236.04 549.148,1236.95 549.734,1236.5 550.321,1234.7 550.907,1234.27 551.494,1235.48 552.08,1233.78 552.666,1233.34 553.253,1232.81 553.839,1232.71 554.426,1233.79 555.012,1234.9 555.599,1235.9 556.185,1238.01 556.771,1241.8 557.358,1242.67 557.944,1244.69 558.531,1245.26 559.117,1244.47 559.703,1242.18 560.29,1241.32 560.876,1240.29 561.463,1242.35 562.049,1241.46 562.635,1239.27 563.222,1245.53 563.808,1243.1 564.395,1243.68 564.981,1241.58 565.568,1243.26 566.154,1239.7 566.74,1244.39 567.327,1242.23 567.913,1240.07 568.5,1239.43 569.086,1238.85 569.672,1236.88 570.259,1237.62 570.845,1234.04 571.432,1236.35 572.018,1236.33 572.605,1235.68 573.191,1233.7 573.777,1233.57 574.364,1230.19 574.95,1228.49 575.537,1226.92 576.123,1227.06 576.709,1228.17 577.296,1227.98 577.882,1227.64 578.469,1227.97 579.055,1227.63 579.641,1226.04 580.228,1226.08 580.814,1227.09 581.401,1226.83 581.987,1226.91 582.574,1227.99 583.16,1226.56 583.746,1227.62 584.333,1227.42 584.919,1227.17 585.506,1231.21 586.092,1230.81 586.678,1231.7 587.265,1231.33 587.851,1230.97 588.438,1228.97 589.024,1231.01 589.61,1232.13 590.197,1230.17 590.783,1232.75 591.37,1230.74 591.956,1227.64 592.543,1227.28 593.129,1226.72 593.715,1225.61 594.302,1224.18 594.888,1225.72 595.475,1226.86 596.061,1222.5 596.647,1219.61 597.234,1218.41 597.82,1220.1 598.407,1218.87 598.993,1220.44 599.579,1221.84 600.166,1222.99 600.752,1224.5 601.339,1223.25 601.925,1224.64 602.512,1224.45 603.098,1224.53 603.684,1227 604.271,1228.18 604.857,1229.06 605.444,1229.98 606.03,1229.85 606.616,1232.44 607.203,1232.03 607.789,1231.01 608.376,1231.81 608.962,1231.18 609.548,1230.53 610.135,1230.14 610.721,1229.64 611.308,1230.37 611.894,1230.15 612.481,1231 613.067,1231.94 613.653,1231.46 614.24,1226.88 614.826,1226.6 615.413,1227.79 615.999,1231.52 616.585,1233.61 617.172,1231.45 617.758,1232.12 618.345,1228.99 618.931,1227.16 619.518,1228.13 620.104,1230.56 620.69,1231.31 621.277,1232.27 621.863,1230.32 622.45,1229.62 623.036,1228.83 623.622,1228.42 624.209,1228 624.795,1226.2 625.382,1222.88 625.968,1218.47 626.554,1218.49 627.141,1220.37 627.727,1221.6 628.314,1222.79 628.9,1222.49 629.487,1223.68 630.073,1230.35 630.659,1228.46 631.246,1227.81 631.832,1228.73 632.419,1229.5 633.005,1229.02 633.591,1230.22 634.178,1229.56 634.764,1229.23 635.351,1228.52 635.937,1227.76 636.523,1225.77 637.11,1225.2 637.696,1226.37 638.283,1224.98 638.869,1224.61 639.456,1224.41 640.042,1225.6 640.628,1225.36 641.215,1225.44 641.801,1226.39 642.388,1227.3 642.974,1225.51 643.56,1223.68 644.147,1223.57 644.733,1224.66 645.32,1221.47 645.906,1225.23 646.492,1224.8 647.079,1226.07 647.665,1226.97 648.252,1226.2 648.838,1225.77 649.425,1225.37 650.011,1224.97 650.597,1223.35 651.184,1220.59 651.77,1217.65 652.357,1216.18 652.943,1217.72 653.529,1217.79 654.116,1214.89 654.702,1213.72 655.289,1214 655.875,1215.44 656.462,1215.87 657.048,1215.93 657.634,1217.24 658.221,1218.4 658.807,1218.27 659.394,1215.41 659.98,1216.61 660.566,1216.63 661.153,1216.56 661.739,1216.51 662.326,1216.65 662.912,1213.77 663.498,1215.31 664.085,1218.11 664.671,1217.83 665.258,1216.35 665.844,1217.74 666.431,1219.15 667.017,1221.95 667.603,1221.87 668.19,1223.08 668.776,1222.88 669.363,1225.54 669.949,1225.23 670.535,1222.28 671.122,1220.65 671.708,1219.3 672.295,1219.77 672.881,1222.41 673.467,1224.72 674.054,1224.34 674.64,1225.35 675.227,1224.79 675.813,1225.85 676.4,1224 676.986,1223.37 677.572,1223.14 678.159,1225.39 678.745,1225.01 679.332,1221.89 679.918,1220.35 680.504,1220.36 681.091,1213.46 681.677,1213.56 682.264,1212.84 682.85,1213.24 683.436,1213.43 684.023,1212.42 684.609,1211.13 685.196,1211.6 685.782,1213.35 686.369,1214.98 686.955,1214.91 687.541,1215.2 688.128,1215.08 688.714,1216.5 689.301,1217.9 689.887,1218.16 690.473,1217.93 691.06,1219.23 691.646,1223.1 692.233,1227 692.819,1224.94 693.405,1224.74 693.992,1223.31 694.578,1220.29 695.165,1218.79 695.751,1218.53 696.338,1218.28 696.924,1216.98 697.51,1218.28 698.097,1223.37 698.683,1224.39 699.27,1224.02 699.856,1225.03 700.442,1224.52 701.029,1224.15 701.615,1224.95 702.202,1225.8 702.788,1227.94 703.375,1227.24 703.961,1226.51 704.547,1224.38 705.134,1223.91 705.72,1223.54 706.307,1225.43 706.893,1226.08 707.479,1221.44 708.066,1221.13 708.652,1221.05 709.239,1220.93 709.825,1220.79 710.411,1223.43 710.998,1224.43 711.584,1224.37 712.171,1223.93 712.757,1219.56 713.344,1217.65 713.93,1220.45 714.516,1222.81 715.103,1221.06 715.689,1222.11 716.276,1223.34 716.862,1224.69 717.448,1224.3 718.035,1221.15 718.621,1222.24 719.208,1221.91 719.794,1219.89 720.38,1221.11 720.967,1220.86 721.553,1220.18 722.14,1218.5 722.726,1215.59 723.313,1217.21 723.899,1215.69 724.485,1215.5 725.072,1214.12 725.658,1214.12 726.245,1215.67 726.831,1216.49 727.417,1212.37 728.004,1209.85 728.59,1209.86 729.177,1210.02 729.763,1210.36 730.349,1209.19 730.936,1210.64 731.522,1210.52 732.109,1209.36 732.695,1211.01 733.282,1205.87 733.868,1203.54 734.454,1205.52 735.041,1203.33 735.627,1204.05 736.214,1207.62 736.8,1206.78 737.386,1207.16 737.973,1209.1 738.559,1206.61 739.146,1205.7 739.732,1206.42 740.318,1206.57 740.905,1207 741.491,1208.66 742.078,1208.9 742.664,1207.92 743.251,1210.94 743.837,1212.44 744.423,1215.42 745.01,1212.72 745.596,1212.91 746.183,1212.8 746.769,1211.73 747.355,1211.94 747.942,1210.82 748.528,1213.58 749.115,1213.87 749.701,1214 750.288,1214.89 750.874,1213.35 751.46,1211.95 752.047,1210.64 752.633,1212.31 753.22,1212.84 753.806,1213.19 754.392,1211.87 754.979,1212.18 755.565,1214.66 756.152,1216.09 756.738,1218.98 757.324,1221.56 757.911,1221.13 758.497,1219.51 759.084,1219.42 759.67,1218 760.257,1219.26 760.843,1216.41 761.429,1213.74 762.016,1214.08 762.602,1212.86 763.189,1211.52 763.775,1210.16 764.361,1210.52 764.948,1205.17 765.534,1207.1 766.121,1211.66 766.707,1210.47 767.293,1210.7 767.88,1210.5 768.466,1213.24 769.053,1213.43 769.639,1213.51 770.226,1213.51 770.812,1213.45 771.398,1214.98 771.985,1214.7 772.571,1214.55 773.158,1212.08 773.744,1214.91 774.33,1214.62 774.917,1213.09 775.503,1214.31 776.09,1215.55 776.676,1216.51 777.262,1216.29 777.849,1215.09 778.435,1216.24 779.022,1217.29 779.608,1216.03 780.195,1215.94 780.781,1215.52 781.367,1215.49 781.954,1215.86 782.54,1212.65 783.127,1215.53 783.713,1216.92 784.299,1218.08 784.886,1219.07 785.472,1218.62 786.059,1215.42 786.645,1216.48 787.232,1217.98 787.818,1217.57 788.404,1214.84 788.991,1218.79 789.577,1218.49 790.164,1215.54 790.75,1213.87 791.336,1212.3 791.923,1212.41 792.509,1212.43 793.096,1213.78 793.682,1214 794.268,1213.98 794.855,1211.52 795.441,1211.46 796.028,1211.9 796.614,1213.33 797.201,1212.91 797.787,1212.84 798.373,1211.32 798.96,1211.27 799.546,1214.2 800.133,1215.75 800.719,1217.3 801.305,1216.99 801.892,1218.19 802.478,1216.59 803.065,1218.94 803.651,1218.33 804.237,1219.45 804.824,1220.69 805.41,1220.17 805.997,1220.93 806.583,1221.89 807.17,1224.24 807.756,1223.41 808.342,1225.58 808.929,1223.52 809.515,1222.67 810.102,1224.74 810.688,1222.7 811.274,1220.74 811.861,1219.01 812.447,1218.67 813.034,1220.92 813.62,1219.19 814.206,1219.86 814.793,1224.52 815.379,1225.56 815.966,1227.61 816.552,1226.61 817.139,1228.58 817.725,1227.88 818.311,1226.93 818.898,1226.27 819.484,1225.61 820.071,1226.22 820.657,1224.01 821.243,1224.84 821.83,1224.2 822.416,1223.39 823.003,1224.2 823.589,1224.94 824.175,1226.87 824.762,1224.62 825.348,1221.27 825.935,1219.56 826.521,1217.9 827.108,1217.53 827.694,1215.9 828.28,1218.37 828.867,1219.22 829.453,1216.27 830.04,1216.03 830.626,1212.97 831.212,1211.55 831.799,1210.47 832.385,1211.72 832.972,1211.63 833.558,1211.47 834.145,1211.18 834.731,1211.33 835.317,1209.79 835.904,1206.87 836.49,1208.45 837.077,1208.51 837.663,1208.61 838.249,1206.03 838.836,1205.06 839.422,1205.17 840.009,1206.82 840.595,1204.4 841.181,1207.4 841.768,1209.03 842.354,1212.14 842.941,1213.55 843.527,1213.26 844.114,1213.56 844.7,1213.48 845.286,1210.78 845.873,1213.53 846.459,1212 847.046,1213.22 847.632,1216.07 848.218,1216.97 848.805,1216.66 849.391,1216.42 849.978,1217.63 850.564,1214.69 851.15,1215.89 851.737,1214.59 852.323,1213.37 852.91,1211.96 853.496,1212.06 854.083,1210.82 854.669,1209.57 855.255,1209.81 855.842,1208.49 856.428,1211.5 857.015,1212.71 857.601,1212.8 858.187,1211.53 858.774,1208.77 859.36,1207.47 859.947,1207.73 860.533,1206.58 861.119,1206.76 861.706,1208.33 862.292,1205.9 862.879,1204.84 863.465,1203.38 864.052,1205.12 864.638,1207.93 865.224,1206.62 865.811,1205.39 866.397,1203.26 866.984,1202.62 867.57,1203.07 868.156,1208.65 868.743,1207.79 869.329,1204.98 869.916,1206.54 870.502,1208.35 871.089,1211.23 871.675,1209.94 872.261,1210.03 872.848,1210.09 873.434,1210.47 874.021,1211.64 874.607,1211.64 875.193,1212.98 875.78,1214.03 876.366,1212.68 876.953,1215.28 877.539,1213.91 878.125,1213.91 878.712,1211.24 879.298,1209.99 879.885,1210.06 880.471,1206.15 881.058,1207.95 881.644,1208.13 882.23,1204.16 882.817,1204.59 883.403,1206.28 883.99,1209.41 884.576,1208.25 885.162,1208.45 885.749,1210.04 886.335,1210.07 886.922,1209.98 887.508,1207.39 888.094,1207.6 888.681,1211.64 889.267,1211.57 889.854,1213.1 890.44,1212.96 891.027,1212.78 891.613,1211.21 892.199,1210.98 892.786,1212.55 893.372,1212.35 893.959,1211.16 894.545,1211 895.131,1209.45 895.718,1208.35 896.304,1208.53 896.891,1207.5 897.477,1207.75 898.063,1207.81 898.65,1210.92 899.236,1210.15 899.823,1211.57 900.409,1214.35 900.996,1215.28 901.582,1216.5 902.168,1214.84 902.755,1218.43 903.341,1219.3 903.928,1220.29 904.514,1221.27 905.1,1219.3 905.687,1219.04 906.273,1217.21 906.86,1216.96 907.446,1215.31 908.032,1218.07 908.619,1216.47 909.205,1216.18 909.792,1218.58 910.378,1215.56 910.965,1212.77 911.551,1212.51 912.137,1212.75 912.724,1213.81 913.31,1215.3 913.897,1215.02 914.483,1216.45 915.069,1216.25 915.656,1217.45 916.242,1216.92 916.829,1216.54 917.415,1215 918.002,1214.85 918.588,1214.32 919.174,1214.3 919.761,1214.25 920.347,1214.06 920.934,1213.55 921.52,1213.55 922.106,1209.33 922.693,1209.28 923.279,1206.71 923.866,1206.78 924.452,1205.53 925.038,1204.21 925.625,1203.33 926.211,1202.59 926.798,1207.41 927.384,1204.97 927.971,1202.54 928.557,1202.73 929.143,1201.59 929.73,1203.45 930.316,1206.67 930.903,1208.42 931.489,1208.71 932.075,1204.69 932.662,1204.98 933.248,1208.05 933.835,1208.19 934.421,1212.33 935.007,1211.27 935.594,1209.92 936.18,1210.08 936.767,1211.49 937.353,1210.21 937.94,1208.5 938.526,1207.14 939.112,1204.41 939.699,1204.74 940.285,1203.73 940.872,1204.13 941.458,1204.23 942.044,1205.82 942.631,1207.53 943.217,1207.54 943.804,1207.54 944.39,1207.54 944.976,1208.98 945.563,1207.97 946.149,1207.92 946.736,1208.12 947.322,1206.74 947.909,1210.77 948.495,1209.11 949.081,1210.37 949.668,1213.11 950.254,1210.39 950.841,1209.23 951.427,1202.59 952.013,1201.64 952.6,1203.72 953.186,1204.46 953.773,1207.31 954.359,1210.23 954.945,1207.39 955.532,1207.7 956.118,1209.47 956.705,1204.14 957.291,1203.3 957.878,1199.96 958.464,1200.54 959.05,1203.84 959.637,1204.31 960.223,1206.41 960.81,1205.39 961.396,1210.03 961.982,1208.77 962.569,1207.59 963.155,1206.64 963.742,1205.17 964.328,1206.88 964.915,1208.45 965.501,1208.58 966.087,1211.23 966.674,1211.12 967.26,1213.79 967.847,1213.78 968.433,1213.75 969.019,1210.87 969.606,1212.07 970.192,1212.08 970.779,1211.94 971.365,1214.58 971.951,1214.47 972.538,1214.46 973.124,1215.16 973.711,1213.61 974.297,1212.1 974.884,1210.77 975.47,1210.68 976.056,1211.91 976.643,1210.59 977.229,1210.72 977.816,1209.22 978.402,1210.68 978.988,1206.97 979.575,1204.77 980.161,1206.76 980.748,1205.48 981.334,1203.05 981.92,1203.49 982.507,1203.83 983.093,1205.66 983.68,1204.56 984.266,1205.91 984.853,1207.64 985.439,1206.5 986.025,1206.65 986.612,1208.13 987.198,1208.17 987.785,1207.05 988.371,1207.23 988.957,1210.2 989.544,1210.07 990.13,1212.73 990.717,1212.5 991.303,1212.15 991.889,1211.84 992.476,1211.98 993.062,1213.34 993.649,1209.04 994.235,1209.2 994.822,1209.56 995.408,1212.38 995.994,1212.17 996.581,1210.41 997.167,1211.7 997.754,1213.22 998.34,1213.34 998.926,1215.95 999.513,1215.76 1000.1,1216.97 1000.69,1215.55 1001.27,1216.74 1001.86,1213.7 1002.44,1212.23 1003.03,1212.24 1003.62,1212.34 1004.2,1212.26 1004.79,1211.99 1005.38,1210.7 1005.96,1210.9 1006.55,1206.82 1007.14,1209.76 1007.72,1212.39 1008.31,1209.63 1008.9,1212.32 1009.48,1209.84 1010.07,1210.01 1010.65,1207.39 1011.24,1208.97 1011.83,1210.57 1012.41,1211.87 1013,1210.4 1013.59,1210.62 1014.17,1211.72 1014.76,1211.66 1015.35,1210.33 1015.93,1210.58 1016.52,1210.43 1017.11,1211.65 1017.69,1211.58 1018.28,1211.2 1018.86,1211.01 1019.45,1212.44 1020.04,1215.31 1020.62,1212.29 1021.21,1209.63 1021.8,1209.53 1022.38,1210.95 1022.97,1210.83 1023.56,1210.75 1024.14,1209.41 1024.73,1209.31 1025.32,1210.74 1025.9,1212.28 1026.49,1208.16 1027.07,1206.75 1027.66,1208.21 1028.25,1207.05 1028.83,1205.83 1029.42,1204.54 1030.01,1206.39 1030.59,1206.68 1031.18,1209.65 1031.77,1211.05 1032.35,1209.42 1032.94,1205.19 1033.52,1202.4 1034.11,1202.85 1034.7,1204.67 1035.28,1206.29 1035.87,1206.48 1036.46,1207 1037.04,1205.87 1037.63,1204.69 1038.22,1208.95 1038.8,1206.12 1039.39,1205.02 1039.98,1206.59 1040.56,1206.55 1041.15,1205.39 1041.73,1207.07 1042.32,1207.35 1042.91,1209.15 1043.49,1207.83 1044.08,1209.23 1044.67,1210.67 1045.25,1212.21 1045.84,1213.62 1046.43,1212.3 1047.01,1210.72 1047.6,1212.16 1048.19,1211.08 1048.77,1212.35 1049.36,1213.6 1049.94,1213.26 1050.53,1215.78 1051.12,1215.83 1051.7,1215.42 1052.29,1217.86 1052.88,1220.11 1053.46,1219.65 1054.05,1217.67 1054.64,1218.69 1055.22,1218.33 1055.81,1216.33 1056.39,1214.55 1056.98,1211.42 1057.57,1207.28 1058.15,1208.83 1058.74,1209.26 1059.33,1210.68 1059.91,1211.78 1060.5,1214.32 1061.09,1213.93 1061.67,1212.48 1062.26,1215.02 1062.85,1216.55 1063.43,1214.8 1064.02,1214.6 1064.6,1214.5 1065.19,1216.9 1065.78,1217.85 1066.36,1216.07 1066.95,1215.49 1067.54,1212.71 1068.12,1213.6 1068.71,1211.91 1069.3,1212.92 1069.88,1211.24 1070.47,1216.38 1071.06,1217.62 1071.64,1220.18 1072.23,1218.29 1072.81,1217.99 1073.4,1216.2 1073.99,1215.58 1074.57,1215.26 1075.16,1212.07 1075.75,1213.1 1076.33,1213.07 1076.92,1215.57 1077.51,1216.43 1078.09,1214.63 1078.68,1213.1 1079.26,1210.27 1079.85,1208.91 1080.44,1203.59 1081.02,1202.93 1081.61,1201.68 1082.2,1199.48 1082.78,1202.64 1083.37,1204.42 1083.96,1207.55 1084.54,1207.6 1085.13,1207.6 1085.72,1203.34 1086.3,1202.26 1086.89,1202.4 1087.47,1202.68 1088.06,1204.5 1088.65,1206.12 1089.23,1207.47 1089.82,1207.63 1090.41,1207.72 1090.99,1206.38 1091.58,1206.51 1092.17,1206.76 1092.75,1205.72 1093.34,1204.7 1093.93,1206.36 1094.51,1209.35 1095.1,1209.34 1095.68,1205.23 1096.27,1209.35 1096.86,1209.55 1097.44,1209.5 1098.03,1207.07 1098.62,1205.83 1099.2,1204.79 1099.79,1207.96 1100.38,1208.31 1100.96,1206.86 1101.55,1206.73 1102.14,1205.75 1102.72,1206.22 1103.31,1207.94 1103.89,1208.06 1104.48,1208.41 1105.07,1208.23 1105.65,1208.26 1106.24,1208.29 1106.83,1211.16 1107.41,1209.6 1108,1207.04 1108.59,1207.27 1109.17,1208.97 1109.76,1211.41 1110.34,1210.06 1110.93,1210.21 1111.52,1209.05 1112.1,1210.38 1112.69,1210.34 1113.28,1211.76 1113.86,1210.37 1114.45,1211.81 1115.04,1215.69 1115.62,1213.94 1116.21,1212.09 1116.8,1210.61 1117.38,1213.15 1117.97,1212.96 1118.55,1212.61 1119.14,1215.14 1119.73,1216.23 1120.31,1217.24 1120.9,1218.06 1121.49,1221.9 1122.07,1219.84 1122.66,1220.7 1123.25,1218.63 1123.83,1218.3 1124.42,1219.14 1125.01,1218.69 1125.59,1220.99 1126.18,1223.2 1126.76,1220.08 1127.35,1219.54 1127.94,1219.24 1128.52,1219.87 1129.11,1219.23 1129.7,1218.68 1130.28,1216.89 1130.87,1215.15 1131.46,1214.88 1132.04,1213.17 1132.63,1212.82 1133.21,1210.05 1133.8,1211.46 1134.39,1214.09 1134.97,1215.22 1135.56,1215.89 1136.15,1214.13 1136.73,1213.73 1137.32,1213.36 1137.91,1213.06 1138.49,1215.48 1139.08,1215.17 1139.67,1214.91 1140.25,1213.4 1140.84,1211.89 1141.42,1213.19 1142.01,1212.73 1142.6,1211.28 1143.18,1209.66 1143.77,1209.73 1144.36,1205.72 1144.94,1207.32 1145.53,1204.97 1146.12,1203.92 1146.7,1205.19 1147.29,1204.24 1147.88,1204.86 1148.46,1206.35 1149.05,1207.93 1149.63,1209.37 1150.22,1209.39 1150.81,1207.99 1151.39,1210.51 1151.98,1211.94 1152.57,1210.38 1153.15,1206.25 1153.74,1205.12 1154.33,1205.53 1154.91,1204.3 1155.5,1206.26 1156.09,1205.27 1156.67,1201.64 1157.26,1201.84 1157.84,1199.41 1158.43,1201.26 1159.02,1200.4 1159.6,1203.87 1160.19,1207.07 1160.78,1208.69 1161.36,1206.28 1161.95,1209.05 1162.54,1211.92 1163.12,1209.17 1163.71,1212.96 1164.29,1214.22 1164.88,1216.7 1165.47,1219.04 1166.05,1218.44 1166.64,1215.63 1167.23,1216.78 1167.81,1215.16 1168.4,1216.15 1168.99,1217.19 1169.57,1218.23 1170.16,1216.42 1170.75,1216.18 1171.33,1217.33 1171.92,1218.62 1172.5,1219.84 1173.09,1217.76 1173.68,1214.58 1174.26,1215.8 1174.85,1216.77 1175.44,1216.39 1176.02,1215.79 1176.61,1212.76 1177.2,1213.87 1177.78,1216.18 1178.37,1217.41 1178.96,1213.01 1179.54,1212.89 1180.13,1207.33 1180.71,1206.16 1181.3,1206.43 1181.89,1209.16 1182.47,1209.35 1183.06,1209.12 1183.65,1207.79 1184.23,1208.29 1184.82,1209.77 1185.41,1208.75 1185.99,1208.84 1186.58,1208.85 1187.16,1209.2 1187.75,1209.31 1188.34,1207.93 1188.92,1209.81 1189.51,1208.67 1190.1,1207.48 1190.68,1206.37 1191.27,1208.04 1191.86,1206.73 1192.44,1208.29 1193.03,1204.59 1193.62,1204.86 1194.2,1205.44 1194.79,1207.2 1195.37,1203.31 1195.96,1202.32 1196.55,1202.84 1197.13,1204.57 1197.72,1206.12 1198.31,1205.15 1198.89,1204.45 1199.48,1204.56 1200.07,1207.51 1200.65,1207.7 1201.24,1208.93 1201.83,1210.4 1202.41,1212.99 1203,1212.83 1203.58,1212.74 1204.17,1211.31 1204.76,1211.21 1205.34,1210.98 1205.93,1211 1206.52,1212.36 1207.1,1209.39 1207.69,1209.17 1208.28,1209.19 1208.86,1208.96 1209.45,1208.99 1210.03,1213.34 1210.62,1214.84 1211.21,1214.6 1211.79,1210.42 1212.38,1209.16 1212.97,1211.78 1213.55,1208.89 1214.14,1210.23 1214.73,1208.92 1215.31,1210.34 1215.9,1209.18 1216.49,1209.03 1217.07,1206.09 1217.66,1202.07 1218.24,1202.28 1218.83,1203.82 1219.42,1206.75 1220,1205.53 1220.59,1204.24 1221.18,1205.95 1221.76,1202.04 1222.35,1205.22 1222.94,1202.79 1223.52,1205.85 1224.11,1206.2 1224.7,1206.24 1225.28,1203.82 1225.87,1203.85 1226.45,1205.68 1227.04,1207.52 1227.63,1209.04 1228.21,1210.29 1228.8,1207.54 1229.39,1207.55 1229.97,1206.45 1230.56,1208.11 1231.15,1208.2 1231.73,1208.43 1232.32,1206.09 1232.91,1206.21 1233.49,1207.72 1234.08,1207.94 1234.66,1205.2 1235.25,1202.68 1235.84,1203.28 1236.42,1202.07 1237.01,1203.87 1237.6,1202.93 1238.18,1204.85 1238.77,1206.33 1239.36,1206.34 1239.94,1209.26 1240.53,1208.23 1241.11,1207.24 1241.7,1207.02 1242.29,1204.55 1242.87,1204.94 1243.46,1205.41 1244.05,1206.77 1244.63,1209.77 1245.22,1210.81 1245.81,1209.4 1246.39,1210.85 1246.98,1210.35 1247.57,1210.24 1248.15,1208.9 1248.74,1206.14 1249.32,1209.24 1249.91,1210.9 1250.5,1210.76 1251.08,1210.64 1251.67,1209.44 1252.26,1208.21 1252.84,1208.15 1253.43,1209.51 1254.02,1210.68 1254.6,1212.06 1255.19,1210.54 1255.78,1211.93 1256.36,1210.36 1256.95,1211.78 1257.53,1213.08 1258.12,1211.4 1258.71,1211.12 1259.29,1210.96 1259.88,1210.78 1260.47,1210.56 1261.05,1207.86 1261.64,1206.28 1262.23,1206.41 1262.81,1206.35 1263.4,1207.92 1263.98,1208.03 1264.57,1206.6 1265.16,1203.96 1265.74,1203.19 1266.33,1203.63 1266.92,1201.42 1267.5,1203.04 1268.09,1200.79 1268.68,1201.29 1269.26,1201.56 1269.85,1201.99 1270.44,1203.79 1271.02,1207.06 1271.61,1211.34 1272.19,1211.8 1272.78,1210.19 1273.37,1210.15 1273.95,1211.53 1274.54,1211.4 1275.13,1212.8 1275.71,1212.58 1276.3,1212.38 1276.89,1212.27 1277.47,1212.12 1278.06,1213.39 1278.65,1213.24 1279.23,1216.83 1279.82,1216.43 1280.4,1213.7 1280.99,1213.54 1281.58,1212.17 1282.16,1214.73 1282.75,1212.99 1283.34,1212.72 1283.92,1212.37 1284.51,1215.15 1285.1,1214.69 1285.68,1215.54 1286.27,1211.13 1286.86,1208.46 1287.44,1209.98 1288.03,1209.69 1288.61,1211.32 1289.2,1212.53 1289.79,1212.32 1290.37,1214.85 1290.96,1214.6 1291.55,1215.39 1292.13,1217.52 1292.72,1214.18 1293.31,1215.23 1293.89,1213.87 1294.48,1212.38 1295.06,1212.1 1295.65,1213.5 1296.24,1214.63 1296.82,1214.62 1297.41,1211.77 1298,1210.28 1298.58,1208.99 1299.17,1207.58 1299.76,1206.55 1300.34,1206.68 1300.93,1205.53 1301.52,1204.39 1302.1,1203.51 1302.69,1203.71 1303.27,1203.85 1303.86,1204.06 1304.45,1203.04 1305.03,1200.72 1305.62,1202.79 1306.21,1201.91 1306.79,1203.66 1307.38,1205.44 1307.97,1207.06 1308.55,1207.63 1309.14,1208.78 1309.73,1209.11 1310.31,1210.63 1310.9,1209.19 1311.48,1206.42 1312.07,1205.4 1312.66,1204.53 1313.24,1206.08 1313.83,1206.78 1314.42,1208.3 1315,1211.19 1315.59,1209.95 1316.18,1208.8 1316.76,1208.9 1317.35,1207.62 1317.93,1207.38 1318.52,1207.65 1319.11,1207.92 1319.69,1209.46 1320.28,1209.45 1320.87,1213.49 1321.45,1211.8 1322.04,1214.5 1322.63,1214.43 1323.21,1214.34 1323.8,1214.02 1324.39,1213.6 1324.97,1213.48 1325.56,1213.32 1326.14,1214.41 1326.73,1214.31 1327.32,1218.12 1327.9,1218.9 1328.49,1219.36 1329.08,1216.14 1329.66,1215.59 1330.25,1212.65 1330.84,1216.92 1331.42,1213.99 1332.01,1211.34 1332.6,1213.77 1333.18,1215.03 1333.77,1213.75 1334.35,1214.78 1334.94,1212.97 1335.53,1212.86 1336.11,1212.82 1336.7,1209.83 1337.29,1208.62 1337.87,1207.56 1338.46,1207.68 1339.05,1207.75 1339.63,1207.89 1340.22,1209.02 1340.8,1210.51 1341.39,1209.11 1341.98,1209.23 1342.56,1206.63 1343.15,1206.52 1343.74,1207.75 1344.32,1207.8 1344.91,1209.31 1345.5,1210.79 1346.08,1212.19 1346.67,1213.43 1347.26,1211.94 1347.84,1211.85 1348.43,1213.3 1349.01,1214.31 1349.6,1214.35 1350.19,1214.12 1350.77,1213.66 1351.36,1212.05 1351.95,1212.01 1352.53,1210.34 1353.12,1215.7 1353.71,1216.88 1354.29,1215.2 1354.88,1212.17 1355.47,1213.67 1356.05,1215.71 1356.64,1215.17 1357.22,1213.37 1357.81,1213.16 1358.4,1213.07 1358.98,1210.22 1359.57,1210.14 1360.16,1210.38 1360.74,1211.74 1361.33,1210.46 1361.92,1211.69 1362.5,1211.51 1363.09,1212.72 1363.68,1212.84 1364.26,1212.67 1364.85,1212.42 1365.43,1212.39 1366.02,1210.86 1366.61,1210.61 1367.19,1211.77 1367.78,1211.87 1368.37,1212.98 1368.95,1216.57 1369.54,1217.53 1370.13,1219.85 1370.71,1219.09 1371.3,1215.94 1371.88,1214.26 1372.47,1212.62 1373.06,1214.05 1373.64,1216.5 1374.23,1216.28 1374.82,1217.6 1375.4,1217.42 1375.99,1219.81 1376.58,1220.68 1377.16,1220.29 1377.75,1217.19 1378.34,1217 1378.92,1215.19 1379.51,1213.79 1380.09,1213.39 1380.68,1212.95 1381.27,1212.71 1381.85,1214.22 1382.44,1216.64 1383.03,1214.93 1383.61,1211.7 1384.2,1212.77 1384.79,1212.49 1385.37,1212.55 1385.96,1213.65 1386.55,1211.87 1387.13,1211.93 1387.72,1210.47 1388.3,1210.49 1388.89,1210.62 1389.48,1209.24 1390.06,1206.44 1390.65,1206.54 1391.24,1205.49 1391.82,1207.23 1392.41,1205.94 1393,1206.19 1393.58,1206.65 1394.17,1206.87 1394.75,1206.91 1395.34,1208.15 1395.93,1208.35 1396.51,1209.7 1397.1,1208.53 1397.69,1207.38 1398.27,1204.79 1398.86,1207.62 1399.45,1207.4 1400.03,1208.66 1400.62,1211.47 1401.21,1212.8 1401.79,1212.56 1402.38,1211.27 1402.96,1213.98 1403.55,1213.8 1404.14,1206.68 1404.72,1204.04 1405.31,1205.67 1405.9,1207.38 1406.48,1207.39 1407.07,1207.47 1407.66,1205.17 1408.24,1208.46 1408.83,1209.91 1409.42,1209.85 1410,1214.17 1410.59,1213.95 1411.17,1213.6 1411.76,1213.39 1412.35,1211.83 1412.93,1215.68 1413.52,1214.05 1414.11,1208.13 1414.69,1210.79 1415.28,1212.15 1415.87,1213.42 1416.45,1213.17 1417.04,1215.91 1417.63,1215.66 1418.21,1217.89 1418.8,1214.75 1419.38,1214.57 1419.97,1214.49 1420.56,1211.72 1421.14,1210.26 1421.73,1207.68 1422.32,1207.56 1422.9,1210.53 1423.49,1208.95 1424.08,1213.06 1424.66,1211.6 1425.25,1210.27 1425.83,1210.33 1426.42,1209.18 1427.01,1210.84 1427.59,1211.07 1428.18,1212.69 1428.77,1212.79 1429.35,1212.72 1429.94,1214.05 1430.53,1212.74 1431.11,1209.9 1431.7,1205.72 1432.29,1207.53 1432.87,1210.26 1433.46,1210.21 1434.04,1211.7 1434.63,1210.27 1435.22,1211.31 1435.8,1212.4 1436.39,1209.49 1436.98,1209.14 1437.56,1209.14 1438.15,1207.83 1438.74,1207.97 1439.32,1209.37 1439.91,1207.88 1440.5,1208.96 1441.08,1210.56 1441.67,1208.91 1442.25,1206.29 1442.84,1206.37 1443.43,1206.44 1444.01,1205.31 1444.6,1205.7 1445.19,1208.78 1445.77,1209.86 1446.36,1212.68 1446.95,1213.86 1447.53,1213.48 1448.12,1211.59 1448.7,1210.34 1449.29,1209.01 1449.88,1208.95 1450.46,1207.66 1451.05,1207.47 1451.64,1207.48 1452.22,1206 1452.81,1208.85 1453.4,1214.48 1453.98,1214.55 1454.57,1215.95 1455.16,1215.82 1455.74,1214.32 1456.33,1214.17 1456.91,1214.13 1457.5,1212.69 1458.09,1214.15 1458.67,1214.11 1459.26,1213.85 1459.85,1210.86 1460.43,1209.26 1461.02,1212.11 1461.61,1211.59 1462.19,1208.86 1462.78,1207.39 1463.37,1207.69 1463.95,1209.13 1464.54,1209.22 1465.12,1207.98 1465.71,1210.78 1466.3,1208.02 1466.88,1206.92 1467.47,1209.59 1468.06,1205.6 1468.64,1207.37 1469.23,1209.99 1469.82,1208.75 1470.4,1211.18 1470.99,1210.17 1471.57,1210.21 1472.16,1207.39 1472.75,1208.86 1473.33,1207.41 1473.92,1208.86 1474.51,1206.44 1475.09,1205.07 1475.68,1205.36 1476.27,1206.99 1476.85,1205.96 1477.44,1206.38 1478.03,1206.55 1478.61,1206.93 1479.2,1209.88 1479.78,1208.61 1480.37,1208.58 1480.96,1209.7 1481.54,1209.5 1482.13,1208.21 1482.72,1208.38 1483.3,1211.1 1483.89,1209.66 1484.48,1209.74 1485.06,1211.14 1485.65,1209.78 1486.24,1208.49 1486.82,1207.28 1487.41,1208.67 1487.99,1208.51 1488.58,1208.39 1489.17,1209.86 1489.75,1209.56 1490.34,1206.61 1490.93,1206.64 1491.51,1205.27 1492.1,1205.2 1492.69,1207.01 1493.27,1210.88 1493.86,1209.66 1494.45,1211.18 1495.03,1211.13 1495.62,1210.96 1496.2,1207.92 1496.79,1206.65 1497.38,1206.73 1497.96,1202.58 1498.55,1200.38 1499.14,1202.3 1499.72,1205.34 1500.31,1204.44 1500.9,1203.75 1501.48,1205.36 1502.07,1204.3 1502.65,1203.05 1503.24,1203.45 1503.83,1205.01 1504.41,1204.03 1505,1204.37 1505.59,1203.17 1506.17,1200.8 1506.76,1200.97 1507.35,1200.24 1507.93,1199.35 1508.52,1202.69 1509.11,1202.91 1509.69,1206.21 1510.28,1209.06 1510.86,1205.96 1511.45,1207.6 1512.04,1207.61 1512.62,1206.44 1513.21,1207.63 1513.8,1208.98 1514.38,1208.94 1514.97,1205.1 1515.56,1205.37 1516.14,1208.13 1516.73,1209.85 1517.32,1210.46 1517.9,1210.65 1518.49,1210.32 1519.07,1211.83 1519.66,1210.65 1520.25,1213.21 1520.83,1218.45 1521.42,1218.12 1522.01,1217.84 1522.59,1217.92 1523.18,1218.71 1523.77,1219.73 1524.35,1218.04 1524.94,1218.84 1525.52,1217.03 1526.11,1213.6 1526.7,1212.08 1527.28,1217.37 1527.87,1218.21 1528.46,1217.6 1529.04,1217.22 1529.63,1215.55 1530.22,1215.32 1530.8,1217.71 1531.39,1219.63 1531.98,1221.69 1532.56,1221.26 1533.15,1221.83 1533.73,1217.16 1534.32,1219.62 1534.91,1220.47 1535.49,1218.42 1536.08,1220.42 1536.67,1214.3 1537.25,1213.78 1537.84,1216.05 1538.43,1216.87 1539.01,1219.36 1539.6,1215.08 1540.19,1214.56 1540.77,1212.99 1541.36,1210.18 1541.94,1204.54 1542.53,1206.25 1543.12,1205.08 1543.7,1204.15 1544.29,1201.65 1544.88,1203.4 1545.46,1206.31 1546.05,1206.28 1546.64,1209.26 1547.22,1209.11 1547.81,1207.5 1548.4,1207.66 1548.98,1210.72 1549.57,1210.59 1550.15,1210.46 1550.74,1207.72 1551.33,1209.39 1551.91,1210.74 1552.5,1213.71 1553.09,1210.73 1553.67,1211.64 1554.26,1209.99 1554.85,1211.27 1555.43,1208.5 1556.02,1208.46 1556.6,1208.56 1557.19,1208.63 1557.78,1207.18 1558.36,1207.5 1558.95,1206.2 1559.54,1206.08 1560.12,1207.48 1560.71,1204.92 1561.3,1206.21 1561.88,1206.16 1562.47,1207.64 1563.06,1208.68 1563.64,1207.51 1564.23,1207.91 1564.81,1206.54 1565.4,1203.98 1565.99,1205.67 1566.57,1205.88 1567.16,1208.74 1567.75,1212.9 1568.33,1215.43 1568.92,1215.16 1569.51,1213.8 1570.09,1212.38 1570.68,1212.35 1571.27,1213.46 1571.85,1213.21 1572.44,1213.14 1573.02,1214.34 1573.61,1214.09 1574.2,1212.38 1574.78,1212.44 1575.37,1211.01 1575.96,1210.97 1576.54,1209.48 1577.13,1212.16 1577.72,1216.03 1578.3,1215.93 1578.89,1217.33 1579.47,1214.46 1580.06,1215.67 1580.65,1215.18 1581.23,1214.93 1581.82,1217.5 1582.41,1216.06 1582.99,1215.83 1583.58,1218.2 1584.17,1219.21 1584.75,1217.38 1585.34,1217.22 1585.93,1215.71 1586.51,1215.22 1587.1,1217.36 1587.68,1216.77 1588.27,1216.49 1588.86,1216.33 1589.44,1216.16 1590.03,1218.57 1590.62,1215.46 1591.2,1213.5 1591.79,1212.08 1592.38,1210.77 1592.96,1209.2 1593.55,1206.88 1594.14,1208.31 1594.72,1208.41 1595.31,1206.95 1595.89,1205.92 1596.48,1207.9 1597.07,1210.69 1597.65,1209.79 1598.24,1208.84 1598.83,1208.66 1599.41,1207.28 1600,1210.12 1600.59,1205.8 1601.17,1203.29 1601.76,1198.63 1602.34,1197.57 1602.93,1198.03 1603.52,1196.01 1604.1,1198.38 1604.69,1199.02 1605.28,1198.42 1605.86,1197.91 1606.45,1198.72 1607.04,1197.91 1607.62,1197.45 1608.21,1200.84 1608.8,1201.38 1609.38,1207.02 1609.97,1207.21 1610.55,1207.29 1611.14,1205.95 1611.73,1202.06 1612.31,1202.36 1612.9,1202.75 1613.49,1203.35 1614.07,1205.05 1614.66,1206.46 1615.25,1209.05 1615.83,1207.56 1616.42,1207.85 1617.01,1208.13 1617.59,1207.11 1618.18,1207.35 1618.76,1207.51 1619.35,1207.93 1619.94,1207.97 1620.52,1209.28 1621.11,1207.74 1621.7,1206.63 1622.28,1206.71 1622.87,1205.55 1623.46,1205.75 1624.04,1208.47 1624.63,1209.83 1625.22,1212.32 1625.8,1212.14 1626.39,1212.13 1626.97,1209.44 1627.56,1207.91 1628.15,1209.75 1628.73,1208.3 1629.32,1208.38 1629.91,1205.74 1630.49,1204.3 1631.08,1205.51 1631.67,1204.26 1632.25,1204.47 1632.84,1203.53 1633.42,1203.68 1634.01,1205.04 1634.6,1206.49 1635.18,1205.03 1635.77,1208.19 1636.36,1207.2 1636.94,1207.33 1637.53,1207.51 1638.12,1208.92 1638.7,1211.57 1639.29,1211.29 1639.88,1211.47 1640.46,1215.5 1641.05,1215.03 1641.63,1214.79 1642.22,1210.57 1642.81,1207.63 1643.39,1207.64 1643.98,1206.4 1644.57,1210.81 1645.15,1207.84 1645.74,1208.13 1646.33,1206.81 1646.91,1207.11 1647.5,1208.68 1648.09,1204.96 1648.67,1205.14 1649.26,1203.94 1649.84,1206.92 1650.43,1203.08 1651.02,1206.05 1651.6,1207.7 1652.19,1208.1 1652.78,1206.99 1653.36,1207.05 1653.95,1208.39 1654.54,1211.42 1655.12,1211.68 1655.71,1211.29 1656.29,1211.04 1656.88,1208.39 1657.47,1207.34 1658.05,1206.11 1658.64,1209.13 1659.23,1210.59 1659.81,1210.72 1660.4,1212.29 1660.99,1216.58 1661.57,1216.35 1662.16,1215.79 1662.75,1215.83 1663.33,1216.92 1663.92,1216.93 1664.5,1215.32 1665.09,1213.66 1665.68,1214.8 1666.26,1215.67 1666.85,1215.31 1667.44,1213.59 1668.02,1211.94 1668.61,1213.23 1669.2,1215.98 1669.78,1215.66 1670.37,1216.36 1670.96,1214.67 1671.54,1212.8 1672.13,1211.5 1672.71,1211.31 1673.3,1212.71 1673.89,1215.13 1674.47,1216.19 1675.06,1215.86 1675.65,1216.9 1676.23,1219.46 1676.82,1217.61 1677.41,1212.9 1677.99,1213.93 1678.58,1217.42 1679.17,1212.81 1679.75,1209.69 1680.34,1212.27 1680.92,1212.07 1681.51,1213.16 1682.1,1213.41 1682.68,1213.3 1683.27,1213.01 1683.86,1210.31 1684.44,1210.12 1685.03,1208.68 1685.62,1210.02 1686.2,1209.71 1686.79,1205.95 1687.37,1206.34 1687.96,1206.44 1688.55,1206.25 1689.13,1206.67 1689.72,1206.61 1690.31,1206.99 1690.89,1207.13 1691.48,1207.06 1692.07,1207.15 1692.65,1205.99 1693.24,1204.59 1693.83,1202.22 1694.41,1202.28 1695,1205.16 1695.58,1206.75 1696.17,1206.86 1696.76,1207.23 1697.34,1206.11 1697.93,1206.54 1698.52,1203.92 1699.1,1205.64 1699.69,1207.34 1700.28,1206.3 1700.86,1208.03 1701.45,1208.21 1702.04,1209.64 1702.62,1209.53 1703.21,1209.57 1703.79,1212.31 1704.38,1212.54 1704.97,1215.17 1705.55,1215.06 1706.14,1217.39 1706.73,1215.63 1707.31,1214.13 1707.9,1212.42 1708.49,1212.22 1709.07,1211.94 1709.66,1210.53 1710.24,1209.13 1710.83,1209.28 1711.42,1208.01 1712,1207.8 1712.59,1206.56 1713.18,1207.96 1713.76,1206.87 1714.35,1201.58 1714.94,1203.31 1715.52,1202.22 1716.11,1202.78 1716.7,1204.41 1717.28,1204.81 1717.87,1205.18 1718.45,1205.51 1719.04,1205.75 1719.63,1205.87 1720.21,1207.69 1720.8,1209.13 1721.39,1210.49 1721.97,1211.96 1722.56,1213.28 1723.15,1215.74 1723.73,1215.55 1724.32,1215.21 1724.91,1214.64 1725.49,1208.82 1726.08,1210.17 1726.66,1208.42 1727.25,1208.55 1727.84,1208.44 1728.42,1209.98 1729.01,1210 1729.6,1208.24 1730.18,1208.36 1730.77,1208.28 1731.36,1208.49 1731.94,1208.68 1732.53,1205.92 1733.11,1204.56 1733.7,1206.15 1734.29,1206.3 1734.87,1207.82 1735.46,1208.24 1736.05,1205.95 1736.63,1208.92 1737.22,1207.2 1737.81,1207.4 1738.39,1207.59 1738.98,1208.05 1739.57,1208.1 1740.15,1209.47 1740.74,1209.43 1741.32,1214.76 1741.91,1214.29 1742.5,1212.86 1743.08,1212.66 1743.67,1212.59 1744.26,1211.06 1744.84,1209.43 1745.43,1207 1746.02,1207.42 1746.6,1207.47 1747.19,1208.83 1747.78,1208.92 1748.36,1210.55 1748.95,1213.33 1749.53,1211.77 1750.12,1213.1 1750.71,1211.69 1751.29,1211.67 1751.88,1209.06 1752.47,1212.07 1753.05,1213.57 1753.64,1211.81 1754.23,1211.98 1754.81,1216.95 1755.4,1215.2 1755.99,1217.4 1756.57,1215.62 1757.16,1215.24 1757.74,1216.32 1758.33,1214.65 1758.92,1216.88 1759.5,1216.45 1760.09,1216.19 1760.68,1217.32 1761.26,1214.2 1761.85,1211.17 1762.44,1211.09 1763.02,1209.39 1763.61,1208.31 1764.19,1208.45 1764.78,1209.7 1765.37,1209.88 1765.95,1211.27 1766.54,1212.39 1767.13,1213.49 1767.71,1213.05 1768.3,1214.11 1768.89,1212.36 1769.47,1210.33 1770.06,1207.8 1770.65,1209.06 1771.23,1210.59 1771.82,1209.34 1772.4,1210.66 1772.99,1212.08 1773.58,1212.01 1774.16,1211.89 1774.75,1214.61 1775.34,1211.74 1775.92,1210.5 1776.51,1210.29 1777.1,1210.57 1777.68,1210.21 1778.27,1214.06 1778.86,1212.51 1779.44,1212.18 1780.03,1213.46 1780.61,1213.19 1781.2,1213.21 1781.79,1215.7 1782.37,1217.96 1782.96,1217.49 1783.55,1215.38 1784.13,1213.83 1784.72,1210.92 1785.31,1212.32 1785.89,1212.19 1786.48,1212.17 1787.06,1213.27 1787.65,1211.76 1788.24,1211.71 1788.82,1215.62 1789.41,1215.25 1790,1217.48 1790.58,1218.36 1791.17,1216.73 1791.76,1217.7 1792.34,1215.88 1792.93,1214.15 1793.52,1212.6 1794.1,1213.94 1794.69,1213.15 1795.27,1214.32 1795.86,1215.71 1796.45,1212.73 1797.03,1216.46 1797.62,1216.11 1798.21,1215.9 1798.79,1218.37 1799.38,1216.56 1799.97,1219.96 1800.55,1219.4 1801.14,1218.84 1801.73,1214.38 1802.31,1213.99 1802.9,1210.93 1803.48,1209.53 1804.07,1208 1804.66,1209.34 1805.24,1210.72 1805.83,1209.25 1806.42,1208.89 1807,1209.94 1807.59,1207.51 1808.18,1210.28 1808.76,1210.29 1809.35,1208.87 1809.94,1208.7 1810.52,1210.1 1811.11,1204.62 1811.69,1203.72 1812.28,1202.49 1812.87,1201.19 1813.45,1201.72 1814.04,1202.12 1814.63,1201.18 1815.21,1202.82 1815.8,1203.21 1816.39,1204.8 1816.97,1206.28 1817.56,1205.04 1818.14,1202.6 1818.73,1204.39 1819.32,1203.48 1819.9,1202.13 1820.49,1202.5 1821.08,1203.98 1821.66,1202.68 1822.25,1203.1 1822.84,1201.8 1823.42,1202.29 1824.01,1203.9 1824.6,1205.67 1825.18,1205.95 1825.77,1203.28 1826.35,1200.76 1826.94,1201.31 1827.53,1201.92 1828.11,1204.75 1828.7,1201.19 1829.29,1201.61 1829.87,1200.55 1830.46,1198.68 1831.05,1200.54 1831.63,1202.46 1832.22,1205.54 1832.81,1206 1833.39,1203.64 1833.98,1201.15 1834.56,1201.75 1835.15,1202.38 1835.74,1203.08 1836.32,1204.52 1836.91,1207.36 1837.5,1206.12 1838.08,1207.77 1838.67,1207.87 1839.26,1209.2 1839.84,1209.03 1840.43,1206.57 1841.01,1210.83 1841.6,1210.64 1842.19,1214.73 1842.77,1215.95 1843.36,1218.47 1843.95,1216.79 1844.53,1217.9 1845.12,1216.13 1845.71,1215.75 1846.29,1215.61 1846.88,1218.27 1847.47,1216.45 1848.05,1209.63 1848.64,1208.44 1849.22,1210.92 1849.81,1212.39 1850.4,1211 1850.98,1213.85 1851.57,1216.38 1852.16,1213.34 1852.74,1211.68 1853.33,1212.81 1853.92,1215.46 1854.5,1215.37 1855.09,1213.66 1855.68,1216.31 1856.26,1216.04 1856.85,1218.56 1857.43,1218.04 1858.02,1218.91 1858.61,1218.51 1859.19,1218.13 1859.78,1217.64 1860.37,1218.66 1860.95,1218.22 1861.54,1217.97 1862.13,1214.81 1862.71,1215.77 1863.3,1215.54 1863.88,1215.25 1864.47,1215.07 1865.06,1211.99 1865.64,1210.53 1866.23,1211.78 1866.82,1213.14 1867.4,1211.6 1867.99,1210.26 1868.58,1206.14 1869.16,1207.65 1869.75,1207.87 1870.34,1208.07 1870.92,1206.69 1871.51,1205.79 1872.09,1203.2 1872.68,1200.75 1873.27,1203.75 1873.85,1204.19 1874.44,1204.48 1875.03,1206.46 1875.61,1205.5 1876.2,1202.95 1876.79,1202.25 1877.37,1203.96 1877.96,1205.84 1878.55,1204.87 1879.13,1204.14 1879.72,1207.31 1880.3,1209 1880.89,1206.71 1881.48,1208.39 1882.06,1205.74 1882.65,1207.11 1883.24,1208.81 1883.82,1208.96 1884.41,1207.89 1885,1209.48 1885.58,1212.06 1886.17,1210.79 1886.76,1210.78 1887.34,1212.12 1887.93,1211.94 1888.51,1211.89 1889.1,1211.92 1889.69,1213.24 1890.27,1215.85 1890.86,1211.66 1891.45,1209.81 1892.03,1211.27 1892.62,1212.6 1893.21,1212.57 1893.79,1213.72 1894.38,1212.32 1894.96,1207.99 1895.55,1209.3 1896.14,1209.02 1896.72,1209.24 1897.31,1209.71 1897.9,1211.11 1898.48,1213.57 1899.07,1214.49 1899.66,1217.26 1900.24,1217.08 1900.83,1216.65 1901.42,1213.57 1902,1214.76 1902.59,1213.22 1903.17,1212.86 1903.76,1215.1 1904.35,1214.89 1904.93,1215.94 1905.52,1215.35 1906.11,1213.69 1906.69,1213.55 1907.28,1212.08 1907.87,1209.53 1908.45,1209.6 1909.04,1209.53 1909.63,1209.69 1910.21,1209.48 1910.8,1208.05 1911.38,1208.06 1911.97,1210.93 1912.56,1208.22 1913.14,1211.11 1913.73,1211.12 1914.32,1209.14 1914.9,1210.4 1915.49,1209.14 1916.08,1206.35 1916.66,1206.6 1917.25,1209.52 1917.83,1209.71 1918.42,1212.56 1919.01,1214.1 1919.59,1212.67 1920.18,1212.21 1920.77,1214.94 1921.35,1217.15 1921.94,1216.9 1922.53,1216.43 1923.11,1216.01 1923.7,1215.44 1924.29,1212.34 1924.87,1208.29 1925.46,1208.59 1926.04,1208.97 1926.63,1208.73 1927.22,1208.8 1927.8,1210.17 1928.39,1211.72 1928.98,1210.61 1929.56,1210.67 1930.15,1209.5 1930.74,1208.09 1931.32,1209.51 1931.91,1206.7 1932.5,1204.27 1933.08,1202.05 1933.67,1200.95 1934.25,1200.11 1934.84,1202.11 1935.43,1204 1936.01,1204.34 1936.6,1205.97 1937.19,1206.43 1937.77,1205.21 1938.36,1205.56 1938.95,1205.36 1939.53,1205.96 1940.12,1206.07 1940.71,1207.42 1941.29,1204.93 1941.88,1206.43 1942.46,1206.47 1943.05,1206.96 1943.64,1208.1 1944.22,1209.95 1944.81,1207.23 1945.4,1207.24 1945.98,1208.82 1946.57,1207.8 1947.16,1210.45 1947.74,1211.86 1948.33,1214.72 1948.91,1213.12 1949.5,1215.74 1950.09,1215.54 1950.67,1216.6 1951.26,1214.76 1951.85,1211.64 1952.43,1209.02 1953.02,1206.56 1953.61,1203.92 1954.19,1205.69 1954.78,1204.46 1955.37,1210.14 1955.95,1209.9 1956.54,1209.88 1957.12,1208.43 1957.71,1208.58 1958.3,1211.12 1958.88,1206.99 1959.47,1205.43 1960.06,1206.98 1960.64,1207.19 1961.23,1206.06 1961.82,1210.36 1962.4,1211.69 1962.99,1214.07 1963.58,1211.21 1964.16,1209.64 1964.75,1206.98 1965.33,1208.49 1965.92,1208.35 1966.51,1208.67 1967.09,1212.81 1967.68,1212.38 1968.27,1211.12 1968.85,1210.99 1969.44,1209.7 1970.03,1208.25 1970.61,1207.03 1971.2,1207.04 1971.78,1207 1972.37,1207.39 1972.96,1210.35 1973.54,1214.46 1974.13,1215.64 1974.72,1212.45 1975.3,1208.2 1975.89,1209.57 1976.48,1212.31 1977.06,1212.18 1977.65,1214.66 1978.24,1217.27 1978.82,1218.33 1979.41,1215.1 1979.99,1214.73 1980.58,1213.18 1981.17,1212.79 1981.75,1211.03 1982.34,1212.23 1982.93,1210.8 1983.51,1206.61 1984.1,1209.34 1984.69,1210.63 1985.27,1210.66 1985.86,1210.61 1986.45,1209.38 1987.03,1209.23 1987.62,1207.89 1988.2,1206.78 1988.79,1205.79 1989.38,1206.3 1989.96,1207.89 1990.55,1202.65 1991.14,1200.27 1991.72,1199.74 1992.31,1197.7 1992.9,1199.9 1993.48,1201.94 1994.07,1202.36 1994.65,1201.28 1995.24,1200.46 1995.83,1202.3 1996.41,1201.6 1997,1203.48 1997.59,1205.32 1998.17,1206.87 1998.76,1210.11 1999.35,1210.17 1999.93,1210.03 2000.52,1211.39 2001.11,1211.3 2001.69,1211.04 2002.28,1208.48 2002.86,1208.21 2003.45,1207.08 2004.04,1205.59 2004.62,1202.88 2005.21,1201.85 2005.8,1201.17 2006.38,1198.82 2006.97,1199.44 2007.56,1201.5 2008.14,1200.36 2008.73,1196.66 2009.32,1197.65 2009.9,1198.61 2010.49,1197.74 2011.07,1198.12 2011.66,1198.71 2012.25,1200.68 2012.83,1201.17 2013.42,1199.17 2014.01,1199.58 2014.59,1198.73 2015.18,1199.36 2015.77,1199.95 2016.35,1201.87 2016.94,1203.7 2017.53,1203.92 2018.11,1204.04 2018.7,1205.64 2019.28,1203.34 2019.87,1202.25 2020.46,1205.38 2021.04,1204.31 2021.63,1204.89 2022.22,1210.45 2022.8,1211.97 2023.39,1213.63 2023.98,1210.75 2024.56,1212.27 2025.15,1212 2025.73,1211.92 2026.32,1211.86 2026.91,1210.29 2027.49,1211.78 2028.08,1214.38 2028.67,1214.2 2029.25,1215.07 2029.84,1214.97 2030.43,1214.52 2031.01,1215.38 2031.6,1217.69 2032.19,1217.02 2032.77,1216.65 2033.36,1218.88 2033.94,1221.15 2034.53,1220.75 2035.12,1220.16 2035.7,1217.12 2036.29,1216.86 2036.88,1219.09 2037.46,1217.15 2038.05,1218.1 2038.64,1219.91 2039.22,1219.39 2039.81,1216.32 2040.4,1215.15 2040.98,1213.51 2041.57,1210.7 2042.15,1213.45 2042.74,1211.84 2043.33,1210.71 2043.91,1210.54 2044.5,1207.75 2045.09,1212.03 2045.67,1212.98 2046.26,1210.28 2046.85,1213.01 2047.43,1212.74 2048.02,1212.7 2048.6,1213.95 2049.19,1215.03 2049.78,1214.34 2050.36,1215.54 2050.95,1215.17 2051.54,1214.68 2052.12,1211.84 2052.71,1210.19 2053.3,1212.7 2053.88,1212.64 2054.47,1211.09 2055.06,1210.85 2055.64,1210.6 2056.23,1211.74 2056.81,1213.06 2057.4,1214.14 2057.99,1213.87 2058.57,1214.97 2059.16,1214.48 2059.75,1214.18 2060.33,1215.37 2060.92,1214.92 2061.51,1212.11 2062.09,1213.35 2062.68,1210.12 2063.27,1210.34 2063.85,1210.46 2064.44,1207.68 2065.02,1207.79 2065.61,1206.59 2066.2,1203.98 2066.78,1202.9 2067.37,1205.73 2067.96,1208.59 2068.54,1209.92 2069.13,1208.71 2069.72,1213.96 2070.3,1215.15 2070.89,1214.72 2071.48,1213.03 2072.06,1211.52 2072.65,1210.1 2073.23,1208.7 2073.82,1211.61 2074.41,1210.2 2074.99,1214.16 2075.58,1215.45 2076.17,1213.95 2076.75,1215.42 2077.34,1215.2 2077.93,1213.55 2078.51,1213.4 2079.1,1214.57 2079.68,1215.79 2080.27,1215.3 2080.86,1214.69 2081.44,1214.44 2082.03,1212.99 2082.62,1211.49 2083.2,1211.29 2083.79,1212.52 2084.38,1212.37 2084.96,1213.46 2085.55,1212.31 2086.14,1209.48 2086.72,1206.8 2087.31,1205.8 2087.89,1205.99 2088.48,1207.29 2089.07,1204.84 2089.65,1207.77 2090.24,1206.84 2090.83,1207.12 2091.41,1205.93 2092,1204.77 2092.59,1205.1 2093.17,1202.29 2093.76,1203.99 2094.35,1202.41 2094.93,1201.11 2095.52,1201.87 2096.1,1199.58 2096.69,1201.77 2097.28,1201.05 2097.86,1201.62 2098.45,1201.83 2099.04,1203.4 2099.62,1202.23 2100.21,1204 2100.8,1202.73 2101.38,1204.53 2101.97,1204.04 2102.55,1203.14 2103.14,1204.61 2103.73,1207.83 2104.31,1206.78 2104.9,1205.85 2105.49,1206.26 2106.07,1209.02 2106.66,1208.92 2107.25,1207.73 2107.83,1206.26 2108.42,1205.1 2109.01,1205.59 2109.59,1206.08 2110.18,1204.89 2110.76,1205.35 2111.35,1205.5 2111.94,1205.7 2112.52,1204.46 2113.11,1204.24 2113.7,1204.68 2114.28,1206.15 2114.87,1207.81 2115.46,1210.42 2116.04,1207.78 2116.63,1210.25 2117.22,1209.27 2117.8,1208.17 2118.39,1208.39 2118.97,1207.06 2119.56,1208.28 2120.15,1208.52 2120.73,1204.71 2121.32,1205.97 2121.91,1206.19 2122.49,1206.24 2123.08,1207.61 2123.67,1209.13 2124.25,1207.9 2124.84,1205.19 2125.42,1209.58 2126.01,1208.09 2126.6,1208.08 2127.18,1208.19 2127.77,1207.16 2128.36,1210.18 2128.94,1212.97 2129.53,1214.26 2130.12,1216.57 2130.7,1213.49 2131.29,1213.26 2131.88,1214.69 2132.46,1215.66 2133.05,1215.27 2133.63,1213.4 2134.22,1214.7 2134.81,1214.42 2135.39,1215.7 2135.98,1213.89 2136.57,1212.31 2137.15,1212.2 2137.74,1209.11 2138.33,1209.14 2138.91,1209.04 2139.5,1211.67 2140.09,1208.9 2140.67,1209.04 2141.26,1210.56 2141.84,1209.13 2142.43,1207.7 2143.02,1207.85 2143.6,1207.88 2144.19,1207.86 2144.78,1206.65 2145.36,1206.94 2145.95,1204.13 2146.54,1204.47 2147.12,1206.01 2147.71,1204.76 2148.3,1204.99 2148.88,1206.57 2149.47,1209.45 2150.05,1212.35 2150.64,1211.86 2151.23,1207.65 2151.81,1206.5 2152.4,1206.57 2152.99,1204.31 2153.57,1204.64 2154.16,1207.45 2154.75,1210.17 2155.33,1210.11 2155.92,1210.03 2156.5,1209.96 2157.09,1209.8 2157.68,1208.51 2158.26,1207.37 \"/>\n<path clip-path=\"url(#clip602)\" d=\"M986.025 1210.38 L986.612 1210.38 L987.198 1210.38 L987.785 1210.38 L988.371 1210.38 L988.957 1210.38 L989.544 1210.38 L990.13 1210.38 L990.717 1210.38 L991.303 1210.38 L991.889 1210.38 L992.476 1210.38 L993.062 1210.38 L993.649 1210.38 L994.235 1210.38 L994.822 1210.38 L995.408 1210.38 L995.994 1210.38 L996.581 1210.38 L997.167 1210.38 L997.754 1210.38 L998.34 1210.38 L998.926 1210.38 L999.513 1210.38 L1000.1 1210.38 L1000.69 1210.38 L1001.27 1210.38 L1001.86 1210.38 L1002.44 1210.38 L1003.03 1210.38 L1003.62 1210.38 L1004.2 1210.38 L1004.79 1210.38 L1005.38 1210.38 L1005.96 1210.38 L1006.55 1210.38 L1007.14 1210.38 L1007.72 1210.38 L1008.31 1210.38 L1008.9 1210.38 L1009.48 1210.38 L1010.07 1210.38 L1010.65 1210.38 L1011.24 1210.38 L1011.83 1210.38 L1012.41 1210.38 L1013 1210.38 L1013.59 1210.38 L1014.17 1210.38 L1014.76 1210.38 L1015.35 1210.38 L1015.93 1210.38 L1016.52 1210.38 L1017.11 1210.38 L1017.69 1210.38 L1018.28 1210.38 L1018.86 1210.38 L1019.45 1210.38 L1020.04 1210.38 L1020.62 1210.38 L1021.21 1210.38 L1021.8 1210.38 L1022.38 1210.38 L1022.97 1210.38 L1023.56 1210.38 L1024.14 1210.38 L1024.73 1210.38 L1025.32 1210.38 L1025.9 1210.38 L1026.49 1210.38 L1027.07 1210.38 L1027.66 1210.38 L1028.25 1210.38 L1028.83 1210.38 L1029.42 1210.38 L1030.01 1210.38 L1030.59 1210.38 L1031.18 1210.38 L1031.77 1210.38 L1032.35 1210.38 L1032.94 1210.38 L1033.52 1210.38 L1034.11 1210.38 L1034.7 1210.38 L1035.28 1210.38 L1035.87 1210.38 L1036.46 1210.38 L1037.04 1210.38 L1037.63 1210.38 L1038.22 1210.38 L1038.8 1210.38 L1039.39 1210.38 L1039.98 1210.38 L1040.56 1210.38 L1041.15 1210.38 L1041.73 1210.38 L1042.32 1210.38 L1042.91 1210.38 L1043.49 1210.38 L1044.08 1210.38 L1044.67 1210.38 L1045.25 1210.38 L1045.84 1210.38 L1046.43 1210.38 L1047.01 1210.38 L1047.6 1210.38 L1048.19 1210.38 L1048.77 1210.38 L1049.36 1210.38 L1049.94 1210.38 L1050.53 1210.38 L1051.12 1210.38 L1051.7 1210.38 L1052.29 1210.38 L1052.88 1210.38 L1053.46 1210.38 L1054.05 1210.38 L1054.64 1210.38 L1055.22 1210.38 L1055.81 1210.38 L1056.39 1210.38 L1056.98 1210.38 L1057.57 1210.38 L1058.15 1210.38 L1058.74 1210.38 L1059.33 1210.38 L1059.91 1210.38 L1060.5 1210.38 L1061.09 1210.38 L1061.67 1210.38 L1062.26 1210.38 L1062.85 1210.38 L1063.43 1210.38 L1064.02 1210.38 L1064.6 1210.38 L1065.19 1210.38 L1065.78 1210.38 L1066.36 1210.38 L1066.95 1210.38 L1067.54 1210.38 L1068.12 1210.38 L1068.71 1210.38 L1069.3 1210.38 L1069.88 1210.38 L1070.47 1210.38 L1071.06 1210.38 L1071.64 1210.38 L1072.23 1210.38 L1072.81 1210.38 L1073.4 1210.38 L1073.99 1210.38 L1074.57 1210.38 L1075.16 1210.38 L1075.75 1210.38 L1076.33 1210.38 L1076.92 1210.38 L1077.51 1210.38 L1078.09 1210.38 L1078.68 1210.38 L1079.26 1210.38 L1079.85 1210.38 L1080.44 1210.38 L1081.02 1210.38 L1081.61 1210.38 L1082.2 1210.38 L1082.78 1210.38 L1083.37 1210.38 L1083.96 1210.38 L1084.54 1210.38 L1085.13 1210.38 L1085.72 1210.38 L1086.3 1210.38 L1086.89 1210.38 L1087.47 1210.38 L1088.06 1210.38 L1088.65 1210.38 L1089.23 1210.38 L1089.82 1210.38 L1090.41 1210.38 L1090.99 1210.38 L1091.58 1210.38 L1092.17 1210.38 L1092.75 1210.38 L1093.34 1210.38 L1093.93 1210.38 L1094.51 1210.38 L1095.1 1210.38 L1095.68 1210.38 L1096.27 1210.38 L1096.86 1210.38 L1097.44 1210.38 L1098.03 1210.38 L1098.62 1210.38 L1099.2 1210.38 L1099.79 1210.38 L1100.38 1210.38 L1100.96 1210.38 L1101.55 1210.38 L1102.14 1210.38 L1102.72 1210.38 L1103.31 1210.38 L1103.89 1210.38 L1104.48 1210.38 L1105.07 1210.38 L1105.65 1210.38 L1106.24 1210.38 L1106.83 1210.38 L1107.41 1210.38 L1108 1210.38 L1108.59 1210.38 L1109.17 1210.38 L1109.76 1210.38 L1110.34 1210.38 L1110.93 1210.38 L1111.52 1210.38 L1112.1 1210.38 L1112.69 1210.38 L1113.28 1210.38 L1113.86 1210.38 L1114.45 1210.38 L1115.04 1210.38 L1115.62 1210.38 L1116.21 1210.38 L1116.8 1210.38 L1117.38 1210.38 L1117.97 1210.38 L1118.55 1210.38 L1119.14 1210.38 L1119.73 1210.38 L1120.31 1210.38 L1120.9 1210.38 L1121.49 1210.38 L1122.07 1210.38 L1122.66 1210.38 L1123.25 1210.38 L1123.83 1210.38 L1124.42 1210.38 L1125.01 1210.38 L1125.59 1210.38 L1126.18 1210.38 L1126.76 1210.38 L1127.35 1210.38 L1127.94 1210.38 L1128.52 1210.38 L1129.11 1210.38 L1129.7 1210.38 L1130.28 1210.38 L1130.87 1210.38 L1131.46 1210.38 L1132.04 1210.38 L1132.63 1210.38 L1133.21 1210.38 L1133.8 1210.38 L1134.39 1210.38 L1134.97 1210.38 L1135.56 1210.38 L1136.15 1210.38 L1136.73 1210.38 L1137.32 1210.38 L1137.91 1210.38 L1138.49 1210.38 L1139.08 1210.38 L1139.67 1210.38 L1140.25 1210.38 L1140.84 1210.38 L1141.42 1210.38 L1142.01 1210.38 L1142.6 1210.38 L1143.18 1210.38 L1143.77 1210.38 L1144.36 1210.38 L1144.94 1210.38 L1145.53 1210.38 L1146.12 1210.38 L1146.7 1210.38 L1147.29 1210.38 L1147.88 1210.38 L1148.46 1210.38 L1149.05 1210.38 L1149.63 1210.38 L1150.22 1210.38 L1150.81 1210.38 L1151.39 1210.38 L1151.98 1210.38 L1152.57 1210.38 L1153.15 1210.38 L1153.74 1210.38 L1154.33 1210.38 L1154.91 1210.38 L1155.5 1210.38 L1156.09 1210.38 L1156.67 1210.38 L1157.26 1210.38 L1157.84 1210.38 L1158.43 1210.38 L1159.02 1210.38 L1159.6 1210.38 L1160.19 1210.38 L1160.78 1210.38 L1161.36 1210.38 L1161.95 1210.38 L1162.54 1210.38 L1163.12 1210.38 L1163.71 1210.38 L1164.29 1210.38 L1164.88 1210.38 L1165.47 1210.38 L1166.05 1210.38 L1166.64 1210.38 L1167.23 1210.38 L1167.81 1210.38 L1168.4 1210.38 L1168.99 1210.38 L1169.57 1210.38 L1170.16 1210.38 L1170.75 1210.38 L1171.33 1210.38 L1171.92 1210.38 L1172.5 1210.38 L1173.09 1210.38 L1173.68 1210.38 L1174.26 1210.38 L1174.85 1210.38 L1175.44 1210.38 L1176.02 1210.38 L1176.61 1210.38 L1177.2 1210.38 L1177.78 1210.38 L1178.37 1210.38 L1178.96 1210.38 L1179.54 1210.38 L1180.13 1210.38 L1180.71 1210.38 L1181.3 1210.38 L1181.89 1210.38 L1182.47 1210.38 L1183.06 1210.38 L1183.65 1210.38 L1184.23 1210.38 L1184.82 1210.38 L1185.41 1210.38 L1185.99 1210.38 L1186.58 1210.38 L1187.16 1210.38 L1187.75 1210.38 L1188.34 1210.38 L1188.92 1210.38 L1189.51 1210.38 L1190.1 1210.38 L1190.68 1210.38 L1191.27 1210.38 L1191.86 1210.38 L1192.44 1210.38 L1193.03 1210.38 L1193.62 1210.38 L1194.2 1210.38 L1194.79 1210.38 L1195.37 1210.38 L1195.96 1210.38 L1196.55 1210.38 L1197.13 1210.38 L1197.72 1210.38 L1198.31 1210.38 L1198.89 1210.38 L1199.48 1210.38 L1200.07 1210.38 L1200.65 1210.38 L1201.24 1210.38 L1201.83 1210.38 L1202.41 1210.38 L1203 1210.38 L1203.58 1210.38 L1204.17 1210.38 L1204.76 1210.38 L1205.34 1210.38 L1205.93 1210.38 L1206.52 1210.38 L1207.1 1210.38 L1207.69 1210.38 L1208.28 1210.38 L1208.86 1210.38 L1209.45 1210.38 L1210.03 1210.38 L1210.62 1210.38 L1211.21 1210.38 L1211.79 1210.38 L1212.38 1210.38 L1212.97 1210.38 L1213.55 1210.38 L1214.14 1210.38 L1214.73 1210.38 L1215.31 1210.38 L1215.9 1210.38 L1216.49 1210.38 L1217.07 1210.38 L1217.66 1210.38 L1218.24 1210.38 L1218.83 1210.38 L1219.42 1210.38 L1220 1210.38 L1220.59 1210.38 L1221.18 1210.38 L1221.76 1210.38 L1222.35 1210.38 L1222.94 1210.38 L1223.52 1210.38 L1224.11 1210.38 L1224.7 1210.38 L1225.28 1210.38 L1225.87 1210.38 L1226.45 1210.38 L1227.04 1210.38 L1227.63 1210.38 L1228.21 1210.38 L1228.8 1210.38 L1229.39 1210.38 L1229.97 1210.38 L1230.56 1210.38 L1231.15 1210.38 L1231.73 1210.38 L1232.32 1210.38 L1232.91 1210.38 L1233.49 1210.38 L1234.08 1210.38 L1234.66 1210.38 L1235.25 1210.38 L1235.84 1210.38 L1236.42 1210.38 L1237.01 1210.38 L1237.6 1210.38 L1238.18 1210.38 L1238.77 1210.38 L1239.36 1210.38 L1239.94 1210.38 L1240.53 1210.38 L1241.11 1210.38 L1241.7 1210.38 L1242.29 1210.38 L1242.87 1210.38 L1243.46 1210.38 L1244.05 1210.38 L1244.63 1210.38 L1245.22 1210.38 L1245.81 1210.38 L1246.39 1210.38 L1246.98 1210.38 L1247.57 1210.38 L1248.15 1210.38 L1248.74 1210.38 L1249.32 1210.38 L1249.91 1210.38 L1250.5 1210.38 L1251.08 1210.38 L1251.67 1210.38 L1252.26 1210.38 L1252.84 1210.38 L1253.43 1210.38 L1254.02 1210.38 L1254.6 1210.38 L1255.19 1210.38 L1255.78 1210.38 L1256.36 1210.38 L1256.95 1210.38 L1257.53 1210.38 L1258.12 1210.38 L1258.71 1210.38 L1259.29 1210.38 L1259.88 1210.38 L1260.47 1210.38 L1261.05 1210.38 L1261.64 1210.38 L1262.23 1210.38 L1262.81 1210.38 L1263.4 1210.38 L1263.98 1210.38 L1264.57 1210.38 L1265.16 1210.38 L1265.74 1210.38 L1266.33 1210.38 L1266.92 1210.38 L1267.5 1210.38 L1268.09 1210.38 L1268.68 1210.38 L1269.26 1210.38 L1269.85 1210.38 L1270.44 1210.38 L1271.02 1210.38 L1271.61 1210.38 L1272.19 1210.38 L1272.78 1210.38 L1273.37 1210.38 L1273.95 1210.38 L1274.54 1210.38 L1275.13 1210.38 L1275.71 1210.38 L1276.3 1210.38 L1276.89 1210.38 L1277.47 1210.38 L1278.06 1210.38 L1278.65 1210.38 L1279.23 1210.38 L1279.82 1210.38 L1280.4 1210.38 L1280.99 1210.38 L1281.58 1210.38 L1282.16 1210.38 L1282.75 1210.38 L1283.34 1210.38 L1283.92 1210.38 L1284.51 1210.38 L1285.1 1210.38 L1285.68 1210.38 L1286.27 1210.38 L1286.86 1210.38 L1287.44 1210.38 L1288.03 1210.38 L1288.61 1210.38 L1289.2 1210.38 L1289.79 1210.38 L1290.37 1210.38 L1290.96 1210.38 L1291.55 1210.38 L1292.13 1210.38 L1292.72 1210.38 L1293.31 1210.38 L1293.89 1210.38 L1294.48 1210.38 L1295.06 1210.38 L1295.65 1210.38 L1296.24 1210.38 L1296.82 1210.38 L1297.41 1210.38 L1298 1210.38 L1298.58 1210.38 L1299.17 1210.38 L1299.76 1210.38 L1300.34 1210.38 L1300.93 1210.38 L1301.52 1210.38 L1302.1 1210.38 L1302.69 1210.38 L1303.27 1210.38 L1303.86 1210.38 L1304.45 1210.38 L1305.03 1210.38 L1305.62 1210.38 L1306.21 1210.38 L1306.79 1210.38 L1307.38 1210.38 L1307.97 1210.38 L1308.55 1210.38 L1309.14 1210.38 L1309.73 1210.38 L1310.31 1210.38 L1310.9 1210.38 L1311.48 1210.38 L1312.07 1210.38 L1312.66 1210.38 L1313.24 1210.38 L1313.83 1210.38 L1314.42 1210.38 L1315 1210.38 L1315.59 1210.38 L1316.18 1210.38 L1316.76 1210.38 L1317.35 1210.38 L1317.93 1210.38 L1318.52 1210.38 L1319.11 1210.38 L1319.69 1210.38 L1320.28 1210.38 L1320.87 1210.38 L1321.45 1210.38 L1322.04 1210.38 L1322.63 1210.38 L1323.21 1210.38 L1323.8 1210.38 L1324.39 1210.38 L1324.97 1210.38 L1325.56 1210.38 L1326.14 1210.38 L1326.73 1210.38 L1327.32 1210.38 L1327.9 1210.38 L1328.49 1210.38 L1329.08 1210.38 L1329.66 1210.38 L1330.25 1210.38 L1330.84 1210.38 L1331.42 1210.38 L1332.01 1210.38 L1332.6 1210.38 L1333.18 1210.38 L1333.77 1210.38 L1334.35 1210.38 L1334.94 1210.38 L1335.53 1210.38 L1336.11 1210.38 L1336.7 1210.38 L1337.29 1210.38 L1337.87 1210.38 L1338.46 1210.38 L1339.05 1210.38 L1339.63 1210.38 L1340.22 1210.38 L1340.8 1210.38 L1341.39 1210.38 L1341.98 1210.38 L1342.56 1210.38 L1343.15 1210.38 L1343.74 1210.38 L1344.32 1210.38 L1344.91 1210.38 L1345.5 1210.38 L1346.08 1210.38 L1346.67 1210.38 L1347.26 1210.38 L1347.84 1210.38 L1348.43 1210.38 L1349.01 1210.38 L1349.6 1210.38 L1350.19 1210.38 L1350.77 1210.38 L1351.36 1210.38 L1351.95 1210.38 L1352.53 1210.38 L1353.12 1210.38 L1353.71 1210.38 L1354.29 1210.38 L1354.88 1210.38 L1355.47 1210.38 L1356.05 1210.38 L1356.64 1210.38 L1357.22 1210.38 L1357.81 1210.38 L1358.4 1210.38 L1358.98 1210.38 L1359.57 1210.38 L1360.16 1210.38 L1360.74 1210.38 L1361.33 1210.38 L1361.92 1210.38 L1362.5 1210.38 L1363.09 1210.38 L1363.68 1210.38 L1364.26 1210.38 L1364.85 1210.38 L1365.43 1210.38 L1366.02 1210.38 L1366.61 1210.38 L1367.19 1210.38 L1367.78 1210.38 L1368.37 1210.38 L1368.95 1210.38 L1369.54 1210.38 L1370.13 1210.38 L1370.71 1210.38 L1371.3 1210.38 L1371.88 1210.38 L1372.47 1210.38 L1373.06 1210.38 L1373.64 1210.38 L1374.23 1210.38 L1374.82 1210.38 L1375.4 1210.38 L1375.99 1210.38 L1376.58 1210.38 L1377.16 1210.38 L1377.75 1210.38 L1378.34 1210.38 L1378.92 1210.38 L1379.51 1210.38 L1380.09 1210.38 L1380.68 1210.38 L1381.27 1210.38 L1381.85 1210.38 L1382.44 1210.38 L1383.03 1210.38 L1383.61 1210.38 L1384.2 1210.38 L1384.79 1210.38 L1385.37 1210.38 L1385.96 1210.38 L1386.55 1210.38 L1387.13 1210.38 L1387.72 1210.38 L1388.3 1210.38 L1388.89 1210.38 L1389.48 1210.38 L1390.06 1210.38 L1390.65 1210.38 L1391.24 1210.38 L1391.82 1210.38 L1392.41 1210.38 L1393 1210.38 L1393.58 1210.38 L1394.17 1210.38 L1394.75 1210.38 L1395.34 1210.38 L1395.93 1210.38 L1396.51 1210.38 L1397.1 1210.38 L1397.69 1210.38 L1398.27 1210.38 L1398.86 1210.38 L1399.45 1210.38 L1400.03 1210.38 L1400.62 1210.38 L1401.21 1210.38 L1401.79 1210.38 L1402.38 1210.38 L1402.96 1210.38 L1403.55 1210.38 L1404.14 1210.38 L1404.72 1210.38 L1405.31 1210.38 L1405.9 1210.38 L1406.48 1210.38 L1407.07 1210.38 L1407.66 1210.38 L1408.24 1210.38 L1408.83 1210.38 L1409.42 1210.38 L1410 1210.38 L1410.59 1210.38 L1411.17 1210.38 L1411.76 1210.38 L1412.35 1210.38 L1412.93 1210.38 L1413.52 1210.38 L1414.11 1210.38 L1414.69 1210.38 L1415.28 1210.38 L1415.87 1210.38 L1416.45 1210.38 L1417.04 1210.38 L1417.63 1210.38 L1418.21 1210.38 L1418.8 1210.38 L1419.38 1210.38 L1419.97 1210.38 L1420.56 1210.38 L1421.14 1210.38 L1421.73 1210.38 L1422.32 1210.38 L1422.9 1210.38 L1423.49 1210.38 L1424.08 1210.38 L1424.66 1210.38 L1425.25 1210.38 L1425.83 1210.38 L1426.42 1210.38 L1427.01 1210.38 L1427.59 1210.38 L1428.18 1210.38 L1428.77 1210.38 L1429.35 1210.38 L1429.94 1210.38 L1430.53 1210.38 L1431.11 1210.38 L1431.7 1210.38 L1432.29 1210.38 L1432.87 1210.38 L1433.46 1210.38 L1434.04 1210.38 L1434.63 1210.38 L1435.22 1210.38 L1435.8 1210.38 L1436.39 1210.38 L1436.98 1210.38 L1437.56 1210.38 L1438.15 1210.38 L1438.74 1210.38 L1439.32 1210.38 L1439.91 1210.38 L1440.5 1210.38 L1441.08 1210.38 L1441.67 1210.38 L1442.25 1210.38 L1442.84 1210.38 L1443.43 1210.38 L1444.01 1210.38 L1444.6 1210.38 L1445.19 1210.38 L1445.77 1210.38 L1446.36 1210.38 L1446.95 1210.38 L1447.53 1210.38 L1448.12 1210.38 L1448.7 1210.38 L1449.29 1210.38 L1449.88 1210.38 L1450.46 1210.38 L1451.05 1210.38 L1451.64 1210.38 L1452.22 1210.38 L1452.81 1210.38 L1453.4 1210.38 L1453.98 1210.38 L1454.57 1210.38 L1455.16 1210.38 L1455.74 1210.38 L1456.33 1210.38 L1456.91 1210.38 L1457.5 1210.38 L1458.09 1210.38 L1458.67 1210.38 L1459.26 1210.38 L1459.85 1210.38 L1460.43 1210.38 L1461.02 1210.38 L1461.61 1210.38 L1462.19 1210.38 L1462.78 1210.38 L1463.37 1210.38 L1463.95 1210.38 L1464.54 1210.38 L1465.12 1210.38 L1465.71 1210.38 L1466.3 1210.38 L1466.88 1210.38 L1467.47 1210.38 L1468.06 1210.38 L1468.64 1210.38 L1469.23 1210.38 L1469.82 1210.38 L1470.4 1210.38 L1470.99 1210.38 L1471.57 1210.38 L1472.16 1210.38 L1472.75 1210.38 L1473.33 1210.38 L1473.92 1210.38 L1474.51 1210.38 L1475.09 1210.38 L1475.68 1210.38 L1476.27 1210.38 L1476.85 1210.38 L1477.44 1210.38 L1478.03 1210.38 L1478.61 1210.38 L1479.2 1210.38 L1479.78 1210.38 L1480.37 1210.38 L1480.96 1210.38 L1481.54 1210.38 L1482.13 1210.38 L1482.72 1210.38 L1483.3 1210.38 L1483.89 1210.38 L1484.48 1210.38 L1485.06 1210.38 L1485.65 1210.38 L1486.24 1210.38 L1486.82 1210.38 L1487.41 1210.38 L1487.99 1210.38 L1488.58 1210.38 L1489.17 1210.38 L1489.75 1210.38 L1490.34 1210.38 L1490.93 1210.38 L1491.51 1210.38 L1492.1 1210.38 L1492.69 1210.38 L1493.27 1210.38 L1493.86 1210.38 L1494.45 1210.38 L1495.03 1210.38 L1495.62 1210.38 L1496.2 1210.38 L1496.79 1210.38 L1497.38 1210.38 L1497.96 1210.38 L1498.55 1210.38 L1499.14 1210.38 L1499.72 1210.38 L1500.31 1210.38 L1500.9 1210.38 L1501.48 1210.38 L1502.07 1210.38 L1502.65 1210.38 L1503.24 1210.38 L1503.83 1210.38 L1504.41 1210.38 L1505 1210.38 L1505.59 1210.38 L1506.17 1210.38 L1506.76 1210.38 L1507.35 1210.38 L1507.93 1210.38 L1508.52 1210.38 L1509.11 1210.38 L1509.69 1210.38 L1510.28 1210.38 L1510.86 1210.38 L1511.45 1210.38 L1512.04 1210.38 L1512.62 1210.38 L1513.21 1210.38 L1513.8 1210.38 L1514.38 1210.38 L1514.97 1210.38 L1515.56 1210.38 L1516.14 1210.38 L1516.73 1210.38 L1517.32 1210.38 L1517.9 1210.38 L1518.49 1210.38 L1519.07 1210.38 L1519.66 1210.38 L1520.25 1210.38 L1520.83 1210.38 L1521.42 1210.38 L1522.01 1210.38 L1522.59 1210.38 L1523.18 1210.38 L1523.77 1210.38 L1524.35 1210.38 L1524.94 1210.38 L1525.52 1210.38 L1526.11 1210.38 L1526.7 1210.38 L1527.28 1210.38 L1527.87 1210.38 L1528.46 1210.38 L1529.04 1210.38 L1529.63 1210.38 L1530.22 1210.38 L1530.8 1210.38 L1531.39 1210.38 L1531.98 1210.38 L1532.56 1210.38 L1533.15 1210.38 L1533.73 1210.38 L1534.32 1210.38 L1534.91 1210.38 L1535.49 1210.38 L1536.08 1210.38 L1536.67 1210.38 L1537.25 1210.38 L1537.84 1210.38 L1538.43 1210.38 L1539.01 1210.38 L1539.6 1210.38 L1540.19 1210.38 L1540.77 1210.38 L1541.36 1210.38 L1541.94 1210.38 L1542.53 1210.38 L1543.12 1210.38 L1543.7 1210.38 L1544.29 1210.38 L1544.88 1210.38 L1545.46 1210.38 L1546.05 1210.38 L1546.64 1210.38 L1547.22 1210.38 L1547.81 1210.38 L1548.4 1210.38 L1548.98 1210.38 L1549.57 1210.38 L1550.15 1210.38 L1550.74 1210.38 L1551.33 1210.38 L1551.91 1210.38 L1552.5 1210.38 L1553.09 1210.38 L1553.67 1210.38 L1554.26 1210.38 L1554.85 1210.38 L1555.43 1210.38 L1556.02 1210.38 L1556.6 1210.38 L1557.19 1210.38 L1557.78 1210.38 L1558.36 1210.38 L1558.95 1210.38 L1559.54 1210.38 L1560.12 1210.38 L1560.71 1210.38 L1561.3 1210.38 L1561.88 1210.38 L1562.47 1210.38 L1563.06 1210.38 L1563.64 1210.38 L1564.23 1210.38 L1564.81 1210.38 L1565.4 1210.38 L1565.99 1210.38 L1566.57 1210.38 L1567.16 1210.38 L1567.75 1210.38 L1568.33 1210.38 L1568.92 1210.38 L1569.51 1210.38 L1570.09 1210.38 L1570.68 1210.38 L1571.27 1210.38 L1571.85 1210.38 L1572.44 1210.38 L1573.02 1210.38 L1573.61 1210.38 L1574.2 1210.38 L1574.78 1210.38 L1575.37 1210.38 L1575.96 1210.38 L1576.54 1210.38 L1577.13 1210.38 L1577.72 1210.38 L1578.3 1210.38 L1578.89 1210.38 L1579.47 1210.38 L1580.06 1210.38 L1580.65 1210.38 L1581.23 1210.38 L1581.82 1210.38 L1582.41 1210.38 L1582.99 1210.38 L1583.58 1210.38 L1584.17 1210.38 L1584.75 1210.38 L1585.34 1210.38 L1585.93 1210.38 L1586.51 1210.38 L1587.1 1210.38 L1587.68 1210.38 L1588.27 1210.38 L1588.86 1210.38 L1589.44 1210.38 L1590.03 1210.38 L1590.62 1210.38 L1591.2 1210.38 L1591.79 1210.38 L1592.38 1210.38 L1592.96 1210.38 L1593.55 1210.38 L1594.14 1210.38 L1594.72 1210.38 L1595.31 1210.38 L1595.89 1210.38 L1596.48 1210.38 L1597.07 1210.38 L1597.65 1210.38 L1598.24 1210.38 L1598.83 1210.38 L1599.41 1210.38 L1600 1210.38 L1600.59 1210.38 L1601.17 1210.38 L1601.76 1210.38 L1602.34 1210.38 L1602.93 1210.38 L1603.52 1210.38 L1604.1 1210.38 L1604.69 1210.38 L1605.28 1210.38 L1605.86 1210.38 L1606.45 1210.38 L1607.04 1210.38 L1607.62 1210.38 L1608.21 1210.38 L1608.8 1210.38 L1609.38 1210.38 L1609.97 1210.38 L1610.55 1210.38 L1611.14 1210.38 L1611.73 1210.38 L1612.31 1210.38 L1612.9 1210.38 L1613.49 1210.38 L1614.07 1210.38 L1614.66 1210.38 L1615.25 1210.38 L1615.83 1210.38 L1616.42 1210.38 L1617.01 1210.38 L1617.59 1210.38 L1618.18 1210.38 L1618.76 1210.38 L1619.35 1210.38 L1619.94 1210.38 L1620.52 1210.38 L1621.11 1210.38 L1621.7 1210.38 L1622.28 1210.38 L1622.87 1210.38 L1623.46 1210.38 L1624.04 1210.38 L1624.63 1210.38 L1625.22 1210.38 L1625.8 1210.38 L1626.39 1210.38 L1626.97 1210.38 L1627.56 1210.38 L1628.15 1210.38 L1628.73 1210.38 L1629.32 1210.38 L1629.91 1210.38 L1630.49 1210.38 L1631.08 1210.38 L1631.67 1210.38 L1632.25 1210.38 L1632.84 1210.38 L1633.42 1210.38 L1634.01 1210.38 L1634.6 1210.38 L1635.18 1210.38 L1635.77 1210.38 L1636.36 1210.38 L1636.94 1210.38 L1637.53 1210.38 L1638.12 1210.38 L1638.7 1210.38 L1639.29 1210.38 L1639.88 1210.38 L1640.46 1210.38 L1641.05 1210.38 L1641.63 1210.38 L1642.22 1210.38 L1642.81 1210.38 L1643.39 1210.38 L1643.98 1210.38 L1644.57 1210.38 L1645.15 1210.38 L1645.74 1210.38 L1646.33 1210.38 L1646.91 1210.38 L1647.5 1210.38 L1648.09 1210.38 L1648.67 1210.38 L1649.26 1210.38 L1649.84 1210.38 L1650.43 1210.38 L1651.02 1210.38 L1651.6 1210.38 L1652.19 1210.38 L1652.78 1210.38 L1653.36 1210.38 L1653.95 1210.38 L1654.54 1210.38 L1655.12 1210.38 L1655.71 1210.38 L1656.29 1210.38 L1656.88 1210.38 L1657.47 1210.38 L1658.05 1210.38 L1658.64 1210.38 L1659.23 1210.38 L1659.81 1210.38 L1660.4 1210.38 L1660.99 1210.38 L1661.57 1210.38 L1662.16 1210.38 L1662.75 1210.38 L1663.33 1210.38 L1663.92 1210.38 L1664.5 1210.38 L1665.09 1210.38 L1665.68 1210.38 L1666.26 1210.38 L1666.85 1210.38 L1667.44 1210.38 L1668.02 1210.38 L1668.61 1210.38 L1669.2 1210.38 L1669.78 1210.38 L1670.37 1210.38 L1670.96 1210.38 L1671.54 1210.38 L1672.13 1210.38 L1672.71 1210.38 L1673.3 1210.38 L1673.89 1210.38 L1674.47 1210.38 L1675.06 1210.38 L1675.65 1210.38 L1676.23 1210.38 L1676.82 1210.38 L1677.41 1210.38 L1677.99 1210.38 L1678.58 1210.38 L1679.17 1210.38 L1679.75 1210.38 L1680.34 1210.38 L1680.92 1210.38 L1681.51 1210.38 L1682.1 1210.38 L1682.68 1210.38 L1683.27 1210.38 L1683.86 1210.38 L1684.44 1210.38 L1685.03 1210.38 L1685.62 1210.38 L1686.2 1210.38 L1686.79 1210.38 L1687.37 1210.38 L1687.96 1210.38 L1688.55 1210.38 L1689.13 1210.38 L1689.72 1210.38 L1690.31 1210.38 L1690.89 1210.38 L1691.48 1210.38 L1692.07 1210.38 L1692.65 1210.38 L1693.24 1210.38 L1693.83 1210.38 L1694.41 1210.38 L1695 1210.38 L1695.58 1210.38 L1696.17 1210.38 L1696.76 1210.38 L1697.34 1210.38 L1697.93 1210.38 L1698.52 1210.38 L1699.1 1210.38 L1699.69 1210.38 L1700.28 1210.38 L1700.86 1210.38 L1701.45 1210.38 L1702.04 1210.38 L1702.62 1210.38 L1703.21 1210.38 L1703.79 1210.38 L1704.38 1210.38 L1704.97 1210.38 L1705.55 1210.38 L1706.14 1210.38 L1706.73 1210.38 L1707.31 1210.38 L1707.9 1210.38 L1708.49 1210.38 L1709.07 1210.38 L1709.66 1210.38 L1710.24 1210.38 L1710.83 1210.38 L1711.42 1210.38 L1712 1210.38 L1712.59 1210.38 L1713.18 1210.38 L1713.76 1210.38 L1714.35 1210.38 L1714.94 1210.38 L1715.52 1210.38 L1716.11 1210.38 L1716.7 1210.38 L1717.28 1210.38 L1717.87 1210.38 L1718.45 1210.38 L1719.04 1210.38 L1719.63 1210.38 L1720.21 1210.38 L1720.8 1210.38 L1721.39 1210.38 L1721.97 1210.38 L1722.56 1210.38 L1723.15 1210.38 L1723.73 1210.38 L1724.32 1210.38 L1724.91 1210.38 L1725.49 1210.38 L1726.08 1210.38 L1726.66 1210.38 L1727.25 1210.38 L1727.84 1210.38 L1728.42 1210.38 L1729.01 1210.38 L1729.6 1210.38 L1730.18 1210.38 L1730.77 1210.38 L1731.36 1210.38 L1731.94 1210.38 L1732.53 1210.38 L1733.11 1210.38 L1733.7 1210.38 L1734.29 1210.38 L1734.87 1210.38 L1735.46 1210.38 L1736.05 1210.38 L1736.63 1210.38 L1737.22 1210.38 L1737.81 1210.38 L1738.39 1210.38 L1738.98 1210.38 L1739.57 1210.38 L1740.15 1210.38 L1740.74 1210.38 L1741.32 1210.38 L1741.91 1210.38 L1742.5 1210.38 L1743.08 1210.38 L1743.67 1210.38 L1744.26 1210.38 L1744.84 1210.38 L1745.43 1210.38 L1746.02 1210.38 L1746.6 1210.38 L1747.19 1210.38 L1747.78 1210.38 L1748.36 1210.38 L1748.95 1210.38 L1749.53 1210.38 L1750.12 1210.38 L1750.71 1210.38 L1751.29 1210.38 L1751.88 1210.38 L1752.47 1210.38 L1753.05 1210.38 L1753.64 1210.38 L1754.23 1210.38 L1754.81 1210.38 L1755.4 1210.38 L1755.99 1210.38 L1756.57 1210.38 L1757.16 1210.38 L1757.74 1210.38 L1758.33 1210.38 L1758.92 1210.38 L1759.5 1210.38 L1760.09 1210.38 L1760.68 1210.38 L1761.26 1210.38 L1761.85 1210.38 L1762.44 1210.38 L1763.02 1210.38 L1763.61 1210.38 L1764.19 1210.38 L1764.78 1210.38 L1765.37 1210.38 L1765.95 1210.38 L1766.54 1210.38 L1767.13 1210.38 L1767.71 1210.38 L1768.3 1210.38 L1768.89 1210.38 L1769.47 1210.38 L1770.06 1210.38 L1770.65 1210.38 L1771.23 1210.38 L1771.82 1210.38 L1772.4 1210.38 L1772.99 1210.38 L1773.58 1210.38 L1774.16 1210.38 L1774.75 1210.38 L1775.34 1210.38 L1775.92 1210.38 L1776.51 1210.38 L1777.1 1210.38 L1777.68 1210.38 L1778.27 1210.38 L1778.86 1210.38 L1779.44 1210.38 L1780.03 1210.38 L1780.61 1210.38 L1781.2 1210.38 L1781.79 1210.38 L1782.37 1210.38 L1782.96 1210.38 L1783.55 1210.38 L1784.13 1210.38 L1784.72 1210.38 L1785.31 1210.38 L1785.89 1210.38 L1786.48 1210.38 L1787.06 1210.38 L1787.65 1210.38 L1788.24 1210.38 L1788.82 1210.38 L1789.41 1210.38 L1790 1210.38 L1790.58 1210.38 L1791.17 1210.38 L1791.76 1210.38 L1792.34 1210.38 L1792.93 1210.38 L1793.52 1210.38 L1794.1 1210.38 L1794.69 1210.38 L1795.27 1210.38 L1795.86 1210.38 L1796.45 1210.38 L1797.03 1210.38 L1797.62 1210.38 L1798.21 1210.38 L1798.79 1210.38 L1799.38 1210.38 L1799.97 1210.38 L1800.55 1210.38 L1801.14 1210.38 L1801.73 1210.38 L1802.31 1210.38 L1802.9 1210.38 L1803.48 1210.38 L1804.07 1210.38 L1804.66 1210.38 L1805.24 1210.38 L1805.83 1210.38 L1806.42 1210.38 L1807 1210.38 L1807.59 1210.38 L1808.18 1210.38 L1808.76 1210.38 L1809.35 1210.38 L1809.94 1210.38 L1810.52 1210.38 L1811.11 1210.38 L1811.69 1210.38 L1812.28 1210.38 L1812.87 1210.38 L1813.45 1210.38 L1814.04 1210.38 L1814.63 1210.38 L1815.21 1210.38 L1815.8 1210.38 L1816.39 1210.38 L1816.97 1210.38 L1817.56 1210.38 L1818.14 1210.38 L1818.73 1210.38 L1819.32 1210.38 L1819.9 1210.38 L1820.49 1210.38 L1821.08 1210.38 L1821.66 1210.38 L1822.25 1210.38 L1822.84 1210.38 L1823.42 1210.38 L1824.01 1210.38 L1824.6 1210.38 L1825.18 1210.38 L1825.77 1210.38 L1826.35 1210.38 L1826.94 1210.38 L1827.53 1210.38 L1828.11 1210.38 L1828.7 1210.38 L1829.29 1210.38 L1829.87 1210.38 L1830.46 1210.38 L1831.05 1210.38 L1831.63 1210.38 L1832.22 1210.38 L1832.81 1210.38 L1833.39 1210.38 L1833.98 1210.38 L1834.56 1210.38 L1835.15 1210.38 L1835.74 1210.38 L1836.32 1210.38 L1836.91 1210.38 L1837.5 1210.38 L1838.08 1210.38 L1838.67 1210.38 L1839.26 1210.38 L1839.84 1210.38 L1840.43 1210.38 L1841.01 1210.38 L1841.6 1210.38 L1842.19 1210.38 L1842.77 1210.38 L1843.36 1210.38 L1843.95 1210.38 L1844.53 1210.38 L1845.12 1210.38 L1845.71 1210.38 L1846.29 1210.38 L1846.88 1210.38 L1847.47 1210.38 L1848.05 1210.38 L1848.64 1210.38 L1849.22 1210.38 L1849.81 1210.38 L1850.4 1210.38 L1850.98 1210.38 L1851.57 1210.38 L1852.16 1210.38 L1852.74 1210.38 L1853.33 1210.38 L1853.92 1210.38 L1854.5 1210.38 L1855.09 1210.38 L1855.68 1210.38 L1856.26 1210.38 L1856.85 1210.38 L1857.43 1210.38 L1858.02 1210.38 L1858.61 1210.38 L1859.19 1210.38 L1859.78 1210.38 L1860.37 1210.38 L1860.95 1210.38 L1861.54 1210.38 L1862.13 1210.38 L1862.71 1210.38 L1863.3 1210.38 L1863.88 1210.38 L1864.47 1210.38 L1865.06 1210.38 L1865.64 1210.38 L1866.23 1210.38 L1866.82 1210.38 L1867.4 1210.38 L1867.99 1210.38 L1868.58 1210.38 L1869.16 1210.38 L1869.75 1210.38 L1870.34 1210.38 L1870.92 1210.38 L1871.51 1210.38 L1872.09 1210.38 L1872.68 1210.38 L1873.27 1210.38 L1873.85 1210.38 L1874.44 1210.38 L1875.03 1210.38 L1875.61 1210.38 L1876.2 1210.38 L1876.79 1210.38 L1877.37 1210.38 L1877.96 1210.38 L1878.55 1210.38 L1879.13 1210.38 L1879.72 1210.38 L1880.3 1210.38 L1880.89 1210.38 L1881.48 1210.38 L1882.06 1210.38 L1882.65 1210.38 L1883.24 1210.38 L1883.82 1210.38 L1884.41 1210.38 L1885 1210.38 L1885.58 1210.38 L1886.17 1210.38 L1886.76 1210.38 L1887.34 1210.38 L1887.93 1210.38 L1888.51 1210.38 L1889.1 1210.38 L1889.69 1210.38 L1890.27 1210.38 L1890.86 1210.38 L1891.45 1210.38 L1892.03 1210.38 L1892.62 1210.38 L1893.21 1210.38 L1893.79 1210.38 L1894.38 1210.38 L1894.96 1210.38 L1895.55 1210.38 L1896.14 1210.38 L1896.72 1210.38 L1897.31 1210.38 L1897.9 1210.38 L1898.48 1210.38 L1899.07 1210.38 L1899.66 1210.38 L1900.24 1210.38 L1900.83 1210.38 L1901.42 1210.38 L1902 1210.38 L1902.59 1210.38 L1903.17 1210.38 L1903.76 1210.38 L1904.35 1210.38 L1904.93 1210.38 L1905.52 1210.38 L1906.11 1210.38 L1906.69 1210.38 L1907.28 1210.38 L1907.87 1210.38 L1908.45 1210.38 L1909.04 1210.38 L1909.63 1210.38 L1910.21 1210.38 L1910.8 1210.38 L1911.38 1210.38 L1911.97 1210.38 L1912.56 1210.38 L1913.14 1210.38 L1913.73 1210.38 L1914.32 1210.38 L1914.9 1210.38 L1915.49 1210.38 L1916.08 1210.38 L1916.66 1210.38 L1917.25 1210.38 L1917.83 1210.38 L1918.42 1210.38 L1919.01 1210.38 L1919.59 1210.38 L1920.18 1210.38 L1920.77 1210.38 L1921.35 1210.38 L1921.94 1210.38 L1922.53 1210.38 L1923.11 1210.38 L1923.7 1210.38 L1924.29 1210.38 L1924.87 1210.38 L1925.46 1210.38 L1926.04 1210.38 L1926.63 1210.38 L1927.22 1210.38 L1927.8 1210.38 L1928.39 1210.38 L1928.98 1210.38 L1929.56 1210.38 L1930.15 1210.38 L1930.74 1210.38 L1931.32 1210.38 L1931.91 1210.38 L1932.5 1210.38 L1933.08 1210.38 L1933.67 1210.38 L1934.25 1210.38 L1934.84 1210.38 L1935.43 1210.38 L1936.01 1210.38 L1936.6 1210.38 L1937.19 1210.38 L1937.77 1210.38 L1938.36 1210.38 L1938.95 1210.38 L1939.53 1210.38 L1940.12 1210.38 L1940.71 1210.38 L1941.29 1210.38 L1941.88 1210.38 L1942.46 1210.38 L1943.05 1210.38 L1943.64 1210.38 L1944.22 1210.38 L1944.81 1210.38 L1945.4 1210.38 L1945.98 1210.38 L1946.57 1210.38 L1947.16 1210.38 L1947.74 1210.38 L1948.33 1210.38 L1948.91 1210.38 L1949.5 1210.38 L1950.09 1210.38 L1950.67 1210.38 L1951.26 1210.38 L1951.85 1210.38 L1952.43 1210.38 L1953.02 1210.38 L1953.61 1210.38 L1954.19 1210.38 L1954.78 1210.38 L1955.37 1210.38 L1955.95 1210.38 L1956.54 1210.38 L1957.12 1210.38 L1957.71 1210.38 L1958.3 1210.38 L1958.88 1210.38 L1959.47 1210.38 L1960.06 1210.38 L1960.64 1210.38 L1961.23 1210.38 L1961.82 1210.38 L1962.4 1210.38 L1962.99 1210.38 L1963.58 1210.38 L1964.16 1210.38 L1964.75 1210.38 L1965.33 1210.38 L1965.92 1210.38 L1966.51 1210.38 L1967.09 1210.38 L1967.68 1210.38 L1968.27 1210.38 L1968.85 1210.38 L1969.44 1210.38 L1970.03 1210.38 L1970.61 1210.38 L1971.2 1210.38 L1971.78 1210.38 L1972.37 1210.38 L1972.96 1210.38 L1973.54 1210.38 L1974.13 1210.38 L1974.72 1210.38 L1975.3 1210.38 L1975.89 1210.38 L1976.48 1210.38 L1977.06 1210.38 L1977.65 1210.38 L1978.24 1210.38 L1978.82 1210.38 L1979.41 1210.38 L1979.99 1210.38 L1980.58 1210.38 L1981.17 1210.38 L1981.75 1210.38 L1982.34 1210.38 L1982.93 1210.38 L1983.51 1210.38 L1984.1 1210.38 L1984.69 1210.38 L1985.27 1210.38 L1985.86 1210.38 L1986.45 1210.38 L1987.03 1210.38 L1987.62 1210.38 L1988.2 1210.38 L1988.79 1210.38 L1989.38 1210.38 L1989.96 1210.38 L1990.55 1210.38 L1991.14 1210.38 L1991.72 1210.38 L1992.31 1210.38 L1992.9 1210.38 L1993.48 1210.38 L1994.07 1210.38 L1994.65 1210.38 L1995.24 1210.38 L1995.83 1210.38 L1996.41 1210.38 L1997 1210.38 L1997.59 1210.38 L1998.17 1210.38 L1998.76 1210.38 L1999.35 1210.38 L1999.93 1210.38 L2000.52 1210.38 L2001.11 1210.38 L2001.69 1210.38 L2002.28 1210.38 L2002.86 1210.38 L2003.45 1210.38 L2004.04 1210.38 L2004.62 1210.38 L2005.21 1210.38 L2005.8 1210.38 L2006.38 1210.38 L2006.97 1210.38 L2007.56 1210.38 L2008.14 1210.38 L2008.73 1210.38 L2009.32 1210.38 L2009.9 1210.38 L2010.49 1210.38 L2011.07 1210.38 L2011.66 1210.38 L2012.25 1210.38 L2012.83 1210.38 L2013.42 1210.38 L2014.01 1210.38 L2014.59 1210.38 L2015.18 1210.38 L2015.77 1210.38 L2016.35 1210.38 L2016.94 1210.38 L2017.53 1210.38 L2018.11 1210.38 L2018.7 1210.38 L2019.28 1210.38 L2019.87 1210.38 L2020.46 1210.38 L2021.04 1210.38 L2021.63 1210.38 L2022.22 1210.38 L2022.8 1210.38 L2023.39 1210.38 L2023.98 1210.38 L2024.56 1210.38 L2025.15 1210.38 L2025.73 1210.38 L2026.32 1210.38 L2026.91 1210.38 L2027.49 1210.38 L2028.08 1210.38 L2028.67 1210.38 L2029.25 1210.38 L2029.84 1210.38 L2030.43 1210.38 L2031.01 1210.38 L2031.6 1210.38 L2032.19 1210.38 L2032.77 1210.38 L2033.36 1210.38 L2033.94 1210.38 L2034.53 1210.38 L2035.12 1210.38 L2035.7 1210.38 L2036.29 1210.38 L2036.88 1210.38 L2037.46 1210.38 L2038.05 1210.38 L2038.64 1210.38 L2039.22 1210.38 L2039.81 1210.38 L2040.4 1210.38 L2040.98 1210.38 L2041.57 1210.38 L2042.15 1210.38 L2042.74 1210.38 L2043.33 1210.38 L2043.91 1210.38 L2044.5 1210.38 L2045.09 1210.38 L2045.67 1210.38 L2046.26 1210.38 L2046.85 1210.38 L2047.43 1210.38 L2048.02 1210.38 L2048.6 1210.38 L2049.19 1210.38 L2049.78 1210.38 L2050.36 1210.38 L2050.95 1210.38 L2051.54 1210.38 L2052.12 1210.38 L2052.71 1210.38 L2053.3 1210.38 L2053.88 1210.38 L2054.47 1210.38 L2055.06 1210.38 L2055.64 1210.38 L2056.23 1210.38 L2056.81 1210.38 L2057.4 1210.38 L2057.99 1210.38 L2058.57 1210.38 L2059.16 1210.38 L2059.75 1210.38 L2060.33 1210.38 L2060.92 1210.38 L2061.51 1210.38 L2062.09 1210.38 L2062.68 1210.38 L2063.27 1210.38 L2063.85 1210.38 L2064.44 1210.38 L2065.02 1210.38 L2065.61 1210.38 L2066.2 1210.38 L2066.78 1210.38 L2067.37 1210.38 L2067.96 1210.38 L2068.54 1210.38 L2069.13 1210.38 L2069.72 1210.38 L2070.3 1210.38 L2070.89 1210.38 L2071.48 1210.38 L2072.06 1210.38 L2072.65 1210.38 L2073.23 1210.38 L2073.82 1210.38 L2074.41 1210.38 L2074.99 1210.38 L2075.58 1210.38 L2076.17 1210.38 L2076.75 1210.38 L2077.34 1210.38 L2077.93 1210.38 L2078.51 1210.38 L2079.1 1210.38 L2079.68 1210.38 L2080.27 1210.38 L2080.86 1210.38 L2081.44 1210.38 L2082.03 1210.38 L2082.62 1210.38 L2083.2 1210.38 L2083.79 1210.38 L2084.38 1210.38 L2084.96 1210.38 L2085.55 1210.38 L2086.14 1210.38 L2086.72 1210.38 L2087.31 1210.38 L2087.89 1210.38 L2088.48 1210.38 L2089.07 1210.38 L2089.65 1210.38 L2090.24 1210.38 L2090.83 1210.38 L2091.41 1210.38 L2092 1210.38 L2092.59 1210.38 L2093.17 1210.38 L2093.76 1210.38 L2094.35 1210.38 L2094.93 1210.38 L2095.52 1210.38 L2096.1 1210.38 L2096.69 1210.38 L2097.28 1210.38 L2097.86 1210.38 L2098.45 1210.38 L2099.04 1210.38 L2099.62 1210.38 L2100.21 1210.38 L2100.8 1210.38 L2101.38 1210.38 L2101.97 1210.38 L2102.55 1210.38 L2103.14 1210.38 L2103.73 1210.38 L2104.31 1210.38 L2104.9 1210.38 L2105.49 1210.38 L2106.07 1210.38 L2106.66 1210.38 L2107.25 1210.38 L2107.83 1210.38 L2108.42 1210.38 L2109.01 1210.38 L2109.59 1210.38 L2110.18 1210.38 L2110.76 1210.38 L2111.35 1210.38 L2111.94 1210.38 L2112.52 1210.38 L2113.11 1210.38 L2113.7 1210.38 L2114.28 1210.38 L2114.87 1210.38 L2115.46 1210.38 L2116.04 1210.38 L2116.63 1210.38 L2117.22 1210.38 L2117.8 1210.38 L2118.39 1210.38 L2118.97 1210.38 L2119.56 1210.38 L2120.15 1210.38 L2120.73 1210.38 L2121.32 1210.38 L2121.91 1210.38 L2122.49 1210.38 L2123.08 1210.38 L2123.67 1210.38 L2124.25 1210.38 L2124.84 1210.38 L2125.42 1210.38 L2126.01 1210.38 L2126.6 1210.38 L2127.18 1210.38 L2127.77 1210.38 L2128.36 1210.38 L2128.94 1210.38 L2129.53 1210.38 L2130.12 1210.38 L2130.7 1210.38 L2131.29 1210.38 L2131.88 1210.38 L2132.46 1210.38 L2133.05 1210.38 L2133.63 1210.38 L2134.22 1210.38 L2134.81 1210.38 L2135.39 1210.38 L2135.98 1210.38 L2136.57 1210.38 L2137.15 1210.38 L2137.74 1210.38 L2138.33 1210.38 L2138.91 1210.38 L2139.5 1210.38 L2140.09 1210.38 L2140.67 1210.38 L2141.26 1210.38 L2141.84 1210.38 L2142.43 1210.38 L2143.02 1210.38 L2143.6 1210.38 L2144.19 1210.38 L2144.78 1210.38 L2145.36 1210.38 L2145.95 1210.38 L2146.54 1210.38 L2147.12 1210.38 L2147.71 1210.38 L2148.3 1210.38 L2148.88 1210.38 L2149.47 1210.38 L2150.05 1210.38 L2150.64 1210.38 L2151.23 1210.38 L2151.81 1210.38 L2152.4 1210.38 L2152.99 1210.38 L2153.57 1210.38 L2154.16 1210.38 L2154.75 1210.38 L2155.33 1210.38 L2155.92 1210.38 L2156.5 1210.38 L2157.09 1210.38 L2157.68 1210.38 L2158.26 1210.38 L2158.26 1209.6 L2157.68 1209.6 L2157.09 1209.6 L2156.5 1209.6 L2155.92 1209.6 L2155.33 1209.6 L2154.75 1209.6 L2154.16 1209.6 L2153.57 1209.6 L2152.99 1209.6 L2152.4 1209.6 L2151.81 1209.6 L2151.23 1209.6 L2150.64 1209.6 L2150.05 1209.6 L2149.47 1209.6 L2148.88 1209.6 L2148.3 1209.6 L2147.71 1209.6 L2147.12 1209.6 L2146.54 1209.6 L2145.95 1209.6 L2145.36 1209.6 L2144.78 1209.6 L2144.19 1209.6 L2143.6 1209.6 L2143.02 1209.6 L2142.43 1209.6 L2141.84 1209.6 L2141.26 1209.6 L2140.67 1209.6 L2140.09 1209.6 L2139.5 1209.6 L2138.91 1209.6 L2138.33 1209.6 L2137.74 1209.6 L2137.15 1209.6 L2136.57 1209.6 L2135.98 1209.6 L2135.39 1209.6 L2134.81 1209.6 L2134.22 1209.6 L2133.63 1209.6 L2133.05 1209.6 L2132.46 1209.6 L2131.88 1209.6 L2131.29 1209.6 L2130.7 1209.6 L2130.12 1209.6 L2129.53 1209.6 L2128.94 1209.6 L2128.36 1209.6 L2127.77 1209.6 L2127.18 1209.6 L2126.6 1209.6 L2126.01 1209.6 L2125.42 1209.6 L2124.84 1209.6 L2124.25 1209.6 L2123.67 1209.6 L2123.08 1209.6 L2122.49 1209.6 L2121.91 1209.6 L2121.32 1209.6 L2120.73 1209.6 L2120.15 1209.6 L2119.56 1209.6 L2118.97 1209.6 L2118.39 1209.6 L2117.8 1209.6 L2117.22 1209.6 L2116.63 1209.6 L2116.04 1209.6 L2115.46 1209.6 L2114.87 1209.6 L2114.28 1209.6 L2113.7 1209.6 L2113.11 1209.6 L2112.52 1209.6 L2111.94 1209.6 L2111.35 1209.6 L2110.76 1209.6 L2110.18 1209.6 L2109.59 1209.6 L2109.01 1209.6 L2108.42 1209.6 L2107.83 1209.6 L2107.25 1209.6 L2106.66 1209.6 L2106.07 1209.6 L2105.49 1209.6 L2104.9 1209.6 L2104.31 1209.6 L2103.73 1209.6 L2103.14 1209.6 L2102.55 1209.6 L2101.97 1209.6 L2101.38 1209.6 L2100.8 1209.6 L2100.21 1209.6 L2099.62 1209.6 L2099.04 1209.6 L2098.45 1209.6 L2097.86 1209.6 L2097.28 1209.6 L2096.69 1209.6 L2096.1 1209.6 L2095.52 1209.6 L2094.93 1209.6 L2094.35 1209.6 L2093.76 1209.6 L2093.17 1209.6 L2092.59 1209.6 L2092 1209.6 L2091.41 1209.6 L2090.83 1209.6 L2090.24 1209.6 L2089.65 1209.6 L2089.07 1209.6 L2088.48 1209.6 L2087.89 1209.6 L2087.31 1209.6 L2086.72 1209.6 L2086.14 1209.6 L2085.55 1209.6 L2084.96 1209.6 L2084.38 1209.6 L2083.79 1209.6 L2083.2 1209.6 L2082.62 1209.6 L2082.03 1209.6 L2081.44 1209.6 L2080.86 1209.6 L2080.27 1209.6 L2079.68 1209.6 L2079.1 1209.6 L2078.51 1209.6 L2077.93 1209.6 L2077.34 1209.6 L2076.75 1209.6 L2076.17 1209.6 L2075.58 1209.6 L2074.99 1209.6 L2074.41 1209.6 L2073.82 1209.6 L2073.23 1209.6 L2072.65 1209.6 L2072.06 1209.6 L2071.48 1209.6 L2070.89 1209.6 L2070.3 1209.6 L2069.72 1209.6 L2069.13 1209.6 L2068.54 1209.6 L2067.96 1209.6 L2067.37 1209.6 L2066.78 1209.6 L2066.2 1209.6 L2065.61 1209.6 L2065.02 1209.6 L2064.44 1209.6 L2063.85 1209.6 L2063.27 1209.6 L2062.68 1209.6 L2062.09 1209.6 L2061.51 1209.6 L2060.92 1209.6 L2060.33 1209.6 L2059.75 1209.6 L2059.16 1209.6 L2058.57 1209.6 L2057.99 1209.6 L2057.4 1209.6 L2056.81 1209.6 L2056.23 1209.6 L2055.64 1209.6 L2055.06 1209.6 L2054.47 1209.6 L2053.88 1209.6 L2053.3 1209.6 L2052.71 1209.6 L2052.12 1209.6 L2051.54 1209.6 L2050.95 1209.6 L2050.36 1209.6 L2049.78 1209.6 L2049.19 1209.6 L2048.6 1209.6 L2048.02 1209.6 L2047.43 1209.6 L2046.85 1209.6 L2046.26 1209.6 L2045.67 1209.6 L2045.09 1209.6 L2044.5 1209.6 L2043.91 1209.6 L2043.33 1209.6 L2042.74 1209.6 L2042.15 1209.6 L2041.57 1209.6 L2040.98 1209.6 L2040.4 1209.6 L2039.81 1209.6 L2039.22 1209.6 L2038.64 1209.6 L2038.05 1209.6 L2037.46 1209.6 L2036.88 1209.6 L2036.29 1209.6 L2035.7 1209.6 L2035.12 1209.6 L2034.53 1209.6 L2033.94 1209.6 L2033.36 1209.6 L2032.77 1209.6 L2032.19 1209.6 L2031.6 1209.6 L2031.01 1209.6 L2030.43 1209.6 L2029.84 1209.6 L2029.25 1209.6 L2028.67 1209.6 L2028.08 1209.6 L2027.49 1209.6 L2026.91 1209.6 L2026.32 1209.6 L2025.73 1209.6 L2025.15 1209.6 L2024.56 1209.6 L2023.98 1209.6 L2023.39 1209.6 L2022.8 1209.6 L2022.22 1209.6 L2021.63 1209.6 L2021.04 1209.6 L2020.46 1209.6 L2019.87 1209.6 L2019.28 1209.6 L2018.7 1209.6 L2018.11 1209.6 L2017.53 1209.6 L2016.94 1209.6 L2016.35 1209.6 L2015.77 1209.6 L2015.18 1209.6 L2014.59 1209.6 L2014.01 1209.6 L2013.42 1209.6 L2012.83 1209.6 L2012.25 1209.6 L2011.66 1209.6 L2011.07 1209.6 L2010.49 1209.6 L2009.9 1209.6 L2009.32 1209.6 L2008.73 1209.6 L2008.14 1209.6 L2007.56 1209.6 L2006.97 1209.6 L2006.38 1209.6 L2005.8 1209.6 L2005.21 1209.6 L2004.62 1209.6 L2004.04 1209.6 L2003.45 1209.6 L2002.86 1209.6 L2002.28 1209.6 L2001.69 1209.6 L2001.11 1209.6 L2000.52 1209.6 L1999.93 1209.6 L1999.35 1209.6 L1998.76 1209.6 L1998.17 1209.6 L1997.59 1209.6 L1997 1209.6 L1996.41 1209.6 L1995.83 1209.6 L1995.24 1209.6 L1994.65 1209.6 L1994.07 1209.6 L1993.48 1209.6 L1992.9 1209.6 L1992.31 1209.6 L1991.72 1209.6 L1991.14 1209.6 L1990.55 1209.6 L1989.96 1209.6 L1989.38 1209.6 L1988.79 1209.6 L1988.2 1209.6 L1987.62 1209.6 L1987.03 1209.6 L1986.45 1209.6 L1985.86 1209.6 L1985.27 1209.6 L1984.69 1209.6 L1984.1 1209.6 L1983.51 1209.6 L1982.93 1209.6 L1982.34 1209.6 L1981.75 1209.6 L1981.17 1209.6 L1980.58 1209.6 L1979.99 1209.6 L1979.41 1209.6 L1978.82 1209.6 L1978.24 1209.6 L1977.65 1209.6 L1977.06 1209.6 L1976.48 1209.6 L1975.89 1209.6 L1975.3 1209.6 L1974.72 1209.6 L1974.13 1209.6 L1973.54 1209.6 L1972.96 1209.6 L1972.37 1209.6 L1971.78 1209.6 L1971.2 1209.6 L1970.61 1209.6 L1970.03 1209.6 L1969.44 1209.6 L1968.85 1209.6 L1968.27 1209.6 L1967.68 1209.6 L1967.09 1209.6 L1966.51 1209.6 L1965.92 1209.6 L1965.33 1209.6 L1964.75 1209.6 L1964.16 1209.6 L1963.58 1209.6 L1962.99 1209.6 L1962.4 1209.6 L1961.82 1209.6 L1961.23 1209.6 L1960.64 1209.6 L1960.06 1209.6 L1959.47 1209.6 L1958.88 1209.6 L1958.3 1209.6 L1957.71 1209.6 L1957.12 1209.6 L1956.54 1209.6 L1955.95 1209.6 L1955.37 1209.6 L1954.78 1209.6 L1954.19 1209.6 L1953.61 1209.6 L1953.02 1209.6 L1952.43 1209.6 L1951.85 1209.6 L1951.26 1209.6 L1950.67 1209.6 L1950.09 1209.6 L1949.5 1209.6 L1948.91 1209.6 L1948.33 1209.6 L1947.74 1209.6 L1947.16 1209.6 L1946.57 1209.6 L1945.98 1209.6 L1945.4 1209.6 L1944.81 1209.6 L1944.22 1209.6 L1943.64 1209.6 L1943.05 1209.6 L1942.46 1209.6 L1941.88 1209.6 L1941.29 1209.6 L1940.71 1209.6 L1940.12 1209.6 L1939.53 1209.6 L1938.95 1209.6 L1938.36 1209.6 L1937.77 1209.6 L1937.19 1209.6 L1936.6 1209.6 L1936.01 1209.6 L1935.43 1209.6 L1934.84 1209.6 L1934.25 1209.6 L1933.67 1209.6 L1933.08 1209.6 L1932.5 1209.6 L1931.91 1209.6 L1931.32 1209.6 L1930.74 1209.6 L1930.15 1209.6 L1929.56 1209.6 L1928.98 1209.6 L1928.39 1209.6 L1927.8 1209.6 L1927.22 1209.6 L1926.63 1209.6 L1926.04 1209.6 L1925.46 1209.6 L1924.87 1209.6 L1924.29 1209.6 L1923.7 1209.6 L1923.11 1209.6 L1922.53 1209.6 L1921.94 1209.6 L1921.35 1209.6 L1920.77 1209.6 L1920.18 1209.6 L1919.59 1209.6 L1919.01 1209.6 L1918.42 1209.6 L1917.83 1209.6 L1917.25 1209.6 L1916.66 1209.6 L1916.08 1209.6 L1915.49 1209.6 L1914.9 1209.6 L1914.32 1209.6 L1913.73 1209.6 L1913.14 1209.6 L1912.56 1209.6 L1911.97 1209.6 L1911.38 1209.6 L1910.8 1209.6 L1910.21 1209.6 L1909.63 1209.6 L1909.04 1209.6 L1908.45 1209.6 L1907.87 1209.6 L1907.28 1209.6 L1906.69 1209.6 L1906.11 1209.6 L1905.52 1209.6 L1904.93 1209.6 L1904.35 1209.6 L1903.76 1209.6 L1903.17 1209.6 L1902.59 1209.6 L1902 1209.6 L1901.42 1209.6 L1900.83 1209.6 L1900.24 1209.6 L1899.66 1209.6 L1899.07 1209.6 L1898.48 1209.6 L1897.9 1209.6 L1897.31 1209.6 L1896.72 1209.6 L1896.14 1209.6 L1895.55 1209.6 L1894.96 1209.6 L1894.38 1209.6 L1893.79 1209.6 L1893.21 1209.6 L1892.62 1209.6 L1892.03 1209.6 L1891.45 1209.6 L1890.86 1209.6 L1890.27 1209.6 L1889.69 1209.6 L1889.1 1209.6 L1888.51 1209.6 L1887.93 1209.6 L1887.34 1209.6 L1886.76 1209.6 L1886.17 1209.6 L1885.58 1209.6 L1885 1209.6 L1884.41 1209.6 L1883.82 1209.6 L1883.24 1209.6 L1882.65 1209.6 L1882.06 1209.6 L1881.48 1209.6 L1880.89 1209.6 L1880.3 1209.6 L1879.72 1209.6 L1879.13 1209.6 L1878.55 1209.6 L1877.96 1209.6 L1877.37 1209.6 L1876.79 1209.6 L1876.2 1209.6 L1875.61 1209.6 L1875.03 1209.6 L1874.44 1209.6 L1873.85 1209.6 L1873.27 1209.6 L1872.68 1209.6 L1872.09 1209.6 L1871.51 1209.6 L1870.92 1209.6 L1870.34 1209.6 L1869.75 1209.6 L1869.16 1209.6 L1868.58 1209.6 L1867.99 1209.6 L1867.4 1209.6 L1866.82 1209.6 L1866.23 1209.6 L1865.64 1209.6 L1865.06 1209.6 L1864.47 1209.6 L1863.88 1209.6 L1863.3 1209.6 L1862.71 1209.6 L1862.13 1209.6 L1861.54 1209.6 L1860.95 1209.6 L1860.37 1209.6 L1859.78 1209.6 L1859.19 1209.6 L1858.61 1209.6 L1858.02 1209.6 L1857.43 1209.6 L1856.85 1209.6 L1856.26 1209.6 L1855.68 1209.6 L1855.09 1209.6 L1854.5 1209.6 L1853.92 1209.6 L1853.33 1209.6 L1852.74 1209.6 L1852.16 1209.6 L1851.57 1209.6 L1850.98 1209.6 L1850.4 1209.6 L1849.81 1209.6 L1849.22 1209.6 L1848.64 1209.6 L1848.05 1209.6 L1847.47 1209.6 L1846.88 1209.6 L1846.29 1209.6 L1845.71 1209.6 L1845.12 1209.6 L1844.53 1209.6 L1843.95 1209.6 L1843.36 1209.6 L1842.77 1209.6 L1842.19 1209.6 L1841.6 1209.6 L1841.01 1209.6 L1840.43 1209.6 L1839.84 1209.6 L1839.26 1209.6 L1838.67 1209.6 L1838.08 1209.6 L1837.5 1209.6 L1836.91 1209.6 L1836.32 1209.6 L1835.74 1209.6 L1835.15 1209.6 L1834.56 1209.6 L1833.98 1209.6 L1833.39 1209.6 L1832.81 1209.6 L1832.22 1209.6 L1831.63 1209.6 L1831.05 1209.6 L1830.46 1209.6 L1829.87 1209.6 L1829.29 1209.6 L1828.7 1209.6 L1828.11 1209.6 L1827.53 1209.6 L1826.94 1209.6 L1826.35 1209.6 L1825.77 1209.6 L1825.18 1209.6 L1824.6 1209.6 L1824.01 1209.6 L1823.42 1209.6 L1822.84 1209.6 L1822.25 1209.6 L1821.66 1209.6 L1821.08 1209.6 L1820.49 1209.6 L1819.9 1209.6 L1819.32 1209.6 L1818.73 1209.6 L1818.14 1209.6 L1817.56 1209.6 L1816.97 1209.6 L1816.39 1209.6 L1815.8 1209.6 L1815.21 1209.6 L1814.63 1209.6 L1814.04 1209.6 L1813.45 1209.6 L1812.87 1209.6 L1812.28 1209.6 L1811.69 1209.6 L1811.11 1209.6 L1810.52 1209.6 L1809.94 1209.6 L1809.35 1209.6 L1808.76 1209.6 L1808.18 1209.6 L1807.59 1209.6 L1807 1209.6 L1806.42 1209.6 L1805.83 1209.6 L1805.24 1209.6 L1804.66 1209.6 L1804.07 1209.6 L1803.48 1209.6 L1802.9 1209.6 L1802.31 1209.6 L1801.73 1209.6 L1801.14 1209.6 L1800.55 1209.6 L1799.97 1209.6 L1799.38 1209.6 L1798.79 1209.6 L1798.21 1209.6 L1797.62 1209.6 L1797.03 1209.6 L1796.45 1209.6 L1795.86 1209.6 L1795.27 1209.6 L1794.69 1209.6 L1794.1 1209.6 L1793.52 1209.6 L1792.93 1209.6 L1792.34 1209.6 L1791.76 1209.6 L1791.17 1209.6 L1790.58 1209.6 L1790 1209.6 L1789.41 1209.6 L1788.82 1209.6 L1788.24 1209.6 L1787.65 1209.6 L1787.06 1209.6 L1786.48 1209.6 L1785.89 1209.6 L1785.31 1209.6 L1784.72 1209.6 L1784.13 1209.6 L1783.55 1209.6 L1782.96 1209.6 L1782.37 1209.6 L1781.79 1209.6 L1781.2 1209.6 L1780.61 1209.6 L1780.03 1209.6 L1779.44 1209.6 L1778.86 1209.6 L1778.27 1209.6 L1777.68 1209.6 L1777.1 1209.6 L1776.51 1209.6 L1775.92 1209.6 L1775.34 1209.6 L1774.75 1209.6 L1774.16 1209.6 L1773.58 1209.6 L1772.99 1209.6 L1772.4 1209.6 L1771.82 1209.6 L1771.23 1209.6 L1770.65 1209.6 L1770.06 1209.6 L1769.47 1209.6 L1768.89 1209.6 L1768.3 1209.6 L1767.71 1209.6 L1767.13 1209.6 L1766.54 1209.6 L1765.95 1209.6 L1765.37 1209.6 L1764.78 1209.6 L1764.19 1209.6 L1763.61 1209.6 L1763.02 1209.6 L1762.44 1209.6 L1761.85 1209.6 L1761.26 1209.6 L1760.68 1209.6 L1760.09 1209.6 L1759.5 1209.6 L1758.92 1209.6 L1758.33 1209.6 L1757.74 1209.6 L1757.16 1209.6 L1756.57 1209.6 L1755.99 1209.6 L1755.4 1209.6 L1754.81 1209.6 L1754.23 1209.6 L1753.64 1209.6 L1753.05 1209.6 L1752.47 1209.6 L1751.88 1209.6 L1751.29 1209.6 L1750.71 1209.6 L1750.12 1209.6 L1749.53 1209.6 L1748.95 1209.6 L1748.36 1209.6 L1747.78 1209.6 L1747.19 1209.6 L1746.6 1209.6 L1746.02 1209.6 L1745.43 1209.6 L1744.84 1209.6 L1744.26 1209.6 L1743.67 1209.6 L1743.08 1209.6 L1742.5 1209.6 L1741.91 1209.6 L1741.32 1209.6 L1740.74 1209.6 L1740.15 1209.6 L1739.57 1209.6 L1738.98 1209.6 L1738.39 1209.6 L1737.81 1209.6 L1737.22 1209.6 L1736.63 1209.6 L1736.05 1209.6 L1735.46 1209.6 L1734.87 1209.6 L1734.29 1209.6 L1733.7 1209.6 L1733.11 1209.6 L1732.53 1209.6 L1731.94 1209.6 L1731.36 1209.6 L1730.77 1209.6 L1730.18 1209.6 L1729.6 1209.6 L1729.01 1209.6 L1728.42 1209.6 L1727.84 1209.6 L1727.25 1209.6 L1726.66 1209.6 L1726.08 1209.6 L1725.49 1209.6 L1724.91 1209.6 L1724.32 1209.6 L1723.73 1209.6 L1723.15 1209.6 L1722.56 1209.6 L1721.97 1209.6 L1721.39 1209.6 L1720.8 1209.6 L1720.21 1209.6 L1719.63 1209.6 L1719.04 1209.6 L1718.45 1209.6 L1717.87 1209.6 L1717.28 1209.6 L1716.7 1209.6 L1716.11 1209.6 L1715.52 1209.6 L1714.94 1209.6 L1714.35 1209.6 L1713.76 1209.6 L1713.18 1209.6 L1712.59 1209.6 L1712 1209.6 L1711.42 1209.6 L1710.83 1209.6 L1710.24 1209.6 L1709.66 1209.6 L1709.07 1209.6 L1708.49 1209.6 L1707.9 1209.6 L1707.31 1209.6 L1706.73 1209.6 L1706.14 1209.6 L1705.55 1209.6 L1704.97 1209.6 L1704.38 1209.6 L1703.79 1209.6 L1703.21 1209.6 L1702.62 1209.6 L1702.04 1209.6 L1701.45 1209.6 L1700.86 1209.6 L1700.28 1209.6 L1699.69 1209.6 L1699.1 1209.6 L1698.52 1209.6 L1697.93 1209.6 L1697.34 1209.6 L1696.76 1209.6 L1696.17 1209.6 L1695.58 1209.6 L1695 1209.6 L1694.41 1209.6 L1693.83 1209.6 L1693.24 1209.6 L1692.65 1209.6 L1692.07 1209.6 L1691.48 1209.6 L1690.89 1209.6 L1690.31 1209.6 L1689.72 1209.6 L1689.13 1209.6 L1688.55 1209.6 L1687.96 1209.6 L1687.37 1209.6 L1686.79 1209.6 L1686.2 1209.6 L1685.62 1209.6 L1685.03 1209.6 L1684.44 1209.6 L1683.86 1209.6 L1683.27 1209.6 L1682.68 1209.6 L1682.1 1209.6 L1681.51 1209.6 L1680.92 1209.6 L1680.34 1209.6 L1679.75 1209.6 L1679.17 1209.6 L1678.58 1209.6 L1677.99 1209.6 L1677.41 1209.6 L1676.82 1209.6 L1676.23 1209.6 L1675.65 1209.6 L1675.06 1209.6 L1674.47 1209.6 L1673.89 1209.6 L1673.3 1209.6 L1672.71 1209.6 L1672.13 1209.6 L1671.54 1209.6 L1670.96 1209.6 L1670.37 1209.6 L1669.78 1209.6 L1669.2 1209.6 L1668.61 1209.6 L1668.02 1209.6 L1667.44 1209.6 L1666.85 1209.6 L1666.26 1209.6 L1665.68 1209.6 L1665.09 1209.6 L1664.5 1209.6 L1663.92 1209.6 L1663.33 1209.6 L1662.75 1209.6 L1662.16 1209.6 L1661.57 1209.6 L1660.99 1209.6 L1660.4 1209.6 L1659.81 1209.6 L1659.23 1209.6 L1658.64 1209.6 L1658.05 1209.6 L1657.47 1209.6 L1656.88 1209.6 L1656.29 1209.6 L1655.71 1209.6 L1655.12 1209.6 L1654.54 1209.6 L1653.95 1209.6 L1653.36 1209.6 L1652.78 1209.6 L1652.19 1209.6 L1651.6 1209.6 L1651.02 1209.6 L1650.43 1209.6 L1649.84 1209.6 L1649.26 1209.6 L1648.67 1209.6 L1648.09 1209.6 L1647.5 1209.6 L1646.91 1209.6 L1646.33 1209.6 L1645.74 1209.6 L1645.15 1209.6 L1644.57 1209.6 L1643.98 1209.6 L1643.39 1209.6 L1642.81 1209.6 L1642.22 1209.6 L1641.63 1209.6 L1641.05 1209.6 L1640.46 1209.6 L1639.88 1209.6 L1639.29 1209.6 L1638.7 1209.6 L1638.12 1209.6 L1637.53 1209.6 L1636.94 1209.6 L1636.36 1209.6 L1635.77 1209.6 L1635.18 1209.6 L1634.6 1209.6 L1634.01 1209.6 L1633.42 1209.6 L1632.84 1209.6 L1632.25 1209.6 L1631.67 1209.6 L1631.08 1209.6 L1630.49 1209.6 L1629.91 1209.6 L1629.32 1209.6 L1628.73 1209.6 L1628.15 1209.6 L1627.56 1209.6 L1626.97 1209.6 L1626.39 1209.6 L1625.8 1209.6 L1625.22 1209.6 L1624.63 1209.6 L1624.04 1209.6 L1623.46 1209.6 L1622.87 1209.6 L1622.28 1209.6 L1621.7 1209.6 L1621.11 1209.6 L1620.52 1209.6 L1619.94 1209.6 L1619.35 1209.6 L1618.76 1209.6 L1618.18 1209.6 L1617.59 1209.6 L1617.01 1209.6 L1616.42 1209.6 L1615.83 1209.6 L1615.25 1209.6 L1614.66 1209.6 L1614.07 1209.6 L1613.49 1209.6 L1612.9 1209.6 L1612.31 1209.6 L1611.73 1209.6 L1611.14 1209.6 L1610.55 1209.6 L1609.97 1209.6 L1609.38 1209.6 L1608.8 1209.6 L1608.21 1209.6 L1607.62 1209.6 L1607.04 1209.6 L1606.45 1209.6 L1605.86 1209.6 L1605.28 1209.6 L1604.69 1209.6 L1604.1 1209.6 L1603.52 1209.6 L1602.93 1209.6 L1602.34 1209.6 L1601.76 1209.6 L1601.17 1209.6 L1600.59 1209.6 L1600 1209.6 L1599.41 1209.6 L1598.83 1209.6 L1598.24 1209.6 L1597.65 1209.6 L1597.07 1209.6 L1596.48 1209.6 L1595.89 1209.6 L1595.31 1209.6 L1594.72 1209.6 L1594.14 1209.6 L1593.55 1209.6 L1592.96 1209.6 L1592.38 1209.6 L1591.79 1209.6 L1591.2 1209.6 L1590.62 1209.6 L1590.03 1209.6 L1589.44 1209.6 L1588.86 1209.6 L1588.27 1209.6 L1587.68 1209.6 L1587.1 1209.6 L1586.51 1209.6 L1585.93 1209.6 L1585.34 1209.6 L1584.75 1209.6 L1584.17 1209.6 L1583.58 1209.6 L1582.99 1209.6 L1582.41 1209.6 L1581.82 1209.6 L1581.23 1209.6 L1580.65 1209.6 L1580.06 1209.6 L1579.47 1209.6 L1578.89 1209.6 L1578.3 1209.6 L1577.72 1209.6 L1577.13 1209.6 L1576.54 1209.6 L1575.96 1209.6 L1575.37 1209.6 L1574.78 1209.6 L1574.2 1209.6 L1573.61 1209.6 L1573.02 1209.6 L1572.44 1209.6 L1571.85 1209.6 L1571.27 1209.6 L1570.68 1209.6 L1570.09 1209.6 L1569.51 1209.6 L1568.92 1209.6 L1568.33 1209.6 L1567.75 1209.6 L1567.16 1209.6 L1566.57 1209.6 L1565.99 1209.6 L1565.4 1209.6 L1564.81 1209.6 L1564.23 1209.6 L1563.64 1209.6 L1563.06 1209.6 L1562.47 1209.6 L1561.88 1209.6 L1561.3 1209.6 L1560.71 1209.6 L1560.12 1209.6 L1559.54 1209.6 L1558.95 1209.6 L1558.36 1209.6 L1557.78 1209.6 L1557.19 1209.6 L1556.6 1209.6 L1556.02 1209.6 L1555.43 1209.6 L1554.85 1209.6 L1554.26 1209.6 L1553.67 1209.6 L1553.09 1209.6 L1552.5 1209.6 L1551.91 1209.6 L1551.33 1209.6 L1550.74 1209.6 L1550.15 1209.6 L1549.57 1209.6 L1548.98 1209.6 L1548.4 1209.6 L1547.81 1209.6 L1547.22 1209.6 L1546.64 1209.6 L1546.05 1209.6 L1545.46 1209.6 L1544.88 1209.6 L1544.29 1209.6 L1543.7 1209.6 L1543.12 1209.6 L1542.53 1209.6 L1541.94 1209.6 L1541.36 1209.6 L1540.77 1209.6 L1540.19 1209.6 L1539.6 1209.6 L1539.01 1209.6 L1538.43 1209.6 L1537.84 1209.6 L1537.25 1209.6 L1536.67 1209.6 L1536.08 1209.6 L1535.49 1209.6 L1534.91 1209.6 L1534.32 1209.6 L1533.73 1209.6 L1533.15 1209.6 L1532.56 1209.6 L1531.98 1209.6 L1531.39 1209.6 L1530.8 1209.6 L1530.22 1209.6 L1529.63 1209.6 L1529.04 1209.6 L1528.46 1209.6 L1527.87 1209.6 L1527.28 1209.6 L1526.7 1209.6 L1526.11 1209.6 L1525.52 1209.6 L1524.94 1209.6 L1524.35 1209.6 L1523.77 1209.6 L1523.18 1209.6 L1522.59 1209.6 L1522.01 1209.6 L1521.42 1209.6 L1520.83 1209.6 L1520.25 1209.6 L1519.66 1209.6 L1519.07 1209.6 L1518.49 1209.6 L1517.9 1209.6 L1517.32 1209.6 L1516.73 1209.6 L1516.14 1209.6 L1515.56 1209.6 L1514.97 1209.6 L1514.38 1209.6 L1513.8 1209.6 L1513.21 1209.6 L1512.62 1209.6 L1512.04 1209.6 L1511.45 1209.6 L1510.86 1209.6 L1510.28 1209.6 L1509.69 1209.6 L1509.11 1209.6 L1508.52 1209.6 L1507.93 1209.6 L1507.35 1209.6 L1506.76 1209.6 L1506.17 1209.6 L1505.59 1209.6 L1505 1209.6 L1504.41 1209.6 L1503.83 1209.6 L1503.24 1209.6 L1502.65 1209.6 L1502.07 1209.6 L1501.48 1209.6 L1500.9 1209.6 L1500.31 1209.6 L1499.72 1209.6 L1499.14 1209.6 L1498.55 1209.6 L1497.96 1209.6 L1497.38 1209.6 L1496.79 1209.6 L1496.2 1209.6 L1495.62 1209.6 L1495.03 1209.6 L1494.45 1209.6 L1493.86 1209.6 L1493.27 1209.6 L1492.69 1209.6 L1492.1 1209.6 L1491.51 1209.6 L1490.93 1209.6 L1490.34 1209.6 L1489.75 1209.6 L1489.17 1209.6 L1488.58 1209.6 L1487.99 1209.6 L1487.41 1209.6 L1486.82 1209.6 L1486.24 1209.6 L1485.65 1209.6 L1485.06 1209.6 L1484.48 1209.6 L1483.89 1209.6 L1483.3 1209.6 L1482.72 1209.6 L1482.13 1209.6 L1481.54 1209.6 L1480.96 1209.6 L1480.37 1209.6 L1479.78 1209.6 L1479.2 1209.6 L1478.61 1209.6 L1478.03 1209.6 L1477.44 1209.6 L1476.85 1209.6 L1476.27 1209.6 L1475.68 1209.6 L1475.09 1209.6 L1474.51 1209.6 L1473.92 1209.6 L1473.33 1209.6 L1472.75 1209.6 L1472.16 1209.6 L1471.57 1209.6 L1470.99 1209.6 L1470.4 1209.6 L1469.82 1209.6 L1469.23 1209.6 L1468.64 1209.6 L1468.06 1209.6 L1467.47 1209.6 L1466.88 1209.6 L1466.3 1209.6 L1465.71 1209.6 L1465.12 1209.6 L1464.54 1209.6 L1463.95 1209.6 L1463.37 1209.6 L1462.78 1209.6 L1462.19 1209.6 L1461.61 1209.6 L1461.02 1209.6 L1460.43 1209.6 L1459.85 1209.6 L1459.26 1209.6 L1458.67 1209.6 L1458.09 1209.6 L1457.5 1209.6 L1456.91 1209.6 L1456.33 1209.6 L1455.74 1209.6 L1455.16 1209.6 L1454.57 1209.6 L1453.98 1209.6 L1453.4 1209.6 L1452.81 1209.6 L1452.22 1209.6 L1451.64 1209.6 L1451.05 1209.6 L1450.46 1209.6 L1449.88 1209.6 L1449.29 1209.6 L1448.7 1209.6 L1448.12 1209.6 L1447.53 1209.6 L1446.95 1209.6 L1446.36 1209.6 L1445.77 1209.6 L1445.19 1209.6 L1444.6 1209.6 L1444.01 1209.6 L1443.43 1209.6 L1442.84 1209.6 L1442.25 1209.6 L1441.67 1209.6 L1441.08 1209.6 L1440.5 1209.6 L1439.91 1209.6 L1439.32 1209.6 L1438.74 1209.6 L1438.15 1209.6 L1437.56 1209.6 L1436.98 1209.6 L1436.39 1209.6 L1435.8 1209.6 L1435.22 1209.6 L1434.63 1209.6 L1434.04 1209.6 L1433.46 1209.6 L1432.87 1209.6 L1432.29 1209.6 L1431.7 1209.6 L1431.11 1209.6 L1430.53 1209.6 L1429.94 1209.6 L1429.35 1209.6 L1428.77 1209.6 L1428.18 1209.6 L1427.59 1209.6 L1427.01 1209.6 L1426.42 1209.6 L1425.83 1209.6 L1425.25 1209.6 L1424.66 1209.6 L1424.08 1209.6 L1423.49 1209.6 L1422.9 1209.6 L1422.32 1209.6 L1421.73 1209.6 L1421.14 1209.6 L1420.56 1209.6 L1419.97 1209.6 L1419.38 1209.6 L1418.8 1209.6 L1418.21 1209.6 L1417.63 1209.6 L1417.04 1209.6 L1416.45 1209.6 L1415.87 1209.6 L1415.28 1209.6 L1414.69 1209.6 L1414.11 1209.6 L1413.52 1209.6 L1412.93 1209.6 L1412.35 1209.6 L1411.76 1209.6 L1411.17 1209.6 L1410.59 1209.6 L1410 1209.6 L1409.42 1209.6 L1408.83 1209.6 L1408.24 1209.6 L1407.66 1209.6 L1407.07 1209.6 L1406.48 1209.6 L1405.9 1209.6 L1405.31 1209.6 L1404.72 1209.6 L1404.14 1209.6 L1403.55 1209.6 L1402.96 1209.6 L1402.38 1209.6 L1401.79 1209.6 L1401.21 1209.6 L1400.62 1209.6 L1400.03 1209.6 L1399.45 1209.6 L1398.86 1209.6 L1398.27 1209.6 L1397.69 1209.6 L1397.1 1209.6 L1396.51 1209.6 L1395.93 1209.6 L1395.34 1209.6 L1394.75 1209.6 L1394.17 1209.6 L1393.58 1209.6 L1393 1209.6 L1392.41 1209.6 L1391.82 1209.6 L1391.24 1209.6 L1390.65 1209.6 L1390.06 1209.6 L1389.48 1209.6 L1388.89 1209.6 L1388.3 1209.6 L1387.72 1209.6 L1387.13 1209.6 L1386.55 1209.6 L1385.96 1209.6 L1385.37 1209.6 L1384.79 1209.6 L1384.2 1209.6 L1383.61 1209.6 L1383.03 1209.6 L1382.44 1209.6 L1381.85 1209.6 L1381.27 1209.6 L1380.68 1209.6 L1380.09 1209.6 L1379.51 1209.6 L1378.92 1209.6 L1378.34 1209.6 L1377.75 1209.6 L1377.16 1209.6 L1376.58 1209.6 L1375.99 1209.6 L1375.4 1209.6 L1374.82 1209.6 L1374.23 1209.6 L1373.64 1209.6 L1373.06 1209.6 L1372.47 1209.6 L1371.88 1209.6 L1371.3 1209.6 L1370.71 1209.6 L1370.13 1209.6 L1369.54 1209.6 L1368.95 1209.6 L1368.37 1209.6 L1367.78 1209.6 L1367.19 1209.6 L1366.61 1209.6 L1366.02 1209.6 L1365.43 1209.6 L1364.85 1209.6 L1364.26 1209.6 L1363.68 1209.6 L1363.09 1209.6 L1362.5 1209.6 L1361.92 1209.6 L1361.33 1209.6 L1360.74 1209.6 L1360.16 1209.6 L1359.57 1209.6 L1358.98 1209.6 L1358.4 1209.6 L1357.81 1209.6 L1357.22 1209.6 L1356.64 1209.6 L1356.05 1209.6 L1355.47 1209.6 L1354.88 1209.6 L1354.29 1209.6 L1353.71 1209.6 L1353.12 1209.6 L1352.53 1209.6 L1351.95 1209.6 L1351.36 1209.6 L1350.77 1209.6 L1350.19 1209.6 L1349.6 1209.6 L1349.01 1209.6 L1348.43 1209.6 L1347.84 1209.6 L1347.26 1209.6 L1346.67 1209.6 L1346.08 1209.6 L1345.5 1209.6 L1344.91 1209.6 L1344.32 1209.6 L1343.74 1209.6 L1343.15 1209.6 L1342.56 1209.6 L1341.98 1209.6 L1341.39 1209.6 L1340.8 1209.6 L1340.22 1209.6 L1339.63 1209.6 L1339.05 1209.6 L1338.46 1209.6 L1337.87 1209.6 L1337.29 1209.6 L1336.7 1209.6 L1336.11 1209.6 L1335.53 1209.6 L1334.94 1209.6 L1334.35 1209.6 L1333.77 1209.6 L1333.18 1209.6 L1332.6 1209.6 L1332.01 1209.6 L1331.42 1209.6 L1330.84 1209.6 L1330.25 1209.6 L1329.66 1209.6 L1329.08 1209.6 L1328.49 1209.6 L1327.9 1209.6 L1327.32 1209.6 L1326.73 1209.6 L1326.14 1209.6 L1325.56 1209.6 L1324.97 1209.6 L1324.39 1209.6 L1323.8 1209.6 L1323.21 1209.6 L1322.63 1209.6 L1322.04 1209.6 L1321.45 1209.6 L1320.87 1209.6 L1320.28 1209.6 L1319.69 1209.6 L1319.11 1209.6 L1318.52 1209.6 L1317.93 1209.6 L1317.35 1209.6 L1316.76 1209.6 L1316.18 1209.6 L1315.59 1209.6 L1315 1209.6 L1314.42 1209.6 L1313.83 1209.6 L1313.24 1209.6 L1312.66 1209.6 L1312.07 1209.6 L1311.48 1209.6 L1310.9 1209.6 L1310.31 1209.6 L1309.73 1209.6 L1309.14 1209.6 L1308.55 1209.6 L1307.97 1209.6 L1307.38 1209.6 L1306.79 1209.6 L1306.21 1209.6 L1305.62 1209.6 L1305.03 1209.6 L1304.45 1209.6 L1303.86 1209.6 L1303.27 1209.6 L1302.69 1209.6 L1302.1 1209.6 L1301.52 1209.6 L1300.93 1209.6 L1300.34 1209.6 L1299.76 1209.6 L1299.17 1209.6 L1298.58 1209.6 L1298 1209.6 L1297.41 1209.6 L1296.82 1209.6 L1296.24 1209.6 L1295.65 1209.6 L1295.06 1209.6 L1294.48 1209.6 L1293.89 1209.6 L1293.31 1209.6 L1292.72 1209.6 L1292.13 1209.6 L1291.55 1209.6 L1290.96 1209.6 L1290.37 1209.6 L1289.79 1209.6 L1289.2 1209.6 L1288.61 1209.6 L1288.03 1209.6 L1287.44 1209.6 L1286.86 1209.6 L1286.27 1209.6 L1285.68 1209.6 L1285.1 1209.6 L1284.51 1209.6 L1283.92 1209.6 L1283.34 1209.6 L1282.75 1209.6 L1282.16 1209.6 L1281.58 1209.6 L1280.99 1209.6 L1280.4 1209.6 L1279.82 1209.6 L1279.23 1209.6 L1278.65 1209.6 L1278.06 1209.6 L1277.47 1209.6 L1276.89 1209.6 L1276.3 1209.6 L1275.71 1209.6 L1275.13 1209.6 L1274.54 1209.6 L1273.95 1209.6 L1273.37 1209.6 L1272.78 1209.6 L1272.19 1209.6 L1271.61 1209.6 L1271.02 1209.6 L1270.44 1209.6 L1269.85 1209.6 L1269.26 1209.6 L1268.68 1209.6 L1268.09 1209.6 L1267.5 1209.6 L1266.92 1209.6 L1266.33 1209.6 L1265.74 1209.6 L1265.16 1209.6 L1264.57 1209.6 L1263.98 1209.6 L1263.4 1209.6 L1262.81 1209.6 L1262.23 1209.6 L1261.64 1209.6 L1261.05 1209.6 L1260.47 1209.6 L1259.88 1209.6 L1259.29 1209.6 L1258.71 1209.6 L1258.12 1209.6 L1257.53 1209.6 L1256.95 1209.6 L1256.36 1209.6 L1255.78 1209.6 L1255.19 1209.6 L1254.6 1209.6 L1254.02 1209.6 L1253.43 1209.6 L1252.84 1209.6 L1252.26 1209.6 L1251.67 1209.6 L1251.08 1209.6 L1250.5 1209.6 L1249.91 1209.6 L1249.32 1209.6 L1248.74 1209.6 L1248.15 1209.6 L1247.57 1209.6 L1246.98 1209.6 L1246.39 1209.6 L1245.81 1209.6 L1245.22 1209.6 L1244.63 1209.6 L1244.05 1209.6 L1243.46 1209.6 L1242.87 1209.6 L1242.29 1209.6 L1241.7 1209.6 L1241.11 1209.6 L1240.53 1209.6 L1239.94 1209.6 L1239.36 1209.6 L1238.77 1209.6 L1238.18 1209.6 L1237.6 1209.6 L1237.01 1209.6 L1236.42 1209.6 L1235.84 1209.6 L1235.25 1209.6 L1234.66 1209.6 L1234.08 1209.6 L1233.49 1209.6 L1232.91 1209.6 L1232.32 1209.6 L1231.73 1209.6 L1231.15 1209.6 L1230.56 1209.6 L1229.97 1209.6 L1229.39 1209.6 L1228.8 1209.6 L1228.21 1209.6 L1227.63 1209.6 L1227.04 1209.6 L1226.45 1209.6 L1225.87 1209.6 L1225.28 1209.6 L1224.7 1209.6 L1224.11 1209.6 L1223.52 1209.6 L1222.94 1209.6 L1222.35 1209.6 L1221.76 1209.6 L1221.18 1209.6 L1220.59 1209.6 L1220 1209.6 L1219.42 1209.6 L1218.83 1209.6 L1218.24 1209.6 L1217.66 1209.6 L1217.07 1209.6 L1216.49 1209.6 L1215.9 1209.6 L1215.31 1209.6 L1214.73 1209.6 L1214.14 1209.6 L1213.55 1209.6 L1212.97 1209.6 L1212.38 1209.6 L1211.79 1209.6 L1211.21 1209.6 L1210.62 1209.6 L1210.03 1209.6 L1209.45 1209.6 L1208.86 1209.6 L1208.28 1209.6 L1207.69 1209.6 L1207.1 1209.6 L1206.52 1209.6 L1205.93 1209.6 L1205.34 1209.6 L1204.76 1209.6 L1204.17 1209.6 L1203.58 1209.6 L1203 1209.6 L1202.41 1209.6 L1201.83 1209.6 L1201.24 1209.6 L1200.65 1209.6 L1200.07 1209.6 L1199.48 1209.6 L1198.89 1209.6 L1198.31 1209.6 L1197.72 1209.6 L1197.13 1209.6 L1196.55 1209.6 L1195.96 1209.6 L1195.37 1209.6 L1194.79 1209.6 L1194.2 1209.6 L1193.62 1209.6 L1193.03 1209.6 L1192.44 1209.6 L1191.86 1209.6 L1191.27 1209.6 L1190.68 1209.6 L1190.1 1209.6 L1189.51 1209.6 L1188.92 1209.6 L1188.34 1209.6 L1187.75 1209.6 L1187.16 1209.6 L1186.58 1209.6 L1185.99 1209.6 L1185.41 1209.6 L1184.82 1209.6 L1184.23 1209.6 L1183.65 1209.6 L1183.06 1209.6 L1182.47 1209.6 L1181.89 1209.6 L1181.3 1209.6 L1180.71 1209.6 L1180.13 1209.6 L1179.54 1209.6 L1178.96 1209.6 L1178.37 1209.6 L1177.78 1209.6 L1177.2 1209.6 L1176.61 1209.6 L1176.02 1209.6 L1175.44 1209.6 L1174.85 1209.6 L1174.26 1209.6 L1173.68 1209.6 L1173.09 1209.6 L1172.5 1209.6 L1171.92 1209.6 L1171.33 1209.6 L1170.75 1209.6 L1170.16 1209.6 L1169.57 1209.6 L1168.99 1209.6 L1168.4 1209.6 L1167.81 1209.6 L1167.23 1209.6 L1166.64 1209.6 L1166.05 1209.6 L1165.47 1209.6 L1164.88 1209.6 L1164.29 1209.6 L1163.71 1209.6 L1163.12 1209.6 L1162.54 1209.6 L1161.95 1209.6 L1161.36 1209.6 L1160.78 1209.6 L1160.19 1209.6 L1159.6 1209.6 L1159.02 1209.6 L1158.43 1209.6 L1157.84 1209.6 L1157.26 1209.6 L1156.67 1209.6 L1156.09 1209.6 L1155.5 1209.6 L1154.91 1209.6 L1154.33 1209.6 L1153.74 1209.6 L1153.15 1209.6 L1152.57 1209.6 L1151.98 1209.6 L1151.39 1209.6 L1150.81 1209.6 L1150.22 1209.6 L1149.63 1209.6 L1149.05 1209.6 L1148.46 1209.6 L1147.88 1209.6 L1147.29 1209.6 L1146.7 1209.6 L1146.12 1209.6 L1145.53 1209.6 L1144.94 1209.6 L1144.36 1209.6 L1143.77 1209.6 L1143.18 1209.6 L1142.6 1209.6 L1142.01 1209.6 L1141.42 1209.6 L1140.84 1209.6 L1140.25 1209.6 L1139.67 1209.6 L1139.08 1209.6 L1138.49 1209.6 L1137.91 1209.6 L1137.32 1209.6 L1136.73 1209.6 L1136.15 1209.6 L1135.56 1209.6 L1134.97 1209.6 L1134.39 1209.6 L1133.8 1209.6 L1133.21 1209.6 L1132.63 1209.6 L1132.04 1209.6 L1131.46 1209.6 L1130.87 1209.6 L1130.28 1209.6 L1129.7 1209.6 L1129.11 1209.6 L1128.52 1209.6 L1127.94 1209.6 L1127.35 1209.6 L1126.76 1209.6 L1126.18 1209.6 L1125.59 1209.6 L1125.01 1209.6 L1124.42 1209.6 L1123.83 1209.6 L1123.25 1209.6 L1122.66 1209.6 L1122.07 1209.6 L1121.49 1209.6 L1120.9 1209.6 L1120.31 1209.6 L1119.73 1209.6 L1119.14 1209.6 L1118.55 1209.6 L1117.97 1209.6 L1117.38 1209.6 L1116.8 1209.6 L1116.21 1209.6 L1115.62 1209.6 L1115.04 1209.6 L1114.45 1209.6 L1113.86 1209.6 L1113.28 1209.6 L1112.69 1209.6 L1112.1 1209.6 L1111.52 1209.6 L1110.93 1209.6 L1110.34 1209.6 L1109.76 1209.6 L1109.17 1209.6 L1108.59 1209.6 L1108 1209.6 L1107.41 1209.6 L1106.83 1209.6 L1106.24 1209.6 L1105.65 1209.6 L1105.07 1209.6 L1104.48 1209.6 L1103.89 1209.6 L1103.31 1209.6 L1102.72 1209.6 L1102.14 1209.6 L1101.55 1209.6 L1100.96 1209.6 L1100.38 1209.6 L1099.79 1209.6 L1099.2 1209.6 L1098.62 1209.6 L1098.03 1209.6 L1097.44 1209.6 L1096.86 1209.6 L1096.27 1209.6 L1095.68 1209.6 L1095.1 1209.6 L1094.51 1209.6 L1093.93 1209.6 L1093.34 1209.6 L1092.75 1209.6 L1092.17 1209.6 L1091.58 1209.6 L1090.99 1209.6 L1090.41 1209.6 L1089.82 1209.6 L1089.23 1209.6 L1088.65 1209.6 L1088.06 1209.6 L1087.47 1209.6 L1086.89 1209.6 L1086.3 1209.6 L1085.72 1209.6 L1085.13 1209.6 L1084.54 1209.6 L1083.96 1209.6 L1083.37 1209.6 L1082.78 1209.6 L1082.2 1209.6 L1081.61 1209.6 L1081.02 1209.6 L1080.44 1209.6 L1079.85 1209.6 L1079.26 1209.6 L1078.68 1209.6 L1078.09 1209.6 L1077.51 1209.6 L1076.92 1209.6 L1076.33 1209.6 L1075.75 1209.6 L1075.16 1209.6 L1074.57 1209.6 L1073.99 1209.6 L1073.4 1209.6 L1072.81 1209.6 L1072.23 1209.6 L1071.64 1209.6 L1071.06 1209.6 L1070.47 1209.6 L1069.88 1209.6 L1069.3 1209.6 L1068.71 1209.6 L1068.12 1209.6 L1067.54 1209.6 L1066.95 1209.6 L1066.36 1209.6 L1065.78 1209.6 L1065.19 1209.6 L1064.6 1209.6 L1064.02 1209.6 L1063.43 1209.6 L1062.85 1209.6 L1062.26 1209.6 L1061.67 1209.6 L1061.09 1209.6 L1060.5 1209.6 L1059.91 1209.6 L1059.33 1209.6 L1058.74 1209.6 L1058.15 1209.6 L1057.57 1209.6 L1056.98 1209.6 L1056.39 1209.6 L1055.81 1209.6 L1055.22 1209.6 L1054.64 1209.6 L1054.05 1209.6 L1053.46 1209.6 L1052.88 1209.6 L1052.29 1209.6 L1051.7 1209.6 L1051.12 1209.6 L1050.53 1209.6 L1049.94 1209.6 L1049.36 1209.6 L1048.77 1209.6 L1048.19 1209.6 L1047.6 1209.6 L1047.01 1209.6 L1046.43 1209.6 L1045.84 1209.6 L1045.25 1209.6 L1044.67 1209.6 L1044.08 1209.6 L1043.49 1209.6 L1042.91 1209.6 L1042.32 1209.6 L1041.73 1209.6 L1041.15 1209.6 L1040.56 1209.6 L1039.98 1209.6 L1039.39 1209.6 L1038.8 1209.6 L1038.22 1209.6 L1037.63 1209.6 L1037.04 1209.6 L1036.46 1209.6 L1035.87 1209.6 L1035.28 1209.6 L1034.7 1209.6 L1034.11 1209.6 L1033.52 1209.6 L1032.94 1209.6 L1032.35 1209.6 L1031.77 1209.6 L1031.18 1209.6 L1030.59 1209.6 L1030.01 1209.6 L1029.42 1209.6 L1028.83 1209.6 L1028.25 1209.6 L1027.66 1209.6 L1027.07 1209.6 L1026.49 1209.6 L1025.9 1209.6 L1025.32 1209.6 L1024.73 1209.6 L1024.14 1209.6 L1023.56 1209.6 L1022.97 1209.6 L1022.38 1209.6 L1021.8 1209.6 L1021.21 1209.6 L1020.62 1209.6 L1020.04 1209.6 L1019.45 1209.6 L1018.86 1209.6 L1018.28 1209.6 L1017.69 1209.6 L1017.11 1209.6 L1016.52 1209.6 L1015.93 1209.6 L1015.35 1209.6 L1014.76 1209.6 L1014.17 1209.6 L1013.59 1209.6 L1013 1209.6 L1012.41 1209.6 L1011.83 1209.6 L1011.24 1209.6 L1010.65 1209.6 L1010.07 1209.6 L1009.48 1209.6 L1008.9 1209.6 L1008.31 1209.6 L1007.72 1209.6 L1007.14 1209.6 L1006.55 1209.6 L1005.96 1209.6 L1005.38 1209.6 L1004.79 1209.6 L1004.2 1209.6 L1003.62 1209.6 L1003.03 1209.6 L1002.44 1209.6 L1001.86 1209.6 L1001.27 1209.6 L1000.69 1209.6 L1000.1 1209.6 L999.513 1209.6 L998.926 1209.6 L998.34 1209.6 L997.754 1209.6 L997.167 1209.6 L996.581 1209.6 L995.994 1209.6 L995.408 1209.6 L994.822 1209.6 L994.235 1209.6 L993.649 1209.6 L993.062 1209.6 L992.476 1209.6 L991.889 1209.6 L991.303 1209.6 L990.717 1209.6 L990.13 1209.6 L989.544 1209.6 L988.957 1209.6 L988.371 1209.6 L987.785 1209.6 L987.198 1209.6 L986.612 1209.6 L986.025 1209.6  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip602)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.99 986.612,1209.99 987.198,1209.99 987.785,1209.99 988.371,1209.99 988.957,1209.99 989.544,1209.99 990.13,1209.99 990.717,1209.99 991.303,1209.99 991.889,1209.99 992.476,1209.99 993.062,1209.99 993.649,1209.99 994.235,1209.99 994.822,1209.99 995.408,1209.99 995.994,1209.99 996.581,1209.99 997.167,1209.99 997.754,1209.99 998.34,1209.99 998.926,1209.99 999.513,1209.99 1000.1,1209.99 1000.69,1209.99 1001.27,1209.99 1001.86,1209.99 1002.44,1209.99 1003.03,1209.99 1003.62,1209.99 1004.2,1209.99 1004.79,1209.99 1005.38,1209.99 1005.96,1209.99 1006.55,1209.99 1007.14,1209.99 1007.72,1209.99 1008.31,1209.99 1008.9,1209.99 1009.48,1209.99 1010.07,1209.99 1010.65,1209.99 1011.24,1209.99 1011.83,1209.99 1012.41,1209.99 1013,1209.99 1013.59,1209.99 1014.17,1209.99 1014.76,1209.99 1015.35,1209.99 1015.93,1209.99 1016.52,1209.99 1017.11,1209.99 1017.69,1209.99 1018.28,1209.99 1018.86,1209.99 1019.45,1209.99 1020.04,1209.99 1020.62,1209.99 1021.21,1209.99 1021.8,1209.99 1022.38,1209.99 1022.97,1209.99 1023.56,1209.99 1024.14,1209.99 1024.73,1209.99 1025.32,1209.99 1025.9,1209.99 1026.49,1209.99 1027.07,1209.99 1027.66,1209.99 1028.25,1209.99 1028.83,1209.99 1029.42,1209.99 1030.01,1209.99 1030.59,1209.99 1031.18,1209.99 1031.77,1209.99 1032.35,1209.99 1032.94,1209.99 1033.52,1209.99 1034.11,1209.99 1034.7,1209.99 1035.28,1209.99 1035.87,1209.99 1036.46,1209.99 1037.04,1209.99 1037.63,1209.99 1038.22,1209.99 1038.8,1209.99 1039.39,1209.99 1039.98,1209.99 1040.56,1209.99 1041.15,1209.99 1041.73,1209.99 1042.32,1209.99 1042.91,1209.99 1043.49,1209.99 1044.08,1209.99 1044.67,1209.99 1045.25,1209.99 1045.84,1209.99 1046.43,1209.99 1047.01,1209.99 1047.6,1209.99 1048.19,1209.99 1048.77,1209.99 1049.36,1209.99 1049.94,1209.99 1050.53,1209.99 1051.12,1209.99 1051.7,1209.99 1052.29,1209.99 1052.88,1209.99 1053.46,1209.99 1054.05,1209.99 1054.64,1209.99 1055.22,1209.99 1055.81,1209.99 1056.39,1209.99 1056.98,1209.99 1057.57,1209.99 1058.15,1209.99 1058.74,1209.99 1059.33,1209.99 1059.91,1209.99 1060.5,1209.99 1061.09,1209.99 1061.67,1209.99 1062.26,1209.99 1062.85,1209.99 1063.43,1209.99 1064.02,1209.99 1064.6,1209.99 1065.19,1209.99 1065.78,1209.99 1066.36,1209.99 1066.95,1209.99 1067.54,1209.99 1068.12,1209.99 1068.71,1209.99 1069.3,1209.99 1069.88,1209.99 1070.47,1209.99 1071.06,1209.99 1071.64,1209.99 1072.23,1209.99 1072.81,1209.99 1073.4,1209.99 1073.99,1209.99 1074.57,1209.99 1075.16,1209.99 1075.75,1209.99 1076.33,1209.99 1076.92,1209.99 1077.51,1209.99 1078.09,1209.99 1078.68,1209.99 1079.26,1209.99 1079.85,1209.99 1080.44,1209.99 1081.02,1209.99 1081.61,1209.99 1082.2,1209.99 1082.78,1209.99 1083.37,1209.99 1083.96,1209.99 1084.54,1209.99 1085.13,1209.99 1085.72,1209.99 1086.3,1209.99 1086.89,1209.99 1087.47,1209.99 1088.06,1209.99 1088.65,1209.99 1089.23,1209.99 1089.82,1209.99 1090.41,1209.99 1090.99,1209.99 1091.58,1209.99 1092.17,1209.99 1092.75,1209.99 1093.34,1209.99 1093.93,1209.99 1094.51,1209.99 1095.1,1209.99 1095.68,1209.99 1096.27,1209.99 1096.86,1209.99 1097.44,1209.99 1098.03,1209.99 1098.62,1209.99 1099.2,1209.99 1099.79,1209.99 1100.38,1209.99 1100.96,1209.99 1101.55,1209.99 1102.14,1209.99 1102.72,1209.99 1103.31,1209.99 1103.89,1209.99 1104.48,1209.99 1105.07,1209.99 1105.65,1209.99 1106.24,1209.99 1106.83,1209.99 1107.41,1209.99 1108,1209.99 1108.59,1209.99 1109.17,1209.99 1109.76,1209.99 1110.34,1209.99 1110.93,1209.99 1111.52,1209.99 1112.1,1209.99 1112.69,1209.99 1113.28,1209.99 1113.86,1209.99 1114.45,1209.99 1115.04,1209.99 1115.62,1209.99 1116.21,1209.99 1116.8,1209.99 1117.38,1209.99 1117.97,1209.99 1118.55,1209.99 1119.14,1209.99 1119.73,1209.99 1120.31,1209.99 1120.9,1209.99 1121.49,1209.99 1122.07,1209.99 1122.66,1209.99 1123.25,1209.99 1123.83,1209.99 1124.42,1209.99 1125.01,1209.99 1125.59,1209.99 1126.18,1209.99 1126.76,1209.99 1127.35,1209.99 1127.94,1209.99 1128.52,1209.99 1129.11,1209.99 1129.7,1209.99 1130.28,1209.99 1130.87,1209.99 1131.46,1209.99 1132.04,1209.99 1132.63,1209.99 1133.21,1209.99 1133.8,1209.99 1134.39,1209.99 1134.97,1209.99 1135.56,1209.99 1136.15,1209.99 1136.73,1209.99 1137.32,1209.99 1137.91,1209.99 1138.49,1209.99 1139.08,1209.99 1139.67,1209.99 1140.25,1209.99 1140.84,1209.99 1141.42,1209.99 1142.01,1209.99 1142.6,1209.99 1143.18,1209.99 1143.77,1209.99 1144.36,1209.99 1144.94,1209.99 1145.53,1209.99 1146.12,1209.99 1146.7,1209.99 1147.29,1209.99 1147.88,1209.99 1148.46,1209.99 1149.05,1209.99 1149.63,1209.99 1150.22,1209.99 1150.81,1209.99 1151.39,1209.99 1151.98,1209.99 1152.57,1209.99 1153.15,1209.99 1153.74,1209.99 1154.33,1209.99 1154.91,1209.99 1155.5,1209.99 1156.09,1209.99 1156.67,1209.99 1157.26,1209.99 1157.84,1209.99 1158.43,1209.99 1159.02,1209.99 1159.6,1209.99 1160.19,1209.99 1160.78,1209.99 1161.36,1209.99 1161.95,1209.99 1162.54,1209.99 1163.12,1209.99 1163.71,1209.99 1164.29,1209.99 1164.88,1209.99 1165.47,1209.99 1166.05,1209.99 1166.64,1209.99 1167.23,1209.99 1167.81,1209.99 1168.4,1209.99 1168.99,1209.99 1169.57,1209.99 1170.16,1209.99 1170.75,1209.99 1171.33,1209.99 1171.92,1209.99 1172.5,1209.99 1173.09,1209.99 1173.68,1209.99 1174.26,1209.99 1174.85,1209.99 1175.44,1209.99 1176.02,1209.99 1176.61,1209.99 1177.2,1209.99 1177.78,1209.99 1178.37,1209.99 1178.96,1209.99 1179.54,1209.99 1180.13,1209.99 1180.71,1209.99 1181.3,1209.99 1181.89,1209.99 1182.47,1209.99 1183.06,1209.99 1183.65,1209.99 1184.23,1209.99 1184.82,1209.99 1185.41,1209.99 1185.99,1209.99 1186.58,1209.99 1187.16,1209.99 1187.75,1209.99 1188.34,1209.99 1188.92,1209.99 1189.51,1209.99 1190.1,1209.99 1190.68,1209.99 1191.27,1209.99 1191.86,1209.99 1192.44,1209.99 1193.03,1209.99 1193.62,1209.99 1194.2,1209.99 1194.79,1209.99 1195.37,1209.99 1195.96,1209.99 1196.55,1209.99 1197.13,1209.99 1197.72,1209.99 1198.31,1209.99 1198.89,1209.99 1199.48,1209.99 1200.07,1209.99 1200.65,1209.99 1201.24,1209.99 1201.83,1209.99 1202.41,1209.99 1203,1209.99 1203.58,1209.99 1204.17,1209.99 1204.76,1209.99 1205.34,1209.99 1205.93,1209.99 1206.52,1209.99 1207.1,1209.99 1207.69,1209.99 1208.28,1209.99 1208.86,1209.99 1209.45,1209.99 1210.03,1209.99 1210.62,1209.99 1211.21,1209.99 1211.79,1209.99 1212.38,1209.99 1212.97,1209.99 1213.55,1209.99 1214.14,1209.99 1214.73,1209.99 1215.31,1209.99 1215.9,1209.99 1216.49,1209.99 1217.07,1209.99 1217.66,1209.99 1218.24,1209.99 1218.83,1209.99 1219.42,1209.99 1220,1209.99 1220.59,1209.99 1221.18,1209.99 1221.76,1209.99 1222.35,1209.99 1222.94,1209.99 1223.52,1209.99 1224.11,1209.99 1224.7,1209.99 1225.28,1209.99 1225.87,1209.99 1226.45,1209.99 1227.04,1209.99 1227.63,1209.99 1228.21,1209.99 1228.8,1209.99 1229.39,1209.99 1229.97,1209.99 1230.56,1209.99 1231.15,1209.99 1231.73,1209.99 1232.32,1209.99 1232.91,1209.99 1233.49,1209.99 1234.08,1209.99 1234.66,1209.99 1235.25,1209.99 1235.84,1209.99 1236.42,1209.99 1237.01,1209.99 1237.6,1209.99 1238.18,1209.99 1238.77,1209.99 1239.36,1209.99 1239.94,1209.99 1240.53,1209.99 1241.11,1209.99 1241.7,1209.99 1242.29,1209.99 1242.87,1209.99 1243.46,1209.99 1244.05,1209.99 1244.63,1209.99 1245.22,1209.99 1245.81,1209.99 1246.39,1209.99 1246.98,1209.99 1247.57,1209.99 1248.15,1209.99 1248.74,1209.99 1249.32,1209.99 1249.91,1209.99 1250.5,1209.99 1251.08,1209.99 1251.67,1209.99 1252.26,1209.99 1252.84,1209.99 1253.43,1209.99 1254.02,1209.99 1254.6,1209.99 1255.19,1209.99 1255.78,1209.99 1256.36,1209.99 1256.95,1209.99 1257.53,1209.99 1258.12,1209.99 1258.71,1209.99 1259.29,1209.99 1259.88,1209.99 1260.47,1209.99 1261.05,1209.99 1261.64,1209.99 1262.23,1209.99 1262.81,1209.99 1263.4,1209.99 1263.98,1209.99 1264.57,1209.99 1265.16,1209.99 1265.74,1209.99 1266.33,1209.99 1266.92,1209.99 1267.5,1209.99 1268.09,1209.99 1268.68,1209.99 1269.26,1209.99 1269.85,1209.99 1270.44,1209.99 1271.02,1209.99 1271.61,1209.99 1272.19,1209.99 1272.78,1209.99 1273.37,1209.99 1273.95,1209.99 1274.54,1209.99 1275.13,1209.99 1275.71,1209.99 1276.3,1209.99 1276.89,1209.99 1277.47,1209.99 1278.06,1209.99 1278.65,1209.99 1279.23,1209.99 1279.82,1209.99 1280.4,1209.99 1280.99,1209.99 1281.58,1209.99 1282.16,1209.99 1282.75,1209.99 1283.34,1209.99 1283.92,1209.99 1284.51,1209.99 1285.1,1209.99 1285.68,1209.99 1286.27,1209.99 1286.86,1209.99 1287.44,1209.99 1288.03,1209.99 1288.61,1209.99 1289.2,1209.99 1289.79,1209.99 1290.37,1209.99 1290.96,1209.99 1291.55,1209.99 1292.13,1209.99 1292.72,1209.99 1293.31,1209.99 1293.89,1209.99 1294.48,1209.99 1295.06,1209.99 1295.65,1209.99 1296.24,1209.99 1296.82,1209.99 1297.41,1209.99 1298,1209.99 1298.58,1209.99 1299.17,1209.99 1299.76,1209.99 1300.34,1209.99 1300.93,1209.99 1301.52,1209.99 1302.1,1209.99 1302.69,1209.99 1303.27,1209.99 1303.86,1209.99 1304.45,1209.99 1305.03,1209.99 1305.62,1209.99 1306.21,1209.99 1306.79,1209.99 1307.38,1209.99 1307.97,1209.99 1308.55,1209.99 1309.14,1209.99 1309.73,1209.99 1310.31,1209.99 1310.9,1209.99 1311.48,1209.99 1312.07,1209.99 1312.66,1209.99 1313.24,1209.99 1313.83,1209.99 1314.42,1209.99 1315,1209.99 1315.59,1209.99 1316.18,1209.99 1316.76,1209.99 1317.35,1209.99 1317.93,1209.99 1318.52,1209.99 1319.11,1209.99 1319.69,1209.99 1320.28,1209.99 1320.87,1209.99 1321.45,1209.99 1322.04,1209.99 1322.63,1209.99 1323.21,1209.99 1323.8,1209.99 1324.39,1209.99 1324.97,1209.99 1325.56,1209.99 1326.14,1209.99 1326.73,1209.99 1327.32,1209.99 1327.9,1209.99 1328.49,1209.99 1329.08,1209.99 1329.66,1209.99 1330.25,1209.99 1330.84,1209.99 1331.42,1209.99 1332.01,1209.99 1332.6,1209.99 1333.18,1209.99 1333.77,1209.99 1334.35,1209.99 1334.94,1209.99 1335.53,1209.99 1336.11,1209.99 1336.7,1209.99 1337.29,1209.99 1337.87,1209.99 1338.46,1209.99 1339.05,1209.99 1339.63,1209.99 1340.22,1209.99 1340.8,1209.99 1341.39,1209.99 1341.98,1209.99 1342.56,1209.99 1343.15,1209.99 1343.74,1209.99 1344.32,1209.99 1344.91,1209.99 1345.5,1209.99 1346.08,1209.99 1346.67,1209.99 1347.26,1209.99 1347.84,1209.99 1348.43,1209.99 1349.01,1209.99 1349.6,1209.99 1350.19,1209.99 1350.77,1209.99 1351.36,1209.99 1351.95,1209.99 1352.53,1209.99 1353.12,1209.99 1353.71,1209.99 1354.29,1209.99 1354.88,1209.99 1355.47,1209.99 1356.05,1209.99 1356.64,1209.99 1357.22,1209.99 1357.81,1209.99 1358.4,1209.99 1358.98,1209.99 1359.57,1209.99 1360.16,1209.99 1360.74,1209.99 1361.33,1209.99 1361.92,1209.99 1362.5,1209.99 1363.09,1209.99 1363.68,1209.99 1364.26,1209.99 1364.85,1209.99 1365.43,1209.99 1366.02,1209.99 1366.61,1209.99 1367.19,1209.99 1367.78,1209.99 1368.37,1209.99 1368.95,1209.99 1369.54,1209.99 1370.13,1209.99 1370.71,1209.99 1371.3,1209.99 1371.88,1209.99 1372.47,1209.99 1373.06,1209.99 1373.64,1209.99 1374.23,1209.99 1374.82,1209.99 1375.4,1209.99 1375.99,1209.99 1376.58,1209.99 1377.16,1209.99 1377.75,1209.99 1378.34,1209.99 1378.92,1209.99 1379.51,1209.99 1380.09,1209.99 1380.68,1209.99 1381.27,1209.99 1381.85,1209.99 1382.44,1209.99 1383.03,1209.99 1383.61,1209.99 1384.2,1209.99 1384.79,1209.99 1385.37,1209.99 1385.96,1209.99 1386.55,1209.99 1387.13,1209.99 1387.72,1209.99 1388.3,1209.99 1388.89,1209.99 1389.48,1209.99 1390.06,1209.99 1390.65,1209.99 1391.24,1209.99 1391.82,1209.99 1392.41,1209.99 1393,1209.99 1393.58,1209.99 1394.17,1209.99 1394.75,1209.99 1395.34,1209.99 1395.93,1209.99 1396.51,1209.99 1397.1,1209.99 1397.69,1209.99 1398.27,1209.99 1398.86,1209.99 1399.45,1209.99 1400.03,1209.99 1400.62,1209.99 1401.21,1209.99 1401.79,1209.99 1402.38,1209.99 1402.96,1209.99 1403.55,1209.99 1404.14,1209.99 1404.72,1209.99 1405.31,1209.99 1405.9,1209.99 1406.48,1209.99 1407.07,1209.99 1407.66,1209.99 1408.24,1209.99 1408.83,1209.99 1409.42,1209.99 1410,1209.99 1410.59,1209.99 1411.17,1209.99 1411.76,1209.99 1412.35,1209.99 1412.93,1209.99 1413.52,1209.99 1414.11,1209.99 1414.69,1209.99 1415.28,1209.99 1415.87,1209.99 1416.45,1209.99 1417.04,1209.99 1417.63,1209.99 1418.21,1209.99 1418.8,1209.99 1419.38,1209.99 1419.97,1209.99 1420.56,1209.99 1421.14,1209.99 1421.73,1209.99 1422.32,1209.99 1422.9,1209.99 1423.49,1209.99 1424.08,1209.99 1424.66,1209.99 1425.25,1209.99 1425.83,1209.99 1426.42,1209.99 1427.01,1209.99 1427.59,1209.99 1428.18,1209.99 1428.77,1209.99 1429.35,1209.99 1429.94,1209.99 1430.53,1209.99 1431.11,1209.99 1431.7,1209.99 1432.29,1209.99 1432.87,1209.99 1433.46,1209.99 1434.04,1209.99 1434.63,1209.99 1435.22,1209.99 1435.8,1209.99 1436.39,1209.99 1436.98,1209.99 1437.56,1209.99 1438.15,1209.99 1438.74,1209.99 1439.32,1209.99 1439.91,1209.99 1440.5,1209.99 1441.08,1209.99 1441.67,1209.99 1442.25,1209.99 1442.84,1209.99 1443.43,1209.99 1444.01,1209.99 1444.6,1209.99 1445.19,1209.99 1445.77,1209.99 1446.36,1209.99 1446.95,1209.99 1447.53,1209.99 1448.12,1209.99 1448.7,1209.99 1449.29,1209.99 1449.88,1209.99 1450.46,1209.99 1451.05,1209.99 1451.64,1209.99 1452.22,1209.99 1452.81,1209.99 1453.4,1209.99 1453.98,1209.99 1454.57,1209.99 1455.16,1209.99 1455.74,1209.99 1456.33,1209.99 1456.91,1209.99 1457.5,1209.99 1458.09,1209.99 1458.67,1209.99 1459.26,1209.99 1459.85,1209.99 1460.43,1209.99 1461.02,1209.99 1461.61,1209.99 1462.19,1209.99 1462.78,1209.99 1463.37,1209.99 1463.95,1209.99 1464.54,1209.99 1465.12,1209.99 1465.71,1209.99 1466.3,1209.99 1466.88,1209.99 1467.47,1209.99 1468.06,1209.99 1468.64,1209.99 1469.23,1209.99 1469.82,1209.99 1470.4,1209.99 1470.99,1209.99 1471.57,1209.99 1472.16,1209.99 1472.75,1209.99 1473.33,1209.99 1473.92,1209.99 1474.51,1209.99 1475.09,1209.99 1475.68,1209.99 1476.27,1209.99 1476.85,1209.99 1477.44,1209.99 1478.03,1209.99 1478.61,1209.99 1479.2,1209.99 1479.78,1209.99 1480.37,1209.99 1480.96,1209.99 1481.54,1209.99 1482.13,1209.99 1482.72,1209.99 1483.3,1209.99 1483.89,1209.99 1484.48,1209.99 1485.06,1209.99 1485.65,1209.99 1486.24,1209.99 1486.82,1209.99 1487.41,1209.99 1487.99,1209.99 1488.58,1209.99 1489.17,1209.99 1489.75,1209.99 1490.34,1209.99 1490.93,1209.99 1491.51,1209.99 1492.1,1209.99 1492.69,1209.99 1493.27,1209.99 1493.86,1209.99 1494.45,1209.99 1495.03,1209.99 1495.62,1209.99 1496.2,1209.99 1496.79,1209.99 1497.38,1209.99 1497.96,1209.99 1498.55,1209.99 1499.14,1209.99 1499.72,1209.99 1500.31,1209.99 1500.9,1209.99 1501.48,1209.99 1502.07,1209.99 1502.65,1209.99 1503.24,1209.99 1503.83,1209.99 1504.41,1209.99 1505,1209.99 1505.59,1209.99 1506.17,1209.99 1506.76,1209.99 1507.35,1209.99 1507.93,1209.99 1508.52,1209.99 1509.11,1209.99 1509.69,1209.99 1510.28,1209.99 1510.86,1209.99 1511.45,1209.99 1512.04,1209.99 1512.62,1209.99 1513.21,1209.99 1513.8,1209.99 1514.38,1209.99 1514.97,1209.99 1515.56,1209.99 1516.14,1209.99 1516.73,1209.99 1517.32,1209.99 1517.9,1209.99 1518.49,1209.99 1519.07,1209.99 1519.66,1209.99 1520.25,1209.99 1520.83,1209.99 1521.42,1209.99 1522.01,1209.99 1522.59,1209.99 1523.18,1209.99 1523.77,1209.99 1524.35,1209.99 1524.94,1209.99 1525.52,1209.99 1526.11,1209.99 1526.7,1209.99 1527.28,1209.99 1527.87,1209.99 1528.46,1209.99 1529.04,1209.99 1529.63,1209.99 1530.22,1209.99 1530.8,1209.99 1531.39,1209.99 1531.98,1209.99 1532.56,1209.99 1533.15,1209.99 1533.73,1209.99 1534.32,1209.99 1534.91,1209.99 1535.49,1209.99 1536.08,1209.99 1536.67,1209.99 1537.25,1209.99 1537.84,1209.99 1538.43,1209.99 1539.01,1209.99 1539.6,1209.99 1540.19,1209.99 1540.77,1209.99 1541.36,1209.99 1541.94,1209.99 1542.53,1209.99 1543.12,1209.99 1543.7,1209.99 1544.29,1209.99 1544.88,1209.99 1545.46,1209.99 1546.05,1209.99 1546.64,1209.99 1547.22,1209.99 1547.81,1209.99 1548.4,1209.99 1548.98,1209.99 1549.57,1209.99 1550.15,1209.99 1550.74,1209.99 1551.33,1209.99 1551.91,1209.99 1552.5,1209.99 1553.09,1209.99 1553.67,1209.99 1554.26,1209.99 1554.85,1209.99 1555.43,1209.99 1556.02,1209.99 1556.6,1209.99 1557.19,1209.99 1557.78,1209.99 1558.36,1209.99 1558.95,1209.99 1559.54,1209.99 1560.12,1209.99 1560.71,1209.99 1561.3,1209.99 1561.88,1209.99 1562.47,1209.99 1563.06,1209.99 1563.64,1209.99 1564.23,1209.99 1564.81,1209.99 1565.4,1209.99 1565.99,1209.99 1566.57,1209.99 1567.16,1209.99 1567.75,1209.99 1568.33,1209.99 1568.92,1209.99 1569.51,1209.99 1570.09,1209.99 1570.68,1209.99 1571.27,1209.99 1571.85,1209.99 1572.44,1209.99 1573.02,1209.99 1573.61,1209.99 1574.2,1209.99 1574.78,1209.99 1575.37,1209.99 1575.96,1209.99 1576.54,1209.99 1577.13,1209.99 1577.72,1209.99 1578.3,1209.99 1578.89,1209.99 1579.47,1209.99 1580.06,1209.99 1580.65,1209.99 1581.23,1209.99 1581.82,1209.99 1582.41,1209.99 1582.99,1209.99 1583.58,1209.99 1584.17,1209.99 1584.75,1209.99 1585.34,1209.99 1585.93,1209.99 1586.51,1209.99 1587.1,1209.99 1587.68,1209.99 1588.27,1209.99 1588.86,1209.99 1589.44,1209.99 1590.03,1209.99 1590.62,1209.99 1591.2,1209.99 1591.79,1209.99 1592.38,1209.99 1592.96,1209.99 1593.55,1209.99 1594.14,1209.99 1594.72,1209.99 1595.31,1209.99 1595.89,1209.99 1596.48,1209.99 1597.07,1209.99 1597.65,1209.99 1598.24,1209.99 1598.83,1209.99 1599.41,1209.99 1600,1209.99 1600.59,1209.99 1601.17,1209.99 1601.76,1209.99 1602.34,1209.99 1602.93,1209.99 1603.52,1209.99 1604.1,1209.99 1604.69,1209.99 1605.28,1209.99 1605.86,1209.99 1606.45,1209.99 1607.04,1209.99 1607.62,1209.99 1608.21,1209.99 1608.8,1209.99 1609.38,1209.99 1609.97,1209.99 1610.55,1209.99 1611.14,1209.99 1611.73,1209.99 1612.31,1209.99 1612.9,1209.99 1613.49,1209.99 1614.07,1209.99 1614.66,1209.99 1615.25,1209.99 1615.83,1209.99 1616.42,1209.99 1617.01,1209.99 1617.59,1209.99 1618.18,1209.99 1618.76,1209.99 1619.35,1209.99 1619.94,1209.99 1620.52,1209.99 1621.11,1209.99 1621.7,1209.99 1622.28,1209.99 1622.87,1209.99 1623.46,1209.99 1624.04,1209.99 1624.63,1209.99 1625.22,1209.99 1625.8,1209.99 1626.39,1209.99 1626.97,1209.99 1627.56,1209.99 1628.15,1209.99 1628.73,1209.99 1629.32,1209.99 1629.91,1209.99 1630.49,1209.99 1631.08,1209.99 1631.67,1209.99 1632.25,1209.99 1632.84,1209.99 1633.42,1209.99 1634.01,1209.99 1634.6,1209.99 1635.18,1209.99 1635.77,1209.99 1636.36,1209.99 1636.94,1209.99 1637.53,1209.99 1638.12,1209.99 1638.7,1209.99 1639.29,1209.99 1639.88,1209.99 1640.46,1209.99 1641.05,1209.99 1641.63,1209.99 1642.22,1209.99 1642.81,1209.99 1643.39,1209.99 1643.98,1209.99 1644.57,1209.99 1645.15,1209.99 1645.74,1209.99 1646.33,1209.99 1646.91,1209.99 1647.5,1209.99 1648.09,1209.99 1648.67,1209.99 1649.26,1209.99 1649.84,1209.99 1650.43,1209.99 1651.02,1209.99 1651.6,1209.99 1652.19,1209.99 1652.78,1209.99 1653.36,1209.99 1653.95,1209.99 1654.54,1209.99 1655.12,1209.99 1655.71,1209.99 1656.29,1209.99 1656.88,1209.99 1657.47,1209.99 1658.05,1209.99 1658.64,1209.99 1659.23,1209.99 1659.81,1209.99 1660.4,1209.99 1660.99,1209.99 1661.57,1209.99 1662.16,1209.99 1662.75,1209.99 1663.33,1209.99 1663.92,1209.99 1664.5,1209.99 1665.09,1209.99 1665.68,1209.99 1666.26,1209.99 1666.85,1209.99 1667.44,1209.99 1668.02,1209.99 1668.61,1209.99 1669.2,1209.99 1669.78,1209.99 1670.37,1209.99 1670.96,1209.99 1671.54,1209.99 1672.13,1209.99 1672.71,1209.99 1673.3,1209.99 1673.89,1209.99 1674.47,1209.99 1675.06,1209.99 1675.65,1209.99 1676.23,1209.99 1676.82,1209.99 1677.41,1209.99 1677.99,1209.99 1678.58,1209.99 1679.17,1209.99 1679.75,1209.99 1680.34,1209.99 1680.92,1209.99 1681.51,1209.99 1682.1,1209.99 1682.68,1209.99 1683.27,1209.99 1683.86,1209.99 1684.44,1209.99 1685.03,1209.99 1685.62,1209.99 1686.2,1209.99 1686.79,1209.99 1687.37,1209.99 1687.96,1209.99 1688.55,1209.99 1689.13,1209.99 1689.72,1209.99 1690.31,1209.99 1690.89,1209.99 1691.48,1209.99 1692.07,1209.99 1692.65,1209.99 1693.24,1209.99 1693.83,1209.99 1694.41,1209.99 1695,1209.99 1695.58,1209.99 1696.17,1209.99 1696.76,1209.99 1697.34,1209.99 1697.93,1209.99 1698.52,1209.99 1699.1,1209.99 1699.69,1209.99 1700.28,1209.99 1700.86,1209.99 1701.45,1209.99 1702.04,1209.99 1702.62,1209.99 1703.21,1209.99 1703.79,1209.99 1704.38,1209.99 1704.97,1209.99 1705.55,1209.99 1706.14,1209.99 1706.73,1209.99 1707.31,1209.99 1707.9,1209.99 1708.49,1209.99 1709.07,1209.99 1709.66,1209.99 1710.24,1209.99 1710.83,1209.99 1711.42,1209.99 1712,1209.99 1712.59,1209.99 1713.18,1209.99 1713.76,1209.99 1714.35,1209.99 1714.94,1209.99 1715.52,1209.99 1716.11,1209.99 1716.7,1209.99 1717.28,1209.99 1717.87,1209.99 1718.45,1209.99 1719.04,1209.99 1719.63,1209.99 1720.21,1209.99 1720.8,1209.99 1721.39,1209.99 1721.97,1209.99 1722.56,1209.99 1723.15,1209.99 1723.73,1209.99 1724.32,1209.99 1724.91,1209.99 1725.49,1209.99 1726.08,1209.99 1726.66,1209.99 1727.25,1209.99 1727.84,1209.99 1728.42,1209.99 1729.01,1209.99 1729.6,1209.99 1730.18,1209.99 1730.77,1209.99 1731.36,1209.99 1731.94,1209.99 1732.53,1209.99 1733.11,1209.99 1733.7,1209.99 1734.29,1209.99 1734.87,1209.99 1735.46,1209.99 1736.05,1209.99 1736.63,1209.99 1737.22,1209.99 1737.81,1209.99 1738.39,1209.99 1738.98,1209.99 1739.57,1209.99 1740.15,1209.99 1740.74,1209.99 1741.32,1209.99 1741.91,1209.99 1742.5,1209.99 1743.08,1209.99 1743.67,1209.99 1744.26,1209.99 1744.84,1209.99 1745.43,1209.99 1746.02,1209.99 1746.6,1209.99 1747.19,1209.99 1747.78,1209.99 1748.36,1209.99 1748.95,1209.99 1749.53,1209.99 1750.12,1209.99 1750.71,1209.99 1751.29,1209.99 1751.88,1209.99 1752.47,1209.99 1753.05,1209.99 1753.64,1209.99 1754.23,1209.99 1754.81,1209.99 1755.4,1209.99 1755.99,1209.99 1756.57,1209.99 1757.16,1209.99 1757.74,1209.99 1758.33,1209.99 1758.92,1209.99 1759.5,1209.99 1760.09,1209.99 1760.68,1209.99 1761.26,1209.99 1761.85,1209.99 1762.44,1209.99 1763.02,1209.99 1763.61,1209.99 1764.19,1209.99 1764.78,1209.99 1765.37,1209.99 1765.95,1209.99 1766.54,1209.99 1767.13,1209.99 1767.71,1209.99 1768.3,1209.99 1768.89,1209.99 1769.47,1209.99 1770.06,1209.99 1770.65,1209.99 1771.23,1209.99 1771.82,1209.99 1772.4,1209.99 1772.99,1209.99 1773.58,1209.99 1774.16,1209.99 1774.75,1209.99 1775.34,1209.99 1775.92,1209.99 1776.51,1209.99 1777.1,1209.99 1777.68,1209.99 1778.27,1209.99 1778.86,1209.99 1779.44,1209.99 1780.03,1209.99 1780.61,1209.99 1781.2,1209.99 1781.79,1209.99 1782.37,1209.99 1782.96,1209.99 1783.55,1209.99 1784.13,1209.99 1784.72,1209.99 1785.31,1209.99 1785.89,1209.99 1786.48,1209.99 1787.06,1209.99 1787.65,1209.99 1788.24,1209.99 1788.82,1209.99 1789.41,1209.99 1790,1209.99 1790.58,1209.99 1791.17,1209.99 1791.76,1209.99 1792.34,1209.99 1792.93,1209.99 1793.52,1209.99 1794.1,1209.99 1794.69,1209.99 1795.27,1209.99 1795.86,1209.99 1796.45,1209.99 1797.03,1209.99 1797.62,1209.99 1798.21,1209.99 1798.79,1209.99 1799.38,1209.99 1799.97,1209.99 1800.55,1209.99 1801.14,1209.99 1801.73,1209.99 1802.31,1209.99 1802.9,1209.99 1803.48,1209.99 1804.07,1209.99 1804.66,1209.99 1805.24,1209.99 1805.83,1209.99 1806.42,1209.99 1807,1209.99 1807.59,1209.99 1808.18,1209.99 1808.76,1209.99 1809.35,1209.99 1809.94,1209.99 1810.52,1209.99 1811.11,1209.99 1811.69,1209.99 1812.28,1209.99 1812.87,1209.99 1813.45,1209.99 1814.04,1209.99 1814.63,1209.99 1815.21,1209.99 1815.8,1209.99 1816.39,1209.99 1816.97,1209.99 1817.56,1209.99 1818.14,1209.99 1818.73,1209.99 1819.32,1209.99 1819.9,1209.99 1820.49,1209.99 1821.08,1209.99 1821.66,1209.99 1822.25,1209.99 1822.84,1209.99 1823.42,1209.99 1824.01,1209.99 1824.6,1209.99 1825.18,1209.99 1825.77,1209.99 1826.35,1209.99 1826.94,1209.99 1827.53,1209.99 1828.11,1209.99 1828.7,1209.99 1829.29,1209.99 1829.87,1209.99 1830.46,1209.99 1831.05,1209.99 1831.63,1209.99 1832.22,1209.99 1832.81,1209.99 1833.39,1209.99 1833.98,1209.99 1834.56,1209.99 1835.15,1209.99 1835.74,1209.99 1836.32,1209.99 1836.91,1209.99 1837.5,1209.99 1838.08,1209.99 1838.67,1209.99 1839.26,1209.99 1839.84,1209.99 1840.43,1209.99 1841.01,1209.99 1841.6,1209.99 1842.19,1209.99 1842.77,1209.99 1843.36,1209.99 1843.95,1209.99 1844.53,1209.99 1845.12,1209.99 1845.71,1209.99 1846.29,1209.99 1846.88,1209.99 1847.47,1209.99 1848.05,1209.99 1848.64,1209.99 1849.22,1209.99 1849.81,1209.99 1850.4,1209.99 1850.98,1209.99 1851.57,1209.99 1852.16,1209.99 1852.74,1209.99 1853.33,1209.99 1853.92,1209.99 1854.5,1209.99 1855.09,1209.99 1855.68,1209.99 1856.26,1209.99 1856.85,1209.99 1857.43,1209.99 1858.02,1209.99 1858.61,1209.99 1859.19,1209.99 1859.78,1209.99 1860.37,1209.99 1860.95,1209.99 1861.54,1209.99 1862.13,1209.99 1862.71,1209.99 1863.3,1209.99 1863.88,1209.99 1864.47,1209.99 1865.06,1209.99 1865.64,1209.99 1866.23,1209.99 1866.82,1209.99 1867.4,1209.99 1867.99,1209.99 1868.58,1209.99 1869.16,1209.99 1869.75,1209.99 1870.34,1209.99 1870.92,1209.99 1871.51,1209.99 1872.09,1209.99 1872.68,1209.99 1873.27,1209.99 1873.85,1209.99 1874.44,1209.99 1875.03,1209.99 1875.61,1209.99 1876.2,1209.99 1876.79,1209.99 1877.37,1209.99 1877.96,1209.99 1878.55,1209.99 1879.13,1209.99 1879.72,1209.99 1880.3,1209.99 1880.89,1209.99 1881.48,1209.99 1882.06,1209.99 1882.65,1209.99 1883.24,1209.99 1883.82,1209.99 1884.41,1209.99 1885,1209.99 1885.58,1209.99 1886.17,1209.99 1886.76,1209.99 1887.34,1209.99 1887.93,1209.99 1888.51,1209.99 1889.1,1209.99 1889.69,1209.99 1890.27,1209.99 1890.86,1209.99 1891.45,1209.99 1892.03,1209.99 1892.62,1209.99 1893.21,1209.99 1893.79,1209.99 1894.38,1209.99 1894.96,1209.99 1895.55,1209.99 1896.14,1209.99 1896.72,1209.99 1897.31,1209.99 1897.9,1209.99 1898.48,1209.99 1899.07,1209.99 1899.66,1209.99 1900.24,1209.99 1900.83,1209.99 1901.42,1209.99 1902,1209.99 1902.59,1209.99 1903.17,1209.99 1903.76,1209.99 1904.35,1209.99 1904.93,1209.99 1905.52,1209.99 1906.11,1209.99 1906.69,1209.99 1907.28,1209.99 1907.87,1209.99 1908.45,1209.99 1909.04,1209.99 1909.63,1209.99 1910.21,1209.99 1910.8,1209.99 1911.38,1209.99 1911.97,1209.99 1912.56,1209.99 1913.14,1209.99 1913.73,1209.99 1914.32,1209.99 1914.9,1209.99 1915.49,1209.99 1916.08,1209.99 1916.66,1209.99 1917.25,1209.99 1917.83,1209.99 1918.42,1209.99 1919.01,1209.99 1919.59,1209.99 1920.18,1209.99 1920.77,1209.99 1921.35,1209.99 1921.94,1209.99 1922.53,1209.99 1923.11,1209.99 1923.7,1209.99 1924.29,1209.99 1924.87,1209.99 1925.46,1209.99 1926.04,1209.99 1926.63,1209.99 1927.22,1209.99 1927.8,1209.99 1928.39,1209.99 1928.98,1209.99 1929.56,1209.99 1930.15,1209.99 1930.74,1209.99 1931.32,1209.99 1931.91,1209.99 1932.5,1209.99 1933.08,1209.99 1933.67,1209.99 1934.25,1209.99 1934.84,1209.99 1935.43,1209.99 1936.01,1209.99 1936.6,1209.99 1937.19,1209.99 1937.77,1209.99 1938.36,1209.99 1938.95,1209.99 1939.53,1209.99 1940.12,1209.99 1940.71,1209.99 1941.29,1209.99 1941.88,1209.99 1942.46,1209.99 1943.05,1209.99 1943.64,1209.99 1944.22,1209.99 1944.81,1209.99 1945.4,1209.99 1945.98,1209.99 1946.57,1209.99 1947.16,1209.99 1947.74,1209.99 1948.33,1209.99 1948.91,1209.99 1949.5,1209.99 1950.09,1209.99 1950.67,1209.99 1951.26,1209.99 1951.85,1209.99 1952.43,1209.99 1953.02,1209.99 1953.61,1209.99 1954.19,1209.99 1954.78,1209.99 1955.37,1209.99 1955.95,1209.99 1956.54,1209.99 1957.12,1209.99 1957.71,1209.99 1958.3,1209.99 1958.88,1209.99 1959.47,1209.99 1960.06,1209.99 1960.64,1209.99 1961.23,1209.99 1961.82,1209.99 1962.4,1209.99 1962.99,1209.99 1963.58,1209.99 1964.16,1209.99 1964.75,1209.99 1965.33,1209.99 1965.92,1209.99 1966.51,1209.99 1967.09,1209.99 1967.68,1209.99 1968.27,1209.99 1968.85,1209.99 1969.44,1209.99 1970.03,1209.99 1970.61,1209.99 1971.2,1209.99 1971.78,1209.99 1972.37,1209.99 1972.96,1209.99 1973.54,1209.99 1974.13,1209.99 1974.72,1209.99 1975.3,1209.99 1975.89,1209.99 1976.48,1209.99 1977.06,1209.99 1977.65,1209.99 1978.24,1209.99 1978.82,1209.99 1979.41,1209.99 1979.99,1209.99 1980.58,1209.99 1981.17,1209.99 1981.75,1209.99 1982.34,1209.99 1982.93,1209.99 1983.51,1209.99 1984.1,1209.99 1984.69,1209.99 1985.27,1209.99 1985.86,1209.99 1986.45,1209.99 1987.03,1209.99 1987.62,1209.99 1988.2,1209.99 1988.79,1209.99 1989.38,1209.99 1989.96,1209.99 1990.55,1209.99 1991.14,1209.99 1991.72,1209.99 1992.31,1209.99 1992.9,1209.99 1993.48,1209.99 1994.07,1209.99 1994.65,1209.99 1995.24,1209.99 1995.83,1209.99 1996.41,1209.99 1997,1209.99 1997.59,1209.99 1998.17,1209.99 1998.76,1209.99 1999.35,1209.99 1999.93,1209.99 2000.52,1209.99 2001.11,1209.99 2001.69,1209.99 2002.28,1209.99 2002.86,1209.99 2003.45,1209.99 2004.04,1209.99 2004.62,1209.99 2005.21,1209.99 2005.8,1209.99 2006.38,1209.99 2006.97,1209.99 2007.56,1209.99 2008.14,1209.99 2008.73,1209.99 2009.32,1209.99 2009.9,1209.99 2010.49,1209.99 2011.07,1209.99 2011.66,1209.99 2012.25,1209.99 2012.83,1209.99 2013.42,1209.99 2014.01,1209.99 2014.59,1209.99 2015.18,1209.99 2015.77,1209.99 2016.35,1209.99 2016.94,1209.99 2017.53,1209.99 2018.11,1209.99 2018.7,1209.99 2019.28,1209.99 2019.87,1209.99 2020.46,1209.99 2021.04,1209.99 2021.63,1209.99 2022.22,1209.99 2022.8,1209.99 2023.39,1209.99 2023.98,1209.99 2024.56,1209.99 2025.15,1209.99 2025.73,1209.99 2026.32,1209.99 2026.91,1209.99 2027.49,1209.99 2028.08,1209.99 2028.67,1209.99 2029.25,1209.99 2029.84,1209.99 2030.43,1209.99 2031.01,1209.99 2031.6,1209.99 2032.19,1209.99 2032.77,1209.99 2033.36,1209.99 2033.94,1209.99 2034.53,1209.99 2035.12,1209.99 2035.7,1209.99 2036.29,1209.99 2036.88,1209.99 2037.46,1209.99 2038.05,1209.99 2038.64,1209.99 2039.22,1209.99 2039.81,1209.99 2040.4,1209.99 2040.98,1209.99 2041.57,1209.99 2042.15,1209.99 2042.74,1209.99 2043.33,1209.99 2043.91,1209.99 2044.5,1209.99 2045.09,1209.99 2045.67,1209.99 2046.26,1209.99 2046.85,1209.99 2047.43,1209.99 2048.02,1209.99 2048.6,1209.99 2049.19,1209.99 2049.78,1209.99 2050.36,1209.99 2050.95,1209.99 2051.54,1209.99 2052.12,1209.99 2052.71,1209.99 2053.3,1209.99 2053.88,1209.99 2054.47,1209.99 2055.06,1209.99 2055.64,1209.99 2056.23,1209.99 2056.81,1209.99 2057.4,1209.99 2057.99,1209.99 2058.57,1209.99 2059.16,1209.99 2059.75,1209.99 2060.33,1209.99 2060.92,1209.99 2061.51,1209.99 2062.09,1209.99 2062.68,1209.99 2063.27,1209.99 2063.85,1209.99 2064.44,1209.99 2065.02,1209.99 2065.61,1209.99 2066.2,1209.99 2066.78,1209.99 2067.37,1209.99 2067.96,1209.99 2068.54,1209.99 2069.13,1209.99 2069.72,1209.99 2070.3,1209.99 2070.89,1209.99 2071.48,1209.99 2072.06,1209.99 2072.65,1209.99 2073.23,1209.99 2073.82,1209.99 2074.41,1209.99 2074.99,1209.99 2075.58,1209.99 2076.17,1209.99 2076.75,1209.99 2077.34,1209.99 2077.93,1209.99 2078.51,1209.99 2079.1,1209.99 2079.68,1209.99 2080.27,1209.99 2080.86,1209.99 2081.44,1209.99 2082.03,1209.99 2082.62,1209.99 2083.2,1209.99 2083.79,1209.99 2084.38,1209.99 2084.96,1209.99 2085.55,1209.99 2086.14,1209.99 2086.72,1209.99 2087.31,1209.99 2087.89,1209.99 2088.48,1209.99 2089.07,1209.99 2089.65,1209.99 2090.24,1209.99 2090.83,1209.99 2091.41,1209.99 2092,1209.99 2092.59,1209.99 2093.17,1209.99 2093.76,1209.99 2094.35,1209.99 2094.93,1209.99 2095.52,1209.99 2096.1,1209.99 2096.69,1209.99 2097.28,1209.99 2097.86,1209.99 2098.45,1209.99 2099.04,1209.99 2099.62,1209.99 2100.21,1209.99 2100.8,1209.99 2101.38,1209.99 2101.97,1209.99 2102.55,1209.99 2103.14,1209.99 2103.73,1209.99 2104.31,1209.99 2104.9,1209.99 2105.49,1209.99 2106.07,1209.99 2106.66,1209.99 2107.25,1209.99 2107.83,1209.99 2108.42,1209.99 2109.01,1209.99 2109.59,1209.99 2110.18,1209.99 2110.76,1209.99 2111.35,1209.99 2111.94,1209.99 2112.52,1209.99 2113.11,1209.99 2113.7,1209.99 2114.28,1209.99 2114.87,1209.99 2115.46,1209.99 2116.04,1209.99 2116.63,1209.99 2117.22,1209.99 2117.8,1209.99 2118.39,1209.99 2118.97,1209.99 2119.56,1209.99 2120.15,1209.99 2120.73,1209.99 2121.32,1209.99 2121.91,1209.99 2122.49,1209.99 2123.08,1209.99 2123.67,1209.99 2124.25,1209.99 2124.84,1209.99 2125.42,1209.99 2126.01,1209.99 2126.6,1209.99 2127.18,1209.99 2127.77,1209.99 2128.36,1209.99 2128.94,1209.99 2129.53,1209.99 2130.12,1209.99 2130.7,1209.99 2131.29,1209.99 2131.88,1209.99 2132.46,1209.99 2133.05,1209.99 2133.63,1209.99 2134.22,1209.99 2134.81,1209.99 2135.39,1209.99 2135.98,1209.99 2136.57,1209.99 2137.15,1209.99 2137.74,1209.99 2138.33,1209.99 2138.91,1209.99 2139.5,1209.99 2140.09,1209.99 2140.67,1209.99 2141.26,1209.99 2141.84,1209.99 2142.43,1209.99 2143.02,1209.99 2143.6,1209.99 2144.19,1209.99 2144.78,1209.99 2145.36,1209.99 2145.95,1209.99 2146.54,1209.99 2147.12,1209.99 2147.71,1209.99 2148.3,1209.99 2148.88,1209.99 2149.47,1209.99 2150.05,1209.99 2150.64,1209.99 2151.23,1209.99 2151.81,1209.99 2152.4,1209.99 2152.99,1209.99 2153.57,1209.99 2154.16,1209.99 2154.75,1209.99 2155.33,1209.99 2155.92,1209.99 2156.5,1209.99 2157.09,1209.99 2157.68,1209.99 2158.26,1209.99 \"/>\n<path clip-path=\"url(#clip602)\" d=\"M986.025 1209.84 L986.612 1209.84 L987.198 1209.84 L987.785 1209.84 L988.371 1209.84 L988.957 1209.84 L989.544 1209.84 L990.13 1209.84 L990.717 1209.84 L991.303 1209.84 L991.889 1209.84 L992.476 1209.84 L993.062 1209.84 L993.649 1209.84 L994.235 1209.84 L994.822 1209.84 L995.408 1209.84 L995.994 1209.84 L996.581 1209.84 L997.167 1209.84 L997.754 1209.84 L998.34 1209.84 L998.926 1209.84 L999.513 1209.84 L1000.1 1209.84 L1000.69 1209.84 L1001.27 1209.84 L1001.86 1209.84 L1002.44 1209.84 L1003.03 1209.84 L1003.62 1209.84 L1004.2 1209.84 L1004.79 1209.84 L1005.38 1209.84 L1005.96 1209.84 L1006.55 1209.84 L1007.14 1209.84 L1007.72 1209.84 L1008.31 1209.84 L1008.9 1209.84 L1009.48 1209.84 L1010.07 1209.84 L1010.65 1209.84 L1011.24 1209.84 L1011.83 1209.84 L1012.41 1209.84 L1013 1209.84 L1013.59 1209.84 L1014.17 1209.84 L1014.76 1209.84 L1015.35 1209.84 L1015.93 1209.84 L1016.52 1209.84 L1017.11 1209.84 L1017.69 1209.84 L1018.28 1209.84 L1018.86 1209.84 L1019.45 1209.84 L1020.04 1209.84 L1020.62 1209.84 L1021.21 1209.84 L1021.8 1209.84 L1022.38 1209.84 L1022.97 1209.84 L1023.56 1209.84 L1024.14 1209.84 L1024.73 1209.84 L1025.32 1209.84 L1025.9 1209.84 L1026.49 1209.84 L1027.07 1209.84 L1027.66 1209.84 L1028.25 1209.84 L1028.83 1209.84 L1029.42 1209.84 L1030.01 1209.84 L1030.59 1209.84 L1031.18 1209.84 L1031.77 1209.84 L1032.35 1209.84 L1032.94 1209.84 L1033.52 1209.84 L1034.11 1209.84 L1034.7 1209.84 L1035.28 1209.84 L1035.87 1209.84 L1036.46 1209.84 L1037.04 1209.84 L1037.63 1209.84 L1038.22 1209.84 L1038.8 1209.84 L1039.39 1209.84 L1039.98 1209.84 L1040.56 1209.84 L1041.15 1209.84 L1041.73 1209.84 L1042.32 1209.84 L1042.91 1209.84 L1043.49 1209.84 L1044.08 1209.84 L1044.67 1209.84 L1045.25 1209.84 L1045.84 1209.84 L1046.43 1209.84 L1047.01 1209.84 L1047.6 1209.84 L1048.19 1209.84 L1048.77 1209.84 L1049.36 1209.84 L1049.94 1209.84 L1050.53 1209.84 L1051.12 1209.84 L1051.7 1209.84 L1052.29 1209.84 L1052.88 1209.84 L1053.46 1209.84 L1054.05 1209.84 L1054.64 1209.84 L1055.22 1209.84 L1055.81 1209.84 L1056.39 1209.84 L1056.98 1209.84 L1057.57 1209.84 L1058.15 1209.84 L1058.74 1209.84 L1059.33 1209.84 L1059.91 1209.84 L1060.5 1209.84 L1061.09 1209.84 L1061.67 1209.84 L1062.26 1209.84 L1062.85 1209.84 L1063.43 1209.84 L1064.02 1209.84 L1064.6 1209.84 L1065.19 1209.84 L1065.78 1209.84 L1066.36 1209.84 L1066.95 1209.84 L1067.54 1209.84 L1068.12 1209.84 L1068.71 1209.84 L1069.3 1209.84 L1069.88 1209.84 L1070.47 1209.84 L1071.06 1209.84 L1071.64 1209.84 L1072.23 1209.84 L1072.81 1209.84 L1073.4 1209.84 L1073.99 1209.84 L1074.57 1209.84 L1075.16 1209.84 L1075.75 1209.84 L1076.33 1209.84 L1076.92 1209.84 L1077.51 1209.84 L1078.09 1209.84 L1078.68 1209.84 L1079.26 1209.84 L1079.85 1209.84 L1080.44 1209.84 L1081.02 1209.84 L1081.61 1209.84 L1082.2 1209.84 L1082.78 1209.84 L1083.37 1209.84 L1083.96 1209.84 L1084.54 1209.84 L1085.13 1209.84 L1085.72 1209.84 L1086.3 1209.84 L1086.89 1209.84 L1087.47 1209.84 L1088.06 1209.84 L1088.65 1209.84 L1089.23 1209.84 L1089.82 1209.84 L1090.41 1209.84 L1090.99 1209.84 L1091.58 1209.84 L1092.17 1209.84 L1092.75 1209.84 L1093.34 1209.84 L1093.93 1209.84 L1094.51 1209.84 L1095.1 1209.84 L1095.68 1209.84 L1096.27 1209.84 L1096.86 1209.84 L1097.44 1209.84 L1098.03 1209.84 L1098.62 1209.84 L1099.2 1209.84 L1099.79 1209.84 L1100.38 1209.84 L1100.96 1209.84 L1101.55 1209.84 L1102.14 1209.84 L1102.72 1209.84 L1103.31 1209.84 L1103.89 1209.84 L1104.48 1209.84 L1105.07 1209.84 L1105.65 1209.84 L1106.24 1209.84 L1106.83 1209.84 L1107.41 1209.84 L1108 1209.84 L1108.59 1209.84 L1109.17 1209.84 L1109.76 1209.84 L1110.34 1209.84 L1110.93 1209.84 L1111.52 1209.84 L1112.1 1209.84 L1112.69 1209.84 L1113.28 1209.84 L1113.86 1209.84 L1114.45 1209.84 L1115.04 1209.84 L1115.62 1209.84 L1116.21 1209.84 L1116.8 1209.84 L1117.38 1209.84 L1117.97 1209.84 L1118.55 1209.84 L1119.14 1209.84 L1119.73 1209.84 L1120.31 1209.84 L1120.9 1209.84 L1121.49 1209.84 L1122.07 1209.84 L1122.66 1209.84 L1123.25 1209.84 L1123.83 1209.84 L1124.42 1209.84 L1125.01 1209.84 L1125.59 1209.84 L1126.18 1209.84 L1126.76 1209.84 L1127.35 1209.84 L1127.94 1209.84 L1128.52 1209.84 L1129.11 1209.84 L1129.7 1209.84 L1130.28 1209.84 L1130.87 1209.84 L1131.46 1209.84 L1132.04 1209.84 L1132.63 1209.84 L1133.21 1209.84 L1133.8 1209.84 L1134.39 1209.84 L1134.97 1209.84 L1135.56 1209.84 L1136.15 1209.84 L1136.73 1209.84 L1137.32 1209.84 L1137.91 1209.84 L1138.49 1209.84 L1139.08 1209.84 L1139.67 1209.84 L1140.25 1209.84 L1140.84 1209.84 L1141.42 1209.84 L1142.01 1209.84 L1142.6 1209.84 L1143.18 1209.84 L1143.77 1209.84 L1144.36 1209.84 L1144.94 1209.84 L1145.53 1209.84 L1146.12 1209.84 L1146.7 1209.84 L1147.29 1209.84 L1147.88 1209.84 L1148.46 1209.84 L1149.05 1209.84 L1149.63 1209.84 L1150.22 1209.84 L1150.81 1209.84 L1151.39 1209.84 L1151.98 1209.84 L1152.57 1209.84 L1153.15 1209.84 L1153.74 1209.84 L1154.33 1209.84 L1154.91 1209.84 L1155.5 1209.84 L1156.09 1209.84 L1156.67 1209.84 L1157.26 1209.84 L1157.84 1209.84 L1158.43 1209.84 L1159.02 1209.84 L1159.6 1209.84 L1160.19 1209.84 L1160.78 1209.84 L1161.36 1209.84 L1161.95 1209.84 L1162.54 1209.84 L1163.12 1209.84 L1163.71 1209.84 L1164.29 1209.84 L1164.88 1209.84 L1165.47 1209.84 L1166.05 1209.84 L1166.64 1209.84 L1167.23 1209.84 L1167.81 1209.84 L1168.4 1209.84 L1168.99 1209.84 L1169.57 1209.84 L1170.16 1209.84 L1170.75 1209.84 L1171.33 1209.84 L1171.92 1209.84 L1172.5 1209.84 L1173.09 1209.84 L1173.68 1209.84 L1174.26 1209.84 L1174.85 1209.84 L1175.44 1209.84 L1176.02 1209.84 L1176.61 1209.84 L1177.2 1209.84 L1177.78 1209.84 L1178.37 1209.84 L1178.96 1209.84 L1179.54 1209.84 L1180.13 1209.84 L1180.71 1209.84 L1181.3 1209.84 L1181.89 1209.84 L1182.47 1209.84 L1183.06 1209.84 L1183.65 1209.84 L1184.23 1209.84 L1184.82 1209.84 L1185.41 1209.84 L1185.99 1209.84 L1186.58 1209.84 L1187.16 1209.84 L1187.75 1209.84 L1188.34 1209.84 L1188.92 1209.84 L1189.51 1209.84 L1190.1 1209.84 L1190.68 1209.84 L1191.27 1209.84 L1191.86 1209.84 L1192.44 1209.84 L1193.03 1209.84 L1193.62 1209.84 L1194.2 1209.84 L1194.79 1209.84 L1195.37 1209.84 L1195.96 1209.84 L1196.55 1209.84 L1197.13 1209.84 L1197.72 1209.84 L1198.31 1209.84 L1198.89 1209.84 L1199.48 1209.84 L1200.07 1209.84 L1200.65 1209.84 L1201.24 1209.84 L1201.83 1209.84 L1202.41 1209.84 L1203 1209.84 L1203.58 1209.84 L1204.17 1209.84 L1204.76 1209.84 L1205.34 1209.84 L1205.93 1209.84 L1206.52 1209.84 L1207.1 1209.84 L1207.69 1209.84 L1208.28 1209.84 L1208.86 1209.84 L1209.45 1209.84 L1210.03 1209.84 L1210.62 1209.84 L1211.21 1209.84 L1211.79 1209.84 L1212.38 1209.84 L1212.97 1209.84 L1213.55 1209.84 L1214.14 1209.84 L1214.73 1209.84 L1215.31 1209.84 L1215.9 1209.84 L1216.49 1209.84 L1217.07 1209.84 L1217.66 1209.84 L1218.24 1209.84 L1218.83 1209.84 L1219.42 1209.84 L1220 1209.84 L1220.59 1209.84 L1221.18 1209.84 L1221.76 1209.84 L1222.35 1209.84 L1222.94 1209.84 L1223.52 1209.84 L1224.11 1209.84 L1224.7 1209.84 L1225.28 1209.84 L1225.87 1209.84 L1226.45 1209.84 L1227.04 1209.84 L1227.63 1209.84 L1228.21 1209.84 L1228.8 1209.84 L1229.39 1209.84 L1229.97 1209.84 L1230.56 1209.84 L1231.15 1209.84 L1231.73 1209.84 L1232.32 1209.84 L1232.91 1209.84 L1233.49 1209.84 L1234.08 1209.84 L1234.66 1209.84 L1235.25 1209.84 L1235.84 1209.84 L1236.42 1209.84 L1237.01 1209.84 L1237.6 1209.84 L1238.18 1209.84 L1238.77 1209.84 L1239.36 1209.84 L1239.94 1209.84 L1240.53 1209.84 L1241.11 1209.84 L1241.7 1209.84 L1242.29 1209.84 L1242.87 1209.84 L1243.46 1209.84 L1244.05 1209.84 L1244.63 1209.84 L1245.22 1209.84 L1245.81 1209.84 L1246.39 1209.84 L1246.98 1209.84 L1247.57 1209.84 L1248.15 1209.84 L1248.74 1209.84 L1249.32 1209.84 L1249.91 1209.84 L1250.5 1209.84 L1251.08 1209.84 L1251.67 1209.84 L1252.26 1209.84 L1252.84 1209.84 L1253.43 1209.84 L1254.02 1209.84 L1254.6 1209.84 L1255.19 1209.84 L1255.78 1209.84 L1256.36 1209.84 L1256.95 1209.84 L1257.53 1209.84 L1258.12 1209.84 L1258.71 1209.84 L1259.29 1209.84 L1259.88 1209.84 L1260.47 1209.84 L1261.05 1209.84 L1261.64 1209.84 L1262.23 1209.84 L1262.81 1209.84 L1263.4 1209.84 L1263.98 1209.84 L1264.57 1209.84 L1265.16 1209.84 L1265.74 1209.84 L1266.33 1209.84 L1266.92 1209.84 L1267.5 1209.84 L1268.09 1209.84 L1268.68 1209.84 L1269.26 1209.84 L1269.85 1209.84 L1270.44 1209.84 L1271.02 1209.84 L1271.61 1209.84 L1272.19 1209.84 L1272.78 1209.84 L1273.37 1209.84 L1273.95 1209.84 L1274.54 1209.84 L1275.13 1209.84 L1275.71 1209.84 L1276.3 1209.84 L1276.89 1209.84 L1277.47 1209.84 L1278.06 1209.84 L1278.65 1209.84 L1279.23 1209.84 L1279.82 1209.84 L1280.4 1209.84 L1280.99 1209.84 L1281.58 1209.84 L1282.16 1209.84 L1282.75 1209.84 L1283.34 1209.84 L1283.92 1209.84 L1284.51 1209.84 L1285.1 1209.84 L1285.68 1209.84 L1286.27 1209.84 L1286.86 1209.84 L1287.44 1209.84 L1288.03 1209.84 L1288.61 1209.84 L1289.2 1209.84 L1289.79 1209.84 L1290.37 1209.84 L1290.96 1209.84 L1291.55 1209.84 L1292.13 1209.84 L1292.72 1209.84 L1293.31 1209.84 L1293.89 1209.84 L1294.48 1209.84 L1295.06 1209.84 L1295.65 1209.84 L1296.24 1209.84 L1296.82 1209.84 L1297.41 1209.84 L1298 1209.84 L1298.58 1209.84 L1299.17 1209.84 L1299.76 1209.84 L1300.34 1209.84 L1300.93 1209.84 L1301.52 1209.84 L1302.1 1209.84 L1302.69 1209.84 L1303.27 1209.84 L1303.86 1209.84 L1304.45 1209.84 L1305.03 1209.84 L1305.62 1209.84 L1306.21 1209.84 L1306.79 1209.84 L1307.38 1209.84 L1307.97 1209.84 L1308.55 1209.84 L1309.14 1209.84 L1309.73 1209.84 L1310.31 1209.84 L1310.9 1209.84 L1311.48 1209.84 L1312.07 1209.84 L1312.66 1209.84 L1313.24 1209.84 L1313.83 1209.84 L1314.42 1209.84 L1315 1209.84 L1315.59 1209.84 L1316.18 1209.84 L1316.76 1209.84 L1317.35 1209.84 L1317.93 1209.84 L1318.52 1209.84 L1319.11 1209.84 L1319.69 1209.84 L1320.28 1209.84 L1320.87 1209.84 L1321.45 1209.84 L1322.04 1209.84 L1322.63 1209.84 L1323.21 1209.84 L1323.8 1209.84 L1324.39 1209.84 L1324.97 1209.84 L1325.56 1209.84 L1326.14 1209.84 L1326.73 1209.84 L1327.32 1209.84 L1327.9 1209.84 L1328.49 1209.84 L1329.08 1209.84 L1329.66 1209.84 L1330.25 1209.84 L1330.84 1209.84 L1331.42 1209.84 L1332.01 1209.84 L1332.6 1209.84 L1333.18 1209.84 L1333.77 1209.84 L1334.35 1209.84 L1334.94 1209.84 L1335.53 1209.84 L1336.11 1209.84 L1336.7 1209.84 L1337.29 1209.84 L1337.87 1209.84 L1338.46 1209.84 L1339.05 1209.84 L1339.63 1209.84 L1340.22 1209.84 L1340.8 1209.84 L1341.39 1209.84 L1341.98 1209.84 L1342.56 1209.84 L1343.15 1209.84 L1343.74 1209.84 L1344.32 1209.84 L1344.91 1209.84 L1345.5 1209.84 L1346.08 1209.84 L1346.67 1209.84 L1347.26 1209.84 L1347.84 1209.84 L1348.43 1209.84 L1349.01 1209.84 L1349.6 1209.84 L1350.19 1209.84 L1350.77 1209.84 L1351.36 1209.84 L1351.95 1209.84 L1352.53 1209.84 L1353.12 1209.84 L1353.71 1209.84 L1354.29 1209.84 L1354.88 1209.84 L1355.47 1209.84 L1356.05 1209.84 L1356.64 1209.84 L1357.22 1209.84 L1357.81 1209.84 L1358.4 1209.84 L1358.98 1209.84 L1359.57 1209.84 L1360.16 1209.84 L1360.74 1209.84 L1361.33 1209.84 L1361.92 1209.84 L1362.5 1209.84 L1363.09 1209.84 L1363.68 1209.84 L1364.26 1209.84 L1364.85 1209.84 L1365.43 1209.84 L1366.02 1209.84 L1366.61 1209.84 L1367.19 1209.84 L1367.78 1209.84 L1368.37 1209.84 L1368.95 1209.84 L1369.54 1209.84 L1370.13 1209.84 L1370.71 1209.84 L1371.3 1209.84 L1371.88 1209.84 L1372.47 1209.84 L1373.06 1209.84 L1373.64 1209.84 L1374.23 1209.84 L1374.82 1209.84 L1375.4 1209.84 L1375.99 1209.84 L1376.58 1209.84 L1377.16 1209.84 L1377.75 1209.84 L1378.34 1209.84 L1378.92 1209.84 L1379.51 1209.84 L1380.09 1209.84 L1380.68 1209.84 L1381.27 1209.84 L1381.85 1209.84 L1382.44 1209.84 L1383.03 1209.84 L1383.61 1209.84 L1384.2 1209.84 L1384.79 1209.84 L1385.37 1209.84 L1385.96 1209.84 L1386.55 1209.84 L1387.13 1209.84 L1387.72 1209.84 L1388.3 1209.84 L1388.89 1209.84 L1389.48 1209.84 L1390.06 1209.84 L1390.65 1209.84 L1391.24 1209.84 L1391.82 1209.84 L1392.41 1209.84 L1393 1209.84 L1393.58 1209.84 L1394.17 1209.84 L1394.75 1209.84 L1395.34 1209.84 L1395.93 1209.84 L1396.51 1209.84 L1397.1 1209.84 L1397.69 1209.84 L1398.27 1209.84 L1398.86 1209.84 L1399.45 1209.84 L1400.03 1209.84 L1400.62 1209.84 L1401.21 1209.84 L1401.79 1209.84 L1402.38 1209.84 L1402.96 1209.84 L1403.55 1209.84 L1404.14 1209.84 L1404.72 1209.84 L1405.31 1209.84 L1405.9 1209.84 L1406.48 1209.84 L1407.07 1209.84 L1407.66 1209.84 L1408.24 1209.84 L1408.83 1209.84 L1409.42 1209.84 L1410 1209.84 L1410.59 1209.84 L1411.17 1209.84 L1411.76 1209.84 L1412.35 1209.84 L1412.93 1209.84 L1413.52 1209.84 L1414.11 1209.84 L1414.69 1209.84 L1415.28 1209.84 L1415.87 1209.84 L1416.45 1209.84 L1417.04 1209.84 L1417.63 1209.84 L1418.21 1209.84 L1418.8 1209.84 L1419.38 1209.84 L1419.97 1209.84 L1420.56 1209.84 L1421.14 1209.84 L1421.73 1209.84 L1422.32 1209.84 L1422.9 1209.84 L1423.49 1209.84 L1424.08 1209.84 L1424.66 1209.84 L1425.25 1209.84 L1425.83 1209.84 L1426.42 1209.84 L1427.01 1209.84 L1427.59 1209.84 L1428.18 1209.84 L1428.77 1209.84 L1429.35 1209.84 L1429.94 1209.84 L1430.53 1209.84 L1431.11 1209.84 L1431.7 1209.84 L1432.29 1209.84 L1432.87 1209.84 L1433.46 1209.84 L1434.04 1209.84 L1434.63 1209.84 L1435.22 1209.84 L1435.8 1209.84 L1436.39 1209.84 L1436.98 1209.84 L1437.56 1209.84 L1438.15 1209.84 L1438.74 1209.84 L1439.32 1209.84 L1439.91 1209.84 L1440.5 1209.84 L1441.08 1209.84 L1441.67 1209.84 L1442.25 1209.84 L1442.84 1209.84 L1443.43 1209.84 L1444.01 1209.84 L1444.6 1209.84 L1445.19 1209.84 L1445.77 1209.84 L1446.36 1209.84 L1446.95 1209.84 L1447.53 1209.84 L1448.12 1209.84 L1448.7 1209.84 L1449.29 1209.84 L1449.88 1209.84 L1450.46 1209.84 L1451.05 1209.84 L1451.64 1209.84 L1452.22 1209.84 L1452.81 1209.84 L1453.4 1209.84 L1453.98 1209.84 L1454.57 1209.84 L1455.16 1209.84 L1455.74 1209.84 L1456.33 1209.84 L1456.91 1209.84 L1457.5 1209.84 L1458.09 1209.84 L1458.67 1209.84 L1459.26 1209.84 L1459.85 1209.84 L1460.43 1209.84 L1461.02 1209.84 L1461.61 1209.84 L1462.19 1209.84 L1462.78 1209.84 L1463.37 1209.84 L1463.95 1209.84 L1464.54 1209.84 L1465.12 1209.84 L1465.71 1209.84 L1466.3 1209.84 L1466.88 1209.84 L1467.47 1209.84 L1468.06 1209.84 L1468.64 1209.84 L1469.23 1209.84 L1469.82 1209.84 L1470.4 1209.84 L1470.99 1209.84 L1471.57 1209.84 L1472.16 1209.84 L1472.75 1209.84 L1473.33 1209.84 L1473.92 1209.84 L1474.51 1209.84 L1475.09 1209.84 L1475.68 1209.84 L1476.27 1209.84 L1476.85 1209.84 L1477.44 1209.84 L1478.03 1209.84 L1478.61 1209.84 L1479.2 1209.84 L1479.78 1209.84 L1480.37 1209.84 L1480.96 1209.84 L1481.54 1209.84 L1482.13 1209.84 L1482.72 1209.84 L1483.3 1209.84 L1483.89 1209.84 L1484.48 1209.84 L1485.06 1209.84 L1485.65 1209.84 L1486.24 1209.84 L1486.82 1209.84 L1487.41 1209.84 L1487.99 1209.84 L1488.58 1209.84 L1489.17 1209.84 L1489.75 1209.84 L1490.34 1209.84 L1490.93 1209.84 L1491.51 1209.84 L1492.1 1209.84 L1492.69 1209.84 L1493.27 1209.84 L1493.86 1209.84 L1494.45 1209.84 L1495.03 1209.84 L1495.62 1209.84 L1496.2 1209.84 L1496.79 1209.84 L1497.38 1209.84 L1497.96 1209.84 L1498.55 1209.84 L1499.14 1209.84 L1499.72 1209.84 L1500.31 1209.84 L1500.9 1209.84 L1501.48 1209.84 L1502.07 1209.84 L1502.65 1209.84 L1503.24 1209.84 L1503.83 1209.84 L1504.41 1209.84 L1505 1209.84 L1505.59 1209.84 L1506.17 1209.84 L1506.76 1209.84 L1507.35 1209.84 L1507.93 1209.84 L1508.52 1209.84 L1509.11 1209.84 L1509.69 1209.84 L1510.28 1209.84 L1510.86 1209.84 L1511.45 1209.84 L1512.04 1209.84 L1512.62 1209.84 L1513.21 1209.84 L1513.8 1209.84 L1514.38 1209.84 L1514.97 1209.84 L1515.56 1209.84 L1516.14 1209.84 L1516.73 1209.84 L1517.32 1209.84 L1517.9 1209.84 L1518.49 1209.84 L1519.07 1209.84 L1519.66 1209.84 L1520.25 1209.84 L1520.83 1209.84 L1521.42 1209.84 L1522.01 1209.84 L1522.59 1209.84 L1523.18 1209.84 L1523.77 1209.84 L1524.35 1209.84 L1524.94 1209.84 L1525.52 1209.84 L1526.11 1209.84 L1526.7 1209.84 L1527.28 1209.84 L1527.87 1209.84 L1528.46 1209.84 L1529.04 1209.84 L1529.63 1209.84 L1530.22 1209.84 L1530.8 1209.84 L1531.39 1209.84 L1531.98 1209.84 L1532.56 1209.84 L1533.15 1209.84 L1533.73 1209.84 L1534.32 1209.84 L1534.91 1209.84 L1535.49 1209.84 L1536.08 1209.84 L1536.67 1209.84 L1537.25 1209.84 L1537.84 1209.84 L1538.43 1209.84 L1539.01 1209.84 L1539.6 1209.84 L1540.19 1209.84 L1540.77 1209.84 L1541.36 1209.84 L1541.94 1209.84 L1542.53 1209.84 L1543.12 1209.84 L1543.7 1209.84 L1544.29 1209.84 L1544.88 1209.84 L1545.46 1209.84 L1546.05 1209.84 L1546.64 1209.84 L1547.22 1209.84 L1547.81 1209.84 L1548.4 1209.84 L1548.98 1209.84 L1549.57 1209.84 L1550.15 1209.84 L1550.74 1209.84 L1551.33 1209.84 L1551.91 1209.84 L1552.5 1209.84 L1553.09 1209.84 L1553.67 1209.84 L1554.26 1209.84 L1554.85 1209.84 L1555.43 1209.84 L1556.02 1209.84 L1556.6 1209.84 L1557.19 1209.84 L1557.78 1209.84 L1558.36 1209.84 L1558.95 1209.84 L1559.54 1209.84 L1560.12 1209.84 L1560.71 1209.84 L1561.3 1209.84 L1561.88 1209.84 L1562.47 1209.84 L1563.06 1209.84 L1563.64 1209.84 L1564.23 1209.84 L1564.81 1209.84 L1565.4 1209.84 L1565.99 1209.84 L1566.57 1209.84 L1567.16 1209.84 L1567.75 1209.84 L1568.33 1209.84 L1568.92 1209.84 L1569.51 1209.84 L1570.09 1209.84 L1570.68 1209.84 L1571.27 1209.84 L1571.85 1209.84 L1572.44 1209.84 L1573.02 1209.84 L1573.61 1209.84 L1574.2 1209.84 L1574.78 1209.84 L1575.37 1209.84 L1575.96 1209.84 L1576.54 1209.84 L1577.13 1209.84 L1577.72 1209.84 L1578.3 1209.84 L1578.89 1209.84 L1579.47 1209.84 L1580.06 1209.84 L1580.65 1209.84 L1581.23 1209.84 L1581.82 1209.84 L1582.41 1209.84 L1582.99 1209.84 L1583.58 1209.84 L1584.17 1209.84 L1584.75 1209.84 L1585.34 1209.84 L1585.93 1209.84 L1586.51 1209.84 L1587.1 1209.84 L1587.68 1209.84 L1588.27 1209.84 L1588.86 1209.84 L1589.44 1209.84 L1590.03 1209.84 L1590.62 1209.84 L1591.2 1209.84 L1591.79 1209.84 L1592.38 1209.84 L1592.96 1209.84 L1593.55 1209.84 L1594.14 1209.84 L1594.72 1209.84 L1595.31 1209.84 L1595.89 1209.84 L1596.48 1209.84 L1597.07 1209.84 L1597.65 1209.84 L1598.24 1209.84 L1598.83 1209.84 L1599.41 1209.84 L1600 1209.84 L1600.59 1209.84 L1601.17 1209.84 L1601.76 1209.84 L1602.34 1209.84 L1602.93 1209.84 L1603.52 1209.84 L1604.1 1209.84 L1604.69 1209.84 L1605.28 1209.84 L1605.86 1209.84 L1606.45 1209.84 L1607.04 1209.84 L1607.62 1209.84 L1608.21 1209.84 L1608.8 1209.84 L1609.38 1209.84 L1609.97 1209.84 L1610.55 1209.84 L1611.14 1209.84 L1611.73 1209.84 L1612.31 1209.84 L1612.9 1209.84 L1613.49 1209.84 L1614.07 1209.84 L1614.66 1209.84 L1615.25 1209.84 L1615.83 1209.84 L1616.42 1209.84 L1617.01 1209.84 L1617.59 1209.84 L1618.18 1209.84 L1618.76 1209.84 L1619.35 1209.84 L1619.94 1209.84 L1620.52 1209.84 L1621.11 1209.84 L1621.7 1209.84 L1622.28 1209.84 L1622.87 1209.84 L1623.46 1209.84 L1624.04 1209.84 L1624.63 1209.84 L1625.22 1209.84 L1625.8 1209.84 L1626.39 1209.84 L1626.97 1209.84 L1627.56 1209.84 L1628.15 1209.84 L1628.73 1209.84 L1629.32 1209.84 L1629.91 1209.84 L1630.49 1209.84 L1631.08 1209.84 L1631.67 1209.84 L1632.25 1209.84 L1632.84 1209.84 L1633.42 1209.84 L1634.01 1209.84 L1634.6 1209.84 L1635.18 1209.84 L1635.77 1209.84 L1636.36 1209.84 L1636.94 1209.84 L1637.53 1209.84 L1638.12 1209.84 L1638.7 1209.84 L1639.29 1209.84 L1639.88 1209.84 L1640.46 1209.84 L1641.05 1209.84 L1641.63 1209.84 L1642.22 1209.84 L1642.81 1209.84 L1643.39 1209.84 L1643.98 1209.84 L1644.57 1209.84 L1645.15 1209.84 L1645.74 1209.84 L1646.33 1209.84 L1646.91 1209.84 L1647.5 1209.84 L1648.09 1209.84 L1648.67 1209.84 L1649.26 1209.84 L1649.84 1209.84 L1650.43 1209.84 L1651.02 1209.84 L1651.6 1209.84 L1652.19 1209.84 L1652.78 1209.84 L1653.36 1209.84 L1653.95 1209.84 L1654.54 1209.84 L1655.12 1209.84 L1655.71 1209.84 L1656.29 1209.84 L1656.88 1209.84 L1657.47 1209.84 L1658.05 1209.84 L1658.64 1209.84 L1659.23 1209.84 L1659.81 1209.84 L1660.4 1209.84 L1660.99 1209.84 L1661.57 1209.84 L1662.16 1209.84 L1662.75 1209.84 L1663.33 1209.84 L1663.92 1209.84 L1664.5 1209.84 L1665.09 1209.84 L1665.68 1209.84 L1666.26 1209.84 L1666.85 1209.84 L1667.44 1209.84 L1668.02 1209.84 L1668.61 1209.84 L1669.2 1209.84 L1669.78 1209.84 L1670.37 1209.84 L1670.96 1209.84 L1671.54 1209.84 L1672.13 1209.84 L1672.71 1209.84 L1673.3 1209.84 L1673.89 1209.84 L1674.47 1209.84 L1675.06 1209.84 L1675.65 1209.84 L1676.23 1209.84 L1676.82 1209.84 L1677.41 1209.84 L1677.99 1209.84 L1678.58 1209.84 L1679.17 1209.84 L1679.75 1209.84 L1680.34 1209.84 L1680.92 1209.84 L1681.51 1209.84 L1682.1 1209.84 L1682.68 1209.84 L1683.27 1209.84 L1683.86 1209.84 L1684.44 1209.84 L1685.03 1209.84 L1685.62 1209.84 L1686.2 1209.84 L1686.79 1209.84 L1687.37 1209.84 L1687.96 1209.84 L1688.55 1209.84 L1689.13 1209.84 L1689.72 1209.84 L1690.31 1209.84 L1690.89 1209.84 L1691.48 1209.84 L1692.07 1209.84 L1692.65 1209.84 L1693.24 1209.84 L1693.83 1209.84 L1694.41 1209.84 L1695 1209.84 L1695.58 1209.84 L1696.17 1209.84 L1696.76 1209.84 L1697.34 1209.84 L1697.93 1209.84 L1698.52 1209.84 L1699.1 1209.84 L1699.69 1209.84 L1700.28 1209.84 L1700.86 1209.84 L1701.45 1209.84 L1702.04 1209.84 L1702.62 1209.84 L1703.21 1209.84 L1703.79 1209.84 L1704.38 1209.84 L1704.97 1209.84 L1705.55 1209.84 L1706.14 1209.84 L1706.73 1209.84 L1707.31 1209.84 L1707.9 1209.84 L1708.49 1209.84 L1709.07 1209.84 L1709.66 1209.84 L1710.24 1209.84 L1710.83 1209.84 L1711.42 1209.84 L1712 1209.84 L1712.59 1209.84 L1713.18 1209.84 L1713.76 1209.84 L1714.35 1209.84 L1714.94 1209.84 L1715.52 1209.84 L1716.11 1209.84 L1716.7 1209.84 L1717.28 1209.84 L1717.87 1209.84 L1718.45 1209.84 L1719.04 1209.84 L1719.63 1209.84 L1720.21 1209.84 L1720.8 1209.84 L1721.39 1209.84 L1721.97 1209.84 L1722.56 1209.84 L1723.15 1209.84 L1723.73 1209.84 L1724.32 1209.84 L1724.91 1209.84 L1725.49 1209.84 L1726.08 1209.84 L1726.66 1209.84 L1727.25 1209.84 L1727.84 1209.84 L1728.42 1209.84 L1729.01 1209.84 L1729.6 1209.84 L1730.18 1209.84 L1730.77 1209.84 L1731.36 1209.84 L1731.94 1209.84 L1732.53 1209.84 L1733.11 1209.84 L1733.7 1209.84 L1734.29 1209.84 L1734.87 1209.84 L1735.46 1209.84 L1736.05 1209.84 L1736.63 1209.84 L1737.22 1209.84 L1737.81 1209.84 L1738.39 1209.84 L1738.98 1209.84 L1739.57 1209.84 L1740.15 1209.84 L1740.74 1209.84 L1741.32 1209.84 L1741.91 1209.84 L1742.5 1209.84 L1743.08 1209.84 L1743.67 1209.84 L1744.26 1209.84 L1744.84 1209.84 L1745.43 1209.84 L1746.02 1209.84 L1746.6 1209.84 L1747.19 1209.84 L1747.78 1209.84 L1748.36 1209.84 L1748.95 1209.84 L1749.53 1209.84 L1750.12 1209.84 L1750.71 1209.84 L1751.29 1209.84 L1751.88 1209.84 L1752.47 1209.84 L1753.05 1209.84 L1753.64 1209.84 L1754.23 1209.84 L1754.81 1209.84 L1755.4 1209.84 L1755.99 1209.84 L1756.57 1209.84 L1757.16 1209.84 L1757.74 1209.84 L1758.33 1209.84 L1758.92 1209.84 L1759.5 1209.84 L1760.09 1209.84 L1760.68 1209.84 L1761.26 1209.84 L1761.85 1209.84 L1762.44 1209.84 L1763.02 1209.84 L1763.61 1209.84 L1764.19 1209.84 L1764.78 1209.84 L1765.37 1209.84 L1765.95 1209.84 L1766.54 1209.84 L1767.13 1209.84 L1767.71 1209.84 L1768.3 1209.84 L1768.89 1209.84 L1769.47 1209.84 L1770.06 1209.84 L1770.65 1209.84 L1771.23 1209.84 L1771.82 1209.84 L1772.4 1209.84 L1772.99 1209.84 L1773.58 1209.84 L1774.16 1209.84 L1774.75 1209.84 L1775.34 1209.84 L1775.92 1209.84 L1776.51 1209.84 L1777.1 1209.84 L1777.68 1209.84 L1778.27 1209.84 L1778.86 1209.84 L1779.44 1209.84 L1780.03 1209.84 L1780.61 1209.84 L1781.2 1209.84 L1781.79 1209.84 L1782.37 1209.84 L1782.96 1209.84 L1783.55 1209.84 L1784.13 1209.84 L1784.72 1209.84 L1785.31 1209.84 L1785.89 1209.84 L1786.48 1209.84 L1787.06 1209.84 L1787.65 1209.84 L1788.24 1209.84 L1788.82 1209.84 L1789.41 1209.84 L1790 1209.84 L1790.58 1209.84 L1791.17 1209.84 L1791.76 1209.84 L1792.34 1209.84 L1792.93 1209.84 L1793.52 1209.84 L1794.1 1209.84 L1794.69 1209.84 L1795.27 1209.84 L1795.86 1209.84 L1796.45 1209.84 L1797.03 1209.84 L1797.62 1209.84 L1798.21 1209.84 L1798.79 1209.84 L1799.38 1209.84 L1799.97 1209.84 L1800.55 1209.84 L1801.14 1209.84 L1801.73 1209.84 L1802.31 1209.84 L1802.9 1209.84 L1803.48 1209.84 L1804.07 1209.84 L1804.66 1209.84 L1805.24 1209.84 L1805.83 1209.84 L1806.42 1209.84 L1807 1209.84 L1807.59 1209.84 L1808.18 1209.84 L1808.76 1209.84 L1809.35 1209.84 L1809.94 1209.84 L1810.52 1209.84 L1811.11 1209.84 L1811.69 1209.84 L1812.28 1209.84 L1812.87 1209.84 L1813.45 1209.84 L1814.04 1209.84 L1814.63 1209.84 L1815.21 1209.84 L1815.8 1209.84 L1816.39 1209.84 L1816.97 1209.84 L1817.56 1209.84 L1818.14 1209.84 L1818.73 1209.84 L1819.32 1209.84 L1819.9 1209.84 L1820.49 1209.84 L1821.08 1209.84 L1821.66 1209.84 L1822.25 1209.84 L1822.84 1209.84 L1823.42 1209.84 L1824.01 1209.84 L1824.6 1209.84 L1825.18 1209.84 L1825.77 1209.84 L1826.35 1209.84 L1826.94 1209.84 L1827.53 1209.84 L1828.11 1209.84 L1828.7 1209.84 L1829.29 1209.84 L1829.87 1209.84 L1830.46 1209.84 L1831.05 1209.84 L1831.63 1209.84 L1832.22 1209.84 L1832.81 1209.84 L1833.39 1209.84 L1833.98 1209.84 L1834.56 1209.84 L1835.15 1209.84 L1835.74 1209.84 L1836.32 1209.84 L1836.91 1209.84 L1837.5 1209.84 L1838.08 1209.84 L1838.67 1209.84 L1839.26 1209.84 L1839.84 1209.84 L1840.43 1209.84 L1841.01 1209.84 L1841.6 1209.84 L1842.19 1209.84 L1842.77 1209.84 L1843.36 1209.84 L1843.95 1209.84 L1844.53 1209.84 L1845.12 1209.84 L1845.71 1209.84 L1846.29 1209.84 L1846.88 1209.84 L1847.47 1209.84 L1848.05 1209.84 L1848.64 1209.84 L1849.22 1209.84 L1849.81 1209.84 L1850.4 1209.84 L1850.98 1209.84 L1851.57 1209.84 L1852.16 1209.84 L1852.74 1209.84 L1853.33 1209.84 L1853.92 1209.84 L1854.5 1209.84 L1855.09 1209.84 L1855.68 1209.84 L1856.26 1209.84 L1856.85 1209.84 L1857.43 1209.84 L1858.02 1209.84 L1858.61 1209.84 L1859.19 1209.84 L1859.78 1209.84 L1860.37 1209.84 L1860.95 1209.84 L1861.54 1209.84 L1862.13 1209.84 L1862.71 1209.84 L1863.3 1209.84 L1863.88 1209.84 L1864.47 1209.84 L1865.06 1209.84 L1865.64 1209.84 L1866.23 1209.84 L1866.82 1209.84 L1867.4 1209.84 L1867.99 1209.84 L1868.58 1209.84 L1869.16 1209.84 L1869.75 1209.84 L1870.34 1209.84 L1870.92 1209.84 L1871.51 1209.84 L1872.09 1209.84 L1872.68 1209.84 L1873.27 1209.84 L1873.85 1209.84 L1874.44 1209.84 L1875.03 1209.84 L1875.61 1209.84 L1876.2 1209.84 L1876.79 1209.84 L1877.37 1209.84 L1877.96 1209.84 L1878.55 1209.84 L1879.13 1209.84 L1879.72 1209.84 L1880.3 1209.84 L1880.89 1209.84 L1881.48 1209.84 L1882.06 1209.84 L1882.65 1209.84 L1883.24 1209.84 L1883.82 1209.84 L1884.41 1209.84 L1885 1209.84 L1885.58 1209.84 L1886.17 1209.84 L1886.76 1209.84 L1887.34 1209.84 L1887.93 1209.84 L1888.51 1209.84 L1889.1 1209.84 L1889.69 1209.84 L1890.27 1209.84 L1890.86 1209.84 L1891.45 1209.84 L1892.03 1209.84 L1892.62 1209.84 L1893.21 1209.84 L1893.79 1209.84 L1894.38 1209.84 L1894.96 1209.84 L1895.55 1209.84 L1896.14 1209.84 L1896.72 1209.84 L1897.31 1209.84 L1897.9 1209.84 L1898.48 1209.84 L1899.07 1209.84 L1899.66 1209.84 L1900.24 1209.84 L1900.83 1209.84 L1901.42 1209.84 L1902 1209.84 L1902.59 1209.84 L1903.17 1209.84 L1903.76 1209.84 L1904.35 1209.84 L1904.93 1209.84 L1905.52 1209.84 L1906.11 1209.84 L1906.69 1209.84 L1907.28 1209.84 L1907.87 1209.84 L1908.45 1209.84 L1909.04 1209.84 L1909.63 1209.84 L1910.21 1209.84 L1910.8 1209.84 L1911.38 1209.84 L1911.97 1209.84 L1912.56 1209.84 L1913.14 1209.84 L1913.73 1209.84 L1914.32 1209.84 L1914.9 1209.84 L1915.49 1209.84 L1916.08 1209.84 L1916.66 1209.84 L1917.25 1209.84 L1917.83 1209.84 L1918.42 1209.84 L1919.01 1209.84 L1919.59 1209.84 L1920.18 1209.84 L1920.77 1209.84 L1921.35 1209.84 L1921.94 1209.84 L1922.53 1209.84 L1923.11 1209.84 L1923.7 1209.84 L1924.29 1209.84 L1924.87 1209.84 L1925.46 1209.84 L1926.04 1209.84 L1926.63 1209.84 L1927.22 1209.84 L1927.8 1209.84 L1928.39 1209.84 L1928.98 1209.84 L1929.56 1209.84 L1930.15 1209.84 L1930.74 1209.84 L1931.32 1209.84 L1931.91 1209.84 L1932.5 1209.84 L1933.08 1209.84 L1933.67 1209.84 L1934.25 1209.84 L1934.84 1209.84 L1935.43 1209.84 L1936.01 1209.84 L1936.6 1209.84 L1937.19 1209.84 L1937.77 1209.84 L1938.36 1209.84 L1938.95 1209.84 L1939.53 1209.84 L1940.12 1209.84 L1940.71 1209.84 L1941.29 1209.84 L1941.88 1209.84 L1942.46 1209.84 L1943.05 1209.84 L1943.64 1209.84 L1944.22 1209.84 L1944.81 1209.84 L1945.4 1209.84 L1945.98 1209.84 L1946.57 1209.84 L1947.16 1209.84 L1947.74 1209.84 L1948.33 1209.84 L1948.91 1209.84 L1949.5 1209.84 L1950.09 1209.84 L1950.67 1209.84 L1951.26 1209.84 L1951.85 1209.84 L1952.43 1209.84 L1953.02 1209.84 L1953.61 1209.84 L1954.19 1209.84 L1954.78 1209.84 L1955.37 1209.84 L1955.95 1209.84 L1956.54 1209.84 L1957.12 1209.84 L1957.71 1209.84 L1958.3 1209.84 L1958.88 1209.84 L1959.47 1209.84 L1960.06 1209.84 L1960.64 1209.84 L1961.23 1209.84 L1961.82 1209.84 L1962.4 1209.84 L1962.99 1209.84 L1963.58 1209.84 L1964.16 1209.84 L1964.75 1209.84 L1965.33 1209.84 L1965.92 1209.84 L1966.51 1209.84 L1967.09 1209.84 L1967.68 1209.84 L1968.27 1209.84 L1968.85 1209.84 L1969.44 1209.84 L1970.03 1209.84 L1970.61 1209.84 L1971.2 1209.84 L1971.78 1209.84 L1972.37 1209.84 L1972.96 1209.84 L1973.54 1209.84 L1974.13 1209.84 L1974.72 1209.84 L1975.3 1209.84 L1975.89 1209.84 L1976.48 1209.84 L1977.06 1209.84 L1977.65 1209.84 L1978.24 1209.84 L1978.82 1209.84 L1979.41 1209.84 L1979.99 1209.84 L1980.58 1209.84 L1981.17 1209.84 L1981.75 1209.84 L1982.34 1209.84 L1982.93 1209.84 L1983.51 1209.84 L1984.1 1209.84 L1984.69 1209.84 L1985.27 1209.84 L1985.86 1209.84 L1986.45 1209.84 L1987.03 1209.84 L1987.62 1209.84 L1988.2 1209.84 L1988.79 1209.84 L1989.38 1209.84 L1989.96 1209.84 L1990.55 1209.84 L1991.14 1209.84 L1991.72 1209.84 L1992.31 1209.84 L1992.9 1209.84 L1993.48 1209.84 L1994.07 1209.84 L1994.65 1209.84 L1995.24 1209.84 L1995.83 1209.84 L1996.41 1209.84 L1997 1209.84 L1997.59 1209.84 L1998.17 1209.84 L1998.76 1209.84 L1999.35 1209.84 L1999.93 1209.84 L2000.52 1209.84 L2001.11 1209.84 L2001.69 1209.84 L2002.28 1209.84 L2002.86 1209.84 L2003.45 1209.84 L2004.04 1209.84 L2004.62 1209.84 L2005.21 1209.84 L2005.8 1209.84 L2006.38 1209.84 L2006.97 1209.84 L2007.56 1209.84 L2008.14 1209.84 L2008.73 1209.84 L2009.32 1209.84 L2009.9 1209.84 L2010.49 1209.84 L2011.07 1209.84 L2011.66 1209.84 L2012.25 1209.84 L2012.83 1209.84 L2013.42 1209.84 L2014.01 1209.84 L2014.59 1209.84 L2015.18 1209.84 L2015.77 1209.84 L2016.35 1209.84 L2016.94 1209.84 L2017.53 1209.84 L2018.11 1209.84 L2018.7 1209.84 L2019.28 1209.84 L2019.87 1209.84 L2020.46 1209.84 L2021.04 1209.84 L2021.63 1209.84 L2022.22 1209.84 L2022.8 1209.84 L2023.39 1209.84 L2023.98 1209.84 L2024.56 1209.84 L2025.15 1209.84 L2025.73 1209.84 L2026.32 1209.84 L2026.91 1209.84 L2027.49 1209.84 L2028.08 1209.84 L2028.67 1209.84 L2029.25 1209.84 L2029.84 1209.84 L2030.43 1209.84 L2031.01 1209.84 L2031.6 1209.84 L2032.19 1209.84 L2032.77 1209.84 L2033.36 1209.84 L2033.94 1209.84 L2034.53 1209.84 L2035.12 1209.84 L2035.7 1209.84 L2036.29 1209.84 L2036.88 1209.84 L2037.46 1209.84 L2038.05 1209.84 L2038.64 1209.84 L2039.22 1209.84 L2039.81 1209.84 L2040.4 1209.84 L2040.98 1209.84 L2041.57 1209.84 L2042.15 1209.84 L2042.74 1209.84 L2043.33 1209.84 L2043.91 1209.84 L2044.5 1209.84 L2045.09 1209.84 L2045.67 1209.84 L2046.26 1209.84 L2046.85 1209.84 L2047.43 1209.84 L2048.02 1209.84 L2048.6 1209.84 L2049.19 1209.84 L2049.78 1209.84 L2050.36 1209.84 L2050.95 1209.84 L2051.54 1209.84 L2052.12 1209.84 L2052.71 1209.84 L2053.3 1209.84 L2053.88 1209.84 L2054.47 1209.84 L2055.06 1209.84 L2055.64 1209.84 L2056.23 1209.84 L2056.81 1209.84 L2057.4 1209.84 L2057.99 1209.84 L2058.57 1209.84 L2059.16 1209.84 L2059.75 1209.84 L2060.33 1209.84 L2060.92 1209.84 L2061.51 1209.84 L2062.09 1209.84 L2062.68 1209.84 L2063.27 1209.84 L2063.85 1209.84 L2064.44 1209.84 L2065.02 1209.84 L2065.61 1209.84 L2066.2 1209.84 L2066.78 1209.84 L2067.37 1209.84 L2067.96 1209.84 L2068.54 1209.84 L2069.13 1209.84 L2069.72 1209.84 L2070.3 1209.84 L2070.89 1209.84 L2071.48 1209.84 L2072.06 1209.84 L2072.65 1209.84 L2073.23 1209.84 L2073.82 1209.84 L2074.41 1209.84 L2074.99 1209.84 L2075.58 1209.84 L2076.17 1209.84 L2076.75 1209.84 L2077.34 1209.84 L2077.93 1209.84 L2078.51 1209.84 L2079.1 1209.84 L2079.68 1209.84 L2080.27 1209.84 L2080.86 1209.84 L2081.44 1209.84 L2082.03 1209.84 L2082.62 1209.84 L2083.2 1209.84 L2083.79 1209.84 L2084.38 1209.84 L2084.96 1209.84 L2085.55 1209.84 L2086.14 1209.84 L2086.72 1209.84 L2087.31 1209.84 L2087.89 1209.84 L2088.48 1209.84 L2089.07 1209.84 L2089.65 1209.84 L2090.24 1209.84 L2090.83 1209.84 L2091.41 1209.84 L2092 1209.84 L2092.59 1209.84 L2093.17 1209.84 L2093.76 1209.84 L2094.35 1209.84 L2094.93 1209.84 L2095.52 1209.84 L2096.1 1209.84 L2096.69 1209.84 L2097.28 1209.84 L2097.86 1209.84 L2098.45 1209.84 L2099.04 1209.84 L2099.62 1209.84 L2100.21 1209.84 L2100.8 1209.84 L2101.38 1209.84 L2101.97 1209.84 L2102.55 1209.84 L2103.14 1209.84 L2103.73 1209.84 L2104.31 1209.84 L2104.9 1209.84 L2105.49 1209.84 L2106.07 1209.84 L2106.66 1209.84 L2107.25 1209.84 L2107.83 1209.84 L2108.42 1209.84 L2109.01 1209.84 L2109.59 1209.84 L2110.18 1209.84 L2110.76 1209.84 L2111.35 1209.84 L2111.94 1209.84 L2112.52 1209.84 L2113.11 1209.84 L2113.7 1209.84 L2114.28 1209.84 L2114.87 1209.84 L2115.46 1209.84 L2116.04 1209.84 L2116.63 1209.84 L2117.22 1209.84 L2117.8 1209.84 L2118.39 1209.84 L2118.97 1209.84 L2119.56 1209.84 L2120.15 1209.84 L2120.73 1209.84 L2121.32 1209.84 L2121.91 1209.84 L2122.49 1209.84 L2123.08 1209.84 L2123.67 1209.84 L2124.25 1209.84 L2124.84 1209.84 L2125.42 1209.84 L2126.01 1209.84 L2126.6 1209.84 L2127.18 1209.84 L2127.77 1209.84 L2128.36 1209.84 L2128.94 1209.84 L2129.53 1209.84 L2130.12 1209.84 L2130.7 1209.84 L2131.29 1209.84 L2131.88 1209.84 L2132.46 1209.84 L2133.05 1209.84 L2133.63 1209.84 L2134.22 1209.84 L2134.81 1209.84 L2135.39 1209.84 L2135.98 1209.84 L2136.57 1209.84 L2137.15 1209.84 L2137.74 1209.84 L2138.33 1209.84 L2138.91 1209.84 L2139.5 1209.84 L2140.09 1209.84 L2140.67 1209.84 L2141.26 1209.84 L2141.84 1209.84 L2142.43 1209.84 L2143.02 1209.84 L2143.6 1209.84 L2144.19 1209.84 L2144.78 1209.84 L2145.36 1209.84 L2145.95 1209.84 L2146.54 1209.84 L2147.12 1209.84 L2147.71 1209.84 L2148.3 1209.84 L2148.88 1209.84 L2149.47 1209.84 L2150.05 1209.84 L2150.64 1209.84 L2151.23 1209.84 L2151.81 1209.84 L2152.4 1209.84 L2152.99 1209.84 L2153.57 1209.84 L2154.16 1209.84 L2154.75 1209.84 L2155.33 1209.84 L2155.92 1209.84 L2156.5 1209.84 L2157.09 1209.84 L2157.68 1209.84 L2158.26 1209.84 L2158.26 1209.64 L2157.68 1209.64 L2157.09 1209.64 L2156.5 1209.64 L2155.92 1209.64 L2155.33 1209.64 L2154.75 1209.64 L2154.16 1209.64 L2153.57 1209.64 L2152.99 1209.64 L2152.4 1209.64 L2151.81 1209.64 L2151.23 1209.64 L2150.64 1209.64 L2150.05 1209.64 L2149.47 1209.64 L2148.88 1209.64 L2148.3 1209.64 L2147.71 1209.64 L2147.12 1209.64 L2146.54 1209.64 L2145.95 1209.64 L2145.36 1209.64 L2144.78 1209.64 L2144.19 1209.64 L2143.6 1209.64 L2143.02 1209.64 L2142.43 1209.64 L2141.84 1209.64 L2141.26 1209.64 L2140.67 1209.64 L2140.09 1209.64 L2139.5 1209.64 L2138.91 1209.64 L2138.33 1209.64 L2137.74 1209.64 L2137.15 1209.64 L2136.57 1209.64 L2135.98 1209.64 L2135.39 1209.64 L2134.81 1209.64 L2134.22 1209.64 L2133.63 1209.64 L2133.05 1209.64 L2132.46 1209.64 L2131.88 1209.64 L2131.29 1209.64 L2130.7 1209.64 L2130.12 1209.64 L2129.53 1209.64 L2128.94 1209.64 L2128.36 1209.64 L2127.77 1209.64 L2127.18 1209.64 L2126.6 1209.64 L2126.01 1209.64 L2125.42 1209.64 L2124.84 1209.64 L2124.25 1209.64 L2123.67 1209.64 L2123.08 1209.64 L2122.49 1209.64 L2121.91 1209.64 L2121.32 1209.64 L2120.73 1209.64 L2120.15 1209.64 L2119.56 1209.64 L2118.97 1209.64 L2118.39 1209.64 L2117.8 1209.64 L2117.22 1209.64 L2116.63 1209.64 L2116.04 1209.64 L2115.46 1209.64 L2114.87 1209.64 L2114.28 1209.64 L2113.7 1209.64 L2113.11 1209.64 L2112.52 1209.64 L2111.94 1209.64 L2111.35 1209.64 L2110.76 1209.64 L2110.18 1209.64 L2109.59 1209.64 L2109.01 1209.64 L2108.42 1209.64 L2107.83 1209.64 L2107.25 1209.64 L2106.66 1209.64 L2106.07 1209.64 L2105.49 1209.64 L2104.9 1209.64 L2104.31 1209.64 L2103.73 1209.64 L2103.14 1209.64 L2102.55 1209.64 L2101.97 1209.64 L2101.38 1209.64 L2100.8 1209.64 L2100.21 1209.64 L2099.62 1209.64 L2099.04 1209.64 L2098.45 1209.64 L2097.86 1209.64 L2097.28 1209.64 L2096.69 1209.64 L2096.1 1209.64 L2095.52 1209.64 L2094.93 1209.64 L2094.35 1209.64 L2093.76 1209.64 L2093.17 1209.64 L2092.59 1209.64 L2092 1209.64 L2091.41 1209.64 L2090.83 1209.64 L2090.24 1209.64 L2089.65 1209.64 L2089.07 1209.64 L2088.48 1209.64 L2087.89 1209.64 L2087.31 1209.64 L2086.72 1209.64 L2086.14 1209.64 L2085.55 1209.64 L2084.96 1209.64 L2084.38 1209.64 L2083.79 1209.64 L2083.2 1209.64 L2082.62 1209.64 L2082.03 1209.64 L2081.44 1209.64 L2080.86 1209.64 L2080.27 1209.64 L2079.68 1209.64 L2079.1 1209.64 L2078.51 1209.64 L2077.93 1209.64 L2077.34 1209.64 L2076.75 1209.64 L2076.17 1209.64 L2075.58 1209.64 L2074.99 1209.64 L2074.41 1209.64 L2073.82 1209.64 L2073.23 1209.64 L2072.65 1209.64 L2072.06 1209.64 L2071.48 1209.64 L2070.89 1209.64 L2070.3 1209.64 L2069.72 1209.64 L2069.13 1209.64 L2068.54 1209.64 L2067.96 1209.64 L2067.37 1209.64 L2066.78 1209.64 L2066.2 1209.64 L2065.61 1209.64 L2065.02 1209.64 L2064.44 1209.64 L2063.85 1209.64 L2063.27 1209.64 L2062.68 1209.64 L2062.09 1209.64 L2061.51 1209.64 L2060.92 1209.64 L2060.33 1209.64 L2059.75 1209.64 L2059.16 1209.64 L2058.57 1209.64 L2057.99 1209.64 L2057.4 1209.64 L2056.81 1209.64 L2056.23 1209.64 L2055.64 1209.64 L2055.06 1209.64 L2054.47 1209.64 L2053.88 1209.64 L2053.3 1209.64 L2052.71 1209.64 L2052.12 1209.64 L2051.54 1209.64 L2050.95 1209.64 L2050.36 1209.64 L2049.78 1209.64 L2049.19 1209.64 L2048.6 1209.64 L2048.02 1209.64 L2047.43 1209.64 L2046.85 1209.64 L2046.26 1209.64 L2045.67 1209.64 L2045.09 1209.64 L2044.5 1209.64 L2043.91 1209.64 L2043.33 1209.64 L2042.74 1209.64 L2042.15 1209.64 L2041.57 1209.64 L2040.98 1209.64 L2040.4 1209.64 L2039.81 1209.64 L2039.22 1209.64 L2038.64 1209.64 L2038.05 1209.64 L2037.46 1209.64 L2036.88 1209.64 L2036.29 1209.64 L2035.7 1209.64 L2035.12 1209.64 L2034.53 1209.64 L2033.94 1209.64 L2033.36 1209.64 L2032.77 1209.64 L2032.19 1209.64 L2031.6 1209.64 L2031.01 1209.64 L2030.43 1209.64 L2029.84 1209.64 L2029.25 1209.64 L2028.67 1209.64 L2028.08 1209.64 L2027.49 1209.64 L2026.91 1209.64 L2026.32 1209.64 L2025.73 1209.64 L2025.15 1209.64 L2024.56 1209.64 L2023.98 1209.64 L2023.39 1209.64 L2022.8 1209.64 L2022.22 1209.64 L2021.63 1209.64 L2021.04 1209.64 L2020.46 1209.64 L2019.87 1209.64 L2019.28 1209.64 L2018.7 1209.64 L2018.11 1209.64 L2017.53 1209.64 L2016.94 1209.64 L2016.35 1209.64 L2015.77 1209.64 L2015.18 1209.64 L2014.59 1209.64 L2014.01 1209.64 L2013.42 1209.64 L2012.83 1209.64 L2012.25 1209.64 L2011.66 1209.64 L2011.07 1209.64 L2010.49 1209.64 L2009.9 1209.64 L2009.32 1209.64 L2008.73 1209.64 L2008.14 1209.64 L2007.56 1209.64 L2006.97 1209.64 L2006.38 1209.64 L2005.8 1209.64 L2005.21 1209.64 L2004.62 1209.64 L2004.04 1209.64 L2003.45 1209.64 L2002.86 1209.64 L2002.28 1209.64 L2001.69 1209.64 L2001.11 1209.64 L2000.52 1209.64 L1999.93 1209.64 L1999.35 1209.64 L1998.76 1209.64 L1998.17 1209.64 L1997.59 1209.64 L1997 1209.64 L1996.41 1209.64 L1995.83 1209.64 L1995.24 1209.64 L1994.65 1209.64 L1994.07 1209.64 L1993.48 1209.64 L1992.9 1209.64 L1992.31 1209.64 L1991.72 1209.64 L1991.14 1209.64 L1990.55 1209.64 L1989.96 1209.64 L1989.38 1209.64 L1988.79 1209.64 L1988.2 1209.64 L1987.62 1209.64 L1987.03 1209.64 L1986.45 1209.64 L1985.86 1209.64 L1985.27 1209.64 L1984.69 1209.64 L1984.1 1209.64 L1983.51 1209.64 L1982.93 1209.64 L1982.34 1209.64 L1981.75 1209.64 L1981.17 1209.64 L1980.58 1209.64 L1979.99 1209.64 L1979.41 1209.64 L1978.82 1209.64 L1978.24 1209.64 L1977.65 1209.64 L1977.06 1209.64 L1976.48 1209.64 L1975.89 1209.64 L1975.3 1209.64 L1974.72 1209.64 L1974.13 1209.64 L1973.54 1209.64 L1972.96 1209.64 L1972.37 1209.64 L1971.78 1209.64 L1971.2 1209.64 L1970.61 1209.64 L1970.03 1209.64 L1969.44 1209.64 L1968.85 1209.64 L1968.27 1209.64 L1967.68 1209.64 L1967.09 1209.64 L1966.51 1209.64 L1965.92 1209.64 L1965.33 1209.64 L1964.75 1209.64 L1964.16 1209.64 L1963.58 1209.64 L1962.99 1209.64 L1962.4 1209.64 L1961.82 1209.64 L1961.23 1209.64 L1960.64 1209.64 L1960.06 1209.64 L1959.47 1209.64 L1958.88 1209.64 L1958.3 1209.64 L1957.71 1209.64 L1957.12 1209.64 L1956.54 1209.64 L1955.95 1209.64 L1955.37 1209.64 L1954.78 1209.64 L1954.19 1209.64 L1953.61 1209.64 L1953.02 1209.64 L1952.43 1209.64 L1951.85 1209.64 L1951.26 1209.64 L1950.67 1209.64 L1950.09 1209.64 L1949.5 1209.64 L1948.91 1209.64 L1948.33 1209.64 L1947.74 1209.64 L1947.16 1209.64 L1946.57 1209.64 L1945.98 1209.64 L1945.4 1209.64 L1944.81 1209.64 L1944.22 1209.64 L1943.64 1209.64 L1943.05 1209.64 L1942.46 1209.64 L1941.88 1209.64 L1941.29 1209.64 L1940.71 1209.64 L1940.12 1209.64 L1939.53 1209.64 L1938.95 1209.64 L1938.36 1209.64 L1937.77 1209.64 L1937.19 1209.64 L1936.6 1209.64 L1936.01 1209.64 L1935.43 1209.64 L1934.84 1209.64 L1934.25 1209.64 L1933.67 1209.64 L1933.08 1209.64 L1932.5 1209.64 L1931.91 1209.64 L1931.32 1209.64 L1930.74 1209.64 L1930.15 1209.64 L1929.56 1209.64 L1928.98 1209.64 L1928.39 1209.64 L1927.8 1209.64 L1927.22 1209.64 L1926.63 1209.64 L1926.04 1209.64 L1925.46 1209.64 L1924.87 1209.64 L1924.29 1209.64 L1923.7 1209.64 L1923.11 1209.64 L1922.53 1209.64 L1921.94 1209.64 L1921.35 1209.64 L1920.77 1209.64 L1920.18 1209.64 L1919.59 1209.64 L1919.01 1209.64 L1918.42 1209.64 L1917.83 1209.64 L1917.25 1209.64 L1916.66 1209.64 L1916.08 1209.64 L1915.49 1209.64 L1914.9 1209.64 L1914.32 1209.64 L1913.73 1209.64 L1913.14 1209.64 L1912.56 1209.64 L1911.97 1209.64 L1911.38 1209.64 L1910.8 1209.64 L1910.21 1209.64 L1909.63 1209.64 L1909.04 1209.64 L1908.45 1209.64 L1907.87 1209.64 L1907.28 1209.64 L1906.69 1209.64 L1906.11 1209.64 L1905.52 1209.64 L1904.93 1209.64 L1904.35 1209.64 L1903.76 1209.64 L1903.17 1209.64 L1902.59 1209.64 L1902 1209.64 L1901.42 1209.64 L1900.83 1209.64 L1900.24 1209.64 L1899.66 1209.64 L1899.07 1209.64 L1898.48 1209.64 L1897.9 1209.64 L1897.31 1209.64 L1896.72 1209.64 L1896.14 1209.64 L1895.55 1209.64 L1894.96 1209.64 L1894.38 1209.64 L1893.79 1209.64 L1893.21 1209.64 L1892.62 1209.64 L1892.03 1209.64 L1891.45 1209.64 L1890.86 1209.64 L1890.27 1209.64 L1889.69 1209.64 L1889.1 1209.64 L1888.51 1209.64 L1887.93 1209.64 L1887.34 1209.64 L1886.76 1209.64 L1886.17 1209.64 L1885.58 1209.64 L1885 1209.64 L1884.41 1209.64 L1883.82 1209.64 L1883.24 1209.64 L1882.65 1209.64 L1882.06 1209.64 L1881.48 1209.64 L1880.89 1209.64 L1880.3 1209.64 L1879.72 1209.64 L1879.13 1209.64 L1878.55 1209.64 L1877.96 1209.64 L1877.37 1209.64 L1876.79 1209.64 L1876.2 1209.64 L1875.61 1209.64 L1875.03 1209.64 L1874.44 1209.64 L1873.85 1209.64 L1873.27 1209.64 L1872.68 1209.64 L1872.09 1209.64 L1871.51 1209.64 L1870.92 1209.64 L1870.34 1209.64 L1869.75 1209.64 L1869.16 1209.64 L1868.58 1209.64 L1867.99 1209.64 L1867.4 1209.64 L1866.82 1209.64 L1866.23 1209.64 L1865.64 1209.64 L1865.06 1209.64 L1864.47 1209.64 L1863.88 1209.64 L1863.3 1209.64 L1862.71 1209.64 L1862.13 1209.64 L1861.54 1209.64 L1860.95 1209.64 L1860.37 1209.64 L1859.78 1209.64 L1859.19 1209.64 L1858.61 1209.64 L1858.02 1209.64 L1857.43 1209.64 L1856.85 1209.64 L1856.26 1209.64 L1855.68 1209.64 L1855.09 1209.64 L1854.5 1209.64 L1853.92 1209.64 L1853.33 1209.64 L1852.74 1209.64 L1852.16 1209.64 L1851.57 1209.64 L1850.98 1209.64 L1850.4 1209.64 L1849.81 1209.64 L1849.22 1209.64 L1848.64 1209.64 L1848.05 1209.64 L1847.47 1209.64 L1846.88 1209.64 L1846.29 1209.64 L1845.71 1209.64 L1845.12 1209.64 L1844.53 1209.64 L1843.95 1209.64 L1843.36 1209.64 L1842.77 1209.64 L1842.19 1209.64 L1841.6 1209.64 L1841.01 1209.64 L1840.43 1209.64 L1839.84 1209.64 L1839.26 1209.64 L1838.67 1209.64 L1838.08 1209.64 L1837.5 1209.64 L1836.91 1209.64 L1836.32 1209.64 L1835.74 1209.64 L1835.15 1209.64 L1834.56 1209.64 L1833.98 1209.64 L1833.39 1209.64 L1832.81 1209.64 L1832.22 1209.64 L1831.63 1209.64 L1831.05 1209.64 L1830.46 1209.64 L1829.87 1209.64 L1829.29 1209.64 L1828.7 1209.64 L1828.11 1209.64 L1827.53 1209.64 L1826.94 1209.64 L1826.35 1209.64 L1825.77 1209.64 L1825.18 1209.64 L1824.6 1209.64 L1824.01 1209.64 L1823.42 1209.64 L1822.84 1209.64 L1822.25 1209.64 L1821.66 1209.64 L1821.08 1209.64 L1820.49 1209.64 L1819.9 1209.64 L1819.32 1209.64 L1818.73 1209.64 L1818.14 1209.64 L1817.56 1209.64 L1816.97 1209.64 L1816.39 1209.64 L1815.8 1209.64 L1815.21 1209.64 L1814.63 1209.64 L1814.04 1209.64 L1813.45 1209.64 L1812.87 1209.64 L1812.28 1209.64 L1811.69 1209.64 L1811.11 1209.64 L1810.52 1209.64 L1809.94 1209.64 L1809.35 1209.64 L1808.76 1209.64 L1808.18 1209.64 L1807.59 1209.64 L1807 1209.64 L1806.42 1209.64 L1805.83 1209.64 L1805.24 1209.64 L1804.66 1209.64 L1804.07 1209.64 L1803.48 1209.64 L1802.9 1209.64 L1802.31 1209.64 L1801.73 1209.64 L1801.14 1209.64 L1800.55 1209.64 L1799.97 1209.64 L1799.38 1209.64 L1798.79 1209.64 L1798.21 1209.64 L1797.62 1209.64 L1797.03 1209.64 L1796.45 1209.64 L1795.86 1209.64 L1795.27 1209.64 L1794.69 1209.64 L1794.1 1209.64 L1793.52 1209.64 L1792.93 1209.64 L1792.34 1209.64 L1791.76 1209.64 L1791.17 1209.64 L1790.58 1209.64 L1790 1209.64 L1789.41 1209.64 L1788.82 1209.64 L1788.24 1209.64 L1787.65 1209.64 L1787.06 1209.64 L1786.48 1209.64 L1785.89 1209.64 L1785.31 1209.64 L1784.72 1209.64 L1784.13 1209.64 L1783.55 1209.64 L1782.96 1209.64 L1782.37 1209.64 L1781.79 1209.64 L1781.2 1209.64 L1780.61 1209.64 L1780.03 1209.64 L1779.44 1209.64 L1778.86 1209.64 L1778.27 1209.64 L1777.68 1209.64 L1777.1 1209.64 L1776.51 1209.64 L1775.92 1209.64 L1775.34 1209.64 L1774.75 1209.64 L1774.16 1209.64 L1773.58 1209.64 L1772.99 1209.64 L1772.4 1209.64 L1771.82 1209.64 L1771.23 1209.64 L1770.65 1209.64 L1770.06 1209.64 L1769.47 1209.64 L1768.89 1209.64 L1768.3 1209.64 L1767.71 1209.64 L1767.13 1209.64 L1766.54 1209.64 L1765.95 1209.64 L1765.37 1209.64 L1764.78 1209.64 L1764.19 1209.64 L1763.61 1209.64 L1763.02 1209.64 L1762.44 1209.64 L1761.85 1209.64 L1761.26 1209.64 L1760.68 1209.64 L1760.09 1209.64 L1759.5 1209.64 L1758.92 1209.64 L1758.33 1209.64 L1757.74 1209.64 L1757.16 1209.64 L1756.57 1209.64 L1755.99 1209.64 L1755.4 1209.64 L1754.81 1209.64 L1754.23 1209.64 L1753.64 1209.64 L1753.05 1209.64 L1752.47 1209.64 L1751.88 1209.64 L1751.29 1209.64 L1750.71 1209.64 L1750.12 1209.64 L1749.53 1209.64 L1748.95 1209.64 L1748.36 1209.64 L1747.78 1209.64 L1747.19 1209.64 L1746.6 1209.64 L1746.02 1209.64 L1745.43 1209.64 L1744.84 1209.64 L1744.26 1209.64 L1743.67 1209.64 L1743.08 1209.64 L1742.5 1209.64 L1741.91 1209.64 L1741.32 1209.64 L1740.74 1209.64 L1740.15 1209.64 L1739.57 1209.64 L1738.98 1209.64 L1738.39 1209.64 L1737.81 1209.64 L1737.22 1209.64 L1736.63 1209.64 L1736.05 1209.64 L1735.46 1209.64 L1734.87 1209.64 L1734.29 1209.64 L1733.7 1209.64 L1733.11 1209.64 L1732.53 1209.64 L1731.94 1209.64 L1731.36 1209.64 L1730.77 1209.64 L1730.18 1209.64 L1729.6 1209.64 L1729.01 1209.64 L1728.42 1209.64 L1727.84 1209.64 L1727.25 1209.64 L1726.66 1209.64 L1726.08 1209.64 L1725.49 1209.64 L1724.91 1209.64 L1724.32 1209.64 L1723.73 1209.64 L1723.15 1209.64 L1722.56 1209.64 L1721.97 1209.64 L1721.39 1209.64 L1720.8 1209.64 L1720.21 1209.64 L1719.63 1209.64 L1719.04 1209.64 L1718.45 1209.64 L1717.87 1209.64 L1717.28 1209.64 L1716.7 1209.64 L1716.11 1209.64 L1715.52 1209.64 L1714.94 1209.64 L1714.35 1209.64 L1713.76 1209.64 L1713.18 1209.64 L1712.59 1209.64 L1712 1209.64 L1711.42 1209.64 L1710.83 1209.64 L1710.24 1209.64 L1709.66 1209.64 L1709.07 1209.64 L1708.49 1209.64 L1707.9 1209.64 L1707.31 1209.64 L1706.73 1209.64 L1706.14 1209.64 L1705.55 1209.64 L1704.97 1209.64 L1704.38 1209.64 L1703.79 1209.64 L1703.21 1209.64 L1702.62 1209.64 L1702.04 1209.64 L1701.45 1209.64 L1700.86 1209.64 L1700.28 1209.64 L1699.69 1209.64 L1699.1 1209.64 L1698.52 1209.64 L1697.93 1209.64 L1697.34 1209.64 L1696.76 1209.64 L1696.17 1209.64 L1695.58 1209.64 L1695 1209.64 L1694.41 1209.64 L1693.83 1209.64 L1693.24 1209.64 L1692.65 1209.64 L1692.07 1209.64 L1691.48 1209.64 L1690.89 1209.64 L1690.31 1209.64 L1689.72 1209.64 L1689.13 1209.64 L1688.55 1209.64 L1687.96 1209.64 L1687.37 1209.64 L1686.79 1209.64 L1686.2 1209.64 L1685.62 1209.64 L1685.03 1209.64 L1684.44 1209.64 L1683.86 1209.64 L1683.27 1209.64 L1682.68 1209.64 L1682.1 1209.64 L1681.51 1209.64 L1680.92 1209.64 L1680.34 1209.64 L1679.75 1209.64 L1679.17 1209.64 L1678.58 1209.64 L1677.99 1209.64 L1677.41 1209.64 L1676.82 1209.64 L1676.23 1209.64 L1675.65 1209.64 L1675.06 1209.64 L1674.47 1209.64 L1673.89 1209.64 L1673.3 1209.64 L1672.71 1209.64 L1672.13 1209.64 L1671.54 1209.64 L1670.96 1209.64 L1670.37 1209.64 L1669.78 1209.64 L1669.2 1209.64 L1668.61 1209.64 L1668.02 1209.64 L1667.44 1209.64 L1666.85 1209.64 L1666.26 1209.64 L1665.68 1209.64 L1665.09 1209.64 L1664.5 1209.64 L1663.92 1209.64 L1663.33 1209.64 L1662.75 1209.64 L1662.16 1209.64 L1661.57 1209.64 L1660.99 1209.64 L1660.4 1209.64 L1659.81 1209.64 L1659.23 1209.64 L1658.64 1209.64 L1658.05 1209.64 L1657.47 1209.64 L1656.88 1209.64 L1656.29 1209.64 L1655.71 1209.64 L1655.12 1209.64 L1654.54 1209.64 L1653.95 1209.64 L1653.36 1209.64 L1652.78 1209.64 L1652.19 1209.64 L1651.6 1209.64 L1651.02 1209.64 L1650.43 1209.64 L1649.84 1209.64 L1649.26 1209.64 L1648.67 1209.64 L1648.09 1209.64 L1647.5 1209.64 L1646.91 1209.64 L1646.33 1209.64 L1645.74 1209.64 L1645.15 1209.64 L1644.57 1209.64 L1643.98 1209.64 L1643.39 1209.64 L1642.81 1209.64 L1642.22 1209.64 L1641.63 1209.64 L1641.05 1209.64 L1640.46 1209.64 L1639.88 1209.64 L1639.29 1209.64 L1638.7 1209.64 L1638.12 1209.64 L1637.53 1209.64 L1636.94 1209.64 L1636.36 1209.64 L1635.77 1209.64 L1635.18 1209.64 L1634.6 1209.64 L1634.01 1209.64 L1633.42 1209.64 L1632.84 1209.64 L1632.25 1209.64 L1631.67 1209.64 L1631.08 1209.64 L1630.49 1209.64 L1629.91 1209.64 L1629.32 1209.64 L1628.73 1209.64 L1628.15 1209.64 L1627.56 1209.64 L1626.97 1209.64 L1626.39 1209.64 L1625.8 1209.64 L1625.22 1209.64 L1624.63 1209.64 L1624.04 1209.64 L1623.46 1209.64 L1622.87 1209.64 L1622.28 1209.64 L1621.7 1209.64 L1621.11 1209.64 L1620.52 1209.64 L1619.94 1209.64 L1619.35 1209.64 L1618.76 1209.64 L1618.18 1209.64 L1617.59 1209.64 L1617.01 1209.64 L1616.42 1209.64 L1615.83 1209.64 L1615.25 1209.64 L1614.66 1209.64 L1614.07 1209.64 L1613.49 1209.64 L1612.9 1209.64 L1612.31 1209.64 L1611.73 1209.64 L1611.14 1209.64 L1610.55 1209.64 L1609.97 1209.64 L1609.38 1209.64 L1608.8 1209.64 L1608.21 1209.64 L1607.62 1209.64 L1607.04 1209.64 L1606.45 1209.64 L1605.86 1209.64 L1605.28 1209.64 L1604.69 1209.64 L1604.1 1209.64 L1603.52 1209.64 L1602.93 1209.64 L1602.34 1209.64 L1601.76 1209.64 L1601.17 1209.64 L1600.59 1209.64 L1600 1209.64 L1599.41 1209.64 L1598.83 1209.64 L1598.24 1209.64 L1597.65 1209.64 L1597.07 1209.64 L1596.48 1209.64 L1595.89 1209.64 L1595.31 1209.64 L1594.72 1209.64 L1594.14 1209.64 L1593.55 1209.64 L1592.96 1209.64 L1592.38 1209.64 L1591.79 1209.64 L1591.2 1209.64 L1590.62 1209.64 L1590.03 1209.64 L1589.44 1209.64 L1588.86 1209.64 L1588.27 1209.64 L1587.68 1209.64 L1587.1 1209.64 L1586.51 1209.64 L1585.93 1209.64 L1585.34 1209.64 L1584.75 1209.64 L1584.17 1209.64 L1583.58 1209.64 L1582.99 1209.64 L1582.41 1209.64 L1581.82 1209.64 L1581.23 1209.64 L1580.65 1209.64 L1580.06 1209.64 L1579.47 1209.64 L1578.89 1209.64 L1578.3 1209.64 L1577.72 1209.64 L1577.13 1209.64 L1576.54 1209.64 L1575.96 1209.64 L1575.37 1209.64 L1574.78 1209.64 L1574.2 1209.64 L1573.61 1209.64 L1573.02 1209.64 L1572.44 1209.64 L1571.85 1209.64 L1571.27 1209.64 L1570.68 1209.64 L1570.09 1209.64 L1569.51 1209.64 L1568.92 1209.64 L1568.33 1209.64 L1567.75 1209.64 L1567.16 1209.64 L1566.57 1209.64 L1565.99 1209.64 L1565.4 1209.64 L1564.81 1209.64 L1564.23 1209.64 L1563.64 1209.64 L1563.06 1209.64 L1562.47 1209.64 L1561.88 1209.64 L1561.3 1209.64 L1560.71 1209.64 L1560.12 1209.64 L1559.54 1209.64 L1558.95 1209.64 L1558.36 1209.64 L1557.78 1209.64 L1557.19 1209.64 L1556.6 1209.64 L1556.02 1209.64 L1555.43 1209.64 L1554.85 1209.64 L1554.26 1209.64 L1553.67 1209.64 L1553.09 1209.64 L1552.5 1209.64 L1551.91 1209.64 L1551.33 1209.64 L1550.74 1209.64 L1550.15 1209.64 L1549.57 1209.64 L1548.98 1209.64 L1548.4 1209.64 L1547.81 1209.64 L1547.22 1209.64 L1546.64 1209.64 L1546.05 1209.64 L1545.46 1209.64 L1544.88 1209.64 L1544.29 1209.64 L1543.7 1209.64 L1543.12 1209.64 L1542.53 1209.64 L1541.94 1209.64 L1541.36 1209.64 L1540.77 1209.64 L1540.19 1209.64 L1539.6 1209.64 L1539.01 1209.64 L1538.43 1209.64 L1537.84 1209.64 L1537.25 1209.64 L1536.67 1209.64 L1536.08 1209.64 L1535.49 1209.64 L1534.91 1209.64 L1534.32 1209.64 L1533.73 1209.64 L1533.15 1209.64 L1532.56 1209.64 L1531.98 1209.64 L1531.39 1209.64 L1530.8 1209.64 L1530.22 1209.64 L1529.63 1209.64 L1529.04 1209.64 L1528.46 1209.64 L1527.87 1209.64 L1527.28 1209.64 L1526.7 1209.64 L1526.11 1209.64 L1525.52 1209.64 L1524.94 1209.64 L1524.35 1209.64 L1523.77 1209.64 L1523.18 1209.64 L1522.59 1209.64 L1522.01 1209.64 L1521.42 1209.64 L1520.83 1209.64 L1520.25 1209.64 L1519.66 1209.64 L1519.07 1209.64 L1518.49 1209.64 L1517.9 1209.64 L1517.32 1209.64 L1516.73 1209.64 L1516.14 1209.64 L1515.56 1209.64 L1514.97 1209.64 L1514.38 1209.64 L1513.8 1209.64 L1513.21 1209.64 L1512.62 1209.64 L1512.04 1209.64 L1511.45 1209.64 L1510.86 1209.64 L1510.28 1209.64 L1509.69 1209.64 L1509.11 1209.64 L1508.52 1209.64 L1507.93 1209.64 L1507.35 1209.64 L1506.76 1209.64 L1506.17 1209.64 L1505.59 1209.64 L1505 1209.64 L1504.41 1209.64 L1503.83 1209.64 L1503.24 1209.64 L1502.65 1209.64 L1502.07 1209.64 L1501.48 1209.64 L1500.9 1209.64 L1500.31 1209.64 L1499.72 1209.64 L1499.14 1209.64 L1498.55 1209.64 L1497.96 1209.64 L1497.38 1209.64 L1496.79 1209.64 L1496.2 1209.64 L1495.62 1209.64 L1495.03 1209.64 L1494.45 1209.64 L1493.86 1209.64 L1493.27 1209.64 L1492.69 1209.64 L1492.1 1209.64 L1491.51 1209.64 L1490.93 1209.64 L1490.34 1209.64 L1489.75 1209.64 L1489.17 1209.64 L1488.58 1209.64 L1487.99 1209.64 L1487.41 1209.64 L1486.82 1209.64 L1486.24 1209.64 L1485.65 1209.64 L1485.06 1209.64 L1484.48 1209.64 L1483.89 1209.64 L1483.3 1209.64 L1482.72 1209.64 L1482.13 1209.64 L1481.54 1209.64 L1480.96 1209.64 L1480.37 1209.64 L1479.78 1209.64 L1479.2 1209.64 L1478.61 1209.64 L1478.03 1209.64 L1477.44 1209.64 L1476.85 1209.64 L1476.27 1209.64 L1475.68 1209.64 L1475.09 1209.64 L1474.51 1209.64 L1473.92 1209.64 L1473.33 1209.64 L1472.75 1209.64 L1472.16 1209.64 L1471.57 1209.64 L1470.99 1209.64 L1470.4 1209.64 L1469.82 1209.64 L1469.23 1209.64 L1468.64 1209.64 L1468.06 1209.64 L1467.47 1209.64 L1466.88 1209.64 L1466.3 1209.64 L1465.71 1209.64 L1465.12 1209.64 L1464.54 1209.64 L1463.95 1209.64 L1463.37 1209.64 L1462.78 1209.64 L1462.19 1209.64 L1461.61 1209.64 L1461.02 1209.64 L1460.43 1209.64 L1459.85 1209.64 L1459.26 1209.64 L1458.67 1209.64 L1458.09 1209.64 L1457.5 1209.64 L1456.91 1209.64 L1456.33 1209.64 L1455.74 1209.64 L1455.16 1209.64 L1454.57 1209.64 L1453.98 1209.64 L1453.4 1209.64 L1452.81 1209.64 L1452.22 1209.64 L1451.64 1209.64 L1451.05 1209.64 L1450.46 1209.64 L1449.88 1209.64 L1449.29 1209.64 L1448.7 1209.64 L1448.12 1209.64 L1447.53 1209.64 L1446.95 1209.64 L1446.36 1209.64 L1445.77 1209.64 L1445.19 1209.64 L1444.6 1209.64 L1444.01 1209.64 L1443.43 1209.64 L1442.84 1209.64 L1442.25 1209.64 L1441.67 1209.64 L1441.08 1209.64 L1440.5 1209.64 L1439.91 1209.64 L1439.32 1209.64 L1438.74 1209.64 L1438.15 1209.64 L1437.56 1209.64 L1436.98 1209.64 L1436.39 1209.64 L1435.8 1209.64 L1435.22 1209.64 L1434.63 1209.64 L1434.04 1209.64 L1433.46 1209.64 L1432.87 1209.64 L1432.29 1209.64 L1431.7 1209.64 L1431.11 1209.64 L1430.53 1209.64 L1429.94 1209.64 L1429.35 1209.64 L1428.77 1209.64 L1428.18 1209.64 L1427.59 1209.64 L1427.01 1209.64 L1426.42 1209.64 L1425.83 1209.64 L1425.25 1209.64 L1424.66 1209.64 L1424.08 1209.64 L1423.49 1209.64 L1422.9 1209.64 L1422.32 1209.64 L1421.73 1209.64 L1421.14 1209.64 L1420.56 1209.64 L1419.97 1209.64 L1419.38 1209.64 L1418.8 1209.64 L1418.21 1209.64 L1417.63 1209.64 L1417.04 1209.64 L1416.45 1209.64 L1415.87 1209.64 L1415.28 1209.64 L1414.69 1209.64 L1414.11 1209.64 L1413.52 1209.64 L1412.93 1209.64 L1412.35 1209.64 L1411.76 1209.64 L1411.17 1209.64 L1410.59 1209.64 L1410 1209.64 L1409.42 1209.64 L1408.83 1209.64 L1408.24 1209.64 L1407.66 1209.64 L1407.07 1209.64 L1406.48 1209.64 L1405.9 1209.64 L1405.31 1209.64 L1404.72 1209.64 L1404.14 1209.64 L1403.55 1209.64 L1402.96 1209.64 L1402.38 1209.64 L1401.79 1209.64 L1401.21 1209.64 L1400.62 1209.64 L1400.03 1209.64 L1399.45 1209.64 L1398.86 1209.64 L1398.27 1209.64 L1397.69 1209.64 L1397.1 1209.64 L1396.51 1209.64 L1395.93 1209.64 L1395.34 1209.64 L1394.75 1209.64 L1394.17 1209.64 L1393.58 1209.64 L1393 1209.64 L1392.41 1209.64 L1391.82 1209.64 L1391.24 1209.64 L1390.65 1209.64 L1390.06 1209.64 L1389.48 1209.64 L1388.89 1209.64 L1388.3 1209.64 L1387.72 1209.64 L1387.13 1209.64 L1386.55 1209.64 L1385.96 1209.64 L1385.37 1209.64 L1384.79 1209.64 L1384.2 1209.64 L1383.61 1209.64 L1383.03 1209.64 L1382.44 1209.64 L1381.85 1209.64 L1381.27 1209.64 L1380.68 1209.64 L1380.09 1209.64 L1379.51 1209.64 L1378.92 1209.64 L1378.34 1209.64 L1377.75 1209.64 L1377.16 1209.64 L1376.58 1209.64 L1375.99 1209.64 L1375.4 1209.64 L1374.82 1209.64 L1374.23 1209.64 L1373.64 1209.64 L1373.06 1209.64 L1372.47 1209.64 L1371.88 1209.64 L1371.3 1209.64 L1370.71 1209.64 L1370.13 1209.64 L1369.54 1209.64 L1368.95 1209.64 L1368.37 1209.64 L1367.78 1209.64 L1367.19 1209.64 L1366.61 1209.64 L1366.02 1209.64 L1365.43 1209.64 L1364.85 1209.64 L1364.26 1209.64 L1363.68 1209.64 L1363.09 1209.64 L1362.5 1209.64 L1361.92 1209.64 L1361.33 1209.64 L1360.74 1209.64 L1360.16 1209.64 L1359.57 1209.64 L1358.98 1209.64 L1358.4 1209.64 L1357.81 1209.64 L1357.22 1209.64 L1356.64 1209.64 L1356.05 1209.64 L1355.47 1209.64 L1354.88 1209.64 L1354.29 1209.64 L1353.71 1209.64 L1353.12 1209.64 L1352.53 1209.64 L1351.95 1209.64 L1351.36 1209.64 L1350.77 1209.64 L1350.19 1209.64 L1349.6 1209.64 L1349.01 1209.64 L1348.43 1209.64 L1347.84 1209.64 L1347.26 1209.64 L1346.67 1209.64 L1346.08 1209.64 L1345.5 1209.64 L1344.91 1209.64 L1344.32 1209.64 L1343.74 1209.64 L1343.15 1209.64 L1342.56 1209.64 L1341.98 1209.64 L1341.39 1209.64 L1340.8 1209.64 L1340.22 1209.64 L1339.63 1209.64 L1339.05 1209.64 L1338.46 1209.64 L1337.87 1209.64 L1337.29 1209.64 L1336.7 1209.64 L1336.11 1209.64 L1335.53 1209.64 L1334.94 1209.64 L1334.35 1209.64 L1333.77 1209.64 L1333.18 1209.64 L1332.6 1209.64 L1332.01 1209.64 L1331.42 1209.64 L1330.84 1209.64 L1330.25 1209.64 L1329.66 1209.64 L1329.08 1209.64 L1328.49 1209.64 L1327.9 1209.64 L1327.32 1209.64 L1326.73 1209.64 L1326.14 1209.64 L1325.56 1209.64 L1324.97 1209.64 L1324.39 1209.64 L1323.8 1209.64 L1323.21 1209.64 L1322.63 1209.64 L1322.04 1209.64 L1321.45 1209.64 L1320.87 1209.64 L1320.28 1209.64 L1319.69 1209.64 L1319.11 1209.64 L1318.52 1209.64 L1317.93 1209.64 L1317.35 1209.64 L1316.76 1209.64 L1316.18 1209.64 L1315.59 1209.64 L1315 1209.64 L1314.42 1209.64 L1313.83 1209.64 L1313.24 1209.64 L1312.66 1209.64 L1312.07 1209.64 L1311.48 1209.64 L1310.9 1209.64 L1310.31 1209.64 L1309.73 1209.64 L1309.14 1209.64 L1308.55 1209.64 L1307.97 1209.64 L1307.38 1209.64 L1306.79 1209.64 L1306.21 1209.64 L1305.62 1209.64 L1305.03 1209.64 L1304.45 1209.64 L1303.86 1209.64 L1303.27 1209.64 L1302.69 1209.64 L1302.1 1209.64 L1301.52 1209.64 L1300.93 1209.64 L1300.34 1209.64 L1299.76 1209.64 L1299.17 1209.64 L1298.58 1209.64 L1298 1209.64 L1297.41 1209.64 L1296.82 1209.64 L1296.24 1209.64 L1295.65 1209.64 L1295.06 1209.64 L1294.48 1209.64 L1293.89 1209.64 L1293.31 1209.64 L1292.72 1209.64 L1292.13 1209.64 L1291.55 1209.64 L1290.96 1209.64 L1290.37 1209.64 L1289.79 1209.64 L1289.2 1209.64 L1288.61 1209.64 L1288.03 1209.64 L1287.44 1209.64 L1286.86 1209.64 L1286.27 1209.64 L1285.68 1209.64 L1285.1 1209.64 L1284.51 1209.64 L1283.92 1209.64 L1283.34 1209.64 L1282.75 1209.64 L1282.16 1209.64 L1281.58 1209.64 L1280.99 1209.64 L1280.4 1209.64 L1279.82 1209.64 L1279.23 1209.64 L1278.65 1209.64 L1278.06 1209.64 L1277.47 1209.64 L1276.89 1209.64 L1276.3 1209.64 L1275.71 1209.64 L1275.13 1209.64 L1274.54 1209.64 L1273.95 1209.64 L1273.37 1209.64 L1272.78 1209.64 L1272.19 1209.64 L1271.61 1209.64 L1271.02 1209.64 L1270.44 1209.64 L1269.85 1209.64 L1269.26 1209.64 L1268.68 1209.64 L1268.09 1209.64 L1267.5 1209.64 L1266.92 1209.64 L1266.33 1209.64 L1265.74 1209.64 L1265.16 1209.64 L1264.57 1209.64 L1263.98 1209.64 L1263.4 1209.64 L1262.81 1209.64 L1262.23 1209.64 L1261.64 1209.64 L1261.05 1209.64 L1260.47 1209.64 L1259.88 1209.64 L1259.29 1209.64 L1258.71 1209.64 L1258.12 1209.64 L1257.53 1209.64 L1256.95 1209.64 L1256.36 1209.64 L1255.78 1209.64 L1255.19 1209.64 L1254.6 1209.64 L1254.02 1209.64 L1253.43 1209.64 L1252.84 1209.64 L1252.26 1209.64 L1251.67 1209.64 L1251.08 1209.64 L1250.5 1209.64 L1249.91 1209.64 L1249.32 1209.64 L1248.74 1209.64 L1248.15 1209.64 L1247.57 1209.64 L1246.98 1209.64 L1246.39 1209.64 L1245.81 1209.64 L1245.22 1209.64 L1244.63 1209.64 L1244.05 1209.64 L1243.46 1209.64 L1242.87 1209.64 L1242.29 1209.64 L1241.7 1209.64 L1241.11 1209.64 L1240.53 1209.64 L1239.94 1209.64 L1239.36 1209.64 L1238.77 1209.64 L1238.18 1209.64 L1237.6 1209.64 L1237.01 1209.64 L1236.42 1209.64 L1235.84 1209.64 L1235.25 1209.64 L1234.66 1209.64 L1234.08 1209.64 L1233.49 1209.64 L1232.91 1209.64 L1232.32 1209.64 L1231.73 1209.64 L1231.15 1209.64 L1230.56 1209.64 L1229.97 1209.64 L1229.39 1209.64 L1228.8 1209.64 L1228.21 1209.64 L1227.63 1209.64 L1227.04 1209.64 L1226.45 1209.64 L1225.87 1209.64 L1225.28 1209.64 L1224.7 1209.64 L1224.11 1209.64 L1223.52 1209.64 L1222.94 1209.64 L1222.35 1209.64 L1221.76 1209.64 L1221.18 1209.64 L1220.59 1209.64 L1220 1209.64 L1219.42 1209.64 L1218.83 1209.64 L1218.24 1209.64 L1217.66 1209.64 L1217.07 1209.64 L1216.49 1209.64 L1215.9 1209.64 L1215.31 1209.64 L1214.73 1209.64 L1214.14 1209.64 L1213.55 1209.64 L1212.97 1209.64 L1212.38 1209.64 L1211.79 1209.64 L1211.21 1209.64 L1210.62 1209.64 L1210.03 1209.64 L1209.45 1209.64 L1208.86 1209.64 L1208.28 1209.64 L1207.69 1209.64 L1207.1 1209.64 L1206.52 1209.64 L1205.93 1209.64 L1205.34 1209.64 L1204.76 1209.64 L1204.17 1209.64 L1203.58 1209.64 L1203 1209.64 L1202.41 1209.64 L1201.83 1209.64 L1201.24 1209.64 L1200.65 1209.64 L1200.07 1209.64 L1199.48 1209.64 L1198.89 1209.64 L1198.31 1209.64 L1197.72 1209.64 L1197.13 1209.64 L1196.55 1209.64 L1195.96 1209.64 L1195.37 1209.64 L1194.79 1209.64 L1194.2 1209.64 L1193.62 1209.64 L1193.03 1209.64 L1192.44 1209.64 L1191.86 1209.64 L1191.27 1209.64 L1190.68 1209.64 L1190.1 1209.64 L1189.51 1209.64 L1188.92 1209.64 L1188.34 1209.64 L1187.75 1209.64 L1187.16 1209.64 L1186.58 1209.64 L1185.99 1209.64 L1185.41 1209.64 L1184.82 1209.64 L1184.23 1209.64 L1183.65 1209.64 L1183.06 1209.64 L1182.47 1209.64 L1181.89 1209.64 L1181.3 1209.64 L1180.71 1209.64 L1180.13 1209.64 L1179.54 1209.64 L1178.96 1209.64 L1178.37 1209.64 L1177.78 1209.64 L1177.2 1209.64 L1176.61 1209.64 L1176.02 1209.64 L1175.44 1209.64 L1174.85 1209.64 L1174.26 1209.64 L1173.68 1209.64 L1173.09 1209.64 L1172.5 1209.64 L1171.92 1209.64 L1171.33 1209.64 L1170.75 1209.64 L1170.16 1209.64 L1169.57 1209.64 L1168.99 1209.64 L1168.4 1209.64 L1167.81 1209.64 L1167.23 1209.64 L1166.64 1209.64 L1166.05 1209.64 L1165.47 1209.64 L1164.88 1209.64 L1164.29 1209.64 L1163.71 1209.64 L1163.12 1209.64 L1162.54 1209.64 L1161.95 1209.64 L1161.36 1209.64 L1160.78 1209.64 L1160.19 1209.64 L1159.6 1209.64 L1159.02 1209.64 L1158.43 1209.64 L1157.84 1209.64 L1157.26 1209.64 L1156.67 1209.64 L1156.09 1209.64 L1155.5 1209.64 L1154.91 1209.64 L1154.33 1209.64 L1153.74 1209.64 L1153.15 1209.64 L1152.57 1209.64 L1151.98 1209.64 L1151.39 1209.64 L1150.81 1209.64 L1150.22 1209.64 L1149.63 1209.64 L1149.05 1209.64 L1148.46 1209.64 L1147.88 1209.64 L1147.29 1209.64 L1146.7 1209.64 L1146.12 1209.64 L1145.53 1209.64 L1144.94 1209.64 L1144.36 1209.64 L1143.77 1209.64 L1143.18 1209.64 L1142.6 1209.64 L1142.01 1209.64 L1141.42 1209.64 L1140.84 1209.64 L1140.25 1209.64 L1139.67 1209.64 L1139.08 1209.64 L1138.49 1209.64 L1137.91 1209.64 L1137.32 1209.64 L1136.73 1209.64 L1136.15 1209.64 L1135.56 1209.64 L1134.97 1209.64 L1134.39 1209.64 L1133.8 1209.64 L1133.21 1209.64 L1132.63 1209.64 L1132.04 1209.64 L1131.46 1209.64 L1130.87 1209.64 L1130.28 1209.64 L1129.7 1209.64 L1129.11 1209.64 L1128.52 1209.64 L1127.94 1209.64 L1127.35 1209.64 L1126.76 1209.64 L1126.18 1209.64 L1125.59 1209.64 L1125.01 1209.64 L1124.42 1209.64 L1123.83 1209.64 L1123.25 1209.64 L1122.66 1209.64 L1122.07 1209.64 L1121.49 1209.64 L1120.9 1209.64 L1120.31 1209.64 L1119.73 1209.64 L1119.14 1209.64 L1118.55 1209.64 L1117.97 1209.64 L1117.38 1209.64 L1116.8 1209.64 L1116.21 1209.64 L1115.62 1209.64 L1115.04 1209.64 L1114.45 1209.64 L1113.86 1209.64 L1113.28 1209.64 L1112.69 1209.64 L1112.1 1209.64 L1111.52 1209.64 L1110.93 1209.64 L1110.34 1209.64 L1109.76 1209.64 L1109.17 1209.64 L1108.59 1209.64 L1108 1209.64 L1107.41 1209.64 L1106.83 1209.64 L1106.24 1209.64 L1105.65 1209.64 L1105.07 1209.64 L1104.48 1209.64 L1103.89 1209.64 L1103.31 1209.64 L1102.72 1209.64 L1102.14 1209.64 L1101.55 1209.64 L1100.96 1209.64 L1100.38 1209.64 L1099.79 1209.64 L1099.2 1209.64 L1098.62 1209.64 L1098.03 1209.64 L1097.44 1209.64 L1096.86 1209.64 L1096.27 1209.64 L1095.68 1209.64 L1095.1 1209.64 L1094.51 1209.64 L1093.93 1209.64 L1093.34 1209.64 L1092.75 1209.64 L1092.17 1209.64 L1091.58 1209.64 L1090.99 1209.64 L1090.41 1209.64 L1089.82 1209.64 L1089.23 1209.64 L1088.65 1209.64 L1088.06 1209.64 L1087.47 1209.64 L1086.89 1209.64 L1086.3 1209.64 L1085.72 1209.64 L1085.13 1209.64 L1084.54 1209.64 L1083.96 1209.64 L1083.37 1209.64 L1082.78 1209.64 L1082.2 1209.64 L1081.61 1209.64 L1081.02 1209.64 L1080.44 1209.64 L1079.85 1209.64 L1079.26 1209.64 L1078.68 1209.64 L1078.09 1209.64 L1077.51 1209.64 L1076.92 1209.64 L1076.33 1209.64 L1075.75 1209.64 L1075.16 1209.64 L1074.57 1209.64 L1073.99 1209.64 L1073.4 1209.64 L1072.81 1209.64 L1072.23 1209.64 L1071.64 1209.64 L1071.06 1209.64 L1070.47 1209.64 L1069.88 1209.64 L1069.3 1209.64 L1068.71 1209.64 L1068.12 1209.64 L1067.54 1209.64 L1066.95 1209.64 L1066.36 1209.64 L1065.78 1209.64 L1065.19 1209.64 L1064.6 1209.64 L1064.02 1209.64 L1063.43 1209.64 L1062.85 1209.64 L1062.26 1209.64 L1061.67 1209.64 L1061.09 1209.64 L1060.5 1209.64 L1059.91 1209.64 L1059.33 1209.64 L1058.74 1209.64 L1058.15 1209.64 L1057.57 1209.64 L1056.98 1209.64 L1056.39 1209.64 L1055.81 1209.64 L1055.22 1209.64 L1054.64 1209.64 L1054.05 1209.64 L1053.46 1209.64 L1052.88 1209.64 L1052.29 1209.64 L1051.7 1209.64 L1051.12 1209.64 L1050.53 1209.64 L1049.94 1209.64 L1049.36 1209.64 L1048.77 1209.64 L1048.19 1209.64 L1047.6 1209.64 L1047.01 1209.64 L1046.43 1209.64 L1045.84 1209.64 L1045.25 1209.64 L1044.67 1209.64 L1044.08 1209.64 L1043.49 1209.64 L1042.91 1209.64 L1042.32 1209.64 L1041.73 1209.64 L1041.15 1209.64 L1040.56 1209.64 L1039.98 1209.64 L1039.39 1209.64 L1038.8 1209.64 L1038.22 1209.64 L1037.63 1209.64 L1037.04 1209.64 L1036.46 1209.64 L1035.87 1209.64 L1035.28 1209.64 L1034.7 1209.64 L1034.11 1209.64 L1033.52 1209.64 L1032.94 1209.64 L1032.35 1209.64 L1031.77 1209.64 L1031.18 1209.64 L1030.59 1209.64 L1030.01 1209.64 L1029.42 1209.64 L1028.83 1209.64 L1028.25 1209.64 L1027.66 1209.64 L1027.07 1209.64 L1026.49 1209.64 L1025.9 1209.64 L1025.32 1209.64 L1024.73 1209.64 L1024.14 1209.64 L1023.56 1209.64 L1022.97 1209.64 L1022.38 1209.64 L1021.8 1209.64 L1021.21 1209.64 L1020.62 1209.64 L1020.04 1209.64 L1019.45 1209.64 L1018.86 1209.64 L1018.28 1209.64 L1017.69 1209.64 L1017.11 1209.64 L1016.52 1209.64 L1015.93 1209.64 L1015.35 1209.64 L1014.76 1209.64 L1014.17 1209.64 L1013.59 1209.64 L1013 1209.64 L1012.41 1209.64 L1011.83 1209.64 L1011.24 1209.64 L1010.65 1209.64 L1010.07 1209.64 L1009.48 1209.64 L1008.9 1209.64 L1008.31 1209.64 L1007.72 1209.64 L1007.14 1209.64 L1006.55 1209.64 L1005.96 1209.64 L1005.38 1209.64 L1004.79 1209.64 L1004.2 1209.64 L1003.62 1209.64 L1003.03 1209.64 L1002.44 1209.64 L1001.86 1209.64 L1001.27 1209.64 L1000.69 1209.64 L1000.1 1209.64 L999.513 1209.64 L998.926 1209.64 L998.34 1209.64 L997.754 1209.64 L997.167 1209.64 L996.581 1209.64 L995.994 1209.64 L995.408 1209.64 L994.822 1209.64 L994.235 1209.64 L993.649 1209.64 L993.062 1209.64 L992.476 1209.64 L991.889 1209.64 L991.303 1209.64 L990.717 1209.64 L990.13 1209.64 L989.544 1209.64 L988.957 1209.64 L988.371 1209.64 L987.785 1209.64 L987.198 1209.64 L986.612 1209.64 L986.025 1209.64  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip602)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.73 986.612,1209.73 987.198,1209.73 987.785,1209.73 988.371,1209.73 988.957,1209.73 989.544,1209.73 990.13,1209.73 990.717,1209.73 991.303,1209.73 991.889,1209.73 992.476,1209.73 993.062,1209.73 993.649,1209.73 994.235,1209.73 994.822,1209.73 995.408,1209.73 995.994,1209.73 996.581,1209.73 997.167,1209.73 997.754,1209.73 998.34,1209.73 998.926,1209.73 999.513,1209.73 1000.1,1209.73 1000.69,1209.73 1001.27,1209.73 1001.86,1209.73 1002.44,1209.73 1003.03,1209.73 1003.62,1209.73 1004.2,1209.73 1004.79,1209.73 1005.38,1209.73 1005.96,1209.73 1006.55,1209.73 1007.14,1209.73 1007.72,1209.73 1008.31,1209.73 1008.9,1209.73 1009.48,1209.73 1010.07,1209.73 1010.65,1209.73 1011.24,1209.73 1011.83,1209.73 1012.41,1209.73 1013,1209.73 1013.59,1209.73 1014.17,1209.73 1014.76,1209.73 1015.35,1209.73 1015.93,1209.73 1016.52,1209.73 1017.11,1209.73 1017.69,1209.73 1018.28,1209.73 1018.86,1209.73 1019.45,1209.73 1020.04,1209.73 1020.62,1209.73 1021.21,1209.73 1021.8,1209.73 1022.38,1209.73 1022.97,1209.73 1023.56,1209.73 1024.14,1209.73 1024.73,1209.73 1025.32,1209.73 1025.9,1209.73 1026.49,1209.73 1027.07,1209.73 1027.66,1209.73 1028.25,1209.73 1028.83,1209.73 1029.42,1209.73 1030.01,1209.73 1030.59,1209.73 1031.18,1209.73 1031.77,1209.73 1032.35,1209.73 1032.94,1209.73 1033.52,1209.73 1034.11,1209.73 1034.7,1209.73 1035.28,1209.73 1035.87,1209.73 1036.46,1209.73 1037.04,1209.73 1037.63,1209.73 1038.22,1209.73 1038.8,1209.73 1039.39,1209.73 1039.98,1209.73 1040.56,1209.73 1041.15,1209.73 1041.73,1209.73 1042.32,1209.73 1042.91,1209.73 1043.49,1209.73 1044.08,1209.73 1044.67,1209.73 1045.25,1209.73 1045.84,1209.73 1046.43,1209.73 1047.01,1209.73 1047.6,1209.73 1048.19,1209.73 1048.77,1209.73 1049.36,1209.73 1049.94,1209.73 1050.53,1209.73 1051.12,1209.73 1051.7,1209.73 1052.29,1209.73 1052.88,1209.73 1053.46,1209.73 1054.05,1209.73 1054.64,1209.73 1055.22,1209.73 1055.81,1209.73 1056.39,1209.73 1056.98,1209.73 1057.57,1209.73 1058.15,1209.73 1058.74,1209.73 1059.33,1209.73 1059.91,1209.73 1060.5,1209.73 1061.09,1209.73 1061.67,1209.73 1062.26,1209.73 1062.85,1209.73 1063.43,1209.73 1064.02,1209.73 1064.6,1209.73 1065.19,1209.73 1065.78,1209.73 1066.36,1209.73 1066.95,1209.73 1067.54,1209.73 1068.12,1209.73 1068.71,1209.73 1069.3,1209.73 1069.88,1209.73 1070.47,1209.73 1071.06,1209.73 1071.64,1209.73 1072.23,1209.73 1072.81,1209.73 1073.4,1209.73 1073.99,1209.73 1074.57,1209.73 1075.16,1209.73 1075.75,1209.73 1076.33,1209.73 1076.92,1209.73 1077.51,1209.73 1078.09,1209.73 1078.68,1209.73 1079.26,1209.73 1079.85,1209.73 1080.44,1209.73 1081.02,1209.73 1081.61,1209.73 1082.2,1209.73 1082.78,1209.73 1083.37,1209.73 1083.96,1209.73 1084.54,1209.73 1085.13,1209.73 1085.72,1209.73 1086.3,1209.73 1086.89,1209.73 1087.47,1209.73 1088.06,1209.73 1088.65,1209.73 1089.23,1209.73 1089.82,1209.73 1090.41,1209.73 1090.99,1209.73 1091.58,1209.73 1092.17,1209.73 1092.75,1209.73 1093.34,1209.73 1093.93,1209.73 1094.51,1209.73 1095.1,1209.73 1095.68,1209.73 1096.27,1209.73 1096.86,1209.73 1097.44,1209.73 1098.03,1209.73 1098.62,1209.73 1099.2,1209.73 1099.79,1209.73 1100.38,1209.73 1100.96,1209.73 1101.55,1209.73 1102.14,1209.73 1102.72,1209.73 1103.31,1209.73 1103.89,1209.73 1104.48,1209.73 1105.07,1209.73 1105.65,1209.73 1106.24,1209.73 1106.83,1209.73 1107.41,1209.73 1108,1209.73 1108.59,1209.73 1109.17,1209.73 1109.76,1209.73 1110.34,1209.73 1110.93,1209.73 1111.52,1209.73 1112.1,1209.73 1112.69,1209.73 1113.28,1209.73 1113.86,1209.73 1114.45,1209.73 1115.04,1209.73 1115.62,1209.73 1116.21,1209.73 1116.8,1209.73 1117.38,1209.73 1117.97,1209.73 1118.55,1209.73 1119.14,1209.73 1119.73,1209.73 1120.31,1209.73 1120.9,1209.73 1121.49,1209.73 1122.07,1209.73 1122.66,1209.73 1123.25,1209.73 1123.83,1209.73 1124.42,1209.73 1125.01,1209.73 1125.59,1209.73 1126.18,1209.73 1126.76,1209.73 1127.35,1209.73 1127.94,1209.73 1128.52,1209.73 1129.11,1209.73 1129.7,1209.73 1130.28,1209.73 1130.87,1209.73 1131.46,1209.73 1132.04,1209.73 1132.63,1209.73 1133.21,1209.73 1133.8,1209.73 1134.39,1209.73 1134.97,1209.73 1135.56,1209.73 1136.15,1209.73 1136.73,1209.73 1137.32,1209.73 1137.91,1209.73 1138.49,1209.73 1139.08,1209.73 1139.67,1209.73 1140.25,1209.73 1140.84,1209.73 1141.42,1209.73 1142.01,1209.73 1142.6,1209.73 1143.18,1209.73 1143.77,1209.73 1144.36,1209.73 1144.94,1209.73 1145.53,1209.73 1146.12,1209.73 1146.7,1209.73 1147.29,1209.73 1147.88,1209.73 1148.46,1209.73 1149.05,1209.73 1149.63,1209.73 1150.22,1209.73 1150.81,1209.73 1151.39,1209.73 1151.98,1209.73 1152.57,1209.73 1153.15,1209.73 1153.74,1209.73 1154.33,1209.73 1154.91,1209.73 1155.5,1209.73 1156.09,1209.73 1156.67,1209.73 1157.26,1209.73 1157.84,1209.73 1158.43,1209.73 1159.02,1209.73 1159.6,1209.73 1160.19,1209.73 1160.78,1209.73 1161.36,1209.73 1161.95,1209.73 1162.54,1209.73 1163.12,1209.73 1163.71,1209.73 1164.29,1209.73 1164.88,1209.73 1165.47,1209.73 1166.05,1209.73 1166.64,1209.73 1167.23,1209.73 1167.81,1209.73 1168.4,1209.73 1168.99,1209.73 1169.57,1209.73 1170.16,1209.73 1170.75,1209.73 1171.33,1209.73 1171.92,1209.73 1172.5,1209.73 1173.09,1209.73 1173.68,1209.73 1174.26,1209.73 1174.85,1209.73 1175.44,1209.73 1176.02,1209.73 1176.61,1209.73 1177.2,1209.73 1177.78,1209.73 1178.37,1209.73 1178.96,1209.73 1179.54,1209.73 1180.13,1209.73 1180.71,1209.73 1181.3,1209.73 1181.89,1209.73 1182.47,1209.73 1183.06,1209.73 1183.65,1209.73 1184.23,1209.73 1184.82,1209.73 1185.41,1209.73 1185.99,1209.73 1186.58,1209.73 1187.16,1209.73 1187.75,1209.73 1188.34,1209.73 1188.92,1209.73 1189.51,1209.73 1190.1,1209.73 1190.68,1209.73 1191.27,1209.73 1191.86,1209.73 1192.44,1209.73 1193.03,1209.73 1193.62,1209.73 1194.2,1209.73 1194.79,1209.73 1195.37,1209.73 1195.96,1209.73 1196.55,1209.73 1197.13,1209.73 1197.72,1209.73 1198.31,1209.73 1198.89,1209.73 1199.48,1209.73 1200.07,1209.73 1200.65,1209.73 1201.24,1209.73 1201.83,1209.73 1202.41,1209.73 1203,1209.73 1203.58,1209.73 1204.17,1209.73 1204.76,1209.73 1205.34,1209.73 1205.93,1209.73 1206.52,1209.73 1207.1,1209.73 1207.69,1209.73 1208.28,1209.73 1208.86,1209.73 1209.45,1209.73 1210.03,1209.73 1210.62,1209.73 1211.21,1209.73 1211.79,1209.73 1212.38,1209.73 1212.97,1209.73 1213.55,1209.73 1214.14,1209.73 1214.73,1209.73 1215.31,1209.73 1215.9,1209.73 1216.49,1209.73 1217.07,1209.73 1217.66,1209.73 1218.24,1209.73 1218.83,1209.73 1219.42,1209.73 1220,1209.73 1220.59,1209.73 1221.18,1209.73 1221.76,1209.73 1222.35,1209.73 1222.94,1209.73 1223.52,1209.73 1224.11,1209.73 1224.7,1209.73 1225.28,1209.73 1225.87,1209.73 1226.45,1209.73 1227.04,1209.73 1227.63,1209.73 1228.21,1209.73 1228.8,1209.73 1229.39,1209.73 1229.97,1209.73 1230.56,1209.73 1231.15,1209.73 1231.73,1209.73 1232.32,1209.73 1232.91,1209.73 1233.49,1209.73 1234.08,1209.73 1234.66,1209.73 1235.25,1209.73 1235.84,1209.73 1236.42,1209.73 1237.01,1209.73 1237.6,1209.73 1238.18,1209.73 1238.77,1209.73 1239.36,1209.73 1239.94,1209.73 1240.53,1209.73 1241.11,1209.73 1241.7,1209.73 1242.29,1209.73 1242.87,1209.73 1243.46,1209.73 1244.05,1209.73 1244.63,1209.73 1245.22,1209.73 1245.81,1209.73 1246.39,1209.73 1246.98,1209.73 1247.57,1209.73 1248.15,1209.73 1248.74,1209.73 1249.32,1209.73 1249.91,1209.73 1250.5,1209.73 1251.08,1209.73 1251.67,1209.73 1252.26,1209.73 1252.84,1209.73 1253.43,1209.73 1254.02,1209.73 1254.6,1209.73 1255.19,1209.73 1255.78,1209.73 1256.36,1209.73 1256.95,1209.73 1257.53,1209.73 1258.12,1209.73 1258.71,1209.73 1259.29,1209.73 1259.88,1209.73 1260.47,1209.73 1261.05,1209.73 1261.64,1209.73 1262.23,1209.73 1262.81,1209.73 1263.4,1209.73 1263.98,1209.73 1264.57,1209.73 1265.16,1209.73 1265.74,1209.73 1266.33,1209.73 1266.92,1209.73 1267.5,1209.73 1268.09,1209.73 1268.68,1209.73 1269.26,1209.73 1269.85,1209.73 1270.44,1209.73 1271.02,1209.73 1271.61,1209.73 1272.19,1209.73 1272.78,1209.73 1273.37,1209.73 1273.95,1209.73 1274.54,1209.73 1275.13,1209.73 1275.71,1209.73 1276.3,1209.73 1276.89,1209.73 1277.47,1209.73 1278.06,1209.73 1278.65,1209.73 1279.23,1209.73 1279.82,1209.73 1280.4,1209.73 1280.99,1209.73 1281.58,1209.73 1282.16,1209.73 1282.75,1209.73 1283.34,1209.73 1283.92,1209.73 1284.51,1209.73 1285.1,1209.73 1285.68,1209.73 1286.27,1209.73 1286.86,1209.73 1287.44,1209.73 1288.03,1209.73 1288.61,1209.73 1289.2,1209.73 1289.79,1209.73 1290.37,1209.73 1290.96,1209.73 1291.55,1209.73 1292.13,1209.73 1292.72,1209.73 1293.31,1209.73 1293.89,1209.73 1294.48,1209.73 1295.06,1209.73 1295.65,1209.73 1296.24,1209.73 1296.82,1209.73 1297.41,1209.73 1298,1209.73 1298.58,1209.73 1299.17,1209.73 1299.76,1209.73 1300.34,1209.73 1300.93,1209.73 1301.52,1209.73 1302.1,1209.73 1302.69,1209.73 1303.27,1209.73 1303.86,1209.73 1304.45,1209.73 1305.03,1209.73 1305.62,1209.73 1306.21,1209.73 1306.79,1209.73 1307.38,1209.73 1307.97,1209.73 1308.55,1209.73 1309.14,1209.73 1309.73,1209.73 1310.31,1209.73 1310.9,1209.73 1311.48,1209.73 1312.07,1209.73 1312.66,1209.73 1313.24,1209.73 1313.83,1209.73 1314.42,1209.73 1315,1209.73 1315.59,1209.73 1316.18,1209.73 1316.76,1209.73 1317.35,1209.73 1317.93,1209.73 1318.52,1209.73 1319.11,1209.73 1319.69,1209.73 1320.28,1209.73 1320.87,1209.73 1321.45,1209.73 1322.04,1209.73 1322.63,1209.73 1323.21,1209.73 1323.8,1209.73 1324.39,1209.73 1324.97,1209.73 1325.56,1209.73 1326.14,1209.73 1326.73,1209.73 1327.32,1209.73 1327.9,1209.73 1328.49,1209.73 1329.08,1209.73 1329.66,1209.73 1330.25,1209.73 1330.84,1209.73 1331.42,1209.73 1332.01,1209.73 1332.6,1209.73 1333.18,1209.73 1333.77,1209.73 1334.35,1209.73 1334.94,1209.73 1335.53,1209.73 1336.11,1209.73 1336.7,1209.73 1337.29,1209.73 1337.87,1209.73 1338.46,1209.73 1339.05,1209.73 1339.63,1209.73 1340.22,1209.73 1340.8,1209.73 1341.39,1209.73 1341.98,1209.73 1342.56,1209.73 1343.15,1209.73 1343.74,1209.73 1344.32,1209.73 1344.91,1209.73 1345.5,1209.73 1346.08,1209.73 1346.67,1209.73 1347.26,1209.73 1347.84,1209.73 1348.43,1209.73 1349.01,1209.73 1349.6,1209.73 1350.19,1209.73 1350.77,1209.73 1351.36,1209.73 1351.95,1209.73 1352.53,1209.73 1353.12,1209.73 1353.71,1209.73 1354.29,1209.73 1354.88,1209.73 1355.47,1209.73 1356.05,1209.73 1356.64,1209.73 1357.22,1209.73 1357.81,1209.73 1358.4,1209.73 1358.98,1209.73 1359.57,1209.73 1360.16,1209.73 1360.74,1209.73 1361.33,1209.73 1361.92,1209.73 1362.5,1209.73 1363.09,1209.73 1363.68,1209.73 1364.26,1209.73 1364.85,1209.73 1365.43,1209.73 1366.02,1209.73 1366.61,1209.73 1367.19,1209.73 1367.78,1209.73 1368.37,1209.73 1368.95,1209.73 1369.54,1209.73 1370.13,1209.73 1370.71,1209.73 1371.3,1209.73 1371.88,1209.73 1372.47,1209.73 1373.06,1209.73 1373.64,1209.73 1374.23,1209.73 1374.82,1209.73 1375.4,1209.73 1375.99,1209.73 1376.58,1209.73 1377.16,1209.73 1377.75,1209.73 1378.34,1209.73 1378.92,1209.73 1379.51,1209.73 1380.09,1209.73 1380.68,1209.73 1381.27,1209.73 1381.85,1209.73 1382.44,1209.73 1383.03,1209.73 1383.61,1209.73 1384.2,1209.73 1384.79,1209.73 1385.37,1209.73 1385.96,1209.73 1386.55,1209.73 1387.13,1209.73 1387.72,1209.73 1388.3,1209.73 1388.89,1209.73 1389.48,1209.73 1390.06,1209.73 1390.65,1209.73 1391.24,1209.73 1391.82,1209.73 1392.41,1209.73 1393,1209.73 1393.58,1209.73 1394.17,1209.73 1394.75,1209.73 1395.34,1209.73 1395.93,1209.73 1396.51,1209.73 1397.1,1209.73 1397.69,1209.73 1398.27,1209.73 1398.86,1209.73 1399.45,1209.73 1400.03,1209.73 1400.62,1209.73 1401.21,1209.73 1401.79,1209.73 1402.38,1209.73 1402.96,1209.73 1403.55,1209.73 1404.14,1209.73 1404.72,1209.73 1405.31,1209.73 1405.9,1209.73 1406.48,1209.73 1407.07,1209.73 1407.66,1209.73 1408.24,1209.73 1408.83,1209.73 1409.42,1209.73 1410,1209.73 1410.59,1209.73 1411.17,1209.73 1411.76,1209.73 1412.35,1209.73 1412.93,1209.73 1413.52,1209.73 1414.11,1209.73 1414.69,1209.73 1415.28,1209.73 1415.87,1209.73 1416.45,1209.73 1417.04,1209.73 1417.63,1209.73 1418.21,1209.73 1418.8,1209.73 1419.38,1209.73 1419.97,1209.73 1420.56,1209.73 1421.14,1209.73 1421.73,1209.73 1422.32,1209.73 1422.9,1209.73 1423.49,1209.73 1424.08,1209.73 1424.66,1209.73 1425.25,1209.73 1425.83,1209.73 1426.42,1209.73 1427.01,1209.73 1427.59,1209.73 1428.18,1209.73 1428.77,1209.73 1429.35,1209.73 1429.94,1209.73 1430.53,1209.73 1431.11,1209.73 1431.7,1209.73 1432.29,1209.73 1432.87,1209.73 1433.46,1209.73 1434.04,1209.73 1434.63,1209.73 1435.22,1209.73 1435.8,1209.73 1436.39,1209.73 1436.98,1209.73 1437.56,1209.73 1438.15,1209.73 1438.74,1209.73 1439.32,1209.73 1439.91,1209.73 1440.5,1209.73 1441.08,1209.73 1441.67,1209.73 1442.25,1209.73 1442.84,1209.73 1443.43,1209.73 1444.01,1209.73 1444.6,1209.73 1445.19,1209.73 1445.77,1209.73 1446.36,1209.73 1446.95,1209.73 1447.53,1209.73 1448.12,1209.73 1448.7,1209.73 1449.29,1209.73 1449.88,1209.73 1450.46,1209.73 1451.05,1209.73 1451.64,1209.73 1452.22,1209.73 1452.81,1209.73 1453.4,1209.73 1453.98,1209.73 1454.57,1209.73 1455.16,1209.73 1455.74,1209.73 1456.33,1209.73 1456.91,1209.73 1457.5,1209.73 1458.09,1209.73 1458.67,1209.73 1459.26,1209.73 1459.85,1209.73 1460.43,1209.73 1461.02,1209.73 1461.61,1209.73 1462.19,1209.73 1462.78,1209.73 1463.37,1209.73 1463.95,1209.73 1464.54,1209.73 1465.12,1209.73 1465.71,1209.73 1466.3,1209.73 1466.88,1209.73 1467.47,1209.73 1468.06,1209.73 1468.64,1209.73 1469.23,1209.73 1469.82,1209.73 1470.4,1209.73 1470.99,1209.73 1471.57,1209.73 1472.16,1209.73 1472.75,1209.73 1473.33,1209.73 1473.92,1209.73 1474.51,1209.73 1475.09,1209.73 1475.68,1209.73 1476.27,1209.73 1476.85,1209.73 1477.44,1209.73 1478.03,1209.73 1478.61,1209.73 1479.2,1209.73 1479.78,1209.73 1480.37,1209.73 1480.96,1209.73 1481.54,1209.73 1482.13,1209.73 1482.72,1209.73 1483.3,1209.73 1483.89,1209.73 1484.48,1209.73 1485.06,1209.73 1485.65,1209.73 1486.24,1209.73 1486.82,1209.73 1487.41,1209.73 1487.99,1209.73 1488.58,1209.73 1489.17,1209.73 1489.75,1209.73 1490.34,1209.73 1490.93,1209.73 1491.51,1209.73 1492.1,1209.73 1492.69,1209.73 1493.27,1209.73 1493.86,1209.73 1494.45,1209.73 1495.03,1209.73 1495.62,1209.73 1496.2,1209.73 1496.79,1209.73 1497.38,1209.73 1497.96,1209.73 1498.55,1209.73 1499.14,1209.73 1499.72,1209.73 1500.31,1209.73 1500.9,1209.73 1501.48,1209.73 1502.07,1209.73 1502.65,1209.73 1503.24,1209.73 1503.83,1209.73 1504.41,1209.73 1505,1209.73 1505.59,1209.73 1506.17,1209.73 1506.76,1209.73 1507.35,1209.73 1507.93,1209.73 1508.52,1209.73 1509.11,1209.73 1509.69,1209.73 1510.28,1209.73 1510.86,1209.73 1511.45,1209.73 1512.04,1209.73 1512.62,1209.73 1513.21,1209.73 1513.8,1209.73 1514.38,1209.73 1514.97,1209.73 1515.56,1209.73 1516.14,1209.73 1516.73,1209.73 1517.32,1209.73 1517.9,1209.73 1518.49,1209.73 1519.07,1209.73 1519.66,1209.73 1520.25,1209.73 1520.83,1209.73 1521.42,1209.73 1522.01,1209.73 1522.59,1209.73 1523.18,1209.73 1523.77,1209.73 1524.35,1209.73 1524.94,1209.73 1525.52,1209.73 1526.11,1209.73 1526.7,1209.73 1527.28,1209.73 1527.87,1209.73 1528.46,1209.73 1529.04,1209.73 1529.63,1209.73 1530.22,1209.73 1530.8,1209.73 1531.39,1209.73 1531.98,1209.73 1532.56,1209.73 1533.15,1209.73 1533.73,1209.73 1534.32,1209.73 1534.91,1209.73 1535.49,1209.73 1536.08,1209.73 1536.67,1209.73 1537.25,1209.73 1537.84,1209.73 1538.43,1209.73 1539.01,1209.73 1539.6,1209.73 1540.19,1209.73 1540.77,1209.73 1541.36,1209.73 1541.94,1209.73 1542.53,1209.73 1543.12,1209.73 1543.7,1209.73 1544.29,1209.73 1544.88,1209.73 1545.46,1209.73 1546.05,1209.73 1546.64,1209.73 1547.22,1209.73 1547.81,1209.73 1548.4,1209.73 1548.98,1209.73 1549.57,1209.73 1550.15,1209.73 1550.74,1209.73 1551.33,1209.73 1551.91,1209.73 1552.5,1209.73 1553.09,1209.73 1553.67,1209.73 1554.26,1209.73 1554.85,1209.73 1555.43,1209.73 1556.02,1209.73 1556.6,1209.73 1557.19,1209.73 1557.78,1209.73 1558.36,1209.73 1558.95,1209.73 1559.54,1209.73 1560.12,1209.73 1560.71,1209.73 1561.3,1209.73 1561.88,1209.73 1562.47,1209.73 1563.06,1209.73 1563.64,1209.73 1564.23,1209.73 1564.81,1209.73 1565.4,1209.73 1565.99,1209.73 1566.57,1209.73 1567.16,1209.73 1567.75,1209.73 1568.33,1209.73 1568.92,1209.73 1569.51,1209.73 1570.09,1209.73 1570.68,1209.73 1571.27,1209.73 1571.85,1209.73 1572.44,1209.73 1573.02,1209.73 1573.61,1209.73 1574.2,1209.73 1574.78,1209.73 1575.37,1209.73 1575.96,1209.73 1576.54,1209.73 1577.13,1209.73 1577.72,1209.73 1578.3,1209.73 1578.89,1209.73 1579.47,1209.73 1580.06,1209.73 1580.65,1209.73 1581.23,1209.73 1581.82,1209.73 1582.41,1209.73 1582.99,1209.73 1583.58,1209.73 1584.17,1209.73 1584.75,1209.73 1585.34,1209.73 1585.93,1209.73 1586.51,1209.73 1587.1,1209.73 1587.68,1209.73 1588.27,1209.73 1588.86,1209.73 1589.44,1209.73 1590.03,1209.73 1590.62,1209.73 1591.2,1209.73 1591.79,1209.73 1592.38,1209.73 1592.96,1209.73 1593.55,1209.73 1594.14,1209.73 1594.72,1209.73 1595.31,1209.73 1595.89,1209.73 1596.48,1209.73 1597.07,1209.73 1597.65,1209.73 1598.24,1209.73 1598.83,1209.73 1599.41,1209.73 1600,1209.73 1600.59,1209.73 1601.17,1209.73 1601.76,1209.73 1602.34,1209.73 1602.93,1209.73 1603.52,1209.73 1604.1,1209.73 1604.69,1209.73 1605.28,1209.73 1605.86,1209.73 1606.45,1209.73 1607.04,1209.73 1607.62,1209.73 1608.21,1209.73 1608.8,1209.73 1609.38,1209.73 1609.97,1209.73 1610.55,1209.73 1611.14,1209.73 1611.73,1209.73 1612.31,1209.73 1612.9,1209.73 1613.49,1209.73 1614.07,1209.73 1614.66,1209.73 1615.25,1209.73 1615.83,1209.73 1616.42,1209.73 1617.01,1209.73 1617.59,1209.73 1618.18,1209.73 1618.76,1209.73 1619.35,1209.73 1619.94,1209.73 1620.52,1209.73 1621.11,1209.73 1621.7,1209.73 1622.28,1209.73 1622.87,1209.73 1623.46,1209.73 1624.04,1209.73 1624.63,1209.73 1625.22,1209.73 1625.8,1209.73 1626.39,1209.73 1626.97,1209.73 1627.56,1209.73 1628.15,1209.73 1628.73,1209.73 1629.32,1209.73 1629.91,1209.73 1630.49,1209.73 1631.08,1209.73 1631.67,1209.73 1632.25,1209.73 1632.84,1209.73 1633.42,1209.73 1634.01,1209.73 1634.6,1209.73 1635.18,1209.73 1635.77,1209.73 1636.36,1209.73 1636.94,1209.73 1637.53,1209.73 1638.12,1209.73 1638.7,1209.73 1639.29,1209.73 1639.88,1209.73 1640.46,1209.73 1641.05,1209.73 1641.63,1209.73 1642.22,1209.73 1642.81,1209.73 1643.39,1209.73 1643.98,1209.73 1644.57,1209.73 1645.15,1209.73 1645.74,1209.73 1646.33,1209.73 1646.91,1209.73 1647.5,1209.73 1648.09,1209.73 1648.67,1209.73 1649.26,1209.73 1649.84,1209.73 1650.43,1209.73 1651.02,1209.73 1651.6,1209.73 1652.19,1209.73 1652.78,1209.73 1653.36,1209.73 1653.95,1209.73 1654.54,1209.73 1655.12,1209.73 1655.71,1209.73 1656.29,1209.73 1656.88,1209.73 1657.47,1209.73 1658.05,1209.73 1658.64,1209.73 1659.23,1209.73 1659.81,1209.73 1660.4,1209.73 1660.99,1209.73 1661.57,1209.73 1662.16,1209.73 1662.75,1209.73 1663.33,1209.73 1663.92,1209.73 1664.5,1209.73 1665.09,1209.73 1665.68,1209.73 1666.26,1209.73 1666.85,1209.73 1667.44,1209.73 1668.02,1209.73 1668.61,1209.73 1669.2,1209.73 1669.78,1209.73 1670.37,1209.73 1670.96,1209.73 1671.54,1209.73 1672.13,1209.73 1672.71,1209.73 1673.3,1209.73 1673.89,1209.73 1674.47,1209.73 1675.06,1209.73 1675.65,1209.73 1676.23,1209.73 1676.82,1209.73 1677.41,1209.73 1677.99,1209.73 1678.58,1209.73 1679.17,1209.73 1679.75,1209.73 1680.34,1209.73 1680.92,1209.73 1681.51,1209.73 1682.1,1209.73 1682.68,1209.73 1683.27,1209.73 1683.86,1209.73 1684.44,1209.73 1685.03,1209.73 1685.62,1209.73 1686.2,1209.73 1686.79,1209.73 1687.37,1209.73 1687.96,1209.73 1688.55,1209.73 1689.13,1209.73 1689.72,1209.73 1690.31,1209.73 1690.89,1209.73 1691.48,1209.73 1692.07,1209.73 1692.65,1209.73 1693.24,1209.73 1693.83,1209.73 1694.41,1209.73 1695,1209.73 1695.58,1209.73 1696.17,1209.73 1696.76,1209.73 1697.34,1209.73 1697.93,1209.73 1698.52,1209.73 1699.1,1209.73 1699.69,1209.73 1700.28,1209.73 1700.86,1209.73 1701.45,1209.73 1702.04,1209.73 1702.62,1209.73 1703.21,1209.73 1703.79,1209.73 1704.38,1209.73 1704.97,1209.73 1705.55,1209.73 1706.14,1209.73 1706.73,1209.73 1707.31,1209.73 1707.9,1209.73 1708.49,1209.73 1709.07,1209.73 1709.66,1209.73 1710.24,1209.73 1710.83,1209.73 1711.42,1209.73 1712,1209.73 1712.59,1209.73 1713.18,1209.73 1713.76,1209.73 1714.35,1209.73 1714.94,1209.73 1715.52,1209.73 1716.11,1209.73 1716.7,1209.73 1717.28,1209.73 1717.87,1209.73 1718.45,1209.73 1719.04,1209.73 1719.63,1209.73 1720.21,1209.73 1720.8,1209.73 1721.39,1209.73 1721.97,1209.73 1722.56,1209.73 1723.15,1209.73 1723.73,1209.73 1724.32,1209.73 1724.91,1209.73 1725.49,1209.73 1726.08,1209.73 1726.66,1209.73 1727.25,1209.73 1727.84,1209.73 1728.42,1209.73 1729.01,1209.73 1729.6,1209.73 1730.18,1209.73 1730.77,1209.73 1731.36,1209.73 1731.94,1209.73 1732.53,1209.73 1733.11,1209.73 1733.7,1209.73 1734.29,1209.73 1734.87,1209.73 1735.46,1209.73 1736.05,1209.73 1736.63,1209.73 1737.22,1209.73 1737.81,1209.73 1738.39,1209.73 1738.98,1209.73 1739.57,1209.73 1740.15,1209.73 1740.74,1209.73 1741.32,1209.73 1741.91,1209.73 1742.5,1209.73 1743.08,1209.73 1743.67,1209.73 1744.26,1209.73 1744.84,1209.73 1745.43,1209.73 1746.02,1209.73 1746.6,1209.73 1747.19,1209.73 1747.78,1209.73 1748.36,1209.73 1748.95,1209.73 1749.53,1209.73 1750.12,1209.73 1750.71,1209.73 1751.29,1209.73 1751.88,1209.73 1752.47,1209.73 1753.05,1209.73 1753.64,1209.73 1754.23,1209.73 1754.81,1209.73 1755.4,1209.73 1755.99,1209.73 1756.57,1209.73 1757.16,1209.73 1757.74,1209.73 1758.33,1209.73 1758.92,1209.73 1759.5,1209.73 1760.09,1209.73 1760.68,1209.73 1761.26,1209.73 1761.85,1209.73 1762.44,1209.73 1763.02,1209.73 1763.61,1209.73 1764.19,1209.73 1764.78,1209.73 1765.37,1209.73 1765.95,1209.73 1766.54,1209.73 1767.13,1209.73 1767.71,1209.73 1768.3,1209.73 1768.89,1209.73 1769.47,1209.73 1770.06,1209.73 1770.65,1209.73 1771.23,1209.73 1771.82,1209.73 1772.4,1209.73 1772.99,1209.73 1773.58,1209.73 1774.16,1209.73 1774.75,1209.73 1775.34,1209.73 1775.92,1209.73 1776.51,1209.73 1777.1,1209.73 1777.68,1209.73 1778.27,1209.73 1778.86,1209.73 1779.44,1209.73 1780.03,1209.73 1780.61,1209.73 1781.2,1209.73 1781.79,1209.73 1782.37,1209.73 1782.96,1209.73 1783.55,1209.73 1784.13,1209.73 1784.72,1209.73 1785.31,1209.73 1785.89,1209.73 1786.48,1209.73 1787.06,1209.73 1787.65,1209.73 1788.24,1209.73 1788.82,1209.73 1789.41,1209.73 1790,1209.73 1790.58,1209.73 1791.17,1209.73 1791.76,1209.73 1792.34,1209.73 1792.93,1209.73 1793.52,1209.73 1794.1,1209.73 1794.69,1209.73 1795.27,1209.73 1795.86,1209.73 1796.45,1209.73 1797.03,1209.73 1797.62,1209.73 1798.21,1209.73 1798.79,1209.73 1799.38,1209.73 1799.97,1209.73 1800.55,1209.73 1801.14,1209.73 1801.73,1209.73 1802.31,1209.73 1802.9,1209.73 1803.48,1209.73 1804.07,1209.73 1804.66,1209.73 1805.24,1209.73 1805.83,1209.73 1806.42,1209.73 1807,1209.73 1807.59,1209.73 1808.18,1209.73 1808.76,1209.73 1809.35,1209.73 1809.94,1209.73 1810.52,1209.73 1811.11,1209.73 1811.69,1209.73 1812.28,1209.73 1812.87,1209.73 1813.45,1209.73 1814.04,1209.73 1814.63,1209.73 1815.21,1209.73 1815.8,1209.73 1816.39,1209.73 1816.97,1209.73 1817.56,1209.73 1818.14,1209.73 1818.73,1209.73 1819.32,1209.73 1819.9,1209.73 1820.49,1209.73 1821.08,1209.73 1821.66,1209.73 1822.25,1209.73 1822.84,1209.73 1823.42,1209.73 1824.01,1209.73 1824.6,1209.73 1825.18,1209.73 1825.77,1209.73 1826.35,1209.73 1826.94,1209.73 1827.53,1209.73 1828.11,1209.73 1828.7,1209.73 1829.29,1209.73 1829.87,1209.73 1830.46,1209.73 1831.05,1209.73 1831.63,1209.73 1832.22,1209.73 1832.81,1209.73 1833.39,1209.73 1833.98,1209.73 1834.56,1209.73 1835.15,1209.73 1835.74,1209.73 1836.32,1209.73 1836.91,1209.73 1837.5,1209.73 1838.08,1209.73 1838.67,1209.73 1839.26,1209.73 1839.84,1209.73 1840.43,1209.73 1841.01,1209.73 1841.6,1209.73 1842.19,1209.73 1842.77,1209.73 1843.36,1209.73 1843.95,1209.73 1844.53,1209.73 1845.12,1209.73 1845.71,1209.73 1846.29,1209.73 1846.88,1209.73 1847.47,1209.73 1848.05,1209.73 1848.64,1209.73 1849.22,1209.73 1849.81,1209.73 1850.4,1209.73 1850.98,1209.73 1851.57,1209.73 1852.16,1209.73 1852.74,1209.73 1853.33,1209.73 1853.92,1209.73 1854.5,1209.73 1855.09,1209.73 1855.68,1209.73 1856.26,1209.73 1856.85,1209.73 1857.43,1209.73 1858.02,1209.73 1858.61,1209.73 1859.19,1209.73 1859.78,1209.73 1860.37,1209.73 1860.95,1209.73 1861.54,1209.73 1862.13,1209.73 1862.71,1209.73 1863.3,1209.73 1863.88,1209.73 1864.47,1209.73 1865.06,1209.73 1865.64,1209.73 1866.23,1209.73 1866.82,1209.73 1867.4,1209.73 1867.99,1209.73 1868.58,1209.73 1869.16,1209.73 1869.75,1209.73 1870.34,1209.73 1870.92,1209.73 1871.51,1209.73 1872.09,1209.73 1872.68,1209.73 1873.27,1209.73 1873.85,1209.73 1874.44,1209.73 1875.03,1209.73 1875.61,1209.73 1876.2,1209.73 1876.79,1209.73 1877.37,1209.73 1877.96,1209.73 1878.55,1209.73 1879.13,1209.73 1879.72,1209.73 1880.3,1209.73 1880.89,1209.73 1881.48,1209.73 1882.06,1209.73 1882.65,1209.73 1883.24,1209.73 1883.82,1209.73 1884.41,1209.73 1885,1209.73 1885.58,1209.73 1886.17,1209.73 1886.76,1209.73 1887.34,1209.73 1887.93,1209.73 1888.51,1209.73 1889.1,1209.73 1889.69,1209.73 1890.27,1209.73 1890.86,1209.73 1891.45,1209.73 1892.03,1209.73 1892.62,1209.73 1893.21,1209.73 1893.79,1209.73 1894.38,1209.73 1894.96,1209.73 1895.55,1209.73 1896.14,1209.73 1896.72,1209.73 1897.31,1209.73 1897.9,1209.73 1898.48,1209.73 1899.07,1209.73 1899.66,1209.73 1900.24,1209.73 1900.83,1209.73 1901.42,1209.73 1902,1209.73 1902.59,1209.73 1903.17,1209.73 1903.76,1209.73 1904.35,1209.73 1904.93,1209.73 1905.52,1209.73 1906.11,1209.73 1906.69,1209.73 1907.28,1209.73 1907.87,1209.73 1908.45,1209.73 1909.04,1209.73 1909.63,1209.73 1910.21,1209.73 1910.8,1209.73 1911.38,1209.73 1911.97,1209.73 1912.56,1209.73 1913.14,1209.73 1913.73,1209.73 1914.32,1209.73 1914.9,1209.73 1915.49,1209.73 1916.08,1209.73 1916.66,1209.73 1917.25,1209.73 1917.83,1209.73 1918.42,1209.73 1919.01,1209.73 1919.59,1209.73 1920.18,1209.73 1920.77,1209.73 1921.35,1209.73 1921.94,1209.73 1922.53,1209.73 1923.11,1209.73 1923.7,1209.73 1924.29,1209.73 1924.87,1209.73 1925.46,1209.73 1926.04,1209.73 1926.63,1209.73 1927.22,1209.73 1927.8,1209.73 1928.39,1209.73 1928.98,1209.73 1929.56,1209.73 1930.15,1209.73 1930.74,1209.73 1931.32,1209.73 1931.91,1209.73 1932.5,1209.73 1933.08,1209.73 1933.67,1209.73 1934.25,1209.73 1934.84,1209.73 1935.43,1209.73 1936.01,1209.73 1936.6,1209.73 1937.19,1209.73 1937.77,1209.73 1938.36,1209.73 1938.95,1209.73 1939.53,1209.73 1940.12,1209.73 1940.71,1209.73 1941.29,1209.73 1941.88,1209.73 1942.46,1209.73 1943.05,1209.73 1943.64,1209.73 1944.22,1209.73 1944.81,1209.73 1945.4,1209.73 1945.98,1209.73 1946.57,1209.73 1947.16,1209.73 1947.74,1209.73 1948.33,1209.73 1948.91,1209.73 1949.5,1209.73 1950.09,1209.73 1950.67,1209.73 1951.26,1209.73 1951.85,1209.73 1952.43,1209.73 1953.02,1209.73 1953.61,1209.73 1954.19,1209.73 1954.78,1209.73 1955.37,1209.73 1955.95,1209.73 1956.54,1209.73 1957.12,1209.73 1957.71,1209.73 1958.3,1209.73 1958.88,1209.73 1959.47,1209.73 1960.06,1209.73 1960.64,1209.73 1961.23,1209.73 1961.82,1209.73 1962.4,1209.73 1962.99,1209.73 1963.58,1209.73 1964.16,1209.73 1964.75,1209.73 1965.33,1209.73 1965.92,1209.73 1966.51,1209.73 1967.09,1209.73 1967.68,1209.73 1968.27,1209.73 1968.85,1209.73 1969.44,1209.73 1970.03,1209.73 1970.61,1209.73 1971.2,1209.73 1971.78,1209.73 1972.37,1209.73 1972.96,1209.73 1973.54,1209.73 1974.13,1209.73 1974.72,1209.73 1975.3,1209.73 1975.89,1209.73 1976.48,1209.73 1977.06,1209.73 1977.65,1209.73 1978.24,1209.73 1978.82,1209.73 1979.41,1209.73 1979.99,1209.73 1980.58,1209.73 1981.17,1209.73 1981.75,1209.73 1982.34,1209.73 1982.93,1209.73 1983.51,1209.73 1984.1,1209.73 1984.69,1209.73 1985.27,1209.73 1985.86,1209.73 1986.45,1209.73 1987.03,1209.73 1987.62,1209.73 1988.2,1209.73 1988.79,1209.73 1989.38,1209.73 1989.96,1209.73 1990.55,1209.73 1991.14,1209.73 1991.72,1209.73 1992.31,1209.73 1992.9,1209.73 1993.48,1209.73 1994.07,1209.73 1994.65,1209.73 1995.24,1209.73 1995.83,1209.73 1996.41,1209.73 1997,1209.73 1997.59,1209.73 1998.17,1209.73 1998.76,1209.73 1999.35,1209.73 1999.93,1209.73 2000.52,1209.73 2001.11,1209.73 2001.69,1209.73 2002.28,1209.73 2002.86,1209.73 2003.45,1209.73 2004.04,1209.73 2004.62,1209.73 2005.21,1209.73 2005.8,1209.73 2006.38,1209.73 2006.97,1209.73 2007.56,1209.73 2008.14,1209.73 2008.73,1209.73 2009.32,1209.73 2009.9,1209.73 2010.49,1209.73 2011.07,1209.73 2011.66,1209.73 2012.25,1209.73 2012.83,1209.73 2013.42,1209.73 2014.01,1209.73 2014.59,1209.73 2015.18,1209.73 2015.77,1209.73 2016.35,1209.73 2016.94,1209.73 2017.53,1209.73 2018.11,1209.73 2018.7,1209.73 2019.28,1209.73 2019.87,1209.73 2020.46,1209.73 2021.04,1209.73 2021.63,1209.73 2022.22,1209.73 2022.8,1209.73 2023.39,1209.73 2023.98,1209.73 2024.56,1209.73 2025.15,1209.73 2025.73,1209.73 2026.32,1209.73 2026.91,1209.73 2027.49,1209.73 2028.08,1209.73 2028.67,1209.73 2029.25,1209.73 2029.84,1209.73 2030.43,1209.73 2031.01,1209.73 2031.6,1209.73 2032.19,1209.73 2032.77,1209.73 2033.36,1209.73 2033.94,1209.73 2034.53,1209.73 2035.12,1209.73 2035.7,1209.73 2036.29,1209.73 2036.88,1209.73 2037.46,1209.73 2038.05,1209.73 2038.64,1209.73 2039.22,1209.73 2039.81,1209.73 2040.4,1209.73 2040.98,1209.73 2041.57,1209.73 2042.15,1209.73 2042.74,1209.73 2043.33,1209.73 2043.91,1209.73 2044.5,1209.73 2045.09,1209.73 2045.67,1209.73 2046.26,1209.73 2046.85,1209.73 2047.43,1209.73 2048.02,1209.73 2048.6,1209.73 2049.19,1209.73 2049.78,1209.73 2050.36,1209.73 2050.95,1209.73 2051.54,1209.73 2052.12,1209.73 2052.71,1209.73 2053.3,1209.73 2053.88,1209.73 2054.47,1209.73 2055.06,1209.73 2055.64,1209.73 2056.23,1209.73 2056.81,1209.73 2057.4,1209.73 2057.99,1209.73 2058.57,1209.73 2059.16,1209.73 2059.75,1209.73 2060.33,1209.73 2060.92,1209.73 2061.51,1209.73 2062.09,1209.73 2062.68,1209.73 2063.27,1209.73 2063.85,1209.73 2064.44,1209.73 2065.02,1209.73 2065.61,1209.73 2066.2,1209.73 2066.78,1209.73 2067.37,1209.73 2067.96,1209.73 2068.54,1209.73 2069.13,1209.73 2069.72,1209.73 2070.3,1209.73 2070.89,1209.73 2071.48,1209.73 2072.06,1209.73 2072.65,1209.73 2073.23,1209.73 2073.82,1209.73 2074.41,1209.73 2074.99,1209.73 2075.58,1209.73 2076.17,1209.73 2076.75,1209.73 2077.34,1209.73 2077.93,1209.73 2078.51,1209.73 2079.1,1209.73 2079.68,1209.73 2080.27,1209.73 2080.86,1209.73 2081.44,1209.73 2082.03,1209.73 2082.62,1209.73 2083.2,1209.73 2083.79,1209.73 2084.38,1209.73 2084.96,1209.73 2085.55,1209.73 2086.14,1209.73 2086.72,1209.73 2087.31,1209.73 2087.89,1209.73 2088.48,1209.73 2089.07,1209.73 2089.65,1209.73 2090.24,1209.73 2090.83,1209.73 2091.41,1209.73 2092,1209.73 2092.59,1209.73 2093.17,1209.73 2093.76,1209.73 2094.35,1209.73 2094.93,1209.73 2095.52,1209.73 2096.1,1209.73 2096.69,1209.73 2097.28,1209.73 2097.86,1209.73 2098.45,1209.73 2099.04,1209.73 2099.62,1209.73 2100.21,1209.73 2100.8,1209.73 2101.38,1209.73 2101.97,1209.73 2102.55,1209.73 2103.14,1209.73 2103.73,1209.73 2104.31,1209.73 2104.9,1209.73 2105.49,1209.73 2106.07,1209.73 2106.66,1209.73 2107.25,1209.73 2107.83,1209.73 2108.42,1209.73 2109.01,1209.73 2109.59,1209.73 2110.18,1209.73 2110.76,1209.73 2111.35,1209.73 2111.94,1209.73 2112.52,1209.73 2113.11,1209.73 2113.7,1209.73 2114.28,1209.73 2114.87,1209.73 2115.46,1209.73 2116.04,1209.73 2116.63,1209.73 2117.22,1209.73 2117.8,1209.73 2118.39,1209.73 2118.97,1209.73 2119.56,1209.73 2120.15,1209.73 2120.73,1209.73 2121.32,1209.73 2121.91,1209.73 2122.49,1209.73 2123.08,1209.73 2123.67,1209.73 2124.25,1209.73 2124.84,1209.73 2125.42,1209.73 2126.01,1209.73 2126.6,1209.73 2127.18,1209.73 2127.77,1209.73 2128.36,1209.73 2128.94,1209.73 2129.53,1209.73 2130.12,1209.73 2130.7,1209.73 2131.29,1209.73 2131.88,1209.73 2132.46,1209.73 2133.05,1209.73 2133.63,1209.73 2134.22,1209.73 2134.81,1209.73 2135.39,1209.73 2135.98,1209.73 2136.57,1209.73 2137.15,1209.73 2137.74,1209.73 2138.33,1209.73 2138.91,1209.73 2139.5,1209.73 2140.09,1209.73 2140.67,1209.73 2141.26,1209.73 2141.84,1209.73 2142.43,1209.73 2143.02,1209.73 2143.6,1209.73 2144.19,1209.73 2144.78,1209.73 2145.36,1209.73 2145.95,1209.73 2146.54,1209.73 2147.12,1209.73 2147.71,1209.73 2148.3,1209.73 2148.88,1209.73 2149.47,1209.73 2150.05,1209.73 2150.64,1209.73 2151.23,1209.73 2151.81,1209.73 2152.4,1209.73 2152.99,1209.73 2153.57,1209.73 2154.16,1209.73 2154.75,1209.73 2155.33,1209.73 2155.92,1209.73 2156.5,1209.73 2157.09,1209.73 2157.68,1209.73 2158.26,1209.73 \"/>\n<polyline clip-path=\"url(#clip602)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.72,1191.18 1399.95,899.083 \"/>\n<polyline clip-path=\"url(#clip602)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1227.78 985.439,1191.18 2158.26,1191.18 2158.26,1227.78 985.439,1227.78 \"/>\n<path clip-path=\"url(#clip600)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip600)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip600)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip600)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip600)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip600)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip603\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip603)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip603)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip603)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip603)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip603)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip603)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip603)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip603)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip603)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip603)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip600)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip600)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip600)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip600)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip603)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-8354.17 166.029,-9052.18 166.588,-9682.55 167.147,-9226 167.706,-9780.96 168.266,-10278.2 168.825,-10721.4 169.384,-10306.8 169.943,-10676.3 170.503,-10985 171.062,-10635.9 171.621,-9763.31 172.18,-10040.2 172.74,-10287.2 173.299,-10479.4 173.858,-10649.2 174.417,-10798.9 174.977,-10920 175.536,-11014.4 176.095,-11069.4 176.655,-11116.9 177.214,-11133.1 177.773,-11130.7 178.332,-11109.4 178.892,-11082 179.451,-11027 180.01,-10734.6 180.569,-10661.9 181.129,-10568.6 181.688,-10281.4 182.247,-9823.69 182.806,-9380.21 183.366,-9123.62 183.925,-9041.19 184.484,-8800.58 185.043,-8689.85 185.603,-8441.93 186.162,-8201.52 186.721,-7966.53 187.28,-7642.24 187.84,-7506.44 188.399,-7184.77 188.958,-7064.04 189.517,-6938.7 190.077,-6806.61 190.636,-6667.75 191.195,-6465.76 191.754,-6266.33 192.314,-5995.53 192.873,-5747.42 193.432,-5506.42 193.991,-5404.25 194.551,-5239.6 195.11,-5017.69 195.669,-4911.01 196.228,-4750.65 196.788,-4652.8 197.347,-4546.7 197.906,-4447.85 198.465,-4246.64 199.025,-4103.84 199.584,-3953.29 200.143,-3764.45 200.702,-3630.9 201.262,-3545.2 201.821,-3420.48 202.38,-3252.36 202.939,-3090.07 203.499,-2970.35 204.058,-2814.4 204.617,-2737.42 205.176,-2664.07 205.736,-2587.51 206.295,-2441.58 206.854,-2340.47 207.413,-2271.38 207.973,-2134.86 208.532,-2008.13 209.091,-1879.31 209.65,-1729.01 210.21,-1673 210.769,-1615.89 211.328,-1531.99 211.887,-1418.8 212.447,-1307.99 213.006,-1203.11 213.565,-1047.8 214.124,-974.761 214.684,-884.116 215.243,-793.63 215.802,-681.421 216.361,-600.516 216.921,-544.676 217.48,-514.744 218.039,-485.74 218.598,-430.102 219.158,-374.708 219.717,-347.443 220.276,-295.109 220.835,-220.144 221.395,-198.031 221.954,-148.499 222.513,-59.9595 223.072,-16.3317 223.632,3.96646 224.191,49.5304 224.75,130.748 225.309,170.518 225.869,206.525 226.428,283.084 226.987,335.376 227.546,372.501 228.106,359.12 228.665,372.354 229.224,383.065 229.783,412.297 230.343,441.205 230.902,473.173 231.461,485.246 232.02,551.278 232.58,616.225 233.139,639.362 233.698,643.607 234.257,647.493 234.817,669.561 235.376,726.585 235.935,781.406 236.494,814.483 237.054,866.828 237.613,859.866 238.172,857.636 238.731,850.191 239.291,866.682 239.85,877.308 240.409,913.291 240.968,926.099 241.528,919.084 242.087,930.905 242.646,962.241 243.205,989.062 243.765,979.281 244.324,990.311 244.883,997.179 245.442,1024.27 246.002,1015.16 246.561,1058.2 247.12,1066.89 247.679,1069.98 248.239,1089.96 248.798,1110.23 249.357,1096.14 249.916,1084.88 250.476,1107.96 251.035,1093.91 251.594,1080.7 252.153,1069.13 252.713,1042.39 253.272,1067.78 253.831,1058.98 254.39,1031.5 254.95,1074.21 255.509,1064.15 256.068,1108.76 256.627,1064.52 257.187,1105.61 257.746,1096.87 258.305,1084.31 258.864,1072.57 259.424,1082.94 259.983,1075.68 260.542,1065.64 261.101,1038.55 261.661,1014.74 262.22,1012.85 262.779,1042.42 263.338,1035.82 263.898,1047.13 264.457,1040.28 265.016,1036.35 265.575,1034.41 266.135,1024.98 266.694,1001.12 267.253,1015.52 267.812,1009.39 268.372,1006.85 268.931,1018.4 269.49,997.276 270.049,1017.09 270.609,1030.14 271.168,1009.92 271.727,1024.91 272.286,1069.68 272.846,1062.23 273.405,1037.98 273.964,1032.48 274.523,1079.2 275.083,1059.79 275.642,1052.67 276.201,1043.93 276.76,1089.04 277.32,1116.2 277.879,1124.7 278.438,1130.1 278.997,1137.41 279.557,1127.8 280.116,1135.26 280.675,1140.37 281.234,1160.59 281.794,1166.18 282.353,1170.62 282.912,1143.04 283.471,1130.58 284.031,1105.81 284.59,1099.45 285.149,1104.02 285.708,1110.52 286.268,1094.99 286.827,1072.27 287.386,1097.32 287.945,1068.97 288.505,1078.23 289.064,1101.73 289.623,1074.56 290.182,1086.71 290.742,1091.22 291.301,1115.1 291.86,1101.07 292.419,1091 292.979,1095.39 293.538,1085.93 294.097,1127.3 294.656,1070.52 295.216,1062.2 295.775,1070.89 296.334,1045 296.893,1023.35 297.453,1002.52 298.012,980.902 298.571,978.524 299.13,946.134 299.69,941.983 300.249,955.561 300.808,969.276 301.368,964.563 301.927,998.127 302.486,1004.33 303.045,997.626 303.605,1008.53 304.164,1003.14 304.723,981.697 305.282,976.577 305.842,990.925 306.401,970.69 306.96,965.387 307.519,959.133 308.079,957.868 308.638,970.769 309.197,984.086 309.756,995.925 310.316,1021.12 310.875,1066.38 311.434,1076.85 311.993,1100.88 312.553,1107.73 313.112,1098.33 313.671,1070.9 314.23,1060.67 314.79,1048.4 315.349,1072.96 315.908,1062.36 316.467,1036.22 317.027,1110.9 317.586,1081.99 318.145,1088.85 318.704,1063.74 319.264,1083.89 319.823,1041.32 320.382,1097.38 320.941,1071.55 321.501,1045.79 322.06,1038.17 322.619,1031.21 323.178,1007.68 323.738,1016.49 324.297,973.779 324.856,1001.31 325.415,1001.12 325.975,993.344 326.534,969.72 327.093,968.191 327.652,927.779 328.212,907.578 328.771,888.832 329.33,890.491 329.889,903.662 330.449,901.418 331.008,897.397 331.567,901.262 332.126,897.21 332.686,878.304 333.245,878.759 333.804,890.837 334.363,887.69 334.923,888.685 335.482,901.501 336.041,884.432 336.6,897.138 337.16,894.688 337.719,891.804 338.278,939.99 338.837,935.191 339.397,945.858 339.956,941.407 340.515,937.121 341.074,913.241 341.634,937.591 342.193,950.982 342.752,927.602 343.311,958.404 343.871,934.352 344.43,897.318 344.989,893.04 345.548,886.343 346.108,873.194 346.667,856.051 347.226,874.416 347.785,888.042 348.345,836.006 348.904,801.517 349.463,787.158 350.022,807.393 350.582,792.705 351.141,811.421 351.7,828.177 352.259,841.814 352.819,859.934 353.378,844.984 353.937,861.544 354.496,859.342 355.056,860.267 355.615,889.736 356.174,903.81 356.733,914.34 357.293,925.326 357.852,923.707 358.411,954.68 358.97,949.723 359.53,937.568 360.089,947.098 360.648,939.633 361.207,931.9 361.767,927.246 362.326,921.227 362.885,929.988 363.444,927.327 364.004,937.444 364.563,948.706 365.122,942.992 365.681,888.279 366.241,884.931 366.8,899.133 367.359,943.674 367.918,968.664 368.478,942.878 369.037,950.864 369.596,913.432 370.155,891.603 370.715,903.236 371.274,932.249 371.833,941.227 372.392,952.629 372.952,929.366 373.511,921.024 374.07,911.617 374.629,906.697 375.189,901.642 375.748,880.227 376.307,840.566 376.866,787.87 377.426,788.168 377.985,810.561 378.544,825.306 379.103,839.495 379.663,835.94 380.222,850.099 380.781,929.782 381.34,907.183 381.9,899.356 382.459,910.325 383.018,919.543 383.577,913.886 384.137,928.164 384.696,920.287 385.255,916.325 385.814,907.869 386.374,898.801 386.933,875.087 387.492,868.258 388.051,882.173 388.611,865.66 389.17,861.181 389.729,858.78 390.288,873.03 390.848,870.123 391.407,871.121 391.966,882.502 392.525,893.258 393.085,871.903 393.644,850.128 394.203,848.764 394.762,861.842 395.322,823.719 395.881,868.58 396.44,863.443 396.999,878.573 397.559,889.333 398.118,880.152 398.677,875.022 399.236,870.288 399.796,865.45 400.355,846.103 400.914,813.231 401.473,778.088 402.033,760.511 402.592,778.959 403.151,779.728 403.71,745.131 404.27,731.227 404.829,734.546 405.388,751.744 405.947,756.838 406.507,757.529 407.066,773.157 407.625,787.122 408.184,785.521 408.744,751.376 409.303,765.666 409.862,765.957 410.421,765.06 410.981,764.496 411.54,766.185 412.099,731.794 412.658,750.227 413.218,783.575 413.777,780.219 414.336,762.573 414.895,779.216 415.455,796.03 416.014,829.388 416.573,828.511 417.132,842.978 417.692,840.49 418.251,872.34 418.81,868.618 419.369,833.334 419.929,813.938 420.488,797.836 421.047,803.471 421.606,834.915 422.166,862.519 422.725,858.011 423.284,870.063 423.843,863.29 424.403,876.032 424.962,853.931 425.521,846.374 426.08,843.597 426.64,870.487 427.199,865.953 427.758,828.763 428.318,810.37 428.877,810.504 429.436,728.041 429.995,729.291 430.555,720.703 431.114,725.413 431.673,727.728 432.232,715.733 432.792,700.28 433.351,705.891 433.91,726.78 434.469,746.239 435.029,745.344 435.588,748.844 436.147,747.384 436.706,764.425 437.266,781.102 437.825,784.198 438.384,781.467 438.943,797.007 439.503,843.12 440.062,889.697 440.621,865.112 441.18,862.707 441.74,845.685 442.299,809.647 442.858,791.676 443.417,788.581 443.977,785.642 444.536,770.149 445.095,785.666 445.654,846.37 446.214,858.613 446.773,854.181 447.332,866.22 447.891,860.162 448.451,855.739 449.01,865.243 449.569,875.395 450.128,900.994 450.688,892.604 451.247,883.865 451.806,858.416 452.365,852.8 452.925,848.475 453.484,871.011 454.043,878.787 454.602,823.343 455.162,819.691 455.721,818.682 456.28,817.208 456.839,815.542 457.399,847.126 457.958,859.051 458.517,858.357 459.076,853.109 459.636,800.936 460.195,778.067 460.754,811.517 461.313,839.695 461.873,818.79 462.432,831.315 462.991,846.004 463.55,862.1 464.11,857.556 464.669,819.952 465.228,832.857 465.787,828.945 466.347,804.906 466.906,819.471 467.465,816.377 468.024,808.297 468.584,788.217 469.143,753.48 469.702,772.91 470.261,754.679 470.821,752.39 471.38,735.944 471.939,735.927 472.498,754.44 473.058,764.308 473.617,715.128 474.176,685.011 474.735,685.171 475.295,686.995 475.854,691.065 476.413,677.128 476.972,694.424 477.532,693.012 478.091,679.112 478.65,698.817 479.209,637.463 479.769,609.656 480.328,633.254 480.887,607.117 481.446,615.739 482.006,658.324 482.565,648.395 483.124,652.876 483.683,676.032 484.243,646.3 484.802,635.424 485.361,644.034 485.92,645.83 486.48,650.922 487.039,670.738 487.598,673.647 488.157,661.92 488.717,697.985 489.276,715.948 489.835,751.477 490.394,719.25 490.954,721.54 491.513,720.201 492.072,707.482 492.631,709.931 493.191,696.607 493.75,729.579 494.309,733.03 494.868,734.544 495.428,745.147 495.987,726.769 496.546,710.016 497.105,694.383 497.665,714.418 498.224,720.671 498.783,724.911 499.342,709.067 499.902,712.816 500.461,742.439 501.02,759.448 501.579,793.963 502.139,824.829 502.698,819.613 503.257,800.312 503.816,799.209 504.376,782.303 504.935,797.348 505.494,763.268 506.053,731.431 506.613,735.448 507.172,720.932 507.731,704.947 508.29,688.642 508.85,692.979 509.409,629.083 509.968,652.167 510.527,706.545 511.087,692.438 511.646,695.127 512.205,692.757 512.764,725.443 513.324,727.758 513.883,728.721 514.442,728.701 515.001,728.015 515.561,746.18 516.12,742.862 516.679,741.15 517.238,711.616 517.798,745.357 518.357,741.89 518.916,723.643 519.475,738.203 520.035,753.043 520.594,764.559 521.153,761.895 521.712,747.581 522.272,761.334 522.831,773.779 523.39,758.798 523.949,757.719 524.509,752.679 525.068,752.267 525.627,756.7 526.186,718.45 526.746,752.822 527.305,769.357 527.864,783.296 528.423,795.072 528.983,789.641 529.542,751.441 530.101,764.189 530.66,782.03 531.22,777.191 531.779,744.529 532.338,791.775 532.897,788.139 533.457,752.968 534.016,732.961 534.575,714.224 535.134,715.537 535.694,715.793 536.253,731.891 536.812,734.495 537.371,734.248 537.931,704.979 538.49,704.193 539.049,709.514 539.608,726.505 540.168,721.562 540.727,720.738 541.286,702.585 541.845,701.933 542.405,736.927 542.964,755.433 543.523,773.947 544.082,770.234 544.642,784.537 545.201,765.413 545.76,793.538 546.319,786.226 546.879,799.625 547.438,814.427 547.997,808.181 548.556,817.302 549.116,828.674 549.675,856.827 550.234,846.847 550.793,872.761 551.353,848.159 551.912,838.041 552.471,862.787 553.031,838.428 553.59,815.058 554.149,794.347 554.708,790.242 555.268,817.197 555.827,796.523 556.386,804.536 556.945,860.093 557.505,872.576 558.064,896.973 558.623,885.079 559.182,908.537 559.742,900.215 560.301,888.847 560.86,881.052 561.419,873.12 561.979,880.365 562.538,854.043 563.097,863.97 563.656,856.344 564.216,846.586 564.775,856.274 565.334,865.12 565.893,888.238 566.453,861.275 567.012,821.295 567.571,800.883 568.13,781.088 568.69,776.659 569.249,757.184 569.808,786.753 570.367,796.9 570.927,761.685 571.486,758.763 572.045,722.282 572.604,705.243 573.164,692.339 573.723,707.312 574.282,706.302 574.841,704.281 575.401,700.882 575.96,702.698 576.519,684.241 577.078,649.393 577.638,668.309 578.197,668.985 578.756,670.16 579.315,639.381 579.875,627.817 580.434,629.172 580.993,648.839 581.552,619.973 582.112,655.73 582.671,675.193 583.23,712.384 583.789,729.113 584.349,725.685 584.908,729.321 585.467,728.374 586.026,696.062 586.586,728.888 587.145,710.653 587.704,725.244 588.263,759.223 588.823,769.998 589.382,766.31 589.941,763.428 590.5,777.848 591.06,742.728 591.619,757.093 592.178,741.603 592.737,726.979 593.297,710.22 593.856,711.341 594.415,696.515 594.974,681.645 595.534,684.541 596.093,668.744 596.652,704.664 597.211,719.126 597.771,720.243 598.33,705.051 598.889,672.083 599.448,656.577 600.008,659.682 600.567,645.911 601.126,648.09 601.685,666.88 602.245,637.86 602.804,625.152 603.363,607.704 603.922,628.505 604.482,662.018 605.041,646.423 605.6,631.715 606.159,606.308 606.719,598.679 607.278,604.014 607.837,670.69 608.396,660.349 608.956,626.859 609.515,645.455 610.074,667.141 610.633,701.468 611.193,686.015 611.752,687.145 612.311,687.89 612.87,692.44 613.43,706.388 613.989,706.411 614.548,722.39 615.107,734.844 615.667,718.786 616.226,749.854 616.785,733.467 617.344,733.42 617.904,701.568 618.463,686.645 619.022,687.54 619.581,640.831 620.141,662.278 620.7,664.45 621.259,617.057 621.818,622.183 622.378,642.379 622.937,679.784 623.496,665.93 624.055,668.265 624.615,687.238 625.174,687.629 625.733,686.496 626.292,655.598 626.852,658.111 627.411,706.322 627.97,705.568 628.529,723.783 629.089,722.077 629.648,719.957 630.207,701.263 630.766,698.493 631.326,717.216 631.885,714.886 632.444,700.596 633.003,698.781 633.563,680.208 634.122,667.08 634.681,669.285 635.24,656.981 635.8,659.931 636.359,660.674 636.918,697.766 637.477,688.634 638.037,705.494 638.596,738.718 639.155,749.825 639.714,764.383 640.274,744.52 640.833,787.475 641.392,797.843 641.951,809.615 642.511,821.325 643.07,797.823 643.629,794.716 644.188,772.857 644.748,769.861 645.307,750.141 645.866,783.089 646.425,764.001 646.985,760.505 647.544,789.216 648.103,753.118 648.662,719.871 649.222,716.738 649.781,719.576 650.34,732.285 650.899,750.112 651.459,746.705 652.018,763.781 652.577,761.405 653.136,775.781 653.696,769.411 654.255,764.854 654.814,746.512 655.373,744.693 655.933,738.383 656.492,738.078 657.051,737.468 657.61,735.216 658.17,729.141 658.729,729.203 659.288,678.74 659.847,678.169 660.407,647.513 660.966,648.306 661.525,633.468 662.084,617.668 662.644,607.205 663.203,598.337 663.762,655.902 664.321,626.741 664.881,597.697 665.44,599.969 665.999,586.354 666.558,608.556 667.118,647.013 667.677,667.97 668.236,671.396 668.795,623.438 669.355,626.869 669.914,663.504 670.473,665.118 671.032,714.624 671.592,701.916 672.151,685.833 672.71,687.774 673.269,704.596 673.829,689.28 674.388,668.822 674.947,652.671 675.506,620.065 676.066,624.033 676.625,611.953 677.184,616.758 677.743,617.936 678.303,636.902 678.862,657.309 679.421,657.439 679.981,657.388 680.54,657.474 681.099,674.664 681.658,662.599 682.218,661.911 682.777,664.371 683.336,647.865 683.895,695.968 684.455,676.115 685.014,691.199 685.573,723.919 686.132,691.407 686.692,677.54 687.251,598.296 687.81,586.951 688.369,611.858 688.929,620.657 689.488,654.63 690.047,689.563 690.606,655.656 691.166,659.361 691.725,680.421 692.284,616.806 692.843,606.851 693.403,566.963 693.962,573.846 694.521,613.261 695.08,618.85 695.64,643.947 696.199,631.732 696.758,687.146 697.317,672.085 697.877,658.02 698.436,646.717 698.995,629.133 699.554,649.55 700.114,668.274 700.673,669.787 701.232,701.458 701.791,700.136 702.351,731.99 702.91,731.882 703.469,731.54 704.028,697.167 704.588,711.487 705.147,711.657 705.706,709.928 706.265,741.454 706.825,740.159 707.384,739.982 707.943,748.403 708.502,729.933 709.062,711.844 709.621,696.037 710.18,694.933 710.739,709.555 711.299,693.797 711.858,695.345 712.417,677.471 712.976,694.957 713.536,650.556 714.095,624.377 714.654,648.149 715.213,632.816 715.773,603.76 716.332,609.128 716.891,613.186 717.45,634.986 718.01,621.832 718.569,638.013 719.128,658.632 719.687,645.007 720.247,646.803 720.806,664.462 721.365,664.973 721.924,651.553 722.484,653.724 723.043,689.152 723.602,687.564 724.161,719.406 724.721,716.662 725.28,712.444 725.839,708.792 726.398,710.38 726.958,726.649 727.517,675.271 728.076,677.226 728.635,681.552 729.195,715.158 729.754,712.743 730.313,691.735 730.872,707.114 731.432,725.198 731.991,726.705 732.55,757.856 733.109,755.575 733.669,769.969 734.228,753.1 734.787,767.272 735.346,730.906 735.906,713.385 736.465,713.523 737.024,714.71 737.583,713.8 738.143,710.504 738.702,695.183 739.261,697.566 739.82,648.789 740.38,683.896 740.939,715.277 741.498,682.39 742.057,714.482 742.617,684.929 743.176,686.873 743.735,655.571 744.294,674.529 744.854,693.593 745.413,709.133 745.972,691.61 746.531,694.18 747.091,707.322 747.65,706.548 748.209,690.777 748.768,693.726 749.328,691.909 749.887,706.484 750.446,705.647 751.005,701.099 751.565,698.876 752.124,715.917 752.683,750.125 753.242,714.114 753.802,682.419 754.361,681.23 754.92,698.079 755.479,696.697 756.039,695.691 756.598,679.786 757.157,678.551 757.716,695.606 758.276,714.046 758.835,664.779 759.394,648.001 759.953,665.4 760.513,651.572 761.072,636.989 761.631,621.618 762.19,643.729 762.75,647.18 763.309,682.622 763.868,699.286 764.427,679.877 764.987,629.419 765.546,596.107 766.105,601.394 766.664,623.098 767.224,642.514 767.783,644.772 768.342,650.979 768.901,637.499 769.461,623.382 770.02,674.258 770.579,640.503 771.138,627.377 771.698,646.058 772.257,645.658 772.816,631.801 773.375,651.79 773.935,655.183 774.494,676.669 775.053,660.903 775.612,677.615 776.172,694.815 776.731,713.129 777.29,730.006 777.849,714.233 778.409,695.406 778.968,712.586 779.527,699.65 780.086,714.817 780.646,729.76 781.205,725.681 781.764,755.732 782.323,756.425 782.883,751.443 783.442,780.653 784.001,807.436 784.56,802.044 785.12,778.409 785.679,790.568 786.238,786.187 786.797,762.398 787.357,741.045 787.916,703.754 788.475,654.371 789.034,672.863 789.594,677.911 790.153,694.93 790.712,708.095 791.271,738.351 791.831,733.669 792.39,716.351 792.949,746.766 793.508,765.031 794.068,744.045 794.627,741.679 795.186,740.559 795.745,769.139 796.305,780.44 796.864,759.263 797.423,752.381 797.982,719.078 798.542,729.721 799.101,709.62 799.66,721.675 800.219,701.588 800.779,762.915 801.338,777.781 801.897,808.336 802.456,785.791 803.016,782.11 803.575,760.762 804.134,753.352 804.693,749.638 805.253,711.485 805.812,723.736 806.371,723.487 806.931,753.325 807.49,763.524 808.049,742.088 808.608,723.79 809.168,690.066 809.727,673.719 810.286,610.27 810.845,602.333 811.405,587.407 811.964,561.232 812.523,598.886 813.082,620.158 813.642,657.509 814.201,658.14 814.76,658.117 815.319,607.318 815.879,594.357 816.438,595.997 816.997,599.419 817.556,621.093 818.116,640.408 818.675,656.585 819.234,658.467 819.793,659.512 820.353,643.535 820.912,645.077 821.471,648.083 822.03,635.69 822.59,623.494 823.149,643.359 823.708,679.08 824.267,678.91 824.827,629.784 825.386,679.047 825.945,681.375 826.504,680.849 827.064,651.767 827.623,636.991 828.182,624.591 828.741,662.4 829.301,666.606 829.86,649.329 830.419,647.724 830.978,636.077 831.538,641.688 832.097,662.143 832.656,663.662 833.215,667.79 833.775,665.674 834.334,665.983 834.893,666.392 835.452,700.635 836.012,682.015 836.571,651.498 837.13,654.142 837.689,674.439 838.249,703.638 838.808,687.45 839.367,689.278 839.926,675.398 840.486,691.338 841.045,690.854 841.604,707.764 842.163,691.224 842.723,708.355 843.282,754.655 843.841,733.872 844.4,711.732 844.96,694.042 845.519,724.358 846.078,722.18 846.637,717.891 847.197,748.094 847.756,761.205 848.315,773.161 848.874,782.964 849.434,828.814 849.993,804.289 850.552,814.576 851.111,789.78 851.671,785.904 852.23,795.839 852.789,790.478 853.348,817.999 853.908,844.324 854.467,807.165 855.026,800.703 855.585,797.093 856.145,804.601 856.704,796.961 857.263,790.451 857.822,769.008 858.382,748.256 858.941,745.034 859.5,724.674 860.059,720.437 860.619,687.405 861.178,704.183 861.737,735.591 862.296,749.087 862.856,757.046 863.415,736.135 863.974,731.274 864.533,726.943 865.093,723.33 865.652,752.168 866.211,748.47 866.77,745.385 867.33,727.418 867.889,709.365 868.448,724.869 869.007,719.388 869.567,702.119 870.126,682.765 870.685,683.503 871.244,635.699 871.804,654.763 872.363,626.682 872.922,614.216 873.481,629.408 874.041,618.068 874.6,625.421 875.159,643.201 875.718,662.057 876.278,679.228 876.837,679.447 877.396,662.843 877.955,692.823 878.515,709.886 879.074,691.321 879.633,642.055 880.192,628.468 880.752,633.372 881.311,618.682 881.87,642.108 882.429,630.356 882.989,587.011 883.548,589.38 884.107,560.365 884.666,582.453 885.226,572.187 885.785,613.566 886.344,651.788 886.903,671.145 887.463,642.399 888.022,675.444 888.581,709.758 889.14,676.827 889.7,722.169 890.259,737.129 890.818,766.737 891.377,794.674 891.937,787.572 892.496,753.971 893.055,767.724 893.614,748.391 894.174,760.171 894.733,772.634 895.292,784.99 895.851,763.404 896.411,760.615 896.97,774.316 897.529,789.732 898.088,804.24 898.648,779.42 899.207,741.443 899.766,756.025 900.325,767.546 900.885,763.082 901.444,755.956 902.003,719.736 902.562,733.044 903.122,760.588 903.681,775.203 904.24,722.662 904.799,721.254 905.359,654.875 905.918,640.897 906.477,644.159 907.036,676.807 907.596,679.028 908.155,676.309 908.714,660.404 909.273,666.401 909.833,684.057 910.392,671.84 910.951,672.985 911.51,673.027 912.07,677.262 912.629,678.59 913.188,662.061 913.747,684.557 914.307,670.916 914.866,656.749 915.425,643.396 915.984,663.374 916.544,647.796 917.103,666.427 917.662,622.236 918.221,625.393 918.781,632.332 919.34,653.367 919.899,606.919 920.458,595.082 921.018,601.28 921.577,621.975 922.136,640.5 922.695,628.856 923.255,620.482 923.814,621.889 924.373,657.023 924.932,659.271 925.492,674.021 926.051,691.539 926.61,722.47 927.169,720.614 927.729,719.485 928.288,702.453 928.847,701.263 929.406,698.45 929.966,698.762 930.525,715.012 931.084,679.527 931.644,676.905 932.203,677.083 932.762,674.31 933.321,674.696 933.881,726.661 934.44,744.624 934.999,741.658 935.558,691.821 936.118,676.7 936.677,708.084 937.236,673.546 937.795,689.5 938.355,673.894 938.914,690.813 939.473,676.995 940.032,675.16 940.592,640.096 941.151,592.166 941.71,594.68 942.269,613.018 942.829,647.971 943.388,633.468 943.947,618.04 944.506,638.449 945.066,591.709 945.625,629.736 946.184,600.724 946.743,637.207 947.303,641.448 947.862,641.914 948.421,613.016 948.98,613.385 949.54,635.16 950.099,657.186 950.658,675.331 951.217,690.266 951.777,657.382 952.336,657.515 952.895,644.42 953.454,664.188 954.014,665.31 954.573,668.028 955.132,640.088 955.691,641.553 956.251,659.534 956.81,662.144 957.369,629.514 957.928,599.446 958.488,606.611 959.047,592.064 959.606,613.663 960.165,602.376 960.725,625.254 961.284,643.013 961.843,643.076 962.402,677.927 962.962,665.598 963.521,653.877 964.08,651.258 964.639,621.768 965.199,626.391 965.758,632.012 966.317,648.282 966.876,684.043 967.436,696.478 967.995,679.629 968.554,696.889 969.113,691.023 969.673,689.62 970.232,673.608 970.791,640.75 971.35,677.678 971.91,697.493 972.469,695.877 973.028,694.436 973.587,680.1 974.147,665.467 974.706,664.699 975.265,680.99 975.824,694.912 976.384,711.394 976.943,693.225 977.502,709.801 978.061,691.024 978.621,708.086 979.18,723.565 979.739,703.544 980.298,700.131 980.858,698.25 981.417,696.136 981.976,693.416 982.535,661.249 983.095,642.425 983.654,643.902 984.213,643.21 984.772,661.973 985.332,663.221 985.891,646.146 986.45,614.733 987.009,605.435 987.569,610.762 988.128,584.321 988.687,603.704 989.246,576.844 989.806,582.835 990.365,586.039 990.924,591.134 991.483,612.675 992.043,651.646 992.602,702.748 993.161,708.219 993.72,689.024 994.28,688.56 994.839,705.043 995.398,703.456 995.957,720.178 996.517,717.542 997.076,715.235 997.635,713.925 998.194,712.057 998.754,727.27 999.313,725.488 999.872,768.264 1000.43,763.556 1000.99,730.971 1001.55,729.026 1002.11,712.64 1002.67,743.283 1003.23,722.441 1003.79,719.302 1004.35,715.04 1004.91,748.313 1005.46,742.75 1006.02,752.948 1006.58,700.219 1007.14,668.351 1007.7,686.592 1008.26,683.101 1008.82,702.547 1009.38,716.973 1009.94,714.454 1010.5,744.657 1011.06,741.653 1011.62,751.107 1012.18,776.596 1012.73,736.737 1013.29,749.166 1013.85,733.01 1014.41,715.19 1014.97,711.852 1015.53,728.608 1016.09,742.031 1016.65,741.93 1017.21,707.914 1017.77,690.141 1018.33,674.722 1018.89,657.952 1019.45,645.603 1020.01,647.137 1020.56,633.419 1021.12,619.79 1021.68,609.334 1022.24,611.667 1022.8,613.406 1023.36,615.814 1023.92,603.749 1024.48,576.046 1025.04,600.766 1025.6,590.261 1026.16,611.15 1026.72,632.301 1027.28,651.736 1027.83,658.527 1028.39,672.235 1028.95,676.198 1029.51,694.275 1030.07,677.088 1030.63,644.022 1031.19,631.821 1031.75,621.524 1032.31,639.979 1032.87,648.356 1033.43,666.521 1033.99,701.003 1034.55,686.203 1035.1,672.475 1035.66,673.638 1036.22,658.345 1036.78,655.51 1037.34,658.693 1037.9,661.935 1038.46,680.287 1039.02,680.188 1039.58,728.406 1040.14,708.32 1040.7,740.448 1041.26,739.723 1041.82,738.542 1042.38,734.733 1042.93,729.773 1043.49,728.321 1044.05,726.399 1044.61,739.45 1045.17,738.189 1045.73,783.669 1046.29,793.021 1046.85,798.583 1047.41,760.047 1047.97,753.501 1048.53,718.407 1049.09,769.406 1049.65,734.411 1050.2,702.769 1050.76,731.747 1051.32,746.777 1051.88,731.608 1052.44,743.817 1053,722.199 1053.56,720.92 1054.12,720.504 1054.68,684.728 1055.24,670.364 1055.8,657.616 1056.36,659.076 1056.92,659.882 1057.48,661.631 1058.03,675.043 1058.59,692.931 1059.15,676.129 1059.71,677.581 1060.27,646.524 1060.83,645.267 1061.39,659.977 1061.95,660.501 1062.51,678.573 1063.07,696.263 1063.63,712.913 1064.19,727.707 1064.75,709.952 1065.3,708.841 1065.86,726.122 1066.42,738.185 1066.98,738.722 1067.54,735.997 1068.1,730.48 1068.66,711.232 1069.22,710.75 1069.78,690.803 1070.34,754.802 1070.9,768.89 1071.46,748.866 1072.02,712.706 1072.57,730.657 1073.13,754.913 1073.69,748.473 1074.25,727.059 1074.81,724.567 1075.37,723.444 1075.93,689.382 1076.49,688.492 1077.05,691.311 1077.61,707.516 1078.17,692.262 1078.73,707.009 1079.29,704.804 1079.85,719.302 1080.4,720.677 1080.96,718.639 1081.52,715.632 1082.08,715.291 1082.64,697.094 1083.2,694.062 1083.76,707.884 1084.32,709.058 1084.88,722.356 1085.44,765.176 1086,776.695 1086.56,804.362 1087.12,795.271 1087.67,757.753 1088.23,737.68 1088.79,718.106 1089.35,735.105 1089.91,764.373 1090.47,761.795 1091.03,777.486 1091.59,775.409 1092.15,803.873 1092.71,814.334 1093.27,809.605 1093.83,772.577 1094.39,770.332 1094.94,748.753 1095.5,731.99 1096.06,727.205 1096.62,722.02 1097.18,719.191 1097.74,737.213 1098.3,766.041 1098.86,745.698 1099.42,707.077 1099.98,719.884 1100.54,716.465 1101.1,717.174 1101.66,730.309 1102.22,709.122 1102.77,709.797 1103.33,692.381 1103.89,692.585 1104.45,694.145 1105.01,677.656 1105.57,644.235 1106.13,645.437 1106.69,632.933 1107.25,653.687 1107.81,638.283 1108.37,641.356 1108.93,646.734 1109.49,649.426 1110.04,649.927 1110.6,664.748 1111.16,667.098 1111.72,683.218 1112.28,669.214 1112.84,655.53 1113.4,624.561 1113.96,658.362 1114.52,655.74 1115.08,670.759 1115.64,704.387 1116.2,720.184 1116.76,717.352 1117.31,701.983 1117.87,734.299 1118.43,732.129 1118.99,647.183 1119.55,615.607 1120.11,635.134 1120.67,655.492 1121.23,655.622 1121.79,656.535 1122.35,629.072 1122.91,668.385 1123.47,685.697 1124.03,684.972 1124.59,736.566 1125.14,733.965 1125.7,729.78 1126.26,727.29 1126.82,708.688 1127.38,754.558 1127.94,735.102 1128.5,664.517 1129.06,696.179 1129.62,712.458 1130.18,727.592 1130.74,724.587 1131.3,757.343 1131.86,754.303 1132.41,781.019 1132.97,743.51 1133.53,741.339 1134.09,740.433 1134.65,707.264 1135.21,689.924 1135.77,659.134 1136.33,657.63 1136.89,693.15 1137.45,674.222 1138.01,723.267 1138.57,705.827 1139.13,690.059 1139.68,690.745 1140.24,676.946 1140.8,696.78 1141.36,699.616 1141.92,718.908 1142.48,720.067 1143.04,719.208 1143.6,735.142 1144.16,719.501 1144.72,685.634 1145.28,635.656 1145.84,657.282 1146.4,689.834 1146.96,689.313 1147.51,707.092 1148.07,690.062 1148.63,702.444 1149.19,715.388 1149.75,680.721 1150.31,676.538 1150.87,676.519 1151.43,660.856 1151.99,662.522 1152.55,679.228 1153.11,661.499 1153.67,674.404 1154.23,693.483 1154.78,673.78 1155.34,642.481 1155.9,643.431 1156.46,644.303 1157.02,630.848 1157.58,635.476 1158.14,672.257 1158.7,685.057 1159.26,718.794 1159.82,732.875 1160.38,728.308 1160.94,705.813 1161.5,690.819 1162.05,675 1162.61,674.239 1163.17,658.834 1163.73,656.584 1164.29,656.737 1164.85,639.04 1165.41,673.071 1165.97,740.212 1166.53,741.079 1167.09,757.79 1167.65,756.251 1168.21,738.406 1168.77,736.598 1169.33,736.135 1169.88,718.951 1170.44,736.336 1171,735.877 1171.56,732.742 1172.12,697 1172.68,677.925 1173.24,711.963 1173.8,705.768 1174.36,673.141 1174.92,655.625 1175.48,659.183 1176.04,676.4 1176.6,677.503 1177.15,662.724 1177.71,696.044 1178.27,663.138 1178.83,649.985 1179.39,681.909 1179.95,634.299 1180.51,655.364 1181.07,686.722 1181.63,671.827 1182.19,700.847 1182.75,688.85 1183.31,689.336 1183.87,655.644 1184.43,673.224 1184.98,655.831 1185.54,673.21 1186.1,644.3 1186.66,627.921 1187.22,631.397 1187.78,650.834 1188.34,638.529 1188.9,643.617 1189.46,645.555 1190.02,650.178 1190.58,685.408 1191.14,670.217 1191.7,669.871 1192.25,683.183 1192.81,680.766 1193.37,665.366 1193.93,667.426 1194.49,699.938 1195.05,682.781 1195.61,683.719 1196.17,700.443 1196.73,684.195 1197.29,668.807 1197.85,654.284 1198.41,670.858 1198.97,668.941 1199.52,667.558 1200.08,685.122 1200.64,681.521 1201.2,646.343 1201.76,646.67 1202.32,630.273 1202.88,629.464 1203.44,651.084 1204,697.296 1204.56,682.688 1205.12,700.869 1205.68,700.318 1206.24,698.199 1206.8,661.99 1207.35,646.776 1207.91,647.777 1208.47,598.172 1209.03,572.001 1209.59,594.88 1210.15,631.123 1210.71,620.357 1211.27,612.143 1211.83,631.374 1212.39,618.684 1212.95,603.839 1213.51,608.553 1214.07,627.256 1214.62,615.539 1215.18,619.612 1215.74,605.208 1216.3,576.936 1216.86,578.928 1217.42,570.29 1217.98,559.63 1218.54,599.502 1219.1,602.179 1219.66,641.528 1220.22,675.576 1220.78,638.541 1221.34,658.077 1221.89,658.301 1222.45,644.237 1223.01,658.505 1223.57,674.628 1224.13,674.089 1224.69,628.342 1225.25,631.561 1225.81,664.434 1226.37,684.987 1226.93,692.221 1227.49,694.6 1228.05,690.607 1228.61,708.644 1229.17,694.591 1229.72,725.065 1230.28,787.653 1230.84,783.766 1231.4,780.416 1231.96,781.366 1232.52,790.741 1233.08,802.992 1233.64,782.759 1234.2,792.287 1234.76,770.764 1235.32,729.813 1235.88,711.58 1236.44,774.782 1236.99,784.751 1237.55,777.521 1238.11,772.96 1238.67,753.085 1239.23,750.269 1239.79,778.886 1240.35,801.753 1240.91,826.314 1241.47,821.198 1242.03,828 1242.59,772.238 1243.15,801.57 1243.71,811.762 1244.26,787.248 1244.82,811.219 1245.38,738.109 1245.94,731.908 1246.5,758.975 1247.06,768.825 1247.62,798.477 1248.18,747.47 1248.74,741.249 1249.3,722.427 1249.86,688.985 1250.42,621.658 1250.98,642.008 1251.54,628.05 1252.09,616.964 1252.65,587.068 1253.21,607.953 1253.77,642.682 1254.33,642.431 1254.89,677.943 1255.45,676.216 1256.01,656.951 1256.57,658.909 1257.13,695.358 1257.69,693.874 1258.25,692.294 1258.81,659.54 1259.36,679.497 1259.92,695.589 1260.48,731.116 1261.04,695.528 1261.6,706.362 1262.16,686.722 1262.72,701.908 1263.28,668.856 1263.84,668.358 1264.4,669.617 1264.96,670.414 1265.52,653.179 1266.08,656.896 1266.63,641.449 1267.19,639.93 1267.75,656.75 1268.31,626.176 1268.87,641.492 1269.43,640.976 1269.99,658.647 1270.55,671.02 1271.11,657.012 1271.67,661.87 1272.23,645.518 1272.79,614.959 1273.35,635.119 1273.91,637.634 1274.46,671.707 1275.02,721.436 1275.58,751.556 1276.14,748.348 1276.7,732.091 1277.26,715.176 1277.82,714.832 1278.38,728.147 1278.94,725.1 1279.5,724.252 1280.06,738.589 1280.62,735.659 1281.18,715.189 1281.73,715.938 1282.29,698.832 1282.85,698.323 1283.41,680.613 1283.97,712.585 1284.53,758.735 1285.09,757.518 1285.65,774.244 1286.21,740.011 1286.77,754.452 1287.33,748.622 1287.89,745.589 1288.45,776.342 1289,759.171 1289.56,756.415 1290.12,784.687 1290.68,796.739 1291.24,774.922 1291.8,772.941 1292.36,754.991 1292.92,749.082 1293.48,774.59 1294.04,767.592 1294.6,764.32 1295.16,762.395 1295.72,760.306 1296.28,789.082 1296.83,751.955 1297.39,728.52 1297.95,711.673 1298.51,695.978 1299.07,677.281 1299.63,649.497 1300.19,666.582 1300.75,667.827 1301.31,650.42 1301.87,638.026 1302.43,661.718 1302.99,695.039 1303.55,684.243 1304.1,672.968 1304.66,670.732 1305.22,654.335 1305.78,688.265 1306.34,636.591 1306.9,606.724 1307.46,551.049 1308.02,538.384 1308.58,543.836 1309.14,519.779 1309.7,548.105 1310.26,555.708 1310.82,548.536 1311.38,542.421 1311.93,552.149 1312.49,542.418 1313.05,536.998 1313.61,577.437 1314.17,583.911 1314.73,651.176 1315.29,653.503 1315.85,654.422 1316.41,638.49 1316.97,591.993 1317.53,595.525 1318.09,600.192 1318.65,607.353 1319.2,627.714 1319.76,644.485 1320.32,675.422 1320.88,657.68 1321.44,661.132 1322,664.463 1322.56,652.254 1323.12,655.112 1323.68,657.079 1324.24,662.037 1324.8,662.506 1325.36,678.211 1325.92,659.849 1326.47,646.501 1327.03,647.498 1327.59,633.688 1328.15,636.021 1328.71,668.489 1329.27,684.768 1329.83,714.509 1330.39,712.343 1330.95,712.217 1331.51,680.042 1332.07,661.848 1332.63,683.805 1333.19,666.473 1333.75,667.43 1334.3,635.885 1334.86,618.708 1335.42,633.157 1335.98,618.255 1336.54,620.77 1337.1,609.603 1337.66,611.333 1338.22,627.538 1338.78,644.902 1339.34,627.499 1339.9,665.14 1340.46,653.371 1341.02,654.924 1341.57,657.085 1342.13,673.929 1342.69,705.557 1343.25,702.223 1343.81,704.34 1344.37,752.387 1344.93,746.787 1345.49,744.015 1346.05,693.625 1346.61,658.435 1347.17,658.656 1347.73,643.866 1348.29,696.468 1348.84,661.048 1349.4,664.405 1349.96,648.747 1350.52,652.335 1351.08,671.002 1351.64,626.62 1352.2,628.724 1352.76,614.467 1353.32,650.072 1353.88,604.141 1354.44,639.672 1355,659.309 1355.56,664.091 1356.12,650.841 1356.67,651.581 1357.23,667.561 1357.79,703.723 1358.35,706.801 1358.91,702.198 1359.47,699.174 1360.03,667.539 1360.59,654.971 1361.15,640.337 1361.71,676.369 1362.27,693.858 1362.83,695.332 1363.39,714.109 1363.94,765.364 1364.5,762.621 1365.06,755.946 1365.62,756.351 1366.18,769.408 1366.74,769.525 1367.3,750.244 1367.86,730.511 1368.42,744.11 1368.98,754.513 1369.54,750.153 1370.1,729.633 1370.66,709.925 1371.21,725.356 1371.77,758.148 1372.33,754.356 1372.89,762.695 1373.45,742.516 1374.01,720.163 1374.57,704.728 1375.13,702.399 1375.69,719.151 1376.25,747.987 1376.81,760.626 1377.37,756.796 1377.93,769.199 1378.49,799.661 1379.04,777.587 1379.6,721.401 1380.16,733.74 1380.72,775.414 1381.28,720.342 1381.84,683.135 1382.4,713.883 1382.96,711.552 1383.52,724.473 1384.08,727.499 1384.64,726.19 1385.2,722.671 1385.76,690.471 1386.31,688.173 1386.87,670.992 1387.43,687.053 1387.99,683.328 1388.55,638.419 1389.11,643.064 1389.67,644.308 1390.23,642.01 1390.79,647.036 1391.35,646.336 1391.91,650.806 1392.47,652.556 1393.03,651.667 1393.58,652.815 1394.14,638.906 1394.7,622.176 1395.26,593.875 1395.82,594.598 1396.38,628.978 1396.94,647.935 1397.5,649.303 1398.06,653.676 1398.62,640.398 1399.18,645.503 1399.74,614.192 1400.3,634.779 1400.86,655.065 1401.41,642.615 1401.97,663.25 1402.53,665.458 1403.09,682.434 1403.65,681.172 1404.21,681.676 1404.77,714.383 1405.33,717.057 1405.89,748.515 1406.45,747.18 1407.01,775.028 1407.57,754.03 1408.13,736.051 1408.68,715.701 1409.24,713.343 1409.8,709.996 1410.36,693.166 1410.92,676.405 1411.48,678.222 1412.04,663.034 1412.6,660.558 1413.16,645.703 1413.72,662.416 1414.28,649.437 1414.84,586.277 1415.4,606.899 1415.95,593.929 1416.51,600.606 1417.07,620.014 1417.63,624.867 1418.19,629.195 1418.75,633.158 1419.31,636.103 1419.87,637.531 1420.43,659.152 1420.99,676.389 1421.55,692.68 1422.11,710.144 1422.67,725.94 1423.23,755.301 1423.78,753.035 1424.34,748.954 1424.9,742.207 1425.46,672.694 1426.02,688.798 1426.58,667.882 1427.14,669.482 1427.7,668.155 1428.26,686.504 1428.82,686.767 1429.38,665.806 1429.94,667.169 1430.5,666.208 1431.05,668.747 1431.61,671.037 1432.17,638.119 1432.73,621.852 1433.29,640.826 1433.85,642.559 1434.41,660.729 1434.97,665.789 1435.53,638.429 1436.09,673.859 1436.65,653.304 1437.21,655.764 1437.77,658.056 1438.33,663.486 1438.88,664.141 1439.44,680.44 1440,679.978 1440.56,743.584 1441.12,738.054 1441.68,720.887 1442.24,718.587 1442.8,717.716 1443.36,699.397 1443.92,679.997 1444.48,650.923 1445.04,656.017 1445.6,656.542 1446.15,672.79 1446.71,673.855 1447.27,693.377 1447.83,726.576 1448.39,707.92 1448.95,723.789 1449.51,706.989 1450.07,706.719 1450.63,675.544 1451.19,711.521 1451.75,729.401 1452.31,708.453 1452.87,710.364 1453.42,769.792 1453.98,748.817 1454.54,775.096 1455.1,753.917 1455.66,749.379 1456.22,762.277 1456.78,742.319 1457.34,768.931 1457.9,763.82 1458.46,760.626 1459.02,774.201 1459.58,736.877 1460.14,700.716 1460.7,699.766 1461.25,679.448 1461.81,666.632 1462.37,668.277 1462.93,683.225 1463.49,685.338 1464.05,701.963 1464.61,715.258 1465.17,728.5 1465.73,723.198 1466.29,735.874 1466.85,714.94 1467.41,690.673 1467.97,660.522 1468.52,675.592 1469.08,693.772 1469.64,678.906 1470.2,694.714 1470.76,711.621 1471.32,710.786 1471.88,709.308 1472.44,741.872 1473,707.609 1473.56,692.802 1474.12,690.249 1474.68,693.598 1475.24,689.281 1475.79,735.305 1476.35,716.79 1476.91,712.792 1477.47,728.14 1478.03,724.901 1478.59,725.151 1479.15,754.811 1479.71,781.859 1480.27,776.179 1480.83,750.979 1481.39,732.489 1481.95,697.804 1482.51,714.522 1483.07,712.934 1483.62,712.721 1484.18,725.866 1484.74,707.847 1485.3,707.145 1485.86,753.895 1486.42,749.468 1486.98,776.056 1487.54,786.552 1488.1,767.086 1488.66,778.728 1489.22,757.007 1489.78,736.348 1490.34,717.783 1490.89,733.834 1491.45,724.401 1492.01,738.365 1492.57,754.984 1493.13,719.42 1493.69,763.885 1494.25,759.721 1494.81,757.271 1495.37,786.691 1495.93,765.128 1496.49,805.704 1497.05,799.002 1497.61,792.283 1498.16,739.054 1498.72,734.44 1499.28,697.91 1499.84,681.163 1500.4,662.862 1500.96,678.89 1501.52,695.381 1502.08,677.84 1502.64,673.5 1503.2,686.028 1503.76,657.053 1504.32,690.091 1504.88,690.251 1505.44,673.298 1505.99,671.32 1506.55,688.037 1507.11,622.501 1507.67,611.806 1508.23,597.12 1508.79,581.622 1509.35,587.982 1509.91,592.722 1510.47,581.441 1511.03,601.087 1511.59,605.774 1512.15,624.758 1512.71,642.361 1513.26,627.55 1513.82,598.466 1514.38,619.828 1514.94,608.904 1515.5,592.882 1516.06,597.201 1516.62,614.976 1517.18,599.452 1517.74,604.395 1518.3,588.835 1518.86,594.725 1519.42,613.922 1519.98,635.148 1520.53,638.466 1521.09,606.558 1521.65,576.49 1522.21,583.058 1522.77,590.345 1523.33,624.102 1523.89,581.645 1524.45,586.667 1525.01,573.999 1525.57,551.645 1526.13,573.849 1526.69,596.715 1527.25,633.532 1527.81,638.986 1528.36,610.842 1528.92,581.133 1529.48,588.238 1530.04,595.826 1530.6,604.221 1531.16,621.379 1531.72,655.327 1532.28,640.452 1532.84,660.129 1533.4,661.322 1533.96,677.229 1534.52,675.164 1535.08,645.788 1535.63,696.662 1536.19,694.429 1536.75,743.285 1537.31,757.759 1537.87,787.911 1538.43,767.834 1538.99,781.084 1539.55,759.984 1540.11,755.376 1540.67,753.814 1541.23,785.555 1541.79,763.767 1542.35,682.343 1542.9,668.169 1543.46,697.742 1544.02,715.345 1544.58,698.664 1545.14,732.706 1545.7,762.897 1546.26,726.671 1546.82,706.888 1547.38,720.361 1547.94,752.02 1548.5,750.882 1549.06,730.522 1549.62,762.092 1550.18,758.868 1550.73,788.941 1551.29,782.736 1551.85,793.205 1552.41,788.318 1552.97,783.848 1553.53,778.037 1554.09,790.131 1554.65,784.866 1555.21,781.875 1555.77,744.175 1556.33,755.622 1556.89,752.974 1557.45,749.516 1558,747.251 1558.56,710.497 1559.12,693.168 1559.68,708.039 1560.24,724.23 1560.8,705.942 1561.36,689.883 1561.92,640.675 1562.48,658.781 1563.04,661.298 1563.6,663.746 1564.16,647.326 1564.72,636.499 1565.28,605.665 1565.83,576.379 1566.39,612.146 1566.95,617.372 1567.51,620.856 1568.07,644.504 1568.63,633.12 1569.19,602.65 1569.75,594.209 1570.31,614.724 1570.87,637.073 1571.43,625.574 1571.99,616.774 1572.55,654.727 1573.1,674.788 1573.66,647.487 1574.22,667.576 1574.78,635.879 1575.34,652.324 1575.9,672.54 1576.46,674.337 1577.02,661.654 1577.58,680.574 1578.14,711.327 1578.7,696.221 1579.26,696.067 1579.82,712.038 1580.37,709.908 1580.93,709.35 1581.49,709.764 1582.05,725.492 1582.61,756.667 1583.17,706.647 1583.73,684.514 1584.29,701.887 1584.85,717.855 1585.41,717.472 1585.97,731.238 1586.53,714.479 1587.09,662.774 1587.65,678.418 1588.2,675.133 1588.76,677.709 1589.32,683.34 1589.88,700.057 1590.44,729.418 1591,740.352 1591.56,773.422 1592.12,771.35 1592.68,766.148 1593.24,729.385 1593.8,743.621 1594.36,725.24 1594.92,720.966 1595.47,747.616 1596.03,745.115 1596.59,757.668 1597.15,750.668 1597.71,730.825 1598.27,729.18 1598.83,711.675 1599.39,681.135 1599.95,682.069 1600.51,681.23 1601.07,683.101 1601.63,680.521 1602.19,663.523 1602.74,663.655 1603.3,697.918 1603.86,665.556 1604.42,700.079 1604.98,700.2 1605.54,676.464 1606.1,691.506 1606.66,676.475 1607.22,643.179 1607.78,646.155 1608.34,681.088 1608.9,683.284 1609.46,717.406 1610.02,735.673 1610.57,718.622 1611.13,713.115 1611.69,745.73 1612.25,772.154 1612.81,769.165 1613.37,763.569 1613.93,758.563 1614.49,751.767 1615.05,714.676 1615.61,666.396 1616.17,669.955 1616.73,674.444 1617.29,671.682 1617.84,672.449 1618.4,688.787 1618.96,707.275 1619.52,694.046 1620.08,694.771 1620.64,680.769 1621.2,663.939 1621.76,680.917 1622.32,647.359 1622.88,618.358 1623.44,591.857 1624,578.768 1624.56,568.727 1625.11,592.59 1625.67,615.155 1626.23,619.231 1626.79,638.632 1627.35,644.223 1627.91,629.65 1628.47,633.834 1629.03,631.335 1629.59,638.538 1630.15,639.849 1630.71,655.928 1631.27,626.242 1631.83,644.115 1632.39,644.621 1632.94,650.443 1633.5,664.143 1634.06,686.144 1634.62,653.77 1635.18,653.828 1635.74,672.742 1636.3,660.537 1636.86,692.204 1637.42,709.024 1637.98,743.176 1638.54,724.027 1639.1,755.279 1639.66,752.937 1640.21,765.634 1640.77,743.589 1641.33,706.321 1641.89,675.076 1642.45,645.715 1643.01,614.25 1643.57,635.356 1644.13,620.614 1644.69,688.432 1645.25,685.631 1645.81,685.319 1646.37,668.032 1646.93,669.796 1647.48,700.105 1648.04,650.809 1648.6,632.22 1649.16,650.715 1649.72,653.287 1650.28,639.739 1650.84,691.102 1651.4,706.919 1651.96,735.375 1652.52,701.221 1653.08,682.472 1653.64,650.746 1654.2,668.727 1654.76,667.086 1655.31,670.9 1655.87,720.3 1656.43,715.21 1656.99,700.213 1657.55,698.603 1658.11,683.203 1658.67,665.892 1659.23,651.277 1659.79,651.407 1660.35,650.912 1660.91,655.674 1661.47,691.02 1662.03,740.058 1662.58,754.154 1663.14,716.015 1663.7,665.313 1664.26,681.652 1664.82,714.401 1665.38,712.866 1665.94,742.431 1666.5,773.515 1667.06,786.258 1667.62,747.625 1668.18,743.229 1668.74,724.72 1669.3,720.094 1669.85,699.042 1670.41,713.401 1670.97,696.369 1671.53,646.322 1672.09,678.936 1672.65,694.325 1673.21,694.688 1673.77,694.099 1674.33,679.375 1674.89,677.591 1675.45,661.625 1676.01,648.309 1676.57,636.573 1677.13,642.567 1677.68,661.574 1678.24,599.008 1678.8,570.612 1679.36,564.343 1679.92,539.967 1680.48,566.244 1681.04,590.589 1681.6,595.618 1682.16,582.679 1682.72,572.842 1683.28,594.819 1683.84,586.495 1684.4,608.934 1684.95,630.925 1685.51,649.407 1686.07,688.12 1686.63,688.816 1687.19,687.106 1687.75,703.323 1688.31,702.358 1688.87,699.201 1689.43,668.628 1689.99,665.447 1690.55,651.959 1691.11,634.138 1691.67,601.774 1692.23,589.495 1692.78,581.41 1693.34,553.263 1693.9,560.772 1694.46,585.312 1695.02,571.76 1695.58,527.484 1696.14,539.298 1696.7,550.828 1697.26,540.433 1697.82,544.917 1698.38,552.061 1698.94,575.56 1699.5,581.391 1700.05,557.518 1700.61,562.347 1701.17,552.257 1701.73,559.782 1702.29,566.863 1702.85,589.742 1703.41,611.581 1703.97,614.231 1704.53,615.685 1705.09,634.677 1705.65,607.31 1706.21,594.244 1706.77,631.611 1707.32,618.869 1707.88,625.728 1708.44,692.141 1709,710.338 1709.56,730.175 1710.12,695.789 1710.68,713.858 1711.24,710.646 1711.8,709.666 1712.36,708.959 1712.92,690.253 1713.48,708.008 1714.04,739.051 1714.6,736.932 1715.15,747.363 1715.71,746.062 1716.27,740.692 1716.83,751.064 1717.39,778.616 1717.95,770.556 1718.51,766.174 1719.07,792.802 1719.63,819.937 1720.19,815.143 1720.75,808.02 1721.31,771.755 1721.87,768.687 1722.42,795.347 1722.98,772.142 1723.54,783.443 1724.1,805.144 1724.66,798.844 1725.22,762.232 1725.78,748.315 1726.34,728.74 1726.9,695.14 1727.46,727.922 1728.02,708.762 1728.58,695.256 1729.14,693.218 1729.69,659.927 1730.25,711.025 1730.81,722.341 1731.37,690.104 1731.93,722.754 1732.49,719.517 1733.05,719.05 1733.61,733.941 1734.17,746.845 1734.73,738.638 1735.29,752.876 1735.85,748.502 1736.41,742.697 1736.97,708.795 1737.52,689.036 1738.08,719.05 1738.64,718.314 1739.2,699.796 1739.76,696.955 1740.32,693.925 1740.88,707.601 1741.44,723.37 1742,736.184 1742.56,733.032 1743.12,746.164 1743.68,740.218 1744.24,736.689 1744.79,750.89 1745.35,745.567 1745.91,711.927 1746.47,726.799 1747.03,688.17 1747.59,690.838 1748.15,692.217 1748.71,659.108 1749.27,660.343 1749.83,646.067 1750.39,614.865 1750.95,601.99 1751.51,635.794 1752.06,669.905 1752.62,685.814 1753.18,671.33 1753.74,734.02 1754.3,748.224 1754.86,743.1 1755.42,723.003 1755.98,704.928 1756.54,688.007 1757.1,671.303 1757.66,706.046 1758.22,689.22 1758.78,736.476 1759.34,751.895 1759.89,733.881 1760.45,751.452 1761.01,748.842 1761.57,729.17 1762.13,727.412 1762.69,741.354 1763.25,755.863 1763.81,750.067 1764.37,742.82 1764.93,739.816 1765.49,722.481 1766.05,704.58 1766.61,702.139 1767.16,716.908 1767.72,715.123 1768.28,728.053 1768.84,714.366 1769.4,680.573 1769.96,648.527 1770.52,636.685 1771.08,638.88 1771.64,654.458 1772.2,625.161 1772.76,660.117 1773.32,649.067 1773.88,652.446 1774.43,638.162 1774.99,624.327 1775.55,628.307 1776.11,594.763 1776.67,615 1777.23,596.127 1777.79,580.699 1778.35,589.686 1778.91,562.358 1779.47,588.5 1780.03,579.944 1780.59,586.712 1781.15,589.211 1781.71,608.009 1782.26,594.055 1782.82,615.217 1783.38,600.047 1783.94,621.471 1784.5,615.669 1785.06,604.838 1785.62,622.473 1786.18,660.937 1786.74,648.374 1787.3,637.228 1787.86,642.11 1788.42,675.059 1788.98,673.927 1789.53,659.687 1790.09,642.156 1790.65,628.282 1791.21,634.167 1791.77,640.016 1792.33,625.75 1792.89,631.298 1793.45,633.028 1794.01,635.493 1794.57,620.646 1795.13,618.035 1795.69,623.28 1796.25,640.812 1796.8,660.588 1797.36,691.842 1797.92,660.259 1798.48,689.769 1799.04,678.073 1799.6,664.973 1800.16,667.602 1800.72,651.667 1801.28,666.298 1801.84,669.109 1802.4,623.63 1802.96,638.701 1803.52,641.247 1804.08,641.908 1804.63,658.265 1805.19,676.406 1805.75,661.703 1806.31,629.351 1806.87,681.74 1807.43,663.983 1807.99,663.909 1808.55,665.172 1809.11,652.882 1809.67,688.938 1810.23,722.246 1810.79,737.646 1811.35,765.246 1811.9,728.424 1812.46,725.753 1813.02,742.806 1813.58,754.337 1814.14,749.757 1814.7,727.344 1815.26,742.896 1815.82,739.511 1816.38,754.839 1816.94,733.237 1817.5,714.375 1818.06,713.057 1818.62,676.213 1819.18,676.529 1819.73,675.344 1820.29,706.727 1820.85,673.709 1821.41,675.312 1821.97,693.491 1822.53,676.346 1823.09,659.303 1823.65,661.076 1824.21,661.421 1824.77,661.29 1825.33,646.775 1825.89,650.304 1826.45,616.659 1827,620.792 1827.56,639.149 1828.12,624.262 1828.68,626.95 1829.24,645.783 1829.8,680.184 1830.36,714.829 1830.92,708.976 1831.48,658.682 1832.04,645.044 1832.6,645.836 1833.16,618.801 1833.72,622.752 1834.27,656.295 1834.83,688.817 1835.39,688.083 1835.95,687.186 1836.51,686.359 1837.07,684.411 1837.63,669 1838.19,655.425 \"/>\n<path clip-path=\"url(#clip603)\" d=\"M720.247 691.33 L720.806 691.33 L721.365 691.33 L721.924 691.33 L722.484 691.33 L723.043 691.33 L723.602 691.33 L724.161 691.33 L724.721 691.33 L725.28 691.33 L725.839 691.33 L726.398 691.33 L726.958 691.33 L727.517 691.33 L728.076 691.33 L728.635 691.33 L729.195 691.33 L729.754 691.33 L730.313 691.33 L730.872 691.33 L731.432 691.33 L731.991 691.33 L732.55 691.33 L733.109 691.33 L733.669 691.33 L734.228 691.33 L734.787 691.33 L735.346 691.33 L735.906 691.33 L736.465 691.33 L737.024 691.33 L737.583 691.33 L738.143 691.33 L738.702 691.33 L739.261 691.33 L739.82 691.33 L740.38 691.33 L740.939 691.33 L741.498 691.33 L742.057 691.33 L742.617 691.33 L743.176 691.33 L743.735 691.33 L744.294 691.33 L744.854 691.33 L745.413 691.33 L745.972 691.33 L746.531 691.33 L747.091 691.33 L747.65 691.33 L748.209 691.33 L748.768 691.33 L749.328 691.33 L749.887 691.33 L750.446 691.33 L751.005 691.33 L751.565 691.33 L752.124 691.33 L752.683 691.33 L753.242 691.33 L753.802 691.33 L754.361 691.33 L754.92 691.33 L755.479 691.33 L756.039 691.33 L756.598 691.33 L757.157 691.33 L757.716 691.33 L758.276 691.33 L758.835 691.33 L759.394 691.33 L759.953 691.33 L760.513 691.33 L761.072 691.33 L761.631 691.33 L762.19 691.33 L762.75 691.33 L763.309 691.33 L763.868 691.33 L764.427 691.33 L764.987 691.33 L765.546 691.33 L766.105 691.33 L766.664 691.33 L767.224 691.33 L767.783 691.33 L768.342 691.33 L768.901 691.33 L769.461 691.33 L770.02 691.33 L770.579 691.33 L771.138 691.33 L771.698 691.33 L772.257 691.33 L772.816 691.33 L773.375 691.33 L773.935 691.33 L774.494 691.33 L775.053 691.33 L775.612 691.33 L776.172 691.33 L776.731 691.33 L777.29 691.33 L777.849 691.33 L778.409 691.33 L778.968 691.33 L779.527 691.33 L780.086 691.33 L780.646 691.33 L781.205 691.33 L781.764 691.33 L782.323 691.33 L782.883 691.33 L783.442 691.33 L784.001 691.33 L784.56 691.33 L785.12 691.33 L785.679 691.33 L786.238 691.33 L786.797 691.33 L787.357 691.33 L787.916 691.33 L788.475 691.33 L789.034 691.33 L789.594 691.33 L790.153 691.33 L790.712 691.33 L791.271 691.33 L791.831 691.33 L792.39 691.33 L792.949 691.33 L793.508 691.33 L794.068 691.33 L794.627 691.33 L795.186 691.33 L795.745 691.33 L796.305 691.33 L796.864 691.33 L797.423 691.33 L797.982 691.33 L798.542 691.33 L799.101 691.33 L799.66 691.33 L800.219 691.33 L800.779 691.33 L801.338 691.33 L801.897 691.33 L802.456 691.33 L803.016 691.33 L803.575 691.33 L804.134 691.33 L804.693 691.33 L805.253 691.33 L805.812 691.33 L806.371 691.33 L806.931 691.33 L807.49 691.33 L808.049 691.33 L808.608 691.33 L809.168 691.33 L809.727 691.33 L810.286 691.33 L810.845 691.33 L811.405 691.33 L811.964 691.33 L812.523 691.33 L813.082 691.33 L813.642 691.33 L814.201 691.33 L814.76 691.33 L815.319 691.33 L815.879 691.33 L816.438 691.33 L816.997 691.33 L817.556 691.33 L818.116 691.33 L818.675 691.33 L819.234 691.33 L819.793 691.33 L820.353 691.33 L820.912 691.33 L821.471 691.33 L822.03 691.33 L822.59 691.33 L823.149 691.33 L823.708 691.33 L824.267 691.33 L824.827 691.33 L825.386 691.33 L825.945 691.33 L826.504 691.33 L827.064 691.33 L827.623 691.33 L828.182 691.33 L828.741 691.33 L829.301 691.33 L829.86 691.33 L830.419 691.33 L830.978 691.33 L831.538 691.33 L832.097 691.33 L832.656 691.33 L833.215 691.33 L833.775 691.33 L834.334 691.33 L834.893 691.33 L835.452 691.33 L836.012 691.33 L836.571 691.33 L837.13 691.33 L837.689 691.33 L838.249 691.33 L838.808 691.33 L839.367 691.33 L839.926 691.33 L840.486 691.33 L841.045 691.33 L841.604 691.33 L842.163 691.33 L842.723 691.33 L843.282 691.33 L843.841 691.33 L844.4 691.33 L844.96 691.33 L845.519 691.33 L846.078 691.33 L846.637 691.33 L847.197 691.33 L847.756 691.33 L848.315 691.33 L848.874 691.33 L849.434 691.33 L849.993 691.33 L850.552 691.33 L851.111 691.33 L851.671 691.33 L852.23 691.33 L852.789 691.33 L853.348 691.33 L853.908 691.33 L854.467 691.33 L855.026 691.33 L855.585 691.33 L856.145 691.33 L856.704 691.33 L857.263 691.33 L857.822 691.33 L858.382 691.33 L858.941 691.33 L859.5 691.33 L860.059 691.33 L860.619 691.33 L861.178 691.33 L861.737 691.33 L862.296 691.33 L862.856 691.33 L863.415 691.33 L863.974 691.33 L864.533 691.33 L865.093 691.33 L865.652 691.33 L866.211 691.33 L866.77 691.33 L867.33 691.33 L867.889 691.33 L868.448 691.33 L869.007 691.33 L869.567 691.33 L870.126 691.33 L870.685 691.33 L871.244 691.33 L871.804 691.33 L872.363 691.33 L872.922 691.33 L873.481 691.33 L874.041 691.33 L874.6 691.33 L875.159 691.33 L875.718 691.33 L876.278 691.33 L876.837 691.33 L877.396 691.33 L877.955 691.33 L878.515 691.33 L879.074 691.33 L879.633 691.33 L880.192 691.33 L880.752 691.33 L881.311 691.33 L881.87 691.33 L882.429 691.33 L882.989 691.33 L883.548 691.33 L884.107 691.33 L884.666 691.33 L885.226 691.33 L885.785 691.33 L886.344 691.33 L886.903 691.33 L887.463 691.33 L888.022 691.33 L888.581 691.33 L889.14 691.33 L889.7 691.33 L890.259 691.33 L890.818 691.33 L891.377 691.33 L891.937 691.33 L892.496 691.33 L893.055 691.33 L893.614 691.33 L894.174 691.33 L894.733 691.33 L895.292 691.33 L895.851 691.33 L896.411 691.33 L896.97 691.33 L897.529 691.33 L898.088 691.33 L898.648 691.33 L899.207 691.33 L899.766 691.33 L900.325 691.33 L900.885 691.33 L901.444 691.33 L902.003 691.33 L902.562 691.33 L903.122 691.33 L903.681 691.33 L904.24 691.33 L904.799 691.33 L905.359 691.33 L905.918 691.33 L906.477 691.33 L907.036 691.33 L907.596 691.33 L908.155 691.33 L908.714 691.33 L909.273 691.33 L909.833 691.33 L910.392 691.33 L910.951 691.33 L911.51 691.33 L912.07 691.33 L912.629 691.33 L913.188 691.33 L913.747 691.33 L914.307 691.33 L914.866 691.33 L915.425 691.33 L915.984 691.33 L916.544 691.33 L917.103 691.33 L917.662 691.33 L918.221 691.33 L918.781 691.33 L919.34 691.33 L919.899 691.33 L920.458 691.33 L921.018 691.33 L921.577 691.33 L922.136 691.33 L922.695 691.33 L923.255 691.33 L923.814 691.33 L924.373 691.33 L924.932 691.33 L925.492 691.33 L926.051 691.33 L926.61 691.33 L927.169 691.33 L927.729 691.33 L928.288 691.33 L928.847 691.33 L929.406 691.33 L929.966 691.33 L930.525 691.33 L931.084 691.33 L931.644 691.33 L932.203 691.33 L932.762 691.33 L933.321 691.33 L933.881 691.33 L934.44 691.33 L934.999 691.33 L935.558 691.33 L936.118 691.33 L936.677 691.33 L937.236 691.33 L937.795 691.33 L938.355 691.33 L938.914 691.33 L939.473 691.33 L940.032 691.33 L940.592 691.33 L941.151 691.33 L941.71 691.33 L942.269 691.33 L942.829 691.33 L943.388 691.33 L943.947 691.33 L944.506 691.33 L945.066 691.33 L945.625 691.33 L946.184 691.33 L946.743 691.33 L947.303 691.33 L947.862 691.33 L948.421 691.33 L948.98 691.33 L949.54 691.33 L950.099 691.33 L950.658 691.33 L951.217 691.33 L951.777 691.33 L952.336 691.33 L952.895 691.33 L953.454 691.33 L954.014 691.33 L954.573 691.33 L955.132 691.33 L955.691 691.33 L956.251 691.33 L956.81 691.33 L957.369 691.33 L957.928 691.33 L958.488 691.33 L959.047 691.33 L959.606 691.33 L960.165 691.33 L960.725 691.33 L961.284 691.33 L961.843 691.33 L962.402 691.33 L962.962 691.33 L963.521 691.33 L964.08 691.33 L964.639 691.33 L965.199 691.33 L965.758 691.33 L966.317 691.33 L966.876 691.33 L967.436 691.33 L967.995 691.33 L968.554 691.33 L969.113 691.33 L969.673 691.33 L970.232 691.33 L970.791 691.33 L971.35 691.33 L971.91 691.33 L972.469 691.33 L973.028 691.33 L973.587 691.33 L974.147 691.33 L974.706 691.33 L975.265 691.33 L975.824 691.33 L976.384 691.33 L976.943 691.33 L977.502 691.33 L978.061 691.33 L978.621 691.33 L979.18 691.33 L979.739 691.33 L980.298 691.33 L980.858 691.33 L981.417 691.33 L981.976 691.33 L982.535 691.33 L983.095 691.33 L983.654 691.33 L984.213 691.33 L984.772 691.33 L985.332 691.33 L985.891 691.33 L986.45 691.33 L987.009 691.33 L987.569 691.33 L988.128 691.33 L988.687 691.33 L989.246 691.33 L989.806 691.33 L990.365 691.33 L990.924 691.33 L991.483 691.33 L992.043 691.33 L992.602 691.33 L993.161 691.33 L993.72 691.33 L994.28 691.33 L994.839 691.33 L995.398 691.33 L995.957 691.33 L996.517 691.33 L997.076 691.33 L997.635 691.33 L998.194 691.33 L998.754 691.33 L999.313 691.33 L999.872 691.33 L1000.43 691.33 L1000.99 691.33 L1001.55 691.33 L1002.11 691.33 L1002.67 691.33 L1003.23 691.33 L1003.79 691.33 L1004.35 691.33 L1004.91 691.33 L1005.46 691.33 L1006.02 691.33 L1006.58 691.33 L1007.14 691.33 L1007.7 691.33 L1008.26 691.33 L1008.82 691.33 L1009.38 691.33 L1009.94 691.33 L1010.5 691.33 L1011.06 691.33 L1011.62 691.33 L1012.18 691.33 L1012.73 691.33 L1013.29 691.33 L1013.85 691.33 L1014.41 691.33 L1014.97 691.33 L1015.53 691.33 L1016.09 691.33 L1016.65 691.33 L1017.21 691.33 L1017.77 691.33 L1018.33 691.33 L1018.89 691.33 L1019.45 691.33 L1020.01 691.33 L1020.56 691.33 L1021.12 691.33 L1021.68 691.33 L1022.24 691.33 L1022.8 691.33 L1023.36 691.33 L1023.92 691.33 L1024.48 691.33 L1025.04 691.33 L1025.6 691.33 L1026.16 691.33 L1026.72 691.33 L1027.28 691.33 L1027.83 691.33 L1028.39 691.33 L1028.95 691.33 L1029.51 691.33 L1030.07 691.33 L1030.63 691.33 L1031.19 691.33 L1031.75 691.33 L1032.31 691.33 L1032.87 691.33 L1033.43 691.33 L1033.99 691.33 L1034.55 691.33 L1035.1 691.33 L1035.66 691.33 L1036.22 691.33 L1036.78 691.33 L1037.34 691.33 L1037.9 691.33 L1038.46 691.33 L1039.02 691.33 L1039.58 691.33 L1040.14 691.33 L1040.7 691.33 L1041.26 691.33 L1041.82 691.33 L1042.38 691.33 L1042.93 691.33 L1043.49 691.33 L1044.05 691.33 L1044.61 691.33 L1045.17 691.33 L1045.73 691.33 L1046.29 691.33 L1046.85 691.33 L1047.41 691.33 L1047.97 691.33 L1048.53 691.33 L1049.09 691.33 L1049.65 691.33 L1050.2 691.33 L1050.76 691.33 L1051.32 691.33 L1051.88 691.33 L1052.44 691.33 L1053 691.33 L1053.56 691.33 L1054.12 691.33 L1054.68 691.33 L1055.24 691.33 L1055.8 691.33 L1056.36 691.33 L1056.92 691.33 L1057.48 691.33 L1058.03 691.33 L1058.59 691.33 L1059.15 691.33 L1059.71 691.33 L1060.27 691.33 L1060.83 691.33 L1061.39 691.33 L1061.95 691.33 L1062.51 691.33 L1063.07 691.33 L1063.63 691.33 L1064.19 691.33 L1064.75 691.33 L1065.3 691.33 L1065.86 691.33 L1066.42 691.33 L1066.98 691.33 L1067.54 691.33 L1068.1 691.33 L1068.66 691.33 L1069.22 691.33 L1069.78 691.33 L1070.34 691.33 L1070.9 691.33 L1071.46 691.33 L1072.02 691.33 L1072.57 691.33 L1073.13 691.33 L1073.69 691.33 L1074.25 691.33 L1074.81 691.33 L1075.37 691.33 L1075.93 691.33 L1076.49 691.33 L1077.05 691.33 L1077.61 691.33 L1078.17 691.33 L1078.73 691.33 L1079.29 691.33 L1079.85 691.33 L1080.4 691.33 L1080.96 691.33 L1081.52 691.33 L1082.08 691.33 L1082.64 691.33 L1083.2 691.33 L1083.76 691.33 L1084.32 691.33 L1084.88 691.33 L1085.44 691.33 L1086 691.33 L1086.56 691.33 L1087.12 691.33 L1087.67 691.33 L1088.23 691.33 L1088.79 691.33 L1089.35 691.33 L1089.91 691.33 L1090.47 691.33 L1091.03 691.33 L1091.59 691.33 L1092.15 691.33 L1092.71 691.33 L1093.27 691.33 L1093.83 691.33 L1094.39 691.33 L1094.94 691.33 L1095.5 691.33 L1096.06 691.33 L1096.62 691.33 L1097.18 691.33 L1097.74 691.33 L1098.3 691.33 L1098.86 691.33 L1099.42 691.33 L1099.98 691.33 L1100.54 691.33 L1101.1 691.33 L1101.66 691.33 L1102.22 691.33 L1102.77 691.33 L1103.33 691.33 L1103.89 691.33 L1104.45 691.33 L1105.01 691.33 L1105.57 691.33 L1106.13 691.33 L1106.69 691.33 L1107.25 691.33 L1107.81 691.33 L1108.37 691.33 L1108.93 691.33 L1109.49 691.33 L1110.04 691.33 L1110.6 691.33 L1111.16 691.33 L1111.72 691.33 L1112.28 691.33 L1112.84 691.33 L1113.4 691.33 L1113.96 691.33 L1114.52 691.33 L1115.08 691.33 L1115.64 691.33 L1116.2 691.33 L1116.76 691.33 L1117.31 691.33 L1117.87 691.33 L1118.43 691.33 L1118.99 691.33 L1119.55 691.33 L1120.11 691.33 L1120.67 691.33 L1121.23 691.33 L1121.79 691.33 L1122.35 691.33 L1122.91 691.33 L1123.47 691.33 L1124.03 691.33 L1124.59 691.33 L1125.14 691.33 L1125.7 691.33 L1126.26 691.33 L1126.82 691.33 L1127.38 691.33 L1127.94 691.33 L1128.5 691.33 L1129.06 691.33 L1129.62 691.33 L1130.18 691.33 L1130.74 691.33 L1131.3 691.33 L1131.86 691.33 L1132.41 691.33 L1132.97 691.33 L1133.53 691.33 L1134.09 691.33 L1134.65 691.33 L1135.21 691.33 L1135.77 691.33 L1136.33 691.33 L1136.89 691.33 L1137.45 691.33 L1138.01 691.33 L1138.57 691.33 L1139.13 691.33 L1139.68 691.33 L1140.24 691.33 L1140.8 691.33 L1141.36 691.33 L1141.92 691.33 L1142.48 691.33 L1143.04 691.33 L1143.6 691.33 L1144.16 691.33 L1144.72 691.33 L1145.28 691.33 L1145.84 691.33 L1146.4 691.33 L1146.96 691.33 L1147.51 691.33 L1148.07 691.33 L1148.63 691.33 L1149.19 691.33 L1149.75 691.33 L1150.31 691.33 L1150.87 691.33 L1151.43 691.33 L1151.99 691.33 L1152.55 691.33 L1153.11 691.33 L1153.67 691.33 L1154.23 691.33 L1154.78 691.33 L1155.34 691.33 L1155.9 691.33 L1156.46 691.33 L1157.02 691.33 L1157.58 691.33 L1158.14 691.33 L1158.7 691.33 L1159.26 691.33 L1159.82 691.33 L1160.38 691.33 L1160.94 691.33 L1161.5 691.33 L1162.05 691.33 L1162.61 691.33 L1163.17 691.33 L1163.73 691.33 L1164.29 691.33 L1164.85 691.33 L1165.41 691.33 L1165.97 691.33 L1166.53 691.33 L1167.09 691.33 L1167.65 691.33 L1168.21 691.33 L1168.77 691.33 L1169.33 691.33 L1169.88 691.33 L1170.44 691.33 L1171 691.33 L1171.56 691.33 L1172.12 691.33 L1172.68 691.33 L1173.24 691.33 L1173.8 691.33 L1174.36 691.33 L1174.92 691.33 L1175.48 691.33 L1176.04 691.33 L1176.6 691.33 L1177.15 691.33 L1177.71 691.33 L1178.27 691.33 L1178.83 691.33 L1179.39 691.33 L1179.95 691.33 L1180.51 691.33 L1181.07 691.33 L1181.63 691.33 L1182.19 691.33 L1182.75 691.33 L1183.31 691.33 L1183.87 691.33 L1184.43 691.33 L1184.98 691.33 L1185.54 691.33 L1186.1 691.33 L1186.66 691.33 L1187.22 691.33 L1187.78 691.33 L1188.34 691.33 L1188.9 691.33 L1189.46 691.33 L1190.02 691.33 L1190.58 691.33 L1191.14 691.33 L1191.7 691.33 L1192.25 691.33 L1192.81 691.33 L1193.37 691.33 L1193.93 691.33 L1194.49 691.33 L1195.05 691.33 L1195.61 691.33 L1196.17 691.33 L1196.73 691.33 L1197.29 691.33 L1197.85 691.33 L1198.41 691.33 L1198.97 691.33 L1199.52 691.33 L1200.08 691.33 L1200.64 691.33 L1201.2 691.33 L1201.76 691.33 L1202.32 691.33 L1202.88 691.33 L1203.44 691.33 L1204 691.33 L1204.56 691.33 L1205.12 691.33 L1205.68 691.33 L1206.24 691.33 L1206.8 691.33 L1207.35 691.33 L1207.91 691.33 L1208.47 691.33 L1209.03 691.33 L1209.59 691.33 L1210.15 691.33 L1210.71 691.33 L1211.27 691.33 L1211.83 691.33 L1212.39 691.33 L1212.95 691.33 L1213.51 691.33 L1214.07 691.33 L1214.62 691.33 L1215.18 691.33 L1215.74 691.33 L1216.3 691.33 L1216.86 691.33 L1217.42 691.33 L1217.98 691.33 L1218.54 691.33 L1219.1 691.33 L1219.66 691.33 L1220.22 691.33 L1220.78 691.33 L1221.34 691.33 L1221.89 691.33 L1222.45 691.33 L1223.01 691.33 L1223.57 691.33 L1224.13 691.33 L1224.69 691.33 L1225.25 691.33 L1225.81 691.33 L1226.37 691.33 L1226.93 691.33 L1227.49 691.33 L1228.05 691.33 L1228.61 691.33 L1229.17 691.33 L1229.72 691.33 L1230.28 691.33 L1230.84 691.33 L1231.4 691.33 L1231.96 691.33 L1232.52 691.33 L1233.08 691.33 L1233.64 691.33 L1234.2 691.33 L1234.76 691.33 L1235.32 691.33 L1235.88 691.33 L1236.44 691.33 L1236.99 691.33 L1237.55 691.33 L1238.11 691.33 L1238.67 691.33 L1239.23 691.33 L1239.79 691.33 L1240.35 691.33 L1240.91 691.33 L1241.47 691.33 L1242.03 691.33 L1242.59 691.33 L1243.15 691.33 L1243.71 691.33 L1244.26 691.33 L1244.82 691.33 L1245.38 691.33 L1245.94 691.33 L1246.5 691.33 L1247.06 691.33 L1247.62 691.33 L1248.18 691.33 L1248.74 691.33 L1249.3 691.33 L1249.86 691.33 L1250.42 691.33 L1250.98 691.33 L1251.54 691.33 L1252.09 691.33 L1252.65 691.33 L1253.21 691.33 L1253.77 691.33 L1254.33 691.33 L1254.89 691.33 L1255.45 691.33 L1256.01 691.33 L1256.57 691.33 L1257.13 691.33 L1257.69 691.33 L1258.25 691.33 L1258.81 691.33 L1259.36 691.33 L1259.92 691.33 L1260.48 691.33 L1261.04 691.33 L1261.6 691.33 L1262.16 691.33 L1262.72 691.33 L1263.28 691.33 L1263.84 691.33 L1264.4 691.33 L1264.96 691.33 L1265.52 691.33 L1266.08 691.33 L1266.63 691.33 L1267.19 691.33 L1267.75 691.33 L1268.31 691.33 L1268.87 691.33 L1269.43 691.33 L1269.99 691.33 L1270.55 691.33 L1271.11 691.33 L1271.67 691.33 L1272.23 691.33 L1272.79 691.33 L1273.35 691.33 L1273.91 691.33 L1274.46 691.33 L1275.02 691.33 L1275.58 691.33 L1276.14 691.33 L1276.7 691.33 L1277.26 691.33 L1277.82 691.33 L1278.38 691.33 L1278.94 691.33 L1279.5 691.33 L1280.06 691.33 L1280.62 691.33 L1281.18 691.33 L1281.73 691.33 L1282.29 691.33 L1282.85 691.33 L1283.41 691.33 L1283.97 691.33 L1284.53 691.33 L1285.09 691.33 L1285.65 691.33 L1286.21 691.33 L1286.77 691.33 L1287.33 691.33 L1287.89 691.33 L1288.45 691.33 L1289 691.33 L1289.56 691.33 L1290.12 691.33 L1290.68 691.33 L1291.24 691.33 L1291.8 691.33 L1292.36 691.33 L1292.92 691.33 L1293.48 691.33 L1294.04 691.33 L1294.6 691.33 L1295.16 691.33 L1295.72 691.33 L1296.28 691.33 L1296.83 691.33 L1297.39 691.33 L1297.95 691.33 L1298.51 691.33 L1299.07 691.33 L1299.63 691.33 L1300.19 691.33 L1300.75 691.33 L1301.31 691.33 L1301.87 691.33 L1302.43 691.33 L1302.99 691.33 L1303.55 691.33 L1304.1 691.33 L1304.66 691.33 L1305.22 691.33 L1305.78 691.33 L1306.34 691.33 L1306.9 691.33 L1307.46 691.33 L1308.02 691.33 L1308.58 691.33 L1309.14 691.33 L1309.7 691.33 L1310.26 691.33 L1310.82 691.33 L1311.38 691.33 L1311.93 691.33 L1312.49 691.33 L1313.05 691.33 L1313.61 691.33 L1314.17 691.33 L1314.73 691.33 L1315.29 691.33 L1315.85 691.33 L1316.41 691.33 L1316.97 691.33 L1317.53 691.33 L1318.09 691.33 L1318.65 691.33 L1319.2 691.33 L1319.76 691.33 L1320.32 691.33 L1320.88 691.33 L1321.44 691.33 L1322 691.33 L1322.56 691.33 L1323.12 691.33 L1323.68 691.33 L1324.24 691.33 L1324.8 691.33 L1325.36 691.33 L1325.92 691.33 L1326.47 691.33 L1327.03 691.33 L1327.59 691.33 L1328.15 691.33 L1328.71 691.33 L1329.27 691.33 L1329.83 691.33 L1330.39 691.33 L1330.95 691.33 L1331.51 691.33 L1332.07 691.33 L1332.63 691.33 L1333.19 691.33 L1333.75 691.33 L1334.3 691.33 L1334.86 691.33 L1335.42 691.33 L1335.98 691.33 L1336.54 691.33 L1337.1 691.33 L1337.66 691.33 L1338.22 691.33 L1338.78 691.33 L1339.34 691.33 L1339.9 691.33 L1340.46 691.33 L1341.02 691.33 L1341.57 691.33 L1342.13 691.33 L1342.69 691.33 L1343.25 691.33 L1343.81 691.33 L1344.37 691.33 L1344.93 691.33 L1345.49 691.33 L1346.05 691.33 L1346.61 691.33 L1347.17 691.33 L1347.73 691.33 L1348.29 691.33 L1348.84 691.33 L1349.4 691.33 L1349.96 691.33 L1350.52 691.33 L1351.08 691.33 L1351.64 691.33 L1352.2 691.33 L1352.76 691.33 L1353.32 691.33 L1353.88 691.33 L1354.44 691.33 L1355 691.33 L1355.56 691.33 L1356.12 691.33 L1356.67 691.33 L1357.23 691.33 L1357.79 691.33 L1358.35 691.33 L1358.91 691.33 L1359.47 691.33 L1360.03 691.33 L1360.59 691.33 L1361.15 691.33 L1361.71 691.33 L1362.27 691.33 L1362.83 691.33 L1363.39 691.33 L1363.94 691.33 L1364.5 691.33 L1365.06 691.33 L1365.62 691.33 L1366.18 691.33 L1366.74 691.33 L1367.3 691.33 L1367.86 691.33 L1368.42 691.33 L1368.98 691.33 L1369.54 691.33 L1370.1 691.33 L1370.66 691.33 L1371.21 691.33 L1371.77 691.33 L1372.33 691.33 L1372.89 691.33 L1373.45 691.33 L1374.01 691.33 L1374.57 691.33 L1375.13 691.33 L1375.69 691.33 L1376.25 691.33 L1376.81 691.33 L1377.37 691.33 L1377.93 691.33 L1378.49 691.33 L1379.04 691.33 L1379.6 691.33 L1380.16 691.33 L1380.72 691.33 L1381.28 691.33 L1381.84 691.33 L1382.4 691.33 L1382.96 691.33 L1383.52 691.33 L1384.08 691.33 L1384.64 691.33 L1385.2 691.33 L1385.76 691.33 L1386.31 691.33 L1386.87 691.33 L1387.43 691.33 L1387.99 691.33 L1388.55 691.33 L1389.11 691.33 L1389.67 691.33 L1390.23 691.33 L1390.79 691.33 L1391.35 691.33 L1391.91 691.33 L1392.47 691.33 L1393.03 691.33 L1393.58 691.33 L1394.14 691.33 L1394.7 691.33 L1395.26 691.33 L1395.82 691.33 L1396.38 691.33 L1396.94 691.33 L1397.5 691.33 L1398.06 691.33 L1398.62 691.33 L1399.18 691.33 L1399.74 691.33 L1400.3 691.33 L1400.86 691.33 L1401.41 691.33 L1401.97 691.33 L1402.53 691.33 L1403.09 691.33 L1403.65 691.33 L1404.21 691.33 L1404.77 691.33 L1405.33 691.33 L1405.89 691.33 L1406.45 691.33 L1407.01 691.33 L1407.57 691.33 L1408.13 691.33 L1408.68 691.33 L1409.24 691.33 L1409.8 691.33 L1410.36 691.33 L1410.92 691.33 L1411.48 691.33 L1412.04 691.33 L1412.6 691.33 L1413.16 691.33 L1413.72 691.33 L1414.28 691.33 L1414.84 691.33 L1415.4 691.33 L1415.95 691.33 L1416.51 691.33 L1417.07 691.33 L1417.63 691.33 L1418.19 691.33 L1418.75 691.33 L1419.31 691.33 L1419.87 691.33 L1420.43 691.33 L1420.99 691.33 L1421.55 691.33 L1422.11 691.33 L1422.67 691.33 L1423.23 691.33 L1423.78 691.33 L1424.34 691.33 L1424.9 691.33 L1425.46 691.33 L1426.02 691.33 L1426.58 691.33 L1427.14 691.33 L1427.7 691.33 L1428.26 691.33 L1428.82 691.33 L1429.38 691.33 L1429.94 691.33 L1430.5 691.33 L1431.05 691.33 L1431.61 691.33 L1432.17 691.33 L1432.73 691.33 L1433.29 691.33 L1433.85 691.33 L1434.41 691.33 L1434.97 691.33 L1435.53 691.33 L1436.09 691.33 L1436.65 691.33 L1437.21 691.33 L1437.77 691.33 L1438.33 691.33 L1438.88 691.33 L1439.44 691.33 L1440 691.33 L1440.56 691.33 L1441.12 691.33 L1441.68 691.33 L1442.24 691.33 L1442.8 691.33 L1443.36 691.33 L1443.92 691.33 L1444.48 691.33 L1445.04 691.33 L1445.6 691.33 L1446.15 691.33 L1446.71 691.33 L1447.27 691.33 L1447.83 691.33 L1448.39 691.33 L1448.95 691.33 L1449.51 691.33 L1450.07 691.33 L1450.63 691.33 L1451.19 691.33 L1451.75 691.33 L1452.31 691.33 L1452.87 691.33 L1453.42 691.33 L1453.98 691.33 L1454.54 691.33 L1455.1 691.33 L1455.66 691.33 L1456.22 691.33 L1456.78 691.33 L1457.34 691.33 L1457.9 691.33 L1458.46 691.33 L1459.02 691.33 L1459.58 691.33 L1460.14 691.33 L1460.7 691.33 L1461.25 691.33 L1461.81 691.33 L1462.37 691.33 L1462.93 691.33 L1463.49 691.33 L1464.05 691.33 L1464.61 691.33 L1465.17 691.33 L1465.73 691.33 L1466.29 691.33 L1466.85 691.33 L1467.41 691.33 L1467.97 691.33 L1468.52 691.33 L1469.08 691.33 L1469.64 691.33 L1470.2 691.33 L1470.76 691.33 L1471.32 691.33 L1471.88 691.33 L1472.44 691.33 L1473 691.33 L1473.56 691.33 L1474.12 691.33 L1474.68 691.33 L1475.24 691.33 L1475.79 691.33 L1476.35 691.33 L1476.91 691.33 L1477.47 691.33 L1478.03 691.33 L1478.59 691.33 L1479.15 691.33 L1479.71 691.33 L1480.27 691.33 L1480.83 691.33 L1481.39 691.33 L1481.95 691.33 L1482.51 691.33 L1483.07 691.33 L1483.62 691.33 L1484.18 691.33 L1484.74 691.33 L1485.3 691.33 L1485.86 691.33 L1486.42 691.33 L1486.98 691.33 L1487.54 691.33 L1488.1 691.33 L1488.66 691.33 L1489.22 691.33 L1489.78 691.33 L1490.34 691.33 L1490.89 691.33 L1491.45 691.33 L1492.01 691.33 L1492.57 691.33 L1493.13 691.33 L1493.69 691.33 L1494.25 691.33 L1494.81 691.33 L1495.37 691.33 L1495.93 691.33 L1496.49 691.33 L1497.05 691.33 L1497.61 691.33 L1498.16 691.33 L1498.72 691.33 L1499.28 691.33 L1499.84 691.33 L1500.4 691.33 L1500.96 691.33 L1501.52 691.33 L1502.08 691.33 L1502.64 691.33 L1503.2 691.33 L1503.76 691.33 L1504.32 691.33 L1504.88 691.33 L1505.44 691.33 L1505.99 691.33 L1506.55 691.33 L1507.11 691.33 L1507.67 691.33 L1508.23 691.33 L1508.79 691.33 L1509.35 691.33 L1509.91 691.33 L1510.47 691.33 L1511.03 691.33 L1511.59 691.33 L1512.15 691.33 L1512.71 691.33 L1513.26 691.33 L1513.82 691.33 L1514.38 691.33 L1514.94 691.33 L1515.5 691.33 L1516.06 691.33 L1516.62 691.33 L1517.18 691.33 L1517.74 691.33 L1518.3 691.33 L1518.86 691.33 L1519.42 691.33 L1519.98 691.33 L1520.53 691.33 L1521.09 691.33 L1521.65 691.33 L1522.21 691.33 L1522.77 691.33 L1523.33 691.33 L1523.89 691.33 L1524.45 691.33 L1525.01 691.33 L1525.57 691.33 L1526.13 691.33 L1526.69 691.33 L1527.25 691.33 L1527.81 691.33 L1528.36 691.33 L1528.92 691.33 L1529.48 691.33 L1530.04 691.33 L1530.6 691.33 L1531.16 691.33 L1531.72 691.33 L1532.28 691.33 L1532.84 691.33 L1533.4 691.33 L1533.96 691.33 L1534.52 691.33 L1535.08 691.33 L1535.63 691.33 L1536.19 691.33 L1536.75 691.33 L1537.31 691.33 L1537.87 691.33 L1538.43 691.33 L1538.99 691.33 L1539.55 691.33 L1540.11 691.33 L1540.67 691.33 L1541.23 691.33 L1541.79 691.33 L1542.35 691.33 L1542.9 691.33 L1543.46 691.33 L1544.02 691.33 L1544.58 691.33 L1545.14 691.33 L1545.7 691.33 L1546.26 691.33 L1546.82 691.33 L1547.38 691.33 L1547.94 691.33 L1548.5 691.33 L1549.06 691.33 L1549.62 691.33 L1550.18 691.33 L1550.73 691.33 L1551.29 691.33 L1551.85 691.33 L1552.41 691.33 L1552.97 691.33 L1553.53 691.33 L1554.09 691.33 L1554.65 691.33 L1555.21 691.33 L1555.77 691.33 L1556.33 691.33 L1556.89 691.33 L1557.45 691.33 L1558 691.33 L1558.56 691.33 L1559.12 691.33 L1559.68 691.33 L1560.24 691.33 L1560.8 691.33 L1561.36 691.33 L1561.92 691.33 L1562.48 691.33 L1563.04 691.33 L1563.6 691.33 L1564.16 691.33 L1564.72 691.33 L1565.28 691.33 L1565.83 691.33 L1566.39 691.33 L1566.95 691.33 L1567.51 691.33 L1568.07 691.33 L1568.63 691.33 L1569.19 691.33 L1569.75 691.33 L1570.31 691.33 L1570.87 691.33 L1571.43 691.33 L1571.99 691.33 L1572.55 691.33 L1573.1 691.33 L1573.66 691.33 L1574.22 691.33 L1574.78 691.33 L1575.34 691.33 L1575.9 691.33 L1576.46 691.33 L1577.02 691.33 L1577.58 691.33 L1578.14 691.33 L1578.7 691.33 L1579.26 691.33 L1579.82 691.33 L1580.37 691.33 L1580.93 691.33 L1581.49 691.33 L1582.05 691.33 L1582.61 691.33 L1583.17 691.33 L1583.73 691.33 L1584.29 691.33 L1584.85 691.33 L1585.41 691.33 L1585.97 691.33 L1586.53 691.33 L1587.09 691.33 L1587.65 691.33 L1588.2 691.33 L1588.76 691.33 L1589.32 691.33 L1589.88 691.33 L1590.44 691.33 L1591 691.33 L1591.56 691.33 L1592.12 691.33 L1592.68 691.33 L1593.24 691.33 L1593.8 691.33 L1594.36 691.33 L1594.92 691.33 L1595.47 691.33 L1596.03 691.33 L1596.59 691.33 L1597.15 691.33 L1597.71 691.33 L1598.27 691.33 L1598.83 691.33 L1599.39 691.33 L1599.95 691.33 L1600.51 691.33 L1601.07 691.33 L1601.63 691.33 L1602.19 691.33 L1602.74 691.33 L1603.3 691.33 L1603.86 691.33 L1604.42 691.33 L1604.98 691.33 L1605.54 691.33 L1606.1 691.33 L1606.66 691.33 L1607.22 691.33 L1607.78 691.33 L1608.34 691.33 L1608.9 691.33 L1609.46 691.33 L1610.02 691.33 L1610.57 691.33 L1611.13 691.33 L1611.69 691.33 L1612.25 691.33 L1612.81 691.33 L1613.37 691.33 L1613.93 691.33 L1614.49 691.33 L1615.05 691.33 L1615.61 691.33 L1616.17 691.33 L1616.73 691.33 L1617.29 691.33 L1617.84 691.33 L1618.4 691.33 L1618.96 691.33 L1619.52 691.33 L1620.08 691.33 L1620.64 691.33 L1621.2 691.33 L1621.76 691.33 L1622.32 691.33 L1622.88 691.33 L1623.44 691.33 L1624 691.33 L1624.56 691.33 L1625.11 691.33 L1625.67 691.33 L1626.23 691.33 L1626.79 691.33 L1627.35 691.33 L1627.91 691.33 L1628.47 691.33 L1629.03 691.33 L1629.59 691.33 L1630.15 691.33 L1630.71 691.33 L1631.27 691.33 L1631.83 691.33 L1632.39 691.33 L1632.94 691.33 L1633.5 691.33 L1634.06 691.33 L1634.62 691.33 L1635.18 691.33 L1635.74 691.33 L1636.3 691.33 L1636.86 691.33 L1637.42 691.33 L1637.98 691.33 L1638.54 691.33 L1639.1 691.33 L1639.66 691.33 L1640.21 691.33 L1640.77 691.33 L1641.33 691.33 L1641.89 691.33 L1642.45 691.33 L1643.01 691.33 L1643.57 691.33 L1644.13 691.33 L1644.69 691.33 L1645.25 691.33 L1645.81 691.33 L1646.37 691.33 L1646.93 691.33 L1647.48 691.33 L1648.04 691.33 L1648.6 691.33 L1649.16 691.33 L1649.72 691.33 L1650.28 691.33 L1650.84 691.33 L1651.4 691.33 L1651.96 691.33 L1652.52 691.33 L1653.08 691.33 L1653.64 691.33 L1654.2 691.33 L1654.76 691.33 L1655.31 691.33 L1655.87 691.33 L1656.43 691.33 L1656.99 691.33 L1657.55 691.33 L1658.11 691.33 L1658.67 691.33 L1659.23 691.33 L1659.79 691.33 L1660.35 691.33 L1660.91 691.33 L1661.47 691.33 L1662.03 691.33 L1662.58 691.33 L1663.14 691.33 L1663.7 691.33 L1664.26 691.33 L1664.82 691.33 L1665.38 691.33 L1665.94 691.33 L1666.5 691.33 L1667.06 691.33 L1667.62 691.33 L1668.18 691.33 L1668.74 691.33 L1669.3 691.33 L1669.85 691.33 L1670.41 691.33 L1670.97 691.33 L1671.53 691.33 L1672.09 691.33 L1672.65 691.33 L1673.21 691.33 L1673.77 691.33 L1674.33 691.33 L1674.89 691.33 L1675.45 691.33 L1676.01 691.33 L1676.57 691.33 L1677.13 691.33 L1677.68 691.33 L1678.24 691.33 L1678.8 691.33 L1679.36 691.33 L1679.92 691.33 L1680.48 691.33 L1681.04 691.33 L1681.6 691.33 L1682.16 691.33 L1682.72 691.33 L1683.28 691.33 L1683.84 691.33 L1684.4 691.33 L1684.95 691.33 L1685.51 691.33 L1686.07 691.33 L1686.63 691.33 L1687.19 691.33 L1687.75 691.33 L1688.31 691.33 L1688.87 691.33 L1689.43 691.33 L1689.99 691.33 L1690.55 691.33 L1691.11 691.33 L1691.67 691.33 L1692.23 691.33 L1692.78 691.33 L1693.34 691.33 L1693.9 691.33 L1694.46 691.33 L1695.02 691.33 L1695.58 691.33 L1696.14 691.33 L1696.7 691.33 L1697.26 691.33 L1697.82 691.33 L1698.38 691.33 L1698.94 691.33 L1699.5 691.33 L1700.05 691.33 L1700.61 691.33 L1701.17 691.33 L1701.73 691.33 L1702.29 691.33 L1702.85 691.33 L1703.41 691.33 L1703.97 691.33 L1704.53 691.33 L1705.09 691.33 L1705.65 691.33 L1706.21 691.33 L1706.77 691.33 L1707.32 691.33 L1707.88 691.33 L1708.44 691.33 L1709 691.33 L1709.56 691.33 L1710.12 691.33 L1710.68 691.33 L1711.24 691.33 L1711.8 691.33 L1712.36 691.33 L1712.92 691.33 L1713.48 691.33 L1714.04 691.33 L1714.6 691.33 L1715.15 691.33 L1715.71 691.33 L1716.27 691.33 L1716.83 691.33 L1717.39 691.33 L1717.95 691.33 L1718.51 691.33 L1719.07 691.33 L1719.63 691.33 L1720.19 691.33 L1720.75 691.33 L1721.31 691.33 L1721.87 691.33 L1722.42 691.33 L1722.98 691.33 L1723.54 691.33 L1724.1 691.33 L1724.66 691.33 L1725.22 691.33 L1725.78 691.33 L1726.34 691.33 L1726.9 691.33 L1727.46 691.33 L1728.02 691.33 L1728.58 691.33 L1729.14 691.33 L1729.69 691.33 L1730.25 691.33 L1730.81 691.33 L1731.37 691.33 L1731.93 691.33 L1732.49 691.33 L1733.05 691.33 L1733.61 691.33 L1734.17 691.33 L1734.73 691.33 L1735.29 691.33 L1735.85 691.33 L1736.41 691.33 L1736.97 691.33 L1737.52 691.33 L1738.08 691.33 L1738.64 691.33 L1739.2 691.33 L1739.76 691.33 L1740.32 691.33 L1740.88 691.33 L1741.44 691.33 L1742 691.33 L1742.56 691.33 L1743.12 691.33 L1743.68 691.33 L1744.24 691.33 L1744.79 691.33 L1745.35 691.33 L1745.91 691.33 L1746.47 691.33 L1747.03 691.33 L1747.59 691.33 L1748.15 691.33 L1748.71 691.33 L1749.27 691.33 L1749.83 691.33 L1750.39 691.33 L1750.95 691.33 L1751.51 691.33 L1752.06 691.33 L1752.62 691.33 L1753.18 691.33 L1753.74 691.33 L1754.3 691.33 L1754.86 691.33 L1755.42 691.33 L1755.98 691.33 L1756.54 691.33 L1757.1 691.33 L1757.66 691.33 L1758.22 691.33 L1758.78 691.33 L1759.34 691.33 L1759.89 691.33 L1760.45 691.33 L1761.01 691.33 L1761.57 691.33 L1762.13 691.33 L1762.69 691.33 L1763.25 691.33 L1763.81 691.33 L1764.37 691.33 L1764.93 691.33 L1765.49 691.33 L1766.05 691.33 L1766.61 691.33 L1767.16 691.33 L1767.72 691.33 L1768.28 691.33 L1768.84 691.33 L1769.4 691.33 L1769.96 691.33 L1770.52 691.33 L1771.08 691.33 L1771.64 691.33 L1772.2 691.33 L1772.76 691.33 L1773.32 691.33 L1773.88 691.33 L1774.43 691.33 L1774.99 691.33 L1775.55 691.33 L1776.11 691.33 L1776.67 691.33 L1777.23 691.33 L1777.79 691.33 L1778.35 691.33 L1778.91 691.33 L1779.47 691.33 L1780.03 691.33 L1780.59 691.33 L1781.15 691.33 L1781.71 691.33 L1782.26 691.33 L1782.82 691.33 L1783.38 691.33 L1783.94 691.33 L1784.5 691.33 L1785.06 691.33 L1785.62 691.33 L1786.18 691.33 L1786.74 691.33 L1787.3 691.33 L1787.86 691.33 L1788.42 691.33 L1788.98 691.33 L1789.53 691.33 L1790.09 691.33 L1790.65 691.33 L1791.21 691.33 L1791.77 691.33 L1792.33 691.33 L1792.89 691.33 L1793.45 691.33 L1794.01 691.33 L1794.57 691.33 L1795.13 691.33 L1795.69 691.33 L1796.25 691.33 L1796.8 691.33 L1797.36 691.33 L1797.92 691.33 L1798.48 691.33 L1799.04 691.33 L1799.6 691.33 L1800.16 691.33 L1800.72 691.33 L1801.28 691.33 L1801.84 691.33 L1802.4 691.33 L1802.96 691.33 L1803.52 691.33 L1804.08 691.33 L1804.63 691.33 L1805.19 691.33 L1805.75 691.33 L1806.31 691.33 L1806.87 691.33 L1807.43 691.33 L1807.99 691.33 L1808.55 691.33 L1809.11 691.33 L1809.67 691.33 L1810.23 691.33 L1810.79 691.33 L1811.35 691.33 L1811.9 691.33 L1812.46 691.33 L1813.02 691.33 L1813.58 691.33 L1814.14 691.33 L1814.7 691.33 L1815.26 691.33 L1815.82 691.33 L1816.38 691.33 L1816.94 691.33 L1817.5 691.33 L1818.06 691.33 L1818.62 691.33 L1819.18 691.33 L1819.73 691.33 L1820.29 691.33 L1820.85 691.33 L1821.41 691.33 L1821.97 691.33 L1822.53 691.33 L1823.09 691.33 L1823.65 691.33 L1824.21 691.33 L1824.77 691.33 L1825.33 691.33 L1825.89 691.33 L1826.45 691.33 L1827 691.33 L1827.56 691.33 L1828.12 691.33 L1828.68 691.33 L1829.24 691.33 L1829.8 691.33 L1830.36 691.33 L1830.92 691.33 L1831.48 691.33 L1832.04 691.33 L1832.6 691.33 L1833.16 691.33 L1833.72 691.33 L1834.27 691.33 L1834.83 691.33 L1835.39 691.33 L1835.95 691.33 L1836.51 691.33 L1837.07 691.33 L1837.63 691.33 L1838.19 691.33 L1838.19 681.982 L1837.63 681.982 L1837.07 681.982 L1836.51 681.982 L1835.95 681.982 L1835.39 681.982 L1834.83 681.982 L1834.27 681.982 L1833.72 681.982 L1833.16 681.982 L1832.6 681.982 L1832.04 681.982 L1831.48 681.982 L1830.92 681.982 L1830.36 681.982 L1829.8 681.982 L1829.24 681.982 L1828.68 681.982 L1828.12 681.982 L1827.56 681.982 L1827 681.982 L1826.45 681.982 L1825.89 681.982 L1825.33 681.982 L1824.77 681.982 L1824.21 681.982 L1823.65 681.982 L1823.09 681.982 L1822.53 681.982 L1821.97 681.982 L1821.41 681.982 L1820.85 681.982 L1820.29 681.982 L1819.73 681.982 L1819.18 681.982 L1818.62 681.982 L1818.06 681.982 L1817.5 681.982 L1816.94 681.982 L1816.38 681.982 L1815.82 681.982 L1815.26 681.982 L1814.7 681.982 L1814.14 681.982 L1813.58 681.982 L1813.02 681.982 L1812.46 681.982 L1811.9 681.982 L1811.35 681.982 L1810.79 681.982 L1810.23 681.982 L1809.67 681.982 L1809.11 681.982 L1808.55 681.982 L1807.99 681.982 L1807.43 681.982 L1806.87 681.982 L1806.31 681.982 L1805.75 681.982 L1805.19 681.982 L1804.63 681.982 L1804.08 681.982 L1803.52 681.982 L1802.96 681.982 L1802.4 681.982 L1801.84 681.982 L1801.28 681.982 L1800.72 681.982 L1800.16 681.982 L1799.6 681.982 L1799.04 681.982 L1798.48 681.982 L1797.92 681.982 L1797.36 681.982 L1796.8 681.982 L1796.25 681.982 L1795.69 681.982 L1795.13 681.982 L1794.57 681.982 L1794.01 681.982 L1793.45 681.982 L1792.89 681.982 L1792.33 681.982 L1791.77 681.982 L1791.21 681.982 L1790.65 681.982 L1790.09 681.982 L1789.53 681.982 L1788.98 681.982 L1788.42 681.982 L1787.86 681.982 L1787.3 681.982 L1786.74 681.982 L1786.18 681.982 L1785.62 681.982 L1785.06 681.982 L1784.5 681.982 L1783.94 681.982 L1783.38 681.982 L1782.82 681.982 L1782.26 681.982 L1781.71 681.982 L1781.15 681.982 L1780.59 681.982 L1780.03 681.982 L1779.47 681.982 L1778.91 681.982 L1778.35 681.982 L1777.79 681.982 L1777.23 681.982 L1776.67 681.982 L1776.11 681.982 L1775.55 681.982 L1774.99 681.982 L1774.43 681.982 L1773.88 681.982 L1773.32 681.982 L1772.76 681.982 L1772.2 681.982 L1771.64 681.982 L1771.08 681.982 L1770.52 681.982 L1769.96 681.982 L1769.4 681.982 L1768.84 681.982 L1768.28 681.982 L1767.72 681.982 L1767.16 681.982 L1766.61 681.982 L1766.05 681.982 L1765.49 681.982 L1764.93 681.982 L1764.37 681.982 L1763.81 681.982 L1763.25 681.982 L1762.69 681.982 L1762.13 681.982 L1761.57 681.982 L1761.01 681.982 L1760.45 681.982 L1759.89 681.982 L1759.34 681.982 L1758.78 681.982 L1758.22 681.982 L1757.66 681.982 L1757.1 681.982 L1756.54 681.982 L1755.98 681.982 L1755.42 681.982 L1754.86 681.982 L1754.3 681.982 L1753.74 681.982 L1753.18 681.982 L1752.62 681.982 L1752.06 681.982 L1751.51 681.982 L1750.95 681.982 L1750.39 681.982 L1749.83 681.982 L1749.27 681.982 L1748.71 681.982 L1748.15 681.982 L1747.59 681.982 L1747.03 681.982 L1746.47 681.982 L1745.91 681.982 L1745.35 681.982 L1744.79 681.982 L1744.24 681.982 L1743.68 681.982 L1743.12 681.982 L1742.56 681.982 L1742 681.982 L1741.44 681.982 L1740.88 681.982 L1740.32 681.982 L1739.76 681.982 L1739.2 681.982 L1738.64 681.982 L1738.08 681.982 L1737.52 681.982 L1736.97 681.982 L1736.41 681.982 L1735.85 681.982 L1735.29 681.982 L1734.73 681.982 L1734.17 681.982 L1733.61 681.982 L1733.05 681.982 L1732.49 681.982 L1731.93 681.982 L1731.37 681.982 L1730.81 681.982 L1730.25 681.982 L1729.69 681.982 L1729.14 681.982 L1728.58 681.982 L1728.02 681.982 L1727.46 681.982 L1726.9 681.982 L1726.34 681.982 L1725.78 681.982 L1725.22 681.982 L1724.66 681.982 L1724.1 681.982 L1723.54 681.982 L1722.98 681.982 L1722.42 681.982 L1721.87 681.982 L1721.31 681.982 L1720.75 681.982 L1720.19 681.982 L1719.63 681.982 L1719.07 681.982 L1718.51 681.982 L1717.95 681.982 L1717.39 681.982 L1716.83 681.982 L1716.27 681.982 L1715.71 681.982 L1715.15 681.982 L1714.6 681.982 L1714.04 681.982 L1713.48 681.982 L1712.92 681.982 L1712.36 681.982 L1711.8 681.982 L1711.24 681.982 L1710.68 681.982 L1710.12 681.982 L1709.56 681.982 L1709 681.982 L1708.44 681.982 L1707.88 681.982 L1707.32 681.982 L1706.77 681.982 L1706.21 681.982 L1705.65 681.982 L1705.09 681.982 L1704.53 681.982 L1703.97 681.982 L1703.41 681.982 L1702.85 681.982 L1702.29 681.982 L1701.73 681.982 L1701.17 681.982 L1700.61 681.982 L1700.05 681.982 L1699.5 681.982 L1698.94 681.982 L1698.38 681.982 L1697.82 681.982 L1697.26 681.982 L1696.7 681.982 L1696.14 681.982 L1695.58 681.982 L1695.02 681.982 L1694.46 681.982 L1693.9 681.982 L1693.34 681.982 L1692.78 681.982 L1692.23 681.982 L1691.67 681.982 L1691.11 681.982 L1690.55 681.982 L1689.99 681.982 L1689.43 681.982 L1688.87 681.982 L1688.31 681.982 L1687.75 681.982 L1687.19 681.982 L1686.63 681.982 L1686.07 681.982 L1685.51 681.982 L1684.95 681.982 L1684.4 681.982 L1683.84 681.982 L1683.28 681.982 L1682.72 681.982 L1682.16 681.982 L1681.6 681.982 L1681.04 681.982 L1680.48 681.982 L1679.92 681.982 L1679.36 681.982 L1678.8 681.982 L1678.24 681.982 L1677.68 681.982 L1677.13 681.982 L1676.57 681.982 L1676.01 681.982 L1675.45 681.982 L1674.89 681.982 L1674.33 681.982 L1673.77 681.982 L1673.21 681.982 L1672.65 681.982 L1672.09 681.982 L1671.53 681.982 L1670.97 681.982 L1670.41 681.982 L1669.85 681.982 L1669.3 681.982 L1668.74 681.982 L1668.18 681.982 L1667.62 681.982 L1667.06 681.982 L1666.5 681.982 L1665.94 681.982 L1665.38 681.982 L1664.82 681.982 L1664.26 681.982 L1663.7 681.982 L1663.14 681.982 L1662.58 681.982 L1662.03 681.982 L1661.47 681.982 L1660.91 681.982 L1660.35 681.982 L1659.79 681.982 L1659.23 681.982 L1658.67 681.982 L1658.11 681.982 L1657.55 681.982 L1656.99 681.982 L1656.43 681.982 L1655.87 681.982 L1655.31 681.982 L1654.76 681.982 L1654.2 681.982 L1653.64 681.982 L1653.08 681.982 L1652.52 681.982 L1651.96 681.982 L1651.4 681.982 L1650.84 681.982 L1650.28 681.982 L1649.72 681.982 L1649.16 681.982 L1648.6 681.982 L1648.04 681.982 L1647.48 681.982 L1646.93 681.982 L1646.37 681.982 L1645.81 681.982 L1645.25 681.982 L1644.69 681.982 L1644.13 681.982 L1643.57 681.982 L1643.01 681.982 L1642.45 681.982 L1641.89 681.982 L1641.33 681.982 L1640.77 681.982 L1640.21 681.982 L1639.66 681.982 L1639.1 681.982 L1638.54 681.982 L1637.98 681.982 L1637.42 681.982 L1636.86 681.982 L1636.3 681.982 L1635.74 681.982 L1635.18 681.982 L1634.62 681.982 L1634.06 681.982 L1633.5 681.982 L1632.94 681.982 L1632.39 681.982 L1631.83 681.982 L1631.27 681.982 L1630.71 681.982 L1630.15 681.982 L1629.59 681.982 L1629.03 681.982 L1628.47 681.982 L1627.91 681.982 L1627.35 681.982 L1626.79 681.982 L1626.23 681.982 L1625.67 681.982 L1625.11 681.982 L1624.56 681.982 L1624 681.982 L1623.44 681.982 L1622.88 681.982 L1622.32 681.982 L1621.76 681.982 L1621.2 681.982 L1620.64 681.982 L1620.08 681.982 L1619.52 681.982 L1618.96 681.982 L1618.4 681.982 L1617.84 681.982 L1617.29 681.982 L1616.73 681.982 L1616.17 681.982 L1615.61 681.982 L1615.05 681.982 L1614.49 681.982 L1613.93 681.982 L1613.37 681.982 L1612.81 681.982 L1612.25 681.982 L1611.69 681.982 L1611.13 681.982 L1610.57 681.982 L1610.02 681.982 L1609.46 681.982 L1608.9 681.982 L1608.34 681.982 L1607.78 681.982 L1607.22 681.982 L1606.66 681.982 L1606.1 681.982 L1605.54 681.982 L1604.98 681.982 L1604.42 681.982 L1603.86 681.982 L1603.3 681.982 L1602.74 681.982 L1602.19 681.982 L1601.63 681.982 L1601.07 681.982 L1600.51 681.982 L1599.95 681.982 L1599.39 681.982 L1598.83 681.982 L1598.27 681.982 L1597.71 681.982 L1597.15 681.982 L1596.59 681.982 L1596.03 681.982 L1595.47 681.982 L1594.92 681.982 L1594.36 681.982 L1593.8 681.982 L1593.24 681.982 L1592.68 681.982 L1592.12 681.982 L1591.56 681.982 L1591 681.982 L1590.44 681.982 L1589.88 681.982 L1589.32 681.982 L1588.76 681.982 L1588.2 681.982 L1587.65 681.982 L1587.09 681.982 L1586.53 681.982 L1585.97 681.982 L1585.41 681.982 L1584.85 681.982 L1584.29 681.982 L1583.73 681.982 L1583.17 681.982 L1582.61 681.982 L1582.05 681.982 L1581.49 681.982 L1580.93 681.982 L1580.37 681.982 L1579.82 681.982 L1579.26 681.982 L1578.7 681.982 L1578.14 681.982 L1577.58 681.982 L1577.02 681.982 L1576.46 681.982 L1575.9 681.982 L1575.34 681.982 L1574.78 681.982 L1574.22 681.982 L1573.66 681.982 L1573.1 681.982 L1572.55 681.982 L1571.99 681.982 L1571.43 681.982 L1570.87 681.982 L1570.31 681.982 L1569.75 681.982 L1569.19 681.982 L1568.63 681.982 L1568.07 681.982 L1567.51 681.982 L1566.95 681.982 L1566.39 681.982 L1565.83 681.982 L1565.28 681.982 L1564.72 681.982 L1564.16 681.982 L1563.6 681.982 L1563.04 681.982 L1562.48 681.982 L1561.92 681.982 L1561.36 681.982 L1560.8 681.982 L1560.24 681.982 L1559.68 681.982 L1559.12 681.982 L1558.56 681.982 L1558 681.982 L1557.45 681.982 L1556.89 681.982 L1556.33 681.982 L1555.77 681.982 L1555.21 681.982 L1554.65 681.982 L1554.09 681.982 L1553.53 681.982 L1552.97 681.982 L1552.41 681.982 L1551.85 681.982 L1551.29 681.982 L1550.73 681.982 L1550.18 681.982 L1549.62 681.982 L1549.06 681.982 L1548.5 681.982 L1547.94 681.982 L1547.38 681.982 L1546.82 681.982 L1546.26 681.982 L1545.7 681.982 L1545.14 681.982 L1544.58 681.982 L1544.02 681.982 L1543.46 681.982 L1542.9 681.982 L1542.35 681.982 L1541.79 681.982 L1541.23 681.982 L1540.67 681.982 L1540.11 681.982 L1539.55 681.982 L1538.99 681.982 L1538.43 681.982 L1537.87 681.982 L1537.31 681.982 L1536.75 681.982 L1536.19 681.982 L1535.63 681.982 L1535.08 681.982 L1534.52 681.982 L1533.96 681.982 L1533.4 681.982 L1532.84 681.982 L1532.28 681.982 L1531.72 681.982 L1531.16 681.982 L1530.6 681.982 L1530.04 681.982 L1529.48 681.982 L1528.92 681.982 L1528.36 681.982 L1527.81 681.982 L1527.25 681.982 L1526.69 681.982 L1526.13 681.982 L1525.57 681.982 L1525.01 681.982 L1524.45 681.982 L1523.89 681.982 L1523.33 681.982 L1522.77 681.982 L1522.21 681.982 L1521.65 681.982 L1521.09 681.982 L1520.53 681.982 L1519.98 681.982 L1519.42 681.982 L1518.86 681.982 L1518.3 681.982 L1517.74 681.982 L1517.18 681.982 L1516.62 681.982 L1516.06 681.982 L1515.5 681.982 L1514.94 681.982 L1514.38 681.982 L1513.82 681.982 L1513.26 681.982 L1512.71 681.982 L1512.15 681.982 L1511.59 681.982 L1511.03 681.982 L1510.47 681.982 L1509.91 681.982 L1509.35 681.982 L1508.79 681.982 L1508.23 681.982 L1507.67 681.982 L1507.11 681.982 L1506.55 681.982 L1505.99 681.982 L1505.44 681.982 L1504.88 681.982 L1504.32 681.982 L1503.76 681.982 L1503.2 681.982 L1502.64 681.982 L1502.08 681.982 L1501.52 681.982 L1500.96 681.982 L1500.4 681.982 L1499.84 681.982 L1499.28 681.982 L1498.72 681.982 L1498.16 681.982 L1497.61 681.982 L1497.05 681.982 L1496.49 681.982 L1495.93 681.982 L1495.37 681.982 L1494.81 681.982 L1494.25 681.982 L1493.69 681.982 L1493.13 681.982 L1492.57 681.982 L1492.01 681.982 L1491.45 681.982 L1490.89 681.982 L1490.34 681.982 L1489.78 681.982 L1489.22 681.982 L1488.66 681.982 L1488.1 681.982 L1487.54 681.982 L1486.98 681.982 L1486.42 681.982 L1485.86 681.982 L1485.3 681.982 L1484.74 681.982 L1484.18 681.982 L1483.62 681.982 L1483.07 681.982 L1482.51 681.982 L1481.95 681.982 L1481.39 681.982 L1480.83 681.982 L1480.27 681.982 L1479.71 681.982 L1479.15 681.982 L1478.59 681.982 L1478.03 681.982 L1477.47 681.982 L1476.91 681.982 L1476.35 681.982 L1475.79 681.982 L1475.24 681.982 L1474.68 681.982 L1474.12 681.982 L1473.56 681.982 L1473 681.982 L1472.44 681.982 L1471.88 681.982 L1471.32 681.982 L1470.76 681.982 L1470.2 681.982 L1469.64 681.982 L1469.08 681.982 L1468.52 681.982 L1467.97 681.982 L1467.41 681.982 L1466.85 681.982 L1466.29 681.982 L1465.73 681.982 L1465.17 681.982 L1464.61 681.982 L1464.05 681.982 L1463.49 681.982 L1462.93 681.982 L1462.37 681.982 L1461.81 681.982 L1461.25 681.982 L1460.7 681.982 L1460.14 681.982 L1459.58 681.982 L1459.02 681.982 L1458.46 681.982 L1457.9 681.982 L1457.34 681.982 L1456.78 681.982 L1456.22 681.982 L1455.66 681.982 L1455.1 681.982 L1454.54 681.982 L1453.98 681.982 L1453.42 681.982 L1452.87 681.982 L1452.31 681.982 L1451.75 681.982 L1451.19 681.982 L1450.63 681.982 L1450.07 681.982 L1449.51 681.982 L1448.95 681.982 L1448.39 681.982 L1447.83 681.982 L1447.27 681.982 L1446.71 681.982 L1446.15 681.982 L1445.6 681.982 L1445.04 681.982 L1444.48 681.982 L1443.92 681.982 L1443.36 681.982 L1442.8 681.982 L1442.24 681.982 L1441.68 681.982 L1441.12 681.982 L1440.56 681.982 L1440 681.982 L1439.44 681.982 L1438.88 681.982 L1438.33 681.982 L1437.77 681.982 L1437.21 681.982 L1436.65 681.982 L1436.09 681.982 L1435.53 681.982 L1434.97 681.982 L1434.41 681.982 L1433.85 681.982 L1433.29 681.982 L1432.73 681.982 L1432.17 681.982 L1431.61 681.982 L1431.05 681.982 L1430.5 681.982 L1429.94 681.982 L1429.38 681.982 L1428.82 681.982 L1428.26 681.982 L1427.7 681.982 L1427.14 681.982 L1426.58 681.982 L1426.02 681.982 L1425.46 681.982 L1424.9 681.982 L1424.34 681.982 L1423.78 681.982 L1423.23 681.982 L1422.67 681.982 L1422.11 681.982 L1421.55 681.982 L1420.99 681.982 L1420.43 681.982 L1419.87 681.982 L1419.31 681.982 L1418.75 681.982 L1418.19 681.982 L1417.63 681.982 L1417.07 681.982 L1416.51 681.982 L1415.95 681.982 L1415.4 681.982 L1414.84 681.982 L1414.28 681.982 L1413.72 681.982 L1413.16 681.982 L1412.6 681.982 L1412.04 681.982 L1411.48 681.982 L1410.92 681.982 L1410.36 681.982 L1409.8 681.982 L1409.24 681.982 L1408.68 681.982 L1408.13 681.982 L1407.57 681.982 L1407.01 681.982 L1406.45 681.982 L1405.89 681.982 L1405.33 681.982 L1404.77 681.982 L1404.21 681.982 L1403.65 681.982 L1403.09 681.982 L1402.53 681.982 L1401.97 681.982 L1401.41 681.982 L1400.86 681.982 L1400.3 681.982 L1399.74 681.982 L1399.18 681.982 L1398.62 681.982 L1398.06 681.982 L1397.5 681.982 L1396.94 681.982 L1396.38 681.982 L1395.82 681.982 L1395.26 681.982 L1394.7 681.982 L1394.14 681.982 L1393.58 681.982 L1393.03 681.982 L1392.47 681.982 L1391.91 681.982 L1391.35 681.982 L1390.79 681.982 L1390.23 681.982 L1389.67 681.982 L1389.11 681.982 L1388.55 681.982 L1387.99 681.982 L1387.43 681.982 L1386.87 681.982 L1386.31 681.982 L1385.76 681.982 L1385.2 681.982 L1384.64 681.982 L1384.08 681.982 L1383.52 681.982 L1382.96 681.982 L1382.4 681.982 L1381.84 681.982 L1381.28 681.982 L1380.72 681.982 L1380.16 681.982 L1379.6 681.982 L1379.04 681.982 L1378.49 681.982 L1377.93 681.982 L1377.37 681.982 L1376.81 681.982 L1376.25 681.982 L1375.69 681.982 L1375.13 681.982 L1374.57 681.982 L1374.01 681.982 L1373.45 681.982 L1372.89 681.982 L1372.33 681.982 L1371.77 681.982 L1371.21 681.982 L1370.66 681.982 L1370.1 681.982 L1369.54 681.982 L1368.98 681.982 L1368.42 681.982 L1367.86 681.982 L1367.3 681.982 L1366.74 681.982 L1366.18 681.982 L1365.62 681.982 L1365.06 681.982 L1364.5 681.982 L1363.94 681.982 L1363.39 681.982 L1362.83 681.982 L1362.27 681.982 L1361.71 681.982 L1361.15 681.982 L1360.59 681.982 L1360.03 681.982 L1359.47 681.982 L1358.91 681.982 L1358.35 681.982 L1357.79 681.982 L1357.23 681.982 L1356.67 681.982 L1356.12 681.982 L1355.56 681.982 L1355 681.982 L1354.44 681.982 L1353.88 681.982 L1353.32 681.982 L1352.76 681.982 L1352.2 681.982 L1351.64 681.982 L1351.08 681.982 L1350.52 681.982 L1349.96 681.982 L1349.4 681.982 L1348.84 681.982 L1348.29 681.982 L1347.73 681.982 L1347.17 681.982 L1346.61 681.982 L1346.05 681.982 L1345.49 681.982 L1344.93 681.982 L1344.37 681.982 L1343.81 681.982 L1343.25 681.982 L1342.69 681.982 L1342.13 681.982 L1341.57 681.982 L1341.02 681.982 L1340.46 681.982 L1339.9 681.982 L1339.34 681.982 L1338.78 681.982 L1338.22 681.982 L1337.66 681.982 L1337.1 681.982 L1336.54 681.982 L1335.98 681.982 L1335.42 681.982 L1334.86 681.982 L1334.3 681.982 L1333.75 681.982 L1333.19 681.982 L1332.63 681.982 L1332.07 681.982 L1331.51 681.982 L1330.95 681.982 L1330.39 681.982 L1329.83 681.982 L1329.27 681.982 L1328.71 681.982 L1328.15 681.982 L1327.59 681.982 L1327.03 681.982 L1326.47 681.982 L1325.92 681.982 L1325.36 681.982 L1324.8 681.982 L1324.24 681.982 L1323.68 681.982 L1323.12 681.982 L1322.56 681.982 L1322 681.982 L1321.44 681.982 L1320.88 681.982 L1320.32 681.982 L1319.76 681.982 L1319.2 681.982 L1318.65 681.982 L1318.09 681.982 L1317.53 681.982 L1316.97 681.982 L1316.41 681.982 L1315.85 681.982 L1315.29 681.982 L1314.73 681.982 L1314.17 681.982 L1313.61 681.982 L1313.05 681.982 L1312.49 681.982 L1311.93 681.982 L1311.38 681.982 L1310.82 681.982 L1310.26 681.982 L1309.7 681.982 L1309.14 681.982 L1308.58 681.982 L1308.02 681.982 L1307.46 681.982 L1306.9 681.982 L1306.34 681.982 L1305.78 681.982 L1305.22 681.982 L1304.66 681.982 L1304.1 681.982 L1303.55 681.982 L1302.99 681.982 L1302.43 681.982 L1301.87 681.982 L1301.31 681.982 L1300.75 681.982 L1300.19 681.982 L1299.63 681.982 L1299.07 681.982 L1298.51 681.982 L1297.95 681.982 L1297.39 681.982 L1296.83 681.982 L1296.28 681.982 L1295.72 681.982 L1295.16 681.982 L1294.6 681.982 L1294.04 681.982 L1293.48 681.982 L1292.92 681.982 L1292.36 681.982 L1291.8 681.982 L1291.24 681.982 L1290.68 681.982 L1290.12 681.982 L1289.56 681.982 L1289 681.982 L1288.45 681.982 L1287.89 681.982 L1287.33 681.982 L1286.77 681.982 L1286.21 681.982 L1285.65 681.982 L1285.09 681.982 L1284.53 681.982 L1283.97 681.982 L1283.41 681.982 L1282.85 681.982 L1282.29 681.982 L1281.73 681.982 L1281.18 681.982 L1280.62 681.982 L1280.06 681.982 L1279.5 681.982 L1278.94 681.982 L1278.38 681.982 L1277.82 681.982 L1277.26 681.982 L1276.7 681.982 L1276.14 681.982 L1275.58 681.982 L1275.02 681.982 L1274.46 681.982 L1273.91 681.982 L1273.35 681.982 L1272.79 681.982 L1272.23 681.982 L1271.67 681.982 L1271.11 681.982 L1270.55 681.982 L1269.99 681.982 L1269.43 681.982 L1268.87 681.982 L1268.31 681.982 L1267.75 681.982 L1267.19 681.982 L1266.63 681.982 L1266.08 681.982 L1265.52 681.982 L1264.96 681.982 L1264.4 681.982 L1263.84 681.982 L1263.28 681.982 L1262.72 681.982 L1262.16 681.982 L1261.6 681.982 L1261.04 681.982 L1260.48 681.982 L1259.92 681.982 L1259.36 681.982 L1258.81 681.982 L1258.25 681.982 L1257.69 681.982 L1257.13 681.982 L1256.57 681.982 L1256.01 681.982 L1255.45 681.982 L1254.89 681.982 L1254.33 681.982 L1253.77 681.982 L1253.21 681.982 L1252.65 681.982 L1252.09 681.982 L1251.54 681.982 L1250.98 681.982 L1250.42 681.982 L1249.86 681.982 L1249.3 681.982 L1248.74 681.982 L1248.18 681.982 L1247.62 681.982 L1247.06 681.982 L1246.5 681.982 L1245.94 681.982 L1245.38 681.982 L1244.82 681.982 L1244.26 681.982 L1243.71 681.982 L1243.15 681.982 L1242.59 681.982 L1242.03 681.982 L1241.47 681.982 L1240.91 681.982 L1240.35 681.982 L1239.79 681.982 L1239.23 681.982 L1238.67 681.982 L1238.11 681.982 L1237.55 681.982 L1236.99 681.982 L1236.44 681.982 L1235.88 681.982 L1235.32 681.982 L1234.76 681.982 L1234.2 681.982 L1233.64 681.982 L1233.08 681.982 L1232.52 681.982 L1231.96 681.982 L1231.4 681.982 L1230.84 681.982 L1230.28 681.982 L1229.72 681.982 L1229.17 681.982 L1228.61 681.982 L1228.05 681.982 L1227.49 681.982 L1226.93 681.982 L1226.37 681.982 L1225.81 681.982 L1225.25 681.982 L1224.69 681.982 L1224.13 681.982 L1223.57 681.982 L1223.01 681.982 L1222.45 681.982 L1221.89 681.982 L1221.34 681.982 L1220.78 681.982 L1220.22 681.982 L1219.66 681.982 L1219.1 681.982 L1218.54 681.982 L1217.98 681.982 L1217.42 681.982 L1216.86 681.982 L1216.3 681.982 L1215.74 681.982 L1215.18 681.982 L1214.62 681.982 L1214.07 681.982 L1213.51 681.982 L1212.95 681.982 L1212.39 681.982 L1211.83 681.982 L1211.27 681.982 L1210.71 681.982 L1210.15 681.982 L1209.59 681.982 L1209.03 681.982 L1208.47 681.982 L1207.91 681.982 L1207.35 681.982 L1206.8 681.982 L1206.24 681.982 L1205.68 681.982 L1205.12 681.982 L1204.56 681.982 L1204 681.982 L1203.44 681.982 L1202.88 681.982 L1202.32 681.982 L1201.76 681.982 L1201.2 681.982 L1200.64 681.982 L1200.08 681.982 L1199.52 681.982 L1198.97 681.982 L1198.41 681.982 L1197.85 681.982 L1197.29 681.982 L1196.73 681.982 L1196.17 681.982 L1195.61 681.982 L1195.05 681.982 L1194.49 681.982 L1193.93 681.982 L1193.37 681.982 L1192.81 681.982 L1192.25 681.982 L1191.7 681.982 L1191.14 681.982 L1190.58 681.982 L1190.02 681.982 L1189.46 681.982 L1188.9 681.982 L1188.34 681.982 L1187.78 681.982 L1187.22 681.982 L1186.66 681.982 L1186.1 681.982 L1185.54 681.982 L1184.98 681.982 L1184.43 681.982 L1183.87 681.982 L1183.31 681.982 L1182.75 681.982 L1182.19 681.982 L1181.63 681.982 L1181.07 681.982 L1180.51 681.982 L1179.95 681.982 L1179.39 681.982 L1178.83 681.982 L1178.27 681.982 L1177.71 681.982 L1177.15 681.982 L1176.6 681.982 L1176.04 681.982 L1175.48 681.982 L1174.92 681.982 L1174.36 681.982 L1173.8 681.982 L1173.24 681.982 L1172.68 681.982 L1172.12 681.982 L1171.56 681.982 L1171 681.982 L1170.44 681.982 L1169.88 681.982 L1169.33 681.982 L1168.77 681.982 L1168.21 681.982 L1167.65 681.982 L1167.09 681.982 L1166.53 681.982 L1165.97 681.982 L1165.41 681.982 L1164.85 681.982 L1164.29 681.982 L1163.73 681.982 L1163.17 681.982 L1162.61 681.982 L1162.05 681.982 L1161.5 681.982 L1160.94 681.982 L1160.38 681.982 L1159.82 681.982 L1159.26 681.982 L1158.7 681.982 L1158.14 681.982 L1157.58 681.982 L1157.02 681.982 L1156.46 681.982 L1155.9 681.982 L1155.34 681.982 L1154.78 681.982 L1154.23 681.982 L1153.67 681.982 L1153.11 681.982 L1152.55 681.982 L1151.99 681.982 L1151.43 681.982 L1150.87 681.982 L1150.31 681.982 L1149.75 681.982 L1149.19 681.982 L1148.63 681.982 L1148.07 681.982 L1147.51 681.982 L1146.96 681.982 L1146.4 681.982 L1145.84 681.982 L1145.28 681.982 L1144.72 681.982 L1144.16 681.982 L1143.6 681.982 L1143.04 681.982 L1142.48 681.982 L1141.92 681.982 L1141.36 681.982 L1140.8 681.982 L1140.24 681.982 L1139.68 681.982 L1139.13 681.982 L1138.57 681.982 L1138.01 681.982 L1137.45 681.982 L1136.89 681.982 L1136.33 681.982 L1135.77 681.982 L1135.21 681.982 L1134.65 681.982 L1134.09 681.982 L1133.53 681.982 L1132.97 681.982 L1132.41 681.982 L1131.86 681.982 L1131.3 681.982 L1130.74 681.982 L1130.18 681.982 L1129.62 681.982 L1129.06 681.982 L1128.5 681.982 L1127.94 681.982 L1127.38 681.982 L1126.82 681.982 L1126.26 681.982 L1125.7 681.982 L1125.14 681.982 L1124.59 681.982 L1124.03 681.982 L1123.47 681.982 L1122.91 681.982 L1122.35 681.982 L1121.79 681.982 L1121.23 681.982 L1120.67 681.982 L1120.11 681.982 L1119.55 681.982 L1118.99 681.982 L1118.43 681.982 L1117.87 681.982 L1117.31 681.982 L1116.76 681.982 L1116.2 681.982 L1115.64 681.982 L1115.08 681.982 L1114.52 681.982 L1113.96 681.982 L1113.4 681.982 L1112.84 681.982 L1112.28 681.982 L1111.72 681.982 L1111.16 681.982 L1110.6 681.982 L1110.04 681.982 L1109.49 681.982 L1108.93 681.982 L1108.37 681.982 L1107.81 681.982 L1107.25 681.982 L1106.69 681.982 L1106.13 681.982 L1105.57 681.982 L1105.01 681.982 L1104.45 681.982 L1103.89 681.982 L1103.33 681.982 L1102.77 681.982 L1102.22 681.982 L1101.66 681.982 L1101.1 681.982 L1100.54 681.982 L1099.98 681.982 L1099.42 681.982 L1098.86 681.982 L1098.3 681.982 L1097.74 681.982 L1097.18 681.982 L1096.62 681.982 L1096.06 681.982 L1095.5 681.982 L1094.94 681.982 L1094.39 681.982 L1093.83 681.982 L1093.27 681.982 L1092.71 681.982 L1092.15 681.982 L1091.59 681.982 L1091.03 681.982 L1090.47 681.982 L1089.91 681.982 L1089.35 681.982 L1088.79 681.982 L1088.23 681.982 L1087.67 681.982 L1087.12 681.982 L1086.56 681.982 L1086 681.982 L1085.44 681.982 L1084.88 681.982 L1084.32 681.982 L1083.76 681.982 L1083.2 681.982 L1082.64 681.982 L1082.08 681.982 L1081.52 681.982 L1080.96 681.982 L1080.4 681.982 L1079.85 681.982 L1079.29 681.982 L1078.73 681.982 L1078.17 681.982 L1077.61 681.982 L1077.05 681.982 L1076.49 681.982 L1075.93 681.982 L1075.37 681.982 L1074.81 681.982 L1074.25 681.982 L1073.69 681.982 L1073.13 681.982 L1072.57 681.982 L1072.02 681.982 L1071.46 681.982 L1070.9 681.982 L1070.34 681.982 L1069.78 681.982 L1069.22 681.982 L1068.66 681.982 L1068.1 681.982 L1067.54 681.982 L1066.98 681.982 L1066.42 681.982 L1065.86 681.982 L1065.3 681.982 L1064.75 681.982 L1064.19 681.982 L1063.63 681.982 L1063.07 681.982 L1062.51 681.982 L1061.95 681.982 L1061.39 681.982 L1060.83 681.982 L1060.27 681.982 L1059.71 681.982 L1059.15 681.982 L1058.59 681.982 L1058.03 681.982 L1057.48 681.982 L1056.92 681.982 L1056.36 681.982 L1055.8 681.982 L1055.24 681.982 L1054.68 681.982 L1054.12 681.982 L1053.56 681.982 L1053 681.982 L1052.44 681.982 L1051.88 681.982 L1051.32 681.982 L1050.76 681.982 L1050.2 681.982 L1049.65 681.982 L1049.09 681.982 L1048.53 681.982 L1047.97 681.982 L1047.41 681.982 L1046.85 681.982 L1046.29 681.982 L1045.73 681.982 L1045.17 681.982 L1044.61 681.982 L1044.05 681.982 L1043.49 681.982 L1042.93 681.982 L1042.38 681.982 L1041.82 681.982 L1041.26 681.982 L1040.7 681.982 L1040.14 681.982 L1039.58 681.982 L1039.02 681.982 L1038.46 681.982 L1037.9 681.982 L1037.34 681.982 L1036.78 681.982 L1036.22 681.982 L1035.66 681.982 L1035.1 681.982 L1034.55 681.982 L1033.99 681.982 L1033.43 681.982 L1032.87 681.982 L1032.31 681.982 L1031.75 681.982 L1031.19 681.982 L1030.63 681.982 L1030.07 681.982 L1029.51 681.982 L1028.95 681.982 L1028.39 681.982 L1027.83 681.982 L1027.28 681.982 L1026.72 681.982 L1026.16 681.982 L1025.6 681.982 L1025.04 681.982 L1024.48 681.982 L1023.92 681.982 L1023.36 681.982 L1022.8 681.982 L1022.24 681.982 L1021.68 681.982 L1021.12 681.982 L1020.56 681.982 L1020.01 681.982 L1019.45 681.982 L1018.89 681.982 L1018.33 681.982 L1017.77 681.982 L1017.21 681.982 L1016.65 681.982 L1016.09 681.982 L1015.53 681.982 L1014.97 681.982 L1014.41 681.982 L1013.85 681.982 L1013.29 681.982 L1012.73 681.982 L1012.18 681.982 L1011.62 681.982 L1011.06 681.982 L1010.5 681.982 L1009.94 681.982 L1009.38 681.982 L1008.82 681.982 L1008.26 681.982 L1007.7 681.982 L1007.14 681.982 L1006.58 681.982 L1006.02 681.982 L1005.46 681.982 L1004.91 681.982 L1004.35 681.982 L1003.79 681.982 L1003.23 681.982 L1002.67 681.982 L1002.11 681.982 L1001.55 681.982 L1000.99 681.982 L1000.43 681.982 L999.872 681.982 L999.313 681.982 L998.754 681.982 L998.194 681.982 L997.635 681.982 L997.076 681.982 L996.517 681.982 L995.957 681.982 L995.398 681.982 L994.839 681.982 L994.28 681.982 L993.72 681.982 L993.161 681.982 L992.602 681.982 L992.043 681.982 L991.483 681.982 L990.924 681.982 L990.365 681.982 L989.806 681.982 L989.246 681.982 L988.687 681.982 L988.128 681.982 L987.569 681.982 L987.009 681.982 L986.45 681.982 L985.891 681.982 L985.332 681.982 L984.772 681.982 L984.213 681.982 L983.654 681.982 L983.095 681.982 L982.535 681.982 L981.976 681.982 L981.417 681.982 L980.858 681.982 L980.298 681.982 L979.739 681.982 L979.18 681.982 L978.621 681.982 L978.061 681.982 L977.502 681.982 L976.943 681.982 L976.384 681.982 L975.824 681.982 L975.265 681.982 L974.706 681.982 L974.147 681.982 L973.587 681.982 L973.028 681.982 L972.469 681.982 L971.91 681.982 L971.35 681.982 L970.791 681.982 L970.232 681.982 L969.673 681.982 L969.113 681.982 L968.554 681.982 L967.995 681.982 L967.436 681.982 L966.876 681.982 L966.317 681.982 L965.758 681.982 L965.199 681.982 L964.639 681.982 L964.08 681.982 L963.521 681.982 L962.962 681.982 L962.402 681.982 L961.843 681.982 L961.284 681.982 L960.725 681.982 L960.165 681.982 L959.606 681.982 L959.047 681.982 L958.488 681.982 L957.928 681.982 L957.369 681.982 L956.81 681.982 L956.251 681.982 L955.691 681.982 L955.132 681.982 L954.573 681.982 L954.014 681.982 L953.454 681.982 L952.895 681.982 L952.336 681.982 L951.777 681.982 L951.217 681.982 L950.658 681.982 L950.099 681.982 L949.54 681.982 L948.98 681.982 L948.421 681.982 L947.862 681.982 L947.303 681.982 L946.743 681.982 L946.184 681.982 L945.625 681.982 L945.066 681.982 L944.506 681.982 L943.947 681.982 L943.388 681.982 L942.829 681.982 L942.269 681.982 L941.71 681.982 L941.151 681.982 L940.592 681.982 L940.032 681.982 L939.473 681.982 L938.914 681.982 L938.355 681.982 L937.795 681.982 L937.236 681.982 L936.677 681.982 L936.118 681.982 L935.558 681.982 L934.999 681.982 L934.44 681.982 L933.881 681.982 L933.321 681.982 L932.762 681.982 L932.203 681.982 L931.644 681.982 L931.084 681.982 L930.525 681.982 L929.966 681.982 L929.406 681.982 L928.847 681.982 L928.288 681.982 L927.729 681.982 L927.169 681.982 L926.61 681.982 L926.051 681.982 L925.492 681.982 L924.932 681.982 L924.373 681.982 L923.814 681.982 L923.255 681.982 L922.695 681.982 L922.136 681.982 L921.577 681.982 L921.018 681.982 L920.458 681.982 L919.899 681.982 L919.34 681.982 L918.781 681.982 L918.221 681.982 L917.662 681.982 L917.103 681.982 L916.544 681.982 L915.984 681.982 L915.425 681.982 L914.866 681.982 L914.307 681.982 L913.747 681.982 L913.188 681.982 L912.629 681.982 L912.07 681.982 L911.51 681.982 L910.951 681.982 L910.392 681.982 L909.833 681.982 L909.273 681.982 L908.714 681.982 L908.155 681.982 L907.596 681.982 L907.036 681.982 L906.477 681.982 L905.918 681.982 L905.359 681.982 L904.799 681.982 L904.24 681.982 L903.681 681.982 L903.122 681.982 L902.562 681.982 L902.003 681.982 L901.444 681.982 L900.885 681.982 L900.325 681.982 L899.766 681.982 L899.207 681.982 L898.648 681.982 L898.088 681.982 L897.529 681.982 L896.97 681.982 L896.411 681.982 L895.851 681.982 L895.292 681.982 L894.733 681.982 L894.174 681.982 L893.614 681.982 L893.055 681.982 L892.496 681.982 L891.937 681.982 L891.377 681.982 L890.818 681.982 L890.259 681.982 L889.7 681.982 L889.14 681.982 L888.581 681.982 L888.022 681.982 L887.463 681.982 L886.903 681.982 L886.344 681.982 L885.785 681.982 L885.226 681.982 L884.666 681.982 L884.107 681.982 L883.548 681.982 L882.989 681.982 L882.429 681.982 L881.87 681.982 L881.311 681.982 L880.752 681.982 L880.192 681.982 L879.633 681.982 L879.074 681.982 L878.515 681.982 L877.955 681.982 L877.396 681.982 L876.837 681.982 L876.278 681.982 L875.718 681.982 L875.159 681.982 L874.6 681.982 L874.041 681.982 L873.481 681.982 L872.922 681.982 L872.363 681.982 L871.804 681.982 L871.244 681.982 L870.685 681.982 L870.126 681.982 L869.567 681.982 L869.007 681.982 L868.448 681.982 L867.889 681.982 L867.33 681.982 L866.77 681.982 L866.211 681.982 L865.652 681.982 L865.093 681.982 L864.533 681.982 L863.974 681.982 L863.415 681.982 L862.856 681.982 L862.296 681.982 L861.737 681.982 L861.178 681.982 L860.619 681.982 L860.059 681.982 L859.5 681.982 L858.941 681.982 L858.382 681.982 L857.822 681.982 L857.263 681.982 L856.704 681.982 L856.145 681.982 L855.585 681.982 L855.026 681.982 L854.467 681.982 L853.908 681.982 L853.348 681.982 L852.789 681.982 L852.23 681.982 L851.671 681.982 L851.111 681.982 L850.552 681.982 L849.993 681.982 L849.434 681.982 L848.874 681.982 L848.315 681.982 L847.756 681.982 L847.197 681.982 L846.637 681.982 L846.078 681.982 L845.519 681.982 L844.96 681.982 L844.4 681.982 L843.841 681.982 L843.282 681.982 L842.723 681.982 L842.163 681.982 L841.604 681.982 L841.045 681.982 L840.486 681.982 L839.926 681.982 L839.367 681.982 L838.808 681.982 L838.249 681.982 L837.689 681.982 L837.13 681.982 L836.571 681.982 L836.012 681.982 L835.452 681.982 L834.893 681.982 L834.334 681.982 L833.775 681.982 L833.215 681.982 L832.656 681.982 L832.097 681.982 L831.538 681.982 L830.978 681.982 L830.419 681.982 L829.86 681.982 L829.301 681.982 L828.741 681.982 L828.182 681.982 L827.623 681.982 L827.064 681.982 L826.504 681.982 L825.945 681.982 L825.386 681.982 L824.827 681.982 L824.267 681.982 L823.708 681.982 L823.149 681.982 L822.59 681.982 L822.03 681.982 L821.471 681.982 L820.912 681.982 L820.353 681.982 L819.793 681.982 L819.234 681.982 L818.675 681.982 L818.116 681.982 L817.556 681.982 L816.997 681.982 L816.438 681.982 L815.879 681.982 L815.319 681.982 L814.76 681.982 L814.201 681.982 L813.642 681.982 L813.082 681.982 L812.523 681.982 L811.964 681.982 L811.405 681.982 L810.845 681.982 L810.286 681.982 L809.727 681.982 L809.168 681.982 L808.608 681.982 L808.049 681.982 L807.49 681.982 L806.931 681.982 L806.371 681.982 L805.812 681.982 L805.253 681.982 L804.693 681.982 L804.134 681.982 L803.575 681.982 L803.016 681.982 L802.456 681.982 L801.897 681.982 L801.338 681.982 L800.779 681.982 L800.219 681.982 L799.66 681.982 L799.101 681.982 L798.542 681.982 L797.982 681.982 L797.423 681.982 L796.864 681.982 L796.305 681.982 L795.745 681.982 L795.186 681.982 L794.627 681.982 L794.068 681.982 L793.508 681.982 L792.949 681.982 L792.39 681.982 L791.831 681.982 L791.271 681.982 L790.712 681.982 L790.153 681.982 L789.594 681.982 L789.034 681.982 L788.475 681.982 L787.916 681.982 L787.357 681.982 L786.797 681.982 L786.238 681.982 L785.679 681.982 L785.12 681.982 L784.56 681.982 L784.001 681.982 L783.442 681.982 L782.883 681.982 L782.323 681.982 L781.764 681.982 L781.205 681.982 L780.646 681.982 L780.086 681.982 L779.527 681.982 L778.968 681.982 L778.409 681.982 L777.849 681.982 L777.29 681.982 L776.731 681.982 L776.172 681.982 L775.612 681.982 L775.053 681.982 L774.494 681.982 L773.935 681.982 L773.375 681.982 L772.816 681.982 L772.257 681.982 L771.698 681.982 L771.138 681.982 L770.579 681.982 L770.02 681.982 L769.461 681.982 L768.901 681.982 L768.342 681.982 L767.783 681.982 L767.224 681.982 L766.664 681.982 L766.105 681.982 L765.546 681.982 L764.987 681.982 L764.427 681.982 L763.868 681.982 L763.309 681.982 L762.75 681.982 L762.19 681.982 L761.631 681.982 L761.072 681.982 L760.513 681.982 L759.953 681.982 L759.394 681.982 L758.835 681.982 L758.276 681.982 L757.716 681.982 L757.157 681.982 L756.598 681.982 L756.039 681.982 L755.479 681.982 L754.92 681.982 L754.361 681.982 L753.802 681.982 L753.242 681.982 L752.683 681.982 L752.124 681.982 L751.565 681.982 L751.005 681.982 L750.446 681.982 L749.887 681.982 L749.328 681.982 L748.768 681.982 L748.209 681.982 L747.65 681.982 L747.091 681.982 L746.531 681.982 L745.972 681.982 L745.413 681.982 L744.854 681.982 L744.294 681.982 L743.735 681.982 L743.176 681.982 L742.617 681.982 L742.057 681.982 L741.498 681.982 L740.939 681.982 L740.38 681.982 L739.82 681.982 L739.261 681.982 L738.702 681.982 L738.143 681.982 L737.583 681.982 L737.024 681.982 L736.465 681.982 L735.906 681.982 L735.346 681.982 L734.787 681.982 L734.228 681.982 L733.669 681.982 L733.109 681.982 L732.55 681.982 L731.991 681.982 L731.432 681.982 L730.872 681.982 L730.313 681.982 L729.754 681.982 L729.195 681.982 L728.635 681.982 L728.076 681.982 L727.517 681.982 L726.958 681.982 L726.398 681.982 L725.839 681.982 L725.28 681.982 L724.721 681.982 L724.161 681.982 L723.602 681.982 L723.043 681.982 L722.484 681.982 L721.924 681.982 L721.365 681.982 L720.806 681.982 L720.247 681.982  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip603)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.656 720.806,686.656 721.365,686.656 721.924,686.656 722.484,686.656 723.043,686.656 723.602,686.656 724.161,686.656 724.721,686.656 725.28,686.656 725.839,686.656 726.398,686.656 726.958,686.656 727.517,686.656 728.076,686.656 728.635,686.656 729.195,686.656 729.754,686.656 730.313,686.656 730.872,686.656 731.432,686.656 731.991,686.656 732.55,686.656 733.109,686.656 733.669,686.656 734.228,686.656 734.787,686.656 735.346,686.656 735.906,686.656 736.465,686.656 737.024,686.656 737.583,686.656 738.143,686.656 738.702,686.656 739.261,686.656 739.82,686.656 740.38,686.656 740.939,686.656 741.498,686.656 742.057,686.656 742.617,686.656 743.176,686.656 743.735,686.656 744.294,686.656 744.854,686.656 745.413,686.656 745.972,686.656 746.531,686.656 747.091,686.656 747.65,686.656 748.209,686.656 748.768,686.656 749.328,686.656 749.887,686.656 750.446,686.656 751.005,686.656 751.565,686.656 752.124,686.656 752.683,686.656 753.242,686.656 753.802,686.656 754.361,686.656 754.92,686.656 755.479,686.656 756.039,686.656 756.598,686.656 757.157,686.656 757.716,686.656 758.276,686.656 758.835,686.656 759.394,686.656 759.953,686.656 760.513,686.656 761.072,686.656 761.631,686.656 762.19,686.656 762.75,686.656 763.309,686.656 763.868,686.656 764.427,686.656 764.987,686.656 765.546,686.656 766.105,686.656 766.664,686.656 767.224,686.656 767.783,686.656 768.342,686.656 768.901,686.656 769.461,686.656 770.02,686.656 770.579,686.656 771.138,686.656 771.698,686.656 772.257,686.656 772.816,686.656 773.375,686.656 773.935,686.656 774.494,686.656 775.053,686.656 775.612,686.656 776.172,686.656 776.731,686.656 777.29,686.656 777.849,686.656 778.409,686.656 778.968,686.656 779.527,686.656 780.086,686.656 780.646,686.656 781.205,686.656 781.764,686.656 782.323,686.656 782.883,686.656 783.442,686.656 784.001,686.656 784.56,686.656 785.12,686.656 785.679,686.656 786.238,686.656 786.797,686.656 787.357,686.656 787.916,686.656 788.475,686.656 789.034,686.656 789.594,686.656 790.153,686.656 790.712,686.656 791.271,686.656 791.831,686.656 792.39,686.656 792.949,686.656 793.508,686.656 794.068,686.656 794.627,686.656 795.186,686.656 795.745,686.656 796.305,686.656 796.864,686.656 797.423,686.656 797.982,686.656 798.542,686.656 799.101,686.656 799.66,686.656 800.219,686.656 800.779,686.656 801.338,686.656 801.897,686.656 802.456,686.656 803.016,686.656 803.575,686.656 804.134,686.656 804.693,686.656 805.253,686.656 805.812,686.656 806.371,686.656 806.931,686.656 807.49,686.656 808.049,686.656 808.608,686.656 809.168,686.656 809.727,686.656 810.286,686.656 810.845,686.656 811.405,686.656 811.964,686.656 812.523,686.656 813.082,686.656 813.642,686.656 814.201,686.656 814.76,686.656 815.319,686.656 815.879,686.656 816.438,686.656 816.997,686.656 817.556,686.656 818.116,686.656 818.675,686.656 819.234,686.656 819.793,686.656 820.353,686.656 820.912,686.656 821.471,686.656 822.03,686.656 822.59,686.656 823.149,686.656 823.708,686.656 824.267,686.656 824.827,686.656 825.386,686.656 825.945,686.656 826.504,686.656 827.064,686.656 827.623,686.656 828.182,686.656 828.741,686.656 829.301,686.656 829.86,686.656 830.419,686.656 830.978,686.656 831.538,686.656 832.097,686.656 832.656,686.656 833.215,686.656 833.775,686.656 834.334,686.656 834.893,686.656 835.452,686.656 836.012,686.656 836.571,686.656 837.13,686.656 837.689,686.656 838.249,686.656 838.808,686.656 839.367,686.656 839.926,686.656 840.486,686.656 841.045,686.656 841.604,686.656 842.163,686.656 842.723,686.656 843.282,686.656 843.841,686.656 844.4,686.656 844.96,686.656 845.519,686.656 846.078,686.656 846.637,686.656 847.197,686.656 847.756,686.656 848.315,686.656 848.874,686.656 849.434,686.656 849.993,686.656 850.552,686.656 851.111,686.656 851.671,686.656 852.23,686.656 852.789,686.656 853.348,686.656 853.908,686.656 854.467,686.656 855.026,686.656 855.585,686.656 856.145,686.656 856.704,686.656 857.263,686.656 857.822,686.656 858.382,686.656 858.941,686.656 859.5,686.656 860.059,686.656 860.619,686.656 861.178,686.656 861.737,686.656 862.296,686.656 862.856,686.656 863.415,686.656 863.974,686.656 864.533,686.656 865.093,686.656 865.652,686.656 866.211,686.656 866.77,686.656 867.33,686.656 867.889,686.656 868.448,686.656 869.007,686.656 869.567,686.656 870.126,686.656 870.685,686.656 871.244,686.656 871.804,686.656 872.363,686.656 872.922,686.656 873.481,686.656 874.041,686.656 874.6,686.656 875.159,686.656 875.718,686.656 876.278,686.656 876.837,686.656 877.396,686.656 877.955,686.656 878.515,686.656 879.074,686.656 879.633,686.656 880.192,686.656 880.752,686.656 881.311,686.656 881.87,686.656 882.429,686.656 882.989,686.656 883.548,686.656 884.107,686.656 884.666,686.656 885.226,686.656 885.785,686.656 886.344,686.656 886.903,686.656 887.463,686.656 888.022,686.656 888.581,686.656 889.14,686.656 889.7,686.656 890.259,686.656 890.818,686.656 891.377,686.656 891.937,686.656 892.496,686.656 893.055,686.656 893.614,686.656 894.174,686.656 894.733,686.656 895.292,686.656 895.851,686.656 896.411,686.656 896.97,686.656 897.529,686.656 898.088,686.656 898.648,686.656 899.207,686.656 899.766,686.656 900.325,686.656 900.885,686.656 901.444,686.656 902.003,686.656 902.562,686.656 903.122,686.656 903.681,686.656 904.24,686.656 904.799,686.656 905.359,686.656 905.918,686.656 906.477,686.656 907.036,686.656 907.596,686.656 908.155,686.656 908.714,686.656 909.273,686.656 909.833,686.656 910.392,686.656 910.951,686.656 911.51,686.656 912.07,686.656 912.629,686.656 913.188,686.656 913.747,686.656 914.307,686.656 914.866,686.656 915.425,686.656 915.984,686.656 916.544,686.656 917.103,686.656 917.662,686.656 918.221,686.656 918.781,686.656 919.34,686.656 919.899,686.656 920.458,686.656 921.018,686.656 921.577,686.656 922.136,686.656 922.695,686.656 923.255,686.656 923.814,686.656 924.373,686.656 924.932,686.656 925.492,686.656 926.051,686.656 926.61,686.656 927.169,686.656 927.729,686.656 928.288,686.656 928.847,686.656 929.406,686.656 929.966,686.656 930.525,686.656 931.084,686.656 931.644,686.656 932.203,686.656 932.762,686.656 933.321,686.656 933.881,686.656 934.44,686.656 934.999,686.656 935.558,686.656 936.118,686.656 936.677,686.656 937.236,686.656 937.795,686.656 938.355,686.656 938.914,686.656 939.473,686.656 940.032,686.656 940.592,686.656 941.151,686.656 941.71,686.656 942.269,686.656 942.829,686.656 943.388,686.656 943.947,686.656 944.506,686.656 945.066,686.656 945.625,686.656 946.184,686.656 946.743,686.656 947.303,686.656 947.862,686.656 948.421,686.656 948.98,686.656 949.54,686.656 950.099,686.656 950.658,686.656 951.217,686.656 951.777,686.656 952.336,686.656 952.895,686.656 953.454,686.656 954.014,686.656 954.573,686.656 955.132,686.656 955.691,686.656 956.251,686.656 956.81,686.656 957.369,686.656 957.928,686.656 958.488,686.656 959.047,686.656 959.606,686.656 960.165,686.656 960.725,686.656 961.284,686.656 961.843,686.656 962.402,686.656 962.962,686.656 963.521,686.656 964.08,686.656 964.639,686.656 965.199,686.656 965.758,686.656 966.317,686.656 966.876,686.656 967.436,686.656 967.995,686.656 968.554,686.656 969.113,686.656 969.673,686.656 970.232,686.656 970.791,686.656 971.35,686.656 971.91,686.656 972.469,686.656 973.028,686.656 973.587,686.656 974.147,686.656 974.706,686.656 975.265,686.656 975.824,686.656 976.384,686.656 976.943,686.656 977.502,686.656 978.061,686.656 978.621,686.656 979.18,686.656 979.739,686.656 980.298,686.656 980.858,686.656 981.417,686.656 981.976,686.656 982.535,686.656 983.095,686.656 983.654,686.656 984.213,686.656 984.772,686.656 985.332,686.656 985.891,686.656 986.45,686.656 987.009,686.656 987.569,686.656 988.128,686.656 988.687,686.656 989.246,686.656 989.806,686.656 990.365,686.656 990.924,686.656 991.483,686.656 992.043,686.656 992.602,686.656 993.161,686.656 993.72,686.656 994.28,686.656 994.839,686.656 995.398,686.656 995.957,686.656 996.517,686.656 997.076,686.656 997.635,686.656 998.194,686.656 998.754,686.656 999.313,686.656 999.872,686.656 1000.43,686.656 1000.99,686.656 1001.55,686.656 1002.11,686.656 1002.67,686.656 1003.23,686.656 1003.79,686.656 1004.35,686.656 1004.91,686.656 1005.46,686.656 1006.02,686.656 1006.58,686.656 1007.14,686.656 1007.7,686.656 1008.26,686.656 1008.82,686.656 1009.38,686.656 1009.94,686.656 1010.5,686.656 1011.06,686.656 1011.62,686.656 1012.18,686.656 1012.73,686.656 1013.29,686.656 1013.85,686.656 1014.41,686.656 1014.97,686.656 1015.53,686.656 1016.09,686.656 1016.65,686.656 1017.21,686.656 1017.77,686.656 1018.33,686.656 1018.89,686.656 1019.45,686.656 1020.01,686.656 1020.56,686.656 1021.12,686.656 1021.68,686.656 1022.24,686.656 1022.8,686.656 1023.36,686.656 1023.92,686.656 1024.48,686.656 1025.04,686.656 1025.6,686.656 1026.16,686.656 1026.72,686.656 1027.28,686.656 1027.83,686.656 1028.39,686.656 1028.95,686.656 1029.51,686.656 1030.07,686.656 1030.63,686.656 1031.19,686.656 1031.75,686.656 1032.31,686.656 1032.87,686.656 1033.43,686.656 1033.99,686.656 1034.55,686.656 1035.1,686.656 1035.66,686.656 1036.22,686.656 1036.78,686.656 1037.34,686.656 1037.9,686.656 1038.46,686.656 1039.02,686.656 1039.58,686.656 1040.14,686.656 1040.7,686.656 1041.26,686.656 1041.82,686.656 1042.38,686.656 1042.93,686.656 1043.49,686.656 1044.05,686.656 1044.61,686.656 1045.17,686.656 1045.73,686.656 1046.29,686.656 1046.85,686.656 1047.41,686.656 1047.97,686.656 1048.53,686.656 1049.09,686.656 1049.65,686.656 1050.2,686.656 1050.76,686.656 1051.32,686.656 1051.88,686.656 1052.44,686.656 1053,686.656 1053.56,686.656 1054.12,686.656 1054.68,686.656 1055.24,686.656 1055.8,686.656 1056.36,686.656 1056.92,686.656 1057.48,686.656 1058.03,686.656 1058.59,686.656 1059.15,686.656 1059.71,686.656 1060.27,686.656 1060.83,686.656 1061.39,686.656 1061.95,686.656 1062.51,686.656 1063.07,686.656 1063.63,686.656 1064.19,686.656 1064.75,686.656 1065.3,686.656 1065.86,686.656 1066.42,686.656 1066.98,686.656 1067.54,686.656 1068.1,686.656 1068.66,686.656 1069.22,686.656 1069.78,686.656 1070.34,686.656 1070.9,686.656 1071.46,686.656 1072.02,686.656 1072.57,686.656 1073.13,686.656 1073.69,686.656 1074.25,686.656 1074.81,686.656 1075.37,686.656 1075.93,686.656 1076.49,686.656 1077.05,686.656 1077.61,686.656 1078.17,686.656 1078.73,686.656 1079.29,686.656 1079.85,686.656 1080.4,686.656 1080.96,686.656 1081.52,686.656 1082.08,686.656 1082.64,686.656 1083.2,686.656 1083.76,686.656 1084.32,686.656 1084.88,686.656 1085.44,686.656 1086,686.656 1086.56,686.656 1087.12,686.656 1087.67,686.656 1088.23,686.656 1088.79,686.656 1089.35,686.656 1089.91,686.656 1090.47,686.656 1091.03,686.656 1091.59,686.656 1092.15,686.656 1092.71,686.656 1093.27,686.656 1093.83,686.656 1094.39,686.656 1094.94,686.656 1095.5,686.656 1096.06,686.656 1096.62,686.656 1097.18,686.656 1097.74,686.656 1098.3,686.656 1098.86,686.656 1099.42,686.656 1099.98,686.656 1100.54,686.656 1101.1,686.656 1101.66,686.656 1102.22,686.656 1102.77,686.656 1103.33,686.656 1103.89,686.656 1104.45,686.656 1105.01,686.656 1105.57,686.656 1106.13,686.656 1106.69,686.656 1107.25,686.656 1107.81,686.656 1108.37,686.656 1108.93,686.656 1109.49,686.656 1110.04,686.656 1110.6,686.656 1111.16,686.656 1111.72,686.656 1112.28,686.656 1112.84,686.656 1113.4,686.656 1113.96,686.656 1114.52,686.656 1115.08,686.656 1115.64,686.656 1116.2,686.656 1116.76,686.656 1117.31,686.656 1117.87,686.656 1118.43,686.656 1118.99,686.656 1119.55,686.656 1120.11,686.656 1120.67,686.656 1121.23,686.656 1121.79,686.656 1122.35,686.656 1122.91,686.656 1123.47,686.656 1124.03,686.656 1124.59,686.656 1125.14,686.656 1125.7,686.656 1126.26,686.656 1126.82,686.656 1127.38,686.656 1127.94,686.656 1128.5,686.656 1129.06,686.656 1129.62,686.656 1130.18,686.656 1130.74,686.656 1131.3,686.656 1131.86,686.656 1132.41,686.656 1132.97,686.656 1133.53,686.656 1134.09,686.656 1134.65,686.656 1135.21,686.656 1135.77,686.656 1136.33,686.656 1136.89,686.656 1137.45,686.656 1138.01,686.656 1138.57,686.656 1139.13,686.656 1139.68,686.656 1140.24,686.656 1140.8,686.656 1141.36,686.656 1141.92,686.656 1142.48,686.656 1143.04,686.656 1143.6,686.656 1144.16,686.656 1144.72,686.656 1145.28,686.656 1145.84,686.656 1146.4,686.656 1146.96,686.656 1147.51,686.656 1148.07,686.656 1148.63,686.656 1149.19,686.656 1149.75,686.656 1150.31,686.656 1150.87,686.656 1151.43,686.656 1151.99,686.656 1152.55,686.656 1153.11,686.656 1153.67,686.656 1154.23,686.656 1154.78,686.656 1155.34,686.656 1155.9,686.656 1156.46,686.656 1157.02,686.656 1157.58,686.656 1158.14,686.656 1158.7,686.656 1159.26,686.656 1159.82,686.656 1160.38,686.656 1160.94,686.656 1161.5,686.656 1162.05,686.656 1162.61,686.656 1163.17,686.656 1163.73,686.656 1164.29,686.656 1164.85,686.656 1165.41,686.656 1165.97,686.656 1166.53,686.656 1167.09,686.656 1167.65,686.656 1168.21,686.656 1168.77,686.656 1169.33,686.656 1169.88,686.656 1170.44,686.656 1171,686.656 1171.56,686.656 1172.12,686.656 1172.68,686.656 1173.24,686.656 1173.8,686.656 1174.36,686.656 1174.92,686.656 1175.48,686.656 1176.04,686.656 1176.6,686.656 1177.15,686.656 1177.71,686.656 1178.27,686.656 1178.83,686.656 1179.39,686.656 1179.95,686.656 1180.51,686.656 1181.07,686.656 1181.63,686.656 1182.19,686.656 1182.75,686.656 1183.31,686.656 1183.87,686.656 1184.43,686.656 1184.98,686.656 1185.54,686.656 1186.1,686.656 1186.66,686.656 1187.22,686.656 1187.78,686.656 1188.34,686.656 1188.9,686.656 1189.46,686.656 1190.02,686.656 1190.58,686.656 1191.14,686.656 1191.7,686.656 1192.25,686.656 1192.81,686.656 1193.37,686.656 1193.93,686.656 1194.49,686.656 1195.05,686.656 1195.61,686.656 1196.17,686.656 1196.73,686.656 1197.29,686.656 1197.85,686.656 1198.41,686.656 1198.97,686.656 1199.52,686.656 1200.08,686.656 1200.64,686.656 1201.2,686.656 1201.76,686.656 1202.32,686.656 1202.88,686.656 1203.44,686.656 1204,686.656 1204.56,686.656 1205.12,686.656 1205.68,686.656 1206.24,686.656 1206.8,686.656 1207.35,686.656 1207.91,686.656 1208.47,686.656 1209.03,686.656 1209.59,686.656 1210.15,686.656 1210.71,686.656 1211.27,686.656 1211.83,686.656 1212.39,686.656 1212.95,686.656 1213.51,686.656 1214.07,686.656 1214.62,686.656 1215.18,686.656 1215.74,686.656 1216.3,686.656 1216.86,686.656 1217.42,686.656 1217.98,686.656 1218.54,686.656 1219.1,686.656 1219.66,686.656 1220.22,686.656 1220.78,686.656 1221.34,686.656 1221.89,686.656 1222.45,686.656 1223.01,686.656 1223.57,686.656 1224.13,686.656 1224.69,686.656 1225.25,686.656 1225.81,686.656 1226.37,686.656 1226.93,686.656 1227.49,686.656 1228.05,686.656 1228.61,686.656 1229.17,686.656 1229.72,686.656 1230.28,686.656 1230.84,686.656 1231.4,686.656 1231.96,686.656 1232.52,686.656 1233.08,686.656 1233.64,686.656 1234.2,686.656 1234.76,686.656 1235.32,686.656 1235.88,686.656 1236.44,686.656 1236.99,686.656 1237.55,686.656 1238.11,686.656 1238.67,686.656 1239.23,686.656 1239.79,686.656 1240.35,686.656 1240.91,686.656 1241.47,686.656 1242.03,686.656 1242.59,686.656 1243.15,686.656 1243.71,686.656 1244.26,686.656 1244.82,686.656 1245.38,686.656 1245.94,686.656 1246.5,686.656 1247.06,686.656 1247.62,686.656 1248.18,686.656 1248.74,686.656 1249.3,686.656 1249.86,686.656 1250.42,686.656 1250.98,686.656 1251.54,686.656 1252.09,686.656 1252.65,686.656 1253.21,686.656 1253.77,686.656 1254.33,686.656 1254.89,686.656 1255.45,686.656 1256.01,686.656 1256.57,686.656 1257.13,686.656 1257.69,686.656 1258.25,686.656 1258.81,686.656 1259.36,686.656 1259.92,686.656 1260.48,686.656 1261.04,686.656 1261.6,686.656 1262.16,686.656 1262.72,686.656 1263.28,686.656 1263.84,686.656 1264.4,686.656 1264.96,686.656 1265.52,686.656 1266.08,686.656 1266.63,686.656 1267.19,686.656 1267.75,686.656 1268.31,686.656 1268.87,686.656 1269.43,686.656 1269.99,686.656 1270.55,686.656 1271.11,686.656 1271.67,686.656 1272.23,686.656 1272.79,686.656 1273.35,686.656 1273.91,686.656 1274.46,686.656 1275.02,686.656 1275.58,686.656 1276.14,686.656 1276.7,686.656 1277.26,686.656 1277.82,686.656 1278.38,686.656 1278.94,686.656 1279.5,686.656 1280.06,686.656 1280.62,686.656 1281.18,686.656 1281.73,686.656 1282.29,686.656 1282.85,686.656 1283.41,686.656 1283.97,686.656 1284.53,686.656 1285.09,686.656 1285.65,686.656 1286.21,686.656 1286.77,686.656 1287.33,686.656 1287.89,686.656 1288.45,686.656 1289,686.656 1289.56,686.656 1290.12,686.656 1290.68,686.656 1291.24,686.656 1291.8,686.656 1292.36,686.656 1292.92,686.656 1293.48,686.656 1294.04,686.656 1294.6,686.656 1295.16,686.656 1295.72,686.656 1296.28,686.656 1296.83,686.656 1297.39,686.656 1297.95,686.656 1298.51,686.656 1299.07,686.656 1299.63,686.656 1300.19,686.656 1300.75,686.656 1301.31,686.656 1301.87,686.656 1302.43,686.656 1302.99,686.656 1303.55,686.656 1304.1,686.656 1304.66,686.656 1305.22,686.656 1305.78,686.656 1306.34,686.656 1306.9,686.656 1307.46,686.656 1308.02,686.656 1308.58,686.656 1309.14,686.656 1309.7,686.656 1310.26,686.656 1310.82,686.656 1311.38,686.656 1311.93,686.656 1312.49,686.656 1313.05,686.656 1313.61,686.656 1314.17,686.656 1314.73,686.656 1315.29,686.656 1315.85,686.656 1316.41,686.656 1316.97,686.656 1317.53,686.656 1318.09,686.656 1318.65,686.656 1319.2,686.656 1319.76,686.656 1320.32,686.656 1320.88,686.656 1321.44,686.656 1322,686.656 1322.56,686.656 1323.12,686.656 1323.68,686.656 1324.24,686.656 1324.8,686.656 1325.36,686.656 1325.92,686.656 1326.47,686.656 1327.03,686.656 1327.59,686.656 1328.15,686.656 1328.71,686.656 1329.27,686.656 1329.83,686.656 1330.39,686.656 1330.95,686.656 1331.51,686.656 1332.07,686.656 1332.63,686.656 1333.19,686.656 1333.75,686.656 1334.3,686.656 1334.86,686.656 1335.42,686.656 1335.98,686.656 1336.54,686.656 1337.1,686.656 1337.66,686.656 1338.22,686.656 1338.78,686.656 1339.34,686.656 1339.9,686.656 1340.46,686.656 1341.02,686.656 1341.57,686.656 1342.13,686.656 1342.69,686.656 1343.25,686.656 1343.81,686.656 1344.37,686.656 1344.93,686.656 1345.49,686.656 1346.05,686.656 1346.61,686.656 1347.17,686.656 1347.73,686.656 1348.29,686.656 1348.84,686.656 1349.4,686.656 1349.96,686.656 1350.52,686.656 1351.08,686.656 1351.64,686.656 1352.2,686.656 1352.76,686.656 1353.32,686.656 1353.88,686.656 1354.44,686.656 1355,686.656 1355.56,686.656 1356.12,686.656 1356.67,686.656 1357.23,686.656 1357.79,686.656 1358.35,686.656 1358.91,686.656 1359.47,686.656 1360.03,686.656 1360.59,686.656 1361.15,686.656 1361.71,686.656 1362.27,686.656 1362.83,686.656 1363.39,686.656 1363.94,686.656 1364.5,686.656 1365.06,686.656 1365.62,686.656 1366.18,686.656 1366.74,686.656 1367.3,686.656 1367.86,686.656 1368.42,686.656 1368.98,686.656 1369.54,686.656 1370.1,686.656 1370.66,686.656 1371.21,686.656 1371.77,686.656 1372.33,686.656 1372.89,686.656 1373.45,686.656 1374.01,686.656 1374.57,686.656 1375.13,686.656 1375.69,686.656 1376.25,686.656 1376.81,686.656 1377.37,686.656 1377.93,686.656 1378.49,686.656 1379.04,686.656 1379.6,686.656 1380.16,686.656 1380.72,686.656 1381.28,686.656 1381.84,686.656 1382.4,686.656 1382.96,686.656 1383.52,686.656 1384.08,686.656 1384.64,686.656 1385.2,686.656 1385.76,686.656 1386.31,686.656 1386.87,686.656 1387.43,686.656 1387.99,686.656 1388.55,686.656 1389.11,686.656 1389.67,686.656 1390.23,686.656 1390.79,686.656 1391.35,686.656 1391.91,686.656 1392.47,686.656 1393.03,686.656 1393.58,686.656 1394.14,686.656 1394.7,686.656 1395.26,686.656 1395.82,686.656 1396.38,686.656 1396.94,686.656 1397.5,686.656 1398.06,686.656 1398.62,686.656 1399.18,686.656 1399.74,686.656 1400.3,686.656 1400.86,686.656 1401.41,686.656 1401.97,686.656 1402.53,686.656 1403.09,686.656 1403.65,686.656 1404.21,686.656 1404.77,686.656 1405.33,686.656 1405.89,686.656 1406.45,686.656 1407.01,686.656 1407.57,686.656 1408.13,686.656 1408.68,686.656 1409.24,686.656 1409.8,686.656 1410.36,686.656 1410.92,686.656 1411.48,686.656 1412.04,686.656 1412.6,686.656 1413.16,686.656 1413.72,686.656 1414.28,686.656 1414.84,686.656 1415.4,686.656 1415.95,686.656 1416.51,686.656 1417.07,686.656 1417.63,686.656 1418.19,686.656 1418.75,686.656 1419.31,686.656 1419.87,686.656 1420.43,686.656 1420.99,686.656 1421.55,686.656 1422.11,686.656 1422.67,686.656 1423.23,686.656 1423.78,686.656 1424.34,686.656 1424.9,686.656 1425.46,686.656 1426.02,686.656 1426.58,686.656 1427.14,686.656 1427.7,686.656 1428.26,686.656 1428.82,686.656 1429.38,686.656 1429.94,686.656 1430.5,686.656 1431.05,686.656 1431.61,686.656 1432.17,686.656 1432.73,686.656 1433.29,686.656 1433.85,686.656 1434.41,686.656 1434.97,686.656 1435.53,686.656 1436.09,686.656 1436.65,686.656 1437.21,686.656 1437.77,686.656 1438.33,686.656 1438.88,686.656 1439.44,686.656 1440,686.656 1440.56,686.656 1441.12,686.656 1441.68,686.656 1442.24,686.656 1442.8,686.656 1443.36,686.656 1443.92,686.656 1444.48,686.656 1445.04,686.656 1445.6,686.656 1446.15,686.656 1446.71,686.656 1447.27,686.656 1447.83,686.656 1448.39,686.656 1448.95,686.656 1449.51,686.656 1450.07,686.656 1450.63,686.656 1451.19,686.656 1451.75,686.656 1452.31,686.656 1452.87,686.656 1453.42,686.656 1453.98,686.656 1454.54,686.656 1455.1,686.656 1455.66,686.656 1456.22,686.656 1456.78,686.656 1457.34,686.656 1457.9,686.656 1458.46,686.656 1459.02,686.656 1459.58,686.656 1460.14,686.656 1460.7,686.656 1461.25,686.656 1461.81,686.656 1462.37,686.656 1462.93,686.656 1463.49,686.656 1464.05,686.656 1464.61,686.656 1465.17,686.656 1465.73,686.656 1466.29,686.656 1466.85,686.656 1467.41,686.656 1467.97,686.656 1468.52,686.656 1469.08,686.656 1469.64,686.656 1470.2,686.656 1470.76,686.656 1471.32,686.656 1471.88,686.656 1472.44,686.656 1473,686.656 1473.56,686.656 1474.12,686.656 1474.68,686.656 1475.24,686.656 1475.79,686.656 1476.35,686.656 1476.91,686.656 1477.47,686.656 1478.03,686.656 1478.59,686.656 1479.15,686.656 1479.71,686.656 1480.27,686.656 1480.83,686.656 1481.39,686.656 1481.95,686.656 1482.51,686.656 1483.07,686.656 1483.62,686.656 1484.18,686.656 1484.74,686.656 1485.3,686.656 1485.86,686.656 1486.42,686.656 1486.98,686.656 1487.54,686.656 1488.1,686.656 1488.66,686.656 1489.22,686.656 1489.78,686.656 1490.34,686.656 1490.89,686.656 1491.45,686.656 1492.01,686.656 1492.57,686.656 1493.13,686.656 1493.69,686.656 1494.25,686.656 1494.81,686.656 1495.37,686.656 1495.93,686.656 1496.49,686.656 1497.05,686.656 1497.61,686.656 1498.16,686.656 1498.72,686.656 1499.28,686.656 1499.84,686.656 1500.4,686.656 1500.96,686.656 1501.52,686.656 1502.08,686.656 1502.64,686.656 1503.2,686.656 1503.76,686.656 1504.32,686.656 1504.88,686.656 1505.44,686.656 1505.99,686.656 1506.55,686.656 1507.11,686.656 1507.67,686.656 1508.23,686.656 1508.79,686.656 1509.35,686.656 1509.91,686.656 1510.47,686.656 1511.03,686.656 1511.59,686.656 1512.15,686.656 1512.71,686.656 1513.26,686.656 1513.82,686.656 1514.38,686.656 1514.94,686.656 1515.5,686.656 1516.06,686.656 1516.62,686.656 1517.18,686.656 1517.74,686.656 1518.3,686.656 1518.86,686.656 1519.42,686.656 1519.98,686.656 1520.53,686.656 1521.09,686.656 1521.65,686.656 1522.21,686.656 1522.77,686.656 1523.33,686.656 1523.89,686.656 1524.45,686.656 1525.01,686.656 1525.57,686.656 1526.13,686.656 1526.69,686.656 1527.25,686.656 1527.81,686.656 1528.36,686.656 1528.92,686.656 1529.48,686.656 1530.04,686.656 1530.6,686.656 1531.16,686.656 1531.72,686.656 1532.28,686.656 1532.84,686.656 1533.4,686.656 1533.96,686.656 1534.52,686.656 1535.08,686.656 1535.63,686.656 1536.19,686.656 1536.75,686.656 1537.31,686.656 1537.87,686.656 1538.43,686.656 1538.99,686.656 1539.55,686.656 1540.11,686.656 1540.67,686.656 1541.23,686.656 1541.79,686.656 1542.35,686.656 1542.9,686.656 1543.46,686.656 1544.02,686.656 1544.58,686.656 1545.14,686.656 1545.7,686.656 1546.26,686.656 1546.82,686.656 1547.38,686.656 1547.94,686.656 1548.5,686.656 1549.06,686.656 1549.62,686.656 1550.18,686.656 1550.73,686.656 1551.29,686.656 1551.85,686.656 1552.41,686.656 1552.97,686.656 1553.53,686.656 1554.09,686.656 1554.65,686.656 1555.21,686.656 1555.77,686.656 1556.33,686.656 1556.89,686.656 1557.45,686.656 1558,686.656 1558.56,686.656 1559.12,686.656 1559.68,686.656 1560.24,686.656 1560.8,686.656 1561.36,686.656 1561.92,686.656 1562.48,686.656 1563.04,686.656 1563.6,686.656 1564.16,686.656 1564.72,686.656 1565.28,686.656 1565.83,686.656 1566.39,686.656 1566.95,686.656 1567.51,686.656 1568.07,686.656 1568.63,686.656 1569.19,686.656 1569.75,686.656 1570.31,686.656 1570.87,686.656 1571.43,686.656 1571.99,686.656 1572.55,686.656 1573.1,686.656 1573.66,686.656 1574.22,686.656 1574.78,686.656 1575.34,686.656 1575.9,686.656 1576.46,686.656 1577.02,686.656 1577.58,686.656 1578.14,686.656 1578.7,686.656 1579.26,686.656 1579.82,686.656 1580.37,686.656 1580.93,686.656 1581.49,686.656 1582.05,686.656 1582.61,686.656 1583.17,686.656 1583.73,686.656 1584.29,686.656 1584.85,686.656 1585.41,686.656 1585.97,686.656 1586.53,686.656 1587.09,686.656 1587.65,686.656 1588.2,686.656 1588.76,686.656 1589.32,686.656 1589.88,686.656 1590.44,686.656 1591,686.656 1591.56,686.656 1592.12,686.656 1592.68,686.656 1593.24,686.656 1593.8,686.656 1594.36,686.656 1594.92,686.656 1595.47,686.656 1596.03,686.656 1596.59,686.656 1597.15,686.656 1597.71,686.656 1598.27,686.656 1598.83,686.656 1599.39,686.656 1599.95,686.656 1600.51,686.656 1601.07,686.656 1601.63,686.656 1602.19,686.656 1602.74,686.656 1603.3,686.656 1603.86,686.656 1604.42,686.656 1604.98,686.656 1605.54,686.656 1606.1,686.656 1606.66,686.656 1607.22,686.656 1607.78,686.656 1608.34,686.656 1608.9,686.656 1609.46,686.656 1610.02,686.656 1610.57,686.656 1611.13,686.656 1611.69,686.656 1612.25,686.656 1612.81,686.656 1613.37,686.656 1613.93,686.656 1614.49,686.656 1615.05,686.656 1615.61,686.656 1616.17,686.656 1616.73,686.656 1617.29,686.656 1617.84,686.656 1618.4,686.656 1618.96,686.656 1619.52,686.656 1620.08,686.656 1620.64,686.656 1621.2,686.656 1621.76,686.656 1622.32,686.656 1622.88,686.656 1623.44,686.656 1624,686.656 1624.56,686.656 1625.11,686.656 1625.67,686.656 1626.23,686.656 1626.79,686.656 1627.35,686.656 1627.91,686.656 1628.47,686.656 1629.03,686.656 1629.59,686.656 1630.15,686.656 1630.71,686.656 1631.27,686.656 1631.83,686.656 1632.39,686.656 1632.94,686.656 1633.5,686.656 1634.06,686.656 1634.62,686.656 1635.18,686.656 1635.74,686.656 1636.3,686.656 1636.86,686.656 1637.42,686.656 1637.98,686.656 1638.54,686.656 1639.1,686.656 1639.66,686.656 1640.21,686.656 1640.77,686.656 1641.33,686.656 1641.89,686.656 1642.45,686.656 1643.01,686.656 1643.57,686.656 1644.13,686.656 1644.69,686.656 1645.25,686.656 1645.81,686.656 1646.37,686.656 1646.93,686.656 1647.48,686.656 1648.04,686.656 1648.6,686.656 1649.16,686.656 1649.72,686.656 1650.28,686.656 1650.84,686.656 1651.4,686.656 1651.96,686.656 1652.52,686.656 1653.08,686.656 1653.64,686.656 1654.2,686.656 1654.76,686.656 1655.31,686.656 1655.87,686.656 1656.43,686.656 1656.99,686.656 1657.55,686.656 1658.11,686.656 1658.67,686.656 1659.23,686.656 1659.79,686.656 1660.35,686.656 1660.91,686.656 1661.47,686.656 1662.03,686.656 1662.58,686.656 1663.14,686.656 1663.7,686.656 1664.26,686.656 1664.82,686.656 1665.38,686.656 1665.94,686.656 1666.5,686.656 1667.06,686.656 1667.62,686.656 1668.18,686.656 1668.74,686.656 1669.3,686.656 1669.85,686.656 1670.41,686.656 1670.97,686.656 1671.53,686.656 1672.09,686.656 1672.65,686.656 1673.21,686.656 1673.77,686.656 1674.33,686.656 1674.89,686.656 1675.45,686.656 1676.01,686.656 1676.57,686.656 1677.13,686.656 1677.68,686.656 1678.24,686.656 1678.8,686.656 1679.36,686.656 1679.92,686.656 1680.48,686.656 1681.04,686.656 1681.6,686.656 1682.16,686.656 1682.72,686.656 1683.28,686.656 1683.84,686.656 1684.4,686.656 1684.95,686.656 1685.51,686.656 1686.07,686.656 1686.63,686.656 1687.19,686.656 1687.75,686.656 1688.31,686.656 1688.87,686.656 1689.43,686.656 1689.99,686.656 1690.55,686.656 1691.11,686.656 1691.67,686.656 1692.23,686.656 1692.78,686.656 1693.34,686.656 1693.9,686.656 1694.46,686.656 1695.02,686.656 1695.58,686.656 1696.14,686.656 1696.7,686.656 1697.26,686.656 1697.82,686.656 1698.38,686.656 1698.94,686.656 1699.5,686.656 1700.05,686.656 1700.61,686.656 1701.17,686.656 1701.73,686.656 1702.29,686.656 1702.85,686.656 1703.41,686.656 1703.97,686.656 1704.53,686.656 1705.09,686.656 1705.65,686.656 1706.21,686.656 1706.77,686.656 1707.32,686.656 1707.88,686.656 1708.44,686.656 1709,686.656 1709.56,686.656 1710.12,686.656 1710.68,686.656 1711.24,686.656 1711.8,686.656 1712.36,686.656 1712.92,686.656 1713.48,686.656 1714.04,686.656 1714.6,686.656 1715.15,686.656 1715.71,686.656 1716.27,686.656 1716.83,686.656 1717.39,686.656 1717.95,686.656 1718.51,686.656 1719.07,686.656 1719.63,686.656 1720.19,686.656 1720.75,686.656 1721.31,686.656 1721.87,686.656 1722.42,686.656 1722.98,686.656 1723.54,686.656 1724.1,686.656 1724.66,686.656 1725.22,686.656 1725.78,686.656 1726.34,686.656 1726.9,686.656 1727.46,686.656 1728.02,686.656 1728.58,686.656 1729.14,686.656 1729.69,686.656 1730.25,686.656 1730.81,686.656 1731.37,686.656 1731.93,686.656 1732.49,686.656 1733.05,686.656 1733.61,686.656 1734.17,686.656 1734.73,686.656 1735.29,686.656 1735.85,686.656 1736.41,686.656 1736.97,686.656 1737.52,686.656 1738.08,686.656 1738.64,686.656 1739.2,686.656 1739.76,686.656 1740.32,686.656 1740.88,686.656 1741.44,686.656 1742,686.656 1742.56,686.656 1743.12,686.656 1743.68,686.656 1744.24,686.656 1744.79,686.656 1745.35,686.656 1745.91,686.656 1746.47,686.656 1747.03,686.656 1747.59,686.656 1748.15,686.656 1748.71,686.656 1749.27,686.656 1749.83,686.656 1750.39,686.656 1750.95,686.656 1751.51,686.656 1752.06,686.656 1752.62,686.656 1753.18,686.656 1753.74,686.656 1754.3,686.656 1754.86,686.656 1755.42,686.656 1755.98,686.656 1756.54,686.656 1757.1,686.656 1757.66,686.656 1758.22,686.656 1758.78,686.656 1759.34,686.656 1759.89,686.656 1760.45,686.656 1761.01,686.656 1761.57,686.656 1762.13,686.656 1762.69,686.656 1763.25,686.656 1763.81,686.656 1764.37,686.656 1764.93,686.656 1765.49,686.656 1766.05,686.656 1766.61,686.656 1767.16,686.656 1767.72,686.656 1768.28,686.656 1768.84,686.656 1769.4,686.656 1769.96,686.656 1770.52,686.656 1771.08,686.656 1771.64,686.656 1772.2,686.656 1772.76,686.656 1773.32,686.656 1773.88,686.656 1774.43,686.656 1774.99,686.656 1775.55,686.656 1776.11,686.656 1776.67,686.656 1777.23,686.656 1777.79,686.656 1778.35,686.656 1778.91,686.656 1779.47,686.656 1780.03,686.656 1780.59,686.656 1781.15,686.656 1781.71,686.656 1782.26,686.656 1782.82,686.656 1783.38,686.656 1783.94,686.656 1784.5,686.656 1785.06,686.656 1785.62,686.656 1786.18,686.656 1786.74,686.656 1787.3,686.656 1787.86,686.656 1788.42,686.656 1788.98,686.656 1789.53,686.656 1790.09,686.656 1790.65,686.656 1791.21,686.656 1791.77,686.656 1792.33,686.656 1792.89,686.656 1793.45,686.656 1794.01,686.656 1794.57,686.656 1795.13,686.656 1795.69,686.656 1796.25,686.656 1796.8,686.656 1797.36,686.656 1797.92,686.656 1798.48,686.656 1799.04,686.656 1799.6,686.656 1800.16,686.656 1800.72,686.656 1801.28,686.656 1801.84,686.656 1802.4,686.656 1802.96,686.656 1803.52,686.656 1804.08,686.656 1804.63,686.656 1805.19,686.656 1805.75,686.656 1806.31,686.656 1806.87,686.656 1807.43,686.656 1807.99,686.656 1808.55,686.656 1809.11,686.656 1809.67,686.656 1810.23,686.656 1810.79,686.656 1811.35,686.656 1811.9,686.656 1812.46,686.656 1813.02,686.656 1813.58,686.656 1814.14,686.656 1814.7,686.656 1815.26,686.656 1815.82,686.656 1816.38,686.656 1816.94,686.656 1817.5,686.656 1818.06,686.656 1818.62,686.656 1819.18,686.656 1819.73,686.656 1820.29,686.656 1820.85,686.656 1821.41,686.656 1821.97,686.656 1822.53,686.656 1823.09,686.656 1823.65,686.656 1824.21,686.656 1824.77,686.656 1825.33,686.656 1825.89,686.656 1826.45,686.656 1827,686.656 1827.56,686.656 1828.12,686.656 1828.68,686.656 1829.24,686.656 1829.8,686.656 1830.36,686.656 1830.92,686.656 1831.48,686.656 1832.04,686.656 1832.6,686.656 1833.16,686.656 1833.72,686.656 1834.27,686.656 1834.83,686.656 1835.39,686.656 1835.95,686.656 1836.51,686.656 1837.07,686.656 1837.63,686.656 1838.19,686.656 \"/>\n<path clip-path=\"url(#clip603)\" d=\"M720.247 684.886 L720.806 684.886 L721.365 684.886 L721.924 684.886 L722.484 684.886 L723.043 684.886 L723.602 684.886 L724.161 684.886 L724.721 684.886 L725.28 684.886 L725.839 684.886 L726.398 684.886 L726.958 684.886 L727.517 684.886 L728.076 684.886 L728.635 684.886 L729.195 684.886 L729.754 684.886 L730.313 684.886 L730.872 684.886 L731.432 684.886 L731.991 684.886 L732.55 684.886 L733.109 684.886 L733.669 684.886 L734.228 684.886 L734.787 684.886 L735.346 684.886 L735.906 684.886 L736.465 684.886 L737.024 684.886 L737.583 684.886 L738.143 684.886 L738.702 684.886 L739.261 684.886 L739.82 684.886 L740.38 684.886 L740.939 684.886 L741.498 684.886 L742.057 684.886 L742.617 684.886 L743.176 684.886 L743.735 684.886 L744.294 684.886 L744.854 684.886 L745.413 684.886 L745.972 684.886 L746.531 684.886 L747.091 684.886 L747.65 684.886 L748.209 684.886 L748.768 684.886 L749.328 684.886 L749.887 684.886 L750.446 684.886 L751.005 684.886 L751.565 684.886 L752.124 684.886 L752.683 684.886 L753.242 684.886 L753.802 684.886 L754.361 684.886 L754.92 684.886 L755.479 684.886 L756.039 684.886 L756.598 684.886 L757.157 684.886 L757.716 684.886 L758.276 684.886 L758.835 684.886 L759.394 684.886 L759.953 684.886 L760.513 684.886 L761.072 684.886 L761.631 684.886 L762.19 684.886 L762.75 684.886 L763.309 684.886 L763.868 684.886 L764.427 684.886 L764.987 684.886 L765.546 684.886 L766.105 684.886 L766.664 684.886 L767.224 684.886 L767.783 684.886 L768.342 684.886 L768.901 684.886 L769.461 684.886 L770.02 684.886 L770.579 684.886 L771.138 684.886 L771.698 684.886 L772.257 684.886 L772.816 684.886 L773.375 684.886 L773.935 684.886 L774.494 684.886 L775.053 684.886 L775.612 684.886 L776.172 684.886 L776.731 684.886 L777.29 684.886 L777.849 684.886 L778.409 684.886 L778.968 684.886 L779.527 684.886 L780.086 684.886 L780.646 684.886 L781.205 684.886 L781.764 684.886 L782.323 684.886 L782.883 684.886 L783.442 684.886 L784.001 684.886 L784.56 684.886 L785.12 684.886 L785.679 684.886 L786.238 684.886 L786.797 684.886 L787.357 684.886 L787.916 684.886 L788.475 684.886 L789.034 684.886 L789.594 684.886 L790.153 684.886 L790.712 684.886 L791.271 684.886 L791.831 684.886 L792.39 684.886 L792.949 684.886 L793.508 684.886 L794.068 684.886 L794.627 684.886 L795.186 684.886 L795.745 684.886 L796.305 684.886 L796.864 684.886 L797.423 684.886 L797.982 684.886 L798.542 684.886 L799.101 684.886 L799.66 684.886 L800.219 684.886 L800.779 684.886 L801.338 684.886 L801.897 684.886 L802.456 684.886 L803.016 684.886 L803.575 684.886 L804.134 684.886 L804.693 684.886 L805.253 684.886 L805.812 684.886 L806.371 684.886 L806.931 684.886 L807.49 684.886 L808.049 684.886 L808.608 684.886 L809.168 684.886 L809.727 684.886 L810.286 684.886 L810.845 684.886 L811.405 684.886 L811.964 684.886 L812.523 684.886 L813.082 684.886 L813.642 684.886 L814.201 684.886 L814.76 684.886 L815.319 684.886 L815.879 684.886 L816.438 684.886 L816.997 684.886 L817.556 684.886 L818.116 684.886 L818.675 684.886 L819.234 684.886 L819.793 684.886 L820.353 684.886 L820.912 684.886 L821.471 684.886 L822.03 684.886 L822.59 684.886 L823.149 684.886 L823.708 684.886 L824.267 684.886 L824.827 684.886 L825.386 684.886 L825.945 684.886 L826.504 684.886 L827.064 684.886 L827.623 684.886 L828.182 684.886 L828.741 684.886 L829.301 684.886 L829.86 684.886 L830.419 684.886 L830.978 684.886 L831.538 684.886 L832.097 684.886 L832.656 684.886 L833.215 684.886 L833.775 684.886 L834.334 684.886 L834.893 684.886 L835.452 684.886 L836.012 684.886 L836.571 684.886 L837.13 684.886 L837.689 684.886 L838.249 684.886 L838.808 684.886 L839.367 684.886 L839.926 684.886 L840.486 684.886 L841.045 684.886 L841.604 684.886 L842.163 684.886 L842.723 684.886 L843.282 684.886 L843.841 684.886 L844.4 684.886 L844.96 684.886 L845.519 684.886 L846.078 684.886 L846.637 684.886 L847.197 684.886 L847.756 684.886 L848.315 684.886 L848.874 684.886 L849.434 684.886 L849.993 684.886 L850.552 684.886 L851.111 684.886 L851.671 684.886 L852.23 684.886 L852.789 684.886 L853.348 684.886 L853.908 684.886 L854.467 684.886 L855.026 684.886 L855.585 684.886 L856.145 684.886 L856.704 684.886 L857.263 684.886 L857.822 684.886 L858.382 684.886 L858.941 684.886 L859.5 684.886 L860.059 684.886 L860.619 684.886 L861.178 684.886 L861.737 684.886 L862.296 684.886 L862.856 684.886 L863.415 684.886 L863.974 684.886 L864.533 684.886 L865.093 684.886 L865.652 684.886 L866.211 684.886 L866.77 684.886 L867.33 684.886 L867.889 684.886 L868.448 684.886 L869.007 684.886 L869.567 684.886 L870.126 684.886 L870.685 684.886 L871.244 684.886 L871.804 684.886 L872.363 684.886 L872.922 684.886 L873.481 684.886 L874.041 684.886 L874.6 684.886 L875.159 684.886 L875.718 684.886 L876.278 684.886 L876.837 684.886 L877.396 684.886 L877.955 684.886 L878.515 684.886 L879.074 684.886 L879.633 684.886 L880.192 684.886 L880.752 684.886 L881.311 684.886 L881.87 684.886 L882.429 684.886 L882.989 684.886 L883.548 684.886 L884.107 684.886 L884.666 684.886 L885.226 684.886 L885.785 684.886 L886.344 684.886 L886.903 684.886 L887.463 684.886 L888.022 684.886 L888.581 684.886 L889.14 684.886 L889.7 684.886 L890.259 684.886 L890.818 684.886 L891.377 684.886 L891.937 684.886 L892.496 684.886 L893.055 684.886 L893.614 684.886 L894.174 684.886 L894.733 684.886 L895.292 684.886 L895.851 684.886 L896.411 684.886 L896.97 684.886 L897.529 684.886 L898.088 684.886 L898.648 684.886 L899.207 684.886 L899.766 684.886 L900.325 684.886 L900.885 684.886 L901.444 684.886 L902.003 684.886 L902.562 684.886 L903.122 684.886 L903.681 684.886 L904.24 684.886 L904.799 684.886 L905.359 684.886 L905.918 684.886 L906.477 684.886 L907.036 684.886 L907.596 684.886 L908.155 684.886 L908.714 684.886 L909.273 684.886 L909.833 684.886 L910.392 684.886 L910.951 684.886 L911.51 684.886 L912.07 684.886 L912.629 684.886 L913.188 684.886 L913.747 684.886 L914.307 684.886 L914.866 684.886 L915.425 684.886 L915.984 684.886 L916.544 684.886 L917.103 684.886 L917.662 684.886 L918.221 684.886 L918.781 684.886 L919.34 684.886 L919.899 684.886 L920.458 684.886 L921.018 684.886 L921.577 684.886 L922.136 684.886 L922.695 684.886 L923.255 684.886 L923.814 684.886 L924.373 684.886 L924.932 684.886 L925.492 684.886 L926.051 684.886 L926.61 684.886 L927.169 684.886 L927.729 684.886 L928.288 684.886 L928.847 684.886 L929.406 684.886 L929.966 684.886 L930.525 684.886 L931.084 684.886 L931.644 684.886 L932.203 684.886 L932.762 684.886 L933.321 684.886 L933.881 684.886 L934.44 684.886 L934.999 684.886 L935.558 684.886 L936.118 684.886 L936.677 684.886 L937.236 684.886 L937.795 684.886 L938.355 684.886 L938.914 684.886 L939.473 684.886 L940.032 684.886 L940.592 684.886 L941.151 684.886 L941.71 684.886 L942.269 684.886 L942.829 684.886 L943.388 684.886 L943.947 684.886 L944.506 684.886 L945.066 684.886 L945.625 684.886 L946.184 684.886 L946.743 684.886 L947.303 684.886 L947.862 684.886 L948.421 684.886 L948.98 684.886 L949.54 684.886 L950.099 684.886 L950.658 684.886 L951.217 684.886 L951.777 684.886 L952.336 684.886 L952.895 684.886 L953.454 684.886 L954.014 684.886 L954.573 684.886 L955.132 684.886 L955.691 684.886 L956.251 684.886 L956.81 684.886 L957.369 684.886 L957.928 684.886 L958.488 684.886 L959.047 684.886 L959.606 684.886 L960.165 684.886 L960.725 684.886 L961.284 684.886 L961.843 684.886 L962.402 684.886 L962.962 684.886 L963.521 684.886 L964.08 684.886 L964.639 684.886 L965.199 684.886 L965.758 684.886 L966.317 684.886 L966.876 684.886 L967.436 684.886 L967.995 684.886 L968.554 684.886 L969.113 684.886 L969.673 684.886 L970.232 684.886 L970.791 684.886 L971.35 684.886 L971.91 684.886 L972.469 684.886 L973.028 684.886 L973.587 684.886 L974.147 684.886 L974.706 684.886 L975.265 684.886 L975.824 684.886 L976.384 684.886 L976.943 684.886 L977.502 684.886 L978.061 684.886 L978.621 684.886 L979.18 684.886 L979.739 684.886 L980.298 684.886 L980.858 684.886 L981.417 684.886 L981.976 684.886 L982.535 684.886 L983.095 684.886 L983.654 684.886 L984.213 684.886 L984.772 684.886 L985.332 684.886 L985.891 684.886 L986.45 684.886 L987.009 684.886 L987.569 684.886 L988.128 684.886 L988.687 684.886 L989.246 684.886 L989.806 684.886 L990.365 684.886 L990.924 684.886 L991.483 684.886 L992.043 684.886 L992.602 684.886 L993.161 684.886 L993.72 684.886 L994.28 684.886 L994.839 684.886 L995.398 684.886 L995.957 684.886 L996.517 684.886 L997.076 684.886 L997.635 684.886 L998.194 684.886 L998.754 684.886 L999.313 684.886 L999.872 684.886 L1000.43 684.886 L1000.99 684.886 L1001.55 684.886 L1002.11 684.886 L1002.67 684.886 L1003.23 684.886 L1003.79 684.886 L1004.35 684.886 L1004.91 684.886 L1005.46 684.886 L1006.02 684.886 L1006.58 684.886 L1007.14 684.886 L1007.7 684.886 L1008.26 684.886 L1008.82 684.886 L1009.38 684.886 L1009.94 684.886 L1010.5 684.886 L1011.06 684.886 L1011.62 684.886 L1012.18 684.886 L1012.73 684.886 L1013.29 684.886 L1013.85 684.886 L1014.41 684.886 L1014.97 684.886 L1015.53 684.886 L1016.09 684.886 L1016.65 684.886 L1017.21 684.886 L1017.77 684.886 L1018.33 684.886 L1018.89 684.886 L1019.45 684.886 L1020.01 684.886 L1020.56 684.886 L1021.12 684.886 L1021.68 684.886 L1022.24 684.886 L1022.8 684.886 L1023.36 684.886 L1023.92 684.886 L1024.48 684.886 L1025.04 684.886 L1025.6 684.886 L1026.16 684.886 L1026.72 684.886 L1027.28 684.886 L1027.83 684.886 L1028.39 684.886 L1028.95 684.886 L1029.51 684.886 L1030.07 684.886 L1030.63 684.886 L1031.19 684.886 L1031.75 684.886 L1032.31 684.886 L1032.87 684.886 L1033.43 684.886 L1033.99 684.886 L1034.55 684.886 L1035.1 684.886 L1035.66 684.886 L1036.22 684.886 L1036.78 684.886 L1037.34 684.886 L1037.9 684.886 L1038.46 684.886 L1039.02 684.886 L1039.58 684.886 L1040.14 684.886 L1040.7 684.886 L1041.26 684.886 L1041.82 684.886 L1042.38 684.886 L1042.93 684.886 L1043.49 684.886 L1044.05 684.886 L1044.61 684.886 L1045.17 684.886 L1045.73 684.886 L1046.29 684.886 L1046.85 684.886 L1047.41 684.886 L1047.97 684.886 L1048.53 684.886 L1049.09 684.886 L1049.65 684.886 L1050.2 684.886 L1050.76 684.886 L1051.32 684.886 L1051.88 684.886 L1052.44 684.886 L1053 684.886 L1053.56 684.886 L1054.12 684.886 L1054.68 684.886 L1055.24 684.886 L1055.8 684.886 L1056.36 684.886 L1056.92 684.886 L1057.48 684.886 L1058.03 684.886 L1058.59 684.886 L1059.15 684.886 L1059.71 684.886 L1060.27 684.886 L1060.83 684.886 L1061.39 684.886 L1061.95 684.886 L1062.51 684.886 L1063.07 684.886 L1063.63 684.886 L1064.19 684.886 L1064.75 684.886 L1065.3 684.886 L1065.86 684.886 L1066.42 684.886 L1066.98 684.886 L1067.54 684.886 L1068.1 684.886 L1068.66 684.886 L1069.22 684.886 L1069.78 684.886 L1070.34 684.886 L1070.9 684.886 L1071.46 684.886 L1072.02 684.886 L1072.57 684.886 L1073.13 684.886 L1073.69 684.886 L1074.25 684.886 L1074.81 684.886 L1075.37 684.886 L1075.93 684.886 L1076.49 684.886 L1077.05 684.886 L1077.61 684.886 L1078.17 684.886 L1078.73 684.886 L1079.29 684.886 L1079.85 684.886 L1080.4 684.886 L1080.96 684.886 L1081.52 684.886 L1082.08 684.886 L1082.64 684.886 L1083.2 684.886 L1083.76 684.886 L1084.32 684.886 L1084.88 684.886 L1085.44 684.886 L1086 684.886 L1086.56 684.886 L1087.12 684.886 L1087.67 684.886 L1088.23 684.886 L1088.79 684.886 L1089.35 684.886 L1089.91 684.886 L1090.47 684.886 L1091.03 684.886 L1091.59 684.886 L1092.15 684.886 L1092.71 684.886 L1093.27 684.886 L1093.83 684.886 L1094.39 684.886 L1094.94 684.886 L1095.5 684.886 L1096.06 684.886 L1096.62 684.886 L1097.18 684.886 L1097.74 684.886 L1098.3 684.886 L1098.86 684.886 L1099.42 684.886 L1099.98 684.886 L1100.54 684.886 L1101.1 684.886 L1101.66 684.886 L1102.22 684.886 L1102.77 684.886 L1103.33 684.886 L1103.89 684.886 L1104.45 684.886 L1105.01 684.886 L1105.57 684.886 L1106.13 684.886 L1106.69 684.886 L1107.25 684.886 L1107.81 684.886 L1108.37 684.886 L1108.93 684.886 L1109.49 684.886 L1110.04 684.886 L1110.6 684.886 L1111.16 684.886 L1111.72 684.886 L1112.28 684.886 L1112.84 684.886 L1113.4 684.886 L1113.96 684.886 L1114.52 684.886 L1115.08 684.886 L1115.64 684.886 L1116.2 684.886 L1116.76 684.886 L1117.31 684.886 L1117.87 684.886 L1118.43 684.886 L1118.99 684.886 L1119.55 684.886 L1120.11 684.886 L1120.67 684.886 L1121.23 684.886 L1121.79 684.886 L1122.35 684.886 L1122.91 684.886 L1123.47 684.886 L1124.03 684.886 L1124.59 684.886 L1125.14 684.886 L1125.7 684.886 L1126.26 684.886 L1126.82 684.886 L1127.38 684.886 L1127.94 684.886 L1128.5 684.886 L1129.06 684.886 L1129.62 684.886 L1130.18 684.886 L1130.74 684.886 L1131.3 684.886 L1131.86 684.886 L1132.41 684.886 L1132.97 684.886 L1133.53 684.886 L1134.09 684.886 L1134.65 684.886 L1135.21 684.886 L1135.77 684.886 L1136.33 684.886 L1136.89 684.886 L1137.45 684.886 L1138.01 684.886 L1138.57 684.886 L1139.13 684.886 L1139.68 684.886 L1140.24 684.886 L1140.8 684.886 L1141.36 684.886 L1141.92 684.886 L1142.48 684.886 L1143.04 684.886 L1143.6 684.886 L1144.16 684.886 L1144.72 684.886 L1145.28 684.886 L1145.84 684.886 L1146.4 684.886 L1146.96 684.886 L1147.51 684.886 L1148.07 684.886 L1148.63 684.886 L1149.19 684.886 L1149.75 684.886 L1150.31 684.886 L1150.87 684.886 L1151.43 684.886 L1151.99 684.886 L1152.55 684.886 L1153.11 684.886 L1153.67 684.886 L1154.23 684.886 L1154.78 684.886 L1155.34 684.886 L1155.9 684.886 L1156.46 684.886 L1157.02 684.886 L1157.58 684.886 L1158.14 684.886 L1158.7 684.886 L1159.26 684.886 L1159.82 684.886 L1160.38 684.886 L1160.94 684.886 L1161.5 684.886 L1162.05 684.886 L1162.61 684.886 L1163.17 684.886 L1163.73 684.886 L1164.29 684.886 L1164.85 684.886 L1165.41 684.886 L1165.97 684.886 L1166.53 684.886 L1167.09 684.886 L1167.65 684.886 L1168.21 684.886 L1168.77 684.886 L1169.33 684.886 L1169.88 684.886 L1170.44 684.886 L1171 684.886 L1171.56 684.886 L1172.12 684.886 L1172.68 684.886 L1173.24 684.886 L1173.8 684.886 L1174.36 684.886 L1174.92 684.886 L1175.48 684.886 L1176.04 684.886 L1176.6 684.886 L1177.15 684.886 L1177.71 684.886 L1178.27 684.886 L1178.83 684.886 L1179.39 684.886 L1179.95 684.886 L1180.51 684.886 L1181.07 684.886 L1181.63 684.886 L1182.19 684.886 L1182.75 684.886 L1183.31 684.886 L1183.87 684.886 L1184.43 684.886 L1184.98 684.886 L1185.54 684.886 L1186.1 684.886 L1186.66 684.886 L1187.22 684.886 L1187.78 684.886 L1188.34 684.886 L1188.9 684.886 L1189.46 684.886 L1190.02 684.886 L1190.58 684.886 L1191.14 684.886 L1191.7 684.886 L1192.25 684.886 L1192.81 684.886 L1193.37 684.886 L1193.93 684.886 L1194.49 684.886 L1195.05 684.886 L1195.61 684.886 L1196.17 684.886 L1196.73 684.886 L1197.29 684.886 L1197.85 684.886 L1198.41 684.886 L1198.97 684.886 L1199.52 684.886 L1200.08 684.886 L1200.64 684.886 L1201.2 684.886 L1201.76 684.886 L1202.32 684.886 L1202.88 684.886 L1203.44 684.886 L1204 684.886 L1204.56 684.886 L1205.12 684.886 L1205.68 684.886 L1206.24 684.886 L1206.8 684.886 L1207.35 684.886 L1207.91 684.886 L1208.47 684.886 L1209.03 684.886 L1209.59 684.886 L1210.15 684.886 L1210.71 684.886 L1211.27 684.886 L1211.83 684.886 L1212.39 684.886 L1212.95 684.886 L1213.51 684.886 L1214.07 684.886 L1214.62 684.886 L1215.18 684.886 L1215.74 684.886 L1216.3 684.886 L1216.86 684.886 L1217.42 684.886 L1217.98 684.886 L1218.54 684.886 L1219.1 684.886 L1219.66 684.886 L1220.22 684.886 L1220.78 684.886 L1221.34 684.886 L1221.89 684.886 L1222.45 684.886 L1223.01 684.886 L1223.57 684.886 L1224.13 684.886 L1224.69 684.886 L1225.25 684.886 L1225.81 684.886 L1226.37 684.886 L1226.93 684.886 L1227.49 684.886 L1228.05 684.886 L1228.61 684.886 L1229.17 684.886 L1229.72 684.886 L1230.28 684.886 L1230.84 684.886 L1231.4 684.886 L1231.96 684.886 L1232.52 684.886 L1233.08 684.886 L1233.64 684.886 L1234.2 684.886 L1234.76 684.886 L1235.32 684.886 L1235.88 684.886 L1236.44 684.886 L1236.99 684.886 L1237.55 684.886 L1238.11 684.886 L1238.67 684.886 L1239.23 684.886 L1239.79 684.886 L1240.35 684.886 L1240.91 684.886 L1241.47 684.886 L1242.03 684.886 L1242.59 684.886 L1243.15 684.886 L1243.71 684.886 L1244.26 684.886 L1244.82 684.886 L1245.38 684.886 L1245.94 684.886 L1246.5 684.886 L1247.06 684.886 L1247.62 684.886 L1248.18 684.886 L1248.74 684.886 L1249.3 684.886 L1249.86 684.886 L1250.42 684.886 L1250.98 684.886 L1251.54 684.886 L1252.09 684.886 L1252.65 684.886 L1253.21 684.886 L1253.77 684.886 L1254.33 684.886 L1254.89 684.886 L1255.45 684.886 L1256.01 684.886 L1256.57 684.886 L1257.13 684.886 L1257.69 684.886 L1258.25 684.886 L1258.81 684.886 L1259.36 684.886 L1259.92 684.886 L1260.48 684.886 L1261.04 684.886 L1261.6 684.886 L1262.16 684.886 L1262.72 684.886 L1263.28 684.886 L1263.84 684.886 L1264.4 684.886 L1264.96 684.886 L1265.52 684.886 L1266.08 684.886 L1266.63 684.886 L1267.19 684.886 L1267.75 684.886 L1268.31 684.886 L1268.87 684.886 L1269.43 684.886 L1269.99 684.886 L1270.55 684.886 L1271.11 684.886 L1271.67 684.886 L1272.23 684.886 L1272.79 684.886 L1273.35 684.886 L1273.91 684.886 L1274.46 684.886 L1275.02 684.886 L1275.58 684.886 L1276.14 684.886 L1276.7 684.886 L1277.26 684.886 L1277.82 684.886 L1278.38 684.886 L1278.94 684.886 L1279.5 684.886 L1280.06 684.886 L1280.62 684.886 L1281.18 684.886 L1281.73 684.886 L1282.29 684.886 L1282.85 684.886 L1283.41 684.886 L1283.97 684.886 L1284.53 684.886 L1285.09 684.886 L1285.65 684.886 L1286.21 684.886 L1286.77 684.886 L1287.33 684.886 L1287.89 684.886 L1288.45 684.886 L1289 684.886 L1289.56 684.886 L1290.12 684.886 L1290.68 684.886 L1291.24 684.886 L1291.8 684.886 L1292.36 684.886 L1292.92 684.886 L1293.48 684.886 L1294.04 684.886 L1294.6 684.886 L1295.16 684.886 L1295.72 684.886 L1296.28 684.886 L1296.83 684.886 L1297.39 684.886 L1297.95 684.886 L1298.51 684.886 L1299.07 684.886 L1299.63 684.886 L1300.19 684.886 L1300.75 684.886 L1301.31 684.886 L1301.87 684.886 L1302.43 684.886 L1302.99 684.886 L1303.55 684.886 L1304.1 684.886 L1304.66 684.886 L1305.22 684.886 L1305.78 684.886 L1306.34 684.886 L1306.9 684.886 L1307.46 684.886 L1308.02 684.886 L1308.58 684.886 L1309.14 684.886 L1309.7 684.886 L1310.26 684.886 L1310.82 684.886 L1311.38 684.886 L1311.93 684.886 L1312.49 684.886 L1313.05 684.886 L1313.61 684.886 L1314.17 684.886 L1314.73 684.886 L1315.29 684.886 L1315.85 684.886 L1316.41 684.886 L1316.97 684.886 L1317.53 684.886 L1318.09 684.886 L1318.65 684.886 L1319.2 684.886 L1319.76 684.886 L1320.32 684.886 L1320.88 684.886 L1321.44 684.886 L1322 684.886 L1322.56 684.886 L1323.12 684.886 L1323.68 684.886 L1324.24 684.886 L1324.8 684.886 L1325.36 684.886 L1325.92 684.886 L1326.47 684.886 L1327.03 684.886 L1327.59 684.886 L1328.15 684.886 L1328.71 684.886 L1329.27 684.886 L1329.83 684.886 L1330.39 684.886 L1330.95 684.886 L1331.51 684.886 L1332.07 684.886 L1332.63 684.886 L1333.19 684.886 L1333.75 684.886 L1334.3 684.886 L1334.86 684.886 L1335.42 684.886 L1335.98 684.886 L1336.54 684.886 L1337.1 684.886 L1337.66 684.886 L1338.22 684.886 L1338.78 684.886 L1339.34 684.886 L1339.9 684.886 L1340.46 684.886 L1341.02 684.886 L1341.57 684.886 L1342.13 684.886 L1342.69 684.886 L1343.25 684.886 L1343.81 684.886 L1344.37 684.886 L1344.93 684.886 L1345.49 684.886 L1346.05 684.886 L1346.61 684.886 L1347.17 684.886 L1347.73 684.886 L1348.29 684.886 L1348.84 684.886 L1349.4 684.886 L1349.96 684.886 L1350.52 684.886 L1351.08 684.886 L1351.64 684.886 L1352.2 684.886 L1352.76 684.886 L1353.32 684.886 L1353.88 684.886 L1354.44 684.886 L1355 684.886 L1355.56 684.886 L1356.12 684.886 L1356.67 684.886 L1357.23 684.886 L1357.79 684.886 L1358.35 684.886 L1358.91 684.886 L1359.47 684.886 L1360.03 684.886 L1360.59 684.886 L1361.15 684.886 L1361.71 684.886 L1362.27 684.886 L1362.83 684.886 L1363.39 684.886 L1363.94 684.886 L1364.5 684.886 L1365.06 684.886 L1365.62 684.886 L1366.18 684.886 L1366.74 684.886 L1367.3 684.886 L1367.86 684.886 L1368.42 684.886 L1368.98 684.886 L1369.54 684.886 L1370.1 684.886 L1370.66 684.886 L1371.21 684.886 L1371.77 684.886 L1372.33 684.886 L1372.89 684.886 L1373.45 684.886 L1374.01 684.886 L1374.57 684.886 L1375.13 684.886 L1375.69 684.886 L1376.25 684.886 L1376.81 684.886 L1377.37 684.886 L1377.93 684.886 L1378.49 684.886 L1379.04 684.886 L1379.6 684.886 L1380.16 684.886 L1380.72 684.886 L1381.28 684.886 L1381.84 684.886 L1382.4 684.886 L1382.96 684.886 L1383.52 684.886 L1384.08 684.886 L1384.64 684.886 L1385.2 684.886 L1385.76 684.886 L1386.31 684.886 L1386.87 684.886 L1387.43 684.886 L1387.99 684.886 L1388.55 684.886 L1389.11 684.886 L1389.67 684.886 L1390.23 684.886 L1390.79 684.886 L1391.35 684.886 L1391.91 684.886 L1392.47 684.886 L1393.03 684.886 L1393.58 684.886 L1394.14 684.886 L1394.7 684.886 L1395.26 684.886 L1395.82 684.886 L1396.38 684.886 L1396.94 684.886 L1397.5 684.886 L1398.06 684.886 L1398.62 684.886 L1399.18 684.886 L1399.74 684.886 L1400.3 684.886 L1400.86 684.886 L1401.41 684.886 L1401.97 684.886 L1402.53 684.886 L1403.09 684.886 L1403.65 684.886 L1404.21 684.886 L1404.77 684.886 L1405.33 684.886 L1405.89 684.886 L1406.45 684.886 L1407.01 684.886 L1407.57 684.886 L1408.13 684.886 L1408.68 684.886 L1409.24 684.886 L1409.8 684.886 L1410.36 684.886 L1410.92 684.886 L1411.48 684.886 L1412.04 684.886 L1412.6 684.886 L1413.16 684.886 L1413.72 684.886 L1414.28 684.886 L1414.84 684.886 L1415.4 684.886 L1415.95 684.886 L1416.51 684.886 L1417.07 684.886 L1417.63 684.886 L1418.19 684.886 L1418.75 684.886 L1419.31 684.886 L1419.87 684.886 L1420.43 684.886 L1420.99 684.886 L1421.55 684.886 L1422.11 684.886 L1422.67 684.886 L1423.23 684.886 L1423.78 684.886 L1424.34 684.886 L1424.9 684.886 L1425.46 684.886 L1426.02 684.886 L1426.58 684.886 L1427.14 684.886 L1427.7 684.886 L1428.26 684.886 L1428.82 684.886 L1429.38 684.886 L1429.94 684.886 L1430.5 684.886 L1431.05 684.886 L1431.61 684.886 L1432.17 684.886 L1432.73 684.886 L1433.29 684.886 L1433.85 684.886 L1434.41 684.886 L1434.97 684.886 L1435.53 684.886 L1436.09 684.886 L1436.65 684.886 L1437.21 684.886 L1437.77 684.886 L1438.33 684.886 L1438.88 684.886 L1439.44 684.886 L1440 684.886 L1440.56 684.886 L1441.12 684.886 L1441.68 684.886 L1442.24 684.886 L1442.8 684.886 L1443.36 684.886 L1443.92 684.886 L1444.48 684.886 L1445.04 684.886 L1445.6 684.886 L1446.15 684.886 L1446.71 684.886 L1447.27 684.886 L1447.83 684.886 L1448.39 684.886 L1448.95 684.886 L1449.51 684.886 L1450.07 684.886 L1450.63 684.886 L1451.19 684.886 L1451.75 684.886 L1452.31 684.886 L1452.87 684.886 L1453.42 684.886 L1453.98 684.886 L1454.54 684.886 L1455.1 684.886 L1455.66 684.886 L1456.22 684.886 L1456.78 684.886 L1457.34 684.886 L1457.9 684.886 L1458.46 684.886 L1459.02 684.886 L1459.58 684.886 L1460.14 684.886 L1460.7 684.886 L1461.25 684.886 L1461.81 684.886 L1462.37 684.886 L1462.93 684.886 L1463.49 684.886 L1464.05 684.886 L1464.61 684.886 L1465.17 684.886 L1465.73 684.886 L1466.29 684.886 L1466.85 684.886 L1467.41 684.886 L1467.97 684.886 L1468.52 684.886 L1469.08 684.886 L1469.64 684.886 L1470.2 684.886 L1470.76 684.886 L1471.32 684.886 L1471.88 684.886 L1472.44 684.886 L1473 684.886 L1473.56 684.886 L1474.12 684.886 L1474.68 684.886 L1475.24 684.886 L1475.79 684.886 L1476.35 684.886 L1476.91 684.886 L1477.47 684.886 L1478.03 684.886 L1478.59 684.886 L1479.15 684.886 L1479.71 684.886 L1480.27 684.886 L1480.83 684.886 L1481.39 684.886 L1481.95 684.886 L1482.51 684.886 L1483.07 684.886 L1483.62 684.886 L1484.18 684.886 L1484.74 684.886 L1485.3 684.886 L1485.86 684.886 L1486.42 684.886 L1486.98 684.886 L1487.54 684.886 L1488.1 684.886 L1488.66 684.886 L1489.22 684.886 L1489.78 684.886 L1490.34 684.886 L1490.89 684.886 L1491.45 684.886 L1492.01 684.886 L1492.57 684.886 L1493.13 684.886 L1493.69 684.886 L1494.25 684.886 L1494.81 684.886 L1495.37 684.886 L1495.93 684.886 L1496.49 684.886 L1497.05 684.886 L1497.61 684.886 L1498.16 684.886 L1498.72 684.886 L1499.28 684.886 L1499.84 684.886 L1500.4 684.886 L1500.96 684.886 L1501.52 684.886 L1502.08 684.886 L1502.64 684.886 L1503.2 684.886 L1503.76 684.886 L1504.32 684.886 L1504.88 684.886 L1505.44 684.886 L1505.99 684.886 L1506.55 684.886 L1507.11 684.886 L1507.67 684.886 L1508.23 684.886 L1508.79 684.886 L1509.35 684.886 L1509.91 684.886 L1510.47 684.886 L1511.03 684.886 L1511.59 684.886 L1512.15 684.886 L1512.71 684.886 L1513.26 684.886 L1513.82 684.886 L1514.38 684.886 L1514.94 684.886 L1515.5 684.886 L1516.06 684.886 L1516.62 684.886 L1517.18 684.886 L1517.74 684.886 L1518.3 684.886 L1518.86 684.886 L1519.42 684.886 L1519.98 684.886 L1520.53 684.886 L1521.09 684.886 L1521.65 684.886 L1522.21 684.886 L1522.77 684.886 L1523.33 684.886 L1523.89 684.886 L1524.45 684.886 L1525.01 684.886 L1525.57 684.886 L1526.13 684.886 L1526.69 684.886 L1527.25 684.886 L1527.81 684.886 L1528.36 684.886 L1528.92 684.886 L1529.48 684.886 L1530.04 684.886 L1530.6 684.886 L1531.16 684.886 L1531.72 684.886 L1532.28 684.886 L1532.84 684.886 L1533.4 684.886 L1533.96 684.886 L1534.52 684.886 L1535.08 684.886 L1535.63 684.886 L1536.19 684.886 L1536.75 684.886 L1537.31 684.886 L1537.87 684.886 L1538.43 684.886 L1538.99 684.886 L1539.55 684.886 L1540.11 684.886 L1540.67 684.886 L1541.23 684.886 L1541.79 684.886 L1542.35 684.886 L1542.9 684.886 L1543.46 684.886 L1544.02 684.886 L1544.58 684.886 L1545.14 684.886 L1545.7 684.886 L1546.26 684.886 L1546.82 684.886 L1547.38 684.886 L1547.94 684.886 L1548.5 684.886 L1549.06 684.886 L1549.62 684.886 L1550.18 684.886 L1550.73 684.886 L1551.29 684.886 L1551.85 684.886 L1552.41 684.886 L1552.97 684.886 L1553.53 684.886 L1554.09 684.886 L1554.65 684.886 L1555.21 684.886 L1555.77 684.886 L1556.33 684.886 L1556.89 684.886 L1557.45 684.886 L1558 684.886 L1558.56 684.886 L1559.12 684.886 L1559.68 684.886 L1560.24 684.886 L1560.8 684.886 L1561.36 684.886 L1561.92 684.886 L1562.48 684.886 L1563.04 684.886 L1563.6 684.886 L1564.16 684.886 L1564.72 684.886 L1565.28 684.886 L1565.83 684.886 L1566.39 684.886 L1566.95 684.886 L1567.51 684.886 L1568.07 684.886 L1568.63 684.886 L1569.19 684.886 L1569.75 684.886 L1570.31 684.886 L1570.87 684.886 L1571.43 684.886 L1571.99 684.886 L1572.55 684.886 L1573.1 684.886 L1573.66 684.886 L1574.22 684.886 L1574.78 684.886 L1575.34 684.886 L1575.9 684.886 L1576.46 684.886 L1577.02 684.886 L1577.58 684.886 L1578.14 684.886 L1578.7 684.886 L1579.26 684.886 L1579.82 684.886 L1580.37 684.886 L1580.93 684.886 L1581.49 684.886 L1582.05 684.886 L1582.61 684.886 L1583.17 684.886 L1583.73 684.886 L1584.29 684.886 L1584.85 684.886 L1585.41 684.886 L1585.97 684.886 L1586.53 684.886 L1587.09 684.886 L1587.65 684.886 L1588.2 684.886 L1588.76 684.886 L1589.32 684.886 L1589.88 684.886 L1590.44 684.886 L1591 684.886 L1591.56 684.886 L1592.12 684.886 L1592.68 684.886 L1593.24 684.886 L1593.8 684.886 L1594.36 684.886 L1594.92 684.886 L1595.47 684.886 L1596.03 684.886 L1596.59 684.886 L1597.15 684.886 L1597.71 684.886 L1598.27 684.886 L1598.83 684.886 L1599.39 684.886 L1599.95 684.886 L1600.51 684.886 L1601.07 684.886 L1601.63 684.886 L1602.19 684.886 L1602.74 684.886 L1603.3 684.886 L1603.86 684.886 L1604.42 684.886 L1604.98 684.886 L1605.54 684.886 L1606.1 684.886 L1606.66 684.886 L1607.22 684.886 L1607.78 684.886 L1608.34 684.886 L1608.9 684.886 L1609.46 684.886 L1610.02 684.886 L1610.57 684.886 L1611.13 684.886 L1611.69 684.886 L1612.25 684.886 L1612.81 684.886 L1613.37 684.886 L1613.93 684.886 L1614.49 684.886 L1615.05 684.886 L1615.61 684.886 L1616.17 684.886 L1616.73 684.886 L1617.29 684.886 L1617.84 684.886 L1618.4 684.886 L1618.96 684.886 L1619.52 684.886 L1620.08 684.886 L1620.64 684.886 L1621.2 684.886 L1621.76 684.886 L1622.32 684.886 L1622.88 684.886 L1623.44 684.886 L1624 684.886 L1624.56 684.886 L1625.11 684.886 L1625.67 684.886 L1626.23 684.886 L1626.79 684.886 L1627.35 684.886 L1627.91 684.886 L1628.47 684.886 L1629.03 684.886 L1629.59 684.886 L1630.15 684.886 L1630.71 684.886 L1631.27 684.886 L1631.83 684.886 L1632.39 684.886 L1632.94 684.886 L1633.5 684.886 L1634.06 684.886 L1634.62 684.886 L1635.18 684.886 L1635.74 684.886 L1636.3 684.886 L1636.86 684.886 L1637.42 684.886 L1637.98 684.886 L1638.54 684.886 L1639.1 684.886 L1639.66 684.886 L1640.21 684.886 L1640.77 684.886 L1641.33 684.886 L1641.89 684.886 L1642.45 684.886 L1643.01 684.886 L1643.57 684.886 L1644.13 684.886 L1644.69 684.886 L1645.25 684.886 L1645.81 684.886 L1646.37 684.886 L1646.93 684.886 L1647.48 684.886 L1648.04 684.886 L1648.6 684.886 L1649.16 684.886 L1649.72 684.886 L1650.28 684.886 L1650.84 684.886 L1651.4 684.886 L1651.96 684.886 L1652.52 684.886 L1653.08 684.886 L1653.64 684.886 L1654.2 684.886 L1654.76 684.886 L1655.31 684.886 L1655.87 684.886 L1656.43 684.886 L1656.99 684.886 L1657.55 684.886 L1658.11 684.886 L1658.67 684.886 L1659.23 684.886 L1659.79 684.886 L1660.35 684.886 L1660.91 684.886 L1661.47 684.886 L1662.03 684.886 L1662.58 684.886 L1663.14 684.886 L1663.7 684.886 L1664.26 684.886 L1664.82 684.886 L1665.38 684.886 L1665.94 684.886 L1666.5 684.886 L1667.06 684.886 L1667.62 684.886 L1668.18 684.886 L1668.74 684.886 L1669.3 684.886 L1669.85 684.886 L1670.41 684.886 L1670.97 684.886 L1671.53 684.886 L1672.09 684.886 L1672.65 684.886 L1673.21 684.886 L1673.77 684.886 L1674.33 684.886 L1674.89 684.886 L1675.45 684.886 L1676.01 684.886 L1676.57 684.886 L1677.13 684.886 L1677.68 684.886 L1678.24 684.886 L1678.8 684.886 L1679.36 684.886 L1679.92 684.886 L1680.48 684.886 L1681.04 684.886 L1681.6 684.886 L1682.16 684.886 L1682.72 684.886 L1683.28 684.886 L1683.84 684.886 L1684.4 684.886 L1684.95 684.886 L1685.51 684.886 L1686.07 684.886 L1686.63 684.886 L1687.19 684.886 L1687.75 684.886 L1688.31 684.886 L1688.87 684.886 L1689.43 684.886 L1689.99 684.886 L1690.55 684.886 L1691.11 684.886 L1691.67 684.886 L1692.23 684.886 L1692.78 684.886 L1693.34 684.886 L1693.9 684.886 L1694.46 684.886 L1695.02 684.886 L1695.58 684.886 L1696.14 684.886 L1696.7 684.886 L1697.26 684.886 L1697.82 684.886 L1698.38 684.886 L1698.94 684.886 L1699.5 684.886 L1700.05 684.886 L1700.61 684.886 L1701.17 684.886 L1701.73 684.886 L1702.29 684.886 L1702.85 684.886 L1703.41 684.886 L1703.97 684.886 L1704.53 684.886 L1705.09 684.886 L1705.65 684.886 L1706.21 684.886 L1706.77 684.886 L1707.32 684.886 L1707.88 684.886 L1708.44 684.886 L1709 684.886 L1709.56 684.886 L1710.12 684.886 L1710.68 684.886 L1711.24 684.886 L1711.8 684.886 L1712.36 684.886 L1712.92 684.886 L1713.48 684.886 L1714.04 684.886 L1714.6 684.886 L1715.15 684.886 L1715.71 684.886 L1716.27 684.886 L1716.83 684.886 L1717.39 684.886 L1717.95 684.886 L1718.51 684.886 L1719.07 684.886 L1719.63 684.886 L1720.19 684.886 L1720.75 684.886 L1721.31 684.886 L1721.87 684.886 L1722.42 684.886 L1722.98 684.886 L1723.54 684.886 L1724.1 684.886 L1724.66 684.886 L1725.22 684.886 L1725.78 684.886 L1726.34 684.886 L1726.9 684.886 L1727.46 684.886 L1728.02 684.886 L1728.58 684.886 L1729.14 684.886 L1729.69 684.886 L1730.25 684.886 L1730.81 684.886 L1731.37 684.886 L1731.93 684.886 L1732.49 684.886 L1733.05 684.886 L1733.61 684.886 L1734.17 684.886 L1734.73 684.886 L1735.29 684.886 L1735.85 684.886 L1736.41 684.886 L1736.97 684.886 L1737.52 684.886 L1738.08 684.886 L1738.64 684.886 L1739.2 684.886 L1739.76 684.886 L1740.32 684.886 L1740.88 684.886 L1741.44 684.886 L1742 684.886 L1742.56 684.886 L1743.12 684.886 L1743.68 684.886 L1744.24 684.886 L1744.79 684.886 L1745.35 684.886 L1745.91 684.886 L1746.47 684.886 L1747.03 684.886 L1747.59 684.886 L1748.15 684.886 L1748.71 684.886 L1749.27 684.886 L1749.83 684.886 L1750.39 684.886 L1750.95 684.886 L1751.51 684.886 L1752.06 684.886 L1752.62 684.886 L1753.18 684.886 L1753.74 684.886 L1754.3 684.886 L1754.86 684.886 L1755.42 684.886 L1755.98 684.886 L1756.54 684.886 L1757.1 684.886 L1757.66 684.886 L1758.22 684.886 L1758.78 684.886 L1759.34 684.886 L1759.89 684.886 L1760.45 684.886 L1761.01 684.886 L1761.57 684.886 L1762.13 684.886 L1762.69 684.886 L1763.25 684.886 L1763.81 684.886 L1764.37 684.886 L1764.93 684.886 L1765.49 684.886 L1766.05 684.886 L1766.61 684.886 L1767.16 684.886 L1767.72 684.886 L1768.28 684.886 L1768.84 684.886 L1769.4 684.886 L1769.96 684.886 L1770.52 684.886 L1771.08 684.886 L1771.64 684.886 L1772.2 684.886 L1772.76 684.886 L1773.32 684.886 L1773.88 684.886 L1774.43 684.886 L1774.99 684.886 L1775.55 684.886 L1776.11 684.886 L1776.67 684.886 L1777.23 684.886 L1777.79 684.886 L1778.35 684.886 L1778.91 684.886 L1779.47 684.886 L1780.03 684.886 L1780.59 684.886 L1781.15 684.886 L1781.71 684.886 L1782.26 684.886 L1782.82 684.886 L1783.38 684.886 L1783.94 684.886 L1784.5 684.886 L1785.06 684.886 L1785.62 684.886 L1786.18 684.886 L1786.74 684.886 L1787.3 684.886 L1787.86 684.886 L1788.42 684.886 L1788.98 684.886 L1789.53 684.886 L1790.09 684.886 L1790.65 684.886 L1791.21 684.886 L1791.77 684.886 L1792.33 684.886 L1792.89 684.886 L1793.45 684.886 L1794.01 684.886 L1794.57 684.886 L1795.13 684.886 L1795.69 684.886 L1796.25 684.886 L1796.8 684.886 L1797.36 684.886 L1797.92 684.886 L1798.48 684.886 L1799.04 684.886 L1799.6 684.886 L1800.16 684.886 L1800.72 684.886 L1801.28 684.886 L1801.84 684.886 L1802.4 684.886 L1802.96 684.886 L1803.52 684.886 L1804.08 684.886 L1804.63 684.886 L1805.19 684.886 L1805.75 684.886 L1806.31 684.886 L1806.87 684.886 L1807.43 684.886 L1807.99 684.886 L1808.55 684.886 L1809.11 684.886 L1809.67 684.886 L1810.23 684.886 L1810.79 684.886 L1811.35 684.886 L1811.9 684.886 L1812.46 684.886 L1813.02 684.886 L1813.58 684.886 L1814.14 684.886 L1814.7 684.886 L1815.26 684.886 L1815.82 684.886 L1816.38 684.886 L1816.94 684.886 L1817.5 684.886 L1818.06 684.886 L1818.62 684.886 L1819.18 684.886 L1819.73 684.886 L1820.29 684.886 L1820.85 684.886 L1821.41 684.886 L1821.97 684.886 L1822.53 684.886 L1823.09 684.886 L1823.65 684.886 L1824.21 684.886 L1824.77 684.886 L1825.33 684.886 L1825.89 684.886 L1826.45 684.886 L1827 684.886 L1827.56 684.886 L1828.12 684.886 L1828.68 684.886 L1829.24 684.886 L1829.8 684.886 L1830.36 684.886 L1830.92 684.886 L1831.48 684.886 L1832.04 684.886 L1832.6 684.886 L1833.16 684.886 L1833.72 684.886 L1834.27 684.886 L1834.83 684.886 L1835.39 684.886 L1835.95 684.886 L1836.51 684.886 L1837.07 684.886 L1837.63 684.886 L1838.19 684.886 L1838.19 682.466 L1837.63 682.466 L1837.07 682.466 L1836.51 682.466 L1835.95 682.466 L1835.39 682.466 L1834.83 682.466 L1834.27 682.466 L1833.72 682.466 L1833.16 682.466 L1832.6 682.466 L1832.04 682.466 L1831.48 682.466 L1830.92 682.466 L1830.36 682.466 L1829.8 682.466 L1829.24 682.466 L1828.68 682.466 L1828.12 682.466 L1827.56 682.466 L1827 682.466 L1826.45 682.466 L1825.89 682.466 L1825.33 682.466 L1824.77 682.466 L1824.21 682.466 L1823.65 682.466 L1823.09 682.466 L1822.53 682.466 L1821.97 682.466 L1821.41 682.466 L1820.85 682.466 L1820.29 682.466 L1819.73 682.466 L1819.18 682.466 L1818.62 682.466 L1818.06 682.466 L1817.5 682.466 L1816.94 682.466 L1816.38 682.466 L1815.82 682.466 L1815.26 682.466 L1814.7 682.466 L1814.14 682.466 L1813.58 682.466 L1813.02 682.466 L1812.46 682.466 L1811.9 682.466 L1811.35 682.466 L1810.79 682.466 L1810.23 682.466 L1809.67 682.466 L1809.11 682.466 L1808.55 682.466 L1807.99 682.466 L1807.43 682.466 L1806.87 682.466 L1806.31 682.466 L1805.75 682.466 L1805.19 682.466 L1804.63 682.466 L1804.08 682.466 L1803.52 682.466 L1802.96 682.466 L1802.4 682.466 L1801.84 682.466 L1801.28 682.466 L1800.72 682.466 L1800.16 682.466 L1799.6 682.466 L1799.04 682.466 L1798.48 682.466 L1797.92 682.466 L1797.36 682.466 L1796.8 682.466 L1796.25 682.466 L1795.69 682.466 L1795.13 682.466 L1794.57 682.466 L1794.01 682.466 L1793.45 682.466 L1792.89 682.466 L1792.33 682.466 L1791.77 682.466 L1791.21 682.466 L1790.65 682.466 L1790.09 682.466 L1789.53 682.466 L1788.98 682.466 L1788.42 682.466 L1787.86 682.466 L1787.3 682.466 L1786.74 682.466 L1786.18 682.466 L1785.62 682.466 L1785.06 682.466 L1784.5 682.466 L1783.94 682.466 L1783.38 682.466 L1782.82 682.466 L1782.26 682.466 L1781.71 682.466 L1781.15 682.466 L1780.59 682.466 L1780.03 682.466 L1779.47 682.466 L1778.91 682.466 L1778.35 682.466 L1777.79 682.466 L1777.23 682.466 L1776.67 682.466 L1776.11 682.466 L1775.55 682.466 L1774.99 682.466 L1774.43 682.466 L1773.88 682.466 L1773.32 682.466 L1772.76 682.466 L1772.2 682.466 L1771.64 682.466 L1771.08 682.466 L1770.52 682.466 L1769.96 682.466 L1769.4 682.466 L1768.84 682.466 L1768.28 682.466 L1767.72 682.466 L1767.16 682.466 L1766.61 682.466 L1766.05 682.466 L1765.49 682.466 L1764.93 682.466 L1764.37 682.466 L1763.81 682.466 L1763.25 682.466 L1762.69 682.466 L1762.13 682.466 L1761.57 682.466 L1761.01 682.466 L1760.45 682.466 L1759.89 682.466 L1759.34 682.466 L1758.78 682.466 L1758.22 682.466 L1757.66 682.466 L1757.1 682.466 L1756.54 682.466 L1755.98 682.466 L1755.42 682.466 L1754.86 682.466 L1754.3 682.466 L1753.74 682.466 L1753.18 682.466 L1752.62 682.466 L1752.06 682.466 L1751.51 682.466 L1750.95 682.466 L1750.39 682.466 L1749.83 682.466 L1749.27 682.466 L1748.71 682.466 L1748.15 682.466 L1747.59 682.466 L1747.03 682.466 L1746.47 682.466 L1745.91 682.466 L1745.35 682.466 L1744.79 682.466 L1744.24 682.466 L1743.68 682.466 L1743.12 682.466 L1742.56 682.466 L1742 682.466 L1741.44 682.466 L1740.88 682.466 L1740.32 682.466 L1739.76 682.466 L1739.2 682.466 L1738.64 682.466 L1738.08 682.466 L1737.52 682.466 L1736.97 682.466 L1736.41 682.466 L1735.85 682.466 L1735.29 682.466 L1734.73 682.466 L1734.17 682.466 L1733.61 682.466 L1733.05 682.466 L1732.49 682.466 L1731.93 682.466 L1731.37 682.466 L1730.81 682.466 L1730.25 682.466 L1729.69 682.466 L1729.14 682.466 L1728.58 682.466 L1728.02 682.466 L1727.46 682.466 L1726.9 682.466 L1726.34 682.466 L1725.78 682.466 L1725.22 682.466 L1724.66 682.466 L1724.1 682.466 L1723.54 682.466 L1722.98 682.466 L1722.42 682.466 L1721.87 682.466 L1721.31 682.466 L1720.75 682.466 L1720.19 682.466 L1719.63 682.466 L1719.07 682.466 L1718.51 682.466 L1717.95 682.466 L1717.39 682.466 L1716.83 682.466 L1716.27 682.466 L1715.71 682.466 L1715.15 682.466 L1714.6 682.466 L1714.04 682.466 L1713.48 682.466 L1712.92 682.466 L1712.36 682.466 L1711.8 682.466 L1711.24 682.466 L1710.68 682.466 L1710.12 682.466 L1709.56 682.466 L1709 682.466 L1708.44 682.466 L1707.88 682.466 L1707.32 682.466 L1706.77 682.466 L1706.21 682.466 L1705.65 682.466 L1705.09 682.466 L1704.53 682.466 L1703.97 682.466 L1703.41 682.466 L1702.85 682.466 L1702.29 682.466 L1701.73 682.466 L1701.17 682.466 L1700.61 682.466 L1700.05 682.466 L1699.5 682.466 L1698.94 682.466 L1698.38 682.466 L1697.82 682.466 L1697.26 682.466 L1696.7 682.466 L1696.14 682.466 L1695.58 682.466 L1695.02 682.466 L1694.46 682.466 L1693.9 682.466 L1693.34 682.466 L1692.78 682.466 L1692.23 682.466 L1691.67 682.466 L1691.11 682.466 L1690.55 682.466 L1689.99 682.466 L1689.43 682.466 L1688.87 682.466 L1688.31 682.466 L1687.75 682.466 L1687.19 682.466 L1686.63 682.466 L1686.07 682.466 L1685.51 682.466 L1684.95 682.466 L1684.4 682.466 L1683.84 682.466 L1683.28 682.466 L1682.72 682.466 L1682.16 682.466 L1681.6 682.466 L1681.04 682.466 L1680.48 682.466 L1679.92 682.466 L1679.36 682.466 L1678.8 682.466 L1678.24 682.466 L1677.68 682.466 L1677.13 682.466 L1676.57 682.466 L1676.01 682.466 L1675.45 682.466 L1674.89 682.466 L1674.33 682.466 L1673.77 682.466 L1673.21 682.466 L1672.65 682.466 L1672.09 682.466 L1671.53 682.466 L1670.97 682.466 L1670.41 682.466 L1669.85 682.466 L1669.3 682.466 L1668.74 682.466 L1668.18 682.466 L1667.62 682.466 L1667.06 682.466 L1666.5 682.466 L1665.94 682.466 L1665.38 682.466 L1664.82 682.466 L1664.26 682.466 L1663.7 682.466 L1663.14 682.466 L1662.58 682.466 L1662.03 682.466 L1661.47 682.466 L1660.91 682.466 L1660.35 682.466 L1659.79 682.466 L1659.23 682.466 L1658.67 682.466 L1658.11 682.466 L1657.55 682.466 L1656.99 682.466 L1656.43 682.466 L1655.87 682.466 L1655.31 682.466 L1654.76 682.466 L1654.2 682.466 L1653.64 682.466 L1653.08 682.466 L1652.52 682.466 L1651.96 682.466 L1651.4 682.466 L1650.84 682.466 L1650.28 682.466 L1649.72 682.466 L1649.16 682.466 L1648.6 682.466 L1648.04 682.466 L1647.48 682.466 L1646.93 682.466 L1646.37 682.466 L1645.81 682.466 L1645.25 682.466 L1644.69 682.466 L1644.13 682.466 L1643.57 682.466 L1643.01 682.466 L1642.45 682.466 L1641.89 682.466 L1641.33 682.466 L1640.77 682.466 L1640.21 682.466 L1639.66 682.466 L1639.1 682.466 L1638.54 682.466 L1637.98 682.466 L1637.42 682.466 L1636.86 682.466 L1636.3 682.466 L1635.74 682.466 L1635.18 682.466 L1634.62 682.466 L1634.06 682.466 L1633.5 682.466 L1632.94 682.466 L1632.39 682.466 L1631.83 682.466 L1631.27 682.466 L1630.71 682.466 L1630.15 682.466 L1629.59 682.466 L1629.03 682.466 L1628.47 682.466 L1627.91 682.466 L1627.35 682.466 L1626.79 682.466 L1626.23 682.466 L1625.67 682.466 L1625.11 682.466 L1624.56 682.466 L1624 682.466 L1623.44 682.466 L1622.88 682.466 L1622.32 682.466 L1621.76 682.466 L1621.2 682.466 L1620.64 682.466 L1620.08 682.466 L1619.52 682.466 L1618.96 682.466 L1618.4 682.466 L1617.84 682.466 L1617.29 682.466 L1616.73 682.466 L1616.17 682.466 L1615.61 682.466 L1615.05 682.466 L1614.49 682.466 L1613.93 682.466 L1613.37 682.466 L1612.81 682.466 L1612.25 682.466 L1611.69 682.466 L1611.13 682.466 L1610.57 682.466 L1610.02 682.466 L1609.46 682.466 L1608.9 682.466 L1608.34 682.466 L1607.78 682.466 L1607.22 682.466 L1606.66 682.466 L1606.1 682.466 L1605.54 682.466 L1604.98 682.466 L1604.42 682.466 L1603.86 682.466 L1603.3 682.466 L1602.74 682.466 L1602.19 682.466 L1601.63 682.466 L1601.07 682.466 L1600.51 682.466 L1599.95 682.466 L1599.39 682.466 L1598.83 682.466 L1598.27 682.466 L1597.71 682.466 L1597.15 682.466 L1596.59 682.466 L1596.03 682.466 L1595.47 682.466 L1594.92 682.466 L1594.36 682.466 L1593.8 682.466 L1593.24 682.466 L1592.68 682.466 L1592.12 682.466 L1591.56 682.466 L1591 682.466 L1590.44 682.466 L1589.88 682.466 L1589.32 682.466 L1588.76 682.466 L1588.2 682.466 L1587.65 682.466 L1587.09 682.466 L1586.53 682.466 L1585.97 682.466 L1585.41 682.466 L1584.85 682.466 L1584.29 682.466 L1583.73 682.466 L1583.17 682.466 L1582.61 682.466 L1582.05 682.466 L1581.49 682.466 L1580.93 682.466 L1580.37 682.466 L1579.82 682.466 L1579.26 682.466 L1578.7 682.466 L1578.14 682.466 L1577.58 682.466 L1577.02 682.466 L1576.46 682.466 L1575.9 682.466 L1575.34 682.466 L1574.78 682.466 L1574.22 682.466 L1573.66 682.466 L1573.1 682.466 L1572.55 682.466 L1571.99 682.466 L1571.43 682.466 L1570.87 682.466 L1570.31 682.466 L1569.75 682.466 L1569.19 682.466 L1568.63 682.466 L1568.07 682.466 L1567.51 682.466 L1566.95 682.466 L1566.39 682.466 L1565.83 682.466 L1565.28 682.466 L1564.72 682.466 L1564.16 682.466 L1563.6 682.466 L1563.04 682.466 L1562.48 682.466 L1561.92 682.466 L1561.36 682.466 L1560.8 682.466 L1560.24 682.466 L1559.68 682.466 L1559.12 682.466 L1558.56 682.466 L1558 682.466 L1557.45 682.466 L1556.89 682.466 L1556.33 682.466 L1555.77 682.466 L1555.21 682.466 L1554.65 682.466 L1554.09 682.466 L1553.53 682.466 L1552.97 682.466 L1552.41 682.466 L1551.85 682.466 L1551.29 682.466 L1550.73 682.466 L1550.18 682.466 L1549.62 682.466 L1549.06 682.466 L1548.5 682.466 L1547.94 682.466 L1547.38 682.466 L1546.82 682.466 L1546.26 682.466 L1545.7 682.466 L1545.14 682.466 L1544.58 682.466 L1544.02 682.466 L1543.46 682.466 L1542.9 682.466 L1542.35 682.466 L1541.79 682.466 L1541.23 682.466 L1540.67 682.466 L1540.11 682.466 L1539.55 682.466 L1538.99 682.466 L1538.43 682.466 L1537.87 682.466 L1537.31 682.466 L1536.75 682.466 L1536.19 682.466 L1535.63 682.466 L1535.08 682.466 L1534.52 682.466 L1533.96 682.466 L1533.4 682.466 L1532.84 682.466 L1532.28 682.466 L1531.72 682.466 L1531.16 682.466 L1530.6 682.466 L1530.04 682.466 L1529.48 682.466 L1528.92 682.466 L1528.36 682.466 L1527.81 682.466 L1527.25 682.466 L1526.69 682.466 L1526.13 682.466 L1525.57 682.466 L1525.01 682.466 L1524.45 682.466 L1523.89 682.466 L1523.33 682.466 L1522.77 682.466 L1522.21 682.466 L1521.65 682.466 L1521.09 682.466 L1520.53 682.466 L1519.98 682.466 L1519.42 682.466 L1518.86 682.466 L1518.3 682.466 L1517.74 682.466 L1517.18 682.466 L1516.62 682.466 L1516.06 682.466 L1515.5 682.466 L1514.94 682.466 L1514.38 682.466 L1513.82 682.466 L1513.26 682.466 L1512.71 682.466 L1512.15 682.466 L1511.59 682.466 L1511.03 682.466 L1510.47 682.466 L1509.91 682.466 L1509.35 682.466 L1508.79 682.466 L1508.23 682.466 L1507.67 682.466 L1507.11 682.466 L1506.55 682.466 L1505.99 682.466 L1505.44 682.466 L1504.88 682.466 L1504.32 682.466 L1503.76 682.466 L1503.2 682.466 L1502.64 682.466 L1502.08 682.466 L1501.52 682.466 L1500.96 682.466 L1500.4 682.466 L1499.84 682.466 L1499.28 682.466 L1498.72 682.466 L1498.16 682.466 L1497.61 682.466 L1497.05 682.466 L1496.49 682.466 L1495.93 682.466 L1495.37 682.466 L1494.81 682.466 L1494.25 682.466 L1493.69 682.466 L1493.13 682.466 L1492.57 682.466 L1492.01 682.466 L1491.45 682.466 L1490.89 682.466 L1490.34 682.466 L1489.78 682.466 L1489.22 682.466 L1488.66 682.466 L1488.1 682.466 L1487.54 682.466 L1486.98 682.466 L1486.42 682.466 L1485.86 682.466 L1485.3 682.466 L1484.74 682.466 L1484.18 682.466 L1483.62 682.466 L1483.07 682.466 L1482.51 682.466 L1481.95 682.466 L1481.39 682.466 L1480.83 682.466 L1480.27 682.466 L1479.71 682.466 L1479.15 682.466 L1478.59 682.466 L1478.03 682.466 L1477.47 682.466 L1476.91 682.466 L1476.35 682.466 L1475.79 682.466 L1475.24 682.466 L1474.68 682.466 L1474.12 682.466 L1473.56 682.466 L1473 682.466 L1472.44 682.466 L1471.88 682.466 L1471.32 682.466 L1470.76 682.466 L1470.2 682.466 L1469.64 682.466 L1469.08 682.466 L1468.52 682.466 L1467.97 682.466 L1467.41 682.466 L1466.85 682.466 L1466.29 682.466 L1465.73 682.466 L1465.17 682.466 L1464.61 682.466 L1464.05 682.466 L1463.49 682.466 L1462.93 682.466 L1462.37 682.466 L1461.81 682.466 L1461.25 682.466 L1460.7 682.466 L1460.14 682.466 L1459.58 682.466 L1459.02 682.466 L1458.46 682.466 L1457.9 682.466 L1457.34 682.466 L1456.78 682.466 L1456.22 682.466 L1455.66 682.466 L1455.1 682.466 L1454.54 682.466 L1453.98 682.466 L1453.42 682.466 L1452.87 682.466 L1452.31 682.466 L1451.75 682.466 L1451.19 682.466 L1450.63 682.466 L1450.07 682.466 L1449.51 682.466 L1448.95 682.466 L1448.39 682.466 L1447.83 682.466 L1447.27 682.466 L1446.71 682.466 L1446.15 682.466 L1445.6 682.466 L1445.04 682.466 L1444.48 682.466 L1443.92 682.466 L1443.36 682.466 L1442.8 682.466 L1442.24 682.466 L1441.68 682.466 L1441.12 682.466 L1440.56 682.466 L1440 682.466 L1439.44 682.466 L1438.88 682.466 L1438.33 682.466 L1437.77 682.466 L1437.21 682.466 L1436.65 682.466 L1436.09 682.466 L1435.53 682.466 L1434.97 682.466 L1434.41 682.466 L1433.85 682.466 L1433.29 682.466 L1432.73 682.466 L1432.17 682.466 L1431.61 682.466 L1431.05 682.466 L1430.5 682.466 L1429.94 682.466 L1429.38 682.466 L1428.82 682.466 L1428.26 682.466 L1427.7 682.466 L1427.14 682.466 L1426.58 682.466 L1426.02 682.466 L1425.46 682.466 L1424.9 682.466 L1424.34 682.466 L1423.78 682.466 L1423.23 682.466 L1422.67 682.466 L1422.11 682.466 L1421.55 682.466 L1420.99 682.466 L1420.43 682.466 L1419.87 682.466 L1419.31 682.466 L1418.75 682.466 L1418.19 682.466 L1417.63 682.466 L1417.07 682.466 L1416.51 682.466 L1415.95 682.466 L1415.4 682.466 L1414.84 682.466 L1414.28 682.466 L1413.72 682.466 L1413.16 682.466 L1412.6 682.466 L1412.04 682.466 L1411.48 682.466 L1410.92 682.466 L1410.36 682.466 L1409.8 682.466 L1409.24 682.466 L1408.68 682.466 L1408.13 682.466 L1407.57 682.466 L1407.01 682.466 L1406.45 682.466 L1405.89 682.466 L1405.33 682.466 L1404.77 682.466 L1404.21 682.466 L1403.65 682.466 L1403.09 682.466 L1402.53 682.466 L1401.97 682.466 L1401.41 682.466 L1400.86 682.466 L1400.3 682.466 L1399.74 682.466 L1399.18 682.466 L1398.62 682.466 L1398.06 682.466 L1397.5 682.466 L1396.94 682.466 L1396.38 682.466 L1395.82 682.466 L1395.26 682.466 L1394.7 682.466 L1394.14 682.466 L1393.58 682.466 L1393.03 682.466 L1392.47 682.466 L1391.91 682.466 L1391.35 682.466 L1390.79 682.466 L1390.23 682.466 L1389.67 682.466 L1389.11 682.466 L1388.55 682.466 L1387.99 682.466 L1387.43 682.466 L1386.87 682.466 L1386.31 682.466 L1385.76 682.466 L1385.2 682.466 L1384.64 682.466 L1384.08 682.466 L1383.52 682.466 L1382.96 682.466 L1382.4 682.466 L1381.84 682.466 L1381.28 682.466 L1380.72 682.466 L1380.16 682.466 L1379.6 682.466 L1379.04 682.466 L1378.49 682.466 L1377.93 682.466 L1377.37 682.466 L1376.81 682.466 L1376.25 682.466 L1375.69 682.466 L1375.13 682.466 L1374.57 682.466 L1374.01 682.466 L1373.45 682.466 L1372.89 682.466 L1372.33 682.466 L1371.77 682.466 L1371.21 682.466 L1370.66 682.466 L1370.1 682.466 L1369.54 682.466 L1368.98 682.466 L1368.42 682.466 L1367.86 682.466 L1367.3 682.466 L1366.74 682.466 L1366.18 682.466 L1365.62 682.466 L1365.06 682.466 L1364.5 682.466 L1363.94 682.466 L1363.39 682.466 L1362.83 682.466 L1362.27 682.466 L1361.71 682.466 L1361.15 682.466 L1360.59 682.466 L1360.03 682.466 L1359.47 682.466 L1358.91 682.466 L1358.35 682.466 L1357.79 682.466 L1357.23 682.466 L1356.67 682.466 L1356.12 682.466 L1355.56 682.466 L1355 682.466 L1354.44 682.466 L1353.88 682.466 L1353.32 682.466 L1352.76 682.466 L1352.2 682.466 L1351.64 682.466 L1351.08 682.466 L1350.52 682.466 L1349.96 682.466 L1349.4 682.466 L1348.84 682.466 L1348.29 682.466 L1347.73 682.466 L1347.17 682.466 L1346.61 682.466 L1346.05 682.466 L1345.49 682.466 L1344.93 682.466 L1344.37 682.466 L1343.81 682.466 L1343.25 682.466 L1342.69 682.466 L1342.13 682.466 L1341.57 682.466 L1341.02 682.466 L1340.46 682.466 L1339.9 682.466 L1339.34 682.466 L1338.78 682.466 L1338.22 682.466 L1337.66 682.466 L1337.1 682.466 L1336.54 682.466 L1335.98 682.466 L1335.42 682.466 L1334.86 682.466 L1334.3 682.466 L1333.75 682.466 L1333.19 682.466 L1332.63 682.466 L1332.07 682.466 L1331.51 682.466 L1330.95 682.466 L1330.39 682.466 L1329.83 682.466 L1329.27 682.466 L1328.71 682.466 L1328.15 682.466 L1327.59 682.466 L1327.03 682.466 L1326.47 682.466 L1325.92 682.466 L1325.36 682.466 L1324.8 682.466 L1324.24 682.466 L1323.68 682.466 L1323.12 682.466 L1322.56 682.466 L1322 682.466 L1321.44 682.466 L1320.88 682.466 L1320.32 682.466 L1319.76 682.466 L1319.2 682.466 L1318.65 682.466 L1318.09 682.466 L1317.53 682.466 L1316.97 682.466 L1316.41 682.466 L1315.85 682.466 L1315.29 682.466 L1314.73 682.466 L1314.17 682.466 L1313.61 682.466 L1313.05 682.466 L1312.49 682.466 L1311.93 682.466 L1311.38 682.466 L1310.82 682.466 L1310.26 682.466 L1309.7 682.466 L1309.14 682.466 L1308.58 682.466 L1308.02 682.466 L1307.46 682.466 L1306.9 682.466 L1306.34 682.466 L1305.78 682.466 L1305.22 682.466 L1304.66 682.466 L1304.1 682.466 L1303.55 682.466 L1302.99 682.466 L1302.43 682.466 L1301.87 682.466 L1301.31 682.466 L1300.75 682.466 L1300.19 682.466 L1299.63 682.466 L1299.07 682.466 L1298.51 682.466 L1297.95 682.466 L1297.39 682.466 L1296.83 682.466 L1296.28 682.466 L1295.72 682.466 L1295.16 682.466 L1294.6 682.466 L1294.04 682.466 L1293.48 682.466 L1292.92 682.466 L1292.36 682.466 L1291.8 682.466 L1291.24 682.466 L1290.68 682.466 L1290.12 682.466 L1289.56 682.466 L1289 682.466 L1288.45 682.466 L1287.89 682.466 L1287.33 682.466 L1286.77 682.466 L1286.21 682.466 L1285.65 682.466 L1285.09 682.466 L1284.53 682.466 L1283.97 682.466 L1283.41 682.466 L1282.85 682.466 L1282.29 682.466 L1281.73 682.466 L1281.18 682.466 L1280.62 682.466 L1280.06 682.466 L1279.5 682.466 L1278.94 682.466 L1278.38 682.466 L1277.82 682.466 L1277.26 682.466 L1276.7 682.466 L1276.14 682.466 L1275.58 682.466 L1275.02 682.466 L1274.46 682.466 L1273.91 682.466 L1273.35 682.466 L1272.79 682.466 L1272.23 682.466 L1271.67 682.466 L1271.11 682.466 L1270.55 682.466 L1269.99 682.466 L1269.43 682.466 L1268.87 682.466 L1268.31 682.466 L1267.75 682.466 L1267.19 682.466 L1266.63 682.466 L1266.08 682.466 L1265.52 682.466 L1264.96 682.466 L1264.4 682.466 L1263.84 682.466 L1263.28 682.466 L1262.72 682.466 L1262.16 682.466 L1261.6 682.466 L1261.04 682.466 L1260.48 682.466 L1259.92 682.466 L1259.36 682.466 L1258.81 682.466 L1258.25 682.466 L1257.69 682.466 L1257.13 682.466 L1256.57 682.466 L1256.01 682.466 L1255.45 682.466 L1254.89 682.466 L1254.33 682.466 L1253.77 682.466 L1253.21 682.466 L1252.65 682.466 L1252.09 682.466 L1251.54 682.466 L1250.98 682.466 L1250.42 682.466 L1249.86 682.466 L1249.3 682.466 L1248.74 682.466 L1248.18 682.466 L1247.62 682.466 L1247.06 682.466 L1246.5 682.466 L1245.94 682.466 L1245.38 682.466 L1244.82 682.466 L1244.26 682.466 L1243.71 682.466 L1243.15 682.466 L1242.59 682.466 L1242.03 682.466 L1241.47 682.466 L1240.91 682.466 L1240.35 682.466 L1239.79 682.466 L1239.23 682.466 L1238.67 682.466 L1238.11 682.466 L1237.55 682.466 L1236.99 682.466 L1236.44 682.466 L1235.88 682.466 L1235.32 682.466 L1234.76 682.466 L1234.2 682.466 L1233.64 682.466 L1233.08 682.466 L1232.52 682.466 L1231.96 682.466 L1231.4 682.466 L1230.84 682.466 L1230.28 682.466 L1229.72 682.466 L1229.17 682.466 L1228.61 682.466 L1228.05 682.466 L1227.49 682.466 L1226.93 682.466 L1226.37 682.466 L1225.81 682.466 L1225.25 682.466 L1224.69 682.466 L1224.13 682.466 L1223.57 682.466 L1223.01 682.466 L1222.45 682.466 L1221.89 682.466 L1221.34 682.466 L1220.78 682.466 L1220.22 682.466 L1219.66 682.466 L1219.1 682.466 L1218.54 682.466 L1217.98 682.466 L1217.42 682.466 L1216.86 682.466 L1216.3 682.466 L1215.74 682.466 L1215.18 682.466 L1214.62 682.466 L1214.07 682.466 L1213.51 682.466 L1212.95 682.466 L1212.39 682.466 L1211.83 682.466 L1211.27 682.466 L1210.71 682.466 L1210.15 682.466 L1209.59 682.466 L1209.03 682.466 L1208.47 682.466 L1207.91 682.466 L1207.35 682.466 L1206.8 682.466 L1206.24 682.466 L1205.68 682.466 L1205.12 682.466 L1204.56 682.466 L1204 682.466 L1203.44 682.466 L1202.88 682.466 L1202.32 682.466 L1201.76 682.466 L1201.2 682.466 L1200.64 682.466 L1200.08 682.466 L1199.52 682.466 L1198.97 682.466 L1198.41 682.466 L1197.85 682.466 L1197.29 682.466 L1196.73 682.466 L1196.17 682.466 L1195.61 682.466 L1195.05 682.466 L1194.49 682.466 L1193.93 682.466 L1193.37 682.466 L1192.81 682.466 L1192.25 682.466 L1191.7 682.466 L1191.14 682.466 L1190.58 682.466 L1190.02 682.466 L1189.46 682.466 L1188.9 682.466 L1188.34 682.466 L1187.78 682.466 L1187.22 682.466 L1186.66 682.466 L1186.1 682.466 L1185.54 682.466 L1184.98 682.466 L1184.43 682.466 L1183.87 682.466 L1183.31 682.466 L1182.75 682.466 L1182.19 682.466 L1181.63 682.466 L1181.07 682.466 L1180.51 682.466 L1179.95 682.466 L1179.39 682.466 L1178.83 682.466 L1178.27 682.466 L1177.71 682.466 L1177.15 682.466 L1176.6 682.466 L1176.04 682.466 L1175.48 682.466 L1174.92 682.466 L1174.36 682.466 L1173.8 682.466 L1173.24 682.466 L1172.68 682.466 L1172.12 682.466 L1171.56 682.466 L1171 682.466 L1170.44 682.466 L1169.88 682.466 L1169.33 682.466 L1168.77 682.466 L1168.21 682.466 L1167.65 682.466 L1167.09 682.466 L1166.53 682.466 L1165.97 682.466 L1165.41 682.466 L1164.85 682.466 L1164.29 682.466 L1163.73 682.466 L1163.17 682.466 L1162.61 682.466 L1162.05 682.466 L1161.5 682.466 L1160.94 682.466 L1160.38 682.466 L1159.82 682.466 L1159.26 682.466 L1158.7 682.466 L1158.14 682.466 L1157.58 682.466 L1157.02 682.466 L1156.46 682.466 L1155.9 682.466 L1155.34 682.466 L1154.78 682.466 L1154.23 682.466 L1153.67 682.466 L1153.11 682.466 L1152.55 682.466 L1151.99 682.466 L1151.43 682.466 L1150.87 682.466 L1150.31 682.466 L1149.75 682.466 L1149.19 682.466 L1148.63 682.466 L1148.07 682.466 L1147.51 682.466 L1146.96 682.466 L1146.4 682.466 L1145.84 682.466 L1145.28 682.466 L1144.72 682.466 L1144.16 682.466 L1143.6 682.466 L1143.04 682.466 L1142.48 682.466 L1141.92 682.466 L1141.36 682.466 L1140.8 682.466 L1140.24 682.466 L1139.68 682.466 L1139.13 682.466 L1138.57 682.466 L1138.01 682.466 L1137.45 682.466 L1136.89 682.466 L1136.33 682.466 L1135.77 682.466 L1135.21 682.466 L1134.65 682.466 L1134.09 682.466 L1133.53 682.466 L1132.97 682.466 L1132.41 682.466 L1131.86 682.466 L1131.3 682.466 L1130.74 682.466 L1130.18 682.466 L1129.62 682.466 L1129.06 682.466 L1128.5 682.466 L1127.94 682.466 L1127.38 682.466 L1126.82 682.466 L1126.26 682.466 L1125.7 682.466 L1125.14 682.466 L1124.59 682.466 L1124.03 682.466 L1123.47 682.466 L1122.91 682.466 L1122.35 682.466 L1121.79 682.466 L1121.23 682.466 L1120.67 682.466 L1120.11 682.466 L1119.55 682.466 L1118.99 682.466 L1118.43 682.466 L1117.87 682.466 L1117.31 682.466 L1116.76 682.466 L1116.2 682.466 L1115.64 682.466 L1115.08 682.466 L1114.52 682.466 L1113.96 682.466 L1113.4 682.466 L1112.84 682.466 L1112.28 682.466 L1111.72 682.466 L1111.16 682.466 L1110.6 682.466 L1110.04 682.466 L1109.49 682.466 L1108.93 682.466 L1108.37 682.466 L1107.81 682.466 L1107.25 682.466 L1106.69 682.466 L1106.13 682.466 L1105.57 682.466 L1105.01 682.466 L1104.45 682.466 L1103.89 682.466 L1103.33 682.466 L1102.77 682.466 L1102.22 682.466 L1101.66 682.466 L1101.1 682.466 L1100.54 682.466 L1099.98 682.466 L1099.42 682.466 L1098.86 682.466 L1098.3 682.466 L1097.74 682.466 L1097.18 682.466 L1096.62 682.466 L1096.06 682.466 L1095.5 682.466 L1094.94 682.466 L1094.39 682.466 L1093.83 682.466 L1093.27 682.466 L1092.71 682.466 L1092.15 682.466 L1091.59 682.466 L1091.03 682.466 L1090.47 682.466 L1089.91 682.466 L1089.35 682.466 L1088.79 682.466 L1088.23 682.466 L1087.67 682.466 L1087.12 682.466 L1086.56 682.466 L1086 682.466 L1085.44 682.466 L1084.88 682.466 L1084.32 682.466 L1083.76 682.466 L1083.2 682.466 L1082.64 682.466 L1082.08 682.466 L1081.52 682.466 L1080.96 682.466 L1080.4 682.466 L1079.85 682.466 L1079.29 682.466 L1078.73 682.466 L1078.17 682.466 L1077.61 682.466 L1077.05 682.466 L1076.49 682.466 L1075.93 682.466 L1075.37 682.466 L1074.81 682.466 L1074.25 682.466 L1073.69 682.466 L1073.13 682.466 L1072.57 682.466 L1072.02 682.466 L1071.46 682.466 L1070.9 682.466 L1070.34 682.466 L1069.78 682.466 L1069.22 682.466 L1068.66 682.466 L1068.1 682.466 L1067.54 682.466 L1066.98 682.466 L1066.42 682.466 L1065.86 682.466 L1065.3 682.466 L1064.75 682.466 L1064.19 682.466 L1063.63 682.466 L1063.07 682.466 L1062.51 682.466 L1061.95 682.466 L1061.39 682.466 L1060.83 682.466 L1060.27 682.466 L1059.71 682.466 L1059.15 682.466 L1058.59 682.466 L1058.03 682.466 L1057.48 682.466 L1056.92 682.466 L1056.36 682.466 L1055.8 682.466 L1055.24 682.466 L1054.68 682.466 L1054.12 682.466 L1053.56 682.466 L1053 682.466 L1052.44 682.466 L1051.88 682.466 L1051.32 682.466 L1050.76 682.466 L1050.2 682.466 L1049.65 682.466 L1049.09 682.466 L1048.53 682.466 L1047.97 682.466 L1047.41 682.466 L1046.85 682.466 L1046.29 682.466 L1045.73 682.466 L1045.17 682.466 L1044.61 682.466 L1044.05 682.466 L1043.49 682.466 L1042.93 682.466 L1042.38 682.466 L1041.82 682.466 L1041.26 682.466 L1040.7 682.466 L1040.14 682.466 L1039.58 682.466 L1039.02 682.466 L1038.46 682.466 L1037.9 682.466 L1037.34 682.466 L1036.78 682.466 L1036.22 682.466 L1035.66 682.466 L1035.1 682.466 L1034.55 682.466 L1033.99 682.466 L1033.43 682.466 L1032.87 682.466 L1032.31 682.466 L1031.75 682.466 L1031.19 682.466 L1030.63 682.466 L1030.07 682.466 L1029.51 682.466 L1028.95 682.466 L1028.39 682.466 L1027.83 682.466 L1027.28 682.466 L1026.72 682.466 L1026.16 682.466 L1025.6 682.466 L1025.04 682.466 L1024.48 682.466 L1023.92 682.466 L1023.36 682.466 L1022.8 682.466 L1022.24 682.466 L1021.68 682.466 L1021.12 682.466 L1020.56 682.466 L1020.01 682.466 L1019.45 682.466 L1018.89 682.466 L1018.33 682.466 L1017.77 682.466 L1017.21 682.466 L1016.65 682.466 L1016.09 682.466 L1015.53 682.466 L1014.97 682.466 L1014.41 682.466 L1013.85 682.466 L1013.29 682.466 L1012.73 682.466 L1012.18 682.466 L1011.62 682.466 L1011.06 682.466 L1010.5 682.466 L1009.94 682.466 L1009.38 682.466 L1008.82 682.466 L1008.26 682.466 L1007.7 682.466 L1007.14 682.466 L1006.58 682.466 L1006.02 682.466 L1005.46 682.466 L1004.91 682.466 L1004.35 682.466 L1003.79 682.466 L1003.23 682.466 L1002.67 682.466 L1002.11 682.466 L1001.55 682.466 L1000.99 682.466 L1000.43 682.466 L999.872 682.466 L999.313 682.466 L998.754 682.466 L998.194 682.466 L997.635 682.466 L997.076 682.466 L996.517 682.466 L995.957 682.466 L995.398 682.466 L994.839 682.466 L994.28 682.466 L993.72 682.466 L993.161 682.466 L992.602 682.466 L992.043 682.466 L991.483 682.466 L990.924 682.466 L990.365 682.466 L989.806 682.466 L989.246 682.466 L988.687 682.466 L988.128 682.466 L987.569 682.466 L987.009 682.466 L986.45 682.466 L985.891 682.466 L985.332 682.466 L984.772 682.466 L984.213 682.466 L983.654 682.466 L983.095 682.466 L982.535 682.466 L981.976 682.466 L981.417 682.466 L980.858 682.466 L980.298 682.466 L979.739 682.466 L979.18 682.466 L978.621 682.466 L978.061 682.466 L977.502 682.466 L976.943 682.466 L976.384 682.466 L975.824 682.466 L975.265 682.466 L974.706 682.466 L974.147 682.466 L973.587 682.466 L973.028 682.466 L972.469 682.466 L971.91 682.466 L971.35 682.466 L970.791 682.466 L970.232 682.466 L969.673 682.466 L969.113 682.466 L968.554 682.466 L967.995 682.466 L967.436 682.466 L966.876 682.466 L966.317 682.466 L965.758 682.466 L965.199 682.466 L964.639 682.466 L964.08 682.466 L963.521 682.466 L962.962 682.466 L962.402 682.466 L961.843 682.466 L961.284 682.466 L960.725 682.466 L960.165 682.466 L959.606 682.466 L959.047 682.466 L958.488 682.466 L957.928 682.466 L957.369 682.466 L956.81 682.466 L956.251 682.466 L955.691 682.466 L955.132 682.466 L954.573 682.466 L954.014 682.466 L953.454 682.466 L952.895 682.466 L952.336 682.466 L951.777 682.466 L951.217 682.466 L950.658 682.466 L950.099 682.466 L949.54 682.466 L948.98 682.466 L948.421 682.466 L947.862 682.466 L947.303 682.466 L946.743 682.466 L946.184 682.466 L945.625 682.466 L945.066 682.466 L944.506 682.466 L943.947 682.466 L943.388 682.466 L942.829 682.466 L942.269 682.466 L941.71 682.466 L941.151 682.466 L940.592 682.466 L940.032 682.466 L939.473 682.466 L938.914 682.466 L938.355 682.466 L937.795 682.466 L937.236 682.466 L936.677 682.466 L936.118 682.466 L935.558 682.466 L934.999 682.466 L934.44 682.466 L933.881 682.466 L933.321 682.466 L932.762 682.466 L932.203 682.466 L931.644 682.466 L931.084 682.466 L930.525 682.466 L929.966 682.466 L929.406 682.466 L928.847 682.466 L928.288 682.466 L927.729 682.466 L927.169 682.466 L926.61 682.466 L926.051 682.466 L925.492 682.466 L924.932 682.466 L924.373 682.466 L923.814 682.466 L923.255 682.466 L922.695 682.466 L922.136 682.466 L921.577 682.466 L921.018 682.466 L920.458 682.466 L919.899 682.466 L919.34 682.466 L918.781 682.466 L918.221 682.466 L917.662 682.466 L917.103 682.466 L916.544 682.466 L915.984 682.466 L915.425 682.466 L914.866 682.466 L914.307 682.466 L913.747 682.466 L913.188 682.466 L912.629 682.466 L912.07 682.466 L911.51 682.466 L910.951 682.466 L910.392 682.466 L909.833 682.466 L909.273 682.466 L908.714 682.466 L908.155 682.466 L907.596 682.466 L907.036 682.466 L906.477 682.466 L905.918 682.466 L905.359 682.466 L904.799 682.466 L904.24 682.466 L903.681 682.466 L903.122 682.466 L902.562 682.466 L902.003 682.466 L901.444 682.466 L900.885 682.466 L900.325 682.466 L899.766 682.466 L899.207 682.466 L898.648 682.466 L898.088 682.466 L897.529 682.466 L896.97 682.466 L896.411 682.466 L895.851 682.466 L895.292 682.466 L894.733 682.466 L894.174 682.466 L893.614 682.466 L893.055 682.466 L892.496 682.466 L891.937 682.466 L891.377 682.466 L890.818 682.466 L890.259 682.466 L889.7 682.466 L889.14 682.466 L888.581 682.466 L888.022 682.466 L887.463 682.466 L886.903 682.466 L886.344 682.466 L885.785 682.466 L885.226 682.466 L884.666 682.466 L884.107 682.466 L883.548 682.466 L882.989 682.466 L882.429 682.466 L881.87 682.466 L881.311 682.466 L880.752 682.466 L880.192 682.466 L879.633 682.466 L879.074 682.466 L878.515 682.466 L877.955 682.466 L877.396 682.466 L876.837 682.466 L876.278 682.466 L875.718 682.466 L875.159 682.466 L874.6 682.466 L874.041 682.466 L873.481 682.466 L872.922 682.466 L872.363 682.466 L871.804 682.466 L871.244 682.466 L870.685 682.466 L870.126 682.466 L869.567 682.466 L869.007 682.466 L868.448 682.466 L867.889 682.466 L867.33 682.466 L866.77 682.466 L866.211 682.466 L865.652 682.466 L865.093 682.466 L864.533 682.466 L863.974 682.466 L863.415 682.466 L862.856 682.466 L862.296 682.466 L861.737 682.466 L861.178 682.466 L860.619 682.466 L860.059 682.466 L859.5 682.466 L858.941 682.466 L858.382 682.466 L857.822 682.466 L857.263 682.466 L856.704 682.466 L856.145 682.466 L855.585 682.466 L855.026 682.466 L854.467 682.466 L853.908 682.466 L853.348 682.466 L852.789 682.466 L852.23 682.466 L851.671 682.466 L851.111 682.466 L850.552 682.466 L849.993 682.466 L849.434 682.466 L848.874 682.466 L848.315 682.466 L847.756 682.466 L847.197 682.466 L846.637 682.466 L846.078 682.466 L845.519 682.466 L844.96 682.466 L844.4 682.466 L843.841 682.466 L843.282 682.466 L842.723 682.466 L842.163 682.466 L841.604 682.466 L841.045 682.466 L840.486 682.466 L839.926 682.466 L839.367 682.466 L838.808 682.466 L838.249 682.466 L837.689 682.466 L837.13 682.466 L836.571 682.466 L836.012 682.466 L835.452 682.466 L834.893 682.466 L834.334 682.466 L833.775 682.466 L833.215 682.466 L832.656 682.466 L832.097 682.466 L831.538 682.466 L830.978 682.466 L830.419 682.466 L829.86 682.466 L829.301 682.466 L828.741 682.466 L828.182 682.466 L827.623 682.466 L827.064 682.466 L826.504 682.466 L825.945 682.466 L825.386 682.466 L824.827 682.466 L824.267 682.466 L823.708 682.466 L823.149 682.466 L822.59 682.466 L822.03 682.466 L821.471 682.466 L820.912 682.466 L820.353 682.466 L819.793 682.466 L819.234 682.466 L818.675 682.466 L818.116 682.466 L817.556 682.466 L816.997 682.466 L816.438 682.466 L815.879 682.466 L815.319 682.466 L814.76 682.466 L814.201 682.466 L813.642 682.466 L813.082 682.466 L812.523 682.466 L811.964 682.466 L811.405 682.466 L810.845 682.466 L810.286 682.466 L809.727 682.466 L809.168 682.466 L808.608 682.466 L808.049 682.466 L807.49 682.466 L806.931 682.466 L806.371 682.466 L805.812 682.466 L805.253 682.466 L804.693 682.466 L804.134 682.466 L803.575 682.466 L803.016 682.466 L802.456 682.466 L801.897 682.466 L801.338 682.466 L800.779 682.466 L800.219 682.466 L799.66 682.466 L799.101 682.466 L798.542 682.466 L797.982 682.466 L797.423 682.466 L796.864 682.466 L796.305 682.466 L795.745 682.466 L795.186 682.466 L794.627 682.466 L794.068 682.466 L793.508 682.466 L792.949 682.466 L792.39 682.466 L791.831 682.466 L791.271 682.466 L790.712 682.466 L790.153 682.466 L789.594 682.466 L789.034 682.466 L788.475 682.466 L787.916 682.466 L787.357 682.466 L786.797 682.466 L786.238 682.466 L785.679 682.466 L785.12 682.466 L784.56 682.466 L784.001 682.466 L783.442 682.466 L782.883 682.466 L782.323 682.466 L781.764 682.466 L781.205 682.466 L780.646 682.466 L780.086 682.466 L779.527 682.466 L778.968 682.466 L778.409 682.466 L777.849 682.466 L777.29 682.466 L776.731 682.466 L776.172 682.466 L775.612 682.466 L775.053 682.466 L774.494 682.466 L773.935 682.466 L773.375 682.466 L772.816 682.466 L772.257 682.466 L771.698 682.466 L771.138 682.466 L770.579 682.466 L770.02 682.466 L769.461 682.466 L768.901 682.466 L768.342 682.466 L767.783 682.466 L767.224 682.466 L766.664 682.466 L766.105 682.466 L765.546 682.466 L764.987 682.466 L764.427 682.466 L763.868 682.466 L763.309 682.466 L762.75 682.466 L762.19 682.466 L761.631 682.466 L761.072 682.466 L760.513 682.466 L759.953 682.466 L759.394 682.466 L758.835 682.466 L758.276 682.466 L757.716 682.466 L757.157 682.466 L756.598 682.466 L756.039 682.466 L755.479 682.466 L754.92 682.466 L754.361 682.466 L753.802 682.466 L753.242 682.466 L752.683 682.466 L752.124 682.466 L751.565 682.466 L751.005 682.466 L750.446 682.466 L749.887 682.466 L749.328 682.466 L748.768 682.466 L748.209 682.466 L747.65 682.466 L747.091 682.466 L746.531 682.466 L745.972 682.466 L745.413 682.466 L744.854 682.466 L744.294 682.466 L743.735 682.466 L743.176 682.466 L742.617 682.466 L742.057 682.466 L741.498 682.466 L740.939 682.466 L740.38 682.466 L739.82 682.466 L739.261 682.466 L738.702 682.466 L738.143 682.466 L737.583 682.466 L737.024 682.466 L736.465 682.466 L735.906 682.466 L735.346 682.466 L734.787 682.466 L734.228 682.466 L733.669 682.466 L733.109 682.466 L732.55 682.466 L731.991 682.466 L731.432 682.466 L730.872 682.466 L730.313 682.466 L729.754 682.466 L729.195 682.466 L728.635 682.466 L728.076 682.466 L727.517 682.466 L726.958 682.466 L726.398 682.466 L725.839 682.466 L725.28 682.466 L724.721 682.466 L724.161 682.466 L723.602 682.466 L723.043 682.466 L722.484 682.466 L721.924 682.466 L721.365 682.466 L720.806 682.466 L720.247 682.466  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip603)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.603 720.806,683.603 721.365,683.603 721.924,683.603 722.484,683.603 723.043,683.603 723.602,683.603 724.161,683.603 724.721,683.603 725.28,683.603 725.839,683.603 726.398,683.603 726.958,683.603 727.517,683.603 728.076,683.603 728.635,683.603 729.195,683.603 729.754,683.603 730.313,683.603 730.872,683.603 731.432,683.603 731.991,683.603 732.55,683.603 733.109,683.603 733.669,683.603 734.228,683.603 734.787,683.603 735.346,683.603 735.906,683.603 736.465,683.603 737.024,683.603 737.583,683.603 738.143,683.603 738.702,683.603 739.261,683.603 739.82,683.603 740.38,683.603 740.939,683.603 741.498,683.603 742.057,683.603 742.617,683.603 743.176,683.603 743.735,683.603 744.294,683.603 744.854,683.603 745.413,683.603 745.972,683.603 746.531,683.603 747.091,683.603 747.65,683.603 748.209,683.603 748.768,683.603 749.328,683.603 749.887,683.603 750.446,683.603 751.005,683.603 751.565,683.603 752.124,683.603 752.683,683.603 753.242,683.603 753.802,683.603 754.361,683.603 754.92,683.603 755.479,683.603 756.039,683.603 756.598,683.603 757.157,683.603 757.716,683.603 758.276,683.603 758.835,683.603 759.394,683.603 759.953,683.603 760.513,683.603 761.072,683.603 761.631,683.603 762.19,683.603 762.75,683.603 763.309,683.603 763.868,683.603 764.427,683.603 764.987,683.603 765.546,683.603 766.105,683.603 766.664,683.603 767.224,683.603 767.783,683.603 768.342,683.603 768.901,683.603 769.461,683.603 770.02,683.603 770.579,683.603 771.138,683.603 771.698,683.603 772.257,683.603 772.816,683.603 773.375,683.603 773.935,683.603 774.494,683.603 775.053,683.603 775.612,683.603 776.172,683.603 776.731,683.603 777.29,683.603 777.849,683.603 778.409,683.603 778.968,683.603 779.527,683.603 780.086,683.603 780.646,683.603 781.205,683.603 781.764,683.603 782.323,683.603 782.883,683.603 783.442,683.603 784.001,683.603 784.56,683.603 785.12,683.603 785.679,683.603 786.238,683.603 786.797,683.603 787.357,683.603 787.916,683.603 788.475,683.603 789.034,683.603 789.594,683.603 790.153,683.603 790.712,683.603 791.271,683.603 791.831,683.603 792.39,683.603 792.949,683.603 793.508,683.603 794.068,683.603 794.627,683.603 795.186,683.603 795.745,683.603 796.305,683.603 796.864,683.603 797.423,683.603 797.982,683.603 798.542,683.603 799.101,683.603 799.66,683.603 800.219,683.603 800.779,683.603 801.338,683.603 801.897,683.603 802.456,683.603 803.016,683.603 803.575,683.603 804.134,683.603 804.693,683.603 805.253,683.603 805.812,683.603 806.371,683.603 806.931,683.603 807.49,683.603 808.049,683.603 808.608,683.603 809.168,683.603 809.727,683.603 810.286,683.603 810.845,683.603 811.405,683.603 811.964,683.603 812.523,683.603 813.082,683.603 813.642,683.603 814.201,683.603 814.76,683.603 815.319,683.603 815.879,683.603 816.438,683.603 816.997,683.603 817.556,683.603 818.116,683.603 818.675,683.603 819.234,683.603 819.793,683.603 820.353,683.603 820.912,683.603 821.471,683.603 822.03,683.603 822.59,683.603 823.149,683.603 823.708,683.603 824.267,683.603 824.827,683.603 825.386,683.603 825.945,683.603 826.504,683.603 827.064,683.603 827.623,683.603 828.182,683.603 828.741,683.603 829.301,683.603 829.86,683.603 830.419,683.603 830.978,683.603 831.538,683.603 832.097,683.603 832.656,683.603 833.215,683.603 833.775,683.603 834.334,683.603 834.893,683.603 835.452,683.603 836.012,683.603 836.571,683.603 837.13,683.603 837.689,683.603 838.249,683.603 838.808,683.603 839.367,683.603 839.926,683.603 840.486,683.603 841.045,683.603 841.604,683.603 842.163,683.603 842.723,683.603 843.282,683.603 843.841,683.603 844.4,683.603 844.96,683.603 845.519,683.603 846.078,683.603 846.637,683.603 847.197,683.603 847.756,683.603 848.315,683.603 848.874,683.603 849.434,683.603 849.993,683.603 850.552,683.603 851.111,683.603 851.671,683.603 852.23,683.603 852.789,683.603 853.348,683.603 853.908,683.603 854.467,683.603 855.026,683.603 855.585,683.603 856.145,683.603 856.704,683.603 857.263,683.603 857.822,683.603 858.382,683.603 858.941,683.603 859.5,683.603 860.059,683.603 860.619,683.603 861.178,683.603 861.737,683.603 862.296,683.603 862.856,683.603 863.415,683.603 863.974,683.603 864.533,683.603 865.093,683.603 865.652,683.603 866.211,683.603 866.77,683.603 867.33,683.603 867.889,683.603 868.448,683.603 869.007,683.603 869.567,683.603 870.126,683.603 870.685,683.603 871.244,683.603 871.804,683.603 872.363,683.603 872.922,683.603 873.481,683.603 874.041,683.603 874.6,683.603 875.159,683.603 875.718,683.603 876.278,683.603 876.837,683.603 877.396,683.603 877.955,683.603 878.515,683.603 879.074,683.603 879.633,683.603 880.192,683.603 880.752,683.603 881.311,683.603 881.87,683.603 882.429,683.603 882.989,683.603 883.548,683.603 884.107,683.603 884.666,683.603 885.226,683.603 885.785,683.603 886.344,683.603 886.903,683.603 887.463,683.603 888.022,683.603 888.581,683.603 889.14,683.603 889.7,683.603 890.259,683.603 890.818,683.603 891.377,683.603 891.937,683.603 892.496,683.603 893.055,683.603 893.614,683.603 894.174,683.603 894.733,683.603 895.292,683.603 895.851,683.603 896.411,683.603 896.97,683.603 897.529,683.603 898.088,683.603 898.648,683.603 899.207,683.603 899.766,683.603 900.325,683.603 900.885,683.603 901.444,683.603 902.003,683.603 902.562,683.603 903.122,683.603 903.681,683.603 904.24,683.603 904.799,683.603 905.359,683.603 905.918,683.603 906.477,683.603 907.036,683.603 907.596,683.603 908.155,683.603 908.714,683.603 909.273,683.603 909.833,683.603 910.392,683.603 910.951,683.603 911.51,683.603 912.07,683.603 912.629,683.603 913.188,683.603 913.747,683.603 914.307,683.603 914.866,683.603 915.425,683.603 915.984,683.603 916.544,683.603 917.103,683.603 917.662,683.603 918.221,683.603 918.781,683.603 919.34,683.603 919.899,683.603 920.458,683.603 921.018,683.603 921.577,683.603 922.136,683.603 922.695,683.603 923.255,683.603 923.814,683.603 924.373,683.603 924.932,683.603 925.492,683.603 926.051,683.603 926.61,683.603 927.169,683.603 927.729,683.603 928.288,683.603 928.847,683.603 929.406,683.603 929.966,683.603 930.525,683.603 931.084,683.603 931.644,683.603 932.203,683.603 932.762,683.603 933.321,683.603 933.881,683.603 934.44,683.603 934.999,683.603 935.558,683.603 936.118,683.603 936.677,683.603 937.236,683.603 937.795,683.603 938.355,683.603 938.914,683.603 939.473,683.603 940.032,683.603 940.592,683.603 941.151,683.603 941.71,683.603 942.269,683.603 942.829,683.603 943.388,683.603 943.947,683.603 944.506,683.603 945.066,683.603 945.625,683.603 946.184,683.603 946.743,683.603 947.303,683.603 947.862,683.603 948.421,683.603 948.98,683.603 949.54,683.603 950.099,683.603 950.658,683.603 951.217,683.603 951.777,683.603 952.336,683.603 952.895,683.603 953.454,683.603 954.014,683.603 954.573,683.603 955.132,683.603 955.691,683.603 956.251,683.603 956.81,683.603 957.369,683.603 957.928,683.603 958.488,683.603 959.047,683.603 959.606,683.603 960.165,683.603 960.725,683.603 961.284,683.603 961.843,683.603 962.402,683.603 962.962,683.603 963.521,683.603 964.08,683.603 964.639,683.603 965.199,683.603 965.758,683.603 966.317,683.603 966.876,683.603 967.436,683.603 967.995,683.603 968.554,683.603 969.113,683.603 969.673,683.603 970.232,683.603 970.791,683.603 971.35,683.603 971.91,683.603 972.469,683.603 973.028,683.603 973.587,683.603 974.147,683.603 974.706,683.603 975.265,683.603 975.824,683.603 976.384,683.603 976.943,683.603 977.502,683.603 978.061,683.603 978.621,683.603 979.18,683.603 979.739,683.603 980.298,683.603 980.858,683.603 981.417,683.603 981.976,683.603 982.535,683.603 983.095,683.603 983.654,683.603 984.213,683.603 984.772,683.603 985.332,683.603 985.891,683.603 986.45,683.603 987.009,683.603 987.569,683.603 988.128,683.603 988.687,683.603 989.246,683.603 989.806,683.603 990.365,683.603 990.924,683.603 991.483,683.603 992.043,683.603 992.602,683.603 993.161,683.603 993.72,683.603 994.28,683.603 994.839,683.603 995.398,683.603 995.957,683.603 996.517,683.603 997.076,683.603 997.635,683.603 998.194,683.603 998.754,683.603 999.313,683.603 999.872,683.603 1000.43,683.603 1000.99,683.603 1001.55,683.603 1002.11,683.603 1002.67,683.603 1003.23,683.603 1003.79,683.603 1004.35,683.603 1004.91,683.603 1005.46,683.603 1006.02,683.603 1006.58,683.603 1007.14,683.603 1007.7,683.603 1008.26,683.603 1008.82,683.603 1009.38,683.603 1009.94,683.603 1010.5,683.603 1011.06,683.603 1011.62,683.603 1012.18,683.603 1012.73,683.603 1013.29,683.603 1013.85,683.603 1014.41,683.603 1014.97,683.603 1015.53,683.603 1016.09,683.603 1016.65,683.603 1017.21,683.603 1017.77,683.603 1018.33,683.603 1018.89,683.603 1019.45,683.603 1020.01,683.603 1020.56,683.603 1021.12,683.603 1021.68,683.603 1022.24,683.603 1022.8,683.603 1023.36,683.603 1023.92,683.603 1024.48,683.603 1025.04,683.603 1025.6,683.603 1026.16,683.603 1026.72,683.603 1027.28,683.603 1027.83,683.603 1028.39,683.603 1028.95,683.603 1029.51,683.603 1030.07,683.603 1030.63,683.603 1031.19,683.603 1031.75,683.603 1032.31,683.603 1032.87,683.603 1033.43,683.603 1033.99,683.603 1034.55,683.603 1035.1,683.603 1035.66,683.603 1036.22,683.603 1036.78,683.603 1037.34,683.603 1037.9,683.603 1038.46,683.603 1039.02,683.603 1039.58,683.603 1040.14,683.603 1040.7,683.603 1041.26,683.603 1041.82,683.603 1042.38,683.603 1042.93,683.603 1043.49,683.603 1044.05,683.603 1044.61,683.603 1045.17,683.603 1045.73,683.603 1046.29,683.603 1046.85,683.603 1047.41,683.603 1047.97,683.603 1048.53,683.603 1049.09,683.603 1049.65,683.603 1050.2,683.603 1050.76,683.603 1051.32,683.603 1051.88,683.603 1052.44,683.603 1053,683.603 1053.56,683.603 1054.12,683.603 1054.68,683.603 1055.24,683.603 1055.8,683.603 1056.36,683.603 1056.92,683.603 1057.48,683.603 1058.03,683.603 1058.59,683.603 1059.15,683.603 1059.71,683.603 1060.27,683.603 1060.83,683.603 1061.39,683.603 1061.95,683.603 1062.51,683.603 1063.07,683.603 1063.63,683.603 1064.19,683.603 1064.75,683.603 1065.3,683.603 1065.86,683.603 1066.42,683.603 1066.98,683.603 1067.54,683.603 1068.1,683.603 1068.66,683.603 1069.22,683.603 1069.78,683.603 1070.34,683.603 1070.9,683.603 1071.46,683.603 1072.02,683.603 1072.57,683.603 1073.13,683.603 1073.69,683.603 1074.25,683.603 1074.81,683.603 1075.37,683.603 1075.93,683.603 1076.49,683.603 1077.05,683.603 1077.61,683.603 1078.17,683.603 1078.73,683.603 1079.29,683.603 1079.85,683.603 1080.4,683.603 1080.96,683.603 1081.52,683.603 1082.08,683.603 1082.64,683.603 1083.2,683.603 1083.76,683.603 1084.32,683.603 1084.88,683.603 1085.44,683.603 1086,683.603 1086.56,683.603 1087.12,683.603 1087.67,683.603 1088.23,683.603 1088.79,683.603 1089.35,683.603 1089.91,683.603 1090.47,683.603 1091.03,683.603 1091.59,683.603 1092.15,683.603 1092.71,683.603 1093.27,683.603 1093.83,683.603 1094.39,683.603 1094.94,683.603 1095.5,683.603 1096.06,683.603 1096.62,683.603 1097.18,683.603 1097.74,683.603 1098.3,683.603 1098.86,683.603 1099.42,683.603 1099.98,683.603 1100.54,683.603 1101.1,683.603 1101.66,683.603 1102.22,683.603 1102.77,683.603 1103.33,683.603 1103.89,683.603 1104.45,683.603 1105.01,683.603 1105.57,683.603 1106.13,683.603 1106.69,683.603 1107.25,683.603 1107.81,683.603 1108.37,683.603 1108.93,683.603 1109.49,683.603 1110.04,683.603 1110.6,683.603 1111.16,683.603 1111.72,683.603 1112.28,683.603 1112.84,683.603 1113.4,683.603 1113.96,683.603 1114.52,683.603 1115.08,683.603 1115.64,683.603 1116.2,683.603 1116.76,683.603 1117.31,683.603 1117.87,683.603 1118.43,683.603 1118.99,683.603 1119.55,683.603 1120.11,683.603 1120.67,683.603 1121.23,683.603 1121.79,683.603 1122.35,683.603 1122.91,683.603 1123.47,683.603 1124.03,683.603 1124.59,683.603 1125.14,683.603 1125.7,683.603 1126.26,683.603 1126.82,683.603 1127.38,683.603 1127.94,683.603 1128.5,683.603 1129.06,683.603 1129.62,683.603 1130.18,683.603 1130.74,683.603 1131.3,683.603 1131.86,683.603 1132.41,683.603 1132.97,683.603 1133.53,683.603 1134.09,683.603 1134.65,683.603 1135.21,683.603 1135.77,683.603 1136.33,683.603 1136.89,683.603 1137.45,683.603 1138.01,683.603 1138.57,683.603 1139.13,683.603 1139.68,683.603 1140.24,683.603 1140.8,683.603 1141.36,683.603 1141.92,683.603 1142.48,683.603 1143.04,683.603 1143.6,683.603 1144.16,683.603 1144.72,683.603 1145.28,683.603 1145.84,683.603 1146.4,683.603 1146.96,683.603 1147.51,683.603 1148.07,683.603 1148.63,683.603 1149.19,683.603 1149.75,683.603 1150.31,683.603 1150.87,683.603 1151.43,683.603 1151.99,683.603 1152.55,683.603 1153.11,683.603 1153.67,683.603 1154.23,683.603 1154.78,683.603 1155.34,683.603 1155.9,683.603 1156.46,683.603 1157.02,683.603 1157.58,683.603 1158.14,683.603 1158.7,683.603 1159.26,683.603 1159.82,683.603 1160.38,683.603 1160.94,683.603 1161.5,683.603 1162.05,683.603 1162.61,683.603 1163.17,683.603 1163.73,683.603 1164.29,683.603 1164.85,683.603 1165.41,683.603 1165.97,683.603 1166.53,683.603 1167.09,683.603 1167.65,683.603 1168.21,683.603 1168.77,683.603 1169.33,683.603 1169.88,683.603 1170.44,683.603 1171,683.603 1171.56,683.603 1172.12,683.603 1172.68,683.603 1173.24,683.603 1173.8,683.603 1174.36,683.603 1174.92,683.603 1175.48,683.603 1176.04,683.603 1176.6,683.603 1177.15,683.603 1177.71,683.603 1178.27,683.603 1178.83,683.603 1179.39,683.603 1179.95,683.603 1180.51,683.603 1181.07,683.603 1181.63,683.603 1182.19,683.603 1182.75,683.603 1183.31,683.603 1183.87,683.603 1184.43,683.603 1184.98,683.603 1185.54,683.603 1186.1,683.603 1186.66,683.603 1187.22,683.603 1187.78,683.603 1188.34,683.603 1188.9,683.603 1189.46,683.603 1190.02,683.603 1190.58,683.603 1191.14,683.603 1191.7,683.603 1192.25,683.603 1192.81,683.603 1193.37,683.603 1193.93,683.603 1194.49,683.603 1195.05,683.603 1195.61,683.603 1196.17,683.603 1196.73,683.603 1197.29,683.603 1197.85,683.603 1198.41,683.603 1198.97,683.603 1199.52,683.603 1200.08,683.603 1200.64,683.603 1201.2,683.603 1201.76,683.603 1202.32,683.603 1202.88,683.603 1203.44,683.603 1204,683.603 1204.56,683.603 1205.12,683.603 1205.68,683.603 1206.24,683.603 1206.8,683.603 1207.35,683.603 1207.91,683.603 1208.47,683.603 1209.03,683.603 1209.59,683.603 1210.15,683.603 1210.71,683.603 1211.27,683.603 1211.83,683.603 1212.39,683.603 1212.95,683.603 1213.51,683.603 1214.07,683.603 1214.62,683.603 1215.18,683.603 1215.74,683.603 1216.3,683.603 1216.86,683.603 1217.42,683.603 1217.98,683.603 1218.54,683.603 1219.1,683.603 1219.66,683.603 1220.22,683.603 1220.78,683.603 1221.34,683.603 1221.89,683.603 1222.45,683.603 1223.01,683.603 1223.57,683.603 1224.13,683.603 1224.69,683.603 1225.25,683.603 1225.81,683.603 1226.37,683.603 1226.93,683.603 1227.49,683.603 1228.05,683.603 1228.61,683.603 1229.17,683.603 1229.72,683.603 1230.28,683.603 1230.84,683.603 1231.4,683.603 1231.96,683.603 1232.52,683.603 1233.08,683.603 1233.64,683.603 1234.2,683.603 1234.76,683.603 1235.32,683.603 1235.88,683.603 1236.44,683.603 1236.99,683.603 1237.55,683.603 1238.11,683.603 1238.67,683.603 1239.23,683.603 1239.79,683.603 1240.35,683.603 1240.91,683.603 1241.47,683.603 1242.03,683.603 1242.59,683.603 1243.15,683.603 1243.71,683.603 1244.26,683.603 1244.82,683.603 1245.38,683.603 1245.94,683.603 1246.5,683.603 1247.06,683.603 1247.62,683.603 1248.18,683.603 1248.74,683.603 1249.3,683.603 1249.86,683.603 1250.42,683.603 1250.98,683.603 1251.54,683.603 1252.09,683.603 1252.65,683.603 1253.21,683.603 1253.77,683.603 1254.33,683.603 1254.89,683.603 1255.45,683.603 1256.01,683.603 1256.57,683.603 1257.13,683.603 1257.69,683.603 1258.25,683.603 1258.81,683.603 1259.36,683.603 1259.92,683.603 1260.48,683.603 1261.04,683.603 1261.6,683.603 1262.16,683.603 1262.72,683.603 1263.28,683.603 1263.84,683.603 1264.4,683.603 1264.96,683.603 1265.52,683.603 1266.08,683.603 1266.63,683.603 1267.19,683.603 1267.75,683.603 1268.31,683.603 1268.87,683.603 1269.43,683.603 1269.99,683.603 1270.55,683.603 1271.11,683.603 1271.67,683.603 1272.23,683.603 1272.79,683.603 1273.35,683.603 1273.91,683.603 1274.46,683.603 1275.02,683.603 1275.58,683.603 1276.14,683.603 1276.7,683.603 1277.26,683.603 1277.82,683.603 1278.38,683.603 1278.94,683.603 1279.5,683.603 1280.06,683.603 1280.62,683.603 1281.18,683.603 1281.73,683.603 1282.29,683.603 1282.85,683.603 1283.41,683.603 1283.97,683.603 1284.53,683.603 1285.09,683.603 1285.65,683.603 1286.21,683.603 1286.77,683.603 1287.33,683.603 1287.89,683.603 1288.45,683.603 1289,683.603 1289.56,683.603 1290.12,683.603 1290.68,683.603 1291.24,683.603 1291.8,683.603 1292.36,683.603 1292.92,683.603 1293.48,683.603 1294.04,683.603 1294.6,683.603 1295.16,683.603 1295.72,683.603 1296.28,683.603 1296.83,683.603 1297.39,683.603 1297.95,683.603 1298.51,683.603 1299.07,683.603 1299.63,683.603 1300.19,683.603 1300.75,683.603 1301.31,683.603 1301.87,683.603 1302.43,683.603 1302.99,683.603 1303.55,683.603 1304.1,683.603 1304.66,683.603 1305.22,683.603 1305.78,683.603 1306.34,683.603 1306.9,683.603 1307.46,683.603 1308.02,683.603 1308.58,683.603 1309.14,683.603 1309.7,683.603 1310.26,683.603 1310.82,683.603 1311.38,683.603 1311.93,683.603 1312.49,683.603 1313.05,683.603 1313.61,683.603 1314.17,683.603 1314.73,683.603 1315.29,683.603 1315.85,683.603 1316.41,683.603 1316.97,683.603 1317.53,683.603 1318.09,683.603 1318.65,683.603 1319.2,683.603 1319.76,683.603 1320.32,683.603 1320.88,683.603 1321.44,683.603 1322,683.603 1322.56,683.603 1323.12,683.603 1323.68,683.603 1324.24,683.603 1324.8,683.603 1325.36,683.603 1325.92,683.603 1326.47,683.603 1327.03,683.603 1327.59,683.603 1328.15,683.603 1328.71,683.603 1329.27,683.603 1329.83,683.603 1330.39,683.603 1330.95,683.603 1331.51,683.603 1332.07,683.603 1332.63,683.603 1333.19,683.603 1333.75,683.603 1334.3,683.603 1334.86,683.603 1335.42,683.603 1335.98,683.603 1336.54,683.603 1337.1,683.603 1337.66,683.603 1338.22,683.603 1338.78,683.603 1339.34,683.603 1339.9,683.603 1340.46,683.603 1341.02,683.603 1341.57,683.603 1342.13,683.603 1342.69,683.603 1343.25,683.603 1343.81,683.603 1344.37,683.603 1344.93,683.603 1345.49,683.603 1346.05,683.603 1346.61,683.603 1347.17,683.603 1347.73,683.603 1348.29,683.603 1348.84,683.603 1349.4,683.603 1349.96,683.603 1350.52,683.603 1351.08,683.603 1351.64,683.603 1352.2,683.603 1352.76,683.603 1353.32,683.603 1353.88,683.603 1354.44,683.603 1355,683.603 1355.56,683.603 1356.12,683.603 1356.67,683.603 1357.23,683.603 1357.79,683.603 1358.35,683.603 1358.91,683.603 1359.47,683.603 1360.03,683.603 1360.59,683.603 1361.15,683.603 1361.71,683.603 1362.27,683.603 1362.83,683.603 1363.39,683.603 1363.94,683.603 1364.5,683.603 1365.06,683.603 1365.62,683.603 1366.18,683.603 1366.74,683.603 1367.3,683.603 1367.86,683.603 1368.42,683.603 1368.98,683.603 1369.54,683.603 1370.1,683.603 1370.66,683.603 1371.21,683.603 1371.77,683.603 1372.33,683.603 1372.89,683.603 1373.45,683.603 1374.01,683.603 1374.57,683.603 1375.13,683.603 1375.69,683.603 1376.25,683.603 1376.81,683.603 1377.37,683.603 1377.93,683.603 1378.49,683.603 1379.04,683.603 1379.6,683.603 1380.16,683.603 1380.72,683.603 1381.28,683.603 1381.84,683.603 1382.4,683.603 1382.96,683.603 1383.52,683.603 1384.08,683.603 1384.64,683.603 1385.2,683.603 1385.76,683.603 1386.31,683.603 1386.87,683.603 1387.43,683.603 1387.99,683.603 1388.55,683.603 1389.11,683.603 1389.67,683.603 1390.23,683.603 1390.79,683.603 1391.35,683.603 1391.91,683.603 1392.47,683.603 1393.03,683.603 1393.58,683.603 1394.14,683.603 1394.7,683.603 1395.26,683.603 1395.82,683.603 1396.38,683.603 1396.94,683.603 1397.5,683.603 1398.06,683.603 1398.62,683.603 1399.18,683.603 1399.74,683.603 1400.3,683.603 1400.86,683.603 1401.41,683.603 1401.97,683.603 1402.53,683.603 1403.09,683.603 1403.65,683.603 1404.21,683.603 1404.77,683.603 1405.33,683.603 1405.89,683.603 1406.45,683.603 1407.01,683.603 1407.57,683.603 1408.13,683.603 1408.68,683.603 1409.24,683.603 1409.8,683.603 1410.36,683.603 1410.92,683.603 1411.48,683.603 1412.04,683.603 1412.6,683.603 1413.16,683.603 1413.72,683.603 1414.28,683.603 1414.84,683.603 1415.4,683.603 1415.95,683.603 1416.51,683.603 1417.07,683.603 1417.63,683.603 1418.19,683.603 1418.75,683.603 1419.31,683.603 1419.87,683.603 1420.43,683.603 1420.99,683.603 1421.55,683.603 1422.11,683.603 1422.67,683.603 1423.23,683.603 1423.78,683.603 1424.34,683.603 1424.9,683.603 1425.46,683.603 1426.02,683.603 1426.58,683.603 1427.14,683.603 1427.7,683.603 1428.26,683.603 1428.82,683.603 1429.38,683.603 1429.94,683.603 1430.5,683.603 1431.05,683.603 1431.61,683.603 1432.17,683.603 1432.73,683.603 1433.29,683.603 1433.85,683.603 1434.41,683.603 1434.97,683.603 1435.53,683.603 1436.09,683.603 1436.65,683.603 1437.21,683.603 1437.77,683.603 1438.33,683.603 1438.88,683.603 1439.44,683.603 1440,683.603 1440.56,683.603 1441.12,683.603 1441.68,683.603 1442.24,683.603 1442.8,683.603 1443.36,683.603 1443.92,683.603 1444.48,683.603 1445.04,683.603 1445.6,683.603 1446.15,683.603 1446.71,683.603 1447.27,683.603 1447.83,683.603 1448.39,683.603 1448.95,683.603 1449.51,683.603 1450.07,683.603 1450.63,683.603 1451.19,683.603 1451.75,683.603 1452.31,683.603 1452.87,683.603 1453.42,683.603 1453.98,683.603 1454.54,683.603 1455.1,683.603 1455.66,683.603 1456.22,683.603 1456.78,683.603 1457.34,683.603 1457.9,683.603 1458.46,683.603 1459.02,683.603 1459.58,683.603 1460.14,683.603 1460.7,683.603 1461.25,683.603 1461.81,683.603 1462.37,683.603 1462.93,683.603 1463.49,683.603 1464.05,683.603 1464.61,683.603 1465.17,683.603 1465.73,683.603 1466.29,683.603 1466.85,683.603 1467.41,683.603 1467.97,683.603 1468.52,683.603 1469.08,683.603 1469.64,683.603 1470.2,683.603 1470.76,683.603 1471.32,683.603 1471.88,683.603 1472.44,683.603 1473,683.603 1473.56,683.603 1474.12,683.603 1474.68,683.603 1475.24,683.603 1475.79,683.603 1476.35,683.603 1476.91,683.603 1477.47,683.603 1478.03,683.603 1478.59,683.603 1479.15,683.603 1479.71,683.603 1480.27,683.603 1480.83,683.603 1481.39,683.603 1481.95,683.603 1482.51,683.603 1483.07,683.603 1483.62,683.603 1484.18,683.603 1484.74,683.603 1485.3,683.603 1485.86,683.603 1486.42,683.603 1486.98,683.603 1487.54,683.603 1488.1,683.603 1488.66,683.603 1489.22,683.603 1489.78,683.603 1490.34,683.603 1490.89,683.603 1491.45,683.603 1492.01,683.603 1492.57,683.603 1493.13,683.603 1493.69,683.603 1494.25,683.603 1494.81,683.603 1495.37,683.603 1495.93,683.603 1496.49,683.603 1497.05,683.603 1497.61,683.603 1498.16,683.603 1498.72,683.603 1499.28,683.603 1499.84,683.603 1500.4,683.603 1500.96,683.603 1501.52,683.603 1502.08,683.603 1502.64,683.603 1503.2,683.603 1503.76,683.603 1504.32,683.603 1504.88,683.603 1505.44,683.603 1505.99,683.603 1506.55,683.603 1507.11,683.603 1507.67,683.603 1508.23,683.603 1508.79,683.603 1509.35,683.603 1509.91,683.603 1510.47,683.603 1511.03,683.603 1511.59,683.603 1512.15,683.603 1512.71,683.603 1513.26,683.603 1513.82,683.603 1514.38,683.603 1514.94,683.603 1515.5,683.603 1516.06,683.603 1516.62,683.603 1517.18,683.603 1517.74,683.603 1518.3,683.603 1518.86,683.603 1519.42,683.603 1519.98,683.603 1520.53,683.603 1521.09,683.603 1521.65,683.603 1522.21,683.603 1522.77,683.603 1523.33,683.603 1523.89,683.603 1524.45,683.603 1525.01,683.603 1525.57,683.603 1526.13,683.603 1526.69,683.603 1527.25,683.603 1527.81,683.603 1528.36,683.603 1528.92,683.603 1529.48,683.603 1530.04,683.603 1530.6,683.603 1531.16,683.603 1531.72,683.603 1532.28,683.603 1532.84,683.603 1533.4,683.603 1533.96,683.603 1534.52,683.603 1535.08,683.603 1535.63,683.603 1536.19,683.603 1536.75,683.603 1537.31,683.603 1537.87,683.603 1538.43,683.603 1538.99,683.603 1539.55,683.603 1540.11,683.603 1540.67,683.603 1541.23,683.603 1541.79,683.603 1542.35,683.603 1542.9,683.603 1543.46,683.603 1544.02,683.603 1544.58,683.603 1545.14,683.603 1545.7,683.603 1546.26,683.603 1546.82,683.603 1547.38,683.603 1547.94,683.603 1548.5,683.603 1549.06,683.603 1549.62,683.603 1550.18,683.603 1550.73,683.603 1551.29,683.603 1551.85,683.603 1552.41,683.603 1552.97,683.603 1553.53,683.603 1554.09,683.603 1554.65,683.603 1555.21,683.603 1555.77,683.603 1556.33,683.603 1556.89,683.603 1557.45,683.603 1558,683.603 1558.56,683.603 1559.12,683.603 1559.68,683.603 1560.24,683.603 1560.8,683.603 1561.36,683.603 1561.92,683.603 1562.48,683.603 1563.04,683.603 1563.6,683.603 1564.16,683.603 1564.72,683.603 1565.28,683.603 1565.83,683.603 1566.39,683.603 1566.95,683.603 1567.51,683.603 1568.07,683.603 1568.63,683.603 1569.19,683.603 1569.75,683.603 1570.31,683.603 1570.87,683.603 1571.43,683.603 1571.99,683.603 1572.55,683.603 1573.1,683.603 1573.66,683.603 1574.22,683.603 1574.78,683.603 1575.34,683.603 1575.9,683.603 1576.46,683.603 1577.02,683.603 1577.58,683.603 1578.14,683.603 1578.7,683.603 1579.26,683.603 1579.82,683.603 1580.37,683.603 1580.93,683.603 1581.49,683.603 1582.05,683.603 1582.61,683.603 1583.17,683.603 1583.73,683.603 1584.29,683.603 1584.85,683.603 1585.41,683.603 1585.97,683.603 1586.53,683.603 1587.09,683.603 1587.65,683.603 1588.2,683.603 1588.76,683.603 1589.32,683.603 1589.88,683.603 1590.44,683.603 1591,683.603 1591.56,683.603 1592.12,683.603 1592.68,683.603 1593.24,683.603 1593.8,683.603 1594.36,683.603 1594.92,683.603 1595.47,683.603 1596.03,683.603 1596.59,683.603 1597.15,683.603 1597.71,683.603 1598.27,683.603 1598.83,683.603 1599.39,683.603 1599.95,683.603 1600.51,683.603 1601.07,683.603 1601.63,683.603 1602.19,683.603 1602.74,683.603 1603.3,683.603 1603.86,683.603 1604.42,683.603 1604.98,683.603 1605.54,683.603 1606.1,683.603 1606.66,683.603 1607.22,683.603 1607.78,683.603 1608.34,683.603 1608.9,683.603 1609.46,683.603 1610.02,683.603 1610.57,683.603 1611.13,683.603 1611.69,683.603 1612.25,683.603 1612.81,683.603 1613.37,683.603 1613.93,683.603 1614.49,683.603 1615.05,683.603 1615.61,683.603 1616.17,683.603 1616.73,683.603 1617.29,683.603 1617.84,683.603 1618.4,683.603 1618.96,683.603 1619.52,683.603 1620.08,683.603 1620.64,683.603 1621.2,683.603 1621.76,683.603 1622.32,683.603 1622.88,683.603 1623.44,683.603 1624,683.603 1624.56,683.603 1625.11,683.603 1625.67,683.603 1626.23,683.603 1626.79,683.603 1627.35,683.603 1627.91,683.603 1628.47,683.603 1629.03,683.603 1629.59,683.603 1630.15,683.603 1630.71,683.603 1631.27,683.603 1631.83,683.603 1632.39,683.603 1632.94,683.603 1633.5,683.603 1634.06,683.603 1634.62,683.603 1635.18,683.603 1635.74,683.603 1636.3,683.603 1636.86,683.603 1637.42,683.603 1637.98,683.603 1638.54,683.603 1639.1,683.603 1639.66,683.603 1640.21,683.603 1640.77,683.603 1641.33,683.603 1641.89,683.603 1642.45,683.603 1643.01,683.603 1643.57,683.603 1644.13,683.603 1644.69,683.603 1645.25,683.603 1645.81,683.603 1646.37,683.603 1646.93,683.603 1647.48,683.603 1648.04,683.603 1648.6,683.603 1649.16,683.603 1649.72,683.603 1650.28,683.603 1650.84,683.603 1651.4,683.603 1651.96,683.603 1652.52,683.603 1653.08,683.603 1653.64,683.603 1654.2,683.603 1654.76,683.603 1655.31,683.603 1655.87,683.603 1656.43,683.603 1656.99,683.603 1657.55,683.603 1658.11,683.603 1658.67,683.603 1659.23,683.603 1659.79,683.603 1660.35,683.603 1660.91,683.603 1661.47,683.603 1662.03,683.603 1662.58,683.603 1663.14,683.603 1663.7,683.603 1664.26,683.603 1664.82,683.603 1665.38,683.603 1665.94,683.603 1666.5,683.603 1667.06,683.603 1667.62,683.603 1668.18,683.603 1668.74,683.603 1669.3,683.603 1669.85,683.603 1670.41,683.603 1670.97,683.603 1671.53,683.603 1672.09,683.603 1672.65,683.603 1673.21,683.603 1673.77,683.603 1674.33,683.603 1674.89,683.603 1675.45,683.603 1676.01,683.603 1676.57,683.603 1677.13,683.603 1677.68,683.603 1678.24,683.603 1678.8,683.603 1679.36,683.603 1679.92,683.603 1680.48,683.603 1681.04,683.603 1681.6,683.603 1682.16,683.603 1682.72,683.603 1683.28,683.603 1683.84,683.603 1684.4,683.603 1684.95,683.603 1685.51,683.603 1686.07,683.603 1686.63,683.603 1687.19,683.603 1687.75,683.603 1688.31,683.603 1688.87,683.603 1689.43,683.603 1689.99,683.603 1690.55,683.603 1691.11,683.603 1691.67,683.603 1692.23,683.603 1692.78,683.603 1693.34,683.603 1693.9,683.603 1694.46,683.603 1695.02,683.603 1695.58,683.603 1696.14,683.603 1696.7,683.603 1697.26,683.603 1697.82,683.603 1698.38,683.603 1698.94,683.603 1699.5,683.603 1700.05,683.603 1700.61,683.603 1701.17,683.603 1701.73,683.603 1702.29,683.603 1702.85,683.603 1703.41,683.603 1703.97,683.603 1704.53,683.603 1705.09,683.603 1705.65,683.603 1706.21,683.603 1706.77,683.603 1707.32,683.603 1707.88,683.603 1708.44,683.603 1709,683.603 1709.56,683.603 1710.12,683.603 1710.68,683.603 1711.24,683.603 1711.8,683.603 1712.36,683.603 1712.92,683.603 1713.48,683.603 1714.04,683.603 1714.6,683.603 1715.15,683.603 1715.71,683.603 1716.27,683.603 1716.83,683.603 1717.39,683.603 1717.95,683.603 1718.51,683.603 1719.07,683.603 1719.63,683.603 1720.19,683.603 1720.75,683.603 1721.31,683.603 1721.87,683.603 1722.42,683.603 1722.98,683.603 1723.54,683.603 1724.1,683.603 1724.66,683.603 1725.22,683.603 1725.78,683.603 1726.34,683.603 1726.9,683.603 1727.46,683.603 1728.02,683.603 1728.58,683.603 1729.14,683.603 1729.69,683.603 1730.25,683.603 1730.81,683.603 1731.37,683.603 1731.93,683.603 1732.49,683.603 1733.05,683.603 1733.61,683.603 1734.17,683.603 1734.73,683.603 1735.29,683.603 1735.85,683.603 1736.41,683.603 1736.97,683.603 1737.52,683.603 1738.08,683.603 1738.64,683.603 1739.2,683.603 1739.76,683.603 1740.32,683.603 1740.88,683.603 1741.44,683.603 1742,683.603 1742.56,683.603 1743.12,683.603 1743.68,683.603 1744.24,683.603 1744.79,683.603 1745.35,683.603 1745.91,683.603 1746.47,683.603 1747.03,683.603 1747.59,683.603 1748.15,683.603 1748.71,683.603 1749.27,683.603 1749.83,683.603 1750.39,683.603 1750.95,683.603 1751.51,683.603 1752.06,683.603 1752.62,683.603 1753.18,683.603 1753.74,683.603 1754.3,683.603 1754.86,683.603 1755.42,683.603 1755.98,683.603 1756.54,683.603 1757.1,683.603 1757.66,683.603 1758.22,683.603 1758.78,683.603 1759.34,683.603 1759.89,683.603 1760.45,683.603 1761.01,683.603 1761.57,683.603 1762.13,683.603 1762.69,683.603 1763.25,683.603 1763.81,683.603 1764.37,683.603 1764.93,683.603 1765.49,683.603 1766.05,683.603 1766.61,683.603 1767.16,683.603 1767.72,683.603 1768.28,683.603 1768.84,683.603 1769.4,683.603 1769.96,683.603 1770.52,683.603 1771.08,683.603 1771.64,683.603 1772.2,683.603 1772.76,683.603 1773.32,683.603 1773.88,683.603 1774.43,683.603 1774.99,683.603 1775.55,683.603 1776.11,683.603 1776.67,683.603 1777.23,683.603 1777.79,683.603 1778.35,683.603 1778.91,683.603 1779.47,683.603 1780.03,683.603 1780.59,683.603 1781.15,683.603 1781.71,683.603 1782.26,683.603 1782.82,683.603 1783.38,683.603 1783.94,683.603 1784.5,683.603 1785.06,683.603 1785.62,683.603 1786.18,683.603 1786.74,683.603 1787.3,683.603 1787.86,683.603 1788.42,683.603 1788.98,683.603 1789.53,683.603 1790.09,683.603 1790.65,683.603 1791.21,683.603 1791.77,683.603 1792.33,683.603 1792.89,683.603 1793.45,683.603 1794.01,683.603 1794.57,683.603 1795.13,683.603 1795.69,683.603 1796.25,683.603 1796.8,683.603 1797.36,683.603 1797.92,683.603 1798.48,683.603 1799.04,683.603 1799.6,683.603 1800.16,683.603 1800.72,683.603 1801.28,683.603 1801.84,683.603 1802.4,683.603 1802.96,683.603 1803.52,683.603 1804.08,683.603 1804.63,683.603 1805.19,683.603 1805.75,683.603 1806.31,683.603 1806.87,683.603 1807.43,683.603 1807.99,683.603 1808.55,683.603 1809.11,683.603 1809.67,683.603 1810.23,683.603 1810.79,683.603 1811.35,683.603 1811.9,683.603 1812.46,683.603 1813.02,683.603 1813.58,683.603 1814.14,683.603 1814.7,683.603 1815.26,683.603 1815.82,683.603 1816.38,683.603 1816.94,683.603 1817.5,683.603 1818.06,683.603 1818.62,683.603 1819.18,683.603 1819.73,683.603 1820.29,683.603 1820.85,683.603 1821.41,683.603 1821.97,683.603 1822.53,683.603 1823.09,683.603 1823.65,683.603 1824.21,683.603 1824.77,683.603 1825.33,683.603 1825.89,683.603 1826.45,683.603 1827,683.603 1827.56,683.603 1828.12,683.603 1828.68,683.603 1829.24,683.603 1829.8,683.603 1830.36,683.603 1830.92,683.603 1831.48,683.603 1832.04,683.603 1832.6,683.603 1833.16,683.603 1833.72,683.603 1834.27,683.603 1834.83,683.603 1835.39,683.603 1835.95,683.603 1836.51,683.603 1837.07,683.603 1837.63,683.603 1838.19,683.603 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.030546980461732 ± 0.023531922382777376\nProjected Energy: -4.015176203710091 ± (0.006458680032269903, 0.005721308997818753)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.480286</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3876e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">9.257e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.448e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.253e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.585e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">7.894e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.363124291613369\n -0.7590191922770888\n  0.13584182219622676\n  0.15789998694607732\n  0.8767114411781325\n  1.5305929970973349\n  1.5835732611867348\n  3.072870330325866\n  3.1256726539518382\n  4.862107221562175\n  6.260694850380594\n  6.40267121118311\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t,k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) * cos(k) + Im(t) * sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns \\Re(t) * k^2 - 2 * \\Im(t) * k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
