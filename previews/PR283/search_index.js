var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2148527290414688 ± 0.0014749937749883387\n   G2(1) = 0.9168088041566665 ± 0.0007120402468859948\n   G2(2) = 0.9806535248196664 ± 0.0006432458117299603\n   G2(3) = 0.9902226130058647 ± 0.0009641875089716592\n   G2(4) = 0.9806535248196664 ± 0.0006432458117299603\n   G2(5) = 0.9168088041566665 ± 0.0007120402468859948\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.076077443523373 ± 0.12859737651649467\n   Replica 2: -3.992973730237556 ± 0.12264332462631695\n   Replica 3: -3.9876540067346875 ± 0.13820449408575966\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip100\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip100)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip101\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip100)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip102\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.06 2211.02,1003.06 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.275 2211.02,745.275 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.492 2211.02,487.492 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.71 2211.02,229.71 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip100)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.06 423.181,1003.06 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.275 423.181,745.275 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.492 423.181,487.492 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.71 423.181,229.71 \"/>\n<path clip-path=\"url(#clip100)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.55 Q352.728 1275.09 356.339 1275.09 Q359.973 1275.09 361.779 1271.55 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.64 356.339 1246.64 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.21 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.21 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M290.043 1016.4 L306.363 1016.4 L306.363 1020.34 L284.418 1020.34 L284.418 1016.4 Q287.08 1013.65 291.664 1009.02 Q296.27 1004.37 297.451 1003.02 Q299.696 1000.5 300.576 998.763 Q301.478 997.004 301.478 995.314 Q301.478 992.56 299.534 990.824 Q297.613 989.087 294.511 989.087 Q292.312 989.087 289.858 989.851 Q287.427 990.615 284.65 992.166 L284.65 987.444 Q287.474 986.31 289.927 985.731 Q292.381 985.152 294.418 985.152 Q299.789 985.152 302.983 987.837 Q306.177 990.523 306.177 995.013 Q306.177 997.143 305.367 999.064 Q304.58 1000.96 302.474 1003.55 Q301.895 1004.23 298.793 1007.44 Q295.691 1010.64 290.043 1016.4 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M316.224 985.777 L334.58 985.777 L334.58 989.712 L320.506 989.712 L320.506 998.185 Q321.524 997.837 322.543 997.675 Q323.562 997.49 324.58 997.49 Q330.367 997.49 333.747 1000.66 Q337.126 1003.83 337.126 1009.25 Q337.126 1014.83 333.654 1017.93 Q330.182 1021.01 323.862 1021.01 Q321.687 1021.01 319.418 1020.64 Q317.173 1020.27 314.765 1019.53 L314.765 1014.83 Q316.849 1015.96 319.071 1016.52 Q321.293 1017.07 323.77 1017.07 Q327.774 1017.07 330.112 1014.97 Q332.45 1012.86 332.45 1009.25 Q332.45 1005.64 330.112 1003.53 Q327.774 1001.43 323.77 1001.43 Q321.895 1001.43 320.02 1001.84 Q318.168 1002.26 316.224 1003.14 L316.224 985.777 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M356.339 988.856 Q352.728 988.856 350.899 992.421 Q349.094 995.962 349.094 1003.09 Q349.094 1010.2 350.899 1013.76 Q352.728 1017.3 356.339 1017.3 Q359.973 1017.3 361.779 1013.76 Q363.608 1010.2 363.608 1003.09 Q363.608 995.962 361.779 992.421 Q359.973 988.856 356.339 988.856 M356.339 985.152 Q362.149 985.152 365.205 989.759 Q368.284 994.342 368.284 1003.09 Q368.284 1011.82 365.205 1016.43 Q362.149 1021.01 356.339 1021.01 Q350.529 1021.01 347.45 1016.43 Q344.395 1011.82 344.395 1003.09 Q344.395 994.342 347.45 989.759 Q350.529 985.152 356.339 985.152 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M286.062 727.995 L304.418 727.995 L304.418 731.93 L290.344 731.93 L290.344 740.402 Q291.363 740.055 292.381 739.893 Q293.4 739.708 294.418 739.708 Q300.205 739.708 303.585 742.879 Q306.964 746.05 306.964 751.467 Q306.964 757.045 303.492 760.147 Q300.02 763.226 293.701 763.226 Q291.525 763.226 289.256 762.856 Q287.011 762.485 284.603 761.745 L284.603 757.045 Q286.687 758.18 288.909 758.735 Q291.131 759.291 293.608 759.291 Q297.613 759.291 299.951 757.184 Q302.288 755.078 302.288 751.467 Q302.288 747.856 299.951 745.749 Q297.613 743.643 293.608 743.643 Q291.733 743.643 289.858 744.059 Q288.006 744.476 286.062 745.356 L286.062 727.995 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M326.177 731.073 Q322.566 731.073 320.737 734.638 Q318.932 738.18 318.932 745.309 Q318.932 752.416 320.737 755.981 Q322.566 759.522 326.177 759.522 Q329.811 759.522 331.617 755.981 Q333.446 752.416 333.446 745.309 Q333.446 738.18 331.617 734.638 Q329.811 731.073 326.177 731.073 M326.177 727.37 Q331.987 727.37 335.043 731.976 Q338.122 736.559 338.122 745.309 Q338.122 754.036 335.043 758.643 Q331.987 763.226 326.177 763.226 Q320.367 763.226 317.288 758.643 Q314.233 754.036 314.233 745.309 Q314.233 736.559 317.288 731.976 Q320.367 727.37 326.177 727.37 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M356.339 731.073 Q352.728 731.073 350.899 734.638 Q349.094 738.18 349.094 745.309 Q349.094 752.416 350.899 755.981 Q352.728 759.522 356.339 759.522 Q359.973 759.522 361.779 755.981 Q363.608 752.416 363.608 745.309 Q363.608 738.18 361.779 734.638 Q359.973 731.073 356.339 731.073 M356.339 727.37 Q362.149 727.37 365.205 731.976 Q368.284 736.559 368.284 745.309 Q368.284 754.036 365.205 758.643 Q362.149 763.226 356.339 763.226 Q350.529 763.226 347.45 758.643 Q344.395 754.036 344.395 745.309 Q344.395 736.559 347.45 731.976 Q350.529 727.37 356.339 727.37 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M284.835 470.212 L307.057 470.212 L307.057 472.203 L294.511 504.772 L289.627 504.772 L301.432 474.147 L284.835 474.147 L284.835 470.212 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M316.224 470.212 L334.58 470.212 L334.58 474.147 L320.506 474.147 L320.506 482.619 Q321.524 482.272 322.543 482.11 Q323.562 481.925 324.58 481.925 Q330.367 481.925 333.747 485.096 Q337.126 488.268 337.126 493.684 Q337.126 499.263 333.654 502.365 Q330.182 505.443 323.862 505.443 Q321.687 505.443 319.418 505.073 Q317.173 504.703 314.765 503.962 L314.765 499.263 Q316.849 500.397 319.071 500.953 Q321.293 501.508 323.77 501.508 Q327.774 501.508 330.112 499.402 Q332.45 497.295 332.45 493.684 Q332.45 490.073 330.112 487.967 Q327.774 485.86 323.77 485.86 Q321.895 485.86 320.02 486.277 Q318.168 486.694 316.224 487.573 L316.224 470.212 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M356.339 473.291 Q352.728 473.291 350.899 476.856 Q349.094 480.397 349.094 487.527 Q349.094 494.633 350.899 498.198 Q352.728 501.74 356.339 501.74 Q359.973 501.74 361.779 498.198 Q363.608 494.633 363.608 487.527 Q363.608 480.397 361.779 476.856 Q359.973 473.291 356.339 473.291 M356.339 469.587 Q362.149 469.587 365.205 474.194 Q368.284 478.777 368.284 487.527 Q368.284 496.254 365.205 500.86 Q362.149 505.443 356.339 505.443 Q350.529 505.443 347.45 500.86 Q344.395 496.254 344.395 487.527 Q344.395 478.777 347.45 474.194 Q350.529 469.587 356.339 469.587 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M256.664 243.054 L264.303 243.054 L264.303 216.689 L255.992 218.355 L255.992 214.096 L264.256 212.43 L268.932 212.43 L268.932 243.054 L276.571 243.054 L276.571 246.99 L256.664 246.99 L256.664 243.054 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M296.015 215.508 Q292.404 215.508 290.576 219.073 Q288.77 222.615 288.77 229.744 Q288.77 236.851 290.576 240.416 Q292.404 243.957 296.015 243.957 Q299.65 243.957 301.455 240.416 Q303.284 236.851 303.284 229.744 Q303.284 222.615 301.455 219.073 Q299.65 215.508 296.015 215.508 M296.015 211.805 Q301.826 211.805 304.881 216.411 Q307.96 220.994 307.96 229.744 Q307.96 238.471 304.881 243.078 Q301.826 247.661 296.015 247.661 Q290.205 247.661 287.127 243.078 Q284.071 238.471 284.071 229.744 Q284.071 220.994 287.127 216.411 Q290.205 211.805 296.015 211.805 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M326.177 215.508 Q322.566 215.508 320.737 219.073 Q318.932 222.615 318.932 229.744 Q318.932 236.851 320.737 240.416 Q322.566 243.957 326.177 243.957 Q329.811 243.957 331.617 240.416 Q333.446 236.851 333.446 229.744 Q333.446 222.615 331.617 219.073 Q329.811 215.508 326.177 215.508 M326.177 211.805 Q331.987 211.805 335.043 216.411 Q338.122 220.994 338.122 229.744 Q338.122 238.471 335.043 243.078 Q331.987 247.661 326.177 247.661 Q320.367 247.661 317.288 243.078 Q314.233 238.471 314.233 229.744 Q314.233 220.994 317.288 216.411 Q320.367 211.805 326.177 211.805 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M356.339 215.508 Q352.728 215.508 350.899 219.073 Q349.094 222.615 349.094 229.744 Q349.094 236.851 350.899 240.416 Q352.728 243.957 356.339 243.957 Q359.973 243.957 361.779 240.416 Q363.608 236.851 363.608 229.744 Q363.608 222.615 361.779 219.073 Q359.973 215.508 356.339 215.508 M356.339 211.805 Q362.149 211.805 365.205 216.411 Q368.284 220.994 368.284 229.744 Q368.284 238.471 365.205 243.078 Q362.149 247.661 356.339 247.661 Q350.529 247.661 347.45 243.078 Q344.395 238.471 344.395 229.744 Q344.395 220.994 347.45 216.411 Q350.529 211.805 356.339 211.805 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip102)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.71 4017.76,229.71 \"/>\n<polyline clip-path=\"url(#clip102)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1247.43 461.101,1245.71 461.669,1244.97 462.238,1243.12 462.806,1242.22 463.375,1241.24 463.943,1239.13 464.511,1236.93 465.08,1234.61 465.648,1233.25 466.216,1231.75 466.785,1229.11 467.353,1227.36 467.921,1225.47 468.49,1223.47 469.058,1221.32 469.626,1217.99 470.195,1215.53 470.763,1212.86 471.331,1210.01 471.9,1205.97 472.468,1201.79 473.036,1197.45 473.605,1193.97 474.173,1190.19 474.741,1185.27 475.31,1181.12 475.878,1176.76 476.446,1172.19 477.015,1166.37 477.583,1161.37 478.152,1156.19 478.72,1149.85 479.288,1144.27 479.857,1137.36 480.425,1131.38 480.993,1123.06 481.562,1115.71 482.13,1109.05 482.698,1102.13 483.267,1092.97 483.835,1085.72 484.403,1078.22 484.972,1070.58 485.54,1061.63 486.108,1052.57 486.677,1044.4 487.245,1034.91 487.813,1026.42 488.382,1017.84 488.95,1007.01 489.518,997.113 490.087,986.98 490.655,973.494 491.224,964.276 491.792,952.928 492.36,941.523 492.929,930.017 493.497,919.344 494.065,908.615 494.634,895.642 495.202,885.948 495.77,873.097 496.339,862.443 496.907,852.763 497.475,842.094 498.044,830.351 498.612,818.664 499.18,808.167 499.749,798.707 500.317,786.019 500.885,774.483 501.454,762.977 502.022,752.722 502.59,743.407 503.159,732.323 503.727,720.251 504.295,710.261 504.864,698.36 505.432,688.543 506.001,679.052 506.569,669.508 507.137,661.2 507.706,651.904 508.274,640.585 508.842,632.583 509.411,622.633 509.979,614.171 510.547,606.437 511.116,595.831 511.684,586.409 512.252,576.065 512.821,568.058 513.389,560.34 513.957,553.846 514.526,544.242 515.094,536.982 515.662,528.906 516.231,522.978 516.799,515.95 517.367,505.093 517.936,498.866 518.504,492.631 519.072,487.609 519.641,481.606 520.209,474.521 520.778,467.854 521.346,461.107 521.914,456.556 522.483,448.05 523.051,444.986 523.619,440.878 524.188,436.781 524.756,430.724 525.324,426.849 525.893,421.781 526.461,417.016 527.029,411.296 527.598,407.999 528.166,405.696 528.734,401.336 529.303,394.988 529.871,392.126 530.439,386.96 531.008,384.146 531.576,380.21 532.144,374.549 532.713,371.157 533.281,367.632 533.85,362.104 534.418,359.886 534.986,357.623 535.555,354.431 536.123,351.322 536.691,349.268 537.26,347.369 537.828,345.286 538.396,343.076 538.965,339.084 539.533,332.29 540.101,329.717 540.67,328.211 541.238,324.945 541.806,323.63 542.375,321.131 542.943,324.947 543.511,322.079 544.08,318.58 544.648,316.14 545.216,312.812 545.785,311.786 546.353,309.895 546.921,307.913 547.49,308.856 548.058,306.716 548.627,303.57 549.195,300.311 549.763,298.384 550.332,297.504 550.9,296.549 551.468,293.588 552.037,293.93 552.605,290.968 553.173,290.246 553.742,289.547 554.31,288.923 554.878,284.994 555.447,282.357 556.015,282.095 556.583,280.809 557.152,277.38 557.72,277.102 558.288,275.774 558.857,275.672 559.425,275.402 559.993,273.048 560.562,272.048 561.13,268.835 561.698,270.12 562.267,271.088 562.835,269.956 563.404,269.839 563.972,265.669 564.54,263.753 565.109,261.907 565.677,263.354 566.245,264.395 566.814,263.484 567.382,263.78 567.95,264.976 568.519,261.754 569.087,259.953 569.655,259.001 570.224,261.238 570.792,260.038 571.36,258.861 571.929,259.173 572.497,259.263 573.065,257.267 573.634,259.487 574.202,257.629 574.77,256.74 575.339,254.958 575.907,254.301 576.476,252.59 577.044,252.961 577.612,254.458 578.181,251.556 578.749,250.616 579.317,251.062 579.886,252.43 580.454,252.886 581.022,252.941 581.591,255.222 582.159,256.276 582.727,256.07 583.296,255.836 583.864,253.595 584.432,253.321 585.001,253.219 585.569,250.858 586.137,251.064 586.706,249.749 587.274,248.622 587.842,248.95 588.411,249.226 588.979,246.45 589.547,244.887 590.116,244.464 590.684,243.69 591.253,243.387 591.821,243.104 592.389,244.713 592.958,242.107 593.526,243.587 594.094,244.837 594.663,241.817 595.231,245.666 595.799,246.903 596.368,246.282 596.936,245.506 597.504,243.531 598.073,241.769 598.641,241.139 599.209,241.548 599.778,240.735 600.346,242.232 600.914,242.564 601.483,243.005 602.051,244.16 602.619,244.366 603.188,244.256 603.756,246.449 604.325,244.501 604.893,243.307 605.461,243.447 606.03,243.526 606.598,244.756 607.166,244.627 607.735,245.575 608.303,245.478 608.871,245.516 609.44,245.362 610.008,245.061 610.576,244.956 611.145,248.174 611.713,246.951 612.281,248.743 612.85,249.605 613.418,249.164 613.986,250.847 614.555,249.168 615.123,248.768 615.691,247.236 616.26,245.876 616.828,246.596 617.396,244.189 617.965,244.987 618.533,242.763 619.102,241.492 619.67,241.27 620.238,242.252 620.807,245.076 621.375,246.592 621.943,245.257 622.512,244.732 623.08,244.666 623.648,244.593 624.217,243.338 624.785,242.971 625.353,241.816 625.922,242.495 626.49,241.116 627.058,240.002 627.627,236.839 628.195,236.854 628.763,235.864 629.332,236.905 629.9,238.081 630.468,237.932 631.037,238.097 631.605,239.283 632.173,240.291 632.742,244.163 633.31,243.614 633.879,241.374 634.447,241.093 635.015,240.719 635.584,240.662 636.152,240.565 636.72,239.101 637.289,237.8 637.857,241.914 638.425,240.741 638.994,241.575 639.562,243.311 640.13,241.937 640.699,239.454 641.267,240.299 641.835,239.958 642.404,239.723 642.972,238.519 643.54,236.27 644.109,236.298 644.677,238.35 645.245,238.268 645.814,240.174 646.382,238.897 646.951,238.64 647.519,238.446 648.087,238.097 648.656,237.694 649.224,237.576 649.792,234.529 650.361,230.318 650.929,232.506 651.497,231.561 652.066,232.686 652.634,232.812 653.202,232.884 653.771,232.141 654.339,231.35 654.907,230.675 655.476,232.254 656.044,233.37 656.612,233.498 657.181,235.674 657.749,235.681 658.317,236.646 658.886,238.351 659.454,240.192 660.022,237.806 660.591,237.638 661.159,238.408 661.728,240.311 662.296,238.938 662.864,237.587 663.433,234.317 664.001,235.316 664.569,235 665.138,236.977 665.706,235.671 666.274,235.774 666.843,236.504 667.411,236.162 667.979,236.922 668.548,237.517 669.116,238.19 669.684,237.541 670.253,236.231 670.821,234.08 671.389,234.156 671.958,235.914 672.526,235.56 673.094,235.166 673.663,234.126 674.231,234.939 674.799,232.67 675.368,230.734 675.936,230.754 676.505,229.629 677.073,228.979 677.641,227.029 678.21,227.435 678.778,228.994 679.346,231.334 679.915,230.383 680.483,229.346 681.051,226.474 681.62,226.834 682.188,226.259 682.756,225.826 683.325,229.587 683.893,229.793 684.461,230.16 685.03,230.313 685.598,231.689 686.166,231.663 686.735,232.901 687.303,232.88 687.871,230.829 688.44,231.064 689.008,230.201 689.577,228.333 690.145,232.785 690.713,232.725 691.282,234.886 691.85,233.648 692.418,233.54 692.987,234.553 693.555,234.364 694.123,235.094 694.692,233.828 695.26,234.792 695.828,233.625 696.397,232.557 696.965,232.491 697.533,232.388 698.102,235.185 698.67,235.186 699.238,235.032 699.807,235.104 700.375,234.831 700.943,233.381 701.512,234.455 702.08,233.18 702.648,232.154 703.217,230.066 703.785,229.053 704.354,227.091 704.922,226.701 705.49,227.155 706.059,229.611 706.627,229.798 707.195,229.95 707.764,231.275 708.332,228.339 708.9,228.605 709.469,228.713 710.037,229.007 710.605,229.249 711.174,226.505 711.742,227.893 712.31,228.296 712.879,229.621 713.447,230.786 714.015,231.878 714.584,231.907 715.152,231 715.72,231.212 716.289,230.533 716.857,230.735 717.425,229.828 717.994,232.387 718.562,231.414 719.131,228.45 719.699,228.948 720.267,229.373 720.836,230.593 721.404,230.492 721.972,227.504 722.541,228.753 723.109,229.146 723.677,230.416 724.246,228.772 724.814,231.296 725.382,231.304 725.951,228.361 726.519,228.869 727.087,227.934 727.656,227.394 728.224,226.823 728.792,228.286 729.361,229.769 729.929,229.961 730.497,229.03 731.066,229.392 731.634,228.753 732.203,227.991 732.771,227.265 733.339,226.639 733.908,226.134 734.476,227.783 735.044,229.291 735.613,232.656 736.181,232.658 736.749,232.441 737.318,232.566 737.886,232.606 738.454,232.696 739.023,231.696 739.591,228.866 740.159,225.104 740.728,224.452 741.296,225.193 741.864,225.836 742.433,227.177 743.001,228.538 743.569,230.191 744.138,232.64 744.706,233.756 745.274,232.827 745.843,230.902 746.411,233.352 746.98,235.361 747.548,236.154 748.116,235.803 748.685,235.735 749.253,234.575 749.821,234.549 750.39,234.618 750.958,234.356 751.526,232.421 752.095,233.426 752.663,234.447 753.231,233.322 753.8,228.146 754.368,230.544 754.936,229.658 755.505,231.11 756.073,231.326 756.641,232.463 757.21,231.735 757.778,230.685 758.346,230.936 758.915,228.997 759.483,227.181 760.052,228.67 760.62,230.198 761.188,230.364 761.757,230.578 762.325,230.859 762.893,230.952 763.462,231.129 764.03,230.194 764.598,231.556 765.167,230.717 765.735,232.046 766.303,233.263 766.872,232.311 767.44,232.505 768.008,232.437 768.577,232.495 769.145,232.332 769.713,233.674 770.282,235.665 770.85,236.371 771.418,237.208 771.987,236.712 772.555,236.186 773.123,236.805 773.692,238.597 774.26,237.226 774.829,236.629 775.397,236.379 775.965,236.107 776.534,237.815 777.102,237.492 777.67,238.115 778.239,238.929 778.807,236.699 779.375,234.306 779.944,235.118 780.512,233.856 781.08,233.791 781.649,232.486 782.217,231.453 782.785,231.579 783.354,228.54 783.922,226.834 784.49,228.17 785.059,227.421 785.627,228.5 786.195,229.66 786.764,229.983 787.332,230.215 787.9,228.222 788.469,229.475 789.037,230.839 789.606,229.774 790.174,231.022 790.742,231.311 791.311,228.983 791.879,229.284 792.447,229.333 793.016,229.537 793.584,227.649 794.152,228.029 794.721,226.116 795.289,226.557 795.857,227.057 796.426,228.346 796.994,230.677 797.562,228.585 798.131,230.849 798.699,232.065 799.267,230.924 799.836,231.009 800.404,229.106 800.972,229.273 801.541,229.35 802.109,229.384 802.678,230.599 803.246,229.873 803.814,228.015 804.383,229.322 804.951,227.37 805.519,227.63 806.088,225.83 806.656,226.274 807.224,227.408 807.793,226.825 808.361,227.303 808.929,226.893 809.498,228.231 810.066,231.618 810.634,233.694 811.203,231.666 811.771,231.665 812.339,232.525 812.908,230.221 813.476,228.277 814.044,229.486 814.613,230.556 815.181,229.562 815.749,229.777 816.318,227.883 816.886,231.194 817.455,231.121 818.023,230.376 818.591,229.6 819.16,229.596 819.728,228.625 820.296,226.828 820.865,223.202 821.433,225.844 822.001,227.412 822.57,227.961 823.138,227.423 823.706,229.911 824.275,228.924 824.843,227.018 825.411,228.14 825.98,227.141 826.548,227.563 827.116,230.046 827.685,228.203 828.253,227.388 828.821,226.703 829.39,226.859 829.958,225.099 830.526,226.56 831.095,225.926 831.663,226.125 832.232,225.468 832.8,227.08 833.368,229.408 833.937,230.552 834.505,232.975 835.073,234.09 835.642,233.972 836.21,234.02 836.778,232.053 837.347,230.963 837.915,230.035 838.483,231.264 839.052,230.302 839.62,230.498 840.188,229.703 840.757,229.043 841.325,229.258 841.893,231.709 842.462,231.711 843.03,232.045 843.598,229.018 844.167,232.629 844.735,234.837 845.304,236.646 845.872,235.519 846.44,235.473 847.009,235.411 847.577,234.306 848.145,232.184 848.714,234.507 849.282,236.556 849.85,236.262 850.419,238.036 850.987,235.786 851.555,234.567 852.124,233.34 852.692,234.26 853.26,232.122 853.829,232.088 854.397,230.953 854.965,229.968 855.534,230.107 856.102,230.432 856.67,232.672 857.239,232.877 857.807,231.807 858.375,233.702 858.944,232.704 859.512,231.764 860.081,232.725 860.649,231.778 861.217,232.955 861.786,230.753 862.354,229.78 862.922,230.047 863.491,230.039 864.059,229.972 864.627,229.828 865.196,230.963 865.764,231.834 866.332,233.846 866.901,234.65 867.469,233.402 868.037,234.34 868.606,235.017 869.174,234.749 869.742,235.334 870.311,235.842 870.879,234.267 871.447,238.021 872.016,237.556 872.584,236.07 873.152,236.582 873.721,235.014 874.289,236.956 874.858,237.493 875.426,236.915 875.994,237.467 876.563,237.615 877.131,237.002 877.699,235.418 878.268,235.004 878.836,234.488 879.404,233.979 879.973,233.779 880.541,231.492 881.109,231.152 881.678,232.14 882.246,231.756 882.814,233.512 883.383,233.314 883.951,233.823 884.519,233.156 885.088,233.057 885.656,232.713 886.224,231.328 886.793,231.355 887.361,228.055 887.93,230.324 888.498,230.093 889.066,229.957 889.635,227.883 890.203,228.649 890.771,230.695 891.34,229.331 891.908,230.471 892.476,229.257 893.045,228.128 893.613,227.071 894.181,226.167 894.75,227.277 895.318,228.719 895.886,227.82 896.455,227.897 897.023,227.015 897.591,226.232 898.16,225.771 898.728,226.017 899.296,226.12 899.865,226.335 900.433,225.323 901.001,223.465 901.57,225 902.138,226.376 902.707,225.472 903.275,225.828 903.843,226.159 904.412,225.507 904.98,224.731 905.548,225.389 906.117,225.85 906.685,223.141 907.253,223.663 907.822,222.925 908.39,225.446 908.958,227.835 909.527,227.969 910.095,227.156 910.663,226.414 911.232,227.838 911.8,229.9 912.368,228.793 912.937,230.193 913.505,233.355 914.073,232.284 914.642,230.245 915.21,233.511 915.779,233.362 916.347,231.302 916.915,230.067 917.484,230.281 918.052,230.188 918.62,230.28 919.189,229.311 919.757,230.378 920.325,231.525 920.894,231.367 921.462,232.451 922.03,231.286 922.599,231.242 923.167,233.255 923.735,233.99 924.304,233.917 924.872,235.879 925.44,235.336 926.009,235.836 926.577,237.533 927.145,235.91 927.714,233.543 928.282,234.158 928.85,233.669 929.419,231.405 929.987,230.2 930.556,229.879 931.124,229.666 931.692,230.607 932.261,229.392 932.829,229.289 933.397,229.525 933.966,229.476 934.534,228.488 935.102,227.477 935.671,224.526 936.239,223.742 936.807,224.271 937.376,226.654 937.944,231.078 938.512,231.21 939.081,232.13 939.649,230.939 940.217,229.684 940.786,228.779 941.354,226.831 941.922,225.082 942.491,224.107 943.059,223.391 943.627,226.057 944.196,227.332 944.764,227.514 945.333,227.758 945.901,226.945 946.469,228.364 947.038,225.308 947.606,226.777 948.174,228.118 948.743,227.404 949.311,228.652 949.879,230.875 950.448,230.828 951.016,232.101 951.584,232.028 952.153,232 952.721,229.666 953.289,228.706 953.858,227.707 954.426,229.187 954.994,230.329 955.563,231.359 956.131,231.42 956.699,228.225 957.268,229.533 957.836,230.379 958.405,231.478 958.973,231.438 959.541,231.444 960.11,233.688 960.678,231.373 961.246,231.207 961.815,230.27 962.383,230.284 962.951,232.305 963.52,231.125 964.088,229.918 964.656,229.16 965.225,228.3 965.793,231.604 966.361,232.584 966.93,232.425 967.498,234.301 968.066,233.926 968.635,232.615 969.203,232.314 969.771,232.044 970.34,232.75 970.908,232.501 971.476,231.424 972.045,231.403 972.613,232.228 973.182,231.821 973.75,230.666 974.318,228.283 974.887,227.205 975.455,227.371 976.023,226.524 976.592,227.813 977.16,228.897 977.728,229.106 978.297,231.355 978.865,229.431 979.433,229.537 980.002,228.281 980.57,227.41 981.138,225.711 981.707,225.095 982.275,223.18 982.843,223.582 983.412,223.087 983.98,225.751 984.548,227.128 985.117,228.403 985.685,227.867 986.253,228.136 986.822,225.297 987.39,224.665 987.959,224.088 988.527,224.895 989.095,224.601 989.664,225.229 990.232,225.663 990.8,226.087 991.369,227.617 991.937,226.861 992.505,227.056 993.074,225.266 993.642,225.722 994.21,228.119 994.779,226.08 995.347,227.545 995.915,228.957 996.484,230.184 997.052,231.11 997.62,231.089 998.189,230.213 998.757,230.317 999.325,231.376 999.894,230.384 1000.46,230.396 1001.03,229.372 1001.6,231.545 1002.17,232.753 1002.74,234.542 1003.3,234.532 1003.87,234.416 1004.44,235.061 1005.01,233.903 1005.58,233.644 1006.15,234.695 1006.71,231.554 1007.28,231.435 1007.85,233.443 1008.42,233.284 1008.99,233.185 1009.56,232.862 1010.12,236.137 1010.69,235.654 1011.26,237.428 1011.83,237.957 1012.4,237.678 1012.97,236.115 1013.53,235.559 1014.1,234.259 1014.67,235.009 1015.24,234.701 1015.81,233.389 1016.38,235.136 1016.94,233.654 1017.51,231.272 1018.08,235.187 1018.65,234.655 1019.22,233.403 1019.79,229.767 1020.35,228.838 1020.92,230.878 1021.49,231.806 1022.06,230.546 1022.63,229.622 1023.2,230.933 1023.76,230.86 1024.33,229.758 1024.9,227.794 1025.47,227.851 1026.04,228.152 1026.61,227.21 1027.17,229.393 1027.74,228.302 1028.31,230.543 1028.88,230.414 1029.45,233.39 1030.02,230.125 1030.58,230.159 1031.15,229.796 1031.72,228.831 1032.29,229.667 1032.86,228.591 1033.43,229.734 1033.99,227.972 1034.56,226.082 1035.13,228.569 1035.7,230.637 1036.27,229.451 1036.84,226.665 1037.4,227.016 1037.97,227.185 1038.54,226.492 1039.11,227.647 1039.68,225.902 1040.25,227.348 1040.81,226.44 1041.38,226.651 1041.95,226.697 1042.52,226.283 1043.09,227.456 1043.66,228.693 1044.22,229.855 1044.79,231.02 1045.36,229.771 1045.93,233.02 1046.5,231.82 1047.07,232.784 1047.63,234.62 1048.2,233.569 1048.77,232.37 1049.34,233.413 1049.91,233.194 1050.48,235.1 1051.05,233.868 1051.61,231.641 1052.18,231.547 1052.75,231.281 1053.32,232.189 1053.89,230.874 1054.46,230.472 1055.02,227.214 1055.59,227.559 1056.16,227.669 1056.73,229.02 1057.3,230.197 1057.87,229.341 1058.43,228.318 1059,228.564 1059.57,231.911 1060.14,233.762 1060.71,233.415 1061.28,230.971 1061.84,229.88 1062.41,229.1 1062.98,231.272 1063.55,234.451 1064.12,235.141 1064.69,235.815 1065.25,235.537 1065.82,235.209 1066.39,234.838 1066.96,233.465 1067.53,232.797 1068.1,232.336 1068.66,233.007 1069.23,233.89 1069.8,232.579 1070.37,230.125 1070.94,230.999 1071.51,230.849 1072.07,230.723 1072.64,229.636 1073.21,227.476 1073.78,226.698 1074.35,225.888 1074.92,227.115 1075.48,227.181 1076.05,226.35 1076.62,225.466 1077.19,227.851 1077.76,227.895 1078.33,224.765 1078.89,227.015 1079.46,228.083 1080.03,229.144 1080.6,230.028 1081.17,228.763 1081.74,231.897 1082.3,230.702 1082.87,231.454 1083.44,231.273 1084.01,229.104 1084.58,230.179 1085.15,231.05 1085.71,231.014 1086.28,229.938 1086.85,231.888 1087.42,233.789 1087.99,232.505 1088.56,230.235 1089.12,231.035 1089.69,233.011 1090.26,233.801 1090.83,232.199 1091.4,232.877 1091.97,231.538 1092.53,228.082 1093.1,229.012 1093.67,227.845 1094.24,225.902 1094.81,226.318 1095.38,224.384 1095.94,225.694 1096.51,226.718 1097.08,228.888 1097.65,228.971 1098.22,227.892 1098.79,229.199 1099.35,228.166 1099.92,229.425 1100.49,228.392 1101.06,226.675 1101.63,229.949 1102.2,231.115 1102.76,229.727 1103.33,230.679 1103.9,230.419 1104.47,228.154 1105.04,230.416 1105.61,229.265 1106.17,229.957 1106.74,227.613 1107.31,226.516 1107.88,226.228 1108.45,225.361 1109.02,224.66 1109.58,224.828 1110.15,225.301 1110.72,224.457 1111.29,228.073 1111.86,228.328 1112.43,228.246 1112.99,229.191 1113.56,229.187 1114.13,229.368 1114.7,230.366 1115.27,230.389 1115.84,231.338 1116.4,230.354 1116.97,230.213 1117.54,229.42 1118.11,228.301 1118.68,228.205 1119.25,231.485 1119.81,231.577 1120.38,228.528 1120.95,228.576 1121.52,228.547 1122.09,231.047 1122.66,229.989 1123.23,230.008 1123.79,229.212 1124.36,228.127 1124.93,228.391 1125.5,227.602 1126.07,226.73 1126.64,229.131 1127.2,226.114 1127.77,224.361 1128.34,223.86 1128.91,225.515 1129.48,224.849 1130.05,226.319 1130.61,226.605 1131.18,227.047 1131.75,228.297 1132.32,229.591 1132.89,228.82 1133.46,231.11 1134.02,230.043 1134.59,231.114 1135.16,233.093 1135.73,232.754 1136.3,233.794 1136.87,231.62 1137.43,229.489 1138,229.509 1138.57,228.478 1139.14,230.65 1139.71,227.275 1140.28,227.496 1140.84,226.718 1141.41,226.09 1141.98,227.325 1142.55,228.639 1143.12,228.862 1143.69,229.925 1144.25,228.948 1144.82,231.086 1145.39,231.183 1145.96,232.254 1146.53,232.955 1147.1,233.624 1147.66,232.388 1148.23,232.232 1148.8,231.928 1149.37,229.858 1149.94,233.049 1150.51,231.856 1151.07,232.564 1151.64,228.236 1152.21,228.521 1152.78,230.067 1153.35,231.131 1153.92,231.919 1154.48,234 1155.05,235.819 1155.62,234.33 1156.19,231.898 1156.76,230.691 1157.33,229.646 1157.89,228.491 1158.46,227.608 1159.03,229.987 1159.6,228.86 1160.17,226.893 1160.74,227.967 1161.3,227.892 1161.87,225.072 1162.44,225.443 1163.01,225.773 1163.58,227.192 1164.15,228.604 1164.71,229.769 1165.28,230.823 1165.85,229.798 1166.42,230.767 1166.99,230.813 1167.56,231.87 1168.12,232.728 1168.69,232.65 1169.26,233.584 1169.83,233.295 1170.4,232.996 1170.97,234.843 1171.53,234.371 1172.1,235.053 1172.67,235.806 1173.24,234.286 1173.81,233.844 1174.38,232.65 1174.94,233.328 1175.51,233.127 1176.08,231.622 1176.65,229.467 1177.22,227.49 1177.79,229.9 1178.35,229.987 1178.92,227.877 1179.49,227.976 1180.06,226.977 1180.63,225.016 1181.2,226.488 1181.76,226.894 1182.33,227.027 1182.9,229.181 1183.47,227.168 1184.04,227.299 1184.61,228.619 1185.17,226.652 1185.74,225.761 1186.31,226.056 1186.88,224.354 1187.45,227.759 1188.02,226.726 1188.58,225.936 1189.15,227.42 1189.72,229.639 1190.29,226.523 1190.86,225.575 1191.43,225.808 1192,227.329 1192.56,226.556 1193.13,227.8 1193.7,228.198 1194.27,228.237 1194.84,228.454 1195.41,228.76 1195.97,230.162 1196.54,231.245 1197.11,233.284 1197.68,232.174 1198.25,231.157 1198.82,231.27 1199.38,230.221 1199.95,231.217 1200.52,231.066 1201.09,232.182 1201.66,232.001 1202.23,231.902 1202.79,235.94 1203.36,235.368 1203.93,236.031 1204.5,234.711 1205.07,235.389 1205.64,235.114 1206.2,236.731 1206.77,236.071 1207.34,236.543 1207.91,237.074 1208.48,237.607 1209.05,235.984 1209.61,234.206 1210.18,232.66 1210.75,234.485 1211.32,234.046 1211.89,233.499 1212.46,233.039 1213.02,231.701 1213.59,231.422 1214.16,233.362 1214.73,233.23 1215.3,230.886 1215.87,231.723 1216.43,231.343 1217,230.097 1217.57,229.972 1218.14,230.954 1218.71,230.566 1219.28,230.176 1219.84,228.927 1220.41,231.009 1220.98,231.807 1221.55,230.552 1222.12,229.443 1222.69,228.506 1223.25,228.588 1223.82,227.275 1224.39,227.471 1224.96,227.791 1225.53,226.973 1226.1,227.06 1226.66,225.097 1227.23,227.373 1227.8,226.391 1228.37,222.459 1228.94,223.929 1229.51,223.171 1230.07,222.604 1230.64,224.215 1231.21,224.899 1231.78,224.263 1232.35,222.787 1232.92,225.412 1233.48,226.572 1234.05,227.676 1234.62,228.765 1235.19,230.912 1235.76,232.158 1236.33,231.908 1236.89,232.138 1237.46,231.991 1238.03,232.777 1238.6,231.845 1239.17,230.652 1239.74,230.437 1240.3,230.368 1240.87,230.403 1241.44,227.338 1242.01,226.744 1242.58,225.921 1243.15,226.124 1243.71,226.485 1244.28,226.729 1244.85,225.876 1245.42,226.006 1245.99,224.105 1246.56,221.386 1247.12,222.878 1247.69,226.31 1248.26,225.839 1248.83,227.16 1249.4,227.317 1249.97,226.564 1250.53,226.895 1251.1,228.968 1251.67,229.163 1252.24,228.191 1252.81,226.028 1253.38,224.136 1253.94,221.669 1254.51,222.281 1255.08,223.775 1255.65,226.291 1256.22,228.741 1256.79,228.796 1257.35,228.652 1257.92,227.846 1258.49,228.961 1259.06,228.071 1259.63,230.285 1260.2,231.227 1260.76,232.209 1261.33,232.138 1261.9,233.102 1262.47,235.135 1263.04,233.852 1263.61,234.843 1264.18,234.496 1264.74,235.211 1265.31,237.04 1265.88,238.763 1266.45,239.157 1267.02,240.354 1267.59,240.431 1268.15,240.868 1268.72,241.171 1269.29,240.228 1269.86,239.419 1270.43,238.749 1271,237.053 1271.56,236.636 1272.13,235.994 1272.7,235.406 1273.27,233.904 1273.84,233.412 1274.41,231.998 1274.97,232.846 1275.54,232.495 1276.11,233.391 1276.68,231.067 1277.25,229.757 1277.82,227.619 1278.38,227.777 1278.95,226.831 1279.52,229.89 1280.09,229.768 1280.66,229.529 1281.23,229.363 1281.79,228.176 1282.36,230.305 1282.93,231.167 1283.5,231.82 1284.07,230.517 1284.64,231.442 1285.2,232.373 1285.77,233.031 1286.34,229.348 1286.91,228.343 1287.48,227.399 1288.05,227.401 1288.61,227.408 1289.18,228.514 1289.75,226.373 1290.32,227.564 1290.89,225.761 1291.46,228.06 1292.02,227.194 1292.59,227.504 1293.16,227.458 1293.73,226.714 1294.3,227.008 1294.87,228.273 1295.43,228.393 1296,229.209 1296.57,228.305 1297.14,227.371 1297.71,226.353 1298.28,226.558 1298.84,225.642 1299.41,225.591 1299.98,225.897 1300.55,226.253 1301.12,228.468 1301.69,225.269 1302.25,225.725 1302.82,226.972 1303.39,226.034 1303.96,226.098 1304.53,225.4 1305.1,226.747 1305.66,226.884 1306.23,227.19 1306.8,227.394 1307.37,227.566 1307.94,227.818 1308.51,229.287 1309.07,230.476 1309.64,229.612 1310.21,230.52 1310.78,229.598 1311.35,230.592 1311.92,229.552 1312.48,229.742 1313.05,230.856 1313.62,231.095 1314.19,231.239 1314.76,231.143 1315.33,232.777 1315.89,232.504 1316.46,232.293 1317.03,232.004 1317.6,231.779 1318.17,228.593 1318.74,228.606 1319.3,226.538 1319.87,226.487 1320.44,225.75 1321.01,227.874 1321.58,228.138 1322.15,228.078 1322.71,226.256 1323.28,226.509 1323.85,227.75 1324.42,227.923 1324.99,229.12 1325.56,230.223 1326.12,229.412 1326.69,229.561 1327.26,227.488 1327.83,227.754 1328.4,228.01 1328.97,230.288 1329.53,232.401 1330.1,233.476 1330.67,233.207 1331.24,232.177 1331.81,231.954 1332.38,233.789 1332.94,231.481 1333.51,232.336 1334.08,233.264 1334.65,232.894 1335.22,230.673 1335.79,229.65 1336.36,228.344 1336.92,229.37 1337.49,229.506 1338.06,229.524 1338.63,229.701 1339.2,231.769 1339.77,230.19 1340.33,232.049 1340.9,232.973 1341.47,233.669 1342.04,232.11 1342.61,230.722 1343.18,231.467 1343.74,232.37 1344.31,232.24 1344.88,230.895 1345.45,231.549 1346.02,230.337 1346.59,230.545 1347.15,228.479 1347.72,228.599 1348.29,226.543 1348.86,227.721 1349.43,229.801 1350,231.724 1350.56,232.577 1351.13,229.069 1351.7,229.196 1352.27,229.299 1352.84,229.427 1353.41,228.548 1353.97,228.511 1354.54,230.674 1355.11,230.776 1355.68,228.572 1356.25,228.617 1356.82,229.721 1357.38,226.743 1357.95,227.095 1358.52,227.096 1359.09,226.156 1359.66,226.438 1360.23,227.395 1360.79,228.382 1361.36,228.466 1361.93,227.436 1362.5,227.481 1363.07,230.714 1363.64,228.427 1364.2,229.226 1364.77,228.102 1365.34,228.102 1365.91,229.39 1366.48,231.451 1367.05,231.244 1367.61,230.123 1368.18,228.864 1368.75,228.943 1369.32,228.922 1369.89,231.148 1370.46,229.012 1371.02,229.065 1371.59,228.064 1372.16,228.178 1372.73,227.346 1373.3,227.566 1373.87,226.758 1374.43,226.92 1375,227.216 1375.57,226.463 1376.14,227.679 1376.71,225.69 1377.28,224.928 1377.84,227.511 1378.41,227.671 1378.98,227.824 1379.55,227.055 1380.12,230.46 1380.69,231.448 1381.25,232.501 1381.82,233.405 1382.39,234.272 1382.96,235.998 1383.53,235.607 1384.1,235.376 1384.66,235.09 1385.23,236.614 1385.8,235.936 1386.37,235.433 1386.94,237.096 1387.51,238.555 1388.07,235.804 1388.64,236.042 1389.21,234.539 1389.78,234.953 1390.35,232.564 1390.92,233.279 1391.48,231.002 1392.05,230.903 1392.62,231.798 1393.19,231.44 1393.76,230.332 1394.33,229.34 1394.89,228.334 1395.46,228.409 1396.03,227.184 1396.6,228.458 1397.17,228.638 1397.74,226.612 1398.3,226.651 1398.87,226.945 1399.44,229.147 1400.01,228.088 1400.58,228.259 1401.15,227.173 1401.71,227.185 1402.28,228.348 1402.85,227.599 1403.42,228.691 1403.99,227.757 1404.56,227.97 1405.13,226.658 1405.69,225.932 1406.26,226.064 1406.83,226.225 1407.4,228.509 1407.97,227.473 1408.54,229.655 1409.1,230.834 1409.67,231.855 1410.24,229.803 1410.81,230.98 1411.38,227.612 1411.95,226.667 1412.51,225.489 1413.08,227.87 1413.65,227.758 1414.22,228.752 1414.79,228.025 1415.36,228.197 1415.92,229.409 1416.49,231.626 1417.06,233.65 1417.63,233.448 1418.2,232.956 1418.77,233.611 1419.33,235.236 1419.9,235.62 1420.47,235.039 1421.04,234.872 1421.61,232.504 1422.18,229.214 1422.74,227.834 1423.31,227.701 1423.88,226.99 1424.45,227.121 1425.02,227.585 1425.59,228.709 1426.15,228.864 1426.72,227.907 1427.29,230.938 1427.86,229.733 1428.43,229.861 1429,230.918 1429.56,228.867 1430.13,229.88 1430.7,231.941 1431.27,230.803 1431.84,231.94 1432.41,231.957 1432.97,229.988 1433.54,229.03 1434.11,229.205 1434.68,230.235 1435.25,227.145 1435.82,226.078 1436.38,226.236 1436.95,226.423 1437.52,228.646 1438.09,230.712 1438.66,230.886 1439.23,233.94 1439.79,235.672 1440.36,234.169 1440.93,231.825 1441.5,231.65 1442.07,230.489 1442.64,233.49 1443.2,231.129 1443.77,232.174 1444.34,233.066 1444.91,232.822 1445.48,229.565 1446.05,228.321 1446.61,227.203 1447.18,227.187 1447.75,225.428 1448.32,226.567 1448.89,225.698 1449.46,224.093 1450.02,224.495 1450.59,225.793 1451.16,228.269 1451.73,229.538 1452.3,227.589 1452.87,226.842 1453.43,226.976 1454,226.015 1454.57,226.63 1455.14,226.897 1455.71,226.084 1456.28,228.137 1456.84,227.341 1457.41,227.5 1457.98,227.704 1458.55,228.772 1459.12,229.629 1459.69,230.576 1460.25,229.413 1460.82,229.647 1461.39,231.695 1461.96,231.619 1462.53,233.708 1463.1,232.105 1463.66,229.806 1464.23,228.873 1464.8,230.052 1465.37,232.076 1465.94,231.895 1466.51,229.651 1467.07,231.575 1467.64,229.361 1468.21,228.395 1468.78,227.682 1469.35,225.921 1469.92,230.283 1470.48,230.322 1471.05,229.257 1471.62,229.373 1472.19,230.203 1472.76,232.126 1473.33,229.863 1473.89,229.704 1474.46,230.766 1475.03,229.685 1475.6,230.63 1476.17,231.647 1476.74,230.528 1477.31,225.455 1477.87,225.503 1478.44,227.875 1479.01,228.092 1479.58,224.136 1480.15,223.337 1480.72,223.815 1481.28,225.037 1481.85,226.385 1482.42,225.579 1482.99,227.016 1483.56,227.487 1484.13,228.688 1484.69,229.818 1485.26,228.899 1485.83,229.119 1486.4,228.36 1486.97,228.383 1487.54,228.434 1488.1,227.624 1488.67,227.799 1489.24,228.065 1489.81,228.146 1490.38,229.402 1490.95,229.525 1491.51,229.39 1492.08,228.568 1492.65,226.601 1493.22,227.976 1493.79,229.163 1494.36,229.165 1494.92,226.066 1495.49,227.537 1496.06,228.543 1496.63,226.566 1497.2,230.985 1497.77,230.98 1498.33,230.118 1498.9,230.144 1499.47,231.206 1500.04,233.09 1500.61,229.816 1501.18,230.522 1501.74,229.337 1502.31,229.224 1502.88,229.566 1503.45,230.723 1504.02,230.611 1504.59,229.471 1505.15,229.547 1505.72,228.665 1506.29,229.993 1506.86,232.034 1507.43,233.032 1508,232.898 1508.56,232.748 1509.13,232.416 1509.7,232.234 1510.27,233.198 1510.84,233.928 1511.41,234.93 1511.97,234.622 1512.54,236.094 1513.11,234.52 1513.68,233.056 1514.25,232.959 1514.82,232.614 1515.38,232.502 1515.95,232.302 1516.52,232.239 1517.09,233.532 1517.66,233.117 1518.23,233.876 1518.79,233.553 1519.36,234.33 1519.93,233.92 1520.5,234.509 1521.07,233.109 1521.64,232.939 1522.2,232.481 1522.77,232.193 1523.34,232.161 1523.91,230.73 1524.48,231.755 1525.05,231.597 1525.61,232.514 1526.18,232.351 1526.75,230.03 1527.32,229.112 1527.89,226.981 1528.46,226.065 1529.02,226.135 1529.59,228.473 1530.16,227.277 1530.73,225.235 1531.3,224.528 1531.87,223.802 1532.43,223.162 1533,222.603 1533.57,224.242 1534.14,224.371 1534.71,224.522 1535.28,224.965 1535.84,227.265 1536.41,227.474 1536.98,228.697 1537.55,230.895 1538.12,230.858 1538.69,231.975 1539.25,232.932 1539.82,232.657 1540.39,233.402 1540.96,234.037 1541.53,233.649 1542.1,233.309 1542.66,230.872 1543.23,230.821 1543.8,231.817 1544.37,232.882 1544.94,233.812 1545.51,233.527 1546.08,232.27 1546.64,231.064 1547.21,227.922 1547.78,225.798 1548.35,225.901 1548.92,225.033 1549.49,225.204 1550.05,224.317 1550.62,223.718 1551.19,224.538 1551.76,225.027 1552.33,226.459 1552.9,225.655 1553.46,226.121 1554.03,226.494 1554.6,226.689 1555.17,225.946 1555.74,229.216 1556.31,227.177 1556.87,227.391 1557.44,229.722 1558.01,229.796 1558.58,227.545 1559.15,228.644 1559.72,226.579 1560.28,225.902 1560.85,229.419 1561.42,229.617 1561.99,229.647 1562.56,228.851 1563.13,229.145 1563.69,230.363 1564.26,230.228 1564.83,231.126 1565.4,231.831 1565.97,233.677 1566.54,233.291 1567.1,234.18 1567.67,232.969 1568.24,232.849 1568.81,234.738 1569.38,232.293 1569.95,232.058 1570.51,234.066 1571.08,232.617 1571.65,234.396 1572.22,233.962 1572.79,233.399 1573.36,232.987 1573.92,231.58 1574.49,231.513 1575.06,231.265 1575.63,231.927 1576.2,230.76 1576.77,230.595 1577.33,230.501 1577.9,224.952 1578.47,224.897 1579.04,226.138 1579.61,229.654 1580.18,226.617 1580.74,225.742 1581.31,227.03 1581.88,225.375 1582.45,228.669 1583.02,228.803 1583.59,229.717 1584.15,229.84 1584.72,227.683 1585.29,226.931 1585.86,230.217 1586.43,231.286 1587,232.019 1587.56,230.089 1588.13,231.871 1588.7,232.044 1589.27,232.112 1589.84,228.936 1590.41,229.121 1590.97,228.287 1591.54,229.415 1592.11,228.506 1592.68,226.57 1593.25,227.079 1593.82,227.167 1594.38,227.417 1594.95,227.83 1595.52,227.926 1596.09,226.832 1596.66,226.122 1597.23,227.643 1597.79,227.678 1598.36,231.081 1598.93,229.938 1599.5,230.747 1600.07,229.856 1600.64,229.873 1601.2,230.09 1601.77,230.117 1602.34,230.055 1602.91,230.966 1603.48,231.111 1604.05,231.199 1604.61,228.107 1605.18,230.693 1605.75,230.511 1606.32,230.389 1606.89,229.371 1607.46,231.418 1608.02,230.412 1608.59,229.257 1609.16,230.367 1609.73,231.29 1610.3,231.156 1610.87,233.04 1611.43,232.85 1612,232.606 1612.57,232.336 1613.14,231.984 1613.71,231.837 1614.28,231.819 1614.84,230.46 1615.41,230.418 1615.98,230.386 1616.55,227.233 1617.12,224.499 1617.69,224.997 1618.26,225.285 1618.82,224.588 1619.39,222.952 1619.96,222.432 1620.53,225.23 1621.1,224.559 1621.67,222.79 1622.23,223.459 1622.8,223.668 1623.37,226.158 1623.94,224.566 1624.51,226.026 1625.08,227.303 1625.64,226.42 1626.21,225.523 1626.78,224.882 1627.35,224.414 1627.92,225.815 1628.49,226.098 1629.05,225.348 1629.62,224.75 1630.19,225.325 1630.76,226.741 1631.33,226.181 1631.9,227.601 1632.46,231.099 1633.03,230.136 1633.6,229.384 1634.17,229.661 1634.74,231.872 1635.31,234.087 1635.87,233.087 1636.44,234.301 1637.01,233.275 1637.58,232.326 1638.15,233.518 1638.72,232.405 1639.28,231.118 1639.85,231.22 1640.42,232.39 1640.99,232.435 1641.56,231.176 1642.13,231.11 1642.69,231.07 1643.26,231.892 1643.83,231.999 1644.4,230.784 1644.97,232.864 1645.54,232.887 1646.1,233.624 1646.67,232.442 1647.24,234.28 1647.81,232.992 1648.38,233.902 1648.95,235.657 1649.51,235.3 1650.08,234.722 1650.65,233.309 1651.22,231.217 1651.79,231.379 1652.36,230.293 1652.92,229.378 1653.49,227.288 1654.06,228.3 1654.63,229.56 1655.2,229.71 1655.77,230.685 1656.33,229.656 1656.9,230.556 1657.47,228.354 1658.04,231.694 1658.61,232.419 1659.18,229.988 1659.74,230.026 1660.31,230.873 1660.88,231.742 1661.45,231.47 1662.02,231.308 1662.59,231.241 1663.15,236.381 1663.72,234.938 1664.29,233.591 1664.86,232.159 1665.43,235.068 1666,234.467 1666.56,236.056 1667.13,235.398 1667.7,236.006 1668.27,236.521 1668.84,237.949 1669.41,236.447 1669.97,234.866 1670.54,234.437 1671.11,233.755 1671.68,232.241 1672.25,232.124 1672.82,231.744 1673.38,232.556 1673.95,231.482 1674.52,229.28 1675.09,227.216 1675.66,227.284 1676.23,227.108 1676.79,226.151 1677.36,225.223 1677.93,223.522 1678.5,224.968 1679.07,226.237 1679.64,227.48 1680.2,228.532 1680.77,227.673 1681.34,228.689 1681.91,228.69 1682.48,230.54 1683.05,231.391 1683.61,229.23 1684.18,229.099 1684.75,231.188 1685.32,232.084 1685.89,229.936 1686.46,231.084 1687.02,230.831 1687.59,232.821 1688.16,231.487 1688.73,234.444 1689.3,233.884 1689.87,234.425 1690.44,234.181 1691,232.893 1691.57,234.902 1692.14,234.343 1692.71,234.094 1693.28,233.982 1693.85,230.616 1694.41,232.394 1694.98,234.084 1695.55,233.825 1696.12,232.462 1696.69,232.08 1697.26,229.656 1697.82,230.585 1698.39,231.674 1698.96,227.477 1699.53,227.407 1700.1,228.66 1700.67,226.58 1701.23,229.536 1701.8,229.405 1702.37,230.378 1702.94,231.354 1703.51,231.389 1704.08,233.238 1704.64,231.923 1705.21,230.859 1705.78,229.681 1706.35,230.773 1706.92,230.752 1707.49,230.602 1708.05,230.303 1708.62,228.291 1709.19,227.468 1709.76,228.459 1710.33,225.346 1710.9,225.654 1711.46,223.868 1712.03,224.204 1712.6,225.521 1713.17,227.824 1713.74,227.896 1714.31,229.139 1714.87,229.111 1715.44,231.117 1716.01,230.886 1716.58,229.556 1717.15,229.482 1717.72,228.332 1718.28,228.219 1718.85,227.971 1719.42,230.127 1719.99,228.882 1720.56,228.915 1721.13,227.892 1721.69,226.934 1722.26,231.223 1722.83,230.927 1723.4,230.69 1723.97,230.587 1724.54,229.279 1725.1,229.494 1725.67,228.519 1726.24,228.61 1726.81,227.806 1727.38,226.736 1727.95,227.034 1728.51,227.041 1729.08,226.958 1729.65,226.086 1730.22,225.207 1730.79,227.359 1731.36,227.711 1731.92,228.822 1732.49,225.681 1733.06,226.823 1733.63,227.038 1734.2,228.116 1734.77,230.357 1735.33,229.292 1735.9,229.171 1736.47,227.031 1737.04,228.225 1737.61,227.175 1738.18,227.144 1738.74,226.159 1739.31,226.305 1739.88,225.416 1740.45,223.922 1741.02,227.414 1741.59,228.712 1742.15,227.762 1742.72,228.87 1743.29,229.103 1743.86,229.311 1744.43,228.438 1745,226.475 1745.56,227.756 1746.13,226.832 1746.7,227.22 1747.27,228.326 1747.84,226.519 1748.41,228.83 1748.97,230.032 1749.54,230.976 1750.11,229.732 1750.68,229.458 1751.25,227.427 1751.82,226.484 1752.38,228.836 1752.95,228.986 1753.52,229.034 1754.09,229.228 1754.66,228.242 1755.23,230.463 1755.79,229.286 1756.36,230.322 1756.93,230.39 1757.5,231.437 1758.07,232.359 1758.64,233.099 1759.21,231.914 1759.77,232.836 1760.34,232.731 1760.91,233.557 1761.48,233.348 1762.05,232.062 1762.62,231.938 1763.18,231.762 1763.75,229.286 1764.32,229.137 1764.89,228.869 1765.46,230.023 1766.03,228.947 1766.59,230.07 1767.16,231.135 1767.73,228.995 1768.3,231.064 1768.87,228.86 1769.44,230.967 1770,231.773 1770.57,232.618 1771.14,233.225 1771.71,232.95 1772.28,233.746 1772.85,234.395 1773.41,233.023 1773.98,231.829 1774.55,232.638 1775.12,233.34 1775.69,233.043 1776.26,232.717 1776.82,232.479 1777.39,232.436 1777.96,232.043 1778.53,232.781 1779.1,233.426 1779.67,233.175 1780.23,231.841 1780.8,231.672 1781.37,233.501 1781.94,233.363 1782.51,231.995 1783.08,230.71 1783.64,230.448 1784.21,229.255 1784.78,229.179 1785.35,229.236 1785.92,229.301 1786.49,228.059 1787.05,228.949 1787.62,229.879 1788.19,231.909 1788.76,231.898 1789.33,232.922 1789.9,232.67 1790.46,232.357 1791.03,231.223 1791.6,228.064 1792.17,226.121 1792.74,226.088 1793.31,226.16 1793.87,226.194 1794.44,227.27 1795.01,227.475 1795.58,225.503 1796.15,223.776 1796.72,222.24 1797.28,222.874 1797.85,222.37 1798.42,222.751 1798.99,224.27 1799.56,224.562 1800.13,225.071 1800.69,225.316 1801.26,222.732 1801.83,222.283 1802.4,222.767 1802.97,223.241 1803.54,223.6 1804.1,225.288 1804.67,226.784 1805.24,227.079 1805.81,228.205 1806.38,230.551 1806.95,225.426 1807.51,226.789 1808.08,226.978 1808.65,227.271 1809.22,229.511 1809.79,229.699 1810.36,229.753 1810.92,227.982 1811.49,228.43 1812.06,227.754 1812.63,229.036 1813.2,228.97 1813.77,228.761 1814.33,227.999 1814.9,229.138 1815.47,227.155 1816.04,228.283 1816.61,227.53 1817.18,227.962 1817.74,228.961 1818.31,228.08 1818.88,228.09 1819.45,229.25 1820.02,230.252 1820.59,231.422 1821.15,233.432 1821.72,231.109 1822.29,229.956 1822.86,231.397 1823.43,232.268 1824,230.995 1824.56,234.039 1825.13,234.885 1825.7,233.578 1826.27,234.362 1826.84,232.887 1827.41,230.613 1827.97,230.731 1828.54,229.353 1829.11,230.384 1829.68,230.396 1830.25,228.385 1830.82,227.537 1831.39,227.707 1831.95,228.886 1832.52,228.051 1833.09,227.113 1833.66,228.274 1834.23,227.369 1834.8,228.488 1835.36,227.766 1835.93,226.874 1836.5,228.059 1837.07,227.864 1837.64,228.947 1838.21,229.013 1838.77,229.133 1839.34,228.922 1839.91,227.914 1840.48,227.398 1841.05,226.746 1841.62,227.144 1842.18,228.262 1842.75,228.568 1843.32,228.52 1843.89,228.76 1844.46,228.856 1845.03,231.07 1845.59,233.253 1846.16,233.1 1846.73,233.898 1847.3,231.7 1847.87,232.721 1848.44,232.614 1849,234.365 1849.57,231.811 1850.14,230.571 1850.71,229.626 1851.28,228.808 1851.85,228.824 1852.41,229.062 1852.98,230.219 1853.55,229.07 1854.12,229.975 1854.69,228.136 1855.26,230.465 1855.82,228.593 1856.39,229.616 1856.96,227.373 1857.53,227.425 1858.1,229.645 1858.67,231.65 1859.23,232.452 1859.8,231.31 1860.37,231.354 1860.94,230.314 1861.51,230.28 1862.08,231.311 1862.64,232.231 1863.21,231.975 1863.78,234.753 1864.35,233.363 1864.92,234.145 1865.49,233.809 1866.05,232.558 1866.62,234.44 1867.19,234.116 1867.76,232.657 1868.33,235.665 1868.9,237.238 1869.46,236.642 1870.03,238.184 1870.6,237.726 1871.17,235.951 1871.74,232.418 1872.31,231.093 1872.87,232.059 1873.44,230.564 1874.01,230.326 1874.58,230.142 1875.15,229.796 1875.72,226.817 1876.28,226.937 1876.85,227.274 1877.42,228.161 1877.99,228.123 1878.56,231.159 1879.13,231.101 1879.69,229.853 1880.26,230.806 1880.83,230.762 1881.4,229.61 1881.97,228.767 1882.54,226.934 1883.1,226.194 1883.67,225.532 1884.24,227.836 1884.81,228.893 1885.38,227.963 1885.95,227.055 1886.51,227.443 1887.08,227.59 1887.65,228.967 1888.22,229.116 1888.79,230.204 1889.36,229.014 1889.92,227.964 1890.49,228.093 1891.06,223.977 1891.63,222.236 1892.2,222.858 1892.77,222.385 1893.33,221.777 1893.9,224.587 1894.47,228.105 1895.04,225.243 1895.61,226.439 1896.18,226.628 1896.74,226.974 1897.31,229.218 1897.88,228.329 1898.45,227.359 1899.02,227.585 1899.59,227.69 1900.16,229.915 1900.72,230.79 1901.29,230.773 1901.86,232.694 1902.43,232.536 1903,231.211 1903.57,232.272 1904.13,231.237 1904.7,230.899 1905.27,230.789 1905.84,229.361 1906.41,228.397 1906.98,228.504 1907.54,227.6 1908.11,229.767 1908.68,227.681 1909.25,226.743 1909.82,226.084 1910.39,223.285 1910.95,222.789 1911.52,224.331 1912.09,225.803 1912.66,224.261 1913.23,224.696 1913.8,223.978 1914.36,226.384 1914.93,225.663 1915.5,225.978 1916.07,224.513 1916.64,227.088 1917.21,228.566 1917.77,226.495 1918.34,229.843 1918.91,229.029 1919.48,229.359 1920.05,229.553 1920.62,231.624 1921.18,231.641 1921.75,230.718 1922.32,230.778 1922.89,231.967 1923.46,229.872 1924.03,229.905 1924.59,231.003 1925.16,231.163 1925.73,231.187 1926.3,232.977 1926.87,233.894 1927.44,232.731 1928,233.485 1928.57,234.379 1929.14,236.289 1929.71,234.786 1930.28,234.545 1930.85,233.209 1931.41,231.923 1931.98,232.022 1932.55,231.958 1933.12,230.935 1933.69,228.077 1934.26,230.326 1934.82,229.318 1935.39,230.407 1935.96,229.583 1936.53,229.406 1937.1,232.583 1937.67,233.357 1938.23,233.255 1938.8,233.009 1939.37,232.574 1939.94,230.36 1940.51,230.342 1941.08,232.561 1941.64,233.353 1942.21,233.203 1942.78,233.995 1943.35,235.851 1943.92,235.399 1944.49,233.924 1945.05,233.458 1945.62,234.16 1946.19,232.725 1946.76,234.3 1947.33,230.794 1947.9,229.598 1948.46,229.49 1949.03,229.397 1949.6,229.405 1950.17,231.659 1950.74,230.394 1951.31,232.062 1951.87,231.893 1952.44,232.737 1953.01,232.4 1953.58,232.008 1954.15,232.749 1954.72,231.516 1955.28,232.445 1955.85,232.247 1956.42,232.006 1956.99,232.711 1957.56,232.507 1958.13,230.349 1958.69,230.107 1959.26,228.95 1959.83,229.99 1960.4,229.954 1960.97,230.974 1961.54,232.022 1962.1,231.597 1962.67,231.559 1963.24,231.426 1963.81,230.071 1964.38,230.939 1964.95,231.617 1965.51,230.376 1966.08,231.201 1966.65,231.966 1967.22,233.672 1967.79,232.295 1968.36,231.96 1968.92,231.701 1969.49,230.491 1970.06,230.588 1970.63,229.347 1971.2,229.399 1971.77,229.316 1972.34,230.423 1972.9,229.187 1973.47,231.353 1974.04,231.302 1974.61,230.985 1975.18,230.691 1975.75,231.442 1976.31,232.574 1976.88,231.245 1977.45,228.956 1978.02,227.584 1978.59,225.506 1979.16,226.778 1979.72,225.985 1980.29,226.216 1980.86,226.274 1981.43,225.595 1982,226.889 1982.57,227.238 1983.13,228.279 1983.7,228.192 1984.27,229.244 1984.84,230.289 1985.41,228.883 1985.98,230 1986.54,231.038 1987.11,230.835 1987.68,232.861 1988.25,232.571 1988.82,231.335 1989.39,231.045 1989.95,229.727 1990.52,230.63 1991.09,230.381 1991.66,232.151 1992.23,232.831 1992.8,232.276 1993.36,234.198 1993.93,232.568 1994.5,233.045 1995.07,231.608 1995.64,231.474 1996.21,228.009 1996.77,228.066 1997.34,228.952 1997.91,226.518 1998.48,226.641 1999.05,226.771 1999.62,225.655 2000.18,226.049 2000.75,227.396 2001.32,225.287 2001.89,222.615 2002.46,221.712 2003.03,222.083 2003.59,222.73 2004.16,223.069 2004.73,223.579 2005.3,224.214 2005.87,226.625 2006.44,227.762 2007,229.059 2007.57,230.929 2008.14,228.547 2008.71,228.465 2009.28,227.424 2009.85,226.499 2010.41,226.831 2010.98,228.042 2011.55,230.416 2012.12,231.429 2012.69,231.296 2013.26,232.027 2013.82,229.816 2014.39,229.882 2014.96,229.747 2015.53,231.886 2016.1,230.674 2016.67,230.611 2017.23,230.508 2017.8,230.477 2018.37,231.326 2018.94,231.226 2019.51,231.036 2020.08,229.858 2020.64,228.879 2021.21,226.946 2021.78,228.268 2022.35,229.481 2022.92,229.421 2023.49,229.397 2024.05,228.657 2024.62,228.703 2025.19,230.858 2025.76,228.713 2026.33,229.743 2026.9,230.761 2027.46,228.765 2028.03,227.742 2028.6,227.754 2029.17,228.774 2029.74,228.94 2030.31,228.901 2030.87,231.182 2031.44,230.114 2032.01,230.014 2032.58,230.058 2033.15,231.113 2033.72,228.799 2034.28,224.553 2034.85,225.86 2035.42,227.207 2035.99,228.537 2036.56,224.6 2037.13,226.048 2037.69,226.153 2038.26,226.393 2038.83,226.551 2039.4,228.875 2039.97,227.877 2040.54,229.139 2041.11,231.25 2041.67,233.092 2042.24,233.835 2042.81,232.515 2043.38,233.244 2043.95,234.235 2044.52,231.708 2045.08,231.495 2045.65,232.482 2046.22,233.278 2046.79,231.823 2047.36,231.79 2047.93,232.626 2048.49,233.473 2049.06,232.127 2049.63,228.798 2050.2,227.943 2050.77,231.304 2051.34,231.216 2051.9,231.366 2052.47,233.38 2053.04,231.98 2053.61,232.851 2054.18,232.7 2054.75,229.638 2055.31,228.503 2055.88,230.693 2056.45,229.487 2057.02,230.628 2057.59,231.627 2058.16,229.558 2058.72,229.348 2059.29,228.258 2059.86,228.362 2060.43,227.427 2061,228.632 2061.57,227.598 2062.13,227.893 2062.7,228.899 2063.27,229.941 2063.84,228.843 2064.41,228.951 2064.98,227.766 2065.54,229.102 2066.11,229.221 2066.68,228.225 2067.25,229.357 2067.82,228.527 2068.39,227.683 2068.95,226.736 2069.52,227.906 2070.09,229.122 2070.66,231.223 2071.23,231.201 2071.8,230.987 2072.36,229.943 2072.93,228.962 2073.5,227.975 2074.07,226.203 2074.64,225.372 2075.21,226.728 2075.77,223.993 2076.34,225.563 2076.91,226.84 2077.48,226.32 2078.05,226.484 2078.62,227.697 2079.18,225.695 2079.75,225.107 2080.32,225.497 2080.89,225.735 2081.46,225.193 2082.03,225.509 2082.59,225.793 2083.16,227.255 2083.73,227.387 2084.3,226.739 2084.87,229.091 2085.44,228.059 2086,226.251 2086.57,222.42 2087.14,222.929 2087.71,221.507 2088.28,222.304 2088.85,219.895 2089.41,222.835 2089.98,223.245 2090.55,220.804 2091.12,222.547 2091.69,223.372 2092.26,224.038 2092.82,225.834 2093.39,229.44 2093.96,230.5 2094.53,234.61 2095.1,235.716 2095.67,234.251 2096.23,234.276 2096.8,234.063 2097.37,232.909 2097.94,234.904 2098.51,232.61 2099.08,233.554 2099.64,233.059 2100.21,234.115 2100.78,233.854 2101.35,233.502 2101.92,236.202 2102.49,235.762 2103.05,236.595 2103.62,235.127 2104.19,235.688 2104.76,234.088 2105.33,233.85 2105.9,231.572 2106.46,232.573 2107.03,232.447 2107.6,231.557 2108.17,231.567 2108.74,231.407 2109.31,230.22 2109.87,232.314 2110.44,233.001 2111.01,232.667 2111.58,231.498 2112.15,234.381 2112.72,234.124 2113.29,232.551 2113.85,234.067 2114.42,234.775 2114.99,236.587 2115.56,236.057 2116.13,234.77 2116.7,235.273 2117.26,235.052 2117.83,233.477 2118.4,233.27 2118.97,235.045 2119.54,235.79 2120.11,236.463 2120.67,234.857 2121.24,232.273 2121.81,232.102 2122.38,230.707 2122.95,231.547 2123.52,230.541 2124.08,229.091 2124.65,228.885 2125.22,228.998 2125.79,228.809 2126.36,230.964 2126.93,230.716 2127.49,228.297 2128.06,229.472 2128.63,230.371 2129.2,229.151 2129.77,227.039 2130.34,226.248 2130.9,229.503 2131.47,229.392 2132.04,227.424 2132.61,227.602 2133.18,226.823 2133.75,227.024 2134.31,226.084 2134.88,224.283 2135.45,226.768 2136.02,226.847 2136.59,229.028 2137.16,229.89 2137.72,230.996 2138.29,227.858 2138.86,228.025 2139.43,230.183 2140,230.2 2140.57,234.196 2141.13,233.448 2141.7,233.219 2142.27,232.786 2142.84,230.839 2143.41,228.764 2143.98,227.637 2144.54,226.637 2145.11,224.684 2145.68,224.8 2146.25,223.109 2146.82,223.649 2147.39,226.101 2147.95,226.344 2148.52,224.365 2149.09,224.73 2149.66,222.967 2150.23,221.183 2150.8,221.805 2151.36,224.406 2151.93,224.777 2152.5,224.261 2153.07,222.579 2153.64,222.99 2154.21,223.662 2154.77,219.952 2155.34,220.846 2155.91,221.616 2156.48,223.426 2157.05,224.957 2157.62,225.436 2158.18,226.905 2158.75,228.372 2159.32,228.65 2159.89,228.01 \"/>\n<path clip-path=\"url(#clip100)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip100)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip100)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip100)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip100)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip100)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.025 ± 0.018\n  with uncertainty of ± 0.0011392553202216487\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01287 ± (0.00182276, 0.00188846) (MC)\n  95% confidence interval: [-4.01656, -4.00915]) (MC)\n  linear error propagation: -4.01286 ± 0.0018574\n  |δ_y| = |0.000966412| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.012865283235596, val_l = 0.003696375749616898, val_u = 0.0037195509885439293)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip130\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip130)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip131\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip130)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip132\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1137.31 2211.02,1137.31 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,966.865 2211.02,966.865 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,796.415 2211.02,796.415 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,625.965 2211.02,625.965 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,455.515 2211.02,455.515 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,285.066 2211.02,285.066 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1137.31 365.751,1137.31 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,966.865 365.751,966.865 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,796.415 365.751,796.415 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,625.965 365.751,625.965 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,455.515 365.751,455.515 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,285.066 365.751,285.066 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M298.909 1123.11 Q295.298 1123.11 293.469 1126.68 Q291.664 1130.22 291.664 1137.35 Q291.664 1144.46 293.469 1148.02 Q295.298 1151.56 298.909 1151.56 Q302.543 1151.56 304.349 1148.02 Q306.177 1144.46 306.177 1137.35 Q306.177 1130.22 304.349 1126.68 Q302.543 1123.11 298.909 1123.11 M298.909 1119.41 Q304.719 1119.41 307.775 1124.02 Q310.853 1128.6 310.853 1137.35 Q310.853 1146.08 307.775 1150.68 Q304.719 1155.27 298.909 1155.27 Q293.099 1155.27 290.02 1150.68 Q286.964 1146.08 286.964 1137.35 Q286.964 1128.6 290.02 1124.02 Q293.099 1119.41 298.909 1119.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M259.557 980.21 L267.196 980.21 L267.196 953.844 L258.886 955.511 L258.886 951.252 L267.15 949.585 L271.826 949.585 L271.826 980.21 L279.465 980.21 L279.465 984.145 L259.557 984.145 L259.557 980.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M298.909 952.664 Q295.298 952.664 293.469 956.228 Q291.664 959.77 291.664 966.9 Q291.664 974.006 293.469 977.571 Q295.298 981.112 298.909 981.112 Q302.543 981.112 304.349 977.571 Q306.177 974.006 306.177 966.9 Q306.177 959.77 304.349 956.228 Q302.543 952.664 298.909 952.664 M298.909 948.96 Q304.719 948.96 307.775 953.566 Q310.853 958.15 310.853 966.9 Q310.853 975.626 307.775 980.233 Q304.719 984.816 298.909 984.816 Q293.099 984.816 290.02 980.233 Q286.964 975.626 286.964 966.9 Q286.964 958.15 290.02 953.566 Q293.099 948.96 298.909 948.96 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M262.775 809.76 L279.094 809.76 L279.094 813.695 L257.15 813.695 L257.15 809.76 Q259.812 807.005 264.395 802.376 Q269.002 797.723 270.182 796.38 Q272.428 793.857 273.307 792.121 Q274.21 790.362 274.21 788.672 Q274.21 785.917 272.266 784.181 Q270.344 782.445 267.242 782.445 Q265.043 782.445 262.59 783.209 Q260.159 783.973 257.381 785.524 L257.381 780.802 Q260.205 779.667 262.659 779.089 Q265.113 778.51 267.15 778.51 Q272.52 778.51 275.715 781.195 Q278.909 783.88 278.909 788.371 Q278.909 790.501 278.099 792.422 Q277.312 794.32 275.205 796.913 Q274.627 797.584 271.525 800.802 Q268.423 803.996 262.775 809.76 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M298.909 782.214 Q295.298 782.214 293.469 785.779 Q291.664 789.32 291.664 796.45 Q291.664 803.556 293.469 807.121 Q295.298 810.663 298.909 810.663 Q302.543 810.663 304.349 807.121 Q306.177 803.556 306.177 796.45 Q306.177 789.32 304.349 785.779 Q302.543 782.214 298.909 782.214 M298.909 778.51 Q304.719 778.51 307.775 783.117 Q310.853 787.7 310.853 796.45 Q310.853 805.177 307.775 809.783 Q304.719 814.366 298.909 814.366 Q293.099 814.366 290.02 809.783 Q286.964 805.177 286.964 796.45 Q286.964 787.7 290.02 783.117 Q293.099 778.51 298.909 778.51 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M272.914 624.611 Q276.27 625.329 278.145 627.597 Q280.043 629.866 280.043 633.199 Q280.043 638.315 276.525 641.116 Q273.006 643.917 266.525 643.917 Q264.349 643.917 262.034 643.477 Q259.742 643.06 257.289 642.204 L257.289 637.69 Q259.233 638.824 261.548 639.403 Q263.863 639.981 266.386 639.981 Q270.784 639.981 273.076 638.245 Q275.39 636.509 275.39 633.199 Q275.39 630.143 273.238 628.431 Q271.108 626.694 267.289 626.694 L263.261 626.694 L263.261 622.852 L267.474 622.852 Q270.923 622.852 272.752 621.486 Q274.58 620.097 274.58 617.505 Q274.58 614.843 272.682 613.431 Q270.807 611.995 267.289 611.995 Q265.367 611.995 263.168 612.412 Q260.969 612.829 258.33 613.708 L258.33 609.542 Q260.992 608.801 263.307 608.431 Q265.645 608.06 267.705 608.06 Q273.029 608.06 276.131 610.491 Q279.233 612.898 279.233 617.019 Q279.233 619.889 277.59 621.88 Q275.946 623.847 272.914 624.611 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M298.909 611.764 Q295.298 611.764 293.469 615.329 Q291.664 618.87 291.664 626 Q291.664 633.106 293.469 636.671 Q295.298 640.213 298.909 640.213 Q302.543 640.213 304.349 636.671 Q306.177 633.106 306.177 626 Q306.177 618.87 304.349 615.329 Q302.543 611.764 298.909 611.764 M298.909 608.06 Q304.719 608.06 307.775 612.667 Q310.853 617.25 310.853 626 Q310.853 634.727 307.775 639.333 Q304.719 643.917 298.909 643.917 Q293.099 643.917 290.02 639.333 Q286.964 634.727 286.964 626 Q286.964 617.25 290.02 612.667 Q293.099 608.06 298.909 608.06 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M271.594 442.31 L259.789 460.759 L271.594 460.759 L271.594 442.31 M270.367 438.235 L276.247 438.235 L276.247 460.759 L281.177 460.759 L281.177 464.647 L276.247 464.647 L276.247 472.795 L271.594 472.795 L271.594 464.647 L255.992 464.647 L255.992 460.134 L270.367 438.235 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M298.909 441.314 Q295.298 441.314 293.469 444.879 Q291.664 448.421 291.664 455.55 Q291.664 462.657 293.469 466.221 Q295.298 469.763 298.909 469.763 Q302.543 469.763 304.349 466.221 Q306.177 462.657 306.177 455.55 Q306.177 448.421 304.349 444.879 Q302.543 441.314 298.909 441.314 M298.909 437.61 Q304.719 437.61 307.775 442.217 Q310.853 446.8 310.853 455.55 Q310.853 464.277 307.775 468.883 Q304.719 473.467 298.909 473.467 Q293.099 473.467 290.02 468.883 Q286.964 464.277 286.964 455.55 Q286.964 446.8 290.02 442.217 Q293.099 437.61 298.909 437.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M258.793 267.786 L277.15 267.786 L277.15 271.721 L263.076 271.721 L263.076 280.193 Q264.094 279.846 265.113 279.684 Q266.131 279.499 267.15 279.499 Q272.937 279.499 276.316 282.67 Q279.696 285.841 279.696 291.258 Q279.696 296.836 276.224 299.938 Q272.752 303.017 266.432 303.017 Q264.256 303.017 261.988 302.647 Q259.742 302.276 257.335 301.536 L257.335 296.836 Q259.418 297.971 261.641 298.526 Q263.863 299.082 266.34 299.082 Q270.344 299.082 272.682 296.975 Q275.02 294.869 275.02 291.258 Q275.02 287.647 272.682 285.54 Q270.344 283.434 266.34 283.434 Q264.465 283.434 262.59 283.85 Q260.738 284.267 258.793 285.147 L258.793 267.786 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M298.909 270.864 Q295.298 270.864 293.469 274.429 Q291.664 277.971 291.664 285.1 Q291.664 292.207 293.469 295.772 Q295.298 299.313 298.909 299.313 Q302.543 299.313 304.349 295.772 Q306.177 292.207 306.177 285.1 Q306.177 277.971 304.349 274.429 Q302.543 270.864 298.909 270.864 M298.909 267.161 Q304.719 267.161 307.775 271.767 Q310.853 276.35 310.853 285.1 Q310.853 293.827 307.775 298.434 Q304.719 303.017 298.909 303.017 Q293.099 303.017 290.02 298.434 Q286.964 293.827 286.964 285.1 Q286.964 276.35 290.02 271.767 Q293.099 267.161 298.909 267.161 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip132)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1011.72 400.199,896.341 400.786,790.475 401.372,693.484 401.958,604.778 402.545,523.809 403.131,450.072 403.718,383.095 404.304,322.439 404.891,267.696 405.477,316.678 406.063,268.145 406.65,308.047 407.236,265.6 407.823,227.77 408.409,261.933 408.995,290.924 409.582,316.792 410.168,287.252 410.755,262.082 411.341,285.464 411.927,265.338 412.514,248.03 413.1,232.647 413.687,219.895 414.273,243.476 414.86,234.473 415.446,228.954 416.032,225.566 416.619,249.715 417.205,271.888 417.792,292.636 418.378,290.897 418.964,292.628 419.551,313.23 420.137,316.296 420.724,320.572 421.31,325.821 421.896,347.309 422.483,353.925 423.069,360.67 423.656,380.179 424.242,387.579 424.829,408.234 425.415,416.057 426.001,446.102 426.588,463.513 427.174,472.441 427.761,482.24 428.347,509.252 428.933,518.521 429.52,528.509 430.106,538.344 430.693,556.139 431.279,573.178 431.865,583.1 432.452,600.167 433.038,610.067 433.625,619.703 434.211,640.905 434.798,655.888 435.384,671.142 435.97,701.848 436.557,710.918 437.143,729.162 437.73,746.786 438.316,764.053 438.902,777.212 439.489,790.103 440.075,811.116 440.662,819.247 441.248,838.531 441.835,849.56 442.421,857.016 443.007,867.633 443.594,881.523 444.18,894.958 444.767,904.5 445.353,910.815 445.939,926.6 446.526,938.839 447.112,950.866 447.699,959.367 448.285,965.335 448.871,976.009 449.458,989.194 450.044,997.052 450.631,1009.68 451.217,1017.22 451.804,1024.04 452.39,1031.07 452.976,1035.31 453.563,1041.92 454.149,1053.17 454.736,1057.14 455.322,1065.48 455.908,1070.72 456.495,1074.53 457.081,1084.49 457.668,1092.1 458.254,1101.69 458.84,1106.7 459.427,1111.26 460.013,1113.55 460.6,1122.03 461.186,1126.12 461.773,1131.9 462.359,1133.78 462.945,1137.83 463.532,1149.09 464.118,1152.03 464.705,1155.12 465.291,1156.15 465.877,1159.06 466.464,1164.01 467.05,1168.36 467.637,1172.98 468.223,1173.94 468.809,1181.8 469.396,1180.54 469.982,1181.15 470.569,1181.83 471.155,1185.9 471.742,1186.46 472.328,1189.1 472.914,1191.36 473.501,1195.29 474.087,1195.39 474.674,1193.97 475.26,1195.94 475.846,1201.2 476.433,1201.03 477.019,1204.6 477.606,1204.56 478.192,1206.37 478.778,1210.98 479.365,1212.16 479.951,1213.64 480.538,1218.3 481.124,1217.98 481.711,1217.79 482.297,1219.09 482.883,1220.33 483.47,1220.05 484.056,1219.58 484.643,1219.45 485.229,1219.56 485.815,1222.42 486.402,1229.57 486.988,1230.56 487.575,1230.03 488.161,1232.15 488.748,1231.46 489.334,1232.56 489.92,1224.37 490.507,1225.98 491.093,1228.6 491.68,1229.74 492.266,1232.24 492.852,1231.46 493.439,1231.96 494.025,1232.65 494.612,1229.12 495.198,1230.07 495.784,1232.53 496.371,1235.23 496.957,1236.08 497.544,1235.47 498.13,1235 498.717,1237.43 499.303,1235.2 499.889,1237.7 500.476,1237.06 501.062,1236.41 501.649,1235.68 502.235,1239.68 502.821,1241.93 503.408,1240.87 503.994,1241.27 504.581,1244.75 505.167,1243.85 505.753,1244.44 506.34,1243.34 506.926,1242.48 507.513,1244.56 508.099,1244.79 508.686,1248.16 509.272,1245.3 509.858,1242.86 510.445,1243.33 511.031,1242.41 511.618,1247.16 512.204,1248.87 512.79,1250.53 513.377,1247.65 513.963,1245.29 514.55,1245.63 515.136,1244.31 515.722,1241.72 516.309,1245.26 516.895,1246.91 517.482,1247.42 518.068,1243.52 518.655,1244.35 519.241,1245.17 519.827,1243.95 520.414,1243.04 521,1245.01 521.587,1241.19 522.173,1242.97 522.759,1243.46 523.346,1245.2 523.932,1245.43 524.519,1247.13 525.105,1246.01 525.691,1243.32 526.278,1246.66 526.864,1247.37 527.451,1246.2 528.037,1243.74 528.624,1242.51 529.21,1241.81 529.796,1238.04 530.383,1235.9 530.969,1235.47 531.556,1235.09 532.142,1237.49 532.728,1237.23 533.315,1236.73 533.901,1239.36 534.488,1238.51 535.074,1239.75 535.661,1240.76 536.247,1239.81 536.833,1238.92 537.42,1242.21 538.006,1243.9 538.593,1244.08 539.179,1244.74 539.765,1244.78 540.352,1244.81 540.938,1242.25 541.525,1245.41 542.111,1243.06 542.697,1240.98 543.284,1244.71 543.87,1239.12 544.457,1237 545.043,1237.39 545.63,1238.01 546.216,1240.29 546.802,1242.33 547.389,1242.87 547.975,1242.01 548.562,1242.8 549.148,1240.47 549.734,1239.68 550.321,1238.74 550.907,1236.81 551.494,1236.14 552.08,1235.9 552.666,1232.51 553.253,1234.73 553.839,1235.97 554.426,1235.42 555.012,1234.94 555.599,1232.89 556.185,1232.67 556.771,1230.97 557.358,1230.68 557.944,1230.21 558.531,1230 559.117,1229.99 559.703,1229.73 560.29,1224.91 560.876,1226.09 561.463,1223.17 562.049,1221.48 562.635,1221.56 563.222,1218.72 563.808,1220.47 564.395,1220.5 564.981,1222.09 565.568,1223.49 566.154,1222.07 566.74,1224.92 567.327,1223.44 567.913,1226.07 568.5,1227.46 569.086,1227.45 569.672,1225.8 570.259,1221.61 570.845,1219.12 571.432,1220.5 572.018,1220.81 572.605,1220.5 573.191,1220.2 573.777,1221.52 574.364,1221.66 574.95,1222.88 575.537,1221.63 576.123,1223.17 576.709,1224.39 577.296,1228.42 577.882,1228.21 578.469,1229.36 579.055,1227.79 579.641,1226 580.228,1225.98 580.814,1225.53 581.401,1223.7 581.987,1222.07 582.574,1216.5 583.16,1216.87 583.746,1219.56 584.333,1219.63 584.919,1219.84 585.506,1219.62 586.092,1219.46 586.678,1221.17 587.265,1222.69 587.851,1216.87 588.438,1218.15 589.024,1216.71 589.61,1214.03 590.197,1215.54 590.783,1218.6 591.37,1217.19 591.956,1217.38 592.543,1217.42 593.129,1218.8 593.715,1221.62 594.302,1221.41 594.888,1218.44 595.475,1218.32 596.061,1215.5 596.647,1216.96 597.234,1217.07 597.82,1217.1 598.407,1217.34 598.993,1217.66 599.579,1217.61 600.166,1221.54 600.752,1227.11 601.339,1224.13 601.925,1225.34 602.512,1223.77 603.098,1223.52 603.684,1223.34 604.271,1224.26 604.857,1225.26 605.444,1226.13 606.03,1223.97 606.616,1222.4 607.203,1222.13 607.789,1219.08 608.376,1218.91 608.962,1217.44 609.548,1214.94 610.135,1212.2 610.721,1215.17 611.308,1215.18 611.894,1213.93 612.481,1211.11 613.067,1212.69 613.653,1214.29 614.24,1218.51 614.826,1217.04 615.413,1217.32 615.999,1214.49 616.585,1216.07 617.172,1215.78 617.758,1214.63 618.345,1214.91 618.931,1213.71 619.518,1212.71 620.104,1211.58 620.69,1212.24 621.277,1213.81 621.863,1216.56 622.45,1216.34 623.036,1213.84 623.622,1214.15 624.209,1214.53 624.795,1215.8 625.382,1214.58 625.968,1217.51 626.554,1220.05 627.141,1219.99 627.727,1221.49 628.314,1222.36 628.9,1225.01 629.487,1224.53 630.073,1222.49 630.659,1219.36 631.246,1220.6 631.832,1221.98 632.419,1225.86 633.005,1225.46 633.591,1226.31 634.178,1226.98 634.764,1222.02 635.351,1221.74 635.937,1221.25 636.523,1221.03 637.11,1219.15 637.696,1219.14 638.283,1217.41 638.869,1217.35 639.456,1220.04 640.042,1219.69 640.628,1220.82 641.215,1223.33 641.801,1217.36 642.388,1217.36 642.974,1214.35 643.56,1215.89 644.147,1215.93 644.733,1214.46 645.32,1214.59 645.906,1213.47 646.492,1215.04 647.079,1213.63 647.665,1215.08 648.252,1216.42 648.838,1216.43 649.425,1216.5 650.011,1212.64 650.597,1212.49 651.184,1212.56 651.77,1212.32 652.357,1212.54 652.943,1214.37 653.529,1212.82 654.116,1214.42 654.702,1215.72 655.289,1218.47 655.875,1219.83 656.462,1222.49 657.048,1223.08 657.634,1222.55 658.221,1219.31 658.807,1219.06 659.394,1218.85 659.98,1217.06 660.566,1220.98 661.153,1220.65 661.739,1220.54 662.326,1220.17 662.912,1219.86 663.498,1223.57 664.085,1221.79 664.671,1221.29 665.258,1219.54 665.844,1217.97 666.431,1216.47 667.017,1216.37 667.603,1217.54 668.19,1217.22 668.776,1218.1 669.363,1217.8 669.949,1219 670.535,1215.54 671.122,1216.78 671.708,1220.74 672.295,1220.1 672.881,1219.55 673.467,1217.91 674.054,1218.02 674.64,1222.03 675.227,1220.41 675.813,1219.9 676.4,1218.2 676.986,1220.4 677.572,1217.02 678.159,1216.97 678.745,1220.9 679.332,1220.25 679.918,1221.53 680.504,1222.3 681.091,1223.13 681.677,1221.24 682.264,1219.28 682.85,1219.02 683.436,1220.27 684.023,1219.8 684.609,1220.67 685.196,1221.72 685.782,1222.74 686.369,1223.65 686.955,1224.41 687.541,1222.28 688.128,1220.3 688.714,1215.77 689.301,1215.69 689.887,1215.9 690.473,1215.66 691.06,1215.53 691.646,1215.33 692.233,1216.61 692.819,1220.37 693.405,1225.46 693.992,1226.45 694.578,1225.6 695.165,1224.85 695.751,1223.15 696.338,1221.39 696.924,1219.19 697.51,1215.87 698.097,1214.28 698.683,1215.43 699.27,1217.95 699.856,1214.6 700.442,1211.78 701.029,1210.56 701.615,1210.87 702.202,1210.8 702.788,1212.21 703.375,1212.11 703.961,1211.89 704.547,1212.12 705.134,1214.61 705.72,1213.18 706.307,1211.7 706.893,1213.1 707.479,1219.99 708.066,1216.8 708.652,1217.97 709.239,1216.01 709.825,1215.69 710.411,1214.11 710.998,1215.02 711.584,1216.38 712.171,1216.02 712.757,1218.6 713.344,1221.07 713.93,1219.13 714.516,1217.1 715.103,1216.86 715.689,1216.55 716.276,1216.15 716.862,1215.99 717.448,1215.72 718.035,1216.95 718.621,1215.09 719.208,1216.18 719.794,1214.36 720.38,1212.65 720.967,1213.84 721.553,1213.51 722.14,1213.53 722.726,1213.38 723.313,1213.53 723.899,1211.64 724.485,1208.84 725.072,1207.72 725.658,1206.41 726.245,1206.88 726.831,1207.41 727.417,1206.4 728.004,1203.77 728.59,1205.4 729.177,1206.01 729.763,1206.17 730.349,1206.36 730.936,1203.87 731.522,1204.09 732.109,1203.04 732.695,1201.71 733.282,1204.5 733.868,1207.56 734.454,1206.33 735.041,1207.9 735.627,1207.88 736.214,1209.54 736.8,1210.86 737.386,1210.64 737.973,1214.7 738.559,1217.02 739.146,1215.3 739.732,1216.35 740.318,1214.96 740.905,1213.43 741.491,1212.99 742.078,1212.67 742.664,1215.34 743.251,1213.69 743.837,1211.86 744.423,1213.27 745.01,1211.58 745.596,1211.16 746.183,1214.26 746.769,1213.87 747.355,1213.81 747.942,1213.55 748.528,1216.1 749.115,1215.64 749.701,1218.26 750.288,1217.76 750.874,1217.17 751.46,1215.51 752.047,1212.4 752.633,1215.19 753.22,1212.17 753.806,1210.5 754.392,1211.98 754.979,1211.83 755.565,1214.36 756.152,1214.15 756.738,1214.06 757.324,1214.02 757.911,1212.39 758.497,1213.35 759.084,1215.85 759.67,1214.13 760.257,1216.77 760.843,1216.49 761.429,1218.96 762.016,1218.47 762.602,1217.03 763.189,1217.88 763.775,1217.31 764.361,1217.93 764.948,1216.2 765.534,1211.67 766.121,1208.81 766.707,1211.45 767.293,1211.4 767.88,1210.18 768.466,1213.22 769.053,1215.83 769.639,1214.24 770.226,1212.8 770.812,1214.12 771.398,1213.83 771.985,1216.38 772.571,1211.97 773.158,1212.03 773.744,1212.99 774.33,1214.02 774.917,1214.03 775.503,1215.34 776.09,1217.79 776.676,1222.74 777.262,1219.36 777.849,1217.36 778.435,1216.68 779.022,1217.45 779.608,1214.16 780.195,1215.48 780.781,1218.07 781.367,1216.63 781.954,1218.02 782.54,1217.52 783.127,1214.23 783.713,1216.7 784.299,1217.84 784.886,1218.82 785.472,1218.69 786.059,1221.13 786.645,1219.29 787.232,1220.23 787.818,1220.06 788.404,1221.04 788.991,1218.98 789.577,1215.91 790.164,1214.38 790.75,1211.08 791.336,1209.49 791.923,1209.53 792.509,1209.35 793.096,1211.9 793.682,1213.31 794.268,1214.53 794.855,1212.86 795.441,1214.12 796.028,1213.84 796.614,1214.89 797.201,1215.78 797.787,1215.51 798.373,1212.21 798.96,1212.16 799.546,1211.65 800.133,1215.68 800.719,1210.82 801.305,1207.75 801.892,1205.16 802.478,1206.51 803.065,1206.41 803.651,1206.35 804.237,1207.69 804.824,1210.44 805.41,1207.23 805.997,1204.33 806.583,1204.54 807.17,1201.96 807.756,1204.8 808.342,1206.29 808.929,1207.82 809.515,1206.48 810.102,1209.25 810.688,1209.23 811.274,1210.7 811.861,1212 812.447,1211.81 813.034,1211.36 813.62,1208.31 814.206,1207.95 814.793,1209.32 815.379,1206.7 815.966,1207.94 816.552,1209.14 817.139,1207.78 817.725,1208.98 818.311,1207.34 818.898,1210.23 819.484,1211.51 820.071,1211.15 820.657,1211.15 821.243,1211.23 821.83,1211.42 822.416,1209.89 823.003,1208.68 823.589,1205.9 824.175,1204.7 824.762,1206.26 825.348,1204.89 825.935,1203.85 826.521,1204.07 827.108,1203.14 827.694,1202.31 828.28,1204.28 828.867,1199.06 829.453,1199.47 830.04,1201.28 830.626,1200.42 831.212,1202.37 831.799,1199.59 832.385,1198.67 832.972,1199.25 833.558,1198.3 834.145,1197.9 834.731,1198.52 835.317,1200.48 835.904,1200.89 836.49,1201.45 837.077,1202.01 837.663,1202.17 838.249,1205.15 838.836,1205.57 839.422,1204.19 840.009,1204.65 840.595,1202.22 841.181,1202.38 841.768,1201.6 842.354,1202.39 842.941,1202.44 843.527,1202.81 844.114,1204.61 844.7,1204.53 845.286,1208.93 845.873,1205.92 846.459,1206.22 847.046,1206.39 847.632,1209.18 848.218,1208.19 848.805,1205.46 849.391,1207.28 849.978,1205.75 850.564,1207.37 851.15,1208.9 851.737,1210.36 852.323,1211.65 852.91,1210.25 853.496,1208.37 854.083,1209.61 854.669,1209.56 855.255,1210.79 855.842,1211.91 856.428,1212.63 857.015,1212.4 857.601,1212.36 858.187,1212.16 858.774,1213.61 859.36,1216.22 859.947,1214.33 860.533,1212.6 861.119,1213.91 861.706,1213.54 862.292,1213.2 862.879,1214.17 863.465,1215.32 864.052,1214.57 864.638,1214.06 865.224,1217.8 865.811,1217.27 866.397,1218.42 866.984,1215.22 867.57,1212.12 868.156,1211.99 868.743,1213.13 869.329,1214.19 869.916,1212.36 870.502,1209.63 871.089,1211.12 871.675,1209.26 872.261,1204.97 872.848,1206.32 873.434,1209.01 874.021,1204.58 874.607,1204.68 875.193,1207.37 875.78,1209 876.366,1208.7 876.953,1208.81 877.539,1208.67 878.125,1209.96 878.712,1208.54 879.298,1206.97 879.885,1207.13 880.471,1205.63 881.058,1207.13 881.644,1207.15 882.23,1204.38 882.817,1203.29 883.403,1203.28 883.99,1200.51 884.576,1201.08 885.162,1200.25 885.749,1197.79 886.335,1199.78 886.922,1202.83 887.508,1201.89 888.094,1202.44 888.681,1205.39 889.267,1206.98 889.854,1207.4 890.44,1207.68 891.027,1206.41 891.613,1208.03 892.199,1208.17 892.786,1207.87 893.372,1207.94 893.959,1209.28 894.545,1210.67 895.131,1214.69 895.718,1215.88 896.304,1215.33 896.891,1212.27 897.477,1206.39 898.063,1206.18 898.65,1204.89 899.236,1206.44 899.823,1208.1 900.409,1209.32 900.996,1211.97 901.582,1214.39 902.168,1215.83 902.755,1216.93 903.341,1213.52 903.928,1211.9 904.514,1211.72 905.1,1211.45 905.687,1212.6 906.273,1210.76 906.86,1214.9 907.446,1213.05 908.032,1211.32 908.619,1212.32 909.205,1210.7 909.792,1207.73 910.378,1207.76 910.965,1206.01 911.551,1206.05 912.137,1206.03 912.724,1209.12 913.31,1210.41 913.897,1211.79 914.483,1209.84 915.069,1208.32 915.656,1206.91 916.242,1206.78 916.829,1211.05 917.415,1209.33 918.002,1208.19 918.588,1206.69 919.174,1206.69 919.761,1206.64 920.347,1203.56 920.934,1206.58 921.52,1206.76 922.106,1207.99 922.693,1207.96 923.279,1205.21 923.866,1206.74 924.452,1208.33 925.038,1209.35 925.625,1210.52 926.211,1206.1 926.798,1204.72 927.384,1204.86 927.971,1202.25 928.557,1202.64 929.143,1204.3 929.73,1204.63 930.316,1204.93 930.903,1203.91 931.489,1204.17 932.075,1205.55 932.662,1205.53 933.248,1204.37 933.835,1204.86 934.421,1206.36 935.007,1209.55 935.594,1211.04 936.18,1210.88 936.767,1212.08 937.353,1210.43 937.94,1209.02 938.526,1208.76 939.112,1205.74 939.699,1208.29 940.285,1208.16 940.872,1209.86 941.458,1211.07 942.044,1213.41 942.631,1214.34 943.217,1217.04 943.804,1216.67 944.39,1217.49 944.976,1214.09 945.563,1212.35 946.149,1210.7 946.736,1211.45 947.322,1211.14 947.909,1215 948.495,1215.97 949.081,1216.87 949.668,1215.94 950.254,1216.46 950.841,1215.75 951.427,1215.29 952.013,1214.82 952.6,1212.86 953.186,1213.93 953.773,1213.75 954.359,1216.22 954.945,1215.73 955.532,1212.61 956.118,1215.39 956.705,1213.52 957.291,1211.67 957.878,1210.04 958.464,1208.78 959.05,1208.77 959.637,1209.92 960.223,1209.76 960.81,1208.32 961.396,1209.61 961.982,1209.58 962.569,1210.94 963.155,1208.02 963.742,1206.33 964.328,1203.83 964.915,1203.72 965.501,1203.75 966.087,1202.75 966.674,1204.17 967.26,1204.41 967.847,1202.89 968.433,1207 969.019,1207.12 969.606,1204.35 970.192,1204.47 970.779,1204.51 971.365,1204.86 971.951,1200.33 972.538,1200.82 973.124,1198.25 973.711,1197.33 974.297,1197.49 974.884,1199.4 975.47,1199.98 976.056,1201.59 976.643,1200.45 977.229,1200.73 977.816,1202.38 978.402,1199.91 978.988,1201.78 979.575,1204.89 980.161,1199.55 980.748,1200.13 981.334,1201.69 981.92,1206.51 982.507,1207.76 983.093,1205.03 983.68,1203.75 984.266,1205.39 984.853,1206.62 985.439,1204.85 986.025,1204.92 986.612,1206.37 987.198,1209.02 987.785,1208.99 988.371,1208.64 988.957,1209.95 989.544,1207.07 990.13,1208.55 990.717,1205.57 991.303,1205.72 991.889,1201.68 992.476,1205.99 993.062,1205.93 993.649,1206.41 994.235,1207.71 994.822,1206.61 995.408,1208.06 995.994,1206.55 996.581,1208.92 997.167,1211.51 997.754,1208.26 998.34,1205.5 998.926,1207.08 999.513,1210.84 1000.1,1210.44 1000.69,1210.29 1001.27,1211.29 1001.86,1209.82 1002.44,1212.22 1003.03,1210.37 1003.62,1211.66 1004.2,1211.46 1004.79,1211.48 1005.38,1212.12 1005.96,1210.63 1006.55,1209.02 1007.14,1207.48 1007.72,1205.91 1008.31,1207.56 1008.9,1203.17 1009.48,1204.7 1010.07,1203.34 1010.65,1200.77 1011.24,1202.07 1011.83,1203.59 1012.41,1202.11 1013,1202.3 1013.59,1199.63 1014.17,1201.16 1014.76,1204.06 1015.35,1204.14 1015.93,1204.45 1016.52,1203.18 1017.11,1204.89 1017.69,1205.4 1018.28,1209.77 1018.86,1209.37 1019.45,1209.28 1020.04,1207.52 1020.62,1205.95 1021.21,1207.09 1021.8,1208.48 1022.38,1208.18 1022.97,1203.69 1023.56,1201.13 1024.14,1201.5 1024.73,1204.7 1025.32,1206.14 1025.9,1207.19 1026.49,1204.27 1027.07,1199.93 1027.66,1198.87 1028.25,1197.81 1028.83,1198.03 1029.42,1198.32 1030.01,1198.67 1030.59,1200.4 1031.18,1201.2 1031.77,1201.74 1032.35,1200.77 1032.94,1199.48 1033.52,1201.15 1034.11,1204.39 1034.7,1203.2 1035.28,1203.37 1035.87,1203.51 1036.46,1204.95 1037.04,1207.86 1037.63,1208.96 1038.22,1210.13 1038.8,1208.58 1039.39,1208.56 1039.98,1209.75 1040.56,1211.02 1041.15,1207.93 1041.73,1207.92 1042.32,1212.17 1042.91,1209.28 1043.49,1207.91 1044.08,1206.53 1044.67,1205.35 1045.25,1207.05 1045.84,1202.84 1046.43,1204.4 1047.01,1203.36 1047.6,1203.56 1048.19,1206.44 1048.77,1205.01 1049.36,1203.82 1049.94,1203.83 1050.53,1205.25 1051.12,1202.61 1051.7,1199.98 1052.29,1201.61 1052.88,1204.6 1053.46,1203.51 1054.05,1200.8 1054.64,1199.65 1055.22,1201.71 1055.81,1200.72 1056.39,1202.45 1056.98,1207.06 1057.57,1205.85 1058.15,1207.44 1058.74,1210.11 1059.33,1209.65 1059.91,1212.33 1060.5,1210.72 1061.09,1209.45 1061.67,1206.6 1062.26,1206.51 1062.85,1207.99 1063.43,1206.27 1064.02,1207.68 1064.6,1206.02 1065.19,1207.42 1065.78,1209.77 1066.36,1205.44 1066.95,1203.86 1067.54,1205.69 1068.12,1204.41 1068.71,1204.73 1069.3,1207.77 1069.88,1204.76 1070.47,1206.3 1071.06,1205.37 1071.64,1208.53 1072.23,1210.06 1072.81,1210.53 1073.4,1211.79 1073.99,1212.84 1074.57,1212.75 1075.16,1212.24 1075.75,1213.49 1076.33,1208.77 1076.92,1208.47 1077.51,1208.62 1078.09,1207.38 1078.68,1207.4 1079.26,1207.17 1079.85,1205.83 1080.44,1205.78 1081.02,1204.49 1081.61,1205.77 1082.2,1205.94 1082.78,1207 1083.37,1208.52 1083.96,1208.68 1084.54,1204.3 1085.13,1204.13 1085.72,1208.19 1086.3,1208.16 1086.89,1208.23 1087.47,1204.88 1088.06,1206.28 1088.65,1206.25 1089.23,1207.31 1089.82,1208.79 1090.41,1208.47 1090.99,1209.57 1091.58,1210.8 1092.17,1207.64 1092.75,1211.72 1093.34,1214.17 1093.93,1214.98 1094.51,1212.92 1095.1,1213.92 1095.68,1212.07 1096.27,1211.78 1096.86,1211.27 1097.44,1209.65 1098.03,1207.95 1098.62,1208.99 1099.2,1205.92 1099.79,1207.33 1100.38,1205.87 1100.96,1203.16 1101.55,1203.53 1102.14,1202.04 1102.72,1204.87 1103.31,1207.7 1103.89,1207.68 1104.48,1209.07 1105.07,1206.18 1105.65,1210.7 1106.24,1210.47 1106.83,1211.57 1107.41,1212.5 1108,1210.93 1108.59,1209.22 1109.17,1208.95 1109.76,1207.54 1110.34,1208.85 1110.93,1205.99 1111.52,1205.82 1112.1,1204.33 1112.69,1203.32 1113.28,1202.33 1113.86,1203.9 1114.45,1204.04 1115.04,1204.38 1115.62,1207.12 1116.21,1202.8 1116.8,1204.33 1117.38,1203.31 1117.97,1209.08 1118.55,1208.73 1119.14,1206.68 1119.73,1205.24 1120.31,1204.13 1120.9,1201.26 1121.49,1198.68 1122.07,1200.54 1122.66,1203.7 1123.25,1205.28 1123.83,1206.66 1124.42,1208.22 1125.01,1209.44 1125.59,1206.29 1126.18,1207.8 1126.76,1210.47 1127.35,1209.1 1127.94,1209.25 1128.52,1213.09 1129.11,1212.71 1129.7,1212.38 1130.28,1210.58 1130.87,1208.74 1131.46,1207.2 1132.04,1205.78 1132.63,1207.13 1133.21,1205.82 1133.8,1205.73 1134.39,1204.27 1134.97,1203.06 1135.56,1203.08 1136.15,1201.74 1136.73,1202.03 1137.32,1202.34 1137.91,1199.75 1138.49,1200.25 1139.08,1199.21 1139.67,1198.04 1140.25,1199.94 1140.84,1200.42 1141.42,1201.93 1142.01,1200.93 1142.6,1201.11 1143.18,1203.05 1143.77,1205.91 1144.36,1208.58 1144.94,1205.39 1145.53,1205.27 1146.12,1208.11 1146.7,1208.02 1147.29,1209.41 1147.88,1212.12 1148.46,1210.27 1149.05,1209.8 1149.63,1209.7 1150.22,1206.87 1150.81,1209.6 1151.39,1209.49 1151.98,1207.77 1152.57,1210.45 1153.15,1211.73 1153.74,1211.44 1154.33,1213.82 1154.91,1209.38 1155.5,1210.82 1156.09,1211.96 1156.67,1210.07 1157.26,1207.14 1157.84,1211.34 1158.43,1212.7 1159.02,1212.49 1159.6,1210.55 1160.19,1211.65 1160.78,1210.06 1161.36,1209.58 1161.95,1209.56 1162.54,1209.31 1163.12,1208.93 1163.71,1207.07 1164.29,1205.59 1164.88,1202.79 1165.47,1204.2 1166.05,1205.51 1166.64,1205.32 1167.23,1206.69 1167.81,1205.34 1168.4,1205.5 1168.99,1203.96 1169.57,1204.13 1170.16,1204.21 1170.75,1198.68 1171.33,1199.29 1171.92,1198.24 1172.5,1199.86 1173.09,1198.81 1173.68,1199.03 1174.26,1196.7 1174.85,1197.41 1175.44,1196.6 1176.02,1195.69 1176.61,1194.78 1177.2,1196.77 1177.78,1199.01 1178.37,1200.99 1178.96,1198.44 1179.54,1198.91 1180.13,1199.53 1180.71,1200.05 1181.3,1201.78 1181.89,1202.1 1182.47,1199.43 1183.06,1199.51 1183.65,1202.59 1184.23,1201.43 1184.82,1201.89 1185.41,1203.53 1185.99,1203.69 1186.58,1202.35 1187.16,1202.84 1187.75,1203.35 1188.34,1205.02 1188.92,1202.23 1189.51,1201.12 1190.1,1202.76 1190.68,1204.23 1191.27,1205.5 1191.86,1205.42 1192.44,1207.22 1193.03,1207.02 1193.62,1206.65 1194.2,1207.8 1194.79,1207.76 1195.37,1210.47 1195.96,1207.53 1196.55,1208.91 1197.13,1214.28 1197.72,1212.5 1198.31,1213.66 1198.89,1214.6 1199.48,1212.62 1200.07,1211.85 1200.65,1212.83 1201.24,1214.95 1201.83,1211.61 1202.41,1210.17 1203,1208.77 1203.58,1207.35 1204.17,1204.48 1204.76,1202.77 1205.34,1203.04 1205.93,1202.67 1206.52,1202.81 1207.1,1201.68 1207.69,1202.86 1208.28,1204.42 1208.86,1204.68 1209.45,1204.76 1210.03,1204.69 1210.62,1208.8 1211.21,1209.66 1211.79,1210.85 1212.38,1210.68 1212.97,1210.29 1213.55,1210.04 1214.14,1211.27 1214.73,1211.19 1215.31,1213.85 1215.9,1217.64 1216.49,1215.86 1217.07,1211.43 1217.66,1212.15 1218.24,1210.48 1218.83,1210.34 1219.42,1211.41 1220,1211.05 1220.59,1208.33 1221.18,1208.09 1221.76,1209.41 1222.35,1212.36 1222.94,1215 1223.52,1218.45 1224.11,1217.85 1224.7,1216.04 1225.28,1212.82 1225.87,1209.61 1226.45,1209.56 1227.04,1209.78 1227.63,1210.89 1228.21,1209.44 1228.8,1210.66 1229.39,1207.72 1229.97,1206.43 1230.56,1205.07 1231.15,1205.1 1231.73,1203.73 1232.32,1200.88 1232.91,1202.48 1233.49,1201.02 1234.08,1201.36 1234.66,1200.26 1235.25,1197.63 1235.84,1195.1 1236.42,1194.32 1237.01,1192.44 1237.6,1192.05 1238.18,1191.17 1238.77,1190.46 1239.36,1191.44 1239.94,1192.26 1240.53,1192.92 1241.11,1194.98 1241.7,1195.35 1242.29,1196.04 1242.87,1196.67 1243.46,1198.56 1244.05,1199.11 1244.63,1200.93 1245.22,1199.72 1245.81,1200.11 1246.39,1198.83 1246.98,1201.87 1247.57,1203.6 1248.15,1206.48 1248.74,1206.33 1249.32,1207.65 1249.91,1203.6 1250.5,1203.76 1251.08,1204.09 1251.67,1204.31 1252.26,1205.92 1252.84,1203.09 1253.43,1201.91 1254.02,1200.99 1254.6,1202.7 1255.19,1201.43 1255.78,1200.12 1256.36,1199.16 1256.95,1204.05 1257.53,1205.41 1258.12,1206.72 1258.71,1206.78 1259.29,1206.83 1259.88,1205.4 1260.47,1208.31 1261.05,1206.8 1261.64,1209.28 1262.23,1206.29 1262.81,1207.5 1263.4,1207.15 1263.98,1207.27 1264.57,1208.33 1265.16,1208.02 1265.74,1206.39 1266.33,1206.26 1266.92,1205.2 1267.5,1206.43 1268.09,1207.72 1268.68,1209.15 1269.26,1208.97 1269.85,1210.28 1270.44,1210.46 1271.02,1210.15 1271.61,1209.78 1272.19,1206.89 1272.78,1211.22 1273.37,1210.73 1273.95,1209.16 1274.54,1210.49 1275.13,1210.5 1275.71,1211.53 1276.3,1209.84 1276.89,1209.73 1277.47,1209.39 1278.06,1209.19 1278.65,1209.02 1279.23,1208.73 1279.82,1206.8 1280.4,1205.21 1280.99,1206.36 1281.58,1205.13 1282.16,1206.36 1282.75,1205.02 1283.34,1206.4 1283.92,1206.15 1284.51,1204.64 1285.1,1204.29 1285.68,1204.06 1286.27,1204.15 1286.86,1201.9 1287.44,1202.19 1288.03,1202.4 1288.61,1202.72 1289.2,1202.96 1289.79,1207.21 1290.37,1207.22 1290.96,1210.03 1291.55,1210.19 1292.13,1211.26 1292.72,1208.51 1293.31,1208.2 1293.89,1208.32 1294.48,1210.82 1295.06,1210.57 1295.65,1208.99 1296.24,1208.8 1296.82,1207.24 1297.41,1205.77 1298,1206.85 1298.58,1206.65 1299.17,1209.45 1299.76,1209.15 1300.34,1208.86 1300.93,1205.83 1301.52,1202.96 1302.1,1201.44 1302.69,1201.7 1303.27,1203 1303.86,1203.24 1304.45,1200.7 1305.03,1203.71 1305.62,1202.51 1306.21,1201.18 1306.79,1201.59 1307.38,1204.51 1307.97,1205.86 1308.55,1207.62 1309.14,1206.28 1309.73,1206.1 1310.31,1206.08 1310.9,1205.85 1311.48,1203.06 1312.07,1205.13 1312.66,1202.61 1313.24,1201.3 1313.83,1200.27 1314.42,1202.28 1315,1204.09 1315.59,1203.05 1316.18,1201.79 1316.76,1201.89 1317.35,1203.64 1317.93,1202.73 1318.52,1204.32 1319.11,1204.02 1319.69,1206.78 1320.28,1206.65 1320.87,1209.45 1321.45,1207.95 1322.04,1205.2 1322.63,1202.6 1323.21,1201.39 1323.8,1206.05 1324.39,1205.9 1324.97,1205.78 1325.56,1205.61 1326.14,1206.81 1326.73,1206.89 1327.32,1204 1327.9,1203.84 1328.49,1206.78 1329.08,1206.75 1329.66,1205.29 1330.25,1209.3 1330.84,1208.91 1331.42,1208.97 1332.01,1210.31 1332.6,1210.02 1333.18,1208.82 1333.77,1207.55 1334.35,1207.48 1334.94,1208.9 1335.53,1208.9 1336.11,1204.6 1336.7,1207.65 1337.29,1206.61 1337.87,1208.14 1338.46,1208.18 1339.05,1206.49 1339.63,1203.71 1340.22,1203.95 1340.8,1205.42 1341.39,1207.11 1341.98,1207.02 1342.56,1207.07 1343.15,1204.09 1343.74,1206.93 1344.32,1206.88 1344.91,1208.25 1345.5,1208.14 1346.08,1209.3 1346.67,1209.06 1347.26,1210.21 1347.84,1210.07 1348.43,1209.74 1349.01,1210.82 1349.6,1209.27 1350.19,1212 1350.77,1213.13 1351.36,1209.78 1351.95,1209.63 1352.53,1209.47 1353.12,1210.56 1353.71,1206.04 1354.29,1204.68 1354.88,1203.22 1355.47,1201.92 1356.05,1200.65 1356.64,1198.19 1357.22,1198.55 1357.81,1198.71 1358.4,1198.94 1358.98,1196.73 1359.57,1197.47 1360.16,1197.99 1360.74,1195.58 1361.33,1193.4 1361.92,1196.9 1362.5,1196.42 1363.09,1198.29 1363.68,1197.6 1364.26,1200.69 1364.85,1199.65 1365.43,1202.64 1366.02,1202.73 1366.61,1201.49 1367.19,1201.92 1367.78,1203.37 1368.37,1204.69 1368.95,1206.06 1369.54,1206 1370.13,1207.68 1370.71,1206.03 1371.3,1205.82 1371.88,1208.58 1372.47,1208.61 1373.06,1208.29 1373.64,1205.4 1374.23,1206.84 1374.82,1206.65 1375.4,1208.15 1375.99,1208.2 1376.58,1206.71 1377.16,1207.75 1377.75,1206.34 1378.34,1207.62 1378.92,1207.39 1379.51,1209.2 1380.09,1210.25 1380.68,1210.18 1381.27,1210.05 1381.85,1207.07 1382.44,1208.5 1383.03,1205.62 1383.61,1204.03 1384.2,1202.62 1384.79,1205.33 1385.37,1203.74 1385.96,1208.25 1386.55,1209.58 1387.13,1211.24 1387.72,1208.15 1388.3,1208.35 1388.89,1207.06 1389.48,1208.07 1390.06,1207.88 1390.65,1206.29 1391.24,1203.3 1391.82,1200.51 1392.41,1200.68 1393,1201.25 1393.58,1200.28 1394.17,1197.97 1394.75,1197.3 1395.34,1197.93 1395.93,1198.02 1396.51,1201.09 1397.1,1205.46 1397.69,1207.33 1398.27,1207.56 1398.86,1208.57 1399.45,1208.47 1400.03,1207.91 1400.62,1206.45 1401.21,1206.27 1401.79,1207.58 1402.38,1203.54 1402.96,1205.13 1403.55,1204.96 1404.14,1203.53 1404.72,1206.27 1405.31,1204.92 1405.9,1202.13 1406.48,1203.61 1407.07,1202.05 1407.66,1201.97 1408.24,1204.56 1408.83,1205.85 1409.42,1205.63 1410,1204.26 1410.59,1208.41 1411.17,1209.91 1411.76,1209.79 1412.35,1209.63 1412.93,1206.73 1413.52,1203.97 1414.11,1203.71 1414.69,1199.55 1415.28,1197.09 1415.87,1198.96 1416.45,1202.02 1417.04,1202.2 1417.63,1203.72 1418.21,1199.64 1418.8,1202.73 1419.38,1201.28 1419.97,1200.01 1420.56,1200.25 1421.14,1204.57 1421.73,1206.25 1422.32,1207.79 1422.9,1207.88 1423.49,1210.31 1424.08,1208.89 1424.66,1210.14 1425.25,1212.4 1425.83,1212.01 1426.42,1210.41 1427.01,1207.18 1427.59,1205.51 1428.18,1208.14 1428.77,1209.2 1429.35,1209.09 1429.94,1210.46 1430.53,1209.73 1431.11,1209.45 1431.7,1210.62 1432.29,1207.95 1432.87,1209.07 1433.46,1208.91 1434.04,1208.7 1434.63,1207.31 1435.22,1206.18 1435.8,1204.91 1436.39,1206.45 1436.98,1206.14 1437.56,1203.38 1438.15,1203.43 1438.74,1200.56 1439.32,1202.62 1439.91,1205.66 1440.5,1206.91 1441.08,1205.35 1441.67,1202.6 1442.25,1202.79 1442.84,1205.76 1443.43,1203.16 1444.01,1206.1 1444.6,1207.41 1445.19,1208.41 1445.77,1210.83 1446.36,1205.06 1446.95,1204.99 1447.53,1206.41 1448.12,1206.26 1448.7,1205.15 1449.29,1202.54 1449.88,1205.53 1450.46,1205.74 1451.05,1204.31 1451.64,1205.74 1452.22,1204.47 1452.81,1203.07 1453.4,1204.53 1453.98,1211.34 1454.57,1211.39 1455.16,1208.31 1455.74,1208.06 1456.33,1213.42 1456.91,1214.64 1457.5,1214.17 1458.09,1212.69 1458.67,1211 1459.26,1212.17 1459.85,1210.35 1460.43,1209.78 1461.02,1208.22 1461.61,1206.73 1462.19,1207.96 1462.78,1207.69 1463.37,1208.73 1463.95,1208.73 1464.54,1208.7 1465.12,1209.82 1465.71,1209.64 1466.3,1209.33 1466.88,1209.27 1467.47,1207.62 1468.06,1207.46 1468.64,1207.65 1469.23,1208.76 1469.82,1211.44 1470.4,1209.67 1470.99,1208.12 1471.57,1208.13 1472.16,1212.32 1472.75,1210.44 1473.33,1209.14 1473.92,1211.83 1474.51,1205.96 1475.09,1205.93 1475.68,1207.06 1476.27,1207.01 1476.85,1205.57 1477.44,1202.98 1478.03,1207.32 1478.61,1206.36 1479.2,1207.94 1479.78,1208.1 1480.37,1207.65 1480.96,1206.1 1481.54,1206.22 1482.13,1207.73 1482.72,1207.64 1483.3,1208.83 1483.89,1207.07 1484.48,1204.3 1485.06,1202.89 1485.65,1202.99 1486.24,1203.1 1486.82,1203.47 1487.41,1203.65 1487.99,1202.28 1488.58,1201.2 1489.17,1199.73 1489.75,1200.01 1490.34,1197.88 1490.93,1199.84 1491.51,1201.7 1492.1,1201.74 1492.69,1202.12 1493.27,1202.2 1493.86,1202.39 1494.45,1202.41 1495.03,1200.59 1495.62,1201.05 1496.2,1199.94 1496.79,1200.26 1497.38,1199.11 1497.96,1199.54 1498.55,1198.63 1499.14,1200.4 1499.72,1200.54 1500.31,1201.07 1500.9,1201.39 1501.48,1201.37 1502.07,1203.24 1502.65,1201.82 1503.24,1201.99 1503.83,1200.69 1504.41,1200.84 1505,1203.91 1505.59,1205.14 1506.17,1208.02 1506.76,1209.33 1507.35,1209.33 1507.93,1206.28 1508.52,1207.92 1509.11,1210.73 1509.69,1211.8 1510.28,1212.91 1510.86,1213.92 1511.45,1214.84 1512.04,1212.83 1512.62,1212.8 1513.21,1212.74 1513.8,1212.28 1514.38,1209.32 1514.97,1209.1 1515.56,1207.51 1516.14,1204.57 1516.73,1204.59 1517.32,1203.05 1517.9,1201.7 1518.49,1201.98 1519.07,1200.9 1519.66,1199.94 1520.25,1200.35 1520.83,1200.71 1521.42,1203.91 1522.01,1203.95 1522.59,1202.57 1523.18,1201.07 1523.77,1199.73 1524.35,1200.01 1524.94,1201.61 1525.52,1203.17 1526.11,1207.37 1526.7,1210.28 1527.28,1210.24 1527.87,1211.51 1528.46,1211.4 1529.04,1212.71 1529.63,1213.66 1530.22,1212.71 1530.8,1212.19 1531.39,1210.39 1531.98,1211.56 1532.56,1211.04 1533.15,1210.64 1533.73,1210.46 1534.32,1211.54 1534.91,1207.23 1535.49,1209.99 1536.08,1209.77 1536.67,1206.69 1537.25,1206.59 1537.84,1209.62 1538.43,1208.2 1539.01,1211.01 1539.6,1212 1540.19,1207.37 1540.77,1207.11 1541.36,1207.07 1541.94,1208.14 1542.53,1207.77 1543.12,1206.14 1543.7,1206.31 1544.29,1205.08 1544.88,1204.09 1545.46,1201.54 1546.05,1201.96 1546.64,1200.66 1547.22,1202.18 1547.81,1202.25 1548.4,1199.61 1548.98,1202.79 1549.57,1203.04 1550.15,1200.26 1550.74,1202.11 1551.33,1199.62 1551.91,1200.08 1552.5,1200.73 1553.09,1201.19 1553.67,1203.01 1554.26,1203.05 1554.85,1203.34 1555.43,1202.4 1556.02,1203.92 1556.6,1204.11 1557.19,1204.22 1557.78,1211.67 1558.36,1211.87 1558.95,1210.33 1559.54,1205.69 1560.12,1209.78 1560.71,1211.04 1561.3,1209.41 1561.88,1211.7 1562.47,1207.39 1563.06,1207.23 1563.64,1206.03 1564.23,1205.86 1564.81,1208.76 1565.4,1209.83 1565.99,1205.48 1566.57,1204.02 1567.16,1202.99 1567.75,1205.53 1568.33,1203.11 1568.92,1202.82 1569.51,1202.67 1570.09,1206.89 1570.68,1206.66 1571.27,1207.8 1571.85,1206.32 1572.44,1207.55 1573.02,1210.19 1573.61,1209.59 1574.2,1209.54 1574.78,1209.27 1575.37,1208.78 1575.96,1208.7 1576.54,1210.22 1577.13,1211.25 1577.72,1209.3 1578.3,1209.3 1578.89,1204.77 1579.47,1206.27 1580.06,1205.18 1580.65,1206.35 1581.23,1206.33 1581.82,1206.03 1582.41,1205.98 1582.99,1206.06 1583.58,1204.82 1584.17,1204.59 1584.75,1204.43 1585.34,1208.56 1585.93,1205.12 1586.51,1205.34 1587.1,1205.48 1587.68,1206.84 1588.27,1204.08 1588.86,1205.39 1589.44,1206.93 1590.03,1205.45 1590.62,1204.18 1591.2,1204.32 1591.79,1201.74 1592.38,1201.91 1592.96,1202.16 1593.55,1202.44 1594.14,1202.85 1594.72,1202.99 1595.31,1202.96 1595.89,1204.74 1596.48,1204.77 1597.07,1204.8 1597.65,1209.03 1598.24,1212.77 1598.83,1212.24 1599.41,1211.97 1600,1213.03 1600.59,1215.36 1601.17,1216.23 1601.76,1212.67 1602.34,1213.69 1602.93,1216.2 1603.52,1215.48 1604.1,1215.37 1604.69,1212.18 1605.28,1214.42 1605.86,1212.59 1606.45,1210.97 1607.04,1212.22 1607.62,1213.51 1608.21,1214.49 1608.8,1215.24 1609.38,1213.5 1609.97,1213.22 1610.55,1214.33 1611.14,1215.24 1611.73,1214.6 1612.31,1212.82 1612.9,1213.65 1613.49,1211.83 1614.07,1207.17 1614.66,1208.43 1615.25,1209.44 1615.83,1209.07 1616.42,1206.09 1617.01,1203.03 1617.59,1204.27 1618.18,1202.54 1618.76,1203.8 1619.35,1204.99 1619.94,1203.31 1620.52,1204.72 1621.11,1206.38 1621.7,1206.21 1622.28,1204.59 1622.87,1204.46 1623.46,1206.08 1624.04,1206.14 1624.63,1206.15 1625.22,1205.01 1625.8,1204.8 1626.39,1206.38 1626.97,1203.54 1627.56,1203.43 1628.15,1202.35 1628.73,1203.84 1629.32,1201.28 1629.91,1202.91 1630.49,1201.59 1631.08,1199.1 1631.67,1199.42 1632.25,1200.06 1632.84,1201.84 1633.42,1204.57 1634.01,1204.31 1634.6,1205.74 1635.18,1206.96 1635.77,1209.78 1636.36,1208.48 1636.94,1206.82 1637.53,1206.62 1638.12,1205.31 1638.7,1206.67 1639.29,1205.46 1639.88,1208.4 1640.46,1203.93 1641.05,1202.9 1641.63,1206.11 1642.22,1206.05 1642.81,1204.9 1643.39,1203.7 1643.98,1204.01 1644.57,1204.18 1645.15,1204.23 1645.74,1197.23 1646.33,1199.01 1646.91,1200.7 1647.5,1202.53 1648.09,1198.53 1648.67,1199.2 1649.26,1196.92 1649.84,1197.64 1650.43,1196.67 1651.02,1195.8 1651.6,1193.68 1652.19,1195.5 1652.78,1197.47 1653.36,1197.91 1653.95,1198.71 1654.54,1200.65 1655.12,1200.74 1655.71,1201.19 1656.29,1200.04 1656.88,1201.42 1657.47,1204.35 1658.05,1207.14 1658.64,1207.11 1659.23,1207.41 1659.81,1208.77 1660.4,1210.11 1660.99,1212.51 1661.57,1210.73 1662.16,1209.15 1662.75,1207.57 1663.33,1206.21 1663.92,1207.4 1664.5,1206.09 1665.09,1206.11 1665.68,1203.64 1666.26,1202.47 1666.85,1205.35 1667.44,1205.53 1668.02,1202.73 1668.61,1201.48 1669.2,1204.32 1669.78,1202.77 1670.37,1203.07 1670.96,1200.35 1671.54,1202.07 1672.13,1198.02 1672.71,1198.66 1673.3,1197.81 1673.89,1198.02 1674.47,1199.64 1675.06,1196.84 1675.65,1197.46 1676.23,1197.67 1676.82,1197.71 1677.41,1202.15 1677.99,1199.72 1678.58,1197.36 1679.17,1197.6 1679.75,1199.33 1680.34,1199.78 1680.92,1202.99 1681.51,1201.74 1682.1,1200.24 1682.68,1205.85 1683.27,1206 1683.86,1204.38 1684.44,1207.2 1685.03,1203.31 1685.62,1203.49 1686.2,1202.18 1686.79,1200.85 1687.37,1200.75 1687.96,1198.21 1688.55,1199.9 1689.13,1201.28 1689.72,1202.83 1690.31,1201.36 1690.89,1201.36 1691.48,1201.54 1692.07,1201.92 1692.65,1204.61 1693.24,1205.76 1693.83,1204.48 1694.41,1208.7 1695,1208.41 1695.58,1210.91 1696.17,1210.61 1696.76,1208.99 1697.34,1206 1697.93,1205.96 1698.52,1204.33 1699.1,1204.38 1699.69,1201.69 1700.28,1201.97 1700.86,1203.73 1701.45,1203.83 1702.04,1205.39 1702.62,1205.58 1703.21,1205.95 1703.79,1203.09 1704.38,1204.76 1704.97,1204.74 1705.55,1206.14 1706.14,1207.47 1706.73,1201.77 1707.31,1202.12 1707.9,1202.41 1708.49,1202.53 1709.07,1204.27 1709.66,1203.99 1710.24,1205.31 1710.83,1205.22 1711.42,1206.33 1712,1207.82 1712.59,1207.5 1713.18,1207.56 1713.76,1207.74 1714.35,1208.99 1714.94,1210.26 1715.52,1207.49 1716.11,1207.08 1716.7,1205.63 1717.28,1209.88 1717.87,1208.45 1718.45,1208.24 1719.04,1206.86 1719.63,1203.88 1720.21,1205.3 1720.8,1205.48 1721.39,1208.37 1721.97,1206.84 1722.56,1208.29 1723.15,1208.4 1723.73,1209.79 1724.32,1209.69 1724.91,1210.97 1725.49,1213.09 1726.08,1208.55 1726.66,1206.86 1727.25,1208.17 1727.84,1206.73 1728.42,1206.44 1729.01,1206.17 1729.6,1207.36 1730.18,1210.03 1730.77,1208.4 1731.36,1209.69 1731.94,1209.25 1732.53,1207.82 1733.11,1210.29 1733.7,1207.26 1734.29,1205.67 1734.87,1204.38 1735.46,1206.03 1736.05,1206.4 1736.63,1209.14 1737.22,1210.47 1737.81,1207.39 1738.39,1207.21 1738.98,1207.16 1739.57,1206.92 1740.15,1208.26 1740.74,1205.31 1741.32,1206.87 1741.91,1205.49 1742.5,1205.38 1743.08,1203.95 1743.67,1202.66 1744.26,1201.58 1744.84,1203.1 1745.43,1201.79 1746.02,1201.85 1746.6,1200.65 1747.19,1200.83 1747.78,1202.48 1748.36,1202.58 1748.95,1202.76 1749.53,1206.05 1750.12,1206.26 1750.71,1206.64 1751.29,1205.11 1751.88,1206.55 1752.47,1205.05 1753.05,1203.61 1753.64,1206.46 1754.23,1203.68 1754.81,1206.62 1755.4,1203.8 1755.99,1202.68 1756.57,1201.48 1757.16,1200.58 1757.74,1200.86 1758.33,1199.7 1758.92,1198.71 1759.5,1200.45 1760.09,1201.97 1760.68,1200.82 1761.26,1199.8 1761.85,1200.1 1762.44,1200.45 1763.02,1200.7 1763.61,1200.68 1764.19,1201.14 1764.78,1200.08 1765.37,1199.13 1765.95,1199.37 1766.54,1201.08 1767.13,1201.25 1767.71,1198.73 1768.3,1198.81 1768.89,1200.57 1769.47,1202.24 1770.06,1202.57 1770.65,1204.16 1771.23,1204.27 1771.82,1204.21 1772.4,1204.13 1772.99,1205.82 1773.58,1204.66 1774.16,1203.43 1774.75,1200.68 1775.34,1200.64 1775.92,1199.2 1776.51,1199.45 1777.1,1199.8 1777.68,1201.26 1778.27,1205.48 1778.86,1208.14 1779.44,1208.28 1780.03,1208.28 1780.61,1208.33 1781.2,1206.97 1781.79,1206.76 1782.37,1209.47 1782.96,1211.9 1783.55,1214.11 1784.13,1213.46 1784.72,1214.32 1785.31,1214 1785.89,1212.15 1786.48,1211.9 1787.06,1211.35 1787.65,1211.15 1788.24,1214.73 1788.82,1215.51 1789.41,1215.06 1790,1214.61 1790.58,1214.3 1791.17,1212.19 1791.76,1210.3 1792.34,1209.98 1792.93,1208.53 1793.52,1205.41 1794.1,1212.29 1794.69,1210.57 1795.27,1210.39 1795.86,1210.07 1796.45,1207.12 1797.03,1206.87 1797.62,1206.8 1798.21,1209.18 1798.79,1208.62 1799.38,1209.57 1799.97,1207.89 1800.55,1208 1801.14,1208.3 1801.73,1209.35 1802.31,1207.86 1802.9,1210.55 1803.48,1209.1 1804.07,1210.15 1804.66,1209.63 1805.24,1208.33 1805.83,1209.53 1806.42,1209.56 1807,1208.04 1807.59,1206.7 1808.18,1205.11 1808.76,1202.34 1809.35,1205.39 1809.94,1206.91 1810.52,1204.95 1811.11,1203.73 1811.69,1205.39 1812.28,1201.23 1812.87,1199.97 1813.45,1201.61 1814.04,1200.44 1814.63,1202.32 1815.21,1205.3 1815.8,1205.12 1816.39,1206.95 1816.97,1205.57 1817.56,1205.54 1818.14,1208.23 1818.73,1209.41 1819.32,1209.24 1819.9,1207.7 1820.49,1208.85 1821.08,1210.16 1821.66,1208.66 1822.25,1209.92 1822.84,1208.47 1823.42,1209.48 1824.01,1210.73 1824.6,1209.21 1825.18,1209.52 1825.77,1208.1 1826.35,1208.04 1826.94,1207.89 1827.53,1208.19 1828.11,1209.57 1828.7,1210.31 1829.29,1211.25 1829.87,1210.79 1830.46,1209.36 1831.05,1208.98 1831.63,1209.08 1832.22,1208.79 1832.81,1208.68 1833.39,1205.72 1833.98,1202.73 1834.56,1202.84 1835.15,1201.67 1835.74,1204.53 1836.32,1203.1 1836.91,1203.17 1837.5,1200.72 1838.08,1204.05 1838.67,1205.67 1839.26,1206.92 1839.84,1208.03 1840.43,1208.03 1841.01,1207.73 1841.6,1206.19 1842.19,1207.73 1842.77,1206.52 1843.36,1209 1843.95,1205.9 1844.53,1208.4 1845.12,1207.05 1845.71,1210.08 1846.29,1210.07 1846.88,1207.14 1847.47,1204.43 1848.05,1203.3 1848.64,1204.77 1849.22,1204.67 1849.81,1206.03 1850.4,1206.06 1850.98,1204.65 1851.57,1203.36 1852.16,1203.64 1852.74,1199.82 1853.33,1201.57 1853.92,1200.42 1854.5,1200.75 1855.09,1202.34 1855.68,1199.71 1856.26,1200.03 1856.85,1201.89 1857.43,1197.73 1858.02,1195.44 1858.61,1196.05 1859.19,1193.77 1859.78,1194.17 1860.37,1196.36 1860.95,1200.99 1861.54,1202.71 1862.13,1201.36 1862.71,1203.32 1863.3,1203.62 1863.88,1203.85 1864.47,1204.31 1865.06,1208.32 1865.64,1208.23 1866.23,1207.85 1866.82,1206.72 1867.4,1206.81 1867.99,1202.76 1868.58,1202.8 1869.16,1204.45 1869.75,1203.16 1870.34,1203.19 1870.92,1204.72 1871.51,1205.85 1872.09,1208.35 1872.68,1209.42 1873.27,1210.4 1873.85,1207.41 1874.44,1206.04 1875.03,1207.31 1875.61,1208.58 1876.2,1208.13 1876.79,1207.99 1877.37,1206.19 1877.96,1206.01 1878.55,1204.56 1879.13,1206.15 1879.72,1207.58 1880.3,1207.45 1880.89,1213.03 1881.48,1215.51 1882.06,1214.88 1882.65,1215.69 1883.24,1216.7 1883.82,1213.14 1884.41,1208.55 1885,1212.44 1885.58,1210.95 1886.17,1210.78 1886.76,1210.4 1887.34,1207.45 1887.93,1208.66 1888.51,1210 1889.1,1209.76 1889.69,1209.67 1890.27,1206.73 1890.86,1205.54 1891.45,1205.54 1892.03,1202.91 1892.62,1203.05 1893.21,1204.76 1893.79,1203.29 1894.38,1204.62 1894.96,1205.04 1895.55,1205.15 1896.14,1207.05 1896.72,1208.36 1897.31,1208.25 1897.9,1209.5 1898.48,1206.64 1899.07,1209.45 1899.66,1210.76 1900.24,1211.73 1900.83,1215.58 1901.42,1216.41 1902,1214.53 1902.59,1212.69 1903.17,1214.87 1903.76,1214.43 1904.35,1215.52 1904.93,1212.44 1905.52,1213.5 1906.11,1213.18 1906.69,1215.25 1907.28,1211.93 1907.87,1210 1908.45,1212.82 1909.04,1208.4 1909.63,1209.49 1910.21,1209.07 1910.8,1208.81 1911.38,1206.02 1911.97,1205.95 1912.56,1207.14 1913.14,1207.04 1913.73,1205.4 1914.32,1208.17 1914.9,1208.12 1915.49,1206.63 1916.08,1206.38 1916.66,1206.31 1917.25,1203.85 1917.83,1202.53 1918.42,1203.99 1919.01,1202.89 1919.59,1201.58 1920.18,1198.86 1920.77,1200.73 1921.35,1200.92 1921.94,1202.6 1922.53,1204.25 1923.11,1204.06 1923.7,1204.08 1924.29,1205.4 1924.87,1209.23 1925.46,1206.24 1926.04,1207.58 1926.63,1206.12 1927.22,1207.21 1927.8,1207.46 1928.39,1203.17 1928.98,1202.05 1929.56,1202.09 1930.15,1202.33 1930.74,1202.83 1931.32,1205.75 1931.91,1205.75 1932.5,1202.74 1933.08,1201.59 1933.67,1201.7 1934.25,1200.53 1934.84,1197.9 1935.43,1198.35 1936.01,1200.2 1936.6,1200.72 1937.19,1199.67 1937.77,1201.5 1938.36,1199.28 1938.95,1203.91 1939.53,1205.49 1940.12,1205.64 1940.71,1205.77 1941.29,1205.77 1941.88,1202.73 1942.46,1204.39 1943.05,1202.12 1943.64,1202.28 1944.22,1201.09 1944.81,1201.46 1945.4,1201.92 1945.98,1200.86 1946.57,1202.44 1947.16,1201.14 1947.74,1201.33 1948.33,1201.59 1948.91,1200.58 1949.5,1200.78 1950.09,1203.62 1950.67,1203.93 1951.26,1205.48 1951.85,1204.09 1952.43,1204.14 1953.02,1202.75 1953.61,1201.3 1954.19,1201.82 1954.78,1201.82 1955.37,1201.95 1955.95,1203.73 1956.54,1202.55 1957.12,1201.6 1957.71,1203.23 1958.3,1202.1 1958.88,1201.02 1959.47,1198.66 1960.06,1200.41 1960.64,1200.8 1961.23,1201.09 1961.82,1202.67 1962.4,1202.52 1962.99,1204.17 1963.58,1204.11 1964.16,1204.23 1964.75,1202.75 1965.33,1204.4 1965.92,1201.49 1966.51,1201.51 1967.09,1201.9 1967.68,1202.26 1968.27,1201.22 1968.85,1199.64 1969.44,1201.36 1970.03,1204.41 1970.61,1206.28 1971.2,1209.13 1971.78,1207.53 1972.37,1208.68 1972.96,1208.46 1973.54,1208.48 1974.13,1209.48 1974.72,1207.85 1975.3,1207.45 1975.89,1206.12 1976.48,1206.27 1977.06,1204.9 1977.65,1203.5 1978.24,1205.38 1978.82,1203.9 1979.41,1202.49 1979.99,1202.73 1980.58,1199.96 1981.17,1200.27 1981.75,1201.86 1982.34,1202.21 1982.93,1203.95 1983.51,1202.73 1984.1,1203.05 1984.69,1200.64 1985.27,1199.65 1985.86,1200.32 1986.45,1197.65 1987.03,1199.74 1987.62,1199.02 1988.2,1200.87 1988.79,1201 1989.38,1205.63 1989.96,1205.6 1990.55,1204.45 1991.14,1207.75 1991.72,1207.66 1992.31,1207.57 1992.9,1209.15 1993.48,1208.73 1994.07,1207.01 1994.65,1209.91 1995.24,1213.61 1995.83,1215 1996.41,1214.72 1997,1214.05 1997.59,1213.78 1998.17,1213.27 1998.76,1212.58 1999.35,1209.49 1999.93,1208.04 2000.52,1206.35 2001.11,1203.84 2001.69,1207.02 2002.28,1207.16 2002.86,1208.6 2003.45,1209.9 2004.04,1209.54 2004.62,1207.99 2005.21,1204.83 2005.8,1203.44 2006.38,1203.58 2006.97,1202.55 2007.56,1205.47 2008.14,1205.38 2008.73,1205.56 2009.32,1202.67 2009.9,1204.25 2010.49,1204.31 2011.07,1204.42 2011.66,1204.44 2012.25,1203.28 2012.83,1203.37 2013.42,1203.58 2014.01,1205.14 2014.59,1206.46 2015.18,1209.08 2015.77,1207.37 2016.35,1205.78 2016.94,1205.87 2017.53,1205.91 2018.11,1206.91 2018.7,1206.88 2019.28,1204 2019.87,1206.86 2020.46,1205.5 2021.04,1204.12 2021.63,1206.79 2022.22,1208.19 2022.8,1208.23 2023.39,1206.9 2023.98,1206.7 2024.56,1206.78 2025.15,1203.72 2025.73,1205.12 2026.32,1205.25 2026.91,1205.18 2027.49,1203.75 2028.08,1206.83 2028.67,1212.57 2029.25,1210.95 2029.84,1209.24 2030.43,1207.51 2031.01,1212.84 2031.6,1211.03 2032.19,1210.98 2032.77,1210.75 2033.36,1210.63 2033.94,1207.58 2034.53,1208.95 2035.12,1207.3 2035.7,1204.47 2036.29,1201.93 2036.88,1200.84 2037.46,1202.52 2038.05,1201.45 2038.64,1200.02 2039.22,1203.32 2039.81,1203.55 2040.4,1202.17 2040.98,1201.02 2041.57,1202.9 2042.15,1202.88 2042.74,1201.7 2043.33,1200.48 2043.91,1202.2 2044.5,1206.63 2045.09,1207.8 2045.67,1203.32 2046.26,1203.39 2046.85,1203.15 2047.43,1200.38 2048.02,1202.18 2048.6,1200.94 2049.19,1201.06 2049.78,1205.12 2050.36,1206.65 2050.95,1203.73 2051.54,1205.33 2052.12,1203.8 2052.71,1202.42 2053.3,1205.17 2053.88,1205.45 2054.47,1206.93 2055.06,1206.83 2055.64,1208.12 2056.23,1206.56 2056.81,1207.98 2057.4,1207.64 2057.99,1206.33 2058.57,1204.95 2059.16,1206.42 2059.75,1206.3 2060.33,1207.92 2060.92,1206.17 2061.51,1206.03 2062.09,1207.38 2062.68,1205.89 2063.27,1207.02 2063.85,1208.19 2064.44,1209.52 2065.02,1208.02 2065.61,1206.43 2066.2,1203.61 2066.78,1203.6 2067.37,1203.85 2067.96,1205.23 2068.54,1206.54 2069.13,1207.89 2069.72,1210.32 2070.3,1211.53 2070.89,1209.82 2071.48,1213.58 2072.06,1211.62 2072.65,1210.01 2073.23,1210.79 2073.82,1210.66 2074.41,1209.11 2074.99,1211.86 2075.58,1212.75 2076.17,1212.35 2076.75,1212.14 2077.34,1212.97 2077.93,1212.67 2078.51,1212.4 2079.1,1210.53 2079.68,1210.42 2080.27,1211.36 2080.86,1208.27 2081.44,1209.67 2082.03,1212.15 2082.62,1217.38 2083.2,1216.89 2083.79,1218.97 2084.38,1218.12 2084.96,1221.54 2085.55,1217.87 2086.14,1217.5 2086.72,1220.94 2087.31,1218.84 2087.89,1217.92 2088.48,1217.2 2089.07,1214.93 2089.65,1210.18 2090.24,1208.76 2090.83,1203.18 2091.41,1201.55 2092,1203.38 2092.59,1203.22 2093.17,1203.39 2093.76,1204.84 2094.35,1202.05 2094.93,1205.02 2095.52,1203.66 2096.1,1204.23 2096.69,1202.71 2097.28,1202.95 2097.86,1203.32 2098.45,1199.56 2099.04,1199.98 2099.62,1198.69 2100.21,1200.5 2100.8,1199.59 2101.38,1201.6 2101.97,1201.81 2102.55,1204.78 2103.14,1203.38 2103.73,1203.47 2104.31,1204.61 2104.9,1204.54 2105.49,1204.71 2106.07,1206.27 2106.66,1203.43 2107.25,1202.43 2107.83,1202.79 2108.42,1204.29 2109.01,1200.35 2109.59,1200.57 2110.18,1202.58 2110.76,1200.46 2111.35,1199.38 2111.94,1196.79 2112.52,1197.32 2113.11,1198.9 2113.7,1198.09 2114.28,1198.24 2114.87,1200.23 2115.46,1200.41 2116.04,1197.91 2116.63,1196.76 2117.22,1195.68 2117.8,1197.69 2118.39,1201.05 2118.97,1201.21 2119.56,1203.03 2120.15,1201.87 2120.73,1203.18 2121.32,1205.11 2121.91,1205.41 2122.49,1205.28 2123.08,1205.55 2123.67,1202.67 2124.25,1202.97 2124.84,1206.21 2125.42,1204.66 2126.01,1203.45 2126.6,1205.08 2127.18,1207.94 2127.77,1209.07 2128.36,1204.78 2128.94,1204.94 2129.53,1207.6 2130.12,1207.42 2130.7,1208.52 2131.29,1208.33 2131.88,1209.66 2132.46,1212.18 2133.05,1208.98 2133.63,1208.95 2134.22,1206.09 2134.81,1204.95 2135.39,1203.45 2135.98,1207.65 2136.57,1207.47 2137.15,1204.61 2137.74,1204.57 2138.33,1199.16 2138.91,1200.05 2139.5,1200.26 2140.09,1200.75 2140.67,1203.3 2141.26,1206.07 2141.84,1207.62 2142.43,1209.02 2143.02,1211.72 2143.6,1211.7 2144.19,1214.1 2144.78,1213.55 2145.36,1210.41 2145.95,1210.18 2146.54,1212.93 2147.12,1212.58 2147.71,1215.08 2148.3,1217.64 2148.88,1217.04 2149.47,1213.76 2150.05,1213.4 2150.64,1214.22 2151.23,1216.62 2151.81,1216.26 2152.4,1215.53 2152.99,1220.66 2153.57,1219.72 2154.16,1218.93 2154.75,1216.71 2155.33,1214.83 2155.92,1214.31 2156.5,1212.45 2157.09,1210.55 2157.68,1210.21 2158.26,1211.1 \"/>\n<path clip-path=\"url(#clip132)\" d=\"M986.025 1206.23 L986.612 1206.23 L987.198 1206.23 L987.785 1206.23 L988.371 1206.23 L988.957 1206.23 L989.544 1206.23 L990.13 1206.23 L990.717 1206.23 L991.303 1206.23 L991.889 1206.23 L992.476 1206.23 L993.062 1206.23 L993.649 1206.23 L994.235 1206.23 L994.822 1206.23 L995.408 1206.23 L995.994 1206.23 L996.581 1206.23 L997.167 1206.23 L997.754 1206.23 L998.34 1206.23 L998.926 1206.23 L999.513 1206.23 L1000.1 1206.23 L1000.69 1206.23 L1001.27 1206.23 L1001.86 1206.23 L1002.44 1206.23 L1003.03 1206.23 L1003.62 1206.23 L1004.2 1206.23 L1004.79 1206.23 L1005.38 1206.23 L1005.96 1206.23 L1006.55 1206.23 L1007.14 1206.23 L1007.72 1206.23 L1008.31 1206.23 L1008.9 1206.23 L1009.48 1206.23 L1010.07 1206.23 L1010.65 1206.23 L1011.24 1206.23 L1011.83 1206.23 L1012.41 1206.23 L1013 1206.23 L1013.59 1206.23 L1014.17 1206.23 L1014.76 1206.23 L1015.35 1206.23 L1015.93 1206.23 L1016.52 1206.23 L1017.11 1206.23 L1017.69 1206.23 L1018.28 1206.23 L1018.86 1206.23 L1019.45 1206.23 L1020.04 1206.23 L1020.62 1206.23 L1021.21 1206.23 L1021.8 1206.23 L1022.38 1206.23 L1022.97 1206.23 L1023.56 1206.23 L1024.14 1206.23 L1024.73 1206.23 L1025.32 1206.23 L1025.9 1206.23 L1026.49 1206.23 L1027.07 1206.23 L1027.66 1206.23 L1028.25 1206.23 L1028.83 1206.23 L1029.42 1206.23 L1030.01 1206.23 L1030.59 1206.23 L1031.18 1206.23 L1031.77 1206.23 L1032.35 1206.23 L1032.94 1206.23 L1033.52 1206.23 L1034.11 1206.23 L1034.7 1206.23 L1035.28 1206.23 L1035.87 1206.23 L1036.46 1206.23 L1037.04 1206.23 L1037.63 1206.23 L1038.22 1206.23 L1038.8 1206.23 L1039.39 1206.23 L1039.98 1206.23 L1040.56 1206.23 L1041.15 1206.23 L1041.73 1206.23 L1042.32 1206.23 L1042.91 1206.23 L1043.49 1206.23 L1044.08 1206.23 L1044.67 1206.23 L1045.25 1206.23 L1045.84 1206.23 L1046.43 1206.23 L1047.01 1206.23 L1047.6 1206.23 L1048.19 1206.23 L1048.77 1206.23 L1049.36 1206.23 L1049.94 1206.23 L1050.53 1206.23 L1051.12 1206.23 L1051.7 1206.23 L1052.29 1206.23 L1052.88 1206.23 L1053.46 1206.23 L1054.05 1206.23 L1054.64 1206.23 L1055.22 1206.23 L1055.81 1206.23 L1056.39 1206.23 L1056.98 1206.23 L1057.57 1206.23 L1058.15 1206.23 L1058.74 1206.23 L1059.33 1206.23 L1059.91 1206.23 L1060.5 1206.23 L1061.09 1206.23 L1061.67 1206.23 L1062.26 1206.23 L1062.85 1206.23 L1063.43 1206.23 L1064.02 1206.23 L1064.6 1206.23 L1065.19 1206.23 L1065.78 1206.23 L1066.36 1206.23 L1066.95 1206.23 L1067.54 1206.23 L1068.12 1206.23 L1068.71 1206.23 L1069.3 1206.23 L1069.88 1206.23 L1070.47 1206.23 L1071.06 1206.23 L1071.64 1206.23 L1072.23 1206.23 L1072.81 1206.23 L1073.4 1206.23 L1073.99 1206.23 L1074.57 1206.23 L1075.16 1206.23 L1075.75 1206.23 L1076.33 1206.23 L1076.92 1206.23 L1077.51 1206.23 L1078.09 1206.23 L1078.68 1206.23 L1079.26 1206.23 L1079.85 1206.23 L1080.44 1206.23 L1081.02 1206.23 L1081.61 1206.23 L1082.2 1206.23 L1082.78 1206.23 L1083.37 1206.23 L1083.96 1206.23 L1084.54 1206.23 L1085.13 1206.23 L1085.72 1206.23 L1086.3 1206.23 L1086.89 1206.23 L1087.47 1206.23 L1088.06 1206.23 L1088.65 1206.23 L1089.23 1206.23 L1089.82 1206.23 L1090.41 1206.23 L1090.99 1206.23 L1091.58 1206.23 L1092.17 1206.23 L1092.75 1206.23 L1093.34 1206.23 L1093.93 1206.23 L1094.51 1206.23 L1095.1 1206.23 L1095.68 1206.23 L1096.27 1206.23 L1096.86 1206.23 L1097.44 1206.23 L1098.03 1206.23 L1098.62 1206.23 L1099.2 1206.23 L1099.79 1206.23 L1100.38 1206.23 L1100.96 1206.23 L1101.55 1206.23 L1102.14 1206.23 L1102.72 1206.23 L1103.31 1206.23 L1103.89 1206.23 L1104.48 1206.23 L1105.07 1206.23 L1105.65 1206.23 L1106.24 1206.23 L1106.83 1206.23 L1107.41 1206.23 L1108 1206.23 L1108.59 1206.23 L1109.17 1206.23 L1109.76 1206.23 L1110.34 1206.23 L1110.93 1206.23 L1111.52 1206.23 L1112.1 1206.23 L1112.69 1206.23 L1113.28 1206.23 L1113.86 1206.23 L1114.45 1206.23 L1115.04 1206.23 L1115.62 1206.23 L1116.21 1206.23 L1116.8 1206.23 L1117.38 1206.23 L1117.97 1206.23 L1118.55 1206.23 L1119.14 1206.23 L1119.73 1206.23 L1120.31 1206.23 L1120.9 1206.23 L1121.49 1206.23 L1122.07 1206.23 L1122.66 1206.23 L1123.25 1206.23 L1123.83 1206.23 L1124.42 1206.23 L1125.01 1206.23 L1125.59 1206.23 L1126.18 1206.23 L1126.76 1206.23 L1127.35 1206.23 L1127.94 1206.23 L1128.52 1206.23 L1129.11 1206.23 L1129.7 1206.23 L1130.28 1206.23 L1130.87 1206.23 L1131.46 1206.23 L1132.04 1206.23 L1132.63 1206.23 L1133.21 1206.23 L1133.8 1206.23 L1134.39 1206.23 L1134.97 1206.23 L1135.56 1206.23 L1136.15 1206.23 L1136.73 1206.23 L1137.32 1206.23 L1137.91 1206.23 L1138.49 1206.23 L1139.08 1206.23 L1139.67 1206.23 L1140.25 1206.23 L1140.84 1206.23 L1141.42 1206.23 L1142.01 1206.23 L1142.6 1206.23 L1143.18 1206.23 L1143.77 1206.23 L1144.36 1206.23 L1144.94 1206.23 L1145.53 1206.23 L1146.12 1206.23 L1146.7 1206.23 L1147.29 1206.23 L1147.88 1206.23 L1148.46 1206.23 L1149.05 1206.23 L1149.63 1206.23 L1150.22 1206.23 L1150.81 1206.23 L1151.39 1206.23 L1151.98 1206.23 L1152.57 1206.23 L1153.15 1206.23 L1153.74 1206.23 L1154.33 1206.23 L1154.91 1206.23 L1155.5 1206.23 L1156.09 1206.23 L1156.67 1206.23 L1157.26 1206.23 L1157.84 1206.23 L1158.43 1206.23 L1159.02 1206.23 L1159.6 1206.23 L1160.19 1206.23 L1160.78 1206.23 L1161.36 1206.23 L1161.95 1206.23 L1162.54 1206.23 L1163.12 1206.23 L1163.71 1206.23 L1164.29 1206.23 L1164.88 1206.23 L1165.47 1206.23 L1166.05 1206.23 L1166.64 1206.23 L1167.23 1206.23 L1167.81 1206.23 L1168.4 1206.23 L1168.99 1206.23 L1169.57 1206.23 L1170.16 1206.23 L1170.75 1206.23 L1171.33 1206.23 L1171.92 1206.23 L1172.5 1206.23 L1173.09 1206.23 L1173.68 1206.23 L1174.26 1206.23 L1174.85 1206.23 L1175.44 1206.23 L1176.02 1206.23 L1176.61 1206.23 L1177.2 1206.23 L1177.78 1206.23 L1178.37 1206.23 L1178.96 1206.23 L1179.54 1206.23 L1180.13 1206.23 L1180.71 1206.23 L1181.3 1206.23 L1181.89 1206.23 L1182.47 1206.23 L1183.06 1206.23 L1183.65 1206.23 L1184.23 1206.23 L1184.82 1206.23 L1185.41 1206.23 L1185.99 1206.23 L1186.58 1206.23 L1187.16 1206.23 L1187.75 1206.23 L1188.34 1206.23 L1188.92 1206.23 L1189.51 1206.23 L1190.1 1206.23 L1190.68 1206.23 L1191.27 1206.23 L1191.86 1206.23 L1192.44 1206.23 L1193.03 1206.23 L1193.62 1206.23 L1194.2 1206.23 L1194.79 1206.23 L1195.37 1206.23 L1195.96 1206.23 L1196.55 1206.23 L1197.13 1206.23 L1197.72 1206.23 L1198.31 1206.23 L1198.89 1206.23 L1199.48 1206.23 L1200.07 1206.23 L1200.65 1206.23 L1201.24 1206.23 L1201.83 1206.23 L1202.41 1206.23 L1203 1206.23 L1203.58 1206.23 L1204.17 1206.23 L1204.76 1206.23 L1205.34 1206.23 L1205.93 1206.23 L1206.52 1206.23 L1207.1 1206.23 L1207.69 1206.23 L1208.28 1206.23 L1208.86 1206.23 L1209.45 1206.23 L1210.03 1206.23 L1210.62 1206.23 L1211.21 1206.23 L1211.79 1206.23 L1212.38 1206.23 L1212.97 1206.23 L1213.55 1206.23 L1214.14 1206.23 L1214.73 1206.23 L1215.31 1206.23 L1215.9 1206.23 L1216.49 1206.23 L1217.07 1206.23 L1217.66 1206.23 L1218.24 1206.23 L1218.83 1206.23 L1219.42 1206.23 L1220 1206.23 L1220.59 1206.23 L1221.18 1206.23 L1221.76 1206.23 L1222.35 1206.23 L1222.94 1206.23 L1223.52 1206.23 L1224.11 1206.23 L1224.7 1206.23 L1225.28 1206.23 L1225.87 1206.23 L1226.45 1206.23 L1227.04 1206.23 L1227.63 1206.23 L1228.21 1206.23 L1228.8 1206.23 L1229.39 1206.23 L1229.97 1206.23 L1230.56 1206.23 L1231.15 1206.23 L1231.73 1206.23 L1232.32 1206.23 L1232.91 1206.23 L1233.49 1206.23 L1234.08 1206.23 L1234.66 1206.23 L1235.25 1206.23 L1235.84 1206.23 L1236.42 1206.23 L1237.01 1206.23 L1237.6 1206.23 L1238.18 1206.23 L1238.77 1206.23 L1239.36 1206.23 L1239.94 1206.23 L1240.53 1206.23 L1241.11 1206.23 L1241.7 1206.23 L1242.29 1206.23 L1242.87 1206.23 L1243.46 1206.23 L1244.05 1206.23 L1244.63 1206.23 L1245.22 1206.23 L1245.81 1206.23 L1246.39 1206.23 L1246.98 1206.23 L1247.57 1206.23 L1248.15 1206.23 L1248.74 1206.23 L1249.32 1206.23 L1249.91 1206.23 L1250.5 1206.23 L1251.08 1206.23 L1251.67 1206.23 L1252.26 1206.23 L1252.84 1206.23 L1253.43 1206.23 L1254.02 1206.23 L1254.6 1206.23 L1255.19 1206.23 L1255.78 1206.23 L1256.36 1206.23 L1256.95 1206.23 L1257.53 1206.23 L1258.12 1206.23 L1258.71 1206.23 L1259.29 1206.23 L1259.88 1206.23 L1260.47 1206.23 L1261.05 1206.23 L1261.64 1206.23 L1262.23 1206.23 L1262.81 1206.23 L1263.4 1206.23 L1263.98 1206.23 L1264.57 1206.23 L1265.16 1206.23 L1265.74 1206.23 L1266.33 1206.23 L1266.92 1206.23 L1267.5 1206.23 L1268.09 1206.23 L1268.68 1206.23 L1269.26 1206.23 L1269.85 1206.23 L1270.44 1206.23 L1271.02 1206.23 L1271.61 1206.23 L1272.19 1206.23 L1272.78 1206.23 L1273.37 1206.23 L1273.95 1206.23 L1274.54 1206.23 L1275.13 1206.23 L1275.71 1206.23 L1276.3 1206.23 L1276.89 1206.23 L1277.47 1206.23 L1278.06 1206.23 L1278.65 1206.23 L1279.23 1206.23 L1279.82 1206.23 L1280.4 1206.23 L1280.99 1206.23 L1281.58 1206.23 L1282.16 1206.23 L1282.75 1206.23 L1283.34 1206.23 L1283.92 1206.23 L1284.51 1206.23 L1285.1 1206.23 L1285.68 1206.23 L1286.27 1206.23 L1286.86 1206.23 L1287.44 1206.23 L1288.03 1206.23 L1288.61 1206.23 L1289.2 1206.23 L1289.79 1206.23 L1290.37 1206.23 L1290.96 1206.23 L1291.55 1206.23 L1292.13 1206.23 L1292.72 1206.23 L1293.31 1206.23 L1293.89 1206.23 L1294.48 1206.23 L1295.06 1206.23 L1295.65 1206.23 L1296.24 1206.23 L1296.82 1206.23 L1297.41 1206.23 L1298 1206.23 L1298.58 1206.23 L1299.17 1206.23 L1299.76 1206.23 L1300.34 1206.23 L1300.93 1206.23 L1301.52 1206.23 L1302.1 1206.23 L1302.69 1206.23 L1303.27 1206.23 L1303.86 1206.23 L1304.45 1206.23 L1305.03 1206.23 L1305.62 1206.23 L1306.21 1206.23 L1306.79 1206.23 L1307.38 1206.23 L1307.97 1206.23 L1308.55 1206.23 L1309.14 1206.23 L1309.73 1206.23 L1310.31 1206.23 L1310.9 1206.23 L1311.48 1206.23 L1312.07 1206.23 L1312.66 1206.23 L1313.24 1206.23 L1313.83 1206.23 L1314.42 1206.23 L1315 1206.23 L1315.59 1206.23 L1316.18 1206.23 L1316.76 1206.23 L1317.35 1206.23 L1317.93 1206.23 L1318.52 1206.23 L1319.11 1206.23 L1319.69 1206.23 L1320.28 1206.23 L1320.87 1206.23 L1321.45 1206.23 L1322.04 1206.23 L1322.63 1206.23 L1323.21 1206.23 L1323.8 1206.23 L1324.39 1206.23 L1324.97 1206.23 L1325.56 1206.23 L1326.14 1206.23 L1326.73 1206.23 L1327.32 1206.23 L1327.9 1206.23 L1328.49 1206.23 L1329.08 1206.23 L1329.66 1206.23 L1330.25 1206.23 L1330.84 1206.23 L1331.42 1206.23 L1332.01 1206.23 L1332.6 1206.23 L1333.18 1206.23 L1333.77 1206.23 L1334.35 1206.23 L1334.94 1206.23 L1335.53 1206.23 L1336.11 1206.23 L1336.7 1206.23 L1337.29 1206.23 L1337.87 1206.23 L1338.46 1206.23 L1339.05 1206.23 L1339.63 1206.23 L1340.22 1206.23 L1340.8 1206.23 L1341.39 1206.23 L1341.98 1206.23 L1342.56 1206.23 L1343.15 1206.23 L1343.74 1206.23 L1344.32 1206.23 L1344.91 1206.23 L1345.5 1206.23 L1346.08 1206.23 L1346.67 1206.23 L1347.26 1206.23 L1347.84 1206.23 L1348.43 1206.23 L1349.01 1206.23 L1349.6 1206.23 L1350.19 1206.23 L1350.77 1206.23 L1351.36 1206.23 L1351.95 1206.23 L1352.53 1206.23 L1353.12 1206.23 L1353.71 1206.23 L1354.29 1206.23 L1354.88 1206.23 L1355.47 1206.23 L1356.05 1206.23 L1356.64 1206.23 L1357.22 1206.23 L1357.81 1206.23 L1358.4 1206.23 L1358.98 1206.23 L1359.57 1206.23 L1360.16 1206.23 L1360.74 1206.23 L1361.33 1206.23 L1361.92 1206.23 L1362.5 1206.23 L1363.09 1206.23 L1363.68 1206.23 L1364.26 1206.23 L1364.85 1206.23 L1365.43 1206.23 L1366.02 1206.23 L1366.61 1206.23 L1367.19 1206.23 L1367.78 1206.23 L1368.37 1206.23 L1368.95 1206.23 L1369.54 1206.23 L1370.13 1206.23 L1370.71 1206.23 L1371.3 1206.23 L1371.88 1206.23 L1372.47 1206.23 L1373.06 1206.23 L1373.64 1206.23 L1374.23 1206.23 L1374.82 1206.23 L1375.4 1206.23 L1375.99 1206.23 L1376.58 1206.23 L1377.16 1206.23 L1377.75 1206.23 L1378.34 1206.23 L1378.92 1206.23 L1379.51 1206.23 L1380.09 1206.23 L1380.68 1206.23 L1381.27 1206.23 L1381.85 1206.23 L1382.44 1206.23 L1383.03 1206.23 L1383.61 1206.23 L1384.2 1206.23 L1384.79 1206.23 L1385.37 1206.23 L1385.96 1206.23 L1386.55 1206.23 L1387.13 1206.23 L1387.72 1206.23 L1388.3 1206.23 L1388.89 1206.23 L1389.48 1206.23 L1390.06 1206.23 L1390.65 1206.23 L1391.24 1206.23 L1391.82 1206.23 L1392.41 1206.23 L1393 1206.23 L1393.58 1206.23 L1394.17 1206.23 L1394.75 1206.23 L1395.34 1206.23 L1395.93 1206.23 L1396.51 1206.23 L1397.1 1206.23 L1397.69 1206.23 L1398.27 1206.23 L1398.86 1206.23 L1399.45 1206.23 L1400.03 1206.23 L1400.62 1206.23 L1401.21 1206.23 L1401.79 1206.23 L1402.38 1206.23 L1402.96 1206.23 L1403.55 1206.23 L1404.14 1206.23 L1404.72 1206.23 L1405.31 1206.23 L1405.9 1206.23 L1406.48 1206.23 L1407.07 1206.23 L1407.66 1206.23 L1408.24 1206.23 L1408.83 1206.23 L1409.42 1206.23 L1410 1206.23 L1410.59 1206.23 L1411.17 1206.23 L1411.76 1206.23 L1412.35 1206.23 L1412.93 1206.23 L1413.52 1206.23 L1414.11 1206.23 L1414.69 1206.23 L1415.28 1206.23 L1415.87 1206.23 L1416.45 1206.23 L1417.04 1206.23 L1417.63 1206.23 L1418.21 1206.23 L1418.8 1206.23 L1419.38 1206.23 L1419.97 1206.23 L1420.56 1206.23 L1421.14 1206.23 L1421.73 1206.23 L1422.32 1206.23 L1422.9 1206.23 L1423.49 1206.23 L1424.08 1206.23 L1424.66 1206.23 L1425.25 1206.23 L1425.83 1206.23 L1426.42 1206.23 L1427.01 1206.23 L1427.59 1206.23 L1428.18 1206.23 L1428.77 1206.23 L1429.35 1206.23 L1429.94 1206.23 L1430.53 1206.23 L1431.11 1206.23 L1431.7 1206.23 L1432.29 1206.23 L1432.87 1206.23 L1433.46 1206.23 L1434.04 1206.23 L1434.63 1206.23 L1435.22 1206.23 L1435.8 1206.23 L1436.39 1206.23 L1436.98 1206.23 L1437.56 1206.23 L1438.15 1206.23 L1438.74 1206.23 L1439.32 1206.23 L1439.91 1206.23 L1440.5 1206.23 L1441.08 1206.23 L1441.67 1206.23 L1442.25 1206.23 L1442.84 1206.23 L1443.43 1206.23 L1444.01 1206.23 L1444.6 1206.23 L1445.19 1206.23 L1445.77 1206.23 L1446.36 1206.23 L1446.95 1206.23 L1447.53 1206.23 L1448.12 1206.23 L1448.7 1206.23 L1449.29 1206.23 L1449.88 1206.23 L1450.46 1206.23 L1451.05 1206.23 L1451.64 1206.23 L1452.22 1206.23 L1452.81 1206.23 L1453.4 1206.23 L1453.98 1206.23 L1454.57 1206.23 L1455.16 1206.23 L1455.74 1206.23 L1456.33 1206.23 L1456.91 1206.23 L1457.5 1206.23 L1458.09 1206.23 L1458.67 1206.23 L1459.26 1206.23 L1459.85 1206.23 L1460.43 1206.23 L1461.02 1206.23 L1461.61 1206.23 L1462.19 1206.23 L1462.78 1206.23 L1463.37 1206.23 L1463.95 1206.23 L1464.54 1206.23 L1465.12 1206.23 L1465.71 1206.23 L1466.3 1206.23 L1466.88 1206.23 L1467.47 1206.23 L1468.06 1206.23 L1468.64 1206.23 L1469.23 1206.23 L1469.82 1206.23 L1470.4 1206.23 L1470.99 1206.23 L1471.57 1206.23 L1472.16 1206.23 L1472.75 1206.23 L1473.33 1206.23 L1473.92 1206.23 L1474.51 1206.23 L1475.09 1206.23 L1475.68 1206.23 L1476.27 1206.23 L1476.85 1206.23 L1477.44 1206.23 L1478.03 1206.23 L1478.61 1206.23 L1479.2 1206.23 L1479.78 1206.23 L1480.37 1206.23 L1480.96 1206.23 L1481.54 1206.23 L1482.13 1206.23 L1482.72 1206.23 L1483.3 1206.23 L1483.89 1206.23 L1484.48 1206.23 L1485.06 1206.23 L1485.65 1206.23 L1486.24 1206.23 L1486.82 1206.23 L1487.41 1206.23 L1487.99 1206.23 L1488.58 1206.23 L1489.17 1206.23 L1489.75 1206.23 L1490.34 1206.23 L1490.93 1206.23 L1491.51 1206.23 L1492.1 1206.23 L1492.69 1206.23 L1493.27 1206.23 L1493.86 1206.23 L1494.45 1206.23 L1495.03 1206.23 L1495.62 1206.23 L1496.2 1206.23 L1496.79 1206.23 L1497.38 1206.23 L1497.96 1206.23 L1498.55 1206.23 L1499.14 1206.23 L1499.72 1206.23 L1500.31 1206.23 L1500.9 1206.23 L1501.48 1206.23 L1502.07 1206.23 L1502.65 1206.23 L1503.24 1206.23 L1503.83 1206.23 L1504.41 1206.23 L1505 1206.23 L1505.59 1206.23 L1506.17 1206.23 L1506.76 1206.23 L1507.35 1206.23 L1507.93 1206.23 L1508.52 1206.23 L1509.11 1206.23 L1509.69 1206.23 L1510.28 1206.23 L1510.86 1206.23 L1511.45 1206.23 L1512.04 1206.23 L1512.62 1206.23 L1513.21 1206.23 L1513.8 1206.23 L1514.38 1206.23 L1514.97 1206.23 L1515.56 1206.23 L1516.14 1206.23 L1516.73 1206.23 L1517.32 1206.23 L1517.9 1206.23 L1518.49 1206.23 L1519.07 1206.23 L1519.66 1206.23 L1520.25 1206.23 L1520.83 1206.23 L1521.42 1206.23 L1522.01 1206.23 L1522.59 1206.23 L1523.18 1206.23 L1523.77 1206.23 L1524.35 1206.23 L1524.94 1206.23 L1525.52 1206.23 L1526.11 1206.23 L1526.7 1206.23 L1527.28 1206.23 L1527.87 1206.23 L1528.46 1206.23 L1529.04 1206.23 L1529.63 1206.23 L1530.22 1206.23 L1530.8 1206.23 L1531.39 1206.23 L1531.98 1206.23 L1532.56 1206.23 L1533.15 1206.23 L1533.73 1206.23 L1534.32 1206.23 L1534.91 1206.23 L1535.49 1206.23 L1536.08 1206.23 L1536.67 1206.23 L1537.25 1206.23 L1537.84 1206.23 L1538.43 1206.23 L1539.01 1206.23 L1539.6 1206.23 L1540.19 1206.23 L1540.77 1206.23 L1541.36 1206.23 L1541.94 1206.23 L1542.53 1206.23 L1543.12 1206.23 L1543.7 1206.23 L1544.29 1206.23 L1544.88 1206.23 L1545.46 1206.23 L1546.05 1206.23 L1546.64 1206.23 L1547.22 1206.23 L1547.81 1206.23 L1548.4 1206.23 L1548.98 1206.23 L1549.57 1206.23 L1550.15 1206.23 L1550.74 1206.23 L1551.33 1206.23 L1551.91 1206.23 L1552.5 1206.23 L1553.09 1206.23 L1553.67 1206.23 L1554.26 1206.23 L1554.85 1206.23 L1555.43 1206.23 L1556.02 1206.23 L1556.6 1206.23 L1557.19 1206.23 L1557.78 1206.23 L1558.36 1206.23 L1558.95 1206.23 L1559.54 1206.23 L1560.12 1206.23 L1560.71 1206.23 L1561.3 1206.23 L1561.88 1206.23 L1562.47 1206.23 L1563.06 1206.23 L1563.64 1206.23 L1564.23 1206.23 L1564.81 1206.23 L1565.4 1206.23 L1565.99 1206.23 L1566.57 1206.23 L1567.16 1206.23 L1567.75 1206.23 L1568.33 1206.23 L1568.92 1206.23 L1569.51 1206.23 L1570.09 1206.23 L1570.68 1206.23 L1571.27 1206.23 L1571.85 1206.23 L1572.44 1206.23 L1573.02 1206.23 L1573.61 1206.23 L1574.2 1206.23 L1574.78 1206.23 L1575.37 1206.23 L1575.96 1206.23 L1576.54 1206.23 L1577.13 1206.23 L1577.72 1206.23 L1578.3 1206.23 L1578.89 1206.23 L1579.47 1206.23 L1580.06 1206.23 L1580.65 1206.23 L1581.23 1206.23 L1581.82 1206.23 L1582.41 1206.23 L1582.99 1206.23 L1583.58 1206.23 L1584.17 1206.23 L1584.75 1206.23 L1585.34 1206.23 L1585.93 1206.23 L1586.51 1206.23 L1587.1 1206.23 L1587.68 1206.23 L1588.27 1206.23 L1588.86 1206.23 L1589.44 1206.23 L1590.03 1206.23 L1590.62 1206.23 L1591.2 1206.23 L1591.79 1206.23 L1592.38 1206.23 L1592.96 1206.23 L1593.55 1206.23 L1594.14 1206.23 L1594.72 1206.23 L1595.31 1206.23 L1595.89 1206.23 L1596.48 1206.23 L1597.07 1206.23 L1597.65 1206.23 L1598.24 1206.23 L1598.83 1206.23 L1599.41 1206.23 L1600 1206.23 L1600.59 1206.23 L1601.17 1206.23 L1601.76 1206.23 L1602.34 1206.23 L1602.93 1206.23 L1603.52 1206.23 L1604.1 1206.23 L1604.69 1206.23 L1605.28 1206.23 L1605.86 1206.23 L1606.45 1206.23 L1607.04 1206.23 L1607.62 1206.23 L1608.21 1206.23 L1608.8 1206.23 L1609.38 1206.23 L1609.97 1206.23 L1610.55 1206.23 L1611.14 1206.23 L1611.73 1206.23 L1612.31 1206.23 L1612.9 1206.23 L1613.49 1206.23 L1614.07 1206.23 L1614.66 1206.23 L1615.25 1206.23 L1615.83 1206.23 L1616.42 1206.23 L1617.01 1206.23 L1617.59 1206.23 L1618.18 1206.23 L1618.76 1206.23 L1619.35 1206.23 L1619.94 1206.23 L1620.52 1206.23 L1621.11 1206.23 L1621.7 1206.23 L1622.28 1206.23 L1622.87 1206.23 L1623.46 1206.23 L1624.04 1206.23 L1624.63 1206.23 L1625.22 1206.23 L1625.8 1206.23 L1626.39 1206.23 L1626.97 1206.23 L1627.56 1206.23 L1628.15 1206.23 L1628.73 1206.23 L1629.32 1206.23 L1629.91 1206.23 L1630.49 1206.23 L1631.08 1206.23 L1631.67 1206.23 L1632.25 1206.23 L1632.84 1206.23 L1633.42 1206.23 L1634.01 1206.23 L1634.6 1206.23 L1635.18 1206.23 L1635.77 1206.23 L1636.36 1206.23 L1636.94 1206.23 L1637.53 1206.23 L1638.12 1206.23 L1638.7 1206.23 L1639.29 1206.23 L1639.88 1206.23 L1640.46 1206.23 L1641.05 1206.23 L1641.63 1206.23 L1642.22 1206.23 L1642.81 1206.23 L1643.39 1206.23 L1643.98 1206.23 L1644.57 1206.23 L1645.15 1206.23 L1645.74 1206.23 L1646.33 1206.23 L1646.91 1206.23 L1647.5 1206.23 L1648.09 1206.23 L1648.67 1206.23 L1649.26 1206.23 L1649.84 1206.23 L1650.43 1206.23 L1651.02 1206.23 L1651.6 1206.23 L1652.19 1206.23 L1652.78 1206.23 L1653.36 1206.23 L1653.95 1206.23 L1654.54 1206.23 L1655.12 1206.23 L1655.71 1206.23 L1656.29 1206.23 L1656.88 1206.23 L1657.47 1206.23 L1658.05 1206.23 L1658.64 1206.23 L1659.23 1206.23 L1659.81 1206.23 L1660.4 1206.23 L1660.99 1206.23 L1661.57 1206.23 L1662.16 1206.23 L1662.75 1206.23 L1663.33 1206.23 L1663.92 1206.23 L1664.5 1206.23 L1665.09 1206.23 L1665.68 1206.23 L1666.26 1206.23 L1666.85 1206.23 L1667.44 1206.23 L1668.02 1206.23 L1668.61 1206.23 L1669.2 1206.23 L1669.78 1206.23 L1670.37 1206.23 L1670.96 1206.23 L1671.54 1206.23 L1672.13 1206.23 L1672.71 1206.23 L1673.3 1206.23 L1673.89 1206.23 L1674.47 1206.23 L1675.06 1206.23 L1675.65 1206.23 L1676.23 1206.23 L1676.82 1206.23 L1677.41 1206.23 L1677.99 1206.23 L1678.58 1206.23 L1679.17 1206.23 L1679.75 1206.23 L1680.34 1206.23 L1680.92 1206.23 L1681.51 1206.23 L1682.1 1206.23 L1682.68 1206.23 L1683.27 1206.23 L1683.86 1206.23 L1684.44 1206.23 L1685.03 1206.23 L1685.62 1206.23 L1686.2 1206.23 L1686.79 1206.23 L1687.37 1206.23 L1687.96 1206.23 L1688.55 1206.23 L1689.13 1206.23 L1689.72 1206.23 L1690.31 1206.23 L1690.89 1206.23 L1691.48 1206.23 L1692.07 1206.23 L1692.65 1206.23 L1693.24 1206.23 L1693.83 1206.23 L1694.41 1206.23 L1695 1206.23 L1695.58 1206.23 L1696.17 1206.23 L1696.76 1206.23 L1697.34 1206.23 L1697.93 1206.23 L1698.52 1206.23 L1699.1 1206.23 L1699.69 1206.23 L1700.28 1206.23 L1700.86 1206.23 L1701.45 1206.23 L1702.04 1206.23 L1702.62 1206.23 L1703.21 1206.23 L1703.79 1206.23 L1704.38 1206.23 L1704.97 1206.23 L1705.55 1206.23 L1706.14 1206.23 L1706.73 1206.23 L1707.31 1206.23 L1707.9 1206.23 L1708.49 1206.23 L1709.07 1206.23 L1709.66 1206.23 L1710.24 1206.23 L1710.83 1206.23 L1711.42 1206.23 L1712 1206.23 L1712.59 1206.23 L1713.18 1206.23 L1713.76 1206.23 L1714.35 1206.23 L1714.94 1206.23 L1715.52 1206.23 L1716.11 1206.23 L1716.7 1206.23 L1717.28 1206.23 L1717.87 1206.23 L1718.45 1206.23 L1719.04 1206.23 L1719.63 1206.23 L1720.21 1206.23 L1720.8 1206.23 L1721.39 1206.23 L1721.97 1206.23 L1722.56 1206.23 L1723.15 1206.23 L1723.73 1206.23 L1724.32 1206.23 L1724.91 1206.23 L1725.49 1206.23 L1726.08 1206.23 L1726.66 1206.23 L1727.25 1206.23 L1727.84 1206.23 L1728.42 1206.23 L1729.01 1206.23 L1729.6 1206.23 L1730.18 1206.23 L1730.77 1206.23 L1731.36 1206.23 L1731.94 1206.23 L1732.53 1206.23 L1733.11 1206.23 L1733.7 1206.23 L1734.29 1206.23 L1734.87 1206.23 L1735.46 1206.23 L1736.05 1206.23 L1736.63 1206.23 L1737.22 1206.23 L1737.81 1206.23 L1738.39 1206.23 L1738.98 1206.23 L1739.57 1206.23 L1740.15 1206.23 L1740.74 1206.23 L1741.32 1206.23 L1741.91 1206.23 L1742.5 1206.23 L1743.08 1206.23 L1743.67 1206.23 L1744.26 1206.23 L1744.84 1206.23 L1745.43 1206.23 L1746.02 1206.23 L1746.6 1206.23 L1747.19 1206.23 L1747.78 1206.23 L1748.36 1206.23 L1748.95 1206.23 L1749.53 1206.23 L1750.12 1206.23 L1750.71 1206.23 L1751.29 1206.23 L1751.88 1206.23 L1752.47 1206.23 L1753.05 1206.23 L1753.64 1206.23 L1754.23 1206.23 L1754.81 1206.23 L1755.4 1206.23 L1755.99 1206.23 L1756.57 1206.23 L1757.16 1206.23 L1757.74 1206.23 L1758.33 1206.23 L1758.92 1206.23 L1759.5 1206.23 L1760.09 1206.23 L1760.68 1206.23 L1761.26 1206.23 L1761.85 1206.23 L1762.44 1206.23 L1763.02 1206.23 L1763.61 1206.23 L1764.19 1206.23 L1764.78 1206.23 L1765.37 1206.23 L1765.95 1206.23 L1766.54 1206.23 L1767.13 1206.23 L1767.71 1206.23 L1768.3 1206.23 L1768.89 1206.23 L1769.47 1206.23 L1770.06 1206.23 L1770.65 1206.23 L1771.23 1206.23 L1771.82 1206.23 L1772.4 1206.23 L1772.99 1206.23 L1773.58 1206.23 L1774.16 1206.23 L1774.75 1206.23 L1775.34 1206.23 L1775.92 1206.23 L1776.51 1206.23 L1777.1 1206.23 L1777.68 1206.23 L1778.27 1206.23 L1778.86 1206.23 L1779.44 1206.23 L1780.03 1206.23 L1780.61 1206.23 L1781.2 1206.23 L1781.79 1206.23 L1782.37 1206.23 L1782.96 1206.23 L1783.55 1206.23 L1784.13 1206.23 L1784.72 1206.23 L1785.31 1206.23 L1785.89 1206.23 L1786.48 1206.23 L1787.06 1206.23 L1787.65 1206.23 L1788.24 1206.23 L1788.82 1206.23 L1789.41 1206.23 L1790 1206.23 L1790.58 1206.23 L1791.17 1206.23 L1791.76 1206.23 L1792.34 1206.23 L1792.93 1206.23 L1793.52 1206.23 L1794.1 1206.23 L1794.69 1206.23 L1795.27 1206.23 L1795.86 1206.23 L1796.45 1206.23 L1797.03 1206.23 L1797.62 1206.23 L1798.21 1206.23 L1798.79 1206.23 L1799.38 1206.23 L1799.97 1206.23 L1800.55 1206.23 L1801.14 1206.23 L1801.73 1206.23 L1802.31 1206.23 L1802.9 1206.23 L1803.48 1206.23 L1804.07 1206.23 L1804.66 1206.23 L1805.24 1206.23 L1805.83 1206.23 L1806.42 1206.23 L1807 1206.23 L1807.59 1206.23 L1808.18 1206.23 L1808.76 1206.23 L1809.35 1206.23 L1809.94 1206.23 L1810.52 1206.23 L1811.11 1206.23 L1811.69 1206.23 L1812.28 1206.23 L1812.87 1206.23 L1813.45 1206.23 L1814.04 1206.23 L1814.63 1206.23 L1815.21 1206.23 L1815.8 1206.23 L1816.39 1206.23 L1816.97 1206.23 L1817.56 1206.23 L1818.14 1206.23 L1818.73 1206.23 L1819.32 1206.23 L1819.9 1206.23 L1820.49 1206.23 L1821.08 1206.23 L1821.66 1206.23 L1822.25 1206.23 L1822.84 1206.23 L1823.42 1206.23 L1824.01 1206.23 L1824.6 1206.23 L1825.18 1206.23 L1825.77 1206.23 L1826.35 1206.23 L1826.94 1206.23 L1827.53 1206.23 L1828.11 1206.23 L1828.7 1206.23 L1829.29 1206.23 L1829.87 1206.23 L1830.46 1206.23 L1831.05 1206.23 L1831.63 1206.23 L1832.22 1206.23 L1832.81 1206.23 L1833.39 1206.23 L1833.98 1206.23 L1834.56 1206.23 L1835.15 1206.23 L1835.74 1206.23 L1836.32 1206.23 L1836.91 1206.23 L1837.5 1206.23 L1838.08 1206.23 L1838.67 1206.23 L1839.26 1206.23 L1839.84 1206.23 L1840.43 1206.23 L1841.01 1206.23 L1841.6 1206.23 L1842.19 1206.23 L1842.77 1206.23 L1843.36 1206.23 L1843.95 1206.23 L1844.53 1206.23 L1845.12 1206.23 L1845.71 1206.23 L1846.29 1206.23 L1846.88 1206.23 L1847.47 1206.23 L1848.05 1206.23 L1848.64 1206.23 L1849.22 1206.23 L1849.81 1206.23 L1850.4 1206.23 L1850.98 1206.23 L1851.57 1206.23 L1852.16 1206.23 L1852.74 1206.23 L1853.33 1206.23 L1853.92 1206.23 L1854.5 1206.23 L1855.09 1206.23 L1855.68 1206.23 L1856.26 1206.23 L1856.85 1206.23 L1857.43 1206.23 L1858.02 1206.23 L1858.61 1206.23 L1859.19 1206.23 L1859.78 1206.23 L1860.37 1206.23 L1860.95 1206.23 L1861.54 1206.23 L1862.13 1206.23 L1862.71 1206.23 L1863.3 1206.23 L1863.88 1206.23 L1864.47 1206.23 L1865.06 1206.23 L1865.64 1206.23 L1866.23 1206.23 L1866.82 1206.23 L1867.4 1206.23 L1867.99 1206.23 L1868.58 1206.23 L1869.16 1206.23 L1869.75 1206.23 L1870.34 1206.23 L1870.92 1206.23 L1871.51 1206.23 L1872.09 1206.23 L1872.68 1206.23 L1873.27 1206.23 L1873.85 1206.23 L1874.44 1206.23 L1875.03 1206.23 L1875.61 1206.23 L1876.2 1206.23 L1876.79 1206.23 L1877.37 1206.23 L1877.96 1206.23 L1878.55 1206.23 L1879.13 1206.23 L1879.72 1206.23 L1880.3 1206.23 L1880.89 1206.23 L1881.48 1206.23 L1882.06 1206.23 L1882.65 1206.23 L1883.24 1206.23 L1883.82 1206.23 L1884.41 1206.23 L1885 1206.23 L1885.58 1206.23 L1886.17 1206.23 L1886.76 1206.23 L1887.34 1206.23 L1887.93 1206.23 L1888.51 1206.23 L1889.1 1206.23 L1889.69 1206.23 L1890.27 1206.23 L1890.86 1206.23 L1891.45 1206.23 L1892.03 1206.23 L1892.62 1206.23 L1893.21 1206.23 L1893.79 1206.23 L1894.38 1206.23 L1894.96 1206.23 L1895.55 1206.23 L1896.14 1206.23 L1896.72 1206.23 L1897.31 1206.23 L1897.9 1206.23 L1898.48 1206.23 L1899.07 1206.23 L1899.66 1206.23 L1900.24 1206.23 L1900.83 1206.23 L1901.42 1206.23 L1902 1206.23 L1902.59 1206.23 L1903.17 1206.23 L1903.76 1206.23 L1904.35 1206.23 L1904.93 1206.23 L1905.52 1206.23 L1906.11 1206.23 L1906.69 1206.23 L1907.28 1206.23 L1907.87 1206.23 L1908.45 1206.23 L1909.04 1206.23 L1909.63 1206.23 L1910.21 1206.23 L1910.8 1206.23 L1911.38 1206.23 L1911.97 1206.23 L1912.56 1206.23 L1913.14 1206.23 L1913.73 1206.23 L1914.32 1206.23 L1914.9 1206.23 L1915.49 1206.23 L1916.08 1206.23 L1916.66 1206.23 L1917.25 1206.23 L1917.83 1206.23 L1918.42 1206.23 L1919.01 1206.23 L1919.59 1206.23 L1920.18 1206.23 L1920.77 1206.23 L1921.35 1206.23 L1921.94 1206.23 L1922.53 1206.23 L1923.11 1206.23 L1923.7 1206.23 L1924.29 1206.23 L1924.87 1206.23 L1925.46 1206.23 L1926.04 1206.23 L1926.63 1206.23 L1927.22 1206.23 L1927.8 1206.23 L1928.39 1206.23 L1928.98 1206.23 L1929.56 1206.23 L1930.15 1206.23 L1930.74 1206.23 L1931.32 1206.23 L1931.91 1206.23 L1932.5 1206.23 L1933.08 1206.23 L1933.67 1206.23 L1934.25 1206.23 L1934.84 1206.23 L1935.43 1206.23 L1936.01 1206.23 L1936.6 1206.23 L1937.19 1206.23 L1937.77 1206.23 L1938.36 1206.23 L1938.95 1206.23 L1939.53 1206.23 L1940.12 1206.23 L1940.71 1206.23 L1941.29 1206.23 L1941.88 1206.23 L1942.46 1206.23 L1943.05 1206.23 L1943.64 1206.23 L1944.22 1206.23 L1944.81 1206.23 L1945.4 1206.23 L1945.98 1206.23 L1946.57 1206.23 L1947.16 1206.23 L1947.74 1206.23 L1948.33 1206.23 L1948.91 1206.23 L1949.5 1206.23 L1950.09 1206.23 L1950.67 1206.23 L1951.26 1206.23 L1951.85 1206.23 L1952.43 1206.23 L1953.02 1206.23 L1953.61 1206.23 L1954.19 1206.23 L1954.78 1206.23 L1955.37 1206.23 L1955.95 1206.23 L1956.54 1206.23 L1957.12 1206.23 L1957.71 1206.23 L1958.3 1206.23 L1958.88 1206.23 L1959.47 1206.23 L1960.06 1206.23 L1960.64 1206.23 L1961.23 1206.23 L1961.82 1206.23 L1962.4 1206.23 L1962.99 1206.23 L1963.58 1206.23 L1964.16 1206.23 L1964.75 1206.23 L1965.33 1206.23 L1965.92 1206.23 L1966.51 1206.23 L1967.09 1206.23 L1967.68 1206.23 L1968.27 1206.23 L1968.85 1206.23 L1969.44 1206.23 L1970.03 1206.23 L1970.61 1206.23 L1971.2 1206.23 L1971.78 1206.23 L1972.37 1206.23 L1972.96 1206.23 L1973.54 1206.23 L1974.13 1206.23 L1974.72 1206.23 L1975.3 1206.23 L1975.89 1206.23 L1976.48 1206.23 L1977.06 1206.23 L1977.65 1206.23 L1978.24 1206.23 L1978.82 1206.23 L1979.41 1206.23 L1979.99 1206.23 L1980.58 1206.23 L1981.17 1206.23 L1981.75 1206.23 L1982.34 1206.23 L1982.93 1206.23 L1983.51 1206.23 L1984.1 1206.23 L1984.69 1206.23 L1985.27 1206.23 L1985.86 1206.23 L1986.45 1206.23 L1987.03 1206.23 L1987.62 1206.23 L1988.2 1206.23 L1988.79 1206.23 L1989.38 1206.23 L1989.96 1206.23 L1990.55 1206.23 L1991.14 1206.23 L1991.72 1206.23 L1992.31 1206.23 L1992.9 1206.23 L1993.48 1206.23 L1994.07 1206.23 L1994.65 1206.23 L1995.24 1206.23 L1995.83 1206.23 L1996.41 1206.23 L1997 1206.23 L1997.59 1206.23 L1998.17 1206.23 L1998.76 1206.23 L1999.35 1206.23 L1999.93 1206.23 L2000.52 1206.23 L2001.11 1206.23 L2001.69 1206.23 L2002.28 1206.23 L2002.86 1206.23 L2003.45 1206.23 L2004.04 1206.23 L2004.62 1206.23 L2005.21 1206.23 L2005.8 1206.23 L2006.38 1206.23 L2006.97 1206.23 L2007.56 1206.23 L2008.14 1206.23 L2008.73 1206.23 L2009.32 1206.23 L2009.9 1206.23 L2010.49 1206.23 L2011.07 1206.23 L2011.66 1206.23 L2012.25 1206.23 L2012.83 1206.23 L2013.42 1206.23 L2014.01 1206.23 L2014.59 1206.23 L2015.18 1206.23 L2015.77 1206.23 L2016.35 1206.23 L2016.94 1206.23 L2017.53 1206.23 L2018.11 1206.23 L2018.7 1206.23 L2019.28 1206.23 L2019.87 1206.23 L2020.46 1206.23 L2021.04 1206.23 L2021.63 1206.23 L2022.22 1206.23 L2022.8 1206.23 L2023.39 1206.23 L2023.98 1206.23 L2024.56 1206.23 L2025.15 1206.23 L2025.73 1206.23 L2026.32 1206.23 L2026.91 1206.23 L2027.49 1206.23 L2028.08 1206.23 L2028.67 1206.23 L2029.25 1206.23 L2029.84 1206.23 L2030.43 1206.23 L2031.01 1206.23 L2031.6 1206.23 L2032.19 1206.23 L2032.77 1206.23 L2033.36 1206.23 L2033.94 1206.23 L2034.53 1206.23 L2035.12 1206.23 L2035.7 1206.23 L2036.29 1206.23 L2036.88 1206.23 L2037.46 1206.23 L2038.05 1206.23 L2038.64 1206.23 L2039.22 1206.23 L2039.81 1206.23 L2040.4 1206.23 L2040.98 1206.23 L2041.57 1206.23 L2042.15 1206.23 L2042.74 1206.23 L2043.33 1206.23 L2043.91 1206.23 L2044.5 1206.23 L2045.09 1206.23 L2045.67 1206.23 L2046.26 1206.23 L2046.85 1206.23 L2047.43 1206.23 L2048.02 1206.23 L2048.6 1206.23 L2049.19 1206.23 L2049.78 1206.23 L2050.36 1206.23 L2050.95 1206.23 L2051.54 1206.23 L2052.12 1206.23 L2052.71 1206.23 L2053.3 1206.23 L2053.88 1206.23 L2054.47 1206.23 L2055.06 1206.23 L2055.64 1206.23 L2056.23 1206.23 L2056.81 1206.23 L2057.4 1206.23 L2057.99 1206.23 L2058.57 1206.23 L2059.16 1206.23 L2059.75 1206.23 L2060.33 1206.23 L2060.92 1206.23 L2061.51 1206.23 L2062.09 1206.23 L2062.68 1206.23 L2063.27 1206.23 L2063.85 1206.23 L2064.44 1206.23 L2065.02 1206.23 L2065.61 1206.23 L2066.2 1206.23 L2066.78 1206.23 L2067.37 1206.23 L2067.96 1206.23 L2068.54 1206.23 L2069.13 1206.23 L2069.72 1206.23 L2070.3 1206.23 L2070.89 1206.23 L2071.48 1206.23 L2072.06 1206.23 L2072.65 1206.23 L2073.23 1206.23 L2073.82 1206.23 L2074.41 1206.23 L2074.99 1206.23 L2075.58 1206.23 L2076.17 1206.23 L2076.75 1206.23 L2077.34 1206.23 L2077.93 1206.23 L2078.51 1206.23 L2079.1 1206.23 L2079.68 1206.23 L2080.27 1206.23 L2080.86 1206.23 L2081.44 1206.23 L2082.03 1206.23 L2082.62 1206.23 L2083.2 1206.23 L2083.79 1206.23 L2084.38 1206.23 L2084.96 1206.23 L2085.55 1206.23 L2086.14 1206.23 L2086.72 1206.23 L2087.31 1206.23 L2087.89 1206.23 L2088.48 1206.23 L2089.07 1206.23 L2089.65 1206.23 L2090.24 1206.23 L2090.83 1206.23 L2091.41 1206.23 L2092 1206.23 L2092.59 1206.23 L2093.17 1206.23 L2093.76 1206.23 L2094.35 1206.23 L2094.93 1206.23 L2095.52 1206.23 L2096.1 1206.23 L2096.69 1206.23 L2097.28 1206.23 L2097.86 1206.23 L2098.45 1206.23 L2099.04 1206.23 L2099.62 1206.23 L2100.21 1206.23 L2100.8 1206.23 L2101.38 1206.23 L2101.97 1206.23 L2102.55 1206.23 L2103.14 1206.23 L2103.73 1206.23 L2104.31 1206.23 L2104.9 1206.23 L2105.49 1206.23 L2106.07 1206.23 L2106.66 1206.23 L2107.25 1206.23 L2107.83 1206.23 L2108.42 1206.23 L2109.01 1206.23 L2109.59 1206.23 L2110.18 1206.23 L2110.76 1206.23 L2111.35 1206.23 L2111.94 1206.23 L2112.52 1206.23 L2113.11 1206.23 L2113.7 1206.23 L2114.28 1206.23 L2114.87 1206.23 L2115.46 1206.23 L2116.04 1206.23 L2116.63 1206.23 L2117.22 1206.23 L2117.8 1206.23 L2118.39 1206.23 L2118.97 1206.23 L2119.56 1206.23 L2120.15 1206.23 L2120.73 1206.23 L2121.32 1206.23 L2121.91 1206.23 L2122.49 1206.23 L2123.08 1206.23 L2123.67 1206.23 L2124.25 1206.23 L2124.84 1206.23 L2125.42 1206.23 L2126.01 1206.23 L2126.6 1206.23 L2127.18 1206.23 L2127.77 1206.23 L2128.36 1206.23 L2128.94 1206.23 L2129.53 1206.23 L2130.12 1206.23 L2130.7 1206.23 L2131.29 1206.23 L2131.88 1206.23 L2132.46 1206.23 L2133.05 1206.23 L2133.63 1206.23 L2134.22 1206.23 L2134.81 1206.23 L2135.39 1206.23 L2135.98 1206.23 L2136.57 1206.23 L2137.15 1206.23 L2137.74 1206.23 L2138.33 1206.23 L2138.91 1206.23 L2139.5 1206.23 L2140.09 1206.23 L2140.67 1206.23 L2141.26 1206.23 L2141.84 1206.23 L2142.43 1206.23 L2143.02 1206.23 L2143.6 1206.23 L2144.19 1206.23 L2144.78 1206.23 L2145.36 1206.23 L2145.95 1206.23 L2146.54 1206.23 L2147.12 1206.23 L2147.71 1206.23 L2148.3 1206.23 L2148.88 1206.23 L2149.47 1206.23 L2150.05 1206.23 L2150.64 1206.23 L2151.23 1206.23 L2151.81 1206.23 L2152.4 1206.23 L2152.99 1206.23 L2153.57 1206.23 L2154.16 1206.23 L2154.75 1206.23 L2155.33 1206.23 L2155.92 1206.23 L2156.5 1206.23 L2157.09 1206.23 L2157.68 1206.23 L2158.26 1206.23 L2158.26 1205.62 L2157.68 1205.62 L2157.09 1205.62 L2156.5 1205.62 L2155.92 1205.62 L2155.33 1205.62 L2154.75 1205.62 L2154.16 1205.62 L2153.57 1205.62 L2152.99 1205.62 L2152.4 1205.62 L2151.81 1205.62 L2151.23 1205.62 L2150.64 1205.62 L2150.05 1205.62 L2149.47 1205.62 L2148.88 1205.62 L2148.3 1205.62 L2147.71 1205.62 L2147.12 1205.62 L2146.54 1205.62 L2145.95 1205.62 L2145.36 1205.62 L2144.78 1205.62 L2144.19 1205.62 L2143.6 1205.62 L2143.02 1205.62 L2142.43 1205.62 L2141.84 1205.62 L2141.26 1205.62 L2140.67 1205.62 L2140.09 1205.62 L2139.5 1205.62 L2138.91 1205.62 L2138.33 1205.62 L2137.74 1205.62 L2137.15 1205.62 L2136.57 1205.62 L2135.98 1205.62 L2135.39 1205.62 L2134.81 1205.62 L2134.22 1205.62 L2133.63 1205.62 L2133.05 1205.62 L2132.46 1205.62 L2131.88 1205.62 L2131.29 1205.62 L2130.7 1205.62 L2130.12 1205.62 L2129.53 1205.62 L2128.94 1205.62 L2128.36 1205.62 L2127.77 1205.62 L2127.18 1205.62 L2126.6 1205.62 L2126.01 1205.62 L2125.42 1205.62 L2124.84 1205.62 L2124.25 1205.62 L2123.67 1205.62 L2123.08 1205.62 L2122.49 1205.62 L2121.91 1205.62 L2121.32 1205.62 L2120.73 1205.62 L2120.15 1205.62 L2119.56 1205.62 L2118.97 1205.62 L2118.39 1205.62 L2117.8 1205.62 L2117.22 1205.62 L2116.63 1205.62 L2116.04 1205.62 L2115.46 1205.62 L2114.87 1205.62 L2114.28 1205.62 L2113.7 1205.62 L2113.11 1205.62 L2112.52 1205.62 L2111.94 1205.62 L2111.35 1205.62 L2110.76 1205.62 L2110.18 1205.62 L2109.59 1205.62 L2109.01 1205.62 L2108.42 1205.62 L2107.83 1205.62 L2107.25 1205.62 L2106.66 1205.62 L2106.07 1205.62 L2105.49 1205.62 L2104.9 1205.62 L2104.31 1205.62 L2103.73 1205.62 L2103.14 1205.62 L2102.55 1205.62 L2101.97 1205.62 L2101.38 1205.62 L2100.8 1205.62 L2100.21 1205.62 L2099.62 1205.62 L2099.04 1205.62 L2098.45 1205.62 L2097.86 1205.62 L2097.28 1205.62 L2096.69 1205.62 L2096.1 1205.62 L2095.52 1205.62 L2094.93 1205.62 L2094.35 1205.62 L2093.76 1205.62 L2093.17 1205.62 L2092.59 1205.62 L2092 1205.62 L2091.41 1205.62 L2090.83 1205.62 L2090.24 1205.62 L2089.65 1205.62 L2089.07 1205.62 L2088.48 1205.62 L2087.89 1205.62 L2087.31 1205.62 L2086.72 1205.62 L2086.14 1205.62 L2085.55 1205.62 L2084.96 1205.62 L2084.38 1205.62 L2083.79 1205.62 L2083.2 1205.62 L2082.62 1205.62 L2082.03 1205.62 L2081.44 1205.62 L2080.86 1205.62 L2080.27 1205.62 L2079.68 1205.62 L2079.1 1205.62 L2078.51 1205.62 L2077.93 1205.62 L2077.34 1205.62 L2076.75 1205.62 L2076.17 1205.62 L2075.58 1205.62 L2074.99 1205.62 L2074.41 1205.62 L2073.82 1205.62 L2073.23 1205.62 L2072.65 1205.62 L2072.06 1205.62 L2071.48 1205.62 L2070.89 1205.62 L2070.3 1205.62 L2069.72 1205.62 L2069.13 1205.62 L2068.54 1205.62 L2067.96 1205.62 L2067.37 1205.62 L2066.78 1205.62 L2066.2 1205.62 L2065.61 1205.62 L2065.02 1205.62 L2064.44 1205.62 L2063.85 1205.62 L2063.27 1205.62 L2062.68 1205.62 L2062.09 1205.62 L2061.51 1205.62 L2060.92 1205.62 L2060.33 1205.62 L2059.75 1205.62 L2059.16 1205.62 L2058.57 1205.62 L2057.99 1205.62 L2057.4 1205.62 L2056.81 1205.62 L2056.23 1205.62 L2055.64 1205.62 L2055.06 1205.62 L2054.47 1205.62 L2053.88 1205.62 L2053.3 1205.62 L2052.71 1205.62 L2052.12 1205.62 L2051.54 1205.62 L2050.95 1205.62 L2050.36 1205.62 L2049.78 1205.62 L2049.19 1205.62 L2048.6 1205.62 L2048.02 1205.62 L2047.43 1205.62 L2046.85 1205.62 L2046.26 1205.62 L2045.67 1205.62 L2045.09 1205.62 L2044.5 1205.62 L2043.91 1205.62 L2043.33 1205.62 L2042.74 1205.62 L2042.15 1205.62 L2041.57 1205.62 L2040.98 1205.62 L2040.4 1205.62 L2039.81 1205.62 L2039.22 1205.62 L2038.64 1205.62 L2038.05 1205.62 L2037.46 1205.62 L2036.88 1205.62 L2036.29 1205.62 L2035.7 1205.62 L2035.12 1205.62 L2034.53 1205.62 L2033.94 1205.62 L2033.36 1205.62 L2032.77 1205.62 L2032.19 1205.62 L2031.6 1205.62 L2031.01 1205.62 L2030.43 1205.62 L2029.84 1205.62 L2029.25 1205.62 L2028.67 1205.62 L2028.08 1205.62 L2027.49 1205.62 L2026.91 1205.62 L2026.32 1205.62 L2025.73 1205.62 L2025.15 1205.62 L2024.56 1205.62 L2023.98 1205.62 L2023.39 1205.62 L2022.8 1205.62 L2022.22 1205.62 L2021.63 1205.62 L2021.04 1205.62 L2020.46 1205.62 L2019.87 1205.62 L2019.28 1205.62 L2018.7 1205.62 L2018.11 1205.62 L2017.53 1205.62 L2016.94 1205.62 L2016.35 1205.62 L2015.77 1205.62 L2015.18 1205.62 L2014.59 1205.62 L2014.01 1205.62 L2013.42 1205.62 L2012.83 1205.62 L2012.25 1205.62 L2011.66 1205.62 L2011.07 1205.62 L2010.49 1205.62 L2009.9 1205.62 L2009.32 1205.62 L2008.73 1205.62 L2008.14 1205.62 L2007.56 1205.62 L2006.97 1205.62 L2006.38 1205.62 L2005.8 1205.62 L2005.21 1205.62 L2004.62 1205.62 L2004.04 1205.62 L2003.45 1205.62 L2002.86 1205.62 L2002.28 1205.62 L2001.69 1205.62 L2001.11 1205.62 L2000.52 1205.62 L1999.93 1205.62 L1999.35 1205.62 L1998.76 1205.62 L1998.17 1205.62 L1997.59 1205.62 L1997 1205.62 L1996.41 1205.62 L1995.83 1205.62 L1995.24 1205.62 L1994.65 1205.62 L1994.07 1205.62 L1993.48 1205.62 L1992.9 1205.62 L1992.31 1205.62 L1991.72 1205.62 L1991.14 1205.62 L1990.55 1205.62 L1989.96 1205.62 L1989.38 1205.62 L1988.79 1205.62 L1988.2 1205.62 L1987.62 1205.62 L1987.03 1205.62 L1986.45 1205.62 L1985.86 1205.62 L1985.27 1205.62 L1984.69 1205.62 L1984.1 1205.62 L1983.51 1205.62 L1982.93 1205.62 L1982.34 1205.62 L1981.75 1205.62 L1981.17 1205.62 L1980.58 1205.62 L1979.99 1205.62 L1979.41 1205.62 L1978.82 1205.62 L1978.24 1205.62 L1977.65 1205.62 L1977.06 1205.62 L1976.48 1205.62 L1975.89 1205.62 L1975.3 1205.62 L1974.72 1205.62 L1974.13 1205.62 L1973.54 1205.62 L1972.96 1205.62 L1972.37 1205.62 L1971.78 1205.62 L1971.2 1205.62 L1970.61 1205.62 L1970.03 1205.62 L1969.44 1205.62 L1968.85 1205.62 L1968.27 1205.62 L1967.68 1205.62 L1967.09 1205.62 L1966.51 1205.62 L1965.92 1205.62 L1965.33 1205.62 L1964.75 1205.62 L1964.16 1205.62 L1963.58 1205.62 L1962.99 1205.62 L1962.4 1205.62 L1961.82 1205.62 L1961.23 1205.62 L1960.64 1205.62 L1960.06 1205.62 L1959.47 1205.62 L1958.88 1205.62 L1958.3 1205.62 L1957.71 1205.62 L1957.12 1205.62 L1956.54 1205.62 L1955.95 1205.62 L1955.37 1205.62 L1954.78 1205.62 L1954.19 1205.62 L1953.61 1205.62 L1953.02 1205.62 L1952.43 1205.62 L1951.85 1205.62 L1951.26 1205.62 L1950.67 1205.62 L1950.09 1205.62 L1949.5 1205.62 L1948.91 1205.62 L1948.33 1205.62 L1947.74 1205.62 L1947.16 1205.62 L1946.57 1205.62 L1945.98 1205.62 L1945.4 1205.62 L1944.81 1205.62 L1944.22 1205.62 L1943.64 1205.62 L1943.05 1205.62 L1942.46 1205.62 L1941.88 1205.62 L1941.29 1205.62 L1940.71 1205.62 L1940.12 1205.62 L1939.53 1205.62 L1938.95 1205.62 L1938.36 1205.62 L1937.77 1205.62 L1937.19 1205.62 L1936.6 1205.62 L1936.01 1205.62 L1935.43 1205.62 L1934.84 1205.62 L1934.25 1205.62 L1933.67 1205.62 L1933.08 1205.62 L1932.5 1205.62 L1931.91 1205.62 L1931.32 1205.62 L1930.74 1205.62 L1930.15 1205.62 L1929.56 1205.62 L1928.98 1205.62 L1928.39 1205.62 L1927.8 1205.62 L1927.22 1205.62 L1926.63 1205.62 L1926.04 1205.62 L1925.46 1205.62 L1924.87 1205.62 L1924.29 1205.62 L1923.7 1205.62 L1923.11 1205.62 L1922.53 1205.62 L1921.94 1205.62 L1921.35 1205.62 L1920.77 1205.62 L1920.18 1205.62 L1919.59 1205.62 L1919.01 1205.62 L1918.42 1205.62 L1917.83 1205.62 L1917.25 1205.62 L1916.66 1205.62 L1916.08 1205.62 L1915.49 1205.62 L1914.9 1205.62 L1914.32 1205.62 L1913.73 1205.62 L1913.14 1205.62 L1912.56 1205.62 L1911.97 1205.62 L1911.38 1205.62 L1910.8 1205.62 L1910.21 1205.62 L1909.63 1205.62 L1909.04 1205.62 L1908.45 1205.62 L1907.87 1205.62 L1907.28 1205.62 L1906.69 1205.62 L1906.11 1205.62 L1905.52 1205.62 L1904.93 1205.62 L1904.35 1205.62 L1903.76 1205.62 L1903.17 1205.62 L1902.59 1205.62 L1902 1205.62 L1901.42 1205.62 L1900.83 1205.62 L1900.24 1205.62 L1899.66 1205.62 L1899.07 1205.62 L1898.48 1205.62 L1897.9 1205.62 L1897.31 1205.62 L1896.72 1205.62 L1896.14 1205.62 L1895.55 1205.62 L1894.96 1205.62 L1894.38 1205.62 L1893.79 1205.62 L1893.21 1205.62 L1892.62 1205.62 L1892.03 1205.62 L1891.45 1205.62 L1890.86 1205.62 L1890.27 1205.62 L1889.69 1205.62 L1889.1 1205.62 L1888.51 1205.62 L1887.93 1205.62 L1887.34 1205.62 L1886.76 1205.62 L1886.17 1205.62 L1885.58 1205.62 L1885 1205.62 L1884.41 1205.62 L1883.82 1205.62 L1883.24 1205.62 L1882.65 1205.62 L1882.06 1205.62 L1881.48 1205.62 L1880.89 1205.62 L1880.3 1205.62 L1879.72 1205.62 L1879.13 1205.62 L1878.55 1205.62 L1877.96 1205.62 L1877.37 1205.62 L1876.79 1205.62 L1876.2 1205.62 L1875.61 1205.62 L1875.03 1205.62 L1874.44 1205.62 L1873.85 1205.62 L1873.27 1205.62 L1872.68 1205.62 L1872.09 1205.62 L1871.51 1205.62 L1870.92 1205.62 L1870.34 1205.62 L1869.75 1205.62 L1869.16 1205.62 L1868.58 1205.62 L1867.99 1205.62 L1867.4 1205.62 L1866.82 1205.62 L1866.23 1205.62 L1865.64 1205.62 L1865.06 1205.62 L1864.47 1205.62 L1863.88 1205.62 L1863.3 1205.62 L1862.71 1205.62 L1862.13 1205.62 L1861.54 1205.62 L1860.95 1205.62 L1860.37 1205.62 L1859.78 1205.62 L1859.19 1205.62 L1858.61 1205.62 L1858.02 1205.62 L1857.43 1205.62 L1856.85 1205.62 L1856.26 1205.62 L1855.68 1205.62 L1855.09 1205.62 L1854.5 1205.62 L1853.92 1205.62 L1853.33 1205.62 L1852.74 1205.62 L1852.16 1205.62 L1851.57 1205.62 L1850.98 1205.62 L1850.4 1205.62 L1849.81 1205.62 L1849.22 1205.62 L1848.64 1205.62 L1848.05 1205.62 L1847.47 1205.62 L1846.88 1205.62 L1846.29 1205.62 L1845.71 1205.62 L1845.12 1205.62 L1844.53 1205.62 L1843.95 1205.62 L1843.36 1205.62 L1842.77 1205.62 L1842.19 1205.62 L1841.6 1205.62 L1841.01 1205.62 L1840.43 1205.62 L1839.84 1205.62 L1839.26 1205.62 L1838.67 1205.62 L1838.08 1205.62 L1837.5 1205.62 L1836.91 1205.62 L1836.32 1205.62 L1835.74 1205.62 L1835.15 1205.62 L1834.56 1205.62 L1833.98 1205.62 L1833.39 1205.62 L1832.81 1205.62 L1832.22 1205.62 L1831.63 1205.62 L1831.05 1205.62 L1830.46 1205.62 L1829.87 1205.62 L1829.29 1205.62 L1828.7 1205.62 L1828.11 1205.62 L1827.53 1205.62 L1826.94 1205.62 L1826.35 1205.62 L1825.77 1205.62 L1825.18 1205.62 L1824.6 1205.62 L1824.01 1205.62 L1823.42 1205.62 L1822.84 1205.62 L1822.25 1205.62 L1821.66 1205.62 L1821.08 1205.62 L1820.49 1205.62 L1819.9 1205.62 L1819.32 1205.62 L1818.73 1205.62 L1818.14 1205.62 L1817.56 1205.62 L1816.97 1205.62 L1816.39 1205.62 L1815.8 1205.62 L1815.21 1205.62 L1814.63 1205.62 L1814.04 1205.62 L1813.45 1205.62 L1812.87 1205.62 L1812.28 1205.62 L1811.69 1205.62 L1811.11 1205.62 L1810.52 1205.62 L1809.94 1205.62 L1809.35 1205.62 L1808.76 1205.62 L1808.18 1205.62 L1807.59 1205.62 L1807 1205.62 L1806.42 1205.62 L1805.83 1205.62 L1805.24 1205.62 L1804.66 1205.62 L1804.07 1205.62 L1803.48 1205.62 L1802.9 1205.62 L1802.31 1205.62 L1801.73 1205.62 L1801.14 1205.62 L1800.55 1205.62 L1799.97 1205.62 L1799.38 1205.62 L1798.79 1205.62 L1798.21 1205.62 L1797.62 1205.62 L1797.03 1205.62 L1796.45 1205.62 L1795.86 1205.62 L1795.27 1205.62 L1794.69 1205.62 L1794.1 1205.62 L1793.52 1205.62 L1792.93 1205.62 L1792.34 1205.62 L1791.76 1205.62 L1791.17 1205.62 L1790.58 1205.62 L1790 1205.62 L1789.41 1205.62 L1788.82 1205.62 L1788.24 1205.62 L1787.65 1205.62 L1787.06 1205.62 L1786.48 1205.62 L1785.89 1205.62 L1785.31 1205.62 L1784.72 1205.62 L1784.13 1205.62 L1783.55 1205.62 L1782.96 1205.62 L1782.37 1205.62 L1781.79 1205.62 L1781.2 1205.62 L1780.61 1205.62 L1780.03 1205.62 L1779.44 1205.62 L1778.86 1205.62 L1778.27 1205.62 L1777.68 1205.62 L1777.1 1205.62 L1776.51 1205.62 L1775.92 1205.62 L1775.34 1205.62 L1774.75 1205.62 L1774.16 1205.62 L1773.58 1205.62 L1772.99 1205.62 L1772.4 1205.62 L1771.82 1205.62 L1771.23 1205.62 L1770.65 1205.62 L1770.06 1205.62 L1769.47 1205.62 L1768.89 1205.62 L1768.3 1205.62 L1767.71 1205.62 L1767.13 1205.62 L1766.54 1205.62 L1765.95 1205.62 L1765.37 1205.62 L1764.78 1205.62 L1764.19 1205.62 L1763.61 1205.62 L1763.02 1205.62 L1762.44 1205.62 L1761.85 1205.62 L1761.26 1205.62 L1760.68 1205.62 L1760.09 1205.62 L1759.5 1205.62 L1758.92 1205.62 L1758.33 1205.62 L1757.74 1205.62 L1757.16 1205.62 L1756.57 1205.62 L1755.99 1205.62 L1755.4 1205.62 L1754.81 1205.62 L1754.23 1205.62 L1753.64 1205.62 L1753.05 1205.62 L1752.47 1205.62 L1751.88 1205.62 L1751.29 1205.62 L1750.71 1205.62 L1750.12 1205.62 L1749.53 1205.62 L1748.95 1205.62 L1748.36 1205.62 L1747.78 1205.62 L1747.19 1205.62 L1746.6 1205.62 L1746.02 1205.62 L1745.43 1205.62 L1744.84 1205.62 L1744.26 1205.62 L1743.67 1205.62 L1743.08 1205.62 L1742.5 1205.62 L1741.91 1205.62 L1741.32 1205.62 L1740.74 1205.62 L1740.15 1205.62 L1739.57 1205.62 L1738.98 1205.62 L1738.39 1205.62 L1737.81 1205.62 L1737.22 1205.62 L1736.63 1205.62 L1736.05 1205.62 L1735.46 1205.62 L1734.87 1205.62 L1734.29 1205.62 L1733.7 1205.62 L1733.11 1205.62 L1732.53 1205.62 L1731.94 1205.62 L1731.36 1205.62 L1730.77 1205.62 L1730.18 1205.62 L1729.6 1205.62 L1729.01 1205.62 L1728.42 1205.62 L1727.84 1205.62 L1727.25 1205.62 L1726.66 1205.62 L1726.08 1205.62 L1725.49 1205.62 L1724.91 1205.62 L1724.32 1205.62 L1723.73 1205.62 L1723.15 1205.62 L1722.56 1205.62 L1721.97 1205.62 L1721.39 1205.62 L1720.8 1205.62 L1720.21 1205.62 L1719.63 1205.62 L1719.04 1205.62 L1718.45 1205.62 L1717.87 1205.62 L1717.28 1205.62 L1716.7 1205.62 L1716.11 1205.62 L1715.52 1205.62 L1714.94 1205.62 L1714.35 1205.62 L1713.76 1205.62 L1713.18 1205.62 L1712.59 1205.62 L1712 1205.62 L1711.42 1205.62 L1710.83 1205.62 L1710.24 1205.62 L1709.66 1205.62 L1709.07 1205.62 L1708.49 1205.62 L1707.9 1205.62 L1707.31 1205.62 L1706.73 1205.62 L1706.14 1205.62 L1705.55 1205.62 L1704.97 1205.62 L1704.38 1205.62 L1703.79 1205.62 L1703.21 1205.62 L1702.62 1205.62 L1702.04 1205.62 L1701.45 1205.62 L1700.86 1205.62 L1700.28 1205.62 L1699.69 1205.62 L1699.1 1205.62 L1698.52 1205.62 L1697.93 1205.62 L1697.34 1205.62 L1696.76 1205.62 L1696.17 1205.62 L1695.58 1205.62 L1695 1205.62 L1694.41 1205.62 L1693.83 1205.62 L1693.24 1205.62 L1692.65 1205.62 L1692.07 1205.62 L1691.48 1205.62 L1690.89 1205.62 L1690.31 1205.62 L1689.72 1205.62 L1689.13 1205.62 L1688.55 1205.62 L1687.96 1205.62 L1687.37 1205.62 L1686.79 1205.62 L1686.2 1205.62 L1685.62 1205.62 L1685.03 1205.62 L1684.44 1205.62 L1683.86 1205.62 L1683.27 1205.62 L1682.68 1205.62 L1682.1 1205.62 L1681.51 1205.62 L1680.92 1205.62 L1680.34 1205.62 L1679.75 1205.62 L1679.17 1205.62 L1678.58 1205.62 L1677.99 1205.62 L1677.41 1205.62 L1676.82 1205.62 L1676.23 1205.62 L1675.65 1205.62 L1675.06 1205.62 L1674.47 1205.62 L1673.89 1205.62 L1673.3 1205.62 L1672.71 1205.62 L1672.13 1205.62 L1671.54 1205.62 L1670.96 1205.62 L1670.37 1205.62 L1669.78 1205.62 L1669.2 1205.62 L1668.61 1205.62 L1668.02 1205.62 L1667.44 1205.62 L1666.85 1205.62 L1666.26 1205.62 L1665.68 1205.62 L1665.09 1205.62 L1664.5 1205.62 L1663.92 1205.62 L1663.33 1205.62 L1662.75 1205.62 L1662.16 1205.62 L1661.57 1205.62 L1660.99 1205.62 L1660.4 1205.62 L1659.81 1205.62 L1659.23 1205.62 L1658.64 1205.62 L1658.05 1205.62 L1657.47 1205.62 L1656.88 1205.62 L1656.29 1205.62 L1655.71 1205.62 L1655.12 1205.62 L1654.54 1205.62 L1653.95 1205.62 L1653.36 1205.62 L1652.78 1205.62 L1652.19 1205.62 L1651.6 1205.62 L1651.02 1205.62 L1650.43 1205.62 L1649.84 1205.62 L1649.26 1205.62 L1648.67 1205.62 L1648.09 1205.62 L1647.5 1205.62 L1646.91 1205.62 L1646.33 1205.62 L1645.74 1205.62 L1645.15 1205.62 L1644.57 1205.62 L1643.98 1205.62 L1643.39 1205.62 L1642.81 1205.62 L1642.22 1205.62 L1641.63 1205.62 L1641.05 1205.62 L1640.46 1205.62 L1639.88 1205.62 L1639.29 1205.62 L1638.7 1205.62 L1638.12 1205.62 L1637.53 1205.62 L1636.94 1205.62 L1636.36 1205.62 L1635.77 1205.62 L1635.18 1205.62 L1634.6 1205.62 L1634.01 1205.62 L1633.42 1205.62 L1632.84 1205.62 L1632.25 1205.62 L1631.67 1205.62 L1631.08 1205.62 L1630.49 1205.62 L1629.91 1205.62 L1629.32 1205.62 L1628.73 1205.62 L1628.15 1205.62 L1627.56 1205.62 L1626.97 1205.62 L1626.39 1205.62 L1625.8 1205.62 L1625.22 1205.62 L1624.63 1205.62 L1624.04 1205.62 L1623.46 1205.62 L1622.87 1205.62 L1622.28 1205.62 L1621.7 1205.62 L1621.11 1205.62 L1620.52 1205.62 L1619.94 1205.62 L1619.35 1205.62 L1618.76 1205.62 L1618.18 1205.62 L1617.59 1205.62 L1617.01 1205.62 L1616.42 1205.62 L1615.83 1205.62 L1615.25 1205.62 L1614.66 1205.62 L1614.07 1205.62 L1613.49 1205.62 L1612.9 1205.62 L1612.31 1205.62 L1611.73 1205.62 L1611.14 1205.62 L1610.55 1205.62 L1609.97 1205.62 L1609.38 1205.62 L1608.8 1205.62 L1608.21 1205.62 L1607.62 1205.62 L1607.04 1205.62 L1606.45 1205.62 L1605.86 1205.62 L1605.28 1205.62 L1604.69 1205.62 L1604.1 1205.62 L1603.52 1205.62 L1602.93 1205.62 L1602.34 1205.62 L1601.76 1205.62 L1601.17 1205.62 L1600.59 1205.62 L1600 1205.62 L1599.41 1205.62 L1598.83 1205.62 L1598.24 1205.62 L1597.65 1205.62 L1597.07 1205.62 L1596.48 1205.62 L1595.89 1205.62 L1595.31 1205.62 L1594.72 1205.62 L1594.14 1205.62 L1593.55 1205.62 L1592.96 1205.62 L1592.38 1205.62 L1591.79 1205.62 L1591.2 1205.62 L1590.62 1205.62 L1590.03 1205.62 L1589.44 1205.62 L1588.86 1205.62 L1588.27 1205.62 L1587.68 1205.62 L1587.1 1205.62 L1586.51 1205.62 L1585.93 1205.62 L1585.34 1205.62 L1584.75 1205.62 L1584.17 1205.62 L1583.58 1205.62 L1582.99 1205.62 L1582.41 1205.62 L1581.82 1205.62 L1581.23 1205.62 L1580.65 1205.62 L1580.06 1205.62 L1579.47 1205.62 L1578.89 1205.62 L1578.3 1205.62 L1577.72 1205.62 L1577.13 1205.62 L1576.54 1205.62 L1575.96 1205.62 L1575.37 1205.62 L1574.78 1205.62 L1574.2 1205.62 L1573.61 1205.62 L1573.02 1205.62 L1572.44 1205.62 L1571.85 1205.62 L1571.27 1205.62 L1570.68 1205.62 L1570.09 1205.62 L1569.51 1205.62 L1568.92 1205.62 L1568.33 1205.62 L1567.75 1205.62 L1567.16 1205.62 L1566.57 1205.62 L1565.99 1205.62 L1565.4 1205.62 L1564.81 1205.62 L1564.23 1205.62 L1563.64 1205.62 L1563.06 1205.62 L1562.47 1205.62 L1561.88 1205.62 L1561.3 1205.62 L1560.71 1205.62 L1560.12 1205.62 L1559.54 1205.62 L1558.95 1205.62 L1558.36 1205.62 L1557.78 1205.62 L1557.19 1205.62 L1556.6 1205.62 L1556.02 1205.62 L1555.43 1205.62 L1554.85 1205.62 L1554.26 1205.62 L1553.67 1205.62 L1553.09 1205.62 L1552.5 1205.62 L1551.91 1205.62 L1551.33 1205.62 L1550.74 1205.62 L1550.15 1205.62 L1549.57 1205.62 L1548.98 1205.62 L1548.4 1205.62 L1547.81 1205.62 L1547.22 1205.62 L1546.64 1205.62 L1546.05 1205.62 L1545.46 1205.62 L1544.88 1205.62 L1544.29 1205.62 L1543.7 1205.62 L1543.12 1205.62 L1542.53 1205.62 L1541.94 1205.62 L1541.36 1205.62 L1540.77 1205.62 L1540.19 1205.62 L1539.6 1205.62 L1539.01 1205.62 L1538.43 1205.62 L1537.84 1205.62 L1537.25 1205.62 L1536.67 1205.62 L1536.08 1205.62 L1535.49 1205.62 L1534.91 1205.62 L1534.32 1205.62 L1533.73 1205.62 L1533.15 1205.62 L1532.56 1205.62 L1531.98 1205.62 L1531.39 1205.62 L1530.8 1205.62 L1530.22 1205.62 L1529.63 1205.62 L1529.04 1205.62 L1528.46 1205.62 L1527.87 1205.62 L1527.28 1205.62 L1526.7 1205.62 L1526.11 1205.62 L1525.52 1205.62 L1524.94 1205.62 L1524.35 1205.62 L1523.77 1205.62 L1523.18 1205.62 L1522.59 1205.62 L1522.01 1205.62 L1521.42 1205.62 L1520.83 1205.62 L1520.25 1205.62 L1519.66 1205.62 L1519.07 1205.62 L1518.49 1205.62 L1517.9 1205.62 L1517.32 1205.62 L1516.73 1205.62 L1516.14 1205.62 L1515.56 1205.62 L1514.97 1205.62 L1514.38 1205.62 L1513.8 1205.62 L1513.21 1205.62 L1512.62 1205.62 L1512.04 1205.62 L1511.45 1205.62 L1510.86 1205.62 L1510.28 1205.62 L1509.69 1205.62 L1509.11 1205.62 L1508.52 1205.62 L1507.93 1205.62 L1507.35 1205.62 L1506.76 1205.62 L1506.17 1205.62 L1505.59 1205.62 L1505 1205.62 L1504.41 1205.62 L1503.83 1205.62 L1503.24 1205.62 L1502.65 1205.62 L1502.07 1205.62 L1501.48 1205.62 L1500.9 1205.62 L1500.31 1205.62 L1499.72 1205.62 L1499.14 1205.62 L1498.55 1205.62 L1497.96 1205.62 L1497.38 1205.62 L1496.79 1205.62 L1496.2 1205.62 L1495.62 1205.62 L1495.03 1205.62 L1494.45 1205.62 L1493.86 1205.62 L1493.27 1205.62 L1492.69 1205.62 L1492.1 1205.62 L1491.51 1205.62 L1490.93 1205.62 L1490.34 1205.62 L1489.75 1205.62 L1489.17 1205.62 L1488.58 1205.62 L1487.99 1205.62 L1487.41 1205.62 L1486.82 1205.62 L1486.24 1205.62 L1485.65 1205.62 L1485.06 1205.62 L1484.48 1205.62 L1483.89 1205.62 L1483.3 1205.62 L1482.72 1205.62 L1482.13 1205.62 L1481.54 1205.62 L1480.96 1205.62 L1480.37 1205.62 L1479.78 1205.62 L1479.2 1205.62 L1478.61 1205.62 L1478.03 1205.62 L1477.44 1205.62 L1476.85 1205.62 L1476.27 1205.62 L1475.68 1205.62 L1475.09 1205.62 L1474.51 1205.62 L1473.92 1205.62 L1473.33 1205.62 L1472.75 1205.62 L1472.16 1205.62 L1471.57 1205.62 L1470.99 1205.62 L1470.4 1205.62 L1469.82 1205.62 L1469.23 1205.62 L1468.64 1205.62 L1468.06 1205.62 L1467.47 1205.62 L1466.88 1205.62 L1466.3 1205.62 L1465.71 1205.62 L1465.12 1205.62 L1464.54 1205.62 L1463.95 1205.62 L1463.37 1205.62 L1462.78 1205.62 L1462.19 1205.62 L1461.61 1205.62 L1461.02 1205.62 L1460.43 1205.62 L1459.85 1205.62 L1459.26 1205.62 L1458.67 1205.62 L1458.09 1205.62 L1457.5 1205.62 L1456.91 1205.62 L1456.33 1205.62 L1455.74 1205.62 L1455.16 1205.62 L1454.57 1205.62 L1453.98 1205.62 L1453.4 1205.62 L1452.81 1205.62 L1452.22 1205.62 L1451.64 1205.62 L1451.05 1205.62 L1450.46 1205.62 L1449.88 1205.62 L1449.29 1205.62 L1448.7 1205.62 L1448.12 1205.62 L1447.53 1205.62 L1446.95 1205.62 L1446.36 1205.62 L1445.77 1205.62 L1445.19 1205.62 L1444.6 1205.62 L1444.01 1205.62 L1443.43 1205.62 L1442.84 1205.62 L1442.25 1205.62 L1441.67 1205.62 L1441.08 1205.62 L1440.5 1205.62 L1439.91 1205.62 L1439.32 1205.62 L1438.74 1205.62 L1438.15 1205.62 L1437.56 1205.62 L1436.98 1205.62 L1436.39 1205.62 L1435.8 1205.62 L1435.22 1205.62 L1434.63 1205.62 L1434.04 1205.62 L1433.46 1205.62 L1432.87 1205.62 L1432.29 1205.62 L1431.7 1205.62 L1431.11 1205.62 L1430.53 1205.62 L1429.94 1205.62 L1429.35 1205.62 L1428.77 1205.62 L1428.18 1205.62 L1427.59 1205.62 L1427.01 1205.62 L1426.42 1205.62 L1425.83 1205.62 L1425.25 1205.62 L1424.66 1205.62 L1424.08 1205.62 L1423.49 1205.62 L1422.9 1205.62 L1422.32 1205.62 L1421.73 1205.62 L1421.14 1205.62 L1420.56 1205.62 L1419.97 1205.62 L1419.38 1205.62 L1418.8 1205.62 L1418.21 1205.62 L1417.63 1205.62 L1417.04 1205.62 L1416.45 1205.62 L1415.87 1205.62 L1415.28 1205.62 L1414.69 1205.62 L1414.11 1205.62 L1413.52 1205.62 L1412.93 1205.62 L1412.35 1205.62 L1411.76 1205.62 L1411.17 1205.62 L1410.59 1205.62 L1410 1205.62 L1409.42 1205.62 L1408.83 1205.62 L1408.24 1205.62 L1407.66 1205.62 L1407.07 1205.62 L1406.48 1205.62 L1405.9 1205.62 L1405.31 1205.62 L1404.72 1205.62 L1404.14 1205.62 L1403.55 1205.62 L1402.96 1205.62 L1402.38 1205.62 L1401.79 1205.62 L1401.21 1205.62 L1400.62 1205.62 L1400.03 1205.62 L1399.45 1205.62 L1398.86 1205.62 L1398.27 1205.62 L1397.69 1205.62 L1397.1 1205.62 L1396.51 1205.62 L1395.93 1205.62 L1395.34 1205.62 L1394.75 1205.62 L1394.17 1205.62 L1393.58 1205.62 L1393 1205.62 L1392.41 1205.62 L1391.82 1205.62 L1391.24 1205.62 L1390.65 1205.62 L1390.06 1205.62 L1389.48 1205.62 L1388.89 1205.62 L1388.3 1205.62 L1387.72 1205.62 L1387.13 1205.62 L1386.55 1205.62 L1385.96 1205.62 L1385.37 1205.62 L1384.79 1205.62 L1384.2 1205.62 L1383.61 1205.62 L1383.03 1205.62 L1382.44 1205.62 L1381.85 1205.62 L1381.27 1205.62 L1380.68 1205.62 L1380.09 1205.62 L1379.51 1205.62 L1378.92 1205.62 L1378.34 1205.62 L1377.75 1205.62 L1377.16 1205.62 L1376.58 1205.62 L1375.99 1205.62 L1375.4 1205.62 L1374.82 1205.62 L1374.23 1205.62 L1373.64 1205.62 L1373.06 1205.62 L1372.47 1205.62 L1371.88 1205.62 L1371.3 1205.62 L1370.71 1205.62 L1370.13 1205.62 L1369.54 1205.62 L1368.95 1205.62 L1368.37 1205.62 L1367.78 1205.62 L1367.19 1205.62 L1366.61 1205.62 L1366.02 1205.62 L1365.43 1205.62 L1364.85 1205.62 L1364.26 1205.62 L1363.68 1205.62 L1363.09 1205.62 L1362.5 1205.62 L1361.92 1205.62 L1361.33 1205.62 L1360.74 1205.62 L1360.16 1205.62 L1359.57 1205.62 L1358.98 1205.62 L1358.4 1205.62 L1357.81 1205.62 L1357.22 1205.62 L1356.64 1205.62 L1356.05 1205.62 L1355.47 1205.62 L1354.88 1205.62 L1354.29 1205.62 L1353.71 1205.62 L1353.12 1205.62 L1352.53 1205.62 L1351.95 1205.62 L1351.36 1205.62 L1350.77 1205.62 L1350.19 1205.62 L1349.6 1205.62 L1349.01 1205.62 L1348.43 1205.62 L1347.84 1205.62 L1347.26 1205.62 L1346.67 1205.62 L1346.08 1205.62 L1345.5 1205.62 L1344.91 1205.62 L1344.32 1205.62 L1343.74 1205.62 L1343.15 1205.62 L1342.56 1205.62 L1341.98 1205.62 L1341.39 1205.62 L1340.8 1205.62 L1340.22 1205.62 L1339.63 1205.62 L1339.05 1205.62 L1338.46 1205.62 L1337.87 1205.62 L1337.29 1205.62 L1336.7 1205.62 L1336.11 1205.62 L1335.53 1205.62 L1334.94 1205.62 L1334.35 1205.62 L1333.77 1205.62 L1333.18 1205.62 L1332.6 1205.62 L1332.01 1205.62 L1331.42 1205.62 L1330.84 1205.62 L1330.25 1205.62 L1329.66 1205.62 L1329.08 1205.62 L1328.49 1205.62 L1327.9 1205.62 L1327.32 1205.62 L1326.73 1205.62 L1326.14 1205.62 L1325.56 1205.62 L1324.97 1205.62 L1324.39 1205.62 L1323.8 1205.62 L1323.21 1205.62 L1322.63 1205.62 L1322.04 1205.62 L1321.45 1205.62 L1320.87 1205.62 L1320.28 1205.62 L1319.69 1205.62 L1319.11 1205.62 L1318.52 1205.62 L1317.93 1205.62 L1317.35 1205.62 L1316.76 1205.62 L1316.18 1205.62 L1315.59 1205.62 L1315 1205.62 L1314.42 1205.62 L1313.83 1205.62 L1313.24 1205.62 L1312.66 1205.62 L1312.07 1205.62 L1311.48 1205.62 L1310.9 1205.62 L1310.31 1205.62 L1309.73 1205.62 L1309.14 1205.62 L1308.55 1205.62 L1307.97 1205.62 L1307.38 1205.62 L1306.79 1205.62 L1306.21 1205.62 L1305.62 1205.62 L1305.03 1205.62 L1304.45 1205.62 L1303.86 1205.62 L1303.27 1205.62 L1302.69 1205.62 L1302.1 1205.62 L1301.52 1205.62 L1300.93 1205.62 L1300.34 1205.62 L1299.76 1205.62 L1299.17 1205.62 L1298.58 1205.62 L1298 1205.62 L1297.41 1205.62 L1296.82 1205.62 L1296.24 1205.62 L1295.65 1205.62 L1295.06 1205.62 L1294.48 1205.62 L1293.89 1205.62 L1293.31 1205.62 L1292.72 1205.62 L1292.13 1205.62 L1291.55 1205.62 L1290.96 1205.62 L1290.37 1205.62 L1289.79 1205.62 L1289.2 1205.62 L1288.61 1205.62 L1288.03 1205.62 L1287.44 1205.62 L1286.86 1205.62 L1286.27 1205.62 L1285.68 1205.62 L1285.1 1205.62 L1284.51 1205.62 L1283.92 1205.62 L1283.34 1205.62 L1282.75 1205.62 L1282.16 1205.62 L1281.58 1205.62 L1280.99 1205.62 L1280.4 1205.62 L1279.82 1205.62 L1279.23 1205.62 L1278.65 1205.62 L1278.06 1205.62 L1277.47 1205.62 L1276.89 1205.62 L1276.3 1205.62 L1275.71 1205.62 L1275.13 1205.62 L1274.54 1205.62 L1273.95 1205.62 L1273.37 1205.62 L1272.78 1205.62 L1272.19 1205.62 L1271.61 1205.62 L1271.02 1205.62 L1270.44 1205.62 L1269.85 1205.62 L1269.26 1205.62 L1268.68 1205.62 L1268.09 1205.62 L1267.5 1205.62 L1266.92 1205.62 L1266.33 1205.62 L1265.74 1205.62 L1265.16 1205.62 L1264.57 1205.62 L1263.98 1205.62 L1263.4 1205.62 L1262.81 1205.62 L1262.23 1205.62 L1261.64 1205.62 L1261.05 1205.62 L1260.47 1205.62 L1259.88 1205.62 L1259.29 1205.62 L1258.71 1205.62 L1258.12 1205.62 L1257.53 1205.62 L1256.95 1205.62 L1256.36 1205.62 L1255.78 1205.62 L1255.19 1205.62 L1254.6 1205.62 L1254.02 1205.62 L1253.43 1205.62 L1252.84 1205.62 L1252.26 1205.62 L1251.67 1205.62 L1251.08 1205.62 L1250.5 1205.62 L1249.91 1205.62 L1249.32 1205.62 L1248.74 1205.62 L1248.15 1205.62 L1247.57 1205.62 L1246.98 1205.62 L1246.39 1205.62 L1245.81 1205.62 L1245.22 1205.62 L1244.63 1205.62 L1244.05 1205.62 L1243.46 1205.62 L1242.87 1205.62 L1242.29 1205.62 L1241.7 1205.62 L1241.11 1205.62 L1240.53 1205.62 L1239.94 1205.62 L1239.36 1205.62 L1238.77 1205.62 L1238.18 1205.62 L1237.6 1205.62 L1237.01 1205.62 L1236.42 1205.62 L1235.84 1205.62 L1235.25 1205.62 L1234.66 1205.62 L1234.08 1205.62 L1233.49 1205.62 L1232.91 1205.62 L1232.32 1205.62 L1231.73 1205.62 L1231.15 1205.62 L1230.56 1205.62 L1229.97 1205.62 L1229.39 1205.62 L1228.8 1205.62 L1228.21 1205.62 L1227.63 1205.62 L1227.04 1205.62 L1226.45 1205.62 L1225.87 1205.62 L1225.28 1205.62 L1224.7 1205.62 L1224.11 1205.62 L1223.52 1205.62 L1222.94 1205.62 L1222.35 1205.62 L1221.76 1205.62 L1221.18 1205.62 L1220.59 1205.62 L1220 1205.62 L1219.42 1205.62 L1218.83 1205.62 L1218.24 1205.62 L1217.66 1205.62 L1217.07 1205.62 L1216.49 1205.62 L1215.9 1205.62 L1215.31 1205.62 L1214.73 1205.62 L1214.14 1205.62 L1213.55 1205.62 L1212.97 1205.62 L1212.38 1205.62 L1211.79 1205.62 L1211.21 1205.62 L1210.62 1205.62 L1210.03 1205.62 L1209.45 1205.62 L1208.86 1205.62 L1208.28 1205.62 L1207.69 1205.62 L1207.1 1205.62 L1206.52 1205.62 L1205.93 1205.62 L1205.34 1205.62 L1204.76 1205.62 L1204.17 1205.62 L1203.58 1205.62 L1203 1205.62 L1202.41 1205.62 L1201.83 1205.62 L1201.24 1205.62 L1200.65 1205.62 L1200.07 1205.62 L1199.48 1205.62 L1198.89 1205.62 L1198.31 1205.62 L1197.72 1205.62 L1197.13 1205.62 L1196.55 1205.62 L1195.96 1205.62 L1195.37 1205.62 L1194.79 1205.62 L1194.2 1205.62 L1193.62 1205.62 L1193.03 1205.62 L1192.44 1205.62 L1191.86 1205.62 L1191.27 1205.62 L1190.68 1205.62 L1190.1 1205.62 L1189.51 1205.62 L1188.92 1205.62 L1188.34 1205.62 L1187.75 1205.62 L1187.16 1205.62 L1186.58 1205.62 L1185.99 1205.62 L1185.41 1205.62 L1184.82 1205.62 L1184.23 1205.62 L1183.65 1205.62 L1183.06 1205.62 L1182.47 1205.62 L1181.89 1205.62 L1181.3 1205.62 L1180.71 1205.62 L1180.13 1205.62 L1179.54 1205.62 L1178.96 1205.62 L1178.37 1205.62 L1177.78 1205.62 L1177.2 1205.62 L1176.61 1205.62 L1176.02 1205.62 L1175.44 1205.62 L1174.85 1205.62 L1174.26 1205.62 L1173.68 1205.62 L1173.09 1205.62 L1172.5 1205.62 L1171.92 1205.62 L1171.33 1205.62 L1170.75 1205.62 L1170.16 1205.62 L1169.57 1205.62 L1168.99 1205.62 L1168.4 1205.62 L1167.81 1205.62 L1167.23 1205.62 L1166.64 1205.62 L1166.05 1205.62 L1165.47 1205.62 L1164.88 1205.62 L1164.29 1205.62 L1163.71 1205.62 L1163.12 1205.62 L1162.54 1205.62 L1161.95 1205.62 L1161.36 1205.62 L1160.78 1205.62 L1160.19 1205.62 L1159.6 1205.62 L1159.02 1205.62 L1158.43 1205.62 L1157.84 1205.62 L1157.26 1205.62 L1156.67 1205.62 L1156.09 1205.62 L1155.5 1205.62 L1154.91 1205.62 L1154.33 1205.62 L1153.74 1205.62 L1153.15 1205.62 L1152.57 1205.62 L1151.98 1205.62 L1151.39 1205.62 L1150.81 1205.62 L1150.22 1205.62 L1149.63 1205.62 L1149.05 1205.62 L1148.46 1205.62 L1147.88 1205.62 L1147.29 1205.62 L1146.7 1205.62 L1146.12 1205.62 L1145.53 1205.62 L1144.94 1205.62 L1144.36 1205.62 L1143.77 1205.62 L1143.18 1205.62 L1142.6 1205.62 L1142.01 1205.62 L1141.42 1205.62 L1140.84 1205.62 L1140.25 1205.62 L1139.67 1205.62 L1139.08 1205.62 L1138.49 1205.62 L1137.91 1205.62 L1137.32 1205.62 L1136.73 1205.62 L1136.15 1205.62 L1135.56 1205.62 L1134.97 1205.62 L1134.39 1205.62 L1133.8 1205.62 L1133.21 1205.62 L1132.63 1205.62 L1132.04 1205.62 L1131.46 1205.62 L1130.87 1205.62 L1130.28 1205.62 L1129.7 1205.62 L1129.11 1205.62 L1128.52 1205.62 L1127.94 1205.62 L1127.35 1205.62 L1126.76 1205.62 L1126.18 1205.62 L1125.59 1205.62 L1125.01 1205.62 L1124.42 1205.62 L1123.83 1205.62 L1123.25 1205.62 L1122.66 1205.62 L1122.07 1205.62 L1121.49 1205.62 L1120.9 1205.62 L1120.31 1205.62 L1119.73 1205.62 L1119.14 1205.62 L1118.55 1205.62 L1117.97 1205.62 L1117.38 1205.62 L1116.8 1205.62 L1116.21 1205.62 L1115.62 1205.62 L1115.04 1205.62 L1114.45 1205.62 L1113.86 1205.62 L1113.28 1205.62 L1112.69 1205.62 L1112.1 1205.62 L1111.52 1205.62 L1110.93 1205.62 L1110.34 1205.62 L1109.76 1205.62 L1109.17 1205.62 L1108.59 1205.62 L1108 1205.62 L1107.41 1205.62 L1106.83 1205.62 L1106.24 1205.62 L1105.65 1205.62 L1105.07 1205.62 L1104.48 1205.62 L1103.89 1205.62 L1103.31 1205.62 L1102.72 1205.62 L1102.14 1205.62 L1101.55 1205.62 L1100.96 1205.62 L1100.38 1205.62 L1099.79 1205.62 L1099.2 1205.62 L1098.62 1205.62 L1098.03 1205.62 L1097.44 1205.62 L1096.86 1205.62 L1096.27 1205.62 L1095.68 1205.62 L1095.1 1205.62 L1094.51 1205.62 L1093.93 1205.62 L1093.34 1205.62 L1092.75 1205.62 L1092.17 1205.62 L1091.58 1205.62 L1090.99 1205.62 L1090.41 1205.62 L1089.82 1205.62 L1089.23 1205.62 L1088.65 1205.62 L1088.06 1205.62 L1087.47 1205.62 L1086.89 1205.62 L1086.3 1205.62 L1085.72 1205.62 L1085.13 1205.62 L1084.54 1205.62 L1083.96 1205.62 L1083.37 1205.62 L1082.78 1205.62 L1082.2 1205.62 L1081.61 1205.62 L1081.02 1205.62 L1080.44 1205.62 L1079.85 1205.62 L1079.26 1205.62 L1078.68 1205.62 L1078.09 1205.62 L1077.51 1205.62 L1076.92 1205.62 L1076.33 1205.62 L1075.75 1205.62 L1075.16 1205.62 L1074.57 1205.62 L1073.99 1205.62 L1073.4 1205.62 L1072.81 1205.62 L1072.23 1205.62 L1071.64 1205.62 L1071.06 1205.62 L1070.47 1205.62 L1069.88 1205.62 L1069.3 1205.62 L1068.71 1205.62 L1068.12 1205.62 L1067.54 1205.62 L1066.95 1205.62 L1066.36 1205.62 L1065.78 1205.62 L1065.19 1205.62 L1064.6 1205.62 L1064.02 1205.62 L1063.43 1205.62 L1062.85 1205.62 L1062.26 1205.62 L1061.67 1205.62 L1061.09 1205.62 L1060.5 1205.62 L1059.91 1205.62 L1059.33 1205.62 L1058.74 1205.62 L1058.15 1205.62 L1057.57 1205.62 L1056.98 1205.62 L1056.39 1205.62 L1055.81 1205.62 L1055.22 1205.62 L1054.64 1205.62 L1054.05 1205.62 L1053.46 1205.62 L1052.88 1205.62 L1052.29 1205.62 L1051.7 1205.62 L1051.12 1205.62 L1050.53 1205.62 L1049.94 1205.62 L1049.36 1205.62 L1048.77 1205.62 L1048.19 1205.62 L1047.6 1205.62 L1047.01 1205.62 L1046.43 1205.62 L1045.84 1205.62 L1045.25 1205.62 L1044.67 1205.62 L1044.08 1205.62 L1043.49 1205.62 L1042.91 1205.62 L1042.32 1205.62 L1041.73 1205.62 L1041.15 1205.62 L1040.56 1205.62 L1039.98 1205.62 L1039.39 1205.62 L1038.8 1205.62 L1038.22 1205.62 L1037.63 1205.62 L1037.04 1205.62 L1036.46 1205.62 L1035.87 1205.62 L1035.28 1205.62 L1034.7 1205.62 L1034.11 1205.62 L1033.52 1205.62 L1032.94 1205.62 L1032.35 1205.62 L1031.77 1205.62 L1031.18 1205.62 L1030.59 1205.62 L1030.01 1205.62 L1029.42 1205.62 L1028.83 1205.62 L1028.25 1205.62 L1027.66 1205.62 L1027.07 1205.62 L1026.49 1205.62 L1025.9 1205.62 L1025.32 1205.62 L1024.73 1205.62 L1024.14 1205.62 L1023.56 1205.62 L1022.97 1205.62 L1022.38 1205.62 L1021.8 1205.62 L1021.21 1205.62 L1020.62 1205.62 L1020.04 1205.62 L1019.45 1205.62 L1018.86 1205.62 L1018.28 1205.62 L1017.69 1205.62 L1017.11 1205.62 L1016.52 1205.62 L1015.93 1205.62 L1015.35 1205.62 L1014.76 1205.62 L1014.17 1205.62 L1013.59 1205.62 L1013 1205.62 L1012.41 1205.62 L1011.83 1205.62 L1011.24 1205.62 L1010.65 1205.62 L1010.07 1205.62 L1009.48 1205.62 L1008.9 1205.62 L1008.31 1205.62 L1007.72 1205.62 L1007.14 1205.62 L1006.55 1205.62 L1005.96 1205.62 L1005.38 1205.62 L1004.79 1205.62 L1004.2 1205.62 L1003.62 1205.62 L1003.03 1205.62 L1002.44 1205.62 L1001.86 1205.62 L1001.27 1205.62 L1000.69 1205.62 L1000.1 1205.62 L999.513 1205.62 L998.926 1205.62 L998.34 1205.62 L997.754 1205.62 L997.167 1205.62 L996.581 1205.62 L995.994 1205.62 L995.408 1205.62 L994.822 1205.62 L994.235 1205.62 L993.649 1205.62 L993.062 1205.62 L992.476 1205.62 L991.889 1205.62 L991.303 1205.62 L990.717 1205.62 L990.13 1205.62 L989.544 1205.62 L988.957 1205.62 L988.371 1205.62 L987.785 1205.62 L987.198 1205.62 L986.612 1205.62 L986.025 1205.62  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1205.92 986.612,1205.92 987.198,1205.92 987.785,1205.92 988.371,1205.92 988.957,1205.92 989.544,1205.92 990.13,1205.92 990.717,1205.92 991.303,1205.92 991.889,1205.92 992.476,1205.92 993.062,1205.92 993.649,1205.92 994.235,1205.92 994.822,1205.92 995.408,1205.92 995.994,1205.92 996.581,1205.92 997.167,1205.92 997.754,1205.92 998.34,1205.92 998.926,1205.92 999.513,1205.92 1000.1,1205.92 1000.69,1205.92 1001.27,1205.92 1001.86,1205.92 1002.44,1205.92 1003.03,1205.92 1003.62,1205.92 1004.2,1205.92 1004.79,1205.92 1005.38,1205.92 1005.96,1205.92 1006.55,1205.92 1007.14,1205.92 1007.72,1205.92 1008.31,1205.92 1008.9,1205.92 1009.48,1205.92 1010.07,1205.92 1010.65,1205.92 1011.24,1205.92 1011.83,1205.92 1012.41,1205.92 1013,1205.92 1013.59,1205.92 1014.17,1205.92 1014.76,1205.92 1015.35,1205.92 1015.93,1205.92 1016.52,1205.92 1017.11,1205.92 1017.69,1205.92 1018.28,1205.92 1018.86,1205.92 1019.45,1205.92 1020.04,1205.92 1020.62,1205.92 1021.21,1205.92 1021.8,1205.92 1022.38,1205.92 1022.97,1205.92 1023.56,1205.92 1024.14,1205.92 1024.73,1205.92 1025.32,1205.92 1025.9,1205.92 1026.49,1205.92 1027.07,1205.92 1027.66,1205.92 1028.25,1205.92 1028.83,1205.92 1029.42,1205.92 1030.01,1205.92 1030.59,1205.92 1031.18,1205.92 1031.77,1205.92 1032.35,1205.92 1032.94,1205.92 1033.52,1205.92 1034.11,1205.92 1034.7,1205.92 1035.28,1205.92 1035.87,1205.92 1036.46,1205.92 1037.04,1205.92 1037.63,1205.92 1038.22,1205.92 1038.8,1205.92 1039.39,1205.92 1039.98,1205.92 1040.56,1205.92 1041.15,1205.92 1041.73,1205.92 1042.32,1205.92 1042.91,1205.92 1043.49,1205.92 1044.08,1205.92 1044.67,1205.92 1045.25,1205.92 1045.84,1205.92 1046.43,1205.92 1047.01,1205.92 1047.6,1205.92 1048.19,1205.92 1048.77,1205.92 1049.36,1205.92 1049.94,1205.92 1050.53,1205.92 1051.12,1205.92 1051.7,1205.92 1052.29,1205.92 1052.88,1205.92 1053.46,1205.92 1054.05,1205.92 1054.64,1205.92 1055.22,1205.92 1055.81,1205.92 1056.39,1205.92 1056.98,1205.92 1057.57,1205.92 1058.15,1205.92 1058.74,1205.92 1059.33,1205.92 1059.91,1205.92 1060.5,1205.92 1061.09,1205.92 1061.67,1205.92 1062.26,1205.92 1062.85,1205.92 1063.43,1205.92 1064.02,1205.92 1064.6,1205.92 1065.19,1205.92 1065.78,1205.92 1066.36,1205.92 1066.95,1205.92 1067.54,1205.92 1068.12,1205.92 1068.71,1205.92 1069.3,1205.92 1069.88,1205.92 1070.47,1205.92 1071.06,1205.92 1071.64,1205.92 1072.23,1205.92 1072.81,1205.92 1073.4,1205.92 1073.99,1205.92 1074.57,1205.92 1075.16,1205.92 1075.75,1205.92 1076.33,1205.92 1076.92,1205.92 1077.51,1205.92 1078.09,1205.92 1078.68,1205.92 1079.26,1205.92 1079.85,1205.92 1080.44,1205.92 1081.02,1205.92 1081.61,1205.92 1082.2,1205.92 1082.78,1205.92 1083.37,1205.92 1083.96,1205.92 1084.54,1205.92 1085.13,1205.92 1085.72,1205.92 1086.3,1205.92 1086.89,1205.92 1087.47,1205.92 1088.06,1205.92 1088.65,1205.92 1089.23,1205.92 1089.82,1205.92 1090.41,1205.92 1090.99,1205.92 1091.58,1205.92 1092.17,1205.92 1092.75,1205.92 1093.34,1205.92 1093.93,1205.92 1094.51,1205.92 1095.1,1205.92 1095.68,1205.92 1096.27,1205.92 1096.86,1205.92 1097.44,1205.92 1098.03,1205.92 1098.62,1205.92 1099.2,1205.92 1099.79,1205.92 1100.38,1205.92 1100.96,1205.92 1101.55,1205.92 1102.14,1205.92 1102.72,1205.92 1103.31,1205.92 1103.89,1205.92 1104.48,1205.92 1105.07,1205.92 1105.65,1205.92 1106.24,1205.92 1106.83,1205.92 1107.41,1205.92 1108,1205.92 1108.59,1205.92 1109.17,1205.92 1109.76,1205.92 1110.34,1205.92 1110.93,1205.92 1111.52,1205.92 1112.1,1205.92 1112.69,1205.92 1113.28,1205.92 1113.86,1205.92 1114.45,1205.92 1115.04,1205.92 1115.62,1205.92 1116.21,1205.92 1116.8,1205.92 1117.38,1205.92 1117.97,1205.92 1118.55,1205.92 1119.14,1205.92 1119.73,1205.92 1120.31,1205.92 1120.9,1205.92 1121.49,1205.92 1122.07,1205.92 1122.66,1205.92 1123.25,1205.92 1123.83,1205.92 1124.42,1205.92 1125.01,1205.92 1125.59,1205.92 1126.18,1205.92 1126.76,1205.92 1127.35,1205.92 1127.94,1205.92 1128.52,1205.92 1129.11,1205.92 1129.7,1205.92 1130.28,1205.92 1130.87,1205.92 1131.46,1205.92 1132.04,1205.92 1132.63,1205.92 1133.21,1205.92 1133.8,1205.92 1134.39,1205.92 1134.97,1205.92 1135.56,1205.92 1136.15,1205.92 1136.73,1205.92 1137.32,1205.92 1137.91,1205.92 1138.49,1205.92 1139.08,1205.92 1139.67,1205.92 1140.25,1205.92 1140.84,1205.92 1141.42,1205.92 1142.01,1205.92 1142.6,1205.92 1143.18,1205.92 1143.77,1205.92 1144.36,1205.92 1144.94,1205.92 1145.53,1205.92 1146.12,1205.92 1146.7,1205.92 1147.29,1205.92 1147.88,1205.92 1148.46,1205.92 1149.05,1205.92 1149.63,1205.92 1150.22,1205.92 1150.81,1205.92 1151.39,1205.92 1151.98,1205.92 1152.57,1205.92 1153.15,1205.92 1153.74,1205.92 1154.33,1205.92 1154.91,1205.92 1155.5,1205.92 1156.09,1205.92 1156.67,1205.92 1157.26,1205.92 1157.84,1205.92 1158.43,1205.92 1159.02,1205.92 1159.6,1205.92 1160.19,1205.92 1160.78,1205.92 1161.36,1205.92 1161.95,1205.92 1162.54,1205.92 1163.12,1205.92 1163.71,1205.92 1164.29,1205.92 1164.88,1205.92 1165.47,1205.92 1166.05,1205.92 1166.64,1205.92 1167.23,1205.92 1167.81,1205.92 1168.4,1205.92 1168.99,1205.92 1169.57,1205.92 1170.16,1205.92 1170.75,1205.92 1171.33,1205.92 1171.92,1205.92 1172.5,1205.92 1173.09,1205.92 1173.68,1205.92 1174.26,1205.92 1174.85,1205.92 1175.44,1205.92 1176.02,1205.92 1176.61,1205.92 1177.2,1205.92 1177.78,1205.92 1178.37,1205.92 1178.96,1205.92 1179.54,1205.92 1180.13,1205.92 1180.71,1205.92 1181.3,1205.92 1181.89,1205.92 1182.47,1205.92 1183.06,1205.92 1183.65,1205.92 1184.23,1205.92 1184.82,1205.92 1185.41,1205.92 1185.99,1205.92 1186.58,1205.92 1187.16,1205.92 1187.75,1205.92 1188.34,1205.92 1188.92,1205.92 1189.51,1205.92 1190.1,1205.92 1190.68,1205.92 1191.27,1205.92 1191.86,1205.92 1192.44,1205.92 1193.03,1205.92 1193.62,1205.92 1194.2,1205.92 1194.79,1205.92 1195.37,1205.92 1195.96,1205.92 1196.55,1205.92 1197.13,1205.92 1197.72,1205.92 1198.31,1205.92 1198.89,1205.92 1199.48,1205.92 1200.07,1205.92 1200.65,1205.92 1201.24,1205.92 1201.83,1205.92 1202.41,1205.92 1203,1205.92 1203.58,1205.92 1204.17,1205.92 1204.76,1205.92 1205.34,1205.92 1205.93,1205.92 1206.52,1205.92 1207.1,1205.92 1207.69,1205.92 1208.28,1205.92 1208.86,1205.92 1209.45,1205.92 1210.03,1205.92 1210.62,1205.92 1211.21,1205.92 1211.79,1205.92 1212.38,1205.92 1212.97,1205.92 1213.55,1205.92 1214.14,1205.92 1214.73,1205.92 1215.31,1205.92 1215.9,1205.92 1216.49,1205.92 1217.07,1205.92 1217.66,1205.92 1218.24,1205.92 1218.83,1205.92 1219.42,1205.92 1220,1205.92 1220.59,1205.92 1221.18,1205.92 1221.76,1205.92 1222.35,1205.92 1222.94,1205.92 1223.52,1205.92 1224.11,1205.92 1224.7,1205.92 1225.28,1205.92 1225.87,1205.92 1226.45,1205.92 1227.04,1205.92 1227.63,1205.92 1228.21,1205.92 1228.8,1205.92 1229.39,1205.92 1229.97,1205.92 1230.56,1205.92 1231.15,1205.92 1231.73,1205.92 1232.32,1205.92 1232.91,1205.92 1233.49,1205.92 1234.08,1205.92 1234.66,1205.92 1235.25,1205.92 1235.84,1205.92 1236.42,1205.92 1237.01,1205.92 1237.6,1205.92 1238.18,1205.92 1238.77,1205.92 1239.36,1205.92 1239.94,1205.92 1240.53,1205.92 1241.11,1205.92 1241.7,1205.92 1242.29,1205.92 1242.87,1205.92 1243.46,1205.92 1244.05,1205.92 1244.63,1205.92 1245.22,1205.92 1245.81,1205.92 1246.39,1205.92 1246.98,1205.92 1247.57,1205.92 1248.15,1205.92 1248.74,1205.92 1249.32,1205.92 1249.91,1205.92 1250.5,1205.92 1251.08,1205.92 1251.67,1205.92 1252.26,1205.92 1252.84,1205.92 1253.43,1205.92 1254.02,1205.92 1254.6,1205.92 1255.19,1205.92 1255.78,1205.92 1256.36,1205.92 1256.95,1205.92 1257.53,1205.92 1258.12,1205.92 1258.71,1205.92 1259.29,1205.92 1259.88,1205.92 1260.47,1205.92 1261.05,1205.92 1261.64,1205.92 1262.23,1205.92 1262.81,1205.92 1263.4,1205.92 1263.98,1205.92 1264.57,1205.92 1265.16,1205.92 1265.74,1205.92 1266.33,1205.92 1266.92,1205.92 1267.5,1205.92 1268.09,1205.92 1268.68,1205.92 1269.26,1205.92 1269.85,1205.92 1270.44,1205.92 1271.02,1205.92 1271.61,1205.92 1272.19,1205.92 1272.78,1205.92 1273.37,1205.92 1273.95,1205.92 1274.54,1205.92 1275.13,1205.92 1275.71,1205.92 1276.3,1205.92 1276.89,1205.92 1277.47,1205.92 1278.06,1205.92 1278.65,1205.92 1279.23,1205.92 1279.82,1205.92 1280.4,1205.92 1280.99,1205.92 1281.58,1205.92 1282.16,1205.92 1282.75,1205.92 1283.34,1205.92 1283.92,1205.92 1284.51,1205.92 1285.1,1205.92 1285.68,1205.92 1286.27,1205.92 1286.86,1205.92 1287.44,1205.92 1288.03,1205.92 1288.61,1205.92 1289.2,1205.92 1289.79,1205.92 1290.37,1205.92 1290.96,1205.92 1291.55,1205.92 1292.13,1205.92 1292.72,1205.92 1293.31,1205.92 1293.89,1205.92 1294.48,1205.92 1295.06,1205.92 1295.65,1205.92 1296.24,1205.92 1296.82,1205.92 1297.41,1205.92 1298,1205.92 1298.58,1205.92 1299.17,1205.92 1299.76,1205.92 1300.34,1205.92 1300.93,1205.92 1301.52,1205.92 1302.1,1205.92 1302.69,1205.92 1303.27,1205.92 1303.86,1205.92 1304.45,1205.92 1305.03,1205.92 1305.62,1205.92 1306.21,1205.92 1306.79,1205.92 1307.38,1205.92 1307.97,1205.92 1308.55,1205.92 1309.14,1205.92 1309.73,1205.92 1310.31,1205.92 1310.9,1205.92 1311.48,1205.92 1312.07,1205.92 1312.66,1205.92 1313.24,1205.92 1313.83,1205.92 1314.42,1205.92 1315,1205.92 1315.59,1205.92 1316.18,1205.92 1316.76,1205.92 1317.35,1205.92 1317.93,1205.92 1318.52,1205.92 1319.11,1205.92 1319.69,1205.92 1320.28,1205.92 1320.87,1205.92 1321.45,1205.92 1322.04,1205.92 1322.63,1205.92 1323.21,1205.92 1323.8,1205.92 1324.39,1205.92 1324.97,1205.92 1325.56,1205.92 1326.14,1205.92 1326.73,1205.92 1327.32,1205.92 1327.9,1205.92 1328.49,1205.92 1329.08,1205.92 1329.66,1205.92 1330.25,1205.92 1330.84,1205.92 1331.42,1205.92 1332.01,1205.92 1332.6,1205.92 1333.18,1205.92 1333.77,1205.92 1334.35,1205.92 1334.94,1205.92 1335.53,1205.92 1336.11,1205.92 1336.7,1205.92 1337.29,1205.92 1337.87,1205.92 1338.46,1205.92 1339.05,1205.92 1339.63,1205.92 1340.22,1205.92 1340.8,1205.92 1341.39,1205.92 1341.98,1205.92 1342.56,1205.92 1343.15,1205.92 1343.74,1205.92 1344.32,1205.92 1344.91,1205.92 1345.5,1205.92 1346.08,1205.92 1346.67,1205.92 1347.26,1205.92 1347.84,1205.92 1348.43,1205.92 1349.01,1205.92 1349.6,1205.92 1350.19,1205.92 1350.77,1205.92 1351.36,1205.92 1351.95,1205.92 1352.53,1205.92 1353.12,1205.92 1353.71,1205.92 1354.29,1205.92 1354.88,1205.92 1355.47,1205.92 1356.05,1205.92 1356.64,1205.92 1357.22,1205.92 1357.81,1205.92 1358.4,1205.92 1358.98,1205.92 1359.57,1205.92 1360.16,1205.92 1360.74,1205.92 1361.33,1205.92 1361.92,1205.92 1362.5,1205.92 1363.09,1205.92 1363.68,1205.92 1364.26,1205.92 1364.85,1205.92 1365.43,1205.92 1366.02,1205.92 1366.61,1205.92 1367.19,1205.92 1367.78,1205.92 1368.37,1205.92 1368.95,1205.92 1369.54,1205.92 1370.13,1205.92 1370.71,1205.92 1371.3,1205.92 1371.88,1205.92 1372.47,1205.92 1373.06,1205.92 1373.64,1205.92 1374.23,1205.92 1374.82,1205.92 1375.4,1205.92 1375.99,1205.92 1376.58,1205.92 1377.16,1205.92 1377.75,1205.92 1378.34,1205.92 1378.92,1205.92 1379.51,1205.92 1380.09,1205.92 1380.68,1205.92 1381.27,1205.92 1381.85,1205.92 1382.44,1205.92 1383.03,1205.92 1383.61,1205.92 1384.2,1205.92 1384.79,1205.92 1385.37,1205.92 1385.96,1205.92 1386.55,1205.92 1387.13,1205.92 1387.72,1205.92 1388.3,1205.92 1388.89,1205.92 1389.48,1205.92 1390.06,1205.92 1390.65,1205.92 1391.24,1205.92 1391.82,1205.92 1392.41,1205.92 1393,1205.92 1393.58,1205.92 1394.17,1205.92 1394.75,1205.92 1395.34,1205.92 1395.93,1205.92 1396.51,1205.92 1397.1,1205.92 1397.69,1205.92 1398.27,1205.92 1398.86,1205.92 1399.45,1205.92 1400.03,1205.92 1400.62,1205.92 1401.21,1205.92 1401.79,1205.92 1402.38,1205.92 1402.96,1205.92 1403.55,1205.92 1404.14,1205.92 1404.72,1205.92 1405.31,1205.92 1405.9,1205.92 1406.48,1205.92 1407.07,1205.92 1407.66,1205.92 1408.24,1205.92 1408.83,1205.92 1409.42,1205.92 1410,1205.92 1410.59,1205.92 1411.17,1205.92 1411.76,1205.92 1412.35,1205.92 1412.93,1205.92 1413.52,1205.92 1414.11,1205.92 1414.69,1205.92 1415.28,1205.92 1415.87,1205.92 1416.45,1205.92 1417.04,1205.92 1417.63,1205.92 1418.21,1205.92 1418.8,1205.92 1419.38,1205.92 1419.97,1205.92 1420.56,1205.92 1421.14,1205.92 1421.73,1205.92 1422.32,1205.92 1422.9,1205.92 1423.49,1205.92 1424.08,1205.92 1424.66,1205.92 1425.25,1205.92 1425.83,1205.92 1426.42,1205.92 1427.01,1205.92 1427.59,1205.92 1428.18,1205.92 1428.77,1205.92 1429.35,1205.92 1429.94,1205.92 1430.53,1205.92 1431.11,1205.92 1431.7,1205.92 1432.29,1205.92 1432.87,1205.92 1433.46,1205.92 1434.04,1205.92 1434.63,1205.92 1435.22,1205.92 1435.8,1205.92 1436.39,1205.92 1436.98,1205.92 1437.56,1205.92 1438.15,1205.92 1438.74,1205.92 1439.32,1205.92 1439.91,1205.92 1440.5,1205.92 1441.08,1205.92 1441.67,1205.92 1442.25,1205.92 1442.84,1205.92 1443.43,1205.92 1444.01,1205.92 1444.6,1205.92 1445.19,1205.92 1445.77,1205.92 1446.36,1205.92 1446.95,1205.92 1447.53,1205.92 1448.12,1205.92 1448.7,1205.92 1449.29,1205.92 1449.88,1205.92 1450.46,1205.92 1451.05,1205.92 1451.64,1205.92 1452.22,1205.92 1452.81,1205.92 1453.4,1205.92 1453.98,1205.92 1454.57,1205.92 1455.16,1205.92 1455.74,1205.92 1456.33,1205.92 1456.91,1205.92 1457.5,1205.92 1458.09,1205.92 1458.67,1205.92 1459.26,1205.92 1459.85,1205.92 1460.43,1205.92 1461.02,1205.92 1461.61,1205.92 1462.19,1205.92 1462.78,1205.92 1463.37,1205.92 1463.95,1205.92 1464.54,1205.92 1465.12,1205.92 1465.71,1205.92 1466.3,1205.92 1466.88,1205.92 1467.47,1205.92 1468.06,1205.92 1468.64,1205.92 1469.23,1205.92 1469.82,1205.92 1470.4,1205.92 1470.99,1205.92 1471.57,1205.92 1472.16,1205.92 1472.75,1205.92 1473.33,1205.92 1473.92,1205.92 1474.51,1205.92 1475.09,1205.92 1475.68,1205.92 1476.27,1205.92 1476.85,1205.92 1477.44,1205.92 1478.03,1205.92 1478.61,1205.92 1479.2,1205.92 1479.78,1205.92 1480.37,1205.92 1480.96,1205.92 1481.54,1205.92 1482.13,1205.92 1482.72,1205.92 1483.3,1205.92 1483.89,1205.92 1484.48,1205.92 1485.06,1205.92 1485.65,1205.92 1486.24,1205.92 1486.82,1205.92 1487.41,1205.92 1487.99,1205.92 1488.58,1205.92 1489.17,1205.92 1489.75,1205.92 1490.34,1205.92 1490.93,1205.92 1491.51,1205.92 1492.1,1205.92 1492.69,1205.92 1493.27,1205.92 1493.86,1205.92 1494.45,1205.92 1495.03,1205.92 1495.62,1205.92 1496.2,1205.92 1496.79,1205.92 1497.38,1205.92 1497.96,1205.92 1498.55,1205.92 1499.14,1205.92 1499.72,1205.92 1500.31,1205.92 1500.9,1205.92 1501.48,1205.92 1502.07,1205.92 1502.65,1205.92 1503.24,1205.92 1503.83,1205.92 1504.41,1205.92 1505,1205.92 1505.59,1205.92 1506.17,1205.92 1506.76,1205.92 1507.35,1205.92 1507.93,1205.92 1508.52,1205.92 1509.11,1205.92 1509.69,1205.92 1510.28,1205.92 1510.86,1205.92 1511.45,1205.92 1512.04,1205.92 1512.62,1205.92 1513.21,1205.92 1513.8,1205.92 1514.38,1205.92 1514.97,1205.92 1515.56,1205.92 1516.14,1205.92 1516.73,1205.92 1517.32,1205.92 1517.9,1205.92 1518.49,1205.92 1519.07,1205.92 1519.66,1205.92 1520.25,1205.92 1520.83,1205.92 1521.42,1205.92 1522.01,1205.92 1522.59,1205.92 1523.18,1205.92 1523.77,1205.92 1524.35,1205.92 1524.94,1205.92 1525.52,1205.92 1526.11,1205.92 1526.7,1205.92 1527.28,1205.92 1527.87,1205.92 1528.46,1205.92 1529.04,1205.92 1529.63,1205.92 1530.22,1205.92 1530.8,1205.92 1531.39,1205.92 1531.98,1205.92 1532.56,1205.92 1533.15,1205.92 1533.73,1205.92 1534.32,1205.92 1534.91,1205.92 1535.49,1205.92 1536.08,1205.92 1536.67,1205.92 1537.25,1205.92 1537.84,1205.92 1538.43,1205.92 1539.01,1205.92 1539.6,1205.92 1540.19,1205.92 1540.77,1205.92 1541.36,1205.92 1541.94,1205.92 1542.53,1205.92 1543.12,1205.92 1543.7,1205.92 1544.29,1205.92 1544.88,1205.92 1545.46,1205.92 1546.05,1205.92 1546.64,1205.92 1547.22,1205.92 1547.81,1205.92 1548.4,1205.92 1548.98,1205.92 1549.57,1205.92 1550.15,1205.92 1550.74,1205.92 1551.33,1205.92 1551.91,1205.92 1552.5,1205.92 1553.09,1205.92 1553.67,1205.92 1554.26,1205.92 1554.85,1205.92 1555.43,1205.92 1556.02,1205.92 1556.6,1205.92 1557.19,1205.92 1557.78,1205.92 1558.36,1205.92 1558.95,1205.92 1559.54,1205.92 1560.12,1205.92 1560.71,1205.92 1561.3,1205.92 1561.88,1205.92 1562.47,1205.92 1563.06,1205.92 1563.64,1205.92 1564.23,1205.92 1564.81,1205.92 1565.4,1205.92 1565.99,1205.92 1566.57,1205.92 1567.16,1205.92 1567.75,1205.92 1568.33,1205.92 1568.92,1205.92 1569.51,1205.92 1570.09,1205.92 1570.68,1205.92 1571.27,1205.92 1571.85,1205.92 1572.44,1205.92 1573.02,1205.92 1573.61,1205.92 1574.2,1205.92 1574.78,1205.92 1575.37,1205.92 1575.96,1205.92 1576.54,1205.92 1577.13,1205.92 1577.72,1205.92 1578.3,1205.92 1578.89,1205.92 1579.47,1205.92 1580.06,1205.92 1580.65,1205.92 1581.23,1205.92 1581.82,1205.92 1582.41,1205.92 1582.99,1205.92 1583.58,1205.92 1584.17,1205.92 1584.75,1205.92 1585.34,1205.92 1585.93,1205.92 1586.51,1205.92 1587.1,1205.92 1587.68,1205.92 1588.27,1205.92 1588.86,1205.92 1589.44,1205.92 1590.03,1205.92 1590.62,1205.92 1591.2,1205.92 1591.79,1205.92 1592.38,1205.92 1592.96,1205.92 1593.55,1205.92 1594.14,1205.92 1594.72,1205.92 1595.31,1205.92 1595.89,1205.92 1596.48,1205.92 1597.07,1205.92 1597.65,1205.92 1598.24,1205.92 1598.83,1205.92 1599.41,1205.92 1600,1205.92 1600.59,1205.92 1601.17,1205.92 1601.76,1205.92 1602.34,1205.92 1602.93,1205.92 1603.52,1205.92 1604.1,1205.92 1604.69,1205.92 1605.28,1205.92 1605.86,1205.92 1606.45,1205.92 1607.04,1205.92 1607.62,1205.92 1608.21,1205.92 1608.8,1205.92 1609.38,1205.92 1609.97,1205.92 1610.55,1205.92 1611.14,1205.92 1611.73,1205.92 1612.31,1205.92 1612.9,1205.92 1613.49,1205.92 1614.07,1205.92 1614.66,1205.92 1615.25,1205.92 1615.83,1205.92 1616.42,1205.92 1617.01,1205.92 1617.59,1205.92 1618.18,1205.92 1618.76,1205.92 1619.35,1205.92 1619.94,1205.92 1620.52,1205.92 1621.11,1205.92 1621.7,1205.92 1622.28,1205.92 1622.87,1205.92 1623.46,1205.92 1624.04,1205.92 1624.63,1205.92 1625.22,1205.92 1625.8,1205.92 1626.39,1205.92 1626.97,1205.92 1627.56,1205.92 1628.15,1205.92 1628.73,1205.92 1629.32,1205.92 1629.91,1205.92 1630.49,1205.92 1631.08,1205.92 1631.67,1205.92 1632.25,1205.92 1632.84,1205.92 1633.42,1205.92 1634.01,1205.92 1634.6,1205.92 1635.18,1205.92 1635.77,1205.92 1636.36,1205.92 1636.94,1205.92 1637.53,1205.92 1638.12,1205.92 1638.7,1205.92 1639.29,1205.92 1639.88,1205.92 1640.46,1205.92 1641.05,1205.92 1641.63,1205.92 1642.22,1205.92 1642.81,1205.92 1643.39,1205.92 1643.98,1205.92 1644.57,1205.92 1645.15,1205.92 1645.74,1205.92 1646.33,1205.92 1646.91,1205.92 1647.5,1205.92 1648.09,1205.92 1648.67,1205.92 1649.26,1205.92 1649.84,1205.92 1650.43,1205.92 1651.02,1205.92 1651.6,1205.92 1652.19,1205.92 1652.78,1205.92 1653.36,1205.92 1653.95,1205.92 1654.54,1205.92 1655.12,1205.92 1655.71,1205.92 1656.29,1205.92 1656.88,1205.92 1657.47,1205.92 1658.05,1205.92 1658.64,1205.92 1659.23,1205.92 1659.81,1205.92 1660.4,1205.92 1660.99,1205.92 1661.57,1205.92 1662.16,1205.92 1662.75,1205.92 1663.33,1205.92 1663.92,1205.92 1664.5,1205.92 1665.09,1205.92 1665.68,1205.92 1666.26,1205.92 1666.85,1205.92 1667.44,1205.92 1668.02,1205.92 1668.61,1205.92 1669.2,1205.92 1669.78,1205.92 1670.37,1205.92 1670.96,1205.92 1671.54,1205.92 1672.13,1205.92 1672.71,1205.92 1673.3,1205.92 1673.89,1205.92 1674.47,1205.92 1675.06,1205.92 1675.65,1205.92 1676.23,1205.92 1676.82,1205.92 1677.41,1205.92 1677.99,1205.92 1678.58,1205.92 1679.17,1205.92 1679.75,1205.92 1680.34,1205.92 1680.92,1205.92 1681.51,1205.92 1682.1,1205.92 1682.68,1205.92 1683.27,1205.92 1683.86,1205.92 1684.44,1205.92 1685.03,1205.92 1685.62,1205.92 1686.2,1205.92 1686.79,1205.92 1687.37,1205.92 1687.96,1205.92 1688.55,1205.92 1689.13,1205.92 1689.72,1205.92 1690.31,1205.92 1690.89,1205.92 1691.48,1205.92 1692.07,1205.92 1692.65,1205.92 1693.24,1205.92 1693.83,1205.92 1694.41,1205.92 1695,1205.92 1695.58,1205.92 1696.17,1205.92 1696.76,1205.92 1697.34,1205.92 1697.93,1205.92 1698.52,1205.92 1699.1,1205.92 1699.69,1205.92 1700.28,1205.92 1700.86,1205.92 1701.45,1205.92 1702.04,1205.92 1702.62,1205.92 1703.21,1205.92 1703.79,1205.92 1704.38,1205.92 1704.97,1205.92 1705.55,1205.92 1706.14,1205.92 1706.73,1205.92 1707.31,1205.92 1707.9,1205.92 1708.49,1205.92 1709.07,1205.92 1709.66,1205.92 1710.24,1205.92 1710.83,1205.92 1711.42,1205.92 1712,1205.92 1712.59,1205.92 1713.18,1205.92 1713.76,1205.92 1714.35,1205.92 1714.94,1205.92 1715.52,1205.92 1716.11,1205.92 1716.7,1205.92 1717.28,1205.92 1717.87,1205.92 1718.45,1205.92 1719.04,1205.92 1719.63,1205.92 1720.21,1205.92 1720.8,1205.92 1721.39,1205.92 1721.97,1205.92 1722.56,1205.92 1723.15,1205.92 1723.73,1205.92 1724.32,1205.92 1724.91,1205.92 1725.49,1205.92 1726.08,1205.92 1726.66,1205.92 1727.25,1205.92 1727.84,1205.92 1728.42,1205.92 1729.01,1205.92 1729.6,1205.92 1730.18,1205.92 1730.77,1205.92 1731.36,1205.92 1731.94,1205.92 1732.53,1205.92 1733.11,1205.92 1733.7,1205.92 1734.29,1205.92 1734.87,1205.92 1735.46,1205.92 1736.05,1205.92 1736.63,1205.92 1737.22,1205.92 1737.81,1205.92 1738.39,1205.92 1738.98,1205.92 1739.57,1205.92 1740.15,1205.92 1740.74,1205.92 1741.32,1205.92 1741.91,1205.92 1742.5,1205.92 1743.08,1205.92 1743.67,1205.92 1744.26,1205.92 1744.84,1205.92 1745.43,1205.92 1746.02,1205.92 1746.6,1205.92 1747.19,1205.92 1747.78,1205.92 1748.36,1205.92 1748.95,1205.92 1749.53,1205.92 1750.12,1205.92 1750.71,1205.92 1751.29,1205.92 1751.88,1205.92 1752.47,1205.92 1753.05,1205.92 1753.64,1205.92 1754.23,1205.92 1754.81,1205.92 1755.4,1205.92 1755.99,1205.92 1756.57,1205.92 1757.16,1205.92 1757.74,1205.92 1758.33,1205.92 1758.92,1205.92 1759.5,1205.92 1760.09,1205.92 1760.68,1205.92 1761.26,1205.92 1761.85,1205.92 1762.44,1205.92 1763.02,1205.92 1763.61,1205.92 1764.19,1205.92 1764.78,1205.92 1765.37,1205.92 1765.95,1205.92 1766.54,1205.92 1767.13,1205.92 1767.71,1205.92 1768.3,1205.92 1768.89,1205.92 1769.47,1205.92 1770.06,1205.92 1770.65,1205.92 1771.23,1205.92 1771.82,1205.92 1772.4,1205.92 1772.99,1205.92 1773.58,1205.92 1774.16,1205.92 1774.75,1205.92 1775.34,1205.92 1775.92,1205.92 1776.51,1205.92 1777.1,1205.92 1777.68,1205.92 1778.27,1205.92 1778.86,1205.92 1779.44,1205.92 1780.03,1205.92 1780.61,1205.92 1781.2,1205.92 1781.79,1205.92 1782.37,1205.92 1782.96,1205.92 1783.55,1205.92 1784.13,1205.92 1784.72,1205.92 1785.31,1205.92 1785.89,1205.92 1786.48,1205.92 1787.06,1205.92 1787.65,1205.92 1788.24,1205.92 1788.82,1205.92 1789.41,1205.92 1790,1205.92 1790.58,1205.92 1791.17,1205.92 1791.76,1205.92 1792.34,1205.92 1792.93,1205.92 1793.52,1205.92 1794.1,1205.92 1794.69,1205.92 1795.27,1205.92 1795.86,1205.92 1796.45,1205.92 1797.03,1205.92 1797.62,1205.92 1798.21,1205.92 1798.79,1205.92 1799.38,1205.92 1799.97,1205.92 1800.55,1205.92 1801.14,1205.92 1801.73,1205.92 1802.31,1205.92 1802.9,1205.92 1803.48,1205.92 1804.07,1205.92 1804.66,1205.92 1805.24,1205.92 1805.83,1205.92 1806.42,1205.92 1807,1205.92 1807.59,1205.92 1808.18,1205.92 1808.76,1205.92 1809.35,1205.92 1809.94,1205.92 1810.52,1205.92 1811.11,1205.92 1811.69,1205.92 1812.28,1205.92 1812.87,1205.92 1813.45,1205.92 1814.04,1205.92 1814.63,1205.92 1815.21,1205.92 1815.8,1205.92 1816.39,1205.92 1816.97,1205.92 1817.56,1205.92 1818.14,1205.92 1818.73,1205.92 1819.32,1205.92 1819.9,1205.92 1820.49,1205.92 1821.08,1205.92 1821.66,1205.92 1822.25,1205.92 1822.84,1205.92 1823.42,1205.92 1824.01,1205.92 1824.6,1205.92 1825.18,1205.92 1825.77,1205.92 1826.35,1205.92 1826.94,1205.92 1827.53,1205.92 1828.11,1205.92 1828.7,1205.92 1829.29,1205.92 1829.87,1205.92 1830.46,1205.92 1831.05,1205.92 1831.63,1205.92 1832.22,1205.92 1832.81,1205.92 1833.39,1205.92 1833.98,1205.92 1834.56,1205.92 1835.15,1205.92 1835.74,1205.92 1836.32,1205.92 1836.91,1205.92 1837.5,1205.92 1838.08,1205.92 1838.67,1205.92 1839.26,1205.92 1839.84,1205.92 1840.43,1205.92 1841.01,1205.92 1841.6,1205.92 1842.19,1205.92 1842.77,1205.92 1843.36,1205.92 1843.95,1205.92 1844.53,1205.92 1845.12,1205.92 1845.71,1205.92 1846.29,1205.92 1846.88,1205.92 1847.47,1205.92 1848.05,1205.92 1848.64,1205.92 1849.22,1205.92 1849.81,1205.92 1850.4,1205.92 1850.98,1205.92 1851.57,1205.92 1852.16,1205.92 1852.74,1205.92 1853.33,1205.92 1853.92,1205.92 1854.5,1205.92 1855.09,1205.92 1855.68,1205.92 1856.26,1205.92 1856.85,1205.92 1857.43,1205.92 1858.02,1205.92 1858.61,1205.92 1859.19,1205.92 1859.78,1205.92 1860.37,1205.92 1860.95,1205.92 1861.54,1205.92 1862.13,1205.92 1862.71,1205.92 1863.3,1205.92 1863.88,1205.92 1864.47,1205.92 1865.06,1205.92 1865.64,1205.92 1866.23,1205.92 1866.82,1205.92 1867.4,1205.92 1867.99,1205.92 1868.58,1205.92 1869.16,1205.92 1869.75,1205.92 1870.34,1205.92 1870.92,1205.92 1871.51,1205.92 1872.09,1205.92 1872.68,1205.92 1873.27,1205.92 1873.85,1205.92 1874.44,1205.92 1875.03,1205.92 1875.61,1205.92 1876.2,1205.92 1876.79,1205.92 1877.37,1205.92 1877.96,1205.92 1878.55,1205.92 1879.13,1205.92 1879.72,1205.92 1880.3,1205.92 1880.89,1205.92 1881.48,1205.92 1882.06,1205.92 1882.65,1205.92 1883.24,1205.92 1883.82,1205.92 1884.41,1205.92 1885,1205.92 1885.58,1205.92 1886.17,1205.92 1886.76,1205.92 1887.34,1205.92 1887.93,1205.92 1888.51,1205.92 1889.1,1205.92 1889.69,1205.92 1890.27,1205.92 1890.86,1205.92 1891.45,1205.92 1892.03,1205.92 1892.62,1205.92 1893.21,1205.92 1893.79,1205.92 1894.38,1205.92 1894.96,1205.92 1895.55,1205.92 1896.14,1205.92 1896.72,1205.92 1897.31,1205.92 1897.9,1205.92 1898.48,1205.92 1899.07,1205.92 1899.66,1205.92 1900.24,1205.92 1900.83,1205.92 1901.42,1205.92 1902,1205.92 1902.59,1205.92 1903.17,1205.92 1903.76,1205.92 1904.35,1205.92 1904.93,1205.92 1905.52,1205.92 1906.11,1205.92 1906.69,1205.92 1907.28,1205.92 1907.87,1205.92 1908.45,1205.92 1909.04,1205.92 1909.63,1205.92 1910.21,1205.92 1910.8,1205.92 1911.38,1205.92 1911.97,1205.92 1912.56,1205.92 1913.14,1205.92 1913.73,1205.92 1914.32,1205.92 1914.9,1205.92 1915.49,1205.92 1916.08,1205.92 1916.66,1205.92 1917.25,1205.92 1917.83,1205.92 1918.42,1205.92 1919.01,1205.92 1919.59,1205.92 1920.18,1205.92 1920.77,1205.92 1921.35,1205.92 1921.94,1205.92 1922.53,1205.92 1923.11,1205.92 1923.7,1205.92 1924.29,1205.92 1924.87,1205.92 1925.46,1205.92 1926.04,1205.92 1926.63,1205.92 1927.22,1205.92 1927.8,1205.92 1928.39,1205.92 1928.98,1205.92 1929.56,1205.92 1930.15,1205.92 1930.74,1205.92 1931.32,1205.92 1931.91,1205.92 1932.5,1205.92 1933.08,1205.92 1933.67,1205.92 1934.25,1205.92 1934.84,1205.92 1935.43,1205.92 1936.01,1205.92 1936.6,1205.92 1937.19,1205.92 1937.77,1205.92 1938.36,1205.92 1938.95,1205.92 1939.53,1205.92 1940.12,1205.92 1940.71,1205.92 1941.29,1205.92 1941.88,1205.92 1942.46,1205.92 1943.05,1205.92 1943.64,1205.92 1944.22,1205.92 1944.81,1205.92 1945.4,1205.92 1945.98,1205.92 1946.57,1205.92 1947.16,1205.92 1947.74,1205.92 1948.33,1205.92 1948.91,1205.92 1949.5,1205.92 1950.09,1205.92 1950.67,1205.92 1951.26,1205.92 1951.85,1205.92 1952.43,1205.92 1953.02,1205.92 1953.61,1205.92 1954.19,1205.92 1954.78,1205.92 1955.37,1205.92 1955.95,1205.92 1956.54,1205.92 1957.12,1205.92 1957.71,1205.92 1958.3,1205.92 1958.88,1205.92 1959.47,1205.92 1960.06,1205.92 1960.64,1205.92 1961.23,1205.92 1961.82,1205.92 1962.4,1205.92 1962.99,1205.92 1963.58,1205.92 1964.16,1205.92 1964.75,1205.92 1965.33,1205.92 1965.92,1205.92 1966.51,1205.92 1967.09,1205.92 1967.68,1205.92 1968.27,1205.92 1968.85,1205.92 1969.44,1205.92 1970.03,1205.92 1970.61,1205.92 1971.2,1205.92 1971.78,1205.92 1972.37,1205.92 1972.96,1205.92 1973.54,1205.92 1974.13,1205.92 1974.72,1205.92 1975.3,1205.92 1975.89,1205.92 1976.48,1205.92 1977.06,1205.92 1977.65,1205.92 1978.24,1205.92 1978.82,1205.92 1979.41,1205.92 1979.99,1205.92 1980.58,1205.92 1981.17,1205.92 1981.75,1205.92 1982.34,1205.92 1982.93,1205.92 1983.51,1205.92 1984.1,1205.92 1984.69,1205.92 1985.27,1205.92 1985.86,1205.92 1986.45,1205.92 1987.03,1205.92 1987.62,1205.92 1988.2,1205.92 1988.79,1205.92 1989.38,1205.92 1989.96,1205.92 1990.55,1205.92 1991.14,1205.92 1991.72,1205.92 1992.31,1205.92 1992.9,1205.92 1993.48,1205.92 1994.07,1205.92 1994.65,1205.92 1995.24,1205.92 1995.83,1205.92 1996.41,1205.92 1997,1205.92 1997.59,1205.92 1998.17,1205.92 1998.76,1205.92 1999.35,1205.92 1999.93,1205.92 2000.52,1205.92 2001.11,1205.92 2001.69,1205.92 2002.28,1205.92 2002.86,1205.92 2003.45,1205.92 2004.04,1205.92 2004.62,1205.92 2005.21,1205.92 2005.8,1205.92 2006.38,1205.92 2006.97,1205.92 2007.56,1205.92 2008.14,1205.92 2008.73,1205.92 2009.32,1205.92 2009.9,1205.92 2010.49,1205.92 2011.07,1205.92 2011.66,1205.92 2012.25,1205.92 2012.83,1205.92 2013.42,1205.92 2014.01,1205.92 2014.59,1205.92 2015.18,1205.92 2015.77,1205.92 2016.35,1205.92 2016.94,1205.92 2017.53,1205.92 2018.11,1205.92 2018.7,1205.92 2019.28,1205.92 2019.87,1205.92 2020.46,1205.92 2021.04,1205.92 2021.63,1205.92 2022.22,1205.92 2022.8,1205.92 2023.39,1205.92 2023.98,1205.92 2024.56,1205.92 2025.15,1205.92 2025.73,1205.92 2026.32,1205.92 2026.91,1205.92 2027.49,1205.92 2028.08,1205.92 2028.67,1205.92 2029.25,1205.92 2029.84,1205.92 2030.43,1205.92 2031.01,1205.92 2031.6,1205.92 2032.19,1205.92 2032.77,1205.92 2033.36,1205.92 2033.94,1205.92 2034.53,1205.92 2035.12,1205.92 2035.7,1205.92 2036.29,1205.92 2036.88,1205.92 2037.46,1205.92 2038.05,1205.92 2038.64,1205.92 2039.22,1205.92 2039.81,1205.92 2040.4,1205.92 2040.98,1205.92 2041.57,1205.92 2042.15,1205.92 2042.74,1205.92 2043.33,1205.92 2043.91,1205.92 2044.5,1205.92 2045.09,1205.92 2045.67,1205.92 2046.26,1205.92 2046.85,1205.92 2047.43,1205.92 2048.02,1205.92 2048.6,1205.92 2049.19,1205.92 2049.78,1205.92 2050.36,1205.92 2050.95,1205.92 2051.54,1205.92 2052.12,1205.92 2052.71,1205.92 2053.3,1205.92 2053.88,1205.92 2054.47,1205.92 2055.06,1205.92 2055.64,1205.92 2056.23,1205.92 2056.81,1205.92 2057.4,1205.92 2057.99,1205.92 2058.57,1205.92 2059.16,1205.92 2059.75,1205.92 2060.33,1205.92 2060.92,1205.92 2061.51,1205.92 2062.09,1205.92 2062.68,1205.92 2063.27,1205.92 2063.85,1205.92 2064.44,1205.92 2065.02,1205.92 2065.61,1205.92 2066.2,1205.92 2066.78,1205.92 2067.37,1205.92 2067.96,1205.92 2068.54,1205.92 2069.13,1205.92 2069.72,1205.92 2070.3,1205.92 2070.89,1205.92 2071.48,1205.92 2072.06,1205.92 2072.65,1205.92 2073.23,1205.92 2073.82,1205.92 2074.41,1205.92 2074.99,1205.92 2075.58,1205.92 2076.17,1205.92 2076.75,1205.92 2077.34,1205.92 2077.93,1205.92 2078.51,1205.92 2079.1,1205.92 2079.68,1205.92 2080.27,1205.92 2080.86,1205.92 2081.44,1205.92 2082.03,1205.92 2082.62,1205.92 2083.2,1205.92 2083.79,1205.92 2084.38,1205.92 2084.96,1205.92 2085.55,1205.92 2086.14,1205.92 2086.72,1205.92 2087.31,1205.92 2087.89,1205.92 2088.48,1205.92 2089.07,1205.92 2089.65,1205.92 2090.24,1205.92 2090.83,1205.92 2091.41,1205.92 2092,1205.92 2092.59,1205.92 2093.17,1205.92 2093.76,1205.92 2094.35,1205.92 2094.93,1205.92 2095.52,1205.92 2096.1,1205.92 2096.69,1205.92 2097.28,1205.92 2097.86,1205.92 2098.45,1205.92 2099.04,1205.92 2099.62,1205.92 2100.21,1205.92 2100.8,1205.92 2101.38,1205.92 2101.97,1205.92 2102.55,1205.92 2103.14,1205.92 2103.73,1205.92 2104.31,1205.92 2104.9,1205.92 2105.49,1205.92 2106.07,1205.92 2106.66,1205.92 2107.25,1205.92 2107.83,1205.92 2108.42,1205.92 2109.01,1205.92 2109.59,1205.92 2110.18,1205.92 2110.76,1205.92 2111.35,1205.92 2111.94,1205.92 2112.52,1205.92 2113.11,1205.92 2113.7,1205.92 2114.28,1205.92 2114.87,1205.92 2115.46,1205.92 2116.04,1205.92 2116.63,1205.92 2117.22,1205.92 2117.8,1205.92 2118.39,1205.92 2118.97,1205.92 2119.56,1205.92 2120.15,1205.92 2120.73,1205.92 2121.32,1205.92 2121.91,1205.92 2122.49,1205.92 2123.08,1205.92 2123.67,1205.92 2124.25,1205.92 2124.84,1205.92 2125.42,1205.92 2126.01,1205.92 2126.6,1205.92 2127.18,1205.92 2127.77,1205.92 2128.36,1205.92 2128.94,1205.92 2129.53,1205.92 2130.12,1205.92 2130.7,1205.92 2131.29,1205.92 2131.88,1205.92 2132.46,1205.92 2133.05,1205.92 2133.63,1205.92 2134.22,1205.92 2134.81,1205.92 2135.39,1205.92 2135.98,1205.92 2136.57,1205.92 2137.15,1205.92 2137.74,1205.92 2138.33,1205.92 2138.91,1205.92 2139.5,1205.92 2140.09,1205.92 2140.67,1205.92 2141.26,1205.92 2141.84,1205.92 2142.43,1205.92 2143.02,1205.92 2143.6,1205.92 2144.19,1205.92 2144.78,1205.92 2145.36,1205.92 2145.95,1205.92 2146.54,1205.92 2147.12,1205.92 2147.71,1205.92 2148.3,1205.92 2148.88,1205.92 2149.47,1205.92 2150.05,1205.92 2150.64,1205.92 2151.23,1205.92 2151.81,1205.92 2152.4,1205.92 2152.99,1205.92 2153.57,1205.92 2154.16,1205.92 2154.75,1205.92 2155.33,1205.92 2155.92,1205.92 2156.5,1205.92 2157.09,1205.92 2157.68,1205.92 2158.26,1205.92 \"/>\n<path clip-path=\"url(#clip132)\" d=\"M986.025 1205.78 L986.612 1205.78 L987.198 1205.78 L987.785 1205.78 L988.371 1205.78 L988.957 1205.78 L989.544 1205.78 L990.13 1205.78 L990.717 1205.78 L991.303 1205.78 L991.889 1205.78 L992.476 1205.78 L993.062 1205.78 L993.649 1205.78 L994.235 1205.78 L994.822 1205.78 L995.408 1205.78 L995.994 1205.78 L996.581 1205.78 L997.167 1205.78 L997.754 1205.78 L998.34 1205.78 L998.926 1205.78 L999.513 1205.78 L1000.1 1205.78 L1000.69 1205.78 L1001.27 1205.78 L1001.86 1205.78 L1002.44 1205.78 L1003.03 1205.78 L1003.62 1205.78 L1004.2 1205.78 L1004.79 1205.78 L1005.38 1205.78 L1005.96 1205.78 L1006.55 1205.78 L1007.14 1205.78 L1007.72 1205.78 L1008.31 1205.78 L1008.9 1205.78 L1009.48 1205.78 L1010.07 1205.78 L1010.65 1205.78 L1011.24 1205.78 L1011.83 1205.78 L1012.41 1205.78 L1013 1205.78 L1013.59 1205.78 L1014.17 1205.78 L1014.76 1205.78 L1015.35 1205.78 L1015.93 1205.78 L1016.52 1205.78 L1017.11 1205.78 L1017.69 1205.78 L1018.28 1205.78 L1018.86 1205.78 L1019.45 1205.78 L1020.04 1205.78 L1020.62 1205.78 L1021.21 1205.78 L1021.8 1205.78 L1022.38 1205.78 L1022.97 1205.78 L1023.56 1205.78 L1024.14 1205.78 L1024.73 1205.78 L1025.32 1205.78 L1025.9 1205.78 L1026.49 1205.78 L1027.07 1205.78 L1027.66 1205.78 L1028.25 1205.78 L1028.83 1205.78 L1029.42 1205.78 L1030.01 1205.78 L1030.59 1205.78 L1031.18 1205.78 L1031.77 1205.78 L1032.35 1205.78 L1032.94 1205.78 L1033.52 1205.78 L1034.11 1205.78 L1034.7 1205.78 L1035.28 1205.78 L1035.87 1205.78 L1036.46 1205.78 L1037.04 1205.78 L1037.63 1205.78 L1038.22 1205.78 L1038.8 1205.78 L1039.39 1205.78 L1039.98 1205.78 L1040.56 1205.78 L1041.15 1205.78 L1041.73 1205.78 L1042.32 1205.78 L1042.91 1205.78 L1043.49 1205.78 L1044.08 1205.78 L1044.67 1205.78 L1045.25 1205.78 L1045.84 1205.78 L1046.43 1205.78 L1047.01 1205.78 L1047.6 1205.78 L1048.19 1205.78 L1048.77 1205.78 L1049.36 1205.78 L1049.94 1205.78 L1050.53 1205.78 L1051.12 1205.78 L1051.7 1205.78 L1052.29 1205.78 L1052.88 1205.78 L1053.46 1205.78 L1054.05 1205.78 L1054.64 1205.78 L1055.22 1205.78 L1055.81 1205.78 L1056.39 1205.78 L1056.98 1205.78 L1057.57 1205.78 L1058.15 1205.78 L1058.74 1205.78 L1059.33 1205.78 L1059.91 1205.78 L1060.5 1205.78 L1061.09 1205.78 L1061.67 1205.78 L1062.26 1205.78 L1062.85 1205.78 L1063.43 1205.78 L1064.02 1205.78 L1064.6 1205.78 L1065.19 1205.78 L1065.78 1205.78 L1066.36 1205.78 L1066.95 1205.78 L1067.54 1205.78 L1068.12 1205.78 L1068.71 1205.78 L1069.3 1205.78 L1069.88 1205.78 L1070.47 1205.78 L1071.06 1205.78 L1071.64 1205.78 L1072.23 1205.78 L1072.81 1205.78 L1073.4 1205.78 L1073.99 1205.78 L1074.57 1205.78 L1075.16 1205.78 L1075.75 1205.78 L1076.33 1205.78 L1076.92 1205.78 L1077.51 1205.78 L1078.09 1205.78 L1078.68 1205.78 L1079.26 1205.78 L1079.85 1205.78 L1080.44 1205.78 L1081.02 1205.78 L1081.61 1205.78 L1082.2 1205.78 L1082.78 1205.78 L1083.37 1205.78 L1083.96 1205.78 L1084.54 1205.78 L1085.13 1205.78 L1085.72 1205.78 L1086.3 1205.78 L1086.89 1205.78 L1087.47 1205.78 L1088.06 1205.78 L1088.65 1205.78 L1089.23 1205.78 L1089.82 1205.78 L1090.41 1205.78 L1090.99 1205.78 L1091.58 1205.78 L1092.17 1205.78 L1092.75 1205.78 L1093.34 1205.78 L1093.93 1205.78 L1094.51 1205.78 L1095.1 1205.78 L1095.68 1205.78 L1096.27 1205.78 L1096.86 1205.78 L1097.44 1205.78 L1098.03 1205.78 L1098.62 1205.78 L1099.2 1205.78 L1099.79 1205.78 L1100.38 1205.78 L1100.96 1205.78 L1101.55 1205.78 L1102.14 1205.78 L1102.72 1205.78 L1103.31 1205.78 L1103.89 1205.78 L1104.48 1205.78 L1105.07 1205.78 L1105.65 1205.78 L1106.24 1205.78 L1106.83 1205.78 L1107.41 1205.78 L1108 1205.78 L1108.59 1205.78 L1109.17 1205.78 L1109.76 1205.78 L1110.34 1205.78 L1110.93 1205.78 L1111.52 1205.78 L1112.1 1205.78 L1112.69 1205.78 L1113.28 1205.78 L1113.86 1205.78 L1114.45 1205.78 L1115.04 1205.78 L1115.62 1205.78 L1116.21 1205.78 L1116.8 1205.78 L1117.38 1205.78 L1117.97 1205.78 L1118.55 1205.78 L1119.14 1205.78 L1119.73 1205.78 L1120.31 1205.78 L1120.9 1205.78 L1121.49 1205.78 L1122.07 1205.78 L1122.66 1205.78 L1123.25 1205.78 L1123.83 1205.78 L1124.42 1205.78 L1125.01 1205.78 L1125.59 1205.78 L1126.18 1205.78 L1126.76 1205.78 L1127.35 1205.78 L1127.94 1205.78 L1128.52 1205.78 L1129.11 1205.78 L1129.7 1205.78 L1130.28 1205.78 L1130.87 1205.78 L1131.46 1205.78 L1132.04 1205.78 L1132.63 1205.78 L1133.21 1205.78 L1133.8 1205.78 L1134.39 1205.78 L1134.97 1205.78 L1135.56 1205.78 L1136.15 1205.78 L1136.73 1205.78 L1137.32 1205.78 L1137.91 1205.78 L1138.49 1205.78 L1139.08 1205.78 L1139.67 1205.78 L1140.25 1205.78 L1140.84 1205.78 L1141.42 1205.78 L1142.01 1205.78 L1142.6 1205.78 L1143.18 1205.78 L1143.77 1205.78 L1144.36 1205.78 L1144.94 1205.78 L1145.53 1205.78 L1146.12 1205.78 L1146.7 1205.78 L1147.29 1205.78 L1147.88 1205.78 L1148.46 1205.78 L1149.05 1205.78 L1149.63 1205.78 L1150.22 1205.78 L1150.81 1205.78 L1151.39 1205.78 L1151.98 1205.78 L1152.57 1205.78 L1153.15 1205.78 L1153.74 1205.78 L1154.33 1205.78 L1154.91 1205.78 L1155.5 1205.78 L1156.09 1205.78 L1156.67 1205.78 L1157.26 1205.78 L1157.84 1205.78 L1158.43 1205.78 L1159.02 1205.78 L1159.6 1205.78 L1160.19 1205.78 L1160.78 1205.78 L1161.36 1205.78 L1161.95 1205.78 L1162.54 1205.78 L1163.12 1205.78 L1163.71 1205.78 L1164.29 1205.78 L1164.88 1205.78 L1165.47 1205.78 L1166.05 1205.78 L1166.64 1205.78 L1167.23 1205.78 L1167.81 1205.78 L1168.4 1205.78 L1168.99 1205.78 L1169.57 1205.78 L1170.16 1205.78 L1170.75 1205.78 L1171.33 1205.78 L1171.92 1205.78 L1172.5 1205.78 L1173.09 1205.78 L1173.68 1205.78 L1174.26 1205.78 L1174.85 1205.78 L1175.44 1205.78 L1176.02 1205.78 L1176.61 1205.78 L1177.2 1205.78 L1177.78 1205.78 L1178.37 1205.78 L1178.96 1205.78 L1179.54 1205.78 L1180.13 1205.78 L1180.71 1205.78 L1181.3 1205.78 L1181.89 1205.78 L1182.47 1205.78 L1183.06 1205.78 L1183.65 1205.78 L1184.23 1205.78 L1184.82 1205.78 L1185.41 1205.78 L1185.99 1205.78 L1186.58 1205.78 L1187.16 1205.78 L1187.75 1205.78 L1188.34 1205.78 L1188.92 1205.78 L1189.51 1205.78 L1190.1 1205.78 L1190.68 1205.78 L1191.27 1205.78 L1191.86 1205.78 L1192.44 1205.78 L1193.03 1205.78 L1193.62 1205.78 L1194.2 1205.78 L1194.79 1205.78 L1195.37 1205.78 L1195.96 1205.78 L1196.55 1205.78 L1197.13 1205.78 L1197.72 1205.78 L1198.31 1205.78 L1198.89 1205.78 L1199.48 1205.78 L1200.07 1205.78 L1200.65 1205.78 L1201.24 1205.78 L1201.83 1205.78 L1202.41 1205.78 L1203 1205.78 L1203.58 1205.78 L1204.17 1205.78 L1204.76 1205.78 L1205.34 1205.78 L1205.93 1205.78 L1206.52 1205.78 L1207.1 1205.78 L1207.69 1205.78 L1208.28 1205.78 L1208.86 1205.78 L1209.45 1205.78 L1210.03 1205.78 L1210.62 1205.78 L1211.21 1205.78 L1211.79 1205.78 L1212.38 1205.78 L1212.97 1205.78 L1213.55 1205.78 L1214.14 1205.78 L1214.73 1205.78 L1215.31 1205.78 L1215.9 1205.78 L1216.49 1205.78 L1217.07 1205.78 L1217.66 1205.78 L1218.24 1205.78 L1218.83 1205.78 L1219.42 1205.78 L1220 1205.78 L1220.59 1205.78 L1221.18 1205.78 L1221.76 1205.78 L1222.35 1205.78 L1222.94 1205.78 L1223.52 1205.78 L1224.11 1205.78 L1224.7 1205.78 L1225.28 1205.78 L1225.87 1205.78 L1226.45 1205.78 L1227.04 1205.78 L1227.63 1205.78 L1228.21 1205.78 L1228.8 1205.78 L1229.39 1205.78 L1229.97 1205.78 L1230.56 1205.78 L1231.15 1205.78 L1231.73 1205.78 L1232.32 1205.78 L1232.91 1205.78 L1233.49 1205.78 L1234.08 1205.78 L1234.66 1205.78 L1235.25 1205.78 L1235.84 1205.78 L1236.42 1205.78 L1237.01 1205.78 L1237.6 1205.78 L1238.18 1205.78 L1238.77 1205.78 L1239.36 1205.78 L1239.94 1205.78 L1240.53 1205.78 L1241.11 1205.78 L1241.7 1205.78 L1242.29 1205.78 L1242.87 1205.78 L1243.46 1205.78 L1244.05 1205.78 L1244.63 1205.78 L1245.22 1205.78 L1245.81 1205.78 L1246.39 1205.78 L1246.98 1205.78 L1247.57 1205.78 L1248.15 1205.78 L1248.74 1205.78 L1249.32 1205.78 L1249.91 1205.78 L1250.5 1205.78 L1251.08 1205.78 L1251.67 1205.78 L1252.26 1205.78 L1252.84 1205.78 L1253.43 1205.78 L1254.02 1205.78 L1254.6 1205.78 L1255.19 1205.78 L1255.78 1205.78 L1256.36 1205.78 L1256.95 1205.78 L1257.53 1205.78 L1258.12 1205.78 L1258.71 1205.78 L1259.29 1205.78 L1259.88 1205.78 L1260.47 1205.78 L1261.05 1205.78 L1261.64 1205.78 L1262.23 1205.78 L1262.81 1205.78 L1263.4 1205.78 L1263.98 1205.78 L1264.57 1205.78 L1265.16 1205.78 L1265.74 1205.78 L1266.33 1205.78 L1266.92 1205.78 L1267.5 1205.78 L1268.09 1205.78 L1268.68 1205.78 L1269.26 1205.78 L1269.85 1205.78 L1270.44 1205.78 L1271.02 1205.78 L1271.61 1205.78 L1272.19 1205.78 L1272.78 1205.78 L1273.37 1205.78 L1273.95 1205.78 L1274.54 1205.78 L1275.13 1205.78 L1275.71 1205.78 L1276.3 1205.78 L1276.89 1205.78 L1277.47 1205.78 L1278.06 1205.78 L1278.65 1205.78 L1279.23 1205.78 L1279.82 1205.78 L1280.4 1205.78 L1280.99 1205.78 L1281.58 1205.78 L1282.16 1205.78 L1282.75 1205.78 L1283.34 1205.78 L1283.92 1205.78 L1284.51 1205.78 L1285.1 1205.78 L1285.68 1205.78 L1286.27 1205.78 L1286.86 1205.78 L1287.44 1205.78 L1288.03 1205.78 L1288.61 1205.78 L1289.2 1205.78 L1289.79 1205.78 L1290.37 1205.78 L1290.96 1205.78 L1291.55 1205.78 L1292.13 1205.78 L1292.72 1205.78 L1293.31 1205.78 L1293.89 1205.78 L1294.48 1205.78 L1295.06 1205.78 L1295.65 1205.78 L1296.24 1205.78 L1296.82 1205.78 L1297.41 1205.78 L1298 1205.78 L1298.58 1205.78 L1299.17 1205.78 L1299.76 1205.78 L1300.34 1205.78 L1300.93 1205.78 L1301.52 1205.78 L1302.1 1205.78 L1302.69 1205.78 L1303.27 1205.78 L1303.86 1205.78 L1304.45 1205.78 L1305.03 1205.78 L1305.62 1205.78 L1306.21 1205.78 L1306.79 1205.78 L1307.38 1205.78 L1307.97 1205.78 L1308.55 1205.78 L1309.14 1205.78 L1309.73 1205.78 L1310.31 1205.78 L1310.9 1205.78 L1311.48 1205.78 L1312.07 1205.78 L1312.66 1205.78 L1313.24 1205.78 L1313.83 1205.78 L1314.42 1205.78 L1315 1205.78 L1315.59 1205.78 L1316.18 1205.78 L1316.76 1205.78 L1317.35 1205.78 L1317.93 1205.78 L1318.52 1205.78 L1319.11 1205.78 L1319.69 1205.78 L1320.28 1205.78 L1320.87 1205.78 L1321.45 1205.78 L1322.04 1205.78 L1322.63 1205.78 L1323.21 1205.78 L1323.8 1205.78 L1324.39 1205.78 L1324.97 1205.78 L1325.56 1205.78 L1326.14 1205.78 L1326.73 1205.78 L1327.32 1205.78 L1327.9 1205.78 L1328.49 1205.78 L1329.08 1205.78 L1329.66 1205.78 L1330.25 1205.78 L1330.84 1205.78 L1331.42 1205.78 L1332.01 1205.78 L1332.6 1205.78 L1333.18 1205.78 L1333.77 1205.78 L1334.35 1205.78 L1334.94 1205.78 L1335.53 1205.78 L1336.11 1205.78 L1336.7 1205.78 L1337.29 1205.78 L1337.87 1205.78 L1338.46 1205.78 L1339.05 1205.78 L1339.63 1205.78 L1340.22 1205.78 L1340.8 1205.78 L1341.39 1205.78 L1341.98 1205.78 L1342.56 1205.78 L1343.15 1205.78 L1343.74 1205.78 L1344.32 1205.78 L1344.91 1205.78 L1345.5 1205.78 L1346.08 1205.78 L1346.67 1205.78 L1347.26 1205.78 L1347.84 1205.78 L1348.43 1205.78 L1349.01 1205.78 L1349.6 1205.78 L1350.19 1205.78 L1350.77 1205.78 L1351.36 1205.78 L1351.95 1205.78 L1352.53 1205.78 L1353.12 1205.78 L1353.71 1205.78 L1354.29 1205.78 L1354.88 1205.78 L1355.47 1205.78 L1356.05 1205.78 L1356.64 1205.78 L1357.22 1205.78 L1357.81 1205.78 L1358.4 1205.78 L1358.98 1205.78 L1359.57 1205.78 L1360.16 1205.78 L1360.74 1205.78 L1361.33 1205.78 L1361.92 1205.78 L1362.5 1205.78 L1363.09 1205.78 L1363.68 1205.78 L1364.26 1205.78 L1364.85 1205.78 L1365.43 1205.78 L1366.02 1205.78 L1366.61 1205.78 L1367.19 1205.78 L1367.78 1205.78 L1368.37 1205.78 L1368.95 1205.78 L1369.54 1205.78 L1370.13 1205.78 L1370.71 1205.78 L1371.3 1205.78 L1371.88 1205.78 L1372.47 1205.78 L1373.06 1205.78 L1373.64 1205.78 L1374.23 1205.78 L1374.82 1205.78 L1375.4 1205.78 L1375.99 1205.78 L1376.58 1205.78 L1377.16 1205.78 L1377.75 1205.78 L1378.34 1205.78 L1378.92 1205.78 L1379.51 1205.78 L1380.09 1205.78 L1380.68 1205.78 L1381.27 1205.78 L1381.85 1205.78 L1382.44 1205.78 L1383.03 1205.78 L1383.61 1205.78 L1384.2 1205.78 L1384.79 1205.78 L1385.37 1205.78 L1385.96 1205.78 L1386.55 1205.78 L1387.13 1205.78 L1387.72 1205.78 L1388.3 1205.78 L1388.89 1205.78 L1389.48 1205.78 L1390.06 1205.78 L1390.65 1205.78 L1391.24 1205.78 L1391.82 1205.78 L1392.41 1205.78 L1393 1205.78 L1393.58 1205.78 L1394.17 1205.78 L1394.75 1205.78 L1395.34 1205.78 L1395.93 1205.78 L1396.51 1205.78 L1397.1 1205.78 L1397.69 1205.78 L1398.27 1205.78 L1398.86 1205.78 L1399.45 1205.78 L1400.03 1205.78 L1400.62 1205.78 L1401.21 1205.78 L1401.79 1205.78 L1402.38 1205.78 L1402.96 1205.78 L1403.55 1205.78 L1404.14 1205.78 L1404.72 1205.78 L1405.31 1205.78 L1405.9 1205.78 L1406.48 1205.78 L1407.07 1205.78 L1407.66 1205.78 L1408.24 1205.78 L1408.83 1205.78 L1409.42 1205.78 L1410 1205.78 L1410.59 1205.78 L1411.17 1205.78 L1411.76 1205.78 L1412.35 1205.78 L1412.93 1205.78 L1413.52 1205.78 L1414.11 1205.78 L1414.69 1205.78 L1415.28 1205.78 L1415.87 1205.78 L1416.45 1205.78 L1417.04 1205.78 L1417.63 1205.78 L1418.21 1205.78 L1418.8 1205.78 L1419.38 1205.78 L1419.97 1205.78 L1420.56 1205.78 L1421.14 1205.78 L1421.73 1205.78 L1422.32 1205.78 L1422.9 1205.78 L1423.49 1205.78 L1424.08 1205.78 L1424.66 1205.78 L1425.25 1205.78 L1425.83 1205.78 L1426.42 1205.78 L1427.01 1205.78 L1427.59 1205.78 L1428.18 1205.78 L1428.77 1205.78 L1429.35 1205.78 L1429.94 1205.78 L1430.53 1205.78 L1431.11 1205.78 L1431.7 1205.78 L1432.29 1205.78 L1432.87 1205.78 L1433.46 1205.78 L1434.04 1205.78 L1434.63 1205.78 L1435.22 1205.78 L1435.8 1205.78 L1436.39 1205.78 L1436.98 1205.78 L1437.56 1205.78 L1438.15 1205.78 L1438.74 1205.78 L1439.32 1205.78 L1439.91 1205.78 L1440.5 1205.78 L1441.08 1205.78 L1441.67 1205.78 L1442.25 1205.78 L1442.84 1205.78 L1443.43 1205.78 L1444.01 1205.78 L1444.6 1205.78 L1445.19 1205.78 L1445.77 1205.78 L1446.36 1205.78 L1446.95 1205.78 L1447.53 1205.78 L1448.12 1205.78 L1448.7 1205.78 L1449.29 1205.78 L1449.88 1205.78 L1450.46 1205.78 L1451.05 1205.78 L1451.64 1205.78 L1452.22 1205.78 L1452.81 1205.78 L1453.4 1205.78 L1453.98 1205.78 L1454.57 1205.78 L1455.16 1205.78 L1455.74 1205.78 L1456.33 1205.78 L1456.91 1205.78 L1457.5 1205.78 L1458.09 1205.78 L1458.67 1205.78 L1459.26 1205.78 L1459.85 1205.78 L1460.43 1205.78 L1461.02 1205.78 L1461.61 1205.78 L1462.19 1205.78 L1462.78 1205.78 L1463.37 1205.78 L1463.95 1205.78 L1464.54 1205.78 L1465.12 1205.78 L1465.71 1205.78 L1466.3 1205.78 L1466.88 1205.78 L1467.47 1205.78 L1468.06 1205.78 L1468.64 1205.78 L1469.23 1205.78 L1469.82 1205.78 L1470.4 1205.78 L1470.99 1205.78 L1471.57 1205.78 L1472.16 1205.78 L1472.75 1205.78 L1473.33 1205.78 L1473.92 1205.78 L1474.51 1205.78 L1475.09 1205.78 L1475.68 1205.78 L1476.27 1205.78 L1476.85 1205.78 L1477.44 1205.78 L1478.03 1205.78 L1478.61 1205.78 L1479.2 1205.78 L1479.78 1205.78 L1480.37 1205.78 L1480.96 1205.78 L1481.54 1205.78 L1482.13 1205.78 L1482.72 1205.78 L1483.3 1205.78 L1483.89 1205.78 L1484.48 1205.78 L1485.06 1205.78 L1485.65 1205.78 L1486.24 1205.78 L1486.82 1205.78 L1487.41 1205.78 L1487.99 1205.78 L1488.58 1205.78 L1489.17 1205.78 L1489.75 1205.78 L1490.34 1205.78 L1490.93 1205.78 L1491.51 1205.78 L1492.1 1205.78 L1492.69 1205.78 L1493.27 1205.78 L1493.86 1205.78 L1494.45 1205.78 L1495.03 1205.78 L1495.62 1205.78 L1496.2 1205.78 L1496.79 1205.78 L1497.38 1205.78 L1497.96 1205.78 L1498.55 1205.78 L1499.14 1205.78 L1499.72 1205.78 L1500.31 1205.78 L1500.9 1205.78 L1501.48 1205.78 L1502.07 1205.78 L1502.65 1205.78 L1503.24 1205.78 L1503.83 1205.78 L1504.41 1205.78 L1505 1205.78 L1505.59 1205.78 L1506.17 1205.78 L1506.76 1205.78 L1507.35 1205.78 L1507.93 1205.78 L1508.52 1205.78 L1509.11 1205.78 L1509.69 1205.78 L1510.28 1205.78 L1510.86 1205.78 L1511.45 1205.78 L1512.04 1205.78 L1512.62 1205.78 L1513.21 1205.78 L1513.8 1205.78 L1514.38 1205.78 L1514.97 1205.78 L1515.56 1205.78 L1516.14 1205.78 L1516.73 1205.78 L1517.32 1205.78 L1517.9 1205.78 L1518.49 1205.78 L1519.07 1205.78 L1519.66 1205.78 L1520.25 1205.78 L1520.83 1205.78 L1521.42 1205.78 L1522.01 1205.78 L1522.59 1205.78 L1523.18 1205.78 L1523.77 1205.78 L1524.35 1205.78 L1524.94 1205.78 L1525.52 1205.78 L1526.11 1205.78 L1526.7 1205.78 L1527.28 1205.78 L1527.87 1205.78 L1528.46 1205.78 L1529.04 1205.78 L1529.63 1205.78 L1530.22 1205.78 L1530.8 1205.78 L1531.39 1205.78 L1531.98 1205.78 L1532.56 1205.78 L1533.15 1205.78 L1533.73 1205.78 L1534.32 1205.78 L1534.91 1205.78 L1535.49 1205.78 L1536.08 1205.78 L1536.67 1205.78 L1537.25 1205.78 L1537.84 1205.78 L1538.43 1205.78 L1539.01 1205.78 L1539.6 1205.78 L1540.19 1205.78 L1540.77 1205.78 L1541.36 1205.78 L1541.94 1205.78 L1542.53 1205.78 L1543.12 1205.78 L1543.7 1205.78 L1544.29 1205.78 L1544.88 1205.78 L1545.46 1205.78 L1546.05 1205.78 L1546.64 1205.78 L1547.22 1205.78 L1547.81 1205.78 L1548.4 1205.78 L1548.98 1205.78 L1549.57 1205.78 L1550.15 1205.78 L1550.74 1205.78 L1551.33 1205.78 L1551.91 1205.78 L1552.5 1205.78 L1553.09 1205.78 L1553.67 1205.78 L1554.26 1205.78 L1554.85 1205.78 L1555.43 1205.78 L1556.02 1205.78 L1556.6 1205.78 L1557.19 1205.78 L1557.78 1205.78 L1558.36 1205.78 L1558.95 1205.78 L1559.54 1205.78 L1560.12 1205.78 L1560.71 1205.78 L1561.3 1205.78 L1561.88 1205.78 L1562.47 1205.78 L1563.06 1205.78 L1563.64 1205.78 L1564.23 1205.78 L1564.81 1205.78 L1565.4 1205.78 L1565.99 1205.78 L1566.57 1205.78 L1567.16 1205.78 L1567.75 1205.78 L1568.33 1205.78 L1568.92 1205.78 L1569.51 1205.78 L1570.09 1205.78 L1570.68 1205.78 L1571.27 1205.78 L1571.85 1205.78 L1572.44 1205.78 L1573.02 1205.78 L1573.61 1205.78 L1574.2 1205.78 L1574.78 1205.78 L1575.37 1205.78 L1575.96 1205.78 L1576.54 1205.78 L1577.13 1205.78 L1577.72 1205.78 L1578.3 1205.78 L1578.89 1205.78 L1579.47 1205.78 L1580.06 1205.78 L1580.65 1205.78 L1581.23 1205.78 L1581.82 1205.78 L1582.41 1205.78 L1582.99 1205.78 L1583.58 1205.78 L1584.17 1205.78 L1584.75 1205.78 L1585.34 1205.78 L1585.93 1205.78 L1586.51 1205.78 L1587.1 1205.78 L1587.68 1205.78 L1588.27 1205.78 L1588.86 1205.78 L1589.44 1205.78 L1590.03 1205.78 L1590.62 1205.78 L1591.2 1205.78 L1591.79 1205.78 L1592.38 1205.78 L1592.96 1205.78 L1593.55 1205.78 L1594.14 1205.78 L1594.72 1205.78 L1595.31 1205.78 L1595.89 1205.78 L1596.48 1205.78 L1597.07 1205.78 L1597.65 1205.78 L1598.24 1205.78 L1598.83 1205.78 L1599.41 1205.78 L1600 1205.78 L1600.59 1205.78 L1601.17 1205.78 L1601.76 1205.78 L1602.34 1205.78 L1602.93 1205.78 L1603.52 1205.78 L1604.1 1205.78 L1604.69 1205.78 L1605.28 1205.78 L1605.86 1205.78 L1606.45 1205.78 L1607.04 1205.78 L1607.62 1205.78 L1608.21 1205.78 L1608.8 1205.78 L1609.38 1205.78 L1609.97 1205.78 L1610.55 1205.78 L1611.14 1205.78 L1611.73 1205.78 L1612.31 1205.78 L1612.9 1205.78 L1613.49 1205.78 L1614.07 1205.78 L1614.66 1205.78 L1615.25 1205.78 L1615.83 1205.78 L1616.42 1205.78 L1617.01 1205.78 L1617.59 1205.78 L1618.18 1205.78 L1618.76 1205.78 L1619.35 1205.78 L1619.94 1205.78 L1620.52 1205.78 L1621.11 1205.78 L1621.7 1205.78 L1622.28 1205.78 L1622.87 1205.78 L1623.46 1205.78 L1624.04 1205.78 L1624.63 1205.78 L1625.22 1205.78 L1625.8 1205.78 L1626.39 1205.78 L1626.97 1205.78 L1627.56 1205.78 L1628.15 1205.78 L1628.73 1205.78 L1629.32 1205.78 L1629.91 1205.78 L1630.49 1205.78 L1631.08 1205.78 L1631.67 1205.78 L1632.25 1205.78 L1632.84 1205.78 L1633.42 1205.78 L1634.01 1205.78 L1634.6 1205.78 L1635.18 1205.78 L1635.77 1205.78 L1636.36 1205.78 L1636.94 1205.78 L1637.53 1205.78 L1638.12 1205.78 L1638.7 1205.78 L1639.29 1205.78 L1639.88 1205.78 L1640.46 1205.78 L1641.05 1205.78 L1641.63 1205.78 L1642.22 1205.78 L1642.81 1205.78 L1643.39 1205.78 L1643.98 1205.78 L1644.57 1205.78 L1645.15 1205.78 L1645.74 1205.78 L1646.33 1205.78 L1646.91 1205.78 L1647.5 1205.78 L1648.09 1205.78 L1648.67 1205.78 L1649.26 1205.78 L1649.84 1205.78 L1650.43 1205.78 L1651.02 1205.78 L1651.6 1205.78 L1652.19 1205.78 L1652.78 1205.78 L1653.36 1205.78 L1653.95 1205.78 L1654.54 1205.78 L1655.12 1205.78 L1655.71 1205.78 L1656.29 1205.78 L1656.88 1205.78 L1657.47 1205.78 L1658.05 1205.78 L1658.64 1205.78 L1659.23 1205.78 L1659.81 1205.78 L1660.4 1205.78 L1660.99 1205.78 L1661.57 1205.78 L1662.16 1205.78 L1662.75 1205.78 L1663.33 1205.78 L1663.92 1205.78 L1664.5 1205.78 L1665.09 1205.78 L1665.68 1205.78 L1666.26 1205.78 L1666.85 1205.78 L1667.44 1205.78 L1668.02 1205.78 L1668.61 1205.78 L1669.2 1205.78 L1669.78 1205.78 L1670.37 1205.78 L1670.96 1205.78 L1671.54 1205.78 L1672.13 1205.78 L1672.71 1205.78 L1673.3 1205.78 L1673.89 1205.78 L1674.47 1205.78 L1675.06 1205.78 L1675.65 1205.78 L1676.23 1205.78 L1676.82 1205.78 L1677.41 1205.78 L1677.99 1205.78 L1678.58 1205.78 L1679.17 1205.78 L1679.75 1205.78 L1680.34 1205.78 L1680.92 1205.78 L1681.51 1205.78 L1682.1 1205.78 L1682.68 1205.78 L1683.27 1205.78 L1683.86 1205.78 L1684.44 1205.78 L1685.03 1205.78 L1685.62 1205.78 L1686.2 1205.78 L1686.79 1205.78 L1687.37 1205.78 L1687.96 1205.78 L1688.55 1205.78 L1689.13 1205.78 L1689.72 1205.78 L1690.31 1205.78 L1690.89 1205.78 L1691.48 1205.78 L1692.07 1205.78 L1692.65 1205.78 L1693.24 1205.78 L1693.83 1205.78 L1694.41 1205.78 L1695 1205.78 L1695.58 1205.78 L1696.17 1205.78 L1696.76 1205.78 L1697.34 1205.78 L1697.93 1205.78 L1698.52 1205.78 L1699.1 1205.78 L1699.69 1205.78 L1700.28 1205.78 L1700.86 1205.78 L1701.45 1205.78 L1702.04 1205.78 L1702.62 1205.78 L1703.21 1205.78 L1703.79 1205.78 L1704.38 1205.78 L1704.97 1205.78 L1705.55 1205.78 L1706.14 1205.78 L1706.73 1205.78 L1707.31 1205.78 L1707.9 1205.78 L1708.49 1205.78 L1709.07 1205.78 L1709.66 1205.78 L1710.24 1205.78 L1710.83 1205.78 L1711.42 1205.78 L1712 1205.78 L1712.59 1205.78 L1713.18 1205.78 L1713.76 1205.78 L1714.35 1205.78 L1714.94 1205.78 L1715.52 1205.78 L1716.11 1205.78 L1716.7 1205.78 L1717.28 1205.78 L1717.87 1205.78 L1718.45 1205.78 L1719.04 1205.78 L1719.63 1205.78 L1720.21 1205.78 L1720.8 1205.78 L1721.39 1205.78 L1721.97 1205.78 L1722.56 1205.78 L1723.15 1205.78 L1723.73 1205.78 L1724.32 1205.78 L1724.91 1205.78 L1725.49 1205.78 L1726.08 1205.78 L1726.66 1205.78 L1727.25 1205.78 L1727.84 1205.78 L1728.42 1205.78 L1729.01 1205.78 L1729.6 1205.78 L1730.18 1205.78 L1730.77 1205.78 L1731.36 1205.78 L1731.94 1205.78 L1732.53 1205.78 L1733.11 1205.78 L1733.7 1205.78 L1734.29 1205.78 L1734.87 1205.78 L1735.46 1205.78 L1736.05 1205.78 L1736.63 1205.78 L1737.22 1205.78 L1737.81 1205.78 L1738.39 1205.78 L1738.98 1205.78 L1739.57 1205.78 L1740.15 1205.78 L1740.74 1205.78 L1741.32 1205.78 L1741.91 1205.78 L1742.5 1205.78 L1743.08 1205.78 L1743.67 1205.78 L1744.26 1205.78 L1744.84 1205.78 L1745.43 1205.78 L1746.02 1205.78 L1746.6 1205.78 L1747.19 1205.78 L1747.78 1205.78 L1748.36 1205.78 L1748.95 1205.78 L1749.53 1205.78 L1750.12 1205.78 L1750.71 1205.78 L1751.29 1205.78 L1751.88 1205.78 L1752.47 1205.78 L1753.05 1205.78 L1753.64 1205.78 L1754.23 1205.78 L1754.81 1205.78 L1755.4 1205.78 L1755.99 1205.78 L1756.57 1205.78 L1757.16 1205.78 L1757.74 1205.78 L1758.33 1205.78 L1758.92 1205.78 L1759.5 1205.78 L1760.09 1205.78 L1760.68 1205.78 L1761.26 1205.78 L1761.85 1205.78 L1762.44 1205.78 L1763.02 1205.78 L1763.61 1205.78 L1764.19 1205.78 L1764.78 1205.78 L1765.37 1205.78 L1765.95 1205.78 L1766.54 1205.78 L1767.13 1205.78 L1767.71 1205.78 L1768.3 1205.78 L1768.89 1205.78 L1769.47 1205.78 L1770.06 1205.78 L1770.65 1205.78 L1771.23 1205.78 L1771.82 1205.78 L1772.4 1205.78 L1772.99 1205.78 L1773.58 1205.78 L1774.16 1205.78 L1774.75 1205.78 L1775.34 1205.78 L1775.92 1205.78 L1776.51 1205.78 L1777.1 1205.78 L1777.68 1205.78 L1778.27 1205.78 L1778.86 1205.78 L1779.44 1205.78 L1780.03 1205.78 L1780.61 1205.78 L1781.2 1205.78 L1781.79 1205.78 L1782.37 1205.78 L1782.96 1205.78 L1783.55 1205.78 L1784.13 1205.78 L1784.72 1205.78 L1785.31 1205.78 L1785.89 1205.78 L1786.48 1205.78 L1787.06 1205.78 L1787.65 1205.78 L1788.24 1205.78 L1788.82 1205.78 L1789.41 1205.78 L1790 1205.78 L1790.58 1205.78 L1791.17 1205.78 L1791.76 1205.78 L1792.34 1205.78 L1792.93 1205.78 L1793.52 1205.78 L1794.1 1205.78 L1794.69 1205.78 L1795.27 1205.78 L1795.86 1205.78 L1796.45 1205.78 L1797.03 1205.78 L1797.62 1205.78 L1798.21 1205.78 L1798.79 1205.78 L1799.38 1205.78 L1799.97 1205.78 L1800.55 1205.78 L1801.14 1205.78 L1801.73 1205.78 L1802.31 1205.78 L1802.9 1205.78 L1803.48 1205.78 L1804.07 1205.78 L1804.66 1205.78 L1805.24 1205.78 L1805.83 1205.78 L1806.42 1205.78 L1807 1205.78 L1807.59 1205.78 L1808.18 1205.78 L1808.76 1205.78 L1809.35 1205.78 L1809.94 1205.78 L1810.52 1205.78 L1811.11 1205.78 L1811.69 1205.78 L1812.28 1205.78 L1812.87 1205.78 L1813.45 1205.78 L1814.04 1205.78 L1814.63 1205.78 L1815.21 1205.78 L1815.8 1205.78 L1816.39 1205.78 L1816.97 1205.78 L1817.56 1205.78 L1818.14 1205.78 L1818.73 1205.78 L1819.32 1205.78 L1819.9 1205.78 L1820.49 1205.78 L1821.08 1205.78 L1821.66 1205.78 L1822.25 1205.78 L1822.84 1205.78 L1823.42 1205.78 L1824.01 1205.78 L1824.6 1205.78 L1825.18 1205.78 L1825.77 1205.78 L1826.35 1205.78 L1826.94 1205.78 L1827.53 1205.78 L1828.11 1205.78 L1828.7 1205.78 L1829.29 1205.78 L1829.87 1205.78 L1830.46 1205.78 L1831.05 1205.78 L1831.63 1205.78 L1832.22 1205.78 L1832.81 1205.78 L1833.39 1205.78 L1833.98 1205.78 L1834.56 1205.78 L1835.15 1205.78 L1835.74 1205.78 L1836.32 1205.78 L1836.91 1205.78 L1837.5 1205.78 L1838.08 1205.78 L1838.67 1205.78 L1839.26 1205.78 L1839.84 1205.78 L1840.43 1205.78 L1841.01 1205.78 L1841.6 1205.78 L1842.19 1205.78 L1842.77 1205.78 L1843.36 1205.78 L1843.95 1205.78 L1844.53 1205.78 L1845.12 1205.78 L1845.71 1205.78 L1846.29 1205.78 L1846.88 1205.78 L1847.47 1205.78 L1848.05 1205.78 L1848.64 1205.78 L1849.22 1205.78 L1849.81 1205.78 L1850.4 1205.78 L1850.98 1205.78 L1851.57 1205.78 L1852.16 1205.78 L1852.74 1205.78 L1853.33 1205.78 L1853.92 1205.78 L1854.5 1205.78 L1855.09 1205.78 L1855.68 1205.78 L1856.26 1205.78 L1856.85 1205.78 L1857.43 1205.78 L1858.02 1205.78 L1858.61 1205.78 L1859.19 1205.78 L1859.78 1205.78 L1860.37 1205.78 L1860.95 1205.78 L1861.54 1205.78 L1862.13 1205.78 L1862.71 1205.78 L1863.3 1205.78 L1863.88 1205.78 L1864.47 1205.78 L1865.06 1205.78 L1865.64 1205.78 L1866.23 1205.78 L1866.82 1205.78 L1867.4 1205.78 L1867.99 1205.78 L1868.58 1205.78 L1869.16 1205.78 L1869.75 1205.78 L1870.34 1205.78 L1870.92 1205.78 L1871.51 1205.78 L1872.09 1205.78 L1872.68 1205.78 L1873.27 1205.78 L1873.85 1205.78 L1874.44 1205.78 L1875.03 1205.78 L1875.61 1205.78 L1876.2 1205.78 L1876.79 1205.78 L1877.37 1205.78 L1877.96 1205.78 L1878.55 1205.78 L1879.13 1205.78 L1879.72 1205.78 L1880.3 1205.78 L1880.89 1205.78 L1881.48 1205.78 L1882.06 1205.78 L1882.65 1205.78 L1883.24 1205.78 L1883.82 1205.78 L1884.41 1205.78 L1885 1205.78 L1885.58 1205.78 L1886.17 1205.78 L1886.76 1205.78 L1887.34 1205.78 L1887.93 1205.78 L1888.51 1205.78 L1889.1 1205.78 L1889.69 1205.78 L1890.27 1205.78 L1890.86 1205.78 L1891.45 1205.78 L1892.03 1205.78 L1892.62 1205.78 L1893.21 1205.78 L1893.79 1205.78 L1894.38 1205.78 L1894.96 1205.78 L1895.55 1205.78 L1896.14 1205.78 L1896.72 1205.78 L1897.31 1205.78 L1897.9 1205.78 L1898.48 1205.78 L1899.07 1205.78 L1899.66 1205.78 L1900.24 1205.78 L1900.83 1205.78 L1901.42 1205.78 L1902 1205.78 L1902.59 1205.78 L1903.17 1205.78 L1903.76 1205.78 L1904.35 1205.78 L1904.93 1205.78 L1905.52 1205.78 L1906.11 1205.78 L1906.69 1205.78 L1907.28 1205.78 L1907.87 1205.78 L1908.45 1205.78 L1909.04 1205.78 L1909.63 1205.78 L1910.21 1205.78 L1910.8 1205.78 L1911.38 1205.78 L1911.97 1205.78 L1912.56 1205.78 L1913.14 1205.78 L1913.73 1205.78 L1914.32 1205.78 L1914.9 1205.78 L1915.49 1205.78 L1916.08 1205.78 L1916.66 1205.78 L1917.25 1205.78 L1917.83 1205.78 L1918.42 1205.78 L1919.01 1205.78 L1919.59 1205.78 L1920.18 1205.78 L1920.77 1205.78 L1921.35 1205.78 L1921.94 1205.78 L1922.53 1205.78 L1923.11 1205.78 L1923.7 1205.78 L1924.29 1205.78 L1924.87 1205.78 L1925.46 1205.78 L1926.04 1205.78 L1926.63 1205.78 L1927.22 1205.78 L1927.8 1205.78 L1928.39 1205.78 L1928.98 1205.78 L1929.56 1205.78 L1930.15 1205.78 L1930.74 1205.78 L1931.32 1205.78 L1931.91 1205.78 L1932.5 1205.78 L1933.08 1205.78 L1933.67 1205.78 L1934.25 1205.78 L1934.84 1205.78 L1935.43 1205.78 L1936.01 1205.78 L1936.6 1205.78 L1937.19 1205.78 L1937.77 1205.78 L1938.36 1205.78 L1938.95 1205.78 L1939.53 1205.78 L1940.12 1205.78 L1940.71 1205.78 L1941.29 1205.78 L1941.88 1205.78 L1942.46 1205.78 L1943.05 1205.78 L1943.64 1205.78 L1944.22 1205.78 L1944.81 1205.78 L1945.4 1205.78 L1945.98 1205.78 L1946.57 1205.78 L1947.16 1205.78 L1947.74 1205.78 L1948.33 1205.78 L1948.91 1205.78 L1949.5 1205.78 L1950.09 1205.78 L1950.67 1205.78 L1951.26 1205.78 L1951.85 1205.78 L1952.43 1205.78 L1953.02 1205.78 L1953.61 1205.78 L1954.19 1205.78 L1954.78 1205.78 L1955.37 1205.78 L1955.95 1205.78 L1956.54 1205.78 L1957.12 1205.78 L1957.71 1205.78 L1958.3 1205.78 L1958.88 1205.78 L1959.47 1205.78 L1960.06 1205.78 L1960.64 1205.78 L1961.23 1205.78 L1961.82 1205.78 L1962.4 1205.78 L1962.99 1205.78 L1963.58 1205.78 L1964.16 1205.78 L1964.75 1205.78 L1965.33 1205.78 L1965.92 1205.78 L1966.51 1205.78 L1967.09 1205.78 L1967.68 1205.78 L1968.27 1205.78 L1968.85 1205.78 L1969.44 1205.78 L1970.03 1205.78 L1970.61 1205.78 L1971.2 1205.78 L1971.78 1205.78 L1972.37 1205.78 L1972.96 1205.78 L1973.54 1205.78 L1974.13 1205.78 L1974.72 1205.78 L1975.3 1205.78 L1975.89 1205.78 L1976.48 1205.78 L1977.06 1205.78 L1977.65 1205.78 L1978.24 1205.78 L1978.82 1205.78 L1979.41 1205.78 L1979.99 1205.78 L1980.58 1205.78 L1981.17 1205.78 L1981.75 1205.78 L1982.34 1205.78 L1982.93 1205.78 L1983.51 1205.78 L1984.1 1205.78 L1984.69 1205.78 L1985.27 1205.78 L1985.86 1205.78 L1986.45 1205.78 L1987.03 1205.78 L1987.62 1205.78 L1988.2 1205.78 L1988.79 1205.78 L1989.38 1205.78 L1989.96 1205.78 L1990.55 1205.78 L1991.14 1205.78 L1991.72 1205.78 L1992.31 1205.78 L1992.9 1205.78 L1993.48 1205.78 L1994.07 1205.78 L1994.65 1205.78 L1995.24 1205.78 L1995.83 1205.78 L1996.41 1205.78 L1997 1205.78 L1997.59 1205.78 L1998.17 1205.78 L1998.76 1205.78 L1999.35 1205.78 L1999.93 1205.78 L2000.52 1205.78 L2001.11 1205.78 L2001.69 1205.78 L2002.28 1205.78 L2002.86 1205.78 L2003.45 1205.78 L2004.04 1205.78 L2004.62 1205.78 L2005.21 1205.78 L2005.8 1205.78 L2006.38 1205.78 L2006.97 1205.78 L2007.56 1205.78 L2008.14 1205.78 L2008.73 1205.78 L2009.32 1205.78 L2009.9 1205.78 L2010.49 1205.78 L2011.07 1205.78 L2011.66 1205.78 L2012.25 1205.78 L2012.83 1205.78 L2013.42 1205.78 L2014.01 1205.78 L2014.59 1205.78 L2015.18 1205.78 L2015.77 1205.78 L2016.35 1205.78 L2016.94 1205.78 L2017.53 1205.78 L2018.11 1205.78 L2018.7 1205.78 L2019.28 1205.78 L2019.87 1205.78 L2020.46 1205.78 L2021.04 1205.78 L2021.63 1205.78 L2022.22 1205.78 L2022.8 1205.78 L2023.39 1205.78 L2023.98 1205.78 L2024.56 1205.78 L2025.15 1205.78 L2025.73 1205.78 L2026.32 1205.78 L2026.91 1205.78 L2027.49 1205.78 L2028.08 1205.78 L2028.67 1205.78 L2029.25 1205.78 L2029.84 1205.78 L2030.43 1205.78 L2031.01 1205.78 L2031.6 1205.78 L2032.19 1205.78 L2032.77 1205.78 L2033.36 1205.78 L2033.94 1205.78 L2034.53 1205.78 L2035.12 1205.78 L2035.7 1205.78 L2036.29 1205.78 L2036.88 1205.78 L2037.46 1205.78 L2038.05 1205.78 L2038.64 1205.78 L2039.22 1205.78 L2039.81 1205.78 L2040.4 1205.78 L2040.98 1205.78 L2041.57 1205.78 L2042.15 1205.78 L2042.74 1205.78 L2043.33 1205.78 L2043.91 1205.78 L2044.5 1205.78 L2045.09 1205.78 L2045.67 1205.78 L2046.26 1205.78 L2046.85 1205.78 L2047.43 1205.78 L2048.02 1205.78 L2048.6 1205.78 L2049.19 1205.78 L2049.78 1205.78 L2050.36 1205.78 L2050.95 1205.78 L2051.54 1205.78 L2052.12 1205.78 L2052.71 1205.78 L2053.3 1205.78 L2053.88 1205.78 L2054.47 1205.78 L2055.06 1205.78 L2055.64 1205.78 L2056.23 1205.78 L2056.81 1205.78 L2057.4 1205.78 L2057.99 1205.78 L2058.57 1205.78 L2059.16 1205.78 L2059.75 1205.78 L2060.33 1205.78 L2060.92 1205.78 L2061.51 1205.78 L2062.09 1205.78 L2062.68 1205.78 L2063.27 1205.78 L2063.85 1205.78 L2064.44 1205.78 L2065.02 1205.78 L2065.61 1205.78 L2066.2 1205.78 L2066.78 1205.78 L2067.37 1205.78 L2067.96 1205.78 L2068.54 1205.78 L2069.13 1205.78 L2069.72 1205.78 L2070.3 1205.78 L2070.89 1205.78 L2071.48 1205.78 L2072.06 1205.78 L2072.65 1205.78 L2073.23 1205.78 L2073.82 1205.78 L2074.41 1205.78 L2074.99 1205.78 L2075.58 1205.78 L2076.17 1205.78 L2076.75 1205.78 L2077.34 1205.78 L2077.93 1205.78 L2078.51 1205.78 L2079.1 1205.78 L2079.68 1205.78 L2080.27 1205.78 L2080.86 1205.78 L2081.44 1205.78 L2082.03 1205.78 L2082.62 1205.78 L2083.2 1205.78 L2083.79 1205.78 L2084.38 1205.78 L2084.96 1205.78 L2085.55 1205.78 L2086.14 1205.78 L2086.72 1205.78 L2087.31 1205.78 L2087.89 1205.78 L2088.48 1205.78 L2089.07 1205.78 L2089.65 1205.78 L2090.24 1205.78 L2090.83 1205.78 L2091.41 1205.78 L2092 1205.78 L2092.59 1205.78 L2093.17 1205.78 L2093.76 1205.78 L2094.35 1205.78 L2094.93 1205.78 L2095.52 1205.78 L2096.1 1205.78 L2096.69 1205.78 L2097.28 1205.78 L2097.86 1205.78 L2098.45 1205.78 L2099.04 1205.78 L2099.62 1205.78 L2100.21 1205.78 L2100.8 1205.78 L2101.38 1205.78 L2101.97 1205.78 L2102.55 1205.78 L2103.14 1205.78 L2103.73 1205.78 L2104.31 1205.78 L2104.9 1205.78 L2105.49 1205.78 L2106.07 1205.78 L2106.66 1205.78 L2107.25 1205.78 L2107.83 1205.78 L2108.42 1205.78 L2109.01 1205.78 L2109.59 1205.78 L2110.18 1205.78 L2110.76 1205.78 L2111.35 1205.78 L2111.94 1205.78 L2112.52 1205.78 L2113.11 1205.78 L2113.7 1205.78 L2114.28 1205.78 L2114.87 1205.78 L2115.46 1205.78 L2116.04 1205.78 L2116.63 1205.78 L2117.22 1205.78 L2117.8 1205.78 L2118.39 1205.78 L2118.97 1205.78 L2119.56 1205.78 L2120.15 1205.78 L2120.73 1205.78 L2121.32 1205.78 L2121.91 1205.78 L2122.49 1205.78 L2123.08 1205.78 L2123.67 1205.78 L2124.25 1205.78 L2124.84 1205.78 L2125.42 1205.78 L2126.01 1205.78 L2126.6 1205.78 L2127.18 1205.78 L2127.77 1205.78 L2128.36 1205.78 L2128.94 1205.78 L2129.53 1205.78 L2130.12 1205.78 L2130.7 1205.78 L2131.29 1205.78 L2131.88 1205.78 L2132.46 1205.78 L2133.05 1205.78 L2133.63 1205.78 L2134.22 1205.78 L2134.81 1205.78 L2135.39 1205.78 L2135.98 1205.78 L2136.57 1205.78 L2137.15 1205.78 L2137.74 1205.78 L2138.33 1205.78 L2138.91 1205.78 L2139.5 1205.78 L2140.09 1205.78 L2140.67 1205.78 L2141.26 1205.78 L2141.84 1205.78 L2142.43 1205.78 L2143.02 1205.78 L2143.6 1205.78 L2144.19 1205.78 L2144.78 1205.78 L2145.36 1205.78 L2145.95 1205.78 L2146.54 1205.78 L2147.12 1205.78 L2147.71 1205.78 L2148.3 1205.78 L2148.88 1205.78 L2149.47 1205.78 L2150.05 1205.78 L2150.64 1205.78 L2151.23 1205.78 L2151.81 1205.78 L2152.4 1205.78 L2152.99 1205.78 L2153.57 1205.78 L2154.16 1205.78 L2154.75 1205.78 L2155.33 1205.78 L2155.92 1205.78 L2156.5 1205.78 L2157.09 1205.78 L2157.68 1205.78 L2158.26 1205.78 L2158.26 1205.65 L2157.68 1205.65 L2157.09 1205.65 L2156.5 1205.65 L2155.92 1205.65 L2155.33 1205.65 L2154.75 1205.65 L2154.16 1205.65 L2153.57 1205.65 L2152.99 1205.65 L2152.4 1205.65 L2151.81 1205.65 L2151.23 1205.65 L2150.64 1205.65 L2150.05 1205.65 L2149.47 1205.65 L2148.88 1205.65 L2148.3 1205.65 L2147.71 1205.65 L2147.12 1205.65 L2146.54 1205.65 L2145.95 1205.65 L2145.36 1205.65 L2144.78 1205.65 L2144.19 1205.65 L2143.6 1205.65 L2143.02 1205.65 L2142.43 1205.65 L2141.84 1205.65 L2141.26 1205.65 L2140.67 1205.65 L2140.09 1205.65 L2139.5 1205.65 L2138.91 1205.65 L2138.33 1205.65 L2137.74 1205.65 L2137.15 1205.65 L2136.57 1205.65 L2135.98 1205.65 L2135.39 1205.65 L2134.81 1205.65 L2134.22 1205.65 L2133.63 1205.65 L2133.05 1205.65 L2132.46 1205.65 L2131.88 1205.65 L2131.29 1205.65 L2130.7 1205.65 L2130.12 1205.65 L2129.53 1205.65 L2128.94 1205.65 L2128.36 1205.65 L2127.77 1205.65 L2127.18 1205.65 L2126.6 1205.65 L2126.01 1205.65 L2125.42 1205.65 L2124.84 1205.65 L2124.25 1205.65 L2123.67 1205.65 L2123.08 1205.65 L2122.49 1205.65 L2121.91 1205.65 L2121.32 1205.65 L2120.73 1205.65 L2120.15 1205.65 L2119.56 1205.65 L2118.97 1205.65 L2118.39 1205.65 L2117.8 1205.65 L2117.22 1205.65 L2116.63 1205.65 L2116.04 1205.65 L2115.46 1205.65 L2114.87 1205.65 L2114.28 1205.65 L2113.7 1205.65 L2113.11 1205.65 L2112.52 1205.65 L2111.94 1205.65 L2111.35 1205.65 L2110.76 1205.65 L2110.18 1205.65 L2109.59 1205.65 L2109.01 1205.65 L2108.42 1205.65 L2107.83 1205.65 L2107.25 1205.65 L2106.66 1205.65 L2106.07 1205.65 L2105.49 1205.65 L2104.9 1205.65 L2104.31 1205.65 L2103.73 1205.65 L2103.14 1205.65 L2102.55 1205.65 L2101.97 1205.65 L2101.38 1205.65 L2100.8 1205.65 L2100.21 1205.65 L2099.62 1205.65 L2099.04 1205.65 L2098.45 1205.65 L2097.86 1205.65 L2097.28 1205.65 L2096.69 1205.65 L2096.1 1205.65 L2095.52 1205.65 L2094.93 1205.65 L2094.35 1205.65 L2093.76 1205.65 L2093.17 1205.65 L2092.59 1205.65 L2092 1205.65 L2091.41 1205.65 L2090.83 1205.65 L2090.24 1205.65 L2089.65 1205.65 L2089.07 1205.65 L2088.48 1205.65 L2087.89 1205.65 L2087.31 1205.65 L2086.72 1205.65 L2086.14 1205.65 L2085.55 1205.65 L2084.96 1205.65 L2084.38 1205.65 L2083.79 1205.65 L2083.2 1205.65 L2082.62 1205.65 L2082.03 1205.65 L2081.44 1205.65 L2080.86 1205.65 L2080.27 1205.65 L2079.68 1205.65 L2079.1 1205.65 L2078.51 1205.65 L2077.93 1205.65 L2077.34 1205.65 L2076.75 1205.65 L2076.17 1205.65 L2075.58 1205.65 L2074.99 1205.65 L2074.41 1205.65 L2073.82 1205.65 L2073.23 1205.65 L2072.65 1205.65 L2072.06 1205.65 L2071.48 1205.65 L2070.89 1205.65 L2070.3 1205.65 L2069.72 1205.65 L2069.13 1205.65 L2068.54 1205.65 L2067.96 1205.65 L2067.37 1205.65 L2066.78 1205.65 L2066.2 1205.65 L2065.61 1205.65 L2065.02 1205.65 L2064.44 1205.65 L2063.85 1205.65 L2063.27 1205.65 L2062.68 1205.65 L2062.09 1205.65 L2061.51 1205.65 L2060.92 1205.65 L2060.33 1205.65 L2059.75 1205.65 L2059.16 1205.65 L2058.57 1205.65 L2057.99 1205.65 L2057.4 1205.65 L2056.81 1205.65 L2056.23 1205.65 L2055.64 1205.65 L2055.06 1205.65 L2054.47 1205.65 L2053.88 1205.65 L2053.3 1205.65 L2052.71 1205.65 L2052.12 1205.65 L2051.54 1205.65 L2050.95 1205.65 L2050.36 1205.65 L2049.78 1205.65 L2049.19 1205.65 L2048.6 1205.65 L2048.02 1205.65 L2047.43 1205.65 L2046.85 1205.65 L2046.26 1205.65 L2045.67 1205.65 L2045.09 1205.65 L2044.5 1205.65 L2043.91 1205.65 L2043.33 1205.65 L2042.74 1205.65 L2042.15 1205.65 L2041.57 1205.65 L2040.98 1205.65 L2040.4 1205.65 L2039.81 1205.65 L2039.22 1205.65 L2038.64 1205.65 L2038.05 1205.65 L2037.46 1205.65 L2036.88 1205.65 L2036.29 1205.65 L2035.7 1205.65 L2035.12 1205.65 L2034.53 1205.65 L2033.94 1205.65 L2033.36 1205.65 L2032.77 1205.65 L2032.19 1205.65 L2031.6 1205.65 L2031.01 1205.65 L2030.43 1205.65 L2029.84 1205.65 L2029.25 1205.65 L2028.67 1205.65 L2028.08 1205.65 L2027.49 1205.65 L2026.91 1205.65 L2026.32 1205.65 L2025.73 1205.65 L2025.15 1205.65 L2024.56 1205.65 L2023.98 1205.65 L2023.39 1205.65 L2022.8 1205.65 L2022.22 1205.65 L2021.63 1205.65 L2021.04 1205.65 L2020.46 1205.65 L2019.87 1205.65 L2019.28 1205.65 L2018.7 1205.65 L2018.11 1205.65 L2017.53 1205.65 L2016.94 1205.65 L2016.35 1205.65 L2015.77 1205.65 L2015.18 1205.65 L2014.59 1205.65 L2014.01 1205.65 L2013.42 1205.65 L2012.83 1205.65 L2012.25 1205.65 L2011.66 1205.65 L2011.07 1205.65 L2010.49 1205.65 L2009.9 1205.65 L2009.32 1205.65 L2008.73 1205.65 L2008.14 1205.65 L2007.56 1205.65 L2006.97 1205.65 L2006.38 1205.65 L2005.8 1205.65 L2005.21 1205.65 L2004.62 1205.65 L2004.04 1205.65 L2003.45 1205.65 L2002.86 1205.65 L2002.28 1205.65 L2001.69 1205.65 L2001.11 1205.65 L2000.52 1205.65 L1999.93 1205.65 L1999.35 1205.65 L1998.76 1205.65 L1998.17 1205.65 L1997.59 1205.65 L1997 1205.65 L1996.41 1205.65 L1995.83 1205.65 L1995.24 1205.65 L1994.65 1205.65 L1994.07 1205.65 L1993.48 1205.65 L1992.9 1205.65 L1992.31 1205.65 L1991.72 1205.65 L1991.14 1205.65 L1990.55 1205.65 L1989.96 1205.65 L1989.38 1205.65 L1988.79 1205.65 L1988.2 1205.65 L1987.62 1205.65 L1987.03 1205.65 L1986.45 1205.65 L1985.86 1205.65 L1985.27 1205.65 L1984.69 1205.65 L1984.1 1205.65 L1983.51 1205.65 L1982.93 1205.65 L1982.34 1205.65 L1981.75 1205.65 L1981.17 1205.65 L1980.58 1205.65 L1979.99 1205.65 L1979.41 1205.65 L1978.82 1205.65 L1978.24 1205.65 L1977.65 1205.65 L1977.06 1205.65 L1976.48 1205.65 L1975.89 1205.65 L1975.3 1205.65 L1974.72 1205.65 L1974.13 1205.65 L1973.54 1205.65 L1972.96 1205.65 L1972.37 1205.65 L1971.78 1205.65 L1971.2 1205.65 L1970.61 1205.65 L1970.03 1205.65 L1969.44 1205.65 L1968.85 1205.65 L1968.27 1205.65 L1967.68 1205.65 L1967.09 1205.65 L1966.51 1205.65 L1965.92 1205.65 L1965.33 1205.65 L1964.75 1205.65 L1964.16 1205.65 L1963.58 1205.65 L1962.99 1205.65 L1962.4 1205.65 L1961.82 1205.65 L1961.23 1205.65 L1960.64 1205.65 L1960.06 1205.65 L1959.47 1205.65 L1958.88 1205.65 L1958.3 1205.65 L1957.71 1205.65 L1957.12 1205.65 L1956.54 1205.65 L1955.95 1205.65 L1955.37 1205.65 L1954.78 1205.65 L1954.19 1205.65 L1953.61 1205.65 L1953.02 1205.65 L1952.43 1205.65 L1951.85 1205.65 L1951.26 1205.65 L1950.67 1205.65 L1950.09 1205.65 L1949.5 1205.65 L1948.91 1205.65 L1948.33 1205.65 L1947.74 1205.65 L1947.16 1205.65 L1946.57 1205.65 L1945.98 1205.65 L1945.4 1205.65 L1944.81 1205.65 L1944.22 1205.65 L1943.64 1205.65 L1943.05 1205.65 L1942.46 1205.65 L1941.88 1205.65 L1941.29 1205.65 L1940.71 1205.65 L1940.12 1205.65 L1939.53 1205.65 L1938.95 1205.65 L1938.36 1205.65 L1937.77 1205.65 L1937.19 1205.65 L1936.6 1205.65 L1936.01 1205.65 L1935.43 1205.65 L1934.84 1205.65 L1934.25 1205.65 L1933.67 1205.65 L1933.08 1205.65 L1932.5 1205.65 L1931.91 1205.65 L1931.32 1205.65 L1930.74 1205.65 L1930.15 1205.65 L1929.56 1205.65 L1928.98 1205.65 L1928.39 1205.65 L1927.8 1205.65 L1927.22 1205.65 L1926.63 1205.65 L1926.04 1205.65 L1925.46 1205.65 L1924.87 1205.65 L1924.29 1205.65 L1923.7 1205.65 L1923.11 1205.65 L1922.53 1205.65 L1921.94 1205.65 L1921.35 1205.65 L1920.77 1205.65 L1920.18 1205.65 L1919.59 1205.65 L1919.01 1205.65 L1918.42 1205.65 L1917.83 1205.65 L1917.25 1205.65 L1916.66 1205.65 L1916.08 1205.65 L1915.49 1205.65 L1914.9 1205.65 L1914.32 1205.65 L1913.73 1205.65 L1913.14 1205.65 L1912.56 1205.65 L1911.97 1205.65 L1911.38 1205.65 L1910.8 1205.65 L1910.21 1205.65 L1909.63 1205.65 L1909.04 1205.65 L1908.45 1205.65 L1907.87 1205.65 L1907.28 1205.65 L1906.69 1205.65 L1906.11 1205.65 L1905.52 1205.65 L1904.93 1205.65 L1904.35 1205.65 L1903.76 1205.65 L1903.17 1205.65 L1902.59 1205.65 L1902 1205.65 L1901.42 1205.65 L1900.83 1205.65 L1900.24 1205.65 L1899.66 1205.65 L1899.07 1205.65 L1898.48 1205.65 L1897.9 1205.65 L1897.31 1205.65 L1896.72 1205.65 L1896.14 1205.65 L1895.55 1205.65 L1894.96 1205.65 L1894.38 1205.65 L1893.79 1205.65 L1893.21 1205.65 L1892.62 1205.65 L1892.03 1205.65 L1891.45 1205.65 L1890.86 1205.65 L1890.27 1205.65 L1889.69 1205.65 L1889.1 1205.65 L1888.51 1205.65 L1887.93 1205.65 L1887.34 1205.65 L1886.76 1205.65 L1886.17 1205.65 L1885.58 1205.65 L1885 1205.65 L1884.41 1205.65 L1883.82 1205.65 L1883.24 1205.65 L1882.65 1205.65 L1882.06 1205.65 L1881.48 1205.65 L1880.89 1205.65 L1880.3 1205.65 L1879.72 1205.65 L1879.13 1205.65 L1878.55 1205.65 L1877.96 1205.65 L1877.37 1205.65 L1876.79 1205.65 L1876.2 1205.65 L1875.61 1205.65 L1875.03 1205.65 L1874.44 1205.65 L1873.85 1205.65 L1873.27 1205.65 L1872.68 1205.65 L1872.09 1205.65 L1871.51 1205.65 L1870.92 1205.65 L1870.34 1205.65 L1869.75 1205.65 L1869.16 1205.65 L1868.58 1205.65 L1867.99 1205.65 L1867.4 1205.65 L1866.82 1205.65 L1866.23 1205.65 L1865.64 1205.65 L1865.06 1205.65 L1864.47 1205.65 L1863.88 1205.65 L1863.3 1205.65 L1862.71 1205.65 L1862.13 1205.65 L1861.54 1205.65 L1860.95 1205.65 L1860.37 1205.65 L1859.78 1205.65 L1859.19 1205.65 L1858.61 1205.65 L1858.02 1205.65 L1857.43 1205.65 L1856.85 1205.65 L1856.26 1205.65 L1855.68 1205.65 L1855.09 1205.65 L1854.5 1205.65 L1853.92 1205.65 L1853.33 1205.65 L1852.74 1205.65 L1852.16 1205.65 L1851.57 1205.65 L1850.98 1205.65 L1850.4 1205.65 L1849.81 1205.65 L1849.22 1205.65 L1848.64 1205.65 L1848.05 1205.65 L1847.47 1205.65 L1846.88 1205.65 L1846.29 1205.65 L1845.71 1205.65 L1845.12 1205.65 L1844.53 1205.65 L1843.95 1205.65 L1843.36 1205.65 L1842.77 1205.65 L1842.19 1205.65 L1841.6 1205.65 L1841.01 1205.65 L1840.43 1205.65 L1839.84 1205.65 L1839.26 1205.65 L1838.67 1205.65 L1838.08 1205.65 L1837.5 1205.65 L1836.91 1205.65 L1836.32 1205.65 L1835.74 1205.65 L1835.15 1205.65 L1834.56 1205.65 L1833.98 1205.65 L1833.39 1205.65 L1832.81 1205.65 L1832.22 1205.65 L1831.63 1205.65 L1831.05 1205.65 L1830.46 1205.65 L1829.87 1205.65 L1829.29 1205.65 L1828.7 1205.65 L1828.11 1205.65 L1827.53 1205.65 L1826.94 1205.65 L1826.35 1205.65 L1825.77 1205.65 L1825.18 1205.65 L1824.6 1205.65 L1824.01 1205.65 L1823.42 1205.65 L1822.84 1205.65 L1822.25 1205.65 L1821.66 1205.65 L1821.08 1205.65 L1820.49 1205.65 L1819.9 1205.65 L1819.32 1205.65 L1818.73 1205.65 L1818.14 1205.65 L1817.56 1205.65 L1816.97 1205.65 L1816.39 1205.65 L1815.8 1205.65 L1815.21 1205.65 L1814.63 1205.65 L1814.04 1205.65 L1813.45 1205.65 L1812.87 1205.65 L1812.28 1205.65 L1811.69 1205.65 L1811.11 1205.65 L1810.52 1205.65 L1809.94 1205.65 L1809.35 1205.65 L1808.76 1205.65 L1808.18 1205.65 L1807.59 1205.65 L1807 1205.65 L1806.42 1205.65 L1805.83 1205.65 L1805.24 1205.65 L1804.66 1205.65 L1804.07 1205.65 L1803.48 1205.65 L1802.9 1205.65 L1802.31 1205.65 L1801.73 1205.65 L1801.14 1205.65 L1800.55 1205.65 L1799.97 1205.65 L1799.38 1205.65 L1798.79 1205.65 L1798.21 1205.65 L1797.62 1205.65 L1797.03 1205.65 L1796.45 1205.65 L1795.86 1205.65 L1795.27 1205.65 L1794.69 1205.65 L1794.1 1205.65 L1793.52 1205.65 L1792.93 1205.65 L1792.34 1205.65 L1791.76 1205.65 L1791.17 1205.65 L1790.58 1205.65 L1790 1205.65 L1789.41 1205.65 L1788.82 1205.65 L1788.24 1205.65 L1787.65 1205.65 L1787.06 1205.65 L1786.48 1205.65 L1785.89 1205.65 L1785.31 1205.65 L1784.72 1205.65 L1784.13 1205.65 L1783.55 1205.65 L1782.96 1205.65 L1782.37 1205.65 L1781.79 1205.65 L1781.2 1205.65 L1780.61 1205.65 L1780.03 1205.65 L1779.44 1205.65 L1778.86 1205.65 L1778.27 1205.65 L1777.68 1205.65 L1777.1 1205.65 L1776.51 1205.65 L1775.92 1205.65 L1775.34 1205.65 L1774.75 1205.65 L1774.16 1205.65 L1773.58 1205.65 L1772.99 1205.65 L1772.4 1205.65 L1771.82 1205.65 L1771.23 1205.65 L1770.65 1205.65 L1770.06 1205.65 L1769.47 1205.65 L1768.89 1205.65 L1768.3 1205.65 L1767.71 1205.65 L1767.13 1205.65 L1766.54 1205.65 L1765.95 1205.65 L1765.37 1205.65 L1764.78 1205.65 L1764.19 1205.65 L1763.61 1205.65 L1763.02 1205.65 L1762.44 1205.65 L1761.85 1205.65 L1761.26 1205.65 L1760.68 1205.65 L1760.09 1205.65 L1759.5 1205.65 L1758.92 1205.65 L1758.33 1205.65 L1757.74 1205.65 L1757.16 1205.65 L1756.57 1205.65 L1755.99 1205.65 L1755.4 1205.65 L1754.81 1205.65 L1754.23 1205.65 L1753.64 1205.65 L1753.05 1205.65 L1752.47 1205.65 L1751.88 1205.65 L1751.29 1205.65 L1750.71 1205.65 L1750.12 1205.65 L1749.53 1205.65 L1748.95 1205.65 L1748.36 1205.65 L1747.78 1205.65 L1747.19 1205.65 L1746.6 1205.65 L1746.02 1205.65 L1745.43 1205.65 L1744.84 1205.65 L1744.26 1205.65 L1743.67 1205.65 L1743.08 1205.65 L1742.5 1205.65 L1741.91 1205.65 L1741.32 1205.65 L1740.74 1205.65 L1740.15 1205.65 L1739.57 1205.65 L1738.98 1205.65 L1738.39 1205.65 L1737.81 1205.65 L1737.22 1205.65 L1736.63 1205.65 L1736.05 1205.65 L1735.46 1205.65 L1734.87 1205.65 L1734.29 1205.65 L1733.7 1205.65 L1733.11 1205.65 L1732.53 1205.65 L1731.94 1205.65 L1731.36 1205.65 L1730.77 1205.65 L1730.18 1205.65 L1729.6 1205.65 L1729.01 1205.65 L1728.42 1205.65 L1727.84 1205.65 L1727.25 1205.65 L1726.66 1205.65 L1726.08 1205.65 L1725.49 1205.65 L1724.91 1205.65 L1724.32 1205.65 L1723.73 1205.65 L1723.15 1205.65 L1722.56 1205.65 L1721.97 1205.65 L1721.39 1205.65 L1720.8 1205.65 L1720.21 1205.65 L1719.63 1205.65 L1719.04 1205.65 L1718.45 1205.65 L1717.87 1205.65 L1717.28 1205.65 L1716.7 1205.65 L1716.11 1205.65 L1715.52 1205.65 L1714.94 1205.65 L1714.35 1205.65 L1713.76 1205.65 L1713.18 1205.65 L1712.59 1205.65 L1712 1205.65 L1711.42 1205.65 L1710.83 1205.65 L1710.24 1205.65 L1709.66 1205.65 L1709.07 1205.65 L1708.49 1205.65 L1707.9 1205.65 L1707.31 1205.65 L1706.73 1205.65 L1706.14 1205.65 L1705.55 1205.65 L1704.97 1205.65 L1704.38 1205.65 L1703.79 1205.65 L1703.21 1205.65 L1702.62 1205.65 L1702.04 1205.65 L1701.45 1205.65 L1700.86 1205.65 L1700.28 1205.65 L1699.69 1205.65 L1699.1 1205.65 L1698.52 1205.65 L1697.93 1205.65 L1697.34 1205.65 L1696.76 1205.65 L1696.17 1205.65 L1695.58 1205.65 L1695 1205.65 L1694.41 1205.65 L1693.83 1205.65 L1693.24 1205.65 L1692.65 1205.65 L1692.07 1205.65 L1691.48 1205.65 L1690.89 1205.65 L1690.31 1205.65 L1689.72 1205.65 L1689.13 1205.65 L1688.55 1205.65 L1687.96 1205.65 L1687.37 1205.65 L1686.79 1205.65 L1686.2 1205.65 L1685.62 1205.65 L1685.03 1205.65 L1684.44 1205.65 L1683.86 1205.65 L1683.27 1205.65 L1682.68 1205.65 L1682.1 1205.65 L1681.51 1205.65 L1680.92 1205.65 L1680.34 1205.65 L1679.75 1205.65 L1679.17 1205.65 L1678.58 1205.65 L1677.99 1205.65 L1677.41 1205.65 L1676.82 1205.65 L1676.23 1205.65 L1675.65 1205.65 L1675.06 1205.65 L1674.47 1205.65 L1673.89 1205.65 L1673.3 1205.65 L1672.71 1205.65 L1672.13 1205.65 L1671.54 1205.65 L1670.96 1205.65 L1670.37 1205.65 L1669.78 1205.65 L1669.2 1205.65 L1668.61 1205.65 L1668.02 1205.65 L1667.44 1205.65 L1666.85 1205.65 L1666.26 1205.65 L1665.68 1205.65 L1665.09 1205.65 L1664.5 1205.65 L1663.92 1205.65 L1663.33 1205.65 L1662.75 1205.65 L1662.16 1205.65 L1661.57 1205.65 L1660.99 1205.65 L1660.4 1205.65 L1659.81 1205.65 L1659.23 1205.65 L1658.64 1205.65 L1658.05 1205.65 L1657.47 1205.65 L1656.88 1205.65 L1656.29 1205.65 L1655.71 1205.65 L1655.12 1205.65 L1654.54 1205.65 L1653.95 1205.65 L1653.36 1205.65 L1652.78 1205.65 L1652.19 1205.65 L1651.6 1205.65 L1651.02 1205.65 L1650.43 1205.65 L1649.84 1205.65 L1649.26 1205.65 L1648.67 1205.65 L1648.09 1205.65 L1647.5 1205.65 L1646.91 1205.65 L1646.33 1205.65 L1645.74 1205.65 L1645.15 1205.65 L1644.57 1205.65 L1643.98 1205.65 L1643.39 1205.65 L1642.81 1205.65 L1642.22 1205.65 L1641.63 1205.65 L1641.05 1205.65 L1640.46 1205.65 L1639.88 1205.65 L1639.29 1205.65 L1638.7 1205.65 L1638.12 1205.65 L1637.53 1205.65 L1636.94 1205.65 L1636.36 1205.65 L1635.77 1205.65 L1635.18 1205.65 L1634.6 1205.65 L1634.01 1205.65 L1633.42 1205.65 L1632.84 1205.65 L1632.25 1205.65 L1631.67 1205.65 L1631.08 1205.65 L1630.49 1205.65 L1629.91 1205.65 L1629.32 1205.65 L1628.73 1205.65 L1628.15 1205.65 L1627.56 1205.65 L1626.97 1205.65 L1626.39 1205.65 L1625.8 1205.65 L1625.22 1205.65 L1624.63 1205.65 L1624.04 1205.65 L1623.46 1205.65 L1622.87 1205.65 L1622.28 1205.65 L1621.7 1205.65 L1621.11 1205.65 L1620.52 1205.65 L1619.94 1205.65 L1619.35 1205.65 L1618.76 1205.65 L1618.18 1205.65 L1617.59 1205.65 L1617.01 1205.65 L1616.42 1205.65 L1615.83 1205.65 L1615.25 1205.65 L1614.66 1205.65 L1614.07 1205.65 L1613.49 1205.65 L1612.9 1205.65 L1612.31 1205.65 L1611.73 1205.65 L1611.14 1205.65 L1610.55 1205.65 L1609.97 1205.65 L1609.38 1205.65 L1608.8 1205.65 L1608.21 1205.65 L1607.62 1205.65 L1607.04 1205.65 L1606.45 1205.65 L1605.86 1205.65 L1605.28 1205.65 L1604.69 1205.65 L1604.1 1205.65 L1603.52 1205.65 L1602.93 1205.65 L1602.34 1205.65 L1601.76 1205.65 L1601.17 1205.65 L1600.59 1205.65 L1600 1205.65 L1599.41 1205.65 L1598.83 1205.65 L1598.24 1205.65 L1597.65 1205.65 L1597.07 1205.65 L1596.48 1205.65 L1595.89 1205.65 L1595.31 1205.65 L1594.72 1205.65 L1594.14 1205.65 L1593.55 1205.65 L1592.96 1205.65 L1592.38 1205.65 L1591.79 1205.65 L1591.2 1205.65 L1590.62 1205.65 L1590.03 1205.65 L1589.44 1205.65 L1588.86 1205.65 L1588.27 1205.65 L1587.68 1205.65 L1587.1 1205.65 L1586.51 1205.65 L1585.93 1205.65 L1585.34 1205.65 L1584.75 1205.65 L1584.17 1205.65 L1583.58 1205.65 L1582.99 1205.65 L1582.41 1205.65 L1581.82 1205.65 L1581.23 1205.65 L1580.65 1205.65 L1580.06 1205.65 L1579.47 1205.65 L1578.89 1205.65 L1578.3 1205.65 L1577.72 1205.65 L1577.13 1205.65 L1576.54 1205.65 L1575.96 1205.65 L1575.37 1205.65 L1574.78 1205.65 L1574.2 1205.65 L1573.61 1205.65 L1573.02 1205.65 L1572.44 1205.65 L1571.85 1205.65 L1571.27 1205.65 L1570.68 1205.65 L1570.09 1205.65 L1569.51 1205.65 L1568.92 1205.65 L1568.33 1205.65 L1567.75 1205.65 L1567.16 1205.65 L1566.57 1205.65 L1565.99 1205.65 L1565.4 1205.65 L1564.81 1205.65 L1564.23 1205.65 L1563.64 1205.65 L1563.06 1205.65 L1562.47 1205.65 L1561.88 1205.65 L1561.3 1205.65 L1560.71 1205.65 L1560.12 1205.65 L1559.54 1205.65 L1558.95 1205.65 L1558.36 1205.65 L1557.78 1205.65 L1557.19 1205.65 L1556.6 1205.65 L1556.02 1205.65 L1555.43 1205.65 L1554.85 1205.65 L1554.26 1205.65 L1553.67 1205.65 L1553.09 1205.65 L1552.5 1205.65 L1551.91 1205.65 L1551.33 1205.65 L1550.74 1205.65 L1550.15 1205.65 L1549.57 1205.65 L1548.98 1205.65 L1548.4 1205.65 L1547.81 1205.65 L1547.22 1205.65 L1546.64 1205.65 L1546.05 1205.65 L1545.46 1205.65 L1544.88 1205.65 L1544.29 1205.65 L1543.7 1205.65 L1543.12 1205.65 L1542.53 1205.65 L1541.94 1205.65 L1541.36 1205.65 L1540.77 1205.65 L1540.19 1205.65 L1539.6 1205.65 L1539.01 1205.65 L1538.43 1205.65 L1537.84 1205.65 L1537.25 1205.65 L1536.67 1205.65 L1536.08 1205.65 L1535.49 1205.65 L1534.91 1205.65 L1534.32 1205.65 L1533.73 1205.65 L1533.15 1205.65 L1532.56 1205.65 L1531.98 1205.65 L1531.39 1205.65 L1530.8 1205.65 L1530.22 1205.65 L1529.63 1205.65 L1529.04 1205.65 L1528.46 1205.65 L1527.87 1205.65 L1527.28 1205.65 L1526.7 1205.65 L1526.11 1205.65 L1525.52 1205.65 L1524.94 1205.65 L1524.35 1205.65 L1523.77 1205.65 L1523.18 1205.65 L1522.59 1205.65 L1522.01 1205.65 L1521.42 1205.65 L1520.83 1205.65 L1520.25 1205.65 L1519.66 1205.65 L1519.07 1205.65 L1518.49 1205.65 L1517.9 1205.65 L1517.32 1205.65 L1516.73 1205.65 L1516.14 1205.65 L1515.56 1205.65 L1514.97 1205.65 L1514.38 1205.65 L1513.8 1205.65 L1513.21 1205.65 L1512.62 1205.65 L1512.04 1205.65 L1511.45 1205.65 L1510.86 1205.65 L1510.28 1205.65 L1509.69 1205.65 L1509.11 1205.65 L1508.52 1205.65 L1507.93 1205.65 L1507.35 1205.65 L1506.76 1205.65 L1506.17 1205.65 L1505.59 1205.65 L1505 1205.65 L1504.41 1205.65 L1503.83 1205.65 L1503.24 1205.65 L1502.65 1205.65 L1502.07 1205.65 L1501.48 1205.65 L1500.9 1205.65 L1500.31 1205.65 L1499.72 1205.65 L1499.14 1205.65 L1498.55 1205.65 L1497.96 1205.65 L1497.38 1205.65 L1496.79 1205.65 L1496.2 1205.65 L1495.62 1205.65 L1495.03 1205.65 L1494.45 1205.65 L1493.86 1205.65 L1493.27 1205.65 L1492.69 1205.65 L1492.1 1205.65 L1491.51 1205.65 L1490.93 1205.65 L1490.34 1205.65 L1489.75 1205.65 L1489.17 1205.65 L1488.58 1205.65 L1487.99 1205.65 L1487.41 1205.65 L1486.82 1205.65 L1486.24 1205.65 L1485.65 1205.65 L1485.06 1205.65 L1484.48 1205.65 L1483.89 1205.65 L1483.3 1205.65 L1482.72 1205.65 L1482.13 1205.65 L1481.54 1205.65 L1480.96 1205.65 L1480.37 1205.65 L1479.78 1205.65 L1479.2 1205.65 L1478.61 1205.65 L1478.03 1205.65 L1477.44 1205.65 L1476.85 1205.65 L1476.27 1205.65 L1475.68 1205.65 L1475.09 1205.65 L1474.51 1205.65 L1473.92 1205.65 L1473.33 1205.65 L1472.75 1205.65 L1472.16 1205.65 L1471.57 1205.65 L1470.99 1205.65 L1470.4 1205.65 L1469.82 1205.65 L1469.23 1205.65 L1468.64 1205.65 L1468.06 1205.65 L1467.47 1205.65 L1466.88 1205.65 L1466.3 1205.65 L1465.71 1205.65 L1465.12 1205.65 L1464.54 1205.65 L1463.95 1205.65 L1463.37 1205.65 L1462.78 1205.65 L1462.19 1205.65 L1461.61 1205.65 L1461.02 1205.65 L1460.43 1205.65 L1459.85 1205.65 L1459.26 1205.65 L1458.67 1205.65 L1458.09 1205.65 L1457.5 1205.65 L1456.91 1205.65 L1456.33 1205.65 L1455.74 1205.65 L1455.16 1205.65 L1454.57 1205.65 L1453.98 1205.65 L1453.4 1205.65 L1452.81 1205.65 L1452.22 1205.65 L1451.64 1205.65 L1451.05 1205.65 L1450.46 1205.65 L1449.88 1205.65 L1449.29 1205.65 L1448.7 1205.65 L1448.12 1205.65 L1447.53 1205.65 L1446.95 1205.65 L1446.36 1205.65 L1445.77 1205.65 L1445.19 1205.65 L1444.6 1205.65 L1444.01 1205.65 L1443.43 1205.65 L1442.84 1205.65 L1442.25 1205.65 L1441.67 1205.65 L1441.08 1205.65 L1440.5 1205.65 L1439.91 1205.65 L1439.32 1205.65 L1438.74 1205.65 L1438.15 1205.65 L1437.56 1205.65 L1436.98 1205.65 L1436.39 1205.65 L1435.8 1205.65 L1435.22 1205.65 L1434.63 1205.65 L1434.04 1205.65 L1433.46 1205.65 L1432.87 1205.65 L1432.29 1205.65 L1431.7 1205.65 L1431.11 1205.65 L1430.53 1205.65 L1429.94 1205.65 L1429.35 1205.65 L1428.77 1205.65 L1428.18 1205.65 L1427.59 1205.65 L1427.01 1205.65 L1426.42 1205.65 L1425.83 1205.65 L1425.25 1205.65 L1424.66 1205.65 L1424.08 1205.65 L1423.49 1205.65 L1422.9 1205.65 L1422.32 1205.65 L1421.73 1205.65 L1421.14 1205.65 L1420.56 1205.65 L1419.97 1205.65 L1419.38 1205.65 L1418.8 1205.65 L1418.21 1205.65 L1417.63 1205.65 L1417.04 1205.65 L1416.45 1205.65 L1415.87 1205.65 L1415.28 1205.65 L1414.69 1205.65 L1414.11 1205.65 L1413.52 1205.65 L1412.93 1205.65 L1412.35 1205.65 L1411.76 1205.65 L1411.17 1205.65 L1410.59 1205.65 L1410 1205.65 L1409.42 1205.65 L1408.83 1205.65 L1408.24 1205.65 L1407.66 1205.65 L1407.07 1205.65 L1406.48 1205.65 L1405.9 1205.65 L1405.31 1205.65 L1404.72 1205.65 L1404.14 1205.65 L1403.55 1205.65 L1402.96 1205.65 L1402.38 1205.65 L1401.79 1205.65 L1401.21 1205.65 L1400.62 1205.65 L1400.03 1205.65 L1399.45 1205.65 L1398.86 1205.65 L1398.27 1205.65 L1397.69 1205.65 L1397.1 1205.65 L1396.51 1205.65 L1395.93 1205.65 L1395.34 1205.65 L1394.75 1205.65 L1394.17 1205.65 L1393.58 1205.65 L1393 1205.65 L1392.41 1205.65 L1391.82 1205.65 L1391.24 1205.65 L1390.65 1205.65 L1390.06 1205.65 L1389.48 1205.65 L1388.89 1205.65 L1388.3 1205.65 L1387.72 1205.65 L1387.13 1205.65 L1386.55 1205.65 L1385.96 1205.65 L1385.37 1205.65 L1384.79 1205.65 L1384.2 1205.65 L1383.61 1205.65 L1383.03 1205.65 L1382.44 1205.65 L1381.85 1205.65 L1381.27 1205.65 L1380.68 1205.65 L1380.09 1205.65 L1379.51 1205.65 L1378.92 1205.65 L1378.34 1205.65 L1377.75 1205.65 L1377.16 1205.65 L1376.58 1205.65 L1375.99 1205.65 L1375.4 1205.65 L1374.82 1205.65 L1374.23 1205.65 L1373.64 1205.65 L1373.06 1205.65 L1372.47 1205.65 L1371.88 1205.65 L1371.3 1205.65 L1370.71 1205.65 L1370.13 1205.65 L1369.54 1205.65 L1368.95 1205.65 L1368.37 1205.65 L1367.78 1205.65 L1367.19 1205.65 L1366.61 1205.65 L1366.02 1205.65 L1365.43 1205.65 L1364.85 1205.65 L1364.26 1205.65 L1363.68 1205.65 L1363.09 1205.65 L1362.5 1205.65 L1361.92 1205.65 L1361.33 1205.65 L1360.74 1205.65 L1360.16 1205.65 L1359.57 1205.65 L1358.98 1205.65 L1358.4 1205.65 L1357.81 1205.65 L1357.22 1205.65 L1356.64 1205.65 L1356.05 1205.65 L1355.47 1205.65 L1354.88 1205.65 L1354.29 1205.65 L1353.71 1205.65 L1353.12 1205.65 L1352.53 1205.65 L1351.95 1205.65 L1351.36 1205.65 L1350.77 1205.65 L1350.19 1205.65 L1349.6 1205.65 L1349.01 1205.65 L1348.43 1205.65 L1347.84 1205.65 L1347.26 1205.65 L1346.67 1205.65 L1346.08 1205.65 L1345.5 1205.65 L1344.91 1205.65 L1344.32 1205.65 L1343.74 1205.65 L1343.15 1205.65 L1342.56 1205.65 L1341.98 1205.65 L1341.39 1205.65 L1340.8 1205.65 L1340.22 1205.65 L1339.63 1205.65 L1339.05 1205.65 L1338.46 1205.65 L1337.87 1205.65 L1337.29 1205.65 L1336.7 1205.65 L1336.11 1205.65 L1335.53 1205.65 L1334.94 1205.65 L1334.35 1205.65 L1333.77 1205.65 L1333.18 1205.65 L1332.6 1205.65 L1332.01 1205.65 L1331.42 1205.65 L1330.84 1205.65 L1330.25 1205.65 L1329.66 1205.65 L1329.08 1205.65 L1328.49 1205.65 L1327.9 1205.65 L1327.32 1205.65 L1326.73 1205.65 L1326.14 1205.65 L1325.56 1205.65 L1324.97 1205.65 L1324.39 1205.65 L1323.8 1205.65 L1323.21 1205.65 L1322.63 1205.65 L1322.04 1205.65 L1321.45 1205.65 L1320.87 1205.65 L1320.28 1205.65 L1319.69 1205.65 L1319.11 1205.65 L1318.52 1205.65 L1317.93 1205.65 L1317.35 1205.65 L1316.76 1205.65 L1316.18 1205.65 L1315.59 1205.65 L1315 1205.65 L1314.42 1205.65 L1313.83 1205.65 L1313.24 1205.65 L1312.66 1205.65 L1312.07 1205.65 L1311.48 1205.65 L1310.9 1205.65 L1310.31 1205.65 L1309.73 1205.65 L1309.14 1205.65 L1308.55 1205.65 L1307.97 1205.65 L1307.38 1205.65 L1306.79 1205.65 L1306.21 1205.65 L1305.62 1205.65 L1305.03 1205.65 L1304.45 1205.65 L1303.86 1205.65 L1303.27 1205.65 L1302.69 1205.65 L1302.1 1205.65 L1301.52 1205.65 L1300.93 1205.65 L1300.34 1205.65 L1299.76 1205.65 L1299.17 1205.65 L1298.58 1205.65 L1298 1205.65 L1297.41 1205.65 L1296.82 1205.65 L1296.24 1205.65 L1295.65 1205.65 L1295.06 1205.65 L1294.48 1205.65 L1293.89 1205.65 L1293.31 1205.65 L1292.72 1205.65 L1292.13 1205.65 L1291.55 1205.65 L1290.96 1205.65 L1290.37 1205.65 L1289.79 1205.65 L1289.2 1205.65 L1288.61 1205.65 L1288.03 1205.65 L1287.44 1205.65 L1286.86 1205.65 L1286.27 1205.65 L1285.68 1205.65 L1285.1 1205.65 L1284.51 1205.65 L1283.92 1205.65 L1283.34 1205.65 L1282.75 1205.65 L1282.16 1205.65 L1281.58 1205.65 L1280.99 1205.65 L1280.4 1205.65 L1279.82 1205.65 L1279.23 1205.65 L1278.65 1205.65 L1278.06 1205.65 L1277.47 1205.65 L1276.89 1205.65 L1276.3 1205.65 L1275.71 1205.65 L1275.13 1205.65 L1274.54 1205.65 L1273.95 1205.65 L1273.37 1205.65 L1272.78 1205.65 L1272.19 1205.65 L1271.61 1205.65 L1271.02 1205.65 L1270.44 1205.65 L1269.85 1205.65 L1269.26 1205.65 L1268.68 1205.65 L1268.09 1205.65 L1267.5 1205.65 L1266.92 1205.65 L1266.33 1205.65 L1265.74 1205.65 L1265.16 1205.65 L1264.57 1205.65 L1263.98 1205.65 L1263.4 1205.65 L1262.81 1205.65 L1262.23 1205.65 L1261.64 1205.65 L1261.05 1205.65 L1260.47 1205.65 L1259.88 1205.65 L1259.29 1205.65 L1258.71 1205.65 L1258.12 1205.65 L1257.53 1205.65 L1256.95 1205.65 L1256.36 1205.65 L1255.78 1205.65 L1255.19 1205.65 L1254.6 1205.65 L1254.02 1205.65 L1253.43 1205.65 L1252.84 1205.65 L1252.26 1205.65 L1251.67 1205.65 L1251.08 1205.65 L1250.5 1205.65 L1249.91 1205.65 L1249.32 1205.65 L1248.74 1205.65 L1248.15 1205.65 L1247.57 1205.65 L1246.98 1205.65 L1246.39 1205.65 L1245.81 1205.65 L1245.22 1205.65 L1244.63 1205.65 L1244.05 1205.65 L1243.46 1205.65 L1242.87 1205.65 L1242.29 1205.65 L1241.7 1205.65 L1241.11 1205.65 L1240.53 1205.65 L1239.94 1205.65 L1239.36 1205.65 L1238.77 1205.65 L1238.18 1205.65 L1237.6 1205.65 L1237.01 1205.65 L1236.42 1205.65 L1235.84 1205.65 L1235.25 1205.65 L1234.66 1205.65 L1234.08 1205.65 L1233.49 1205.65 L1232.91 1205.65 L1232.32 1205.65 L1231.73 1205.65 L1231.15 1205.65 L1230.56 1205.65 L1229.97 1205.65 L1229.39 1205.65 L1228.8 1205.65 L1228.21 1205.65 L1227.63 1205.65 L1227.04 1205.65 L1226.45 1205.65 L1225.87 1205.65 L1225.28 1205.65 L1224.7 1205.65 L1224.11 1205.65 L1223.52 1205.65 L1222.94 1205.65 L1222.35 1205.65 L1221.76 1205.65 L1221.18 1205.65 L1220.59 1205.65 L1220 1205.65 L1219.42 1205.65 L1218.83 1205.65 L1218.24 1205.65 L1217.66 1205.65 L1217.07 1205.65 L1216.49 1205.65 L1215.9 1205.65 L1215.31 1205.65 L1214.73 1205.65 L1214.14 1205.65 L1213.55 1205.65 L1212.97 1205.65 L1212.38 1205.65 L1211.79 1205.65 L1211.21 1205.65 L1210.62 1205.65 L1210.03 1205.65 L1209.45 1205.65 L1208.86 1205.65 L1208.28 1205.65 L1207.69 1205.65 L1207.1 1205.65 L1206.52 1205.65 L1205.93 1205.65 L1205.34 1205.65 L1204.76 1205.65 L1204.17 1205.65 L1203.58 1205.65 L1203 1205.65 L1202.41 1205.65 L1201.83 1205.65 L1201.24 1205.65 L1200.65 1205.65 L1200.07 1205.65 L1199.48 1205.65 L1198.89 1205.65 L1198.31 1205.65 L1197.72 1205.65 L1197.13 1205.65 L1196.55 1205.65 L1195.96 1205.65 L1195.37 1205.65 L1194.79 1205.65 L1194.2 1205.65 L1193.62 1205.65 L1193.03 1205.65 L1192.44 1205.65 L1191.86 1205.65 L1191.27 1205.65 L1190.68 1205.65 L1190.1 1205.65 L1189.51 1205.65 L1188.92 1205.65 L1188.34 1205.65 L1187.75 1205.65 L1187.16 1205.65 L1186.58 1205.65 L1185.99 1205.65 L1185.41 1205.65 L1184.82 1205.65 L1184.23 1205.65 L1183.65 1205.65 L1183.06 1205.65 L1182.47 1205.65 L1181.89 1205.65 L1181.3 1205.65 L1180.71 1205.65 L1180.13 1205.65 L1179.54 1205.65 L1178.96 1205.65 L1178.37 1205.65 L1177.78 1205.65 L1177.2 1205.65 L1176.61 1205.65 L1176.02 1205.65 L1175.44 1205.65 L1174.85 1205.65 L1174.26 1205.65 L1173.68 1205.65 L1173.09 1205.65 L1172.5 1205.65 L1171.92 1205.65 L1171.33 1205.65 L1170.75 1205.65 L1170.16 1205.65 L1169.57 1205.65 L1168.99 1205.65 L1168.4 1205.65 L1167.81 1205.65 L1167.23 1205.65 L1166.64 1205.65 L1166.05 1205.65 L1165.47 1205.65 L1164.88 1205.65 L1164.29 1205.65 L1163.71 1205.65 L1163.12 1205.65 L1162.54 1205.65 L1161.95 1205.65 L1161.36 1205.65 L1160.78 1205.65 L1160.19 1205.65 L1159.6 1205.65 L1159.02 1205.65 L1158.43 1205.65 L1157.84 1205.65 L1157.26 1205.65 L1156.67 1205.65 L1156.09 1205.65 L1155.5 1205.65 L1154.91 1205.65 L1154.33 1205.65 L1153.74 1205.65 L1153.15 1205.65 L1152.57 1205.65 L1151.98 1205.65 L1151.39 1205.65 L1150.81 1205.65 L1150.22 1205.65 L1149.63 1205.65 L1149.05 1205.65 L1148.46 1205.65 L1147.88 1205.65 L1147.29 1205.65 L1146.7 1205.65 L1146.12 1205.65 L1145.53 1205.65 L1144.94 1205.65 L1144.36 1205.65 L1143.77 1205.65 L1143.18 1205.65 L1142.6 1205.65 L1142.01 1205.65 L1141.42 1205.65 L1140.84 1205.65 L1140.25 1205.65 L1139.67 1205.65 L1139.08 1205.65 L1138.49 1205.65 L1137.91 1205.65 L1137.32 1205.65 L1136.73 1205.65 L1136.15 1205.65 L1135.56 1205.65 L1134.97 1205.65 L1134.39 1205.65 L1133.8 1205.65 L1133.21 1205.65 L1132.63 1205.65 L1132.04 1205.65 L1131.46 1205.65 L1130.87 1205.65 L1130.28 1205.65 L1129.7 1205.65 L1129.11 1205.65 L1128.52 1205.65 L1127.94 1205.65 L1127.35 1205.65 L1126.76 1205.65 L1126.18 1205.65 L1125.59 1205.65 L1125.01 1205.65 L1124.42 1205.65 L1123.83 1205.65 L1123.25 1205.65 L1122.66 1205.65 L1122.07 1205.65 L1121.49 1205.65 L1120.9 1205.65 L1120.31 1205.65 L1119.73 1205.65 L1119.14 1205.65 L1118.55 1205.65 L1117.97 1205.65 L1117.38 1205.65 L1116.8 1205.65 L1116.21 1205.65 L1115.62 1205.65 L1115.04 1205.65 L1114.45 1205.65 L1113.86 1205.65 L1113.28 1205.65 L1112.69 1205.65 L1112.1 1205.65 L1111.52 1205.65 L1110.93 1205.65 L1110.34 1205.65 L1109.76 1205.65 L1109.17 1205.65 L1108.59 1205.65 L1108 1205.65 L1107.41 1205.65 L1106.83 1205.65 L1106.24 1205.65 L1105.65 1205.65 L1105.07 1205.65 L1104.48 1205.65 L1103.89 1205.65 L1103.31 1205.65 L1102.72 1205.65 L1102.14 1205.65 L1101.55 1205.65 L1100.96 1205.65 L1100.38 1205.65 L1099.79 1205.65 L1099.2 1205.65 L1098.62 1205.65 L1098.03 1205.65 L1097.44 1205.65 L1096.86 1205.65 L1096.27 1205.65 L1095.68 1205.65 L1095.1 1205.65 L1094.51 1205.65 L1093.93 1205.65 L1093.34 1205.65 L1092.75 1205.65 L1092.17 1205.65 L1091.58 1205.65 L1090.99 1205.65 L1090.41 1205.65 L1089.82 1205.65 L1089.23 1205.65 L1088.65 1205.65 L1088.06 1205.65 L1087.47 1205.65 L1086.89 1205.65 L1086.3 1205.65 L1085.72 1205.65 L1085.13 1205.65 L1084.54 1205.65 L1083.96 1205.65 L1083.37 1205.65 L1082.78 1205.65 L1082.2 1205.65 L1081.61 1205.65 L1081.02 1205.65 L1080.44 1205.65 L1079.85 1205.65 L1079.26 1205.65 L1078.68 1205.65 L1078.09 1205.65 L1077.51 1205.65 L1076.92 1205.65 L1076.33 1205.65 L1075.75 1205.65 L1075.16 1205.65 L1074.57 1205.65 L1073.99 1205.65 L1073.4 1205.65 L1072.81 1205.65 L1072.23 1205.65 L1071.64 1205.65 L1071.06 1205.65 L1070.47 1205.65 L1069.88 1205.65 L1069.3 1205.65 L1068.71 1205.65 L1068.12 1205.65 L1067.54 1205.65 L1066.95 1205.65 L1066.36 1205.65 L1065.78 1205.65 L1065.19 1205.65 L1064.6 1205.65 L1064.02 1205.65 L1063.43 1205.65 L1062.85 1205.65 L1062.26 1205.65 L1061.67 1205.65 L1061.09 1205.65 L1060.5 1205.65 L1059.91 1205.65 L1059.33 1205.65 L1058.74 1205.65 L1058.15 1205.65 L1057.57 1205.65 L1056.98 1205.65 L1056.39 1205.65 L1055.81 1205.65 L1055.22 1205.65 L1054.64 1205.65 L1054.05 1205.65 L1053.46 1205.65 L1052.88 1205.65 L1052.29 1205.65 L1051.7 1205.65 L1051.12 1205.65 L1050.53 1205.65 L1049.94 1205.65 L1049.36 1205.65 L1048.77 1205.65 L1048.19 1205.65 L1047.6 1205.65 L1047.01 1205.65 L1046.43 1205.65 L1045.84 1205.65 L1045.25 1205.65 L1044.67 1205.65 L1044.08 1205.65 L1043.49 1205.65 L1042.91 1205.65 L1042.32 1205.65 L1041.73 1205.65 L1041.15 1205.65 L1040.56 1205.65 L1039.98 1205.65 L1039.39 1205.65 L1038.8 1205.65 L1038.22 1205.65 L1037.63 1205.65 L1037.04 1205.65 L1036.46 1205.65 L1035.87 1205.65 L1035.28 1205.65 L1034.7 1205.65 L1034.11 1205.65 L1033.52 1205.65 L1032.94 1205.65 L1032.35 1205.65 L1031.77 1205.65 L1031.18 1205.65 L1030.59 1205.65 L1030.01 1205.65 L1029.42 1205.65 L1028.83 1205.65 L1028.25 1205.65 L1027.66 1205.65 L1027.07 1205.65 L1026.49 1205.65 L1025.9 1205.65 L1025.32 1205.65 L1024.73 1205.65 L1024.14 1205.65 L1023.56 1205.65 L1022.97 1205.65 L1022.38 1205.65 L1021.8 1205.65 L1021.21 1205.65 L1020.62 1205.65 L1020.04 1205.65 L1019.45 1205.65 L1018.86 1205.65 L1018.28 1205.65 L1017.69 1205.65 L1017.11 1205.65 L1016.52 1205.65 L1015.93 1205.65 L1015.35 1205.65 L1014.76 1205.65 L1014.17 1205.65 L1013.59 1205.65 L1013 1205.65 L1012.41 1205.65 L1011.83 1205.65 L1011.24 1205.65 L1010.65 1205.65 L1010.07 1205.65 L1009.48 1205.65 L1008.9 1205.65 L1008.31 1205.65 L1007.72 1205.65 L1007.14 1205.65 L1006.55 1205.65 L1005.96 1205.65 L1005.38 1205.65 L1004.79 1205.65 L1004.2 1205.65 L1003.62 1205.65 L1003.03 1205.65 L1002.44 1205.65 L1001.86 1205.65 L1001.27 1205.65 L1000.69 1205.65 L1000.1 1205.65 L999.513 1205.65 L998.926 1205.65 L998.34 1205.65 L997.754 1205.65 L997.167 1205.65 L996.581 1205.65 L995.994 1205.65 L995.408 1205.65 L994.822 1205.65 L994.235 1205.65 L993.649 1205.65 L993.062 1205.65 L992.476 1205.65 L991.889 1205.65 L991.303 1205.65 L990.717 1205.65 L990.13 1205.65 L989.544 1205.65 L988.957 1205.65 L988.371 1205.65 L987.785 1205.65 L987.198 1205.65 L986.612 1205.65 L986.025 1205.65  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1205.71 986.612,1205.71 987.198,1205.71 987.785,1205.71 988.371,1205.71 988.957,1205.71 989.544,1205.71 990.13,1205.71 990.717,1205.71 991.303,1205.71 991.889,1205.71 992.476,1205.71 993.062,1205.71 993.649,1205.71 994.235,1205.71 994.822,1205.71 995.408,1205.71 995.994,1205.71 996.581,1205.71 997.167,1205.71 997.754,1205.71 998.34,1205.71 998.926,1205.71 999.513,1205.71 1000.1,1205.71 1000.69,1205.71 1001.27,1205.71 1001.86,1205.71 1002.44,1205.71 1003.03,1205.71 1003.62,1205.71 1004.2,1205.71 1004.79,1205.71 1005.38,1205.71 1005.96,1205.71 1006.55,1205.71 1007.14,1205.71 1007.72,1205.71 1008.31,1205.71 1008.9,1205.71 1009.48,1205.71 1010.07,1205.71 1010.65,1205.71 1011.24,1205.71 1011.83,1205.71 1012.41,1205.71 1013,1205.71 1013.59,1205.71 1014.17,1205.71 1014.76,1205.71 1015.35,1205.71 1015.93,1205.71 1016.52,1205.71 1017.11,1205.71 1017.69,1205.71 1018.28,1205.71 1018.86,1205.71 1019.45,1205.71 1020.04,1205.71 1020.62,1205.71 1021.21,1205.71 1021.8,1205.71 1022.38,1205.71 1022.97,1205.71 1023.56,1205.71 1024.14,1205.71 1024.73,1205.71 1025.32,1205.71 1025.9,1205.71 1026.49,1205.71 1027.07,1205.71 1027.66,1205.71 1028.25,1205.71 1028.83,1205.71 1029.42,1205.71 1030.01,1205.71 1030.59,1205.71 1031.18,1205.71 1031.77,1205.71 1032.35,1205.71 1032.94,1205.71 1033.52,1205.71 1034.11,1205.71 1034.7,1205.71 1035.28,1205.71 1035.87,1205.71 1036.46,1205.71 1037.04,1205.71 1037.63,1205.71 1038.22,1205.71 1038.8,1205.71 1039.39,1205.71 1039.98,1205.71 1040.56,1205.71 1041.15,1205.71 1041.73,1205.71 1042.32,1205.71 1042.91,1205.71 1043.49,1205.71 1044.08,1205.71 1044.67,1205.71 1045.25,1205.71 1045.84,1205.71 1046.43,1205.71 1047.01,1205.71 1047.6,1205.71 1048.19,1205.71 1048.77,1205.71 1049.36,1205.71 1049.94,1205.71 1050.53,1205.71 1051.12,1205.71 1051.7,1205.71 1052.29,1205.71 1052.88,1205.71 1053.46,1205.71 1054.05,1205.71 1054.64,1205.71 1055.22,1205.71 1055.81,1205.71 1056.39,1205.71 1056.98,1205.71 1057.57,1205.71 1058.15,1205.71 1058.74,1205.71 1059.33,1205.71 1059.91,1205.71 1060.5,1205.71 1061.09,1205.71 1061.67,1205.71 1062.26,1205.71 1062.85,1205.71 1063.43,1205.71 1064.02,1205.71 1064.6,1205.71 1065.19,1205.71 1065.78,1205.71 1066.36,1205.71 1066.95,1205.71 1067.54,1205.71 1068.12,1205.71 1068.71,1205.71 1069.3,1205.71 1069.88,1205.71 1070.47,1205.71 1071.06,1205.71 1071.64,1205.71 1072.23,1205.71 1072.81,1205.71 1073.4,1205.71 1073.99,1205.71 1074.57,1205.71 1075.16,1205.71 1075.75,1205.71 1076.33,1205.71 1076.92,1205.71 1077.51,1205.71 1078.09,1205.71 1078.68,1205.71 1079.26,1205.71 1079.85,1205.71 1080.44,1205.71 1081.02,1205.71 1081.61,1205.71 1082.2,1205.71 1082.78,1205.71 1083.37,1205.71 1083.96,1205.71 1084.54,1205.71 1085.13,1205.71 1085.72,1205.71 1086.3,1205.71 1086.89,1205.71 1087.47,1205.71 1088.06,1205.71 1088.65,1205.71 1089.23,1205.71 1089.82,1205.71 1090.41,1205.71 1090.99,1205.71 1091.58,1205.71 1092.17,1205.71 1092.75,1205.71 1093.34,1205.71 1093.93,1205.71 1094.51,1205.71 1095.1,1205.71 1095.68,1205.71 1096.27,1205.71 1096.86,1205.71 1097.44,1205.71 1098.03,1205.71 1098.62,1205.71 1099.2,1205.71 1099.79,1205.71 1100.38,1205.71 1100.96,1205.71 1101.55,1205.71 1102.14,1205.71 1102.72,1205.71 1103.31,1205.71 1103.89,1205.71 1104.48,1205.71 1105.07,1205.71 1105.65,1205.71 1106.24,1205.71 1106.83,1205.71 1107.41,1205.71 1108,1205.71 1108.59,1205.71 1109.17,1205.71 1109.76,1205.71 1110.34,1205.71 1110.93,1205.71 1111.52,1205.71 1112.1,1205.71 1112.69,1205.71 1113.28,1205.71 1113.86,1205.71 1114.45,1205.71 1115.04,1205.71 1115.62,1205.71 1116.21,1205.71 1116.8,1205.71 1117.38,1205.71 1117.97,1205.71 1118.55,1205.71 1119.14,1205.71 1119.73,1205.71 1120.31,1205.71 1120.9,1205.71 1121.49,1205.71 1122.07,1205.71 1122.66,1205.71 1123.25,1205.71 1123.83,1205.71 1124.42,1205.71 1125.01,1205.71 1125.59,1205.71 1126.18,1205.71 1126.76,1205.71 1127.35,1205.71 1127.94,1205.71 1128.52,1205.71 1129.11,1205.71 1129.7,1205.71 1130.28,1205.71 1130.87,1205.71 1131.46,1205.71 1132.04,1205.71 1132.63,1205.71 1133.21,1205.71 1133.8,1205.71 1134.39,1205.71 1134.97,1205.71 1135.56,1205.71 1136.15,1205.71 1136.73,1205.71 1137.32,1205.71 1137.91,1205.71 1138.49,1205.71 1139.08,1205.71 1139.67,1205.71 1140.25,1205.71 1140.84,1205.71 1141.42,1205.71 1142.01,1205.71 1142.6,1205.71 1143.18,1205.71 1143.77,1205.71 1144.36,1205.71 1144.94,1205.71 1145.53,1205.71 1146.12,1205.71 1146.7,1205.71 1147.29,1205.71 1147.88,1205.71 1148.46,1205.71 1149.05,1205.71 1149.63,1205.71 1150.22,1205.71 1150.81,1205.71 1151.39,1205.71 1151.98,1205.71 1152.57,1205.71 1153.15,1205.71 1153.74,1205.71 1154.33,1205.71 1154.91,1205.71 1155.5,1205.71 1156.09,1205.71 1156.67,1205.71 1157.26,1205.71 1157.84,1205.71 1158.43,1205.71 1159.02,1205.71 1159.6,1205.71 1160.19,1205.71 1160.78,1205.71 1161.36,1205.71 1161.95,1205.71 1162.54,1205.71 1163.12,1205.71 1163.71,1205.71 1164.29,1205.71 1164.88,1205.71 1165.47,1205.71 1166.05,1205.71 1166.64,1205.71 1167.23,1205.71 1167.81,1205.71 1168.4,1205.71 1168.99,1205.71 1169.57,1205.71 1170.16,1205.71 1170.75,1205.71 1171.33,1205.71 1171.92,1205.71 1172.5,1205.71 1173.09,1205.71 1173.68,1205.71 1174.26,1205.71 1174.85,1205.71 1175.44,1205.71 1176.02,1205.71 1176.61,1205.71 1177.2,1205.71 1177.78,1205.71 1178.37,1205.71 1178.96,1205.71 1179.54,1205.71 1180.13,1205.71 1180.71,1205.71 1181.3,1205.71 1181.89,1205.71 1182.47,1205.71 1183.06,1205.71 1183.65,1205.71 1184.23,1205.71 1184.82,1205.71 1185.41,1205.71 1185.99,1205.71 1186.58,1205.71 1187.16,1205.71 1187.75,1205.71 1188.34,1205.71 1188.92,1205.71 1189.51,1205.71 1190.1,1205.71 1190.68,1205.71 1191.27,1205.71 1191.86,1205.71 1192.44,1205.71 1193.03,1205.71 1193.62,1205.71 1194.2,1205.71 1194.79,1205.71 1195.37,1205.71 1195.96,1205.71 1196.55,1205.71 1197.13,1205.71 1197.72,1205.71 1198.31,1205.71 1198.89,1205.71 1199.48,1205.71 1200.07,1205.71 1200.65,1205.71 1201.24,1205.71 1201.83,1205.71 1202.41,1205.71 1203,1205.71 1203.58,1205.71 1204.17,1205.71 1204.76,1205.71 1205.34,1205.71 1205.93,1205.71 1206.52,1205.71 1207.1,1205.71 1207.69,1205.71 1208.28,1205.71 1208.86,1205.71 1209.45,1205.71 1210.03,1205.71 1210.62,1205.71 1211.21,1205.71 1211.79,1205.71 1212.38,1205.71 1212.97,1205.71 1213.55,1205.71 1214.14,1205.71 1214.73,1205.71 1215.31,1205.71 1215.9,1205.71 1216.49,1205.71 1217.07,1205.71 1217.66,1205.71 1218.24,1205.71 1218.83,1205.71 1219.42,1205.71 1220,1205.71 1220.59,1205.71 1221.18,1205.71 1221.76,1205.71 1222.35,1205.71 1222.94,1205.71 1223.52,1205.71 1224.11,1205.71 1224.7,1205.71 1225.28,1205.71 1225.87,1205.71 1226.45,1205.71 1227.04,1205.71 1227.63,1205.71 1228.21,1205.71 1228.8,1205.71 1229.39,1205.71 1229.97,1205.71 1230.56,1205.71 1231.15,1205.71 1231.73,1205.71 1232.32,1205.71 1232.91,1205.71 1233.49,1205.71 1234.08,1205.71 1234.66,1205.71 1235.25,1205.71 1235.84,1205.71 1236.42,1205.71 1237.01,1205.71 1237.6,1205.71 1238.18,1205.71 1238.77,1205.71 1239.36,1205.71 1239.94,1205.71 1240.53,1205.71 1241.11,1205.71 1241.7,1205.71 1242.29,1205.71 1242.87,1205.71 1243.46,1205.71 1244.05,1205.71 1244.63,1205.71 1245.22,1205.71 1245.81,1205.71 1246.39,1205.71 1246.98,1205.71 1247.57,1205.71 1248.15,1205.71 1248.74,1205.71 1249.32,1205.71 1249.91,1205.71 1250.5,1205.71 1251.08,1205.71 1251.67,1205.71 1252.26,1205.71 1252.84,1205.71 1253.43,1205.71 1254.02,1205.71 1254.6,1205.71 1255.19,1205.71 1255.78,1205.71 1256.36,1205.71 1256.95,1205.71 1257.53,1205.71 1258.12,1205.71 1258.71,1205.71 1259.29,1205.71 1259.88,1205.71 1260.47,1205.71 1261.05,1205.71 1261.64,1205.71 1262.23,1205.71 1262.81,1205.71 1263.4,1205.71 1263.98,1205.71 1264.57,1205.71 1265.16,1205.71 1265.74,1205.71 1266.33,1205.71 1266.92,1205.71 1267.5,1205.71 1268.09,1205.71 1268.68,1205.71 1269.26,1205.71 1269.85,1205.71 1270.44,1205.71 1271.02,1205.71 1271.61,1205.71 1272.19,1205.71 1272.78,1205.71 1273.37,1205.71 1273.95,1205.71 1274.54,1205.71 1275.13,1205.71 1275.71,1205.71 1276.3,1205.71 1276.89,1205.71 1277.47,1205.71 1278.06,1205.71 1278.65,1205.71 1279.23,1205.71 1279.82,1205.71 1280.4,1205.71 1280.99,1205.71 1281.58,1205.71 1282.16,1205.71 1282.75,1205.71 1283.34,1205.71 1283.92,1205.71 1284.51,1205.71 1285.1,1205.71 1285.68,1205.71 1286.27,1205.71 1286.86,1205.71 1287.44,1205.71 1288.03,1205.71 1288.61,1205.71 1289.2,1205.71 1289.79,1205.71 1290.37,1205.71 1290.96,1205.71 1291.55,1205.71 1292.13,1205.71 1292.72,1205.71 1293.31,1205.71 1293.89,1205.71 1294.48,1205.71 1295.06,1205.71 1295.65,1205.71 1296.24,1205.71 1296.82,1205.71 1297.41,1205.71 1298,1205.71 1298.58,1205.71 1299.17,1205.71 1299.76,1205.71 1300.34,1205.71 1300.93,1205.71 1301.52,1205.71 1302.1,1205.71 1302.69,1205.71 1303.27,1205.71 1303.86,1205.71 1304.45,1205.71 1305.03,1205.71 1305.62,1205.71 1306.21,1205.71 1306.79,1205.71 1307.38,1205.71 1307.97,1205.71 1308.55,1205.71 1309.14,1205.71 1309.73,1205.71 1310.31,1205.71 1310.9,1205.71 1311.48,1205.71 1312.07,1205.71 1312.66,1205.71 1313.24,1205.71 1313.83,1205.71 1314.42,1205.71 1315,1205.71 1315.59,1205.71 1316.18,1205.71 1316.76,1205.71 1317.35,1205.71 1317.93,1205.71 1318.52,1205.71 1319.11,1205.71 1319.69,1205.71 1320.28,1205.71 1320.87,1205.71 1321.45,1205.71 1322.04,1205.71 1322.63,1205.71 1323.21,1205.71 1323.8,1205.71 1324.39,1205.71 1324.97,1205.71 1325.56,1205.71 1326.14,1205.71 1326.73,1205.71 1327.32,1205.71 1327.9,1205.71 1328.49,1205.71 1329.08,1205.71 1329.66,1205.71 1330.25,1205.71 1330.84,1205.71 1331.42,1205.71 1332.01,1205.71 1332.6,1205.71 1333.18,1205.71 1333.77,1205.71 1334.35,1205.71 1334.94,1205.71 1335.53,1205.71 1336.11,1205.71 1336.7,1205.71 1337.29,1205.71 1337.87,1205.71 1338.46,1205.71 1339.05,1205.71 1339.63,1205.71 1340.22,1205.71 1340.8,1205.71 1341.39,1205.71 1341.98,1205.71 1342.56,1205.71 1343.15,1205.71 1343.74,1205.71 1344.32,1205.71 1344.91,1205.71 1345.5,1205.71 1346.08,1205.71 1346.67,1205.71 1347.26,1205.71 1347.84,1205.71 1348.43,1205.71 1349.01,1205.71 1349.6,1205.71 1350.19,1205.71 1350.77,1205.71 1351.36,1205.71 1351.95,1205.71 1352.53,1205.71 1353.12,1205.71 1353.71,1205.71 1354.29,1205.71 1354.88,1205.71 1355.47,1205.71 1356.05,1205.71 1356.64,1205.71 1357.22,1205.71 1357.81,1205.71 1358.4,1205.71 1358.98,1205.71 1359.57,1205.71 1360.16,1205.71 1360.74,1205.71 1361.33,1205.71 1361.92,1205.71 1362.5,1205.71 1363.09,1205.71 1363.68,1205.71 1364.26,1205.71 1364.85,1205.71 1365.43,1205.71 1366.02,1205.71 1366.61,1205.71 1367.19,1205.71 1367.78,1205.71 1368.37,1205.71 1368.95,1205.71 1369.54,1205.71 1370.13,1205.71 1370.71,1205.71 1371.3,1205.71 1371.88,1205.71 1372.47,1205.71 1373.06,1205.71 1373.64,1205.71 1374.23,1205.71 1374.82,1205.71 1375.4,1205.71 1375.99,1205.71 1376.58,1205.71 1377.16,1205.71 1377.75,1205.71 1378.34,1205.71 1378.92,1205.71 1379.51,1205.71 1380.09,1205.71 1380.68,1205.71 1381.27,1205.71 1381.85,1205.71 1382.44,1205.71 1383.03,1205.71 1383.61,1205.71 1384.2,1205.71 1384.79,1205.71 1385.37,1205.71 1385.96,1205.71 1386.55,1205.71 1387.13,1205.71 1387.72,1205.71 1388.3,1205.71 1388.89,1205.71 1389.48,1205.71 1390.06,1205.71 1390.65,1205.71 1391.24,1205.71 1391.82,1205.71 1392.41,1205.71 1393,1205.71 1393.58,1205.71 1394.17,1205.71 1394.75,1205.71 1395.34,1205.71 1395.93,1205.71 1396.51,1205.71 1397.1,1205.71 1397.69,1205.71 1398.27,1205.71 1398.86,1205.71 1399.45,1205.71 1400.03,1205.71 1400.62,1205.71 1401.21,1205.71 1401.79,1205.71 1402.38,1205.71 1402.96,1205.71 1403.55,1205.71 1404.14,1205.71 1404.72,1205.71 1405.31,1205.71 1405.9,1205.71 1406.48,1205.71 1407.07,1205.71 1407.66,1205.71 1408.24,1205.71 1408.83,1205.71 1409.42,1205.71 1410,1205.71 1410.59,1205.71 1411.17,1205.71 1411.76,1205.71 1412.35,1205.71 1412.93,1205.71 1413.52,1205.71 1414.11,1205.71 1414.69,1205.71 1415.28,1205.71 1415.87,1205.71 1416.45,1205.71 1417.04,1205.71 1417.63,1205.71 1418.21,1205.71 1418.8,1205.71 1419.38,1205.71 1419.97,1205.71 1420.56,1205.71 1421.14,1205.71 1421.73,1205.71 1422.32,1205.71 1422.9,1205.71 1423.49,1205.71 1424.08,1205.71 1424.66,1205.71 1425.25,1205.71 1425.83,1205.71 1426.42,1205.71 1427.01,1205.71 1427.59,1205.71 1428.18,1205.71 1428.77,1205.71 1429.35,1205.71 1429.94,1205.71 1430.53,1205.71 1431.11,1205.71 1431.7,1205.71 1432.29,1205.71 1432.87,1205.71 1433.46,1205.71 1434.04,1205.71 1434.63,1205.71 1435.22,1205.71 1435.8,1205.71 1436.39,1205.71 1436.98,1205.71 1437.56,1205.71 1438.15,1205.71 1438.74,1205.71 1439.32,1205.71 1439.91,1205.71 1440.5,1205.71 1441.08,1205.71 1441.67,1205.71 1442.25,1205.71 1442.84,1205.71 1443.43,1205.71 1444.01,1205.71 1444.6,1205.71 1445.19,1205.71 1445.77,1205.71 1446.36,1205.71 1446.95,1205.71 1447.53,1205.71 1448.12,1205.71 1448.7,1205.71 1449.29,1205.71 1449.88,1205.71 1450.46,1205.71 1451.05,1205.71 1451.64,1205.71 1452.22,1205.71 1452.81,1205.71 1453.4,1205.71 1453.98,1205.71 1454.57,1205.71 1455.16,1205.71 1455.74,1205.71 1456.33,1205.71 1456.91,1205.71 1457.5,1205.71 1458.09,1205.71 1458.67,1205.71 1459.26,1205.71 1459.85,1205.71 1460.43,1205.71 1461.02,1205.71 1461.61,1205.71 1462.19,1205.71 1462.78,1205.71 1463.37,1205.71 1463.95,1205.71 1464.54,1205.71 1465.12,1205.71 1465.71,1205.71 1466.3,1205.71 1466.88,1205.71 1467.47,1205.71 1468.06,1205.71 1468.64,1205.71 1469.23,1205.71 1469.82,1205.71 1470.4,1205.71 1470.99,1205.71 1471.57,1205.71 1472.16,1205.71 1472.75,1205.71 1473.33,1205.71 1473.92,1205.71 1474.51,1205.71 1475.09,1205.71 1475.68,1205.71 1476.27,1205.71 1476.85,1205.71 1477.44,1205.71 1478.03,1205.71 1478.61,1205.71 1479.2,1205.71 1479.78,1205.71 1480.37,1205.71 1480.96,1205.71 1481.54,1205.71 1482.13,1205.71 1482.72,1205.71 1483.3,1205.71 1483.89,1205.71 1484.48,1205.71 1485.06,1205.71 1485.65,1205.71 1486.24,1205.71 1486.82,1205.71 1487.41,1205.71 1487.99,1205.71 1488.58,1205.71 1489.17,1205.71 1489.75,1205.71 1490.34,1205.71 1490.93,1205.71 1491.51,1205.71 1492.1,1205.71 1492.69,1205.71 1493.27,1205.71 1493.86,1205.71 1494.45,1205.71 1495.03,1205.71 1495.62,1205.71 1496.2,1205.71 1496.79,1205.71 1497.38,1205.71 1497.96,1205.71 1498.55,1205.71 1499.14,1205.71 1499.72,1205.71 1500.31,1205.71 1500.9,1205.71 1501.48,1205.71 1502.07,1205.71 1502.65,1205.71 1503.24,1205.71 1503.83,1205.71 1504.41,1205.71 1505,1205.71 1505.59,1205.71 1506.17,1205.71 1506.76,1205.71 1507.35,1205.71 1507.93,1205.71 1508.52,1205.71 1509.11,1205.71 1509.69,1205.71 1510.28,1205.71 1510.86,1205.71 1511.45,1205.71 1512.04,1205.71 1512.62,1205.71 1513.21,1205.71 1513.8,1205.71 1514.38,1205.71 1514.97,1205.71 1515.56,1205.71 1516.14,1205.71 1516.73,1205.71 1517.32,1205.71 1517.9,1205.71 1518.49,1205.71 1519.07,1205.71 1519.66,1205.71 1520.25,1205.71 1520.83,1205.71 1521.42,1205.71 1522.01,1205.71 1522.59,1205.71 1523.18,1205.71 1523.77,1205.71 1524.35,1205.71 1524.94,1205.71 1525.52,1205.71 1526.11,1205.71 1526.7,1205.71 1527.28,1205.71 1527.87,1205.71 1528.46,1205.71 1529.04,1205.71 1529.63,1205.71 1530.22,1205.71 1530.8,1205.71 1531.39,1205.71 1531.98,1205.71 1532.56,1205.71 1533.15,1205.71 1533.73,1205.71 1534.32,1205.71 1534.91,1205.71 1535.49,1205.71 1536.08,1205.71 1536.67,1205.71 1537.25,1205.71 1537.84,1205.71 1538.43,1205.71 1539.01,1205.71 1539.6,1205.71 1540.19,1205.71 1540.77,1205.71 1541.36,1205.71 1541.94,1205.71 1542.53,1205.71 1543.12,1205.71 1543.7,1205.71 1544.29,1205.71 1544.88,1205.71 1545.46,1205.71 1546.05,1205.71 1546.64,1205.71 1547.22,1205.71 1547.81,1205.71 1548.4,1205.71 1548.98,1205.71 1549.57,1205.71 1550.15,1205.71 1550.74,1205.71 1551.33,1205.71 1551.91,1205.71 1552.5,1205.71 1553.09,1205.71 1553.67,1205.71 1554.26,1205.71 1554.85,1205.71 1555.43,1205.71 1556.02,1205.71 1556.6,1205.71 1557.19,1205.71 1557.78,1205.71 1558.36,1205.71 1558.95,1205.71 1559.54,1205.71 1560.12,1205.71 1560.71,1205.71 1561.3,1205.71 1561.88,1205.71 1562.47,1205.71 1563.06,1205.71 1563.64,1205.71 1564.23,1205.71 1564.81,1205.71 1565.4,1205.71 1565.99,1205.71 1566.57,1205.71 1567.16,1205.71 1567.75,1205.71 1568.33,1205.71 1568.92,1205.71 1569.51,1205.71 1570.09,1205.71 1570.68,1205.71 1571.27,1205.71 1571.85,1205.71 1572.44,1205.71 1573.02,1205.71 1573.61,1205.71 1574.2,1205.71 1574.78,1205.71 1575.37,1205.71 1575.96,1205.71 1576.54,1205.71 1577.13,1205.71 1577.72,1205.71 1578.3,1205.71 1578.89,1205.71 1579.47,1205.71 1580.06,1205.71 1580.65,1205.71 1581.23,1205.71 1581.82,1205.71 1582.41,1205.71 1582.99,1205.71 1583.58,1205.71 1584.17,1205.71 1584.75,1205.71 1585.34,1205.71 1585.93,1205.71 1586.51,1205.71 1587.1,1205.71 1587.68,1205.71 1588.27,1205.71 1588.86,1205.71 1589.44,1205.71 1590.03,1205.71 1590.62,1205.71 1591.2,1205.71 1591.79,1205.71 1592.38,1205.71 1592.96,1205.71 1593.55,1205.71 1594.14,1205.71 1594.72,1205.71 1595.31,1205.71 1595.89,1205.71 1596.48,1205.71 1597.07,1205.71 1597.65,1205.71 1598.24,1205.71 1598.83,1205.71 1599.41,1205.71 1600,1205.71 1600.59,1205.71 1601.17,1205.71 1601.76,1205.71 1602.34,1205.71 1602.93,1205.71 1603.52,1205.71 1604.1,1205.71 1604.69,1205.71 1605.28,1205.71 1605.86,1205.71 1606.45,1205.71 1607.04,1205.71 1607.62,1205.71 1608.21,1205.71 1608.8,1205.71 1609.38,1205.71 1609.97,1205.71 1610.55,1205.71 1611.14,1205.71 1611.73,1205.71 1612.31,1205.71 1612.9,1205.71 1613.49,1205.71 1614.07,1205.71 1614.66,1205.71 1615.25,1205.71 1615.83,1205.71 1616.42,1205.71 1617.01,1205.71 1617.59,1205.71 1618.18,1205.71 1618.76,1205.71 1619.35,1205.71 1619.94,1205.71 1620.52,1205.71 1621.11,1205.71 1621.7,1205.71 1622.28,1205.71 1622.87,1205.71 1623.46,1205.71 1624.04,1205.71 1624.63,1205.71 1625.22,1205.71 1625.8,1205.71 1626.39,1205.71 1626.97,1205.71 1627.56,1205.71 1628.15,1205.71 1628.73,1205.71 1629.32,1205.71 1629.91,1205.71 1630.49,1205.71 1631.08,1205.71 1631.67,1205.71 1632.25,1205.71 1632.84,1205.71 1633.42,1205.71 1634.01,1205.71 1634.6,1205.71 1635.18,1205.71 1635.77,1205.71 1636.36,1205.71 1636.94,1205.71 1637.53,1205.71 1638.12,1205.71 1638.7,1205.71 1639.29,1205.71 1639.88,1205.71 1640.46,1205.71 1641.05,1205.71 1641.63,1205.71 1642.22,1205.71 1642.81,1205.71 1643.39,1205.71 1643.98,1205.71 1644.57,1205.71 1645.15,1205.71 1645.74,1205.71 1646.33,1205.71 1646.91,1205.71 1647.5,1205.71 1648.09,1205.71 1648.67,1205.71 1649.26,1205.71 1649.84,1205.71 1650.43,1205.71 1651.02,1205.71 1651.6,1205.71 1652.19,1205.71 1652.78,1205.71 1653.36,1205.71 1653.95,1205.71 1654.54,1205.71 1655.12,1205.71 1655.71,1205.71 1656.29,1205.71 1656.88,1205.71 1657.47,1205.71 1658.05,1205.71 1658.64,1205.71 1659.23,1205.71 1659.81,1205.71 1660.4,1205.71 1660.99,1205.71 1661.57,1205.71 1662.16,1205.71 1662.75,1205.71 1663.33,1205.71 1663.92,1205.71 1664.5,1205.71 1665.09,1205.71 1665.68,1205.71 1666.26,1205.71 1666.85,1205.71 1667.44,1205.71 1668.02,1205.71 1668.61,1205.71 1669.2,1205.71 1669.78,1205.71 1670.37,1205.71 1670.96,1205.71 1671.54,1205.71 1672.13,1205.71 1672.71,1205.71 1673.3,1205.71 1673.89,1205.71 1674.47,1205.71 1675.06,1205.71 1675.65,1205.71 1676.23,1205.71 1676.82,1205.71 1677.41,1205.71 1677.99,1205.71 1678.58,1205.71 1679.17,1205.71 1679.75,1205.71 1680.34,1205.71 1680.92,1205.71 1681.51,1205.71 1682.1,1205.71 1682.68,1205.71 1683.27,1205.71 1683.86,1205.71 1684.44,1205.71 1685.03,1205.71 1685.62,1205.71 1686.2,1205.71 1686.79,1205.71 1687.37,1205.71 1687.96,1205.71 1688.55,1205.71 1689.13,1205.71 1689.72,1205.71 1690.31,1205.71 1690.89,1205.71 1691.48,1205.71 1692.07,1205.71 1692.65,1205.71 1693.24,1205.71 1693.83,1205.71 1694.41,1205.71 1695,1205.71 1695.58,1205.71 1696.17,1205.71 1696.76,1205.71 1697.34,1205.71 1697.93,1205.71 1698.52,1205.71 1699.1,1205.71 1699.69,1205.71 1700.28,1205.71 1700.86,1205.71 1701.45,1205.71 1702.04,1205.71 1702.62,1205.71 1703.21,1205.71 1703.79,1205.71 1704.38,1205.71 1704.97,1205.71 1705.55,1205.71 1706.14,1205.71 1706.73,1205.71 1707.31,1205.71 1707.9,1205.71 1708.49,1205.71 1709.07,1205.71 1709.66,1205.71 1710.24,1205.71 1710.83,1205.71 1711.42,1205.71 1712,1205.71 1712.59,1205.71 1713.18,1205.71 1713.76,1205.71 1714.35,1205.71 1714.94,1205.71 1715.52,1205.71 1716.11,1205.71 1716.7,1205.71 1717.28,1205.71 1717.87,1205.71 1718.45,1205.71 1719.04,1205.71 1719.63,1205.71 1720.21,1205.71 1720.8,1205.71 1721.39,1205.71 1721.97,1205.71 1722.56,1205.71 1723.15,1205.71 1723.73,1205.71 1724.32,1205.71 1724.91,1205.71 1725.49,1205.71 1726.08,1205.71 1726.66,1205.71 1727.25,1205.71 1727.84,1205.71 1728.42,1205.71 1729.01,1205.71 1729.6,1205.71 1730.18,1205.71 1730.77,1205.71 1731.36,1205.71 1731.94,1205.71 1732.53,1205.71 1733.11,1205.71 1733.7,1205.71 1734.29,1205.71 1734.87,1205.71 1735.46,1205.71 1736.05,1205.71 1736.63,1205.71 1737.22,1205.71 1737.81,1205.71 1738.39,1205.71 1738.98,1205.71 1739.57,1205.71 1740.15,1205.71 1740.74,1205.71 1741.32,1205.71 1741.91,1205.71 1742.5,1205.71 1743.08,1205.71 1743.67,1205.71 1744.26,1205.71 1744.84,1205.71 1745.43,1205.71 1746.02,1205.71 1746.6,1205.71 1747.19,1205.71 1747.78,1205.71 1748.36,1205.71 1748.95,1205.71 1749.53,1205.71 1750.12,1205.71 1750.71,1205.71 1751.29,1205.71 1751.88,1205.71 1752.47,1205.71 1753.05,1205.71 1753.64,1205.71 1754.23,1205.71 1754.81,1205.71 1755.4,1205.71 1755.99,1205.71 1756.57,1205.71 1757.16,1205.71 1757.74,1205.71 1758.33,1205.71 1758.92,1205.71 1759.5,1205.71 1760.09,1205.71 1760.68,1205.71 1761.26,1205.71 1761.85,1205.71 1762.44,1205.71 1763.02,1205.71 1763.61,1205.71 1764.19,1205.71 1764.78,1205.71 1765.37,1205.71 1765.95,1205.71 1766.54,1205.71 1767.13,1205.71 1767.71,1205.71 1768.3,1205.71 1768.89,1205.71 1769.47,1205.71 1770.06,1205.71 1770.65,1205.71 1771.23,1205.71 1771.82,1205.71 1772.4,1205.71 1772.99,1205.71 1773.58,1205.71 1774.16,1205.71 1774.75,1205.71 1775.34,1205.71 1775.92,1205.71 1776.51,1205.71 1777.1,1205.71 1777.68,1205.71 1778.27,1205.71 1778.86,1205.71 1779.44,1205.71 1780.03,1205.71 1780.61,1205.71 1781.2,1205.71 1781.79,1205.71 1782.37,1205.71 1782.96,1205.71 1783.55,1205.71 1784.13,1205.71 1784.72,1205.71 1785.31,1205.71 1785.89,1205.71 1786.48,1205.71 1787.06,1205.71 1787.65,1205.71 1788.24,1205.71 1788.82,1205.71 1789.41,1205.71 1790,1205.71 1790.58,1205.71 1791.17,1205.71 1791.76,1205.71 1792.34,1205.71 1792.93,1205.71 1793.52,1205.71 1794.1,1205.71 1794.69,1205.71 1795.27,1205.71 1795.86,1205.71 1796.45,1205.71 1797.03,1205.71 1797.62,1205.71 1798.21,1205.71 1798.79,1205.71 1799.38,1205.71 1799.97,1205.71 1800.55,1205.71 1801.14,1205.71 1801.73,1205.71 1802.31,1205.71 1802.9,1205.71 1803.48,1205.71 1804.07,1205.71 1804.66,1205.71 1805.24,1205.71 1805.83,1205.71 1806.42,1205.71 1807,1205.71 1807.59,1205.71 1808.18,1205.71 1808.76,1205.71 1809.35,1205.71 1809.94,1205.71 1810.52,1205.71 1811.11,1205.71 1811.69,1205.71 1812.28,1205.71 1812.87,1205.71 1813.45,1205.71 1814.04,1205.71 1814.63,1205.71 1815.21,1205.71 1815.8,1205.71 1816.39,1205.71 1816.97,1205.71 1817.56,1205.71 1818.14,1205.71 1818.73,1205.71 1819.32,1205.71 1819.9,1205.71 1820.49,1205.71 1821.08,1205.71 1821.66,1205.71 1822.25,1205.71 1822.84,1205.71 1823.42,1205.71 1824.01,1205.71 1824.6,1205.71 1825.18,1205.71 1825.77,1205.71 1826.35,1205.71 1826.94,1205.71 1827.53,1205.71 1828.11,1205.71 1828.7,1205.71 1829.29,1205.71 1829.87,1205.71 1830.46,1205.71 1831.05,1205.71 1831.63,1205.71 1832.22,1205.71 1832.81,1205.71 1833.39,1205.71 1833.98,1205.71 1834.56,1205.71 1835.15,1205.71 1835.74,1205.71 1836.32,1205.71 1836.91,1205.71 1837.5,1205.71 1838.08,1205.71 1838.67,1205.71 1839.26,1205.71 1839.84,1205.71 1840.43,1205.71 1841.01,1205.71 1841.6,1205.71 1842.19,1205.71 1842.77,1205.71 1843.36,1205.71 1843.95,1205.71 1844.53,1205.71 1845.12,1205.71 1845.71,1205.71 1846.29,1205.71 1846.88,1205.71 1847.47,1205.71 1848.05,1205.71 1848.64,1205.71 1849.22,1205.71 1849.81,1205.71 1850.4,1205.71 1850.98,1205.71 1851.57,1205.71 1852.16,1205.71 1852.74,1205.71 1853.33,1205.71 1853.92,1205.71 1854.5,1205.71 1855.09,1205.71 1855.68,1205.71 1856.26,1205.71 1856.85,1205.71 1857.43,1205.71 1858.02,1205.71 1858.61,1205.71 1859.19,1205.71 1859.78,1205.71 1860.37,1205.71 1860.95,1205.71 1861.54,1205.71 1862.13,1205.71 1862.71,1205.71 1863.3,1205.71 1863.88,1205.71 1864.47,1205.71 1865.06,1205.71 1865.64,1205.71 1866.23,1205.71 1866.82,1205.71 1867.4,1205.71 1867.99,1205.71 1868.58,1205.71 1869.16,1205.71 1869.75,1205.71 1870.34,1205.71 1870.92,1205.71 1871.51,1205.71 1872.09,1205.71 1872.68,1205.71 1873.27,1205.71 1873.85,1205.71 1874.44,1205.71 1875.03,1205.71 1875.61,1205.71 1876.2,1205.71 1876.79,1205.71 1877.37,1205.71 1877.96,1205.71 1878.55,1205.71 1879.13,1205.71 1879.72,1205.71 1880.3,1205.71 1880.89,1205.71 1881.48,1205.71 1882.06,1205.71 1882.65,1205.71 1883.24,1205.71 1883.82,1205.71 1884.41,1205.71 1885,1205.71 1885.58,1205.71 1886.17,1205.71 1886.76,1205.71 1887.34,1205.71 1887.93,1205.71 1888.51,1205.71 1889.1,1205.71 1889.69,1205.71 1890.27,1205.71 1890.86,1205.71 1891.45,1205.71 1892.03,1205.71 1892.62,1205.71 1893.21,1205.71 1893.79,1205.71 1894.38,1205.71 1894.96,1205.71 1895.55,1205.71 1896.14,1205.71 1896.72,1205.71 1897.31,1205.71 1897.9,1205.71 1898.48,1205.71 1899.07,1205.71 1899.66,1205.71 1900.24,1205.71 1900.83,1205.71 1901.42,1205.71 1902,1205.71 1902.59,1205.71 1903.17,1205.71 1903.76,1205.71 1904.35,1205.71 1904.93,1205.71 1905.52,1205.71 1906.11,1205.71 1906.69,1205.71 1907.28,1205.71 1907.87,1205.71 1908.45,1205.71 1909.04,1205.71 1909.63,1205.71 1910.21,1205.71 1910.8,1205.71 1911.38,1205.71 1911.97,1205.71 1912.56,1205.71 1913.14,1205.71 1913.73,1205.71 1914.32,1205.71 1914.9,1205.71 1915.49,1205.71 1916.08,1205.71 1916.66,1205.71 1917.25,1205.71 1917.83,1205.71 1918.42,1205.71 1919.01,1205.71 1919.59,1205.71 1920.18,1205.71 1920.77,1205.71 1921.35,1205.71 1921.94,1205.71 1922.53,1205.71 1923.11,1205.71 1923.7,1205.71 1924.29,1205.71 1924.87,1205.71 1925.46,1205.71 1926.04,1205.71 1926.63,1205.71 1927.22,1205.71 1927.8,1205.71 1928.39,1205.71 1928.98,1205.71 1929.56,1205.71 1930.15,1205.71 1930.74,1205.71 1931.32,1205.71 1931.91,1205.71 1932.5,1205.71 1933.08,1205.71 1933.67,1205.71 1934.25,1205.71 1934.84,1205.71 1935.43,1205.71 1936.01,1205.71 1936.6,1205.71 1937.19,1205.71 1937.77,1205.71 1938.36,1205.71 1938.95,1205.71 1939.53,1205.71 1940.12,1205.71 1940.71,1205.71 1941.29,1205.71 1941.88,1205.71 1942.46,1205.71 1943.05,1205.71 1943.64,1205.71 1944.22,1205.71 1944.81,1205.71 1945.4,1205.71 1945.98,1205.71 1946.57,1205.71 1947.16,1205.71 1947.74,1205.71 1948.33,1205.71 1948.91,1205.71 1949.5,1205.71 1950.09,1205.71 1950.67,1205.71 1951.26,1205.71 1951.85,1205.71 1952.43,1205.71 1953.02,1205.71 1953.61,1205.71 1954.19,1205.71 1954.78,1205.71 1955.37,1205.71 1955.95,1205.71 1956.54,1205.71 1957.12,1205.71 1957.71,1205.71 1958.3,1205.71 1958.88,1205.71 1959.47,1205.71 1960.06,1205.71 1960.64,1205.71 1961.23,1205.71 1961.82,1205.71 1962.4,1205.71 1962.99,1205.71 1963.58,1205.71 1964.16,1205.71 1964.75,1205.71 1965.33,1205.71 1965.92,1205.71 1966.51,1205.71 1967.09,1205.71 1967.68,1205.71 1968.27,1205.71 1968.85,1205.71 1969.44,1205.71 1970.03,1205.71 1970.61,1205.71 1971.2,1205.71 1971.78,1205.71 1972.37,1205.71 1972.96,1205.71 1973.54,1205.71 1974.13,1205.71 1974.72,1205.71 1975.3,1205.71 1975.89,1205.71 1976.48,1205.71 1977.06,1205.71 1977.65,1205.71 1978.24,1205.71 1978.82,1205.71 1979.41,1205.71 1979.99,1205.71 1980.58,1205.71 1981.17,1205.71 1981.75,1205.71 1982.34,1205.71 1982.93,1205.71 1983.51,1205.71 1984.1,1205.71 1984.69,1205.71 1985.27,1205.71 1985.86,1205.71 1986.45,1205.71 1987.03,1205.71 1987.62,1205.71 1988.2,1205.71 1988.79,1205.71 1989.38,1205.71 1989.96,1205.71 1990.55,1205.71 1991.14,1205.71 1991.72,1205.71 1992.31,1205.71 1992.9,1205.71 1993.48,1205.71 1994.07,1205.71 1994.65,1205.71 1995.24,1205.71 1995.83,1205.71 1996.41,1205.71 1997,1205.71 1997.59,1205.71 1998.17,1205.71 1998.76,1205.71 1999.35,1205.71 1999.93,1205.71 2000.52,1205.71 2001.11,1205.71 2001.69,1205.71 2002.28,1205.71 2002.86,1205.71 2003.45,1205.71 2004.04,1205.71 2004.62,1205.71 2005.21,1205.71 2005.8,1205.71 2006.38,1205.71 2006.97,1205.71 2007.56,1205.71 2008.14,1205.71 2008.73,1205.71 2009.32,1205.71 2009.9,1205.71 2010.49,1205.71 2011.07,1205.71 2011.66,1205.71 2012.25,1205.71 2012.83,1205.71 2013.42,1205.71 2014.01,1205.71 2014.59,1205.71 2015.18,1205.71 2015.77,1205.71 2016.35,1205.71 2016.94,1205.71 2017.53,1205.71 2018.11,1205.71 2018.7,1205.71 2019.28,1205.71 2019.87,1205.71 2020.46,1205.71 2021.04,1205.71 2021.63,1205.71 2022.22,1205.71 2022.8,1205.71 2023.39,1205.71 2023.98,1205.71 2024.56,1205.71 2025.15,1205.71 2025.73,1205.71 2026.32,1205.71 2026.91,1205.71 2027.49,1205.71 2028.08,1205.71 2028.67,1205.71 2029.25,1205.71 2029.84,1205.71 2030.43,1205.71 2031.01,1205.71 2031.6,1205.71 2032.19,1205.71 2032.77,1205.71 2033.36,1205.71 2033.94,1205.71 2034.53,1205.71 2035.12,1205.71 2035.7,1205.71 2036.29,1205.71 2036.88,1205.71 2037.46,1205.71 2038.05,1205.71 2038.64,1205.71 2039.22,1205.71 2039.81,1205.71 2040.4,1205.71 2040.98,1205.71 2041.57,1205.71 2042.15,1205.71 2042.74,1205.71 2043.33,1205.71 2043.91,1205.71 2044.5,1205.71 2045.09,1205.71 2045.67,1205.71 2046.26,1205.71 2046.85,1205.71 2047.43,1205.71 2048.02,1205.71 2048.6,1205.71 2049.19,1205.71 2049.78,1205.71 2050.36,1205.71 2050.95,1205.71 2051.54,1205.71 2052.12,1205.71 2052.71,1205.71 2053.3,1205.71 2053.88,1205.71 2054.47,1205.71 2055.06,1205.71 2055.64,1205.71 2056.23,1205.71 2056.81,1205.71 2057.4,1205.71 2057.99,1205.71 2058.57,1205.71 2059.16,1205.71 2059.75,1205.71 2060.33,1205.71 2060.92,1205.71 2061.51,1205.71 2062.09,1205.71 2062.68,1205.71 2063.27,1205.71 2063.85,1205.71 2064.44,1205.71 2065.02,1205.71 2065.61,1205.71 2066.2,1205.71 2066.78,1205.71 2067.37,1205.71 2067.96,1205.71 2068.54,1205.71 2069.13,1205.71 2069.72,1205.71 2070.3,1205.71 2070.89,1205.71 2071.48,1205.71 2072.06,1205.71 2072.65,1205.71 2073.23,1205.71 2073.82,1205.71 2074.41,1205.71 2074.99,1205.71 2075.58,1205.71 2076.17,1205.71 2076.75,1205.71 2077.34,1205.71 2077.93,1205.71 2078.51,1205.71 2079.1,1205.71 2079.68,1205.71 2080.27,1205.71 2080.86,1205.71 2081.44,1205.71 2082.03,1205.71 2082.62,1205.71 2083.2,1205.71 2083.79,1205.71 2084.38,1205.71 2084.96,1205.71 2085.55,1205.71 2086.14,1205.71 2086.72,1205.71 2087.31,1205.71 2087.89,1205.71 2088.48,1205.71 2089.07,1205.71 2089.65,1205.71 2090.24,1205.71 2090.83,1205.71 2091.41,1205.71 2092,1205.71 2092.59,1205.71 2093.17,1205.71 2093.76,1205.71 2094.35,1205.71 2094.93,1205.71 2095.52,1205.71 2096.1,1205.71 2096.69,1205.71 2097.28,1205.71 2097.86,1205.71 2098.45,1205.71 2099.04,1205.71 2099.62,1205.71 2100.21,1205.71 2100.8,1205.71 2101.38,1205.71 2101.97,1205.71 2102.55,1205.71 2103.14,1205.71 2103.73,1205.71 2104.31,1205.71 2104.9,1205.71 2105.49,1205.71 2106.07,1205.71 2106.66,1205.71 2107.25,1205.71 2107.83,1205.71 2108.42,1205.71 2109.01,1205.71 2109.59,1205.71 2110.18,1205.71 2110.76,1205.71 2111.35,1205.71 2111.94,1205.71 2112.52,1205.71 2113.11,1205.71 2113.7,1205.71 2114.28,1205.71 2114.87,1205.71 2115.46,1205.71 2116.04,1205.71 2116.63,1205.71 2117.22,1205.71 2117.8,1205.71 2118.39,1205.71 2118.97,1205.71 2119.56,1205.71 2120.15,1205.71 2120.73,1205.71 2121.32,1205.71 2121.91,1205.71 2122.49,1205.71 2123.08,1205.71 2123.67,1205.71 2124.25,1205.71 2124.84,1205.71 2125.42,1205.71 2126.01,1205.71 2126.6,1205.71 2127.18,1205.71 2127.77,1205.71 2128.36,1205.71 2128.94,1205.71 2129.53,1205.71 2130.12,1205.71 2130.7,1205.71 2131.29,1205.71 2131.88,1205.71 2132.46,1205.71 2133.05,1205.71 2133.63,1205.71 2134.22,1205.71 2134.81,1205.71 2135.39,1205.71 2135.98,1205.71 2136.57,1205.71 2137.15,1205.71 2137.74,1205.71 2138.33,1205.71 2138.91,1205.71 2139.5,1205.71 2140.09,1205.71 2140.67,1205.71 2141.26,1205.71 2141.84,1205.71 2142.43,1205.71 2143.02,1205.71 2143.6,1205.71 2144.19,1205.71 2144.78,1205.71 2145.36,1205.71 2145.95,1205.71 2146.54,1205.71 2147.12,1205.71 2147.71,1205.71 2148.3,1205.71 2148.88,1205.71 2149.47,1205.71 2150.05,1205.71 2150.64,1205.71 2151.23,1205.71 2151.81,1205.71 2152.4,1205.71 2152.99,1205.71 2153.57,1205.71 2154.16,1205.71 2154.75,1205.71 2155.33,1205.71 2155.92,1205.71 2156.5,1205.71 2157.09,1205.71 2157.68,1205.71 2158.26,1205.71 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.39,1186.75 1400.86,899.083 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1224.24 985.439,1186.75 2158.26,1186.75 2158.26,1224.24 985.439,1224.24 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip130)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip130)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip133\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip133)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-10247.9 166.588,-9677.11 167.147,-10242.7 167.706,-9777.68 168.266,-10272.3 168.825,-10713.2 169.384,-10315.1 169.943,-9977.22 170.503,-9675.78 171.062,-10020 171.621,-10313.3 172.18,-10040.9 172.74,-10275.4 173.299,-10477.1 173.858,-10656.3 174.417,-10804.9 174.977,-10530.1 175.536,-10635.1 176.095,-10699.4 176.655,-10738.9 177.214,-10457.4 177.773,-10199.1 178.332,-9957.27 178.892,-9977.54 179.451,-9957.36 180.01,-9717.29 180.569,-9681.55 181.129,-9631.73 181.688,-9570.56 182.247,-9320.14 182.806,-9243.05 183.366,-9164.45 183.925,-8937.11 184.484,-8850.87 185.043,-8610.17 185.603,-8519.01 186.162,-8168.88 186.721,-7965.98 187.28,-7861.95 187.84,-7747.75 188.399,-7432.97 188.958,-7324.95 189.517,-7208.56 190.077,-7093.96 190.636,-6886.58 191.195,-6688.02 191.754,-6572.39 192.314,-6373.51 192.873,-6258.14 193.432,-6145.84 193.991,-5898.77 194.551,-5724.17 195.11,-5546.41 195.669,-5188.59 196.228,-5082.89 196.788,-4870.28 197.347,-4664.91 197.906,-4463.69 198.465,-4310.34 199.025,-4160.11 199.584,-3915.25 200.143,-3820.49 200.702,-3595.77 201.262,-3467.24 201.821,-3380.36 202.38,-3256.63 202.939,-3094.77 203.499,-2938.2 204.058,-2827.01 204.617,-2753.42 205.176,-2569.47 205.736,-2426.84 206.295,-2286.68 206.854,-2187.62 207.413,-2118.08 207.973,-1993.68 208.532,-1840.04 209.091,-1748.46 209.65,-1601.27 210.21,-1513.44 210.769,-1433.94 211.328,-1352.1 211.887,-1302.67 212.447,-1225.61 213.006,-1094.49 213.565,-1048.24 214.124,-951.023 214.684,-890.004 215.243,-845.591 215.802,-729.515 216.361,-640.873 216.921,-529.089 217.48,-470.756 218.039,-417.56 218.598,-390.874 219.158,-292.105 219.717,-244.375 220.276,-177.003 220.835,-155.167 221.395,-107.874 221.954,23.3253 222.513,57.5841 223.072,93.5252 223.632,105.601 224.191,139.471 224.75,197.156 225.309,247.852 225.869,301.723 226.428,312.922 226.987,404.485 227.546,389.841 228.106,396.841 228.665,404.79 229.224,452.25 229.783,458.805 230.343,489.573 230.902,515.848 231.461,561.645 232.02,562.85 232.58,546.237 233.139,569.196 233.698,630.598 234.257,628.556 234.817,670.19 235.376,669.707 235.935,690.76 236.494,744.479 237.054,758.28 237.613,775.477 238.172,829.848 238.731,826.125 239.291,823.894 239.85,838.989 240.409,853.506 240.968,850.19 241.528,844.762 242.087,843.17 242.646,844.457 243.205,877.789 243.765,961.179 244.324,972.739 244.883,966.509 245.442,991.259 246.002,983.224 246.561,996.019 247.12,900.568 247.679,919.369 248.239,949.837 248.798,963.108 249.357,992.289 249.916,983.115 250.476,989.013 251.035,997.035 251.594,955.927 252.153,966.93 252.713,995.62 253.272,1027.08 253.831,1037.03 254.39,1029.95 254.95,1024.38 255.509,1052.79 256.068,1026.73 256.627,1055.85 257.187,1048.46 257.746,1040.9 258.305,1032.31 258.864,1078.91 259.424,1105.13 259.983,1092.82 260.542,1097.52 261.101,1137.99 261.661,1127.52 262.22,1134.43 262.779,1121.59 263.338,1111.54 263.898,1135.81 264.457,1138.56 265.016,1177.82 265.575,1144.51 266.135,1115.96 266.694,1121.48 267.253,1110.74 267.812,1166.17 268.372,1186.07 268.931,1205.39 269.49,1171.81 270.049,1144.34 270.609,1148.27 271.168,1132.89 271.727,1102.75 272.286,1144.05 272.846,1163.2 273.405,1169.15 273.964,1123.77 274.523,1133.34 275.083,1142.91 275.642,1128.74 276.201,1118.07 276.76,1141.1 277.32,1096.59 277.879,1117.33 278.438,1122.96 278.997,1143.25 279.557,1145.96 280.116,1165.81 280.675,1152.72 281.234,1121.38 281.794,1160.33 282.353,1168.62 282.912,1154.94 283.471,1126.33 284.031,1111.91 284.59,1103.8 285.149,1059.83 285.708,1034.88 286.268,1029.91 286.827,1025.44 287.386,1053.4 287.945,1050.36 288.505,1044.63 289.064,1075.23 289.623,1065.35 290.182,1079.8 290.742,1091.6 291.301,1080.47 291.86,1070.06 292.419,1108.41 292.979,1128.16 293.538,1130.19 294.097,1137.95 294.656,1138.44 295.216,1138.71 295.775,1108.91 296.334,1145.76 296.893,1118.35 297.453,1094.12 298.012,1137.53 298.571,1072.44 299.13,1047.72 299.69,1052.3 300.249,1059.55 300.808,1086.13 301.368,1109.9 301.927,1116.17 302.486,1106.13 303.045,1115.38 303.605,1088.17 304.164,1078.99 304.723,1067.98 305.282,1045.46 305.842,1037.68 306.401,1034.89 306.96,995.37 307.519,1021.27 308.079,1035.7 308.638,1029.27 309.197,1023.74 309.756,999.843 310.316,997.225 310.875,977.462 311.434,974.081 311.993,968.582 312.553,966.125 313.112,966.078 313.671,962.988 314.23,906.829 314.79,920.644 315.349,886.615 315.908,866.877 316.467,867.76 317.027,834.723 317.586,855.064 318.145,855.414 318.704,873.998 319.264,890.274 319.823,873.751 320.382,906.93 320.941,889.702 321.501,920.402 322.06,936.579 322.619,936.462 323.178,917.265 323.738,868.369 324.297,839.384 324.856,855.47 325.415,859.012 325.975,855.398 326.534,851.924 327.093,867.309 327.652,868.914 328.212,883.192 328.771,868.63 329.33,886.601 329.889,900.767 330.449,947.715 331.008,945.277 331.567,958.727 332.126,940.355 332.686,919.499 333.245,919.28 333.804,914.11 334.363,892.718 334.923,873.748 335.482,808.858 336.041,813.117 336.6,844.461 337.16,845.302 337.719,847.721 338.278,845.218 338.837,843.371 339.397,863.241 339.956,880.961 340.515,813.149 341.074,828.017 341.634,811.332 342.193,780.024 342.752,797.682 343.311,833.332 343.871,816.904 344.43,819.036 344.989,819.596 345.548,835.588 346.108,868.486 346.667,866.012 347.226,831.482 347.785,830.105 348.345,797.212 348.904,814.244 349.463,815.482 350.022,815.787 350.582,818.608 351.141,822.408 351.7,821.798 352.259,867.556 352.819,932.445 353.378,897.806 353.937,911.832 354.496,893.532 355.056,890.625 355.615,888.531 356.174,899.255 356.733,910.968 357.293,921.082 357.852,895.93 358.411,877.545 358.97,874.405 359.53,838.861 360.089,836.913 360.648,819.794 361.207,790.653 361.767,758.758 362.326,793.357 362.885,793.513 363.444,778.864 364.004,745.979 364.563,764.477 365.122,783.033 365.681,832.316 366.241,815.112 366.8,818.366 367.359,785.468 367.918,803.877 368.478,800.405 369.037,786.996 369.596,790.298 370.155,776.273 370.715,764.626 371.274,751.555 371.833,759.2 372.392,777.52 372.952,809.489 373.511,806.939 374.07,777.793 374.629,781.465 375.189,785.896 375.748,800.636 376.307,786.426 376.866,820.627 377.426,850.2 377.985,849.567 378.544,866.931 379.103,877.176 379.663,908 380.222,902.458 380.781,878.694 381.34,842.118 381.9,856.576 382.459,872.676 383.018,917.856 383.577,913.198 384.137,923.106 384.696,930.95 385.255,873.13 385.814,869.927 386.374,864.137 386.933,861.587 387.492,839.745 388.051,839.548 388.611,819.439 389.17,818.781 389.729,850.115 390.288,846.062 390.848,859.227 391.407,888.434 391.966,818.804 392.525,818.803 393.085,783.776 393.644,801.715 394.203,802.216 394.762,785.03 395.322,786.525 395.881,773.559 396.44,791.881 396.999,775.382 397.559,792.246 398.118,807.883 398.677,808.044 399.236,808.8 399.796,763.835 400.355,762.134 400.914,762.868 401.473,760.095 402.033,762.733 402.592,784.045 403.151,765.959 403.71,784.61 404.27,799.723 404.829,831.834 405.388,847.638 405.947,878.637 406.507,885.555 407.066,879.368 407.625,841.591 408.184,838.681 408.744,836.263 409.303,815.345 409.862,861.012 410.421,857.256 410.981,855.902 411.54,851.605 412.099,848.013 412.658,891.209 413.218,870.438 413.777,864.66 414.336,844.291 414.895,826.003 415.455,808.466 416.014,807.337 416.573,820.949 417.132,817.211 417.692,827.438 418.251,823.995 418.81,837.95 419.369,797.643 419.929,812.134 420.488,858.206 421.047,850.772 421.606,844.334 422.166,825.259 422.725,826.57 423.284,873.266 423.843,854.351 424.403,848.465 424.962,828.669 425.521,854.293 426.08,814.892 426.64,814.282 427.199,860.055 427.758,852.505 428.318,867.437 428.877,876.455 429.436,886.125 429.995,864.051 430.555,841.198 431.114,838.166 431.673,852.718 432.232,847.243 432.792,857.381 433.351,869.638 433.91,881.544 434.469,892.122 435.029,900.974 435.588,876.228 436.147,853.135 436.706,800.314 437.266,799.362 437.825,801.879 438.384,799.068 438.943,797.56 439.503,795.233 440.062,810.073 440.621,853.975 441.18,913.213 441.74,924.829 442.299,914.852 442.858,906.17 443.417,886.353 443.977,865.768 444.536,840.165 445.095,801.452 445.654,782.947 446.214,796.354 446.773,825.711 447.332,786.735 447.891,753.891 448.451,739.602 449.01,743.172 449.569,742.361 450.128,758.826 450.688,757.735 451.247,755.154 451.806,757.768 452.365,786.86 452.925,770.183 453.484,752.919 454.043,769.204 454.602,849.529 455.162,812.342 455.721,826.009 456.28,803.186 456.839,799.358 457.399,780.944 457.958,791.564 458.517,807.473 459.076,803.224 459.636,833.336 460.195,862.051 460.754,839.466 461.313,815.776 461.873,813.003 462.432,809.443 462.991,804.748 463.55,802.929 464.11,799.771 464.669,814.04 465.228,792.461 465.787,805.094 466.347,783.85 466.906,763.95 467.465,777.869 468.024,774.002 468.584,774.205 469.143,772.452 469.702,774.171 470.261,752.201 470.821,719.527 471.38,706.517 471.939,691.209 472.498,696.741 473.058,702.903 473.617,691.1 474.176,660.52 474.735,679.488 475.295,686.61 475.854,688.437 476.413,690.673 476.972,661.655 477.532,664.271 478.091,651.991 478.65,636.475 479.209,668.96 479.769,704.616 480.328,690.381 480.887,708.636 481.446,708.381 482.006,727.703 482.565,743.124 483.124,740.6 483.683,787.81 484.243,814.93 484.802,794.859 485.361,807.091 485.92,790.855 486.48,773.012 487.039,767.944 487.598,764.216 488.157,795.372 488.717,776.15 489.276,754.769 489.835,771.167 490.394,751.525 490.954,746.563 491.513,782.689 492.072,778.179 492.631,777.546 493.191,774.457 493.75,804.148 494.309,798.826 494.868,829.328 495.428,823.535 495.987,816.657 496.546,797.262 497.105,761.041 497.665,793.617 498.224,758.379 498.783,738.882 499.342,756.126 499.902,754.416 500.461,783.929 501.02,781.501 501.579,780.416 502.139,779.993 502.698,760.987 503.257,772.143 503.816,801.266 504.376,781.268 504.935,812.031 505.494,808.669 506.053,837.528 506.613,831.766 507.172,815.051 507.731,824.892 508.29,818.283 508.85,825.462 509.409,805.335 509.968,752.536 510.527,719.223 511.087,749.972 511.646,749.372 512.205,735.23 512.764,770.635 513.324,801.018 513.883,782.464 514.442,765.719 515.001,781.085 515.561,777.756 516.12,807.477 516.679,755.996 517.238,756.698 517.798,767.976 518.357,779.972 518.916,780.069 519.475,795.354 520.035,823.894 520.594,881.508 521.153,842.195 521.712,818.812 522.272,810.898 522.831,819.878 523.39,781.512 523.949,796.966 524.509,827.108 525.068,810.344 525.627,826.502 526.186,820.667 526.746,782.333 527.305,811.189 527.864,824.433 528.423,835.897 528.983,834.367 529.542,862.817 530.101,841.356 530.66,852.251 531.22,850.302 531.779,861.695 532.338,837.738 532.897,802.006 533.457,784.112 534.016,745.694 534.575,727.091 535.134,727.598 535.694,725.533 536.253,755.214 536.812,771.651 537.371,785.873 537.931,766.438 538.49,781.095 539.049,777.828 539.608,790.077 540.168,800.452 540.727,797.278 541.286,758.872 541.845,758.21 542.405,752.342 542.964,799.236 543.523,742.631 544.082,706.891 544.642,676.691 545.201,692.372 545.76,691.313 546.319,690.512 546.879,706.206 547.438,738.258 547.997,700.851 548.556,666.979 549.116,669.506 549.675,639.399 550.234,672.439 550.793,689.81 551.353,707.684 551.912,692.046 552.471,724.363 553.031,724.153 553.59,741.287 554.149,756.402 554.708,754.129 555.268,748.893 555.827,713.411 556.386,709.254 556.945,725.139 557.505,694.624 558.064,709.129 558.623,723.014 559.182,707.238 559.742,721.223 560.301,702.041 560.86,735.721 561.419,750.7 561.979,746.488 562.538,746.515 563.097,747.46 563.656,749.648 564.216,731.755 564.775,717.662 565.334,685.283 565.893,671.312 566.453,689.486 567.012,673.531 567.571,661.41 568.13,664.01 568.69,653.207 569.249,643.431 569.808,666.429 570.367,605.638 570.927,610.429 571.486,631.522 572.045,621.466 572.604,644.128 573.164,611.775 573.723,601.027 574.282,607.774 574.841,596.799 575.401,592.07 575.96,599.328 576.519,622.132 577.078,626.902 577.638,633.415 578.197,639.971 578.756,641.815 579.315,676.611 579.875,681.416 580.434,665.404 580.993,670.706 581.552,642.398 582.112,644.345 582.671,635.206 583.23,644.454 583.789,644.953 584.349,649.339 584.908,670.228 585.467,669.308 586.026,720.671 586.586,685.543 587.145,688.985 587.704,691.003 588.263,723.502 588.823,712.032 589.382,680.204 589.941,701.354 590.5,683.545 591.06,702.398 591.619,720.262 592.178,737.338 592.737,752.313 593.297,736.007 593.856,714.118 594.415,728.541 594.974,727.919 595.534,742.31 596.093,755.399 596.652,763.699 597.211,761.06 597.771,760.578 598.33,758.314 598.889,775.202 599.448,805.608 600.008,783.524 600.567,763.432 601.126,778.608 601.685,774.346 602.245,770.355 602.804,781.645 603.363,795.091 603.922,786.316 604.482,780.441 605.041,823.993 605.6,817.847 606.159,831.243 606.719,793.915 607.278,757.777 607.837,756.251 608.396,769.536 608.956,781.964 609.515,760.64 610.074,728.831 610.633,746.177 611.193,724.456 611.752,674.504 612.311,690.253 612.87,721.558 613.43,669.958 613.989,671.134 614.548,702.471 615.107,721.408 615.667,717.936 616.226,719.214 616.785,717.625 617.344,732.678 617.904,716.026 618.463,697.774 619.022,699.704 619.581,682.11 620.141,699.621 620.7,699.826 621.259,667.623 621.818,654.938 622.378,654.773 622.937,622.475 623.496,629.151 624.055,619.507 624.615,590.75 625.174,614.026 625.733,649.49 626.292,638.603 626.852,644.941 627.411,679.411 627.97,697.844 628.529,702.749 629.089,706.048 629.648,691.255 630.207,710.091 630.766,711.807 631.326,708.216 631.885,709.054 632.444,724.646 633.003,740.878 633.563,787.784 634.122,801.637 634.681,795.21 635.24,759.566 635.8,691.035 636.359,688.522 636.918,673.574 637.477,691.582 638.037,710.94 638.596,725.175 639.155,756.014 639.714,784.307 640.274,800.977 640.833,813.889 641.392,774.121 641.951,755.261 642.511,753.145 643.07,749.993 643.629,763.342 644.188,741.927 644.748,790.25 645.307,768.589 645.866,748.457 646.425,760.15 646.985,741.274 647.544,706.66 648.103,707.038 648.662,686.653 649.222,687.056 649.781,686.789 650.34,722.801 650.899,737.909 651.459,753.902 652.018,731.274 652.577,713.491 653.136,697.084 653.696,695.623 654.255,745.318 654.814,725.237 655.373,711.98 655.933,694.48 656.492,694.559 657.051,693.937 657.61,658.032 658.17,693.291 658.729,695.393 659.288,709.669 659.847,709.276 660.407,677.292 660.966,695.072 661.525,713.627 662.084,725.468 662.644,739.15 663.203,687.639 663.762,671.603 664.321,673.231 664.881,642.793 665.44,647.291 665.999,666.676 666.558,670.524 667.118,673.966 667.677,662.118 668.236,665.107 668.795,681.22 669.355,681.02 669.914,667.494 670.473,673.138 671.032,690.66 671.592,727.813 672.151,745.176 672.71,743.342 673.269,757.343 673.829,738.103 674.388,721.676 674.947,718.636 675.506,683.461 676.066,713.213 676.625,711.626 677.184,731.42 677.743,745.513 678.303,772.851 678.862,783.722 679.421,815.085 679.981,810.818 680.54,820.424 681.099,780.797 681.658,760.435 682.218,741.235 682.777,750.041 683.336,746.388 683.895,791.368 684.455,802.617 685.014,813.195 685.573,802.306 686.132,808.381 686.692,800.125 687.251,794.709 687.81,789.308 688.369,766.44 688.929,778.942 689.488,776.769 690.047,805.619 690.606,799.848 691.166,763.5 691.725,795.956 692.284,774.109 692.843,752.61 693.403,733.566 693.962,718.84 694.521,718.742 695.08,732.108 695.64,730.318 696.199,713.459 696.758,728.549 697.317,728.153 697.877,744.051 698.436,709.969 698.995,690.373 699.554,661.203 700.114,659.866 700.673,660.213 701.232,648.561 701.791,665.191 702.351,667.987 702.91,650.191 703.469,698.173 704.028,699.486 704.588,667.306 705.147,668.657 705.706,669.112 706.265,673.137 706.825,620.442 707.384,626.094 707.943,596.192 708.502,585.426 709.062,587.287 709.621,609.564 710.18,616.378 710.739,635.102 711.299,621.859 711.858,625.087 712.417,644.255 712.976,615.534 713.536,637.255 714.095,673.578 714.654,611.342 715.213,618.067 715.773,636.297 716.332,692.41 716.891,707 717.45,675.19 718.01,660.213 718.569,679.41 719.128,693.685 719.687,673.085 720.247,673.856 720.806,690.831 721.365,721.665 721.924,721.354 722.484,717.207 723.043,732.466 723.602,698.971 724.161,716.21 724.721,681.412 725.28,683.192 725.839,636.101 726.398,686.376 726.958,685.715 727.517,691.287 728.076,706.432 728.635,693.561 729.195,710.479 729.754,692.859 730.313,720.526 730.872,750.699 731.432,712.807 731.991,680.659 732.55,699.019 733.109,742.828 733.669,738.264 734.228,736.434 734.787,748.074 735.346,730.961 735.906,758.951 736.465,737.459 737.024,752.415 737.583,750.11 738.143,750.34 738.702,757.759 739.261,740.425 739.82,721.698 740.38,703.759 740.939,685.384 741.498,704.627 742.057,653.449 742.617,671.348 743.176,655.497 743.735,625.581 744.294,640.648 744.854,658.372 745.413,641.109 745.972,643.413 746.531,612.252 747.091,630.032 747.65,663.856 748.209,664.75 748.768,668.375 749.328,653.589 749.887,673.519 750.446,679.497 751.005,730.427 751.565,725.776 752.124,724.713 752.683,704.138 753.242,685.858 753.802,699.166 754.361,715.339 754.92,711.912 755.479,659.612 756.039,629.754 756.598,633.98 757.157,671.343 757.716,688.116 758.276,700.328 758.835,666.362 759.394,615.744 759.953,603.385 760.513,591.059 761.072,593.559 761.631,596.939 762.19,601.1 762.75,621.188 763.309,630.564 763.868,636.877 764.427,625.494 764.987,610.546 765.546,629.932 766.105,667.691 766.664,653.803 767.224,655.775 767.783,657.407 768.342,674.186 768.901,708.114 769.461,721.011 770.02,734.628 770.579,716.567 771.138,716.335 771.698,730.14 772.257,745.011 772.816,708.946 773.375,708.819 773.935,758.422 774.494,724.706 775.053,708.776 775.612,692.633 776.172,678.898 776.731,698.681 777.29,649.681 777.849,667.816 778.409,655.673 778.968,657.995 779.527,691.616 780.086,674.915 780.646,661.065 781.205,661.215 781.764,677.743 782.323,646.98 782.883,616.328 783.442,635.319 784.001,670.196 784.56,657.448 785.12,625.919 785.679,612.433 786.238,636.428 786.797,624.972 787.357,645.093 787.916,698.868 788.475,684.758 789.034,703.306 789.594,734.324 790.153,728.979 790.712,760.299 791.271,741.439 791.831,726.641 792.39,693.501 792.949,692.449 793.508,709.618 794.068,689.669 794.627,706.044 795.186,686.736 795.745,703.052 796.305,730.395 796.864,679.934 797.423,661.525 797.982,682.917 798.542,667.945 799.101,671.725 799.66,707.103 800.219,672.032 800.779,689.917 801.338,679.182 801.897,715.92 802.456,733.753 803.016,739.258 803.575,753.904 804.134,766.203 804.693,765.136 805.253,759.225 805.812,773.8 806.371,718.753 806.931,715.257 807.49,716.963 808.049,702.587 808.608,702.807 809.168,700.126 809.727,684.532 810.286,683.97 810.845,668.824 811.405,683.804 811.964,685.834 812.523,698.144 813.082,715.807 813.642,717.74 814.201,666.643 814.76,664.65 815.319,712.01 815.879,711.63 816.438,712.428 816.997,673.482 817.556,689.721 818.116,689.335 818.675,701.754 819.234,718.949 819.793,715.286 820.353,728.073 820.912,742.396 821.471,705.642 822.03,753.141 822.59,781.692 823.149,791.169 823.708,767.077 824.267,778.782 824.827,757.259 825.386,753.836 825.945,747.86 826.504,729.057 827.064,709.182 827.623,721.32 828.182,685.59 828.741,701.953 829.301,684.994 829.86,653.376 830.419,657.68 830.978,640.331 831.538,673.354 832.097,706.281 832.656,706.046 833.215,722.291 833.775,688.534 834.334,741.259 834.893,738.545 835.452,751.426 836.012,762.193 836.571,743.945 837.13,724.049 837.689,720.878 838.249,704.44 838.808,719.726 839.367,686.345 839.926,684.391 840.486,667.066 841.045,655.23 841.604,643.678 842.163,661.97 842.723,663.599 843.282,667.609 843.841,699.491 844.4,649.211 844.96,666.98 845.519,655.16 846.078,722.352 846.637,718.341 847.197,694.406 847.756,677.569 848.315,664.718 848.874,631.225 849.434,601.162 849.993,622.795 850.552,659.728 851.111,678.057 851.671,694.18 852.23,712.341 852.789,726.575 853.348,689.868 853.908,707.481 854.467,738.62 855.026,722.632 855.585,724.344 856.145,769.091 856.704,764.722 857.263,760.863 857.822,739.839 858.382,718.46 858.941,700.494 859.5,683.894 860.059,699.679 860.619,684.413 861.178,683.361 861.737,666.373 862.296,652.196 862.856,652.486 863.415,636.852 863.974,640.215 864.533,643.819 865.093,613.656 865.652,619.518 866.211,607.306 866.77,593.761 867.33,615.887 867.889,621.45 868.448,639.009 869.007,627.414 869.567,629.464 870.126,652.122 870.685,685.432 871.244,716.559 871.804,679.388 872.363,677.961 872.922,711.019 873.481,710.038 874.041,726.238 874.6,757.792 875.159,736.189 875.718,730.809 876.278,729.601 876.837,696.62 877.396,728.379 877.955,727.099 878.515,707.133 879.074,738.32 879.633,753.226 880.192,749.815 880.752,777.573 881.311,725.888 881.87,742.687 882.429,755.977 882.989,733.894 883.548,699.746 884.107,748.674 884.666,764.499 885.226,762.125 885.785,739.498 886.344,752.342 886.903,733.803 887.463,728.157 888.022,728.002 888.581,725.049 889.14,720.631 889.7,698.893 890.259,681.714 890.818,649.114 891.377,665.511 891.937,680.766 892.496,678.533 893.055,694.557 893.614,678.729 894.174,680.642 894.733,662.649 895.292,664.743 895.851,665.59 896.411,601.178 896.97,608.299 897.529,596.073 898.088,614.968 898.648,602.712 899.207,605.303 899.766,578.068 900.325,586.331 900.885,576.905 901.444,566.389 902.003,555.67 902.562,578.905 903.122,605.072 903.681,628.071 904.24,598.369 904.799,603.825 905.359,611.11 905.918,617.199 906.477,637.26 907.036,641.033 907.596,609.938 908.155,610.886 908.714,646.734 909.273,633.188 909.833,638.555 910.392,657.655 910.951,659.507 911.51,643.964 912.07,649.699 912.629,655.564 913.188,675.052 913.747,642.56 914.307,629.595 914.866,648.694 915.425,665.869 915.984,680.675 916.544,679.754 917.103,700.711 917.662,698.386 918.221,694.048 918.781,707.476 919.34,706.951 919.899,738.522 920.458,704.275 921.018,720.397 921.577,782.91 922.136,762.169 922.695,775.793 923.255,786.657 923.814,763.659 924.373,754.651 924.932,766.082 925.492,790.818 926.051,751.911 926.61,735.057 927.169,718.719 927.729,702.25 928.288,668.787 928.847,648.793 929.406,651.98 929.966,647.675 930.525,649.249 931.084,636.147 931.644,649.889 932.203,668.022 932.762,671.111 933.321,671.975 933.881,671.221 934.44,719.146 934.999,729.178 935.558,742.998 936.118,740.971 936.677,736.423 937.236,733.595 937.795,747.872 938.355,747.009 938.914,777.909 939.473,822.072 940.032,801.357 940.592,749.772 941.151,758.191 941.71,738.688 942.269,737.008 942.829,749.551 943.388,745.321 943.947,713.664 944.506,710.827 945.066,726.256 945.625,760.647 946.184,791.391 946.743,831.616 947.303,824.538 947.862,803.49 948.421,765.951 948.98,728.571 949.54,727.994 950.099,730.544 950.658,743.519 951.217,726.599 951.777,740.799 952.336,706.513 952.895,691.515 953.454,675.585 954.014,675.934 954.573,659.99 955.132,626.843 955.691,645.433 956.251,628.499 956.81,632.403 957.369,619.629 957.928,588.985 958.488,559.416 959.047,550.375 959.606,528.439 960.165,523.918 960.725,513.666 961.284,505.386 961.843,516.816 962.402,526.393 962.962,534.015 963.521,558.102 964.08,562.427 964.639,570.433 965.199,577.789 965.758,599.763 966.317,606.223 966.876,627.377 967.436,613.306 967.995,617.863 968.554,602.882 969.113,638.359 969.673,658.544 970.232,692.111 970.791,690.282 971.35,705.711 971.91,658.567 972.469,660.43 973.028,664.175 973.587,666.837 974.147,685.589 974.706,652.606 975.265,638.863 975.824,628.121 976.384,647.991 976.943,633.178 977.502,617.974 978.061,606.785 978.621,663.739 979.18,679.632 979.739,694.867 980.298,695.547 980.858,696.139 981.417,679.498 981.976,713.452 982.535,695.801 983.095,724.717 983.654,689.894 984.213,703.985 984.772,699.896 985.332,701.302 985.891,713.652 986.45,709.972 987.009,690.965 987.569,689.515 988.128,677.101 988.687,691.457 989.246,706.548 989.806,723.23 990.365,721.044 990.924,736.363 991.483,738.417 992.043,734.881 992.602,730.492 993.161,696.811 993.72,747.335 994.28,741.568 994.839,723.259 995.398,738.8 995.957,738.923 996.517,750.969 997.076,731.192 997.635,729.951 998.194,726.024 998.754,723.608 999.313,721.625 999.872,718.325 1000.43,695.841 1000.99,677.278 1001.55,690.633 1002.11,676.381 1002.67,690.635 1003.23,675.03 1003.79,691.113 1004.35,688.171 1004.91,670.643 1005.46,666.531 1006.02,663.832 1006.58,664.881 1007.14,638.694 1007.7,642.052 1008.26,644.509 1008.82,648.264 1009.38,651.1 1009.94,700.578 1010.5,700.713 1011.06,733.484 1011.62,735.263 1012.18,747.809 1012.73,715.728 1013.29,712.141 1013.85,713.57 1014.41,742.64 1014.97,739.738 1015.53,721.276 1016.09,719.16 1016.65,700.918 1017.21,683.755 1017.77,696.35 1018.33,694.103 1018.89,726.695 1019.45,723.212 1020.01,719.799 1020.56,684.522 1021.12,651.08 1021.68,633.293 1022.24,636.381 1022.8,651.542 1023.36,654.288 1023.92,624.667 1024.48,659.795 1025.04,645.767 1025.6,630.332 1026.16,635.061 1026.72,669.07 1027.28,684.861 1027.83,705.396 1028.39,689.699 1028.95,687.672 1029.51,687.441 1030.07,684.726 1030.63,652.19 1031.19,676.395 1031.75,646.988 1032.31,631.696 1032.87,619.725 1033.43,643.073 1033.99,664.192 1034.55,652.159 1035.1,637.392 1035.66,638.62 1036.22,659.015 1036.78,648.357 1037.34,666.862 1037.9,663.397 1038.46,695.604 1039.02,694.096 1039.58,726.698 1040.14,709.191 1040.7,677.146 1041.26,646.859 1041.82,632.795 1042.38,687.107 1042.93,685.311 1043.49,683.857 1044.05,681.963 1044.61,695.859 1045.17,696.8 1045.73,663.171 1046.29,661.28 1046.85,695.593 1047.41,695.234 1047.97,678.224 1048.53,724.964 1049.09,720.356 1049.65,721.14 1050.2,736.678 1050.76,733.352 1051.32,719.365 1051.88,704.594 1052.44,703.678 1053,720.232 1053.56,720.223 1054.12,670.114 1054.68,705.752 1055.24,693.602 1055.8,711.399 1056.36,711.884 1056.92,692.155 1057.48,659.835 1058.03,662.555 1058.59,679.73 1059.15,699.391 1059.71,698.403 1060.27,698.967 1060.83,664.207 1061.39,697.35 1061.95,696.742 1062.51,712.646 1063.07,711.366 1063.63,724.887 1064.19,722.178 1064.75,735.502 1065.3,733.868 1065.86,730.085 1066.42,742.654 1066.98,724.588 1067.54,756.393 1068.1,769.559 1068.66,730.562 1069.22,728.724 1069.78,726.955 1070.34,739.602 1070.9,686.939 1071.46,671.154 1072.02,654.033 1072.57,638.912 1073.13,624.096 1073.69,595.411 1074.25,599.645 1074.81,601.478 1075.37,604.244 1075.93,578.476 1076.49,587.07 1077.05,593.1 1077.61,565.027 1078.17,539.621 1078.73,580.438 1079.29,574.803 1079.85,596.593 1080.4,588.56 1080.96,624.637 1081.52,612.495 1082.08,647.266 1082.64,648.424 1083.2,633.96 1083.76,638.962 1084.32,655.855 1084.88,671.254 1085.44,687.18 1086,686.427 1086.56,706.046 1087.12,686.836 1087.67,684.394 1088.23,716.5 1088.79,716.847 1089.35,713.171 1089.91,679.478 1090.47,696.277 1091.03,694.095 1091.59,711.567 1092.15,712.169 1092.71,694.7 1093.27,706.864 1093.83,690.385 1094.39,705.35 1094.94,702.621 1095.5,723.73 1096.06,736.036 1096.62,735.134 1097.18,733.73 1097.74,698.982 1098.3,715.604 1098.86,682.044 1099.42,663.511 1099.98,647.094 1100.54,678.723 1101.1,660.172 1101.66,712.707 1102.22,728.177 1102.77,747.561 1103.33,711.54 1103.89,713.871 1104.45,698.865 1105.01,710.574 1105.57,708.398 1106.13,689.822 1106.69,655.043 1107.25,622.536 1107.81,624.507 1108.37,631.109 1108.93,619.776 1109.49,592.922 1110.04,585.146 1110.6,592.489 1111.16,593.485 1111.72,629.254 1112.28,680.161 1112.84,701.988 1113.4,704.657 1113.96,716.42 1114.52,715.206 1115.08,708.721 1115.64,691.744 1116.2,689.619 1116.76,704.892 1117.31,657.82 1117.87,676.387 1118.43,674.374 1118.99,657.695 1119.55,689.582 1120.11,673.916 1120.67,641.429 1121.23,658.662 1121.79,640.418 1122.35,639.47 1122.91,669.753 1123.47,684.727 1124.03,682.187 1124.59,666.157 1125.14,714.518 1125.7,732.029 1126.26,730.669 1126.82,728.803 1127.38,694.944 1127.94,662.803 1128.5,659.761 1129.06,611.264 1129.62,582.601 1130.18,604.489 1130.74,640.085 1131.3,642.18 1131.86,659.863 1132.41,612.345 1132.97,648.39 1133.53,631.492 1134.09,616.665 1134.65,619.476 1135.21,669.791 1135.77,689.364 1136.33,707.34 1136.89,708.358 1137.45,736.692 1138.01,720.169 1138.57,734.748 1139.13,761.094 1139.68,756.546 1140.24,737.833 1140.8,700.213 1141.36,680.733 1141.92,711.377 1142.48,723.753 1143.04,722.536 1143.6,738.436 1144.16,729.925 1144.72,726.694 1145.28,740.295 1145.84,709.221 1146.4,722.2 1146.96,720.434 1147.51,717.909 1148.07,701.767 1148.63,688.592 1149.19,673.726 1149.75,691.751 1150.31,688.163 1150.87,655.957 1151.43,656.545 1151.99,623.027 1152.55,647.068 1153.11,682.506 1153.67,697.141 1154.23,678.868 1154.78,646.9 1155.34,649.028 1155.9,683.65 1156.46,653.411 1157.02,687.66 1157.58,702.931 1158.14,714.537 1158.7,742.757 1159.26,675.471 1159.82,674.682 1160.38,691.226 1160.94,689.548 1161.5,676.596 1162.05,646.172 1162.61,681.054 1163.17,683.495 1163.73,666.802 1164.29,683.478 1164.85,668.624 1165.41,652.331 1165.97,669.352 1166.53,748.701 1167.09,749.259 1167.65,713.378 1168.21,710.54 1168.77,773.002 1169.33,787.207 1169.88,781.688 1170.44,764.387 1171,744.721 1171.56,758.368 1172.12,737.13 1172.68,730.574 1173.24,712.406 1173.8,694.969 1174.36,709.37 1174.92,706.165 1175.48,718.265 1176.04,718.322 1176.6,717.939 1177.15,731.035 1177.71,728.936 1178.27,725.34 1178.83,724.586 1179.39,705.336 1179.95,703.505 1180.51,705.681 1181.07,718.683 1181.63,749.89 1182.19,729.289 1182.75,711.186 1183.31,711.327 1183.87,760.101 1184.43,738.169 1184.98,723.051 1185.54,754.428 1186.1,685.982 1186.66,685.672 1187.22,698.842 1187.78,698.302 1188.34,681.47 1188.9,651.32 1189.46,701.834 1190.02,690.689 1190.58,709.068 1191.14,710.968 1191.7,705.739 1192.25,687.588 1192.81,689.031 1193.37,706.69 1193.93,705.569 1194.49,719.471 1195.05,698.919 1195.61,666.717 1196.17,650.259 1196.73,651.361 1197.29,652.729 1197.85,657.025 1198.41,659.059 1198.97,643.091 1199.52,630.485 1200.08,613.367 1200.64,616.621 1201.2,591.841 1201.76,614.733 1202.32,636.353 1202.88,636.856 1203.44,641.281 1204,642.154 1204.56,644.451 1205.12,644.633 1205.68,623.474 1206.24,628.845 1206.8,615.811 1207.35,619.627 1207.91,606.176 1208.47,611.218 1209.03,600.615 1209.59,621.228 1210.15,622.867 1210.71,629.085 1211.27,632.766 1211.83,632.506 1212.39,654.283 1212.95,637.825 1213.51,639.692 1214.07,624.655 1214.62,626.354 1215.18,662.075 1215.74,676.417 1216.3,710.043 1216.86,725.233 1217.42,725.259 1217.98,689.686 1218.54,708.844 1219.1,741.582 1219.66,754.01 1220.22,766.952 1220.78,778.775 1221.34,789.51 1221.89,766.092 1222.45,765.76 1223.01,765.031 1223.57,759.703 1224.13,725.13 1224.69,722.612 1225.25,704.104 1225.81,669.861 1226.37,670.077 1226.93,652.138 1227.49,636.355 1228.05,639.685 1228.61,627.027 1229.17,615.868 1229.72,620.657 1230.28,624.804 1230.84,662.087 1231.4,662.542 1231.96,646.517 1232.52,629.074 1233.08,613.427 1233.64,616.66 1234.2,635.299 1234.76,653.51 1235.32,702.47 1235.88,736.303 1236.44,735.907 1236.99,750.662 1237.55,749.428 1238.11,764.68 1238.67,775.701 1239.23,764.724 1239.79,758.66 1240.35,737.687 1240.91,751.27 1241.47,745.23 1242.03,740.493 1242.59,738.418 1243.15,750.996 1243.71,700.849 1244.26,733.015 1244.82,730.431 1245.38,694.547 1245.94,693.38 1246.5,728.708 1247.06,712.123 1247.62,744.845 1248.18,756.417 1248.74,702.406 1249.3,699.394 1249.86,698.949 1250.42,711.462 1250.98,707.112 1251.54,688.142 1252.09,690.069 1252.65,675.776 1253.21,664.234 1253.77,634.488 1254.33,639.35 1254.89,624.219 1255.45,641.944 1256.01,642.824 1256.57,612.043 1257.13,649.06 1257.69,651.973 1258.25,619.582 1258.81,641.091 1259.36,612.131 1259.92,617.531 1260.48,625.108 1261.04,630.462 1261.6,651.616 1262.16,652.097 1262.72,655.45 1263.28,644.535 1263.84,662.232 1264.4,664.5 1264.96,665.711 1265.52,752.517 1266.08,754.85 1266.63,736.903 1267.19,682.826 1267.75,730.505 1268.31,745.159 1268.87,726.213 1269.43,752.96 1269.99,702.652 1270.55,700.866 1271.11,686.785 1271.67,684.847 1272.23,718.682 1272.79,731.101 1273.35,680.365 1273.91,663.376 1274.46,651.358 1275.02,681.009 1275.58,652.855 1276.14,649.464 1276.7,647.666 1277.26,696.885 1277.82,694.217 1278.38,707.496 1278.94,690.219 1279.5,704.589 1280.06,735.323 1280.62,728.319 1281.18,727.754 1281.73,724.614 1282.29,718.841 1282.85,717.915 1283.41,735.609 1283.97,747.626 1284.53,724.89 1285.09,724.979 1285.65,672.128 1286.21,689.68 1286.77,676.896 1287.33,690.589 1287.89,690.272 1288.45,686.816 1289,686.274 1289.56,687.121 1290.12,672.686 1290.68,670.012 1291.24,668.193 1291.8,716.329 1292.36,676.193 1292.92,678.744 1293.48,680.414 1294.04,696.219 1294.6,664.121 1295.16,679.419 1295.72,697.369 1296.28,680.061 1296.83,665.327 1297.39,666.949 1297.95,636.826 1298.51,638.791 1299.07,641.675 1299.63,645.029 1300.19,649.759 1300.75,651.38 1301.31,651.001 1301.87,671.754 1302.43,672.181 1302.99,672.469 1303.55,721.774 1304.1,765.355 1304.66,759.159 1305.22,756.103 1305.78,768.378 1306.34,795.514 1306.9,805.71 1307.46,764.207 1308.02,776.084 1308.58,805.323 1309.14,797 1309.7,795.649 1310.26,758.54 1310.82,784.558 1311.38,763.293 1311.93,744.405 1312.49,758.995 1313.05,774.053 1313.61,785.368 1314.17,794.168 1314.73,773.877 1315.29,770.648 1315.85,783.501 1316.41,794.205 1316.97,786.722 1317.53,765.901 1318.09,775.577 1318.65,754.405 1319.2,700.092 1319.76,714.816 1320.32,726.512 1320.88,722.25 1321.44,687.474 1322,651.885 1322.56,666.305 1323.12,646.111 1323.68,660.879 1324.24,674.736 1324.8,655.147 1325.36,671.508 1325.92,690.954 1326.47,688.906 1327.03,670.019 1327.59,668.477 1328.15,687.466 1328.71,688.056 1329.27,688.248 1329.83,674.889 1330.39,672.54 1330.95,690.952 1331.51,657.856 1332.07,656.523 1332.63,643.917 1333.19,661.352 1333.75,631.519 1334.3,650.418 1334.86,635.051 1335.42,606.041 1335.98,609.836 1336.54,617.252 1337.1,638.002 1337.66,669.851 1338.22,666.836 1338.78,683.418 1339.34,697.618 1339.9,730.526 1340.46,715.397 1341.02,696.037 1341.57,693.737 1342.13,678.396 1342.69,694.282 1343.25,680.135 1343.81,714.485 1344.37,662.388 1344.93,650.358 1345.49,687.777 1346.05,687.097 1346.61,673.68 1347.17,659.632 1347.73,663.293 1348.29,665.297 1348.84,665.862 1349.4,584.281 1349.96,605.022 1350.52,624.67 1351.08,646.065 1351.64,599.398 1352.2,607.245 1352.76,580.653 1353.32,589.093 1353.88,577.725 1354.44,567.628 1355,542.914 1355.56,564.147 1356.12,587.068 1356.67,592.246 1357.23,601.547 1357.79,624.169 1358.35,625.239 1358.91,630.477 1359.47,617.055 1360.03,633.092 1360.59,667.193 1361.15,699.716 1361.71,699.414 1362.27,702.92 1362.83,718.718 1363.39,734.345 1363.94,762.327 1364.5,741.628 1365.06,723.21 1365.62,704.799 1366.18,688.966 1366.74,702.823 1367.3,687.492 1367.86,687.794 1368.42,659.035 1368.98,645.377 1369.54,678.854 1370.1,681.058 1370.66,648.401 1371.21,633.823 1371.77,666.896 1372.33,648.78 1372.89,652.338 1373.45,620.646 1374.01,640.701 1374.57,593.517 1375.13,600.895 1375.69,591.07 1376.25,593.47 1376.81,612.407 1377.37,579.72 1377.93,586.947 1378.49,589.446 1379.04,589.85 1379.6,641.574 1380.16,613.302 1380.72,585.823 1381.28,588.561 1381.84,608.781 1382.4,613.954 1382.96,651.356 1383.52,636.778 1384.08,619.368 1384.64,684.716 1385.2,686.499 1385.76,667.553 1386.31,700.499 1386.87,655.079 1387.43,657.19 1387.99,641.982 1388.55,626.419 1389.11,625.354 1389.67,595.7 1390.23,615.337 1390.79,631.419 1391.35,649.587 1391.91,632.416 1392.47,632.42 1393.03,634.459 1393.58,638.888 1394.14,670.318 1394.7,683.668 1395.26,668.806 1395.82,717.997 1396.38,714.509 1396.94,743.702 1397.5,740.238 1398.06,721.337 1398.62,686.533 1399.18,685.969 1399.74,667.026 1400.3,667.636 1400.86,636.277 1401.41,639.471 1401.97,660.025 1402.53,661.246 1403.09,679.373 1403.65,681.575 1404.21,685.922 1404.77,652.583 1405.33,672.02 1405.89,671.756 1406.45,688.076 1407.01,703.657 1407.57,637.13 1408.13,641.315 1408.68,644.67 1409.24,645.994 1409.8,666.285 1410.36,663.036 1410.92,678.427 1411.48,677.361 1412.04,690.316 1412.6,707.686 1413.16,703.928 1413.72,704.65 1414.28,706.768 1414.84,721.279 1415.4,736.152 1415.95,703.821 1416.51,699.022 1417.07,682.211 1417.63,731.735 1418.19,715.085 1418.75,712.593 1419.31,696.518 1419.87,661.788 1420.43,678.33 1420.99,680.368 1421.55,714.118 1422.11,696.21 1422.67,713.141 1423.23,714.409 1423.78,730.627 1424.34,729.443 1424.9,744.408 1425.46,769.106 1426.02,716.199 1426.58,696.542 1427.14,711.762 1427.7,694.968 1428.26,691.565 1428.82,688.482 1429.38,702.323 1429.94,733.493 1430.5,714.414 1431.05,729.497 1431.61,724.304 1432.17,707.717 1432.73,736.476 1433.29,701.205 1433.85,682.584 1434.41,667.639 1434.97,686.813 1435.53,691.113 1436.09,723.08 1436.65,738.563 1437.21,702.667 1437.77,700.573 1438.33,700.05 1438.88,697.197 1439.44,712.841 1440,678.382 1440.56,696.663 1441.12,680.509 1441.68,679.255 1442.24,662.565 1442.8,647.498 1443.36,635.021 1443.92,652.657 1444.48,637.435 1445.04,638.137 1445.6,624.168 1446.15,626.279 1446.71,645.429 1447.27,646.664 1447.83,648.75 1448.39,687.054 1448.95,689.528 1449.51,693.92 1450.07,676.049 1450.63,692.856 1451.19,675.44 1451.75,658.582 1452.31,691.784 1452.87,659.48 1453.42,693.708 1453.98,660.839 1454.54,647.762 1455.1,633.809 1455.66,623.34 1456.22,626.602 1456.78,613.045 1457.34,601.544 1457.9,621.753 1458.46,639.539 1459.02,626.147 1459.58,614.176 1460.14,617.739 1460.7,621.844 1461.25,624.67 1461.81,624.485 1462.37,629.844 1462.93,617.495 1463.49,606.371 1464.05,609.178 1464.61,629.135 1465.17,631.144 1465.73,601.711 1466.29,602.713 1466.85,623.15 1467.41,642.68 1467.97,646.495 1468.52,665.021 1469.08,666.356 1469.64,665.624 1470.2,664.739 1470.76,684.378 1471.32,670.914 1471.88,656.53 1472.44,624.533 1473,624.033 1473.56,607.218 1474.12,610.197 1474.68,614.21 1475.24,631.262 1475.79,680.446 1476.35,711.414 1476.91,713.034 1477.47,713.019 1478.03,713.582 1478.59,697.793 1479.15,695.332 1479.71,726.924 1480.27,755.236 1480.83,781.04 1481.39,773.438 1481.95,783.405 1482.51,779.711 1483.07,758.124 1483.62,755.223 1484.18,748.843 1484.74,746.442 1485.3,788.189 1485.86,797.337 1486.42,792.066 1486.98,786.797 1487.54,783.176 1488.1,758.645 1488.66,736.581 1489.22,732.854 1489.78,715.994 1490.34,679.59 1490.89,759.757 1491.45,739.73 1492.01,737.658 1492.57,733.904 1493.13,699.493 1493.69,696.599 1494.25,695.753 1494.81,723.557 1495.37,717.059 1495.93,728.066 1496.49,708.545 1497.05,709.788 1497.61,713.298 1498.16,725.544 1498.72,708.185 1499.28,739.494 1499.84,722.576 1500.4,734.828 1500.96,728.722 1501.52,713.579 1502.08,727.645 1502.64,727.996 1503.2,710.279 1503.76,694.671 1504.32,676.088 1504.88,643.874 1505.44,679.329 1505.99,697.038 1506.55,674.3 1507.11,660.062 1507.67,679.32 1508.23,630.935 1508.79,616.245 1509.35,635.281 1509.91,621.699 1510.47,643.542 1511.03,678.378 1511.59,676.248 1512.15,697.589 1512.71,681.494 1513.26,681.093 1513.82,712.486 1514.38,726.204 1514.94,724.199 1515.5,706.317 1516.06,719.685 1516.62,734.907 1517.18,717.485 1517.74,732.124 1518.3,715.297 1518.86,727.002 1519.42,741.588 1519.98,723.867 1520.53,727.448 1521.09,711.008 1521.65,710.21 1522.21,708.537 1522.77,712.029 1523.33,728.093 1523.89,736.744 1524.45,747.679 1525.01,742.344 1525.57,725.598 1526.13,721.247 1526.69,722.352 1527.25,718.94 1527.81,717.73 1528.36,683.179 1528.92,648.37 1529.48,649.691 1530.04,636.048 1530.6,669.404 1531.16,652.705 1531.72,653.46 1532.28,624.948 1532.84,663.777 1533.4,682.649 1533.96,697.254 1534.52,710.122 1535.08,710.145 1535.63,706.69 1536.19,688.699 1536.75,706.602 1537.31,692.574 1537.87,721.382 1538.43,685.269 1538.99,714.47 1539.55,698.739 1540.11,733.981 1540.67,733.886 1541.23,699.731 1541.79,668.202 1542.35,654.968 1542.9,672.111 1543.46,670.925 1544.02,686.778 1544.58,687.138 1545.14,670.736 1545.7,655.752 1546.26,659.004 1546.82,614.491 1547.38,634.861 1547.94,621.399 1548.5,625.335 1549.06,643.801 1549.62,613.221 1550.18,616.877 1550.73,638.536 1551.29,590.14 1551.85,563.412 1552.41,570.519 1552.97,543.955 1553.53,548.587 1554.09,574.193 1554.65,628.041 1555.21,648.084 1555.77,632.446 1556.33,655.246 1556.89,658.727 1557.45,661.441 1558,666.741 1558.56,713.475 1559.12,712.494 1559.68,708.057 1560.24,694.886 1560.8,695.973 1561.36,648.738 1561.92,649.201 1562.48,668.41 1563.04,653.375 1563.6,653.725 1564.16,671.521 1564.72,684.786 1565.28,713.841 1565.83,726.298 1566.39,737.739 1566.95,702.916 1567.51,686.905 1568.07,701.75 1568.63,716.529 1569.19,711.259 1569.75,709.656 1570.31,688.69 1570.87,686.586 1571.43,669.661 1571.99,688.216 1572.55,704.909 1573.1,703.429 1573.66,768.394 1574.22,797.346 1574.78,789.939 1575.34,799.419 1575.9,811.158 1576.46,769.71 1577.02,716.167 1577.58,761.511 1578.14,744.158 1578.7,742.196 1579.26,737.719 1579.82,703.348 1580.37,717.464 1580.93,733.11 1581.49,730.291 1582.05,729.29 1582.61,694.972 1583.17,681.138 1583.73,681.072 1584.29,650.488 1584.85,652.065 1585.41,672.067 1585.97,654.896 1586.53,670.401 1587.09,675.251 1587.65,676.618 1588.2,698.739 1588.76,713.991 1589.32,712.714 1589.88,727.272 1590.44,693.887 1591,726.634 1591.56,741.958 1592.12,753.204 1592.68,798.098 1593.24,807.825 1593.8,785.849 1594.36,764.47 1594.92,789.803 1595.47,784.678 1596.03,797.438 1596.59,761.548 1597.15,773.865 1597.71,770.184 1598.27,794.248 1598.83,755.531 1599.39,733.143 1599.95,765.99 1600.51,714.416 1601.07,727.172 1601.63,722.202 1602.19,719.251 1602.74,686.718 1603.3,685.864 1603.86,699.792 1604.42,698.546 1604.98,679.493 1605.54,711.768 1606.1,711.198 1606.66,693.861 1607.22,690.955 1607.78,690.119 1608.34,661.473 1608.9,645.986 1609.46,663.041 1610.02,650.216 1610.57,634.938 1611.13,603.32 1611.69,625.037 1612.25,627.272 1612.81,646.869 1613.37,666.054 1613.93,663.813 1614.49,664.109 1615.05,679.523 1615.61,724.065 1616.17,689.23 1616.73,704.883 1617.29,687.88 1617.84,700.625 1618.4,703.452 1618.96,653.537 1619.52,640.444 1620.08,640.924 1620.64,643.714 1621.2,649.558 1621.76,683.537 1622.32,683.614 1622.88,648.479 1623.44,635.114 1624,636.354 1624.56,622.786 1625.11,592.131 1625.67,597.375 1626.23,618.915 1626.79,624.977 1627.35,612.733 1627.91,633.994 1628.47,608.214 1629.03,662.069 1629.59,680.545 1630.15,682.277 1630.71,683.803 1631.27,683.774 1631.83,648.407 1632.39,667.718 1632.94,641.248 1633.5,643.185 1634.06,629.211 1634.62,633.589 1635.18,638.93 1635.74,626.539 1636.3,645.028 1636.86,629.835 1637.42,632.111 1637.98,635.136 1638.54,623.304 1639.1,625.602 1639.66,658.713 1640.21,662.331 1640.77,680.392 1641.33,664.268 1641.89,664.749 1642.45,648.64 1643.01,631.74 1643.57,637.719 1644.13,637.744 1644.69,639.258 1645.25,660.052 1645.81,646.285 1646.37,635.231 1646.93,654.186 1647.48,640.992 1648.04,628.485 1648.6,600.895 1649.16,621.377 1649.72,625.865 1650.28,629.241 1650.84,647.673 1651.4,645.907 1651.96,665.156 1652.52,664.44 1653.08,665.847 1653.64,648.568 1654.2,667.778 1654.76,633.867 1655.31,634.163 1655.87,638.663 1656.43,642.891 1656.99,630.775 1657.55,612.412 1658.11,632.454 1658.67,667.976 1659.23,689.752 1659.79,722.96 1660.35,704.325 1660.91,717.662 1661.47,715.186 1662.03,715.347 1662.58,727.048 1663.14,708.037 1663.7,703.431 1664.26,687.861 1664.82,689.669 1665.38,673.611 1665.94,657.325 1666.5,679.245 1667.06,661.96 1667.62,645.535 1668.18,648.325 1668.74,616.058 1669.3,619.664 1669.85,638.242 1670.41,642.305 1670.97,662.626 1671.53,648.428 1672.09,652.062 1672.65,623.982 1673.21,612.507 1673.77,620.305 1674.33,589.185 1674.89,613.512 1675.45,605.121 1676.01,626.726 1676.57,628.258 1677.13,682.173 1677.68,681.803 1678.24,668.403 1678.8,706.82 1679.36,705.872 1679.92,704.782 1680.48,723.176 1681.04,718.242 1681.6,698.265 1682.16,732.016 1682.72,775.139 1683.28,791.411 1683.84,788.079 1684.4,780.32 1684.95,777.178 1685.51,771.253 1686.07,763.215 1686.63,727.158 1687.19,710.273 1687.75,690.509 1688.31,661.32 1688.87,698.379 1689.43,700.02 1689.99,716.737 1690.55,731.954 1691.11,727.726 1691.67,709.619 1692.23,672.843 1692.78,656.68 1693.34,658.242 1693.9,646.235 1694.46,680.317 1695.02,679.254 1695.58,681.326 1696.14,647.652 1696.7,666.057 1697.26,666.754 1697.82,668.098 1698.38,668.335 1698.94,654.747 1699.5,655.816 1700.05,658.331 1700.61,676.453 1701.17,691.795 1701.73,722.387 1702.29,702.492 1702.85,683.889 1703.41,684.909 1703.97,685.373 1704.53,697.094 1705.09,696.686 1705.65,663.118 1706.21,696.494 1706.77,680.611 1707.32,664.597 1707.88,695.644 1708.44,712.001 1709,712.412 1709.56,697.002 1710.12,694.691 1710.68,695.534 1711.24,659.921 1711.8,676.272 1712.36,677.715 1712.92,676.934 1713.48,660.216 1714.04,696.181 1714.6,763.002 1715.15,744.133 1715.71,724.199 1716.27,704.111 1716.83,766.172 1717.39,745.069 1717.95,744.559 1718.51,741.882 1719.07,740.441 1719.63,704.94 1720.19,720.867 1720.75,701.625 1721.31,668.599 1721.87,639.093 1722.42,626.34 1722.98,645.884 1723.54,633.512 1724.1,616.783 1724.66,655.233 1725.22,657.97 1725.78,641.874 1726.34,628.474 1726.9,650.296 1727.46,650.176 1728.02,636.359 1728.58,622.104 1729.14,642.155 1729.69,693.776 1730.25,707.481 1730.81,655.192 1731.37,656.095 1731.93,653.259 1732.49,621.015 1733.05,641.958 1733.61,627.527 1734.17,628.931 1734.73,676.208 1735.29,694.065 1735.85,660.021 1736.41,678.682 1736.97,660.797 1737.52,644.794 1738.08,676.757 1738.64,680.098 1739.2,697.325 1739.76,696.139 1740.32,711.225 1740.88,693.02 1741.44,709.581 1742,705.602 1742.56,690.365 1743.12,674.246 1743.68,691.43 1744.24,689.995 1744.79,708.836 1745.35,688.458 1745.91,686.777 1746.47,702.571 1747.03,685.251 1747.59,698.392 1748.15,712.01 1748.71,727.472 1749.27,710.038 1749.83,691.506 1750.39,658.65 1750.95,658.52 1751.51,661.436 1752.06,677.466 1752.62,692.805 1753.18,708.535 1753.74,736.86 1754.3,750.949 1754.86,731.033 1755.42,774.771 1755.98,751.966 1756.54,733.23 1757.1,742.262 1757.66,740.747 1758.22,722.71 1758.78,754.711 1759.34,765.156 1759.89,760.463 1760.45,758.036 1761.01,767.744 1761.57,764.185 1762.13,761.033 1762.69,739.323 1763.25,738.002 1763.81,748.883 1764.37,712.889 1764.93,729.284 1765.49,758.134 1766.05,819.119 1766.61,813.412 1767.16,837.673 1767.72,827.765 1768.28,867.586 1768.84,824.762 1769.4,820.47 1769.96,860.541 1770.52,836.081 1771.08,825.404 1771.64,816.945 1772.2,790.587 1772.76,735.214 1773.32,718.623 1773.88,653.599 1774.43,634.607 1774.99,655.89 1775.55,654.105 1776.11,656.055 1776.67,672.914 1777.23,640.438 1777.79,675.041 1778.35,659.248 1778.91,665.878 1779.47,648.181 1780.03,650.928 1780.59,655.202 1781.15,611.391 1781.71,616.331 1782.26,601.29 1782.82,622.371 1783.38,611.824 1783.94,635.258 1784.5,637.657 1785.06,672.292 1785.62,655.957 1786.18,657.051 1786.74,670.238 1787.3,669.501 1787.86,671.451 1788.42,689.602 1788.98,656.477 1789.53,644.843 1790.09,649.095 1790.65,666.603 1791.21,620.587 1791.77,623.207 1792.33,646.663 1792.89,621.868 1793.45,609.344 1794.01,579.128 1794.57,585.379 1795.13,603.769 1795.69,594.255 1796.25,596.027 1796.8,619.236 1797.36,621.339 1797.92,592.226 1798.48,578.801 1799.04,566.274 1799.6,589.583 1800.16,628.762 1800.72,630.665 1801.28,651.888 1801.84,638.363 1802.4,653.628 1802.96,676.16 1803.52,679.581 1804.08,678.071 1804.63,681.26 1805.19,647.648 1805.75,651.173 1806.31,688.874 1806.87,670.859 1807.43,656.795 1807.99,675.761 1808.55,709.079 1809.11,722.304 1809.67,672.288 1810.23,674.1 1810.79,705.096 1811.35,703.003 1811.9,715.87 1812.46,713.607 1813.02,729.16 1813.58,758.465 1814.14,721.234 1814.7,720.896 1815.26,687.56 1815.82,674.224 1816.38,656.763 1816.94,705.681 1817.5,703.638 1818.06,670.257 1818.62,669.841 1819.18,606.718 1819.73,617.134 1820.29,619.601 1820.85,625.34 1821.41,655.055 1821.97,687.328 1822.53,705.312 1823.09,721.633 1823.65,753.148 1824.21,752.887 1824.77,780.835 1825.33,774.424 1825.89,737.924 1826.45,735.219 1827,767.237 1827.56,763.166 1828.12,792.256 1828.68,822.168 1829.24,815.089 1829.8,776.884 1830.36,772.719 1830.92,782.304 1831.48,810.26 1832.04,806.032 1832.6,797.586 1833.16,857.327 1833.72,846.396 1834.27,837.111 1834.83,811.341 1835.39,789.323 1835.95,783.297 1836.51,761.595 1837.07,739.447 1837.63,735.497 1838.19,745.873 \"/>\n<path clip-path=\"url(#clip133)\" d=\"M720.247 689.16 L720.806 689.16 L721.365 689.16 L721.924 689.16 L722.484 689.16 L723.043 689.16 L723.602 689.16 L724.161 689.16 L724.721 689.16 L725.28 689.16 L725.839 689.16 L726.398 689.16 L726.958 689.16 L727.517 689.16 L728.076 689.16 L728.635 689.16 L729.195 689.16 L729.754 689.16 L730.313 689.16 L730.872 689.16 L731.432 689.16 L731.991 689.16 L732.55 689.16 L733.109 689.16 L733.669 689.16 L734.228 689.16 L734.787 689.16 L735.346 689.16 L735.906 689.16 L736.465 689.16 L737.024 689.16 L737.583 689.16 L738.143 689.16 L738.702 689.16 L739.261 689.16 L739.82 689.16 L740.38 689.16 L740.939 689.16 L741.498 689.16 L742.057 689.16 L742.617 689.16 L743.176 689.16 L743.735 689.16 L744.294 689.16 L744.854 689.16 L745.413 689.16 L745.972 689.16 L746.531 689.16 L747.091 689.16 L747.65 689.16 L748.209 689.16 L748.768 689.16 L749.328 689.16 L749.887 689.16 L750.446 689.16 L751.005 689.16 L751.565 689.16 L752.124 689.16 L752.683 689.16 L753.242 689.16 L753.802 689.16 L754.361 689.16 L754.92 689.16 L755.479 689.16 L756.039 689.16 L756.598 689.16 L757.157 689.16 L757.716 689.16 L758.276 689.16 L758.835 689.16 L759.394 689.16 L759.953 689.16 L760.513 689.16 L761.072 689.16 L761.631 689.16 L762.19 689.16 L762.75 689.16 L763.309 689.16 L763.868 689.16 L764.427 689.16 L764.987 689.16 L765.546 689.16 L766.105 689.16 L766.664 689.16 L767.224 689.16 L767.783 689.16 L768.342 689.16 L768.901 689.16 L769.461 689.16 L770.02 689.16 L770.579 689.16 L771.138 689.16 L771.698 689.16 L772.257 689.16 L772.816 689.16 L773.375 689.16 L773.935 689.16 L774.494 689.16 L775.053 689.16 L775.612 689.16 L776.172 689.16 L776.731 689.16 L777.29 689.16 L777.849 689.16 L778.409 689.16 L778.968 689.16 L779.527 689.16 L780.086 689.16 L780.646 689.16 L781.205 689.16 L781.764 689.16 L782.323 689.16 L782.883 689.16 L783.442 689.16 L784.001 689.16 L784.56 689.16 L785.12 689.16 L785.679 689.16 L786.238 689.16 L786.797 689.16 L787.357 689.16 L787.916 689.16 L788.475 689.16 L789.034 689.16 L789.594 689.16 L790.153 689.16 L790.712 689.16 L791.271 689.16 L791.831 689.16 L792.39 689.16 L792.949 689.16 L793.508 689.16 L794.068 689.16 L794.627 689.16 L795.186 689.16 L795.745 689.16 L796.305 689.16 L796.864 689.16 L797.423 689.16 L797.982 689.16 L798.542 689.16 L799.101 689.16 L799.66 689.16 L800.219 689.16 L800.779 689.16 L801.338 689.16 L801.897 689.16 L802.456 689.16 L803.016 689.16 L803.575 689.16 L804.134 689.16 L804.693 689.16 L805.253 689.16 L805.812 689.16 L806.371 689.16 L806.931 689.16 L807.49 689.16 L808.049 689.16 L808.608 689.16 L809.168 689.16 L809.727 689.16 L810.286 689.16 L810.845 689.16 L811.405 689.16 L811.964 689.16 L812.523 689.16 L813.082 689.16 L813.642 689.16 L814.201 689.16 L814.76 689.16 L815.319 689.16 L815.879 689.16 L816.438 689.16 L816.997 689.16 L817.556 689.16 L818.116 689.16 L818.675 689.16 L819.234 689.16 L819.793 689.16 L820.353 689.16 L820.912 689.16 L821.471 689.16 L822.03 689.16 L822.59 689.16 L823.149 689.16 L823.708 689.16 L824.267 689.16 L824.827 689.16 L825.386 689.16 L825.945 689.16 L826.504 689.16 L827.064 689.16 L827.623 689.16 L828.182 689.16 L828.741 689.16 L829.301 689.16 L829.86 689.16 L830.419 689.16 L830.978 689.16 L831.538 689.16 L832.097 689.16 L832.656 689.16 L833.215 689.16 L833.775 689.16 L834.334 689.16 L834.893 689.16 L835.452 689.16 L836.012 689.16 L836.571 689.16 L837.13 689.16 L837.689 689.16 L838.249 689.16 L838.808 689.16 L839.367 689.16 L839.926 689.16 L840.486 689.16 L841.045 689.16 L841.604 689.16 L842.163 689.16 L842.723 689.16 L843.282 689.16 L843.841 689.16 L844.4 689.16 L844.96 689.16 L845.519 689.16 L846.078 689.16 L846.637 689.16 L847.197 689.16 L847.756 689.16 L848.315 689.16 L848.874 689.16 L849.434 689.16 L849.993 689.16 L850.552 689.16 L851.111 689.16 L851.671 689.16 L852.23 689.16 L852.789 689.16 L853.348 689.16 L853.908 689.16 L854.467 689.16 L855.026 689.16 L855.585 689.16 L856.145 689.16 L856.704 689.16 L857.263 689.16 L857.822 689.16 L858.382 689.16 L858.941 689.16 L859.5 689.16 L860.059 689.16 L860.619 689.16 L861.178 689.16 L861.737 689.16 L862.296 689.16 L862.856 689.16 L863.415 689.16 L863.974 689.16 L864.533 689.16 L865.093 689.16 L865.652 689.16 L866.211 689.16 L866.77 689.16 L867.33 689.16 L867.889 689.16 L868.448 689.16 L869.007 689.16 L869.567 689.16 L870.126 689.16 L870.685 689.16 L871.244 689.16 L871.804 689.16 L872.363 689.16 L872.922 689.16 L873.481 689.16 L874.041 689.16 L874.6 689.16 L875.159 689.16 L875.718 689.16 L876.278 689.16 L876.837 689.16 L877.396 689.16 L877.955 689.16 L878.515 689.16 L879.074 689.16 L879.633 689.16 L880.192 689.16 L880.752 689.16 L881.311 689.16 L881.87 689.16 L882.429 689.16 L882.989 689.16 L883.548 689.16 L884.107 689.16 L884.666 689.16 L885.226 689.16 L885.785 689.16 L886.344 689.16 L886.903 689.16 L887.463 689.16 L888.022 689.16 L888.581 689.16 L889.14 689.16 L889.7 689.16 L890.259 689.16 L890.818 689.16 L891.377 689.16 L891.937 689.16 L892.496 689.16 L893.055 689.16 L893.614 689.16 L894.174 689.16 L894.733 689.16 L895.292 689.16 L895.851 689.16 L896.411 689.16 L896.97 689.16 L897.529 689.16 L898.088 689.16 L898.648 689.16 L899.207 689.16 L899.766 689.16 L900.325 689.16 L900.885 689.16 L901.444 689.16 L902.003 689.16 L902.562 689.16 L903.122 689.16 L903.681 689.16 L904.24 689.16 L904.799 689.16 L905.359 689.16 L905.918 689.16 L906.477 689.16 L907.036 689.16 L907.596 689.16 L908.155 689.16 L908.714 689.16 L909.273 689.16 L909.833 689.16 L910.392 689.16 L910.951 689.16 L911.51 689.16 L912.07 689.16 L912.629 689.16 L913.188 689.16 L913.747 689.16 L914.307 689.16 L914.866 689.16 L915.425 689.16 L915.984 689.16 L916.544 689.16 L917.103 689.16 L917.662 689.16 L918.221 689.16 L918.781 689.16 L919.34 689.16 L919.899 689.16 L920.458 689.16 L921.018 689.16 L921.577 689.16 L922.136 689.16 L922.695 689.16 L923.255 689.16 L923.814 689.16 L924.373 689.16 L924.932 689.16 L925.492 689.16 L926.051 689.16 L926.61 689.16 L927.169 689.16 L927.729 689.16 L928.288 689.16 L928.847 689.16 L929.406 689.16 L929.966 689.16 L930.525 689.16 L931.084 689.16 L931.644 689.16 L932.203 689.16 L932.762 689.16 L933.321 689.16 L933.881 689.16 L934.44 689.16 L934.999 689.16 L935.558 689.16 L936.118 689.16 L936.677 689.16 L937.236 689.16 L937.795 689.16 L938.355 689.16 L938.914 689.16 L939.473 689.16 L940.032 689.16 L940.592 689.16 L941.151 689.16 L941.71 689.16 L942.269 689.16 L942.829 689.16 L943.388 689.16 L943.947 689.16 L944.506 689.16 L945.066 689.16 L945.625 689.16 L946.184 689.16 L946.743 689.16 L947.303 689.16 L947.862 689.16 L948.421 689.16 L948.98 689.16 L949.54 689.16 L950.099 689.16 L950.658 689.16 L951.217 689.16 L951.777 689.16 L952.336 689.16 L952.895 689.16 L953.454 689.16 L954.014 689.16 L954.573 689.16 L955.132 689.16 L955.691 689.16 L956.251 689.16 L956.81 689.16 L957.369 689.16 L957.928 689.16 L958.488 689.16 L959.047 689.16 L959.606 689.16 L960.165 689.16 L960.725 689.16 L961.284 689.16 L961.843 689.16 L962.402 689.16 L962.962 689.16 L963.521 689.16 L964.08 689.16 L964.639 689.16 L965.199 689.16 L965.758 689.16 L966.317 689.16 L966.876 689.16 L967.436 689.16 L967.995 689.16 L968.554 689.16 L969.113 689.16 L969.673 689.16 L970.232 689.16 L970.791 689.16 L971.35 689.16 L971.91 689.16 L972.469 689.16 L973.028 689.16 L973.587 689.16 L974.147 689.16 L974.706 689.16 L975.265 689.16 L975.824 689.16 L976.384 689.16 L976.943 689.16 L977.502 689.16 L978.061 689.16 L978.621 689.16 L979.18 689.16 L979.739 689.16 L980.298 689.16 L980.858 689.16 L981.417 689.16 L981.976 689.16 L982.535 689.16 L983.095 689.16 L983.654 689.16 L984.213 689.16 L984.772 689.16 L985.332 689.16 L985.891 689.16 L986.45 689.16 L987.009 689.16 L987.569 689.16 L988.128 689.16 L988.687 689.16 L989.246 689.16 L989.806 689.16 L990.365 689.16 L990.924 689.16 L991.483 689.16 L992.043 689.16 L992.602 689.16 L993.161 689.16 L993.72 689.16 L994.28 689.16 L994.839 689.16 L995.398 689.16 L995.957 689.16 L996.517 689.16 L997.076 689.16 L997.635 689.16 L998.194 689.16 L998.754 689.16 L999.313 689.16 L999.872 689.16 L1000.43 689.16 L1000.99 689.16 L1001.55 689.16 L1002.11 689.16 L1002.67 689.16 L1003.23 689.16 L1003.79 689.16 L1004.35 689.16 L1004.91 689.16 L1005.46 689.16 L1006.02 689.16 L1006.58 689.16 L1007.14 689.16 L1007.7 689.16 L1008.26 689.16 L1008.82 689.16 L1009.38 689.16 L1009.94 689.16 L1010.5 689.16 L1011.06 689.16 L1011.62 689.16 L1012.18 689.16 L1012.73 689.16 L1013.29 689.16 L1013.85 689.16 L1014.41 689.16 L1014.97 689.16 L1015.53 689.16 L1016.09 689.16 L1016.65 689.16 L1017.21 689.16 L1017.77 689.16 L1018.33 689.16 L1018.89 689.16 L1019.45 689.16 L1020.01 689.16 L1020.56 689.16 L1021.12 689.16 L1021.68 689.16 L1022.24 689.16 L1022.8 689.16 L1023.36 689.16 L1023.92 689.16 L1024.48 689.16 L1025.04 689.16 L1025.6 689.16 L1026.16 689.16 L1026.72 689.16 L1027.28 689.16 L1027.83 689.16 L1028.39 689.16 L1028.95 689.16 L1029.51 689.16 L1030.07 689.16 L1030.63 689.16 L1031.19 689.16 L1031.75 689.16 L1032.31 689.16 L1032.87 689.16 L1033.43 689.16 L1033.99 689.16 L1034.55 689.16 L1035.1 689.16 L1035.66 689.16 L1036.22 689.16 L1036.78 689.16 L1037.34 689.16 L1037.9 689.16 L1038.46 689.16 L1039.02 689.16 L1039.58 689.16 L1040.14 689.16 L1040.7 689.16 L1041.26 689.16 L1041.82 689.16 L1042.38 689.16 L1042.93 689.16 L1043.49 689.16 L1044.05 689.16 L1044.61 689.16 L1045.17 689.16 L1045.73 689.16 L1046.29 689.16 L1046.85 689.16 L1047.41 689.16 L1047.97 689.16 L1048.53 689.16 L1049.09 689.16 L1049.65 689.16 L1050.2 689.16 L1050.76 689.16 L1051.32 689.16 L1051.88 689.16 L1052.44 689.16 L1053 689.16 L1053.56 689.16 L1054.12 689.16 L1054.68 689.16 L1055.24 689.16 L1055.8 689.16 L1056.36 689.16 L1056.92 689.16 L1057.48 689.16 L1058.03 689.16 L1058.59 689.16 L1059.15 689.16 L1059.71 689.16 L1060.27 689.16 L1060.83 689.16 L1061.39 689.16 L1061.95 689.16 L1062.51 689.16 L1063.07 689.16 L1063.63 689.16 L1064.19 689.16 L1064.75 689.16 L1065.3 689.16 L1065.86 689.16 L1066.42 689.16 L1066.98 689.16 L1067.54 689.16 L1068.1 689.16 L1068.66 689.16 L1069.22 689.16 L1069.78 689.16 L1070.34 689.16 L1070.9 689.16 L1071.46 689.16 L1072.02 689.16 L1072.57 689.16 L1073.13 689.16 L1073.69 689.16 L1074.25 689.16 L1074.81 689.16 L1075.37 689.16 L1075.93 689.16 L1076.49 689.16 L1077.05 689.16 L1077.61 689.16 L1078.17 689.16 L1078.73 689.16 L1079.29 689.16 L1079.85 689.16 L1080.4 689.16 L1080.96 689.16 L1081.52 689.16 L1082.08 689.16 L1082.64 689.16 L1083.2 689.16 L1083.76 689.16 L1084.32 689.16 L1084.88 689.16 L1085.44 689.16 L1086 689.16 L1086.56 689.16 L1087.12 689.16 L1087.67 689.16 L1088.23 689.16 L1088.79 689.16 L1089.35 689.16 L1089.91 689.16 L1090.47 689.16 L1091.03 689.16 L1091.59 689.16 L1092.15 689.16 L1092.71 689.16 L1093.27 689.16 L1093.83 689.16 L1094.39 689.16 L1094.94 689.16 L1095.5 689.16 L1096.06 689.16 L1096.62 689.16 L1097.18 689.16 L1097.74 689.16 L1098.3 689.16 L1098.86 689.16 L1099.42 689.16 L1099.98 689.16 L1100.54 689.16 L1101.1 689.16 L1101.66 689.16 L1102.22 689.16 L1102.77 689.16 L1103.33 689.16 L1103.89 689.16 L1104.45 689.16 L1105.01 689.16 L1105.57 689.16 L1106.13 689.16 L1106.69 689.16 L1107.25 689.16 L1107.81 689.16 L1108.37 689.16 L1108.93 689.16 L1109.49 689.16 L1110.04 689.16 L1110.6 689.16 L1111.16 689.16 L1111.72 689.16 L1112.28 689.16 L1112.84 689.16 L1113.4 689.16 L1113.96 689.16 L1114.52 689.16 L1115.08 689.16 L1115.64 689.16 L1116.2 689.16 L1116.76 689.16 L1117.31 689.16 L1117.87 689.16 L1118.43 689.16 L1118.99 689.16 L1119.55 689.16 L1120.11 689.16 L1120.67 689.16 L1121.23 689.16 L1121.79 689.16 L1122.35 689.16 L1122.91 689.16 L1123.47 689.16 L1124.03 689.16 L1124.59 689.16 L1125.14 689.16 L1125.7 689.16 L1126.26 689.16 L1126.82 689.16 L1127.38 689.16 L1127.94 689.16 L1128.5 689.16 L1129.06 689.16 L1129.62 689.16 L1130.18 689.16 L1130.74 689.16 L1131.3 689.16 L1131.86 689.16 L1132.41 689.16 L1132.97 689.16 L1133.53 689.16 L1134.09 689.16 L1134.65 689.16 L1135.21 689.16 L1135.77 689.16 L1136.33 689.16 L1136.89 689.16 L1137.45 689.16 L1138.01 689.16 L1138.57 689.16 L1139.13 689.16 L1139.68 689.16 L1140.24 689.16 L1140.8 689.16 L1141.36 689.16 L1141.92 689.16 L1142.48 689.16 L1143.04 689.16 L1143.6 689.16 L1144.16 689.16 L1144.72 689.16 L1145.28 689.16 L1145.84 689.16 L1146.4 689.16 L1146.96 689.16 L1147.51 689.16 L1148.07 689.16 L1148.63 689.16 L1149.19 689.16 L1149.75 689.16 L1150.31 689.16 L1150.87 689.16 L1151.43 689.16 L1151.99 689.16 L1152.55 689.16 L1153.11 689.16 L1153.67 689.16 L1154.23 689.16 L1154.78 689.16 L1155.34 689.16 L1155.9 689.16 L1156.46 689.16 L1157.02 689.16 L1157.58 689.16 L1158.14 689.16 L1158.7 689.16 L1159.26 689.16 L1159.82 689.16 L1160.38 689.16 L1160.94 689.16 L1161.5 689.16 L1162.05 689.16 L1162.61 689.16 L1163.17 689.16 L1163.73 689.16 L1164.29 689.16 L1164.85 689.16 L1165.41 689.16 L1165.97 689.16 L1166.53 689.16 L1167.09 689.16 L1167.65 689.16 L1168.21 689.16 L1168.77 689.16 L1169.33 689.16 L1169.88 689.16 L1170.44 689.16 L1171 689.16 L1171.56 689.16 L1172.12 689.16 L1172.68 689.16 L1173.24 689.16 L1173.8 689.16 L1174.36 689.16 L1174.92 689.16 L1175.48 689.16 L1176.04 689.16 L1176.6 689.16 L1177.15 689.16 L1177.71 689.16 L1178.27 689.16 L1178.83 689.16 L1179.39 689.16 L1179.95 689.16 L1180.51 689.16 L1181.07 689.16 L1181.63 689.16 L1182.19 689.16 L1182.75 689.16 L1183.31 689.16 L1183.87 689.16 L1184.43 689.16 L1184.98 689.16 L1185.54 689.16 L1186.1 689.16 L1186.66 689.16 L1187.22 689.16 L1187.78 689.16 L1188.34 689.16 L1188.9 689.16 L1189.46 689.16 L1190.02 689.16 L1190.58 689.16 L1191.14 689.16 L1191.7 689.16 L1192.25 689.16 L1192.81 689.16 L1193.37 689.16 L1193.93 689.16 L1194.49 689.16 L1195.05 689.16 L1195.61 689.16 L1196.17 689.16 L1196.73 689.16 L1197.29 689.16 L1197.85 689.16 L1198.41 689.16 L1198.97 689.16 L1199.52 689.16 L1200.08 689.16 L1200.64 689.16 L1201.2 689.16 L1201.76 689.16 L1202.32 689.16 L1202.88 689.16 L1203.44 689.16 L1204 689.16 L1204.56 689.16 L1205.12 689.16 L1205.68 689.16 L1206.24 689.16 L1206.8 689.16 L1207.35 689.16 L1207.91 689.16 L1208.47 689.16 L1209.03 689.16 L1209.59 689.16 L1210.15 689.16 L1210.71 689.16 L1211.27 689.16 L1211.83 689.16 L1212.39 689.16 L1212.95 689.16 L1213.51 689.16 L1214.07 689.16 L1214.62 689.16 L1215.18 689.16 L1215.74 689.16 L1216.3 689.16 L1216.86 689.16 L1217.42 689.16 L1217.98 689.16 L1218.54 689.16 L1219.1 689.16 L1219.66 689.16 L1220.22 689.16 L1220.78 689.16 L1221.34 689.16 L1221.89 689.16 L1222.45 689.16 L1223.01 689.16 L1223.57 689.16 L1224.13 689.16 L1224.69 689.16 L1225.25 689.16 L1225.81 689.16 L1226.37 689.16 L1226.93 689.16 L1227.49 689.16 L1228.05 689.16 L1228.61 689.16 L1229.17 689.16 L1229.72 689.16 L1230.28 689.16 L1230.84 689.16 L1231.4 689.16 L1231.96 689.16 L1232.52 689.16 L1233.08 689.16 L1233.64 689.16 L1234.2 689.16 L1234.76 689.16 L1235.32 689.16 L1235.88 689.16 L1236.44 689.16 L1236.99 689.16 L1237.55 689.16 L1238.11 689.16 L1238.67 689.16 L1239.23 689.16 L1239.79 689.16 L1240.35 689.16 L1240.91 689.16 L1241.47 689.16 L1242.03 689.16 L1242.59 689.16 L1243.15 689.16 L1243.71 689.16 L1244.26 689.16 L1244.82 689.16 L1245.38 689.16 L1245.94 689.16 L1246.5 689.16 L1247.06 689.16 L1247.62 689.16 L1248.18 689.16 L1248.74 689.16 L1249.3 689.16 L1249.86 689.16 L1250.42 689.16 L1250.98 689.16 L1251.54 689.16 L1252.09 689.16 L1252.65 689.16 L1253.21 689.16 L1253.77 689.16 L1254.33 689.16 L1254.89 689.16 L1255.45 689.16 L1256.01 689.16 L1256.57 689.16 L1257.13 689.16 L1257.69 689.16 L1258.25 689.16 L1258.81 689.16 L1259.36 689.16 L1259.92 689.16 L1260.48 689.16 L1261.04 689.16 L1261.6 689.16 L1262.16 689.16 L1262.72 689.16 L1263.28 689.16 L1263.84 689.16 L1264.4 689.16 L1264.96 689.16 L1265.52 689.16 L1266.08 689.16 L1266.63 689.16 L1267.19 689.16 L1267.75 689.16 L1268.31 689.16 L1268.87 689.16 L1269.43 689.16 L1269.99 689.16 L1270.55 689.16 L1271.11 689.16 L1271.67 689.16 L1272.23 689.16 L1272.79 689.16 L1273.35 689.16 L1273.91 689.16 L1274.46 689.16 L1275.02 689.16 L1275.58 689.16 L1276.14 689.16 L1276.7 689.16 L1277.26 689.16 L1277.82 689.16 L1278.38 689.16 L1278.94 689.16 L1279.5 689.16 L1280.06 689.16 L1280.62 689.16 L1281.18 689.16 L1281.73 689.16 L1282.29 689.16 L1282.85 689.16 L1283.41 689.16 L1283.97 689.16 L1284.53 689.16 L1285.09 689.16 L1285.65 689.16 L1286.21 689.16 L1286.77 689.16 L1287.33 689.16 L1287.89 689.16 L1288.45 689.16 L1289 689.16 L1289.56 689.16 L1290.12 689.16 L1290.68 689.16 L1291.24 689.16 L1291.8 689.16 L1292.36 689.16 L1292.92 689.16 L1293.48 689.16 L1294.04 689.16 L1294.6 689.16 L1295.16 689.16 L1295.72 689.16 L1296.28 689.16 L1296.83 689.16 L1297.39 689.16 L1297.95 689.16 L1298.51 689.16 L1299.07 689.16 L1299.63 689.16 L1300.19 689.16 L1300.75 689.16 L1301.31 689.16 L1301.87 689.16 L1302.43 689.16 L1302.99 689.16 L1303.55 689.16 L1304.1 689.16 L1304.66 689.16 L1305.22 689.16 L1305.78 689.16 L1306.34 689.16 L1306.9 689.16 L1307.46 689.16 L1308.02 689.16 L1308.58 689.16 L1309.14 689.16 L1309.7 689.16 L1310.26 689.16 L1310.82 689.16 L1311.38 689.16 L1311.93 689.16 L1312.49 689.16 L1313.05 689.16 L1313.61 689.16 L1314.17 689.16 L1314.73 689.16 L1315.29 689.16 L1315.85 689.16 L1316.41 689.16 L1316.97 689.16 L1317.53 689.16 L1318.09 689.16 L1318.65 689.16 L1319.2 689.16 L1319.76 689.16 L1320.32 689.16 L1320.88 689.16 L1321.44 689.16 L1322 689.16 L1322.56 689.16 L1323.12 689.16 L1323.68 689.16 L1324.24 689.16 L1324.8 689.16 L1325.36 689.16 L1325.92 689.16 L1326.47 689.16 L1327.03 689.16 L1327.59 689.16 L1328.15 689.16 L1328.71 689.16 L1329.27 689.16 L1329.83 689.16 L1330.39 689.16 L1330.95 689.16 L1331.51 689.16 L1332.07 689.16 L1332.63 689.16 L1333.19 689.16 L1333.75 689.16 L1334.3 689.16 L1334.86 689.16 L1335.42 689.16 L1335.98 689.16 L1336.54 689.16 L1337.1 689.16 L1337.66 689.16 L1338.22 689.16 L1338.78 689.16 L1339.34 689.16 L1339.9 689.16 L1340.46 689.16 L1341.02 689.16 L1341.57 689.16 L1342.13 689.16 L1342.69 689.16 L1343.25 689.16 L1343.81 689.16 L1344.37 689.16 L1344.93 689.16 L1345.49 689.16 L1346.05 689.16 L1346.61 689.16 L1347.17 689.16 L1347.73 689.16 L1348.29 689.16 L1348.84 689.16 L1349.4 689.16 L1349.96 689.16 L1350.52 689.16 L1351.08 689.16 L1351.64 689.16 L1352.2 689.16 L1352.76 689.16 L1353.32 689.16 L1353.88 689.16 L1354.44 689.16 L1355 689.16 L1355.56 689.16 L1356.12 689.16 L1356.67 689.16 L1357.23 689.16 L1357.79 689.16 L1358.35 689.16 L1358.91 689.16 L1359.47 689.16 L1360.03 689.16 L1360.59 689.16 L1361.15 689.16 L1361.71 689.16 L1362.27 689.16 L1362.83 689.16 L1363.39 689.16 L1363.94 689.16 L1364.5 689.16 L1365.06 689.16 L1365.62 689.16 L1366.18 689.16 L1366.74 689.16 L1367.3 689.16 L1367.86 689.16 L1368.42 689.16 L1368.98 689.16 L1369.54 689.16 L1370.1 689.16 L1370.66 689.16 L1371.21 689.16 L1371.77 689.16 L1372.33 689.16 L1372.89 689.16 L1373.45 689.16 L1374.01 689.16 L1374.57 689.16 L1375.13 689.16 L1375.69 689.16 L1376.25 689.16 L1376.81 689.16 L1377.37 689.16 L1377.93 689.16 L1378.49 689.16 L1379.04 689.16 L1379.6 689.16 L1380.16 689.16 L1380.72 689.16 L1381.28 689.16 L1381.84 689.16 L1382.4 689.16 L1382.96 689.16 L1383.52 689.16 L1384.08 689.16 L1384.64 689.16 L1385.2 689.16 L1385.76 689.16 L1386.31 689.16 L1386.87 689.16 L1387.43 689.16 L1387.99 689.16 L1388.55 689.16 L1389.11 689.16 L1389.67 689.16 L1390.23 689.16 L1390.79 689.16 L1391.35 689.16 L1391.91 689.16 L1392.47 689.16 L1393.03 689.16 L1393.58 689.16 L1394.14 689.16 L1394.7 689.16 L1395.26 689.16 L1395.82 689.16 L1396.38 689.16 L1396.94 689.16 L1397.5 689.16 L1398.06 689.16 L1398.62 689.16 L1399.18 689.16 L1399.74 689.16 L1400.3 689.16 L1400.86 689.16 L1401.41 689.16 L1401.97 689.16 L1402.53 689.16 L1403.09 689.16 L1403.65 689.16 L1404.21 689.16 L1404.77 689.16 L1405.33 689.16 L1405.89 689.16 L1406.45 689.16 L1407.01 689.16 L1407.57 689.16 L1408.13 689.16 L1408.68 689.16 L1409.24 689.16 L1409.8 689.16 L1410.36 689.16 L1410.92 689.16 L1411.48 689.16 L1412.04 689.16 L1412.6 689.16 L1413.16 689.16 L1413.72 689.16 L1414.28 689.16 L1414.84 689.16 L1415.4 689.16 L1415.95 689.16 L1416.51 689.16 L1417.07 689.16 L1417.63 689.16 L1418.19 689.16 L1418.75 689.16 L1419.31 689.16 L1419.87 689.16 L1420.43 689.16 L1420.99 689.16 L1421.55 689.16 L1422.11 689.16 L1422.67 689.16 L1423.23 689.16 L1423.78 689.16 L1424.34 689.16 L1424.9 689.16 L1425.46 689.16 L1426.02 689.16 L1426.58 689.16 L1427.14 689.16 L1427.7 689.16 L1428.26 689.16 L1428.82 689.16 L1429.38 689.16 L1429.94 689.16 L1430.5 689.16 L1431.05 689.16 L1431.61 689.16 L1432.17 689.16 L1432.73 689.16 L1433.29 689.16 L1433.85 689.16 L1434.41 689.16 L1434.97 689.16 L1435.53 689.16 L1436.09 689.16 L1436.65 689.16 L1437.21 689.16 L1437.77 689.16 L1438.33 689.16 L1438.88 689.16 L1439.44 689.16 L1440 689.16 L1440.56 689.16 L1441.12 689.16 L1441.68 689.16 L1442.24 689.16 L1442.8 689.16 L1443.36 689.16 L1443.92 689.16 L1444.48 689.16 L1445.04 689.16 L1445.6 689.16 L1446.15 689.16 L1446.71 689.16 L1447.27 689.16 L1447.83 689.16 L1448.39 689.16 L1448.95 689.16 L1449.51 689.16 L1450.07 689.16 L1450.63 689.16 L1451.19 689.16 L1451.75 689.16 L1452.31 689.16 L1452.87 689.16 L1453.42 689.16 L1453.98 689.16 L1454.54 689.16 L1455.1 689.16 L1455.66 689.16 L1456.22 689.16 L1456.78 689.16 L1457.34 689.16 L1457.9 689.16 L1458.46 689.16 L1459.02 689.16 L1459.58 689.16 L1460.14 689.16 L1460.7 689.16 L1461.25 689.16 L1461.81 689.16 L1462.37 689.16 L1462.93 689.16 L1463.49 689.16 L1464.05 689.16 L1464.61 689.16 L1465.17 689.16 L1465.73 689.16 L1466.29 689.16 L1466.85 689.16 L1467.41 689.16 L1467.97 689.16 L1468.52 689.16 L1469.08 689.16 L1469.64 689.16 L1470.2 689.16 L1470.76 689.16 L1471.32 689.16 L1471.88 689.16 L1472.44 689.16 L1473 689.16 L1473.56 689.16 L1474.12 689.16 L1474.68 689.16 L1475.24 689.16 L1475.79 689.16 L1476.35 689.16 L1476.91 689.16 L1477.47 689.16 L1478.03 689.16 L1478.59 689.16 L1479.15 689.16 L1479.71 689.16 L1480.27 689.16 L1480.83 689.16 L1481.39 689.16 L1481.95 689.16 L1482.51 689.16 L1483.07 689.16 L1483.62 689.16 L1484.18 689.16 L1484.74 689.16 L1485.3 689.16 L1485.86 689.16 L1486.42 689.16 L1486.98 689.16 L1487.54 689.16 L1488.1 689.16 L1488.66 689.16 L1489.22 689.16 L1489.78 689.16 L1490.34 689.16 L1490.89 689.16 L1491.45 689.16 L1492.01 689.16 L1492.57 689.16 L1493.13 689.16 L1493.69 689.16 L1494.25 689.16 L1494.81 689.16 L1495.37 689.16 L1495.93 689.16 L1496.49 689.16 L1497.05 689.16 L1497.61 689.16 L1498.16 689.16 L1498.72 689.16 L1499.28 689.16 L1499.84 689.16 L1500.4 689.16 L1500.96 689.16 L1501.52 689.16 L1502.08 689.16 L1502.64 689.16 L1503.2 689.16 L1503.76 689.16 L1504.32 689.16 L1504.88 689.16 L1505.44 689.16 L1505.99 689.16 L1506.55 689.16 L1507.11 689.16 L1507.67 689.16 L1508.23 689.16 L1508.79 689.16 L1509.35 689.16 L1509.91 689.16 L1510.47 689.16 L1511.03 689.16 L1511.59 689.16 L1512.15 689.16 L1512.71 689.16 L1513.26 689.16 L1513.82 689.16 L1514.38 689.16 L1514.94 689.16 L1515.5 689.16 L1516.06 689.16 L1516.62 689.16 L1517.18 689.16 L1517.74 689.16 L1518.3 689.16 L1518.86 689.16 L1519.42 689.16 L1519.98 689.16 L1520.53 689.16 L1521.09 689.16 L1521.65 689.16 L1522.21 689.16 L1522.77 689.16 L1523.33 689.16 L1523.89 689.16 L1524.45 689.16 L1525.01 689.16 L1525.57 689.16 L1526.13 689.16 L1526.69 689.16 L1527.25 689.16 L1527.81 689.16 L1528.36 689.16 L1528.92 689.16 L1529.48 689.16 L1530.04 689.16 L1530.6 689.16 L1531.16 689.16 L1531.72 689.16 L1532.28 689.16 L1532.84 689.16 L1533.4 689.16 L1533.96 689.16 L1534.52 689.16 L1535.08 689.16 L1535.63 689.16 L1536.19 689.16 L1536.75 689.16 L1537.31 689.16 L1537.87 689.16 L1538.43 689.16 L1538.99 689.16 L1539.55 689.16 L1540.11 689.16 L1540.67 689.16 L1541.23 689.16 L1541.79 689.16 L1542.35 689.16 L1542.9 689.16 L1543.46 689.16 L1544.02 689.16 L1544.58 689.16 L1545.14 689.16 L1545.7 689.16 L1546.26 689.16 L1546.82 689.16 L1547.38 689.16 L1547.94 689.16 L1548.5 689.16 L1549.06 689.16 L1549.62 689.16 L1550.18 689.16 L1550.73 689.16 L1551.29 689.16 L1551.85 689.16 L1552.41 689.16 L1552.97 689.16 L1553.53 689.16 L1554.09 689.16 L1554.65 689.16 L1555.21 689.16 L1555.77 689.16 L1556.33 689.16 L1556.89 689.16 L1557.45 689.16 L1558 689.16 L1558.56 689.16 L1559.12 689.16 L1559.68 689.16 L1560.24 689.16 L1560.8 689.16 L1561.36 689.16 L1561.92 689.16 L1562.48 689.16 L1563.04 689.16 L1563.6 689.16 L1564.16 689.16 L1564.72 689.16 L1565.28 689.16 L1565.83 689.16 L1566.39 689.16 L1566.95 689.16 L1567.51 689.16 L1568.07 689.16 L1568.63 689.16 L1569.19 689.16 L1569.75 689.16 L1570.31 689.16 L1570.87 689.16 L1571.43 689.16 L1571.99 689.16 L1572.55 689.16 L1573.1 689.16 L1573.66 689.16 L1574.22 689.16 L1574.78 689.16 L1575.34 689.16 L1575.9 689.16 L1576.46 689.16 L1577.02 689.16 L1577.58 689.16 L1578.14 689.16 L1578.7 689.16 L1579.26 689.16 L1579.82 689.16 L1580.37 689.16 L1580.93 689.16 L1581.49 689.16 L1582.05 689.16 L1582.61 689.16 L1583.17 689.16 L1583.73 689.16 L1584.29 689.16 L1584.85 689.16 L1585.41 689.16 L1585.97 689.16 L1586.53 689.16 L1587.09 689.16 L1587.65 689.16 L1588.2 689.16 L1588.76 689.16 L1589.32 689.16 L1589.88 689.16 L1590.44 689.16 L1591 689.16 L1591.56 689.16 L1592.12 689.16 L1592.68 689.16 L1593.24 689.16 L1593.8 689.16 L1594.36 689.16 L1594.92 689.16 L1595.47 689.16 L1596.03 689.16 L1596.59 689.16 L1597.15 689.16 L1597.71 689.16 L1598.27 689.16 L1598.83 689.16 L1599.39 689.16 L1599.95 689.16 L1600.51 689.16 L1601.07 689.16 L1601.63 689.16 L1602.19 689.16 L1602.74 689.16 L1603.3 689.16 L1603.86 689.16 L1604.42 689.16 L1604.98 689.16 L1605.54 689.16 L1606.1 689.16 L1606.66 689.16 L1607.22 689.16 L1607.78 689.16 L1608.34 689.16 L1608.9 689.16 L1609.46 689.16 L1610.02 689.16 L1610.57 689.16 L1611.13 689.16 L1611.69 689.16 L1612.25 689.16 L1612.81 689.16 L1613.37 689.16 L1613.93 689.16 L1614.49 689.16 L1615.05 689.16 L1615.61 689.16 L1616.17 689.16 L1616.73 689.16 L1617.29 689.16 L1617.84 689.16 L1618.4 689.16 L1618.96 689.16 L1619.52 689.16 L1620.08 689.16 L1620.64 689.16 L1621.2 689.16 L1621.76 689.16 L1622.32 689.16 L1622.88 689.16 L1623.44 689.16 L1624 689.16 L1624.56 689.16 L1625.11 689.16 L1625.67 689.16 L1626.23 689.16 L1626.79 689.16 L1627.35 689.16 L1627.91 689.16 L1628.47 689.16 L1629.03 689.16 L1629.59 689.16 L1630.15 689.16 L1630.71 689.16 L1631.27 689.16 L1631.83 689.16 L1632.39 689.16 L1632.94 689.16 L1633.5 689.16 L1634.06 689.16 L1634.62 689.16 L1635.18 689.16 L1635.74 689.16 L1636.3 689.16 L1636.86 689.16 L1637.42 689.16 L1637.98 689.16 L1638.54 689.16 L1639.1 689.16 L1639.66 689.16 L1640.21 689.16 L1640.77 689.16 L1641.33 689.16 L1641.89 689.16 L1642.45 689.16 L1643.01 689.16 L1643.57 689.16 L1644.13 689.16 L1644.69 689.16 L1645.25 689.16 L1645.81 689.16 L1646.37 689.16 L1646.93 689.16 L1647.48 689.16 L1648.04 689.16 L1648.6 689.16 L1649.16 689.16 L1649.72 689.16 L1650.28 689.16 L1650.84 689.16 L1651.4 689.16 L1651.96 689.16 L1652.52 689.16 L1653.08 689.16 L1653.64 689.16 L1654.2 689.16 L1654.76 689.16 L1655.31 689.16 L1655.87 689.16 L1656.43 689.16 L1656.99 689.16 L1657.55 689.16 L1658.11 689.16 L1658.67 689.16 L1659.23 689.16 L1659.79 689.16 L1660.35 689.16 L1660.91 689.16 L1661.47 689.16 L1662.03 689.16 L1662.58 689.16 L1663.14 689.16 L1663.7 689.16 L1664.26 689.16 L1664.82 689.16 L1665.38 689.16 L1665.94 689.16 L1666.5 689.16 L1667.06 689.16 L1667.62 689.16 L1668.18 689.16 L1668.74 689.16 L1669.3 689.16 L1669.85 689.16 L1670.41 689.16 L1670.97 689.16 L1671.53 689.16 L1672.09 689.16 L1672.65 689.16 L1673.21 689.16 L1673.77 689.16 L1674.33 689.16 L1674.89 689.16 L1675.45 689.16 L1676.01 689.16 L1676.57 689.16 L1677.13 689.16 L1677.68 689.16 L1678.24 689.16 L1678.8 689.16 L1679.36 689.16 L1679.92 689.16 L1680.48 689.16 L1681.04 689.16 L1681.6 689.16 L1682.16 689.16 L1682.72 689.16 L1683.28 689.16 L1683.84 689.16 L1684.4 689.16 L1684.95 689.16 L1685.51 689.16 L1686.07 689.16 L1686.63 689.16 L1687.19 689.16 L1687.75 689.16 L1688.31 689.16 L1688.87 689.16 L1689.43 689.16 L1689.99 689.16 L1690.55 689.16 L1691.11 689.16 L1691.67 689.16 L1692.23 689.16 L1692.78 689.16 L1693.34 689.16 L1693.9 689.16 L1694.46 689.16 L1695.02 689.16 L1695.58 689.16 L1696.14 689.16 L1696.7 689.16 L1697.26 689.16 L1697.82 689.16 L1698.38 689.16 L1698.94 689.16 L1699.5 689.16 L1700.05 689.16 L1700.61 689.16 L1701.17 689.16 L1701.73 689.16 L1702.29 689.16 L1702.85 689.16 L1703.41 689.16 L1703.97 689.16 L1704.53 689.16 L1705.09 689.16 L1705.65 689.16 L1706.21 689.16 L1706.77 689.16 L1707.32 689.16 L1707.88 689.16 L1708.44 689.16 L1709 689.16 L1709.56 689.16 L1710.12 689.16 L1710.68 689.16 L1711.24 689.16 L1711.8 689.16 L1712.36 689.16 L1712.92 689.16 L1713.48 689.16 L1714.04 689.16 L1714.6 689.16 L1715.15 689.16 L1715.71 689.16 L1716.27 689.16 L1716.83 689.16 L1717.39 689.16 L1717.95 689.16 L1718.51 689.16 L1719.07 689.16 L1719.63 689.16 L1720.19 689.16 L1720.75 689.16 L1721.31 689.16 L1721.87 689.16 L1722.42 689.16 L1722.98 689.16 L1723.54 689.16 L1724.1 689.16 L1724.66 689.16 L1725.22 689.16 L1725.78 689.16 L1726.34 689.16 L1726.9 689.16 L1727.46 689.16 L1728.02 689.16 L1728.58 689.16 L1729.14 689.16 L1729.69 689.16 L1730.25 689.16 L1730.81 689.16 L1731.37 689.16 L1731.93 689.16 L1732.49 689.16 L1733.05 689.16 L1733.61 689.16 L1734.17 689.16 L1734.73 689.16 L1735.29 689.16 L1735.85 689.16 L1736.41 689.16 L1736.97 689.16 L1737.52 689.16 L1738.08 689.16 L1738.64 689.16 L1739.2 689.16 L1739.76 689.16 L1740.32 689.16 L1740.88 689.16 L1741.44 689.16 L1742 689.16 L1742.56 689.16 L1743.12 689.16 L1743.68 689.16 L1744.24 689.16 L1744.79 689.16 L1745.35 689.16 L1745.91 689.16 L1746.47 689.16 L1747.03 689.16 L1747.59 689.16 L1748.15 689.16 L1748.71 689.16 L1749.27 689.16 L1749.83 689.16 L1750.39 689.16 L1750.95 689.16 L1751.51 689.16 L1752.06 689.16 L1752.62 689.16 L1753.18 689.16 L1753.74 689.16 L1754.3 689.16 L1754.86 689.16 L1755.42 689.16 L1755.98 689.16 L1756.54 689.16 L1757.1 689.16 L1757.66 689.16 L1758.22 689.16 L1758.78 689.16 L1759.34 689.16 L1759.89 689.16 L1760.45 689.16 L1761.01 689.16 L1761.57 689.16 L1762.13 689.16 L1762.69 689.16 L1763.25 689.16 L1763.81 689.16 L1764.37 689.16 L1764.93 689.16 L1765.49 689.16 L1766.05 689.16 L1766.61 689.16 L1767.16 689.16 L1767.72 689.16 L1768.28 689.16 L1768.84 689.16 L1769.4 689.16 L1769.96 689.16 L1770.52 689.16 L1771.08 689.16 L1771.64 689.16 L1772.2 689.16 L1772.76 689.16 L1773.32 689.16 L1773.88 689.16 L1774.43 689.16 L1774.99 689.16 L1775.55 689.16 L1776.11 689.16 L1776.67 689.16 L1777.23 689.16 L1777.79 689.16 L1778.35 689.16 L1778.91 689.16 L1779.47 689.16 L1780.03 689.16 L1780.59 689.16 L1781.15 689.16 L1781.71 689.16 L1782.26 689.16 L1782.82 689.16 L1783.38 689.16 L1783.94 689.16 L1784.5 689.16 L1785.06 689.16 L1785.62 689.16 L1786.18 689.16 L1786.74 689.16 L1787.3 689.16 L1787.86 689.16 L1788.42 689.16 L1788.98 689.16 L1789.53 689.16 L1790.09 689.16 L1790.65 689.16 L1791.21 689.16 L1791.77 689.16 L1792.33 689.16 L1792.89 689.16 L1793.45 689.16 L1794.01 689.16 L1794.57 689.16 L1795.13 689.16 L1795.69 689.16 L1796.25 689.16 L1796.8 689.16 L1797.36 689.16 L1797.92 689.16 L1798.48 689.16 L1799.04 689.16 L1799.6 689.16 L1800.16 689.16 L1800.72 689.16 L1801.28 689.16 L1801.84 689.16 L1802.4 689.16 L1802.96 689.16 L1803.52 689.16 L1804.08 689.16 L1804.63 689.16 L1805.19 689.16 L1805.75 689.16 L1806.31 689.16 L1806.87 689.16 L1807.43 689.16 L1807.99 689.16 L1808.55 689.16 L1809.11 689.16 L1809.67 689.16 L1810.23 689.16 L1810.79 689.16 L1811.35 689.16 L1811.9 689.16 L1812.46 689.16 L1813.02 689.16 L1813.58 689.16 L1814.14 689.16 L1814.7 689.16 L1815.26 689.16 L1815.82 689.16 L1816.38 689.16 L1816.94 689.16 L1817.5 689.16 L1818.06 689.16 L1818.62 689.16 L1819.18 689.16 L1819.73 689.16 L1820.29 689.16 L1820.85 689.16 L1821.41 689.16 L1821.97 689.16 L1822.53 689.16 L1823.09 689.16 L1823.65 689.16 L1824.21 689.16 L1824.77 689.16 L1825.33 689.16 L1825.89 689.16 L1826.45 689.16 L1827 689.16 L1827.56 689.16 L1828.12 689.16 L1828.68 689.16 L1829.24 689.16 L1829.8 689.16 L1830.36 689.16 L1830.92 689.16 L1831.48 689.16 L1832.04 689.16 L1832.6 689.16 L1833.16 689.16 L1833.72 689.16 L1834.27 689.16 L1834.83 689.16 L1835.39 689.16 L1835.95 689.16 L1836.51 689.16 L1837.07 689.16 L1837.63 689.16 L1838.19 689.16 L1838.19 682.033 L1837.63 682.033 L1837.07 682.033 L1836.51 682.033 L1835.95 682.033 L1835.39 682.033 L1834.83 682.033 L1834.27 682.033 L1833.72 682.033 L1833.16 682.033 L1832.6 682.033 L1832.04 682.033 L1831.48 682.033 L1830.92 682.033 L1830.36 682.033 L1829.8 682.033 L1829.24 682.033 L1828.68 682.033 L1828.12 682.033 L1827.56 682.033 L1827 682.033 L1826.45 682.033 L1825.89 682.033 L1825.33 682.033 L1824.77 682.033 L1824.21 682.033 L1823.65 682.033 L1823.09 682.033 L1822.53 682.033 L1821.97 682.033 L1821.41 682.033 L1820.85 682.033 L1820.29 682.033 L1819.73 682.033 L1819.18 682.033 L1818.62 682.033 L1818.06 682.033 L1817.5 682.033 L1816.94 682.033 L1816.38 682.033 L1815.82 682.033 L1815.26 682.033 L1814.7 682.033 L1814.14 682.033 L1813.58 682.033 L1813.02 682.033 L1812.46 682.033 L1811.9 682.033 L1811.35 682.033 L1810.79 682.033 L1810.23 682.033 L1809.67 682.033 L1809.11 682.033 L1808.55 682.033 L1807.99 682.033 L1807.43 682.033 L1806.87 682.033 L1806.31 682.033 L1805.75 682.033 L1805.19 682.033 L1804.63 682.033 L1804.08 682.033 L1803.52 682.033 L1802.96 682.033 L1802.4 682.033 L1801.84 682.033 L1801.28 682.033 L1800.72 682.033 L1800.16 682.033 L1799.6 682.033 L1799.04 682.033 L1798.48 682.033 L1797.92 682.033 L1797.36 682.033 L1796.8 682.033 L1796.25 682.033 L1795.69 682.033 L1795.13 682.033 L1794.57 682.033 L1794.01 682.033 L1793.45 682.033 L1792.89 682.033 L1792.33 682.033 L1791.77 682.033 L1791.21 682.033 L1790.65 682.033 L1790.09 682.033 L1789.53 682.033 L1788.98 682.033 L1788.42 682.033 L1787.86 682.033 L1787.3 682.033 L1786.74 682.033 L1786.18 682.033 L1785.62 682.033 L1785.06 682.033 L1784.5 682.033 L1783.94 682.033 L1783.38 682.033 L1782.82 682.033 L1782.26 682.033 L1781.71 682.033 L1781.15 682.033 L1780.59 682.033 L1780.03 682.033 L1779.47 682.033 L1778.91 682.033 L1778.35 682.033 L1777.79 682.033 L1777.23 682.033 L1776.67 682.033 L1776.11 682.033 L1775.55 682.033 L1774.99 682.033 L1774.43 682.033 L1773.88 682.033 L1773.32 682.033 L1772.76 682.033 L1772.2 682.033 L1771.64 682.033 L1771.08 682.033 L1770.52 682.033 L1769.96 682.033 L1769.4 682.033 L1768.84 682.033 L1768.28 682.033 L1767.72 682.033 L1767.16 682.033 L1766.61 682.033 L1766.05 682.033 L1765.49 682.033 L1764.93 682.033 L1764.37 682.033 L1763.81 682.033 L1763.25 682.033 L1762.69 682.033 L1762.13 682.033 L1761.57 682.033 L1761.01 682.033 L1760.45 682.033 L1759.89 682.033 L1759.34 682.033 L1758.78 682.033 L1758.22 682.033 L1757.66 682.033 L1757.1 682.033 L1756.54 682.033 L1755.98 682.033 L1755.42 682.033 L1754.86 682.033 L1754.3 682.033 L1753.74 682.033 L1753.18 682.033 L1752.62 682.033 L1752.06 682.033 L1751.51 682.033 L1750.95 682.033 L1750.39 682.033 L1749.83 682.033 L1749.27 682.033 L1748.71 682.033 L1748.15 682.033 L1747.59 682.033 L1747.03 682.033 L1746.47 682.033 L1745.91 682.033 L1745.35 682.033 L1744.79 682.033 L1744.24 682.033 L1743.68 682.033 L1743.12 682.033 L1742.56 682.033 L1742 682.033 L1741.44 682.033 L1740.88 682.033 L1740.32 682.033 L1739.76 682.033 L1739.2 682.033 L1738.64 682.033 L1738.08 682.033 L1737.52 682.033 L1736.97 682.033 L1736.41 682.033 L1735.85 682.033 L1735.29 682.033 L1734.73 682.033 L1734.17 682.033 L1733.61 682.033 L1733.05 682.033 L1732.49 682.033 L1731.93 682.033 L1731.37 682.033 L1730.81 682.033 L1730.25 682.033 L1729.69 682.033 L1729.14 682.033 L1728.58 682.033 L1728.02 682.033 L1727.46 682.033 L1726.9 682.033 L1726.34 682.033 L1725.78 682.033 L1725.22 682.033 L1724.66 682.033 L1724.1 682.033 L1723.54 682.033 L1722.98 682.033 L1722.42 682.033 L1721.87 682.033 L1721.31 682.033 L1720.75 682.033 L1720.19 682.033 L1719.63 682.033 L1719.07 682.033 L1718.51 682.033 L1717.95 682.033 L1717.39 682.033 L1716.83 682.033 L1716.27 682.033 L1715.71 682.033 L1715.15 682.033 L1714.6 682.033 L1714.04 682.033 L1713.48 682.033 L1712.92 682.033 L1712.36 682.033 L1711.8 682.033 L1711.24 682.033 L1710.68 682.033 L1710.12 682.033 L1709.56 682.033 L1709 682.033 L1708.44 682.033 L1707.88 682.033 L1707.32 682.033 L1706.77 682.033 L1706.21 682.033 L1705.65 682.033 L1705.09 682.033 L1704.53 682.033 L1703.97 682.033 L1703.41 682.033 L1702.85 682.033 L1702.29 682.033 L1701.73 682.033 L1701.17 682.033 L1700.61 682.033 L1700.05 682.033 L1699.5 682.033 L1698.94 682.033 L1698.38 682.033 L1697.82 682.033 L1697.26 682.033 L1696.7 682.033 L1696.14 682.033 L1695.58 682.033 L1695.02 682.033 L1694.46 682.033 L1693.9 682.033 L1693.34 682.033 L1692.78 682.033 L1692.23 682.033 L1691.67 682.033 L1691.11 682.033 L1690.55 682.033 L1689.99 682.033 L1689.43 682.033 L1688.87 682.033 L1688.31 682.033 L1687.75 682.033 L1687.19 682.033 L1686.63 682.033 L1686.07 682.033 L1685.51 682.033 L1684.95 682.033 L1684.4 682.033 L1683.84 682.033 L1683.28 682.033 L1682.72 682.033 L1682.16 682.033 L1681.6 682.033 L1681.04 682.033 L1680.48 682.033 L1679.92 682.033 L1679.36 682.033 L1678.8 682.033 L1678.24 682.033 L1677.68 682.033 L1677.13 682.033 L1676.57 682.033 L1676.01 682.033 L1675.45 682.033 L1674.89 682.033 L1674.33 682.033 L1673.77 682.033 L1673.21 682.033 L1672.65 682.033 L1672.09 682.033 L1671.53 682.033 L1670.97 682.033 L1670.41 682.033 L1669.85 682.033 L1669.3 682.033 L1668.74 682.033 L1668.18 682.033 L1667.62 682.033 L1667.06 682.033 L1666.5 682.033 L1665.94 682.033 L1665.38 682.033 L1664.82 682.033 L1664.26 682.033 L1663.7 682.033 L1663.14 682.033 L1662.58 682.033 L1662.03 682.033 L1661.47 682.033 L1660.91 682.033 L1660.35 682.033 L1659.79 682.033 L1659.23 682.033 L1658.67 682.033 L1658.11 682.033 L1657.55 682.033 L1656.99 682.033 L1656.43 682.033 L1655.87 682.033 L1655.31 682.033 L1654.76 682.033 L1654.2 682.033 L1653.64 682.033 L1653.08 682.033 L1652.52 682.033 L1651.96 682.033 L1651.4 682.033 L1650.84 682.033 L1650.28 682.033 L1649.72 682.033 L1649.16 682.033 L1648.6 682.033 L1648.04 682.033 L1647.48 682.033 L1646.93 682.033 L1646.37 682.033 L1645.81 682.033 L1645.25 682.033 L1644.69 682.033 L1644.13 682.033 L1643.57 682.033 L1643.01 682.033 L1642.45 682.033 L1641.89 682.033 L1641.33 682.033 L1640.77 682.033 L1640.21 682.033 L1639.66 682.033 L1639.1 682.033 L1638.54 682.033 L1637.98 682.033 L1637.42 682.033 L1636.86 682.033 L1636.3 682.033 L1635.74 682.033 L1635.18 682.033 L1634.62 682.033 L1634.06 682.033 L1633.5 682.033 L1632.94 682.033 L1632.39 682.033 L1631.83 682.033 L1631.27 682.033 L1630.71 682.033 L1630.15 682.033 L1629.59 682.033 L1629.03 682.033 L1628.47 682.033 L1627.91 682.033 L1627.35 682.033 L1626.79 682.033 L1626.23 682.033 L1625.67 682.033 L1625.11 682.033 L1624.56 682.033 L1624 682.033 L1623.44 682.033 L1622.88 682.033 L1622.32 682.033 L1621.76 682.033 L1621.2 682.033 L1620.64 682.033 L1620.08 682.033 L1619.52 682.033 L1618.96 682.033 L1618.4 682.033 L1617.84 682.033 L1617.29 682.033 L1616.73 682.033 L1616.17 682.033 L1615.61 682.033 L1615.05 682.033 L1614.49 682.033 L1613.93 682.033 L1613.37 682.033 L1612.81 682.033 L1612.25 682.033 L1611.69 682.033 L1611.13 682.033 L1610.57 682.033 L1610.02 682.033 L1609.46 682.033 L1608.9 682.033 L1608.34 682.033 L1607.78 682.033 L1607.22 682.033 L1606.66 682.033 L1606.1 682.033 L1605.54 682.033 L1604.98 682.033 L1604.42 682.033 L1603.86 682.033 L1603.3 682.033 L1602.74 682.033 L1602.19 682.033 L1601.63 682.033 L1601.07 682.033 L1600.51 682.033 L1599.95 682.033 L1599.39 682.033 L1598.83 682.033 L1598.27 682.033 L1597.71 682.033 L1597.15 682.033 L1596.59 682.033 L1596.03 682.033 L1595.47 682.033 L1594.92 682.033 L1594.36 682.033 L1593.8 682.033 L1593.24 682.033 L1592.68 682.033 L1592.12 682.033 L1591.56 682.033 L1591 682.033 L1590.44 682.033 L1589.88 682.033 L1589.32 682.033 L1588.76 682.033 L1588.2 682.033 L1587.65 682.033 L1587.09 682.033 L1586.53 682.033 L1585.97 682.033 L1585.41 682.033 L1584.85 682.033 L1584.29 682.033 L1583.73 682.033 L1583.17 682.033 L1582.61 682.033 L1582.05 682.033 L1581.49 682.033 L1580.93 682.033 L1580.37 682.033 L1579.82 682.033 L1579.26 682.033 L1578.7 682.033 L1578.14 682.033 L1577.58 682.033 L1577.02 682.033 L1576.46 682.033 L1575.9 682.033 L1575.34 682.033 L1574.78 682.033 L1574.22 682.033 L1573.66 682.033 L1573.1 682.033 L1572.55 682.033 L1571.99 682.033 L1571.43 682.033 L1570.87 682.033 L1570.31 682.033 L1569.75 682.033 L1569.19 682.033 L1568.63 682.033 L1568.07 682.033 L1567.51 682.033 L1566.95 682.033 L1566.39 682.033 L1565.83 682.033 L1565.28 682.033 L1564.72 682.033 L1564.16 682.033 L1563.6 682.033 L1563.04 682.033 L1562.48 682.033 L1561.92 682.033 L1561.36 682.033 L1560.8 682.033 L1560.24 682.033 L1559.68 682.033 L1559.12 682.033 L1558.56 682.033 L1558 682.033 L1557.45 682.033 L1556.89 682.033 L1556.33 682.033 L1555.77 682.033 L1555.21 682.033 L1554.65 682.033 L1554.09 682.033 L1553.53 682.033 L1552.97 682.033 L1552.41 682.033 L1551.85 682.033 L1551.29 682.033 L1550.73 682.033 L1550.18 682.033 L1549.62 682.033 L1549.06 682.033 L1548.5 682.033 L1547.94 682.033 L1547.38 682.033 L1546.82 682.033 L1546.26 682.033 L1545.7 682.033 L1545.14 682.033 L1544.58 682.033 L1544.02 682.033 L1543.46 682.033 L1542.9 682.033 L1542.35 682.033 L1541.79 682.033 L1541.23 682.033 L1540.67 682.033 L1540.11 682.033 L1539.55 682.033 L1538.99 682.033 L1538.43 682.033 L1537.87 682.033 L1537.31 682.033 L1536.75 682.033 L1536.19 682.033 L1535.63 682.033 L1535.08 682.033 L1534.52 682.033 L1533.96 682.033 L1533.4 682.033 L1532.84 682.033 L1532.28 682.033 L1531.72 682.033 L1531.16 682.033 L1530.6 682.033 L1530.04 682.033 L1529.48 682.033 L1528.92 682.033 L1528.36 682.033 L1527.81 682.033 L1527.25 682.033 L1526.69 682.033 L1526.13 682.033 L1525.57 682.033 L1525.01 682.033 L1524.45 682.033 L1523.89 682.033 L1523.33 682.033 L1522.77 682.033 L1522.21 682.033 L1521.65 682.033 L1521.09 682.033 L1520.53 682.033 L1519.98 682.033 L1519.42 682.033 L1518.86 682.033 L1518.3 682.033 L1517.74 682.033 L1517.18 682.033 L1516.62 682.033 L1516.06 682.033 L1515.5 682.033 L1514.94 682.033 L1514.38 682.033 L1513.82 682.033 L1513.26 682.033 L1512.71 682.033 L1512.15 682.033 L1511.59 682.033 L1511.03 682.033 L1510.47 682.033 L1509.91 682.033 L1509.35 682.033 L1508.79 682.033 L1508.23 682.033 L1507.67 682.033 L1507.11 682.033 L1506.55 682.033 L1505.99 682.033 L1505.44 682.033 L1504.88 682.033 L1504.32 682.033 L1503.76 682.033 L1503.2 682.033 L1502.64 682.033 L1502.08 682.033 L1501.52 682.033 L1500.96 682.033 L1500.4 682.033 L1499.84 682.033 L1499.28 682.033 L1498.72 682.033 L1498.16 682.033 L1497.61 682.033 L1497.05 682.033 L1496.49 682.033 L1495.93 682.033 L1495.37 682.033 L1494.81 682.033 L1494.25 682.033 L1493.69 682.033 L1493.13 682.033 L1492.57 682.033 L1492.01 682.033 L1491.45 682.033 L1490.89 682.033 L1490.34 682.033 L1489.78 682.033 L1489.22 682.033 L1488.66 682.033 L1488.1 682.033 L1487.54 682.033 L1486.98 682.033 L1486.42 682.033 L1485.86 682.033 L1485.3 682.033 L1484.74 682.033 L1484.18 682.033 L1483.62 682.033 L1483.07 682.033 L1482.51 682.033 L1481.95 682.033 L1481.39 682.033 L1480.83 682.033 L1480.27 682.033 L1479.71 682.033 L1479.15 682.033 L1478.59 682.033 L1478.03 682.033 L1477.47 682.033 L1476.91 682.033 L1476.35 682.033 L1475.79 682.033 L1475.24 682.033 L1474.68 682.033 L1474.12 682.033 L1473.56 682.033 L1473 682.033 L1472.44 682.033 L1471.88 682.033 L1471.32 682.033 L1470.76 682.033 L1470.2 682.033 L1469.64 682.033 L1469.08 682.033 L1468.52 682.033 L1467.97 682.033 L1467.41 682.033 L1466.85 682.033 L1466.29 682.033 L1465.73 682.033 L1465.17 682.033 L1464.61 682.033 L1464.05 682.033 L1463.49 682.033 L1462.93 682.033 L1462.37 682.033 L1461.81 682.033 L1461.25 682.033 L1460.7 682.033 L1460.14 682.033 L1459.58 682.033 L1459.02 682.033 L1458.46 682.033 L1457.9 682.033 L1457.34 682.033 L1456.78 682.033 L1456.22 682.033 L1455.66 682.033 L1455.1 682.033 L1454.54 682.033 L1453.98 682.033 L1453.42 682.033 L1452.87 682.033 L1452.31 682.033 L1451.75 682.033 L1451.19 682.033 L1450.63 682.033 L1450.07 682.033 L1449.51 682.033 L1448.95 682.033 L1448.39 682.033 L1447.83 682.033 L1447.27 682.033 L1446.71 682.033 L1446.15 682.033 L1445.6 682.033 L1445.04 682.033 L1444.48 682.033 L1443.92 682.033 L1443.36 682.033 L1442.8 682.033 L1442.24 682.033 L1441.68 682.033 L1441.12 682.033 L1440.56 682.033 L1440 682.033 L1439.44 682.033 L1438.88 682.033 L1438.33 682.033 L1437.77 682.033 L1437.21 682.033 L1436.65 682.033 L1436.09 682.033 L1435.53 682.033 L1434.97 682.033 L1434.41 682.033 L1433.85 682.033 L1433.29 682.033 L1432.73 682.033 L1432.17 682.033 L1431.61 682.033 L1431.05 682.033 L1430.5 682.033 L1429.94 682.033 L1429.38 682.033 L1428.82 682.033 L1428.26 682.033 L1427.7 682.033 L1427.14 682.033 L1426.58 682.033 L1426.02 682.033 L1425.46 682.033 L1424.9 682.033 L1424.34 682.033 L1423.78 682.033 L1423.23 682.033 L1422.67 682.033 L1422.11 682.033 L1421.55 682.033 L1420.99 682.033 L1420.43 682.033 L1419.87 682.033 L1419.31 682.033 L1418.75 682.033 L1418.19 682.033 L1417.63 682.033 L1417.07 682.033 L1416.51 682.033 L1415.95 682.033 L1415.4 682.033 L1414.84 682.033 L1414.28 682.033 L1413.72 682.033 L1413.16 682.033 L1412.6 682.033 L1412.04 682.033 L1411.48 682.033 L1410.92 682.033 L1410.36 682.033 L1409.8 682.033 L1409.24 682.033 L1408.68 682.033 L1408.13 682.033 L1407.57 682.033 L1407.01 682.033 L1406.45 682.033 L1405.89 682.033 L1405.33 682.033 L1404.77 682.033 L1404.21 682.033 L1403.65 682.033 L1403.09 682.033 L1402.53 682.033 L1401.97 682.033 L1401.41 682.033 L1400.86 682.033 L1400.3 682.033 L1399.74 682.033 L1399.18 682.033 L1398.62 682.033 L1398.06 682.033 L1397.5 682.033 L1396.94 682.033 L1396.38 682.033 L1395.82 682.033 L1395.26 682.033 L1394.7 682.033 L1394.14 682.033 L1393.58 682.033 L1393.03 682.033 L1392.47 682.033 L1391.91 682.033 L1391.35 682.033 L1390.79 682.033 L1390.23 682.033 L1389.67 682.033 L1389.11 682.033 L1388.55 682.033 L1387.99 682.033 L1387.43 682.033 L1386.87 682.033 L1386.31 682.033 L1385.76 682.033 L1385.2 682.033 L1384.64 682.033 L1384.08 682.033 L1383.52 682.033 L1382.96 682.033 L1382.4 682.033 L1381.84 682.033 L1381.28 682.033 L1380.72 682.033 L1380.16 682.033 L1379.6 682.033 L1379.04 682.033 L1378.49 682.033 L1377.93 682.033 L1377.37 682.033 L1376.81 682.033 L1376.25 682.033 L1375.69 682.033 L1375.13 682.033 L1374.57 682.033 L1374.01 682.033 L1373.45 682.033 L1372.89 682.033 L1372.33 682.033 L1371.77 682.033 L1371.21 682.033 L1370.66 682.033 L1370.1 682.033 L1369.54 682.033 L1368.98 682.033 L1368.42 682.033 L1367.86 682.033 L1367.3 682.033 L1366.74 682.033 L1366.18 682.033 L1365.62 682.033 L1365.06 682.033 L1364.5 682.033 L1363.94 682.033 L1363.39 682.033 L1362.83 682.033 L1362.27 682.033 L1361.71 682.033 L1361.15 682.033 L1360.59 682.033 L1360.03 682.033 L1359.47 682.033 L1358.91 682.033 L1358.35 682.033 L1357.79 682.033 L1357.23 682.033 L1356.67 682.033 L1356.12 682.033 L1355.56 682.033 L1355 682.033 L1354.44 682.033 L1353.88 682.033 L1353.32 682.033 L1352.76 682.033 L1352.2 682.033 L1351.64 682.033 L1351.08 682.033 L1350.52 682.033 L1349.96 682.033 L1349.4 682.033 L1348.84 682.033 L1348.29 682.033 L1347.73 682.033 L1347.17 682.033 L1346.61 682.033 L1346.05 682.033 L1345.49 682.033 L1344.93 682.033 L1344.37 682.033 L1343.81 682.033 L1343.25 682.033 L1342.69 682.033 L1342.13 682.033 L1341.57 682.033 L1341.02 682.033 L1340.46 682.033 L1339.9 682.033 L1339.34 682.033 L1338.78 682.033 L1338.22 682.033 L1337.66 682.033 L1337.1 682.033 L1336.54 682.033 L1335.98 682.033 L1335.42 682.033 L1334.86 682.033 L1334.3 682.033 L1333.75 682.033 L1333.19 682.033 L1332.63 682.033 L1332.07 682.033 L1331.51 682.033 L1330.95 682.033 L1330.39 682.033 L1329.83 682.033 L1329.27 682.033 L1328.71 682.033 L1328.15 682.033 L1327.59 682.033 L1327.03 682.033 L1326.47 682.033 L1325.92 682.033 L1325.36 682.033 L1324.8 682.033 L1324.24 682.033 L1323.68 682.033 L1323.12 682.033 L1322.56 682.033 L1322 682.033 L1321.44 682.033 L1320.88 682.033 L1320.32 682.033 L1319.76 682.033 L1319.2 682.033 L1318.65 682.033 L1318.09 682.033 L1317.53 682.033 L1316.97 682.033 L1316.41 682.033 L1315.85 682.033 L1315.29 682.033 L1314.73 682.033 L1314.17 682.033 L1313.61 682.033 L1313.05 682.033 L1312.49 682.033 L1311.93 682.033 L1311.38 682.033 L1310.82 682.033 L1310.26 682.033 L1309.7 682.033 L1309.14 682.033 L1308.58 682.033 L1308.02 682.033 L1307.46 682.033 L1306.9 682.033 L1306.34 682.033 L1305.78 682.033 L1305.22 682.033 L1304.66 682.033 L1304.1 682.033 L1303.55 682.033 L1302.99 682.033 L1302.43 682.033 L1301.87 682.033 L1301.31 682.033 L1300.75 682.033 L1300.19 682.033 L1299.63 682.033 L1299.07 682.033 L1298.51 682.033 L1297.95 682.033 L1297.39 682.033 L1296.83 682.033 L1296.28 682.033 L1295.72 682.033 L1295.16 682.033 L1294.6 682.033 L1294.04 682.033 L1293.48 682.033 L1292.92 682.033 L1292.36 682.033 L1291.8 682.033 L1291.24 682.033 L1290.68 682.033 L1290.12 682.033 L1289.56 682.033 L1289 682.033 L1288.45 682.033 L1287.89 682.033 L1287.33 682.033 L1286.77 682.033 L1286.21 682.033 L1285.65 682.033 L1285.09 682.033 L1284.53 682.033 L1283.97 682.033 L1283.41 682.033 L1282.85 682.033 L1282.29 682.033 L1281.73 682.033 L1281.18 682.033 L1280.62 682.033 L1280.06 682.033 L1279.5 682.033 L1278.94 682.033 L1278.38 682.033 L1277.82 682.033 L1277.26 682.033 L1276.7 682.033 L1276.14 682.033 L1275.58 682.033 L1275.02 682.033 L1274.46 682.033 L1273.91 682.033 L1273.35 682.033 L1272.79 682.033 L1272.23 682.033 L1271.67 682.033 L1271.11 682.033 L1270.55 682.033 L1269.99 682.033 L1269.43 682.033 L1268.87 682.033 L1268.31 682.033 L1267.75 682.033 L1267.19 682.033 L1266.63 682.033 L1266.08 682.033 L1265.52 682.033 L1264.96 682.033 L1264.4 682.033 L1263.84 682.033 L1263.28 682.033 L1262.72 682.033 L1262.16 682.033 L1261.6 682.033 L1261.04 682.033 L1260.48 682.033 L1259.92 682.033 L1259.36 682.033 L1258.81 682.033 L1258.25 682.033 L1257.69 682.033 L1257.13 682.033 L1256.57 682.033 L1256.01 682.033 L1255.45 682.033 L1254.89 682.033 L1254.33 682.033 L1253.77 682.033 L1253.21 682.033 L1252.65 682.033 L1252.09 682.033 L1251.54 682.033 L1250.98 682.033 L1250.42 682.033 L1249.86 682.033 L1249.3 682.033 L1248.74 682.033 L1248.18 682.033 L1247.62 682.033 L1247.06 682.033 L1246.5 682.033 L1245.94 682.033 L1245.38 682.033 L1244.82 682.033 L1244.26 682.033 L1243.71 682.033 L1243.15 682.033 L1242.59 682.033 L1242.03 682.033 L1241.47 682.033 L1240.91 682.033 L1240.35 682.033 L1239.79 682.033 L1239.23 682.033 L1238.67 682.033 L1238.11 682.033 L1237.55 682.033 L1236.99 682.033 L1236.44 682.033 L1235.88 682.033 L1235.32 682.033 L1234.76 682.033 L1234.2 682.033 L1233.64 682.033 L1233.08 682.033 L1232.52 682.033 L1231.96 682.033 L1231.4 682.033 L1230.84 682.033 L1230.28 682.033 L1229.72 682.033 L1229.17 682.033 L1228.61 682.033 L1228.05 682.033 L1227.49 682.033 L1226.93 682.033 L1226.37 682.033 L1225.81 682.033 L1225.25 682.033 L1224.69 682.033 L1224.13 682.033 L1223.57 682.033 L1223.01 682.033 L1222.45 682.033 L1221.89 682.033 L1221.34 682.033 L1220.78 682.033 L1220.22 682.033 L1219.66 682.033 L1219.1 682.033 L1218.54 682.033 L1217.98 682.033 L1217.42 682.033 L1216.86 682.033 L1216.3 682.033 L1215.74 682.033 L1215.18 682.033 L1214.62 682.033 L1214.07 682.033 L1213.51 682.033 L1212.95 682.033 L1212.39 682.033 L1211.83 682.033 L1211.27 682.033 L1210.71 682.033 L1210.15 682.033 L1209.59 682.033 L1209.03 682.033 L1208.47 682.033 L1207.91 682.033 L1207.35 682.033 L1206.8 682.033 L1206.24 682.033 L1205.68 682.033 L1205.12 682.033 L1204.56 682.033 L1204 682.033 L1203.44 682.033 L1202.88 682.033 L1202.32 682.033 L1201.76 682.033 L1201.2 682.033 L1200.64 682.033 L1200.08 682.033 L1199.52 682.033 L1198.97 682.033 L1198.41 682.033 L1197.85 682.033 L1197.29 682.033 L1196.73 682.033 L1196.17 682.033 L1195.61 682.033 L1195.05 682.033 L1194.49 682.033 L1193.93 682.033 L1193.37 682.033 L1192.81 682.033 L1192.25 682.033 L1191.7 682.033 L1191.14 682.033 L1190.58 682.033 L1190.02 682.033 L1189.46 682.033 L1188.9 682.033 L1188.34 682.033 L1187.78 682.033 L1187.22 682.033 L1186.66 682.033 L1186.1 682.033 L1185.54 682.033 L1184.98 682.033 L1184.43 682.033 L1183.87 682.033 L1183.31 682.033 L1182.75 682.033 L1182.19 682.033 L1181.63 682.033 L1181.07 682.033 L1180.51 682.033 L1179.95 682.033 L1179.39 682.033 L1178.83 682.033 L1178.27 682.033 L1177.71 682.033 L1177.15 682.033 L1176.6 682.033 L1176.04 682.033 L1175.48 682.033 L1174.92 682.033 L1174.36 682.033 L1173.8 682.033 L1173.24 682.033 L1172.68 682.033 L1172.12 682.033 L1171.56 682.033 L1171 682.033 L1170.44 682.033 L1169.88 682.033 L1169.33 682.033 L1168.77 682.033 L1168.21 682.033 L1167.65 682.033 L1167.09 682.033 L1166.53 682.033 L1165.97 682.033 L1165.41 682.033 L1164.85 682.033 L1164.29 682.033 L1163.73 682.033 L1163.17 682.033 L1162.61 682.033 L1162.05 682.033 L1161.5 682.033 L1160.94 682.033 L1160.38 682.033 L1159.82 682.033 L1159.26 682.033 L1158.7 682.033 L1158.14 682.033 L1157.58 682.033 L1157.02 682.033 L1156.46 682.033 L1155.9 682.033 L1155.34 682.033 L1154.78 682.033 L1154.23 682.033 L1153.67 682.033 L1153.11 682.033 L1152.55 682.033 L1151.99 682.033 L1151.43 682.033 L1150.87 682.033 L1150.31 682.033 L1149.75 682.033 L1149.19 682.033 L1148.63 682.033 L1148.07 682.033 L1147.51 682.033 L1146.96 682.033 L1146.4 682.033 L1145.84 682.033 L1145.28 682.033 L1144.72 682.033 L1144.16 682.033 L1143.6 682.033 L1143.04 682.033 L1142.48 682.033 L1141.92 682.033 L1141.36 682.033 L1140.8 682.033 L1140.24 682.033 L1139.68 682.033 L1139.13 682.033 L1138.57 682.033 L1138.01 682.033 L1137.45 682.033 L1136.89 682.033 L1136.33 682.033 L1135.77 682.033 L1135.21 682.033 L1134.65 682.033 L1134.09 682.033 L1133.53 682.033 L1132.97 682.033 L1132.41 682.033 L1131.86 682.033 L1131.3 682.033 L1130.74 682.033 L1130.18 682.033 L1129.62 682.033 L1129.06 682.033 L1128.5 682.033 L1127.94 682.033 L1127.38 682.033 L1126.82 682.033 L1126.26 682.033 L1125.7 682.033 L1125.14 682.033 L1124.59 682.033 L1124.03 682.033 L1123.47 682.033 L1122.91 682.033 L1122.35 682.033 L1121.79 682.033 L1121.23 682.033 L1120.67 682.033 L1120.11 682.033 L1119.55 682.033 L1118.99 682.033 L1118.43 682.033 L1117.87 682.033 L1117.31 682.033 L1116.76 682.033 L1116.2 682.033 L1115.64 682.033 L1115.08 682.033 L1114.52 682.033 L1113.96 682.033 L1113.4 682.033 L1112.84 682.033 L1112.28 682.033 L1111.72 682.033 L1111.16 682.033 L1110.6 682.033 L1110.04 682.033 L1109.49 682.033 L1108.93 682.033 L1108.37 682.033 L1107.81 682.033 L1107.25 682.033 L1106.69 682.033 L1106.13 682.033 L1105.57 682.033 L1105.01 682.033 L1104.45 682.033 L1103.89 682.033 L1103.33 682.033 L1102.77 682.033 L1102.22 682.033 L1101.66 682.033 L1101.1 682.033 L1100.54 682.033 L1099.98 682.033 L1099.42 682.033 L1098.86 682.033 L1098.3 682.033 L1097.74 682.033 L1097.18 682.033 L1096.62 682.033 L1096.06 682.033 L1095.5 682.033 L1094.94 682.033 L1094.39 682.033 L1093.83 682.033 L1093.27 682.033 L1092.71 682.033 L1092.15 682.033 L1091.59 682.033 L1091.03 682.033 L1090.47 682.033 L1089.91 682.033 L1089.35 682.033 L1088.79 682.033 L1088.23 682.033 L1087.67 682.033 L1087.12 682.033 L1086.56 682.033 L1086 682.033 L1085.44 682.033 L1084.88 682.033 L1084.32 682.033 L1083.76 682.033 L1083.2 682.033 L1082.64 682.033 L1082.08 682.033 L1081.52 682.033 L1080.96 682.033 L1080.4 682.033 L1079.85 682.033 L1079.29 682.033 L1078.73 682.033 L1078.17 682.033 L1077.61 682.033 L1077.05 682.033 L1076.49 682.033 L1075.93 682.033 L1075.37 682.033 L1074.81 682.033 L1074.25 682.033 L1073.69 682.033 L1073.13 682.033 L1072.57 682.033 L1072.02 682.033 L1071.46 682.033 L1070.9 682.033 L1070.34 682.033 L1069.78 682.033 L1069.22 682.033 L1068.66 682.033 L1068.1 682.033 L1067.54 682.033 L1066.98 682.033 L1066.42 682.033 L1065.86 682.033 L1065.3 682.033 L1064.75 682.033 L1064.19 682.033 L1063.63 682.033 L1063.07 682.033 L1062.51 682.033 L1061.95 682.033 L1061.39 682.033 L1060.83 682.033 L1060.27 682.033 L1059.71 682.033 L1059.15 682.033 L1058.59 682.033 L1058.03 682.033 L1057.48 682.033 L1056.92 682.033 L1056.36 682.033 L1055.8 682.033 L1055.24 682.033 L1054.68 682.033 L1054.12 682.033 L1053.56 682.033 L1053 682.033 L1052.44 682.033 L1051.88 682.033 L1051.32 682.033 L1050.76 682.033 L1050.2 682.033 L1049.65 682.033 L1049.09 682.033 L1048.53 682.033 L1047.97 682.033 L1047.41 682.033 L1046.85 682.033 L1046.29 682.033 L1045.73 682.033 L1045.17 682.033 L1044.61 682.033 L1044.05 682.033 L1043.49 682.033 L1042.93 682.033 L1042.38 682.033 L1041.82 682.033 L1041.26 682.033 L1040.7 682.033 L1040.14 682.033 L1039.58 682.033 L1039.02 682.033 L1038.46 682.033 L1037.9 682.033 L1037.34 682.033 L1036.78 682.033 L1036.22 682.033 L1035.66 682.033 L1035.1 682.033 L1034.55 682.033 L1033.99 682.033 L1033.43 682.033 L1032.87 682.033 L1032.31 682.033 L1031.75 682.033 L1031.19 682.033 L1030.63 682.033 L1030.07 682.033 L1029.51 682.033 L1028.95 682.033 L1028.39 682.033 L1027.83 682.033 L1027.28 682.033 L1026.72 682.033 L1026.16 682.033 L1025.6 682.033 L1025.04 682.033 L1024.48 682.033 L1023.92 682.033 L1023.36 682.033 L1022.8 682.033 L1022.24 682.033 L1021.68 682.033 L1021.12 682.033 L1020.56 682.033 L1020.01 682.033 L1019.45 682.033 L1018.89 682.033 L1018.33 682.033 L1017.77 682.033 L1017.21 682.033 L1016.65 682.033 L1016.09 682.033 L1015.53 682.033 L1014.97 682.033 L1014.41 682.033 L1013.85 682.033 L1013.29 682.033 L1012.73 682.033 L1012.18 682.033 L1011.62 682.033 L1011.06 682.033 L1010.5 682.033 L1009.94 682.033 L1009.38 682.033 L1008.82 682.033 L1008.26 682.033 L1007.7 682.033 L1007.14 682.033 L1006.58 682.033 L1006.02 682.033 L1005.46 682.033 L1004.91 682.033 L1004.35 682.033 L1003.79 682.033 L1003.23 682.033 L1002.67 682.033 L1002.11 682.033 L1001.55 682.033 L1000.99 682.033 L1000.43 682.033 L999.872 682.033 L999.313 682.033 L998.754 682.033 L998.194 682.033 L997.635 682.033 L997.076 682.033 L996.517 682.033 L995.957 682.033 L995.398 682.033 L994.839 682.033 L994.28 682.033 L993.72 682.033 L993.161 682.033 L992.602 682.033 L992.043 682.033 L991.483 682.033 L990.924 682.033 L990.365 682.033 L989.806 682.033 L989.246 682.033 L988.687 682.033 L988.128 682.033 L987.569 682.033 L987.009 682.033 L986.45 682.033 L985.891 682.033 L985.332 682.033 L984.772 682.033 L984.213 682.033 L983.654 682.033 L983.095 682.033 L982.535 682.033 L981.976 682.033 L981.417 682.033 L980.858 682.033 L980.298 682.033 L979.739 682.033 L979.18 682.033 L978.621 682.033 L978.061 682.033 L977.502 682.033 L976.943 682.033 L976.384 682.033 L975.824 682.033 L975.265 682.033 L974.706 682.033 L974.147 682.033 L973.587 682.033 L973.028 682.033 L972.469 682.033 L971.91 682.033 L971.35 682.033 L970.791 682.033 L970.232 682.033 L969.673 682.033 L969.113 682.033 L968.554 682.033 L967.995 682.033 L967.436 682.033 L966.876 682.033 L966.317 682.033 L965.758 682.033 L965.199 682.033 L964.639 682.033 L964.08 682.033 L963.521 682.033 L962.962 682.033 L962.402 682.033 L961.843 682.033 L961.284 682.033 L960.725 682.033 L960.165 682.033 L959.606 682.033 L959.047 682.033 L958.488 682.033 L957.928 682.033 L957.369 682.033 L956.81 682.033 L956.251 682.033 L955.691 682.033 L955.132 682.033 L954.573 682.033 L954.014 682.033 L953.454 682.033 L952.895 682.033 L952.336 682.033 L951.777 682.033 L951.217 682.033 L950.658 682.033 L950.099 682.033 L949.54 682.033 L948.98 682.033 L948.421 682.033 L947.862 682.033 L947.303 682.033 L946.743 682.033 L946.184 682.033 L945.625 682.033 L945.066 682.033 L944.506 682.033 L943.947 682.033 L943.388 682.033 L942.829 682.033 L942.269 682.033 L941.71 682.033 L941.151 682.033 L940.592 682.033 L940.032 682.033 L939.473 682.033 L938.914 682.033 L938.355 682.033 L937.795 682.033 L937.236 682.033 L936.677 682.033 L936.118 682.033 L935.558 682.033 L934.999 682.033 L934.44 682.033 L933.881 682.033 L933.321 682.033 L932.762 682.033 L932.203 682.033 L931.644 682.033 L931.084 682.033 L930.525 682.033 L929.966 682.033 L929.406 682.033 L928.847 682.033 L928.288 682.033 L927.729 682.033 L927.169 682.033 L926.61 682.033 L926.051 682.033 L925.492 682.033 L924.932 682.033 L924.373 682.033 L923.814 682.033 L923.255 682.033 L922.695 682.033 L922.136 682.033 L921.577 682.033 L921.018 682.033 L920.458 682.033 L919.899 682.033 L919.34 682.033 L918.781 682.033 L918.221 682.033 L917.662 682.033 L917.103 682.033 L916.544 682.033 L915.984 682.033 L915.425 682.033 L914.866 682.033 L914.307 682.033 L913.747 682.033 L913.188 682.033 L912.629 682.033 L912.07 682.033 L911.51 682.033 L910.951 682.033 L910.392 682.033 L909.833 682.033 L909.273 682.033 L908.714 682.033 L908.155 682.033 L907.596 682.033 L907.036 682.033 L906.477 682.033 L905.918 682.033 L905.359 682.033 L904.799 682.033 L904.24 682.033 L903.681 682.033 L903.122 682.033 L902.562 682.033 L902.003 682.033 L901.444 682.033 L900.885 682.033 L900.325 682.033 L899.766 682.033 L899.207 682.033 L898.648 682.033 L898.088 682.033 L897.529 682.033 L896.97 682.033 L896.411 682.033 L895.851 682.033 L895.292 682.033 L894.733 682.033 L894.174 682.033 L893.614 682.033 L893.055 682.033 L892.496 682.033 L891.937 682.033 L891.377 682.033 L890.818 682.033 L890.259 682.033 L889.7 682.033 L889.14 682.033 L888.581 682.033 L888.022 682.033 L887.463 682.033 L886.903 682.033 L886.344 682.033 L885.785 682.033 L885.226 682.033 L884.666 682.033 L884.107 682.033 L883.548 682.033 L882.989 682.033 L882.429 682.033 L881.87 682.033 L881.311 682.033 L880.752 682.033 L880.192 682.033 L879.633 682.033 L879.074 682.033 L878.515 682.033 L877.955 682.033 L877.396 682.033 L876.837 682.033 L876.278 682.033 L875.718 682.033 L875.159 682.033 L874.6 682.033 L874.041 682.033 L873.481 682.033 L872.922 682.033 L872.363 682.033 L871.804 682.033 L871.244 682.033 L870.685 682.033 L870.126 682.033 L869.567 682.033 L869.007 682.033 L868.448 682.033 L867.889 682.033 L867.33 682.033 L866.77 682.033 L866.211 682.033 L865.652 682.033 L865.093 682.033 L864.533 682.033 L863.974 682.033 L863.415 682.033 L862.856 682.033 L862.296 682.033 L861.737 682.033 L861.178 682.033 L860.619 682.033 L860.059 682.033 L859.5 682.033 L858.941 682.033 L858.382 682.033 L857.822 682.033 L857.263 682.033 L856.704 682.033 L856.145 682.033 L855.585 682.033 L855.026 682.033 L854.467 682.033 L853.908 682.033 L853.348 682.033 L852.789 682.033 L852.23 682.033 L851.671 682.033 L851.111 682.033 L850.552 682.033 L849.993 682.033 L849.434 682.033 L848.874 682.033 L848.315 682.033 L847.756 682.033 L847.197 682.033 L846.637 682.033 L846.078 682.033 L845.519 682.033 L844.96 682.033 L844.4 682.033 L843.841 682.033 L843.282 682.033 L842.723 682.033 L842.163 682.033 L841.604 682.033 L841.045 682.033 L840.486 682.033 L839.926 682.033 L839.367 682.033 L838.808 682.033 L838.249 682.033 L837.689 682.033 L837.13 682.033 L836.571 682.033 L836.012 682.033 L835.452 682.033 L834.893 682.033 L834.334 682.033 L833.775 682.033 L833.215 682.033 L832.656 682.033 L832.097 682.033 L831.538 682.033 L830.978 682.033 L830.419 682.033 L829.86 682.033 L829.301 682.033 L828.741 682.033 L828.182 682.033 L827.623 682.033 L827.064 682.033 L826.504 682.033 L825.945 682.033 L825.386 682.033 L824.827 682.033 L824.267 682.033 L823.708 682.033 L823.149 682.033 L822.59 682.033 L822.03 682.033 L821.471 682.033 L820.912 682.033 L820.353 682.033 L819.793 682.033 L819.234 682.033 L818.675 682.033 L818.116 682.033 L817.556 682.033 L816.997 682.033 L816.438 682.033 L815.879 682.033 L815.319 682.033 L814.76 682.033 L814.201 682.033 L813.642 682.033 L813.082 682.033 L812.523 682.033 L811.964 682.033 L811.405 682.033 L810.845 682.033 L810.286 682.033 L809.727 682.033 L809.168 682.033 L808.608 682.033 L808.049 682.033 L807.49 682.033 L806.931 682.033 L806.371 682.033 L805.812 682.033 L805.253 682.033 L804.693 682.033 L804.134 682.033 L803.575 682.033 L803.016 682.033 L802.456 682.033 L801.897 682.033 L801.338 682.033 L800.779 682.033 L800.219 682.033 L799.66 682.033 L799.101 682.033 L798.542 682.033 L797.982 682.033 L797.423 682.033 L796.864 682.033 L796.305 682.033 L795.745 682.033 L795.186 682.033 L794.627 682.033 L794.068 682.033 L793.508 682.033 L792.949 682.033 L792.39 682.033 L791.831 682.033 L791.271 682.033 L790.712 682.033 L790.153 682.033 L789.594 682.033 L789.034 682.033 L788.475 682.033 L787.916 682.033 L787.357 682.033 L786.797 682.033 L786.238 682.033 L785.679 682.033 L785.12 682.033 L784.56 682.033 L784.001 682.033 L783.442 682.033 L782.883 682.033 L782.323 682.033 L781.764 682.033 L781.205 682.033 L780.646 682.033 L780.086 682.033 L779.527 682.033 L778.968 682.033 L778.409 682.033 L777.849 682.033 L777.29 682.033 L776.731 682.033 L776.172 682.033 L775.612 682.033 L775.053 682.033 L774.494 682.033 L773.935 682.033 L773.375 682.033 L772.816 682.033 L772.257 682.033 L771.698 682.033 L771.138 682.033 L770.579 682.033 L770.02 682.033 L769.461 682.033 L768.901 682.033 L768.342 682.033 L767.783 682.033 L767.224 682.033 L766.664 682.033 L766.105 682.033 L765.546 682.033 L764.987 682.033 L764.427 682.033 L763.868 682.033 L763.309 682.033 L762.75 682.033 L762.19 682.033 L761.631 682.033 L761.072 682.033 L760.513 682.033 L759.953 682.033 L759.394 682.033 L758.835 682.033 L758.276 682.033 L757.716 682.033 L757.157 682.033 L756.598 682.033 L756.039 682.033 L755.479 682.033 L754.92 682.033 L754.361 682.033 L753.802 682.033 L753.242 682.033 L752.683 682.033 L752.124 682.033 L751.565 682.033 L751.005 682.033 L750.446 682.033 L749.887 682.033 L749.328 682.033 L748.768 682.033 L748.209 682.033 L747.65 682.033 L747.091 682.033 L746.531 682.033 L745.972 682.033 L745.413 682.033 L744.854 682.033 L744.294 682.033 L743.735 682.033 L743.176 682.033 L742.617 682.033 L742.057 682.033 L741.498 682.033 L740.939 682.033 L740.38 682.033 L739.82 682.033 L739.261 682.033 L738.702 682.033 L738.143 682.033 L737.583 682.033 L737.024 682.033 L736.465 682.033 L735.906 682.033 L735.346 682.033 L734.787 682.033 L734.228 682.033 L733.669 682.033 L733.109 682.033 L732.55 682.033 L731.991 682.033 L731.432 682.033 L730.872 682.033 L730.313 682.033 L729.754 682.033 L729.195 682.033 L728.635 682.033 L728.076 682.033 L727.517 682.033 L726.958 682.033 L726.398 682.033 L725.839 682.033 L725.28 682.033 L724.721 682.033 L724.161 682.033 L723.602 682.033 L723.043 682.033 L722.484 682.033 L721.924 682.033 L721.365 682.033 L720.806 682.033 L720.247 682.033  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.596 720.806,685.596 721.365,685.596 721.924,685.596 722.484,685.596 723.043,685.596 723.602,685.596 724.161,685.596 724.721,685.596 725.28,685.596 725.839,685.596 726.398,685.596 726.958,685.596 727.517,685.596 728.076,685.596 728.635,685.596 729.195,685.596 729.754,685.596 730.313,685.596 730.872,685.596 731.432,685.596 731.991,685.596 732.55,685.596 733.109,685.596 733.669,685.596 734.228,685.596 734.787,685.596 735.346,685.596 735.906,685.596 736.465,685.596 737.024,685.596 737.583,685.596 738.143,685.596 738.702,685.596 739.261,685.596 739.82,685.596 740.38,685.596 740.939,685.596 741.498,685.596 742.057,685.596 742.617,685.596 743.176,685.596 743.735,685.596 744.294,685.596 744.854,685.596 745.413,685.596 745.972,685.596 746.531,685.596 747.091,685.596 747.65,685.596 748.209,685.596 748.768,685.596 749.328,685.596 749.887,685.596 750.446,685.596 751.005,685.596 751.565,685.596 752.124,685.596 752.683,685.596 753.242,685.596 753.802,685.596 754.361,685.596 754.92,685.596 755.479,685.596 756.039,685.596 756.598,685.596 757.157,685.596 757.716,685.596 758.276,685.596 758.835,685.596 759.394,685.596 759.953,685.596 760.513,685.596 761.072,685.596 761.631,685.596 762.19,685.596 762.75,685.596 763.309,685.596 763.868,685.596 764.427,685.596 764.987,685.596 765.546,685.596 766.105,685.596 766.664,685.596 767.224,685.596 767.783,685.596 768.342,685.596 768.901,685.596 769.461,685.596 770.02,685.596 770.579,685.596 771.138,685.596 771.698,685.596 772.257,685.596 772.816,685.596 773.375,685.596 773.935,685.596 774.494,685.596 775.053,685.596 775.612,685.596 776.172,685.596 776.731,685.596 777.29,685.596 777.849,685.596 778.409,685.596 778.968,685.596 779.527,685.596 780.086,685.596 780.646,685.596 781.205,685.596 781.764,685.596 782.323,685.596 782.883,685.596 783.442,685.596 784.001,685.596 784.56,685.596 785.12,685.596 785.679,685.596 786.238,685.596 786.797,685.596 787.357,685.596 787.916,685.596 788.475,685.596 789.034,685.596 789.594,685.596 790.153,685.596 790.712,685.596 791.271,685.596 791.831,685.596 792.39,685.596 792.949,685.596 793.508,685.596 794.068,685.596 794.627,685.596 795.186,685.596 795.745,685.596 796.305,685.596 796.864,685.596 797.423,685.596 797.982,685.596 798.542,685.596 799.101,685.596 799.66,685.596 800.219,685.596 800.779,685.596 801.338,685.596 801.897,685.596 802.456,685.596 803.016,685.596 803.575,685.596 804.134,685.596 804.693,685.596 805.253,685.596 805.812,685.596 806.371,685.596 806.931,685.596 807.49,685.596 808.049,685.596 808.608,685.596 809.168,685.596 809.727,685.596 810.286,685.596 810.845,685.596 811.405,685.596 811.964,685.596 812.523,685.596 813.082,685.596 813.642,685.596 814.201,685.596 814.76,685.596 815.319,685.596 815.879,685.596 816.438,685.596 816.997,685.596 817.556,685.596 818.116,685.596 818.675,685.596 819.234,685.596 819.793,685.596 820.353,685.596 820.912,685.596 821.471,685.596 822.03,685.596 822.59,685.596 823.149,685.596 823.708,685.596 824.267,685.596 824.827,685.596 825.386,685.596 825.945,685.596 826.504,685.596 827.064,685.596 827.623,685.596 828.182,685.596 828.741,685.596 829.301,685.596 829.86,685.596 830.419,685.596 830.978,685.596 831.538,685.596 832.097,685.596 832.656,685.596 833.215,685.596 833.775,685.596 834.334,685.596 834.893,685.596 835.452,685.596 836.012,685.596 836.571,685.596 837.13,685.596 837.689,685.596 838.249,685.596 838.808,685.596 839.367,685.596 839.926,685.596 840.486,685.596 841.045,685.596 841.604,685.596 842.163,685.596 842.723,685.596 843.282,685.596 843.841,685.596 844.4,685.596 844.96,685.596 845.519,685.596 846.078,685.596 846.637,685.596 847.197,685.596 847.756,685.596 848.315,685.596 848.874,685.596 849.434,685.596 849.993,685.596 850.552,685.596 851.111,685.596 851.671,685.596 852.23,685.596 852.789,685.596 853.348,685.596 853.908,685.596 854.467,685.596 855.026,685.596 855.585,685.596 856.145,685.596 856.704,685.596 857.263,685.596 857.822,685.596 858.382,685.596 858.941,685.596 859.5,685.596 860.059,685.596 860.619,685.596 861.178,685.596 861.737,685.596 862.296,685.596 862.856,685.596 863.415,685.596 863.974,685.596 864.533,685.596 865.093,685.596 865.652,685.596 866.211,685.596 866.77,685.596 867.33,685.596 867.889,685.596 868.448,685.596 869.007,685.596 869.567,685.596 870.126,685.596 870.685,685.596 871.244,685.596 871.804,685.596 872.363,685.596 872.922,685.596 873.481,685.596 874.041,685.596 874.6,685.596 875.159,685.596 875.718,685.596 876.278,685.596 876.837,685.596 877.396,685.596 877.955,685.596 878.515,685.596 879.074,685.596 879.633,685.596 880.192,685.596 880.752,685.596 881.311,685.596 881.87,685.596 882.429,685.596 882.989,685.596 883.548,685.596 884.107,685.596 884.666,685.596 885.226,685.596 885.785,685.596 886.344,685.596 886.903,685.596 887.463,685.596 888.022,685.596 888.581,685.596 889.14,685.596 889.7,685.596 890.259,685.596 890.818,685.596 891.377,685.596 891.937,685.596 892.496,685.596 893.055,685.596 893.614,685.596 894.174,685.596 894.733,685.596 895.292,685.596 895.851,685.596 896.411,685.596 896.97,685.596 897.529,685.596 898.088,685.596 898.648,685.596 899.207,685.596 899.766,685.596 900.325,685.596 900.885,685.596 901.444,685.596 902.003,685.596 902.562,685.596 903.122,685.596 903.681,685.596 904.24,685.596 904.799,685.596 905.359,685.596 905.918,685.596 906.477,685.596 907.036,685.596 907.596,685.596 908.155,685.596 908.714,685.596 909.273,685.596 909.833,685.596 910.392,685.596 910.951,685.596 911.51,685.596 912.07,685.596 912.629,685.596 913.188,685.596 913.747,685.596 914.307,685.596 914.866,685.596 915.425,685.596 915.984,685.596 916.544,685.596 917.103,685.596 917.662,685.596 918.221,685.596 918.781,685.596 919.34,685.596 919.899,685.596 920.458,685.596 921.018,685.596 921.577,685.596 922.136,685.596 922.695,685.596 923.255,685.596 923.814,685.596 924.373,685.596 924.932,685.596 925.492,685.596 926.051,685.596 926.61,685.596 927.169,685.596 927.729,685.596 928.288,685.596 928.847,685.596 929.406,685.596 929.966,685.596 930.525,685.596 931.084,685.596 931.644,685.596 932.203,685.596 932.762,685.596 933.321,685.596 933.881,685.596 934.44,685.596 934.999,685.596 935.558,685.596 936.118,685.596 936.677,685.596 937.236,685.596 937.795,685.596 938.355,685.596 938.914,685.596 939.473,685.596 940.032,685.596 940.592,685.596 941.151,685.596 941.71,685.596 942.269,685.596 942.829,685.596 943.388,685.596 943.947,685.596 944.506,685.596 945.066,685.596 945.625,685.596 946.184,685.596 946.743,685.596 947.303,685.596 947.862,685.596 948.421,685.596 948.98,685.596 949.54,685.596 950.099,685.596 950.658,685.596 951.217,685.596 951.777,685.596 952.336,685.596 952.895,685.596 953.454,685.596 954.014,685.596 954.573,685.596 955.132,685.596 955.691,685.596 956.251,685.596 956.81,685.596 957.369,685.596 957.928,685.596 958.488,685.596 959.047,685.596 959.606,685.596 960.165,685.596 960.725,685.596 961.284,685.596 961.843,685.596 962.402,685.596 962.962,685.596 963.521,685.596 964.08,685.596 964.639,685.596 965.199,685.596 965.758,685.596 966.317,685.596 966.876,685.596 967.436,685.596 967.995,685.596 968.554,685.596 969.113,685.596 969.673,685.596 970.232,685.596 970.791,685.596 971.35,685.596 971.91,685.596 972.469,685.596 973.028,685.596 973.587,685.596 974.147,685.596 974.706,685.596 975.265,685.596 975.824,685.596 976.384,685.596 976.943,685.596 977.502,685.596 978.061,685.596 978.621,685.596 979.18,685.596 979.739,685.596 980.298,685.596 980.858,685.596 981.417,685.596 981.976,685.596 982.535,685.596 983.095,685.596 983.654,685.596 984.213,685.596 984.772,685.596 985.332,685.596 985.891,685.596 986.45,685.596 987.009,685.596 987.569,685.596 988.128,685.596 988.687,685.596 989.246,685.596 989.806,685.596 990.365,685.596 990.924,685.596 991.483,685.596 992.043,685.596 992.602,685.596 993.161,685.596 993.72,685.596 994.28,685.596 994.839,685.596 995.398,685.596 995.957,685.596 996.517,685.596 997.076,685.596 997.635,685.596 998.194,685.596 998.754,685.596 999.313,685.596 999.872,685.596 1000.43,685.596 1000.99,685.596 1001.55,685.596 1002.11,685.596 1002.67,685.596 1003.23,685.596 1003.79,685.596 1004.35,685.596 1004.91,685.596 1005.46,685.596 1006.02,685.596 1006.58,685.596 1007.14,685.596 1007.7,685.596 1008.26,685.596 1008.82,685.596 1009.38,685.596 1009.94,685.596 1010.5,685.596 1011.06,685.596 1011.62,685.596 1012.18,685.596 1012.73,685.596 1013.29,685.596 1013.85,685.596 1014.41,685.596 1014.97,685.596 1015.53,685.596 1016.09,685.596 1016.65,685.596 1017.21,685.596 1017.77,685.596 1018.33,685.596 1018.89,685.596 1019.45,685.596 1020.01,685.596 1020.56,685.596 1021.12,685.596 1021.68,685.596 1022.24,685.596 1022.8,685.596 1023.36,685.596 1023.92,685.596 1024.48,685.596 1025.04,685.596 1025.6,685.596 1026.16,685.596 1026.72,685.596 1027.28,685.596 1027.83,685.596 1028.39,685.596 1028.95,685.596 1029.51,685.596 1030.07,685.596 1030.63,685.596 1031.19,685.596 1031.75,685.596 1032.31,685.596 1032.87,685.596 1033.43,685.596 1033.99,685.596 1034.55,685.596 1035.1,685.596 1035.66,685.596 1036.22,685.596 1036.78,685.596 1037.34,685.596 1037.9,685.596 1038.46,685.596 1039.02,685.596 1039.58,685.596 1040.14,685.596 1040.7,685.596 1041.26,685.596 1041.82,685.596 1042.38,685.596 1042.93,685.596 1043.49,685.596 1044.05,685.596 1044.61,685.596 1045.17,685.596 1045.73,685.596 1046.29,685.596 1046.85,685.596 1047.41,685.596 1047.97,685.596 1048.53,685.596 1049.09,685.596 1049.65,685.596 1050.2,685.596 1050.76,685.596 1051.32,685.596 1051.88,685.596 1052.44,685.596 1053,685.596 1053.56,685.596 1054.12,685.596 1054.68,685.596 1055.24,685.596 1055.8,685.596 1056.36,685.596 1056.92,685.596 1057.48,685.596 1058.03,685.596 1058.59,685.596 1059.15,685.596 1059.71,685.596 1060.27,685.596 1060.83,685.596 1061.39,685.596 1061.95,685.596 1062.51,685.596 1063.07,685.596 1063.63,685.596 1064.19,685.596 1064.75,685.596 1065.3,685.596 1065.86,685.596 1066.42,685.596 1066.98,685.596 1067.54,685.596 1068.1,685.596 1068.66,685.596 1069.22,685.596 1069.78,685.596 1070.34,685.596 1070.9,685.596 1071.46,685.596 1072.02,685.596 1072.57,685.596 1073.13,685.596 1073.69,685.596 1074.25,685.596 1074.81,685.596 1075.37,685.596 1075.93,685.596 1076.49,685.596 1077.05,685.596 1077.61,685.596 1078.17,685.596 1078.73,685.596 1079.29,685.596 1079.85,685.596 1080.4,685.596 1080.96,685.596 1081.52,685.596 1082.08,685.596 1082.64,685.596 1083.2,685.596 1083.76,685.596 1084.32,685.596 1084.88,685.596 1085.44,685.596 1086,685.596 1086.56,685.596 1087.12,685.596 1087.67,685.596 1088.23,685.596 1088.79,685.596 1089.35,685.596 1089.91,685.596 1090.47,685.596 1091.03,685.596 1091.59,685.596 1092.15,685.596 1092.71,685.596 1093.27,685.596 1093.83,685.596 1094.39,685.596 1094.94,685.596 1095.5,685.596 1096.06,685.596 1096.62,685.596 1097.18,685.596 1097.74,685.596 1098.3,685.596 1098.86,685.596 1099.42,685.596 1099.98,685.596 1100.54,685.596 1101.1,685.596 1101.66,685.596 1102.22,685.596 1102.77,685.596 1103.33,685.596 1103.89,685.596 1104.45,685.596 1105.01,685.596 1105.57,685.596 1106.13,685.596 1106.69,685.596 1107.25,685.596 1107.81,685.596 1108.37,685.596 1108.93,685.596 1109.49,685.596 1110.04,685.596 1110.6,685.596 1111.16,685.596 1111.72,685.596 1112.28,685.596 1112.84,685.596 1113.4,685.596 1113.96,685.596 1114.52,685.596 1115.08,685.596 1115.64,685.596 1116.2,685.596 1116.76,685.596 1117.31,685.596 1117.87,685.596 1118.43,685.596 1118.99,685.596 1119.55,685.596 1120.11,685.596 1120.67,685.596 1121.23,685.596 1121.79,685.596 1122.35,685.596 1122.91,685.596 1123.47,685.596 1124.03,685.596 1124.59,685.596 1125.14,685.596 1125.7,685.596 1126.26,685.596 1126.82,685.596 1127.38,685.596 1127.94,685.596 1128.5,685.596 1129.06,685.596 1129.62,685.596 1130.18,685.596 1130.74,685.596 1131.3,685.596 1131.86,685.596 1132.41,685.596 1132.97,685.596 1133.53,685.596 1134.09,685.596 1134.65,685.596 1135.21,685.596 1135.77,685.596 1136.33,685.596 1136.89,685.596 1137.45,685.596 1138.01,685.596 1138.57,685.596 1139.13,685.596 1139.68,685.596 1140.24,685.596 1140.8,685.596 1141.36,685.596 1141.92,685.596 1142.48,685.596 1143.04,685.596 1143.6,685.596 1144.16,685.596 1144.72,685.596 1145.28,685.596 1145.84,685.596 1146.4,685.596 1146.96,685.596 1147.51,685.596 1148.07,685.596 1148.63,685.596 1149.19,685.596 1149.75,685.596 1150.31,685.596 1150.87,685.596 1151.43,685.596 1151.99,685.596 1152.55,685.596 1153.11,685.596 1153.67,685.596 1154.23,685.596 1154.78,685.596 1155.34,685.596 1155.9,685.596 1156.46,685.596 1157.02,685.596 1157.58,685.596 1158.14,685.596 1158.7,685.596 1159.26,685.596 1159.82,685.596 1160.38,685.596 1160.94,685.596 1161.5,685.596 1162.05,685.596 1162.61,685.596 1163.17,685.596 1163.73,685.596 1164.29,685.596 1164.85,685.596 1165.41,685.596 1165.97,685.596 1166.53,685.596 1167.09,685.596 1167.65,685.596 1168.21,685.596 1168.77,685.596 1169.33,685.596 1169.88,685.596 1170.44,685.596 1171,685.596 1171.56,685.596 1172.12,685.596 1172.68,685.596 1173.24,685.596 1173.8,685.596 1174.36,685.596 1174.92,685.596 1175.48,685.596 1176.04,685.596 1176.6,685.596 1177.15,685.596 1177.71,685.596 1178.27,685.596 1178.83,685.596 1179.39,685.596 1179.95,685.596 1180.51,685.596 1181.07,685.596 1181.63,685.596 1182.19,685.596 1182.75,685.596 1183.31,685.596 1183.87,685.596 1184.43,685.596 1184.98,685.596 1185.54,685.596 1186.1,685.596 1186.66,685.596 1187.22,685.596 1187.78,685.596 1188.34,685.596 1188.9,685.596 1189.46,685.596 1190.02,685.596 1190.58,685.596 1191.14,685.596 1191.7,685.596 1192.25,685.596 1192.81,685.596 1193.37,685.596 1193.93,685.596 1194.49,685.596 1195.05,685.596 1195.61,685.596 1196.17,685.596 1196.73,685.596 1197.29,685.596 1197.85,685.596 1198.41,685.596 1198.97,685.596 1199.52,685.596 1200.08,685.596 1200.64,685.596 1201.2,685.596 1201.76,685.596 1202.32,685.596 1202.88,685.596 1203.44,685.596 1204,685.596 1204.56,685.596 1205.12,685.596 1205.68,685.596 1206.24,685.596 1206.8,685.596 1207.35,685.596 1207.91,685.596 1208.47,685.596 1209.03,685.596 1209.59,685.596 1210.15,685.596 1210.71,685.596 1211.27,685.596 1211.83,685.596 1212.39,685.596 1212.95,685.596 1213.51,685.596 1214.07,685.596 1214.62,685.596 1215.18,685.596 1215.74,685.596 1216.3,685.596 1216.86,685.596 1217.42,685.596 1217.98,685.596 1218.54,685.596 1219.1,685.596 1219.66,685.596 1220.22,685.596 1220.78,685.596 1221.34,685.596 1221.89,685.596 1222.45,685.596 1223.01,685.596 1223.57,685.596 1224.13,685.596 1224.69,685.596 1225.25,685.596 1225.81,685.596 1226.37,685.596 1226.93,685.596 1227.49,685.596 1228.05,685.596 1228.61,685.596 1229.17,685.596 1229.72,685.596 1230.28,685.596 1230.84,685.596 1231.4,685.596 1231.96,685.596 1232.52,685.596 1233.08,685.596 1233.64,685.596 1234.2,685.596 1234.76,685.596 1235.32,685.596 1235.88,685.596 1236.44,685.596 1236.99,685.596 1237.55,685.596 1238.11,685.596 1238.67,685.596 1239.23,685.596 1239.79,685.596 1240.35,685.596 1240.91,685.596 1241.47,685.596 1242.03,685.596 1242.59,685.596 1243.15,685.596 1243.71,685.596 1244.26,685.596 1244.82,685.596 1245.38,685.596 1245.94,685.596 1246.5,685.596 1247.06,685.596 1247.62,685.596 1248.18,685.596 1248.74,685.596 1249.3,685.596 1249.86,685.596 1250.42,685.596 1250.98,685.596 1251.54,685.596 1252.09,685.596 1252.65,685.596 1253.21,685.596 1253.77,685.596 1254.33,685.596 1254.89,685.596 1255.45,685.596 1256.01,685.596 1256.57,685.596 1257.13,685.596 1257.69,685.596 1258.25,685.596 1258.81,685.596 1259.36,685.596 1259.92,685.596 1260.48,685.596 1261.04,685.596 1261.6,685.596 1262.16,685.596 1262.72,685.596 1263.28,685.596 1263.84,685.596 1264.4,685.596 1264.96,685.596 1265.52,685.596 1266.08,685.596 1266.63,685.596 1267.19,685.596 1267.75,685.596 1268.31,685.596 1268.87,685.596 1269.43,685.596 1269.99,685.596 1270.55,685.596 1271.11,685.596 1271.67,685.596 1272.23,685.596 1272.79,685.596 1273.35,685.596 1273.91,685.596 1274.46,685.596 1275.02,685.596 1275.58,685.596 1276.14,685.596 1276.7,685.596 1277.26,685.596 1277.82,685.596 1278.38,685.596 1278.94,685.596 1279.5,685.596 1280.06,685.596 1280.62,685.596 1281.18,685.596 1281.73,685.596 1282.29,685.596 1282.85,685.596 1283.41,685.596 1283.97,685.596 1284.53,685.596 1285.09,685.596 1285.65,685.596 1286.21,685.596 1286.77,685.596 1287.33,685.596 1287.89,685.596 1288.45,685.596 1289,685.596 1289.56,685.596 1290.12,685.596 1290.68,685.596 1291.24,685.596 1291.8,685.596 1292.36,685.596 1292.92,685.596 1293.48,685.596 1294.04,685.596 1294.6,685.596 1295.16,685.596 1295.72,685.596 1296.28,685.596 1296.83,685.596 1297.39,685.596 1297.95,685.596 1298.51,685.596 1299.07,685.596 1299.63,685.596 1300.19,685.596 1300.75,685.596 1301.31,685.596 1301.87,685.596 1302.43,685.596 1302.99,685.596 1303.55,685.596 1304.1,685.596 1304.66,685.596 1305.22,685.596 1305.78,685.596 1306.34,685.596 1306.9,685.596 1307.46,685.596 1308.02,685.596 1308.58,685.596 1309.14,685.596 1309.7,685.596 1310.26,685.596 1310.82,685.596 1311.38,685.596 1311.93,685.596 1312.49,685.596 1313.05,685.596 1313.61,685.596 1314.17,685.596 1314.73,685.596 1315.29,685.596 1315.85,685.596 1316.41,685.596 1316.97,685.596 1317.53,685.596 1318.09,685.596 1318.65,685.596 1319.2,685.596 1319.76,685.596 1320.32,685.596 1320.88,685.596 1321.44,685.596 1322,685.596 1322.56,685.596 1323.12,685.596 1323.68,685.596 1324.24,685.596 1324.8,685.596 1325.36,685.596 1325.92,685.596 1326.47,685.596 1327.03,685.596 1327.59,685.596 1328.15,685.596 1328.71,685.596 1329.27,685.596 1329.83,685.596 1330.39,685.596 1330.95,685.596 1331.51,685.596 1332.07,685.596 1332.63,685.596 1333.19,685.596 1333.75,685.596 1334.3,685.596 1334.86,685.596 1335.42,685.596 1335.98,685.596 1336.54,685.596 1337.1,685.596 1337.66,685.596 1338.22,685.596 1338.78,685.596 1339.34,685.596 1339.9,685.596 1340.46,685.596 1341.02,685.596 1341.57,685.596 1342.13,685.596 1342.69,685.596 1343.25,685.596 1343.81,685.596 1344.37,685.596 1344.93,685.596 1345.49,685.596 1346.05,685.596 1346.61,685.596 1347.17,685.596 1347.73,685.596 1348.29,685.596 1348.84,685.596 1349.4,685.596 1349.96,685.596 1350.52,685.596 1351.08,685.596 1351.64,685.596 1352.2,685.596 1352.76,685.596 1353.32,685.596 1353.88,685.596 1354.44,685.596 1355,685.596 1355.56,685.596 1356.12,685.596 1356.67,685.596 1357.23,685.596 1357.79,685.596 1358.35,685.596 1358.91,685.596 1359.47,685.596 1360.03,685.596 1360.59,685.596 1361.15,685.596 1361.71,685.596 1362.27,685.596 1362.83,685.596 1363.39,685.596 1363.94,685.596 1364.5,685.596 1365.06,685.596 1365.62,685.596 1366.18,685.596 1366.74,685.596 1367.3,685.596 1367.86,685.596 1368.42,685.596 1368.98,685.596 1369.54,685.596 1370.1,685.596 1370.66,685.596 1371.21,685.596 1371.77,685.596 1372.33,685.596 1372.89,685.596 1373.45,685.596 1374.01,685.596 1374.57,685.596 1375.13,685.596 1375.69,685.596 1376.25,685.596 1376.81,685.596 1377.37,685.596 1377.93,685.596 1378.49,685.596 1379.04,685.596 1379.6,685.596 1380.16,685.596 1380.72,685.596 1381.28,685.596 1381.84,685.596 1382.4,685.596 1382.96,685.596 1383.52,685.596 1384.08,685.596 1384.64,685.596 1385.2,685.596 1385.76,685.596 1386.31,685.596 1386.87,685.596 1387.43,685.596 1387.99,685.596 1388.55,685.596 1389.11,685.596 1389.67,685.596 1390.23,685.596 1390.79,685.596 1391.35,685.596 1391.91,685.596 1392.47,685.596 1393.03,685.596 1393.58,685.596 1394.14,685.596 1394.7,685.596 1395.26,685.596 1395.82,685.596 1396.38,685.596 1396.94,685.596 1397.5,685.596 1398.06,685.596 1398.62,685.596 1399.18,685.596 1399.74,685.596 1400.3,685.596 1400.86,685.596 1401.41,685.596 1401.97,685.596 1402.53,685.596 1403.09,685.596 1403.65,685.596 1404.21,685.596 1404.77,685.596 1405.33,685.596 1405.89,685.596 1406.45,685.596 1407.01,685.596 1407.57,685.596 1408.13,685.596 1408.68,685.596 1409.24,685.596 1409.8,685.596 1410.36,685.596 1410.92,685.596 1411.48,685.596 1412.04,685.596 1412.6,685.596 1413.16,685.596 1413.72,685.596 1414.28,685.596 1414.84,685.596 1415.4,685.596 1415.95,685.596 1416.51,685.596 1417.07,685.596 1417.63,685.596 1418.19,685.596 1418.75,685.596 1419.31,685.596 1419.87,685.596 1420.43,685.596 1420.99,685.596 1421.55,685.596 1422.11,685.596 1422.67,685.596 1423.23,685.596 1423.78,685.596 1424.34,685.596 1424.9,685.596 1425.46,685.596 1426.02,685.596 1426.58,685.596 1427.14,685.596 1427.7,685.596 1428.26,685.596 1428.82,685.596 1429.38,685.596 1429.94,685.596 1430.5,685.596 1431.05,685.596 1431.61,685.596 1432.17,685.596 1432.73,685.596 1433.29,685.596 1433.85,685.596 1434.41,685.596 1434.97,685.596 1435.53,685.596 1436.09,685.596 1436.65,685.596 1437.21,685.596 1437.77,685.596 1438.33,685.596 1438.88,685.596 1439.44,685.596 1440,685.596 1440.56,685.596 1441.12,685.596 1441.68,685.596 1442.24,685.596 1442.8,685.596 1443.36,685.596 1443.92,685.596 1444.48,685.596 1445.04,685.596 1445.6,685.596 1446.15,685.596 1446.71,685.596 1447.27,685.596 1447.83,685.596 1448.39,685.596 1448.95,685.596 1449.51,685.596 1450.07,685.596 1450.63,685.596 1451.19,685.596 1451.75,685.596 1452.31,685.596 1452.87,685.596 1453.42,685.596 1453.98,685.596 1454.54,685.596 1455.1,685.596 1455.66,685.596 1456.22,685.596 1456.78,685.596 1457.34,685.596 1457.9,685.596 1458.46,685.596 1459.02,685.596 1459.58,685.596 1460.14,685.596 1460.7,685.596 1461.25,685.596 1461.81,685.596 1462.37,685.596 1462.93,685.596 1463.49,685.596 1464.05,685.596 1464.61,685.596 1465.17,685.596 1465.73,685.596 1466.29,685.596 1466.85,685.596 1467.41,685.596 1467.97,685.596 1468.52,685.596 1469.08,685.596 1469.64,685.596 1470.2,685.596 1470.76,685.596 1471.32,685.596 1471.88,685.596 1472.44,685.596 1473,685.596 1473.56,685.596 1474.12,685.596 1474.68,685.596 1475.24,685.596 1475.79,685.596 1476.35,685.596 1476.91,685.596 1477.47,685.596 1478.03,685.596 1478.59,685.596 1479.15,685.596 1479.71,685.596 1480.27,685.596 1480.83,685.596 1481.39,685.596 1481.95,685.596 1482.51,685.596 1483.07,685.596 1483.62,685.596 1484.18,685.596 1484.74,685.596 1485.3,685.596 1485.86,685.596 1486.42,685.596 1486.98,685.596 1487.54,685.596 1488.1,685.596 1488.66,685.596 1489.22,685.596 1489.78,685.596 1490.34,685.596 1490.89,685.596 1491.45,685.596 1492.01,685.596 1492.57,685.596 1493.13,685.596 1493.69,685.596 1494.25,685.596 1494.81,685.596 1495.37,685.596 1495.93,685.596 1496.49,685.596 1497.05,685.596 1497.61,685.596 1498.16,685.596 1498.72,685.596 1499.28,685.596 1499.84,685.596 1500.4,685.596 1500.96,685.596 1501.52,685.596 1502.08,685.596 1502.64,685.596 1503.2,685.596 1503.76,685.596 1504.32,685.596 1504.88,685.596 1505.44,685.596 1505.99,685.596 1506.55,685.596 1507.11,685.596 1507.67,685.596 1508.23,685.596 1508.79,685.596 1509.35,685.596 1509.91,685.596 1510.47,685.596 1511.03,685.596 1511.59,685.596 1512.15,685.596 1512.71,685.596 1513.26,685.596 1513.82,685.596 1514.38,685.596 1514.94,685.596 1515.5,685.596 1516.06,685.596 1516.62,685.596 1517.18,685.596 1517.74,685.596 1518.3,685.596 1518.86,685.596 1519.42,685.596 1519.98,685.596 1520.53,685.596 1521.09,685.596 1521.65,685.596 1522.21,685.596 1522.77,685.596 1523.33,685.596 1523.89,685.596 1524.45,685.596 1525.01,685.596 1525.57,685.596 1526.13,685.596 1526.69,685.596 1527.25,685.596 1527.81,685.596 1528.36,685.596 1528.92,685.596 1529.48,685.596 1530.04,685.596 1530.6,685.596 1531.16,685.596 1531.72,685.596 1532.28,685.596 1532.84,685.596 1533.4,685.596 1533.96,685.596 1534.52,685.596 1535.08,685.596 1535.63,685.596 1536.19,685.596 1536.75,685.596 1537.31,685.596 1537.87,685.596 1538.43,685.596 1538.99,685.596 1539.55,685.596 1540.11,685.596 1540.67,685.596 1541.23,685.596 1541.79,685.596 1542.35,685.596 1542.9,685.596 1543.46,685.596 1544.02,685.596 1544.58,685.596 1545.14,685.596 1545.7,685.596 1546.26,685.596 1546.82,685.596 1547.38,685.596 1547.94,685.596 1548.5,685.596 1549.06,685.596 1549.62,685.596 1550.18,685.596 1550.73,685.596 1551.29,685.596 1551.85,685.596 1552.41,685.596 1552.97,685.596 1553.53,685.596 1554.09,685.596 1554.65,685.596 1555.21,685.596 1555.77,685.596 1556.33,685.596 1556.89,685.596 1557.45,685.596 1558,685.596 1558.56,685.596 1559.12,685.596 1559.68,685.596 1560.24,685.596 1560.8,685.596 1561.36,685.596 1561.92,685.596 1562.48,685.596 1563.04,685.596 1563.6,685.596 1564.16,685.596 1564.72,685.596 1565.28,685.596 1565.83,685.596 1566.39,685.596 1566.95,685.596 1567.51,685.596 1568.07,685.596 1568.63,685.596 1569.19,685.596 1569.75,685.596 1570.31,685.596 1570.87,685.596 1571.43,685.596 1571.99,685.596 1572.55,685.596 1573.1,685.596 1573.66,685.596 1574.22,685.596 1574.78,685.596 1575.34,685.596 1575.9,685.596 1576.46,685.596 1577.02,685.596 1577.58,685.596 1578.14,685.596 1578.7,685.596 1579.26,685.596 1579.82,685.596 1580.37,685.596 1580.93,685.596 1581.49,685.596 1582.05,685.596 1582.61,685.596 1583.17,685.596 1583.73,685.596 1584.29,685.596 1584.85,685.596 1585.41,685.596 1585.97,685.596 1586.53,685.596 1587.09,685.596 1587.65,685.596 1588.2,685.596 1588.76,685.596 1589.32,685.596 1589.88,685.596 1590.44,685.596 1591,685.596 1591.56,685.596 1592.12,685.596 1592.68,685.596 1593.24,685.596 1593.8,685.596 1594.36,685.596 1594.92,685.596 1595.47,685.596 1596.03,685.596 1596.59,685.596 1597.15,685.596 1597.71,685.596 1598.27,685.596 1598.83,685.596 1599.39,685.596 1599.95,685.596 1600.51,685.596 1601.07,685.596 1601.63,685.596 1602.19,685.596 1602.74,685.596 1603.3,685.596 1603.86,685.596 1604.42,685.596 1604.98,685.596 1605.54,685.596 1606.1,685.596 1606.66,685.596 1607.22,685.596 1607.78,685.596 1608.34,685.596 1608.9,685.596 1609.46,685.596 1610.02,685.596 1610.57,685.596 1611.13,685.596 1611.69,685.596 1612.25,685.596 1612.81,685.596 1613.37,685.596 1613.93,685.596 1614.49,685.596 1615.05,685.596 1615.61,685.596 1616.17,685.596 1616.73,685.596 1617.29,685.596 1617.84,685.596 1618.4,685.596 1618.96,685.596 1619.52,685.596 1620.08,685.596 1620.64,685.596 1621.2,685.596 1621.76,685.596 1622.32,685.596 1622.88,685.596 1623.44,685.596 1624,685.596 1624.56,685.596 1625.11,685.596 1625.67,685.596 1626.23,685.596 1626.79,685.596 1627.35,685.596 1627.91,685.596 1628.47,685.596 1629.03,685.596 1629.59,685.596 1630.15,685.596 1630.71,685.596 1631.27,685.596 1631.83,685.596 1632.39,685.596 1632.94,685.596 1633.5,685.596 1634.06,685.596 1634.62,685.596 1635.18,685.596 1635.74,685.596 1636.3,685.596 1636.86,685.596 1637.42,685.596 1637.98,685.596 1638.54,685.596 1639.1,685.596 1639.66,685.596 1640.21,685.596 1640.77,685.596 1641.33,685.596 1641.89,685.596 1642.45,685.596 1643.01,685.596 1643.57,685.596 1644.13,685.596 1644.69,685.596 1645.25,685.596 1645.81,685.596 1646.37,685.596 1646.93,685.596 1647.48,685.596 1648.04,685.596 1648.6,685.596 1649.16,685.596 1649.72,685.596 1650.28,685.596 1650.84,685.596 1651.4,685.596 1651.96,685.596 1652.52,685.596 1653.08,685.596 1653.64,685.596 1654.2,685.596 1654.76,685.596 1655.31,685.596 1655.87,685.596 1656.43,685.596 1656.99,685.596 1657.55,685.596 1658.11,685.596 1658.67,685.596 1659.23,685.596 1659.79,685.596 1660.35,685.596 1660.91,685.596 1661.47,685.596 1662.03,685.596 1662.58,685.596 1663.14,685.596 1663.7,685.596 1664.26,685.596 1664.82,685.596 1665.38,685.596 1665.94,685.596 1666.5,685.596 1667.06,685.596 1667.62,685.596 1668.18,685.596 1668.74,685.596 1669.3,685.596 1669.85,685.596 1670.41,685.596 1670.97,685.596 1671.53,685.596 1672.09,685.596 1672.65,685.596 1673.21,685.596 1673.77,685.596 1674.33,685.596 1674.89,685.596 1675.45,685.596 1676.01,685.596 1676.57,685.596 1677.13,685.596 1677.68,685.596 1678.24,685.596 1678.8,685.596 1679.36,685.596 1679.92,685.596 1680.48,685.596 1681.04,685.596 1681.6,685.596 1682.16,685.596 1682.72,685.596 1683.28,685.596 1683.84,685.596 1684.4,685.596 1684.95,685.596 1685.51,685.596 1686.07,685.596 1686.63,685.596 1687.19,685.596 1687.75,685.596 1688.31,685.596 1688.87,685.596 1689.43,685.596 1689.99,685.596 1690.55,685.596 1691.11,685.596 1691.67,685.596 1692.23,685.596 1692.78,685.596 1693.34,685.596 1693.9,685.596 1694.46,685.596 1695.02,685.596 1695.58,685.596 1696.14,685.596 1696.7,685.596 1697.26,685.596 1697.82,685.596 1698.38,685.596 1698.94,685.596 1699.5,685.596 1700.05,685.596 1700.61,685.596 1701.17,685.596 1701.73,685.596 1702.29,685.596 1702.85,685.596 1703.41,685.596 1703.97,685.596 1704.53,685.596 1705.09,685.596 1705.65,685.596 1706.21,685.596 1706.77,685.596 1707.32,685.596 1707.88,685.596 1708.44,685.596 1709,685.596 1709.56,685.596 1710.12,685.596 1710.68,685.596 1711.24,685.596 1711.8,685.596 1712.36,685.596 1712.92,685.596 1713.48,685.596 1714.04,685.596 1714.6,685.596 1715.15,685.596 1715.71,685.596 1716.27,685.596 1716.83,685.596 1717.39,685.596 1717.95,685.596 1718.51,685.596 1719.07,685.596 1719.63,685.596 1720.19,685.596 1720.75,685.596 1721.31,685.596 1721.87,685.596 1722.42,685.596 1722.98,685.596 1723.54,685.596 1724.1,685.596 1724.66,685.596 1725.22,685.596 1725.78,685.596 1726.34,685.596 1726.9,685.596 1727.46,685.596 1728.02,685.596 1728.58,685.596 1729.14,685.596 1729.69,685.596 1730.25,685.596 1730.81,685.596 1731.37,685.596 1731.93,685.596 1732.49,685.596 1733.05,685.596 1733.61,685.596 1734.17,685.596 1734.73,685.596 1735.29,685.596 1735.85,685.596 1736.41,685.596 1736.97,685.596 1737.52,685.596 1738.08,685.596 1738.64,685.596 1739.2,685.596 1739.76,685.596 1740.32,685.596 1740.88,685.596 1741.44,685.596 1742,685.596 1742.56,685.596 1743.12,685.596 1743.68,685.596 1744.24,685.596 1744.79,685.596 1745.35,685.596 1745.91,685.596 1746.47,685.596 1747.03,685.596 1747.59,685.596 1748.15,685.596 1748.71,685.596 1749.27,685.596 1749.83,685.596 1750.39,685.596 1750.95,685.596 1751.51,685.596 1752.06,685.596 1752.62,685.596 1753.18,685.596 1753.74,685.596 1754.3,685.596 1754.86,685.596 1755.42,685.596 1755.98,685.596 1756.54,685.596 1757.1,685.596 1757.66,685.596 1758.22,685.596 1758.78,685.596 1759.34,685.596 1759.89,685.596 1760.45,685.596 1761.01,685.596 1761.57,685.596 1762.13,685.596 1762.69,685.596 1763.25,685.596 1763.81,685.596 1764.37,685.596 1764.93,685.596 1765.49,685.596 1766.05,685.596 1766.61,685.596 1767.16,685.596 1767.72,685.596 1768.28,685.596 1768.84,685.596 1769.4,685.596 1769.96,685.596 1770.52,685.596 1771.08,685.596 1771.64,685.596 1772.2,685.596 1772.76,685.596 1773.32,685.596 1773.88,685.596 1774.43,685.596 1774.99,685.596 1775.55,685.596 1776.11,685.596 1776.67,685.596 1777.23,685.596 1777.79,685.596 1778.35,685.596 1778.91,685.596 1779.47,685.596 1780.03,685.596 1780.59,685.596 1781.15,685.596 1781.71,685.596 1782.26,685.596 1782.82,685.596 1783.38,685.596 1783.94,685.596 1784.5,685.596 1785.06,685.596 1785.62,685.596 1786.18,685.596 1786.74,685.596 1787.3,685.596 1787.86,685.596 1788.42,685.596 1788.98,685.596 1789.53,685.596 1790.09,685.596 1790.65,685.596 1791.21,685.596 1791.77,685.596 1792.33,685.596 1792.89,685.596 1793.45,685.596 1794.01,685.596 1794.57,685.596 1795.13,685.596 1795.69,685.596 1796.25,685.596 1796.8,685.596 1797.36,685.596 1797.92,685.596 1798.48,685.596 1799.04,685.596 1799.6,685.596 1800.16,685.596 1800.72,685.596 1801.28,685.596 1801.84,685.596 1802.4,685.596 1802.96,685.596 1803.52,685.596 1804.08,685.596 1804.63,685.596 1805.19,685.596 1805.75,685.596 1806.31,685.596 1806.87,685.596 1807.43,685.596 1807.99,685.596 1808.55,685.596 1809.11,685.596 1809.67,685.596 1810.23,685.596 1810.79,685.596 1811.35,685.596 1811.9,685.596 1812.46,685.596 1813.02,685.596 1813.58,685.596 1814.14,685.596 1814.7,685.596 1815.26,685.596 1815.82,685.596 1816.38,685.596 1816.94,685.596 1817.5,685.596 1818.06,685.596 1818.62,685.596 1819.18,685.596 1819.73,685.596 1820.29,685.596 1820.85,685.596 1821.41,685.596 1821.97,685.596 1822.53,685.596 1823.09,685.596 1823.65,685.596 1824.21,685.596 1824.77,685.596 1825.33,685.596 1825.89,685.596 1826.45,685.596 1827,685.596 1827.56,685.596 1828.12,685.596 1828.68,685.596 1829.24,685.596 1829.8,685.596 1830.36,685.596 1830.92,685.596 1831.48,685.596 1832.04,685.596 1832.6,685.596 1833.16,685.596 1833.72,685.596 1834.27,685.596 1834.83,685.596 1835.39,685.596 1835.95,685.596 1836.51,685.596 1837.07,685.596 1837.63,685.596 1838.19,685.596 \"/>\n<path clip-path=\"url(#clip133)\" d=\"M720.247 683.878 L720.806 683.878 L721.365 683.878 L721.924 683.878 L722.484 683.878 L723.043 683.878 L723.602 683.878 L724.161 683.878 L724.721 683.878 L725.28 683.878 L725.839 683.878 L726.398 683.878 L726.958 683.878 L727.517 683.878 L728.076 683.878 L728.635 683.878 L729.195 683.878 L729.754 683.878 L730.313 683.878 L730.872 683.878 L731.432 683.878 L731.991 683.878 L732.55 683.878 L733.109 683.878 L733.669 683.878 L734.228 683.878 L734.787 683.878 L735.346 683.878 L735.906 683.878 L736.465 683.878 L737.024 683.878 L737.583 683.878 L738.143 683.878 L738.702 683.878 L739.261 683.878 L739.82 683.878 L740.38 683.878 L740.939 683.878 L741.498 683.878 L742.057 683.878 L742.617 683.878 L743.176 683.878 L743.735 683.878 L744.294 683.878 L744.854 683.878 L745.413 683.878 L745.972 683.878 L746.531 683.878 L747.091 683.878 L747.65 683.878 L748.209 683.878 L748.768 683.878 L749.328 683.878 L749.887 683.878 L750.446 683.878 L751.005 683.878 L751.565 683.878 L752.124 683.878 L752.683 683.878 L753.242 683.878 L753.802 683.878 L754.361 683.878 L754.92 683.878 L755.479 683.878 L756.039 683.878 L756.598 683.878 L757.157 683.878 L757.716 683.878 L758.276 683.878 L758.835 683.878 L759.394 683.878 L759.953 683.878 L760.513 683.878 L761.072 683.878 L761.631 683.878 L762.19 683.878 L762.75 683.878 L763.309 683.878 L763.868 683.878 L764.427 683.878 L764.987 683.878 L765.546 683.878 L766.105 683.878 L766.664 683.878 L767.224 683.878 L767.783 683.878 L768.342 683.878 L768.901 683.878 L769.461 683.878 L770.02 683.878 L770.579 683.878 L771.138 683.878 L771.698 683.878 L772.257 683.878 L772.816 683.878 L773.375 683.878 L773.935 683.878 L774.494 683.878 L775.053 683.878 L775.612 683.878 L776.172 683.878 L776.731 683.878 L777.29 683.878 L777.849 683.878 L778.409 683.878 L778.968 683.878 L779.527 683.878 L780.086 683.878 L780.646 683.878 L781.205 683.878 L781.764 683.878 L782.323 683.878 L782.883 683.878 L783.442 683.878 L784.001 683.878 L784.56 683.878 L785.12 683.878 L785.679 683.878 L786.238 683.878 L786.797 683.878 L787.357 683.878 L787.916 683.878 L788.475 683.878 L789.034 683.878 L789.594 683.878 L790.153 683.878 L790.712 683.878 L791.271 683.878 L791.831 683.878 L792.39 683.878 L792.949 683.878 L793.508 683.878 L794.068 683.878 L794.627 683.878 L795.186 683.878 L795.745 683.878 L796.305 683.878 L796.864 683.878 L797.423 683.878 L797.982 683.878 L798.542 683.878 L799.101 683.878 L799.66 683.878 L800.219 683.878 L800.779 683.878 L801.338 683.878 L801.897 683.878 L802.456 683.878 L803.016 683.878 L803.575 683.878 L804.134 683.878 L804.693 683.878 L805.253 683.878 L805.812 683.878 L806.371 683.878 L806.931 683.878 L807.49 683.878 L808.049 683.878 L808.608 683.878 L809.168 683.878 L809.727 683.878 L810.286 683.878 L810.845 683.878 L811.405 683.878 L811.964 683.878 L812.523 683.878 L813.082 683.878 L813.642 683.878 L814.201 683.878 L814.76 683.878 L815.319 683.878 L815.879 683.878 L816.438 683.878 L816.997 683.878 L817.556 683.878 L818.116 683.878 L818.675 683.878 L819.234 683.878 L819.793 683.878 L820.353 683.878 L820.912 683.878 L821.471 683.878 L822.03 683.878 L822.59 683.878 L823.149 683.878 L823.708 683.878 L824.267 683.878 L824.827 683.878 L825.386 683.878 L825.945 683.878 L826.504 683.878 L827.064 683.878 L827.623 683.878 L828.182 683.878 L828.741 683.878 L829.301 683.878 L829.86 683.878 L830.419 683.878 L830.978 683.878 L831.538 683.878 L832.097 683.878 L832.656 683.878 L833.215 683.878 L833.775 683.878 L834.334 683.878 L834.893 683.878 L835.452 683.878 L836.012 683.878 L836.571 683.878 L837.13 683.878 L837.689 683.878 L838.249 683.878 L838.808 683.878 L839.367 683.878 L839.926 683.878 L840.486 683.878 L841.045 683.878 L841.604 683.878 L842.163 683.878 L842.723 683.878 L843.282 683.878 L843.841 683.878 L844.4 683.878 L844.96 683.878 L845.519 683.878 L846.078 683.878 L846.637 683.878 L847.197 683.878 L847.756 683.878 L848.315 683.878 L848.874 683.878 L849.434 683.878 L849.993 683.878 L850.552 683.878 L851.111 683.878 L851.671 683.878 L852.23 683.878 L852.789 683.878 L853.348 683.878 L853.908 683.878 L854.467 683.878 L855.026 683.878 L855.585 683.878 L856.145 683.878 L856.704 683.878 L857.263 683.878 L857.822 683.878 L858.382 683.878 L858.941 683.878 L859.5 683.878 L860.059 683.878 L860.619 683.878 L861.178 683.878 L861.737 683.878 L862.296 683.878 L862.856 683.878 L863.415 683.878 L863.974 683.878 L864.533 683.878 L865.093 683.878 L865.652 683.878 L866.211 683.878 L866.77 683.878 L867.33 683.878 L867.889 683.878 L868.448 683.878 L869.007 683.878 L869.567 683.878 L870.126 683.878 L870.685 683.878 L871.244 683.878 L871.804 683.878 L872.363 683.878 L872.922 683.878 L873.481 683.878 L874.041 683.878 L874.6 683.878 L875.159 683.878 L875.718 683.878 L876.278 683.878 L876.837 683.878 L877.396 683.878 L877.955 683.878 L878.515 683.878 L879.074 683.878 L879.633 683.878 L880.192 683.878 L880.752 683.878 L881.311 683.878 L881.87 683.878 L882.429 683.878 L882.989 683.878 L883.548 683.878 L884.107 683.878 L884.666 683.878 L885.226 683.878 L885.785 683.878 L886.344 683.878 L886.903 683.878 L887.463 683.878 L888.022 683.878 L888.581 683.878 L889.14 683.878 L889.7 683.878 L890.259 683.878 L890.818 683.878 L891.377 683.878 L891.937 683.878 L892.496 683.878 L893.055 683.878 L893.614 683.878 L894.174 683.878 L894.733 683.878 L895.292 683.878 L895.851 683.878 L896.411 683.878 L896.97 683.878 L897.529 683.878 L898.088 683.878 L898.648 683.878 L899.207 683.878 L899.766 683.878 L900.325 683.878 L900.885 683.878 L901.444 683.878 L902.003 683.878 L902.562 683.878 L903.122 683.878 L903.681 683.878 L904.24 683.878 L904.799 683.878 L905.359 683.878 L905.918 683.878 L906.477 683.878 L907.036 683.878 L907.596 683.878 L908.155 683.878 L908.714 683.878 L909.273 683.878 L909.833 683.878 L910.392 683.878 L910.951 683.878 L911.51 683.878 L912.07 683.878 L912.629 683.878 L913.188 683.878 L913.747 683.878 L914.307 683.878 L914.866 683.878 L915.425 683.878 L915.984 683.878 L916.544 683.878 L917.103 683.878 L917.662 683.878 L918.221 683.878 L918.781 683.878 L919.34 683.878 L919.899 683.878 L920.458 683.878 L921.018 683.878 L921.577 683.878 L922.136 683.878 L922.695 683.878 L923.255 683.878 L923.814 683.878 L924.373 683.878 L924.932 683.878 L925.492 683.878 L926.051 683.878 L926.61 683.878 L927.169 683.878 L927.729 683.878 L928.288 683.878 L928.847 683.878 L929.406 683.878 L929.966 683.878 L930.525 683.878 L931.084 683.878 L931.644 683.878 L932.203 683.878 L932.762 683.878 L933.321 683.878 L933.881 683.878 L934.44 683.878 L934.999 683.878 L935.558 683.878 L936.118 683.878 L936.677 683.878 L937.236 683.878 L937.795 683.878 L938.355 683.878 L938.914 683.878 L939.473 683.878 L940.032 683.878 L940.592 683.878 L941.151 683.878 L941.71 683.878 L942.269 683.878 L942.829 683.878 L943.388 683.878 L943.947 683.878 L944.506 683.878 L945.066 683.878 L945.625 683.878 L946.184 683.878 L946.743 683.878 L947.303 683.878 L947.862 683.878 L948.421 683.878 L948.98 683.878 L949.54 683.878 L950.099 683.878 L950.658 683.878 L951.217 683.878 L951.777 683.878 L952.336 683.878 L952.895 683.878 L953.454 683.878 L954.014 683.878 L954.573 683.878 L955.132 683.878 L955.691 683.878 L956.251 683.878 L956.81 683.878 L957.369 683.878 L957.928 683.878 L958.488 683.878 L959.047 683.878 L959.606 683.878 L960.165 683.878 L960.725 683.878 L961.284 683.878 L961.843 683.878 L962.402 683.878 L962.962 683.878 L963.521 683.878 L964.08 683.878 L964.639 683.878 L965.199 683.878 L965.758 683.878 L966.317 683.878 L966.876 683.878 L967.436 683.878 L967.995 683.878 L968.554 683.878 L969.113 683.878 L969.673 683.878 L970.232 683.878 L970.791 683.878 L971.35 683.878 L971.91 683.878 L972.469 683.878 L973.028 683.878 L973.587 683.878 L974.147 683.878 L974.706 683.878 L975.265 683.878 L975.824 683.878 L976.384 683.878 L976.943 683.878 L977.502 683.878 L978.061 683.878 L978.621 683.878 L979.18 683.878 L979.739 683.878 L980.298 683.878 L980.858 683.878 L981.417 683.878 L981.976 683.878 L982.535 683.878 L983.095 683.878 L983.654 683.878 L984.213 683.878 L984.772 683.878 L985.332 683.878 L985.891 683.878 L986.45 683.878 L987.009 683.878 L987.569 683.878 L988.128 683.878 L988.687 683.878 L989.246 683.878 L989.806 683.878 L990.365 683.878 L990.924 683.878 L991.483 683.878 L992.043 683.878 L992.602 683.878 L993.161 683.878 L993.72 683.878 L994.28 683.878 L994.839 683.878 L995.398 683.878 L995.957 683.878 L996.517 683.878 L997.076 683.878 L997.635 683.878 L998.194 683.878 L998.754 683.878 L999.313 683.878 L999.872 683.878 L1000.43 683.878 L1000.99 683.878 L1001.55 683.878 L1002.11 683.878 L1002.67 683.878 L1003.23 683.878 L1003.79 683.878 L1004.35 683.878 L1004.91 683.878 L1005.46 683.878 L1006.02 683.878 L1006.58 683.878 L1007.14 683.878 L1007.7 683.878 L1008.26 683.878 L1008.82 683.878 L1009.38 683.878 L1009.94 683.878 L1010.5 683.878 L1011.06 683.878 L1011.62 683.878 L1012.18 683.878 L1012.73 683.878 L1013.29 683.878 L1013.85 683.878 L1014.41 683.878 L1014.97 683.878 L1015.53 683.878 L1016.09 683.878 L1016.65 683.878 L1017.21 683.878 L1017.77 683.878 L1018.33 683.878 L1018.89 683.878 L1019.45 683.878 L1020.01 683.878 L1020.56 683.878 L1021.12 683.878 L1021.68 683.878 L1022.24 683.878 L1022.8 683.878 L1023.36 683.878 L1023.92 683.878 L1024.48 683.878 L1025.04 683.878 L1025.6 683.878 L1026.16 683.878 L1026.72 683.878 L1027.28 683.878 L1027.83 683.878 L1028.39 683.878 L1028.95 683.878 L1029.51 683.878 L1030.07 683.878 L1030.63 683.878 L1031.19 683.878 L1031.75 683.878 L1032.31 683.878 L1032.87 683.878 L1033.43 683.878 L1033.99 683.878 L1034.55 683.878 L1035.1 683.878 L1035.66 683.878 L1036.22 683.878 L1036.78 683.878 L1037.34 683.878 L1037.9 683.878 L1038.46 683.878 L1039.02 683.878 L1039.58 683.878 L1040.14 683.878 L1040.7 683.878 L1041.26 683.878 L1041.82 683.878 L1042.38 683.878 L1042.93 683.878 L1043.49 683.878 L1044.05 683.878 L1044.61 683.878 L1045.17 683.878 L1045.73 683.878 L1046.29 683.878 L1046.85 683.878 L1047.41 683.878 L1047.97 683.878 L1048.53 683.878 L1049.09 683.878 L1049.65 683.878 L1050.2 683.878 L1050.76 683.878 L1051.32 683.878 L1051.88 683.878 L1052.44 683.878 L1053 683.878 L1053.56 683.878 L1054.12 683.878 L1054.68 683.878 L1055.24 683.878 L1055.8 683.878 L1056.36 683.878 L1056.92 683.878 L1057.48 683.878 L1058.03 683.878 L1058.59 683.878 L1059.15 683.878 L1059.71 683.878 L1060.27 683.878 L1060.83 683.878 L1061.39 683.878 L1061.95 683.878 L1062.51 683.878 L1063.07 683.878 L1063.63 683.878 L1064.19 683.878 L1064.75 683.878 L1065.3 683.878 L1065.86 683.878 L1066.42 683.878 L1066.98 683.878 L1067.54 683.878 L1068.1 683.878 L1068.66 683.878 L1069.22 683.878 L1069.78 683.878 L1070.34 683.878 L1070.9 683.878 L1071.46 683.878 L1072.02 683.878 L1072.57 683.878 L1073.13 683.878 L1073.69 683.878 L1074.25 683.878 L1074.81 683.878 L1075.37 683.878 L1075.93 683.878 L1076.49 683.878 L1077.05 683.878 L1077.61 683.878 L1078.17 683.878 L1078.73 683.878 L1079.29 683.878 L1079.85 683.878 L1080.4 683.878 L1080.96 683.878 L1081.52 683.878 L1082.08 683.878 L1082.64 683.878 L1083.2 683.878 L1083.76 683.878 L1084.32 683.878 L1084.88 683.878 L1085.44 683.878 L1086 683.878 L1086.56 683.878 L1087.12 683.878 L1087.67 683.878 L1088.23 683.878 L1088.79 683.878 L1089.35 683.878 L1089.91 683.878 L1090.47 683.878 L1091.03 683.878 L1091.59 683.878 L1092.15 683.878 L1092.71 683.878 L1093.27 683.878 L1093.83 683.878 L1094.39 683.878 L1094.94 683.878 L1095.5 683.878 L1096.06 683.878 L1096.62 683.878 L1097.18 683.878 L1097.74 683.878 L1098.3 683.878 L1098.86 683.878 L1099.42 683.878 L1099.98 683.878 L1100.54 683.878 L1101.1 683.878 L1101.66 683.878 L1102.22 683.878 L1102.77 683.878 L1103.33 683.878 L1103.89 683.878 L1104.45 683.878 L1105.01 683.878 L1105.57 683.878 L1106.13 683.878 L1106.69 683.878 L1107.25 683.878 L1107.81 683.878 L1108.37 683.878 L1108.93 683.878 L1109.49 683.878 L1110.04 683.878 L1110.6 683.878 L1111.16 683.878 L1111.72 683.878 L1112.28 683.878 L1112.84 683.878 L1113.4 683.878 L1113.96 683.878 L1114.52 683.878 L1115.08 683.878 L1115.64 683.878 L1116.2 683.878 L1116.76 683.878 L1117.31 683.878 L1117.87 683.878 L1118.43 683.878 L1118.99 683.878 L1119.55 683.878 L1120.11 683.878 L1120.67 683.878 L1121.23 683.878 L1121.79 683.878 L1122.35 683.878 L1122.91 683.878 L1123.47 683.878 L1124.03 683.878 L1124.59 683.878 L1125.14 683.878 L1125.7 683.878 L1126.26 683.878 L1126.82 683.878 L1127.38 683.878 L1127.94 683.878 L1128.5 683.878 L1129.06 683.878 L1129.62 683.878 L1130.18 683.878 L1130.74 683.878 L1131.3 683.878 L1131.86 683.878 L1132.41 683.878 L1132.97 683.878 L1133.53 683.878 L1134.09 683.878 L1134.65 683.878 L1135.21 683.878 L1135.77 683.878 L1136.33 683.878 L1136.89 683.878 L1137.45 683.878 L1138.01 683.878 L1138.57 683.878 L1139.13 683.878 L1139.68 683.878 L1140.24 683.878 L1140.8 683.878 L1141.36 683.878 L1141.92 683.878 L1142.48 683.878 L1143.04 683.878 L1143.6 683.878 L1144.16 683.878 L1144.72 683.878 L1145.28 683.878 L1145.84 683.878 L1146.4 683.878 L1146.96 683.878 L1147.51 683.878 L1148.07 683.878 L1148.63 683.878 L1149.19 683.878 L1149.75 683.878 L1150.31 683.878 L1150.87 683.878 L1151.43 683.878 L1151.99 683.878 L1152.55 683.878 L1153.11 683.878 L1153.67 683.878 L1154.23 683.878 L1154.78 683.878 L1155.34 683.878 L1155.9 683.878 L1156.46 683.878 L1157.02 683.878 L1157.58 683.878 L1158.14 683.878 L1158.7 683.878 L1159.26 683.878 L1159.82 683.878 L1160.38 683.878 L1160.94 683.878 L1161.5 683.878 L1162.05 683.878 L1162.61 683.878 L1163.17 683.878 L1163.73 683.878 L1164.29 683.878 L1164.85 683.878 L1165.41 683.878 L1165.97 683.878 L1166.53 683.878 L1167.09 683.878 L1167.65 683.878 L1168.21 683.878 L1168.77 683.878 L1169.33 683.878 L1169.88 683.878 L1170.44 683.878 L1171 683.878 L1171.56 683.878 L1172.12 683.878 L1172.68 683.878 L1173.24 683.878 L1173.8 683.878 L1174.36 683.878 L1174.92 683.878 L1175.48 683.878 L1176.04 683.878 L1176.6 683.878 L1177.15 683.878 L1177.71 683.878 L1178.27 683.878 L1178.83 683.878 L1179.39 683.878 L1179.95 683.878 L1180.51 683.878 L1181.07 683.878 L1181.63 683.878 L1182.19 683.878 L1182.75 683.878 L1183.31 683.878 L1183.87 683.878 L1184.43 683.878 L1184.98 683.878 L1185.54 683.878 L1186.1 683.878 L1186.66 683.878 L1187.22 683.878 L1187.78 683.878 L1188.34 683.878 L1188.9 683.878 L1189.46 683.878 L1190.02 683.878 L1190.58 683.878 L1191.14 683.878 L1191.7 683.878 L1192.25 683.878 L1192.81 683.878 L1193.37 683.878 L1193.93 683.878 L1194.49 683.878 L1195.05 683.878 L1195.61 683.878 L1196.17 683.878 L1196.73 683.878 L1197.29 683.878 L1197.85 683.878 L1198.41 683.878 L1198.97 683.878 L1199.52 683.878 L1200.08 683.878 L1200.64 683.878 L1201.2 683.878 L1201.76 683.878 L1202.32 683.878 L1202.88 683.878 L1203.44 683.878 L1204 683.878 L1204.56 683.878 L1205.12 683.878 L1205.68 683.878 L1206.24 683.878 L1206.8 683.878 L1207.35 683.878 L1207.91 683.878 L1208.47 683.878 L1209.03 683.878 L1209.59 683.878 L1210.15 683.878 L1210.71 683.878 L1211.27 683.878 L1211.83 683.878 L1212.39 683.878 L1212.95 683.878 L1213.51 683.878 L1214.07 683.878 L1214.62 683.878 L1215.18 683.878 L1215.74 683.878 L1216.3 683.878 L1216.86 683.878 L1217.42 683.878 L1217.98 683.878 L1218.54 683.878 L1219.1 683.878 L1219.66 683.878 L1220.22 683.878 L1220.78 683.878 L1221.34 683.878 L1221.89 683.878 L1222.45 683.878 L1223.01 683.878 L1223.57 683.878 L1224.13 683.878 L1224.69 683.878 L1225.25 683.878 L1225.81 683.878 L1226.37 683.878 L1226.93 683.878 L1227.49 683.878 L1228.05 683.878 L1228.61 683.878 L1229.17 683.878 L1229.72 683.878 L1230.28 683.878 L1230.84 683.878 L1231.4 683.878 L1231.96 683.878 L1232.52 683.878 L1233.08 683.878 L1233.64 683.878 L1234.2 683.878 L1234.76 683.878 L1235.32 683.878 L1235.88 683.878 L1236.44 683.878 L1236.99 683.878 L1237.55 683.878 L1238.11 683.878 L1238.67 683.878 L1239.23 683.878 L1239.79 683.878 L1240.35 683.878 L1240.91 683.878 L1241.47 683.878 L1242.03 683.878 L1242.59 683.878 L1243.15 683.878 L1243.71 683.878 L1244.26 683.878 L1244.82 683.878 L1245.38 683.878 L1245.94 683.878 L1246.5 683.878 L1247.06 683.878 L1247.62 683.878 L1248.18 683.878 L1248.74 683.878 L1249.3 683.878 L1249.86 683.878 L1250.42 683.878 L1250.98 683.878 L1251.54 683.878 L1252.09 683.878 L1252.65 683.878 L1253.21 683.878 L1253.77 683.878 L1254.33 683.878 L1254.89 683.878 L1255.45 683.878 L1256.01 683.878 L1256.57 683.878 L1257.13 683.878 L1257.69 683.878 L1258.25 683.878 L1258.81 683.878 L1259.36 683.878 L1259.92 683.878 L1260.48 683.878 L1261.04 683.878 L1261.6 683.878 L1262.16 683.878 L1262.72 683.878 L1263.28 683.878 L1263.84 683.878 L1264.4 683.878 L1264.96 683.878 L1265.52 683.878 L1266.08 683.878 L1266.63 683.878 L1267.19 683.878 L1267.75 683.878 L1268.31 683.878 L1268.87 683.878 L1269.43 683.878 L1269.99 683.878 L1270.55 683.878 L1271.11 683.878 L1271.67 683.878 L1272.23 683.878 L1272.79 683.878 L1273.35 683.878 L1273.91 683.878 L1274.46 683.878 L1275.02 683.878 L1275.58 683.878 L1276.14 683.878 L1276.7 683.878 L1277.26 683.878 L1277.82 683.878 L1278.38 683.878 L1278.94 683.878 L1279.5 683.878 L1280.06 683.878 L1280.62 683.878 L1281.18 683.878 L1281.73 683.878 L1282.29 683.878 L1282.85 683.878 L1283.41 683.878 L1283.97 683.878 L1284.53 683.878 L1285.09 683.878 L1285.65 683.878 L1286.21 683.878 L1286.77 683.878 L1287.33 683.878 L1287.89 683.878 L1288.45 683.878 L1289 683.878 L1289.56 683.878 L1290.12 683.878 L1290.68 683.878 L1291.24 683.878 L1291.8 683.878 L1292.36 683.878 L1292.92 683.878 L1293.48 683.878 L1294.04 683.878 L1294.6 683.878 L1295.16 683.878 L1295.72 683.878 L1296.28 683.878 L1296.83 683.878 L1297.39 683.878 L1297.95 683.878 L1298.51 683.878 L1299.07 683.878 L1299.63 683.878 L1300.19 683.878 L1300.75 683.878 L1301.31 683.878 L1301.87 683.878 L1302.43 683.878 L1302.99 683.878 L1303.55 683.878 L1304.1 683.878 L1304.66 683.878 L1305.22 683.878 L1305.78 683.878 L1306.34 683.878 L1306.9 683.878 L1307.46 683.878 L1308.02 683.878 L1308.58 683.878 L1309.14 683.878 L1309.7 683.878 L1310.26 683.878 L1310.82 683.878 L1311.38 683.878 L1311.93 683.878 L1312.49 683.878 L1313.05 683.878 L1313.61 683.878 L1314.17 683.878 L1314.73 683.878 L1315.29 683.878 L1315.85 683.878 L1316.41 683.878 L1316.97 683.878 L1317.53 683.878 L1318.09 683.878 L1318.65 683.878 L1319.2 683.878 L1319.76 683.878 L1320.32 683.878 L1320.88 683.878 L1321.44 683.878 L1322 683.878 L1322.56 683.878 L1323.12 683.878 L1323.68 683.878 L1324.24 683.878 L1324.8 683.878 L1325.36 683.878 L1325.92 683.878 L1326.47 683.878 L1327.03 683.878 L1327.59 683.878 L1328.15 683.878 L1328.71 683.878 L1329.27 683.878 L1329.83 683.878 L1330.39 683.878 L1330.95 683.878 L1331.51 683.878 L1332.07 683.878 L1332.63 683.878 L1333.19 683.878 L1333.75 683.878 L1334.3 683.878 L1334.86 683.878 L1335.42 683.878 L1335.98 683.878 L1336.54 683.878 L1337.1 683.878 L1337.66 683.878 L1338.22 683.878 L1338.78 683.878 L1339.34 683.878 L1339.9 683.878 L1340.46 683.878 L1341.02 683.878 L1341.57 683.878 L1342.13 683.878 L1342.69 683.878 L1343.25 683.878 L1343.81 683.878 L1344.37 683.878 L1344.93 683.878 L1345.49 683.878 L1346.05 683.878 L1346.61 683.878 L1347.17 683.878 L1347.73 683.878 L1348.29 683.878 L1348.84 683.878 L1349.4 683.878 L1349.96 683.878 L1350.52 683.878 L1351.08 683.878 L1351.64 683.878 L1352.2 683.878 L1352.76 683.878 L1353.32 683.878 L1353.88 683.878 L1354.44 683.878 L1355 683.878 L1355.56 683.878 L1356.12 683.878 L1356.67 683.878 L1357.23 683.878 L1357.79 683.878 L1358.35 683.878 L1358.91 683.878 L1359.47 683.878 L1360.03 683.878 L1360.59 683.878 L1361.15 683.878 L1361.71 683.878 L1362.27 683.878 L1362.83 683.878 L1363.39 683.878 L1363.94 683.878 L1364.5 683.878 L1365.06 683.878 L1365.62 683.878 L1366.18 683.878 L1366.74 683.878 L1367.3 683.878 L1367.86 683.878 L1368.42 683.878 L1368.98 683.878 L1369.54 683.878 L1370.1 683.878 L1370.66 683.878 L1371.21 683.878 L1371.77 683.878 L1372.33 683.878 L1372.89 683.878 L1373.45 683.878 L1374.01 683.878 L1374.57 683.878 L1375.13 683.878 L1375.69 683.878 L1376.25 683.878 L1376.81 683.878 L1377.37 683.878 L1377.93 683.878 L1378.49 683.878 L1379.04 683.878 L1379.6 683.878 L1380.16 683.878 L1380.72 683.878 L1381.28 683.878 L1381.84 683.878 L1382.4 683.878 L1382.96 683.878 L1383.52 683.878 L1384.08 683.878 L1384.64 683.878 L1385.2 683.878 L1385.76 683.878 L1386.31 683.878 L1386.87 683.878 L1387.43 683.878 L1387.99 683.878 L1388.55 683.878 L1389.11 683.878 L1389.67 683.878 L1390.23 683.878 L1390.79 683.878 L1391.35 683.878 L1391.91 683.878 L1392.47 683.878 L1393.03 683.878 L1393.58 683.878 L1394.14 683.878 L1394.7 683.878 L1395.26 683.878 L1395.82 683.878 L1396.38 683.878 L1396.94 683.878 L1397.5 683.878 L1398.06 683.878 L1398.62 683.878 L1399.18 683.878 L1399.74 683.878 L1400.3 683.878 L1400.86 683.878 L1401.41 683.878 L1401.97 683.878 L1402.53 683.878 L1403.09 683.878 L1403.65 683.878 L1404.21 683.878 L1404.77 683.878 L1405.33 683.878 L1405.89 683.878 L1406.45 683.878 L1407.01 683.878 L1407.57 683.878 L1408.13 683.878 L1408.68 683.878 L1409.24 683.878 L1409.8 683.878 L1410.36 683.878 L1410.92 683.878 L1411.48 683.878 L1412.04 683.878 L1412.6 683.878 L1413.16 683.878 L1413.72 683.878 L1414.28 683.878 L1414.84 683.878 L1415.4 683.878 L1415.95 683.878 L1416.51 683.878 L1417.07 683.878 L1417.63 683.878 L1418.19 683.878 L1418.75 683.878 L1419.31 683.878 L1419.87 683.878 L1420.43 683.878 L1420.99 683.878 L1421.55 683.878 L1422.11 683.878 L1422.67 683.878 L1423.23 683.878 L1423.78 683.878 L1424.34 683.878 L1424.9 683.878 L1425.46 683.878 L1426.02 683.878 L1426.58 683.878 L1427.14 683.878 L1427.7 683.878 L1428.26 683.878 L1428.82 683.878 L1429.38 683.878 L1429.94 683.878 L1430.5 683.878 L1431.05 683.878 L1431.61 683.878 L1432.17 683.878 L1432.73 683.878 L1433.29 683.878 L1433.85 683.878 L1434.41 683.878 L1434.97 683.878 L1435.53 683.878 L1436.09 683.878 L1436.65 683.878 L1437.21 683.878 L1437.77 683.878 L1438.33 683.878 L1438.88 683.878 L1439.44 683.878 L1440 683.878 L1440.56 683.878 L1441.12 683.878 L1441.68 683.878 L1442.24 683.878 L1442.8 683.878 L1443.36 683.878 L1443.92 683.878 L1444.48 683.878 L1445.04 683.878 L1445.6 683.878 L1446.15 683.878 L1446.71 683.878 L1447.27 683.878 L1447.83 683.878 L1448.39 683.878 L1448.95 683.878 L1449.51 683.878 L1450.07 683.878 L1450.63 683.878 L1451.19 683.878 L1451.75 683.878 L1452.31 683.878 L1452.87 683.878 L1453.42 683.878 L1453.98 683.878 L1454.54 683.878 L1455.1 683.878 L1455.66 683.878 L1456.22 683.878 L1456.78 683.878 L1457.34 683.878 L1457.9 683.878 L1458.46 683.878 L1459.02 683.878 L1459.58 683.878 L1460.14 683.878 L1460.7 683.878 L1461.25 683.878 L1461.81 683.878 L1462.37 683.878 L1462.93 683.878 L1463.49 683.878 L1464.05 683.878 L1464.61 683.878 L1465.17 683.878 L1465.73 683.878 L1466.29 683.878 L1466.85 683.878 L1467.41 683.878 L1467.97 683.878 L1468.52 683.878 L1469.08 683.878 L1469.64 683.878 L1470.2 683.878 L1470.76 683.878 L1471.32 683.878 L1471.88 683.878 L1472.44 683.878 L1473 683.878 L1473.56 683.878 L1474.12 683.878 L1474.68 683.878 L1475.24 683.878 L1475.79 683.878 L1476.35 683.878 L1476.91 683.878 L1477.47 683.878 L1478.03 683.878 L1478.59 683.878 L1479.15 683.878 L1479.71 683.878 L1480.27 683.878 L1480.83 683.878 L1481.39 683.878 L1481.95 683.878 L1482.51 683.878 L1483.07 683.878 L1483.62 683.878 L1484.18 683.878 L1484.74 683.878 L1485.3 683.878 L1485.86 683.878 L1486.42 683.878 L1486.98 683.878 L1487.54 683.878 L1488.1 683.878 L1488.66 683.878 L1489.22 683.878 L1489.78 683.878 L1490.34 683.878 L1490.89 683.878 L1491.45 683.878 L1492.01 683.878 L1492.57 683.878 L1493.13 683.878 L1493.69 683.878 L1494.25 683.878 L1494.81 683.878 L1495.37 683.878 L1495.93 683.878 L1496.49 683.878 L1497.05 683.878 L1497.61 683.878 L1498.16 683.878 L1498.72 683.878 L1499.28 683.878 L1499.84 683.878 L1500.4 683.878 L1500.96 683.878 L1501.52 683.878 L1502.08 683.878 L1502.64 683.878 L1503.2 683.878 L1503.76 683.878 L1504.32 683.878 L1504.88 683.878 L1505.44 683.878 L1505.99 683.878 L1506.55 683.878 L1507.11 683.878 L1507.67 683.878 L1508.23 683.878 L1508.79 683.878 L1509.35 683.878 L1509.91 683.878 L1510.47 683.878 L1511.03 683.878 L1511.59 683.878 L1512.15 683.878 L1512.71 683.878 L1513.26 683.878 L1513.82 683.878 L1514.38 683.878 L1514.94 683.878 L1515.5 683.878 L1516.06 683.878 L1516.62 683.878 L1517.18 683.878 L1517.74 683.878 L1518.3 683.878 L1518.86 683.878 L1519.42 683.878 L1519.98 683.878 L1520.53 683.878 L1521.09 683.878 L1521.65 683.878 L1522.21 683.878 L1522.77 683.878 L1523.33 683.878 L1523.89 683.878 L1524.45 683.878 L1525.01 683.878 L1525.57 683.878 L1526.13 683.878 L1526.69 683.878 L1527.25 683.878 L1527.81 683.878 L1528.36 683.878 L1528.92 683.878 L1529.48 683.878 L1530.04 683.878 L1530.6 683.878 L1531.16 683.878 L1531.72 683.878 L1532.28 683.878 L1532.84 683.878 L1533.4 683.878 L1533.96 683.878 L1534.52 683.878 L1535.08 683.878 L1535.63 683.878 L1536.19 683.878 L1536.75 683.878 L1537.31 683.878 L1537.87 683.878 L1538.43 683.878 L1538.99 683.878 L1539.55 683.878 L1540.11 683.878 L1540.67 683.878 L1541.23 683.878 L1541.79 683.878 L1542.35 683.878 L1542.9 683.878 L1543.46 683.878 L1544.02 683.878 L1544.58 683.878 L1545.14 683.878 L1545.7 683.878 L1546.26 683.878 L1546.82 683.878 L1547.38 683.878 L1547.94 683.878 L1548.5 683.878 L1549.06 683.878 L1549.62 683.878 L1550.18 683.878 L1550.73 683.878 L1551.29 683.878 L1551.85 683.878 L1552.41 683.878 L1552.97 683.878 L1553.53 683.878 L1554.09 683.878 L1554.65 683.878 L1555.21 683.878 L1555.77 683.878 L1556.33 683.878 L1556.89 683.878 L1557.45 683.878 L1558 683.878 L1558.56 683.878 L1559.12 683.878 L1559.68 683.878 L1560.24 683.878 L1560.8 683.878 L1561.36 683.878 L1561.92 683.878 L1562.48 683.878 L1563.04 683.878 L1563.6 683.878 L1564.16 683.878 L1564.72 683.878 L1565.28 683.878 L1565.83 683.878 L1566.39 683.878 L1566.95 683.878 L1567.51 683.878 L1568.07 683.878 L1568.63 683.878 L1569.19 683.878 L1569.75 683.878 L1570.31 683.878 L1570.87 683.878 L1571.43 683.878 L1571.99 683.878 L1572.55 683.878 L1573.1 683.878 L1573.66 683.878 L1574.22 683.878 L1574.78 683.878 L1575.34 683.878 L1575.9 683.878 L1576.46 683.878 L1577.02 683.878 L1577.58 683.878 L1578.14 683.878 L1578.7 683.878 L1579.26 683.878 L1579.82 683.878 L1580.37 683.878 L1580.93 683.878 L1581.49 683.878 L1582.05 683.878 L1582.61 683.878 L1583.17 683.878 L1583.73 683.878 L1584.29 683.878 L1584.85 683.878 L1585.41 683.878 L1585.97 683.878 L1586.53 683.878 L1587.09 683.878 L1587.65 683.878 L1588.2 683.878 L1588.76 683.878 L1589.32 683.878 L1589.88 683.878 L1590.44 683.878 L1591 683.878 L1591.56 683.878 L1592.12 683.878 L1592.68 683.878 L1593.24 683.878 L1593.8 683.878 L1594.36 683.878 L1594.92 683.878 L1595.47 683.878 L1596.03 683.878 L1596.59 683.878 L1597.15 683.878 L1597.71 683.878 L1598.27 683.878 L1598.83 683.878 L1599.39 683.878 L1599.95 683.878 L1600.51 683.878 L1601.07 683.878 L1601.63 683.878 L1602.19 683.878 L1602.74 683.878 L1603.3 683.878 L1603.86 683.878 L1604.42 683.878 L1604.98 683.878 L1605.54 683.878 L1606.1 683.878 L1606.66 683.878 L1607.22 683.878 L1607.78 683.878 L1608.34 683.878 L1608.9 683.878 L1609.46 683.878 L1610.02 683.878 L1610.57 683.878 L1611.13 683.878 L1611.69 683.878 L1612.25 683.878 L1612.81 683.878 L1613.37 683.878 L1613.93 683.878 L1614.49 683.878 L1615.05 683.878 L1615.61 683.878 L1616.17 683.878 L1616.73 683.878 L1617.29 683.878 L1617.84 683.878 L1618.4 683.878 L1618.96 683.878 L1619.52 683.878 L1620.08 683.878 L1620.64 683.878 L1621.2 683.878 L1621.76 683.878 L1622.32 683.878 L1622.88 683.878 L1623.44 683.878 L1624 683.878 L1624.56 683.878 L1625.11 683.878 L1625.67 683.878 L1626.23 683.878 L1626.79 683.878 L1627.35 683.878 L1627.91 683.878 L1628.47 683.878 L1629.03 683.878 L1629.59 683.878 L1630.15 683.878 L1630.71 683.878 L1631.27 683.878 L1631.83 683.878 L1632.39 683.878 L1632.94 683.878 L1633.5 683.878 L1634.06 683.878 L1634.62 683.878 L1635.18 683.878 L1635.74 683.878 L1636.3 683.878 L1636.86 683.878 L1637.42 683.878 L1637.98 683.878 L1638.54 683.878 L1639.1 683.878 L1639.66 683.878 L1640.21 683.878 L1640.77 683.878 L1641.33 683.878 L1641.89 683.878 L1642.45 683.878 L1643.01 683.878 L1643.57 683.878 L1644.13 683.878 L1644.69 683.878 L1645.25 683.878 L1645.81 683.878 L1646.37 683.878 L1646.93 683.878 L1647.48 683.878 L1648.04 683.878 L1648.6 683.878 L1649.16 683.878 L1649.72 683.878 L1650.28 683.878 L1650.84 683.878 L1651.4 683.878 L1651.96 683.878 L1652.52 683.878 L1653.08 683.878 L1653.64 683.878 L1654.2 683.878 L1654.76 683.878 L1655.31 683.878 L1655.87 683.878 L1656.43 683.878 L1656.99 683.878 L1657.55 683.878 L1658.11 683.878 L1658.67 683.878 L1659.23 683.878 L1659.79 683.878 L1660.35 683.878 L1660.91 683.878 L1661.47 683.878 L1662.03 683.878 L1662.58 683.878 L1663.14 683.878 L1663.7 683.878 L1664.26 683.878 L1664.82 683.878 L1665.38 683.878 L1665.94 683.878 L1666.5 683.878 L1667.06 683.878 L1667.62 683.878 L1668.18 683.878 L1668.74 683.878 L1669.3 683.878 L1669.85 683.878 L1670.41 683.878 L1670.97 683.878 L1671.53 683.878 L1672.09 683.878 L1672.65 683.878 L1673.21 683.878 L1673.77 683.878 L1674.33 683.878 L1674.89 683.878 L1675.45 683.878 L1676.01 683.878 L1676.57 683.878 L1677.13 683.878 L1677.68 683.878 L1678.24 683.878 L1678.8 683.878 L1679.36 683.878 L1679.92 683.878 L1680.48 683.878 L1681.04 683.878 L1681.6 683.878 L1682.16 683.878 L1682.72 683.878 L1683.28 683.878 L1683.84 683.878 L1684.4 683.878 L1684.95 683.878 L1685.51 683.878 L1686.07 683.878 L1686.63 683.878 L1687.19 683.878 L1687.75 683.878 L1688.31 683.878 L1688.87 683.878 L1689.43 683.878 L1689.99 683.878 L1690.55 683.878 L1691.11 683.878 L1691.67 683.878 L1692.23 683.878 L1692.78 683.878 L1693.34 683.878 L1693.9 683.878 L1694.46 683.878 L1695.02 683.878 L1695.58 683.878 L1696.14 683.878 L1696.7 683.878 L1697.26 683.878 L1697.82 683.878 L1698.38 683.878 L1698.94 683.878 L1699.5 683.878 L1700.05 683.878 L1700.61 683.878 L1701.17 683.878 L1701.73 683.878 L1702.29 683.878 L1702.85 683.878 L1703.41 683.878 L1703.97 683.878 L1704.53 683.878 L1705.09 683.878 L1705.65 683.878 L1706.21 683.878 L1706.77 683.878 L1707.32 683.878 L1707.88 683.878 L1708.44 683.878 L1709 683.878 L1709.56 683.878 L1710.12 683.878 L1710.68 683.878 L1711.24 683.878 L1711.8 683.878 L1712.36 683.878 L1712.92 683.878 L1713.48 683.878 L1714.04 683.878 L1714.6 683.878 L1715.15 683.878 L1715.71 683.878 L1716.27 683.878 L1716.83 683.878 L1717.39 683.878 L1717.95 683.878 L1718.51 683.878 L1719.07 683.878 L1719.63 683.878 L1720.19 683.878 L1720.75 683.878 L1721.31 683.878 L1721.87 683.878 L1722.42 683.878 L1722.98 683.878 L1723.54 683.878 L1724.1 683.878 L1724.66 683.878 L1725.22 683.878 L1725.78 683.878 L1726.34 683.878 L1726.9 683.878 L1727.46 683.878 L1728.02 683.878 L1728.58 683.878 L1729.14 683.878 L1729.69 683.878 L1730.25 683.878 L1730.81 683.878 L1731.37 683.878 L1731.93 683.878 L1732.49 683.878 L1733.05 683.878 L1733.61 683.878 L1734.17 683.878 L1734.73 683.878 L1735.29 683.878 L1735.85 683.878 L1736.41 683.878 L1736.97 683.878 L1737.52 683.878 L1738.08 683.878 L1738.64 683.878 L1739.2 683.878 L1739.76 683.878 L1740.32 683.878 L1740.88 683.878 L1741.44 683.878 L1742 683.878 L1742.56 683.878 L1743.12 683.878 L1743.68 683.878 L1744.24 683.878 L1744.79 683.878 L1745.35 683.878 L1745.91 683.878 L1746.47 683.878 L1747.03 683.878 L1747.59 683.878 L1748.15 683.878 L1748.71 683.878 L1749.27 683.878 L1749.83 683.878 L1750.39 683.878 L1750.95 683.878 L1751.51 683.878 L1752.06 683.878 L1752.62 683.878 L1753.18 683.878 L1753.74 683.878 L1754.3 683.878 L1754.86 683.878 L1755.42 683.878 L1755.98 683.878 L1756.54 683.878 L1757.1 683.878 L1757.66 683.878 L1758.22 683.878 L1758.78 683.878 L1759.34 683.878 L1759.89 683.878 L1760.45 683.878 L1761.01 683.878 L1761.57 683.878 L1762.13 683.878 L1762.69 683.878 L1763.25 683.878 L1763.81 683.878 L1764.37 683.878 L1764.93 683.878 L1765.49 683.878 L1766.05 683.878 L1766.61 683.878 L1767.16 683.878 L1767.72 683.878 L1768.28 683.878 L1768.84 683.878 L1769.4 683.878 L1769.96 683.878 L1770.52 683.878 L1771.08 683.878 L1771.64 683.878 L1772.2 683.878 L1772.76 683.878 L1773.32 683.878 L1773.88 683.878 L1774.43 683.878 L1774.99 683.878 L1775.55 683.878 L1776.11 683.878 L1776.67 683.878 L1777.23 683.878 L1777.79 683.878 L1778.35 683.878 L1778.91 683.878 L1779.47 683.878 L1780.03 683.878 L1780.59 683.878 L1781.15 683.878 L1781.71 683.878 L1782.26 683.878 L1782.82 683.878 L1783.38 683.878 L1783.94 683.878 L1784.5 683.878 L1785.06 683.878 L1785.62 683.878 L1786.18 683.878 L1786.74 683.878 L1787.3 683.878 L1787.86 683.878 L1788.42 683.878 L1788.98 683.878 L1789.53 683.878 L1790.09 683.878 L1790.65 683.878 L1791.21 683.878 L1791.77 683.878 L1792.33 683.878 L1792.89 683.878 L1793.45 683.878 L1794.01 683.878 L1794.57 683.878 L1795.13 683.878 L1795.69 683.878 L1796.25 683.878 L1796.8 683.878 L1797.36 683.878 L1797.92 683.878 L1798.48 683.878 L1799.04 683.878 L1799.6 683.878 L1800.16 683.878 L1800.72 683.878 L1801.28 683.878 L1801.84 683.878 L1802.4 683.878 L1802.96 683.878 L1803.52 683.878 L1804.08 683.878 L1804.63 683.878 L1805.19 683.878 L1805.75 683.878 L1806.31 683.878 L1806.87 683.878 L1807.43 683.878 L1807.99 683.878 L1808.55 683.878 L1809.11 683.878 L1809.67 683.878 L1810.23 683.878 L1810.79 683.878 L1811.35 683.878 L1811.9 683.878 L1812.46 683.878 L1813.02 683.878 L1813.58 683.878 L1814.14 683.878 L1814.7 683.878 L1815.26 683.878 L1815.82 683.878 L1816.38 683.878 L1816.94 683.878 L1817.5 683.878 L1818.06 683.878 L1818.62 683.878 L1819.18 683.878 L1819.73 683.878 L1820.29 683.878 L1820.85 683.878 L1821.41 683.878 L1821.97 683.878 L1822.53 683.878 L1823.09 683.878 L1823.65 683.878 L1824.21 683.878 L1824.77 683.878 L1825.33 683.878 L1825.89 683.878 L1826.45 683.878 L1827 683.878 L1827.56 683.878 L1828.12 683.878 L1828.68 683.878 L1829.24 683.878 L1829.8 683.878 L1830.36 683.878 L1830.92 683.878 L1831.48 683.878 L1832.04 683.878 L1832.6 683.878 L1833.16 683.878 L1833.72 683.878 L1834.27 683.878 L1834.83 683.878 L1835.39 683.878 L1835.95 683.878 L1836.51 683.878 L1837.07 683.878 L1837.63 683.878 L1838.19 683.878 L1838.19 682.405 L1837.63 682.405 L1837.07 682.405 L1836.51 682.405 L1835.95 682.405 L1835.39 682.405 L1834.83 682.405 L1834.27 682.405 L1833.72 682.405 L1833.16 682.405 L1832.6 682.405 L1832.04 682.405 L1831.48 682.405 L1830.92 682.405 L1830.36 682.405 L1829.8 682.405 L1829.24 682.405 L1828.68 682.405 L1828.12 682.405 L1827.56 682.405 L1827 682.405 L1826.45 682.405 L1825.89 682.405 L1825.33 682.405 L1824.77 682.405 L1824.21 682.405 L1823.65 682.405 L1823.09 682.405 L1822.53 682.405 L1821.97 682.405 L1821.41 682.405 L1820.85 682.405 L1820.29 682.405 L1819.73 682.405 L1819.18 682.405 L1818.62 682.405 L1818.06 682.405 L1817.5 682.405 L1816.94 682.405 L1816.38 682.405 L1815.82 682.405 L1815.26 682.405 L1814.7 682.405 L1814.14 682.405 L1813.58 682.405 L1813.02 682.405 L1812.46 682.405 L1811.9 682.405 L1811.35 682.405 L1810.79 682.405 L1810.23 682.405 L1809.67 682.405 L1809.11 682.405 L1808.55 682.405 L1807.99 682.405 L1807.43 682.405 L1806.87 682.405 L1806.31 682.405 L1805.75 682.405 L1805.19 682.405 L1804.63 682.405 L1804.08 682.405 L1803.52 682.405 L1802.96 682.405 L1802.4 682.405 L1801.84 682.405 L1801.28 682.405 L1800.72 682.405 L1800.16 682.405 L1799.6 682.405 L1799.04 682.405 L1798.48 682.405 L1797.92 682.405 L1797.36 682.405 L1796.8 682.405 L1796.25 682.405 L1795.69 682.405 L1795.13 682.405 L1794.57 682.405 L1794.01 682.405 L1793.45 682.405 L1792.89 682.405 L1792.33 682.405 L1791.77 682.405 L1791.21 682.405 L1790.65 682.405 L1790.09 682.405 L1789.53 682.405 L1788.98 682.405 L1788.42 682.405 L1787.86 682.405 L1787.3 682.405 L1786.74 682.405 L1786.18 682.405 L1785.62 682.405 L1785.06 682.405 L1784.5 682.405 L1783.94 682.405 L1783.38 682.405 L1782.82 682.405 L1782.26 682.405 L1781.71 682.405 L1781.15 682.405 L1780.59 682.405 L1780.03 682.405 L1779.47 682.405 L1778.91 682.405 L1778.35 682.405 L1777.79 682.405 L1777.23 682.405 L1776.67 682.405 L1776.11 682.405 L1775.55 682.405 L1774.99 682.405 L1774.43 682.405 L1773.88 682.405 L1773.32 682.405 L1772.76 682.405 L1772.2 682.405 L1771.64 682.405 L1771.08 682.405 L1770.52 682.405 L1769.96 682.405 L1769.4 682.405 L1768.84 682.405 L1768.28 682.405 L1767.72 682.405 L1767.16 682.405 L1766.61 682.405 L1766.05 682.405 L1765.49 682.405 L1764.93 682.405 L1764.37 682.405 L1763.81 682.405 L1763.25 682.405 L1762.69 682.405 L1762.13 682.405 L1761.57 682.405 L1761.01 682.405 L1760.45 682.405 L1759.89 682.405 L1759.34 682.405 L1758.78 682.405 L1758.22 682.405 L1757.66 682.405 L1757.1 682.405 L1756.54 682.405 L1755.98 682.405 L1755.42 682.405 L1754.86 682.405 L1754.3 682.405 L1753.74 682.405 L1753.18 682.405 L1752.62 682.405 L1752.06 682.405 L1751.51 682.405 L1750.95 682.405 L1750.39 682.405 L1749.83 682.405 L1749.27 682.405 L1748.71 682.405 L1748.15 682.405 L1747.59 682.405 L1747.03 682.405 L1746.47 682.405 L1745.91 682.405 L1745.35 682.405 L1744.79 682.405 L1744.24 682.405 L1743.68 682.405 L1743.12 682.405 L1742.56 682.405 L1742 682.405 L1741.44 682.405 L1740.88 682.405 L1740.32 682.405 L1739.76 682.405 L1739.2 682.405 L1738.64 682.405 L1738.08 682.405 L1737.52 682.405 L1736.97 682.405 L1736.41 682.405 L1735.85 682.405 L1735.29 682.405 L1734.73 682.405 L1734.17 682.405 L1733.61 682.405 L1733.05 682.405 L1732.49 682.405 L1731.93 682.405 L1731.37 682.405 L1730.81 682.405 L1730.25 682.405 L1729.69 682.405 L1729.14 682.405 L1728.58 682.405 L1728.02 682.405 L1727.46 682.405 L1726.9 682.405 L1726.34 682.405 L1725.78 682.405 L1725.22 682.405 L1724.66 682.405 L1724.1 682.405 L1723.54 682.405 L1722.98 682.405 L1722.42 682.405 L1721.87 682.405 L1721.31 682.405 L1720.75 682.405 L1720.19 682.405 L1719.63 682.405 L1719.07 682.405 L1718.51 682.405 L1717.95 682.405 L1717.39 682.405 L1716.83 682.405 L1716.27 682.405 L1715.71 682.405 L1715.15 682.405 L1714.6 682.405 L1714.04 682.405 L1713.48 682.405 L1712.92 682.405 L1712.36 682.405 L1711.8 682.405 L1711.24 682.405 L1710.68 682.405 L1710.12 682.405 L1709.56 682.405 L1709 682.405 L1708.44 682.405 L1707.88 682.405 L1707.32 682.405 L1706.77 682.405 L1706.21 682.405 L1705.65 682.405 L1705.09 682.405 L1704.53 682.405 L1703.97 682.405 L1703.41 682.405 L1702.85 682.405 L1702.29 682.405 L1701.73 682.405 L1701.17 682.405 L1700.61 682.405 L1700.05 682.405 L1699.5 682.405 L1698.94 682.405 L1698.38 682.405 L1697.82 682.405 L1697.26 682.405 L1696.7 682.405 L1696.14 682.405 L1695.58 682.405 L1695.02 682.405 L1694.46 682.405 L1693.9 682.405 L1693.34 682.405 L1692.78 682.405 L1692.23 682.405 L1691.67 682.405 L1691.11 682.405 L1690.55 682.405 L1689.99 682.405 L1689.43 682.405 L1688.87 682.405 L1688.31 682.405 L1687.75 682.405 L1687.19 682.405 L1686.63 682.405 L1686.07 682.405 L1685.51 682.405 L1684.95 682.405 L1684.4 682.405 L1683.84 682.405 L1683.28 682.405 L1682.72 682.405 L1682.16 682.405 L1681.6 682.405 L1681.04 682.405 L1680.48 682.405 L1679.92 682.405 L1679.36 682.405 L1678.8 682.405 L1678.24 682.405 L1677.68 682.405 L1677.13 682.405 L1676.57 682.405 L1676.01 682.405 L1675.45 682.405 L1674.89 682.405 L1674.33 682.405 L1673.77 682.405 L1673.21 682.405 L1672.65 682.405 L1672.09 682.405 L1671.53 682.405 L1670.97 682.405 L1670.41 682.405 L1669.85 682.405 L1669.3 682.405 L1668.74 682.405 L1668.18 682.405 L1667.62 682.405 L1667.06 682.405 L1666.5 682.405 L1665.94 682.405 L1665.38 682.405 L1664.82 682.405 L1664.26 682.405 L1663.7 682.405 L1663.14 682.405 L1662.58 682.405 L1662.03 682.405 L1661.47 682.405 L1660.91 682.405 L1660.35 682.405 L1659.79 682.405 L1659.23 682.405 L1658.67 682.405 L1658.11 682.405 L1657.55 682.405 L1656.99 682.405 L1656.43 682.405 L1655.87 682.405 L1655.31 682.405 L1654.76 682.405 L1654.2 682.405 L1653.64 682.405 L1653.08 682.405 L1652.52 682.405 L1651.96 682.405 L1651.4 682.405 L1650.84 682.405 L1650.28 682.405 L1649.72 682.405 L1649.16 682.405 L1648.6 682.405 L1648.04 682.405 L1647.48 682.405 L1646.93 682.405 L1646.37 682.405 L1645.81 682.405 L1645.25 682.405 L1644.69 682.405 L1644.13 682.405 L1643.57 682.405 L1643.01 682.405 L1642.45 682.405 L1641.89 682.405 L1641.33 682.405 L1640.77 682.405 L1640.21 682.405 L1639.66 682.405 L1639.1 682.405 L1638.54 682.405 L1637.98 682.405 L1637.42 682.405 L1636.86 682.405 L1636.3 682.405 L1635.74 682.405 L1635.18 682.405 L1634.62 682.405 L1634.06 682.405 L1633.5 682.405 L1632.94 682.405 L1632.39 682.405 L1631.83 682.405 L1631.27 682.405 L1630.71 682.405 L1630.15 682.405 L1629.59 682.405 L1629.03 682.405 L1628.47 682.405 L1627.91 682.405 L1627.35 682.405 L1626.79 682.405 L1626.23 682.405 L1625.67 682.405 L1625.11 682.405 L1624.56 682.405 L1624 682.405 L1623.44 682.405 L1622.88 682.405 L1622.32 682.405 L1621.76 682.405 L1621.2 682.405 L1620.64 682.405 L1620.08 682.405 L1619.52 682.405 L1618.96 682.405 L1618.4 682.405 L1617.84 682.405 L1617.29 682.405 L1616.73 682.405 L1616.17 682.405 L1615.61 682.405 L1615.05 682.405 L1614.49 682.405 L1613.93 682.405 L1613.37 682.405 L1612.81 682.405 L1612.25 682.405 L1611.69 682.405 L1611.13 682.405 L1610.57 682.405 L1610.02 682.405 L1609.46 682.405 L1608.9 682.405 L1608.34 682.405 L1607.78 682.405 L1607.22 682.405 L1606.66 682.405 L1606.1 682.405 L1605.54 682.405 L1604.98 682.405 L1604.42 682.405 L1603.86 682.405 L1603.3 682.405 L1602.74 682.405 L1602.19 682.405 L1601.63 682.405 L1601.07 682.405 L1600.51 682.405 L1599.95 682.405 L1599.39 682.405 L1598.83 682.405 L1598.27 682.405 L1597.71 682.405 L1597.15 682.405 L1596.59 682.405 L1596.03 682.405 L1595.47 682.405 L1594.92 682.405 L1594.36 682.405 L1593.8 682.405 L1593.24 682.405 L1592.68 682.405 L1592.12 682.405 L1591.56 682.405 L1591 682.405 L1590.44 682.405 L1589.88 682.405 L1589.32 682.405 L1588.76 682.405 L1588.2 682.405 L1587.65 682.405 L1587.09 682.405 L1586.53 682.405 L1585.97 682.405 L1585.41 682.405 L1584.85 682.405 L1584.29 682.405 L1583.73 682.405 L1583.17 682.405 L1582.61 682.405 L1582.05 682.405 L1581.49 682.405 L1580.93 682.405 L1580.37 682.405 L1579.82 682.405 L1579.26 682.405 L1578.7 682.405 L1578.14 682.405 L1577.58 682.405 L1577.02 682.405 L1576.46 682.405 L1575.9 682.405 L1575.34 682.405 L1574.78 682.405 L1574.22 682.405 L1573.66 682.405 L1573.1 682.405 L1572.55 682.405 L1571.99 682.405 L1571.43 682.405 L1570.87 682.405 L1570.31 682.405 L1569.75 682.405 L1569.19 682.405 L1568.63 682.405 L1568.07 682.405 L1567.51 682.405 L1566.95 682.405 L1566.39 682.405 L1565.83 682.405 L1565.28 682.405 L1564.72 682.405 L1564.16 682.405 L1563.6 682.405 L1563.04 682.405 L1562.48 682.405 L1561.92 682.405 L1561.36 682.405 L1560.8 682.405 L1560.24 682.405 L1559.68 682.405 L1559.12 682.405 L1558.56 682.405 L1558 682.405 L1557.45 682.405 L1556.89 682.405 L1556.33 682.405 L1555.77 682.405 L1555.21 682.405 L1554.65 682.405 L1554.09 682.405 L1553.53 682.405 L1552.97 682.405 L1552.41 682.405 L1551.85 682.405 L1551.29 682.405 L1550.73 682.405 L1550.18 682.405 L1549.62 682.405 L1549.06 682.405 L1548.5 682.405 L1547.94 682.405 L1547.38 682.405 L1546.82 682.405 L1546.26 682.405 L1545.7 682.405 L1545.14 682.405 L1544.58 682.405 L1544.02 682.405 L1543.46 682.405 L1542.9 682.405 L1542.35 682.405 L1541.79 682.405 L1541.23 682.405 L1540.67 682.405 L1540.11 682.405 L1539.55 682.405 L1538.99 682.405 L1538.43 682.405 L1537.87 682.405 L1537.31 682.405 L1536.75 682.405 L1536.19 682.405 L1535.63 682.405 L1535.08 682.405 L1534.52 682.405 L1533.96 682.405 L1533.4 682.405 L1532.84 682.405 L1532.28 682.405 L1531.72 682.405 L1531.16 682.405 L1530.6 682.405 L1530.04 682.405 L1529.48 682.405 L1528.92 682.405 L1528.36 682.405 L1527.81 682.405 L1527.25 682.405 L1526.69 682.405 L1526.13 682.405 L1525.57 682.405 L1525.01 682.405 L1524.45 682.405 L1523.89 682.405 L1523.33 682.405 L1522.77 682.405 L1522.21 682.405 L1521.65 682.405 L1521.09 682.405 L1520.53 682.405 L1519.98 682.405 L1519.42 682.405 L1518.86 682.405 L1518.3 682.405 L1517.74 682.405 L1517.18 682.405 L1516.62 682.405 L1516.06 682.405 L1515.5 682.405 L1514.94 682.405 L1514.38 682.405 L1513.82 682.405 L1513.26 682.405 L1512.71 682.405 L1512.15 682.405 L1511.59 682.405 L1511.03 682.405 L1510.47 682.405 L1509.91 682.405 L1509.35 682.405 L1508.79 682.405 L1508.23 682.405 L1507.67 682.405 L1507.11 682.405 L1506.55 682.405 L1505.99 682.405 L1505.44 682.405 L1504.88 682.405 L1504.32 682.405 L1503.76 682.405 L1503.2 682.405 L1502.64 682.405 L1502.08 682.405 L1501.52 682.405 L1500.96 682.405 L1500.4 682.405 L1499.84 682.405 L1499.28 682.405 L1498.72 682.405 L1498.16 682.405 L1497.61 682.405 L1497.05 682.405 L1496.49 682.405 L1495.93 682.405 L1495.37 682.405 L1494.81 682.405 L1494.25 682.405 L1493.69 682.405 L1493.13 682.405 L1492.57 682.405 L1492.01 682.405 L1491.45 682.405 L1490.89 682.405 L1490.34 682.405 L1489.78 682.405 L1489.22 682.405 L1488.66 682.405 L1488.1 682.405 L1487.54 682.405 L1486.98 682.405 L1486.42 682.405 L1485.86 682.405 L1485.3 682.405 L1484.74 682.405 L1484.18 682.405 L1483.62 682.405 L1483.07 682.405 L1482.51 682.405 L1481.95 682.405 L1481.39 682.405 L1480.83 682.405 L1480.27 682.405 L1479.71 682.405 L1479.15 682.405 L1478.59 682.405 L1478.03 682.405 L1477.47 682.405 L1476.91 682.405 L1476.35 682.405 L1475.79 682.405 L1475.24 682.405 L1474.68 682.405 L1474.12 682.405 L1473.56 682.405 L1473 682.405 L1472.44 682.405 L1471.88 682.405 L1471.32 682.405 L1470.76 682.405 L1470.2 682.405 L1469.64 682.405 L1469.08 682.405 L1468.52 682.405 L1467.97 682.405 L1467.41 682.405 L1466.85 682.405 L1466.29 682.405 L1465.73 682.405 L1465.17 682.405 L1464.61 682.405 L1464.05 682.405 L1463.49 682.405 L1462.93 682.405 L1462.37 682.405 L1461.81 682.405 L1461.25 682.405 L1460.7 682.405 L1460.14 682.405 L1459.58 682.405 L1459.02 682.405 L1458.46 682.405 L1457.9 682.405 L1457.34 682.405 L1456.78 682.405 L1456.22 682.405 L1455.66 682.405 L1455.1 682.405 L1454.54 682.405 L1453.98 682.405 L1453.42 682.405 L1452.87 682.405 L1452.31 682.405 L1451.75 682.405 L1451.19 682.405 L1450.63 682.405 L1450.07 682.405 L1449.51 682.405 L1448.95 682.405 L1448.39 682.405 L1447.83 682.405 L1447.27 682.405 L1446.71 682.405 L1446.15 682.405 L1445.6 682.405 L1445.04 682.405 L1444.48 682.405 L1443.92 682.405 L1443.36 682.405 L1442.8 682.405 L1442.24 682.405 L1441.68 682.405 L1441.12 682.405 L1440.56 682.405 L1440 682.405 L1439.44 682.405 L1438.88 682.405 L1438.33 682.405 L1437.77 682.405 L1437.21 682.405 L1436.65 682.405 L1436.09 682.405 L1435.53 682.405 L1434.97 682.405 L1434.41 682.405 L1433.85 682.405 L1433.29 682.405 L1432.73 682.405 L1432.17 682.405 L1431.61 682.405 L1431.05 682.405 L1430.5 682.405 L1429.94 682.405 L1429.38 682.405 L1428.82 682.405 L1428.26 682.405 L1427.7 682.405 L1427.14 682.405 L1426.58 682.405 L1426.02 682.405 L1425.46 682.405 L1424.9 682.405 L1424.34 682.405 L1423.78 682.405 L1423.23 682.405 L1422.67 682.405 L1422.11 682.405 L1421.55 682.405 L1420.99 682.405 L1420.43 682.405 L1419.87 682.405 L1419.31 682.405 L1418.75 682.405 L1418.19 682.405 L1417.63 682.405 L1417.07 682.405 L1416.51 682.405 L1415.95 682.405 L1415.4 682.405 L1414.84 682.405 L1414.28 682.405 L1413.72 682.405 L1413.16 682.405 L1412.6 682.405 L1412.04 682.405 L1411.48 682.405 L1410.92 682.405 L1410.36 682.405 L1409.8 682.405 L1409.24 682.405 L1408.68 682.405 L1408.13 682.405 L1407.57 682.405 L1407.01 682.405 L1406.45 682.405 L1405.89 682.405 L1405.33 682.405 L1404.77 682.405 L1404.21 682.405 L1403.65 682.405 L1403.09 682.405 L1402.53 682.405 L1401.97 682.405 L1401.41 682.405 L1400.86 682.405 L1400.3 682.405 L1399.74 682.405 L1399.18 682.405 L1398.62 682.405 L1398.06 682.405 L1397.5 682.405 L1396.94 682.405 L1396.38 682.405 L1395.82 682.405 L1395.26 682.405 L1394.7 682.405 L1394.14 682.405 L1393.58 682.405 L1393.03 682.405 L1392.47 682.405 L1391.91 682.405 L1391.35 682.405 L1390.79 682.405 L1390.23 682.405 L1389.67 682.405 L1389.11 682.405 L1388.55 682.405 L1387.99 682.405 L1387.43 682.405 L1386.87 682.405 L1386.31 682.405 L1385.76 682.405 L1385.2 682.405 L1384.64 682.405 L1384.08 682.405 L1383.52 682.405 L1382.96 682.405 L1382.4 682.405 L1381.84 682.405 L1381.28 682.405 L1380.72 682.405 L1380.16 682.405 L1379.6 682.405 L1379.04 682.405 L1378.49 682.405 L1377.93 682.405 L1377.37 682.405 L1376.81 682.405 L1376.25 682.405 L1375.69 682.405 L1375.13 682.405 L1374.57 682.405 L1374.01 682.405 L1373.45 682.405 L1372.89 682.405 L1372.33 682.405 L1371.77 682.405 L1371.21 682.405 L1370.66 682.405 L1370.1 682.405 L1369.54 682.405 L1368.98 682.405 L1368.42 682.405 L1367.86 682.405 L1367.3 682.405 L1366.74 682.405 L1366.18 682.405 L1365.62 682.405 L1365.06 682.405 L1364.5 682.405 L1363.94 682.405 L1363.39 682.405 L1362.83 682.405 L1362.27 682.405 L1361.71 682.405 L1361.15 682.405 L1360.59 682.405 L1360.03 682.405 L1359.47 682.405 L1358.91 682.405 L1358.35 682.405 L1357.79 682.405 L1357.23 682.405 L1356.67 682.405 L1356.12 682.405 L1355.56 682.405 L1355 682.405 L1354.44 682.405 L1353.88 682.405 L1353.32 682.405 L1352.76 682.405 L1352.2 682.405 L1351.64 682.405 L1351.08 682.405 L1350.52 682.405 L1349.96 682.405 L1349.4 682.405 L1348.84 682.405 L1348.29 682.405 L1347.73 682.405 L1347.17 682.405 L1346.61 682.405 L1346.05 682.405 L1345.49 682.405 L1344.93 682.405 L1344.37 682.405 L1343.81 682.405 L1343.25 682.405 L1342.69 682.405 L1342.13 682.405 L1341.57 682.405 L1341.02 682.405 L1340.46 682.405 L1339.9 682.405 L1339.34 682.405 L1338.78 682.405 L1338.22 682.405 L1337.66 682.405 L1337.1 682.405 L1336.54 682.405 L1335.98 682.405 L1335.42 682.405 L1334.86 682.405 L1334.3 682.405 L1333.75 682.405 L1333.19 682.405 L1332.63 682.405 L1332.07 682.405 L1331.51 682.405 L1330.95 682.405 L1330.39 682.405 L1329.83 682.405 L1329.27 682.405 L1328.71 682.405 L1328.15 682.405 L1327.59 682.405 L1327.03 682.405 L1326.47 682.405 L1325.92 682.405 L1325.36 682.405 L1324.8 682.405 L1324.24 682.405 L1323.68 682.405 L1323.12 682.405 L1322.56 682.405 L1322 682.405 L1321.44 682.405 L1320.88 682.405 L1320.32 682.405 L1319.76 682.405 L1319.2 682.405 L1318.65 682.405 L1318.09 682.405 L1317.53 682.405 L1316.97 682.405 L1316.41 682.405 L1315.85 682.405 L1315.29 682.405 L1314.73 682.405 L1314.17 682.405 L1313.61 682.405 L1313.05 682.405 L1312.49 682.405 L1311.93 682.405 L1311.38 682.405 L1310.82 682.405 L1310.26 682.405 L1309.7 682.405 L1309.14 682.405 L1308.58 682.405 L1308.02 682.405 L1307.46 682.405 L1306.9 682.405 L1306.34 682.405 L1305.78 682.405 L1305.22 682.405 L1304.66 682.405 L1304.1 682.405 L1303.55 682.405 L1302.99 682.405 L1302.43 682.405 L1301.87 682.405 L1301.31 682.405 L1300.75 682.405 L1300.19 682.405 L1299.63 682.405 L1299.07 682.405 L1298.51 682.405 L1297.95 682.405 L1297.39 682.405 L1296.83 682.405 L1296.28 682.405 L1295.72 682.405 L1295.16 682.405 L1294.6 682.405 L1294.04 682.405 L1293.48 682.405 L1292.92 682.405 L1292.36 682.405 L1291.8 682.405 L1291.24 682.405 L1290.68 682.405 L1290.12 682.405 L1289.56 682.405 L1289 682.405 L1288.45 682.405 L1287.89 682.405 L1287.33 682.405 L1286.77 682.405 L1286.21 682.405 L1285.65 682.405 L1285.09 682.405 L1284.53 682.405 L1283.97 682.405 L1283.41 682.405 L1282.85 682.405 L1282.29 682.405 L1281.73 682.405 L1281.18 682.405 L1280.62 682.405 L1280.06 682.405 L1279.5 682.405 L1278.94 682.405 L1278.38 682.405 L1277.82 682.405 L1277.26 682.405 L1276.7 682.405 L1276.14 682.405 L1275.58 682.405 L1275.02 682.405 L1274.46 682.405 L1273.91 682.405 L1273.35 682.405 L1272.79 682.405 L1272.23 682.405 L1271.67 682.405 L1271.11 682.405 L1270.55 682.405 L1269.99 682.405 L1269.43 682.405 L1268.87 682.405 L1268.31 682.405 L1267.75 682.405 L1267.19 682.405 L1266.63 682.405 L1266.08 682.405 L1265.52 682.405 L1264.96 682.405 L1264.4 682.405 L1263.84 682.405 L1263.28 682.405 L1262.72 682.405 L1262.16 682.405 L1261.6 682.405 L1261.04 682.405 L1260.48 682.405 L1259.92 682.405 L1259.36 682.405 L1258.81 682.405 L1258.25 682.405 L1257.69 682.405 L1257.13 682.405 L1256.57 682.405 L1256.01 682.405 L1255.45 682.405 L1254.89 682.405 L1254.33 682.405 L1253.77 682.405 L1253.21 682.405 L1252.65 682.405 L1252.09 682.405 L1251.54 682.405 L1250.98 682.405 L1250.42 682.405 L1249.86 682.405 L1249.3 682.405 L1248.74 682.405 L1248.18 682.405 L1247.62 682.405 L1247.06 682.405 L1246.5 682.405 L1245.94 682.405 L1245.38 682.405 L1244.82 682.405 L1244.26 682.405 L1243.71 682.405 L1243.15 682.405 L1242.59 682.405 L1242.03 682.405 L1241.47 682.405 L1240.91 682.405 L1240.35 682.405 L1239.79 682.405 L1239.23 682.405 L1238.67 682.405 L1238.11 682.405 L1237.55 682.405 L1236.99 682.405 L1236.44 682.405 L1235.88 682.405 L1235.32 682.405 L1234.76 682.405 L1234.2 682.405 L1233.64 682.405 L1233.08 682.405 L1232.52 682.405 L1231.96 682.405 L1231.4 682.405 L1230.84 682.405 L1230.28 682.405 L1229.72 682.405 L1229.17 682.405 L1228.61 682.405 L1228.05 682.405 L1227.49 682.405 L1226.93 682.405 L1226.37 682.405 L1225.81 682.405 L1225.25 682.405 L1224.69 682.405 L1224.13 682.405 L1223.57 682.405 L1223.01 682.405 L1222.45 682.405 L1221.89 682.405 L1221.34 682.405 L1220.78 682.405 L1220.22 682.405 L1219.66 682.405 L1219.1 682.405 L1218.54 682.405 L1217.98 682.405 L1217.42 682.405 L1216.86 682.405 L1216.3 682.405 L1215.74 682.405 L1215.18 682.405 L1214.62 682.405 L1214.07 682.405 L1213.51 682.405 L1212.95 682.405 L1212.39 682.405 L1211.83 682.405 L1211.27 682.405 L1210.71 682.405 L1210.15 682.405 L1209.59 682.405 L1209.03 682.405 L1208.47 682.405 L1207.91 682.405 L1207.35 682.405 L1206.8 682.405 L1206.24 682.405 L1205.68 682.405 L1205.12 682.405 L1204.56 682.405 L1204 682.405 L1203.44 682.405 L1202.88 682.405 L1202.32 682.405 L1201.76 682.405 L1201.2 682.405 L1200.64 682.405 L1200.08 682.405 L1199.52 682.405 L1198.97 682.405 L1198.41 682.405 L1197.85 682.405 L1197.29 682.405 L1196.73 682.405 L1196.17 682.405 L1195.61 682.405 L1195.05 682.405 L1194.49 682.405 L1193.93 682.405 L1193.37 682.405 L1192.81 682.405 L1192.25 682.405 L1191.7 682.405 L1191.14 682.405 L1190.58 682.405 L1190.02 682.405 L1189.46 682.405 L1188.9 682.405 L1188.34 682.405 L1187.78 682.405 L1187.22 682.405 L1186.66 682.405 L1186.1 682.405 L1185.54 682.405 L1184.98 682.405 L1184.43 682.405 L1183.87 682.405 L1183.31 682.405 L1182.75 682.405 L1182.19 682.405 L1181.63 682.405 L1181.07 682.405 L1180.51 682.405 L1179.95 682.405 L1179.39 682.405 L1178.83 682.405 L1178.27 682.405 L1177.71 682.405 L1177.15 682.405 L1176.6 682.405 L1176.04 682.405 L1175.48 682.405 L1174.92 682.405 L1174.36 682.405 L1173.8 682.405 L1173.24 682.405 L1172.68 682.405 L1172.12 682.405 L1171.56 682.405 L1171 682.405 L1170.44 682.405 L1169.88 682.405 L1169.33 682.405 L1168.77 682.405 L1168.21 682.405 L1167.65 682.405 L1167.09 682.405 L1166.53 682.405 L1165.97 682.405 L1165.41 682.405 L1164.85 682.405 L1164.29 682.405 L1163.73 682.405 L1163.17 682.405 L1162.61 682.405 L1162.05 682.405 L1161.5 682.405 L1160.94 682.405 L1160.38 682.405 L1159.82 682.405 L1159.26 682.405 L1158.7 682.405 L1158.14 682.405 L1157.58 682.405 L1157.02 682.405 L1156.46 682.405 L1155.9 682.405 L1155.34 682.405 L1154.78 682.405 L1154.23 682.405 L1153.67 682.405 L1153.11 682.405 L1152.55 682.405 L1151.99 682.405 L1151.43 682.405 L1150.87 682.405 L1150.31 682.405 L1149.75 682.405 L1149.19 682.405 L1148.63 682.405 L1148.07 682.405 L1147.51 682.405 L1146.96 682.405 L1146.4 682.405 L1145.84 682.405 L1145.28 682.405 L1144.72 682.405 L1144.16 682.405 L1143.6 682.405 L1143.04 682.405 L1142.48 682.405 L1141.92 682.405 L1141.36 682.405 L1140.8 682.405 L1140.24 682.405 L1139.68 682.405 L1139.13 682.405 L1138.57 682.405 L1138.01 682.405 L1137.45 682.405 L1136.89 682.405 L1136.33 682.405 L1135.77 682.405 L1135.21 682.405 L1134.65 682.405 L1134.09 682.405 L1133.53 682.405 L1132.97 682.405 L1132.41 682.405 L1131.86 682.405 L1131.3 682.405 L1130.74 682.405 L1130.18 682.405 L1129.62 682.405 L1129.06 682.405 L1128.5 682.405 L1127.94 682.405 L1127.38 682.405 L1126.82 682.405 L1126.26 682.405 L1125.7 682.405 L1125.14 682.405 L1124.59 682.405 L1124.03 682.405 L1123.47 682.405 L1122.91 682.405 L1122.35 682.405 L1121.79 682.405 L1121.23 682.405 L1120.67 682.405 L1120.11 682.405 L1119.55 682.405 L1118.99 682.405 L1118.43 682.405 L1117.87 682.405 L1117.31 682.405 L1116.76 682.405 L1116.2 682.405 L1115.64 682.405 L1115.08 682.405 L1114.52 682.405 L1113.96 682.405 L1113.4 682.405 L1112.84 682.405 L1112.28 682.405 L1111.72 682.405 L1111.16 682.405 L1110.6 682.405 L1110.04 682.405 L1109.49 682.405 L1108.93 682.405 L1108.37 682.405 L1107.81 682.405 L1107.25 682.405 L1106.69 682.405 L1106.13 682.405 L1105.57 682.405 L1105.01 682.405 L1104.45 682.405 L1103.89 682.405 L1103.33 682.405 L1102.77 682.405 L1102.22 682.405 L1101.66 682.405 L1101.1 682.405 L1100.54 682.405 L1099.98 682.405 L1099.42 682.405 L1098.86 682.405 L1098.3 682.405 L1097.74 682.405 L1097.18 682.405 L1096.62 682.405 L1096.06 682.405 L1095.5 682.405 L1094.94 682.405 L1094.39 682.405 L1093.83 682.405 L1093.27 682.405 L1092.71 682.405 L1092.15 682.405 L1091.59 682.405 L1091.03 682.405 L1090.47 682.405 L1089.91 682.405 L1089.35 682.405 L1088.79 682.405 L1088.23 682.405 L1087.67 682.405 L1087.12 682.405 L1086.56 682.405 L1086 682.405 L1085.44 682.405 L1084.88 682.405 L1084.32 682.405 L1083.76 682.405 L1083.2 682.405 L1082.64 682.405 L1082.08 682.405 L1081.52 682.405 L1080.96 682.405 L1080.4 682.405 L1079.85 682.405 L1079.29 682.405 L1078.73 682.405 L1078.17 682.405 L1077.61 682.405 L1077.05 682.405 L1076.49 682.405 L1075.93 682.405 L1075.37 682.405 L1074.81 682.405 L1074.25 682.405 L1073.69 682.405 L1073.13 682.405 L1072.57 682.405 L1072.02 682.405 L1071.46 682.405 L1070.9 682.405 L1070.34 682.405 L1069.78 682.405 L1069.22 682.405 L1068.66 682.405 L1068.1 682.405 L1067.54 682.405 L1066.98 682.405 L1066.42 682.405 L1065.86 682.405 L1065.3 682.405 L1064.75 682.405 L1064.19 682.405 L1063.63 682.405 L1063.07 682.405 L1062.51 682.405 L1061.95 682.405 L1061.39 682.405 L1060.83 682.405 L1060.27 682.405 L1059.71 682.405 L1059.15 682.405 L1058.59 682.405 L1058.03 682.405 L1057.48 682.405 L1056.92 682.405 L1056.36 682.405 L1055.8 682.405 L1055.24 682.405 L1054.68 682.405 L1054.12 682.405 L1053.56 682.405 L1053 682.405 L1052.44 682.405 L1051.88 682.405 L1051.32 682.405 L1050.76 682.405 L1050.2 682.405 L1049.65 682.405 L1049.09 682.405 L1048.53 682.405 L1047.97 682.405 L1047.41 682.405 L1046.85 682.405 L1046.29 682.405 L1045.73 682.405 L1045.17 682.405 L1044.61 682.405 L1044.05 682.405 L1043.49 682.405 L1042.93 682.405 L1042.38 682.405 L1041.82 682.405 L1041.26 682.405 L1040.7 682.405 L1040.14 682.405 L1039.58 682.405 L1039.02 682.405 L1038.46 682.405 L1037.9 682.405 L1037.34 682.405 L1036.78 682.405 L1036.22 682.405 L1035.66 682.405 L1035.1 682.405 L1034.55 682.405 L1033.99 682.405 L1033.43 682.405 L1032.87 682.405 L1032.31 682.405 L1031.75 682.405 L1031.19 682.405 L1030.63 682.405 L1030.07 682.405 L1029.51 682.405 L1028.95 682.405 L1028.39 682.405 L1027.83 682.405 L1027.28 682.405 L1026.72 682.405 L1026.16 682.405 L1025.6 682.405 L1025.04 682.405 L1024.48 682.405 L1023.92 682.405 L1023.36 682.405 L1022.8 682.405 L1022.24 682.405 L1021.68 682.405 L1021.12 682.405 L1020.56 682.405 L1020.01 682.405 L1019.45 682.405 L1018.89 682.405 L1018.33 682.405 L1017.77 682.405 L1017.21 682.405 L1016.65 682.405 L1016.09 682.405 L1015.53 682.405 L1014.97 682.405 L1014.41 682.405 L1013.85 682.405 L1013.29 682.405 L1012.73 682.405 L1012.18 682.405 L1011.62 682.405 L1011.06 682.405 L1010.5 682.405 L1009.94 682.405 L1009.38 682.405 L1008.82 682.405 L1008.26 682.405 L1007.7 682.405 L1007.14 682.405 L1006.58 682.405 L1006.02 682.405 L1005.46 682.405 L1004.91 682.405 L1004.35 682.405 L1003.79 682.405 L1003.23 682.405 L1002.67 682.405 L1002.11 682.405 L1001.55 682.405 L1000.99 682.405 L1000.43 682.405 L999.872 682.405 L999.313 682.405 L998.754 682.405 L998.194 682.405 L997.635 682.405 L997.076 682.405 L996.517 682.405 L995.957 682.405 L995.398 682.405 L994.839 682.405 L994.28 682.405 L993.72 682.405 L993.161 682.405 L992.602 682.405 L992.043 682.405 L991.483 682.405 L990.924 682.405 L990.365 682.405 L989.806 682.405 L989.246 682.405 L988.687 682.405 L988.128 682.405 L987.569 682.405 L987.009 682.405 L986.45 682.405 L985.891 682.405 L985.332 682.405 L984.772 682.405 L984.213 682.405 L983.654 682.405 L983.095 682.405 L982.535 682.405 L981.976 682.405 L981.417 682.405 L980.858 682.405 L980.298 682.405 L979.739 682.405 L979.18 682.405 L978.621 682.405 L978.061 682.405 L977.502 682.405 L976.943 682.405 L976.384 682.405 L975.824 682.405 L975.265 682.405 L974.706 682.405 L974.147 682.405 L973.587 682.405 L973.028 682.405 L972.469 682.405 L971.91 682.405 L971.35 682.405 L970.791 682.405 L970.232 682.405 L969.673 682.405 L969.113 682.405 L968.554 682.405 L967.995 682.405 L967.436 682.405 L966.876 682.405 L966.317 682.405 L965.758 682.405 L965.199 682.405 L964.639 682.405 L964.08 682.405 L963.521 682.405 L962.962 682.405 L962.402 682.405 L961.843 682.405 L961.284 682.405 L960.725 682.405 L960.165 682.405 L959.606 682.405 L959.047 682.405 L958.488 682.405 L957.928 682.405 L957.369 682.405 L956.81 682.405 L956.251 682.405 L955.691 682.405 L955.132 682.405 L954.573 682.405 L954.014 682.405 L953.454 682.405 L952.895 682.405 L952.336 682.405 L951.777 682.405 L951.217 682.405 L950.658 682.405 L950.099 682.405 L949.54 682.405 L948.98 682.405 L948.421 682.405 L947.862 682.405 L947.303 682.405 L946.743 682.405 L946.184 682.405 L945.625 682.405 L945.066 682.405 L944.506 682.405 L943.947 682.405 L943.388 682.405 L942.829 682.405 L942.269 682.405 L941.71 682.405 L941.151 682.405 L940.592 682.405 L940.032 682.405 L939.473 682.405 L938.914 682.405 L938.355 682.405 L937.795 682.405 L937.236 682.405 L936.677 682.405 L936.118 682.405 L935.558 682.405 L934.999 682.405 L934.44 682.405 L933.881 682.405 L933.321 682.405 L932.762 682.405 L932.203 682.405 L931.644 682.405 L931.084 682.405 L930.525 682.405 L929.966 682.405 L929.406 682.405 L928.847 682.405 L928.288 682.405 L927.729 682.405 L927.169 682.405 L926.61 682.405 L926.051 682.405 L925.492 682.405 L924.932 682.405 L924.373 682.405 L923.814 682.405 L923.255 682.405 L922.695 682.405 L922.136 682.405 L921.577 682.405 L921.018 682.405 L920.458 682.405 L919.899 682.405 L919.34 682.405 L918.781 682.405 L918.221 682.405 L917.662 682.405 L917.103 682.405 L916.544 682.405 L915.984 682.405 L915.425 682.405 L914.866 682.405 L914.307 682.405 L913.747 682.405 L913.188 682.405 L912.629 682.405 L912.07 682.405 L911.51 682.405 L910.951 682.405 L910.392 682.405 L909.833 682.405 L909.273 682.405 L908.714 682.405 L908.155 682.405 L907.596 682.405 L907.036 682.405 L906.477 682.405 L905.918 682.405 L905.359 682.405 L904.799 682.405 L904.24 682.405 L903.681 682.405 L903.122 682.405 L902.562 682.405 L902.003 682.405 L901.444 682.405 L900.885 682.405 L900.325 682.405 L899.766 682.405 L899.207 682.405 L898.648 682.405 L898.088 682.405 L897.529 682.405 L896.97 682.405 L896.411 682.405 L895.851 682.405 L895.292 682.405 L894.733 682.405 L894.174 682.405 L893.614 682.405 L893.055 682.405 L892.496 682.405 L891.937 682.405 L891.377 682.405 L890.818 682.405 L890.259 682.405 L889.7 682.405 L889.14 682.405 L888.581 682.405 L888.022 682.405 L887.463 682.405 L886.903 682.405 L886.344 682.405 L885.785 682.405 L885.226 682.405 L884.666 682.405 L884.107 682.405 L883.548 682.405 L882.989 682.405 L882.429 682.405 L881.87 682.405 L881.311 682.405 L880.752 682.405 L880.192 682.405 L879.633 682.405 L879.074 682.405 L878.515 682.405 L877.955 682.405 L877.396 682.405 L876.837 682.405 L876.278 682.405 L875.718 682.405 L875.159 682.405 L874.6 682.405 L874.041 682.405 L873.481 682.405 L872.922 682.405 L872.363 682.405 L871.804 682.405 L871.244 682.405 L870.685 682.405 L870.126 682.405 L869.567 682.405 L869.007 682.405 L868.448 682.405 L867.889 682.405 L867.33 682.405 L866.77 682.405 L866.211 682.405 L865.652 682.405 L865.093 682.405 L864.533 682.405 L863.974 682.405 L863.415 682.405 L862.856 682.405 L862.296 682.405 L861.737 682.405 L861.178 682.405 L860.619 682.405 L860.059 682.405 L859.5 682.405 L858.941 682.405 L858.382 682.405 L857.822 682.405 L857.263 682.405 L856.704 682.405 L856.145 682.405 L855.585 682.405 L855.026 682.405 L854.467 682.405 L853.908 682.405 L853.348 682.405 L852.789 682.405 L852.23 682.405 L851.671 682.405 L851.111 682.405 L850.552 682.405 L849.993 682.405 L849.434 682.405 L848.874 682.405 L848.315 682.405 L847.756 682.405 L847.197 682.405 L846.637 682.405 L846.078 682.405 L845.519 682.405 L844.96 682.405 L844.4 682.405 L843.841 682.405 L843.282 682.405 L842.723 682.405 L842.163 682.405 L841.604 682.405 L841.045 682.405 L840.486 682.405 L839.926 682.405 L839.367 682.405 L838.808 682.405 L838.249 682.405 L837.689 682.405 L837.13 682.405 L836.571 682.405 L836.012 682.405 L835.452 682.405 L834.893 682.405 L834.334 682.405 L833.775 682.405 L833.215 682.405 L832.656 682.405 L832.097 682.405 L831.538 682.405 L830.978 682.405 L830.419 682.405 L829.86 682.405 L829.301 682.405 L828.741 682.405 L828.182 682.405 L827.623 682.405 L827.064 682.405 L826.504 682.405 L825.945 682.405 L825.386 682.405 L824.827 682.405 L824.267 682.405 L823.708 682.405 L823.149 682.405 L822.59 682.405 L822.03 682.405 L821.471 682.405 L820.912 682.405 L820.353 682.405 L819.793 682.405 L819.234 682.405 L818.675 682.405 L818.116 682.405 L817.556 682.405 L816.997 682.405 L816.438 682.405 L815.879 682.405 L815.319 682.405 L814.76 682.405 L814.201 682.405 L813.642 682.405 L813.082 682.405 L812.523 682.405 L811.964 682.405 L811.405 682.405 L810.845 682.405 L810.286 682.405 L809.727 682.405 L809.168 682.405 L808.608 682.405 L808.049 682.405 L807.49 682.405 L806.931 682.405 L806.371 682.405 L805.812 682.405 L805.253 682.405 L804.693 682.405 L804.134 682.405 L803.575 682.405 L803.016 682.405 L802.456 682.405 L801.897 682.405 L801.338 682.405 L800.779 682.405 L800.219 682.405 L799.66 682.405 L799.101 682.405 L798.542 682.405 L797.982 682.405 L797.423 682.405 L796.864 682.405 L796.305 682.405 L795.745 682.405 L795.186 682.405 L794.627 682.405 L794.068 682.405 L793.508 682.405 L792.949 682.405 L792.39 682.405 L791.831 682.405 L791.271 682.405 L790.712 682.405 L790.153 682.405 L789.594 682.405 L789.034 682.405 L788.475 682.405 L787.916 682.405 L787.357 682.405 L786.797 682.405 L786.238 682.405 L785.679 682.405 L785.12 682.405 L784.56 682.405 L784.001 682.405 L783.442 682.405 L782.883 682.405 L782.323 682.405 L781.764 682.405 L781.205 682.405 L780.646 682.405 L780.086 682.405 L779.527 682.405 L778.968 682.405 L778.409 682.405 L777.849 682.405 L777.29 682.405 L776.731 682.405 L776.172 682.405 L775.612 682.405 L775.053 682.405 L774.494 682.405 L773.935 682.405 L773.375 682.405 L772.816 682.405 L772.257 682.405 L771.698 682.405 L771.138 682.405 L770.579 682.405 L770.02 682.405 L769.461 682.405 L768.901 682.405 L768.342 682.405 L767.783 682.405 L767.224 682.405 L766.664 682.405 L766.105 682.405 L765.546 682.405 L764.987 682.405 L764.427 682.405 L763.868 682.405 L763.309 682.405 L762.75 682.405 L762.19 682.405 L761.631 682.405 L761.072 682.405 L760.513 682.405 L759.953 682.405 L759.394 682.405 L758.835 682.405 L758.276 682.405 L757.716 682.405 L757.157 682.405 L756.598 682.405 L756.039 682.405 L755.479 682.405 L754.92 682.405 L754.361 682.405 L753.802 682.405 L753.242 682.405 L752.683 682.405 L752.124 682.405 L751.565 682.405 L751.005 682.405 L750.446 682.405 L749.887 682.405 L749.328 682.405 L748.768 682.405 L748.209 682.405 L747.65 682.405 L747.091 682.405 L746.531 682.405 L745.972 682.405 L745.413 682.405 L744.854 682.405 L744.294 682.405 L743.735 682.405 L743.176 682.405 L742.617 682.405 L742.057 682.405 L741.498 682.405 L740.939 682.405 L740.38 682.405 L739.82 682.405 L739.261 682.405 L738.702 682.405 L738.143 682.405 L737.583 682.405 L737.024 682.405 L736.465 682.405 L735.906 682.405 L735.346 682.405 L734.787 682.405 L734.228 682.405 L733.669 682.405 L733.109 682.405 L732.55 682.405 L731.991 682.405 L731.432 682.405 L730.872 682.405 L730.313 682.405 L729.754 682.405 L729.195 682.405 L728.635 682.405 L728.076 682.405 L727.517 682.405 L726.958 682.405 L726.398 682.405 L725.839 682.405 L725.28 682.405 L724.721 682.405 L724.161 682.405 L723.602 682.405 L723.043 682.405 L722.484 682.405 L721.924 682.405 L721.365 682.405 L720.806 682.405 L720.247 682.405  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip133)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.144 720.806,683.144 721.365,683.144 721.924,683.144 722.484,683.144 723.043,683.144 723.602,683.144 724.161,683.144 724.721,683.144 725.28,683.144 725.839,683.144 726.398,683.144 726.958,683.144 727.517,683.144 728.076,683.144 728.635,683.144 729.195,683.144 729.754,683.144 730.313,683.144 730.872,683.144 731.432,683.144 731.991,683.144 732.55,683.144 733.109,683.144 733.669,683.144 734.228,683.144 734.787,683.144 735.346,683.144 735.906,683.144 736.465,683.144 737.024,683.144 737.583,683.144 738.143,683.144 738.702,683.144 739.261,683.144 739.82,683.144 740.38,683.144 740.939,683.144 741.498,683.144 742.057,683.144 742.617,683.144 743.176,683.144 743.735,683.144 744.294,683.144 744.854,683.144 745.413,683.144 745.972,683.144 746.531,683.144 747.091,683.144 747.65,683.144 748.209,683.144 748.768,683.144 749.328,683.144 749.887,683.144 750.446,683.144 751.005,683.144 751.565,683.144 752.124,683.144 752.683,683.144 753.242,683.144 753.802,683.144 754.361,683.144 754.92,683.144 755.479,683.144 756.039,683.144 756.598,683.144 757.157,683.144 757.716,683.144 758.276,683.144 758.835,683.144 759.394,683.144 759.953,683.144 760.513,683.144 761.072,683.144 761.631,683.144 762.19,683.144 762.75,683.144 763.309,683.144 763.868,683.144 764.427,683.144 764.987,683.144 765.546,683.144 766.105,683.144 766.664,683.144 767.224,683.144 767.783,683.144 768.342,683.144 768.901,683.144 769.461,683.144 770.02,683.144 770.579,683.144 771.138,683.144 771.698,683.144 772.257,683.144 772.816,683.144 773.375,683.144 773.935,683.144 774.494,683.144 775.053,683.144 775.612,683.144 776.172,683.144 776.731,683.144 777.29,683.144 777.849,683.144 778.409,683.144 778.968,683.144 779.527,683.144 780.086,683.144 780.646,683.144 781.205,683.144 781.764,683.144 782.323,683.144 782.883,683.144 783.442,683.144 784.001,683.144 784.56,683.144 785.12,683.144 785.679,683.144 786.238,683.144 786.797,683.144 787.357,683.144 787.916,683.144 788.475,683.144 789.034,683.144 789.594,683.144 790.153,683.144 790.712,683.144 791.271,683.144 791.831,683.144 792.39,683.144 792.949,683.144 793.508,683.144 794.068,683.144 794.627,683.144 795.186,683.144 795.745,683.144 796.305,683.144 796.864,683.144 797.423,683.144 797.982,683.144 798.542,683.144 799.101,683.144 799.66,683.144 800.219,683.144 800.779,683.144 801.338,683.144 801.897,683.144 802.456,683.144 803.016,683.144 803.575,683.144 804.134,683.144 804.693,683.144 805.253,683.144 805.812,683.144 806.371,683.144 806.931,683.144 807.49,683.144 808.049,683.144 808.608,683.144 809.168,683.144 809.727,683.144 810.286,683.144 810.845,683.144 811.405,683.144 811.964,683.144 812.523,683.144 813.082,683.144 813.642,683.144 814.201,683.144 814.76,683.144 815.319,683.144 815.879,683.144 816.438,683.144 816.997,683.144 817.556,683.144 818.116,683.144 818.675,683.144 819.234,683.144 819.793,683.144 820.353,683.144 820.912,683.144 821.471,683.144 822.03,683.144 822.59,683.144 823.149,683.144 823.708,683.144 824.267,683.144 824.827,683.144 825.386,683.144 825.945,683.144 826.504,683.144 827.064,683.144 827.623,683.144 828.182,683.144 828.741,683.144 829.301,683.144 829.86,683.144 830.419,683.144 830.978,683.144 831.538,683.144 832.097,683.144 832.656,683.144 833.215,683.144 833.775,683.144 834.334,683.144 834.893,683.144 835.452,683.144 836.012,683.144 836.571,683.144 837.13,683.144 837.689,683.144 838.249,683.144 838.808,683.144 839.367,683.144 839.926,683.144 840.486,683.144 841.045,683.144 841.604,683.144 842.163,683.144 842.723,683.144 843.282,683.144 843.841,683.144 844.4,683.144 844.96,683.144 845.519,683.144 846.078,683.144 846.637,683.144 847.197,683.144 847.756,683.144 848.315,683.144 848.874,683.144 849.434,683.144 849.993,683.144 850.552,683.144 851.111,683.144 851.671,683.144 852.23,683.144 852.789,683.144 853.348,683.144 853.908,683.144 854.467,683.144 855.026,683.144 855.585,683.144 856.145,683.144 856.704,683.144 857.263,683.144 857.822,683.144 858.382,683.144 858.941,683.144 859.5,683.144 860.059,683.144 860.619,683.144 861.178,683.144 861.737,683.144 862.296,683.144 862.856,683.144 863.415,683.144 863.974,683.144 864.533,683.144 865.093,683.144 865.652,683.144 866.211,683.144 866.77,683.144 867.33,683.144 867.889,683.144 868.448,683.144 869.007,683.144 869.567,683.144 870.126,683.144 870.685,683.144 871.244,683.144 871.804,683.144 872.363,683.144 872.922,683.144 873.481,683.144 874.041,683.144 874.6,683.144 875.159,683.144 875.718,683.144 876.278,683.144 876.837,683.144 877.396,683.144 877.955,683.144 878.515,683.144 879.074,683.144 879.633,683.144 880.192,683.144 880.752,683.144 881.311,683.144 881.87,683.144 882.429,683.144 882.989,683.144 883.548,683.144 884.107,683.144 884.666,683.144 885.226,683.144 885.785,683.144 886.344,683.144 886.903,683.144 887.463,683.144 888.022,683.144 888.581,683.144 889.14,683.144 889.7,683.144 890.259,683.144 890.818,683.144 891.377,683.144 891.937,683.144 892.496,683.144 893.055,683.144 893.614,683.144 894.174,683.144 894.733,683.144 895.292,683.144 895.851,683.144 896.411,683.144 896.97,683.144 897.529,683.144 898.088,683.144 898.648,683.144 899.207,683.144 899.766,683.144 900.325,683.144 900.885,683.144 901.444,683.144 902.003,683.144 902.562,683.144 903.122,683.144 903.681,683.144 904.24,683.144 904.799,683.144 905.359,683.144 905.918,683.144 906.477,683.144 907.036,683.144 907.596,683.144 908.155,683.144 908.714,683.144 909.273,683.144 909.833,683.144 910.392,683.144 910.951,683.144 911.51,683.144 912.07,683.144 912.629,683.144 913.188,683.144 913.747,683.144 914.307,683.144 914.866,683.144 915.425,683.144 915.984,683.144 916.544,683.144 917.103,683.144 917.662,683.144 918.221,683.144 918.781,683.144 919.34,683.144 919.899,683.144 920.458,683.144 921.018,683.144 921.577,683.144 922.136,683.144 922.695,683.144 923.255,683.144 923.814,683.144 924.373,683.144 924.932,683.144 925.492,683.144 926.051,683.144 926.61,683.144 927.169,683.144 927.729,683.144 928.288,683.144 928.847,683.144 929.406,683.144 929.966,683.144 930.525,683.144 931.084,683.144 931.644,683.144 932.203,683.144 932.762,683.144 933.321,683.144 933.881,683.144 934.44,683.144 934.999,683.144 935.558,683.144 936.118,683.144 936.677,683.144 937.236,683.144 937.795,683.144 938.355,683.144 938.914,683.144 939.473,683.144 940.032,683.144 940.592,683.144 941.151,683.144 941.71,683.144 942.269,683.144 942.829,683.144 943.388,683.144 943.947,683.144 944.506,683.144 945.066,683.144 945.625,683.144 946.184,683.144 946.743,683.144 947.303,683.144 947.862,683.144 948.421,683.144 948.98,683.144 949.54,683.144 950.099,683.144 950.658,683.144 951.217,683.144 951.777,683.144 952.336,683.144 952.895,683.144 953.454,683.144 954.014,683.144 954.573,683.144 955.132,683.144 955.691,683.144 956.251,683.144 956.81,683.144 957.369,683.144 957.928,683.144 958.488,683.144 959.047,683.144 959.606,683.144 960.165,683.144 960.725,683.144 961.284,683.144 961.843,683.144 962.402,683.144 962.962,683.144 963.521,683.144 964.08,683.144 964.639,683.144 965.199,683.144 965.758,683.144 966.317,683.144 966.876,683.144 967.436,683.144 967.995,683.144 968.554,683.144 969.113,683.144 969.673,683.144 970.232,683.144 970.791,683.144 971.35,683.144 971.91,683.144 972.469,683.144 973.028,683.144 973.587,683.144 974.147,683.144 974.706,683.144 975.265,683.144 975.824,683.144 976.384,683.144 976.943,683.144 977.502,683.144 978.061,683.144 978.621,683.144 979.18,683.144 979.739,683.144 980.298,683.144 980.858,683.144 981.417,683.144 981.976,683.144 982.535,683.144 983.095,683.144 983.654,683.144 984.213,683.144 984.772,683.144 985.332,683.144 985.891,683.144 986.45,683.144 987.009,683.144 987.569,683.144 988.128,683.144 988.687,683.144 989.246,683.144 989.806,683.144 990.365,683.144 990.924,683.144 991.483,683.144 992.043,683.144 992.602,683.144 993.161,683.144 993.72,683.144 994.28,683.144 994.839,683.144 995.398,683.144 995.957,683.144 996.517,683.144 997.076,683.144 997.635,683.144 998.194,683.144 998.754,683.144 999.313,683.144 999.872,683.144 1000.43,683.144 1000.99,683.144 1001.55,683.144 1002.11,683.144 1002.67,683.144 1003.23,683.144 1003.79,683.144 1004.35,683.144 1004.91,683.144 1005.46,683.144 1006.02,683.144 1006.58,683.144 1007.14,683.144 1007.7,683.144 1008.26,683.144 1008.82,683.144 1009.38,683.144 1009.94,683.144 1010.5,683.144 1011.06,683.144 1011.62,683.144 1012.18,683.144 1012.73,683.144 1013.29,683.144 1013.85,683.144 1014.41,683.144 1014.97,683.144 1015.53,683.144 1016.09,683.144 1016.65,683.144 1017.21,683.144 1017.77,683.144 1018.33,683.144 1018.89,683.144 1019.45,683.144 1020.01,683.144 1020.56,683.144 1021.12,683.144 1021.68,683.144 1022.24,683.144 1022.8,683.144 1023.36,683.144 1023.92,683.144 1024.48,683.144 1025.04,683.144 1025.6,683.144 1026.16,683.144 1026.72,683.144 1027.28,683.144 1027.83,683.144 1028.39,683.144 1028.95,683.144 1029.51,683.144 1030.07,683.144 1030.63,683.144 1031.19,683.144 1031.75,683.144 1032.31,683.144 1032.87,683.144 1033.43,683.144 1033.99,683.144 1034.55,683.144 1035.1,683.144 1035.66,683.144 1036.22,683.144 1036.78,683.144 1037.34,683.144 1037.9,683.144 1038.46,683.144 1039.02,683.144 1039.58,683.144 1040.14,683.144 1040.7,683.144 1041.26,683.144 1041.82,683.144 1042.38,683.144 1042.93,683.144 1043.49,683.144 1044.05,683.144 1044.61,683.144 1045.17,683.144 1045.73,683.144 1046.29,683.144 1046.85,683.144 1047.41,683.144 1047.97,683.144 1048.53,683.144 1049.09,683.144 1049.65,683.144 1050.2,683.144 1050.76,683.144 1051.32,683.144 1051.88,683.144 1052.44,683.144 1053,683.144 1053.56,683.144 1054.12,683.144 1054.68,683.144 1055.24,683.144 1055.8,683.144 1056.36,683.144 1056.92,683.144 1057.48,683.144 1058.03,683.144 1058.59,683.144 1059.15,683.144 1059.71,683.144 1060.27,683.144 1060.83,683.144 1061.39,683.144 1061.95,683.144 1062.51,683.144 1063.07,683.144 1063.63,683.144 1064.19,683.144 1064.75,683.144 1065.3,683.144 1065.86,683.144 1066.42,683.144 1066.98,683.144 1067.54,683.144 1068.1,683.144 1068.66,683.144 1069.22,683.144 1069.78,683.144 1070.34,683.144 1070.9,683.144 1071.46,683.144 1072.02,683.144 1072.57,683.144 1073.13,683.144 1073.69,683.144 1074.25,683.144 1074.81,683.144 1075.37,683.144 1075.93,683.144 1076.49,683.144 1077.05,683.144 1077.61,683.144 1078.17,683.144 1078.73,683.144 1079.29,683.144 1079.85,683.144 1080.4,683.144 1080.96,683.144 1081.52,683.144 1082.08,683.144 1082.64,683.144 1083.2,683.144 1083.76,683.144 1084.32,683.144 1084.88,683.144 1085.44,683.144 1086,683.144 1086.56,683.144 1087.12,683.144 1087.67,683.144 1088.23,683.144 1088.79,683.144 1089.35,683.144 1089.91,683.144 1090.47,683.144 1091.03,683.144 1091.59,683.144 1092.15,683.144 1092.71,683.144 1093.27,683.144 1093.83,683.144 1094.39,683.144 1094.94,683.144 1095.5,683.144 1096.06,683.144 1096.62,683.144 1097.18,683.144 1097.74,683.144 1098.3,683.144 1098.86,683.144 1099.42,683.144 1099.98,683.144 1100.54,683.144 1101.1,683.144 1101.66,683.144 1102.22,683.144 1102.77,683.144 1103.33,683.144 1103.89,683.144 1104.45,683.144 1105.01,683.144 1105.57,683.144 1106.13,683.144 1106.69,683.144 1107.25,683.144 1107.81,683.144 1108.37,683.144 1108.93,683.144 1109.49,683.144 1110.04,683.144 1110.6,683.144 1111.16,683.144 1111.72,683.144 1112.28,683.144 1112.84,683.144 1113.4,683.144 1113.96,683.144 1114.52,683.144 1115.08,683.144 1115.64,683.144 1116.2,683.144 1116.76,683.144 1117.31,683.144 1117.87,683.144 1118.43,683.144 1118.99,683.144 1119.55,683.144 1120.11,683.144 1120.67,683.144 1121.23,683.144 1121.79,683.144 1122.35,683.144 1122.91,683.144 1123.47,683.144 1124.03,683.144 1124.59,683.144 1125.14,683.144 1125.7,683.144 1126.26,683.144 1126.82,683.144 1127.38,683.144 1127.94,683.144 1128.5,683.144 1129.06,683.144 1129.62,683.144 1130.18,683.144 1130.74,683.144 1131.3,683.144 1131.86,683.144 1132.41,683.144 1132.97,683.144 1133.53,683.144 1134.09,683.144 1134.65,683.144 1135.21,683.144 1135.77,683.144 1136.33,683.144 1136.89,683.144 1137.45,683.144 1138.01,683.144 1138.57,683.144 1139.13,683.144 1139.68,683.144 1140.24,683.144 1140.8,683.144 1141.36,683.144 1141.92,683.144 1142.48,683.144 1143.04,683.144 1143.6,683.144 1144.16,683.144 1144.72,683.144 1145.28,683.144 1145.84,683.144 1146.4,683.144 1146.96,683.144 1147.51,683.144 1148.07,683.144 1148.63,683.144 1149.19,683.144 1149.75,683.144 1150.31,683.144 1150.87,683.144 1151.43,683.144 1151.99,683.144 1152.55,683.144 1153.11,683.144 1153.67,683.144 1154.23,683.144 1154.78,683.144 1155.34,683.144 1155.9,683.144 1156.46,683.144 1157.02,683.144 1157.58,683.144 1158.14,683.144 1158.7,683.144 1159.26,683.144 1159.82,683.144 1160.38,683.144 1160.94,683.144 1161.5,683.144 1162.05,683.144 1162.61,683.144 1163.17,683.144 1163.73,683.144 1164.29,683.144 1164.85,683.144 1165.41,683.144 1165.97,683.144 1166.53,683.144 1167.09,683.144 1167.65,683.144 1168.21,683.144 1168.77,683.144 1169.33,683.144 1169.88,683.144 1170.44,683.144 1171,683.144 1171.56,683.144 1172.12,683.144 1172.68,683.144 1173.24,683.144 1173.8,683.144 1174.36,683.144 1174.92,683.144 1175.48,683.144 1176.04,683.144 1176.6,683.144 1177.15,683.144 1177.71,683.144 1178.27,683.144 1178.83,683.144 1179.39,683.144 1179.95,683.144 1180.51,683.144 1181.07,683.144 1181.63,683.144 1182.19,683.144 1182.75,683.144 1183.31,683.144 1183.87,683.144 1184.43,683.144 1184.98,683.144 1185.54,683.144 1186.1,683.144 1186.66,683.144 1187.22,683.144 1187.78,683.144 1188.34,683.144 1188.9,683.144 1189.46,683.144 1190.02,683.144 1190.58,683.144 1191.14,683.144 1191.7,683.144 1192.25,683.144 1192.81,683.144 1193.37,683.144 1193.93,683.144 1194.49,683.144 1195.05,683.144 1195.61,683.144 1196.17,683.144 1196.73,683.144 1197.29,683.144 1197.85,683.144 1198.41,683.144 1198.97,683.144 1199.52,683.144 1200.08,683.144 1200.64,683.144 1201.2,683.144 1201.76,683.144 1202.32,683.144 1202.88,683.144 1203.44,683.144 1204,683.144 1204.56,683.144 1205.12,683.144 1205.68,683.144 1206.24,683.144 1206.8,683.144 1207.35,683.144 1207.91,683.144 1208.47,683.144 1209.03,683.144 1209.59,683.144 1210.15,683.144 1210.71,683.144 1211.27,683.144 1211.83,683.144 1212.39,683.144 1212.95,683.144 1213.51,683.144 1214.07,683.144 1214.62,683.144 1215.18,683.144 1215.74,683.144 1216.3,683.144 1216.86,683.144 1217.42,683.144 1217.98,683.144 1218.54,683.144 1219.1,683.144 1219.66,683.144 1220.22,683.144 1220.78,683.144 1221.34,683.144 1221.89,683.144 1222.45,683.144 1223.01,683.144 1223.57,683.144 1224.13,683.144 1224.69,683.144 1225.25,683.144 1225.81,683.144 1226.37,683.144 1226.93,683.144 1227.49,683.144 1228.05,683.144 1228.61,683.144 1229.17,683.144 1229.72,683.144 1230.28,683.144 1230.84,683.144 1231.4,683.144 1231.96,683.144 1232.52,683.144 1233.08,683.144 1233.64,683.144 1234.2,683.144 1234.76,683.144 1235.32,683.144 1235.88,683.144 1236.44,683.144 1236.99,683.144 1237.55,683.144 1238.11,683.144 1238.67,683.144 1239.23,683.144 1239.79,683.144 1240.35,683.144 1240.91,683.144 1241.47,683.144 1242.03,683.144 1242.59,683.144 1243.15,683.144 1243.71,683.144 1244.26,683.144 1244.82,683.144 1245.38,683.144 1245.94,683.144 1246.5,683.144 1247.06,683.144 1247.62,683.144 1248.18,683.144 1248.74,683.144 1249.3,683.144 1249.86,683.144 1250.42,683.144 1250.98,683.144 1251.54,683.144 1252.09,683.144 1252.65,683.144 1253.21,683.144 1253.77,683.144 1254.33,683.144 1254.89,683.144 1255.45,683.144 1256.01,683.144 1256.57,683.144 1257.13,683.144 1257.69,683.144 1258.25,683.144 1258.81,683.144 1259.36,683.144 1259.92,683.144 1260.48,683.144 1261.04,683.144 1261.6,683.144 1262.16,683.144 1262.72,683.144 1263.28,683.144 1263.84,683.144 1264.4,683.144 1264.96,683.144 1265.52,683.144 1266.08,683.144 1266.63,683.144 1267.19,683.144 1267.75,683.144 1268.31,683.144 1268.87,683.144 1269.43,683.144 1269.99,683.144 1270.55,683.144 1271.11,683.144 1271.67,683.144 1272.23,683.144 1272.79,683.144 1273.35,683.144 1273.91,683.144 1274.46,683.144 1275.02,683.144 1275.58,683.144 1276.14,683.144 1276.7,683.144 1277.26,683.144 1277.82,683.144 1278.38,683.144 1278.94,683.144 1279.5,683.144 1280.06,683.144 1280.62,683.144 1281.18,683.144 1281.73,683.144 1282.29,683.144 1282.85,683.144 1283.41,683.144 1283.97,683.144 1284.53,683.144 1285.09,683.144 1285.65,683.144 1286.21,683.144 1286.77,683.144 1287.33,683.144 1287.89,683.144 1288.45,683.144 1289,683.144 1289.56,683.144 1290.12,683.144 1290.68,683.144 1291.24,683.144 1291.8,683.144 1292.36,683.144 1292.92,683.144 1293.48,683.144 1294.04,683.144 1294.6,683.144 1295.16,683.144 1295.72,683.144 1296.28,683.144 1296.83,683.144 1297.39,683.144 1297.95,683.144 1298.51,683.144 1299.07,683.144 1299.63,683.144 1300.19,683.144 1300.75,683.144 1301.31,683.144 1301.87,683.144 1302.43,683.144 1302.99,683.144 1303.55,683.144 1304.1,683.144 1304.66,683.144 1305.22,683.144 1305.78,683.144 1306.34,683.144 1306.9,683.144 1307.46,683.144 1308.02,683.144 1308.58,683.144 1309.14,683.144 1309.7,683.144 1310.26,683.144 1310.82,683.144 1311.38,683.144 1311.93,683.144 1312.49,683.144 1313.05,683.144 1313.61,683.144 1314.17,683.144 1314.73,683.144 1315.29,683.144 1315.85,683.144 1316.41,683.144 1316.97,683.144 1317.53,683.144 1318.09,683.144 1318.65,683.144 1319.2,683.144 1319.76,683.144 1320.32,683.144 1320.88,683.144 1321.44,683.144 1322,683.144 1322.56,683.144 1323.12,683.144 1323.68,683.144 1324.24,683.144 1324.8,683.144 1325.36,683.144 1325.92,683.144 1326.47,683.144 1327.03,683.144 1327.59,683.144 1328.15,683.144 1328.71,683.144 1329.27,683.144 1329.83,683.144 1330.39,683.144 1330.95,683.144 1331.51,683.144 1332.07,683.144 1332.63,683.144 1333.19,683.144 1333.75,683.144 1334.3,683.144 1334.86,683.144 1335.42,683.144 1335.98,683.144 1336.54,683.144 1337.1,683.144 1337.66,683.144 1338.22,683.144 1338.78,683.144 1339.34,683.144 1339.9,683.144 1340.46,683.144 1341.02,683.144 1341.57,683.144 1342.13,683.144 1342.69,683.144 1343.25,683.144 1343.81,683.144 1344.37,683.144 1344.93,683.144 1345.49,683.144 1346.05,683.144 1346.61,683.144 1347.17,683.144 1347.73,683.144 1348.29,683.144 1348.84,683.144 1349.4,683.144 1349.96,683.144 1350.52,683.144 1351.08,683.144 1351.64,683.144 1352.2,683.144 1352.76,683.144 1353.32,683.144 1353.88,683.144 1354.44,683.144 1355,683.144 1355.56,683.144 1356.12,683.144 1356.67,683.144 1357.23,683.144 1357.79,683.144 1358.35,683.144 1358.91,683.144 1359.47,683.144 1360.03,683.144 1360.59,683.144 1361.15,683.144 1361.71,683.144 1362.27,683.144 1362.83,683.144 1363.39,683.144 1363.94,683.144 1364.5,683.144 1365.06,683.144 1365.62,683.144 1366.18,683.144 1366.74,683.144 1367.3,683.144 1367.86,683.144 1368.42,683.144 1368.98,683.144 1369.54,683.144 1370.1,683.144 1370.66,683.144 1371.21,683.144 1371.77,683.144 1372.33,683.144 1372.89,683.144 1373.45,683.144 1374.01,683.144 1374.57,683.144 1375.13,683.144 1375.69,683.144 1376.25,683.144 1376.81,683.144 1377.37,683.144 1377.93,683.144 1378.49,683.144 1379.04,683.144 1379.6,683.144 1380.16,683.144 1380.72,683.144 1381.28,683.144 1381.84,683.144 1382.4,683.144 1382.96,683.144 1383.52,683.144 1384.08,683.144 1384.64,683.144 1385.2,683.144 1385.76,683.144 1386.31,683.144 1386.87,683.144 1387.43,683.144 1387.99,683.144 1388.55,683.144 1389.11,683.144 1389.67,683.144 1390.23,683.144 1390.79,683.144 1391.35,683.144 1391.91,683.144 1392.47,683.144 1393.03,683.144 1393.58,683.144 1394.14,683.144 1394.7,683.144 1395.26,683.144 1395.82,683.144 1396.38,683.144 1396.94,683.144 1397.5,683.144 1398.06,683.144 1398.62,683.144 1399.18,683.144 1399.74,683.144 1400.3,683.144 1400.86,683.144 1401.41,683.144 1401.97,683.144 1402.53,683.144 1403.09,683.144 1403.65,683.144 1404.21,683.144 1404.77,683.144 1405.33,683.144 1405.89,683.144 1406.45,683.144 1407.01,683.144 1407.57,683.144 1408.13,683.144 1408.68,683.144 1409.24,683.144 1409.8,683.144 1410.36,683.144 1410.92,683.144 1411.48,683.144 1412.04,683.144 1412.6,683.144 1413.16,683.144 1413.72,683.144 1414.28,683.144 1414.84,683.144 1415.4,683.144 1415.95,683.144 1416.51,683.144 1417.07,683.144 1417.63,683.144 1418.19,683.144 1418.75,683.144 1419.31,683.144 1419.87,683.144 1420.43,683.144 1420.99,683.144 1421.55,683.144 1422.11,683.144 1422.67,683.144 1423.23,683.144 1423.78,683.144 1424.34,683.144 1424.9,683.144 1425.46,683.144 1426.02,683.144 1426.58,683.144 1427.14,683.144 1427.7,683.144 1428.26,683.144 1428.82,683.144 1429.38,683.144 1429.94,683.144 1430.5,683.144 1431.05,683.144 1431.61,683.144 1432.17,683.144 1432.73,683.144 1433.29,683.144 1433.85,683.144 1434.41,683.144 1434.97,683.144 1435.53,683.144 1436.09,683.144 1436.65,683.144 1437.21,683.144 1437.77,683.144 1438.33,683.144 1438.88,683.144 1439.44,683.144 1440,683.144 1440.56,683.144 1441.12,683.144 1441.68,683.144 1442.24,683.144 1442.8,683.144 1443.36,683.144 1443.92,683.144 1444.48,683.144 1445.04,683.144 1445.6,683.144 1446.15,683.144 1446.71,683.144 1447.27,683.144 1447.83,683.144 1448.39,683.144 1448.95,683.144 1449.51,683.144 1450.07,683.144 1450.63,683.144 1451.19,683.144 1451.75,683.144 1452.31,683.144 1452.87,683.144 1453.42,683.144 1453.98,683.144 1454.54,683.144 1455.1,683.144 1455.66,683.144 1456.22,683.144 1456.78,683.144 1457.34,683.144 1457.9,683.144 1458.46,683.144 1459.02,683.144 1459.58,683.144 1460.14,683.144 1460.7,683.144 1461.25,683.144 1461.81,683.144 1462.37,683.144 1462.93,683.144 1463.49,683.144 1464.05,683.144 1464.61,683.144 1465.17,683.144 1465.73,683.144 1466.29,683.144 1466.85,683.144 1467.41,683.144 1467.97,683.144 1468.52,683.144 1469.08,683.144 1469.64,683.144 1470.2,683.144 1470.76,683.144 1471.32,683.144 1471.88,683.144 1472.44,683.144 1473,683.144 1473.56,683.144 1474.12,683.144 1474.68,683.144 1475.24,683.144 1475.79,683.144 1476.35,683.144 1476.91,683.144 1477.47,683.144 1478.03,683.144 1478.59,683.144 1479.15,683.144 1479.71,683.144 1480.27,683.144 1480.83,683.144 1481.39,683.144 1481.95,683.144 1482.51,683.144 1483.07,683.144 1483.62,683.144 1484.18,683.144 1484.74,683.144 1485.3,683.144 1485.86,683.144 1486.42,683.144 1486.98,683.144 1487.54,683.144 1488.1,683.144 1488.66,683.144 1489.22,683.144 1489.78,683.144 1490.34,683.144 1490.89,683.144 1491.45,683.144 1492.01,683.144 1492.57,683.144 1493.13,683.144 1493.69,683.144 1494.25,683.144 1494.81,683.144 1495.37,683.144 1495.93,683.144 1496.49,683.144 1497.05,683.144 1497.61,683.144 1498.16,683.144 1498.72,683.144 1499.28,683.144 1499.84,683.144 1500.4,683.144 1500.96,683.144 1501.52,683.144 1502.08,683.144 1502.64,683.144 1503.2,683.144 1503.76,683.144 1504.32,683.144 1504.88,683.144 1505.44,683.144 1505.99,683.144 1506.55,683.144 1507.11,683.144 1507.67,683.144 1508.23,683.144 1508.79,683.144 1509.35,683.144 1509.91,683.144 1510.47,683.144 1511.03,683.144 1511.59,683.144 1512.15,683.144 1512.71,683.144 1513.26,683.144 1513.82,683.144 1514.38,683.144 1514.94,683.144 1515.5,683.144 1516.06,683.144 1516.62,683.144 1517.18,683.144 1517.74,683.144 1518.3,683.144 1518.86,683.144 1519.42,683.144 1519.98,683.144 1520.53,683.144 1521.09,683.144 1521.65,683.144 1522.21,683.144 1522.77,683.144 1523.33,683.144 1523.89,683.144 1524.45,683.144 1525.01,683.144 1525.57,683.144 1526.13,683.144 1526.69,683.144 1527.25,683.144 1527.81,683.144 1528.36,683.144 1528.92,683.144 1529.48,683.144 1530.04,683.144 1530.6,683.144 1531.16,683.144 1531.72,683.144 1532.28,683.144 1532.84,683.144 1533.4,683.144 1533.96,683.144 1534.52,683.144 1535.08,683.144 1535.63,683.144 1536.19,683.144 1536.75,683.144 1537.31,683.144 1537.87,683.144 1538.43,683.144 1538.99,683.144 1539.55,683.144 1540.11,683.144 1540.67,683.144 1541.23,683.144 1541.79,683.144 1542.35,683.144 1542.9,683.144 1543.46,683.144 1544.02,683.144 1544.58,683.144 1545.14,683.144 1545.7,683.144 1546.26,683.144 1546.82,683.144 1547.38,683.144 1547.94,683.144 1548.5,683.144 1549.06,683.144 1549.62,683.144 1550.18,683.144 1550.73,683.144 1551.29,683.144 1551.85,683.144 1552.41,683.144 1552.97,683.144 1553.53,683.144 1554.09,683.144 1554.65,683.144 1555.21,683.144 1555.77,683.144 1556.33,683.144 1556.89,683.144 1557.45,683.144 1558,683.144 1558.56,683.144 1559.12,683.144 1559.68,683.144 1560.24,683.144 1560.8,683.144 1561.36,683.144 1561.92,683.144 1562.48,683.144 1563.04,683.144 1563.6,683.144 1564.16,683.144 1564.72,683.144 1565.28,683.144 1565.83,683.144 1566.39,683.144 1566.95,683.144 1567.51,683.144 1568.07,683.144 1568.63,683.144 1569.19,683.144 1569.75,683.144 1570.31,683.144 1570.87,683.144 1571.43,683.144 1571.99,683.144 1572.55,683.144 1573.1,683.144 1573.66,683.144 1574.22,683.144 1574.78,683.144 1575.34,683.144 1575.9,683.144 1576.46,683.144 1577.02,683.144 1577.58,683.144 1578.14,683.144 1578.7,683.144 1579.26,683.144 1579.82,683.144 1580.37,683.144 1580.93,683.144 1581.49,683.144 1582.05,683.144 1582.61,683.144 1583.17,683.144 1583.73,683.144 1584.29,683.144 1584.85,683.144 1585.41,683.144 1585.97,683.144 1586.53,683.144 1587.09,683.144 1587.65,683.144 1588.2,683.144 1588.76,683.144 1589.32,683.144 1589.88,683.144 1590.44,683.144 1591,683.144 1591.56,683.144 1592.12,683.144 1592.68,683.144 1593.24,683.144 1593.8,683.144 1594.36,683.144 1594.92,683.144 1595.47,683.144 1596.03,683.144 1596.59,683.144 1597.15,683.144 1597.71,683.144 1598.27,683.144 1598.83,683.144 1599.39,683.144 1599.95,683.144 1600.51,683.144 1601.07,683.144 1601.63,683.144 1602.19,683.144 1602.74,683.144 1603.3,683.144 1603.86,683.144 1604.42,683.144 1604.98,683.144 1605.54,683.144 1606.1,683.144 1606.66,683.144 1607.22,683.144 1607.78,683.144 1608.34,683.144 1608.9,683.144 1609.46,683.144 1610.02,683.144 1610.57,683.144 1611.13,683.144 1611.69,683.144 1612.25,683.144 1612.81,683.144 1613.37,683.144 1613.93,683.144 1614.49,683.144 1615.05,683.144 1615.61,683.144 1616.17,683.144 1616.73,683.144 1617.29,683.144 1617.84,683.144 1618.4,683.144 1618.96,683.144 1619.52,683.144 1620.08,683.144 1620.64,683.144 1621.2,683.144 1621.76,683.144 1622.32,683.144 1622.88,683.144 1623.44,683.144 1624,683.144 1624.56,683.144 1625.11,683.144 1625.67,683.144 1626.23,683.144 1626.79,683.144 1627.35,683.144 1627.91,683.144 1628.47,683.144 1629.03,683.144 1629.59,683.144 1630.15,683.144 1630.71,683.144 1631.27,683.144 1631.83,683.144 1632.39,683.144 1632.94,683.144 1633.5,683.144 1634.06,683.144 1634.62,683.144 1635.18,683.144 1635.74,683.144 1636.3,683.144 1636.86,683.144 1637.42,683.144 1637.98,683.144 1638.54,683.144 1639.1,683.144 1639.66,683.144 1640.21,683.144 1640.77,683.144 1641.33,683.144 1641.89,683.144 1642.45,683.144 1643.01,683.144 1643.57,683.144 1644.13,683.144 1644.69,683.144 1645.25,683.144 1645.81,683.144 1646.37,683.144 1646.93,683.144 1647.48,683.144 1648.04,683.144 1648.6,683.144 1649.16,683.144 1649.72,683.144 1650.28,683.144 1650.84,683.144 1651.4,683.144 1651.96,683.144 1652.52,683.144 1653.08,683.144 1653.64,683.144 1654.2,683.144 1654.76,683.144 1655.31,683.144 1655.87,683.144 1656.43,683.144 1656.99,683.144 1657.55,683.144 1658.11,683.144 1658.67,683.144 1659.23,683.144 1659.79,683.144 1660.35,683.144 1660.91,683.144 1661.47,683.144 1662.03,683.144 1662.58,683.144 1663.14,683.144 1663.7,683.144 1664.26,683.144 1664.82,683.144 1665.38,683.144 1665.94,683.144 1666.5,683.144 1667.06,683.144 1667.62,683.144 1668.18,683.144 1668.74,683.144 1669.3,683.144 1669.85,683.144 1670.41,683.144 1670.97,683.144 1671.53,683.144 1672.09,683.144 1672.65,683.144 1673.21,683.144 1673.77,683.144 1674.33,683.144 1674.89,683.144 1675.45,683.144 1676.01,683.144 1676.57,683.144 1677.13,683.144 1677.68,683.144 1678.24,683.144 1678.8,683.144 1679.36,683.144 1679.92,683.144 1680.48,683.144 1681.04,683.144 1681.6,683.144 1682.16,683.144 1682.72,683.144 1683.28,683.144 1683.84,683.144 1684.4,683.144 1684.95,683.144 1685.51,683.144 1686.07,683.144 1686.63,683.144 1687.19,683.144 1687.75,683.144 1688.31,683.144 1688.87,683.144 1689.43,683.144 1689.99,683.144 1690.55,683.144 1691.11,683.144 1691.67,683.144 1692.23,683.144 1692.78,683.144 1693.34,683.144 1693.9,683.144 1694.46,683.144 1695.02,683.144 1695.58,683.144 1696.14,683.144 1696.7,683.144 1697.26,683.144 1697.82,683.144 1698.38,683.144 1698.94,683.144 1699.5,683.144 1700.05,683.144 1700.61,683.144 1701.17,683.144 1701.73,683.144 1702.29,683.144 1702.85,683.144 1703.41,683.144 1703.97,683.144 1704.53,683.144 1705.09,683.144 1705.65,683.144 1706.21,683.144 1706.77,683.144 1707.32,683.144 1707.88,683.144 1708.44,683.144 1709,683.144 1709.56,683.144 1710.12,683.144 1710.68,683.144 1711.24,683.144 1711.8,683.144 1712.36,683.144 1712.92,683.144 1713.48,683.144 1714.04,683.144 1714.6,683.144 1715.15,683.144 1715.71,683.144 1716.27,683.144 1716.83,683.144 1717.39,683.144 1717.95,683.144 1718.51,683.144 1719.07,683.144 1719.63,683.144 1720.19,683.144 1720.75,683.144 1721.31,683.144 1721.87,683.144 1722.42,683.144 1722.98,683.144 1723.54,683.144 1724.1,683.144 1724.66,683.144 1725.22,683.144 1725.78,683.144 1726.34,683.144 1726.9,683.144 1727.46,683.144 1728.02,683.144 1728.58,683.144 1729.14,683.144 1729.69,683.144 1730.25,683.144 1730.81,683.144 1731.37,683.144 1731.93,683.144 1732.49,683.144 1733.05,683.144 1733.61,683.144 1734.17,683.144 1734.73,683.144 1735.29,683.144 1735.85,683.144 1736.41,683.144 1736.97,683.144 1737.52,683.144 1738.08,683.144 1738.64,683.144 1739.2,683.144 1739.76,683.144 1740.32,683.144 1740.88,683.144 1741.44,683.144 1742,683.144 1742.56,683.144 1743.12,683.144 1743.68,683.144 1744.24,683.144 1744.79,683.144 1745.35,683.144 1745.91,683.144 1746.47,683.144 1747.03,683.144 1747.59,683.144 1748.15,683.144 1748.71,683.144 1749.27,683.144 1749.83,683.144 1750.39,683.144 1750.95,683.144 1751.51,683.144 1752.06,683.144 1752.62,683.144 1753.18,683.144 1753.74,683.144 1754.3,683.144 1754.86,683.144 1755.42,683.144 1755.98,683.144 1756.54,683.144 1757.1,683.144 1757.66,683.144 1758.22,683.144 1758.78,683.144 1759.34,683.144 1759.89,683.144 1760.45,683.144 1761.01,683.144 1761.57,683.144 1762.13,683.144 1762.69,683.144 1763.25,683.144 1763.81,683.144 1764.37,683.144 1764.93,683.144 1765.49,683.144 1766.05,683.144 1766.61,683.144 1767.16,683.144 1767.72,683.144 1768.28,683.144 1768.84,683.144 1769.4,683.144 1769.96,683.144 1770.52,683.144 1771.08,683.144 1771.64,683.144 1772.2,683.144 1772.76,683.144 1773.32,683.144 1773.88,683.144 1774.43,683.144 1774.99,683.144 1775.55,683.144 1776.11,683.144 1776.67,683.144 1777.23,683.144 1777.79,683.144 1778.35,683.144 1778.91,683.144 1779.47,683.144 1780.03,683.144 1780.59,683.144 1781.15,683.144 1781.71,683.144 1782.26,683.144 1782.82,683.144 1783.38,683.144 1783.94,683.144 1784.5,683.144 1785.06,683.144 1785.62,683.144 1786.18,683.144 1786.74,683.144 1787.3,683.144 1787.86,683.144 1788.42,683.144 1788.98,683.144 1789.53,683.144 1790.09,683.144 1790.65,683.144 1791.21,683.144 1791.77,683.144 1792.33,683.144 1792.89,683.144 1793.45,683.144 1794.01,683.144 1794.57,683.144 1795.13,683.144 1795.69,683.144 1796.25,683.144 1796.8,683.144 1797.36,683.144 1797.92,683.144 1798.48,683.144 1799.04,683.144 1799.6,683.144 1800.16,683.144 1800.72,683.144 1801.28,683.144 1801.84,683.144 1802.4,683.144 1802.96,683.144 1803.52,683.144 1804.08,683.144 1804.63,683.144 1805.19,683.144 1805.75,683.144 1806.31,683.144 1806.87,683.144 1807.43,683.144 1807.99,683.144 1808.55,683.144 1809.11,683.144 1809.67,683.144 1810.23,683.144 1810.79,683.144 1811.35,683.144 1811.9,683.144 1812.46,683.144 1813.02,683.144 1813.58,683.144 1814.14,683.144 1814.7,683.144 1815.26,683.144 1815.82,683.144 1816.38,683.144 1816.94,683.144 1817.5,683.144 1818.06,683.144 1818.62,683.144 1819.18,683.144 1819.73,683.144 1820.29,683.144 1820.85,683.144 1821.41,683.144 1821.97,683.144 1822.53,683.144 1823.09,683.144 1823.65,683.144 1824.21,683.144 1824.77,683.144 1825.33,683.144 1825.89,683.144 1826.45,683.144 1827,683.144 1827.56,683.144 1828.12,683.144 1828.68,683.144 1829.24,683.144 1829.8,683.144 1830.36,683.144 1830.92,683.144 1831.48,683.144 1832.04,683.144 1832.6,683.144 1833.16,683.144 1833.72,683.144 1834.27,683.144 1834.83,683.144 1835.39,683.144 1835.95,683.144 1836.51,683.144 1837.07,683.144 1837.63,683.144 1838.19,683.144 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.025211384187191 ± 0.017941010723870218\nProjected Energy: -4.012865283235596 ± (0.003696375749616898, 0.0037195509885439293)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.45033</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3014e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.0088e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.957e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.432e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.654e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.826e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321637\n -3.36312429161336\n -0.7590191922770817\n  0.1358418221962232\n  0.15789998694608975\n  0.8767114411781307\n  1.5305929970973358\n  1.583573261186733\n  3.0728703303258698\n  3.1256726539518276\n  4.862107221562174\n  6.2606948503806\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2( Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
