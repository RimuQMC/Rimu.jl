var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21397260099719967 ± 0.0015621665546325224\n   G2(1) = 0.916940840459605 ± 0.000561102331761365\n   G2(2) = 0.9811580751877506 ± 0.0009617212417287864\n   G2(3) = 0.9898295677080906 ± 0.0010519023411536483\n   G2(4) = 0.9811580751877506 ± 0.0009617212417287864\n   G2(5) = 0.916940840459605 ± 0.000561102331761365\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.055063895277845 ± 0.13725454940339032\n   Replica 2: -3.9867742038604606 ± 0.15481477484805442\n   Replica 3: -4.01235114049947 ± 0.1285258676158259\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip970\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip970)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip971\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip970)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip972\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.29 2211.02,1003.29 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.742 2211.02,745.742 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.198 2211.02,488.198 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.654 2211.02,230.654 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.29 423.181,1003.29 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.742 423.181,745.742 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.198 423.181,488.198 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.654 423.181,230.654 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.19 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.97 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.97 363.608 1260.87 Q363.608 1253.74 361.779 1250.19 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.53 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.87 Q344.395 1252.12 347.45 1247.53 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M290.043 1016.63 L306.363 1016.63 L306.363 1020.57 L284.418 1020.57 L284.418 1016.63 Q287.08 1013.88 291.664 1009.25 Q296.27 1004.59 297.451 1003.25 Q299.696 1000.73 300.576 998.992 Q301.478 997.233 301.478 995.543 Q301.478 992.789 299.534 991.053 Q297.613 989.316 294.511 989.316 Q292.312 989.316 289.858 990.08 Q287.427 990.844 284.65 992.395 L284.65 987.673 Q287.474 986.539 289.927 985.96 Q292.381 985.381 294.418 985.381 Q299.789 985.381 302.983 988.067 Q306.177 990.752 306.177 995.242 Q306.177 997.372 305.367 999.293 Q304.58 1001.19 302.474 1003.78 Q301.895 1004.46 298.793 1007.67 Q295.691 1010.87 290.043 1016.63 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M316.224 986.006 L334.58 986.006 L334.58 989.941 L320.506 989.941 L320.506 998.414 Q321.524 998.066 322.543 997.904 Q323.562 997.719 324.58 997.719 Q330.367 997.719 333.747 1000.89 Q337.126 1004.06 337.126 1009.48 Q337.126 1015.06 333.654 1018.16 Q330.182 1021.24 323.862 1021.24 Q321.687 1021.24 319.418 1020.87 Q317.173 1020.5 314.765 1019.76 L314.765 1015.06 Q316.849 1016.19 319.071 1016.75 Q321.293 1017.3 323.77 1017.3 Q327.774 1017.3 330.112 1015.2 Q332.45 1013.09 332.45 1009.48 Q332.45 1005.87 330.112 1003.76 Q327.774 1001.65 323.77 1001.65 Q321.895 1001.65 320.02 1002.07 Q318.168 1002.49 316.224 1003.37 L316.224 986.006 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M356.339 989.085 Q352.728 989.085 350.899 992.65 Q349.094 996.191 349.094 1003.32 Q349.094 1010.43 350.899 1013.99 Q352.728 1017.53 356.339 1017.53 Q359.973 1017.53 361.779 1013.99 Q363.608 1010.43 363.608 1003.32 Q363.608 996.191 361.779 992.65 Q359.973 989.085 356.339 989.085 M356.339 985.381 Q362.149 985.381 365.205 989.988 Q368.284 994.571 368.284 1003.32 Q368.284 1012.05 365.205 1016.65 Q362.149 1021.24 356.339 1021.24 Q350.529 1021.24 347.45 1016.65 Q344.395 1012.05 344.395 1003.32 Q344.395 994.571 347.45 989.988 Q350.529 985.381 356.339 985.381 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M286.062 728.462 L304.418 728.462 L304.418 732.398 L290.344 732.398 L290.344 740.87 Q291.363 740.522 292.381 740.36 Q293.4 740.175 294.418 740.175 Q300.205 740.175 303.585 743.347 Q306.964 746.518 306.964 751.934 Q306.964 757.513 303.492 760.615 Q300.02 763.694 293.701 763.694 Q291.525 763.694 289.256 763.323 Q287.011 762.953 284.603 762.212 L284.603 757.513 Q286.687 758.647 288.909 759.203 Q291.131 759.758 293.608 759.758 Q297.613 759.758 299.951 757.652 Q302.288 755.546 302.288 751.934 Q302.288 748.323 299.951 746.217 Q297.613 744.11 293.608 744.11 Q291.733 744.11 289.858 744.527 Q288.006 744.944 286.062 745.823 L286.062 728.462 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M326.177 731.541 Q322.566 731.541 320.737 735.106 Q318.932 738.647 318.932 745.777 Q318.932 752.884 320.737 756.448 Q322.566 759.99 326.177 759.99 Q329.811 759.99 331.617 756.448 Q333.446 752.884 333.446 745.777 Q333.446 738.647 331.617 735.106 Q329.811 731.541 326.177 731.541 M326.177 727.837 Q331.987 727.837 335.043 732.444 Q338.122 737.027 338.122 745.777 Q338.122 754.504 335.043 759.11 Q331.987 763.694 326.177 763.694 Q320.367 763.694 317.288 759.11 Q314.233 754.504 314.233 745.777 Q314.233 737.027 317.288 732.444 Q320.367 727.837 326.177 727.837 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M356.339 731.541 Q352.728 731.541 350.899 735.106 Q349.094 738.647 349.094 745.777 Q349.094 752.884 350.899 756.448 Q352.728 759.99 356.339 759.99 Q359.973 759.99 361.779 756.448 Q363.608 752.884 363.608 745.777 Q363.608 738.647 361.779 735.106 Q359.973 731.541 356.339 731.541 M356.339 727.837 Q362.149 727.837 365.205 732.444 Q368.284 737.027 368.284 745.777 Q368.284 754.504 365.205 759.11 Q362.149 763.694 356.339 763.694 Q350.529 763.694 347.45 759.11 Q344.395 754.504 344.395 745.777 Q344.395 737.027 347.45 732.444 Q350.529 727.837 356.339 727.837 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M284.835 470.918 L307.057 470.918 L307.057 472.909 L294.511 505.478 L289.627 505.478 L301.432 474.854 L284.835 474.854 L284.835 470.918 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M316.224 470.918 L334.58 470.918 L334.58 474.854 L320.506 474.854 L320.506 483.326 Q321.524 482.978 322.543 482.816 Q323.562 482.631 324.58 482.631 Q330.367 482.631 333.747 485.803 Q337.126 488.974 337.126 494.39 Q337.126 499.969 333.654 503.071 Q330.182 506.15 323.862 506.15 Q321.687 506.15 319.418 505.779 Q317.173 505.409 314.765 504.668 L314.765 499.969 Q316.849 501.103 319.071 501.659 Q321.293 502.214 323.77 502.214 Q327.774 502.214 330.112 500.108 Q332.45 498.002 332.45 494.39 Q332.45 490.779 330.112 488.673 Q327.774 486.566 323.77 486.566 Q321.895 486.566 320.02 486.983 Q318.168 487.4 316.224 488.279 L316.224 470.918 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M356.339 473.997 Q352.728 473.997 350.899 477.562 Q349.094 481.103 349.094 488.233 Q349.094 495.34 350.899 498.904 Q352.728 502.446 356.339 502.446 Q359.973 502.446 361.779 498.904 Q363.608 495.34 363.608 488.233 Q363.608 481.103 361.779 477.562 Q359.973 473.997 356.339 473.997 M356.339 470.293 Q362.149 470.293 365.205 474.9 Q368.284 479.483 368.284 488.233 Q368.284 496.96 365.205 501.566 Q362.149 506.15 356.339 506.15 Q350.529 506.15 347.45 501.566 Q344.395 496.96 344.395 488.233 Q344.395 479.483 347.45 474.9 Q350.529 470.293 356.339 470.293 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M256.664 243.999 L264.303 243.999 L264.303 217.634 L255.992 219.3 L255.992 215.041 L264.256 213.374 L268.932 213.374 L268.932 243.999 L276.571 243.999 L276.571 247.934 L256.664 247.934 L256.664 243.999 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M296.015 216.453 Q292.404 216.453 290.576 220.018 Q288.77 223.559 288.77 230.689 Q288.77 237.796 290.576 241.36 Q292.404 244.902 296.015 244.902 Q299.65 244.902 301.455 241.36 Q303.284 237.796 303.284 230.689 Q303.284 223.559 301.455 220.018 Q299.65 216.453 296.015 216.453 M296.015 212.749 Q301.826 212.749 304.881 217.356 Q307.96 221.939 307.96 230.689 Q307.96 239.416 304.881 244.022 Q301.826 248.606 296.015 248.606 Q290.205 248.606 287.127 244.022 Q284.071 239.416 284.071 230.689 Q284.071 221.939 287.127 217.356 Q290.205 212.749 296.015 212.749 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M326.177 216.453 Q322.566 216.453 320.737 220.018 Q318.932 223.559 318.932 230.689 Q318.932 237.796 320.737 241.36 Q322.566 244.902 326.177 244.902 Q329.811 244.902 331.617 241.36 Q333.446 237.796 333.446 230.689 Q333.446 223.559 331.617 220.018 Q329.811 216.453 326.177 216.453 M326.177 212.749 Q331.987 212.749 335.043 217.356 Q338.122 221.939 338.122 230.689 Q338.122 239.416 335.043 244.022 Q331.987 248.606 326.177 248.606 Q320.367 248.606 317.288 244.022 Q314.233 239.416 314.233 230.689 Q314.233 221.939 317.288 217.356 Q320.367 212.749 326.177 212.749 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M356.339 216.453 Q352.728 216.453 350.899 220.018 Q349.094 223.559 349.094 230.689 Q349.094 237.796 350.899 241.36 Q352.728 244.902 356.339 244.902 Q359.973 244.902 361.779 241.36 Q363.608 237.796 363.608 230.689 Q363.608 223.559 361.779 220.018 Q359.973 216.453 356.339 216.453 M356.339 212.749 Q362.149 212.749 365.205 217.356 Q368.284 221.939 368.284 230.689 Q368.284 239.416 365.205 244.022 Q362.149 248.606 356.339 248.606 Q350.529 248.606 347.45 244.022 Q344.395 239.416 344.395 230.689 Q344.395 221.939 347.45 217.356 Q350.529 212.749 356.339 212.749 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip972)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.654 4017.76,230.654 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1246.4 461.101,1245.74 461.669,1245 462.238,1244.18 462.806,1242.24 463.375,1241.26 463.943,1240.18 464.511,1239 465.08,1236.69 465.648,1235.29 466.216,1233.75 466.785,1232.11 467.353,1230.36 467.921,1228.45 468.49,1226.42 469.058,1224.25 469.626,1220.84 470.195,1218.28 470.763,1215.62 471.331,1210.7 471.9,1207.6 472.468,1203.31 473.036,1199.79 473.605,1195.06 474.173,1190.13 474.741,1186 475.31,1181.65 475.878,1177.07 476.446,1172.26 477.015,1167.24 477.583,1160.88 478.152,1153.28 478.72,1147.52 479.288,1141.49 479.857,1134.26 480.425,1126.86 480.993,1120.28 481.562,1113.54 482.13,1104.45 482.698,1096.09 483.267,1087.48 483.835,1078.87 484.403,1067.02 484.972,1058.15 485.54,1048.19 486.108,1038.96 486.677,1029.84 487.245,1021.53 487.813,1009.92 488.382,999.325 488.95,987.751 489.518,978.311 490.087,967.648 490.655,958.045 491.224,947.141 491.792,937.402 492.36,928.587 492.929,916.599 493.497,906.605 494.065,895.543 494.634,885.48 495.202,875.37 495.77,866.236 496.339,857.003 496.907,844.683 497.475,835.515 498.044,822.276 498.612,811.243 499.18,800.31 499.749,791.482 500.317,782.48 500.885,771.564 501.454,762.729 502.022,748.676 502.59,739.002 503.159,730.497 503.727,721.988 504.295,712.429 504.864,703.922 505.432,695.509 506.001,686.034 506.569,677.59 507.137,664.176 507.706,655.086 508.274,644.895 508.842,635.985 509.411,625.269 509.979,616.645 510.547,607.229 511.116,598.999 511.684,589.95 512.252,578.996 512.821,572.478 513.389,563.943 513.957,557.634 514.526,549.282 515.094,541.252 515.662,535.229 516.231,526.212 516.799,519.48 517.367,511.904 517.936,505.542 518.504,500.22 519.072,495.011 519.641,487.824 520.209,480.94 520.778,474.018 521.346,469.517 521.914,466.916 522.483,460.127 523.051,453.63 523.619,449.321 524.188,445.022 524.756,440.713 525.324,435.501 525.893,430.452 526.461,424.605 527.029,420.002 527.598,417.248 528.166,412.521 528.734,406.552 529.303,403.051 529.871,399.687 530.439,395.231 531.008,391.964 531.576,386.701 532.144,382.65 532.713,379.978 533.281,375.149 533.85,371.545 534.418,368.038 534.986,362.211 535.555,358.821 536.123,354.647 536.691,351.675 537.26,347.473 537.828,343.624 538.396,343.01 538.965,338.885 539.533,338.404 540.101,335.697 540.67,334.035 541.238,331.171 541.806,325.577 542.375,322.28 542.943,320.062 543.511,317.851 544.08,315.641 544.648,312.651 545.216,313.593 545.785,311.387 546.353,309.504 546.921,306.787 547.49,305.823 548.058,302.845 548.627,302.983 549.195,302.072 549.763,299.092 550.332,298.002 550.9,297.236 551.468,296.608 552.037,295.689 552.605,296.909 553.173,297.852 553.742,295.593 554.31,293.364 554.878,292.598 555.447,292.763 556.015,290.952 556.583,288.959 557.152,288.102 557.72,285.311 558.288,284.44 558.857,283.539 559.425,282.889 559.993,281.967 560.562,280.215 561.13,276.667 561.698,275.075 562.267,273.427 562.835,271.934 563.404,271.773 563.972,271.485 564.54,268.104 565.109,267.835 565.677,268.562 566.245,268.269 566.814,267.015 567.382,266.776 567.95,262.484 568.519,261.652 569.087,259.72 569.655,262.017 570.224,260.922 570.792,262.079 571.36,260.824 571.929,261.761 572.497,261.497 573.065,261.441 573.634,260.463 574.202,261.262 574.77,260.142 575.339,257.906 575.907,257.913 576.476,256.828 577.044,257.028 577.612,256.013 578.181,254.709 578.749,253.793 579.317,252.85 579.886,254.083 580.454,252.982 581.022,254.279 581.591,254.091 582.159,252.117 582.727,250.142 583.296,250.408 583.864,249.592 584.432,248.628 585.001,246.711 585.569,250.179 586.137,249.183 586.706,247.4 587.274,248.688 587.842,248.914 588.411,249.089 588.979,248.31 589.547,248.529 590.116,247.954 590.684,248.085 591.253,246.385 591.821,244.833 592.389,244.418 592.958,244.726 593.526,244.94 594.094,245.431 594.663,245.512 595.231,243.482 595.799,241.926 596.368,243.413 596.936,242.821 597.504,244.23 598.073,244.638 598.641,245.732 599.209,245.901 599.778,247.958 600.346,246.826 600.914,245.983 601.483,245.961 602.051,245.9 602.619,244.885 603.188,244.842 603.756,246.768 604.325,246.754 604.893,246.642 605.461,243.684 606.03,239.763 606.598,240.169 607.166,239.403 607.735,239.772 608.303,241.104 608.871,241.221 609.44,240.446 610.008,239.78 610.576,240.065 611.145,239.304 611.713,240.649 612.281,239.751 612.85,241.313 613.418,240.57 613.986,240.901 614.555,241.234 615.123,240.67 615.691,241.01 616.26,239.201 616.828,239.493 617.396,237.819 617.965,239.385 618.533,241.746 619.102,240.606 619.67,242.016 620.238,240.209 620.807,239.392 621.375,235.661 621.943,236.336 622.512,238.912 623.08,239.341 623.648,239.715 624.217,239.958 624.785,238.101 625.353,239.477 625.922,236.549 626.49,236.993 627.058,237.47 627.627,236.922 628.195,238.275 628.763,238.481 629.332,237.691 629.9,239.853 630.468,240.139 631.037,240.158 631.605,240.313 632.173,240.438 632.742,240.43 633.31,241.616 633.879,242.544 634.447,241.487 635.015,240.459 635.584,242.588 636.152,241.358 636.72,240.214 637.289,240.262 637.857,242.371 638.425,242.262 638.994,242.348 639.562,241.29 640.13,241.3 640.699,242.159 641.267,241.902 641.835,241.804 642.404,240.725 642.972,241.705 643.54,241.596 644.109,241.296 644.677,242.031 645.245,239.491 645.814,239.366 646.382,239.422 646.951,238.288 647.519,238.416 648.087,238.428 648.656,237.569 649.224,236.702 649.792,237.069 650.361,237.279 650.929,239.258 651.497,239.19 652.066,234.978 652.634,235.142 653.202,236.61 653.771,236.631 654.339,235.768 654.907,236.915 655.476,236.008 656.044,236.929 656.612,237.12 657.181,238.284 657.749,239.285 658.317,239.112 658.886,237.86 659.454,236.775 660.022,237.812 660.591,236.582 661.159,235.617 661.728,233.432 662.296,233.539 662.864,231.43 663.433,230.681 664.001,233.137 664.569,232.368 665.138,232.501 665.706,233.062 666.274,233.335 666.843,232.21 667.411,231.498 667.979,228.585 668.548,230.129 669.116,231.716 669.684,233.116 670.253,231.503 670.821,227.879 671.389,230.608 671.958,231.117 672.526,231.625 673.094,232.13 673.663,231.513 674.231,229.762 674.799,231.57 675.368,232.734 675.936,234.041 676.505,234.253 677.073,233.612 677.641,231.835 678.21,231.298 678.778,232.691 679.346,234.218 679.915,236.495 680.483,237.615 681.051,237.563 681.62,233.572 682.188,232.029 682.756,232.395 683.325,232.643 683.893,233.282 684.461,231.63 685.03,233.938 685.598,237.037 686.166,238.149 686.735,238.781 687.303,236.437 687.871,239.643 688.44,240.72 689.008,238.32 689.577,238.149 690.145,239.112 690.713,238.644 691.282,238.471 691.85,239.368 692.418,238.213 692.987,240.089 693.555,237.763 694.123,235.2 694.692,236.062 695.26,237.176 695.828,238.112 696.397,235.904 696.965,237.739 697.533,238.56 698.102,241.082 698.67,241.621 699.238,240.476 699.807,238.993 700.375,238.662 700.943,238.233 701.512,239.143 702.08,238.548 702.648,236.426 703.217,237.255 703.785,236.86 704.354,236.724 704.922,236.567 705.49,235.476 706.059,234.288 706.627,233.274 707.195,232.327 707.764,231.408 708.332,230.709 708.9,230.823 709.469,230.92 710.037,231.1 710.605,228.464 711.174,227.722 711.742,226.171 712.31,225.672 712.879,226.209 713.447,226.728 714.015,228.225 714.584,227.401 715.152,228.795 715.72,229.072 716.289,229.401 716.857,228.92 717.425,231.306 717.994,231.259 718.562,233.568 719.131,232.658 719.699,231.661 720.267,231.855 720.836,230.824 721.404,228.087 721.972,226.461 722.541,225.979 723.109,225.446 723.677,225.044 724.246,227.859 724.814,228.535 725.382,229.124 725.951,232.548 726.519,232.715 727.087,232.924 727.656,234.169 728.224,236.058 728.792,235.059 729.361,235.176 729.929,233.226 730.497,232.179 731.066,232.421 731.634,231.625 732.203,229.831 732.771,229.235 733.339,228.512 733.908,227.991 734.476,229.761 735.044,230.11 735.613,230.756 736.181,232.103 736.749,231.169 737.318,232.52 737.886,233.809 738.454,238.039 739.023,238.833 739.591,242.625 740.159,242.076 740.728,241.551 741.296,244.264 741.864,244.522 742.433,242.823 743.001,241.201 743.569,239.639 744.138,239.401 744.706,237.016 745.274,235.86 745.843,237.813 746.411,238.512 746.98,235.116 747.548,237.307 748.116,238.977 748.685,238.515 749.253,239.225 749.821,236.957 750.39,235.473 750.958,235.418 751.526,235.418 752.095,233.029 752.663,236.131 753.231,234.868 753.8,234.652 754.368,232.311 754.936,231.17 755.505,229.225 756.073,229.589 756.641,226.806 757.21,228.036 757.778,229.343 758.346,229.523 758.915,229.809 759.483,228.869 760.052,229.185 760.62,228.597 761.188,229.249 761.757,229.258 762.325,228.302 762.893,226.589 763.462,225.959 764.03,226.533 764.598,226.856 765.167,227.118 765.735,228.372 766.303,227.695 766.872,230.155 767.44,230.302 768.008,232.479 768.577,232.358 769.145,232.426 769.713,233.54 770.282,234.673 770.85,235.643 771.418,232.285 771.987,233.267 772.555,231.25 773.123,233.266 773.692,233.318 774.26,233.107 774.829,233.301 775.397,232.096 775.965,231.904 776.534,232.014 777.102,232.019 777.67,231.928 778.239,230.145 778.807,230.284 779.375,231.494 779.944,232.579 780.512,230.418 781.08,230.705 781.649,229.947 782.217,229.003 782.785,231.476 783.354,230.602 783.922,229.809 784.49,227.907 785.059,227.173 785.627,229.566 786.195,231.756 786.764,232.841 787.332,232.729 787.9,233.635 788.469,233.396 789.037,232.402 789.606,232.477 790.174,233.493 790.742,230.425 791.311,228.393 791.879,228.641 792.447,229.163 793.016,228.332 793.584,228.627 794.152,227.592 794.721,228.961 795.289,231.391 795.857,231.416 796.426,230.677 796.994,231.9 797.562,230.882 798.131,230.902 798.699,232.063 799.267,231.127 799.836,231.105 800.404,232.329 800.972,233.596 801.541,234.578 802.109,235.547 802.678,235.349 803.246,235.288 803.814,236.181 804.383,238.034 804.951,234.688 805.519,234.491 806.088,234.306 806.656,233.998 807.224,232.924 807.793,232.906 808.361,232.892 808.929,232.976 809.498,233.93 810.066,235.86 810.634,236.855 811.203,236.48 811.771,235.242 812.339,233.883 812.908,233.978 813.476,233.795 814.044,232.78 814.613,231.865 815.181,231.816 815.749,232.064 816.318,235.096 816.886,237.056 817.455,237.702 818.023,237.331 818.591,237.952 819.16,237.539 819.728,236.122 820.296,238.945 820.865,239.316 821.433,239.448 822.001,239.944 822.57,241.167 823.138,241.093 823.706,240.481 824.275,239.819 824.843,237.855 825.411,239.404 825.98,237.678 826.548,236.16 827.116,235.765 827.685,232.238 828.253,232.117 828.821,234.009 829.39,233.638 829.958,232.372 830.526,230.102 831.095,230.107 831.663,226.944 832.232,227.058 832.8,225.924 833.368,225.16 833.937,226.462 834.505,225.618 835.073,228.014 835.642,228.214 836.21,227.596 836.778,227.698 837.347,228.931 837.915,229.099 838.483,229.212 839.052,230.183 839.62,232.387 840.188,231.287 840.757,233.251 841.325,233.892 841.893,234.085 842.462,234.874 843.03,236.529 843.598,237.115 844.167,236.68 844.735,235.114 845.304,233.503 845.872,233.16 846.44,230.971 847.009,232.859 847.577,232.682 848.145,232.523 848.714,231.111 849.282,229.932 849.85,230.912 850.419,230.825 850.987,230.611 851.555,231.339 852.124,231.195 852.692,231.021 853.26,229.808 853.829,229.766 854.397,229.875 854.965,231.885 855.534,232.017 856.102,230.946 856.67,231.051 857.239,232.112 857.807,230.871 858.375,229.7 858.944,228.773 859.512,228.999 860.081,227.941 860.649,229.148 861.217,229.165 861.786,230.002 862.354,230.015 862.922,227.997 863.491,229.439 864.059,229.466 864.627,228.777 865.196,229.865 865.764,229.803 866.332,230.776 866.901,228.636 867.469,228.506 868.037,226.45 868.606,228.041 869.174,230.168 869.742,229.229 870.311,227.463 870.879,227.637 871.447,226.844 872.016,228.019 872.584,226.263 873.152,225.623 873.721,226.037 874.289,227.402 874.858,227.433 875.426,226.758 875.994,226.18 876.563,226.618 877.131,225.742 877.699,225.119 878.268,224.538 878.836,227.378 879.404,228.804 879.973,228.093 880.541,230.283 881.109,231.363 881.678,230.53 882.246,230.887 882.814,231.958 883.383,230.797 883.951,232.855 884.519,232.747 885.088,231.628 885.656,231.659 886.224,228.411 886.793,228.845 887.361,231.239 887.93,232.302 888.498,232.193 889.066,234.37 889.635,234.006 890.203,233.963 890.771,233.542 891.34,233.295 891.908,233.38 892.476,233.292 893.045,233.076 893.613,233.021 894.181,231.815 894.75,229.559 895.318,230.708 895.886,232.756 896.455,232.646 897.023,231.373 897.591,231.298 898.16,229.357 898.728,227.227 899.296,226.422 899.865,226.864 900.433,228.148 901.001,228.478 901.57,228.624 902.138,228.848 902.707,229.015 903.275,230.322 903.843,229.235 904.412,230.233 904.98,229.356 905.548,230.508 906.117,229.558 906.685,229.878 907.253,232.172 907.822,233.068 908.39,233.847 908.958,232.662 909.527,231.627 910.095,231.553 910.663,230.516 911.232,230.77 911.8,230.706 912.368,228.472 912.937,228.644 913.505,228.883 914.073,229.175 914.642,228.41 915.21,228.57 915.779,228.741 916.347,230.9 916.915,229.872 917.484,229.011 918.052,229.96 918.62,231.226 919.189,232.366 919.757,233.229 920.325,234.11 920.894,232.924 921.462,232.605 922.03,231.544 922.599,231.579 923.167,232.594 923.735,233.778 924.304,233.377 924.872,233.135 925.44,234.048 926.009,234.838 926.577,232.505 927.145,232.385 927.714,231.29 928.282,227.251 928.85,226.477 929.419,228.177 929.987,230.633 930.556,230.781 931.124,231.895 931.692,231.98 932.261,232.936 932.829,234.843 933.397,234.674 933.966,234.325 934.534,232.009 935.102,232.956 935.671,233.983 936.239,232.714 936.807,231.668 937.376,231.847 937.944,233.979 938.512,230.862 939.081,232.777 939.649,232.575 940.217,233.502 940.786,232.248 941.354,232.018 941.922,231.961 942.491,233.98 943.059,232.884 943.627,232.486 944.196,232.319 944.764,230.106 945.333,232.178 945.901,232.021 946.469,233.943 947.038,230.717 947.606,230.629 948.174,231.405 948.743,232.256 949.311,231.107 949.879,232.371 950.448,231.145 951.016,231.065 951.584,230.975 952.153,231.144 952.721,230.785 953.289,230.944 953.858,231.767 954.426,231.774 954.994,232.734 955.563,231.437 956.131,231.499 956.699,232.567 957.268,233.336 957.836,232.326 958.405,232.927 958.973,232.655 959.541,233.617 960.11,234.38 960.678,233.092 961.246,235.04 961.815,233.536 962.383,234.435 962.951,234.337 963.52,234.184 964.088,233.94 964.656,234.653 965.225,232.348 965.793,233.121 966.361,230.802 966.93,228.692 967.498,228.88 968.066,229.372 968.635,230.492 969.203,229.521 969.771,229.632 970.34,228.637 970.908,228.714 971.476,226.831 972.045,225.852 972.613,227.498 973.182,229.78 973.75,230.779 974.318,231.597 974.887,232.653 975.455,232.312 976.023,232.338 976.592,232.357 977.16,232.044 977.728,230.928 978.297,232.178 978.865,230.164 979.433,230.013 980.002,230.117 980.57,230.064 981.138,229.906 981.707,231.034 982.275,229.673 982.843,228.669 983.412,227.908 983.98,228.035 984.548,230.568 985.117,228.214 985.685,230.433 986.253,231.555 986.822,229.328 987.39,231.514 987.959,228.389 988.527,225.277 989.095,226.841 989.664,227.066 990.232,229.454 990.8,228.434 991.369,229.687 991.937,230.876 992.505,230.85 993.074,230.782 993.642,229.57 994.21,230.779 994.779,230.753 995.347,230.842 995.915,232.805 996.484,233.518 997.052,233.205 997.62,234.165 998.189,233.972 998.757,233.462 999.325,233.316 999.894,234.262 1000.46,235.061 1001.03,233.561 1001.6,235.58 1002.17,233.269 1002.74,231.925 1003.3,231.761 1003.87,231.624 1004.44,232.488 1005.01,229.43 1005.58,229.483 1006.15,229.828 1006.71,229.796 1007.28,230.059 1007.85,229.026 1008.42,227.964 1008.99,227.99 1009.56,227.195 1010.12,225.355 1010.69,225.965 1011.26,226.35 1011.83,226.667 1012.4,226.046 1012.97,226.549 1013.53,224.78 1014.1,226.206 1014.67,226.461 1015.24,225.999 1015.81,226.504 1016.38,226.948 1016.94,225.208 1017.51,226.94 1018.08,228.637 1018.65,229.08 1019.22,230.199 1019.79,230.287 1020.35,229.348 1020.92,230.522 1021.49,230.651 1022.06,230.761 1022.63,232.8 1023.2,229.573 1023.76,231.716 1024.33,232.569 1024.9,230.318 1025.47,232.403 1026.04,232.243 1026.61,234.208 1027.17,234.025 1027.74,235.607 1028.31,233.252 1028.88,234.206 1029.45,231.865 1030.02,230.653 1030.58,231.644 1031.15,231.638 1031.72,231.976 1032.29,231.981 1032.86,232.964 1033.43,234.861 1033.99,235.627 1034.56,236.416 1035.13,239.158 1035.7,239.478 1036.27,240.014 1036.84,240.127 1037.4,240.563 1037.97,238.732 1038.54,240.382 1039.11,239.564 1039.68,240.928 1040.25,239.331 1040.81,238.531 1041.38,237.741 1041.95,235.381 1042.52,235.076 1043.09,235.602 1043.66,235.169 1044.22,236.521 1044.79,234.902 1045.36,234.309 1045.93,230.889 1046.5,231.685 1047.07,231.232 1047.63,229.228 1048.2,227.265 1048.77,227.262 1049.34,226.458 1049.91,227.699 1050.48,228.788 1051.05,225.684 1051.61,221.981 1052.18,222.348 1052.75,223.96 1053.32,223.203 1053.89,223.781 1054.46,222.112 1055.02,221.723 1055.59,222.403 1056.16,224.991 1056.73,224.183 1057.3,226.773 1057.87,224.983 1058.43,226.271 1059,226.591 1059.57,226.72 1060.14,223.774 1060.71,222.12 1061.28,220.765 1061.84,221.501 1062.41,222.943 1062.98,224.594 1063.55,225.168 1064.12,225.417 1064.69,225.874 1065.25,226.398 1065.82,227.091 1066.39,228.493 1066.96,227.572 1067.53,226.617 1068.1,226.944 1068.66,229.431 1069.23,229.572 1069.8,228.754 1070.37,228.921 1070.94,228.201 1071.51,226.386 1072.07,227.876 1072.64,229.449 1073.21,229.842 1073.78,229.03 1074.35,230.322 1074.92,229.562 1075.48,231.582 1076.05,233.65 1076.62,232.451 1077.19,231.447 1077.76,232.301 1078.33,233.191 1078.89,233.02 1079.46,229.754 1080.03,231.968 1080.6,229.82 1081.17,231.075 1081.74,231.071 1082.3,233.025 1082.87,233.241 1083.44,232.119 1084.01,232.235 1084.58,233.198 1085.15,229.971 1085.71,230.191 1086.28,230.272 1086.85,232.51 1087.42,233.482 1087.99,235.019 1088.56,233.73 1089.12,231.498 1089.69,231.453 1090.26,229.512 1090.83,230.663 1091.4,230.679 1091.97,229.886 1092.53,231.184 1093.1,230.331 1093.67,232.605 1094.24,233.515 1094.81,232.393 1095.38,232.366 1095.94,234.256 1096.51,233.137 1097.08,232.906 1097.65,232.009 1098.22,231.952 1098.79,231.835 1099.35,230.719 1099.92,230.823 1100.49,230.786 1101.06,231.843 1101.63,232.086 1102.2,232.34 1102.76,234.287 1103.33,237.129 1103.9,237.713 1104.47,239.3 1105.04,237.651 1105.61,237.32 1106.17,236.807 1106.74,235.304 1107.31,233.97 1107.88,233.712 1108.45,235.426 1109.02,233.899 1109.58,232.385 1110.15,232.187 1110.72,231.233 1111.29,229.045 1111.86,228.274 1112.43,228.501 1112.99,229.686 1113.56,228.712 1114.13,228.966 1114.7,230.115 1115.27,229.312 1115.84,227.292 1116.4,225.349 1116.97,228.736 1117.54,227.789 1118.11,225.748 1118.68,227.213 1119.25,225.432 1119.81,225.812 1120.38,227.23 1120.95,228.328 1121.52,227.561 1122.09,227.945 1122.66,227.926 1123.23,227.349 1123.79,228.633 1124.36,228.72 1124.93,230.926 1125.5,230.228 1126.07,227.013 1126.64,230.456 1127.2,230.518 1127.77,232.717 1128.34,233.655 1128.91,235.585 1129.48,235.222 1130.05,236.985 1130.61,236.452 1131.18,236.2 1131.75,234.819 1132.32,233.592 1132.89,233.432 1133.46,232.046 1134.02,231.831 1134.59,230.688 1135.16,229.69 1135.73,229.801 1136.3,231.686 1136.87,230.894 1137.43,229.645 1138,228.681 1138.57,227.957 1139.14,230.327 1139.71,230.26 1140.28,231.403 1140.84,232.29 1141.41,230.935 1141.98,230.97 1142.55,231.044 1143.12,229.947 1143.69,229.779 1144.25,228.689 1144.82,226.654 1145.39,228.042 1145.96,227.364 1146.53,227.795 1147.1,227.425 1147.66,227.725 1148.23,227.834 1148.8,227.99 1149.37,228.271 1149.94,229.384 1150.51,228.404 1151.07,226.567 1151.64,227.05 1152.21,228.417 1152.78,230.754 1153.35,231.806 1153.92,230.733 1154.48,229.795 1155.05,231.023 1155.62,231.961 1156.19,229.981 1156.76,232.348 1157.33,234.436 1157.89,237.289 1158.46,236.713 1159.03,235.343 1159.6,235.275 1160.17,235.007 1160.74,233.609 1161.3,234.404 1161.87,234.096 1162.44,233.836 1163.01,232.57 1163.58,233.26 1164.15,232.067 1164.71,231.132 1165.28,230.108 1165.85,233.578 1166.42,232.385 1166.99,230.318 1167.56,229.455 1168.12,229.389 1168.69,229.494 1169.26,229.593 1169.83,228.737 1170.4,229.951 1170.97,231.993 1171.53,235.953 1172.1,234.433 1172.67,235.234 1173.24,232.706 1173.81,232.385 1174.38,230.926 1174.94,233.92 1175.51,233.649 1176.08,234.365 1176.65,231.721 1177.22,230.501 1177.79,230.645 1178.35,230.742 1178.92,229.641 1179.49,229.778 1180.06,229.827 1180.63,229.871 1181.2,230.985 1181.76,232.216 1182.33,232.31 1182.9,232.096 1183.47,228.727 1184.04,226.718 1184.61,228.134 1185.17,229.052 1185.74,230.193 1186.31,230.292 1186.88,229.119 1187.45,228.049 1188.02,228.119 1188.58,228.179 1189.15,229.389 1189.72,229.671 1190.29,231.703 1190.86,230.554 1191.43,230.736 1192,230.692 1192.56,228.508 1193.13,228.744 1193.7,227.852 1194.27,224.105 1194.84,226.889 1195.41,228.349 1195.97,231.539 1196.54,230.514 1197.11,229.468 1197.68,229.419 1198.25,230.646 1198.82,232.125 1199.38,233.123 1199.95,231.828 1200.52,232.571 1201.09,232.502 1201.66,233.268 1202.23,233.125 1202.79,233.639 1203.36,233.58 1203.93,232.418 1204.5,233.276 1205.07,233.07 1205.64,233.899 1206.2,231.627 1206.77,229.561 1207.34,230.719 1207.91,229.837 1208.48,229.845 1209.05,228.972 1209.61,228.035 1210.18,229.293 1210.75,230.26 1211.32,229.183 1211.89,228.109 1212.46,224.036 1213.02,225.633 1213.59,226.224 1214.16,225.606 1214.73,226.859 1215.3,225.174 1215.87,228.633 1216.43,227.885 1217,227.996 1217.57,229.33 1218.14,228.189 1218.71,229.634 1219.28,228.093 1219.84,230.601 1220.41,234.692 1220.98,232.473 1221.55,232.053 1222.12,232.108 1222.69,233.114 1223.25,233.11 1223.82,233.952 1224.39,232.802 1224.96,231.718 1225.53,230.644 1226.1,232.674 1226.66,233.595 1227.23,234.476 1227.8,234.187 1228.37,235.118 1228.94,235.826 1229.51,235.539 1230.07,236.089 1230.64,233.78 1231.21,233.375 1231.78,232.301 1232.35,230.011 1232.92,230.27 1233.48,230.359 1234.05,230.591 1234.62,231.624 1235.19,230.594 1235.76,230.627 1236.33,231.758 1236.89,232.468 1237.46,235.398 1238.03,234.048 1238.6,232.622 1239.17,233.379 1239.74,235.536 1240.3,236.162 1240.87,235.78 1241.44,237.699 1242.01,238.084 1242.58,234.407 1243.15,233.042 1243.71,232.551 1244.28,231.407 1244.85,231.242 1245.42,231.035 1245.99,231.954 1246.56,232.568 1247.12,232.472 1247.69,232.228 1248.26,232.904 1248.83,230.624 1249.4,229.435 1249.97,228.467 1250.53,230.443 1251.1,230.187 1251.67,229.123 1252.24,229.311 1252.81,228.244 1253.38,228.527 1253.94,228.58 1254.51,229.733 1255.08,230.864 1255.65,230.688 1256.22,228.56 1256.79,229.536 1257.35,229.554 1257.92,230.567 1258.49,231.679 1259.06,231.587 1259.63,232.426 1260.2,235.256 1260.76,234.734 1261.33,234.272 1261.9,232.875 1262.47,231.748 1263.04,228.597 1263.61,227.485 1264.18,227.751 1264.74,226.807 1265.31,228.294 1265.88,227.481 1266.45,226.657 1267.02,228.009 1267.59,230.141 1268.15,230.259 1268.72,231.232 1269.29,232.042 1269.86,233.078 1270.43,234.811 1271,234.281 1271.56,231.878 1272.13,231.805 1272.7,230.784 1273.27,230.705 1273.84,232.599 1274.41,232.352 1274.97,232.482 1275.54,231.393 1276.11,230.345 1276.68,230.25 1277.25,226.852 1277.82,228.045 1278.38,228.152 1278.95,227.307 1279.52,225.627 1280.09,224.894 1280.66,224.186 1281.23,225.545 1281.79,224.793 1282.36,224.875 1282.93,225.188 1283.5,227.661 1284.07,229.976 1284.64,230.104 1285.2,231.338 1285.77,231.127 1286.34,232.181 1286.91,229.96 1287.48,229.739 1288.05,231.992 1288.61,234.211 1289.18,234.981 1289.75,235.489 1290.32,236.024 1290.89,236.413 1291.46,236.034 1292.02,236.354 1292.59,238.078 1293.16,235.506 1293.73,234.13 1294.3,234.716 1294.87,235.53 1295.43,233.189 1296,232.941 1296.57,232.646 1297.14,231.39 1297.71,231.349 1298.28,232.342 1298.84,230.978 1299.41,232.023 1299.98,230.725 1300.55,229.291 1301.12,228.337 1301.69,230.651 1302.25,230.573 1302.82,229.428 1303.39,227.291 1303.96,228.356 1304.53,228.474 1305.1,226.822 1305.66,225.936 1306.23,226.278 1306.8,225.706 1307.37,224.836 1307.94,226.188 1308.51,228.523 1309.07,227.725 1309.64,229.941 1310.21,230.892 1310.78,232.404 1311.35,232.003 1311.92,232.652 1312.48,234.411 1313.05,234.025 1313.62,233.552 1314.19,232.168 1314.76,230.915 1315.33,229.874 1315.89,232.821 1316.46,233.612 1317.03,233.328 1317.6,233.158 1318.17,231.811 1318.74,230.485 1319.3,230.14 1319.87,229.963 1320.44,228.027 1321.01,227.16 1321.58,225.334 1322.15,223.589 1322.71,222.075 1323.28,222.661 1323.85,219.895 1324.42,221.664 1324.99,223.107 1325.56,222.59 1326.12,222.16 1326.69,222.932 1327.26,225.739 1327.83,225.128 1328.4,225.61 1328.97,225.766 1329.53,225.949 1330.1,226.497 1330.67,229.874 1331.24,229.094 1331.81,231.384 1332.38,231.538 1332.94,230.464 1333.51,229.381 1334.08,228.51 1334.65,228.898 1335.22,230.392 1335.79,229.433 1336.36,230.569 1336.92,232.608 1337.49,231.669 1338.06,231.718 1338.63,232.572 1339.2,233.683 1339.77,235.757 1340.33,235.383 1340.9,235.926 1341.47,232.218 1342.04,231.055 1342.61,232.931 1343.18,233.934 1343.74,233.824 1344.31,234.64 1344.88,235.549 1345.45,233.12 1346.02,231.878 1346.59,230.504 1347.15,230.602 1347.72,230.59 1348.29,230.579 1348.86,231.575 1349.43,231.57 1350,232.613 1350.56,234.631 1351.13,235.207 1351.7,233.815 1352.27,231.676 1352.84,228.533 1353.41,228.716 1353.97,227.714 1354.54,228.046 1355.11,230.314 1355.68,232.37 1356.25,232.262 1356.82,231.135 1357.38,230.22 1357.95,230.342 1358.52,229.317 1359.09,230.625 1359.66,231.577 1360.23,231.433 1360.79,231.472 1361.36,228.325 1361.93,229.478 1362.5,230.643 1363.07,228.64 1363.64,228.897 1364.2,227.366 1364.77,227.698 1365.34,228.851 1365.91,226.092 1366.48,223.403 1367.05,222.916 1367.61,222.712 1368.18,224.208 1368.75,223.644 1369.32,222.276 1369.89,221.926 1370.46,225.757 1371.02,226.292 1371.59,226.806 1372.16,225.05 1372.73,225.599 1373.3,223.978 1373.87,226.582 1374.43,225.956 1375,225.452 1375.57,226.107 1376.14,228.758 1376.71,229.05 1377.28,230.45 1377.84,231.484 1378.41,232.526 1378.98,232.562 1379.55,232.564 1380.12,233.846 1380.69,232.794 1381.25,233.003 1381.82,232.192 1382.39,232.009 1382.96,232.207 1383.53,231.287 1384.1,233.402 1384.66,233.144 1385.23,234.112 1385.8,235.829 1386.37,235.564 1386.94,234.288 1387.51,236.107 1388.07,235.776 1388.64,236.524 1389.21,237.147 1389.78,236.916 1390.35,236.633 1390.92,234.96 1391.48,234.796 1392.05,235.762 1392.62,233.239 1393.19,233.268 1393.76,233.031 1394.33,232.771 1394.89,231.458 1395.46,230.374 1396.03,229.569 1396.6,230.937 1397.17,230.937 1397.74,228.914 1398.3,231.163 1398.87,233.3 1399.44,231.481 1400.01,231.449 1400.58,232.506 1401.15,232.326 1401.71,230.171 1402.28,225.979 1402.85,225.185 1403.42,226.577 1403.99,228.938 1404.56,232.045 1405.13,234.983 1405.69,238.827 1406.26,240.341 1406.83,237.5 1407.4,238.087 1407.97,238.754 1408.54,238.024 1409.1,236.298 1409.67,233.653 1410.24,235.365 1410.81,233.917 1411.38,234.691 1411.95,234.448 1412.51,234.939 1413.08,236.619 1413.65,237.372 1414.22,239.733 1414.79,239.048 1415.36,238.541 1415.92,236.999 1416.49,235.36 1417.06,233.888 1417.63,232.476 1418.2,232.245 1418.77,229.95 1419.33,228.773 1419.9,227.878 1420.47,228.054 1421.04,227.075 1421.61,228.18 1422.18,226.109 1422.74,227.345 1423.31,225.376 1423.88,226.758 1424.45,224.863 1425.02,222.186 1425.59,223.65 1426.15,223.916 1426.72,224.388 1427.29,225.898 1427.86,225.279 1428.43,224.525 1429,225.025 1429.56,225.521 1430.13,226.003 1430.7,229.291 1431.27,228.395 1431.84,228.652 1432.41,231.702 1432.97,233.76 1433.54,232.434 1434.11,232.211 1434.68,233.122 1435.25,234.026 1435.82,233.735 1436.38,234.735 1436.95,234.445 1437.52,232.235 1438.09,233.192 1438.66,233.012 1439.23,231.946 1439.79,235.031 1440.36,233.466 1440.93,232.338 1441.5,232.198 1442.07,226.827 1442.64,227.11 1443.2,227.341 1443.77,228.55 1444.34,226.458 1444.91,226.768 1445.48,226.216 1446.05,226.529 1446.61,224.831 1447.18,224.027 1447.75,223.268 1448.32,222.792 1448.89,224.228 1449.46,224.553 1450.02,226.031 1450.59,225.397 1451.16,224.751 1451.73,225.525 1452.3,226.004 1452.87,226.562 1453.43,225.761 1454,228.368 1454.57,228.56 1455.14,226.581 1455.71,227.022 1456.28,228.275 1456.84,230.615 1457.41,229.359 1457.98,228.512 1458.55,227.772 1459.12,229.122 1459.69,232.407 1460.25,230.077 1460.82,232.175 1461.39,234.099 1461.96,236.74 1462.53,237.67 1463.1,237.37 1463.66,236.173 1464.23,235.708 1464.8,234.477 1465.37,235.402 1465.94,234.981 1466.51,235.815 1467.07,235.51 1467.64,234.238 1468.21,230.932 1468.78,230.897 1469.35,232.016 1469.92,231.994 1470.48,231.943 1471.05,232.755 1471.62,231.684 1472.19,232.775 1472.76,231.472 1473.33,231.446 1473.89,231.48 1474.46,228.52 1475.03,227.896 1475.6,227.936 1476.17,226.174 1476.74,225.404 1477.31,223.811 1477.87,224.554 1478.44,224.018 1479.01,226.482 1479.58,226.969 1480.15,227.18 1480.72,230.728 1481.28,231.781 1481.85,231.88 1482.42,233.978 1482.99,232.741 1483.56,232.669 1484.13,231.573 1484.69,229.581 1485.26,232.931 1485.83,233.75 1486.4,233.712 1486.97,234.48 1487.54,233.094 1488.1,234.006 1488.67,232.142 1489.24,231.066 1489.81,230.154 1490.38,231.247 1490.95,231.57 1491.51,229.371 1492.08,230.62 1492.65,232.78 1493.22,232.597 1493.79,231.41 1494.36,229.446 1494.92,230.786 1495.49,231.87 1496.06,233.08 1496.63,233.004 1497.2,233.832 1497.77,234.683 1498.33,235.31 1498.9,234.97 1499.47,236.536 1500.04,234.836 1500.61,234.642 1501.18,235.638 1501.74,235.363 1502.31,233.782 1502.88,232.61 1503.45,234.445 1504.02,233.127 1504.59,231.998 1505.15,231.098 1505.72,231.072 1506.29,231.122 1506.86,231.118 1507.43,230.934 1508,228.726 1508.56,229.713 1509.13,229.743 1509.7,232.825 1510.27,232.447 1510.84,231.218 1511.41,229.143 1511.97,227.036 1512.54,229.439 1513.11,229.57 1513.68,228.537 1514.25,226.305 1514.82,227.735 1515.38,228.912 1515.95,230.138 1516.52,231.164 1517.09,233.206 1517.66,231.911 1518.23,228.665 1518.79,229.74 1519.36,228.749 1519.93,228.752 1520.5,229.79 1521.07,229.751 1521.64,229.705 1522.2,228.622 1522.77,227.91 1523.34,228.202 1523.91,229.268 1524.48,229.321 1525.05,229.38 1525.61,229.824 1526.18,228.181 1526.75,229.457 1527.32,230.543 1527.89,230.749 1528.46,229.532 1529.02,227.668 1529.59,226.863 1530.16,227.113 1530.73,227.505 1531.3,224.728 1531.87,222.979 1532.43,225.507 1533,224.925 1533.57,224.506 1534.14,222.883 1534.71,221.534 1535.28,223.121 1535.84,222.56 1536.41,224.097 1536.98,225.77 1537.55,226.265 1538.12,231.894 1538.69,233.988 1539.25,233.615 1539.82,235.238 1540.39,233.915 1540.96,232.689 1541.53,233.664 1542.1,234.629 1542.66,233.434 1543.23,233.222 1543.8,235.209 1544.37,234.912 1544.94,233.561 1545.51,232.457 1546.08,234.695 1546.64,237.619 1547.21,237.175 1547.78,238.782 1548.35,238.28 1548.92,237.06 1549.49,235.75 1550.05,235.631 1550.62,236.421 1551.19,236.084 1551.76,234.782 1552.33,235.642 1552.9,234.211 1553.46,235.049 1554.03,234.746 1554.6,235.316 1555.17,233.841 1555.74,232.633 1556.31,233.468 1556.87,234.089 1557.44,235.89 1558.01,234.35 1558.58,233.923 1559.15,233.568 1559.72,234.509 1560.28,234.423 1560.85,234.083 1561.42,235.005 1561.99,230.654 1562.56,233.433 1563.13,233.235 1563.69,234.134 1564.26,233.911 1564.83,232.691 1565.4,234.563 1565.97,232.999 1566.54,227.513 1567.1,225.467 1567.67,225.596 1568.24,224.713 1568.81,224.23 1569.38,223.647 1569.95,225.116 1570.51,225.532 1571.08,226.024 1571.65,226.234 1572.22,226.782 1572.79,227.11 1573.36,227.272 1573.92,226.476 1574.49,226.779 1575.06,228.026 1575.63,228.02 1576.2,227.035 1576.77,227.489 1577.33,226.706 1577.9,229.008 1578.47,228.466 1579.04,229.677 1579.61,229.84 1580.18,230.946 1580.74,228.975 1581.31,229.093 1581.88,228.321 1582.45,230.434 1583.02,230.404 1583.59,229.465 1584.15,230.555 1584.72,231.678 1585.29,229.708 1585.86,229.785 1586.43,232.095 1587,229.723 1587.56,228.921 1588.13,228.777 1588.7,229.138 1589.27,230.313 1589.84,233.361 1590.41,233.099 1590.97,236.927 1591.54,236.323 1592.11,236.86 1592.68,237.536 1593.25,240.001 1593.82,238.148 1594.38,238.568 1594.95,237.865 1595.52,238.262 1596.09,236.806 1596.66,236.252 1597.23,235.904 1597.79,235.487 1598.36,233.994 1598.93,232.583 1599.5,230.084 1600.07,229.088 1600.64,230.017 1601.2,232.814 1601.77,232.39 1602.34,231.143 1602.91,233.762 1603.48,233.452 1604.05,232.289 1604.61,231.864 1605.18,231.594 1605.75,232.445 1606.32,232.354 1606.89,231.118 1607.46,227.933 1608.02,229.14 1608.59,227.99 1609.16,227.007 1609.73,226.124 1610.3,226.259 1610.87,223.524 1611.43,222.024 1612,221.444 1612.57,225.097 1613.14,224.334 1613.71,222.871 1614.28,223.527 1614.84,220.058 1615.41,221.799 1615.98,223.339 1616.55,224.8 1617.12,227.21 1617.69,229.597 1618.26,228.516 1618.82,227.679 1619.39,227.129 1619.96,228.312 1620.53,229.688 1621.1,229.668 1621.67,231.914 1622.23,230.845 1622.8,230.721 1623.37,229.95 1623.94,230.113 1624.51,230.15 1625.08,230.377 1625.64,227.421 1626.21,226.673 1626.78,226.847 1627.35,226.159 1627.92,226.45 1628.49,228.856 1629.05,229.157 1629.62,229.376 1630.19,231.605 1630.76,232.635 1631.33,234.595 1631.9,234.384 1632.46,236.597 1633.03,236.508 1633.6,235.234 1634.17,235.852 1634.74,236.451 1635.31,236.904 1635.87,236.354 1636.44,236.909 1637.01,237.437 1637.58,237.055 1638.15,238.525 1638.72,237.778 1639.28,239.44 1639.85,238.839 1640.42,237.082 1640.99,236.516 1641.56,236.228 1642.13,235.679 1642.69,234.442 1643.26,233.149 1643.83,231.856 1644.4,230.552 1644.97,228.291 1645.54,229.471 1646.1,229.431 1646.67,231.518 1647.24,232.321 1647.81,233.87 1648.38,233.746 1648.95,232.294 1649.51,231.094 1650.08,227.915 1650.65,228.007 1651.22,225.006 1651.79,226.25 1652.36,226.494 1652.92,227.764 1653.49,227.639 1654.06,227.694 1654.63,228.972 1655.2,227.812 1655.77,227.883 1656.33,225.877 1656.9,227.111 1657.47,228.317 1658.04,228.493 1658.61,227.772 1659.18,228.944 1659.74,230.111 1660.31,228.086 1660.88,226.229 1661.45,226.609 1662.02,229.02 1662.59,229.044 1663.15,229.24 1663.72,230.239 1664.29,231.151 1664.86,229.963 1665.43,231.031 1666,230.176 1666.56,232.253 1667.13,231.963 1667.7,229.92 1668.27,227.732 1668.84,230.94 1669.41,231.852 1669.97,232.604 1670.54,232.261 1671.11,233.068 1671.68,236.062 1672.25,236.518 1672.82,234.974 1673.38,236.49 1673.95,236.202 1674.52,235.899 1675.09,234.253 1675.66,234.921 1676.23,234.335 1676.79,230.941 1677.36,230.761 1677.93,230.868 1678.5,230.903 1679.07,231.761 1679.64,230.628 1680.2,231.641 1680.77,231.508 1681.34,231.462 1681.91,232.4 1682.48,231.249 1683.05,228.029 1683.61,227.471 1684.18,227.681 1684.75,227.981 1685.32,228.301 1685.89,230.547 1686.46,232.389 1687.02,232.333 1687.59,233.233 1688.16,232.027 1688.73,231.794 1689.3,232.64 1689.87,231.032 1690.44,229.803 1691,228.864 1691.57,227.913 1692.14,227.102 1692.71,227.19 1693.28,229.469 1693.85,229.462 1694.41,231.478 1694.98,231.44 1695.55,229.39 1696.12,230.38 1696.69,230.365 1697.26,230.332 1697.82,231.25 1698.39,231.318 1698.96,230.128 1699.53,230.955 1700.1,231.663 1700.67,230.095 1701.23,230.263 1701.8,228.081 1702.37,228.367 1702.94,229.672 1703.51,230.817 1704.08,229.679 1704.64,229.677 1705.21,229.674 1705.78,229.518 1706.35,230.674 1706.92,229.315 1707.49,229.467 1708.05,231.611 1708.62,231.554 1709.19,231.261 1709.76,228.979 1710.33,229.963 1710.9,229.917 1711.46,230.917 1712.03,227.721 1712.6,228.893 1713.17,229.097 1713.74,229.996 1714.31,229.135 1714.87,227.18 1715.44,227.732 1716.01,227.834 1716.58,225.019 1717.15,224.153 1717.72,224.625 1718.28,226.001 1718.85,226.271 1719.42,223.628 1719.99,222.948 1720.56,223.644 1721.13,223.878 1721.69,224.368 1722.26,224.905 1722.83,225.354 1723.4,227.592 1723.97,227.711 1724.54,228.065 1725.1,230.343 1725.67,230.411 1726.24,231.541 1726.81,230.455 1727.38,231.668 1727.95,233.723 1728.51,232.736 1729.08,232.677 1729.65,228.337 1730.22,228.63 1730.79,227.61 1731.36,226.76 1731.92,223.834 1732.49,224.32 1733.06,224.803 1733.63,226.066 1734.2,226.402 1734.77,226.821 1735.33,227.164 1735.9,227.75 1736.47,229.131 1737.04,230.147 1737.61,231.383 1738.18,231.618 1738.74,231.724 1739.31,232.65 1739.88,229.35 1740.45,230.578 1741.02,230.633 1741.59,231.645 1742.15,230.429 1742.72,229.513 1743.29,230.663 1743.86,230.717 1744.43,228.655 1745,226.779 1745.56,230.201 1746.13,231.505 1746.7,232.732 1747.27,232.642 1747.84,232.322 1748.41,232.264 1748.97,231.279 1749.54,231.569 1750.11,232.617 1750.68,231.622 1751.25,231.652 1751.82,230.799 1752.38,229.88 1752.95,234.111 1753.52,235.062 1754.09,235.012 1754.66,233.626 1755.23,232.391 1755.79,232.374 1756.36,233.336 1756.93,233.077 1757.5,229.851 1758.07,232.977 1758.64,233.84 1759.21,233.827 1759.77,230.526 1760.34,233.735 1760.91,231.412 1761.48,231.526 1762.05,233.478 1762.62,233.289 1763.18,234.054 1763.75,235.908 1764.32,235.608 1764.89,234.303 1765.46,235.083 1766.03,232.695 1766.59,230.584 1767.16,229.558 1767.73,229.696 1768.3,230.97 1768.87,230.869 1769.44,229.938 1770,232.053 1770.57,233.009 1771.14,232.743 1771.71,231.695 1772.28,231.607 1772.85,231.785 1773.41,227.74 1773.98,226.874 1774.55,226.252 1775.12,227.561 1775.69,228.887 1776.26,227.934 1776.82,228.036 1777.39,227.127 1777.96,229.382 1778.53,228.43 1779.1,228.506 1779.67,228.731 1780.23,228.065 1780.8,230.274 1781.37,231.5 1781.94,228.518 1782.51,226.74 1783.08,224.78 1783.64,225.335 1784.21,225.875 1784.78,227.522 1785.35,227.037 1785.92,230.461 1786.49,228.344 1787.05,228.498 1787.62,226.822 1788.19,227.144 1788.76,226.539 1789.33,224.828 1789.9,225.381 1790.46,225.967 1791.03,226.534 1791.6,227.932 1792.17,229.477 1792.74,231.874 1793.31,233.143 1793.87,232.293 1794.44,234.314 1795.01,233.144 1795.58,234.069 1796.15,232.864 1796.72,233.839 1797.28,234.796 1797.85,235.589 1798.42,233.466 1798.99,234.431 1799.56,234.26 1800.13,233.894 1800.69,232.781 1801.26,233.73 1801.83,233.482 1802.4,233.218 1802.97,232.13 1803.54,233.289 1804.1,233.321 1804.67,234.153 1805.24,234.879 1805.81,234.506 1806.38,234.423 1806.95,233.339 1807.51,233.156 1808.08,234.961 1808.65,233.738 1809.22,236.458 1809.79,237.995 1810.36,238.726 1810.92,237.135 1811.49,236.767 1812.06,238.277 1812.63,236.914 1813.2,234.49 1813.77,234.257 1814.33,235.171 1814.9,234.884 1815.47,236.428 1816.04,235.114 1816.61,234.016 1817.18,234.794 1817.74,235.48 1818.31,236.34 1818.88,234.972 1819.45,235.67 1820.02,232.005 1820.59,230.958 1821.15,230.813 1821.72,230.724 1822.29,231.807 1822.86,229.372 1823.43,228.305 1824,227.291 1824.56,226.587 1825.13,228.661 1825.7,228.85 1826.27,228.879 1826.84,229.831 1827.41,230.814 1827.97,230.903 1828.54,232.967 1829.11,231.525 1829.68,231.482 1830.25,230.268 1830.82,228.165 1831.39,226.222 1831.95,227.298 1832.52,228.534 1833.09,230.915 1833.66,230.887 1834.23,230.867 1834.8,232.991 1835.36,233.669 1835.93,234.327 1836.5,234.155 1837.07,233.074 1837.64,231.566 1838.21,232.465 1838.77,233.137 1839.34,232.975 1839.91,230.655 1840.48,230.445 1841.05,230.44 1841.62,231.43 1842.18,231.197 1842.75,231.058 1843.32,232.841 1843.89,233.658 1844.46,234.374 1845.03,233.147 1845.59,233.897 1846.16,231.622 1846.73,231.417 1847.3,230.093 1847.87,228.833 1848.44,228.805 1849,227.672 1849.57,228.789 1850.14,228.9 1850.71,228.841 1851.28,228.838 1851.85,229.025 1852.41,230.094 1852.98,230.932 1853.55,231.699 1854.12,232.461 1854.69,232.025 1855.26,231.866 1855.82,231.775 1856.39,231.391 1856.96,230.25 1857.53,228.94 1858.1,226.882 1858.67,225.013 1859.23,223.355 1859.8,226.942 1860.37,227.115 1860.94,227.29 1861.51,228.476 1862.08,226.454 1862.64,224.836 1863.21,225.37 1863.78,226.561 1864.35,226.002 1864.92,223.091 1865.49,224.439 1866.05,225.105 1866.62,224.303 1867.19,224.791 1867.76,225.088 1868.33,226.558 1868.9,224.801 1869.46,223.975 1870.03,224.532 1870.6,221.822 1871.17,222.501 1871.74,225.148 1872.31,226.856 1872.87,224.854 1873.44,225.201 1874.01,226.573 1874.58,226.806 1875.15,227.134 1875.72,227.644 1876.28,229.126 1876.85,231.359 1877.42,230.334 1877.99,229.504 1878.56,232.542 1879.13,234.608 1879.69,231.4 1880.26,232.597 1880.83,231.506 1881.4,231.49 1881.97,231.634 1882.54,231.967 1883.1,233.002 1883.67,234.016 1884.24,237.062 1884.81,239.694 1885.38,239.013 1885.95,237.478 1886.51,236.898 1887.08,236.542 1887.65,235.005 1888.22,235.77 1888.79,234.344 1889.36,233.202 1889.92,232.82 1890.49,232.585 1891.06,234.469 1891.63,234.148 1892.2,235.035 1892.77,236 1893.33,235.697 1893.9,230.226 1894.47,231.344 1895.04,232.364 1895.61,232.275 1896.18,232.077 1896.74,234.081 1897.31,232.761 1897.88,232.529 1898.45,231.299 1899.02,231.175 1899.59,231.066 1900.16,232.929 1900.72,231.897 1901.29,232.598 1901.86,231.389 1902.43,231.458 1903,231.132 1903.57,232.055 1904.13,231.745 1904.7,231.418 1905.27,232.36 1905.84,230.827 1906.41,229.783 1906.98,229.852 1907.54,226.786 1908.11,227.049 1908.68,227.258 1909.25,228.449 1909.82,229.61 1910.39,229.688 1910.95,231.847 1911.52,230.447 1912.09,231.42 1912.66,229.037 1913.23,230.171 1913.8,229.328 1914.36,226.349 1914.93,226.495 1915.5,226.768 1916.07,226.935 1916.64,226.998 1917.21,228.288 1917.77,227.428 1918.34,229.823 1918.91,230.848 1919.48,231.701 1920.05,232.749 1920.62,231.491 1921.18,231.532 1921.75,229.477 1922.32,230.597 1922.89,230.415 1923.46,230.215 1924.03,231.395 1924.59,231.377 1925.16,232.322 1925.73,231.271 1926.3,232.301 1926.87,232.293 1927.44,232.124 1928,230.987 1928.57,232.119 1929.14,232.04 1929.71,232.018 1930.28,231.986 1930.85,232.866 1931.41,232.518 1931.98,230.169 1932.55,230.345 1933.12,230.355 1933.69,228.467 1934.26,228.645 1934.82,228.929 1935.39,229.027 1935.96,229.08 1936.53,231.373 1937.1,231.329 1937.67,230.162 1938.23,231.436 1938.8,233.296 1939.37,232.407 1939.94,232.273 1940.51,231.223 1941.08,231.122 1941.64,231.966 1942.21,233.021 1942.78,230.727 1943.35,231.714 1943.92,230.743 1944.49,230.772 1945.05,230.678 1945.62,228.659 1946.19,226.686 1946.76,224.768 1947.33,227.08 1947.9,227.212 1948.46,227.482 1949.03,225.75 1949.6,227.23 1950.17,225.422 1950.74,225.845 1951.31,226.005 1951.87,226.301 1952.44,226.48 1953.01,227.637 1953.58,227.744 1954.15,227.955 1954.72,227.154 1955.28,227.451 1955.85,227.736 1956.42,229.125 1956.99,230.17 1957.56,230.145 1958.13,231.403 1958.69,232.342 1959.26,232.287 1959.83,231.131 1960.4,230.164 1960.97,231.202 1961.54,232.39 1962.1,231.138 1962.67,233.414 1963.24,233.213 1963.81,233.054 1964.38,233.056 1964.95,231.904 1965.51,232.798 1966.08,233.764 1966.65,233.576 1967.22,234.449 1967.79,233.288 1968.36,232.184 1968.92,235.132 1969.49,235.716 1970.06,233.32 1970.63,229.898 1971.2,229.963 1971.77,230.063 1972.34,232.191 1972.9,231.983 1973.47,231.934 1974.04,230.537 1974.61,230.74 1975.18,230.696 1975.75,233.76 1976.31,232.52 1976.88,232.424 1977.45,232.339 1978.02,231.068 1978.59,231.038 1979.16,232.115 1979.72,230.907 1980.29,230.722 1980.86,227.67 1981.43,226.842 1982,228.075 1982.57,228.96 1983.13,229.085 1983.7,231.282 1984.27,229.011 1984.84,228.991 1985.41,230.254 1985.98,229.348 1986.54,229.319 1987.11,228.257 1987.68,228.537 1988.25,230.797 1988.82,229.704 1989.39,230.898 1989.95,229.619 1990.52,230.798 1991.09,227.85 1991.66,226.076 1992.23,225.505 1992.8,229.028 1993.36,229.269 1993.93,229.353 1994.5,229.452 1995.07,229.885 1995.64,230.071 1996.21,230.206 1996.77,231.309 1997.34,231.268 1997.91,231.379 1998.48,233.316 1999.05,233.286 1999.62,231.385 2000.18,231.31 2000.75,229.234 2001.32,230.223 2001.89,230.342 2002.46,229.437 2003.03,227.49 2003.59,229.725 2004.16,232.047 2004.73,230.901 2005.3,232.065 2005.87,235.215 2006.44,237.797 2007,240.249 2007.57,238.4 2008.14,237.727 2008.71,236.294 2009.28,236 2009.85,236.623 2010.41,235.115 2010.98,233.651 2011.55,233.315 2012.12,233.059 2012.69,232.819 2013.26,231.622 2013.82,232.454 2014.39,231.221 2014.96,232.272 2015.53,232.094 2016.1,232.186 2016.67,230.92 2017.23,229.829 2017.8,229.966 2018.37,227.774 2018.94,226.95 2019.51,227.093 2020.08,229.019 2020.64,229.032 2021.21,229.3 2021.78,226.586 2022.35,224.699 2022.92,224.113 2023.49,227.529 2024.05,225.693 2024.62,228.214 2025.19,228.318 2025.76,228.595 2026.33,227.426 2026.9,224.79 2027.46,225.371 2028.03,223.85 2028.6,223.251 2029.17,225.854 2029.74,226.104 2030.31,227.489 2030.87,226.895 2031.44,229.256 2032.01,228.399 2032.58,227.563 2033.15,228.895 2033.72,229.985 2034.28,230.048 2034.85,228.21 2035.42,228.489 2035.99,227.851 2036.56,228.057 2037.13,228.412 2037.69,227.567 2038.26,228.645 2038.83,229.9 2039.4,230.976 2039.97,233.277 2040.54,232.286 2041.11,231.281 2041.67,230.281 2042.24,230.597 2042.81,229.666 2043.38,229.851 2043.95,231.137 2044.52,233.28 2045.08,233.126 2045.65,233.95 2046.22,232.934 2046.79,230.731 2047.36,231.795 2047.93,231.702 2048.49,231.761 2049.06,232.805 2049.63,231.724 2050.2,230.659 2050.77,226.667 2051.34,227.03 2051.9,227.525 2052.47,227.08 2053.04,227.338 2053.61,228.539 2054.18,226.861 2054.75,226.145 2055.31,230.614 2055.88,230.992 2056.45,232.058 2057.02,231.89 2057.59,231.903 2058.16,230.696 2058.72,229.855 2059.29,230.107 2059.86,230.174 2060.43,231.284 2061,227.512 2061.57,226.875 2062.13,229.365 2062.7,230.543 2063.27,230.675 2063.84,231.732 2064.41,232.842 2064.98,234.921 2065.54,235.597 2066.11,235.285 2066.68,236.121 2067.25,236.891 2067.82,238.323 2068.39,236.966 2068.95,237.905 2069.52,237.254 2070.09,235.725 2070.66,233.434 2071.23,232.141 2071.8,234.064 2072.36,232.838 2072.93,233.915 2073.5,234.576 2074.07,233.14 2074.64,232.839 2075.21,232.579 2075.77,232.302 2076.34,231.983 2076.91,230.676 2077.48,230.495 2078.05,230.632 2078.62,229.688 2079.18,230.796 2079.75,230.817 2080.32,229.63 2080.89,227.593 2081.46,227.025 2082.03,227.331 2082.59,229.555 2083.16,230.651 2083.73,229.658 2084.3,230.752 2084.87,230.676 2085.44,230.75 2086,230.438 2086.57,229.43 2087.14,231.513 2087.71,231.369 2088.28,232.263 2088.85,233.36 2089.41,232.105 2089.98,234.239 2090.55,234.194 2091.12,234.909 2091.69,234.8 2092.26,234.707 2092.82,235.516 2093.39,234.156 2093.96,231.469 2094.53,231.362 2095.1,230.131 2095.67,229.062 2096.23,226.995 2096.8,227.402 2097.37,227.555 2097.94,226.977 2098.51,227.261 2099.08,228.558 2099.64,229.78 2100.21,228.834 2100.78,230.176 2101.35,228.968 2101.92,227.987 2102.49,226.286 2103.05,226.492 2103.62,229.839 2104.19,230.123 2104.76,227.124 2105.33,228.34 2105.9,228.644 2106.46,228.811 2107.03,227.005 2107.6,230.489 2108.17,230.699 2108.74,229.506 2109.31,229.553 2109.87,228.768 2110.44,230.948 2111.01,228.823 2111.58,228.943 2112.15,228.122 2112.72,227.412 2113.29,227.776 2113.85,227.165 2114.42,228.582 2114.99,228.727 2115.56,228.962 2116.13,229.158 2116.7,228.473 2117.26,231.732 2117.83,233.866 2118.4,232.752 2118.97,234.873 2119.54,233.673 2120.11,234.393 2120.67,232.01 2121.24,230.738 2121.81,230.702 2122.38,228.713 2122.95,231.021 2123.52,230.9 2124.08,231.093 2124.65,230.306 2125.22,232.65 2125.79,232.545 2126.36,233.087 2126.93,232.995 2127.49,232.862 2128.06,232.843 2128.63,231.737 2129.2,232.537 2129.77,229.402 2130.34,229.755 2130.9,231.611 2131.47,233.328 2132.04,237.435 2132.61,239.044 2133.18,236.302 2133.75,235.028 2134.31,236.779 2134.88,236.474 2135.45,232.15 2136.02,232.039 2136.59,229.995 2137.16,229.036 2137.72,228.004 2138.29,228.198 2138.86,228.515 2139.43,229.806 2140,228.719 2140.57,227.728 2141.13,229.901 2141.7,229.839 2142.27,232.153 2142.84,232.006 2143.41,229.811 2143.98,230.865 2144.54,232.751 2145.11,231.408 2145.68,230.313 2146.25,230.399 2146.82,229.196 2147.39,229.457 2147.95,230.92 2148.52,230.882 2149.09,230.826 2149.66,232.841 2150.23,233.685 2150.8,236.325 2151.36,234.895 2151.93,233.647 2152.5,231.301 2153.07,229.137 2153.64,227.327 2154.21,228.521 2154.77,228.681 2155.34,229.94 2155.91,230.121 2156.48,230.353 2157.05,231.305 2157.62,231.056 2158.18,231.956 2158.75,231.9 2159.32,232.645 2159.89,231.275 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip970)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.031 ± 0.02\n  with uncertainty of ± 0.0012686231443311143\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01569 ± (0.00187462, 0.00185998) (MC)\n  95% confidence interval: [-4.01943, -4.01204]) (MC)\n  linear error propagation: -4.01572 ± 0.00184892\n  |δ_y| = |0.00146183| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.015690416394923, val_l = 0.0037372752896631667, val_u = 0.0036480999416594884)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip000\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip000)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip001\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip000)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip002\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1152.64 2211.02,1152.64 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1000.23 2211.02,1000.23 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,847.821 2211.02,847.821 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,695.414 2211.02,695.414 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,543.007 2211.02,543.007 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,390.6 2211.02,390.6 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,238.193 2211.02,238.193 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1152.64 365.751,1152.64 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1000.23 365.751,1000.23 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,847.821 365.751,847.821 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,695.414 365.751,695.414 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,543.007 365.751,543.007 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,390.6 365.751,390.6 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,238.193 365.751,238.193 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M298.909 1138.43 Q295.298 1138.43 293.469 1142 Q291.664 1145.54 291.664 1152.67 Q291.664 1159.78 293.469 1163.34 Q295.298 1166.88 298.909 1166.88 Q302.543 1166.88 304.349 1163.34 Q306.177 1159.78 306.177 1152.67 Q306.177 1145.54 304.349 1142 Q302.543 1138.43 298.909 1138.43 M298.909 1134.73 Q304.719 1134.73 307.775 1139.34 Q310.853 1143.92 310.853 1152.67 Q310.853 1161.4 307.775 1166 Q304.719 1170.59 298.909 1170.59 Q293.099 1170.59 290.02 1166 Q286.964 1161.4 286.964 1152.67 Q286.964 1143.92 290.02 1139.34 Q293.099 1134.73 298.909 1134.73 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M259.557 1013.57 L267.196 1013.57 L267.196 987.208 L258.886 988.874 L258.886 984.615 L267.15 982.948 L271.826 982.948 L271.826 1013.57 L279.465 1013.57 L279.465 1017.51 L259.557 1017.51 L259.557 1013.57 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M298.909 986.027 Q295.298 986.027 293.469 989.592 Q291.664 993.133 291.664 1000.26 Q291.664 1007.37 293.469 1010.93 Q295.298 1014.48 298.909 1014.48 Q302.543 1014.48 304.349 1010.93 Q306.177 1007.37 306.177 1000.26 Q306.177 993.133 304.349 989.592 Q302.543 986.027 298.909 986.027 M298.909 982.323 Q304.719 982.323 307.775 986.93 Q310.853 991.513 310.853 1000.26 Q310.853 1008.99 307.775 1013.6 Q304.719 1018.18 298.909 1018.18 Q293.099 1018.18 290.02 1013.6 Q286.964 1008.99 286.964 1000.26 Q286.964 991.513 290.02 986.93 Q293.099 982.323 298.909 982.323 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M262.775 861.166 L279.094 861.166 L279.094 865.101 L257.15 865.101 L257.15 861.166 Q259.812 858.411 264.395 853.782 Q269.002 849.129 270.182 847.786 Q272.428 845.263 273.307 843.527 Q274.21 841.768 274.21 840.078 Q274.21 837.324 272.266 835.587 Q270.344 833.851 267.242 833.851 Q265.043 833.851 262.59 834.615 Q260.159 835.379 257.381 836.93 L257.381 832.208 Q260.205 831.074 262.659 830.495 Q265.113 829.916 267.15 829.916 Q272.52 829.916 275.715 832.601 Q278.909 835.287 278.909 839.777 Q278.909 841.907 278.099 843.828 Q277.312 845.726 275.205 848.319 Q274.627 848.99 271.525 852.208 Q268.423 855.402 262.775 861.166 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M298.909 833.62 Q295.298 833.62 293.469 837.185 Q291.664 840.726 291.664 847.856 Q291.664 854.962 293.469 858.527 Q295.298 862.069 298.909 862.069 Q302.543 862.069 304.349 858.527 Q306.177 854.962 306.177 847.856 Q306.177 840.726 304.349 837.185 Q302.543 833.62 298.909 833.62 M298.909 829.916 Q304.719 829.916 307.775 834.523 Q310.853 839.106 310.853 847.856 Q310.853 856.583 307.775 861.189 Q304.719 865.772 298.909 865.772 Q293.099 865.772 290.02 861.189 Q286.964 856.583 286.964 847.856 Q286.964 839.106 290.02 834.523 Q293.099 829.916 298.909 829.916 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M272.914 694.06 Q276.27 694.778 278.145 697.046 Q280.043 699.315 280.043 702.648 Q280.043 707.764 276.525 710.564 Q273.006 713.365 266.525 713.365 Q264.349 713.365 262.034 712.926 Q259.742 712.509 257.289 711.652 L257.289 707.139 Q259.233 708.273 261.548 708.852 Q263.863 709.43 266.386 709.43 Q270.784 709.43 273.076 707.694 Q275.39 705.958 275.39 702.648 Q275.39 699.592 273.238 697.879 Q271.108 696.143 267.289 696.143 L263.261 696.143 L263.261 692.301 L267.474 692.301 Q270.923 692.301 272.752 690.935 Q274.58 689.546 274.58 686.954 Q274.58 684.291 272.682 682.879 Q270.807 681.444 267.289 681.444 Q265.367 681.444 263.168 681.861 Q260.969 682.278 258.33 683.157 L258.33 678.991 Q260.992 678.25 263.307 677.879 Q265.645 677.509 267.705 677.509 Q273.029 677.509 276.131 679.94 Q279.233 682.347 279.233 686.467 Q279.233 689.338 277.59 691.328 Q275.946 693.296 272.914 694.06 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M298.909 681.213 Q295.298 681.213 293.469 684.778 Q291.664 688.319 291.664 695.449 Q291.664 702.555 293.469 706.12 Q295.298 709.662 298.909 709.662 Q302.543 709.662 304.349 706.12 Q306.177 702.555 306.177 695.449 Q306.177 688.319 304.349 684.778 Q302.543 681.213 298.909 681.213 M298.909 677.509 Q304.719 677.509 307.775 682.116 Q310.853 686.699 310.853 695.449 Q310.853 704.176 307.775 708.782 Q304.719 713.365 298.909 713.365 Q293.099 713.365 290.02 708.782 Q286.964 704.176 286.964 695.449 Q286.964 686.699 290.02 682.116 Q293.099 677.509 298.909 677.509 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M271.594 529.801 L259.789 548.25 L271.594 548.25 L271.594 529.801 M270.367 525.727 L276.247 525.727 L276.247 548.25 L281.177 548.25 L281.177 552.139 L276.247 552.139 L276.247 560.287 L271.594 560.287 L271.594 552.139 L255.992 552.139 L255.992 547.625 L270.367 525.727 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M298.909 528.806 Q295.298 528.806 293.469 532.371 Q291.664 535.912 291.664 543.042 Q291.664 550.148 293.469 553.713 Q295.298 557.255 298.909 557.255 Q302.543 557.255 304.349 553.713 Q306.177 550.148 306.177 543.042 Q306.177 535.912 304.349 532.371 Q302.543 528.806 298.909 528.806 M298.909 525.102 Q304.719 525.102 307.775 529.708 Q310.853 534.292 310.853 543.042 Q310.853 551.769 307.775 556.375 Q304.719 560.958 298.909 560.958 Q293.099 560.958 290.02 556.375 Q286.964 551.769 286.964 543.042 Q286.964 534.292 290.02 529.708 Q293.099 525.102 298.909 525.102 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M258.793 373.32 L277.15 373.32 L277.15 377.255 L263.076 377.255 L263.076 385.727 Q264.094 385.38 265.113 385.218 Q266.131 385.033 267.15 385.033 Q272.937 385.033 276.316 388.204 Q279.696 391.375 279.696 396.792 Q279.696 402.371 276.224 405.473 Q272.752 408.551 266.432 408.551 Q264.256 408.551 261.988 408.181 Q259.742 407.811 257.335 407.07 L257.335 402.371 Q259.418 403.505 261.641 404.061 Q263.863 404.616 266.34 404.616 Q270.344 404.616 272.682 402.51 Q275.02 400.403 275.02 396.792 Q275.02 393.181 272.682 391.074 Q270.344 388.968 266.34 388.968 Q264.465 388.968 262.59 389.385 Q260.738 389.801 258.793 390.681 L258.793 373.32 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M298.909 376.399 Q295.298 376.399 293.469 379.963 Q291.664 383.505 291.664 390.635 Q291.664 397.741 293.469 401.306 Q295.298 404.848 298.909 404.848 Q302.543 404.848 304.349 401.306 Q306.177 397.741 306.177 390.635 Q306.177 383.505 304.349 379.963 Q302.543 376.399 298.909 376.399 M298.909 372.695 Q304.719 372.695 307.775 377.301 Q310.853 381.885 310.853 390.635 Q310.853 399.361 307.775 403.968 Q304.719 408.551 298.909 408.551 Q293.099 408.551 290.02 403.968 Q286.964 399.361 286.964 390.635 Q286.964 381.885 290.02 377.301 Q293.099 372.695 298.909 372.695 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M269.326 236.329 Q266.178 236.329 264.326 238.482 Q262.497 240.635 262.497 244.385 Q262.497 248.112 264.326 250.288 Q266.178 252.44 269.326 252.44 Q272.474 252.44 274.303 250.288 Q276.154 248.112 276.154 244.385 Q276.154 240.635 274.303 238.482 Q272.474 236.329 269.326 236.329 M278.608 221.677 L278.608 225.936 Q276.849 225.103 275.043 224.663 Q273.261 224.223 271.502 224.223 Q266.872 224.223 264.418 227.348 Q261.988 230.473 261.641 236.792 Q263.006 234.779 265.066 233.714 Q267.127 232.626 269.603 232.626 Q274.812 232.626 277.821 235.797 Q280.853 238.945 280.853 244.385 Q280.853 249.709 277.705 252.927 Q274.557 256.144 269.326 256.144 Q263.33 256.144 260.159 251.561 Q256.988 246.954 256.988 238.228 Q256.988 230.033 260.877 225.172 Q264.766 220.288 271.316 220.288 Q273.076 220.288 274.858 220.635 Q276.664 220.982 278.608 221.677 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M298.909 223.992 Q295.298 223.992 293.469 227.556 Q291.664 231.098 291.664 238.228 Q291.664 245.334 293.469 248.899 Q295.298 252.44 298.909 252.44 Q302.543 252.44 304.349 248.899 Q306.177 245.334 306.177 238.228 Q306.177 231.098 304.349 227.556 Q302.543 223.992 298.909 223.992 M298.909 220.288 Q304.719 220.288 307.775 224.894 Q310.853 229.478 310.853 238.228 Q310.853 246.954 307.775 251.561 Q304.719 256.144 298.909 256.144 Q293.099 256.144 290.02 251.561 Q286.964 246.954 286.964 238.228 Q286.964 229.478 290.02 224.894 Q293.099 220.288 298.909 220.288 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip002)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1040.34 400.199,937.17 400.786,842.51 401.372,755.786 401.958,676.469 402.545,604.072 403.131,538.139 403.718,478.252 404.304,424.017 404.891,467.187 405.477,418.87 406.063,375.403 406.65,336.473 407.236,372.693 407.823,338.887 408.409,308.941 408.995,282.601 409.582,313.868 410.168,292.636 410.755,274.855 411.341,259.406 411.927,245.828 412.514,235.472 413.1,226.614 413.687,219.895 414.273,249.225 414.86,247.155 415.446,245.03 416.032,297.21 416.619,298.061 417.205,322.296 417.792,325.854 418.378,349.607 418.964,372.477 419.551,377.679 420.137,384.039 420.724,391.38 421.31,399.736 421.896,408.417 422.483,431.713 423.069,466.014 423.656,475.783 424.242,486.389 424.829,506.963 425.415,526.513 426.001,536.424 426.588,546.099 427.174,573.16 427.761,591.894 428.347,610.566 428.933,627.389 429.52,663.611 430.106,678.498 430.693,698.533 431.279,712.909 431.865,725.527 432.452,733.037 433.038,756.367 433.625,773.36 434.211,793.788 434.798,803.677 435.384,818.2 435.97,827.641 436.557,841.781 437.143,850.808 437.73,856 438.316,872.486 438.902,881.348 439.489,893.561 440.075,902.072 440.662,910.508 441.248,915.663 441.835,921.027 442.421,935.563 443.007,940.561 443.594,957.11 444.18,967.183 444.767,976.845 445.353,980.826 445.939,985.284 446.526,994.638 447.112,998.738 447.699,1015.62 448.285,1021.85 448.871,1025.37 449.458,1028.97 450.044,1035.04 450.631,1038.81 451.217,1042.46 451.804,1048.49 452.39,1052.4 452.976,1066.81 453.563,1072.3 454.149,1080.1 454.736,1085.41 455.322,1094.37 455.908,1099.35 456.495,1105.95 457.081,1110.42 457.668,1116.52 458.254,1126.2 458.84,1127.97 459.427,1133.46 460.013,1135.14 460.6,1140.51 461.186,1145.45 461.773,1147.06 462.359,1153.87 462.945,1156.97 463.532,1161.6 464.118,1164.34 464.705,1165.5 465.291,1166.59 465.877,1170.98 466.464,1175 467.05,1179.21 467.637,1179.73 468.223,1177.38 468.809,1181.61 469.396,1185.52 469.982,1186.19 470.569,1186.94 471.155,1187.81 471.742,1190.12 472.328,1192.3 472.914,1195.77 473.501,1197.51 474.087,1196.63 474.674,1198.7 475.26,1202.69 475.846,1203.21 476.433,1203.61 477.019,1205.66 477.606,1206.1 478.192,1209.45 478.778,1211.2 479.365,1211.09 479.951,1214.07 480.538,1215.43 481.124,1216.74 481.711,1221.34 482.297,1222.69 482.883,1225.19 483.47,1226.14 484.056,1228.83 484.643,1231.12 485.229,1229.12 485.815,1231.88 486.402,1229.82 486.988,1230.77 487.575,1230.38 488.161,1231.64 488.748,1236.6 489.334,1238.62 489.92,1239.28 490.507,1239.99 491.093,1240.74 491.68,1242.57 492.266,1239.31 492.852,1240.16 493.439,1240.63 494.025,1242.24 494.612,1241.62 495.198,1243.65 495.784,1241.69 496.371,1241.1 496.957,1243.21 497.544,1242.94 498.13,1242.28 498.717,1241.46 499.303,1241.03 499.889,1237.87 500.476,1235.03 501.062,1236.3 501.649,1237.58 502.235,1237.04 502.821,1235.31 503.408,1236.12 503.994,1237.2 504.581,1236.88 505.167,1239.04 505.753,1238.82 506.34,1238.66 506.926,1238.2 507.513,1238.11 508.099,1239.08 508.686,1242.37 509.272,1243.27 509.858,1244.27 510.445,1245.12 511.031,1244.32 511.618,1243.69 512.204,1246.95 512.79,1246.38 513.377,1244.57 513.963,1244.03 514.55,1244.69 515.136,1244.11 515.722,1248.6 516.309,1248.87 516.895,1250.53 517.482,1246.97 518.068,1247.58 518.655,1245.42 519.241,1246.22 519.827,1244.33 520.414,1243.91 521,1243.24 521.587,1243.72 522.173,1242.01 522.759,1242.67 523.346,1244.73 523.932,1244.07 524.519,1244.76 525.105,1243.89 525.691,1244.51 526.278,1245.52 526.864,1246.07 527.451,1246.68 528.037,1244.63 528.624,1245.43 529.21,1243.29 529.796,1242.96 530.383,1244.83 530.969,1246.75 531.556,1245.96 532.142,1246.49 532.728,1247.22 533.315,1249.15 533.901,1244.5 534.488,1245.26 535.074,1247.01 535.661,1245.03 536.247,1244.32 536.833,1243.67 537.42,1244.18 538.006,1243.49 538.593,1243.77 539.179,1243.2 539.765,1244.87 540.352,1246.4 540.938,1246.57 541.525,1245.86 542.111,1245.26 542.697,1244.32 543.284,1243.87 543.87,1246 544.457,1247.59 545.043,1245.51 545.63,1245.93 546.216,1243.92 546.802,1243.09 547.389,1241.42 547.975,1240.85 548.562,1237.97 549.148,1238.94 549.734,1239.59 550.321,1239.25 550.907,1238.96 551.494,1239.84 552.08,1239.56 552.666,1236.86 553.253,1236.49 553.839,1236.24 554.426,1239.48 555.012,1243.96 555.599,1243.25 556.185,1243.95 556.771,1243.3 557.358,1241.46 557.944,1241.07 558.531,1241.76 559.117,1242.34 559.703,1241.77 560.29,1242.48 560.876,1240.63 561.463,1241.49 562.049,1239.37 562.635,1240.02 563.222,1239.38 563.808,1238.73 564.395,1239.17 564.981,1238.51 565.568,1240.47 566.154,1239.91 566.74,1241.74 567.327,1239.67 567.913,1236.58 568.5,1237.71 569.086,1235.75 569.672,1237.68 570.259,1238.45 570.845,1242.78 571.432,1241.84 572.018,1238.57 572.605,1237.85 573.191,1237.19 573.777,1236.68 574.364,1238.72 574.95,1236.87 575.537,1240.22 576.123,1239.54 576.709,1238.81 577.296,1239.31 577.882,1237.52 578.469,1237.09 579.055,1237.86 579.641,1235.07 580.228,1234.5 580.814,1234.25 581.401,1233.84 581.987,1233.45 582.574,1233.23 583.16,1231.55 583.746,1230.16 584.333,1231.17 584.919,1232.16 585.506,1229.33 586.092,1230.55 586.678,1231.69 587.265,1231.4 587.851,1228.6 588.438,1228.46 589.024,1228.07 589.61,1229.09 590.197,1228.82 590.783,1227.52 591.37,1227.56 591.956,1227.41 592.543,1228.46 593.129,1227.03 593.715,1226.9 594.302,1227 594.888,1225.85 595.475,1228.68 596.061,1228.62 596.647,1228.35 597.234,1229.52 597.82,1229.18 598.407,1228.98 598.993,1229.84 599.579,1230.73 600.166,1230.14 600.752,1229.73 601.339,1227.17 601.925,1227.05 602.512,1231.96 603.098,1231.66 603.684,1229.77 604.271,1229.61 604.857,1230.51 605.444,1229 606.03,1229.95 606.616,1228.7 607.203,1228.32 607.789,1226.76 608.376,1225.36 608.962,1225.36 609.548,1226.68 610.135,1227.83 610.721,1226.42 611.308,1227.75 611.894,1228.78 612.481,1231.31 613.067,1231.11 613.653,1233.6 614.24,1234.48 614.826,1231.51 615.413,1232.39 615.999,1232.18 616.585,1231.46 617.172,1231.07 617.758,1232.37 618.345,1233.19 618.931,1236.69 619.518,1234.88 620.104,1232.97 620.69,1231.25 621.277,1233.15 621.863,1237.5 622.45,1234.27 623.036,1233.66 623.622,1233.04 624.209,1232.4 624.795,1233.11 625.382,1235.21 625.968,1233.04 626.554,1231.61 627.141,1229.98 627.727,1229.65 628.314,1230.34 628.9,1232.42 629.487,1233.04 630.073,1231.34 630.659,1229.44 631.246,1226.6 631.832,1225.1 632.419,1225 633.005,1229.67 633.591,1231.47 634.178,1230.99 634.764,1230.65 635.351,1229.83 635.937,1231.77 636.523,1228.95 637.11,1225.12 637.696,1223.61 638.283,1222.67 638.869,1225.32 639.456,1221.29 640.042,1219.76 640.628,1222.44 641.215,1222.47 641.801,1221.12 642.388,1221.49 642.974,1221.51 643.56,1220.23 644.147,1221.43 644.733,1218.97 645.32,1221.57 645.906,1224.52 646.492,1223.36 647.079,1221.88 647.665,1220.59 648.252,1223.09 648.838,1220.74 649.425,1219.57 650.011,1216.32 650.597,1215.41 651.184,1216.54 651.77,1218.12 652.357,1218.32 652.943,1218.65 653.529,1217.37 654.116,1217.89 654.702,1220.28 655.289,1219.14 655.875,1219.46 656.462,1219.48 657.048,1219.52 657.634,1220.71 658.221,1222.03 658.807,1223.17 659.394,1224.26 659.98,1225.33 660.566,1226.15 661.153,1226.02 661.739,1225.9 662.326,1225.67 662.912,1228.84 663.498,1229.79 664.085,1231.72 664.671,1232.43 665.258,1231.9 665.844,1231.38 666.431,1229.67 667.017,1230.72 667.603,1229.12 668.19,1228.83 668.776,1228.47 669.363,1229.08 669.949,1226.24 670.535,1226.28 671.122,1223.48 671.708,1224.51 672.295,1225.67 672.881,1225.41 673.467,1226.62 674.054,1229.92 674.64,1231.94 675.227,1232.62 675.813,1233.37 676.4,1233.97 676.986,1230.72 677.572,1229.97 678.159,1229.31 678.745,1225.21 679.332,1224.97 679.918,1224.67 680.504,1223.11 681.091,1220.73 681.677,1221.81 682.264,1221.57 682.85,1223.82 683.436,1225.03 684.023,1224.7 684.609,1225.62 685.196,1227.76 685.782,1228.5 686.369,1229.41 686.955,1230.09 687.541,1228.02 688.128,1227.62 688.714,1226.85 689.301,1225.22 689.887,1226.31 690.473,1224.67 691.06,1223.06 691.646,1217.86 692.233,1216.72 692.819,1211.9 693.405,1212.28 693.992,1212.65 694.578,1209.08 695.165,1208.44 695.751,1210.19 696.338,1211.87 696.924,1213.53 697.51,1213.6 698.097,1216.3 698.683,1217.55 699.27,1215.05 699.856,1214.03 700.442,1217.97 701.029,1215.21 701.615,1213.02 702.202,1213.38 702.788,1212.33 703.375,1214.88 703.961,1216.54 704.547,1216.49 705.134,1216.38 705.72,1219.16 706.307,1215.34 706.893,1216.74 707.479,1216.9 708.066,1219.64 708.652,1220.98 709.239,1223.32 709.825,1222.91 710.411,1226.29 710.998,1224.9 711.584,1223.39 712.171,1223.2 712.757,1222.88 713.344,1224.04 713.93,1223.7 714.516,1224.44 715.103,1223.71 715.689,1223.73 716.276,1224.91 716.862,1227.03 717.448,1227.88 718.035,1227.3 718.621,1227.01 719.208,1226.79 719.794,1225.36 720.38,1226.23 720.967,1223.34 721.553,1223.17 722.14,1220.55 722.726,1220.65 723.313,1220.53 723.899,1219.14 724.485,1217.7 725.072,1216.43 725.658,1220.38 726.245,1219.15 726.831,1221.53 727.417,1219.07 728.004,1218.95 728.59,1219.14 729.177,1218.85 729.763,1220.24 730.349,1220.44 730.936,1220.28 731.522,1220.24 732.109,1220.32 732.695,1222.44 733.282,1222.29 733.868,1220.83 734.454,1219.5 735.041,1222.07 735.627,1221.73 736.214,1222.64 736.8,1223.79 737.386,1220.85 737.973,1221.89 738.559,1222.84 739.146,1225.16 739.732,1226.1 740.318,1223.3 740.905,1220.69 741.491,1219.35 742.078,1219.43 742.664,1218.29 743.251,1218.5 743.837,1219.64 744.423,1219.51 745.01,1218.24 745.596,1221.88 746.183,1224.33 746.769,1224.09 747.355,1223.51 747.942,1224.54 748.528,1224.24 749.115,1225.54 749.701,1223.96 750.288,1221.07 750.874,1221.02 751.46,1221.9 752.047,1220.42 752.633,1221.62 753.22,1221.59 753.806,1220.18 754.392,1221.28 754.979,1221.29 755.565,1219.8 756.152,1218.23 756.738,1216.97 757.324,1215.7 757.911,1215.83 758.497,1215.79 759.084,1214.6 759.67,1212.22 760.257,1216.1 760.843,1216.25 761.429,1216.38 762.016,1216.67 762.602,1217.89 763.189,1217.85 763.775,1217.82 764.361,1217.66 764.948,1216.45 765.534,1214.03 766.121,1212.7 766.707,1213.01 767.293,1214.38 767.88,1215.91 768.466,1215.72 769.053,1215.87 769.639,1217.02 770.226,1218.08 770.812,1218.11 771.398,1217.78 771.985,1214.07 772.571,1211.59 773.158,1210.65 773.744,1210.94 774.33,1210.02 774.917,1210.35 775.503,1211.91 776.09,1208.35 776.676,1207.7 777.262,1207.33 777.849,1206.52 778.435,1204.81 779.022,1204.65 779.608,1205.15 780.195,1205.72 780.781,1207.89 781.367,1205.84 781.954,1207.73 782.54,1209.4 783.127,1209.75 783.713,1213.9 784.299,1214.01 784.886,1211.69 785.472,1212.06 786.059,1213.52 786.645,1216.22 787.232,1216.23 787.818,1220.05 788.404,1220 788.991,1221.45 789.577,1222.48 790.164,1221.04 790.75,1222.16 791.336,1219.4 791.923,1219.22 792.509,1220.02 793.096,1219.97 793.682,1218.55 794.268,1218.39 794.855,1218.29 795.441,1217.15 796.028,1214.5 796.614,1215.79 797.201,1213.4 797.787,1212.57 798.373,1212.25 798.96,1211.22 799.546,1209.11 800.133,1208.26 800.719,1208.63 801.305,1210.39 801.892,1212.24 802.478,1212.58 803.065,1215.17 803.651,1212.88 804.237,1213.04 804.824,1213.19 805.41,1214.85 805.997,1216.26 806.583,1215.1 807.17,1215.2 807.756,1215.45 808.342,1214.57 808.929,1214.73 809.515,1214.93 810.102,1216.38 810.688,1216.45 811.274,1216.34 811.861,1213.93 812.447,1213.75 813.034,1215.01 813.62,1214.87 814.206,1213.58 814.793,1215.05 815.379,1216.45 815.966,1217.59 816.552,1217.37 817.139,1218.68 817.725,1217.29 818.311,1217.3 818.898,1216.33 819.484,1216.33 820.071,1218.78 820.657,1217.1 821.243,1217.1 821.83,1217.96 822.416,1216.69 823.003,1216.78 823.589,1215.63 824.175,1218.21 824.762,1218.41 825.348,1220.94 825.935,1219.12 826.521,1216.62 827.108,1217.76 827.694,1219.93 828.28,1219.79 828.867,1220.82 829.453,1219.49 830.04,1221.67 830.626,1222.54 831.212,1222.16 831.799,1220.63 832.385,1220.67 832.972,1221.56 833.558,1222.34 834.145,1221.92 834.731,1223.07 835.317,1223.94 835.904,1224.76 836.49,1221.5 837.077,1219.86 837.663,1220.76 838.249,1218.18 838.836,1216.88 839.422,1217.87 840.009,1217.44 840.595,1216.14 841.181,1217.51 841.768,1215.02 842.354,1215.1 842.941,1216.41 843.527,1216.35 844.114,1220.24 844.7,1219.77 845.286,1216.93 845.873,1215.63 846.459,1215.72 847.046,1213.05 847.632,1213.4 848.218,1213.37 848.805,1213.81 849.391,1214.04 849.978,1213.87 850.564,1213.91 851.15,1214.11 851.737,1214.12 852.323,1215.52 852.91,1218.22 853.496,1216.86 854.083,1214.38 854.669,1214.46 855.255,1215.96 855.842,1216.03 856.428,1218.36 857.015,1220.95 857.601,1222 858.187,1221.57 858.774,1220.11 859.36,1219.78 859.947,1219.65 860.533,1219.43 861.119,1219.27 861.706,1217.73 862.292,1219.05 862.879,1217.88 863.465,1218.95 864.052,1217.59 864.638,1218.74 865.224,1218.38 865.811,1215.63 866.397,1214.51 866.984,1213.51 867.57,1214.87 868.156,1216.07 868.743,1216.14 869.329,1217.37 869.916,1217.07 870.502,1217.14 871.089,1219.83 871.675,1219.68 872.261,1219.44 872.848,1219.13 873.434,1220.08 874.021,1219.94 874.607,1219.79 875.193,1217.23 875.78,1218.46 876.366,1219.52 876.953,1218.42 877.539,1216.9 878.125,1215.51 878.712,1214.43 879.298,1213.3 879.885,1214.65 880.471,1214.99 881.058,1216.22 881.644,1216.16 882.23,1214.91 882.817,1213.43 883.403,1213.84 883.99,1214.07 884.576,1212.91 885.162,1211.87 885.749,1214.59 886.335,1214.7 886.922,1215.98 887.508,1220.83 888.094,1221.84 888.681,1219.9 889.267,1216.99 889.854,1216.82 890.44,1215.47 891.027,1215.33 891.613,1214.15 892.199,1211.78 892.786,1211.89 893.372,1212.22 893.959,1214.93 894.545,1213.76 895.131,1212.46 895.718,1213.92 896.304,1215.13 896.891,1214.89 897.477,1212.28 898.063,1215.97 898.65,1213.65 899.236,1213.85 899.823,1212.68 900.409,1214.13 900.996,1214.37 901.582,1214.41 902.168,1211.93 902.755,1213.18 903.341,1213.61 903.928,1213.77 904.514,1216.4 905.1,1213.91 905.687,1214.07 906.273,1211.71 906.86,1215.53 907.446,1215.64 908.032,1214.7 908.619,1213.65 909.205,1215 909.792,1213.47 910.378,1214.91 910.965,1214.99 911.551,1215.09 912.137,1214.88 912.724,1215.3 913.31,1215.1 913.897,1214.1 914.483,1214.07 915.069,1212.88 915.656,1214.4 916.242,1214.31 916.829,1213 917.415,1212.02 918.002,1213.18 918.588,1212.41 919.174,1212.69 919.761,1211.48 920.347,1210.48 920.934,1211.95 921.52,1209.54 922.106,1211.25 922.693,1210.1 923.279,1210.13 923.866,1210.22 924.452,1210.44 925.038,1209.49 925.625,1212.19 926.211,1211.21 926.798,1213.96 927.384,1216.5 927.971,1216.32 928.557,1215.77 929.143,1214.45 929.73,1215.62 930.316,1215.52 930.903,1216.74 931.489,1216.7 932.075,1219.01 932.662,1220.28 933.248,1218.41 933.835,1215.73 934.421,1214.55 935.007,1213.56 935.594,1212.26 936.18,1212.62 936.767,1212.55 937.353,1212.49 937.94,1212.83 938.526,1214.14 939.112,1212.63 939.699,1215.02 940.285,1215.22 940.872,1215.11 941.458,1215.18 942.044,1215.39 942.631,1214.05 943.217,1215.68 943.804,1216.91 944.39,1217.87 944.976,1217.79 945.563,1214.8 946.149,1217.64 946.736,1215.02 947.322,1213.67 947.909,1216.33 948.495,1213.73 949.081,1217.48 949.668,1221.27 950.254,1219.52 950.841,1219.34 951.427,1216.55 952.013,1217.81 952.6,1216.35 953.186,1214.94 953.773,1214.96 954.359,1215.04 954.945,1216.5 955.532,1215.07 956.118,1215.1 956.705,1214.99 957.291,1212.61 957.878,1211.7 958.464,1212.01 959.05,1210.78 959.637,1210.93 960.223,1211.47 960.81,1211.58 961.396,1210.37 961.982,1209.32 962.569,1211.03 963.155,1208.52 963.742,1211.2 964.328,1212.76 964.915,1212.93 965.501,1213.07 966.087,1212 966.674,1215.65 967.26,1215.62 967.847,1215.23 968.433,1215.29 969.019,1214.99 969.606,1216.25 970.192,1217.57 970.779,1217.6 971.365,1218.62 971.951,1220.92 972.538,1220.31 973.124,1219.96 973.711,1219.68 974.297,1220.52 974.884,1220.02 975.47,1222.24 976.056,1220.67 976.643,1220.47 977.229,1221.12 977.816,1220.63 978.402,1220.19 978.988,1222.37 979.575,1220.41 980.161,1218.46 980.748,1217.97 981.334,1216.66 981.92,1216.57 982.507,1217.71 983.093,1216.32 983.68,1216.17 984.266,1216.04 984.853,1213.57 985.439,1217.42 986.025,1214.86 986.612,1213.8 987.198,1216.47 987.785,1213.96 988.371,1214.11 988.957,1211.7 989.544,1211.84 990.13,1209.84 990.717,1212.57 991.303,1211.36 991.889,1214.11 992.476,1215.54 993.062,1214.34 993.649,1214.33 994.235,1213.9 994.822,1213.86 995.408,1212.64 995.994,1210.29 996.581,1209.26 997.167,1208.18 997.754,1204.71 998.34,1204.12 998.926,1203.26 999.513,1202.9 1000.1,1202.14 1000.69,1204.14 1001.27,1201.93 1001.86,1202.7 1002.44,1200.83 1003.03,1202.53 1003.62,1203.29 1004.2,1204.07 1004.79,1206.76 1005.38,1207.02 1005.96,1206.28 1006.55,1206.69 1007.14,1204.94 1007.72,1206.77 1008.31,1207.38 1008.9,1211.43 1009.48,1210.47 1010.07,1210.99 1010.65,1213.39 1011.24,1215.79 1011.83,1215.87 1012.41,1216.92 1013,1215.53 1013.59,1214.29 1014.17,1218.07 1014.76,1222.62 1015.35,1222.39 1015.93,1220.65 1016.52,1221.72 1017.11,1221.2 1017.69,1223.36 1018.28,1224.03 1018.86,1223.43 1019.45,1220.52 1020.04,1221.62 1020.62,1218.66 1021.21,1220.91 1021.8,1219.49 1022.38,1219.21 1022.97,1219.15 1023.56,1222.78 1024.14,1224.93 1024.73,1226.75 1025.32,1226.1 1025.9,1224.59 1026.49,1222.79 1027.07,1222.25 1027.66,1222.08 1028.25,1221.65 1028.83,1221.13 1029.42,1220.4 1030.01,1218.8 1030.59,1219.96 1031.18,1221.18 1031.77,1220.88 1032.35,1217.97 1032.94,1217.83 1033.52,1218.85 1034.11,1218.69 1034.7,1219.6 1035.28,1221.84 1035.87,1220.15 1036.46,1218.32 1037.04,1217.87 1037.63,1218.87 1038.22,1217.35 1038.8,1218.28 1039.39,1215.86 1039.98,1213.34 1040.56,1214.72 1041.15,1215.89 1041.73,1214.84 1042.32,1213.72 1042.91,1213.87 1043.49,1217.76 1044.08,1215.11 1044.67,1217.67 1045.25,1216.18 1045.84,1216.17 1046.43,1213.8 1047.01,1213.48 1047.6,1214.78 1048.19,1214.6 1048.77,1213.4 1049.36,1217.24 1049.94,1216.99 1050.53,1216.9 1051.12,1214.21 1051.7,1212.99 1052.29,1211.06 1052.88,1212.52 1053.46,1215.14 1054.05,1215.18 1054.64,1217.5 1055.22,1216.14 1055.81,1216.12 1056.39,1217.08 1056.98,1215.53 1057.57,1216.55 1058.15,1213.81 1058.74,1212.66 1059.33,1213.95 1059.91,1213.94 1060.5,1211.61 1061.09,1212.88 1061.67,1213.1 1062.26,1214.13 1062.85,1214.17 1063.43,1214.28 1064.02,1215.6 1064.6,1215.47 1065.19,1215.52 1065.78,1214.24 1066.36,1213.91 1066.95,1213.57 1067.54,1211.18 1068.12,1207.64 1068.71,1206.78 1069.3,1204.68 1069.88,1206.48 1070.47,1206.72 1071.06,1207.18 1071.64,1208.86 1072.23,1210.37 1072.81,1210.6 1073.4,1208.45 1073.99,1210.19 1074.57,1211.94 1075.16,1212.14 1075.75,1213.26 1076.33,1215.88 1076.92,1216.85 1077.51,1216.63 1078.09,1215.26 1078.68,1216.45 1079.26,1216.19 1079.85,1214.85 1080.44,1215.83 1081.02,1218.29 1081.61,1220.71 1082.2,1216.76 1082.78,1217.95 1083.37,1220.47 1083.96,1218.82 1084.54,1221.05 1085.13,1220.71 1085.72,1219.12 1086.3,1217.88 1086.89,1218.86 1087.47,1218.47 1088.06,1218.56 1088.65,1219.32 1089.23,1217.85 1089.82,1217.79 1090.41,1215.18 1090.99,1216.01 1091.58,1219.9 1092.17,1215.83 1092.75,1215.76 1093.34,1213.11 1093.93,1211.92 1094.51,1209.51 1095.1,1209.84 1095.68,1207.59 1096.27,1208.09 1096.86,1208.26 1097.44,1209.8 1098.03,1211.19 1098.62,1211.31 1099.2,1212.92 1099.79,1213.15 1100.38,1214.5 1100.96,1215.7 1101.55,1215.59 1102.14,1213.34 1102.72,1214.27 1103.31,1215.77 1103.89,1216.96 1104.48,1217.88 1105.07,1215.08 1105.65,1215.17 1106.24,1213.8 1106.83,1212.71 1107.41,1214.31 1108,1214.26 1108.59,1214.16 1109.17,1215.48 1109.76,1215.7 1110.34,1217.03 1110.93,1219.53 1111.52,1217.95 1112.1,1218.83 1112.69,1218.39 1113.28,1218.9 1113.86,1218.62 1114.45,1218.56 1115.04,1218.43 1115.62,1218.16 1116.21,1216.87 1116.8,1218.09 1117.38,1220.35 1117.97,1219.87 1118.55,1218.31 1119.14,1215.54 1119.73,1214.27 1120.31,1215.54 1120.9,1216.67 1121.49,1215.2 1122.07,1214.06 1122.66,1216.42 1123.25,1213.58 1123.83,1211.01 1124.42,1207.46 1125.01,1208 1125.59,1209.52 1126.18,1209.49 1126.76,1209.71 1127.35,1211.3 1127.94,1210.26 1128.52,1210.55 1129.11,1210.78 1129.7,1212.24 1130.28,1211.36 1130.87,1212.74 1131.46,1213.84 1132.04,1215.06 1132.63,1210.88 1133.21,1212.25 1133.8,1214.71 1134.39,1215.76 1134.97,1215.87 1135.56,1215.77 1136.15,1215.68 1136.73,1216.74 1137.32,1215.32 1137.91,1212.87 1138.49,1208.04 1139.08,1209.76 1139.67,1208.7 1140.25,1211.65 1140.84,1211.99 1141.42,1213.71 1142.01,1210.08 1142.6,1210.34 1143.18,1209.4 1143.77,1212.51 1144.36,1213.96 1144.94,1213.79 1145.53,1213.67 1146.12,1215 1146.7,1214.86 1147.29,1214.82 1147.88,1214.78 1148.46,1213.46 1149.05,1211.96 1149.63,1211.81 1150.22,1212.03 1150.81,1216.06 1151.39,1218.53 1151.98,1216.92 1152.57,1215.87 1153.15,1214.53 1153.74,1214.42 1154.33,1215.85 1154.91,1217.17 1155.5,1217.15 1156.09,1217.14 1156.67,1215.74 1157.26,1215.43 1157.84,1213 1158.43,1214.36 1159.02,1214.14 1159.6,1214.19 1160.19,1216.83 1160.78,1216.59 1161.36,1217.71 1161.95,1222.28 1162.54,1219.09 1163.12,1217.42 1163.71,1213.63 1164.29,1214.85 1164.88,1216.11 1165.47,1216.2 1166.05,1214.75 1166.64,1212.96 1167.23,1211.72 1167.81,1213.23 1168.4,1212.3 1168.99,1212.34 1169.57,1211.37 1170.16,1211.48 1170.75,1210.8 1171.33,1210.8 1171.92,1212.14 1172.5,1211.06 1173.09,1211.24 1173.68,1210.18 1174.26,1212.85 1174.85,1215.33 1175.44,1213.95 1176.02,1215.02 1176.61,1215.03 1177.2,1216.1 1177.78,1217.27 1178.37,1215.81 1178.96,1214.68 1179.54,1215.99 1180.13,1217.32 1180.71,1222.27 1181.3,1220.51 1181.89,1219.92 1182.47,1220.77 1183.06,1219.38 1183.65,1221.49 1184.23,1217.46 1184.82,1218.41 1185.41,1218.34 1185.99,1216.8 1186.58,1218.2 1187.16,1216.52 1187.75,1218.4 1188.34,1215.44 1188.92,1210.49 1189.51,1213.08 1190.1,1213.55 1190.68,1213.45 1191.27,1212.2 1191.86,1212.14 1192.44,1211.07 1193.03,1212.38 1193.62,1213.64 1194.2,1214.91 1194.79,1212.46 1195.37,1211.3 1195.96,1210.16 1196.55,1210.42 1197.13,1209.21 1197.72,1208.24 1198.31,1208.47 1198.89,1207.69 1199.48,1210.36 1200.07,1210.77 1200.65,1212.01 1201.24,1214.73 1201.83,1214.44 1202.41,1214.34 1203,1214.06 1203.58,1212.82 1204.17,1214.04 1204.76,1214 1205.34,1212.64 1205.93,1211.75 1206.52,1208.16 1207.1,1209.68 1207.69,1211.33 1208.28,1210.37 1208.86,1207.69 1209.45,1206.81 1210.03,1207.15 1210.62,1204.69 1211.21,1204.06 1211.79,1208.34 1212.38,1209.91 1212.97,1210.45 1213.55,1211.78 1214.14,1211.97 1214.73,1212.2 1215.31,1211.08 1215.9,1210.31 1216.49,1210.38 1217.07,1210.63 1217.66,1209.78 1218.24,1212.48 1218.83,1213.91 1219.42,1215.11 1220,1212.78 1220.59,1213.09 1221.18,1214.39 1221.76,1214.2 1222.35,1215.51 1222.94,1215.23 1223.52,1215.22 1224.11,1213.88 1224.7,1212.53 1225.28,1212.74 1225.87,1215.31 1226.45,1214.18 1227.04,1214.18 1227.63,1212.99 1228.21,1211.65 1228.8,1211.73 1229.39,1210.7 1229.97,1207.23 1230.56,1207.75 1231.15,1208.21 1231.73,1209.82 1232.32,1211.13 1232.91,1214.91 1233.49,1216.29 1234.08,1216.05 1234.66,1217.25 1235.25,1215.55 1235.84,1216.59 1236.42,1217.66 1237.01,1216.12 1237.6,1213.62 1238.18,1213.49 1238.77,1212.32 1239.36,1211.33 1239.94,1210.04 1240.53,1207.89 1241.11,1208.43 1241.7,1211.25 1242.29,1211.31 1242.87,1212.52 1243.46,1212.61 1244.05,1210.32 1244.63,1210.57 1245.22,1210.37 1245.81,1211.65 1246.39,1212.89 1246.98,1213.02 1247.57,1217.12 1248.15,1215.77 1248.74,1215.71 1249.32,1216.78 1249.91,1218.88 1250.5,1219.88 1251.08,1220.87 1251.67,1219.39 1252.26,1220.41 1252.84,1220.45 1253.43,1220.21 1254.02,1217.37 1254.6,1214.65 1255.19,1214.51 1255.78,1213.03 1256.36,1213.27 1256.95,1211.99 1257.53,1214.63 1258.12,1214.92 1258.71,1212.22 1259.29,1209.5 1259.88,1208.48 1260.47,1207.77 1261.05,1207 1261.64,1206.4 1262.23,1206.73 1262.81,1206.21 1263.4,1203.98 1263.98,1206.93 1264.57,1208.48 1265.16,1207.69 1265.74,1206.6 1266.33,1209.32 1266.92,1209.56 1267.5,1209.87 1268.09,1211.34 1268.68,1211.37 1269.26,1210.15 1269.85,1211.76 1270.44,1210.49 1271.02,1212.03 1271.61,1213.76 1272.19,1214.94 1272.78,1212.2 1273.37,1212.3 1273.95,1213.68 1274.54,1216.28 1275.13,1215.08 1275.71,1214.99 1276.3,1217.03 1276.89,1218.19 1277.47,1217.89 1278.06,1218.68 1278.65,1219.84 1279.23,1218.35 1279.82,1215.65 1280.4,1216.66 1280.99,1214.06 1281.58,1212.93 1282.16,1211.1 1282.75,1211.54 1283.34,1210.72 1283.92,1208.55 1284.51,1208.92 1285.1,1209.42 1285.68,1211.02 1286.27,1212.5 1286.86,1213.75 1287.44,1210.21 1288.03,1209.2 1288.61,1209.48 1289.2,1209.62 1289.79,1211.19 1290.37,1212.76 1290.96,1213.18 1291.55,1213.41 1292.13,1215.76 1292.72,1216.86 1293.31,1219.14 1293.89,1221.36 1294.48,1223.34 1295.06,1222.84 1295.65,1226.34 1296.24,1224.48 1296.82,1222.96 1297.41,1223.76 1298,1224.46 1298.58,1223.74 1299.17,1220.55 1299.76,1221.4 1300.34,1220.95 1300.93,1220.89 1301.52,1220.78 1302.1,1220.23 1302.69,1216.27 1303.27,1217.22 1303.86,1214.5 1304.45,1214.29 1305.03,1215.57 1305.62,1216.88 1306.21,1217.96 1306.79,1217.54 1307.38,1215.78 1307.97,1216.95 1308.55,1215.61 1309.14,1213.14 1309.73,1214.23 1310.31,1214.15 1310.9,1213.09 1311.48,1211.7 1312.07,1209.12 1312.66,1209.45 1313.24,1208.68 1313.83,1213.04 1314.42,1214.41 1315,1212.13 1315.59,1210.87 1316.18,1210.92 1316.76,1209.86 1317.35,1208.66 1317.93,1211.49 1318.52,1212.93 1319.11,1214.56 1319.69,1214.45 1320.28,1214.46 1320.87,1214.48 1321.45,1213.28 1322.04,1213.26 1322.63,1211.98 1323.21,1209.49 1323.8,1208.7 1324.39,1210.28 1324.97,1212.79 1325.56,1216.56 1326.14,1216.39 1326.73,1217.64 1327.32,1217.31 1327.9,1214.64 1328.49,1212.16 1329.08,1212.25 1329.66,1213.57 1330.25,1214.67 1330.84,1214.53 1331.42,1215.77 1332.01,1214.23 1332.6,1213.08 1333.18,1213.23 1333.77,1213.17 1334.35,1216.94 1334.94,1215.61 1335.53,1214.23 1336.11,1216.65 1336.7,1216.38 1337.29,1218.27 1337.87,1217.95 1338.46,1216.63 1339.05,1219.99 1339.63,1223.33 1340.22,1224.08 1340.8,1224.51 1341.39,1222.9 1341.98,1223.73 1342.56,1225.54 1343.15,1226.15 1343.74,1221.76 1344.32,1221.24 1344.91,1220.72 1345.5,1222.92 1346.08,1222.4 1346.67,1224.46 1347.26,1221.49 1347.84,1222.34 1348.43,1223.06 1349.01,1222.39 1349.6,1219.31 1350.19,1219 1350.77,1217.35 1351.36,1216.11 1351.95,1214.83 1352.53,1214.74 1353.12,1214.69 1353.71,1213.1 1354.29,1214.29 1354.88,1213.99 1355.47,1214.92 1356.05,1215.1 1356.64,1214.83 1357.22,1215.9 1357.81,1213.33 1358.4,1213.58 1358.98,1212.35 1359.57,1210.18 1360.16,1210.38 1360.74,1211.81 1361.33,1209.52 1361.92,1209.79 1362.5,1208.76 1363.09,1207.87 1363.68,1207.99 1364.26,1208.19 1364.85,1210.08 1365.43,1210.17 1366.02,1208.9 1366.61,1211.84 1367.19,1211.74 1367.78,1211.97 1368.37,1212.23 1368.95,1213.76 1369.54,1215.05 1370.13,1216.03 1370.71,1214.41 1371.3,1214.4 1371.88,1216.83 1372.47,1214.16 1373.06,1211.57 1373.64,1213.7 1374.23,1213.72 1374.82,1212.43 1375.4,1212.6 1375.99,1215.16 1376.58,1220.22 1377.16,1221.29 1377.75,1219.74 1378.34,1217 1378.92,1213.29 1379.51,1209.7 1380.09,1204.93 1380.68,1202.89 1381.27,1206.12 1381.85,1205.24 1382.44,1204.25 1383.03,1204.95 1383.61,1206.87 1384.2,1209.94 1384.79,1207.8 1385.37,1209.44 1385.96,1208.42 1386.55,1208.62 1387.13,1207.94 1387.72,1205.8 1388.3,1204.74 1388.89,1201.71 1389.48,1202.33 1390.06,1202.75 1390.65,1204.43 1391.24,1206.27 1391.82,1207.94 1392.41,1209.57 1393,1209.81 1393.58,1212.55 1394.17,1213.98 1394.75,1215.1 1395.34,1214.96 1395.93,1216.2 1396.51,1214.95 1397.1,1217.5 1397.69,1216.12 1398.27,1218.57 1398.86,1217.03 1399.45,1219.4 1400.03,1222.75 1400.62,1221.19 1401.21,1221.04 1401.79,1220.63 1402.38,1218.97 1402.96,1219.82 1403.55,1220.85 1404.14,1220.4 1404.72,1219.94 1405.31,1219.48 1405.9,1215.63 1406.48,1216.74 1407.07,1216.49 1407.66,1212.85 1408.24,1210.34 1408.83,1211.87 1409.42,1212.1 1410,1210.96 1410.59,1209.81 1411.17,1210.08 1411.76,1208.79 1412.35,1209.05 1412.93,1211.63 1413.52,1210.44 1414.11,1210.6 1414.69,1211.83 1415.28,1208.06 1415.87,1209.86 1416.45,1211.15 1417.04,1211.28 1417.63,1217.72 1418.21,1217.47 1418.8,1217.28 1419.38,1215.9 1419.97,1218.47 1420.56,1218.2 1421.14,1218.95 1421.73,1218.68 1422.32,1220.82 1422.9,1221.92 1423.49,1222.99 1424.08,1223.73 1424.66,1222.19 1425.25,1221.96 1425.83,1220.32 1426.42,1221.2 1427.01,1222.1 1427.59,1221.31 1428.18,1220.85 1428.77,1220.29 1429.35,1221.35 1429.94,1218.33 1430.53,1218.15 1431.11,1220.58 1431.7,1220.15 1432.29,1218.73 1432.87,1215.96 1433.46,1217.48 1434.04,1218.53 1434.63,1219.47 1435.22,1217.91 1435.8,1213.98 1436.39,1216.76 1436.98,1214.24 1437.56,1211.87 1438.15,1208.59 1438.74,1207.31 1439.32,1207.51 1439.91,1208.8 1440.5,1209.24 1441.08,1210.61 1441.67,1209.4 1442.25,1209.8 1442.84,1208.68 1443.43,1208.93 1444.01,1210.36 1444.6,1214.27 1445.19,1214.31 1445.77,1212.95 1446.36,1212.94 1446.95,1212.97 1447.53,1211.96 1448.12,1213.21 1448.7,1211.86 1449.29,1213.39 1449.88,1213.4 1450.46,1213.34 1451.05,1216.89 1451.64,1217.69 1452.22,1217.71 1452.81,1219.89 1453.4,1220.92 1453.98,1222.96 1454.57,1222.23 1455.16,1223.02 1455.74,1220.21 1456.33,1219.73 1456.91,1219.56 1457.5,1215.37 1458.09,1214.09 1458.67,1213.95 1459.26,1211.38 1459.85,1212.8 1460.43,1212.84 1461.02,1214.11 1461.61,1216.5 1462.19,1212.47 1462.78,1211.43 1463.37,1211.4 1463.95,1210.4 1464.54,1211.99 1465.12,1210.83 1465.71,1213 1466.3,1214.27 1466.88,1215.36 1467.47,1214.05 1468.06,1213.65 1468.64,1216.28 1469.23,1214.8 1469.82,1212.19 1470.4,1212.36 1470.99,1213.75 1471.57,1216.1 1472.16,1214.52 1472.75,1213.2 1473.33,1211.71 1473.92,1211.75 1474.51,1210.69 1475.09,1209.58 1475.68,1208.72 1476.27,1209.03 1476.85,1207.03 1477.44,1208.95 1478.03,1209.08 1478.61,1207.78 1479.2,1208 1479.78,1209.8 1480.37,1211.14 1480.96,1208.88 1481.54,1210.38 1482.13,1211.69 1482.72,1212.75 1483.3,1212.77 1483.89,1212.7 1484.48,1212.69 1485.06,1212.9 1485.65,1215.56 1486.24,1214.41 1486.82,1214.4 1487.41,1210.7 1487.99,1211.1 1488.58,1212.55 1489.17,1215.04 1489.75,1217.61 1490.34,1214.8 1490.93,1214.67 1491.51,1215.94 1492.1,1218.68 1492.69,1217.06 1493.27,1215.71 1493.86,1214.28 1494.45,1213.05 1495.03,1210.57 1495.62,1212.08 1496.2,1215.96 1496.79,1214.71 1497.38,1215.93 1497.96,1215.97 1498.55,1214.77 1499.14,1214.83 1499.72,1214.91 1500.31,1216.24 1500.9,1217.14 1501.48,1216.86 1502.07,1215.63 1502.65,1215.6 1503.24,1215.56 1503.83,1215.05 1504.41,1217.05 1505,1215.57 1505.59,1214.29 1506.17,1214.05 1506.76,1215.51 1507.35,1217.78 1507.93,1218.82 1508.52,1218.61 1509.11,1218.22 1509.69,1221.64 1510.28,1223.87 1510.86,1221.02 1511.45,1221.84 1512.04,1222.48 1512.62,1224.57 1513.21,1226.37 1513.8,1224.69 1514.38,1225.54 1514.97,1223.88 1515.56,1222.03 1516.14,1221.55 1516.73,1214.87 1517.32,1212.31 1517.9,1212.68 1518.49,1210.64 1519.07,1212.14 1519.66,1213.54 1520.25,1212.32 1520.83,1211.08 1521.42,1212.43 1522.01,1212.62 1522.59,1210.15 1523.18,1210.4 1523.77,1211.94 1524.35,1213.21 1524.94,1210.45 1525.52,1206.81 1526.11,1207.18 1526.7,1205.07 1527.28,1205.49 1527.87,1206.79 1528.46,1208.23 1529.04,1208.26 1529.63,1207.18 1530.22,1207.45 1530.8,1208.9 1531.39,1207.76 1531.98,1209.38 1532.56,1208.28 1533.15,1208.54 1533.73,1207.75 1534.32,1209.43 1534.91,1210.81 1535.49,1209.76 1536.08,1208.94 1536.67,1206.67 1537.25,1208.42 1537.84,1208.85 1538.43,1209.2 1539.01,1207.99 1539.6,1208 1540.19,1208.33 1540.77,1207.13 1541.36,1212.29 1541.94,1208.93 1542.53,1209.1 1543.12,1207.95 1543.7,1208.14 1544.29,1209.54 1544.88,1207.22 1545.46,1209.03 1546.05,1215.59 1546.64,1218.12 1547.22,1218.09 1547.81,1219.27 1548.4,1219.99 1548.98,1220.84 1549.57,1219.24 1550.15,1218.88 1550.74,1218.41 1551.33,1218.26 1551.91,1217.71 1552.5,1217.41 1553.09,1217.29 1553.67,1218.33 1554.26,1218.07 1554.85,1216.66 1555.43,1216.73 1556.02,1217.97 1556.6,1217.51 1557.19,1218.53 1557.78,1215.85 1558.36,1216.54 1558.95,1215.14 1559.54,1214.96 1560.12,1213.65 1560.71,1216.02 1561.3,1215.92 1561.88,1216.88 1562.47,1214.39 1563.06,1214.43 1563.64,1215.57 1564.23,1214.28 1564.81,1212.93 1565.4,1215.28 1565.99,1215.21 1566.57,1212.44 1567.16,1215.27 1567.75,1216.26 1568.33,1216.48 1568.92,1216.09 1569.51,1214.71 1570.09,1211.03 1570.68,1211.28 1571.27,1206.58 1571.85,1207.17 1572.44,1206.38 1573.02,1205.41 1573.61,1202.25 1574.2,1204.28 1574.78,1203.59 1575.37,1204.26 1575.96,1203.61 1576.54,1205.2 1577.13,1205.72 1577.72,1206.01 1578.3,1206.39 1578.89,1208.09 1579.47,1209.72 1580.06,1212.69 1580.65,1213.9 1581.23,1212.82 1581.82,1209.46 1582.41,1209.92 1582.99,1211.39 1583.58,1208.21 1584.17,1208.51 1584.75,1209.85 1585.34,1210.32 1585.93,1210.62 1586.51,1209.57 1587.1,1209.64 1587.68,1211.09 1588.27,1214.92 1588.86,1213.53 1589.44,1214.95 1590.03,1216.2 1590.62,1217.35 1591.2,1217.29 1591.79,1220.68 1592.38,1222.64 1592.96,1223.54 1593.55,1219.38 1594.14,1220.43 1594.72,1222.33 1595.31,1221.73 1595.89,1226.05 1596.48,1224.22 1597.07,1222.58 1597.65,1221 1598.24,1218.24 1598.83,1215.45 1599.41,1216.78 1600,1217.83 1600.59,1218.57 1601.17,1217.22 1601.76,1215.62 1602.34,1215.67 1602.93,1212.98 1603.52,1214.24 1604.1,1214.39 1604.69,1215.32 1605.28,1215.14 1605.86,1215.1 1606.45,1214.84 1607.04,1218.41 1607.62,1219.39 1608.21,1219.27 1608.8,1220.19 1609.38,1219.95 1609.97,1217.15 1610.55,1216.83 1611.14,1216.6 1611.73,1213.94 1612.31,1212.67 1612.9,1210.25 1613.49,1210.42 1614.07,1207.64 1614.66,1207.61 1615.25,1209.02 1615.83,1208.16 1616.42,1207.31 1617.01,1206.62 1617.59,1207.14 1618.18,1206.33 1618.76,1205.54 1619.35,1205.84 1619.94,1203.9 1620.52,1204.63 1621.11,1202.43 1621.7,1202.96 1622.28,1204.9 1622.87,1205.43 1623.46,1205.64 1624.04,1206.18 1624.63,1207.56 1625.22,1209.03 1625.8,1210.54 1626.39,1212.08 1626.97,1214.81 1627.56,1213.45 1628.15,1213.52 1628.73,1211.03 1629.32,1210.04 1629.91,1208.13 1630.49,1208.2 1631.08,1209.89 1631.67,1211.3 1632.25,1215.12 1632.84,1215.08 1633.42,1218.75 1634.01,1217.39 1634.6,1217.19 1635.18,1215.77 1635.77,1215.98 1636.36,1215.99 1636.94,1214.52 1637.53,1215.96 1638.12,1215.94 1638.7,1218.42 1639.29,1217.05 1639.88,1215.68 1640.46,1215.52 1641.05,1216.44 1641.63,1215.1 1642.22,1213.73 1642.81,1216.18 1643.39,1218.48 1643.98,1218.13 1644.57,1215.32 1645.15,1215.33 1645.74,1215.13 1646.33,1213.96 1646.91,1212.87 1647.5,1214.29 1648.09,1213.02 1648.67,1214.04 1649.26,1211.54 1649.84,1211.86 1650.43,1214.29 1651.02,1216.95 1651.6,1213.15 1652.19,1212.04 1652.78,1211.1 1653.36,1211.47 1653.95,1210.46 1654.54,1206.77 1655.12,1206.09 1655.71,1207.82 1656.29,1205.88 1656.88,1206.09 1657.47,1206.33 1658.05,1208.2 1658.64,1207.3 1659.23,1207.91 1659.81,1211.93 1660.4,1212.14 1660.99,1212.01 1661.57,1211.96 1662.16,1210.92 1662.75,1212.26 1663.33,1211.04 1663.92,1211.18 1664.5,1211.21 1665.09,1210.06 1665.68,1211.41 1666.26,1215.28 1666.85,1216.01 1667.44,1215.84 1668.02,1215.54 1668.61,1215.22 1669.2,1212.57 1669.78,1210.35 1670.37,1210.37 1670.96,1209.24 1671.54,1210.64 1672.13,1210.89 1672.71,1209.84 1673.3,1211.74 1673.89,1213.21 1674.47,1214.36 1675.06,1215.55 1675.65,1216.59 1676.23,1216.57 1676.82,1213.91 1677.41,1213.94 1677.99,1211.54 1678.58,1211.57 1679.17,1214.02 1679.75,1212.86 1680.34,1212.88 1680.92,1212.93 1681.51,1211.83 1682.1,1211.73 1682.68,1213.15 1683.27,1212.17 1683.86,1211.3 1684.44,1213.17 1685.03,1212.99 1685.62,1215.62 1686.2,1215.34 1686.79,1213.82 1687.37,1212.46 1687.96,1213.83 1688.55,1213.86 1689.13,1213.89 1689.72,1214.1 1690.31,1212.73 1690.89,1214.37 1691.48,1214.22 1692.07,1211.66 1692.65,1211.7 1693.24,1212.04 1693.83,1214.77 1694.41,1213.63 1695,1213.7 1695.58,1212.51 1696.17,1216.36 1696.76,1215.01 1697.34,1214.81 1697.93,1213.76 1698.52,1214.82 1699.1,1217.21 1699.69,1216.62 1700.28,1216.57 1700.86,1220.02 1701.45,1221.19 1702.04,1220.78 1702.62,1219.27 1703.21,1219.06 1703.79,1222.33 1704.38,1223.31 1704.97,1222.66 1705.55,1222.55 1706.14,1222.12 1706.73,1221.62 1707.31,1221.22 1707.9,1218.65 1708.49,1218.58 1709.07,1218.23 1709.66,1215.54 1710.24,1215.47 1710.83,1214.11 1711.42,1215.4 1712,1213.94 1712.59,1211.43 1713.18,1212.55 1713.76,1212.57 1714.35,1217.76 1714.94,1217.46 1715.52,1218.74 1716.11,1219.84 1716.7,1223.44 1717.28,1223.02 1717.87,1222.59 1718.45,1221.21 1719.04,1220.91 1719.63,1220.51 1720.21,1220.19 1720.8,1219.57 1721.39,1217.97 1721.97,1216.78 1722.56,1215.3 1723.15,1215 1723.73,1214.85 1724.32,1213.7 1724.91,1217.64 1725.49,1216.19 1726.08,1216.13 1726.66,1214.91 1727.25,1216.35 1727.84,1217.46 1728.42,1216.1 1729.01,1216.04 1729.6,1218.52 1730.18,1220.83 1730.77,1216.8 1731.36,1215.23 1731.94,1213.73 1732.53,1213.79 1733.11,1214.13 1733.7,1214.16 1734.29,1215.31 1734.87,1214.95 1735.46,1213.66 1736.05,1214.81 1736.63,1214.75 1737.22,1215.76 1737.81,1216.87 1738.39,1211.77 1738.98,1210.54 1739.57,1210.49 1740.15,1212.07 1740.74,1213.49 1741.32,1213.47 1741.91,1212.27 1742.5,1212.52 1743.08,1216.36 1743.67,1212.6 1744.26,1211.5 1744.84,1211.44 1745.43,1215.36 1746.02,1211.48 1746.6,1214.22 1747.19,1214.06 1747.78,1211.68 1748.36,1211.84 1748.95,1210.85 1749.53,1208.52 1750.12,1208.76 1750.71,1210.23 1751.29,1209.2 1751.88,1211.98 1752.47,1214.48 1753.05,1215.72 1753.64,1215.58 1754.23,1214.07 1754.81,1214.18 1755.4,1215.3 1755.99,1212.76 1756.57,1211.57 1757.16,1211.84 1757.74,1213.06 1758.33,1213.14 1758.92,1212.9 1759.5,1217.76 1760.09,1218.87 1760.68,1219.7 1761.26,1218.23 1761.85,1216.71 1762.44,1217.9 1763.02,1217.84 1763.61,1219 1764.19,1216.36 1764.78,1217.54 1765.37,1217.5 1765.95,1217.28 1766.54,1218.13 1767.13,1215.53 1767.71,1214.06 1768.3,1217.63 1768.89,1219.82 1769.47,1222.27 1770.06,1221.74 1770.65,1221.22 1771.23,1219.35 1771.82,1220.01 1772.4,1215.97 1772.99,1218.53 1773.58,1218.4 1774.16,1220.47 1774.75,1220.17 1775.34,1220.98 1775.92,1223.13 1776.51,1222.61 1777.1,1222.03 1777.68,1221.45 1778.27,1219.87 1778.86,1218.07 1779.44,1215.21 1780.03,1213.64 1780.61,1214.61 1781.2,1212.13 1781.79,1213.46 1782.37,1212.28 1782.96,1213.66 1783.55,1212.42 1784.13,1211.19 1784.72,1210.13 1785.31,1212.58 1785.89,1211.35 1786.48,1211.47 1787.06,1211.82 1787.65,1213.1 1788.24,1211.9 1788.82,1212.12 1789.41,1212.38 1790,1213.63 1790.58,1212.19 1791.17,1212.09 1791.76,1211.02 1792.34,1210.06 1792.93,1210.41 1793.52,1210.42 1794.1,1211.64 1794.69,1211.8 1795.27,1209.56 1795.86,1210.94 1796.45,1207.57 1797.03,1205.56 1797.62,1204.5 1798.21,1206.24 1798.79,1206.53 1799.38,1204.55 1799.97,1206.03 1800.55,1208.82 1801.14,1209.01 1801.73,1207.82 1802.31,1208.06 1802.9,1206.09 1803.48,1207.54 1804.07,1208.77 1804.66,1207.74 1805.24,1206.82 1805.83,1205.66 1806.42,1207.18 1807,1206.23 1807.59,1210.55 1808.18,1211.78 1808.76,1211.95 1809.35,1212.06 1809.94,1210.75 1810.52,1213.66 1811.11,1214.98 1811.69,1216.25 1812.28,1217.18 1812.87,1214.78 1813.45,1214.6 1814.04,1214.6 1814.63,1213.5 1815.21,1212.33 1815.8,1212.22 1816.39,1209.72 1816.97,1211.41 1817.56,1211.44 1818.14,1212.89 1818.73,1215.43 1819.32,1217.83 1819.9,1216.64 1820.49,1215.23 1821.08,1212.41 1821.66,1212.43 1822.25,1212.45 1822.84,1209.88 1823.42,1209.01 1824.01,1208.14 1824.6,1208.26 1825.18,1209.48 1825.77,1211.25 1826.35,1210.14 1826.94,1209.29 1827.53,1209.42 1828.11,1212.17 1828.7,1212.43 1829.29,1212.44 1829.87,1211.25 1830.46,1211.51 1831.05,1211.66 1831.63,1209.5 1832.22,1208.46 1832.81,1207.52 1833.39,1208.92 1833.98,1207.95 1834.56,1210.63 1835.15,1210.85 1835.74,1212.43 1836.32,1213.96 1836.91,1214.04 1837.5,1215.45 1838.08,1214.17 1838.67,1214.08 1839.26,1214.2 1839.84,1214.24 1840.43,1214.06 1841.01,1212.81 1841.6,1211.81 1842.19,1210.88 1842.77,1209.93 1843.36,1210.42 1843.95,1210.58 1844.53,1210.66 1845.12,1211.1 1845.71,1212.46 1846.29,1214.05 1846.88,1216.56 1847.47,1218.9 1848.05,1221.02 1848.64,1216.89 1849.22,1216.77 1849.81,1216.64 1850.4,1215.29 1850.98,1217.78 1851.57,1219.82 1852.16,1219.31 1852.74,1218.01 1853.33,1218.78 1853.92,1222.38 1854.5,1220.94 1855.09,1220.29 1855.68,1221.38 1856.26,1220.95 1856.85,1220.73 1857.43,1219.09 1858.02,1221.3 1858.61,1222.43 1859.19,1221.92 1859.78,1225.31 1860.37,1224.71 1860.95,1221.73 1861.54,1219.8 1862.13,1222.3 1862.71,1222.02 1863.3,1220.5 1863.88,1220.31 1864.47,1220.01 1865.06,1219.48 1865.64,1217.77 1866.23,1215.11 1866.82,1216.33 1867.4,1217.34 1867.99,1213.7 1868.58,1211.15 1869.16,1214.94 1869.75,1213.47 1870.34,1214.75 1870.92,1214.75 1871.51,1214.55 1872.09,1214.13 1872.68,1212.84 1873.27,1211.56 1873.85,1207.79 1874.44,1204.43 1875.03,1205.05 1875.61,1206.71 1876.2,1207.26 1876.79,1207.54 1877.37,1209.27 1877.96,1208.24 1878.55,1209.84 1879.13,1211.14 1879.72,1211.54 1880.3,1211.77 1880.89,1209.45 1881.48,1209.74 1882.06,1208.59 1882.65,1207.31 1883.24,1207.55 1883.82,1214.05 1884.41,1212.71 1885,1211.46 1885.58,1211.53 1886.17,1211.73 1886.76,1209.27 1887.34,1210.79 1887.93,1211.02 1888.51,1212.46 1889.1,1212.6 1889.69,1212.72 1890.27,1210.46 1890.86,1211.65 1891.45,1210.77 1892.03,1212.19 1892.62,1212.09 1893.21,1212.46 1893.79,1211.34 1894.38,1211.68 1894.96,1212.05 1895.55,1210.89 1896.14,1212.7 1896.72,1213.96 1897.31,1213.9 1897.9,1217.61 1898.48,1217.38 1899.07,1217.22 1899.66,1215.86 1900.24,1214.52 1900.83,1214.45 1901.42,1211.86 1902,1213.52 1902.59,1212.35 1903.17,1215.21 1903.76,1213.88 1904.35,1214.91 1904.93,1218.53 1905.52,1218.45 1906.11,1218.22 1906.69,1218.12 1907.28,1218.13 1907.87,1216.66 1908.45,1217.75 1909.04,1214.94 1909.63,1213.73 1910.21,1212.69 1910.8,1211.4 1911.38,1212.87 1911.97,1212.8 1912.56,1215.26 1913.14,1213.94 1913.73,1214.16 1914.32,1214.41 1914.9,1212.99 1915.49,1213 1916.08,1211.84 1916.66,1213.07 1917.25,1211.81 1917.83,1211.78 1918.42,1211.94 1919.01,1213.28 1919.59,1211.91 1920.18,1211.97 1920.77,1211.96 1921.35,1211.97 1921.94,1210.87 1922.53,1211.24 1923.11,1214.03 1923.7,1213.83 1924.29,1213.83 1924.87,1216.11 1925.46,1215.95 1926.04,1215.66 1926.63,1215.58 1927.22,1215.55 1927.8,1212.82 1928.39,1212.86 1928.98,1214.25 1929.56,1212.73 1930.15,1210.46 1930.74,1211.47 1931.32,1211.59 1931.91,1212.82 1932.5,1212.93 1933.08,1211.9 1933.67,1210.59 1934.25,1213.31 1934.84,1212.11 1935.43,1213.26 1936.01,1213.23 1936.6,1213.34 1937.19,1215.77 1937.77,1218.19 1938.36,1220.59 1938.95,1217.95 1939.53,1217.88 1940.12,1217.63 1940.71,1219.79 1941.29,1218.13 1941.88,1220.38 1942.46,1220 1943.05,1219.92 1943.64,1219.67 1944.22,1219.56 1944.81,1218.27 1945.4,1218.21 1945.98,1218.02 1946.57,1219.05 1947.16,1218.78 1947.74,1218.51 1948.33,1216.91 1948.91,1215.68 1949.5,1215.72 1950.09,1214.22 1950.67,1213.06 1951.26,1213.09 1951.85,1214.45 1952.43,1215.6 1953.02,1214.36 1953.61,1212.91 1954.19,1214.39 1954.78,1211.62 1955.37,1211.8 1955.95,1211.93 1956.54,1211.87 1957.12,1213.21 1957.71,1212.1 1958.3,1210.88 1958.88,1211.03 1959.47,1209.91 1960.06,1211.22 1960.64,1212.5 1961.23,1208.89 1961.82,1208.08 1962.4,1210.86 1962.99,1214.93 1963.58,1214.87 1964.16,1214.77 1964.75,1212.21 1965.33,1212.42 1965.92,1212.45 1966.51,1214.11 1967.09,1213.87 1967.68,1213.92 1968.27,1210.21 1968.85,1211.64 1969.44,1211.71 1970.03,1211.77 1970.61,1213.27 1971.2,1213.3 1971.78,1211.98 1972.37,1213.41 1972.96,1213.63 1973.54,1217.3 1974.13,1218.37 1974.72,1216.98 1975.3,1215.97 1975.89,1215.86 1976.48,1213.25 1977.06,1215.97 1977.65,1216.04 1978.24,1214.55 1978.82,1215.65 1979.41,1215.72 1979.99,1217.03 1980.58,1216.75 1981.17,1214.08 1981.75,1215.39 1982.34,1213.97 1982.93,1215.51 1983.51,1214.11 1984.1,1217.66 1984.69,1219.86 1985.27,1220.66 1985.86,1216.54 1986.45,1216.29 1987.03,1216.22 1987.62,1216.13 1988.2,1215.64 1988.79,1215.43 1989.38,1215.28 1989.96,1213.96 1990.55,1214 1991.14,1213.85 1991.72,1211.49 1992.31,1211.46 1992.9,1213.7 1993.48,1213.77 1994.07,1216.26 1994.65,1215.1 1995.24,1214.97 1995.83,1216.07 1996.41,1218.44 1997,1215.82 1997.59,1213.04 1998.17,1214.39 1998.76,1212.98 1999.35,1209.13 1999.93,1205.89 2000.52,1202.74 2001.11,1204.76 2001.69,1205.39 2002.28,1206.97 2002.86,1207.19 2003.45,1206.31 2004.04,1207.99 2004.62,1209.66 2005.21,1210 2005.8,1210.24 2006.38,1210.48 2006.97,1211.87 2007.56,1210.84 2008.14,1212.29 2008.73,1211.01 2009.32,1211.19 2009.9,1211.04 2010.49,1212.53 2011.07,1213.84 2011.66,1213.7 2012.25,1216.36 2012.83,1217.42 2013.42,1217.33 2014.01,1215.1 2014.59,1215.12 2015.18,1214.83 2015.77,1218.13 2016.35,1220.5 2016.94,1221.34 2017.53,1217.39 2018.11,1219.67 2018.7,1216.76 2019.28,1216.69 2019.87,1216.41 2020.46,1217.87 2021.04,1221.11 2021.63,1220.55 2022.22,1222.5 2022.8,1223.38 2023.39,1220.43 2023.98,1220.25 2024.56,1218.69 2025.15,1219.48 2025.73,1216.72 2026.32,1217.79 2026.91,1218.85 2027.49,1217.32 2028.08,1216.04 2028.67,1215.98 2029.25,1218.21 2029.84,1217.93 2030.43,1218.75 2031.01,1218.57 2031.6,1218.21 2032.19,1219.28 2032.77,1218.05 2033.36,1216.59 2033.94,1215.31 2034.53,1212.52 2035.12,1213.65 2035.7,1214.83 2036.29,1216.02 2036.88,1215.65 2037.46,1216.77 2038.05,1216.57 2038.64,1215.04 2039.22,1212.44 2039.81,1212.56 2040.4,1211.51 2040.98,1212.66 2041.57,1215.27 2042.15,1213.98 2042.74,1214.06 2043.33,1213.97 2043.91,1212.68 2044.5,1213.94 2045.09,1215.2 2045.67,1220.01 2046.26,1219.66 2046.85,1219.15 2047.43,1219.76 2048.02,1219.54 2048.6,1218.17 2049.19,1220.24 2049.78,1221.19 2050.36,1215.91 2050.95,1215.46 2051.54,1214.16 2052.12,1214.33 2052.71,1214.29 2053.3,1215.72 2053.88,1216.73 2054.47,1216.45 2055.06,1216.38 2055.64,1215.05 2056.23,1219.58 2056.81,1220.42 2057.4,1217.51 2057.99,1216.12 2058.57,1215.97 2059.16,1214.69 2059.75,1213.32 2060.33,1210.75 2060.92,1209.83 2061.51,1210.09 2062.09,1208.97 2062.68,1207.9 2063.27,1206.01 2063.85,1207.48 2064.44,1206.19 2065.02,1206.81 2065.61,1208.51 2066.2,1211.17 2066.78,1212.66 2067.37,1210.3 2067.96,1211.7 2068.54,1210.35 2069.13,1209.47 2069.72,1211.12 2070.3,1211.42 2070.89,1211.69 2071.48,1211.97 2072.06,1212.32 2072.65,1213.87 2073.23,1214.09 2073.82,1213.92 2074.41,1215.06 2074.99,1213.75 2075.58,1213.72 2076.17,1215.15 2076.75,1217.63 2077.34,1218.38 2077.93,1218.1 2078.51,1215.5 2079.1,1214.21 2079.68,1215.4 2080.27,1214.11 2080.86,1214.2 2081.44,1214.11 2082.03,1214.48 2082.62,1215.7 2083.2,1213.22 2083.79,1213.37 2084.38,1212.27 2084.96,1210.91 2085.55,1212.36 2086.14,1209.74 2086.72,1209.71 2087.31,1208.76 2087.89,1208.8 2088.48,1208.81 2089.07,1207.73 2089.65,1209.27 2090.24,1212.43 2090.83,1212.54 2091.41,1214.01 2092,1215.31 2092.59,1217.84 2093.17,1217.44 2093.76,1217.33 2094.35,1218.1 2094.93,1217.84 2095.52,1216.36 2096.1,1214.94 2096.69,1216.1 2097.28,1214.53 2097.86,1215.99 2098.45,1217.21 2099.04,1219.32 2099.62,1219.18 2100.21,1215.25 2100.8,1214.92 2101.38,1218.55 2101.97,1217.17 2102.55,1216.86 2103.14,1216.7 2103.73,1218.92 2104.31,1214.81 2104.9,1214.56 2105.49,1216 2106.07,1215.97 2106.66,1216.94 2107.25,1214.36 2107.83,1216.91 2108.42,1216.81 2109.01,1217.84 2109.59,1218.76 2110.18,1218.4 2110.76,1219.2 2111.35,1217.57 2111.94,1217.45 2112.52,1217.21 2113.11,1217.02 2113.7,1217.88 2114.28,1214 2114.87,1211.39 2115.46,1212.66 2116.04,1210.04 2116.63,1211.4 2117.22,1210.45 2117.8,1213.25 2118.39,1214.75 2118.97,1214.79 2119.56,1217.19 2120.15,1214.45 2120.73,1214.59 2121.32,1214.35 2121.91,1215.29 2122.49,1212.47 2123.08,1212.55 2123.67,1211.85 2124.25,1211.9 2124.84,1212.01 2125.42,1211.98 2126.01,1213.26 2126.6,1212.27 2127.18,1216.01 2127.77,1215.61 2128.36,1213.4 2128.94,1211.3 2129.53,1206.25 2130.12,1204.13 2130.7,1207.27 2131.29,1208.68 2131.88,1206.45 2132.46,1206.68 2133.05,1211.78 2133.63,1211.87 2134.22,1214.31 2134.81,1215.48 2135.39,1216.76 2135.98,1216.59 2136.57,1216.27 2137.15,1214.76 2137.74,1216.09 2138.33,1217.33 2138.91,1214.78 2139.5,1214.88 2140.09,1212.1 2140.67,1212.24 2141.26,1214.86 2141.84,1213.61 2142.43,1211.33 2143.02,1212.9 2143.6,1214.2 2144.19,1214.11 2144.78,1215.57 2145.36,1215.28 2145.95,1213.55 2146.54,1213.59 2147.12,1213.65 2147.71,1211.21 2148.3,1210.14 2148.88,1206.87 2149.47,1208.47 2150.05,1209.88 2150.64,1212.64 2151.23,1215.24 2151.81,1217.45 2152.4,1216.1 2152.99,1215.95 2153.57,1214.48 2154.16,1214.28 2154.75,1214.01 2155.33,1212.87 2155.92,1213.16 2156.5,1212.06 2157.09,1212.1 2157.68,1211.17 2158.26,1212.78 \"/>\n<path clip-path=\"url(#clip002)\" d=\"M986.025 1214.38 L986.612 1214.38 L987.198 1214.38 L987.785 1214.38 L988.371 1214.38 L988.957 1214.38 L989.544 1214.38 L990.13 1214.38 L990.717 1214.38 L991.303 1214.38 L991.889 1214.38 L992.476 1214.38 L993.062 1214.38 L993.649 1214.38 L994.235 1214.38 L994.822 1214.38 L995.408 1214.38 L995.994 1214.38 L996.581 1214.38 L997.167 1214.38 L997.754 1214.38 L998.34 1214.38 L998.926 1214.38 L999.513 1214.38 L1000.1 1214.38 L1000.69 1214.38 L1001.27 1214.38 L1001.86 1214.38 L1002.44 1214.38 L1003.03 1214.38 L1003.62 1214.38 L1004.2 1214.38 L1004.79 1214.38 L1005.38 1214.38 L1005.96 1214.38 L1006.55 1214.38 L1007.14 1214.38 L1007.72 1214.38 L1008.31 1214.38 L1008.9 1214.38 L1009.48 1214.38 L1010.07 1214.38 L1010.65 1214.38 L1011.24 1214.38 L1011.83 1214.38 L1012.41 1214.38 L1013 1214.38 L1013.59 1214.38 L1014.17 1214.38 L1014.76 1214.38 L1015.35 1214.38 L1015.93 1214.38 L1016.52 1214.38 L1017.11 1214.38 L1017.69 1214.38 L1018.28 1214.38 L1018.86 1214.38 L1019.45 1214.38 L1020.04 1214.38 L1020.62 1214.38 L1021.21 1214.38 L1021.8 1214.38 L1022.38 1214.38 L1022.97 1214.38 L1023.56 1214.38 L1024.14 1214.38 L1024.73 1214.38 L1025.32 1214.38 L1025.9 1214.38 L1026.49 1214.38 L1027.07 1214.38 L1027.66 1214.38 L1028.25 1214.38 L1028.83 1214.38 L1029.42 1214.38 L1030.01 1214.38 L1030.59 1214.38 L1031.18 1214.38 L1031.77 1214.38 L1032.35 1214.38 L1032.94 1214.38 L1033.52 1214.38 L1034.11 1214.38 L1034.7 1214.38 L1035.28 1214.38 L1035.87 1214.38 L1036.46 1214.38 L1037.04 1214.38 L1037.63 1214.38 L1038.22 1214.38 L1038.8 1214.38 L1039.39 1214.38 L1039.98 1214.38 L1040.56 1214.38 L1041.15 1214.38 L1041.73 1214.38 L1042.32 1214.38 L1042.91 1214.38 L1043.49 1214.38 L1044.08 1214.38 L1044.67 1214.38 L1045.25 1214.38 L1045.84 1214.38 L1046.43 1214.38 L1047.01 1214.38 L1047.6 1214.38 L1048.19 1214.38 L1048.77 1214.38 L1049.36 1214.38 L1049.94 1214.38 L1050.53 1214.38 L1051.12 1214.38 L1051.7 1214.38 L1052.29 1214.38 L1052.88 1214.38 L1053.46 1214.38 L1054.05 1214.38 L1054.64 1214.38 L1055.22 1214.38 L1055.81 1214.38 L1056.39 1214.38 L1056.98 1214.38 L1057.57 1214.38 L1058.15 1214.38 L1058.74 1214.38 L1059.33 1214.38 L1059.91 1214.38 L1060.5 1214.38 L1061.09 1214.38 L1061.67 1214.38 L1062.26 1214.38 L1062.85 1214.38 L1063.43 1214.38 L1064.02 1214.38 L1064.6 1214.38 L1065.19 1214.38 L1065.78 1214.38 L1066.36 1214.38 L1066.95 1214.38 L1067.54 1214.38 L1068.12 1214.38 L1068.71 1214.38 L1069.3 1214.38 L1069.88 1214.38 L1070.47 1214.38 L1071.06 1214.38 L1071.64 1214.38 L1072.23 1214.38 L1072.81 1214.38 L1073.4 1214.38 L1073.99 1214.38 L1074.57 1214.38 L1075.16 1214.38 L1075.75 1214.38 L1076.33 1214.38 L1076.92 1214.38 L1077.51 1214.38 L1078.09 1214.38 L1078.68 1214.38 L1079.26 1214.38 L1079.85 1214.38 L1080.44 1214.38 L1081.02 1214.38 L1081.61 1214.38 L1082.2 1214.38 L1082.78 1214.38 L1083.37 1214.38 L1083.96 1214.38 L1084.54 1214.38 L1085.13 1214.38 L1085.72 1214.38 L1086.3 1214.38 L1086.89 1214.38 L1087.47 1214.38 L1088.06 1214.38 L1088.65 1214.38 L1089.23 1214.38 L1089.82 1214.38 L1090.41 1214.38 L1090.99 1214.38 L1091.58 1214.38 L1092.17 1214.38 L1092.75 1214.38 L1093.34 1214.38 L1093.93 1214.38 L1094.51 1214.38 L1095.1 1214.38 L1095.68 1214.38 L1096.27 1214.38 L1096.86 1214.38 L1097.44 1214.38 L1098.03 1214.38 L1098.62 1214.38 L1099.2 1214.38 L1099.79 1214.38 L1100.38 1214.38 L1100.96 1214.38 L1101.55 1214.38 L1102.14 1214.38 L1102.72 1214.38 L1103.31 1214.38 L1103.89 1214.38 L1104.48 1214.38 L1105.07 1214.38 L1105.65 1214.38 L1106.24 1214.38 L1106.83 1214.38 L1107.41 1214.38 L1108 1214.38 L1108.59 1214.38 L1109.17 1214.38 L1109.76 1214.38 L1110.34 1214.38 L1110.93 1214.38 L1111.52 1214.38 L1112.1 1214.38 L1112.69 1214.38 L1113.28 1214.38 L1113.86 1214.38 L1114.45 1214.38 L1115.04 1214.38 L1115.62 1214.38 L1116.21 1214.38 L1116.8 1214.38 L1117.38 1214.38 L1117.97 1214.38 L1118.55 1214.38 L1119.14 1214.38 L1119.73 1214.38 L1120.31 1214.38 L1120.9 1214.38 L1121.49 1214.38 L1122.07 1214.38 L1122.66 1214.38 L1123.25 1214.38 L1123.83 1214.38 L1124.42 1214.38 L1125.01 1214.38 L1125.59 1214.38 L1126.18 1214.38 L1126.76 1214.38 L1127.35 1214.38 L1127.94 1214.38 L1128.52 1214.38 L1129.11 1214.38 L1129.7 1214.38 L1130.28 1214.38 L1130.87 1214.38 L1131.46 1214.38 L1132.04 1214.38 L1132.63 1214.38 L1133.21 1214.38 L1133.8 1214.38 L1134.39 1214.38 L1134.97 1214.38 L1135.56 1214.38 L1136.15 1214.38 L1136.73 1214.38 L1137.32 1214.38 L1137.91 1214.38 L1138.49 1214.38 L1139.08 1214.38 L1139.67 1214.38 L1140.25 1214.38 L1140.84 1214.38 L1141.42 1214.38 L1142.01 1214.38 L1142.6 1214.38 L1143.18 1214.38 L1143.77 1214.38 L1144.36 1214.38 L1144.94 1214.38 L1145.53 1214.38 L1146.12 1214.38 L1146.7 1214.38 L1147.29 1214.38 L1147.88 1214.38 L1148.46 1214.38 L1149.05 1214.38 L1149.63 1214.38 L1150.22 1214.38 L1150.81 1214.38 L1151.39 1214.38 L1151.98 1214.38 L1152.57 1214.38 L1153.15 1214.38 L1153.74 1214.38 L1154.33 1214.38 L1154.91 1214.38 L1155.5 1214.38 L1156.09 1214.38 L1156.67 1214.38 L1157.26 1214.38 L1157.84 1214.38 L1158.43 1214.38 L1159.02 1214.38 L1159.6 1214.38 L1160.19 1214.38 L1160.78 1214.38 L1161.36 1214.38 L1161.95 1214.38 L1162.54 1214.38 L1163.12 1214.38 L1163.71 1214.38 L1164.29 1214.38 L1164.88 1214.38 L1165.47 1214.38 L1166.05 1214.38 L1166.64 1214.38 L1167.23 1214.38 L1167.81 1214.38 L1168.4 1214.38 L1168.99 1214.38 L1169.57 1214.38 L1170.16 1214.38 L1170.75 1214.38 L1171.33 1214.38 L1171.92 1214.38 L1172.5 1214.38 L1173.09 1214.38 L1173.68 1214.38 L1174.26 1214.38 L1174.85 1214.38 L1175.44 1214.38 L1176.02 1214.38 L1176.61 1214.38 L1177.2 1214.38 L1177.78 1214.38 L1178.37 1214.38 L1178.96 1214.38 L1179.54 1214.38 L1180.13 1214.38 L1180.71 1214.38 L1181.3 1214.38 L1181.89 1214.38 L1182.47 1214.38 L1183.06 1214.38 L1183.65 1214.38 L1184.23 1214.38 L1184.82 1214.38 L1185.41 1214.38 L1185.99 1214.38 L1186.58 1214.38 L1187.16 1214.38 L1187.75 1214.38 L1188.34 1214.38 L1188.92 1214.38 L1189.51 1214.38 L1190.1 1214.38 L1190.68 1214.38 L1191.27 1214.38 L1191.86 1214.38 L1192.44 1214.38 L1193.03 1214.38 L1193.62 1214.38 L1194.2 1214.38 L1194.79 1214.38 L1195.37 1214.38 L1195.96 1214.38 L1196.55 1214.38 L1197.13 1214.38 L1197.72 1214.38 L1198.31 1214.38 L1198.89 1214.38 L1199.48 1214.38 L1200.07 1214.38 L1200.65 1214.38 L1201.24 1214.38 L1201.83 1214.38 L1202.41 1214.38 L1203 1214.38 L1203.58 1214.38 L1204.17 1214.38 L1204.76 1214.38 L1205.34 1214.38 L1205.93 1214.38 L1206.52 1214.38 L1207.1 1214.38 L1207.69 1214.38 L1208.28 1214.38 L1208.86 1214.38 L1209.45 1214.38 L1210.03 1214.38 L1210.62 1214.38 L1211.21 1214.38 L1211.79 1214.38 L1212.38 1214.38 L1212.97 1214.38 L1213.55 1214.38 L1214.14 1214.38 L1214.73 1214.38 L1215.31 1214.38 L1215.9 1214.38 L1216.49 1214.38 L1217.07 1214.38 L1217.66 1214.38 L1218.24 1214.38 L1218.83 1214.38 L1219.42 1214.38 L1220 1214.38 L1220.59 1214.38 L1221.18 1214.38 L1221.76 1214.38 L1222.35 1214.38 L1222.94 1214.38 L1223.52 1214.38 L1224.11 1214.38 L1224.7 1214.38 L1225.28 1214.38 L1225.87 1214.38 L1226.45 1214.38 L1227.04 1214.38 L1227.63 1214.38 L1228.21 1214.38 L1228.8 1214.38 L1229.39 1214.38 L1229.97 1214.38 L1230.56 1214.38 L1231.15 1214.38 L1231.73 1214.38 L1232.32 1214.38 L1232.91 1214.38 L1233.49 1214.38 L1234.08 1214.38 L1234.66 1214.38 L1235.25 1214.38 L1235.84 1214.38 L1236.42 1214.38 L1237.01 1214.38 L1237.6 1214.38 L1238.18 1214.38 L1238.77 1214.38 L1239.36 1214.38 L1239.94 1214.38 L1240.53 1214.38 L1241.11 1214.38 L1241.7 1214.38 L1242.29 1214.38 L1242.87 1214.38 L1243.46 1214.38 L1244.05 1214.38 L1244.63 1214.38 L1245.22 1214.38 L1245.81 1214.38 L1246.39 1214.38 L1246.98 1214.38 L1247.57 1214.38 L1248.15 1214.38 L1248.74 1214.38 L1249.32 1214.38 L1249.91 1214.38 L1250.5 1214.38 L1251.08 1214.38 L1251.67 1214.38 L1252.26 1214.38 L1252.84 1214.38 L1253.43 1214.38 L1254.02 1214.38 L1254.6 1214.38 L1255.19 1214.38 L1255.78 1214.38 L1256.36 1214.38 L1256.95 1214.38 L1257.53 1214.38 L1258.12 1214.38 L1258.71 1214.38 L1259.29 1214.38 L1259.88 1214.38 L1260.47 1214.38 L1261.05 1214.38 L1261.64 1214.38 L1262.23 1214.38 L1262.81 1214.38 L1263.4 1214.38 L1263.98 1214.38 L1264.57 1214.38 L1265.16 1214.38 L1265.74 1214.38 L1266.33 1214.38 L1266.92 1214.38 L1267.5 1214.38 L1268.09 1214.38 L1268.68 1214.38 L1269.26 1214.38 L1269.85 1214.38 L1270.44 1214.38 L1271.02 1214.38 L1271.61 1214.38 L1272.19 1214.38 L1272.78 1214.38 L1273.37 1214.38 L1273.95 1214.38 L1274.54 1214.38 L1275.13 1214.38 L1275.71 1214.38 L1276.3 1214.38 L1276.89 1214.38 L1277.47 1214.38 L1278.06 1214.38 L1278.65 1214.38 L1279.23 1214.38 L1279.82 1214.38 L1280.4 1214.38 L1280.99 1214.38 L1281.58 1214.38 L1282.16 1214.38 L1282.75 1214.38 L1283.34 1214.38 L1283.92 1214.38 L1284.51 1214.38 L1285.1 1214.38 L1285.68 1214.38 L1286.27 1214.38 L1286.86 1214.38 L1287.44 1214.38 L1288.03 1214.38 L1288.61 1214.38 L1289.2 1214.38 L1289.79 1214.38 L1290.37 1214.38 L1290.96 1214.38 L1291.55 1214.38 L1292.13 1214.38 L1292.72 1214.38 L1293.31 1214.38 L1293.89 1214.38 L1294.48 1214.38 L1295.06 1214.38 L1295.65 1214.38 L1296.24 1214.38 L1296.82 1214.38 L1297.41 1214.38 L1298 1214.38 L1298.58 1214.38 L1299.17 1214.38 L1299.76 1214.38 L1300.34 1214.38 L1300.93 1214.38 L1301.52 1214.38 L1302.1 1214.38 L1302.69 1214.38 L1303.27 1214.38 L1303.86 1214.38 L1304.45 1214.38 L1305.03 1214.38 L1305.62 1214.38 L1306.21 1214.38 L1306.79 1214.38 L1307.38 1214.38 L1307.97 1214.38 L1308.55 1214.38 L1309.14 1214.38 L1309.73 1214.38 L1310.31 1214.38 L1310.9 1214.38 L1311.48 1214.38 L1312.07 1214.38 L1312.66 1214.38 L1313.24 1214.38 L1313.83 1214.38 L1314.42 1214.38 L1315 1214.38 L1315.59 1214.38 L1316.18 1214.38 L1316.76 1214.38 L1317.35 1214.38 L1317.93 1214.38 L1318.52 1214.38 L1319.11 1214.38 L1319.69 1214.38 L1320.28 1214.38 L1320.87 1214.38 L1321.45 1214.38 L1322.04 1214.38 L1322.63 1214.38 L1323.21 1214.38 L1323.8 1214.38 L1324.39 1214.38 L1324.97 1214.38 L1325.56 1214.38 L1326.14 1214.38 L1326.73 1214.38 L1327.32 1214.38 L1327.9 1214.38 L1328.49 1214.38 L1329.08 1214.38 L1329.66 1214.38 L1330.25 1214.38 L1330.84 1214.38 L1331.42 1214.38 L1332.01 1214.38 L1332.6 1214.38 L1333.18 1214.38 L1333.77 1214.38 L1334.35 1214.38 L1334.94 1214.38 L1335.53 1214.38 L1336.11 1214.38 L1336.7 1214.38 L1337.29 1214.38 L1337.87 1214.38 L1338.46 1214.38 L1339.05 1214.38 L1339.63 1214.38 L1340.22 1214.38 L1340.8 1214.38 L1341.39 1214.38 L1341.98 1214.38 L1342.56 1214.38 L1343.15 1214.38 L1343.74 1214.38 L1344.32 1214.38 L1344.91 1214.38 L1345.5 1214.38 L1346.08 1214.38 L1346.67 1214.38 L1347.26 1214.38 L1347.84 1214.38 L1348.43 1214.38 L1349.01 1214.38 L1349.6 1214.38 L1350.19 1214.38 L1350.77 1214.38 L1351.36 1214.38 L1351.95 1214.38 L1352.53 1214.38 L1353.12 1214.38 L1353.71 1214.38 L1354.29 1214.38 L1354.88 1214.38 L1355.47 1214.38 L1356.05 1214.38 L1356.64 1214.38 L1357.22 1214.38 L1357.81 1214.38 L1358.4 1214.38 L1358.98 1214.38 L1359.57 1214.38 L1360.16 1214.38 L1360.74 1214.38 L1361.33 1214.38 L1361.92 1214.38 L1362.5 1214.38 L1363.09 1214.38 L1363.68 1214.38 L1364.26 1214.38 L1364.85 1214.38 L1365.43 1214.38 L1366.02 1214.38 L1366.61 1214.38 L1367.19 1214.38 L1367.78 1214.38 L1368.37 1214.38 L1368.95 1214.38 L1369.54 1214.38 L1370.13 1214.38 L1370.71 1214.38 L1371.3 1214.38 L1371.88 1214.38 L1372.47 1214.38 L1373.06 1214.38 L1373.64 1214.38 L1374.23 1214.38 L1374.82 1214.38 L1375.4 1214.38 L1375.99 1214.38 L1376.58 1214.38 L1377.16 1214.38 L1377.75 1214.38 L1378.34 1214.38 L1378.92 1214.38 L1379.51 1214.38 L1380.09 1214.38 L1380.68 1214.38 L1381.27 1214.38 L1381.85 1214.38 L1382.44 1214.38 L1383.03 1214.38 L1383.61 1214.38 L1384.2 1214.38 L1384.79 1214.38 L1385.37 1214.38 L1385.96 1214.38 L1386.55 1214.38 L1387.13 1214.38 L1387.72 1214.38 L1388.3 1214.38 L1388.89 1214.38 L1389.48 1214.38 L1390.06 1214.38 L1390.65 1214.38 L1391.24 1214.38 L1391.82 1214.38 L1392.41 1214.38 L1393 1214.38 L1393.58 1214.38 L1394.17 1214.38 L1394.75 1214.38 L1395.34 1214.38 L1395.93 1214.38 L1396.51 1214.38 L1397.1 1214.38 L1397.69 1214.38 L1398.27 1214.38 L1398.86 1214.38 L1399.45 1214.38 L1400.03 1214.38 L1400.62 1214.38 L1401.21 1214.38 L1401.79 1214.38 L1402.38 1214.38 L1402.96 1214.38 L1403.55 1214.38 L1404.14 1214.38 L1404.72 1214.38 L1405.31 1214.38 L1405.9 1214.38 L1406.48 1214.38 L1407.07 1214.38 L1407.66 1214.38 L1408.24 1214.38 L1408.83 1214.38 L1409.42 1214.38 L1410 1214.38 L1410.59 1214.38 L1411.17 1214.38 L1411.76 1214.38 L1412.35 1214.38 L1412.93 1214.38 L1413.52 1214.38 L1414.11 1214.38 L1414.69 1214.38 L1415.28 1214.38 L1415.87 1214.38 L1416.45 1214.38 L1417.04 1214.38 L1417.63 1214.38 L1418.21 1214.38 L1418.8 1214.38 L1419.38 1214.38 L1419.97 1214.38 L1420.56 1214.38 L1421.14 1214.38 L1421.73 1214.38 L1422.32 1214.38 L1422.9 1214.38 L1423.49 1214.38 L1424.08 1214.38 L1424.66 1214.38 L1425.25 1214.38 L1425.83 1214.38 L1426.42 1214.38 L1427.01 1214.38 L1427.59 1214.38 L1428.18 1214.38 L1428.77 1214.38 L1429.35 1214.38 L1429.94 1214.38 L1430.53 1214.38 L1431.11 1214.38 L1431.7 1214.38 L1432.29 1214.38 L1432.87 1214.38 L1433.46 1214.38 L1434.04 1214.38 L1434.63 1214.38 L1435.22 1214.38 L1435.8 1214.38 L1436.39 1214.38 L1436.98 1214.38 L1437.56 1214.38 L1438.15 1214.38 L1438.74 1214.38 L1439.32 1214.38 L1439.91 1214.38 L1440.5 1214.38 L1441.08 1214.38 L1441.67 1214.38 L1442.25 1214.38 L1442.84 1214.38 L1443.43 1214.38 L1444.01 1214.38 L1444.6 1214.38 L1445.19 1214.38 L1445.77 1214.38 L1446.36 1214.38 L1446.95 1214.38 L1447.53 1214.38 L1448.12 1214.38 L1448.7 1214.38 L1449.29 1214.38 L1449.88 1214.38 L1450.46 1214.38 L1451.05 1214.38 L1451.64 1214.38 L1452.22 1214.38 L1452.81 1214.38 L1453.4 1214.38 L1453.98 1214.38 L1454.57 1214.38 L1455.16 1214.38 L1455.74 1214.38 L1456.33 1214.38 L1456.91 1214.38 L1457.5 1214.38 L1458.09 1214.38 L1458.67 1214.38 L1459.26 1214.38 L1459.85 1214.38 L1460.43 1214.38 L1461.02 1214.38 L1461.61 1214.38 L1462.19 1214.38 L1462.78 1214.38 L1463.37 1214.38 L1463.95 1214.38 L1464.54 1214.38 L1465.12 1214.38 L1465.71 1214.38 L1466.3 1214.38 L1466.88 1214.38 L1467.47 1214.38 L1468.06 1214.38 L1468.64 1214.38 L1469.23 1214.38 L1469.82 1214.38 L1470.4 1214.38 L1470.99 1214.38 L1471.57 1214.38 L1472.16 1214.38 L1472.75 1214.38 L1473.33 1214.38 L1473.92 1214.38 L1474.51 1214.38 L1475.09 1214.38 L1475.68 1214.38 L1476.27 1214.38 L1476.85 1214.38 L1477.44 1214.38 L1478.03 1214.38 L1478.61 1214.38 L1479.2 1214.38 L1479.78 1214.38 L1480.37 1214.38 L1480.96 1214.38 L1481.54 1214.38 L1482.13 1214.38 L1482.72 1214.38 L1483.3 1214.38 L1483.89 1214.38 L1484.48 1214.38 L1485.06 1214.38 L1485.65 1214.38 L1486.24 1214.38 L1486.82 1214.38 L1487.41 1214.38 L1487.99 1214.38 L1488.58 1214.38 L1489.17 1214.38 L1489.75 1214.38 L1490.34 1214.38 L1490.93 1214.38 L1491.51 1214.38 L1492.1 1214.38 L1492.69 1214.38 L1493.27 1214.38 L1493.86 1214.38 L1494.45 1214.38 L1495.03 1214.38 L1495.62 1214.38 L1496.2 1214.38 L1496.79 1214.38 L1497.38 1214.38 L1497.96 1214.38 L1498.55 1214.38 L1499.14 1214.38 L1499.72 1214.38 L1500.31 1214.38 L1500.9 1214.38 L1501.48 1214.38 L1502.07 1214.38 L1502.65 1214.38 L1503.24 1214.38 L1503.83 1214.38 L1504.41 1214.38 L1505 1214.38 L1505.59 1214.38 L1506.17 1214.38 L1506.76 1214.38 L1507.35 1214.38 L1507.93 1214.38 L1508.52 1214.38 L1509.11 1214.38 L1509.69 1214.38 L1510.28 1214.38 L1510.86 1214.38 L1511.45 1214.38 L1512.04 1214.38 L1512.62 1214.38 L1513.21 1214.38 L1513.8 1214.38 L1514.38 1214.38 L1514.97 1214.38 L1515.56 1214.38 L1516.14 1214.38 L1516.73 1214.38 L1517.32 1214.38 L1517.9 1214.38 L1518.49 1214.38 L1519.07 1214.38 L1519.66 1214.38 L1520.25 1214.38 L1520.83 1214.38 L1521.42 1214.38 L1522.01 1214.38 L1522.59 1214.38 L1523.18 1214.38 L1523.77 1214.38 L1524.35 1214.38 L1524.94 1214.38 L1525.52 1214.38 L1526.11 1214.38 L1526.7 1214.38 L1527.28 1214.38 L1527.87 1214.38 L1528.46 1214.38 L1529.04 1214.38 L1529.63 1214.38 L1530.22 1214.38 L1530.8 1214.38 L1531.39 1214.38 L1531.98 1214.38 L1532.56 1214.38 L1533.15 1214.38 L1533.73 1214.38 L1534.32 1214.38 L1534.91 1214.38 L1535.49 1214.38 L1536.08 1214.38 L1536.67 1214.38 L1537.25 1214.38 L1537.84 1214.38 L1538.43 1214.38 L1539.01 1214.38 L1539.6 1214.38 L1540.19 1214.38 L1540.77 1214.38 L1541.36 1214.38 L1541.94 1214.38 L1542.53 1214.38 L1543.12 1214.38 L1543.7 1214.38 L1544.29 1214.38 L1544.88 1214.38 L1545.46 1214.38 L1546.05 1214.38 L1546.64 1214.38 L1547.22 1214.38 L1547.81 1214.38 L1548.4 1214.38 L1548.98 1214.38 L1549.57 1214.38 L1550.15 1214.38 L1550.74 1214.38 L1551.33 1214.38 L1551.91 1214.38 L1552.5 1214.38 L1553.09 1214.38 L1553.67 1214.38 L1554.26 1214.38 L1554.85 1214.38 L1555.43 1214.38 L1556.02 1214.38 L1556.6 1214.38 L1557.19 1214.38 L1557.78 1214.38 L1558.36 1214.38 L1558.95 1214.38 L1559.54 1214.38 L1560.12 1214.38 L1560.71 1214.38 L1561.3 1214.38 L1561.88 1214.38 L1562.47 1214.38 L1563.06 1214.38 L1563.64 1214.38 L1564.23 1214.38 L1564.81 1214.38 L1565.4 1214.38 L1565.99 1214.38 L1566.57 1214.38 L1567.16 1214.38 L1567.75 1214.38 L1568.33 1214.38 L1568.92 1214.38 L1569.51 1214.38 L1570.09 1214.38 L1570.68 1214.38 L1571.27 1214.38 L1571.85 1214.38 L1572.44 1214.38 L1573.02 1214.38 L1573.61 1214.38 L1574.2 1214.38 L1574.78 1214.38 L1575.37 1214.38 L1575.96 1214.38 L1576.54 1214.38 L1577.13 1214.38 L1577.72 1214.38 L1578.3 1214.38 L1578.89 1214.38 L1579.47 1214.38 L1580.06 1214.38 L1580.65 1214.38 L1581.23 1214.38 L1581.82 1214.38 L1582.41 1214.38 L1582.99 1214.38 L1583.58 1214.38 L1584.17 1214.38 L1584.75 1214.38 L1585.34 1214.38 L1585.93 1214.38 L1586.51 1214.38 L1587.1 1214.38 L1587.68 1214.38 L1588.27 1214.38 L1588.86 1214.38 L1589.44 1214.38 L1590.03 1214.38 L1590.62 1214.38 L1591.2 1214.38 L1591.79 1214.38 L1592.38 1214.38 L1592.96 1214.38 L1593.55 1214.38 L1594.14 1214.38 L1594.72 1214.38 L1595.31 1214.38 L1595.89 1214.38 L1596.48 1214.38 L1597.07 1214.38 L1597.65 1214.38 L1598.24 1214.38 L1598.83 1214.38 L1599.41 1214.38 L1600 1214.38 L1600.59 1214.38 L1601.17 1214.38 L1601.76 1214.38 L1602.34 1214.38 L1602.93 1214.38 L1603.52 1214.38 L1604.1 1214.38 L1604.69 1214.38 L1605.28 1214.38 L1605.86 1214.38 L1606.45 1214.38 L1607.04 1214.38 L1607.62 1214.38 L1608.21 1214.38 L1608.8 1214.38 L1609.38 1214.38 L1609.97 1214.38 L1610.55 1214.38 L1611.14 1214.38 L1611.73 1214.38 L1612.31 1214.38 L1612.9 1214.38 L1613.49 1214.38 L1614.07 1214.38 L1614.66 1214.38 L1615.25 1214.38 L1615.83 1214.38 L1616.42 1214.38 L1617.01 1214.38 L1617.59 1214.38 L1618.18 1214.38 L1618.76 1214.38 L1619.35 1214.38 L1619.94 1214.38 L1620.52 1214.38 L1621.11 1214.38 L1621.7 1214.38 L1622.28 1214.38 L1622.87 1214.38 L1623.46 1214.38 L1624.04 1214.38 L1624.63 1214.38 L1625.22 1214.38 L1625.8 1214.38 L1626.39 1214.38 L1626.97 1214.38 L1627.56 1214.38 L1628.15 1214.38 L1628.73 1214.38 L1629.32 1214.38 L1629.91 1214.38 L1630.49 1214.38 L1631.08 1214.38 L1631.67 1214.38 L1632.25 1214.38 L1632.84 1214.38 L1633.42 1214.38 L1634.01 1214.38 L1634.6 1214.38 L1635.18 1214.38 L1635.77 1214.38 L1636.36 1214.38 L1636.94 1214.38 L1637.53 1214.38 L1638.12 1214.38 L1638.7 1214.38 L1639.29 1214.38 L1639.88 1214.38 L1640.46 1214.38 L1641.05 1214.38 L1641.63 1214.38 L1642.22 1214.38 L1642.81 1214.38 L1643.39 1214.38 L1643.98 1214.38 L1644.57 1214.38 L1645.15 1214.38 L1645.74 1214.38 L1646.33 1214.38 L1646.91 1214.38 L1647.5 1214.38 L1648.09 1214.38 L1648.67 1214.38 L1649.26 1214.38 L1649.84 1214.38 L1650.43 1214.38 L1651.02 1214.38 L1651.6 1214.38 L1652.19 1214.38 L1652.78 1214.38 L1653.36 1214.38 L1653.95 1214.38 L1654.54 1214.38 L1655.12 1214.38 L1655.71 1214.38 L1656.29 1214.38 L1656.88 1214.38 L1657.47 1214.38 L1658.05 1214.38 L1658.64 1214.38 L1659.23 1214.38 L1659.81 1214.38 L1660.4 1214.38 L1660.99 1214.38 L1661.57 1214.38 L1662.16 1214.38 L1662.75 1214.38 L1663.33 1214.38 L1663.92 1214.38 L1664.5 1214.38 L1665.09 1214.38 L1665.68 1214.38 L1666.26 1214.38 L1666.85 1214.38 L1667.44 1214.38 L1668.02 1214.38 L1668.61 1214.38 L1669.2 1214.38 L1669.78 1214.38 L1670.37 1214.38 L1670.96 1214.38 L1671.54 1214.38 L1672.13 1214.38 L1672.71 1214.38 L1673.3 1214.38 L1673.89 1214.38 L1674.47 1214.38 L1675.06 1214.38 L1675.65 1214.38 L1676.23 1214.38 L1676.82 1214.38 L1677.41 1214.38 L1677.99 1214.38 L1678.58 1214.38 L1679.17 1214.38 L1679.75 1214.38 L1680.34 1214.38 L1680.92 1214.38 L1681.51 1214.38 L1682.1 1214.38 L1682.68 1214.38 L1683.27 1214.38 L1683.86 1214.38 L1684.44 1214.38 L1685.03 1214.38 L1685.62 1214.38 L1686.2 1214.38 L1686.79 1214.38 L1687.37 1214.38 L1687.96 1214.38 L1688.55 1214.38 L1689.13 1214.38 L1689.72 1214.38 L1690.31 1214.38 L1690.89 1214.38 L1691.48 1214.38 L1692.07 1214.38 L1692.65 1214.38 L1693.24 1214.38 L1693.83 1214.38 L1694.41 1214.38 L1695 1214.38 L1695.58 1214.38 L1696.17 1214.38 L1696.76 1214.38 L1697.34 1214.38 L1697.93 1214.38 L1698.52 1214.38 L1699.1 1214.38 L1699.69 1214.38 L1700.28 1214.38 L1700.86 1214.38 L1701.45 1214.38 L1702.04 1214.38 L1702.62 1214.38 L1703.21 1214.38 L1703.79 1214.38 L1704.38 1214.38 L1704.97 1214.38 L1705.55 1214.38 L1706.14 1214.38 L1706.73 1214.38 L1707.31 1214.38 L1707.9 1214.38 L1708.49 1214.38 L1709.07 1214.38 L1709.66 1214.38 L1710.24 1214.38 L1710.83 1214.38 L1711.42 1214.38 L1712 1214.38 L1712.59 1214.38 L1713.18 1214.38 L1713.76 1214.38 L1714.35 1214.38 L1714.94 1214.38 L1715.52 1214.38 L1716.11 1214.38 L1716.7 1214.38 L1717.28 1214.38 L1717.87 1214.38 L1718.45 1214.38 L1719.04 1214.38 L1719.63 1214.38 L1720.21 1214.38 L1720.8 1214.38 L1721.39 1214.38 L1721.97 1214.38 L1722.56 1214.38 L1723.15 1214.38 L1723.73 1214.38 L1724.32 1214.38 L1724.91 1214.38 L1725.49 1214.38 L1726.08 1214.38 L1726.66 1214.38 L1727.25 1214.38 L1727.84 1214.38 L1728.42 1214.38 L1729.01 1214.38 L1729.6 1214.38 L1730.18 1214.38 L1730.77 1214.38 L1731.36 1214.38 L1731.94 1214.38 L1732.53 1214.38 L1733.11 1214.38 L1733.7 1214.38 L1734.29 1214.38 L1734.87 1214.38 L1735.46 1214.38 L1736.05 1214.38 L1736.63 1214.38 L1737.22 1214.38 L1737.81 1214.38 L1738.39 1214.38 L1738.98 1214.38 L1739.57 1214.38 L1740.15 1214.38 L1740.74 1214.38 L1741.32 1214.38 L1741.91 1214.38 L1742.5 1214.38 L1743.08 1214.38 L1743.67 1214.38 L1744.26 1214.38 L1744.84 1214.38 L1745.43 1214.38 L1746.02 1214.38 L1746.6 1214.38 L1747.19 1214.38 L1747.78 1214.38 L1748.36 1214.38 L1748.95 1214.38 L1749.53 1214.38 L1750.12 1214.38 L1750.71 1214.38 L1751.29 1214.38 L1751.88 1214.38 L1752.47 1214.38 L1753.05 1214.38 L1753.64 1214.38 L1754.23 1214.38 L1754.81 1214.38 L1755.4 1214.38 L1755.99 1214.38 L1756.57 1214.38 L1757.16 1214.38 L1757.74 1214.38 L1758.33 1214.38 L1758.92 1214.38 L1759.5 1214.38 L1760.09 1214.38 L1760.68 1214.38 L1761.26 1214.38 L1761.85 1214.38 L1762.44 1214.38 L1763.02 1214.38 L1763.61 1214.38 L1764.19 1214.38 L1764.78 1214.38 L1765.37 1214.38 L1765.95 1214.38 L1766.54 1214.38 L1767.13 1214.38 L1767.71 1214.38 L1768.3 1214.38 L1768.89 1214.38 L1769.47 1214.38 L1770.06 1214.38 L1770.65 1214.38 L1771.23 1214.38 L1771.82 1214.38 L1772.4 1214.38 L1772.99 1214.38 L1773.58 1214.38 L1774.16 1214.38 L1774.75 1214.38 L1775.34 1214.38 L1775.92 1214.38 L1776.51 1214.38 L1777.1 1214.38 L1777.68 1214.38 L1778.27 1214.38 L1778.86 1214.38 L1779.44 1214.38 L1780.03 1214.38 L1780.61 1214.38 L1781.2 1214.38 L1781.79 1214.38 L1782.37 1214.38 L1782.96 1214.38 L1783.55 1214.38 L1784.13 1214.38 L1784.72 1214.38 L1785.31 1214.38 L1785.89 1214.38 L1786.48 1214.38 L1787.06 1214.38 L1787.65 1214.38 L1788.24 1214.38 L1788.82 1214.38 L1789.41 1214.38 L1790 1214.38 L1790.58 1214.38 L1791.17 1214.38 L1791.76 1214.38 L1792.34 1214.38 L1792.93 1214.38 L1793.52 1214.38 L1794.1 1214.38 L1794.69 1214.38 L1795.27 1214.38 L1795.86 1214.38 L1796.45 1214.38 L1797.03 1214.38 L1797.62 1214.38 L1798.21 1214.38 L1798.79 1214.38 L1799.38 1214.38 L1799.97 1214.38 L1800.55 1214.38 L1801.14 1214.38 L1801.73 1214.38 L1802.31 1214.38 L1802.9 1214.38 L1803.48 1214.38 L1804.07 1214.38 L1804.66 1214.38 L1805.24 1214.38 L1805.83 1214.38 L1806.42 1214.38 L1807 1214.38 L1807.59 1214.38 L1808.18 1214.38 L1808.76 1214.38 L1809.35 1214.38 L1809.94 1214.38 L1810.52 1214.38 L1811.11 1214.38 L1811.69 1214.38 L1812.28 1214.38 L1812.87 1214.38 L1813.45 1214.38 L1814.04 1214.38 L1814.63 1214.38 L1815.21 1214.38 L1815.8 1214.38 L1816.39 1214.38 L1816.97 1214.38 L1817.56 1214.38 L1818.14 1214.38 L1818.73 1214.38 L1819.32 1214.38 L1819.9 1214.38 L1820.49 1214.38 L1821.08 1214.38 L1821.66 1214.38 L1822.25 1214.38 L1822.84 1214.38 L1823.42 1214.38 L1824.01 1214.38 L1824.6 1214.38 L1825.18 1214.38 L1825.77 1214.38 L1826.35 1214.38 L1826.94 1214.38 L1827.53 1214.38 L1828.11 1214.38 L1828.7 1214.38 L1829.29 1214.38 L1829.87 1214.38 L1830.46 1214.38 L1831.05 1214.38 L1831.63 1214.38 L1832.22 1214.38 L1832.81 1214.38 L1833.39 1214.38 L1833.98 1214.38 L1834.56 1214.38 L1835.15 1214.38 L1835.74 1214.38 L1836.32 1214.38 L1836.91 1214.38 L1837.5 1214.38 L1838.08 1214.38 L1838.67 1214.38 L1839.26 1214.38 L1839.84 1214.38 L1840.43 1214.38 L1841.01 1214.38 L1841.6 1214.38 L1842.19 1214.38 L1842.77 1214.38 L1843.36 1214.38 L1843.95 1214.38 L1844.53 1214.38 L1845.12 1214.38 L1845.71 1214.38 L1846.29 1214.38 L1846.88 1214.38 L1847.47 1214.38 L1848.05 1214.38 L1848.64 1214.38 L1849.22 1214.38 L1849.81 1214.38 L1850.4 1214.38 L1850.98 1214.38 L1851.57 1214.38 L1852.16 1214.38 L1852.74 1214.38 L1853.33 1214.38 L1853.92 1214.38 L1854.5 1214.38 L1855.09 1214.38 L1855.68 1214.38 L1856.26 1214.38 L1856.85 1214.38 L1857.43 1214.38 L1858.02 1214.38 L1858.61 1214.38 L1859.19 1214.38 L1859.78 1214.38 L1860.37 1214.38 L1860.95 1214.38 L1861.54 1214.38 L1862.13 1214.38 L1862.71 1214.38 L1863.3 1214.38 L1863.88 1214.38 L1864.47 1214.38 L1865.06 1214.38 L1865.64 1214.38 L1866.23 1214.38 L1866.82 1214.38 L1867.4 1214.38 L1867.99 1214.38 L1868.58 1214.38 L1869.16 1214.38 L1869.75 1214.38 L1870.34 1214.38 L1870.92 1214.38 L1871.51 1214.38 L1872.09 1214.38 L1872.68 1214.38 L1873.27 1214.38 L1873.85 1214.38 L1874.44 1214.38 L1875.03 1214.38 L1875.61 1214.38 L1876.2 1214.38 L1876.79 1214.38 L1877.37 1214.38 L1877.96 1214.38 L1878.55 1214.38 L1879.13 1214.38 L1879.72 1214.38 L1880.3 1214.38 L1880.89 1214.38 L1881.48 1214.38 L1882.06 1214.38 L1882.65 1214.38 L1883.24 1214.38 L1883.82 1214.38 L1884.41 1214.38 L1885 1214.38 L1885.58 1214.38 L1886.17 1214.38 L1886.76 1214.38 L1887.34 1214.38 L1887.93 1214.38 L1888.51 1214.38 L1889.1 1214.38 L1889.69 1214.38 L1890.27 1214.38 L1890.86 1214.38 L1891.45 1214.38 L1892.03 1214.38 L1892.62 1214.38 L1893.21 1214.38 L1893.79 1214.38 L1894.38 1214.38 L1894.96 1214.38 L1895.55 1214.38 L1896.14 1214.38 L1896.72 1214.38 L1897.31 1214.38 L1897.9 1214.38 L1898.48 1214.38 L1899.07 1214.38 L1899.66 1214.38 L1900.24 1214.38 L1900.83 1214.38 L1901.42 1214.38 L1902 1214.38 L1902.59 1214.38 L1903.17 1214.38 L1903.76 1214.38 L1904.35 1214.38 L1904.93 1214.38 L1905.52 1214.38 L1906.11 1214.38 L1906.69 1214.38 L1907.28 1214.38 L1907.87 1214.38 L1908.45 1214.38 L1909.04 1214.38 L1909.63 1214.38 L1910.21 1214.38 L1910.8 1214.38 L1911.38 1214.38 L1911.97 1214.38 L1912.56 1214.38 L1913.14 1214.38 L1913.73 1214.38 L1914.32 1214.38 L1914.9 1214.38 L1915.49 1214.38 L1916.08 1214.38 L1916.66 1214.38 L1917.25 1214.38 L1917.83 1214.38 L1918.42 1214.38 L1919.01 1214.38 L1919.59 1214.38 L1920.18 1214.38 L1920.77 1214.38 L1921.35 1214.38 L1921.94 1214.38 L1922.53 1214.38 L1923.11 1214.38 L1923.7 1214.38 L1924.29 1214.38 L1924.87 1214.38 L1925.46 1214.38 L1926.04 1214.38 L1926.63 1214.38 L1927.22 1214.38 L1927.8 1214.38 L1928.39 1214.38 L1928.98 1214.38 L1929.56 1214.38 L1930.15 1214.38 L1930.74 1214.38 L1931.32 1214.38 L1931.91 1214.38 L1932.5 1214.38 L1933.08 1214.38 L1933.67 1214.38 L1934.25 1214.38 L1934.84 1214.38 L1935.43 1214.38 L1936.01 1214.38 L1936.6 1214.38 L1937.19 1214.38 L1937.77 1214.38 L1938.36 1214.38 L1938.95 1214.38 L1939.53 1214.38 L1940.12 1214.38 L1940.71 1214.38 L1941.29 1214.38 L1941.88 1214.38 L1942.46 1214.38 L1943.05 1214.38 L1943.64 1214.38 L1944.22 1214.38 L1944.81 1214.38 L1945.4 1214.38 L1945.98 1214.38 L1946.57 1214.38 L1947.16 1214.38 L1947.74 1214.38 L1948.33 1214.38 L1948.91 1214.38 L1949.5 1214.38 L1950.09 1214.38 L1950.67 1214.38 L1951.26 1214.38 L1951.85 1214.38 L1952.43 1214.38 L1953.02 1214.38 L1953.61 1214.38 L1954.19 1214.38 L1954.78 1214.38 L1955.37 1214.38 L1955.95 1214.38 L1956.54 1214.38 L1957.12 1214.38 L1957.71 1214.38 L1958.3 1214.38 L1958.88 1214.38 L1959.47 1214.38 L1960.06 1214.38 L1960.64 1214.38 L1961.23 1214.38 L1961.82 1214.38 L1962.4 1214.38 L1962.99 1214.38 L1963.58 1214.38 L1964.16 1214.38 L1964.75 1214.38 L1965.33 1214.38 L1965.92 1214.38 L1966.51 1214.38 L1967.09 1214.38 L1967.68 1214.38 L1968.27 1214.38 L1968.85 1214.38 L1969.44 1214.38 L1970.03 1214.38 L1970.61 1214.38 L1971.2 1214.38 L1971.78 1214.38 L1972.37 1214.38 L1972.96 1214.38 L1973.54 1214.38 L1974.13 1214.38 L1974.72 1214.38 L1975.3 1214.38 L1975.89 1214.38 L1976.48 1214.38 L1977.06 1214.38 L1977.65 1214.38 L1978.24 1214.38 L1978.82 1214.38 L1979.41 1214.38 L1979.99 1214.38 L1980.58 1214.38 L1981.17 1214.38 L1981.75 1214.38 L1982.34 1214.38 L1982.93 1214.38 L1983.51 1214.38 L1984.1 1214.38 L1984.69 1214.38 L1985.27 1214.38 L1985.86 1214.38 L1986.45 1214.38 L1987.03 1214.38 L1987.62 1214.38 L1988.2 1214.38 L1988.79 1214.38 L1989.38 1214.38 L1989.96 1214.38 L1990.55 1214.38 L1991.14 1214.38 L1991.72 1214.38 L1992.31 1214.38 L1992.9 1214.38 L1993.48 1214.38 L1994.07 1214.38 L1994.65 1214.38 L1995.24 1214.38 L1995.83 1214.38 L1996.41 1214.38 L1997 1214.38 L1997.59 1214.38 L1998.17 1214.38 L1998.76 1214.38 L1999.35 1214.38 L1999.93 1214.38 L2000.52 1214.38 L2001.11 1214.38 L2001.69 1214.38 L2002.28 1214.38 L2002.86 1214.38 L2003.45 1214.38 L2004.04 1214.38 L2004.62 1214.38 L2005.21 1214.38 L2005.8 1214.38 L2006.38 1214.38 L2006.97 1214.38 L2007.56 1214.38 L2008.14 1214.38 L2008.73 1214.38 L2009.32 1214.38 L2009.9 1214.38 L2010.49 1214.38 L2011.07 1214.38 L2011.66 1214.38 L2012.25 1214.38 L2012.83 1214.38 L2013.42 1214.38 L2014.01 1214.38 L2014.59 1214.38 L2015.18 1214.38 L2015.77 1214.38 L2016.35 1214.38 L2016.94 1214.38 L2017.53 1214.38 L2018.11 1214.38 L2018.7 1214.38 L2019.28 1214.38 L2019.87 1214.38 L2020.46 1214.38 L2021.04 1214.38 L2021.63 1214.38 L2022.22 1214.38 L2022.8 1214.38 L2023.39 1214.38 L2023.98 1214.38 L2024.56 1214.38 L2025.15 1214.38 L2025.73 1214.38 L2026.32 1214.38 L2026.91 1214.38 L2027.49 1214.38 L2028.08 1214.38 L2028.67 1214.38 L2029.25 1214.38 L2029.84 1214.38 L2030.43 1214.38 L2031.01 1214.38 L2031.6 1214.38 L2032.19 1214.38 L2032.77 1214.38 L2033.36 1214.38 L2033.94 1214.38 L2034.53 1214.38 L2035.12 1214.38 L2035.7 1214.38 L2036.29 1214.38 L2036.88 1214.38 L2037.46 1214.38 L2038.05 1214.38 L2038.64 1214.38 L2039.22 1214.38 L2039.81 1214.38 L2040.4 1214.38 L2040.98 1214.38 L2041.57 1214.38 L2042.15 1214.38 L2042.74 1214.38 L2043.33 1214.38 L2043.91 1214.38 L2044.5 1214.38 L2045.09 1214.38 L2045.67 1214.38 L2046.26 1214.38 L2046.85 1214.38 L2047.43 1214.38 L2048.02 1214.38 L2048.6 1214.38 L2049.19 1214.38 L2049.78 1214.38 L2050.36 1214.38 L2050.95 1214.38 L2051.54 1214.38 L2052.12 1214.38 L2052.71 1214.38 L2053.3 1214.38 L2053.88 1214.38 L2054.47 1214.38 L2055.06 1214.38 L2055.64 1214.38 L2056.23 1214.38 L2056.81 1214.38 L2057.4 1214.38 L2057.99 1214.38 L2058.57 1214.38 L2059.16 1214.38 L2059.75 1214.38 L2060.33 1214.38 L2060.92 1214.38 L2061.51 1214.38 L2062.09 1214.38 L2062.68 1214.38 L2063.27 1214.38 L2063.85 1214.38 L2064.44 1214.38 L2065.02 1214.38 L2065.61 1214.38 L2066.2 1214.38 L2066.78 1214.38 L2067.37 1214.38 L2067.96 1214.38 L2068.54 1214.38 L2069.13 1214.38 L2069.72 1214.38 L2070.3 1214.38 L2070.89 1214.38 L2071.48 1214.38 L2072.06 1214.38 L2072.65 1214.38 L2073.23 1214.38 L2073.82 1214.38 L2074.41 1214.38 L2074.99 1214.38 L2075.58 1214.38 L2076.17 1214.38 L2076.75 1214.38 L2077.34 1214.38 L2077.93 1214.38 L2078.51 1214.38 L2079.1 1214.38 L2079.68 1214.38 L2080.27 1214.38 L2080.86 1214.38 L2081.44 1214.38 L2082.03 1214.38 L2082.62 1214.38 L2083.2 1214.38 L2083.79 1214.38 L2084.38 1214.38 L2084.96 1214.38 L2085.55 1214.38 L2086.14 1214.38 L2086.72 1214.38 L2087.31 1214.38 L2087.89 1214.38 L2088.48 1214.38 L2089.07 1214.38 L2089.65 1214.38 L2090.24 1214.38 L2090.83 1214.38 L2091.41 1214.38 L2092 1214.38 L2092.59 1214.38 L2093.17 1214.38 L2093.76 1214.38 L2094.35 1214.38 L2094.93 1214.38 L2095.52 1214.38 L2096.1 1214.38 L2096.69 1214.38 L2097.28 1214.38 L2097.86 1214.38 L2098.45 1214.38 L2099.04 1214.38 L2099.62 1214.38 L2100.21 1214.38 L2100.8 1214.38 L2101.38 1214.38 L2101.97 1214.38 L2102.55 1214.38 L2103.14 1214.38 L2103.73 1214.38 L2104.31 1214.38 L2104.9 1214.38 L2105.49 1214.38 L2106.07 1214.38 L2106.66 1214.38 L2107.25 1214.38 L2107.83 1214.38 L2108.42 1214.38 L2109.01 1214.38 L2109.59 1214.38 L2110.18 1214.38 L2110.76 1214.38 L2111.35 1214.38 L2111.94 1214.38 L2112.52 1214.38 L2113.11 1214.38 L2113.7 1214.38 L2114.28 1214.38 L2114.87 1214.38 L2115.46 1214.38 L2116.04 1214.38 L2116.63 1214.38 L2117.22 1214.38 L2117.8 1214.38 L2118.39 1214.38 L2118.97 1214.38 L2119.56 1214.38 L2120.15 1214.38 L2120.73 1214.38 L2121.32 1214.38 L2121.91 1214.38 L2122.49 1214.38 L2123.08 1214.38 L2123.67 1214.38 L2124.25 1214.38 L2124.84 1214.38 L2125.42 1214.38 L2126.01 1214.38 L2126.6 1214.38 L2127.18 1214.38 L2127.77 1214.38 L2128.36 1214.38 L2128.94 1214.38 L2129.53 1214.38 L2130.12 1214.38 L2130.7 1214.38 L2131.29 1214.38 L2131.88 1214.38 L2132.46 1214.38 L2133.05 1214.38 L2133.63 1214.38 L2134.22 1214.38 L2134.81 1214.38 L2135.39 1214.38 L2135.98 1214.38 L2136.57 1214.38 L2137.15 1214.38 L2137.74 1214.38 L2138.33 1214.38 L2138.91 1214.38 L2139.5 1214.38 L2140.09 1214.38 L2140.67 1214.38 L2141.26 1214.38 L2141.84 1214.38 L2142.43 1214.38 L2143.02 1214.38 L2143.6 1214.38 L2144.19 1214.38 L2144.78 1214.38 L2145.36 1214.38 L2145.95 1214.38 L2146.54 1214.38 L2147.12 1214.38 L2147.71 1214.38 L2148.3 1214.38 L2148.88 1214.38 L2149.47 1214.38 L2150.05 1214.38 L2150.64 1214.38 L2151.23 1214.38 L2151.81 1214.38 L2152.4 1214.38 L2152.99 1214.38 L2153.57 1214.38 L2154.16 1214.38 L2154.75 1214.38 L2155.33 1214.38 L2155.92 1214.38 L2156.5 1214.38 L2157.09 1214.38 L2157.68 1214.38 L2158.26 1214.38 L2158.26 1213.77 L2157.68 1213.77 L2157.09 1213.77 L2156.5 1213.77 L2155.92 1213.77 L2155.33 1213.77 L2154.75 1213.77 L2154.16 1213.77 L2153.57 1213.77 L2152.99 1213.77 L2152.4 1213.77 L2151.81 1213.77 L2151.23 1213.77 L2150.64 1213.77 L2150.05 1213.77 L2149.47 1213.77 L2148.88 1213.77 L2148.3 1213.77 L2147.71 1213.77 L2147.12 1213.77 L2146.54 1213.77 L2145.95 1213.77 L2145.36 1213.77 L2144.78 1213.77 L2144.19 1213.77 L2143.6 1213.77 L2143.02 1213.77 L2142.43 1213.77 L2141.84 1213.77 L2141.26 1213.77 L2140.67 1213.77 L2140.09 1213.77 L2139.5 1213.77 L2138.91 1213.77 L2138.33 1213.77 L2137.74 1213.77 L2137.15 1213.77 L2136.57 1213.77 L2135.98 1213.77 L2135.39 1213.77 L2134.81 1213.77 L2134.22 1213.77 L2133.63 1213.77 L2133.05 1213.77 L2132.46 1213.77 L2131.88 1213.77 L2131.29 1213.77 L2130.7 1213.77 L2130.12 1213.77 L2129.53 1213.77 L2128.94 1213.77 L2128.36 1213.77 L2127.77 1213.77 L2127.18 1213.77 L2126.6 1213.77 L2126.01 1213.77 L2125.42 1213.77 L2124.84 1213.77 L2124.25 1213.77 L2123.67 1213.77 L2123.08 1213.77 L2122.49 1213.77 L2121.91 1213.77 L2121.32 1213.77 L2120.73 1213.77 L2120.15 1213.77 L2119.56 1213.77 L2118.97 1213.77 L2118.39 1213.77 L2117.8 1213.77 L2117.22 1213.77 L2116.63 1213.77 L2116.04 1213.77 L2115.46 1213.77 L2114.87 1213.77 L2114.28 1213.77 L2113.7 1213.77 L2113.11 1213.77 L2112.52 1213.77 L2111.94 1213.77 L2111.35 1213.77 L2110.76 1213.77 L2110.18 1213.77 L2109.59 1213.77 L2109.01 1213.77 L2108.42 1213.77 L2107.83 1213.77 L2107.25 1213.77 L2106.66 1213.77 L2106.07 1213.77 L2105.49 1213.77 L2104.9 1213.77 L2104.31 1213.77 L2103.73 1213.77 L2103.14 1213.77 L2102.55 1213.77 L2101.97 1213.77 L2101.38 1213.77 L2100.8 1213.77 L2100.21 1213.77 L2099.62 1213.77 L2099.04 1213.77 L2098.45 1213.77 L2097.86 1213.77 L2097.28 1213.77 L2096.69 1213.77 L2096.1 1213.77 L2095.52 1213.77 L2094.93 1213.77 L2094.35 1213.77 L2093.76 1213.77 L2093.17 1213.77 L2092.59 1213.77 L2092 1213.77 L2091.41 1213.77 L2090.83 1213.77 L2090.24 1213.77 L2089.65 1213.77 L2089.07 1213.77 L2088.48 1213.77 L2087.89 1213.77 L2087.31 1213.77 L2086.72 1213.77 L2086.14 1213.77 L2085.55 1213.77 L2084.96 1213.77 L2084.38 1213.77 L2083.79 1213.77 L2083.2 1213.77 L2082.62 1213.77 L2082.03 1213.77 L2081.44 1213.77 L2080.86 1213.77 L2080.27 1213.77 L2079.68 1213.77 L2079.1 1213.77 L2078.51 1213.77 L2077.93 1213.77 L2077.34 1213.77 L2076.75 1213.77 L2076.17 1213.77 L2075.58 1213.77 L2074.99 1213.77 L2074.41 1213.77 L2073.82 1213.77 L2073.23 1213.77 L2072.65 1213.77 L2072.06 1213.77 L2071.48 1213.77 L2070.89 1213.77 L2070.3 1213.77 L2069.72 1213.77 L2069.13 1213.77 L2068.54 1213.77 L2067.96 1213.77 L2067.37 1213.77 L2066.78 1213.77 L2066.2 1213.77 L2065.61 1213.77 L2065.02 1213.77 L2064.44 1213.77 L2063.85 1213.77 L2063.27 1213.77 L2062.68 1213.77 L2062.09 1213.77 L2061.51 1213.77 L2060.92 1213.77 L2060.33 1213.77 L2059.75 1213.77 L2059.16 1213.77 L2058.57 1213.77 L2057.99 1213.77 L2057.4 1213.77 L2056.81 1213.77 L2056.23 1213.77 L2055.64 1213.77 L2055.06 1213.77 L2054.47 1213.77 L2053.88 1213.77 L2053.3 1213.77 L2052.71 1213.77 L2052.12 1213.77 L2051.54 1213.77 L2050.95 1213.77 L2050.36 1213.77 L2049.78 1213.77 L2049.19 1213.77 L2048.6 1213.77 L2048.02 1213.77 L2047.43 1213.77 L2046.85 1213.77 L2046.26 1213.77 L2045.67 1213.77 L2045.09 1213.77 L2044.5 1213.77 L2043.91 1213.77 L2043.33 1213.77 L2042.74 1213.77 L2042.15 1213.77 L2041.57 1213.77 L2040.98 1213.77 L2040.4 1213.77 L2039.81 1213.77 L2039.22 1213.77 L2038.64 1213.77 L2038.05 1213.77 L2037.46 1213.77 L2036.88 1213.77 L2036.29 1213.77 L2035.7 1213.77 L2035.12 1213.77 L2034.53 1213.77 L2033.94 1213.77 L2033.36 1213.77 L2032.77 1213.77 L2032.19 1213.77 L2031.6 1213.77 L2031.01 1213.77 L2030.43 1213.77 L2029.84 1213.77 L2029.25 1213.77 L2028.67 1213.77 L2028.08 1213.77 L2027.49 1213.77 L2026.91 1213.77 L2026.32 1213.77 L2025.73 1213.77 L2025.15 1213.77 L2024.56 1213.77 L2023.98 1213.77 L2023.39 1213.77 L2022.8 1213.77 L2022.22 1213.77 L2021.63 1213.77 L2021.04 1213.77 L2020.46 1213.77 L2019.87 1213.77 L2019.28 1213.77 L2018.7 1213.77 L2018.11 1213.77 L2017.53 1213.77 L2016.94 1213.77 L2016.35 1213.77 L2015.77 1213.77 L2015.18 1213.77 L2014.59 1213.77 L2014.01 1213.77 L2013.42 1213.77 L2012.83 1213.77 L2012.25 1213.77 L2011.66 1213.77 L2011.07 1213.77 L2010.49 1213.77 L2009.9 1213.77 L2009.32 1213.77 L2008.73 1213.77 L2008.14 1213.77 L2007.56 1213.77 L2006.97 1213.77 L2006.38 1213.77 L2005.8 1213.77 L2005.21 1213.77 L2004.62 1213.77 L2004.04 1213.77 L2003.45 1213.77 L2002.86 1213.77 L2002.28 1213.77 L2001.69 1213.77 L2001.11 1213.77 L2000.52 1213.77 L1999.93 1213.77 L1999.35 1213.77 L1998.76 1213.77 L1998.17 1213.77 L1997.59 1213.77 L1997 1213.77 L1996.41 1213.77 L1995.83 1213.77 L1995.24 1213.77 L1994.65 1213.77 L1994.07 1213.77 L1993.48 1213.77 L1992.9 1213.77 L1992.31 1213.77 L1991.72 1213.77 L1991.14 1213.77 L1990.55 1213.77 L1989.96 1213.77 L1989.38 1213.77 L1988.79 1213.77 L1988.2 1213.77 L1987.62 1213.77 L1987.03 1213.77 L1986.45 1213.77 L1985.86 1213.77 L1985.27 1213.77 L1984.69 1213.77 L1984.1 1213.77 L1983.51 1213.77 L1982.93 1213.77 L1982.34 1213.77 L1981.75 1213.77 L1981.17 1213.77 L1980.58 1213.77 L1979.99 1213.77 L1979.41 1213.77 L1978.82 1213.77 L1978.24 1213.77 L1977.65 1213.77 L1977.06 1213.77 L1976.48 1213.77 L1975.89 1213.77 L1975.3 1213.77 L1974.72 1213.77 L1974.13 1213.77 L1973.54 1213.77 L1972.96 1213.77 L1972.37 1213.77 L1971.78 1213.77 L1971.2 1213.77 L1970.61 1213.77 L1970.03 1213.77 L1969.44 1213.77 L1968.85 1213.77 L1968.27 1213.77 L1967.68 1213.77 L1967.09 1213.77 L1966.51 1213.77 L1965.92 1213.77 L1965.33 1213.77 L1964.75 1213.77 L1964.16 1213.77 L1963.58 1213.77 L1962.99 1213.77 L1962.4 1213.77 L1961.82 1213.77 L1961.23 1213.77 L1960.64 1213.77 L1960.06 1213.77 L1959.47 1213.77 L1958.88 1213.77 L1958.3 1213.77 L1957.71 1213.77 L1957.12 1213.77 L1956.54 1213.77 L1955.95 1213.77 L1955.37 1213.77 L1954.78 1213.77 L1954.19 1213.77 L1953.61 1213.77 L1953.02 1213.77 L1952.43 1213.77 L1951.85 1213.77 L1951.26 1213.77 L1950.67 1213.77 L1950.09 1213.77 L1949.5 1213.77 L1948.91 1213.77 L1948.33 1213.77 L1947.74 1213.77 L1947.16 1213.77 L1946.57 1213.77 L1945.98 1213.77 L1945.4 1213.77 L1944.81 1213.77 L1944.22 1213.77 L1943.64 1213.77 L1943.05 1213.77 L1942.46 1213.77 L1941.88 1213.77 L1941.29 1213.77 L1940.71 1213.77 L1940.12 1213.77 L1939.53 1213.77 L1938.95 1213.77 L1938.36 1213.77 L1937.77 1213.77 L1937.19 1213.77 L1936.6 1213.77 L1936.01 1213.77 L1935.43 1213.77 L1934.84 1213.77 L1934.25 1213.77 L1933.67 1213.77 L1933.08 1213.77 L1932.5 1213.77 L1931.91 1213.77 L1931.32 1213.77 L1930.74 1213.77 L1930.15 1213.77 L1929.56 1213.77 L1928.98 1213.77 L1928.39 1213.77 L1927.8 1213.77 L1927.22 1213.77 L1926.63 1213.77 L1926.04 1213.77 L1925.46 1213.77 L1924.87 1213.77 L1924.29 1213.77 L1923.7 1213.77 L1923.11 1213.77 L1922.53 1213.77 L1921.94 1213.77 L1921.35 1213.77 L1920.77 1213.77 L1920.18 1213.77 L1919.59 1213.77 L1919.01 1213.77 L1918.42 1213.77 L1917.83 1213.77 L1917.25 1213.77 L1916.66 1213.77 L1916.08 1213.77 L1915.49 1213.77 L1914.9 1213.77 L1914.32 1213.77 L1913.73 1213.77 L1913.14 1213.77 L1912.56 1213.77 L1911.97 1213.77 L1911.38 1213.77 L1910.8 1213.77 L1910.21 1213.77 L1909.63 1213.77 L1909.04 1213.77 L1908.45 1213.77 L1907.87 1213.77 L1907.28 1213.77 L1906.69 1213.77 L1906.11 1213.77 L1905.52 1213.77 L1904.93 1213.77 L1904.35 1213.77 L1903.76 1213.77 L1903.17 1213.77 L1902.59 1213.77 L1902 1213.77 L1901.42 1213.77 L1900.83 1213.77 L1900.24 1213.77 L1899.66 1213.77 L1899.07 1213.77 L1898.48 1213.77 L1897.9 1213.77 L1897.31 1213.77 L1896.72 1213.77 L1896.14 1213.77 L1895.55 1213.77 L1894.96 1213.77 L1894.38 1213.77 L1893.79 1213.77 L1893.21 1213.77 L1892.62 1213.77 L1892.03 1213.77 L1891.45 1213.77 L1890.86 1213.77 L1890.27 1213.77 L1889.69 1213.77 L1889.1 1213.77 L1888.51 1213.77 L1887.93 1213.77 L1887.34 1213.77 L1886.76 1213.77 L1886.17 1213.77 L1885.58 1213.77 L1885 1213.77 L1884.41 1213.77 L1883.82 1213.77 L1883.24 1213.77 L1882.65 1213.77 L1882.06 1213.77 L1881.48 1213.77 L1880.89 1213.77 L1880.3 1213.77 L1879.72 1213.77 L1879.13 1213.77 L1878.55 1213.77 L1877.96 1213.77 L1877.37 1213.77 L1876.79 1213.77 L1876.2 1213.77 L1875.61 1213.77 L1875.03 1213.77 L1874.44 1213.77 L1873.85 1213.77 L1873.27 1213.77 L1872.68 1213.77 L1872.09 1213.77 L1871.51 1213.77 L1870.92 1213.77 L1870.34 1213.77 L1869.75 1213.77 L1869.16 1213.77 L1868.58 1213.77 L1867.99 1213.77 L1867.4 1213.77 L1866.82 1213.77 L1866.23 1213.77 L1865.64 1213.77 L1865.06 1213.77 L1864.47 1213.77 L1863.88 1213.77 L1863.3 1213.77 L1862.71 1213.77 L1862.13 1213.77 L1861.54 1213.77 L1860.95 1213.77 L1860.37 1213.77 L1859.78 1213.77 L1859.19 1213.77 L1858.61 1213.77 L1858.02 1213.77 L1857.43 1213.77 L1856.85 1213.77 L1856.26 1213.77 L1855.68 1213.77 L1855.09 1213.77 L1854.5 1213.77 L1853.92 1213.77 L1853.33 1213.77 L1852.74 1213.77 L1852.16 1213.77 L1851.57 1213.77 L1850.98 1213.77 L1850.4 1213.77 L1849.81 1213.77 L1849.22 1213.77 L1848.64 1213.77 L1848.05 1213.77 L1847.47 1213.77 L1846.88 1213.77 L1846.29 1213.77 L1845.71 1213.77 L1845.12 1213.77 L1844.53 1213.77 L1843.95 1213.77 L1843.36 1213.77 L1842.77 1213.77 L1842.19 1213.77 L1841.6 1213.77 L1841.01 1213.77 L1840.43 1213.77 L1839.84 1213.77 L1839.26 1213.77 L1838.67 1213.77 L1838.08 1213.77 L1837.5 1213.77 L1836.91 1213.77 L1836.32 1213.77 L1835.74 1213.77 L1835.15 1213.77 L1834.56 1213.77 L1833.98 1213.77 L1833.39 1213.77 L1832.81 1213.77 L1832.22 1213.77 L1831.63 1213.77 L1831.05 1213.77 L1830.46 1213.77 L1829.87 1213.77 L1829.29 1213.77 L1828.7 1213.77 L1828.11 1213.77 L1827.53 1213.77 L1826.94 1213.77 L1826.35 1213.77 L1825.77 1213.77 L1825.18 1213.77 L1824.6 1213.77 L1824.01 1213.77 L1823.42 1213.77 L1822.84 1213.77 L1822.25 1213.77 L1821.66 1213.77 L1821.08 1213.77 L1820.49 1213.77 L1819.9 1213.77 L1819.32 1213.77 L1818.73 1213.77 L1818.14 1213.77 L1817.56 1213.77 L1816.97 1213.77 L1816.39 1213.77 L1815.8 1213.77 L1815.21 1213.77 L1814.63 1213.77 L1814.04 1213.77 L1813.45 1213.77 L1812.87 1213.77 L1812.28 1213.77 L1811.69 1213.77 L1811.11 1213.77 L1810.52 1213.77 L1809.94 1213.77 L1809.35 1213.77 L1808.76 1213.77 L1808.18 1213.77 L1807.59 1213.77 L1807 1213.77 L1806.42 1213.77 L1805.83 1213.77 L1805.24 1213.77 L1804.66 1213.77 L1804.07 1213.77 L1803.48 1213.77 L1802.9 1213.77 L1802.31 1213.77 L1801.73 1213.77 L1801.14 1213.77 L1800.55 1213.77 L1799.97 1213.77 L1799.38 1213.77 L1798.79 1213.77 L1798.21 1213.77 L1797.62 1213.77 L1797.03 1213.77 L1796.45 1213.77 L1795.86 1213.77 L1795.27 1213.77 L1794.69 1213.77 L1794.1 1213.77 L1793.52 1213.77 L1792.93 1213.77 L1792.34 1213.77 L1791.76 1213.77 L1791.17 1213.77 L1790.58 1213.77 L1790 1213.77 L1789.41 1213.77 L1788.82 1213.77 L1788.24 1213.77 L1787.65 1213.77 L1787.06 1213.77 L1786.48 1213.77 L1785.89 1213.77 L1785.31 1213.77 L1784.72 1213.77 L1784.13 1213.77 L1783.55 1213.77 L1782.96 1213.77 L1782.37 1213.77 L1781.79 1213.77 L1781.2 1213.77 L1780.61 1213.77 L1780.03 1213.77 L1779.44 1213.77 L1778.86 1213.77 L1778.27 1213.77 L1777.68 1213.77 L1777.1 1213.77 L1776.51 1213.77 L1775.92 1213.77 L1775.34 1213.77 L1774.75 1213.77 L1774.16 1213.77 L1773.58 1213.77 L1772.99 1213.77 L1772.4 1213.77 L1771.82 1213.77 L1771.23 1213.77 L1770.65 1213.77 L1770.06 1213.77 L1769.47 1213.77 L1768.89 1213.77 L1768.3 1213.77 L1767.71 1213.77 L1767.13 1213.77 L1766.54 1213.77 L1765.95 1213.77 L1765.37 1213.77 L1764.78 1213.77 L1764.19 1213.77 L1763.61 1213.77 L1763.02 1213.77 L1762.44 1213.77 L1761.85 1213.77 L1761.26 1213.77 L1760.68 1213.77 L1760.09 1213.77 L1759.5 1213.77 L1758.92 1213.77 L1758.33 1213.77 L1757.74 1213.77 L1757.16 1213.77 L1756.57 1213.77 L1755.99 1213.77 L1755.4 1213.77 L1754.81 1213.77 L1754.23 1213.77 L1753.64 1213.77 L1753.05 1213.77 L1752.47 1213.77 L1751.88 1213.77 L1751.29 1213.77 L1750.71 1213.77 L1750.12 1213.77 L1749.53 1213.77 L1748.95 1213.77 L1748.36 1213.77 L1747.78 1213.77 L1747.19 1213.77 L1746.6 1213.77 L1746.02 1213.77 L1745.43 1213.77 L1744.84 1213.77 L1744.26 1213.77 L1743.67 1213.77 L1743.08 1213.77 L1742.5 1213.77 L1741.91 1213.77 L1741.32 1213.77 L1740.74 1213.77 L1740.15 1213.77 L1739.57 1213.77 L1738.98 1213.77 L1738.39 1213.77 L1737.81 1213.77 L1737.22 1213.77 L1736.63 1213.77 L1736.05 1213.77 L1735.46 1213.77 L1734.87 1213.77 L1734.29 1213.77 L1733.7 1213.77 L1733.11 1213.77 L1732.53 1213.77 L1731.94 1213.77 L1731.36 1213.77 L1730.77 1213.77 L1730.18 1213.77 L1729.6 1213.77 L1729.01 1213.77 L1728.42 1213.77 L1727.84 1213.77 L1727.25 1213.77 L1726.66 1213.77 L1726.08 1213.77 L1725.49 1213.77 L1724.91 1213.77 L1724.32 1213.77 L1723.73 1213.77 L1723.15 1213.77 L1722.56 1213.77 L1721.97 1213.77 L1721.39 1213.77 L1720.8 1213.77 L1720.21 1213.77 L1719.63 1213.77 L1719.04 1213.77 L1718.45 1213.77 L1717.87 1213.77 L1717.28 1213.77 L1716.7 1213.77 L1716.11 1213.77 L1715.52 1213.77 L1714.94 1213.77 L1714.35 1213.77 L1713.76 1213.77 L1713.18 1213.77 L1712.59 1213.77 L1712 1213.77 L1711.42 1213.77 L1710.83 1213.77 L1710.24 1213.77 L1709.66 1213.77 L1709.07 1213.77 L1708.49 1213.77 L1707.9 1213.77 L1707.31 1213.77 L1706.73 1213.77 L1706.14 1213.77 L1705.55 1213.77 L1704.97 1213.77 L1704.38 1213.77 L1703.79 1213.77 L1703.21 1213.77 L1702.62 1213.77 L1702.04 1213.77 L1701.45 1213.77 L1700.86 1213.77 L1700.28 1213.77 L1699.69 1213.77 L1699.1 1213.77 L1698.52 1213.77 L1697.93 1213.77 L1697.34 1213.77 L1696.76 1213.77 L1696.17 1213.77 L1695.58 1213.77 L1695 1213.77 L1694.41 1213.77 L1693.83 1213.77 L1693.24 1213.77 L1692.65 1213.77 L1692.07 1213.77 L1691.48 1213.77 L1690.89 1213.77 L1690.31 1213.77 L1689.72 1213.77 L1689.13 1213.77 L1688.55 1213.77 L1687.96 1213.77 L1687.37 1213.77 L1686.79 1213.77 L1686.2 1213.77 L1685.62 1213.77 L1685.03 1213.77 L1684.44 1213.77 L1683.86 1213.77 L1683.27 1213.77 L1682.68 1213.77 L1682.1 1213.77 L1681.51 1213.77 L1680.92 1213.77 L1680.34 1213.77 L1679.75 1213.77 L1679.17 1213.77 L1678.58 1213.77 L1677.99 1213.77 L1677.41 1213.77 L1676.82 1213.77 L1676.23 1213.77 L1675.65 1213.77 L1675.06 1213.77 L1674.47 1213.77 L1673.89 1213.77 L1673.3 1213.77 L1672.71 1213.77 L1672.13 1213.77 L1671.54 1213.77 L1670.96 1213.77 L1670.37 1213.77 L1669.78 1213.77 L1669.2 1213.77 L1668.61 1213.77 L1668.02 1213.77 L1667.44 1213.77 L1666.85 1213.77 L1666.26 1213.77 L1665.68 1213.77 L1665.09 1213.77 L1664.5 1213.77 L1663.92 1213.77 L1663.33 1213.77 L1662.75 1213.77 L1662.16 1213.77 L1661.57 1213.77 L1660.99 1213.77 L1660.4 1213.77 L1659.81 1213.77 L1659.23 1213.77 L1658.64 1213.77 L1658.05 1213.77 L1657.47 1213.77 L1656.88 1213.77 L1656.29 1213.77 L1655.71 1213.77 L1655.12 1213.77 L1654.54 1213.77 L1653.95 1213.77 L1653.36 1213.77 L1652.78 1213.77 L1652.19 1213.77 L1651.6 1213.77 L1651.02 1213.77 L1650.43 1213.77 L1649.84 1213.77 L1649.26 1213.77 L1648.67 1213.77 L1648.09 1213.77 L1647.5 1213.77 L1646.91 1213.77 L1646.33 1213.77 L1645.74 1213.77 L1645.15 1213.77 L1644.57 1213.77 L1643.98 1213.77 L1643.39 1213.77 L1642.81 1213.77 L1642.22 1213.77 L1641.63 1213.77 L1641.05 1213.77 L1640.46 1213.77 L1639.88 1213.77 L1639.29 1213.77 L1638.7 1213.77 L1638.12 1213.77 L1637.53 1213.77 L1636.94 1213.77 L1636.36 1213.77 L1635.77 1213.77 L1635.18 1213.77 L1634.6 1213.77 L1634.01 1213.77 L1633.42 1213.77 L1632.84 1213.77 L1632.25 1213.77 L1631.67 1213.77 L1631.08 1213.77 L1630.49 1213.77 L1629.91 1213.77 L1629.32 1213.77 L1628.73 1213.77 L1628.15 1213.77 L1627.56 1213.77 L1626.97 1213.77 L1626.39 1213.77 L1625.8 1213.77 L1625.22 1213.77 L1624.63 1213.77 L1624.04 1213.77 L1623.46 1213.77 L1622.87 1213.77 L1622.28 1213.77 L1621.7 1213.77 L1621.11 1213.77 L1620.52 1213.77 L1619.94 1213.77 L1619.35 1213.77 L1618.76 1213.77 L1618.18 1213.77 L1617.59 1213.77 L1617.01 1213.77 L1616.42 1213.77 L1615.83 1213.77 L1615.25 1213.77 L1614.66 1213.77 L1614.07 1213.77 L1613.49 1213.77 L1612.9 1213.77 L1612.31 1213.77 L1611.73 1213.77 L1611.14 1213.77 L1610.55 1213.77 L1609.97 1213.77 L1609.38 1213.77 L1608.8 1213.77 L1608.21 1213.77 L1607.62 1213.77 L1607.04 1213.77 L1606.45 1213.77 L1605.86 1213.77 L1605.28 1213.77 L1604.69 1213.77 L1604.1 1213.77 L1603.52 1213.77 L1602.93 1213.77 L1602.34 1213.77 L1601.76 1213.77 L1601.17 1213.77 L1600.59 1213.77 L1600 1213.77 L1599.41 1213.77 L1598.83 1213.77 L1598.24 1213.77 L1597.65 1213.77 L1597.07 1213.77 L1596.48 1213.77 L1595.89 1213.77 L1595.31 1213.77 L1594.72 1213.77 L1594.14 1213.77 L1593.55 1213.77 L1592.96 1213.77 L1592.38 1213.77 L1591.79 1213.77 L1591.2 1213.77 L1590.62 1213.77 L1590.03 1213.77 L1589.44 1213.77 L1588.86 1213.77 L1588.27 1213.77 L1587.68 1213.77 L1587.1 1213.77 L1586.51 1213.77 L1585.93 1213.77 L1585.34 1213.77 L1584.75 1213.77 L1584.17 1213.77 L1583.58 1213.77 L1582.99 1213.77 L1582.41 1213.77 L1581.82 1213.77 L1581.23 1213.77 L1580.65 1213.77 L1580.06 1213.77 L1579.47 1213.77 L1578.89 1213.77 L1578.3 1213.77 L1577.72 1213.77 L1577.13 1213.77 L1576.54 1213.77 L1575.96 1213.77 L1575.37 1213.77 L1574.78 1213.77 L1574.2 1213.77 L1573.61 1213.77 L1573.02 1213.77 L1572.44 1213.77 L1571.85 1213.77 L1571.27 1213.77 L1570.68 1213.77 L1570.09 1213.77 L1569.51 1213.77 L1568.92 1213.77 L1568.33 1213.77 L1567.75 1213.77 L1567.16 1213.77 L1566.57 1213.77 L1565.99 1213.77 L1565.4 1213.77 L1564.81 1213.77 L1564.23 1213.77 L1563.64 1213.77 L1563.06 1213.77 L1562.47 1213.77 L1561.88 1213.77 L1561.3 1213.77 L1560.71 1213.77 L1560.12 1213.77 L1559.54 1213.77 L1558.95 1213.77 L1558.36 1213.77 L1557.78 1213.77 L1557.19 1213.77 L1556.6 1213.77 L1556.02 1213.77 L1555.43 1213.77 L1554.85 1213.77 L1554.26 1213.77 L1553.67 1213.77 L1553.09 1213.77 L1552.5 1213.77 L1551.91 1213.77 L1551.33 1213.77 L1550.74 1213.77 L1550.15 1213.77 L1549.57 1213.77 L1548.98 1213.77 L1548.4 1213.77 L1547.81 1213.77 L1547.22 1213.77 L1546.64 1213.77 L1546.05 1213.77 L1545.46 1213.77 L1544.88 1213.77 L1544.29 1213.77 L1543.7 1213.77 L1543.12 1213.77 L1542.53 1213.77 L1541.94 1213.77 L1541.36 1213.77 L1540.77 1213.77 L1540.19 1213.77 L1539.6 1213.77 L1539.01 1213.77 L1538.43 1213.77 L1537.84 1213.77 L1537.25 1213.77 L1536.67 1213.77 L1536.08 1213.77 L1535.49 1213.77 L1534.91 1213.77 L1534.32 1213.77 L1533.73 1213.77 L1533.15 1213.77 L1532.56 1213.77 L1531.98 1213.77 L1531.39 1213.77 L1530.8 1213.77 L1530.22 1213.77 L1529.63 1213.77 L1529.04 1213.77 L1528.46 1213.77 L1527.87 1213.77 L1527.28 1213.77 L1526.7 1213.77 L1526.11 1213.77 L1525.52 1213.77 L1524.94 1213.77 L1524.35 1213.77 L1523.77 1213.77 L1523.18 1213.77 L1522.59 1213.77 L1522.01 1213.77 L1521.42 1213.77 L1520.83 1213.77 L1520.25 1213.77 L1519.66 1213.77 L1519.07 1213.77 L1518.49 1213.77 L1517.9 1213.77 L1517.32 1213.77 L1516.73 1213.77 L1516.14 1213.77 L1515.56 1213.77 L1514.97 1213.77 L1514.38 1213.77 L1513.8 1213.77 L1513.21 1213.77 L1512.62 1213.77 L1512.04 1213.77 L1511.45 1213.77 L1510.86 1213.77 L1510.28 1213.77 L1509.69 1213.77 L1509.11 1213.77 L1508.52 1213.77 L1507.93 1213.77 L1507.35 1213.77 L1506.76 1213.77 L1506.17 1213.77 L1505.59 1213.77 L1505 1213.77 L1504.41 1213.77 L1503.83 1213.77 L1503.24 1213.77 L1502.65 1213.77 L1502.07 1213.77 L1501.48 1213.77 L1500.9 1213.77 L1500.31 1213.77 L1499.72 1213.77 L1499.14 1213.77 L1498.55 1213.77 L1497.96 1213.77 L1497.38 1213.77 L1496.79 1213.77 L1496.2 1213.77 L1495.62 1213.77 L1495.03 1213.77 L1494.45 1213.77 L1493.86 1213.77 L1493.27 1213.77 L1492.69 1213.77 L1492.1 1213.77 L1491.51 1213.77 L1490.93 1213.77 L1490.34 1213.77 L1489.75 1213.77 L1489.17 1213.77 L1488.58 1213.77 L1487.99 1213.77 L1487.41 1213.77 L1486.82 1213.77 L1486.24 1213.77 L1485.65 1213.77 L1485.06 1213.77 L1484.48 1213.77 L1483.89 1213.77 L1483.3 1213.77 L1482.72 1213.77 L1482.13 1213.77 L1481.54 1213.77 L1480.96 1213.77 L1480.37 1213.77 L1479.78 1213.77 L1479.2 1213.77 L1478.61 1213.77 L1478.03 1213.77 L1477.44 1213.77 L1476.85 1213.77 L1476.27 1213.77 L1475.68 1213.77 L1475.09 1213.77 L1474.51 1213.77 L1473.92 1213.77 L1473.33 1213.77 L1472.75 1213.77 L1472.16 1213.77 L1471.57 1213.77 L1470.99 1213.77 L1470.4 1213.77 L1469.82 1213.77 L1469.23 1213.77 L1468.64 1213.77 L1468.06 1213.77 L1467.47 1213.77 L1466.88 1213.77 L1466.3 1213.77 L1465.71 1213.77 L1465.12 1213.77 L1464.54 1213.77 L1463.95 1213.77 L1463.37 1213.77 L1462.78 1213.77 L1462.19 1213.77 L1461.61 1213.77 L1461.02 1213.77 L1460.43 1213.77 L1459.85 1213.77 L1459.26 1213.77 L1458.67 1213.77 L1458.09 1213.77 L1457.5 1213.77 L1456.91 1213.77 L1456.33 1213.77 L1455.74 1213.77 L1455.16 1213.77 L1454.57 1213.77 L1453.98 1213.77 L1453.4 1213.77 L1452.81 1213.77 L1452.22 1213.77 L1451.64 1213.77 L1451.05 1213.77 L1450.46 1213.77 L1449.88 1213.77 L1449.29 1213.77 L1448.7 1213.77 L1448.12 1213.77 L1447.53 1213.77 L1446.95 1213.77 L1446.36 1213.77 L1445.77 1213.77 L1445.19 1213.77 L1444.6 1213.77 L1444.01 1213.77 L1443.43 1213.77 L1442.84 1213.77 L1442.25 1213.77 L1441.67 1213.77 L1441.08 1213.77 L1440.5 1213.77 L1439.91 1213.77 L1439.32 1213.77 L1438.74 1213.77 L1438.15 1213.77 L1437.56 1213.77 L1436.98 1213.77 L1436.39 1213.77 L1435.8 1213.77 L1435.22 1213.77 L1434.63 1213.77 L1434.04 1213.77 L1433.46 1213.77 L1432.87 1213.77 L1432.29 1213.77 L1431.7 1213.77 L1431.11 1213.77 L1430.53 1213.77 L1429.94 1213.77 L1429.35 1213.77 L1428.77 1213.77 L1428.18 1213.77 L1427.59 1213.77 L1427.01 1213.77 L1426.42 1213.77 L1425.83 1213.77 L1425.25 1213.77 L1424.66 1213.77 L1424.08 1213.77 L1423.49 1213.77 L1422.9 1213.77 L1422.32 1213.77 L1421.73 1213.77 L1421.14 1213.77 L1420.56 1213.77 L1419.97 1213.77 L1419.38 1213.77 L1418.8 1213.77 L1418.21 1213.77 L1417.63 1213.77 L1417.04 1213.77 L1416.45 1213.77 L1415.87 1213.77 L1415.28 1213.77 L1414.69 1213.77 L1414.11 1213.77 L1413.52 1213.77 L1412.93 1213.77 L1412.35 1213.77 L1411.76 1213.77 L1411.17 1213.77 L1410.59 1213.77 L1410 1213.77 L1409.42 1213.77 L1408.83 1213.77 L1408.24 1213.77 L1407.66 1213.77 L1407.07 1213.77 L1406.48 1213.77 L1405.9 1213.77 L1405.31 1213.77 L1404.72 1213.77 L1404.14 1213.77 L1403.55 1213.77 L1402.96 1213.77 L1402.38 1213.77 L1401.79 1213.77 L1401.21 1213.77 L1400.62 1213.77 L1400.03 1213.77 L1399.45 1213.77 L1398.86 1213.77 L1398.27 1213.77 L1397.69 1213.77 L1397.1 1213.77 L1396.51 1213.77 L1395.93 1213.77 L1395.34 1213.77 L1394.75 1213.77 L1394.17 1213.77 L1393.58 1213.77 L1393 1213.77 L1392.41 1213.77 L1391.82 1213.77 L1391.24 1213.77 L1390.65 1213.77 L1390.06 1213.77 L1389.48 1213.77 L1388.89 1213.77 L1388.3 1213.77 L1387.72 1213.77 L1387.13 1213.77 L1386.55 1213.77 L1385.96 1213.77 L1385.37 1213.77 L1384.79 1213.77 L1384.2 1213.77 L1383.61 1213.77 L1383.03 1213.77 L1382.44 1213.77 L1381.85 1213.77 L1381.27 1213.77 L1380.68 1213.77 L1380.09 1213.77 L1379.51 1213.77 L1378.92 1213.77 L1378.34 1213.77 L1377.75 1213.77 L1377.16 1213.77 L1376.58 1213.77 L1375.99 1213.77 L1375.4 1213.77 L1374.82 1213.77 L1374.23 1213.77 L1373.64 1213.77 L1373.06 1213.77 L1372.47 1213.77 L1371.88 1213.77 L1371.3 1213.77 L1370.71 1213.77 L1370.13 1213.77 L1369.54 1213.77 L1368.95 1213.77 L1368.37 1213.77 L1367.78 1213.77 L1367.19 1213.77 L1366.61 1213.77 L1366.02 1213.77 L1365.43 1213.77 L1364.85 1213.77 L1364.26 1213.77 L1363.68 1213.77 L1363.09 1213.77 L1362.5 1213.77 L1361.92 1213.77 L1361.33 1213.77 L1360.74 1213.77 L1360.16 1213.77 L1359.57 1213.77 L1358.98 1213.77 L1358.4 1213.77 L1357.81 1213.77 L1357.22 1213.77 L1356.64 1213.77 L1356.05 1213.77 L1355.47 1213.77 L1354.88 1213.77 L1354.29 1213.77 L1353.71 1213.77 L1353.12 1213.77 L1352.53 1213.77 L1351.95 1213.77 L1351.36 1213.77 L1350.77 1213.77 L1350.19 1213.77 L1349.6 1213.77 L1349.01 1213.77 L1348.43 1213.77 L1347.84 1213.77 L1347.26 1213.77 L1346.67 1213.77 L1346.08 1213.77 L1345.5 1213.77 L1344.91 1213.77 L1344.32 1213.77 L1343.74 1213.77 L1343.15 1213.77 L1342.56 1213.77 L1341.98 1213.77 L1341.39 1213.77 L1340.8 1213.77 L1340.22 1213.77 L1339.63 1213.77 L1339.05 1213.77 L1338.46 1213.77 L1337.87 1213.77 L1337.29 1213.77 L1336.7 1213.77 L1336.11 1213.77 L1335.53 1213.77 L1334.94 1213.77 L1334.35 1213.77 L1333.77 1213.77 L1333.18 1213.77 L1332.6 1213.77 L1332.01 1213.77 L1331.42 1213.77 L1330.84 1213.77 L1330.25 1213.77 L1329.66 1213.77 L1329.08 1213.77 L1328.49 1213.77 L1327.9 1213.77 L1327.32 1213.77 L1326.73 1213.77 L1326.14 1213.77 L1325.56 1213.77 L1324.97 1213.77 L1324.39 1213.77 L1323.8 1213.77 L1323.21 1213.77 L1322.63 1213.77 L1322.04 1213.77 L1321.45 1213.77 L1320.87 1213.77 L1320.28 1213.77 L1319.69 1213.77 L1319.11 1213.77 L1318.52 1213.77 L1317.93 1213.77 L1317.35 1213.77 L1316.76 1213.77 L1316.18 1213.77 L1315.59 1213.77 L1315 1213.77 L1314.42 1213.77 L1313.83 1213.77 L1313.24 1213.77 L1312.66 1213.77 L1312.07 1213.77 L1311.48 1213.77 L1310.9 1213.77 L1310.31 1213.77 L1309.73 1213.77 L1309.14 1213.77 L1308.55 1213.77 L1307.97 1213.77 L1307.38 1213.77 L1306.79 1213.77 L1306.21 1213.77 L1305.62 1213.77 L1305.03 1213.77 L1304.45 1213.77 L1303.86 1213.77 L1303.27 1213.77 L1302.69 1213.77 L1302.1 1213.77 L1301.52 1213.77 L1300.93 1213.77 L1300.34 1213.77 L1299.76 1213.77 L1299.17 1213.77 L1298.58 1213.77 L1298 1213.77 L1297.41 1213.77 L1296.82 1213.77 L1296.24 1213.77 L1295.65 1213.77 L1295.06 1213.77 L1294.48 1213.77 L1293.89 1213.77 L1293.31 1213.77 L1292.72 1213.77 L1292.13 1213.77 L1291.55 1213.77 L1290.96 1213.77 L1290.37 1213.77 L1289.79 1213.77 L1289.2 1213.77 L1288.61 1213.77 L1288.03 1213.77 L1287.44 1213.77 L1286.86 1213.77 L1286.27 1213.77 L1285.68 1213.77 L1285.1 1213.77 L1284.51 1213.77 L1283.92 1213.77 L1283.34 1213.77 L1282.75 1213.77 L1282.16 1213.77 L1281.58 1213.77 L1280.99 1213.77 L1280.4 1213.77 L1279.82 1213.77 L1279.23 1213.77 L1278.65 1213.77 L1278.06 1213.77 L1277.47 1213.77 L1276.89 1213.77 L1276.3 1213.77 L1275.71 1213.77 L1275.13 1213.77 L1274.54 1213.77 L1273.95 1213.77 L1273.37 1213.77 L1272.78 1213.77 L1272.19 1213.77 L1271.61 1213.77 L1271.02 1213.77 L1270.44 1213.77 L1269.85 1213.77 L1269.26 1213.77 L1268.68 1213.77 L1268.09 1213.77 L1267.5 1213.77 L1266.92 1213.77 L1266.33 1213.77 L1265.74 1213.77 L1265.16 1213.77 L1264.57 1213.77 L1263.98 1213.77 L1263.4 1213.77 L1262.81 1213.77 L1262.23 1213.77 L1261.64 1213.77 L1261.05 1213.77 L1260.47 1213.77 L1259.88 1213.77 L1259.29 1213.77 L1258.71 1213.77 L1258.12 1213.77 L1257.53 1213.77 L1256.95 1213.77 L1256.36 1213.77 L1255.78 1213.77 L1255.19 1213.77 L1254.6 1213.77 L1254.02 1213.77 L1253.43 1213.77 L1252.84 1213.77 L1252.26 1213.77 L1251.67 1213.77 L1251.08 1213.77 L1250.5 1213.77 L1249.91 1213.77 L1249.32 1213.77 L1248.74 1213.77 L1248.15 1213.77 L1247.57 1213.77 L1246.98 1213.77 L1246.39 1213.77 L1245.81 1213.77 L1245.22 1213.77 L1244.63 1213.77 L1244.05 1213.77 L1243.46 1213.77 L1242.87 1213.77 L1242.29 1213.77 L1241.7 1213.77 L1241.11 1213.77 L1240.53 1213.77 L1239.94 1213.77 L1239.36 1213.77 L1238.77 1213.77 L1238.18 1213.77 L1237.6 1213.77 L1237.01 1213.77 L1236.42 1213.77 L1235.84 1213.77 L1235.25 1213.77 L1234.66 1213.77 L1234.08 1213.77 L1233.49 1213.77 L1232.91 1213.77 L1232.32 1213.77 L1231.73 1213.77 L1231.15 1213.77 L1230.56 1213.77 L1229.97 1213.77 L1229.39 1213.77 L1228.8 1213.77 L1228.21 1213.77 L1227.63 1213.77 L1227.04 1213.77 L1226.45 1213.77 L1225.87 1213.77 L1225.28 1213.77 L1224.7 1213.77 L1224.11 1213.77 L1223.52 1213.77 L1222.94 1213.77 L1222.35 1213.77 L1221.76 1213.77 L1221.18 1213.77 L1220.59 1213.77 L1220 1213.77 L1219.42 1213.77 L1218.83 1213.77 L1218.24 1213.77 L1217.66 1213.77 L1217.07 1213.77 L1216.49 1213.77 L1215.9 1213.77 L1215.31 1213.77 L1214.73 1213.77 L1214.14 1213.77 L1213.55 1213.77 L1212.97 1213.77 L1212.38 1213.77 L1211.79 1213.77 L1211.21 1213.77 L1210.62 1213.77 L1210.03 1213.77 L1209.45 1213.77 L1208.86 1213.77 L1208.28 1213.77 L1207.69 1213.77 L1207.1 1213.77 L1206.52 1213.77 L1205.93 1213.77 L1205.34 1213.77 L1204.76 1213.77 L1204.17 1213.77 L1203.58 1213.77 L1203 1213.77 L1202.41 1213.77 L1201.83 1213.77 L1201.24 1213.77 L1200.65 1213.77 L1200.07 1213.77 L1199.48 1213.77 L1198.89 1213.77 L1198.31 1213.77 L1197.72 1213.77 L1197.13 1213.77 L1196.55 1213.77 L1195.96 1213.77 L1195.37 1213.77 L1194.79 1213.77 L1194.2 1213.77 L1193.62 1213.77 L1193.03 1213.77 L1192.44 1213.77 L1191.86 1213.77 L1191.27 1213.77 L1190.68 1213.77 L1190.1 1213.77 L1189.51 1213.77 L1188.92 1213.77 L1188.34 1213.77 L1187.75 1213.77 L1187.16 1213.77 L1186.58 1213.77 L1185.99 1213.77 L1185.41 1213.77 L1184.82 1213.77 L1184.23 1213.77 L1183.65 1213.77 L1183.06 1213.77 L1182.47 1213.77 L1181.89 1213.77 L1181.3 1213.77 L1180.71 1213.77 L1180.13 1213.77 L1179.54 1213.77 L1178.96 1213.77 L1178.37 1213.77 L1177.78 1213.77 L1177.2 1213.77 L1176.61 1213.77 L1176.02 1213.77 L1175.44 1213.77 L1174.85 1213.77 L1174.26 1213.77 L1173.68 1213.77 L1173.09 1213.77 L1172.5 1213.77 L1171.92 1213.77 L1171.33 1213.77 L1170.75 1213.77 L1170.16 1213.77 L1169.57 1213.77 L1168.99 1213.77 L1168.4 1213.77 L1167.81 1213.77 L1167.23 1213.77 L1166.64 1213.77 L1166.05 1213.77 L1165.47 1213.77 L1164.88 1213.77 L1164.29 1213.77 L1163.71 1213.77 L1163.12 1213.77 L1162.54 1213.77 L1161.95 1213.77 L1161.36 1213.77 L1160.78 1213.77 L1160.19 1213.77 L1159.6 1213.77 L1159.02 1213.77 L1158.43 1213.77 L1157.84 1213.77 L1157.26 1213.77 L1156.67 1213.77 L1156.09 1213.77 L1155.5 1213.77 L1154.91 1213.77 L1154.33 1213.77 L1153.74 1213.77 L1153.15 1213.77 L1152.57 1213.77 L1151.98 1213.77 L1151.39 1213.77 L1150.81 1213.77 L1150.22 1213.77 L1149.63 1213.77 L1149.05 1213.77 L1148.46 1213.77 L1147.88 1213.77 L1147.29 1213.77 L1146.7 1213.77 L1146.12 1213.77 L1145.53 1213.77 L1144.94 1213.77 L1144.36 1213.77 L1143.77 1213.77 L1143.18 1213.77 L1142.6 1213.77 L1142.01 1213.77 L1141.42 1213.77 L1140.84 1213.77 L1140.25 1213.77 L1139.67 1213.77 L1139.08 1213.77 L1138.49 1213.77 L1137.91 1213.77 L1137.32 1213.77 L1136.73 1213.77 L1136.15 1213.77 L1135.56 1213.77 L1134.97 1213.77 L1134.39 1213.77 L1133.8 1213.77 L1133.21 1213.77 L1132.63 1213.77 L1132.04 1213.77 L1131.46 1213.77 L1130.87 1213.77 L1130.28 1213.77 L1129.7 1213.77 L1129.11 1213.77 L1128.52 1213.77 L1127.94 1213.77 L1127.35 1213.77 L1126.76 1213.77 L1126.18 1213.77 L1125.59 1213.77 L1125.01 1213.77 L1124.42 1213.77 L1123.83 1213.77 L1123.25 1213.77 L1122.66 1213.77 L1122.07 1213.77 L1121.49 1213.77 L1120.9 1213.77 L1120.31 1213.77 L1119.73 1213.77 L1119.14 1213.77 L1118.55 1213.77 L1117.97 1213.77 L1117.38 1213.77 L1116.8 1213.77 L1116.21 1213.77 L1115.62 1213.77 L1115.04 1213.77 L1114.45 1213.77 L1113.86 1213.77 L1113.28 1213.77 L1112.69 1213.77 L1112.1 1213.77 L1111.52 1213.77 L1110.93 1213.77 L1110.34 1213.77 L1109.76 1213.77 L1109.17 1213.77 L1108.59 1213.77 L1108 1213.77 L1107.41 1213.77 L1106.83 1213.77 L1106.24 1213.77 L1105.65 1213.77 L1105.07 1213.77 L1104.48 1213.77 L1103.89 1213.77 L1103.31 1213.77 L1102.72 1213.77 L1102.14 1213.77 L1101.55 1213.77 L1100.96 1213.77 L1100.38 1213.77 L1099.79 1213.77 L1099.2 1213.77 L1098.62 1213.77 L1098.03 1213.77 L1097.44 1213.77 L1096.86 1213.77 L1096.27 1213.77 L1095.68 1213.77 L1095.1 1213.77 L1094.51 1213.77 L1093.93 1213.77 L1093.34 1213.77 L1092.75 1213.77 L1092.17 1213.77 L1091.58 1213.77 L1090.99 1213.77 L1090.41 1213.77 L1089.82 1213.77 L1089.23 1213.77 L1088.65 1213.77 L1088.06 1213.77 L1087.47 1213.77 L1086.89 1213.77 L1086.3 1213.77 L1085.72 1213.77 L1085.13 1213.77 L1084.54 1213.77 L1083.96 1213.77 L1083.37 1213.77 L1082.78 1213.77 L1082.2 1213.77 L1081.61 1213.77 L1081.02 1213.77 L1080.44 1213.77 L1079.85 1213.77 L1079.26 1213.77 L1078.68 1213.77 L1078.09 1213.77 L1077.51 1213.77 L1076.92 1213.77 L1076.33 1213.77 L1075.75 1213.77 L1075.16 1213.77 L1074.57 1213.77 L1073.99 1213.77 L1073.4 1213.77 L1072.81 1213.77 L1072.23 1213.77 L1071.64 1213.77 L1071.06 1213.77 L1070.47 1213.77 L1069.88 1213.77 L1069.3 1213.77 L1068.71 1213.77 L1068.12 1213.77 L1067.54 1213.77 L1066.95 1213.77 L1066.36 1213.77 L1065.78 1213.77 L1065.19 1213.77 L1064.6 1213.77 L1064.02 1213.77 L1063.43 1213.77 L1062.85 1213.77 L1062.26 1213.77 L1061.67 1213.77 L1061.09 1213.77 L1060.5 1213.77 L1059.91 1213.77 L1059.33 1213.77 L1058.74 1213.77 L1058.15 1213.77 L1057.57 1213.77 L1056.98 1213.77 L1056.39 1213.77 L1055.81 1213.77 L1055.22 1213.77 L1054.64 1213.77 L1054.05 1213.77 L1053.46 1213.77 L1052.88 1213.77 L1052.29 1213.77 L1051.7 1213.77 L1051.12 1213.77 L1050.53 1213.77 L1049.94 1213.77 L1049.36 1213.77 L1048.77 1213.77 L1048.19 1213.77 L1047.6 1213.77 L1047.01 1213.77 L1046.43 1213.77 L1045.84 1213.77 L1045.25 1213.77 L1044.67 1213.77 L1044.08 1213.77 L1043.49 1213.77 L1042.91 1213.77 L1042.32 1213.77 L1041.73 1213.77 L1041.15 1213.77 L1040.56 1213.77 L1039.98 1213.77 L1039.39 1213.77 L1038.8 1213.77 L1038.22 1213.77 L1037.63 1213.77 L1037.04 1213.77 L1036.46 1213.77 L1035.87 1213.77 L1035.28 1213.77 L1034.7 1213.77 L1034.11 1213.77 L1033.52 1213.77 L1032.94 1213.77 L1032.35 1213.77 L1031.77 1213.77 L1031.18 1213.77 L1030.59 1213.77 L1030.01 1213.77 L1029.42 1213.77 L1028.83 1213.77 L1028.25 1213.77 L1027.66 1213.77 L1027.07 1213.77 L1026.49 1213.77 L1025.9 1213.77 L1025.32 1213.77 L1024.73 1213.77 L1024.14 1213.77 L1023.56 1213.77 L1022.97 1213.77 L1022.38 1213.77 L1021.8 1213.77 L1021.21 1213.77 L1020.62 1213.77 L1020.04 1213.77 L1019.45 1213.77 L1018.86 1213.77 L1018.28 1213.77 L1017.69 1213.77 L1017.11 1213.77 L1016.52 1213.77 L1015.93 1213.77 L1015.35 1213.77 L1014.76 1213.77 L1014.17 1213.77 L1013.59 1213.77 L1013 1213.77 L1012.41 1213.77 L1011.83 1213.77 L1011.24 1213.77 L1010.65 1213.77 L1010.07 1213.77 L1009.48 1213.77 L1008.9 1213.77 L1008.31 1213.77 L1007.72 1213.77 L1007.14 1213.77 L1006.55 1213.77 L1005.96 1213.77 L1005.38 1213.77 L1004.79 1213.77 L1004.2 1213.77 L1003.62 1213.77 L1003.03 1213.77 L1002.44 1213.77 L1001.86 1213.77 L1001.27 1213.77 L1000.69 1213.77 L1000.1 1213.77 L999.513 1213.77 L998.926 1213.77 L998.34 1213.77 L997.754 1213.77 L997.167 1213.77 L996.581 1213.77 L995.994 1213.77 L995.408 1213.77 L994.822 1213.77 L994.235 1213.77 L993.649 1213.77 L993.062 1213.77 L992.476 1213.77 L991.889 1213.77 L991.303 1213.77 L990.717 1213.77 L990.13 1213.77 L989.544 1213.77 L988.957 1213.77 L988.371 1213.77 L987.785 1213.77 L987.198 1213.77 L986.612 1213.77 L986.025 1213.77  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.08 986.612,1214.08 987.198,1214.08 987.785,1214.08 988.371,1214.08 988.957,1214.08 989.544,1214.08 990.13,1214.08 990.717,1214.08 991.303,1214.08 991.889,1214.08 992.476,1214.08 993.062,1214.08 993.649,1214.08 994.235,1214.08 994.822,1214.08 995.408,1214.08 995.994,1214.08 996.581,1214.08 997.167,1214.08 997.754,1214.08 998.34,1214.08 998.926,1214.08 999.513,1214.08 1000.1,1214.08 1000.69,1214.08 1001.27,1214.08 1001.86,1214.08 1002.44,1214.08 1003.03,1214.08 1003.62,1214.08 1004.2,1214.08 1004.79,1214.08 1005.38,1214.08 1005.96,1214.08 1006.55,1214.08 1007.14,1214.08 1007.72,1214.08 1008.31,1214.08 1008.9,1214.08 1009.48,1214.08 1010.07,1214.08 1010.65,1214.08 1011.24,1214.08 1011.83,1214.08 1012.41,1214.08 1013,1214.08 1013.59,1214.08 1014.17,1214.08 1014.76,1214.08 1015.35,1214.08 1015.93,1214.08 1016.52,1214.08 1017.11,1214.08 1017.69,1214.08 1018.28,1214.08 1018.86,1214.08 1019.45,1214.08 1020.04,1214.08 1020.62,1214.08 1021.21,1214.08 1021.8,1214.08 1022.38,1214.08 1022.97,1214.08 1023.56,1214.08 1024.14,1214.08 1024.73,1214.08 1025.32,1214.08 1025.9,1214.08 1026.49,1214.08 1027.07,1214.08 1027.66,1214.08 1028.25,1214.08 1028.83,1214.08 1029.42,1214.08 1030.01,1214.08 1030.59,1214.08 1031.18,1214.08 1031.77,1214.08 1032.35,1214.08 1032.94,1214.08 1033.52,1214.08 1034.11,1214.08 1034.7,1214.08 1035.28,1214.08 1035.87,1214.08 1036.46,1214.08 1037.04,1214.08 1037.63,1214.08 1038.22,1214.08 1038.8,1214.08 1039.39,1214.08 1039.98,1214.08 1040.56,1214.08 1041.15,1214.08 1041.73,1214.08 1042.32,1214.08 1042.91,1214.08 1043.49,1214.08 1044.08,1214.08 1044.67,1214.08 1045.25,1214.08 1045.84,1214.08 1046.43,1214.08 1047.01,1214.08 1047.6,1214.08 1048.19,1214.08 1048.77,1214.08 1049.36,1214.08 1049.94,1214.08 1050.53,1214.08 1051.12,1214.08 1051.7,1214.08 1052.29,1214.08 1052.88,1214.08 1053.46,1214.08 1054.05,1214.08 1054.64,1214.08 1055.22,1214.08 1055.81,1214.08 1056.39,1214.08 1056.98,1214.08 1057.57,1214.08 1058.15,1214.08 1058.74,1214.08 1059.33,1214.08 1059.91,1214.08 1060.5,1214.08 1061.09,1214.08 1061.67,1214.08 1062.26,1214.08 1062.85,1214.08 1063.43,1214.08 1064.02,1214.08 1064.6,1214.08 1065.19,1214.08 1065.78,1214.08 1066.36,1214.08 1066.95,1214.08 1067.54,1214.08 1068.12,1214.08 1068.71,1214.08 1069.3,1214.08 1069.88,1214.08 1070.47,1214.08 1071.06,1214.08 1071.64,1214.08 1072.23,1214.08 1072.81,1214.08 1073.4,1214.08 1073.99,1214.08 1074.57,1214.08 1075.16,1214.08 1075.75,1214.08 1076.33,1214.08 1076.92,1214.08 1077.51,1214.08 1078.09,1214.08 1078.68,1214.08 1079.26,1214.08 1079.85,1214.08 1080.44,1214.08 1081.02,1214.08 1081.61,1214.08 1082.2,1214.08 1082.78,1214.08 1083.37,1214.08 1083.96,1214.08 1084.54,1214.08 1085.13,1214.08 1085.72,1214.08 1086.3,1214.08 1086.89,1214.08 1087.47,1214.08 1088.06,1214.08 1088.65,1214.08 1089.23,1214.08 1089.82,1214.08 1090.41,1214.08 1090.99,1214.08 1091.58,1214.08 1092.17,1214.08 1092.75,1214.08 1093.34,1214.08 1093.93,1214.08 1094.51,1214.08 1095.1,1214.08 1095.68,1214.08 1096.27,1214.08 1096.86,1214.08 1097.44,1214.08 1098.03,1214.08 1098.62,1214.08 1099.2,1214.08 1099.79,1214.08 1100.38,1214.08 1100.96,1214.08 1101.55,1214.08 1102.14,1214.08 1102.72,1214.08 1103.31,1214.08 1103.89,1214.08 1104.48,1214.08 1105.07,1214.08 1105.65,1214.08 1106.24,1214.08 1106.83,1214.08 1107.41,1214.08 1108,1214.08 1108.59,1214.08 1109.17,1214.08 1109.76,1214.08 1110.34,1214.08 1110.93,1214.08 1111.52,1214.08 1112.1,1214.08 1112.69,1214.08 1113.28,1214.08 1113.86,1214.08 1114.45,1214.08 1115.04,1214.08 1115.62,1214.08 1116.21,1214.08 1116.8,1214.08 1117.38,1214.08 1117.97,1214.08 1118.55,1214.08 1119.14,1214.08 1119.73,1214.08 1120.31,1214.08 1120.9,1214.08 1121.49,1214.08 1122.07,1214.08 1122.66,1214.08 1123.25,1214.08 1123.83,1214.08 1124.42,1214.08 1125.01,1214.08 1125.59,1214.08 1126.18,1214.08 1126.76,1214.08 1127.35,1214.08 1127.94,1214.08 1128.52,1214.08 1129.11,1214.08 1129.7,1214.08 1130.28,1214.08 1130.87,1214.08 1131.46,1214.08 1132.04,1214.08 1132.63,1214.08 1133.21,1214.08 1133.8,1214.08 1134.39,1214.08 1134.97,1214.08 1135.56,1214.08 1136.15,1214.08 1136.73,1214.08 1137.32,1214.08 1137.91,1214.08 1138.49,1214.08 1139.08,1214.08 1139.67,1214.08 1140.25,1214.08 1140.84,1214.08 1141.42,1214.08 1142.01,1214.08 1142.6,1214.08 1143.18,1214.08 1143.77,1214.08 1144.36,1214.08 1144.94,1214.08 1145.53,1214.08 1146.12,1214.08 1146.7,1214.08 1147.29,1214.08 1147.88,1214.08 1148.46,1214.08 1149.05,1214.08 1149.63,1214.08 1150.22,1214.08 1150.81,1214.08 1151.39,1214.08 1151.98,1214.08 1152.57,1214.08 1153.15,1214.08 1153.74,1214.08 1154.33,1214.08 1154.91,1214.08 1155.5,1214.08 1156.09,1214.08 1156.67,1214.08 1157.26,1214.08 1157.84,1214.08 1158.43,1214.08 1159.02,1214.08 1159.6,1214.08 1160.19,1214.08 1160.78,1214.08 1161.36,1214.08 1161.95,1214.08 1162.54,1214.08 1163.12,1214.08 1163.71,1214.08 1164.29,1214.08 1164.88,1214.08 1165.47,1214.08 1166.05,1214.08 1166.64,1214.08 1167.23,1214.08 1167.81,1214.08 1168.4,1214.08 1168.99,1214.08 1169.57,1214.08 1170.16,1214.08 1170.75,1214.08 1171.33,1214.08 1171.92,1214.08 1172.5,1214.08 1173.09,1214.08 1173.68,1214.08 1174.26,1214.08 1174.85,1214.08 1175.44,1214.08 1176.02,1214.08 1176.61,1214.08 1177.2,1214.08 1177.78,1214.08 1178.37,1214.08 1178.96,1214.08 1179.54,1214.08 1180.13,1214.08 1180.71,1214.08 1181.3,1214.08 1181.89,1214.08 1182.47,1214.08 1183.06,1214.08 1183.65,1214.08 1184.23,1214.08 1184.82,1214.08 1185.41,1214.08 1185.99,1214.08 1186.58,1214.08 1187.16,1214.08 1187.75,1214.08 1188.34,1214.08 1188.92,1214.08 1189.51,1214.08 1190.1,1214.08 1190.68,1214.08 1191.27,1214.08 1191.86,1214.08 1192.44,1214.08 1193.03,1214.08 1193.62,1214.08 1194.2,1214.08 1194.79,1214.08 1195.37,1214.08 1195.96,1214.08 1196.55,1214.08 1197.13,1214.08 1197.72,1214.08 1198.31,1214.08 1198.89,1214.08 1199.48,1214.08 1200.07,1214.08 1200.65,1214.08 1201.24,1214.08 1201.83,1214.08 1202.41,1214.08 1203,1214.08 1203.58,1214.08 1204.17,1214.08 1204.76,1214.08 1205.34,1214.08 1205.93,1214.08 1206.52,1214.08 1207.1,1214.08 1207.69,1214.08 1208.28,1214.08 1208.86,1214.08 1209.45,1214.08 1210.03,1214.08 1210.62,1214.08 1211.21,1214.08 1211.79,1214.08 1212.38,1214.08 1212.97,1214.08 1213.55,1214.08 1214.14,1214.08 1214.73,1214.08 1215.31,1214.08 1215.9,1214.08 1216.49,1214.08 1217.07,1214.08 1217.66,1214.08 1218.24,1214.08 1218.83,1214.08 1219.42,1214.08 1220,1214.08 1220.59,1214.08 1221.18,1214.08 1221.76,1214.08 1222.35,1214.08 1222.94,1214.08 1223.52,1214.08 1224.11,1214.08 1224.7,1214.08 1225.28,1214.08 1225.87,1214.08 1226.45,1214.08 1227.04,1214.08 1227.63,1214.08 1228.21,1214.08 1228.8,1214.08 1229.39,1214.08 1229.97,1214.08 1230.56,1214.08 1231.15,1214.08 1231.73,1214.08 1232.32,1214.08 1232.91,1214.08 1233.49,1214.08 1234.08,1214.08 1234.66,1214.08 1235.25,1214.08 1235.84,1214.08 1236.42,1214.08 1237.01,1214.08 1237.6,1214.08 1238.18,1214.08 1238.77,1214.08 1239.36,1214.08 1239.94,1214.08 1240.53,1214.08 1241.11,1214.08 1241.7,1214.08 1242.29,1214.08 1242.87,1214.08 1243.46,1214.08 1244.05,1214.08 1244.63,1214.08 1245.22,1214.08 1245.81,1214.08 1246.39,1214.08 1246.98,1214.08 1247.57,1214.08 1248.15,1214.08 1248.74,1214.08 1249.32,1214.08 1249.91,1214.08 1250.5,1214.08 1251.08,1214.08 1251.67,1214.08 1252.26,1214.08 1252.84,1214.08 1253.43,1214.08 1254.02,1214.08 1254.6,1214.08 1255.19,1214.08 1255.78,1214.08 1256.36,1214.08 1256.95,1214.08 1257.53,1214.08 1258.12,1214.08 1258.71,1214.08 1259.29,1214.08 1259.88,1214.08 1260.47,1214.08 1261.05,1214.08 1261.64,1214.08 1262.23,1214.08 1262.81,1214.08 1263.4,1214.08 1263.98,1214.08 1264.57,1214.08 1265.16,1214.08 1265.74,1214.08 1266.33,1214.08 1266.92,1214.08 1267.5,1214.08 1268.09,1214.08 1268.68,1214.08 1269.26,1214.08 1269.85,1214.08 1270.44,1214.08 1271.02,1214.08 1271.61,1214.08 1272.19,1214.08 1272.78,1214.08 1273.37,1214.08 1273.95,1214.08 1274.54,1214.08 1275.13,1214.08 1275.71,1214.08 1276.3,1214.08 1276.89,1214.08 1277.47,1214.08 1278.06,1214.08 1278.65,1214.08 1279.23,1214.08 1279.82,1214.08 1280.4,1214.08 1280.99,1214.08 1281.58,1214.08 1282.16,1214.08 1282.75,1214.08 1283.34,1214.08 1283.92,1214.08 1284.51,1214.08 1285.1,1214.08 1285.68,1214.08 1286.27,1214.08 1286.86,1214.08 1287.44,1214.08 1288.03,1214.08 1288.61,1214.08 1289.2,1214.08 1289.79,1214.08 1290.37,1214.08 1290.96,1214.08 1291.55,1214.08 1292.13,1214.08 1292.72,1214.08 1293.31,1214.08 1293.89,1214.08 1294.48,1214.08 1295.06,1214.08 1295.65,1214.08 1296.24,1214.08 1296.82,1214.08 1297.41,1214.08 1298,1214.08 1298.58,1214.08 1299.17,1214.08 1299.76,1214.08 1300.34,1214.08 1300.93,1214.08 1301.52,1214.08 1302.1,1214.08 1302.69,1214.08 1303.27,1214.08 1303.86,1214.08 1304.45,1214.08 1305.03,1214.08 1305.62,1214.08 1306.21,1214.08 1306.79,1214.08 1307.38,1214.08 1307.97,1214.08 1308.55,1214.08 1309.14,1214.08 1309.73,1214.08 1310.31,1214.08 1310.9,1214.08 1311.48,1214.08 1312.07,1214.08 1312.66,1214.08 1313.24,1214.08 1313.83,1214.08 1314.42,1214.08 1315,1214.08 1315.59,1214.08 1316.18,1214.08 1316.76,1214.08 1317.35,1214.08 1317.93,1214.08 1318.52,1214.08 1319.11,1214.08 1319.69,1214.08 1320.28,1214.08 1320.87,1214.08 1321.45,1214.08 1322.04,1214.08 1322.63,1214.08 1323.21,1214.08 1323.8,1214.08 1324.39,1214.08 1324.97,1214.08 1325.56,1214.08 1326.14,1214.08 1326.73,1214.08 1327.32,1214.08 1327.9,1214.08 1328.49,1214.08 1329.08,1214.08 1329.66,1214.08 1330.25,1214.08 1330.84,1214.08 1331.42,1214.08 1332.01,1214.08 1332.6,1214.08 1333.18,1214.08 1333.77,1214.08 1334.35,1214.08 1334.94,1214.08 1335.53,1214.08 1336.11,1214.08 1336.7,1214.08 1337.29,1214.08 1337.87,1214.08 1338.46,1214.08 1339.05,1214.08 1339.63,1214.08 1340.22,1214.08 1340.8,1214.08 1341.39,1214.08 1341.98,1214.08 1342.56,1214.08 1343.15,1214.08 1343.74,1214.08 1344.32,1214.08 1344.91,1214.08 1345.5,1214.08 1346.08,1214.08 1346.67,1214.08 1347.26,1214.08 1347.84,1214.08 1348.43,1214.08 1349.01,1214.08 1349.6,1214.08 1350.19,1214.08 1350.77,1214.08 1351.36,1214.08 1351.95,1214.08 1352.53,1214.08 1353.12,1214.08 1353.71,1214.08 1354.29,1214.08 1354.88,1214.08 1355.47,1214.08 1356.05,1214.08 1356.64,1214.08 1357.22,1214.08 1357.81,1214.08 1358.4,1214.08 1358.98,1214.08 1359.57,1214.08 1360.16,1214.08 1360.74,1214.08 1361.33,1214.08 1361.92,1214.08 1362.5,1214.08 1363.09,1214.08 1363.68,1214.08 1364.26,1214.08 1364.85,1214.08 1365.43,1214.08 1366.02,1214.08 1366.61,1214.08 1367.19,1214.08 1367.78,1214.08 1368.37,1214.08 1368.95,1214.08 1369.54,1214.08 1370.13,1214.08 1370.71,1214.08 1371.3,1214.08 1371.88,1214.08 1372.47,1214.08 1373.06,1214.08 1373.64,1214.08 1374.23,1214.08 1374.82,1214.08 1375.4,1214.08 1375.99,1214.08 1376.58,1214.08 1377.16,1214.08 1377.75,1214.08 1378.34,1214.08 1378.92,1214.08 1379.51,1214.08 1380.09,1214.08 1380.68,1214.08 1381.27,1214.08 1381.85,1214.08 1382.44,1214.08 1383.03,1214.08 1383.61,1214.08 1384.2,1214.08 1384.79,1214.08 1385.37,1214.08 1385.96,1214.08 1386.55,1214.08 1387.13,1214.08 1387.72,1214.08 1388.3,1214.08 1388.89,1214.08 1389.48,1214.08 1390.06,1214.08 1390.65,1214.08 1391.24,1214.08 1391.82,1214.08 1392.41,1214.08 1393,1214.08 1393.58,1214.08 1394.17,1214.08 1394.75,1214.08 1395.34,1214.08 1395.93,1214.08 1396.51,1214.08 1397.1,1214.08 1397.69,1214.08 1398.27,1214.08 1398.86,1214.08 1399.45,1214.08 1400.03,1214.08 1400.62,1214.08 1401.21,1214.08 1401.79,1214.08 1402.38,1214.08 1402.96,1214.08 1403.55,1214.08 1404.14,1214.08 1404.72,1214.08 1405.31,1214.08 1405.9,1214.08 1406.48,1214.08 1407.07,1214.08 1407.66,1214.08 1408.24,1214.08 1408.83,1214.08 1409.42,1214.08 1410,1214.08 1410.59,1214.08 1411.17,1214.08 1411.76,1214.08 1412.35,1214.08 1412.93,1214.08 1413.52,1214.08 1414.11,1214.08 1414.69,1214.08 1415.28,1214.08 1415.87,1214.08 1416.45,1214.08 1417.04,1214.08 1417.63,1214.08 1418.21,1214.08 1418.8,1214.08 1419.38,1214.08 1419.97,1214.08 1420.56,1214.08 1421.14,1214.08 1421.73,1214.08 1422.32,1214.08 1422.9,1214.08 1423.49,1214.08 1424.08,1214.08 1424.66,1214.08 1425.25,1214.08 1425.83,1214.08 1426.42,1214.08 1427.01,1214.08 1427.59,1214.08 1428.18,1214.08 1428.77,1214.08 1429.35,1214.08 1429.94,1214.08 1430.53,1214.08 1431.11,1214.08 1431.7,1214.08 1432.29,1214.08 1432.87,1214.08 1433.46,1214.08 1434.04,1214.08 1434.63,1214.08 1435.22,1214.08 1435.8,1214.08 1436.39,1214.08 1436.98,1214.08 1437.56,1214.08 1438.15,1214.08 1438.74,1214.08 1439.32,1214.08 1439.91,1214.08 1440.5,1214.08 1441.08,1214.08 1441.67,1214.08 1442.25,1214.08 1442.84,1214.08 1443.43,1214.08 1444.01,1214.08 1444.6,1214.08 1445.19,1214.08 1445.77,1214.08 1446.36,1214.08 1446.95,1214.08 1447.53,1214.08 1448.12,1214.08 1448.7,1214.08 1449.29,1214.08 1449.88,1214.08 1450.46,1214.08 1451.05,1214.08 1451.64,1214.08 1452.22,1214.08 1452.81,1214.08 1453.4,1214.08 1453.98,1214.08 1454.57,1214.08 1455.16,1214.08 1455.74,1214.08 1456.33,1214.08 1456.91,1214.08 1457.5,1214.08 1458.09,1214.08 1458.67,1214.08 1459.26,1214.08 1459.85,1214.08 1460.43,1214.08 1461.02,1214.08 1461.61,1214.08 1462.19,1214.08 1462.78,1214.08 1463.37,1214.08 1463.95,1214.08 1464.54,1214.08 1465.12,1214.08 1465.71,1214.08 1466.3,1214.08 1466.88,1214.08 1467.47,1214.08 1468.06,1214.08 1468.64,1214.08 1469.23,1214.08 1469.82,1214.08 1470.4,1214.08 1470.99,1214.08 1471.57,1214.08 1472.16,1214.08 1472.75,1214.08 1473.33,1214.08 1473.92,1214.08 1474.51,1214.08 1475.09,1214.08 1475.68,1214.08 1476.27,1214.08 1476.85,1214.08 1477.44,1214.08 1478.03,1214.08 1478.61,1214.08 1479.2,1214.08 1479.78,1214.08 1480.37,1214.08 1480.96,1214.08 1481.54,1214.08 1482.13,1214.08 1482.72,1214.08 1483.3,1214.08 1483.89,1214.08 1484.48,1214.08 1485.06,1214.08 1485.65,1214.08 1486.24,1214.08 1486.82,1214.08 1487.41,1214.08 1487.99,1214.08 1488.58,1214.08 1489.17,1214.08 1489.75,1214.08 1490.34,1214.08 1490.93,1214.08 1491.51,1214.08 1492.1,1214.08 1492.69,1214.08 1493.27,1214.08 1493.86,1214.08 1494.45,1214.08 1495.03,1214.08 1495.62,1214.08 1496.2,1214.08 1496.79,1214.08 1497.38,1214.08 1497.96,1214.08 1498.55,1214.08 1499.14,1214.08 1499.72,1214.08 1500.31,1214.08 1500.9,1214.08 1501.48,1214.08 1502.07,1214.08 1502.65,1214.08 1503.24,1214.08 1503.83,1214.08 1504.41,1214.08 1505,1214.08 1505.59,1214.08 1506.17,1214.08 1506.76,1214.08 1507.35,1214.08 1507.93,1214.08 1508.52,1214.08 1509.11,1214.08 1509.69,1214.08 1510.28,1214.08 1510.86,1214.08 1511.45,1214.08 1512.04,1214.08 1512.62,1214.08 1513.21,1214.08 1513.8,1214.08 1514.38,1214.08 1514.97,1214.08 1515.56,1214.08 1516.14,1214.08 1516.73,1214.08 1517.32,1214.08 1517.9,1214.08 1518.49,1214.08 1519.07,1214.08 1519.66,1214.08 1520.25,1214.08 1520.83,1214.08 1521.42,1214.08 1522.01,1214.08 1522.59,1214.08 1523.18,1214.08 1523.77,1214.08 1524.35,1214.08 1524.94,1214.08 1525.52,1214.08 1526.11,1214.08 1526.7,1214.08 1527.28,1214.08 1527.87,1214.08 1528.46,1214.08 1529.04,1214.08 1529.63,1214.08 1530.22,1214.08 1530.8,1214.08 1531.39,1214.08 1531.98,1214.08 1532.56,1214.08 1533.15,1214.08 1533.73,1214.08 1534.32,1214.08 1534.91,1214.08 1535.49,1214.08 1536.08,1214.08 1536.67,1214.08 1537.25,1214.08 1537.84,1214.08 1538.43,1214.08 1539.01,1214.08 1539.6,1214.08 1540.19,1214.08 1540.77,1214.08 1541.36,1214.08 1541.94,1214.08 1542.53,1214.08 1543.12,1214.08 1543.7,1214.08 1544.29,1214.08 1544.88,1214.08 1545.46,1214.08 1546.05,1214.08 1546.64,1214.08 1547.22,1214.08 1547.81,1214.08 1548.4,1214.08 1548.98,1214.08 1549.57,1214.08 1550.15,1214.08 1550.74,1214.08 1551.33,1214.08 1551.91,1214.08 1552.5,1214.08 1553.09,1214.08 1553.67,1214.08 1554.26,1214.08 1554.85,1214.08 1555.43,1214.08 1556.02,1214.08 1556.6,1214.08 1557.19,1214.08 1557.78,1214.08 1558.36,1214.08 1558.95,1214.08 1559.54,1214.08 1560.12,1214.08 1560.71,1214.08 1561.3,1214.08 1561.88,1214.08 1562.47,1214.08 1563.06,1214.08 1563.64,1214.08 1564.23,1214.08 1564.81,1214.08 1565.4,1214.08 1565.99,1214.08 1566.57,1214.08 1567.16,1214.08 1567.75,1214.08 1568.33,1214.08 1568.92,1214.08 1569.51,1214.08 1570.09,1214.08 1570.68,1214.08 1571.27,1214.08 1571.85,1214.08 1572.44,1214.08 1573.02,1214.08 1573.61,1214.08 1574.2,1214.08 1574.78,1214.08 1575.37,1214.08 1575.96,1214.08 1576.54,1214.08 1577.13,1214.08 1577.72,1214.08 1578.3,1214.08 1578.89,1214.08 1579.47,1214.08 1580.06,1214.08 1580.65,1214.08 1581.23,1214.08 1581.82,1214.08 1582.41,1214.08 1582.99,1214.08 1583.58,1214.08 1584.17,1214.08 1584.75,1214.08 1585.34,1214.08 1585.93,1214.08 1586.51,1214.08 1587.1,1214.08 1587.68,1214.08 1588.27,1214.08 1588.86,1214.08 1589.44,1214.08 1590.03,1214.08 1590.62,1214.08 1591.2,1214.08 1591.79,1214.08 1592.38,1214.08 1592.96,1214.08 1593.55,1214.08 1594.14,1214.08 1594.72,1214.08 1595.31,1214.08 1595.89,1214.08 1596.48,1214.08 1597.07,1214.08 1597.65,1214.08 1598.24,1214.08 1598.83,1214.08 1599.41,1214.08 1600,1214.08 1600.59,1214.08 1601.17,1214.08 1601.76,1214.08 1602.34,1214.08 1602.93,1214.08 1603.52,1214.08 1604.1,1214.08 1604.69,1214.08 1605.28,1214.08 1605.86,1214.08 1606.45,1214.08 1607.04,1214.08 1607.62,1214.08 1608.21,1214.08 1608.8,1214.08 1609.38,1214.08 1609.97,1214.08 1610.55,1214.08 1611.14,1214.08 1611.73,1214.08 1612.31,1214.08 1612.9,1214.08 1613.49,1214.08 1614.07,1214.08 1614.66,1214.08 1615.25,1214.08 1615.83,1214.08 1616.42,1214.08 1617.01,1214.08 1617.59,1214.08 1618.18,1214.08 1618.76,1214.08 1619.35,1214.08 1619.94,1214.08 1620.52,1214.08 1621.11,1214.08 1621.7,1214.08 1622.28,1214.08 1622.87,1214.08 1623.46,1214.08 1624.04,1214.08 1624.63,1214.08 1625.22,1214.08 1625.8,1214.08 1626.39,1214.08 1626.97,1214.08 1627.56,1214.08 1628.15,1214.08 1628.73,1214.08 1629.32,1214.08 1629.91,1214.08 1630.49,1214.08 1631.08,1214.08 1631.67,1214.08 1632.25,1214.08 1632.84,1214.08 1633.42,1214.08 1634.01,1214.08 1634.6,1214.08 1635.18,1214.08 1635.77,1214.08 1636.36,1214.08 1636.94,1214.08 1637.53,1214.08 1638.12,1214.08 1638.7,1214.08 1639.29,1214.08 1639.88,1214.08 1640.46,1214.08 1641.05,1214.08 1641.63,1214.08 1642.22,1214.08 1642.81,1214.08 1643.39,1214.08 1643.98,1214.08 1644.57,1214.08 1645.15,1214.08 1645.74,1214.08 1646.33,1214.08 1646.91,1214.08 1647.5,1214.08 1648.09,1214.08 1648.67,1214.08 1649.26,1214.08 1649.84,1214.08 1650.43,1214.08 1651.02,1214.08 1651.6,1214.08 1652.19,1214.08 1652.78,1214.08 1653.36,1214.08 1653.95,1214.08 1654.54,1214.08 1655.12,1214.08 1655.71,1214.08 1656.29,1214.08 1656.88,1214.08 1657.47,1214.08 1658.05,1214.08 1658.64,1214.08 1659.23,1214.08 1659.81,1214.08 1660.4,1214.08 1660.99,1214.08 1661.57,1214.08 1662.16,1214.08 1662.75,1214.08 1663.33,1214.08 1663.92,1214.08 1664.5,1214.08 1665.09,1214.08 1665.68,1214.08 1666.26,1214.08 1666.85,1214.08 1667.44,1214.08 1668.02,1214.08 1668.61,1214.08 1669.2,1214.08 1669.78,1214.08 1670.37,1214.08 1670.96,1214.08 1671.54,1214.08 1672.13,1214.08 1672.71,1214.08 1673.3,1214.08 1673.89,1214.08 1674.47,1214.08 1675.06,1214.08 1675.65,1214.08 1676.23,1214.08 1676.82,1214.08 1677.41,1214.08 1677.99,1214.08 1678.58,1214.08 1679.17,1214.08 1679.75,1214.08 1680.34,1214.08 1680.92,1214.08 1681.51,1214.08 1682.1,1214.08 1682.68,1214.08 1683.27,1214.08 1683.86,1214.08 1684.44,1214.08 1685.03,1214.08 1685.62,1214.08 1686.2,1214.08 1686.79,1214.08 1687.37,1214.08 1687.96,1214.08 1688.55,1214.08 1689.13,1214.08 1689.72,1214.08 1690.31,1214.08 1690.89,1214.08 1691.48,1214.08 1692.07,1214.08 1692.65,1214.08 1693.24,1214.08 1693.83,1214.08 1694.41,1214.08 1695,1214.08 1695.58,1214.08 1696.17,1214.08 1696.76,1214.08 1697.34,1214.08 1697.93,1214.08 1698.52,1214.08 1699.1,1214.08 1699.69,1214.08 1700.28,1214.08 1700.86,1214.08 1701.45,1214.08 1702.04,1214.08 1702.62,1214.08 1703.21,1214.08 1703.79,1214.08 1704.38,1214.08 1704.97,1214.08 1705.55,1214.08 1706.14,1214.08 1706.73,1214.08 1707.31,1214.08 1707.9,1214.08 1708.49,1214.08 1709.07,1214.08 1709.66,1214.08 1710.24,1214.08 1710.83,1214.08 1711.42,1214.08 1712,1214.08 1712.59,1214.08 1713.18,1214.08 1713.76,1214.08 1714.35,1214.08 1714.94,1214.08 1715.52,1214.08 1716.11,1214.08 1716.7,1214.08 1717.28,1214.08 1717.87,1214.08 1718.45,1214.08 1719.04,1214.08 1719.63,1214.08 1720.21,1214.08 1720.8,1214.08 1721.39,1214.08 1721.97,1214.08 1722.56,1214.08 1723.15,1214.08 1723.73,1214.08 1724.32,1214.08 1724.91,1214.08 1725.49,1214.08 1726.08,1214.08 1726.66,1214.08 1727.25,1214.08 1727.84,1214.08 1728.42,1214.08 1729.01,1214.08 1729.6,1214.08 1730.18,1214.08 1730.77,1214.08 1731.36,1214.08 1731.94,1214.08 1732.53,1214.08 1733.11,1214.08 1733.7,1214.08 1734.29,1214.08 1734.87,1214.08 1735.46,1214.08 1736.05,1214.08 1736.63,1214.08 1737.22,1214.08 1737.81,1214.08 1738.39,1214.08 1738.98,1214.08 1739.57,1214.08 1740.15,1214.08 1740.74,1214.08 1741.32,1214.08 1741.91,1214.08 1742.5,1214.08 1743.08,1214.08 1743.67,1214.08 1744.26,1214.08 1744.84,1214.08 1745.43,1214.08 1746.02,1214.08 1746.6,1214.08 1747.19,1214.08 1747.78,1214.08 1748.36,1214.08 1748.95,1214.08 1749.53,1214.08 1750.12,1214.08 1750.71,1214.08 1751.29,1214.08 1751.88,1214.08 1752.47,1214.08 1753.05,1214.08 1753.64,1214.08 1754.23,1214.08 1754.81,1214.08 1755.4,1214.08 1755.99,1214.08 1756.57,1214.08 1757.16,1214.08 1757.74,1214.08 1758.33,1214.08 1758.92,1214.08 1759.5,1214.08 1760.09,1214.08 1760.68,1214.08 1761.26,1214.08 1761.85,1214.08 1762.44,1214.08 1763.02,1214.08 1763.61,1214.08 1764.19,1214.08 1764.78,1214.08 1765.37,1214.08 1765.95,1214.08 1766.54,1214.08 1767.13,1214.08 1767.71,1214.08 1768.3,1214.08 1768.89,1214.08 1769.47,1214.08 1770.06,1214.08 1770.65,1214.08 1771.23,1214.08 1771.82,1214.08 1772.4,1214.08 1772.99,1214.08 1773.58,1214.08 1774.16,1214.08 1774.75,1214.08 1775.34,1214.08 1775.92,1214.08 1776.51,1214.08 1777.1,1214.08 1777.68,1214.08 1778.27,1214.08 1778.86,1214.08 1779.44,1214.08 1780.03,1214.08 1780.61,1214.08 1781.2,1214.08 1781.79,1214.08 1782.37,1214.08 1782.96,1214.08 1783.55,1214.08 1784.13,1214.08 1784.72,1214.08 1785.31,1214.08 1785.89,1214.08 1786.48,1214.08 1787.06,1214.08 1787.65,1214.08 1788.24,1214.08 1788.82,1214.08 1789.41,1214.08 1790,1214.08 1790.58,1214.08 1791.17,1214.08 1791.76,1214.08 1792.34,1214.08 1792.93,1214.08 1793.52,1214.08 1794.1,1214.08 1794.69,1214.08 1795.27,1214.08 1795.86,1214.08 1796.45,1214.08 1797.03,1214.08 1797.62,1214.08 1798.21,1214.08 1798.79,1214.08 1799.38,1214.08 1799.97,1214.08 1800.55,1214.08 1801.14,1214.08 1801.73,1214.08 1802.31,1214.08 1802.9,1214.08 1803.48,1214.08 1804.07,1214.08 1804.66,1214.08 1805.24,1214.08 1805.83,1214.08 1806.42,1214.08 1807,1214.08 1807.59,1214.08 1808.18,1214.08 1808.76,1214.08 1809.35,1214.08 1809.94,1214.08 1810.52,1214.08 1811.11,1214.08 1811.69,1214.08 1812.28,1214.08 1812.87,1214.08 1813.45,1214.08 1814.04,1214.08 1814.63,1214.08 1815.21,1214.08 1815.8,1214.08 1816.39,1214.08 1816.97,1214.08 1817.56,1214.08 1818.14,1214.08 1818.73,1214.08 1819.32,1214.08 1819.9,1214.08 1820.49,1214.08 1821.08,1214.08 1821.66,1214.08 1822.25,1214.08 1822.84,1214.08 1823.42,1214.08 1824.01,1214.08 1824.6,1214.08 1825.18,1214.08 1825.77,1214.08 1826.35,1214.08 1826.94,1214.08 1827.53,1214.08 1828.11,1214.08 1828.7,1214.08 1829.29,1214.08 1829.87,1214.08 1830.46,1214.08 1831.05,1214.08 1831.63,1214.08 1832.22,1214.08 1832.81,1214.08 1833.39,1214.08 1833.98,1214.08 1834.56,1214.08 1835.15,1214.08 1835.74,1214.08 1836.32,1214.08 1836.91,1214.08 1837.5,1214.08 1838.08,1214.08 1838.67,1214.08 1839.26,1214.08 1839.84,1214.08 1840.43,1214.08 1841.01,1214.08 1841.6,1214.08 1842.19,1214.08 1842.77,1214.08 1843.36,1214.08 1843.95,1214.08 1844.53,1214.08 1845.12,1214.08 1845.71,1214.08 1846.29,1214.08 1846.88,1214.08 1847.47,1214.08 1848.05,1214.08 1848.64,1214.08 1849.22,1214.08 1849.81,1214.08 1850.4,1214.08 1850.98,1214.08 1851.57,1214.08 1852.16,1214.08 1852.74,1214.08 1853.33,1214.08 1853.92,1214.08 1854.5,1214.08 1855.09,1214.08 1855.68,1214.08 1856.26,1214.08 1856.85,1214.08 1857.43,1214.08 1858.02,1214.08 1858.61,1214.08 1859.19,1214.08 1859.78,1214.08 1860.37,1214.08 1860.95,1214.08 1861.54,1214.08 1862.13,1214.08 1862.71,1214.08 1863.3,1214.08 1863.88,1214.08 1864.47,1214.08 1865.06,1214.08 1865.64,1214.08 1866.23,1214.08 1866.82,1214.08 1867.4,1214.08 1867.99,1214.08 1868.58,1214.08 1869.16,1214.08 1869.75,1214.08 1870.34,1214.08 1870.92,1214.08 1871.51,1214.08 1872.09,1214.08 1872.68,1214.08 1873.27,1214.08 1873.85,1214.08 1874.44,1214.08 1875.03,1214.08 1875.61,1214.08 1876.2,1214.08 1876.79,1214.08 1877.37,1214.08 1877.96,1214.08 1878.55,1214.08 1879.13,1214.08 1879.72,1214.08 1880.3,1214.08 1880.89,1214.08 1881.48,1214.08 1882.06,1214.08 1882.65,1214.08 1883.24,1214.08 1883.82,1214.08 1884.41,1214.08 1885,1214.08 1885.58,1214.08 1886.17,1214.08 1886.76,1214.08 1887.34,1214.08 1887.93,1214.08 1888.51,1214.08 1889.1,1214.08 1889.69,1214.08 1890.27,1214.08 1890.86,1214.08 1891.45,1214.08 1892.03,1214.08 1892.62,1214.08 1893.21,1214.08 1893.79,1214.08 1894.38,1214.08 1894.96,1214.08 1895.55,1214.08 1896.14,1214.08 1896.72,1214.08 1897.31,1214.08 1897.9,1214.08 1898.48,1214.08 1899.07,1214.08 1899.66,1214.08 1900.24,1214.08 1900.83,1214.08 1901.42,1214.08 1902,1214.08 1902.59,1214.08 1903.17,1214.08 1903.76,1214.08 1904.35,1214.08 1904.93,1214.08 1905.52,1214.08 1906.11,1214.08 1906.69,1214.08 1907.28,1214.08 1907.87,1214.08 1908.45,1214.08 1909.04,1214.08 1909.63,1214.08 1910.21,1214.08 1910.8,1214.08 1911.38,1214.08 1911.97,1214.08 1912.56,1214.08 1913.14,1214.08 1913.73,1214.08 1914.32,1214.08 1914.9,1214.08 1915.49,1214.08 1916.08,1214.08 1916.66,1214.08 1917.25,1214.08 1917.83,1214.08 1918.42,1214.08 1919.01,1214.08 1919.59,1214.08 1920.18,1214.08 1920.77,1214.08 1921.35,1214.08 1921.94,1214.08 1922.53,1214.08 1923.11,1214.08 1923.7,1214.08 1924.29,1214.08 1924.87,1214.08 1925.46,1214.08 1926.04,1214.08 1926.63,1214.08 1927.22,1214.08 1927.8,1214.08 1928.39,1214.08 1928.98,1214.08 1929.56,1214.08 1930.15,1214.08 1930.74,1214.08 1931.32,1214.08 1931.91,1214.08 1932.5,1214.08 1933.08,1214.08 1933.67,1214.08 1934.25,1214.08 1934.84,1214.08 1935.43,1214.08 1936.01,1214.08 1936.6,1214.08 1937.19,1214.08 1937.77,1214.08 1938.36,1214.08 1938.95,1214.08 1939.53,1214.08 1940.12,1214.08 1940.71,1214.08 1941.29,1214.08 1941.88,1214.08 1942.46,1214.08 1943.05,1214.08 1943.64,1214.08 1944.22,1214.08 1944.81,1214.08 1945.4,1214.08 1945.98,1214.08 1946.57,1214.08 1947.16,1214.08 1947.74,1214.08 1948.33,1214.08 1948.91,1214.08 1949.5,1214.08 1950.09,1214.08 1950.67,1214.08 1951.26,1214.08 1951.85,1214.08 1952.43,1214.08 1953.02,1214.08 1953.61,1214.08 1954.19,1214.08 1954.78,1214.08 1955.37,1214.08 1955.95,1214.08 1956.54,1214.08 1957.12,1214.08 1957.71,1214.08 1958.3,1214.08 1958.88,1214.08 1959.47,1214.08 1960.06,1214.08 1960.64,1214.08 1961.23,1214.08 1961.82,1214.08 1962.4,1214.08 1962.99,1214.08 1963.58,1214.08 1964.16,1214.08 1964.75,1214.08 1965.33,1214.08 1965.92,1214.08 1966.51,1214.08 1967.09,1214.08 1967.68,1214.08 1968.27,1214.08 1968.85,1214.08 1969.44,1214.08 1970.03,1214.08 1970.61,1214.08 1971.2,1214.08 1971.78,1214.08 1972.37,1214.08 1972.96,1214.08 1973.54,1214.08 1974.13,1214.08 1974.72,1214.08 1975.3,1214.08 1975.89,1214.08 1976.48,1214.08 1977.06,1214.08 1977.65,1214.08 1978.24,1214.08 1978.82,1214.08 1979.41,1214.08 1979.99,1214.08 1980.58,1214.08 1981.17,1214.08 1981.75,1214.08 1982.34,1214.08 1982.93,1214.08 1983.51,1214.08 1984.1,1214.08 1984.69,1214.08 1985.27,1214.08 1985.86,1214.08 1986.45,1214.08 1987.03,1214.08 1987.62,1214.08 1988.2,1214.08 1988.79,1214.08 1989.38,1214.08 1989.96,1214.08 1990.55,1214.08 1991.14,1214.08 1991.72,1214.08 1992.31,1214.08 1992.9,1214.08 1993.48,1214.08 1994.07,1214.08 1994.65,1214.08 1995.24,1214.08 1995.83,1214.08 1996.41,1214.08 1997,1214.08 1997.59,1214.08 1998.17,1214.08 1998.76,1214.08 1999.35,1214.08 1999.93,1214.08 2000.52,1214.08 2001.11,1214.08 2001.69,1214.08 2002.28,1214.08 2002.86,1214.08 2003.45,1214.08 2004.04,1214.08 2004.62,1214.08 2005.21,1214.08 2005.8,1214.08 2006.38,1214.08 2006.97,1214.08 2007.56,1214.08 2008.14,1214.08 2008.73,1214.08 2009.32,1214.08 2009.9,1214.08 2010.49,1214.08 2011.07,1214.08 2011.66,1214.08 2012.25,1214.08 2012.83,1214.08 2013.42,1214.08 2014.01,1214.08 2014.59,1214.08 2015.18,1214.08 2015.77,1214.08 2016.35,1214.08 2016.94,1214.08 2017.53,1214.08 2018.11,1214.08 2018.7,1214.08 2019.28,1214.08 2019.87,1214.08 2020.46,1214.08 2021.04,1214.08 2021.63,1214.08 2022.22,1214.08 2022.8,1214.08 2023.39,1214.08 2023.98,1214.08 2024.56,1214.08 2025.15,1214.08 2025.73,1214.08 2026.32,1214.08 2026.91,1214.08 2027.49,1214.08 2028.08,1214.08 2028.67,1214.08 2029.25,1214.08 2029.84,1214.08 2030.43,1214.08 2031.01,1214.08 2031.6,1214.08 2032.19,1214.08 2032.77,1214.08 2033.36,1214.08 2033.94,1214.08 2034.53,1214.08 2035.12,1214.08 2035.7,1214.08 2036.29,1214.08 2036.88,1214.08 2037.46,1214.08 2038.05,1214.08 2038.64,1214.08 2039.22,1214.08 2039.81,1214.08 2040.4,1214.08 2040.98,1214.08 2041.57,1214.08 2042.15,1214.08 2042.74,1214.08 2043.33,1214.08 2043.91,1214.08 2044.5,1214.08 2045.09,1214.08 2045.67,1214.08 2046.26,1214.08 2046.85,1214.08 2047.43,1214.08 2048.02,1214.08 2048.6,1214.08 2049.19,1214.08 2049.78,1214.08 2050.36,1214.08 2050.95,1214.08 2051.54,1214.08 2052.12,1214.08 2052.71,1214.08 2053.3,1214.08 2053.88,1214.08 2054.47,1214.08 2055.06,1214.08 2055.64,1214.08 2056.23,1214.08 2056.81,1214.08 2057.4,1214.08 2057.99,1214.08 2058.57,1214.08 2059.16,1214.08 2059.75,1214.08 2060.33,1214.08 2060.92,1214.08 2061.51,1214.08 2062.09,1214.08 2062.68,1214.08 2063.27,1214.08 2063.85,1214.08 2064.44,1214.08 2065.02,1214.08 2065.61,1214.08 2066.2,1214.08 2066.78,1214.08 2067.37,1214.08 2067.96,1214.08 2068.54,1214.08 2069.13,1214.08 2069.72,1214.08 2070.3,1214.08 2070.89,1214.08 2071.48,1214.08 2072.06,1214.08 2072.65,1214.08 2073.23,1214.08 2073.82,1214.08 2074.41,1214.08 2074.99,1214.08 2075.58,1214.08 2076.17,1214.08 2076.75,1214.08 2077.34,1214.08 2077.93,1214.08 2078.51,1214.08 2079.1,1214.08 2079.68,1214.08 2080.27,1214.08 2080.86,1214.08 2081.44,1214.08 2082.03,1214.08 2082.62,1214.08 2083.2,1214.08 2083.79,1214.08 2084.38,1214.08 2084.96,1214.08 2085.55,1214.08 2086.14,1214.08 2086.72,1214.08 2087.31,1214.08 2087.89,1214.08 2088.48,1214.08 2089.07,1214.08 2089.65,1214.08 2090.24,1214.08 2090.83,1214.08 2091.41,1214.08 2092,1214.08 2092.59,1214.08 2093.17,1214.08 2093.76,1214.08 2094.35,1214.08 2094.93,1214.08 2095.52,1214.08 2096.1,1214.08 2096.69,1214.08 2097.28,1214.08 2097.86,1214.08 2098.45,1214.08 2099.04,1214.08 2099.62,1214.08 2100.21,1214.08 2100.8,1214.08 2101.38,1214.08 2101.97,1214.08 2102.55,1214.08 2103.14,1214.08 2103.73,1214.08 2104.31,1214.08 2104.9,1214.08 2105.49,1214.08 2106.07,1214.08 2106.66,1214.08 2107.25,1214.08 2107.83,1214.08 2108.42,1214.08 2109.01,1214.08 2109.59,1214.08 2110.18,1214.08 2110.76,1214.08 2111.35,1214.08 2111.94,1214.08 2112.52,1214.08 2113.11,1214.08 2113.7,1214.08 2114.28,1214.08 2114.87,1214.08 2115.46,1214.08 2116.04,1214.08 2116.63,1214.08 2117.22,1214.08 2117.8,1214.08 2118.39,1214.08 2118.97,1214.08 2119.56,1214.08 2120.15,1214.08 2120.73,1214.08 2121.32,1214.08 2121.91,1214.08 2122.49,1214.08 2123.08,1214.08 2123.67,1214.08 2124.25,1214.08 2124.84,1214.08 2125.42,1214.08 2126.01,1214.08 2126.6,1214.08 2127.18,1214.08 2127.77,1214.08 2128.36,1214.08 2128.94,1214.08 2129.53,1214.08 2130.12,1214.08 2130.7,1214.08 2131.29,1214.08 2131.88,1214.08 2132.46,1214.08 2133.05,1214.08 2133.63,1214.08 2134.22,1214.08 2134.81,1214.08 2135.39,1214.08 2135.98,1214.08 2136.57,1214.08 2137.15,1214.08 2137.74,1214.08 2138.33,1214.08 2138.91,1214.08 2139.5,1214.08 2140.09,1214.08 2140.67,1214.08 2141.26,1214.08 2141.84,1214.08 2142.43,1214.08 2143.02,1214.08 2143.6,1214.08 2144.19,1214.08 2144.78,1214.08 2145.36,1214.08 2145.95,1214.08 2146.54,1214.08 2147.12,1214.08 2147.71,1214.08 2148.3,1214.08 2148.88,1214.08 2149.47,1214.08 2150.05,1214.08 2150.64,1214.08 2151.23,1214.08 2151.81,1214.08 2152.4,1214.08 2152.99,1214.08 2153.57,1214.08 2154.16,1214.08 2154.75,1214.08 2155.33,1214.08 2155.92,1214.08 2156.5,1214.08 2157.09,1214.08 2157.68,1214.08 2158.26,1214.08 \"/>\n<path clip-path=\"url(#clip002)\" d=\"M986.025 1213.89 L986.612 1213.89 L987.198 1213.89 L987.785 1213.89 L988.371 1213.89 L988.957 1213.89 L989.544 1213.89 L990.13 1213.89 L990.717 1213.89 L991.303 1213.89 L991.889 1213.89 L992.476 1213.89 L993.062 1213.89 L993.649 1213.89 L994.235 1213.89 L994.822 1213.89 L995.408 1213.89 L995.994 1213.89 L996.581 1213.89 L997.167 1213.89 L997.754 1213.89 L998.34 1213.89 L998.926 1213.89 L999.513 1213.89 L1000.1 1213.89 L1000.69 1213.89 L1001.27 1213.89 L1001.86 1213.89 L1002.44 1213.89 L1003.03 1213.89 L1003.62 1213.89 L1004.2 1213.89 L1004.79 1213.89 L1005.38 1213.89 L1005.96 1213.89 L1006.55 1213.89 L1007.14 1213.89 L1007.72 1213.89 L1008.31 1213.89 L1008.9 1213.89 L1009.48 1213.89 L1010.07 1213.89 L1010.65 1213.89 L1011.24 1213.89 L1011.83 1213.89 L1012.41 1213.89 L1013 1213.89 L1013.59 1213.89 L1014.17 1213.89 L1014.76 1213.89 L1015.35 1213.89 L1015.93 1213.89 L1016.52 1213.89 L1017.11 1213.89 L1017.69 1213.89 L1018.28 1213.89 L1018.86 1213.89 L1019.45 1213.89 L1020.04 1213.89 L1020.62 1213.89 L1021.21 1213.89 L1021.8 1213.89 L1022.38 1213.89 L1022.97 1213.89 L1023.56 1213.89 L1024.14 1213.89 L1024.73 1213.89 L1025.32 1213.89 L1025.9 1213.89 L1026.49 1213.89 L1027.07 1213.89 L1027.66 1213.89 L1028.25 1213.89 L1028.83 1213.89 L1029.42 1213.89 L1030.01 1213.89 L1030.59 1213.89 L1031.18 1213.89 L1031.77 1213.89 L1032.35 1213.89 L1032.94 1213.89 L1033.52 1213.89 L1034.11 1213.89 L1034.7 1213.89 L1035.28 1213.89 L1035.87 1213.89 L1036.46 1213.89 L1037.04 1213.89 L1037.63 1213.89 L1038.22 1213.89 L1038.8 1213.89 L1039.39 1213.89 L1039.98 1213.89 L1040.56 1213.89 L1041.15 1213.89 L1041.73 1213.89 L1042.32 1213.89 L1042.91 1213.89 L1043.49 1213.89 L1044.08 1213.89 L1044.67 1213.89 L1045.25 1213.89 L1045.84 1213.89 L1046.43 1213.89 L1047.01 1213.89 L1047.6 1213.89 L1048.19 1213.89 L1048.77 1213.89 L1049.36 1213.89 L1049.94 1213.89 L1050.53 1213.89 L1051.12 1213.89 L1051.7 1213.89 L1052.29 1213.89 L1052.88 1213.89 L1053.46 1213.89 L1054.05 1213.89 L1054.64 1213.89 L1055.22 1213.89 L1055.81 1213.89 L1056.39 1213.89 L1056.98 1213.89 L1057.57 1213.89 L1058.15 1213.89 L1058.74 1213.89 L1059.33 1213.89 L1059.91 1213.89 L1060.5 1213.89 L1061.09 1213.89 L1061.67 1213.89 L1062.26 1213.89 L1062.85 1213.89 L1063.43 1213.89 L1064.02 1213.89 L1064.6 1213.89 L1065.19 1213.89 L1065.78 1213.89 L1066.36 1213.89 L1066.95 1213.89 L1067.54 1213.89 L1068.12 1213.89 L1068.71 1213.89 L1069.3 1213.89 L1069.88 1213.89 L1070.47 1213.89 L1071.06 1213.89 L1071.64 1213.89 L1072.23 1213.89 L1072.81 1213.89 L1073.4 1213.89 L1073.99 1213.89 L1074.57 1213.89 L1075.16 1213.89 L1075.75 1213.89 L1076.33 1213.89 L1076.92 1213.89 L1077.51 1213.89 L1078.09 1213.89 L1078.68 1213.89 L1079.26 1213.89 L1079.85 1213.89 L1080.44 1213.89 L1081.02 1213.89 L1081.61 1213.89 L1082.2 1213.89 L1082.78 1213.89 L1083.37 1213.89 L1083.96 1213.89 L1084.54 1213.89 L1085.13 1213.89 L1085.72 1213.89 L1086.3 1213.89 L1086.89 1213.89 L1087.47 1213.89 L1088.06 1213.89 L1088.65 1213.89 L1089.23 1213.89 L1089.82 1213.89 L1090.41 1213.89 L1090.99 1213.89 L1091.58 1213.89 L1092.17 1213.89 L1092.75 1213.89 L1093.34 1213.89 L1093.93 1213.89 L1094.51 1213.89 L1095.1 1213.89 L1095.68 1213.89 L1096.27 1213.89 L1096.86 1213.89 L1097.44 1213.89 L1098.03 1213.89 L1098.62 1213.89 L1099.2 1213.89 L1099.79 1213.89 L1100.38 1213.89 L1100.96 1213.89 L1101.55 1213.89 L1102.14 1213.89 L1102.72 1213.89 L1103.31 1213.89 L1103.89 1213.89 L1104.48 1213.89 L1105.07 1213.89 L1105.65 1213.89 L1106.24 1213.89 L1106.83 1213.89 L1107.41 1213.89 L1108 1213.89 L1108.59 1213.89 L1109.17 1213.89 L1109.76 1213.89 L1110.34 1213.89 L1110.93 1213.89 L1111.52 1213.89 L1112.1 1213.89 L1112.69 1213.89 L1113.28 1213.89 L1113.86 1213.89 L1114.45 1213.89 L1115.04 1213.89 L1115.62 1213.89 L1116.21 1213.89 L1116.8 1213.89 L1117.38 1213.89 L1117.97 1213.89 L1118.55 1213.89 L1119.14 1213.89 L1119.73 1213.89 L1120.31 1213.89 L1120.9 1213.89 L1121.49 1213.89 L1122.07 1213.89 L1122.66 1213.89 L1123.25 1213.89 L1123.83 1213.89 L1124.42 1213.89 L1125.01 1213.89 L1125.59 1213.89 L1126.18 1213.89 L1126.76 1213.89 L1127.35 1213.89 L1127.94 1213.89 L1128.52 1213.89 L1129.11 1213.89 L1129.7 1213.89 L1130.28 1213.89 L1130.87 1213.89 L1131.46 1213.89 L1132.04 1213.89 L1132.63 1213.89 L1133.21 1213.89 L1133.8 1213.89 L1134.39 1213.89 L1134.97 1213.89 L1135.56 1213.89 L1136.15 1213.89 L1136.73 1213.89 L1137.32 1213.89 L1137.91 1213.89 L1138.49 1213.89 L1139.08 1213.89 L1139.67 1213.89 L1140.25 1213.89 L1140.84 1213.89 L1141.42 1213.89 L1142.01 1213.89 L1142.6 1213.89 L1143.18 1213.89 L1143.77 1213.89 L1144.36 1213.89 L1144.94 1213.89 L1145.53 1213.89 L1146.12 1213.89 L1146.7 1213.89 L1147.29 1213.89 L1147.88 1213.89 L1148.46 1213.89 L1149.05 1213.89 L1149.63 1213.89 L1150.22 1213.89 L1150.81 1213.89 L1151.39 1213.89 L1151.98 1213.89 L1152.57 1213.89 L1153.15 1213.89 L1153.74 1213.89 L1154.33 1213.89 L1154.91 1213.89 L1155.5 1213.89 L1156.09 1213.89 L1156.67 1213.89 L1157.26 1213.89 L1157.84 1213.89 L1158.43 1213.89 L1159.02 1213.89 L1159.6 1213.89 L1160.19 1213.89 L1160.78 1213.89 L1161.36 1213.89 L1161.95 1213.89 L1162.54 1213.89 L1163.12 1213.89 L1163.71 1213.89 L1164.29 1213.89 L1164.88 1213.89 L1165.47 1213.89 L1166.05 1213.89 L1166.64 1213.89 L1167.23 1213.89 L1167.81 1213.89 L1168.4 1213.89 L1168.99 1213.89 L1169.57 1213.89 L1170.16 1213.89 L1170.75 1213.89 L1171.33 1213.89 L1171.92 1213.89 L1172.5 1213.89 L1173.09 1213.89 L1173.68 1213.89 L1174.26 1213.89 L1174.85 1213.89 L1175.44 1213.89 L1176.02 1213.89 L1176.61 1213.89 L1177.2 1213.89 L1177.78 1213.89 L1178.37 1213.89 L1178.96 1213.89 L1179.54 1213.89 L1180.13 1213.89 L1180.71 1213.89 L1181.3 1213.89 L1181.89 1213.89 L1182.47 1213.89 L1183.06 1213.89 L1183.65 1213.89 L1184.23 1213.89 L1184.82 1213.89 L1185.41 1213.89 L1185.99 1213.89 L1186.58 1213.89 L1187.16 1213.89 L1187.75 1213.89 L1188.34 1213.89 L1188.92 1213.89 L1189.51 1213.89 L1190.1 1213.89 L1190.68 1213.89 L1191.27 1213.89 L1191.86 1213.89 L1192.44 1213.89 L1193.03 1213.89 L1193.62 1213.89 L1194.2 1213.89 L1194.79 1213.89 L1195.37 1213.89 L1195.96 1213.89 L1196.55 1213.89 L1197.13 1213.89 L1197.72 1213.89 L1198.31 1213.89 L1198.89 1213.89 L1199.48 1213.89 L1200.07 1213.89 L1200.65 1213.89 L1201.24 1213.89 L1201.83 1213.89 L1202.41 1213.89 L1203 1213.89 L1203.58 1213.89 L1204.17 1213.89 L1204.76 1213.89 L1205.34 1213.89 L1205.93 1213.89 L1206.52 1213.89 L1207.1 1213.89 L1207.69 1213.89 L1208.28 1213.89 L1208.86 1213.89 L1209.45 1213.89 L1210.03 1213.89 L1210.62 1213.89 L1211.21 1213.89 L1211.79 1213.89 L1212.38 1213.89 L1212.97 1213.89 L1213.55 1213.89 L1214.14 1213.89 L1214.73 1213.89 L1215.31 1213.89 L1215.9 1213.89 L1216.49 1213.89 L1217.07 1213.89 L1217.66 1213.89 L1218.24 1213.89 L1218.83 1213.89 L1219.42 1213.89 L1220 1213.89 L1220.59 1213.89 L1221.18 1213.89 L1221.76 1213.89 L1222.35 1213.89 L1222.94 1213.89 L1223.52 1213.89 L1224.11 1213.89 L1224.7 1213.89 L1225.28 1213.89 L1225.87 1213.89 L1226.45 1213.89 L1227.04 1213.89 L1227.63 1213.89 L1228.21 1213.89 L1228.8 1213.89 L1229.39 1213.89 L1229.97 1213.89 L1230.56 1213.89 L1231.15 1213.89 L1231.73 1213.89 L1232.32 1213.89 L1232.91 1213.89 L1233.49 1213.89 L1234.08 1213.89 L1234.66 1213.89 L1235.25 1213.89 L1235.84 1213.89 L1236.42 1213.89 L1237.01 1213.89 L1237.6 1213.89 L1238.18 1213.89 L1238.77 1213.89 L1239.36 1213.89 L1239.94 1213.89 L1240.53 1213.89 L1241.11 1213.89 L1241.7 1213.89 L1242.29 1213.89 L1242.87 1213.89 L1243.46 1213.89 L1244.05 1213.89 L1244.63 1213.89 L1245.22 1213.89 L1245.81 1213.89 L1246.39 1213.89 L1246.98 1213.89 L1247.57 1213.89 L1248.15 1213.89 L1248.74 1213.89 L1249.32 1213.89 L1249.91 1213.89 L1250.5 1213.89 L1251.08 1213.89 L1251.67 1213.89 L1252.26 1213.89 L1252.84 1213.89 L1253.43 1213.89 L1254.02 1213.89 L1254.6 1213.89 L1255.19 1213.89 L1255.78 1213.89 L1256.36 1213.89 L1256.95 1213.89 L1257.53 1213.89 L1258.12 1213.89 L1258.71 1213.89 L1259.29 1213.89 L1259.88 1213.89 L1260.47 1213.89 L1261.05 1213.89 L1261.64 1213.89 L1262.23 1213.89 L1262.81 1213.89 L1263.4 1213.89 L1263.98 1213.89 L1264.57 1213.89 L1265.16 1213.89 L1265.74 1213.89 L1266.33 1213.89 L1266.92 1213.89 L1267.5 1213.89 L1268.09 1213.89 L1268.68 1213.89 L1269.26 1213.89 L1269.85 1213.89 L1270.44 1213.89 L1271.02 1213.89 L1271.61 1213.89 L1272.19 1213.89 L1272.78 1213.89 L1273.37 1213.89 L1273.95 1213.89 L1274.54 1213.89 L1275.13 1213.89 L1275.71 1213.89 L1276.3 1213.89 L1276.89 1213.89 L1277.47 1213.89 L1278.06 1213.89 L1278.65 1213.89 L1279.23 1213.89 L1279.82 1213.89 L1280.4 1213.89 L1280.99 1213.89 L1281.58 1213.89 L1282.16 1213.89 L1282.75 1213.89 L1283.34 1213.89 L1283.92 1213.89 L1284.51 1213.89 L1285.1 1213.89 L1285.68 1213.89 L1286.27 1213.89 L1286.86 1213.89 L1287.44 1213.89 L1288.03 1213.89 L1288.61 1213.89 L1289.2 1213.89 L1289.79 1213.89 L1290.37 1213.89 L1290.96 1213.89 L1291.55 1213.89 L1292.13 1213.89 L1292.72 1213.89 L1293.31 1213.89 L1293.89 1213.89 L1294.48 1213.89 L1295.06 1213.89 L1295.65 1213.89 L1296.24 1213.89 L1296.82 1213.89 L1297.41 1213.89 L1298 1213.89 L1298.58 1213.89 L1299.17 1213.89 L1299.76 1213.89 L1300.34 1213.89 L1300.93 1213.89 L1301.52 1213.89 L1302.1 1213.89 L1302.69 1213.89 L1303.27 1213.89 L1303.86 1213.89 L1304.45 1213.89 L1305.03 1213.89 L1305.62 1213.89 L1306.21 1213.89 L1306.79 1213.89 L1307.38 1213.89 L1307.97 1213.89 L1308.55 1213.89 L1309.14 1213.89 L1309.73 1213.89 L1310.31 1213.89 L1310.9 1213.89 L1311.48 1213.89 L1312.07 1213.89 L1312.66 1213.89 L1313.24 1213.89 L1313.83 1213.89 L1314.42 1213.89 L1315 1213.89 L1315.59 1213.89 L1316.18 1213.89 L1316.76 1213.89 L1317.35 1213.89 L1317.93 1213.89 L1318.52 1213.89 L1319.11 1213.89 L1319.69 1213.89 L1320.28 1213.89 L1320.87 1213.89 L1321.45 1213.89 L1322.04 1213.89 L1322.63 1213.89 L1323.21 1213.89 L1323.8 1213.89 L1324.39 1213.89 L1324.97 1213.89 L1325.56 1213.89 L1326.14 1213.89 L1326.73 1213.89 L1327.32 1213.89 L1327.9 1213.89 L1328.49 1213.89 L1329.08 1213.89 L1329.66 1213.89 L1330.25 1213.89 L1330.84 1213.89 L1331.42 1213.89 L1332.01 1213.89 L1332.6 1213.89 L1333.18 1213.89 L1333.77 1213.89 L1334.35 1213.89 L1334.94 1213.89 L1335.53 1213.89 L1336.11 1213.89 L1336.7 1213.89 L1337.29 1213.89 L1337.87 1213.89 L1338.46 1213.89 L1339.05 1213.89 L1339.63 1213.89 L1340.22 1213.89 L1340.8 1213.89 L1341.39 1213.89 L1341.98 1213.89 L1342.56 1213.89 L1343.15 1213.89 L1343.74 1213.89 L1344.32 1213.89 L1344.91 1213.89 L1345.5 1213.89 L1346.08 1213.89 L1346.67 1213.89 L1347.26 1213.89 L1347.84 1213.89 L1348.43 1213.89 L1349.01 1213.89 L1349.6 1213.89 L1350.19 1213.89 L1350.77 1213.89 L1351.36 1213.89 L1351.95 1213.89 L1352.53 1213.89 L1353.12 1213.89 L1353.71 1213.89 L1354.29 1213.89 L1354.88 1213.89 L1355.47 1213.89 L1356.05 1213.89 L1356.64 1213.89 L1357.22 1213.89 L1357.81 1213.89 L1358.4 1213.89 L1358.98 1213.89 L1359.57 1213.89 L1360.16 1213.89 L1360.74 1213.89 L1361.33 1213.89 L1361.92 1213.89 L1362.5 1213.89 L1363.09 1213.89 L1363.68 1213.89 L1364.26 1213.89 L1364.85 1213.89 L1365.43 1213.89 L1366.02 1213.89 L1366.61 1213.89 L1367.19 1213.89 L1367.78 1213.89 L1368.37 1213.89 L1368.95 1213.89 L1369.54 1213.89 L1370.13 1213.89 L1370.71 1213.89 L1371.3 1213.89 L1371.88 1213.89 L1372.47 1213.89 L1373.06 1213.89 L1373.64 1213.89 L1374.23 1213.89 L1374.82 1213.89 L1375.4 1213.89 L1375.99 1213.89 L1376.58 1213.89 L1377.16 1213.89 L1377.75 1213.89 L1378.34 1213.89 L1378.92 1213.89 L1379.51 1213.89 L1380.09 1213.89 L1380.68 1213.89 L1381.27 1213.89 L1381.85 1213.89 L1382.44 1213.89 L1383.03 1213.89 L1383.61 1213.89 L1384.2 1213.89 L1384.79 1213.89 L1385.37 1213.89 L1385.96 1213.89 L1386.55 1213.89 L1387.13 1213.89 L1387.72 1213.89 L1388.3 1213.89 L1388.89 1213.89 L1389.48 1213.89 L1390.06 1213.89 L1390.65 1213.89 L1391.24 1213.89 L1391.82 1213.89 L1392.41 1213.89 L1393 1213.89 L1393.58 1213.89 L1394.17 1213.89 L1394.75 1213.89 L1395.34 1213.89 L1395.93 1213.89 L1396.51 1213.89 L1397.1 1213.89 L1397.69 1213.89 L1398.27 1213.89 L1398.86 1213.89 L1399.45 1213.89 L1400.03 1213.89 L1400.62 1213.89 L1401.21 1213.89 L1401.79 1213.89 L1402.38 1213.89 L1402.96 1213.89 L1403.55 1213.89 L1404.14 1213.89 L1404.72 1213.89 L1405.31 1213.89 L1405.9 1213.89 L1406.48 1213.89 L1407.07 1213.89 L1407.66 1213.89 L1408.24 1213.89 L1408.83 1213.89 L1409.42 1213.89 L1410 1213.89 L1410.59 1213.89 L1411.17 1213.89 L1411.76 1213.89 L1412.35 1213.89 L1412.93 1213.89 L1413.52 1213.89 L1414.11 1213.89 L1414.69 1213.89 L1415.28 1213.89 L1415.87 1213.89 L1416.45 1213.89 L1417.04 1213.89 L1417.63 1213.89 L1418.21 1213.89 L1418.8 1213.89 L1419.38 1213.89 L1419.97 1213.89 L1420.56 1213.89 L1421.14 1213.89 L1421.73 1213.89 L1422.32 1213.89 L1422.9 1213.89 L1423.49 1213.89 L1424.08 1213.89 L1424.66 1213.89 L1425.25 1213.89 L1425.83 1213.89 L1426.42 1213.89 L1427.01 1213.89 L1427.59 1213.89 L1428.18 1213.89 L1428.77 1213.89 L1429.35 1213.89 L1429.94 1213.89 L1430.53 1213.89 L1431.11 1213.89 L1431.7 1213.89 L1432.29 1213.89 L1432.87 1213.89 L1433.46 1213.89 L1434.04 1213.89 L1434.63 1213.89 L1435.22 1213.89 L1435.8 1213.89 L1436.39 1213.89 L1436.98 1213.89 L1437.56 1213.89 L1438.15 1213.89 L1438.74 1213.89 L1439.32 1213.89 L1439.91 1213.89 L1440.5 1213.89 L1441.08 1213.89 L1441.67 1213.89 L1442.25 1213.89 L1442.84 1213.89 L1443.43 1213.89 L1444.01 1213.89 L1444.6 1213.89 L1445.19 1213.89 L1445.77 1213.89 L1446.36 1213.89 L1446.95 1213.89 L1447.53 1213.89 L1448.12 1213.89 L1448.7 1213.89 L1449.29 1213.89 L1449.88 1213.89 L1450.46 1213.89 L1451.05 1213.89 L1451.64 1213.89 L1452.22 1213.89 L1452.81 1213.89 L1453.4 1213.89 L1453.98 1213.89 L1454.57 1213.89 L1455.16 1213.89 L1455.74 1213.89 L1456.33 1213.89 L1456.91 1213.89 L1457.5 1213.89 L1458.09 1213.89 L1458.67 1213.89 L1459.26 1213.89 L1459.85 1213.89 L1460.43 1213.89 L1461.02 1213.89 L1461.61 1213.89 L1462.19 1213.89 L1462.78 1213.89 L1463.37 1213.89 L1463.95 1213.89 L1464.54 1213.89 L1465.12 1213.89 L1465.71 1213.89 L1466.3 1213.89 L1466.88 1213.89 L1467.47 1213.89 L1468.06 1213.89 L1468.64 1213.89 L1469.23 1213.89 L1469.82 1213.89 L1470.4 1213.89 L1470.99 1213.89 L1471.57 1213.89 L1472.16 1213.89 L1472.75 1213.89 L1473.33 1213.89 L1473.92 1213.89 L1474.51 1213.89 L1475.09 1213.89 L1475.68 1213.89 L1476.27 1213.89 L1476.85 1213.89 L1477.44 1213.89 L1478.03 1213.89 L1478.61 1213.89 L1479.2 1213.89 L1479.78 1213.89 L1480.37 1213.89 L1480.96 1213.89 L1481.54 1213.89 L1482.13 1213.89 L1482.72 1213.89 L1483.3 1213.89 L1483.89 1213.89 L1484.48 1213.89 L1485.06 1213.89 L1485.65 1213.89 L1486.24 1213.89 L1486.82 1213.89 L1487.41 1213.89 L1487.99 1213.89 L1488.58 1213.89 L1489.17 1213.89 L1489.75 1213.89 L1490.34 1213.89 L1490.93 1213.89 L1491.51 1213.89 L1492.1 1213.89 L1492.69 1213.89 L1493.27 1213.89 L1493.86 1213.89 L1494.45 1213.89 L1495.03 1213.89 L1495.62 1213.89 L1496.2 1213.89 L1496.79 1213.89 L1497.38 1213.89 L1497.96 1213.89 L1498.55 1213.89 L1499.14 1213.89 L1499.72 1213.89 L1500.31 1213.89 L1500.9 1213.89 L1501.48 1213.89 L1502.07 1213.89 L1502.65 1213.89 L1503.24 1213.89 L1503.83 1213.89 L1504.41 1213.89 L1505 1213.89 L1505.59 1213.89 L1506.17 1213.89 L1506.76 1213.89 L1507.35 1213.89 L1507.93 1213.89 L1508.52 1213.89 L1509.11 1213.89 L1509.69 1213.89 L1510.28 1213.89 L1510.86 1213.89 L1511.45 1213.89 L1512.04 1213.89 L1512.62 1213.89 L1513.21 1213.89 L1513.8 1213.89 L1514.38 1213.89 L1514.97 1213.89 L1515.56 1213.89 L1516.14 1213.89 L1516.73 1213.89 L1517.32 1213.89 L1517.9 1213.89 L1518.49 1213.89 L1519.07 1213.89 L1519.66 1213.89 L1520.25 1213.89 L1520.83 1213.89 L1521.42 1213.89 L1522.01 1213.89 L1522.59 1213.89 L1523.18 1213.89 L1523.77 1213.89 L1524.35 1213.89 L1524.94 1213.89 L1525.52 1213.89 L1526.11 1213.89 L1526.7 1213.89 L1527.28 1213.89 L1527.87 1213.89 L1528.46 1213.89 L1529.04 1213.89 L1529.63 1213.89 L1530.22 1213.89 L1530.8 1213.89 L1531.39 1213.89 L1531.98 1213.89 L1532.56 1213.89 L1533.15 1213.89 L1533.73 1213.89 L1534.32 1213.89 L1534.91 1213.89 L1535.49 1213.89 L1536.08 1213.89 L1536.67 1213.89 L1537.25 1213.89 L1537.84 1213.89 L1538.43 1213.89 L1539.01 1213.89 L1539.6 1213.89 L1540.19 1213.89 L1540.77 1213.89 L1541.36 1213.89 L1541.94 1213.89 L1542.53 1213.89 L1543.12 1213.89 L1543.7 1213.89 L1544.29 1213.89 L1544.88 1213.89 L1545.46 1213.89 L1546.05 1213.89 L1546.64 1213.89 L1547.22 1213.89 L1547.81 1213.89 L1548.4 1213.89 L1548.98 1213.89 L1549.57 1213.89 L1550.15 1213.89 L1550.74 1213.89 L1551.33 1213.89 L1551.91 1213.89 L1552.5 1213.89 L1553.09 1213.89 L1553.67 1213.89 L1554.26 1213.89 L1554.85 1213.89 L1555.43 1213.89 L1556.02 1213.89 L1556.6 1213.89 L1557.19 1213.89 L1557.78 1213.89 L1558.36 1213.89 L1558.95 1213.89 L1559.54 1213.89 L1560.12 1213.89 L1560.71 1213.89 L1561.3 1213.89 L1561.88 1213.89 L1562.47 1213.89 L1563.06 1213.89 L1563.64 1213.89 L1564.23 1213.89 L1564.81 1213.89 L1565.4 1213.89 L1565.99 1213.89 L1566.57 1213.89 L1567.16 1213.89 L1567.75 1213.89 L1568.33 1213.89 L1568.92 1213.89 L1569.51 1213.89 L1570.09 1213.89 L1570.68 1213.89 L1571.27 1213.89 L1571.85 1213.89 L1572.44 1213.89 L1573.02 1213.89 L1573.61 1213.89 L1574.2 1213.89 L1574.78 1213.89 L1575.37 1213.89 L1575.96 1213.89 L1576.54 1213.89 L1577.13 1213.89 L1577.72 1213.89 L1578.3 1213.89 L1578.89 1213.89 L1579.47 1213.89 L1580.06 1213.89 L1580.65 1213.89 L1581.23 1213.89 L1581.82 1213.89 L1582.41 1213.89 L1582.99 1213.89 L1583.58 1213.89 L1584.17 1213.89 L1584.75 1213.89 L1585.34 1213.89 L1585.93 1213.89 L1586.51 1213.89 L1587.1 1213.89 L1587.68 1213.89 L1588.27 1213.89 L1588.86 1213.89 L1589.44 1213.89 L1590.03 1213.89 L1590.62 1213.89 L1591.2 1213.89 L1591.79 1213.89 L1592.38 1213.89 L1592.96 1213.89 L1593.55 1213.89 L1594.14 1213.89 L1594.72 1213.89 L1595.31 1213.89 L1595.89 1213.89 L1596.48 1213.89 L1597.07 1213.89 L1597.65 1213.89 L1598.24 1213.89 L1598.83 1213.89 L1599.41 1213.89 L1600 1213.89 L1600.59 1213.89 L1601.17 1213.89 L1601.76 1213.89 L1602.34 1213.89 L1602.93 1213.89 L1603.52 1213.89 L1604.1 1213.89 L1604.69 1213.89 L1605.28 1213.89 L1605.86 1213.89 L1606.45 1213.89 L1607.04 1213.89 L1607.62 1213.89 L1608.21 1213.89 L1608.8 1213.89 L1609.38 1213.89 L1609.97 1213.89 L1610.55 1213.89 L1611.14 1213.89 L1611.73 1213.89 L1612.31 1213.89 L1612.9 1213.89 L1613.49 1213.89 L1614.07 1213.89 L1614.66 1213.89 L1615.25 1213.89 L1615.83 1213.89 L1616.42 1213.89 L1617.01 1213.89 L1617.59 1213.89 L1618.18 1213.89 L1618.76 1213.89 L1619.35 1213.89 L1619.94 1213.89 L1620.52 1213.89 L1621.11 1213.89 L1621.7 1213.89 L1622.28 1213.89 L1622.87 1213.89 L1623.46 1213.89 L1624.04 1213.89 L1624.63 1213.89 L1625.22 1213.89 L1625.8 1213.89 L1626.39 1213.89 L1626.97 1213.89 L1627.56 1213.89 L1628.15 1213.89 L1628.73 1213.89 L1629.32 1213.89 L1629.91 1213.89 L1630.49 1213.89 L1631.08 1213.89 L1631.67 1213.89 L1632.25 1213.89 L1632.84 1213.89 L1633.42 1213.89 L1634.01 1213.89 L1634.6 1213.89 L1635.18 1213.89 L1635.77 1213.89 L1636.36 1213.89 L1636.94 1213.89 L1637.53 1213.89 L1638.12 1213.89 L1638.7 1213.89 L1639.29 1213.89 L1639.88 1213.89 L1640.46 1213.89 L1641.05 1213.89 L1641.63 1213.89 L1642.22 1213.89 L1642.81 1213.89 L1643.39 1213.89 L1643.98 1213.89 L1644.57 1213.89 L1645.15 1213.89 L1645.74 1213.89 L1646.33 1213.89 L1646.91 1213.89 L1647.5 1213.89 L1648.09 1213.89 L1648.67 1213.89 L1649.26 1213.89 L1649.84 1213.89 L1650.43 1213.89 L1651.02 1213.89 L1651.6 1213.89 L1652.19 1213.89 L1652.78 1213.89 L1653.36 1213.89 L1653.95 1213.89 L1654.54 1213.89 L1655.12 1213.89 L1655.71 1213.89 L1656.29 1213.89 L1656.88 1213.89 L1657.47 1213.89 L1658.05 1213.89 L1658.64 1213.89 L1659.23 1213.89 L1659.81 1213.89 L1660.4 1213.89 L1660.99 1213.89 L1661.57 1213.89 L1662.16 1213.89 L1662.75 1213.89 L1663.33 1213.89 L1663.92 1213.89 L1664.5 1213.89 L1665.09 1213.89 L1665.68 1213.89 L1666.26 1213.89 L1666.85 1213.89 L1667.44 1213.89 L1668.02 1213.89 L1668.61 1213.89 L1669.2 1213.89 L1669.78 1213.89 L1670.37 1213.89 L1670.96 1213.89 L1671.54 1213.89 L1672.13 1213.89 L1672.71 1213.89 L1673.3 1213.89 L1673.89 1213.89 L1674.47 1213.89 L1675.06 1213.89 L1675.65 1213.89 L1676.23 1213.89 L1676.82 1213.89 L1677.41 1213.89 L1677.99 1213.89 L1678.58 1213.89 L1679.17 1213.89 L1679.75 1213.89 L1680.34 1213.89 L1680.92 1213.89 L1681.51 1213.89 L1682.1 1213.89 L1682.68 1213.89 L1683.27 1213.89 L1683.86 1213.89 L1684.44 1213.89 L1685.03 1213.89 L1685.62 1213.89 L1686.2 1213.89 L1686.79 1213.89 L1687.37 1213.89 L1687.96 1213.89 L1688.55 1213.89 L1689.13 1213.89 L1689.72 1213.89 L1690.31 1213.89 L1690.89 1213.89 L1691.48 1213.89 L1692.07 1213.89 L1692.65 1213.89 L1693.24 1213.89 L1693.83 1213.89 L1694.41 1213.89 L1695 1213.89 L1695.58 1213.89 L1696.17 1213.89 L1696.76 1213.89 L1697.34 1213.89 L1697.93 1213.89 L1698.52 1213.89 L1699.1 1213.89 L1699.69 1213.89 L1700.28 1213.89 L1700.86 1213.89 L1701.45 1213.89 L1702.04 1213.89 L1702.62 1213.89 L1703.21 1213.89 L1703.79 1213.89 L1704.38 1213.89 L1704.97 1213.89 L1705.55 1213.89 L1706.14 1213.89 L1706.73 1213.89 L1707.31 1213.89 L1707.9 1213.89 L1708.49 1213.89 L1709.07 1213.89 L1709.66 1213.89 L1710.24 1213.89 L1710.83 1213.89 L1711.42 1213.89 L1712 1213.89 L1712.59 1213.89 L1713.18 1213.89 L1713.76 1213.89 L1714.35 1213.89 L1714.94 1213.89 L1715.52 1213.89 L1716.11 1213.89 L1716.7 1213.89 L1717.28 1213.89 L1717.87 1213.89 L1718.45 1213.89 L1719.04 1213.89 L1719.63 1213.89 L1720.21 1213.89 L1720.8 1213.89 L1721.39 1213.89 L1721.97 1213.89 L1722.56 1213.89 L1723.15 1213.89 L1723.73 1213.89 L1724.32 1213.89 L1724.91 1213.89 L1725.49 1213.89 L1726.08 1213.89 L1726.66 1213.89 L1727.25 1213.89 L1727.84 1213.89 L1728.42 1213.89 L1729.01 1213.89 L1729.6 1213.89 L1730.18 1213.89 L1730.77 1213.89 L1731.36 1213.89 L1731.94 1213.89 L1732.53 1213.89 L1733.11 1213.89 L1733.7 1213.89 L1734.29 1213.89 L1734.87 1213.89 L1735.46 1213.89 L1736.05 1213.89 L1736.63 1213.89 L1737.22 1213.89 L1737.81 1213.89 L1738.39 1213.89 L1738.98 1213.89 L1739.57 1213.89 L1740.15 1213.89 L1740.74 1213.89 L1741.32 1213.89 L1741.91 1213.89 L1742.5 1213.89 L1743.08 1213.89 L1743.67 1213.89 L1744.26 1213.89 L1744.84 1213.89 L1745.43 1213.89 L1746.02 1213.89 L1746.6 1213.89 L1747.19 1213.89 L1747.78 1213.89 L1748.36 1213.89 L1748.95 1213.89 L1749.53 1213.89 L1750.12 1213.89 L1750.71 1213.89 L1751.29 1213.89 L1751.88 1213.89 L1752.47 1213.89 L1753.05 1213.89 L1753.64 1213.89 L1754.23 1213.89 L1754.81 1213.89 L1755.4 1213.89 L1755.99 1213.89 L1756.57 1213.89 L1757.16 1213.89 L1757.74 1213.89 L1758.33 1213.89 L1758.92 1213.89 L1759.5 1213.89 L1760.09 1213.89 L1760.68 1213.89 L1761.26 1213.89 L1761.85 1213.89 L1762.44 1213.89 L1763.02 1213.89 L1763.61 1213.89 L1764.19 1213.89 L1764.78 1213.89 L1765.37 1213.89 L1765.95 1213.89 L1766.54 1213.89 L1767.13 1213.89 L1767.71 1213.89 L1768.3 1213.89 L1768.89 1213.89 L1769.47 1213.89 L1770.06 1213.89 L1770.65 1213.89 L1771.23 1213.89 L1771.82 1213.89 L1772.4 1213.89 L1772.99 1213.89 L1773.58 1213.89 L1774.16 1213.89 L1774.75 1213.89 L1775.34 1213.89 L1775.92 1213.89 L1776.51 1213.89 L1777.1 1213.89 L1777.68 1213.89 L1778.27 1213.89 L1778.86 1213.89 L1779.44 1213.89 L1780.03 1213.89 L1780.61 1213.89 L1781.2 1213.89 L1781.79 1213.89 L1782.37 1213.89 L1782.96 1213.89 L1783.55 1213.89 L1784.13 1213.89 L1784.72 1213.89 L1785.31 1213.89 L1785.89 1213.89 L1786.48 1213.89 L1787.06 1213.89 L1787.65 1213.89 L1788.24 1213.89 L1788.82 1213.89 L1789.41 1213.89 L1790 1213.89 L1790.58 1213.89 L1791.17 1213.89 L1791.76 1213.89 L1792.34 1213.89 L1792.93 1213.89 L1793.52 1213.89 L1794.1 1213.89 L1794.69 1213.89 L1795.27 1213.89 L1795.86 1213.89 L1796.45 1213.89 L1797.03 1213.89 L1797.62 1213.89 L1798.21 1213.89 L1798.79 1213.89 L1799.38 1213.89 L1799.97 1213.89 L1800.55 1213.89 L1801.14 1213.89 L1801.73 1213.89 L1802.31 1213.89 L1802.9 1213.89 L1803.48 1213.89 L1804.07 1213.89 L1804.66 1213.89 L1805.24 1213.89 L1805.83 1213.89 L1806.42 1213.89 L1807 1213.89 L1807.59 1213.89 L1808.18 1213.89 L1808.76 1213.89 L1809.35 1213.89 L1809.94 1213.89 L1810.52 1213.89 L1811.11 1213.89 L1811.69 1213.89 L1812.28 1213.89 L1812.87 1213.89 L1813.45 1213.89 L1814.04 1213.89 L1814.63 1213.89 L1815.21 1213.89 L1815.8 1213.89 L1816.39 1213.89 L1816.97 1213.89 L1817.56 1213.89 L1818.14 1213.89 L1818.73 1213.89 L1819.32 1213.89 L1819.9 1213.89 L1820.49 1213.89 L1821.08 1213.89 L1821.66 1213.89 L1822.25 1213.89 L1822.84 1213.89 L1823.42 1213.89 L1824.01 1213.89 L1824.6 1213.89 L1825.18 1213.89 L1825.77 1213.89 L1826.35 1213.89 L1826.94 1213.89 L1827.53 1213.89 L1828.11 1213.89 L1828.7 1213.89 L1829.29 1213.89 L1829.87 1213.89 L1830.46 1213.89 L1831.05 1213.89 L1831.63 1213.89 L1832.22 1213.89 L1832.81 1213.89 L1833.39 1213.89 L1833.98 1213.89 L1834.56 1213.89 L1835.15 1213.89 L1835.74 1213.89 L1836.32 1213.89 L1836.91 1213.89 L1837.5 1213.89 L1838.08 1213.89 L1838.67 1213.89 L1839.26 1213.89 L1839.84 1213.89 L1840.43 1213.89 L1841.01 1213.89 L1841.6 1213.89 L1842.19 1213.89 L1842.77 1213.89 L1843.36 1213.89 L1843.95 1213.89 L1844.53 1213.89 L1845.12 1213.89 L1845.71 1213.89 L1846.29 1213.89 L1846.88 1213.89 L1847.47 1213.89 L1848.05 1213.89 L1848.64 1213.89 L1849.22 1213.89 L1849.81 1213.89 L1850.4 1213.89 L1850.98 1213.89 L1851.57 1213.89 L1852.16 1213.89 L1852.74 1213.89 L1853.33 1213.89 L1853.92 1213.89 L1854.5 1213.89 L1855.09 1213.89 L1855.68 1213.89 L1856.26 1213.89 L1856.85 1213.89 L1857.43 1213.89 L1858.02 1213.89 L1858.61 1213.89 L1859.19 1213.89 L1859.78 1213.89 L1860.37 1213.89 L1860.95 1213.89 L1861.54 1213.89 L1862.13 1213.89 L1862.71 1213.89 L1863.3 1213.89 L1863.88 1213.89 L1864.47 1213.89 L1865.06 1213.89 L1865.64 1213.89 L1866.23 1213.89 L1866.82 1213.89 L1867.4 1213.89 L1867.99 1213.89 L1868.58 1213.89 L1869.16 1213.89 L1869.75 1213.89 L1870.34 1213.89 L1870.92 1213.89 L1871.51 1213.89 L1872.09 1213.89 L1872.68 1213.89 L1873.27 1213.89 L1873.85 1213.89 L1874.44 1213.89 L1875.03 1213.89 L1875.61 1213.89 L1876.2 1213.89 L1876.79 1213.89 L1877.37 1213.89 L1877.96 1213.89 L1878.55 1213.89 L1879.13 1213.89 L1879.72 1213.89 L1880.3 1213.89 L1880.89 1213.89 L1881.48 1213.89 L1882.06 1213.89 L1882.65 1213.89 L1883.24 1213.89 L1883.82 1213.89 L1884.41 1213.89 L1885 1213.89 L1885.58 1213.89 L1886.17 1213.89 L1886.76 1213.89 L1887.34 1213.89 L1887.93 1213.89 L1888.51 1213.89 L1889.1 1213.89 L1889.69 1213.89 L1890.27 1213.89 L1890.86 1213.89 L1891.45 1213.89 L1892.03 1213.89 L1892.62 1213.89 L1893.21 1213.89 L1893.79 1213.89 L1894.38 1213.89 L1894.96 1213.89 L1895.55 1213.89 L1896.14 1213.89 L1896.72 1213.89 L1897.31 1213.89 L1897.9 1213.89 L1898.48 1213.89 L1899.07 1213.89 L1899.66 1213.89 L1900.24 1213.89 L1900.83 1213.89 L1901.42 1213.89 L1902 1213.89 L1902.59 1213.89 L1903.17 1213.89 L1903.76 1213.89 L1904.35 1213.89 L1904.93 1213.89 L1905.52 1213.89 L1906.11 1213.89 L1906.69 1213.89 L1907.28 1213.89 L1907.87 1213.89 L1908.45 1213.89 L1909.04 1213.89 L1909.63 1213.89 L1910.21 1213.89 L1910.8 1213.89 L1911.38 1213.89 L1911.97 1213.89 L1912.56 1213.89 L1913.14 1213.89 L1913.73 1213.89 L1914.32 1213.89 L1914.9 1213.89 L1915.49 1213.89 L1916.08 1213.89 L1916.66 1213.89 L1917.25 1213.89 L1917.83 1213.89 L1918.42 1213.89 L1919.01 1213.89 L1919.59 1213.89 L1920.18 1213.89 L1920.77 1213.89 L1921.35 1213.89 L1921.94 1213.89 L1922.53 1213.89 L1923.11 1213.89 L1923.7 1213.89 L1924.29 1213.89 L1924.87 1213.89 L1925.46 1213.89 L1926.04 1213.89 L1926.63 1213.89 L1927.22 1213.89 L1927.8 1213.89 L1928.39 1213.89 L1928.98 1213.89 L1929.56 1213.89 L1930.15 1213.89 L1930.74 1213.89 L1931.32 1213.89 L1931.91 1213.89 L1932.5 1213.89 L1933.08 1213.89 L1933.67 1213.89 L1934.25 1213.89 L1934.84 1213.89 L1935.43 1213.89 L1936.01 1213.89 L1936.6 1213.89 L1937.19 1213.89 L1937.77 1213.89 L1938.36 1213.89 L1938.95 1213.89 L1939.53 1213.89 L1940.12 1213.89 L1940.71 1213.89 L1941.29 1213.89 L1941.88 1213.89 L1942.46 1213.89 L1943.05 1213.89 L1943.64 1213.89 L1944.22 1213.89 L1944.81 1213.89 L1945.4 1213.89 L1945.98 1213.89 L1946.57 1213.89 L1947.16 1213.89 L1947.74 1213.89 L1948.33 1213.89 L1948.91 1213.89 L1949.5 1213.89 L1950.09 1213.89 L1950.67 1213.89 L1951.26 1213.89 L1951.85 1213.89 L1952.43 1213.89 L1953.02 1213.89 L1953.61 1213.89 L1954.19 1213.89 L1954.78 1213.89 L1955.37 1213.89 L1955.95 1213.89 L1956.54 1213.89 L1957.12 1213.89 L1957.71 1213.89 L1958.3 1213.89 L1958.88 1213.89 L1959.47 1213.89 L1960.06 1213.89 L1960.64 1213.89 L1961.23 1213.89 L1961.82 1213.89 L1962.4 1213.89 L1962.99 1213.89 L1963.58 1213.89 L1964.16 1213.89 L1964.75 1213.89 L1965.33 1213.89 L1965.92 1213.89 L1966.51 1213.89 L1967.09 1213.89 L1967.68 1213.89 L1968.27 1213.89 L1968.85 1213.89 L1969.44 1213.89 L1970.03 1213.89 L1970.61 1213.89 L1971.2 1213.89 L1971.78 1213.89 L1972.37 1213.89 L1972.96 1213.89 L1973.54 1213.89 L1974.13 1213.89 L1974.72 1213.89 L1975.3 1213.89 L1975.89 1213.89 L1976.48 1213.89 L1977.06 1213.89 L1977.65 1213.89 L1978.24 1213.89 L1978.82 1213.89 L1979.41 1213.89 L1979.99 1213.89 L1980.58 1213.89 L1981.17 1213.89 L1981.75 1213.89 L1982.34 1213.89 L1982.93 1213.89 L1983.51 1213.89 L1984.1 1213.89 L1984.69 1213.89 L1985.27 1213.89 L1985.86 1213.89 L1986.45 1213.89 L1987.03 1213.89 L1987.62 1213.89 L1988.2 1213.89 L1988.79 1213.89 L1989.38 1213.89 L1989.96 1213.89 L1990.55 1213.89 L1991.14 1213.89 L1991.72 1213.89 L1992.31 1213.89 L1992.9 1213.89 L1993.48 1213.89 L1994.07 1213.89 L1994.65 1213.89 L1995.24 1213.89 L1995.83 1213.89 L1996.41 1213.89 L1997 1213.89 L1997.59 1213.89 L1998.17 1213.89 L1998.76 1213.89 L1999.35 1213.89 L1999.93 1213.89 L2000.52 1213.89 L2001.11 1213.89 L2001.69 1213.89 L2002.28 1213.89 L2002.86 1213.89 L2003.45 1213.89 L2004.04 1213.89 L2004.62 1213.89 L2005.21 1213.89 L2005.8 1213.89 L2006.38 1213.89 L2006.97 1213.89 L2007.56 1213.89 L2008.14 1213.89 L2008.73 1213.89 L2009.32 1213.89 L2009.9 1213.89 L2010.49 1213.89 L2011.07 1213.89 L2011.66 1213.89 L2012.25 1213.89 L2012.83 1213.89 L2013.42 1213.89 L2014.01 1213.89 L2014.59 1213.89 L2015.18 1213.89 L2015.77 1213.89 L2016.35 1213.89 L2016.94 1213.89 L2017.53 1213.89 L2018.11 1213.89 L2018.7 1213.89 L2019.28 1213.89 L2019.87 1213.89 L2020.46 1213.89 L2021.04 1213.89 L2021.63 1213.89 L2022.22 1213.89 L2022.8 1213.89 L2023.39 1213.89 L2023.98 1213.89 L2024.56 1213.89 L2025.15 1213.89 L2025.73 1213.89 L2026.32 1213.89 L2026.91 1213.89 L2027.49 1213.89 L2028.08 1213.89 L2028.67 1213.89 L2029.25 1213.89 L2029.84 1213.89 L2030.43 1213.89 L2031.01 1213.89 L2031.6 1213.89 L2032.19 1213.89 L2032.77 1213.89 L2033.36 1213.89 L2033.94 1213.89 L2034.53 1213.89 L2035.12 1213.89 L2035.7 1213.89 L2036.29 1213.89 L2036.88 1213.89 L2037.46 1213.89 L2038.05 1213.89 L2038.64 1213.89 L2039.22 1213.89 L2039.81 1213.89 L2040.4 1213.89 L2040.98 1213.89 L2041.57 1213.89 L2042.15 1213.89 L2042.74 1213.89 L2043.33 1213.89 L2043.91 1213.89 L2044.5 1213.89 L2045.09 1213.89 L2045.67 1213.89 L2046.26 1213.89 L2046.85 1213.89 L2047.43 1213.89 L2048.02 1213.89 L2048.6 1213.89 L2049.19 1213.89 L2049.78 1213.89 L2050.36 1213.89 L2050.95 1213.89 L2051.54 1213.89 L2052.12 1213.89 L2052.71 1213.89 L2053.3 1213.89 L2053.88 1213.89 L2054.47 1213.89 L2055.06 1213.89 L2055.64 1213.89 L2056.23 1213.89 L2056.81 1213.89 L2057.4 1213.89 L2057.99 1213.89 L2058.57 1213.89 L2059.16 1213.89 L2059.75 1213.89 L2060.33 1213.89 L2060.92 1213.89 L2061.51 1213.89 L2062.09 1213.89 L2062.68 1213.89 L2063.27 1213.89 L2063.85 1213.89 L2064.44 1213.89 L2065.02 1213.89 L2065.61 1213.89 L2066.2 1213.89 L2066.78 1213.89 L2067.37 1213.89 L2067.96 1213.89 L2068.54 1213.89 L2069.13 1213.89 L2069.72 1213.89 L2070.3 1213.89 L2070.89 1213.89 L2071.48 1213.89 L2072.06 1213.89 L2072.65 1213.89 L2073.23 1213.89 L2073.82 1213.89 L2074.41 1213.89 L2074.99 1213.89 L2075.58 1213.89 L2076.17 1213.89 L2076.75 1213.89 L2077.34 1213.89 L2077.93 1213.89 L2078.51 1213.89 L2079.1 1213.89 L2079.68 1213.89 L2080.27 1213.89 L2080.86 1213.89 L2081.44 1213.89 L2082.03 1213.89 L2082.62 1213.89 L2083.2 1213.89 L2083.79 1213.89 L2084.38 1213.89 L2084.96 1213.89 L2085.55 1213.89 L2086.14 1213.89 L2086.72 1213.89 L2087.31 1213.89 L2087.89 1213.89 L2088.48 1213.89 L2089.07 1213.89 L2089.65 1213.89 L2090.24 1213.89 L2090.83 1213.89 L2091.41 1213.89 L2092 1213.89 L2092.59 1213.89 L2093.17 1213.89 L2093.76 1213.89 L2094.35 1213.89 L2094.93 1213.89 L2095.52 1213.89 L2096.1 1213.89 L2096.69 1213.89 L2097.28 1213.89 L2097.86 1213.89 L2098.45 1213.89 L2099.04 1213.89 L2099.62 1213.89 L2100.21 1213.89 L2100.8 1213.89 L2101.38 1213.89 L2101.97 1213.89 L2102.55 1213.89 L2103.14 1213.89 L2103.73 1213.89 L2104.31 1213.89 L2104.9 1213.89 L2105.49 1213.89 L2106.07 1213.89 L2106.66 1213.89 L2107.25 1213.89 L2107.83 1213.89 L2108.42 1213.89 L2109.01 1213.89 L2109.59 1213.89 L2110.18 1213.89 L2110.76 1213.89 L2111.35 1213.89 L2111.94 1213.89 L2112.52 1213.89 L2113.11 1213.89 L2113.7 1213.89 L2114.28 1213.89 L2114.87 1213.89 L2115.46 1213.89 L2116.04 1213.89 L2116.63 1213.89 L2117.22 1213.89 L2117.8 1213.89 L2118.39 1213.89 L2118.97 1213.89 L2119.56 1213.89 L2120.15 1213.89 L2120.73 1213.89 L2121.32 1213.89 L2121.91 1213.89 L2122.49 1213.89 L2123.08 1213.89 L2123.67 1213.89 L2124.25 1213.89 L2124.84 1213.89 L2125.42 1213.89 L2126.01 1213.89 L2126.6 1213.89 L2127.18 1213.89 L2127.77 1213.89 L2128.36 1213.89 L2128.94 1213.89 L2129.53 1213.89 L2130.12 1213.89 L2130.7 1213.89 L2131.29 1213.89 L2131.88 1213.89 L2132.46 1213.89 L2133.05 1213.89 L2133.63 1213.89 L2134.22 1213.89 L2134.81 1213.89 L2135.39 1213.89 L2135.98 1213.89 L2136.57 1213.89 L2137.15 1213.89 L2137.74 1213.89 L2138.33 1213.89 L2138.91 1213.89 L2139.5 1213.89 L2140.09 1213.89 L2140.67 1213.89 L2141.26 1213.89 L2141.84 1213.89 L2142.43 1213.89 L2143.02 1213.89 L2143.6 1213.89 L2144.19 1213.89 L2144.78 1213.89 L2145.36 1213.89 L2145.95 1213.89 L2146.54 1213.89 L2147.12 1213.89 L2147.71 1213.89 L2148.3 1213.89 L2148.88 1213.89 L2149.47 1213.89 L2150.05 1213.89 L2150.64 1213.89 L2151.23 1213.89 L2151.81 1213.89 L2152.4 1213.89 L2152.99 1213.89 L2153.57 1213.89 L2154.16 1213.89 L2154.75 1213.89 L2155.33 1213.89 L2155.92 1213.89 L2156.5 1213.89 L2157.09 1213.89 L2157.68 1213.89 L2158.26 1213.89 L2158.26 1213.78 L2157.68 1213.78 L2157.09 1213.78 L2156.5 1213.78 L2155.92 1213.78 L2155.33 1213.78 L2154.75 1213.78 L2154.16 1213.78 L2153.57 1213.78 L2152.99 1213.78 L2152.4 1213.78 L2151.81 1213.78 L2151.23 1213.78 L2150.64 1213.78 L2150.05 1213.78 L2149.47 1213.78 L2148.88 1213.78 L2148.3 1213.78 L2147.71 1213.78 L2147.12 1213.78 L2146.54 1213.78 L2145.95 1213.78 L2145.36 1213.78 L2144.78 1213.78 L2144.19 1213.78 L2143.6 1213.78 L2143.02 1213.78 L2142.43 1213.78 L2141.84 1213.78 L2141.26 1213.78 L2140.67 1213.78 L2140.09 1213.78 L2139.5 1213.78 L2138.91 1213.78 L2138.33 1213.78 L2137.74 1213.78 L2137.15 1213.78 L2136.57 1213.78 L2135.98 1213.78 L2135.39 1213.78 L2134.81 1213.78 L2134.22 1213.78 L2133.63 1213.78 L2133.05 1213.78 L2132.46 1213.78 L2131.88 1213.78 L2131.29 1213.78 L2130.7 1213.78 L2130.12 1213.78 L2129.53 1213.78 L2128.94 1213.78 L2128.36 1213.78 L2127.77 1213.78 L2127.18 1213.78 L2126.6 1213.78 L2126.01 1213.78 L2125.42 1213.78 L2124.84 1213.78 L2124.25 1213.78 L2123.67 1213.78 L2123.08 1213.78 L2122.49 1213.78 L2121.91 1213.78 L2121.32 1213.78 L2120.73 1213.78 L2120.15 1213.78 L2119.56 1213.78 L2118.97 1213.78 L2118.39 1213.78 L2117.8 1213.78 L2117.22 1213.78 L2116.63 1213.78 L2116.04 1213.78 L2115.46 1213.78 L2114.87 1213.78 L2114.28 1213.78 L2113.7 1213.78 L2113.11 1213.78 L2112.52 1213.78 L2111.94 1213.78 L2111.35 1213.78 L2110.76 1213.78 L2110.18 1213.78 L2109.59 1213.78 L2109.01 1213.78 L2108.42 1213.78 L2107.83 1213.78 L2107.25 1213.78 L2106.66 1213.78 L2106.07 1213.78 L2105.49 1213.78 L2104.9 1213.78 L2104.31 1213.78 L2103.73 1213.78 L2103.14 1213.78 L2102.55 1213.78 L2101.97 1213.78 L2101.38 1213.78 L2100.8 1213.78 L2100.21 1213.78 L2099.62 1213.78 L2099.04 1213.78 L2098.45 1213.78 L2097.86 1213.78 L2097.28 1213.78 L2096.69 1213.78 L2096.1 1213.78 L2095.52 1213.78 L2094.93 1213.78 L2094.35 1213.78 L2093.76 1213.78 L2093.17 1213.78 L2092.59 1213.78 L2092 1213.78 L2091.41 1213.78 L2090.83 1213.78 L2090.24 1213.78 L2089.65 1213.78 L2089.07 1213.78 L2088.48 1213.78 L2087.89 1213.78 L2087.31 1213.78 L2086.72 1213.78 L2086.14 1213.78 L2085.55 1213.78 L2084.96 1213.78 L2084.38 1213.78 L2083.79 1213.78 L2083.2 1213.78 L2082.62 1213.78 L2082.03 1213.78 L2081.44 1213.78 L2080.86 1213.78 L2080.27 1213.78 L2079.68 1213.78 L2079.1 1213.78 L2078.51 1213.78 L2077.93 1213.78 L2077.34 1213.78 L2076.75 1213.78 L2076.17 1213.78 L2075.58 1213.78 L2074.99 1213.78 L2074.41 1213.78 L2073.82 1213.78 L2073.23 1213.78 L2072.65 1213.78 L2072.06 1213.78 L2071.48 1213.78 L2070.89 1213.78 L2070.3 1213.78 L2069.72 1213.78 L2069.13 1213.78 L2068.54 1213.78 L2067.96 1213.78 L2067.37 1213.78 L2066.78 1213.78 L2066.2 1213.78 L2065.61 1213.78 L2065.02 1213.78 L2064.44 1213.78 L2063.85 1213.78 L2063.27 1213.78 L2062.68 1213.78 L2062.09 1213.78 L2061.51 1213.78 L2060.92 1213.78 L2060.33 1213.78 L2059.75 1213.78 L2059.16 1213.78 L2058.57 1213.78 L2057.99 1213.78 L2057.4 1213.78 L2056.81 1213.78 L2056.23 1213.78 L2055.64 1213.78 L2055.06 1213.78 L2054.47 1213.78 L2053.88 1213.78 L2053.3 1213.78 L2052.71 1213.78 L2052.12 1213.78 L2051.54 1213.78 L2050.95 1213.78 L2050.36 1213.78 L2049.78 1213.78 L2049.19 1213.78 L2048.6 1213.78 L2048.02 1213.78 L2047.43 1213.78 L2046.85 1213.78 L2046.26 1213.78 L2045.67 1213.78 L2045.09 1213.78 L2044.5 1213.78 L2043.91 1213.78 L2043.33 1213.78 L2042.74 1213.78 L2042.15 1213.78 L2041.57 1213.78 L2040.98 1213.78 L2040.4 1213.78 L2039.81 1213.78 L2039.22 1213.78 L2038.64 1213.78 L2038.05 1213.78 L2037.46 1213.78 L2036.88 1213.78 L2036.29 1213.78 L2035.7 1213.78 L2035.12 1213.78 L2034.53 1213.78 L2033.94 1213.78 L2033.36 1213.78 L2032.77 1213.78 L2032.19 1213.78 L2031.6 1213.78 L2031.01 1213.78 L2030.43 1213.78 L2029.84 1213.78 L2029.25 1213.78 L2028.67 1213.78 L2028.08 1213.78 L2027.49 1213.78 L2026.91 1213.78 L2026.32 1213.78 L2025.73 1213.78 L2025.15 1213.78 L2024.56 1213.78 L2023.98 1213.78 L2023.39 1213.78 L2022.8 1213.78 L2022.22 1213.78 L2021.63 1213.78 L2021.04 1213.78 L2020.46 1213.78 L2019.87 1213.78 L2019.28 1213.78 L2018.7 1213.78 L2018.11 1213.78 L2017.53 1213.78 L2016.94 1213.78 L2016.35 1213.78 L2015.77 1213.78 L2015.18 1213.78 L2014.59 1213.78 L2014.01 1213.78 L2013.42 1213.78 L2012.83 1213.78 L2012.25 1213.78 L2011.66 1213.78 L2011.07 1213.78 L2010.49 1213.78 L2009.9 1213.78 L2009.32 1213.78 L2008.73 1213.78 L2008.14 1213.78 L2007.56 1213.78 L2006.97 1213.78 L2006.38 1213.78 L2005.8 1213.78 L2005.21 1213.78 L2004.62 1213.78 L2004.04 1213.78 L2003.45 1213.78 L2002.86 1213.78 L2002.28 1213.78 L2001.69 1213.78 L2001.11 1213.78 L2000.52 1213.78 L1999.93 1213.78 L1999.35 1213.78 L1998.76 1213.78 L1998.17 1213.78 L1997.59 1213.78 L1997 1213.78 L1996.41 1213.78 L1995.83 1213.78 L1995.24 1213.78 L1994.65 1213.78 L1994.07 1213.78 L1993.48 1213.78 L1992.9 1213.78 L1992.31 1213.78 L1991.72 1213.78 L1991.14 1213.78 L1990.55 1213.78 L1989.96 1213.78 L1989.38 1213.78 L1988.79 1213.78 L1988.2 1213.78 L1987.62 1213.78 L1987.03 1213.78 L1986.45 1213.78 L1985.86 1213.78 L1985.27 1213.78 L1984.69 1213.78 L1984.1 1213.78 L1983.51 1213.78 L1982.93 1213.78 L1982.34 1213.78 L1981.75 1213.78 L1981.17 1213.78 L1980.58 1213.78 L1979.99 1213.78 L1979.41 1213.78 L1978.82 1213.78 L1978.24 1213.78 L1977.65 1213.78 L1977.06 1213.78 L1976.48 1213.78 L1975.89 1213.78 L1975.3 1213.78 L1974.72 1213.78 L1974.13 1213.78 L1973.54 1213.78 L1972.96 1213.78 L1972.37 1213.78 L1971.78 1213.78 L1971.2 1213.78 L1970.61 1213.78 L1970.03 1213.78 L1969.44 1213.78 L1968.85 1213.78 L1968.27 1213.78 L1967.68 1213.78 L1967.09 1213.78 L1966.51 1213.78 L1965.92 1213.78 L1965.33 1213.78 L1964.75 1213.78 L1964.16 1213.78 L1963.58 1213.78 L1962.99 1213.78 L1962.4 1213.78 L1961.82 1213.78 L1961.23 1213.78 L1960.64 1213.78 L1960.06 1213.78 L1959.47 1213.78 L1958.88 1213.78 L1958.3 1213.78 L1957.71 1213.78 L1957.12 1213.78 L1956.54 1213.78 L1955.95 1213.78 L1955.37 1213.78 L1954.78 1213.78 L1954.19 1213.78 L1953.61 1213.78 L1953.02 1213.78 L1952.43 1213.78 L1951.85 1213.78 L1951.26 1213.78 L1950.67 1213.78 L1950.09 1213.78 L1949.5 1213.78 L1948.91 1213.78 L1948.33 1213.78 L1947.74 1213.78 L1947.16 1213.78 L1946.57 1213.78 L1945.98 1213.78 L1945.4 1213.78 L1944.81 1213.78 L1944.22 1213.78 L1943.64 1213.78 L1943.05 1213.78 L1942.46 1213.78 L1941.88 1213.78 L1941.29 1213.78 L1940.71 1213.78 L1940.12 1213.78 L1939.53 1213.78 L1938.95 1213.78 L1938.36 1213.78 L1937.77 1213.78 L1937.19 1213.78 L1936.6 1213.78 L1936.01 1213.78 L1935.43 1213.78 L1934.84 1213.78 L1934.25 1213.78 L1933.67 1213.78 L1933.08 1213.78 L1932.5 1213.78 L1931.91 1213.78 L1931.32 1213.78 L1930.74 1213.78 L1930.15 1213.78 L1929.56 1213.78 L1928.98 1213.78 L1928.39 1213.78 L1927.8 1213.78 L1927.22 1213.78 L1926.63 1213.78 L1926.04 1213.78 L1925.46 1213.78 L1924.87 1213.78 L1924.29 1213.78 L1923.7 1213.78 L1923.11 1213.78 L1922.53 1213.78 L1921.94 1213.78 L1921.35 1213.78 L1920.77 1213.78 L1920.18 1213.78 L1919.59 1213.78 L1919.01 1213.78 L1918.42 1213.78 L1917.83 1213.78 L1917.25 1213.78 L1916.66 1213.78 L1916.08 1213.78 L1915.49 1213.78 L1914.9 1213.78 L1914.32 1213.78 L1913.73 1213.78 L1913.14 1213.78 L1912.56 1213.78 L1911.97 1213.78 L1911.38 1213.78 L1910.8 1213.78 L1910.21 1213.78 L1909.63 1213.78 L1909.04 1213.78 L1908.45 1213.78 L1907.87 1213.78 L1907.28 1213.78 L1906.69 1213.78 L1906.11 1213.78 L1905.52 1213.78 L1904.93 1213.78 L1904.35 1213.78 L1903.76 1213.78 L1903.17 1213.78 L1902.59 1213.78 L1902 1213.78 L1901.42 1213.78 L1900.83 1213.78 L1900.24 1213.78 L1899.66 1213.78 L1899.07 1213.78 L1898.48 1213.78 L1897.9 1213.78 L1897.31 1213.78 L1896.72 1213.78 L1896.14 1213.78 L1895.55 1213.78 L1894.96 1213.78 L1894.38 1213.78 L1893.79 1213.78 L1893.21 1213.78 L1892.62 1213.78 L1892.03 1213.78 L1891.45 1213.78 L1890.86 1213.78 L1890.27 1213.78 L1889.69 1213.78 L1889.1 1213.78 L1888.51 1213.78 L1887.93 1213.78 L1887.34 1213.78 L1886.76 1213.78 L1886.17 1213.78 L1885.58 1213.78 L1885 1213.78 L1884.41 1213.78 L1883.82 1213.78 L1883.24 1213.78 L1882.65 1213.78 L1882.06 1213.78 L1881.48 1213.78 L1880.89 1213.78 L1880.3 1213.78 L1879.72 1213.78 L1879.13 1213.78 L1878.55 1213.78 L1877.96 1213.78 L1877.37 1213.78 L1876.79 1213.78 L1876.2 1213.78 L1875.61 1213.78 L1875.03 1213.78 L1874.44 1213.78 L1873.85 1213.78 L1873.27 1213.78 L1872.68 1213.78 L1872.09 1213.78 L1871.51 1213.78 L1870.92 1213.78 L1870.34 1213.78 L1869.75 1213.78 L1869.16 1213.78 L1868.58 1213.78 L1867.99 1213.78 L1867.4 1213.78 L1866.82 1213.78 L1866.23 1213.78 L1865.64 1213.78 L1865.06 1213.78 L1864.47 1213.78 L1863.88 1213.78 L1863.3 1213.78 L1862.71 1213.78 L1862.13 1213.78 L1861.54 1213.78 L1860.95 1213.78 L1860.37 1213.78 L1859.78 1213.78 L1859.19 1213.78 L1858.61 1213.78 L1858.02 1213.78 L1857.43 1213.78 L1856.85 1213.78 L1856.26 1213.78 L1855.68 1213.78 L1855.09 1213.78 L1854.5 1213.78 L1853.92 1213.78 L1853.33 1213.78 L1852.74 1213.78 L1852.16 1213.78 L1851.57 1213.78 L1850.98 1213.78 L1850.4 1213.78 L1849.81 1213.78 L1849.22 1213.78 L1848.64 1213.78 L1848.05 1213.78 L1847.47 1213.78 L1846.88 1213.78 L1846.29 1213.78 L1845.71 1213.78 L1845.12 1213.78 L1844.53 1213.78 L1843.95 1213.78 L1843.36 1213.78 L1842.77 1213.78 L1842.19 1213.78 L1841.6 1213.78 L1841.01 1213.78 L1840.43 1213.78 L1839.84 1213.78 L1839.26 1213.78 L1838.67 1213.78 L1838.08 1213.78 L1837.5 1213.78 L1836.91 1213.78 L1836.32 1213.78 L1835.74 1213.78 L1835.15 1213.78 L1834.56 1213.78 L1833.98 1213.78 L1833.39 1213.78 L1832.81 1213.78 L1832.22 1213.78 L1831.63 1213.78 L1831.05 1213.78 L1830.46 1213.78 L1829.87 1213.78 L1829.29 1213.78 L1828.7 1213.78 L1828.11 1213.78 L1827.53 1213.78 L1826.94 1213.78 L1826.35 1213.78 L1825.77 1213.78 L1825.18 1213.78 L1824.6 1213.78 L1824.01 1213.78 L1823.42 1213.78 L1822.84 1213.78 L1822.25 1213.78 L1821.66 1213.78 L1821.08 1213.78 L1820.49 1213.78 L1819.9 1213.78 L1819.32 1213.78 L1818.73 1213.78 L1818.14 1213.78 L1817.56 1213.78 L1816.97 1213.78 L1816.39 1213.78 L1815.8 1213.78 L1815.21 1213.78 L1814.63 1213.78 L1814.04 1213.78 L1813.45 1213.78 L1812.87 1213.78 L1812.28 1213.78 L1811.69 1213.78 L1811.11 1213.78 L1810.52 1213.78 L1809.94 1213.78 L1809.35 1213.78 L1808.76 1213.78 L1808.18 1213.78 L1807.59 1213.78 L1807 1213.78 L1806.42 1213.78 L1805.83 1213.78 L1805.24 1213.78 L1804.66 1213.78 L1804.07 1213.78 L1803.48 1213.78 L1802.9 1213.78 L1802.31 1213.78 L1801.73 1213.78 L1801.14 1213.78 L1800.55 1213.78 L1799.97 1213.78 L1799.38 1213.78 L1798.79 1213.78 L1798.21 1213.78 L1797.62 1213.78 L1797.03 1213.78 L1796.45 1213.78 L1795.86 1213.78 L1795.27 1213.78 L1794.69 1213.78 L1794.1 1213.78 L1793.52 1213.78 L1792.93 1213.78 L1792.34 1213.78 L1791.76 1213.78 L1791.17 1213.78 L1790.58 1213.78 L1790 1213.78 L1789.41 1213.78 L1788.82 1213.78 L1788.24 1213.78 L1787.65 1213.78 L1787.06 1213.78 L1786.48 1213.78 L1785.89 1213.78 L1785.31 1213.78 L1784.72 1213.78 L1784.13 1213.78 L1783.55 1213.78 L1782.96 1213.78 L1782.37 1213.78 L1781.79 1213.78 L1781.2 1213.78 L1780.61 1213.78 L1780.03 1213.78 L1779.44 1213.78 L1778.86 1213.78 L1778.27 1213.78 L1777.68 1213.78 L1777.1 1213.78 L1776.51 1213.78 L1775.92 1213.78 L1775.34 1213.78 L1774.75 1213.78 L1774.16 1213.78 L1773.58 1213.78 L1772.99 1213.78 L1772.4 1213.78 L1771.82 1213.78 L1771.23 1213.78 L1770.65 1213.78 L1770.06 1213.78 L1769.47 1213.78 L1768.89 1213.78 L1768.3 1213.78 L1767.71 1213.78 L1767.13 1213.78 L1766.54 1213.78 L1765.95 1213.78 L1765.37 1213.78 L1764.78 1213.78 L1764.19 1213.78 L1763.61 1213.78 L1763.02 1213.78 L1762.44 1213.78 L1761.85 1213.78 L1761.26 1213.78 L1760.68 1213.78 L1760.09 1213.78 L1759.5 1213.78 L1758.92 1213.78 L1758.33 1213.78 L1757.74 1213.78 L1757.16 1213.78 L1756.57 1213.78 L1755.99 1213.78 L1755.4 1213.78 L1754.81 1213.78 L1754.23 1213.78 L1753.64 1213.78 L1753.05 1213.78 L1752.47 1213.78 L1751.88 1213.78 L1751.29 1213.78 L1750.71 1213.78 L1750.12 1213.78 L1749.53 1213.78 L1748.95 1213.78 L1748.36 1213.78 L1747.78 1213.78 L1747.19 1213.78 L1746.6 1213.78 L1746.02 1213.78 L1745.43 1213.78 L1744.84 1213.78 L1744.26 1213.78 L1743.67 1213.78 L1743.08 1213.78 L1742.5 1213.78 L1741.91 1213.78 L1741.32 1213.78 L1740.74 1213.78 L1740.15 1213.78 L1739.57 1213.78 L1738.98 1213.78 L1738.39 1213.78 L1737.81 1213.78 L1737.22 1213.78 L1736.63 1213.78 L1736.05 1213.78 L1735.46 1213.78 L1734.87 1213.78 L1734.29 1213.78 L1733.7 1213.78 L1733.11 1213.78 L1732.53 1213.78 L1731.94 1213.78 L1731.36 1213.78 L1730.77 1213.78 L1730.18 1213.78 L1729.6 1213.78 L1729.01 1213.78 L1728.42 1213.78 L1727.84 1213.78 L1727.25 1213.78 L1726.66 1213.78 L1726.08 1213.78 L1725.49 1213.78 L1724.91 1213.78 L1724.32 1213.78 L1723.73 1213.78 L1723.15 1213.78 L1722.56 1213.78 L1721.97 1213.78 L1721.39 1213.78 L1720.8 1213.78 L1720.21 1213.78 L1719.63 1213.78 L1719.04 1213.78 L1718.45 1213.78 L1717.87 1213.78 L1717.28 1213.78 L1716.7 1213.78 L1716.11 1213.78 L1715.52 1213.78 L1714.94 1213.78 L1714.35 1213.78 L1713.76 1213.78 L1713.18 1213.78 L1712.59 1213.78 L1712 1213.78 L1711.42 1213.78 L1710.83 1213.78 L1710.24 1213.78 L1709.66 1213.78 L1709.07 1213.78 L1708.49 1213.78 L1707.9 1213.78 L1707.31 1213.78 L1706.73 1213.78 L1706.14 1213.78 L1705.55 1213.78 L1704.97 1213.78 L1704.38 1213.78 L1703.79 1213.78 L1703.21 1213.78 L1702.62 1213.78 L1702.04 1213.78 L1701.45 1213.78 L1700.86 1213.78 L1700.28 1213.78 L1699.69 1213.78 L1699.1 1213.78 L1698.52 1213.78 L1697.93 1213.78 L1697.34 1213.78 L1696.76 1213.78 L1696.17 1213.78 L1695.58 1213.78 L1695 1213.78 L1694.41 1213.78 L1693.83 1213.78 L1693.24 1213.78 L1692.65 1213.78 L1692.07 1213.78 L1691.48 1213.78 L1690.89 1213.78 L1690.31 1213.78 L1689.72 1213.78 L1689.13 1213.78 L1688.55 1213.78 L1687.96 1213.78 L1687.37 1213.78 L1686.79 1213.78 L1686.2 1213.78 L1685.62 1213.78 L1685.03 1213.78 L1684.44 1213.78 L1683.86 1213.78 L1683.27 1213.78 L1682.68 1213.78 L1682.1 1213.78 L1681.51 1213.78 L1680.92 1213.78 L1680.34 1213.78 L1679.75 1213.78 L1679.17 1213.78 L1678.58 1213.78 L1677.99 1213.78 L1677.41 1213.78 L1676.82 1213.78 L1676.23 1213.78 L1675.65 1213.78 L1675.06 1213.78 L1674.47 1213.78 L1673.89 1213.78 L1673.3 1213.78 L1672.71 1213.78 L1672.13 1213.78 L1671.54 1213.78 L1670.96 1213.78 L1670.37 1213.78 L1669.78 1213.78 L1669.2 1213.78 L1668.61 1213.78 L1668.02 1213.78 L1667.44 1213.78 L1666.85 1213.78 L1666.26 1213.78 L1665.68 1213.78 L1665.09 1213.78 L1664.5 1213.78 L1663.92 1213.78 L1663.33 1213.78 L1662.75 1213.78 L1662.16 1213.78 L1661.57 1213.78 L1660.99 1213.78 L1660.4 1213.78 L1659.81 1213.78 L1659.23 1213.78 L1658.64 1213.78 L1658.05 1213.78 L1657.47 1213.78 L1656.88 1213.78 L1656.29 1213.78 L1655.71 1213.78 L1655.12 1213.78 L1654.54 1213.78 L1653.95 1213.78 L1653.36 1213.78 L1652.78 1213.78 L1652.19 1213.78 L1651.6 1213.78 L1651.02 1213.78 L1650.43 1213.78 L1649.84 1213.78 L1649.26 1213.78 L1648.67 1213.78 L1648.09 1213.78 L1647.5 1213.78 L1646.91 1213.78 L1646.33 1213.78 L1645.74 1213.78 L1645.15 1213.78 L1644.57 1213.78 L1643.98 1213.78 L1643.39 1213.78 L1642.81 1213.78 L1642.22 1213.78 L1641.63 1213.78 L1641.05 1213.78 L1640.46 1213.78 L1639.88 1213.78 L1639.29 1213.78 L1638.7 1213.78 L1638.12 1213.78 L1637.53 1213.78 L1636.94 1213.78 L1636.36 1213.78 L1635.77 1213.78 L1635.18 1213.78 L1634.6 1213.78 L1634.01 1213.78 L1633.42 1213.78 L1632.84 1213.78 L1632.25 1213.78 L1631.67 1213.78 L1631.08 1213.78 L1630.49 1213.78 L1629.91 1213.78 L1629.32 1213.78 L1628.73 1213.78 L1628.15 1213.78 L1627.56 1213.78 L1626.97 1213.78 L1626.39 1213.78 L1625.8 1213.78 L1625.22 1213.78 L1624.63 1213.78 L1624.04 1213.78 L1623.46 1213.78 L1622.87 1213.78 L1622.28 1213.78 L1621.7 1213.78 L1621.11 1213.78 L1620.52 1213.78 L1619.94 1213.78 L1619.35 1213.78 L1618.76 1213.78 L1618.18 1213.78 L1617.59 1213.78 L1617.01 1213.78 L1616.42 1213.78 L1615.83 1213.78 L1615.25 1213.78 L1614.66 1213.78 L1614.07 1213.78 L1613.49 1213.78 L1612.9 1213.78 L1612.31 1213.78 L1611.73 1213.78 L1611.14 1213.78 L1610.55 1213.78 L1609.97 1213.78 L1609.38 1213.78 L1608.8 1213.78 L1608.21 1213.78 L1607.62 1213.78 L1607.04 1213.78 L1606.45 1213.78 L1605.86 1213.78 L1605.28 1213.78 L1604.69 1213.78 L1604.1 1213.78 L1603.52 1213.78 L1602.93 1213.78 L1602.34 1213.78 L1601.76 1213.78 L1601.17 1213.78 L1600.59 1213.78 L1600 1213.78 L1599.41 1213.78 L1598.83 1213.78 L1598.24 1213.78 L1597.65 1213.78 L1597.07 1213.78 L1596.48 1213.78 L1595.89 1213.78 L1595.31 1213.78 L1594.72 1213.78 L1594.14 1213.78 L1593.55 1213.78 L1592.96 1213.78 L1592.38 1213.78 L1591.79 1213.78 L1591.2 1213.78 L1590.62 1213.78 L1590.03 1213.78 L1589.44 1213.78 L1588.86 1213.78 L1588.27 1213.78 L1587.68 1213.78 L1587.1 1213.78 L1586.51 1213.78 L1585.93 1213.78 L1585.34 1213.78 L1584.75 1213.78 L1584.17 1213.78 L1583.58 1213.78 L1582.99 1213.78 L1582.41 1213.78 L1581.82 1213.78 L1581.23 1213.78 L1580.65 1213.78 L1580.06 1213.78 L1579.47 1213.78 L1578.89 1213.78 L1578.3 1213.78 L1577.72 1213.78 L1577.13 1213.78 L1576.54 1213.78 L1575.96 1213.78 L1575.37 1213.78 L1574.78 1213.78 L1574.2 1213.78 L1573.61 1213.78 L1573.02 1213.78 L1572.44 1213.78 L1571.85 1213.78 L1571.27 1213.78 L1570.68 1213.78 L1570.09 1213.78 L1569.51 1213.78 L1568.92 1213.78 L1568.33 1213.78 L1567.75 1213.78 L1567.16 1213.78 L1566.57 1213.78 L1565.99 1213.78 L1565.4 1213.78 L1564.81 1213.78 L1564.23 1213.78 L1563.64 1213.78 L1563.06 1213.78 L1562.47 1213.78 L1561.88 1213.78 L1561.3 1213.78 L1560.71 1213.78 L1560.12 1213.78 L1559.54 1213.78 L1558.95 1213.78 L1558.36 1213.78 L1557.78 1213.78 L1557.19 1213.78 L1556.6 1213.78 L1556.02 1213.78 L1555.43 1213.78 L1554.85 1213.78 L1554.26 1213.78 L1553.67 1213.78 L1553.09 1213.78 L1552.5 1213.78 L1551.91 1213.78 L1551.33 1213.78 L1550.74 1213.78 L1550.15 1213.78 L1549.57 1213.78 L1548.98 1213.78 L1548.4 1213.78 L1547.81 1213.78 L1547.22 1213.78 L1546.64 1213.78 L1546.05 1213.78 L1545.46 1213.78 L1544.88 1213.78 L1544.29 1213.78 L1543.7 1213.78 L1543.12 1213.78 L1542.53 1213.78 L1541.94 1213.78 L1541.36 1213.78 L1540.77 1213.78 L1540.19 1213.78 L1539.6 1213.78 L1539.01 1213.78 L1538.43 1213.78 L1537.84 1213.78 L1537.25 1213.78 L1536.67 1213.78 L1536.08 1213.78 L1535.49 1213.78 L1534.91 1213.78 L1534.32 1213.78 L1533.73 1213.78 L1533.15 1213.78 L1532.56 1213.78 L1531.98 1213.78 L1531.39 1213.78 L1530.8 1213.78 L1530.22 1213.78 L1529.63 1213.78 L1529.04 1213.78 L1528.46 1213.78 L1527.87 1213.78 L1527.28 1213.78 L1526.7 1213.78 L1526.11 1213.78 L1525.52 1213.78 L1524.94 1213.78 L1524.35 1213.78 L1523.77 1213.78 L1523.18 1213.78 L1522.59 1213.78 L1522.01 1213.78 L1521.42 1213.78 L1520.83 1213.78 L1520.25 1213.78 L1519.66 1213.78 L1519.07 1213.78 L1518.49 1213.78 L1517.9 1213.78 L1517.32 1213.78 L1516.73 1213.78 L1516.14 1213.78 L1515.56 1213.78 L1514.97 1213.78 L1514.38 1213.78 L1513.8 1213.78 L1513.21 1213.78 L1512.62 1213.78 L1512.04 1213.78 L1511.45 1213.78 L1510.86 1213.78 L1510.28 1213.78 L1509.69 1213.78 L1509.11 1213.78 L1508.52 1213.78 L1507.93 1213.78 L1507.35 1213.78 L1506.76 1213.78 L1506.17 1213.78 L1505.59 1213.78 L1505 1213.78 L1504.41 1213.78 L1503.83 1213.78 L1503.24 1213.78 L1502.65 1213.78 L1502.07 1213.78 L1501.48 1213.78 L1500.9 1213.78 L1500.31 1213.78 L1499.72 1213.78 L1499.14 1213.78 L1498.55 1213.78 L1497.96 1213.78 L1497.38 1213.78 L1496.79 1213.78 L1496.2 1213.78 L1495.62 1213.78 L1495.03 1213.78 L1494.45 1213.78 L1493.86 1213.78 L1493.27 1213.78 L1492.69 1213.78 L1492.1 1213.78 L1491.51 1213.78 L1490.93 1213.78 L1490.34 1213.78 L1489.75 1213.78 L1489.17 1213.78 L1488.58 1213.78 L1487.99 1213.78 L1487.41 1213.78 L1486.82 1213.78 L1486.24 1213.78 L1485.65 1213.78 L1485.06 1213.78 L1484.48 1213.78 L1483.89 1213.78 L1483.3 1213.78 L1482.72 1213.78 L1482.13 1213.78 L1481.54 1213.78 L1480.96 1213.78 L1480.37 1213.78 L1479.78 1213.78 L1479.2 1213.78 L1478.61 1213.78 L1478.03 1213.78 L1477.44 1213.78 L1476.85 1213.78 L1476.27 1213.78 L1475.68 1213.78 L1475.09 1213.78 L1474.51 1213.78 L1473.92 1213.78 L1473.33 1213.78 L1472.75 1213.78 L1472.16 1213.78 L1471.57 1213.78 L1470.99 1213.78 L1470.4 1213.78 L1469.82 1213.78 L1469.23 1213.78 L1468.64 1213.78 L1468.06 1213.78 L1467.47 1213.78 L1466.88 1213.78 L1466.3 1213.78 L1465.71 1213.78 L1465.12 1213.78 L1464.54 1213.78 L1463.95 1213.78 L1463.37 1213.78 L1462.78 1213.78 L1462.19 1213.78 L1461.61 1213.78 L1461.02 1213.78 L1460.43 1213.78 L1459.85 1213.78 L1459.26 1213.78 L1458.67 1213.78 L1458.09 1213.78 L1457.5 1213.78 L1456.91 1213.78 L1456.33 1213.78 L1455.74 1213.78 L1455.16 1213.78 L1454.57 1213.78 L1453.98 1213.78 L1453.4 1213.78 L1452.81 1213.78 L1452.22 1213.78 L1451.64 1213.78 L1451.05 1213.78 L1450.46 1213.78 L1449.88 1213.78 L1449.29 1213.78 L1448.7 1213.78 L1448.12 1213.78 L1447.53 1213.78 L1446.95 1213.78 L1446.36 1213.78 L1445.77 1213.78 L1445.19 1213.78 L1444.6 1213.78 L1444.01 1213.78 L1443.43 1213.78 L1442.84 1213.78 L1442.25 1213.78 L1441.67 1213.78 L1441.08 1213.78 L1440.5 1213.78 L1439.91 1213.78 L1439.32 1213.78 L1438.74 1213.78 L1438.15 1213.78 L1437.56 1213.78 L1436.98 1213.78 L1436.39 1213.78 L1435.8 1213.78 L1435.22 1213.78 L1434.63 1213.78 L1434.04 1213.78 L1433.46 1213.78 L1432.87 1213.78 L1432.29 1213.78 L1431.7 1213.78 L1431.11 1213.78 L1430.53 1213.78 L1429.94 1213.78 L1429.35 1213.78 L1428.77 1213.78 L1428.18 1213.78 L1427.59 1213.78 L1427.01 1213.78 L1426.42 1213.78 L1425.83 1213.78 L1425.25 1213.78 L1424.66 1213.78 L1424.08 1213.78 L1423.49 1213.78 L1422.9 1213.78 L1422.32 1213.78 L1421.73 1213.78 L1421.14 1213.78 L1420.56 1213.78 L1419.97 1213.78 L1419.38 1213.78 L1418.8 1213.78 L1418.21 1213.78 L1417.63 1213.78 L1417.04 1213.78 L1416.45 1213.78 L1415.87 1213.78 L1415.28 1213.78 L1414.69 1213.78 L1414.11 1213.78 L1413.52 1213.78 L1412.93 1213.78 L1412.35 1213.78 L1411.76 1213.78 L1411.17 1213.78 L1410.59 1213.78 L1410 1213.78 L1409.42 1213.78 L1408.83 1213.78 L1408.24 1213.78 L1407.66 1213.78 L1407.07 1213.78 L1406.48 1213.78 L1405.9 1213.78 L1405.31 1213.78 L1404.72 1213.78 L1404.14 1213.78 L1403.55 1213.78 L1402.96 1213.78 L1402.38 1213.78 L1401.79 1213.78 L1401.21 1213.78 L1400.62 1213.78 L1400.03 1213.78 L1399.45 1213.78 L1398.86 1213.78 L1398.27 1213.78 L1397.69 1213.78 L1397.1 1213.78 L1396.51 1213.78 L1395.93 1213.78 L1395.34 1213.78 L1394.75 1213.78 L1394.17 1213.78 L1393.58 1213.78 L1393 1213.78 L1392.41 1213.78 L1391.82 1213.78 L1391.24 1213.78 L1390.65 1213.78 L1390.06 1213.78 L1389.48 1213.78 L1388.89 1213.78 L1388.3 1213.78 L1387.72 1213.78 L1387.13 1213.78 L1386.55 1213.78 L1385.96 1213.78 L1385.37 1213.78 L1384.79 1213.78 L1384.2 1213.78 L1383.61 1213.78 L1383.03 1213.78 L1382.44 1213.78 L1381.85 1213.78 L1381.27 1213.78 L1380.68 1213.78 L1380.09 1213.78 L1379.51 1213.78 L1378.92 1213.78 L1378.34 1213.78 L1377.75 1213.78 L1377.16 1213.78 L1376.58 1213.78 L1375.99 1213.78 L1375.4 1213.78 L1374.82 1213.78 L1374.23 1213.78 L1373.64 1213.78 L1373.06 1213.78 L1372.47 1213.78 L1371.88 1213.78 L1371.3 1213.78 L1370.71 1213.78 L1370.13 1213.78 L1369.54 1213.78 L1368.95 1213.78 L1368.37 1213.78 L1367.78 1213.78 L1367.19 1213.78 L1366.61 1213.78 L1366.02 1213.78 L1365.43 1213.78 L1364.85 1213.78 L1364.26 1213.78 L1363.68 1213.78 L1363.09 1213.78 L1362.5 1213.78 L1361.92 1213.78 L1361.33 1213.78 L1360.74 1213.78 L1360.16 1213.78 L1359.57 1213.78 L1358.98 1213.78 L1358.4 1213.78 L1357.81 1213.78 L1357.22 1213.78 L1356.64 1213.78 L1356.05 1213.78 L1355.47 1213.78 L1354.88 1213.78 L1354.29 1213.78 L1353.71 1213.78 L1353.12 1213.78 L1352.53 1213.78 L1351.95 1213.78 L1351.36 1213.78 L1350.77 1213.78 L1350.19 1213.78 L1349.6 1213.78 L1349.01 1213.78 L1348.43 1213.78 L1347.84 1213.78 L1347.26 1213.78 L1346.67 1213.78 L1346.08 1213.78 L1345.5 1213.78 L1344.91 1213.78 L1344.32 1213.78 L1343.74 1213.78 L1343.15 1213.78 L1342.56 1213.78 L1341.98 1213.78 L1341.39 1213.78 L1340.8 1213.78 L1340.22 1213.78 L1339.63 1213.78 L1339.05 1213.78 L1338.46 1213.78 L1337.87 1213.78 L1337.29 1213.78 L1336.7 1213.78 L1336.11 1213.78 L1335.53 1213.78 L1334.94 1213.78 L1334.35 1213.78 L1333.77 1213.78 L1333.18 1213.78 L1332.6 1213.78 L1332.01 1213.78 L1331.42 1213.78 L1330.84 1213.78 L1330.25 1213.78 L1329.66 1213.78 L1329.08 1213.78 L1328.49 1213.78 L1327.9 1213.78 L1327.32 1213.78 L1326.73 1213.78 L1326.14 1213.78 L1325.56 1213.78 L1324.97 1213.78 L1324.39 1213.78 L1323.8 1213.78 L1323.21 1213.78 L1322.63 1213.78 L1322.04 1213.78 L1321.45 1213.78 L1320.87 1213.78 L1320.28 1213.78 L1319.69 1213.78 L1319.11 1213.78 L1318.52 1213.78 L1317.93 1213.78 L1317.35 1213.78 L1316.76 1213.78 L1316.18 1213.78 L1315.59 1213.78 L1315 1213.78 L1314.42 1213.78 L1313.83 1213.78 L1313.24 1213.78 L1312.66 1213.78 L1312.07 1213.78 L1311.48 1213.78 L1310.9 1213.78 L1310.31 1213.78 L1309.73 1213.78 L1309.14 1213.78 L1308.55 1213.78 L1307.97 1213.78 L1307.38 1213.78 L1306.79 1213.78 L1306.21 1213.78 L1305.62 1213.78 L1305.03 1213.78 L1304.45 1213.78 L1303.86 1213.78 L1303.27 1213.78 L1302.69 1213.78 L1302.1 1213.78 L1301.52 1213.78 L1300.93 1213.78 L1300.34 1213.78 L1299.76 1213.78 L1299.17 1213.78 L1298.58 1213.78 L1298 1213.78 L1297.41 1213.78 L1296.82 1213.78 L1296.24 1213.78 L1295.65 1213.78 L1295.06 1213.78 L1294.48 1213.78 L1293.89 1213.78 L1293.31 1213.78 L1292.72 1213.78 L1292.13 1213.78 L1291.55 1213.78 L1290.96 1213.78 L1290.37 1213.78 L1289.79 1213.78 L1289.2 1213.78 L1288.61 1213.78 L1288.03 1213.78 L1287.44 1213.78 L1286.86 1213.78 L1286.27 1213.78 L1285.68 1213.78 L1285.1 1213.78 L1284.51 1213.78 L1283.92 1213.78 L1283.34 1213.78 L1282.75 1213.78 L1282.16 1213.78 L1281.58 1213.78 L1280.99 1213.78 L1280.4 1213.78 L1279.82 1213.78 L1279.23 1213.78 L1278.65 1213.78 L1278.06 1213.78 L1277.47 1213.78 L1276.89 1213.78 L1276.3 1213.78 L1275.71 1213.78 L1275.13 1213.78 L1274.54 1213.78 L1273.95 1213.78 L1273.37 1213.78 L1272.78 1213.78 L1272.19 1213.78 L1271.61 1213.78 L1271.02 1213.78 L1270.44 1213.78 L1269.85 1213.78 L1269.26 1213.78 L1268.68 1213.78 L1268.09 1213.78 L1267.5 1213.78 L1266.92 1213.78 L1266.33 1213.78 L1265.74 1213.78 L1265.16 1213.78 L1264.57 1213.78 L1263.98 1213.78 L1263.4 1213.78 L1262.81 1213.78 L1262.23 1213.78 L1261.64 1213.78 L1261.05 1213.78 L1260.47 1213.78 L1259.88 1213.78 L1259.29 1213.78 L1258.71 1213.78 L1258.12 1213.78 L1257.53 1213.78 L1256.95 1213.78 L1256.36 1213.78 L1255.78 1213.78 L1255.19 1213.78 L1254.6 1213.78 L1254.02 1213.78 L1253.43 1213.78 L1252.84 1213.78 L1252.26 1213.78 L1251.67 1213.78 L1251.08 1213.78 L1250.5 1213.78 L1249.91 1213.78 L1249.32 1213.78 L1248.74 1213.78 L1248.15 1213.78 L1247.57 1213.78 L1246.98 1213.78 L1246.39 1213.78 L1245.81 1213.78 L1245.22 1213.78 L1244.63 1213.78 L1244.05 1213.78 L1243.46 1213.78 L1242.87 1213.78 L1242.29 1213.78 L1241.7 1213.78 L1241.11 1213.78 L1240.53 1213.78 L1239.94 1213.78 L1239.36 1213.78 L1238.77 1213.78 L1238.18 1213.78 L1237.6 1213.78 L1237.01 1213.78 L1236.42 1213.78 L1235.84 1213.78 L1235.25 1213.78 L1234.66 1213.78 L1234.08 1213.78 L1233.49 1213.78 L1232.91 1213.78 L1232.32 1213.78 L1231.73 1213.78 L1231.15 1213.78 L1230.56 1213.78 L1229.97 1213.78 L1229.39 1213.78 L1228.8 1213.78 L1228.21 1213.78 L1227.63 1213.78 L1227.04 1213.78 L1226.45 1213.78 L1225.87 1213.78 L1225.28 1213.78 L1224.7 1213.78 L1224.11 1213.78 L1223.52 1213.78 L1222.94 1213.78 L1222.35 1213.78 L1221.76 1213.78 L1221.18 1213.78 L1220.59 1213.78 L1220 1213.78 L1219.42 1213.78 L1218.83 1213.78 L1218.24 1213.78 L1217.66 1213.78 L1217.07 1213.78 L1216.49 1213.78 L1215.9 1213.78 L1215.31 1213.78 L1214.73 1213.78 L1214.14 1213.78 L1213.55 1213.78 L1212.97 1213.78 L1212.38 1213.78 L1211.79 1213.78 L1211.21 1213.78 L1210.62 1213.78 L1210.03 1213.78 L1209.45 1213.78 L1208.86 1213.78 L1208.28 1213.78 L1207.69 1213.78 L1207.1 1213.78 L1206.52 1213.78 L1205.93 1213.78 L1205.34 1213.78 L1204.76 1213.78 L1204.17 1213.78 L1203.58 1213.78 L1203 1213.78 L1202.41 1213.78 L1201.83 1213.78 L1201.24 1213.78 L1200.65 1213.78 L1200.07 1213.78 L1199.48 1213.78 L1198.89 1213.78 L1198.31 1213.78 L1197.72 1213.78 L1197.13 1213.78 L1196.55 1213.78 L1195.96 1213.78 L1195.37 1213.78 L1194.79 1213.78 L1194.2 1213.78 L1193.62 1213.78 L1193.03 1213.78 L1192.44 1213.78 L1191.86 1213.78 L1191.27 1213.78 L1190.68 1213.78 L1190.1 1213.78 L1189.51 1213.78 L1188.92 1213.78 L1188.34 1213.78 L1187.75 1213.78 L1187.16 1213.78 L1186.58 1213.78 L1185.99 1213.78 L1185.41 1213.78 L1184.82 1213.78 L1184.23 1213.78 L1183.65 1213.78 L1183.06 1213.78 L1182.47 1213.78 L1181.89 1213.78 L1181.3 1213.78 L1180.71 1213.78 L1180.13 1213.78 L1179.54 1213.78 L1178.96 1213.78 L1178.37 1213.78 L1177.78 1213.78 L1177.2 1213.78 L1176.61 1213.78 L1176.02 1213.78 L1175.44 1213.78 L1174.85 1213.78 L1174.26 1213.78 L1173.68 1213.78 L1173.09 1213.78 L1172.5 1213.78 L1171.92 1213.78 L1171.33 1213.78 L1170.75 1213.78 L1170.16 1213.78 L1169.57 1213.78 L1168.99 1213.78 L1168.4 1213.78 L1167.81 1213.78 L1167.23 1213.78 L1166.64 1213.78 L1166.05 1213.78 L1165.47 1213.78 L1164.88 1213.78 L1164.29 1213.78 L1163.71 1213.78 L1163.12 1213.78 L1162.54 1213.78 L1161.95 1213.78 L1161.36 1213.78 L1160.78 1213.78 L1160.19 1213.78 L1159.6 1213.78 L1159.02 1213.78 L1158.43 1213.78 L1157.84 1213.78 L1157.26 1213.78 L1156.67 1213.78 L1156.09 1213.78 L1155.5 1213.78 L1154.91 1213.78 L1154.33 1213.78 L1153.74 1213.78 L1153.15 1213.78 L1152.57 1213.78 L1151.98 1213.78 L1151.39 1213.78 L1150.81 1213.78 L1150.22 1213.78 L1149.63 1213.78 L1149.05 1213.78 L1148.46 1213.78 L1147.88 1213.78 L1147.29 1213.78 L1146.7 1213.78 L1146.12 1213.78 L1145.53 1213.78 L1144.94 1213.78 L1144.36 1213.78 L1143.77 1213.78 L1143.18 1213.78 L1142.6 1213.78 L1142.01 1213.78 L1141.42 1213.78 L1140.84 1213.78 L1140.25 1213.78 L1139.67 1213.78 L1139.08 1213.78 L1138.49 1213.78 L1137.91 1213.78 L1137.32 1213.78 L1136.73 1213.78 L1136.15 1213.78 L1135.56 1213.78 L1134.97 1213.78 L1134.39 1213.78 L1133.8 1213.78 L1133.21 1213.78 L1132.63 1213.78 L1132.04 1213.78 L1131.46 1213.78 L1130.87 1213.78 L1130.28 1213.78 L1129.7 1213.78 L1129.11 1213.78 L1128.52 1213.78 L1127.94 1213.78 L1127.35 1213.78 L1126.76 1213.78 L1126.18 1213.78 L1125.59 1213.78 L1125.01 1213.78 L1124.42 1213.78 L1123.83 1213.78 L1123.25 1213.78 L1122.66 1213.78 L1122.07 1213.78 L1121.49 1213.78 L1120.9 1213.78 L1120.31 1213.78 L1119.73 1213.78 L1119.14 1213.78 L1118.55 1213.78 L1117.97 1213.78 L1117.38 1213.78 L1116.8 1213.78 L1116.21 1213.78 L1115.62 1213.78 L1115.04 1213.78 L1114.45 1213.78 L1113.86 1213.78 L1113.28 1213.78 L1112.69 1213.78 L1112.1 1213.78 L1111.52 1213.78 L1110.93 1213.78 L1110.34 1213.78 L1109.76 1213.78 L1109.17 1213.78 L1108.59 1213.78 L1108 1213.78 L1107.41 1213.78 L1106.83 1213.78 L1106.24 1213.78 L1105.65 1213.78 L1105.07 1213.78 L1104.48 1213.78 L1103.89 1213.78 L1103.31 1213.78 L1102.72 1213.78 L1102.14 1213.78 L1101.55 1213.78 L1100.96 1213.78 L1100.38 1213.78 L1099.79 1213.78 L1099.2 1213.78 L1098.62 1213.78 L1098.03 1213.78 L1097.44 1213.78 L1096.86 1213.78 L1096.27 1213.78 L1095.68 1213.78 L1095.1 1213.78 L1094.51 1213.78 L1093.93 1213.78 L1093.34 1213.78 L1092.75 1213.78 L1092.17 1213.78 L1091.58 1213.78 L1090.99 1213.78 L1090.41 1213.78 L1089.82 1213.78 L1089.23 1213.78 L1088.65 1213.78 L1088.06 1213.78 L1087.47 1213.78 L1086.89 1213.78 L1086.3 1213.78 L1085.72 1213.78 L1085.13 1213.78 L1084.54 1213.78 L1083.96 1213.78 L1083.37 1213.78 L1082.78 1213.78 L1082.2 1213.78 L1081.61 1213.78 L1081.02 1213.78 L1080.44 1213.78 L1079.85 1213.78 L1079.26 1213.78 L1078.68 1213.78 L1078.09 1213.78 L1077.51 1213.78 L1076.92 1213.78 L1076.33 1213.78 L1075.75 1213.78 L1075.16 1213.78 L1074.57 1213.78 L1073.99 1213.78 L1073.4 1213.78 L1072.81 1213.78 L1072.23 1213.78 L1071.64 1213.78 L1071.06 1213.78 L1070.47 1213.78 L1069.88 1213.78 L1069.3 1213.78 L1068.71 1213.78 L1068.12 1213.78 L1067.54 1213.78 L1066.95 1213.78 L1066.36 1213.78 L1065.78 1213.78 L1065.19 1213.78 L1064.6 1213.78 L1064.02 1213.78 L1063.43 1213.78 L1062.85 1213.78 L1062.26 1213.78 L1061.67 1213.78 L1061.09 1213.78 L1060.5 1213.78 L1059.91 1213.78 L1059.33 1213.78 L1058.74 1213.78 L1058.15 1213.78 L1057.57 1213.78 L1056.98 1213.78 L1056.39 1213.78 L1055.81 1213.78 L1055.22 1213.78 L1054.64 1213.78 L1054.05 1213.78 L1053.46 1213.78 L1052.88 1213.78 L1052.29 1213.78 L1051.7 1213.78 L1051.12 1213.78 L1050.53 1213.78 L1049.94 1213.78 L1049.36 1213.78 L1048.77 1213.78 L1048.19 1213.78 L1047.6 1213.78 L1047.01 1213.78 L1046.43 1213.78 L1045.84 1213.78 L1045.25 1213.78 L1044.67 1213.78 L1044.08 1213.78 L1043.49 1213.78 L1042.91 1213.78 L1042.32 1213.78 L1041.73 1213.78 L1041.15 1213.78 L1040.56 1213.78 L1039.98 1213.78 L1039.39 1213.78 L1038.8 1213.78 L1038.22 1213.78 L1037.63 1213.78 L1037.04 1213.78 L1036.46 1213.78 L1035.87 1213.78 L1035.28 1213.78 L1034.7 1213.78 L1034.11 1213.78 L1033.52 1213.78 L1032.94 1213.78 L1032.35 1213.78 L1031.77 1213.78 L1031.18 1213.78 L1030.59 1213.78 L1030.01 1213.78 L1029.42 1213.78 L1028.83 1213.78 L1028.25 1213.78 L1027.66 1213.78 L1027.07 1213.78 L1026.49 1213.78 L1025.9 1213.78 L1025.32 1213.78 L1024.73 1213.78 L1024.14 1213.78 L1023.56 1213.78 L1022.97 1213.78 L1022.38 1213.78 L1021.8 1213.78 L1021.21 1213.78 L1020.62 1213.78 L1020.04 1213.78 L1019.45 1213.78 L1018.86 1213.78 L1018.28 1213.78 L1017.69 1213.78 L1017.11 1213.78 L1016.52 1213.78 L1015.93 1213.78 L1015.35 1213.78 L1014.76 1213.78 L1014.17 1213.78 L1013.59 1213.78 L1013 1213.78 L1012.41 1213.78 L1011.83 1213.78 L1011.24 1213.78 L1010.65 1213.78 L1010.07 1213.78 L1009.48 1213.78 L1008.9 1213.78 L1008.31 1213.78 L1007.72 1213.78 L1007.14 1213.78 L1006.55 1213.78 L1005.96 1213.78 L1005.38 1213.78 L1004.79 1213.78 L1004.2 1213.78 L1003.62 1213.78 L1003.03 1213.78 L1002.44 1213.78 L1001.86 1213.78 L1001.27 1213.78 L1000.69 1213.78 L1000.1 1213.78 L999.513 1213.78 L998.926 1213.78 L998.34 1213.78 L997.754 1213.78 L997.167 1213.78 L996.581 1213.78 L995.994 1213.78 L995.408 1213.78 L994.822 1213.78 L994.235 1213.78 L993.649 1213.78 L993.062 1213.78 L992.476 1213.78 L991.889 1213.78 L991.303 1213.78 L990.717 1213.78 L990.13 1213.78 L989.544 1213.78 L988.957 1213.78 L988.371 1213.78 L987.785 1213.78 L987.198 1213.78 L986.612 1213.78 L986.025 1213.78  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.84 986.612,1213.84 987.198,1213.84 987.785,1213.84 988.371,1213.84 988.957,1213.84 989.544,1213.84 990.13,1213.84 990.717,1213.84 991.303,1213.84 991.889,1213.84 992.476,1213.84 993.062,1213.84 993.649,1213.84 994.235,1213.84 994.822,1213.84 995.408,1213.84 995.994,1213.84 996.581,1213.84 997.167,1213.84 997.754,1213.84 998.34,1213.84 998.926,1213.84 999.513,1213.84 1000.1,1213.84 1000.69,1213.84 1001.27,1213.84 1001.86,1213.84 1002.44,1213.84 1003.03,1213.84 1003.62,1213.84 1004.2,1213.84 1004.79,1213.84 1005.38,1213.84 1005.96,1213.84 1006.55,1213.84 1007.14,1213.84 1007.72,1213.84 1008.31,1213.84 1008.9,1213.84 1009.48,1213.84 1010.07,1213.84 1010.65,1213.84 1011.24,1213.84 1011.83,1213.84 1012.41,1213.84 1013,1213.84 1013.59,1213.84 1014.17,1213.84 1014.76,1213.84 1015.35,1213.84 1015.93,1213.84 1016.52,1213.84 1017.11,1213.84 1017.69,1213.84 1018.28,1213.84 1018.86,1213.84 1019.45,1213.84 1020.04,1213.84 1020.62,1213.84 1021.21,1213.84 1021.8,1213.84 1022.38,1213.84 1022.97,1213.84 1023.56,1213.84 1024.14,1213.84 1024.73,1213.84 1025.32,1213.84 1025.9,1213.84 1026.49,1213.84 1027.07,1213.84 1027.66,1213.84 1028.25,1213.84 1028.83,1213.84 1029.42,1213.84 1030.01,1213.84 1030.59,1213.84 1031.18,1213.84 1031.77,1213.84 1032.35,1213.84 1032.94,1213.84 1033.52,1213.84 1034.11,1213.84 1034.7,1213.84 1035.28,1213.84 1035.87,1213.84 1036.46,1213.84 1037.04,1213.84 1037.63,1213.84 1038.22,1213.84 1038.8,1213.84 1039.39,1213.84 1039.98,1213.84 1040.56,1213.84 1041.15,1213.84 1041.73,1213.84 1042.32,1213.84 1042.91,1213.84 1043.49,1213.84 1044.08,1213.84 1044.67,1213.84 1045.25,1213.84 1045.84,1213.84 1046.43,1213.84 1047.01,1213.84 1047.6,1213.84 1048.19,1213.84 1048.77,1213.84 1049.36,1213.84 1049.94,1213.84 1050.53,1213.84 1051.12,1213.84 1051.7,1213.84 1052.29,1213.84 1052.88,1213.84 1053.46,1213.84 1054.05,1213.84 1054.64,1213.84 1055.22,1213.84 1055.81,1213.84 1056.39,1213.84 1056.98,1213.84 1057.57,1213.84 1058.15,1213.84 1058.74,1213.84 1059.33,1213.84 1059.91,1213.84 1060.5,1213.84 1061.09,1213.84 1061.67,1213.84 1062.26,1213.84 1062.85,1213.84 1063.43,1213.84 1064.02,1213.84 1064.6,1213.84 1065.19,1213.84 1065.78,1213.84 1066.36,1213.84 1066.95,1213.84 1067.54,1213.84 1068.12,1213.84 1068.71,1213.84 1069.3,1213.84 1069.88,1213.84 1070.47,1213.84 1071.06,1213.84 1071.64,1213.84 1072.23,1213.84 1072.81,1213.84 1073.4,1213.84 1073.99,1213.84 1074.57,1213.84 1075.16,1213.84 1075.75,1213.84 1076.33,1213.84 1076.92,1213.84 1077.51,1213.84 1078.09,1213.84 1078.68,1213.84 1079.26,1213.84 1079.85,1213.84 1080.44,1213.84 1081.02,1213.84 1081.61,1213.84 1082.2,1213.84 1082.78,1213.84 1083.37,1213.84 1083.96,1213.84 1084.54,1213.84 1085.13,1213.84 1085.72,1213.84 1086.3,1213.84 1086.89,1213.84 1087.47,1213.84 1088.06,1213.84 1088.65,1213.84 1089.23,1213.84 1089.82,1213.84 1090.41,1213.84 1090.99,1213.84 1091.58,1213.84 1092.17,1213.84 1092.75,1213.84 1093.34,1213.84 1093.93,1213.84 1094.51,1213.84 1095.1,1213.84 1095.68,1213.84 1096.27,1213.84 1096.86,1213.84 1097.44,1213.84 1098.03,1213.84 1098.62,1213.84 1099.2,1213.84 1099.79,1213.84 1100.38,1213.84 1100.96,1213.84 1101.55,1213.84 1102.14,1213.84 1102.72,1213.84 1103.31,1213.84 1103.89,1213.84 1104.48,1213.84 1105.07,1213.84 1105.65,1213.84 1106.24,1213.84 1106.83,1213.84 1107.41,1213.84 1108,1213.84 1108.59,1213.84 1109.17,1213.84 1109.76,1213.84 1110.34,1213.84 1110.93,1213.84 1111.52,1213.84 1112.1,1213.84 1112.69,1213.84 1113.28,1213.84 1113.86,1213.84 1114.45,1213.84 1115.04,1213.84 1115.62,1213.84 1116.21,1213.84 1116.8,1213.84 1117.38,1213.84 1117.97,1213.84 1118.55,1213.84 1119.14,1213.84 1119.73,1213.84 1120.31,1213.84 1120.9,1213.84 1121.49,1213.84 1122.07,1213.84 1122.66,1213.84 1123.25,1213.84 1123.83,1213.84 1124.42,1213.84 1125.01,1213.84 1125.59,1213.84 1126.18,1213.84 1126.76,1213.84 1127.35,1213.84 1127.94,1213.84 1128.52,1213.84 1129.11,1213.84 1129.7,1213.84 1130.28,1213.84 1130.87,1213.84 1131.46,1213.84 1132.04,1213.84 1132.63,1213.84 1133.21,1213.84 1133.8,1213.84 1134.39,1213.84 1134.97,1213.84 1135.56,1213.84 1136.15,1213.84 1136.73,1213.84 1137.32,1213.84 1137.91,1213.84 1138.49,1213.84 1139.08,1213.84 1139.67,1213.84 1140.25,1213.84 1140.84,1213.84 1141.42,1213.84 1142.01,1213.84 1142.6,1213.84 1143.18,1213.84 1143.77,1213.84 1144.36,1213.84 1144.94,1213.84 1145.53,1213.84 1146.12,1213.84 1146.7,1213.84 1147.29,1213.84 1147.88,1213.84 1148.46,1213.84 1149.05,1213.84 1149.63,1213.84 1150.22,1213.84 1150.81,1213.84 1151.39,1213.84 1151.98,1213.84 1152.57,1213.84 1153.15,1213.84 1153.74,1213.84 1154.33,1213.84 1154.91,1213.84 1155.5,1213.84 1156.09,1213.84 1156.67,1213.84 1157.26,1213.84 1157.84,1213.84 1158.43,1213.84 1159.02,1213.84 1159.6,1213.84 1160.19,1213.84 1160.78,1213.84 1161.36,1213.84 1161.95,1213.84 1162.54,1213.84 1163.12,1213.84 1163.71,1213.84 1164.29,1213.84 1164.88,1213.84 1165.47,1213.84 1166.05,1213.84 1166.64,1213.84 1167.23,1213.84 1167.81,1213.84 1168.4,1213.84 1168.99,1213.84 1169.57,1213.84 1170.16,1213.84 1170.75,1213.84 1171.33,1213.84 1171.92,1213.84 1172.5,1213.84 1173.09,1213.84 1173.68,1213.84 1174.26,1213.84 1174.85,1213.84 1175.44,1213.84 1176.02,1213.84 1176.61,1213.84 1177.2,1213.84 1177.78,1213.84 1178.37,1213.84 1178.96,1213.84 1179.54,1213.84 1180.13,1213.84 1180.71,1213.84 1181.3,1213.84 1181.89,1213.84 1182.47,1213.84 1183.06,1213.84 1183.65,1213.84 1184.23,1213.84 1184.82,1213.84 1185.41,1213.84 1185.99,1213.84 1186.58,1213.84 1187.16,1213.84 1187.75,1213.84 1188.34,1213.84 1188.92,1213.84 1189.51,1213.84 1190.1,1213.84 1190.68,1213.84 1191.27,1213.84 1191.86,1213.84 1192.44,1213.84 1193.03,1213.84 1193.62,1213.84 1194.2,1213.84 1194.79,1213.84 1195.37,1213.84 1195.96,1213.84 1196.55,1213.84 1197.13,1213.84 1197.72,1213.84 1198.31,1213.84 1198.89,1213.84 1199.48,1213.84 1200.07,1213.84 1200.65,1213.84 1201.24,1213.84 1201.83,1213.84 1202.41,1213.84 1203,1213.84 1203.58,1213.84 1204.17,1213.84 1204.76,1213.84 1205.34,1213.84 1205.93,1213.84 1206.52,1213.84 1207.1,1213.84 1207.69,1213.84 1208.28,1213.84 1208.86,1213.84 1209.45,1213.84 1210.03,1213.84 1210.62,1213.84 1211.21,1213.84 1211.79,1213.84 1212.38,1213.84 1212.97,1213.84 1213.55,1213.84 1214.14,1213.84 1214.73,1213.84 1215.31,1213.84 1215.9,1213.84 1216.49,1213.84 1217.07,1213.84 1217.66,1213.84 1218.24,1213.84 1218.83,1213.84 1219.42,1213.84 1220,1213.84 1220.59,1213.84 1221.18,1213.84 1221.76,1213.84 1222.35,1213.84 1222.94,1213.84 1223.52,1213.84 1224.11,1213.84 1224.7,1213.84 1225.28,1213.84 1225.87,1213.84 1226.45,1213.84 1227.04,1213.84 1227.63,1213.84 1228.21,1213.84 1228.8,1213.84 1229.39,1213.84 1229.97,1213.84 1230.56,1213.84 1231.15,1213.84 1231.73,1213.84 1232.32,1213.84 1232.91,1213.84 1233.49,1213.84 1234.08,1213.84 1234.66,1213.84 1235.25,1213.84 1235.84,1213.84 1236.42,1213.84 1237.01,1213.84 1237.6,1213.84 1238.18,1213.84 1238.77,1213.84 1239.36,1213.84 1239.94,1213.84 1240.53,1213.84 1241.11,1213.84 1241.7,1213.84 1242.29,1213.84 1242.87,1213.84 1243.46,1213.84 1244.05,1213.84 1244.63,1213.84 1245.22,1213.84 1245.81,1213.84 1246.39,1213.84 1246.98,1213.84 1247.57,1213.84 1248.15,1213.84 1248.74,1213.84 1249.32,1213.84 1249.91,1213.84 1250.5,1213.84 1251.08,1213.84 1251.67,1213.84 1252.26,1213.84 1252.84,1213.84 1253.43,1213.84 1254.02,1213.84 1254.6,1213.84 1255.19,1213.84 1255.78,1213.84 1256.36,1213.84 1256.95,1213.84 1257.53,1213.84 1258.12,1213.84 1258.71,1213.84 1259.29,1213.84 1259.88,1213.84 1260.47,1213.84 1261.05,1213.84 1261.64,1213.84 1262.23,1213.84 1262.81,1213.84 1263.4,1213.84 1263.98,1213.84 1264.57,1213.84 1265.16,1213.84 1265.74,1213.84 1266.33,1213.84 1266.92,1213.84 1267.5,1213.84 1268.09,1213.84 1268.68,1213.84 1269.26,1213.84 1269.85,1213.84 1270.44,1213.84 1271.02,1213.84 1271.61,1213.84 1272.19,1213.84 1272.78,1213.84 1273.37,1213.84 1273.95,1213.84 1274.54,1213.84 1275.13,1213.84 1275.71,1213.84 1276.3,1213.84 1276.89,1213.84 1277.47,1213.84 1278.06,1213.84 1278.65,1213.84 1279.23,1213.84 1279.82,1213.84 1280.4,1213.84 1280.99,1213.84 1281.58,1213.84 1282.16,1213.84 1282.75,1213.84 1283.34,1213.84 1283.92,1213.84 1284.51,1213.84 1285.1,1213.84 1285.68,1213.84 1286.27,1213.84 1286.86,1213.84 1287.44,1213.84 1288.03,1213.84 1288.61,1213.84 1289.2,1213.84 1289.79,1213.84 1290.37,1213.84 1290.96,1213.84 1291.55,1213.84 1292.13,1213.84 1292.72,1213.84 1293.31,1213.84 1293.89,1213.84 1294.48,1213.84 1295.06,1213.84 1295.65,1213.84 1296.24,1213.84 1296.82,1213.84 1297.41,1213.84 1298,1213.84 1298.58,1213.84 1299.17,1213.84 1299.76,1213.84 1300.34,1213.84 1300.93,1213.84 1301.52,1213.84 1302.1,1213.84 1302.69,1213.84 1303.27,1213.84 1303.86,1213.84 1304.45,1213.84 1305.03,1213.84 1305.62,1213.84 1306.21,1213.84 1306.79,1213.84 1307.38,1213.84 1307.97,1213.84 1308.55,1213.84 1309.14,1213.84 1309.73,1213.84 1310.31,1213.84 1310.9,1213.84 1311.48,1213.84 1312.07,1213.84 1312.66,1213.84 1313.24,1213.84 1313.83,1213.84 1314.42,1213.84 1315,1213.84 1315.59,1213.84 1316.18,1213.84 1316.76,1213.84 1317.35,1213.84 1317.93,1213.84 1318.52,1213.84 1319.11,1213.84 1319.69,1213.84 1320.28,1213.84 1320.87,1213.84 1321.45,1213.84 1322.04,1213.84 1322.63,1213.84 1323.21,1213.84 1323.8,1213.84 1324.39,1213.84 1324.97,1213.84 1325.56,1213.84 1326.14,1213.84 1326.73,1213.84 1327.32,1213.84 1327.9,1213.84 1328.49,1213.84 1329.08,1213.84 1329.66,1213.84 1330.25,1213.84 1330.84,1213.84 1331.42,1213.84 1332.01,1213.84 1332.6,1213.84 1333.18,1213.84 1333.77,1213.84 1334.35,1213.84 1334.94,1213.84 1335.53,1213.84 1336.11,1213.84 1336.7,1213.84 1337.29,1213.84 1337.87,1213.84 1338.46,1213.84 1339.05,1213.84 1339.63,1213.84 1340.22,1213.84 1340.8,1213.84 1341.39,1213.84 1341.98,1213.84 1342.56,1213.84 1343.15,1213.84 1343.74,1213.84 1344.32,1213.84 1344.91,1213.84 1345.5,1213.84 1346.08,1213.84 1346.67,1213.84 1347.26,1213.84 1347.84,1213.84 1348.43,1213.84 1349.01,1213.84 1349.6,1213.84 1350.19,1213.84 1350.77,1213.84 1351.36,1213.84 1351.95,1213.84 1352.53,1213.84 1353.12,1213.84 1353.71,1213.84 1354.29,1213.84 1354.88,1213.84 1355.47,1213.84 1356.05,1213.84 1356.64,1213.84 1357.22,1213.84 1357.81,1213.84 1358.4,1213.84 1358.98,1213.84 1359.57,1213.84 1360.16,1213.84 1360.74,1213.84 1361.33,1213.84 1361.92,1213.84 1362.5,1213.84 1363.09,1213.84 1363.68,1213.84 1364.26,1213.84 1364.85,1213.84 1365.43,1213.84 1366.02,1213.84 1366.61,1213.84 1367.19,1213.84 1367.78,1213.84 1368.37,1213.84 1368.95,1213.84 1369.54,1213.84 1370.13,1213.84 1370.71,1213.84 1371.3,1213.84 1371.88,1213.84 1372.47,1213.84 1373.06,1213.84 1373.64,1213.84 1374.23,1213.84 1374.82,1213.84 1375.4,1213.84 1375.99,1213.84 1376.58,1213.84 1377.16,1213.84 1377.75,1213.84 1378.34,1213.84 1378.92,1213.84 1379.51,1213.84 1380.09,1213.84 1380.68,1213.84 1381.27,1213.84 1381.85,1213.84 1382.44,1213.84 1383.03,1213.84 1383.61,1213.84 1384.2,1213.84 1384.79,1213.84 1385.37,1213.84 1385.96,1213.84 1386.55,1213.84 1387.13,1213.84 1387.72,1213.84 1388.3,1213.84 1388.89,1213.84 1389.48,1213.84 1390.06,1213.84 1390.65,1213.84 1391.24,1213.84 1391.82,1213.84 1392.41,1213.84 1393,1213.84 1393.58,1213.84 1394.17,1213.84 1394.75,1213.84 1395.34,1213.84 1395.93,1213.84 1396.51,1213.84 1397.1,1213.84 1397.69,1213.84 1398.27,1213.84 1398.86,1213.84 1399.45,1213.84 1400.03,1213.84 1400.62,1213.84 1401.21,1213.84 1401.79,1213.84 1402.38,1213.84 1402.96,1213.84 1403.55,1213.84 1404.14,1213.84 1404.72,1213.84 1405.31,1213.84 1405.9,1213.84 1406.48,1213.84 1407.07,1213.84 1407.66,1213.84 1408.24,1213.84 1408.83,1213.84 1409.42,1213.84 1410,1213.84 1410.59,1213.84 1411.17,1213.84 1411.76,1213.84 1412.35,1213.84 1412.93,1213.84 1413.52,1213.84 1414.11,1213.84 1414.69,1213.84 1415.28,1213.84 1415.87,1213.84 1416.45,1213.84 1417.04,1213.84 1417.63,1213.84 1418.21,1213.84 1418.8,1213.84 1419.38,1213.84 1419.97,1213.84 1420.56,1213.84 1421.14,1213.84 1421.73,1213.84 1422.32,1213.84 1422.9,1213.84 1423.49,1213.84 1424.08,1213.84 1424.66,1213.84 1425.25,1213.84 1425.83,1213.84 1426.42,1213.84 1427.01,1213.84 1427.59,1213.84 1428.18,1213.84 1428.77,1213.84 1429.35,1213.84 1429.94,1213.84 1430.53,1213.84 1431.11,1213.84 1431.7,1213.84 1432.29,1213.84 1432.87,1213.84 1433.46,1213.84 1434.04,1213.84 1434.63,1213.84 1435.22,1213.84 1435.8,1213.84 1436.39,1213.84 1436.98,1213.84 1437.56,1213.84 1438.15,1213.84 1438.74,1213.84 1439.32,1213.84 1439.91,1213.84 1440.5,1213.84 1441.08,1213.84 1441.67,1213.84 1442.25,1213.84 1442.84,1213.84 1443.43,1213.84 1444.01,1213.84 1444.6,1213.84 1445.19,1213.84 1445.77,1213.84 1446.36,1213.84 1446.95,1213.84 1447.53,1213.84 1448.12,1213.84 1448.7,1213.84 1449.29,1213.84 1449.88,1213.84 1450.46,1213.84 1451.05,1213.84 1451.64,1213.84 1452.22,1213.84 1452.81,1213.84 1453.4,1213.84 1453.98,1213.84 1454.57,1213.84 1455.16,1213.84 1455.74,1213.84 1456.33,1213.84 1456.91,1213.84 1457.5,1213.84 1458.09,1213.84 1458.67,1213.84 1459.26,1213.84 1459.85,1213.84 1460.43,1213.84 1461.02,1213.84 1461.61,1213.84 1462.19,1213.84 1462.78,1213.84 1463.37,1213.84 1463.95,1213.84 1464.54,1213.84 1465.12,1213.84 1465.71,1213.84 1466.3,1213.84 1466.88,1213.84 1467.47,1213.84 1468.06,1213.84 1468.64,1213.84 1469.23,1213.84 1469.82,1213.84 1470.4,1213.84 1470.99,1213.84 1471.57,1213.84 1472.16,1213.84 1472.75,1213.84 1473.33,1213.84 1473.92,1213.84 1474.51,1213.84 1475.09,1213.84 1475.68,1213.84 1476.27,1213.84 1476.85,1213.84 1477.44,1213.84 1478.03,1213.84 1478.61,1213.84 1479.2,1213.84 1479.78,1213.84 1480.37,1213.84 1480.96,1213.84 1481.54,1213.84 1482.13,1213.84 1482.72,1213.84 1483.3,1213.84 1483.89,1213.84 1484.48,1213.84 1485.06,1213.84 1485.65,1213.84 1486.24,1213.84 1486.82,1213.84 1487.41,1213.84 1487.99,1213.84 1488.58,1213.84 1489.17,1213.84 1489.75,1213.84 1490.34,1213.84 1490.93,1213.84 1491.51,1213.84 1492.1,1213.84 1492.69,1213.84 1493.27,1213.84 1493.86,1213.84 1494.45,1213.84 1495.03,1213.84 1495.62,1213.84 1496.2,1213.84 1496.79,1213.84 1497.38,1213.84 1497.96,1213.84 1498.55,1213.84 1499.14,1213.84 1499.72,1213.84 1500.31,1213.84 1500.9,1213.84 1501.48,1213.84 1502.07,1213.84 1502.65,1213.84 1503.24,1213.84 1503.83,1213.84 1504.41,1213.84 1505,1213.84 1505.59,1213.84 1506.17,1213.84 1506.76,1213.84 1507.35,1213.84 1507.93,1213.84 1508.52,1213.84 1509.11,1213.84 1509.69,1213.84 1510.28,1213.84 1510.86,1213.84 1511.45,1213.84 1512.04,1213.84 1512.62,1213.84 1513.21,1213.84 1513.8,1213.84 1514.38,1213.84 1514.97,1213.84 1515.56,1213.84 1516.14,1213.84 1516.73,1213.84 1517.32,1213.84 1517.9,1213.84 1518.49,1213.84 1519.07,1213.84 1519.66,1213.84 1520.25,1213.84 1520.83,1213.84 1521.42,1213.84 1522.01,1213.84 1522.59,1213.84 1523.18,1213.84 1523.77,1213.84 1524.35,1213.84 1524.94,1213.84 1525.52,1213.84 1526.11,1213.84 1526.7,1213.84 1527.28,1213.84 1527.87,1213.84 1528.46,1213.84 1529.04,1213.84 1529.63,1213.84 1530.22,1213.84 1530.8,1213.84 1531.39,1213.84 1531.98,1213.84 1532.56,1213.84 1533.15,1213.84 1533.73,1213.84 1534.32,1213.84 1534.91,1213.84 1535.49,1213.84 1536.08,1213.84 1536.67,1213.84 1537.25,1213.84 1537.84,1213.84 1538.43,1213.84 1539.01,1213.84 1539.6,1213.84 1540.19,1213.84 1540.77,1213.84 1541.36,1213.84 1541.94,1213.84 1542.53,1213.84 1543.12,1213.84 1543.7,1213.84 1544.29,1213.84 1544.88,1213.84 1545.46,1213.84 1546.05,1213.84 1546.64,1213.84 1547.22,1213.84 1547.81,1213.84 1548.4,1213.84 1548.98,1213.84 1549.57,1213.84 1550.15,1213.84 1550.74,1213.84 1551.33,1213.84 1551.91,1213.84 1552.5,1213.84 1553.09,1213.84 1553.67,1213.84 1554.26,1213.84 1554.85,1213.84 1555.43,1213.84 1556.02,1213.84 1556.6,1213.84 1557.19,1213.84 1557.78,1213.84 1558.36,1213.84 1558.95,1213.84 1559.54,1213.84 1560.12,1213.84 1560.71,1213.84 1561.3,1213.84 1561.88,1213.84 1562.47,1213.84 1563.06,1213.84 1563.64,1213.84 1564.23,1213.84 1564.81,1213.84 1565.4,1213.84 1565.99,1213.84 1566.57,1213.84 1567.16,1213.84 1567.75,1213.84 1568.33,1213.84 1568.92,1213.84 1569.51,1213.84 1570.09,1213.84 1570.68,1213.84 1571.27,1213.84 1571.85,1213.84 1572.44,1213.84 1573.02,1213.84 1573.61,1213.84 1574.2,1213.84 1574.78,1213.84 1575.37,1213.84 1575.96,1213.84 1576.54,1213.84 1577.13,1213.84 1577.72,1213.84 1578.3,1213.84 1578.89,1213.84 1579.47,1213.84 1580.06,1213.84 1580.65,1213.84 1581.23,1213.84 1581.82,1213.84 1582.41,1213.84 1582.99,1213.84 1583.58,1213.84 1584.17,1213.84 1584.75,1213.84 1585.34,1213.84 1585.93,1213.84 1586.51,1213.84 1587.1,1213.84 1587.68,1213.84 1588.27,1213.84 1588.86,1213.84 1589.44,1213.84 1590.03,1213.84 1590.62,1213.84 1591.2,1213.84 1591.79,1213.84 1592.38,1213.84 1592.96,1213.84 1593.55,1213.84 1594.14,1213.84 1594.72,1213.84 1595.31,1213.84 1595.89,1213.84 1596.48,1213.84 1597.07,1213.84 1597.65,1213.84 1598.24,1213.84 1598.83,1213.84 1599.41,1213.84 1600,1213.84 1600.59,1213.84 1601.17,1213.84 1601.76,1213.84 1602.34,1213.84 1602.93,1213.84 1603.52,1213.84 1604.1,1213.84 1604.69,1213.84 1605.28,1213.84 1605.86,1213.84 1606.45,1213.84 1607.04,1213.84 1607.62,1213.84 1608.21,1213.84 1608.8,1213.84 1609.38,1213.84 1609.97,1213.84 1610.55,1213.84 1611.14,1213.84 1611.73,1213.84 1612.31,1213.84 1612.9,1213.84 1613.49,1213.84 1614.07,1213.84 1614.66,1213.84 1615.25,1213.84 1615.83,1213.84 1616.42,1213.84 1617.01,1213.84 1617.59,1213.84 1618.18,1213.84 1618.76,1213.84 1619.35,1213.84 1619.94,1213.84 1620.52,1213.84 1621.11,1213.84 1621.7,1213.84 1622.28,1213.84 1622.87,1213.84 1623.46,1213.84 1624.04,1213.84 1624.63,1213.84 1625.22,1213.84 1625.8,1213.84 1626.39,1213.84 1626.97,1213.84 1627.56,1213.84 1628.15,1213.84 1628.73,1213.84 1629.32,1213.84 1629.91,1213.84 1630.49,1213.84 1631.08,1213.84 1631.67,1213.84 1632.25,1213.84 1632.84,1213.84 1633.42,1213.84 1634.01,1213.84 1634.6,1213.84 1635.18,1213.84 1635.77,1213.84 1636.36,1213.84 1636.94,1213.84 1637.53,1213.84 1638.12,1213.84 1638.7,1213.84 1639.29,1213.84 1639.88,1213.84 1640.46,1213.84 1641.05,1213.84 1641.63,1213.84 1642.22,1213.84 1642.81,1213.84 1643.39,1213.84 1643.98,1213.84 1644.57,1213.84 1645.15,1213.84 1645.74,1213.84 1646.33,1213.84 1646.91,1213.84 1647.5,1213.84 1648.09,1213.84 1648.67,1213.84 1649.26,1213.84 1649.84,1213.84 1650.43,1213.84 1651.02,1213.84 1651.6,1213.84 1652.19,1213.84 1652.78,1213.84 1653.36,1213.84 1653.95,1213.84 1654.54,1213.84 1655.12,1213.84 1655.71,1213.84 1656.29,1213.84 1656.88,1213.84 1657.47,1213.84 1658.05,1213.84 1658.64,1213.84 1659.23,1213.84 1659.81,1213.84 1660.4,1213.84 1660.99,1213.84 1661.57,1213.84 1662.16,1213.84 1662.75,1213.84 1663.33,1213.84 1663.92,1213.84 1664.5,1213.84 1665.09,1213.84 1665.68,1213.84 1666.26,1213.84 1666.85,1213.84 1667.44,1213.84 1668.02,1213.84 1668.61,1213.84 1669.2,1213.84 1669.78,1213.84 1670.37,1213.84 1670.96,1213.84 1671.54,1213.84 1672.13,1213.84 1672.71,1213.84 1673.3,1213.84 1673.89,1213.84 1674.47,1213.84 1675.06,1213.84 1675.65,1213.84 1676.23,1213.84 1676.82,1213.84 1677.41,1213.84 1677.99,1213.84 1678.58,1213.84 1679.17,1213.84 1679.75,1213.84 1680.34,1213.84 1680.92,1213.84 1681.51,1213.84 1682.1,1213.84 1682.68,1213.84 1683.27,1213.84 1683.86,1213.84 1684.44,1213.84 1685.03,1213.84 1685.62,1213.84 1686.2,1213.84 1686.79,1213.84 1687.37,1213.84 1687.96,1213.84 1688.55,1213.84 1689.13,1213.84 1689.72,1213.84 1690.31,1213.84 1690.89,1213.84 1691.48,1213.84 1692.07,1213.84 1692.65,1213.84 1693.24,1213.84 1693.83,1213.84 1694.41,1213.84 1695,1213.84 1695.58,1213.84 1696.17,1213.84 1696.76,1213.84 1697.34,1213.84 1697.93,1213.84 1698.52,1213.84 1699.1,1213.84 1699.69,1213.84 1700.28,1213.84 1700.86,1213.84 1701.45,1213.84 1702.04,1213.84 1702.62,1213.84 1703.21,1213.84 1703.79,1213.84 1704.38,1213.84 1704.97,1213.84 1705.55,1213.84 1706.14,1213.84 1706.73,1213.84 1707.31,1213.84 1707.9,1213.84 1708.49,1213.84 1709.07,1213.84 1709.66,1213.84 1710.24,1213.84 1710.83,1213.84 1711.42,1213.84 1712,1213.84 1712.59,1213.84 1713.18,1213.84 1713.76,1213.84 1714.35,1213.84 1714.94,1213.84 1715.52,1213.84 1716.11,1213.84 1716.7,1213.84 1717.28,1213.84 1717.87,1213.84 1718.45,1213.84 1719.04,1213.84 1719.63,1213.84 1720.21,1213.84 1720.8,1213.84 1721.39,1213.84 1721.97,1213.84 1722.56,1213.84 1723.15,1213.84 1723.73,1213.84 1724.32,1213.84 1724.91,1213.84 1725.49,1213.84 1726.08,1213.84 1726.66,1213.84 1727.25,1213.84 1727.84,1213.84 1728.42,1213.84 1729.01,1213.84 1729.6,1213.84 1730.18,1213.84 1730.77,1213.84 1731.36,1213.84 1731.94,1213.84 1732.53,1213.84 1733.11,1213.84 1733.7,1213.84 1734.29,1213.84 1734.87,1213.84 1735.46,1213.84 1736.05,1213.84 1736.63,1213.84 1737.22,1213.84 1737.81,1213.84 1738.39,1213.84 1738.98,1213.84 1739.57,1213.84 1740.15,1213.84 1740.74,1213.84 1741.32,1213.84 1741.91,1213.84 1742.5,1213.84 1743.08,1213.84 1743.67,1213.84 1744.26,1213.84 1744.84,1213.84 1745.43,1213.84 1746.02,1213.84 1746.6,1213.84 1747.19,1213.84 1747.78,1213.84 1748.36,1213.84 1748.95,1213.84 1749.53,1213.84 1750.12,1213.84 1750.71,1213.84 1751.29,1213.84 1751.88,1213.84 1752.47,1213.84 1753.05,1213.84 1753.64,1213.84 1754.23,1213.84 1754.81,1213.84 1755.4,1213.84 1755.99,1213.84 1756.57,1213.84 1757.16,1213.84 1757.74,1213.84 1758.33,1213.84 1758.92,1213.84 1759.5,1213.84 1760.09,1213.84 1760.68,1213.84 1761.26,1213.84 1761.85,1213.84 1762.44,1213.84 1763.02,1213.84 1763.61,1213.84 1764.19,1213.84 1764.78,1213.84 1765.37,1213.84 1765.95,1213.84 1766.54,1213.84 1767.13,1213.84 1767.71,1213.84 1768.3,1213.84 1768.89,1213.84 1769.47,1213.84 1770.06,1213.84 1770.65,1213.84 1771.23,1213.84 1771.82,1213.84 1772.4,1213.84 1772.99,1213.84 1773.58,1213.84 1774.16,1213.84 1774.75,1213.84 1775.34,1213.84 1775.92,1213.84 1776.51,1213.84 1777.1,1213.84 1777.68,1213.84 1778.27,1213.84 1778.86,1213.84 1779.44,1213.84 1780.03,1213.84 1780.61,1213.84 1781.2,1213.84 1781.79,1213.84 1782.37,1213.84 1782.96,1213.84 1783.55,1213.84 1784.13,1213.84 1784.72,1213.84 1785.31,1213.84 1785.89,1213.84 1786.48,1213.84 1787.06,1213.84 1787.65,1213.84 1788.24,1213.84 1788.82,1213.84 1789.41,1213.84 1790,1213.84 1790.58,1213.84 1791.17,1213.84 1791.76,1213.84 1792.34,1213.84 1792.93,1213.84 1793.52,1213.84 1794.1,1213.84 1794.69,1213.84 1795.27,1213.84 1795.86,1213.84 1796.45,1213.84 1797.03,1213.84 1797.62,1213.84 1798.21,1213.84 1798.79,1213.84 1799.38,1213.84 1799.97,1213.84 1800.55,1213.84 1801.14,1213.84 1801.73,1213.84 1802.31,1213.84 1802.9,1213.84 1803.48,1213.84 1804.07,1213.84 1804.66,1213.84 1805.24,1213.84 1805.83,1213.84 1806.42,1213.84 1807,1213.84 1807.59,1213.84 1808.18,1213.84 1808.76,1213.84 1809.35,1213.84 1809.94,1213.84 1810.52,1213.84 1811.11,1213.84 1811.69,1213.84 1812.28,1213.84 1812.87,1213.84 1813.45,1213.84 1814.04,1213.84 1814.63,1213.84 1815.21,1213.84 1815.8,1213.84 1816.39,1213.84 1816.97,1213.84 1817.56,1213.84 1818.14,1213.84 1818.73,1213.84 1819.32,1213.84 1819.9,1213.84 1820.49,1213.84 1821.08,1213.84 1821.66,1213.84 1822.25,1213.84 1822.84,1213.84 1823.42,1213.84 1824.01,1213.84 1824.6,1213.84 1825.18,1213.84 1825.77,1213.84 1826.35,1213.84 1826.94,1213.84 1827.53,1213.84 1828.11,1213.84 1828.7,1213.84 1829.29,1213.84 1829.87,1213.84 1830.46,1213.84 1831.05,1213.84 1831.63,1213.84 1832.22,1213.84 1832.81,1213.84 1833.39,1213.84 1833.98,1213.84 1834.56,1213.84 1835.15,1213.84 1835.74,1213.84 1836.32,1213.84 1836.91,1213.84 1837.5,1213.84 1838.08,1213.84 1838.67,1213.84 1839.26,1213.84 1839.84,1213.84 1840.43,1213.84 1841.01,1213.84 1841.6,1213.84 1842.19,1213.84 1842.77,1213.84 1843.36,1213.84 1843.95,1213.84 1844.53,1213.84 1845.12,1213.84 1845.71,1213.84 1846.29,1213.84 1846.88,1213.84 1847.47,1213.84 1848.05,1213.84 1848.64,1213.84 1849.22,1213.84 1849.81,1213.84 1850.4,1213.84 1850.98,1213.84 1851.57,1213.84 1852.16,1213.84 1852.74,1213.84 1853.33,1213.84 1853.92,1213.84 1854.5,1213.84 1855.09,1213.84 1855.68,1213.84 1856.26,1213.84 1856.85,1213.84 1857.43,1213.84 1858.02,1213.84 1858.61,1213.84 1859.19,1213.84 1859.78,1213.84 1860.37,1213.84 1860.95,1213.84 1861.54,1213.84 1862.13,1213.84 1862.71,1213.84 1863.3,1213.84 1863.88,1213.84 1864.47,1213.84 1865.06,1213.84 1865.64,1213.84 1866.23,1213.84 1866.82,1213.84 1867.4,1213.84 1867.99,1213.84 1868.58,1213.84 1869.16,1213.84 1869.75,1213.84 1870.34,1213.84 1870.92,1213.84 1871.51,1213.84 1872.09,1213.84 1872.68,1213.84 1873.27,1213.84 1873.85,1213.84 1874.44,1213.84 1875.03,1213.84 1875.61,1213.84 1876.2,1213.84 1876.79,1213.84 1877.37,1213.84 1877.96,1213.84 1878.55,1213.84 1879.13,1213.84 1879.72,1213.84 1880.3,1213.84 1880.89,1213.84 1881.48,1213.84 1882.06,1213.84 1882.65,1213.84 1883.24,1213.84 1883.82,1213.84 1884.41,1213.84 1885,1213.84 1885.58,1213.84 1886.17,1213.84 1886.76,1213.84 1887.34,1213.84 1887.93,1213.84 1888.51,1213.84 1889.1,1213.84 1889.69,1213.84 1890.27,1213.84 1890.86,1213.84 1891.45,1213.84 1892.03,1213.84 1892.62,1213.84 1893.21,1213.84 1893.79,1213.84 1894.38,1213.84 1894.96,1213.84 1895.55,1213.84 1896.14,1213.84 1896.72,1213.84 1897.31,1213.84 1897.9,1213.84 1898.48,1213.84 1899.07,1213.84 1899.66,1213.84 1900.24,1213.84 1900.83,1213.84 1901.42,1213.84 1902,1213.84 1902.59,1213.84 1903.17,1213.84 1903.76,1213.84 1904.35,1213.84 1904.93,1213.84 1905.52,1213.84 1906.11,1213.84 1906.69,1213.84 1907.28,1213.84 1907.87,1213.84 1908.45,1213.84 1909.04,1213.84 1909.63,1213.84 1910.21,1213.84 1910.8,1213.84 1911.38,1213.84 1911.97,1213.84 1912.56,1213.84 1913.14,1213.84 1913.73,1213.84 1914.32,1213.84 1914.9,1213.84 1915.49,1213.84 1916.08,1213.84 1916.66,1213.84 1917.25,1213.84 1917.83,1213.84 1918.42,1213.84 1919.01,1213.84 1919.59,1213.84 1920.18,1213.84 1920.77,1213.84 1921.35,1213.84 1921.94,1213.84 1922.53,1213.84 1923.11,1213.84 1923.7,1213.84 1924.29,1213.84 1924.87,1213.84 1925.46,1213.84 1926.04,1213.84 1926.63,1213.84 1927.22,1213.84 1927.8,1213.84 1928.39,1213.84 1928.98,1213.84 1929.56,1213.84 1930.15,1213.84 1930.74,1213.84 1931.32,1213.84 1931.91,1213.84 1932.5,1213.84 1933.08,1213.84 1933.67,1213.84 1934.25,1213.84 1934.84,1213.84 1935.43,1213.84 1936.01,1213.84 1936.6,1213.84 1937.19,1213.84 1937.77,1213.84 1938.36,1213.84 1938.95,1213.84 1939.53,1213.84 1940.12,1213.84 1940.71,1213.84 1941.29,1213.84 1941.88,1213.84 1942.46,1213.84 1943.05,1213.84 1943.64,1213.84 1944.22,1213.84 1944.81,1213.84 1945.4,1213.84 1945.98,1213.84 1946.57,1213.84 1947.16,1213.84 1947.74,1213.84 1948.33,1213.84 1948.91,1213.84 1949.5,1213.84 1950.09,1213.84 1950.67,1213.84 1951.26,1213.84 1951.85,1213.84 1952.43,1213.84 1953.02,1213.84 1953.61,1213.84 1954.19,1213.84 1954.78,1213.84 1955.37,1213.84 1955.95,1213.84 1956.54,1213.84 1957.12,1213.84 1957.71,1213.84 1958.3,1213.84 1958.88,1213.84 1959.47,1213.84 1960.06,1213.84 1960.64,1213.84 1961.23,1213.84 1961.82,1213.84 1962.4,1213.84 1962.99,1213.84 1963.58,1213.84 1964.16,1213.84 1964.75,1213.84 1965.33,1213.84 1965.92,1213.84 1966.51,1213.84 1967.09,1213.84 1967.68,1213.84 1968.27,1213.84 1968.85,1213.84 1969.44,1213.84 1970.03,1213.84 1970.61,1213.84 1971.2,1213.84 1971.78,1213.84 1972.37,1213.84 1972.96,1213.84 1973.54,1213.84 1974.13,1213.84 1974.72,1213.84 1975.3,1213.84 1975.89,1213.84 1976.48,1213.84 1977.06,1213.84 1977.65,1213.84 1978.24,1213.84 1978.82,1213.84 1979.41,1213.84 1979.99,1213.84 1980.58,1213.84 1981.17,1213.84 1981.75,1213.84 1982.34,1213.84 1982.93,1213.84 1983.51,1213.84 1984.1,1213.84 1984.69,1213.84 1985.27,1213.84 1985.86,1213.84 1986.45,1213.84 1987.03,1213.84 1987.62,1213.84 1988.2,1213.84 1988.79,1213.84 1989.38,1213.84 1989.96,1213.84 1990.55,1213.84 1991.14,1213.84 1991.72,1213.84 1992.31,1213.84 1992.9,1213.84 1993.48,1213.84 1994.07,1213.84 1994.65,1213.84 1995.24,1213.84 1995.83,1213.84 1996.41,1213.84 1997,1213.84 1997.59,1213.84 1998.17,1213.84 1998.76,1213.84 1999.35,1213.84 1999.93,1213.84 2000.52,1213.84 2001.11,1213.84 2001.69,1213.84 2002.28,1213.84 2002.86,1213.84 2003.45,1213.84 2004.04,1213.84 2004.62,1213.84 2005.21,1213.84 2005.8,1213.84 2006.38,1213.84 2006.97,1213.84 2007.56,1213.84 2008.14,1213.84 2008.73,1213.84 2009.32,1213.84 2009.9,1213.84 2010.49,1213.84 2011.07,1213.84 2011.66,1213.84 2012.25,1213.84 2012.83,1213.84 2013.42,1213.84 2014.01,1213.84 2014.59,1213.84 2015.18,1213.84 2015.77,1213.84 2016.35,1213.84 2016.94,1213.84 2017.53,1213.84 2018.11,1213.84 2018.7,1213.84 2019.28,1213.84 2019.87,1213.84 2020.46,1213.84 2021.04,1213.84 2021.63,1213.84 2022.22,1213.84 2022.8,1213.84 2023.39,1213.84 2023.98,1213.84 2024.56,1213.84 2025.15,1213.84 2025.73,1213.84 2026.32,1213.84 2026.91,1213.84 2027.49,1213.84 2028.08,1213.84 2028.67,1213.84 2029.25,1213.84 2029.84,1213.84 2030.43,1213.84 2031.01,1213.84 2031.6,1213.84 2032.19,1213.84 2032.77,1213.84 2033.36,1213.84 2033.94,1213.84 2034.53,1213.84 2035.12,1213.84 2035.7,1213.84 2036.29,1213.84 2036.88,1213.84 2037.46,1213.84 2038.05,1213.84 2038.64,1213.84 2039.22,1213.84 2039.81,1213.84 2040.4,1213.84 2040.98,1213.84 2041.57,1213.84 2042.15,1213.84 2042.74,1213.84 2043.33,1213.84 2043.91,1213.84 2044.5,1213.84 2045.09,1213.84 2045.67,1213.84 2046.26,1213.84 2046.85,1213.84 2047.43,1213.84 2048.02,1213.84 2048.6,1213.84 2049.19,1213.84 2049.78,1213.84 2050.36,1213.84 2050.95,1213.84 2051.54,1213.84 2052.12,1213.84 2052.71,1213.84 2053.3,1213.84 2053.88,1213.84 2054.47,1213.84 2055.06,1213.84 2055.64,1213.84 2056.23,1213.84 2056.81,1213.84 2057.4,1213.84 2057.99,1213.84 2058.57,1213.84 2059.16,1213.84 2059.75,1213.84 2060.33,1213.84 2060.92,1213.84 2061.51,1213.84 2062.09,1213.84 2062.68,1213.84 2063.27,1213.84 2063.85,1213.84 2064.44,1213.84 2065.02,1213.84 2065.61,1213.84 2066.2,1213.84 2066.78,1213.84 2067.37,1213.84 2067.96,1213.84 2068.54,1213.84 2069.13,1213.84 2069.72,1213.84 2070.3,1213.84 2070.89,1213.84 2071.48,1213.84 2072.06,1213.84 2072.65,1213.84 2073.23,1213.84 2073.82,1213.84 2074.41,1213.84 2074.99,1213.84 2075.58,1213.84 2076.17,1213.84 2076.75,1213.84 2077.34,1213.84 2077.93,1213.84 2078.51,1213.84 2079.1,1213.84 2079.68,1213.84 2080.27,1213.84 2080.86,1213.84 2081.44,1213.84 2082.03,1213.84 2082.62,1213.84 2083.2,1213.84 2083.79,1213.84 2084.38,1213.84 2084.96,1213.84 2085.55,1213.84 2086.14,1213.84 2086.72,1213.84 2087.31,1213.84 2087.89,1213.84 2088.48,1213.84 2089.07,1213.84 2089.65,1213.84 2090.24,1213.84 2090.83,1213.84 2091.41,1213.84 2092,1213.84 2092.59,1213.84 2093.17,1213.84 2093.76,1213.84 2094.35,1213.84 2094.93,1213.84 2095.52,1213.84 2096.1,1213.84 2096.69,1213.84 2097.28,1213.84 2097.86,1213.84 2098.45,1213.84 2099.04,1213.84 2099.62,1213.84 2100.21,1213.84 2100.8,1213.84 2101.38,1213.84 2101.97,1213.84 2102.55,1213.84 2103.14,1213.84 2103.73,1213.84 2104.31,1213.84 2104.9,1213.84 2105.49,1213.84 2106.07,1213.84 2106.66,1213.84 2107.25,1213.84 2107.83,1213.84 2108.42,1213.84 2109.01,1213.84 2109.59,1213.84 2110.18,1213.84 2110.76,1213.84 2111.35,1213.84 2111.94,1213.84 2112.52,1213.84 2113.11,1213.84 2113.7,1213.84 2114.28,1213.84 2114.87,1213.84 2115.46,1213.84 2116.04,1213.84 2116.63,1213.84 2117.22,1213.84 2117.8,1213.84 2118.39,1213.84 2118.97,1213.84 2119.56,1213.84 2120.15,1213.84 2120.73,1213.84 2121.32,1213.84 2121.91,1213.84 2122.49,1213.84 2123.08,1213.84 2123.67,1213.84 2124.25,1213.84 2124.84,1213.84 2125.42,1213.84 2126.01,1213.84 2126.6,1213.84 2127.18,1213.84 2127.77,1213.84 2128.36,1213.84 2128.94,1213.84 2129.53,1213.84 2130.12,1213.84 2130.7,1213.84 2131.29,1213.84 2131.88,1213.84 2132.46,1213.84 2133.05,1213.84 2133.63,1213.84 2134.22,1213.84 2134.81,1213.84 2135.39,1213.84 2135.98,1213.84 2136.57,1213.84 2137.15,1213.84 2137.74,1213.84 2138.33,1213.84 2138.91,1213.84 2139.5,1213.84 2140.09,1213.84 2140.67,1213.84 2141.26,1213.84 2141.84,1213.84 2142.43,1213.84 2143.02,1213.84 2143.6,1213.84 2144.19,1213.84 2144.78,1213.84 2145.36,1213.84 2145.95,1213.84 2146.54,1213.84 2147.12,1213.84 2147.71,1213.84 2148.3,1213.84 2148.88,1213.84 2149.47,1213.84 2150.05,1213.84 2150.64,1213.84 2151.23,1213.84 2151.81,1213.84 2152.4,1213.84 2152.99,1213.84 2153.57,1213.84 2154.16,1213.84 2154.75,1213.84 2155.33,1213.84 2155.92,1213.84 2156.5,1213.84 2157.09,1213.84 2157.68,1213.84 2158.26,1213.84 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.64,1196.83 1399.01,899.083 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1230.36 985.439,1196.83 2158.26,1196.83 2158.26,1230.36 985.439,1230.36 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip000)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip000)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip003\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip003)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-9047.34 166.588,-9677.06 167.147,-10243.6 167.706,-10750.9 168.266,-10278.9 168.825,-10719.5 169.384,-11109.8 169.943,-11453 170.503,-11045.5 171.062,-11322.3 171.621,-11554 172.18,-11755.3 172.74,-11932.3 173.299,-12067.3 173.858,-12182.7 174.417,-12270.3 174.977,-11888 175.536,-11915 176.095,-11942.7 176.655,-11262.6 177.214,-11251.6 177.773,-10935.7 178.332,-10889.3 178.892,-10579.7 179.451,-10281.7 180.01,-10213.9 180.569,-10131 181.129,-10035.3 181.688,-9926.42 182.247,-9813.29 182.806,-9509.67 183.366,-9062.63 183.925,-8935.31 184.484,-8797.08 185.043,-8528.94 185.603,-8274.14 186.162,-8144.97 186.721,-8018.89 187.28,-7666.2 187.84,-7422.04 188.399,-7178.69 188.958,-6959.43 189.517,-6487.35 190.077,-6293.34 190.636,-6032.22 191.195,-5844.85 191.754,-5680.42 192.314,-5582.53 192.873,-5278.47 193.432,-5057.01 193.991,-4790.77 194.551,-4661.89 195.11,-4472.61 195.669,-4349.56 196.228,-4165.28 196.788,-4047.63 197.347,-3979.97 197.906,-3765.11 198.465,-3649.61 199.025,-3490.44 199.584,-3379.51 200.143,-3269.57 200.702,-3202.38 201.262,-3132.48 201.821,-2943.03 202.38,-2877.89 202.939,-2662.2 203.499,-2530.93 204.058,-2405.01 204.617,-2353.12 205.176,-2295.01 205.736,-2173.1 206.295,-2119.66 206.854,-1899.66 207.413,-1818.48 207.973,-1772.59 208.532,-1725.59 209.091,-1646.55 209.65,-1597.43 210.21,-1549.87 210.769,-1471.2 211.328,-1420.24 211.887,-1232.5 212.447,-1160.99 213.006,-1059.34 213.565,-990.02 214.124,-873.301 214.684,-808.344 215.243,-722.358 215.802,-664.134 216.361,-584.656 216.921,-458.458 217.48,-435.397 218.039,-363.793 218.598,-341.947 219.158,-271.92 219.717,-207.644 220.276,-186.583 220.835,-97.78 221.395,-57.3912 221.954,2.84827 222.513,38.6247 223.072,53.7889 223.632,67.9828 224.191,125.155 224.75,177.569 225.309,232.346 225.869,239.164 226.428,208.507 226.987,263.721 227.546,314.619 228.106,323.397 228.665,333.219 229.224,344.443 229.783,374.653 230.343,403.058 230.902,448.254 231.461,470.951 232.02,459.401 232.58,486.47 233.139,538.375 233.698,545.171 234.257,550.396 234.817,577.094 235.376,582.845 235.935,626.59 236.494,649.343 237.054,647.846 237.613,686.69 238.172,704.484 238.731,721.534 239.291,781.483 239.85,799.101 240.409,831.705 240.968,844.018 241.528,879.05 242.087,908.946 242.646,882.89 243.205,918.868 243.765,892.042 244.324,904.431 244.883,899.334 245.442,915.739 246.002,980.355 246.561,1006.67 247.12,1015.32 247.679,1024.51 248.239,1034.35 248.798,1058.18 249.357,1015.72 249.916,1026.73 250.476,1032.92 251.035,1053.84 251.594,1045.81 252.153,1072.19 252.713,1046.76 253.272,1039.03 253.831,1066.5 254.39,1063.02 254.95,1054.42 255.509,1043.75 256.068,1038.16 256.627,996.927 257.187,959.945 257.746,976.484 258.305,993.175 258.864,986.045 259.424,963.571 259.983,974.103 260.542,988.201 261.101,983.978 261.661,1012.19 262.22,1009.32 262.779,1007.24 263.338,1001.26 263.898,1000 264.457,1012.75 265.016,1055.6 265.575,1067.29 266.135,1080.35 266.694,1091.36 267.253,1081 267.812,1072.77 268.372,1115.22 268.931,1107.84 269.49,1084.29 270.049,1077.16 270.609,1085.8 271.168,1078.29 271.727,1136.78 272.286,1140.29 272.846,1161.9 273.405,1115.58 273.964,1123.5 274.523,1095.26 275.083,1105.77 275.642,1081.14 276.201,1075.66 276.76,1066.92 277.32,1073.12 277.879,1050.85 278.438,1059.41 278.997,1086.35 279.557,1077.72 280.116,1086.73 280.675,1075.32 281.234,1083.46 281.794,1096.56 282.353,1103.8 282.912,1111.74 283.471,1084.98 284.031,1095.39 284.59,1067.56 285.149,1063.21 285.708,1087.64 286.268,1112.66 286.827,1102.33 287.386,1109.26 287.945,1118.8 288.505,1143.87 289.064,1083.36 289.623,1093.24 290.182,1116.02 290.742,1090.19 291.301,1080.97 291.86,1072.47 292.419,1079.22 292.979,1070.21 293.538,1073.85 294.097,1066.38 294.656,1088.14 295.216,1108.03 295.775,1110.25 296.334,1101.06 296.893,1093.27 297.453,1080.99 298.012,1075.11 298.571,1102.87 299.13,1123.65 299.69,1096.48 300.249,1101.96 300.808,1075.73 301.368,1065.01 301.927,1043.21 302.486,1035.82 303.045,998.191 303.605,1010.93 304.164,1019.36 304.723,1014.94 305.282,1011.16 305.842,1022.63 306.401,1018.89 306.96,983.724 307.519,978.949 308.079,975.732 308.638,1017.96 309.197,1076.28 309.756,1067.02 310.316,1076.22 310.875,1067.65 311.434,1043.67 311.993,1038.56 312.553,1047.61 313.112,1055.15 313.671,1047.79 314.23,1056.96 314.79,1032.93 315.349,1044.08 315.908,1016.45 316.467,1024.96 317.027,1016.63 317.586,1008.15 318.145,1013.84 318.704,1005.32 319.264,1030.84 319.823,1023.57 320.382,1047.36 320.941,1020.32 321.501,980.105 322.06,994.793 322.619,969.282 323.178,994.483 323.738,1004.49 324.297,1060.87 324.856,1048.65 325.415,1006.09 325.975,996.724 326.534,988.109 327.093,981.439 327.652,1008.01 328.212,983.88 328.771,1027.54 329.33,1018.71 329.889,1009.18 330.449,1015.75 331.008,992.383 331.567,986.757 332.126,996.85 332.686,960.382 333.245,952.997 333.804,949.755 334.363,944.345 334.923,939.364 335.482,936.464 336.041,914.58 336.6,896.424 337.16,909.55 337.719,922.516 338.278,885.621 338.837,901.501 339.397,916.351 339.956,912.627 340.515,876.112 341.074,874.22 341.634,869.245 342.193,882.448 342.752,878.997 343.311,862.025 343.871,862.55 344.43,860.622 344.989,874.31 345.548,855.616 346.108,853.923 346.667,855.289 347.226,840.301 347.785,877.131 348.345,876.385 348.904,872.791 349.463,888.067 350.022,883.665 350.582,881.073 351.141,892.276 351.7,903.865 352.259,896.19 352.819,890.883 353.378,857.46 353.937,855.864 354.496,919.916 355.056,915.992 355.615,891.386 356.174,889.211 356.733,901.007 357.293,881.285 357.852,893.702 358.411,877.463 358.97,872.497 359.53,852.064 360.089,833.828 360.648,833.902 361.207,851.121 361.767,866.078 362.326,847.756 362.885,865.026 363.444,878.448 364.004,911.424 364.563,908.879 365.122,941.219 365.681,952.769 366.241,914.078 366.8,925.437 367.359,922.807 367.918,913.391 368.478,908.342 369.037,925.261 369.596,935.988 370.155,981.535 370.715,957.907 371.274,933.098 371.833,910.698 372.392,935.364 372.952,992.067 373.511,950.042 374.07,942.054 374.629,933.912 375.189,925.654 375.748,934.914 376.307,962.201 376.866,934.026 377.426,915.397 377.985,894.14 378.544,889.744 379.103,898.75 379.663,925.858 380.222,933.955 380.781,911.81 381.34,887.087 381.9,850.002 382.459,830.45 383.018,829.129 383.577,890.076 384.137,913.512 384.696,907.317 385.255,902.872 385.814,892.172 386.374,917.409 386.933,880.72 387.492,830.705 388.051,811.116 388.611,798.784 389.17,833.398 389.729,780.8 390.288,760.904 390.848,795.879 391.407,796.219 391.966,778.629 392.525,783.431 393.085,783.695 393.644,767.047 394.203,782.67 394.762,750.567 395.322,784.526 395.881,822.89 396.44,807.859 396.999,788.543 397.559,771.705 398.118,804.352 398.677,773.683 399.236,758.474 399.796,716.001 400.355,704.198 400.914,718.986 401.473,739.489 402.033,742.155 402.592,746.477 403.151,729.701 403.71,736.498 404.27,767.672 404.829,752.766 405.388,756.976 405.947,757.196 406.507,757.803 407.066,773.23 407.625,790.509 408.184,805.392 408.744,819.513 409.303,833.472 409.862,844.238 410.421,842.433 410.981,840.856 411.54,837.943 412.099,879.234 412.658,891.567 413.218,916.778 413.777,925.976 414.336,919.09 414.895,912.326 415.455,890.057 416.014,903.74 416.573,882.863 417.132,879.091 417.692,874.407 418.251,882.348 418.81,845.36 419.369,845.902 419.929,809.322 420.488,822.774 421.047,837.867 421.606,834.496 422.166,850.362 422.725,893.319 423.284,919.61 423.843,928.448 424.403,938.23 424.962,946.135 425.521,903.751 426.08,893.998 426.64,885.399 427.199,831.983 427.758,828.772 428.318,824.838 428.877,804.502 429.436,773.562 429.995,787.677 430.555,784.471 431.114,813.856 431.673,829.573 432.232,825.294 432.792,837.29 433.351,865.211 433.91,874.839 434.469,886.626 435.029,895.461 435.588,868.492 436.147,863.272 436.706,853.28 437.266,832.033 437.825,846.304 438.384,824.863 438.943,803.962 439.503,736.086 440.062,721.213 440.621,658.434 441.18,663.443 441.74,668.252 442.299,621.683 442.858,613.342 443.417,636.112 443.977,658.129 444.536,679.675 445.095,680.664 445.654,715.756 446.214,732.073 446.773,699.551 447.332,686.262 447.891,737.582 448.451,701.543 449.01,673.018 449.569,677.771 450.128,664.062 450.688,697.35 451.247,718.877 451.806,718.266 452.365,716.786 452.925,753.034 453.484,703.31 454.043,721.583 454.602,723.684 455.162,759.386 455.721,776.839 456.28,807.273 456.839,801.989 457.399,846.005 457.958,827.9 458.517,808.182 459.076,805.759 459.636,801.608 460.195,816.641 460.754,812.232 461.313,821.919 461.873,812.317 462.432,812.596 462.991,828.051 463.55,855.645 464.11,866.769 464.669,859.213 465.228,855.419 465.787,852.482 466.347,833.893 466.906,845.223 467.465,807.501 468.024,805.342 468.584,771.174 469.143,772.513 469.702,770.918 470.261,752.796 470.821,734.023 471.38,717.449 471.939,768.921 472.498,752.929 473.058,783.905 473.617,751.952 474.176,750.324 474.735,752.83 475.295,749.018 475.854,767.196 476.413,769.767 476.972,767.662 477.532,767.163 478.091,768.176 478.65,795.834 479.209,793.811 479.769,774.878 480.328,757.525 480.887,790.961 481.446,786.514 482.006,798.432 482.565,813.475 483.124,775.098 483.683,788.595 484.243,801.094 484.802,831.215 485.361,843.587 485.92,807.08 486.48,772.96 487.039,755.529 487.598,756.623 488.157,741.681 488.717,744.532 489.276,759.363 489.835,757.636 490.394,741.058 490.954,788.505 491.513,820.513 492.072,817.319 492.631,809.746 493.191,823.243 493.75,819.33 494.309,836.208 494.868,815.656 495.428,777.967 495.987,777.344 496.546,788.743 497.105,769.473 497.665,785.128 498.224,784.739 498.783,766.371 499.342,780.678 499.902,780.886 500.461,761.469 501.02,740.977 501.579,724.564 502.139,708.039 502.698,709.648 503.257,709.162 503.816,693.608 504.376,662.572 504.935,713.223 505.494,715.086 506.053,716.825 506.613,720.559 507.172,736.469 507.731,736.042 508.29,735.567 508.85,733.555 509.409,717.784 509.968,686.281 510.527,668.927 511.087,672.951 511.646,690.725 512.205,710.772 512.764,708.276 513.324,710.135 513.883,725.17 514.442,738.938 515.001,739.339 515.561,735.074 516.12,686.797 516.679,654.425 517.238,642.202 517.798,645.904 518.357,634.001 518.916,638.282 519.475,658.575 520.035,612.167 520.594,603.72 521.153,598.935 521.712,588.346 522.272,566.046 522.831,563.955 523.39,570.439 523.949,577.913 524.509,606.219 525.068,579.427 525.627,604.082 526.186,625.937 526.746,630.484 527.305,684.572 527.864,685.987 528.423,655.698 528.983,660.517 529.542,679.557 530.101,714.762 530.66,714.859 531.22,764.69 531.779,764.038 532.338,782.917 532.897,796.333 533.457,777.639 534.016,792.15 534.575,756.139 535.134,753.819 535.694,764.275 536.253,763.617 536.812,745.168 537.371,743.058 537.931,741.755 538.49,726.94 539.049,692.385 539.608,709.176 540.168,678.041 540.727,667.125 541.286,663.069 541.845,649.549 542.405,622.08 542.964,610.988 543.523,615.884 544.082,638.784 544.642,662.829 545.201,667.367 545.76,701.086 546.319,671.248 546.879,673.352 547.438,675.228 547.997,696.902 548.556,715.301 549.116,700.111 549.675,701.406 550.234,704.716 550.793,693.269 551.353,695.318 551.912,697.895 552.471,716.863 553.031,717.78 553.59,716.344 554.149,684.953 554.708,682.502 555.268,698.939 555.827,697.199 556.386,680.363 556.945,699.455 557.505,717.81 558.064,732.672 558.623,729.696 559.182,746.823 559.742,728.699 560.301,728.893 560.86,716.203 561.419,716.202 561.979,748.089 562.538,726.277 563.097,726.225 563.656,737.407 564.216,720.899 564.775,722.111 565.334,707.065 565.893,740.668 566.453,743.342 567.012,776.246 567.571,752.592 568.13,719.983 568.69,734.893 569.249,763.056 569.808,761.307 570.367,774.679 570.927,757.423 571.486,785.767 572.045,797.137 572.604,792.196 573.164,772.237 573.723,772.753 574.282,784.315 574.841,794.584 575.401,789.099 575.96,804.053 576.519,815.317 577.078,826.111 577.638,783.515 578.197,762.143 578.756,773.879 579.315,740.258 579.875,723.381 580.434,736.276 580.993,730.686 581.552,713.755 582.112,731.633 582.671,699.167 583.23,700.204 583.789,717.188 584.349,716.394 584.908,767.161 585.467,761.035 586.026,723.949 586.586,707.02 587.145,708.234 587.704,673.417 588.263,678.019 588.823,677.661 589.382,683.286 589.941,686.292 590.5,684.133 591.06,684.67 591.619,687.27 592.178,687.387 592.737,705.662 593.297,740.794 593.856,723.072 594.415,690.8 594.974,691.879 595.534,711.321 596.093,712.288 596.652,742.605 597.211,776.455 597.771,790.127 598.33,784.503 598.889,765.519 599.448,761.116 600.008,759.489 600.567,756.598 601.126,754.542 601.685,734.502 602.245,751.695 602.804,736.434 603.363,750.36 603.922,732.641 604.482,747.627 605.041,742.938 605.6,707.066 606.159,692.467 606.719,679.446 607.278,697.139 607.837,712.824 608.396,713.689 608.956,729.74 609.515,725.785 610.074,726.76 610.633,761.86 611.193,759.824 611.752,756.686 612.311,752.659 612.87,765.121 613.43,763.305 613.989,761.261 614.548,727.905 615.107,743.999 615.667,757.781 616.226,743.369 616.785,723.668 617.344,705.529 617.904,691.395 618.463,676.695 619.022,694.338 619.581,698.673 620.141,714.788 620.7,713.964 621.259,697.678 621.818,678.405 622.378,683.772 622.937,686.747 623.496,671.58 624.055,658.048 624.615,693.574 625.174,694.893 625.733,711.605 626.292,774.878 626.852,788.054 627.411,762.676 627.97,724.848 628.529,722.517 629.089,704.953 629.648,703.218 630.207,687.753 630.766,656.949 631.326,658.313 631.885,662.587 632.444,697.988 633.003,682.64 633.563,665.732 634.122,684.721 634.681,700.558 635.24,697.434 635.8,663.44 636.359,711.544 636.918,681.315 637.477,683.847 638.037,668.636 638.596,687.525 639.155,690.656 639.714,691.125 640.274,658.888 640.833,675.157 641.392,680.734 641.951,682.809 642.511,717.124 643.07,684.68 643.629,686.686 644.188,655.95 644.748,705.773 645.307,707.145 645.866,694.938 646.425,681.294 646.985,698.903 647.544,678.858 648.103,697.643 648.662,698.75 649.222,700.041 649.781,697.272 650.34,702.775 650.899,700.223 651.459,687.187 652.018,686.731 652.577,671.26 653.136,691.054 653.696,689.839 654.255,672.739 654.814,660.024 655.373,675.124 655.933,665.139 656.492,668.717 657.051,652.927 657.61,639.975 658.17,659.151 658.729,627.641 659.288,650.038 659.847,634.956 660.407,635.338 660.966,636.61 661.525,639.369 662.084,627.095 662.644,662.23 663.203,649.516 663.762,685.293 664.321,718.405 664.881,716.064 665.44,708.886 665.999,691.661 666.558,706.979 667.118,705.588 667.677,721.541 668.236,720.954 668.795,751.091 669.355,767.612 669.914,743.295 670.473,708.434 671.032,692.978 671.592,680.064 672.151,663.143 672.71,667.895 673.269,666.971 673.829,666.153 674.388,670.564 674.947,687.7 675.506,667.945 676.066,699.176 676.625,701.694 677.184,700.257 677.743,701.264 678.303,703.925 678.862,686.415 679.421,707.698 679.981,723.777 680.54,736.327 681.099,735.194 681.658,696.194 682.218,733.209 682.777,699.1 683.336,681.5 683.895,716.254 684.455,682.278 685.014,731.158 685.573,780.628 686.132,757.789 686.692,755.431 687.251,719.061 687.81,735.451 688.369,716.455 688.929,698.041 689.488,698.385 690.047,699.39 690.606,718.421 691.166,699.73 691.725,700.101 692.284,698.675 692.843,667.706 693.403,655.792 693.962,659.846 694.521,643.914 695.08,645.862 695.64,652.885 696.199,654.32 696.758,638.577 697.317,624.842 697.877,647.162 698.436,614.378 698.995,649.355 699.554,669.724 700.114,671.912 700.673,673.729 701.232,659.813 701.791,707.381 702.351,706.922 702.91,701.87 703.469,702.629 704.028,698.759 704.588,715.175 705.147,732.351 705.706,732.776 706.265,746.057 706.825,775.958 707.384,768.036 707.943,763.442 708.502,759.806 709.062,770.767 709.621,764.293 710.18,793.264 710.739,772.738 711.299,770.117 711.858,778.647 712.417,772.174 712.976,766.495 713.536,794.878 714.095,769.424 714.654,743.945 715.213,737.614 715.773,720.511 716.332,719.261 716.891,734.142 717.45,716.086 718.01,714.092 718.569,712.362 719.128,680.217 719.687,730.355 720.247,696.973 720.806,683.204 721.365,718.059 721.924,685.328 722.484,687.319 723.043,655.83 723.602,657.622 724.161,631.592 724.721,667.242 725.28,651.381 725.839,687.211 726.398,705.915 726.958,690.314 727.517,690.096 728.076,684.475 728.635,683.986 729.195,668.081 729.754,637.435 730.313,624.029 730.872,610.01 731.432,564.791 731.991,557.077 732.55,545.832 733.109,541.136 733.669,531.272 734.228,557.27 734.787,528.577 735.346,538.543 735.906,514.125 736.465,536.295 737.024,546.299 737.583,556.386 738.143,591.529 738.702,594.889 739.261,585.214 739.82,590.519 740.38,567.754 740.939,591.536 741.498,599.588 742.057,652.374 742.617,639.764 743.176,646.581 743.735,677.918 744.294,709.165 744.854,710.262 745.413,723.911 745.972,705.743 746.531,689.557 747.091,738.805 747.65,798.224 748.209,795.154 748.768,772.524 749.328,786.421 749.887,779.674 750.446,807.856 751.005,816.549 751.565,808.672 752.124,770.766 752.683,785.152 753.242,746.588 753.802,775.829 754.361,757.399 754.92,753.733 755.479,752.965 756.039,800.289 756.598,828.236 757.157,851.983 757.716,843.544 758.276,823.86 758.835,800.421 759.394,793.304 759.953,791.098 760.513,785.546 761.072,778.812 761.631,769.26 762.19,748.36 762.75,763.476 763.309,779.403 763.868,775.52 764.427,737.622 764.987,735.791 765.546,748.978 766.105,746.934 766.664,758.783 767.224,788.004 767.783,765.952 768.342,742.095 768.901,736.29 769.461,749.313 770.02,729.496 770.579,741.553 771.138,710.117 771.698,677.221 772.257,695.213 772.816,710.47 773.375,696.771 773.935,682.236 774.494,684.148 775.053,734.838 775.612,700.276 776.172,733.676 776.731,714.193 777.29,714.119 777.849,683.212 778.409,679.073 778.968,695.964 779.527,693.673 780.086,678.001 780.646,728.035 781.205,724.789 781.764,723.659 782.323,688.549 782.883,672.645 783.442,647.505 784.001,666.507 784.56,700.736 785.12,701.191 785.679,731.478 786.238,713.723 786.797,713.475 787.357,725.943 787.916,705.758 788.475,719.013 789.034,683.309 789.594,668.35 790.153,685.164 790.712,685.048 791.271,654.708 791.831,671.259 792.39,674.135 792.949,687.572 793.508,688.058 794.068,689.489 794.627,706.705 795.186,705.048 795.745,705.581 796.305,688.89 796.864,684.692 797.423,680.245 797.982,649.017 798.542,602.966 799.101,591.712 799.66,564.359 800.219,587.829 800.779,590.905 801.338,596.966 801.897,618.829 802.456,638.468 803.016,641.519 803.575,613.501 804.134,636.148 804.693,659.011 805.253,661.603 805.812,676.154 806.371,710.376 806.931,722.989 807.49,720.151 808.049,702.2 808.608,717.811 809.168,714.421 809.727,696.883 810.286,709.664 810.845,741.795 811.405,773.27 811.964,721.8 812.523,737.258 813.082,770.132 813.642,748.674 814.201,777.645 814.76,773.306 815.319,752.571 815.879,736.394 816.438,749.146 816.997,744.083 817.556,745.217 818.116,755.105 818.675,735.968 819.234,735.232 819.793,701.148 820.353,712.05 820.912,762.661 821.471,709.706 822.03,708.79 822.59,674.208 823.149,658.769 823.708,627.37 824.267,631.583 824.827,602.275 825.386,608.749 825.945,610.957 826.504,631.073 827.064,649.149 827.623,650.774 828.182,671.753 828.741,674.717 829.301,692.344 829.86,708.028 830.419,706.588 830.978,677.18 831.538,689.33 832.097,708.907 832.656,724.366 833.215,736.331 833.775,699.934 834.334,701.084 834.893,683.217 835.452,669.014 836.012,689.851 836.571,689.218 837.13,687.957 837.689,705.086 838.249,707.945 838.808,725.35 839.367,757.871 839.926,737.34 840.486,748.79 841.045,743.044 841.604,749.718 842.163,746.012 842.723,745.208 843.282,743.616 843.841,740.041 844.4,723.291 844.96,739.067 845.519,768.582 846.078,762.268 846.637,741.935 847.197,705.884 847.756,689.301 848.315,705.833 848.874,720.568 849.434,701.503 849.993,686.625 850.552,717.38 851.111,680.331 851.671,646.866 852.23,600.581 852.789,607.651 853.348,627.443 853.908,627.07 854.467,629.874 855.026,650.598 855.585,637.135 856.145,640.848 856.704,643.889 857.263,662.874 857.822,651.394 858.382,669.408 858.941,683.696 859.5,699.649 860.059,645.17 860.619,663.065 861.178,695.088 861.737,708.759 862.296,710.167 862.856,708.898 863.415,707.7 863.974,721.479 864.533,702.991 865.093,671.072 865.652,608.145 866.211,630.533 866.77,616.713 867.33,655.193 867.889,659.619 868.448,682.066 869.007,634.797 869.567,638.07 870.126,625.838 870.685,666.395 871.244,685.256 871.804,683.048 872.363,681.521 872.922,698.804 873.481,696.974 874.041,696.465 874.6,696.03 875.159,678.752 875.718,659.254 876.278,657.295 876.837,660.159 877.396,712.71 877.955,744.822 878.515,723.828 879.074,710.188 879.633,692.74 880.192,691.329 880.752,709.882 881.311,727.161 881.87,726.854 882.429,726.702 882.989,708.454 883.548,704.412 884.107,672.743 884.666,690.504 885.226,687.676 885.785,688.35 886.344,722.653 886.903,719.614 887.463,734.209 888.022,793.764 888.581,752.184 889.14,730.443 889.7,681.003 890.259,696.852 890.818,713.352 891.377,714.485 891.937,695.577 892.496,672.294 893.055,656.099 893.614,675.756 894.174,663.679 894.733,664.183 895.292,651.528 895.851,652.983 896.411,644.104 896.97,644.112 897.529,661.538 898.088,647.467 898.648,649.896 899.207,636.079 899.766,670.891 900.325,703.103 900.885,685.229 901.444,699.076 902.003,699.193 902.562,713.164 903.122,728.395 903.681,709.45 904.24,694.674 904.799,711.722 905.359,729.04 905.918,793.622 906.477,770.679 907.036,762.969 907.596,774.008 908.155,755.923 908.714,783.497 909.273,730.951 909.833,743.319 910.392,742.434 910.951,722.292 911.51,740.627 912.07,718.696 912.629,743.204 913.188,704.579 913.747,640.111 914.307,673.882 914.866,679.939 915.425,678.639 915.984,662.322 916.544,661.624 917.103,647.593 917.662,664.703 918.221,681.134 918.781,697.7 919.34,665.741 919.899,650.592 920.458,635.771 921.018,639.16 921.577,623.365 922.136,610.797 922.695,613.732 923.255,603.527 923.814,638.323 924.373,643.743 924.932,659.839 925.492,695.38 926.051,691.503 926.61,690.22 927.169,686.668 927.729,670.425 928.288,686.328 928.847,685.837 929.406,668.044 929.966,656.505 930.525,609.711 931.084,629.561 931.644,651.004 932.203,638.462 932.762,603.565 933.321,592.153 933.881,596.486 934.44,564.538 934.999,556.258 935.558,612.11 936.118,632.494 936.677,639.504 937.236,656.94 937.795,659.307 938.355,662.386 938.914,647.796 939.473,637.71 940.032,638.643 940.592,641.929 941.151,630.785 941.71,665.998 942.269,684.701 942.829,700.287 943.388,669.908 943.947,673.999 944.506,690.867 945.066,688.383 945.625,705.547 946.184,701.862 946.743,701.676 947.303,684.204 947.862,666.692 948.421,669.401 948.98,702.837 949.54,688.155 950.099,688.219 950.658,672.624 951.217,655.145 951.777,656.276 952.336,642.776 952.895,597.571 953.454,604.392 954.014,610.418 954.573,631.353 955.132,648.42 955.691,697.639 956.251,715.723 956.81,712.534 957.369,728.232 957.928,706.079 958.488,719.575 959.047,733.472 959.606,713.496 960.165,680.825 960.725,679.123 961.284,663.936 961.843,651.002 962.402,634.236 962.962,606.131 963.521,613.222 964.08,649.996 964.639,650.765 965.199,666.488 965.758,667.692 966.317,637.852 966.876,641.137 967.436,638.565 967.995,655.156 968.554,671.42 969.113,673.015 969.673,726.491 970.232,708.948 970.791,708.081 971.35,722.109 971.91,749.456 972.469,762.482 973.028,775.325 973.587,756.049 974.147,769.387 974.706,769.906 975.265,766.793 975.824,729.719 976.384,694.285 976.943,692.482 977.502,673.233 978.061,676.356 978.621,659.609 979.18,694.095 979.739,697.773 980.298,662.599 980.858,627.204 981.417,613.938 981.976,604.578 982.535,594.617 983.095,586.81 983.654,591.019 984.213,584.298 984.772,555.231 985.332,593.634 985.891,613.882 986.45,603.545 987.009,589.435 987.569,624.886 988.128,628.011 988.687,631.96 989.246,651.133 989.806,651.551 990.365,635.698 990.924,656.663 991.483,640.109 992.043,660.115 992.602,682.637 993.161,698.051 993.72,662.397 994.28,663.625 994.839,681.654 995.398,715.57 995.957,699.9 996.517,698.755 997.076,725.338 997.635,740.409 998.194,736.504 998.754,746.814 999.313,761.942 999.872,742.569 1000.43,707.331 1000.99,720.506 1001.55,686.602 1002.11,671.871 1002.67,647.983 1003.23,653.764 1003.79,643.114 1004.35,614.746 1004.91,619.673 1005.46,626.107 1006.02,647.025 1006.58,666.286 1007.14,682.586 1007.7,636.425 1008.26,623.277 1008.82,626.859 1009.38,628.713 1009.94,649.172 1010.5,669.684 1011.06,675.156 1011.62,678.094 1012.18,708.729 1012.73,723.142 1013.29,752.82 1013.85,781.739 1014.41,807.56 1014.97,801.05 1015.53,846.626 1016.09,822.361 1016.65,802.601 1017.21,813.004 1017.77,822.193 1018.33,812.75 1018.89,771.217 1019.45,782.301 1020.01,776.457 1020.56,775.566 1021.12,774.2 1021.68,767.066 1022.24,715.346 1022.8,727.849 1023.36,692.31 1023.92,689.651 1024.48,706.287 1025.04,723.379 1025.6,737.442 1026.16,732.023 1026.72,709.072 1027.28,724.229 1027.83,706.754 1028.39,674.664 1028.95,688.86 1029.51,687.776 1030.07,673.988 1030.63,655.868 1031.19,622.178 1031.75,626.504 1032.31,616.469 1032.87,673.363 1033.43,691.206 1033.99,661.518 1034.55,644.994 1035.1,645.72 1035.66,631.849 1036.22,616.263 1036.78,653.096 1037.34,671.908 1037.9,693.169 1038.46,691.677 1039.02,691.872 1039.58,692.068 1040.14,676.41 1040.7,676.206 1041.26,659.49 1041.82,627.041 1042.38,616.714 1042.93,637.292 1043.49,670.047 1044.05,719.143 1044.61,716.929 1045.17,733.254 1045.73,728.951 1046.29,694.113 1046.85,661.861 1047.41,663.033 1047.97,680.277 1048.53,694.525 1049.09,692.742 1049.65,708.95 1050.2,688.803 1050.76,673.832 1051.32,675.809 1051.88,674.952 1052.44,724.185 1053,706.793 1053.56,688.837 1054.12,720.313 1054.68,716.898 1055.24,741.471 1055.8,737.273 1056.36,720.092 1056.92,763.926 1057.48,807.394 1058.03,817.225 1058.59,822.795 1059.15,801.854 1059.71,812.65 1060.27,836.176 1060.83,844.207 1061.39,787.006 1061.95,780.146 1062.51,773.425 1063.07,802.108 1063.63,795.241 1064.19,822.166 1064.75,783.455 1065.3,794.523 1065.86,803.855 1066.42,795.204 1066.98,755.015 1067.54,751.017 1068.1,729.508 1068.66,713.301 1069.22,696.617 1069.78,695.48 1070.34,694.855 1070.9,674.054 1071.46,689.651 1072.02,685.692 1072.57,697.764 1073.13,700.168 1073.69,696.631 1074.25,710.648 1074.81,677.108 1075.37,680.33 1075.93,664.288 1076.49,636.101 1077.05,638.691 1077.61,657.323 1078.17,627.461 1078.73,631.005 1079.29,617.59 1079.85,605.916 1080.4,607.554 1080.96,610.098 1081.52,634.702 1082.08,635.96 1082.64,619.419 1083.2,657.68 1083.76,656.432 1084.32,659.364 1084.88,662.717 1085.44,682.756 1086,699.568 1086.56,712.315 1087.12,691.133 1087.67,691.041 1088.23,722.765 1088.79,687.944 1089.35,654.101 1089.91,681.949 1090.47,682.202 1091.03,665.301 1091.59,667.567 1092.15,700.977 1092.71,766.92 1093.27,780.786 1093.83,760.666 1094.39,724.88 1094.94,676.534 1095.5,629.759 1096.06,567.563 1096.62,541.005 1097.18,583.063 1097.74,571.64 1098.3,558.765 1098.86,567.84 1099.42,592.885 1099.98,632.926 1100.54,604.957 1101.1,626.383 1101.66,613.155 1102.22,615.733 1102.77,606.803 1103.33,578.915 1103.89,565.161 1104.45,525.642 1105.01,533.704 1105.57,539.14 1106.13,561.129 1106.69,585.093 1107.25,606.888 1107.81,628.15 1108.37,631.228 1108.93,666.874 1109.49,685.576 1110.04,700.208 1110.6,698.297 1111.16,714.455 1111.72,698.223 1112.28,731.465 1112.84,713.495 1113.4,745.358 1113.96,725.334 1114.52,756.212 1115.08,799.825 1115.64,779.562 1116.2,777.551 1116.76,772.243 1117.31,750.544 1117.87,761.697 1118.43,775.147 1118.99,769.212 1119.55,763.191 1120.11,757.223 1120.67,707.061 1121.23,721.557 1121.79,718.22 1122.35,670.87 1122.91,638.11 1123.47,658.051 1124.03,661.02 1124.59,646.184 1125.14,631.157 1125.7,634.707 1126.26,617.966 1126.82,621.29 1127.38,654.979 1127.94,639.394 1128.5,641.454 1129.06,657.527 1129.62,608.46 1130.18,631.811 1130.74,648.738 1131.3,650.419 1131.86,734.359 1132.41,731.092 1132.97,728.559 1133.53,710.611 1134.09,744.08 1134.65,740.508 1135.21,750.355 1135.77,746.814 1136.33,774.674 1136.89,789.047 1137.45,802.943 1138.01,812.644 1138.57,792.626 1139.13,789.513 1139.68,768.255 1140.24,779.616 1140.8,791.335 1141.36,781.045 1141.92,775.12 1142.48,767.814 1143.04,781.622 1143.6,742.241 1144.16,739.932 1144.72,771.625 1145.28,765.963 1145.84,747.427 1146.4,711.386 1146.96,731.151 1147.51,744.859 1148.07,757.121 1148.63,736.818 1149.19,685.597 1149.75,721.743 1150.31,688.9 1150.87,658.084 1151.43,615.272 1151.99,598.659 1152.55,601.235 1153.11,618.116 1153.67,623.757 1154.23,641.65 1154.78,625.855 1155.34,631.042 1155.9,616.52 1156.46,619.74 1157.02,638.342 1157.58,689.337 1158.14,689.807 1158.7,672.107 1159.26,672.045 1159.82,672.423 1160.38,659.228 1160.94,675.467 1161.5,657.95 1162.05,677.832 1162.61,677.98 1163.17,677.203 1163.73,723.484 1164.29,733.949 1164.85,734.159 1165.41,762.626 1165.97,776.062 1166.53,802.602 1167.09,793.079 1167.65,803.339 1168.21,766.819 1168.77,760.474 1169.33,758.299 1169.88,703.635 1170.44,687.036 1171,685.137 1171.56,651.672 1172.12,670.151 1172.68,670.644 1173.24,687.299 1173.8,718.348 1174.36,665.941 1174.92,652.318 1175.48,651.962 1176.04,638.892 1176.6,659.59 1177.15,644.447 1177.71,672.798 1178.27,689.295 1178.83,703.506 1179.39,686.459 1179.95,681.199 1180.51,715.501 1181.07,696.257 1181.63,662.259 1182.19,664.486 1182.75,682.587 1183.31,713.244 1183.87,692.543 1184.43,675.443 1184.98,655.999 1185.54,656.444 1186.1,642.654 1186.66,628.238 1187.22,617.075 1187.78,621.019 1188.34,594.923 1188.9,619.982 1189.46,621.754 1190.02,604.784 1190.58,607.589 1191.14,631.097 1191.7,648.612 1192.25,619.064 1192.81,638.694 1193.37,655.721 1193.93,669.487 1194.49,669.755 1195.05,668.836 1195.61,668.762 1196.17,671.513 1196.73,706.137 1197.29,691.219 1197.85,691.046 1198.41,642.801 1198.97,648.089 1199.52,666.888 1200.08,699.346 1200.64,732.887 1201.2,696.286 1201.76,694.599 1202.32,711.165 1202.88,746.819 1203.44,725.746 1204,708.158 1204.56,689.427 1205.12,673.449 1205.68,641.121 1206.24,660.739 1206.8,711.396 1207.35,695.134 1207.91,710.974 1208.47,711.523 1209.03,695.8 1209.59,696.672 1210.15,697.685 1210.71,714.989 1211.27,726.789 1211.83,723.055 1212.39,707.066 1212.95,706.662 1213.51,706.149 1214.07,699.564 1214.62,725.62 1215.18,706.339 1215.74,689.646 1216.3,686.431 1216.86,705.548 1217.42,735.154 1217.98,748.708 1218.54,745.956 1219.1,740.885 1219.66,785.356 1220.22,814.515 1220.78,777.348 1221.34,788.045 1221.89,796.368 1222.45,823.619 1223.01,847.052 1223.57,825.098 1224.13,836.167 1224.69,814.639 1225.25,790.476 1225.81,784.238 1226.37,697.148 1226.93,663.759 1227.49,668.609 1228.05,642.063 1228.61,661.537 1229.17,679.87 1229.72,663.865 1230.28,647.71 1230.84,665.341 1231.4,667.827 1231.96,635.661 1232.52,638.945 1233.08,658.954 1233.64,675.464 1234.2,639.608 1234.76,592.105 1235.32,596.977 1235.88,569.493 1236.44,574.94 1236.99,591.894 1237.55,610.645 1238.11,610.954 1238.67,596.911 1239.23,600.466 1239.79,619.36 1240.35,604.503 1240.91,625.566 1241.47,611.232 1242.03,614.661 1242.59,604.387 1243.15,626.247 1243.71,644.303 1244.26,630.527 1244.82,619.865 1245.38,590.341 1245.94,613.053 1246.5,618.652 1247.06,623.247 1247.62,607.495 1248.18,607.671 1248.74,611.867 1249.3,596.246 1249.86,663.496 1250.42,619.715 1250.98,621.99 1251.54,606.994 1252.09,609.44 1252.65,627.681 1253.21,597.512 1253.77,620.996 1254.33,706.553 1254.89,739.574 1255.45,739.149 1256.01,754.536 1256.57,763.916 1257.13,775.005 1257.69,754.178 1258.25,749.379 1258.81,743.25 1259.36,741.386 1259.92,734.161 1260.48,730.21 1261.04,728.756 1261.6,742.272 1262.16,738.819 1262.72,720.453 1263.28,721.347 1263.84,737.609 1264.4,731.606 1264.96,744.867 1265.52,709.951 1266.08,718.98 1266.63,700.634 1267.19,698.361 1267.75,681.216 1268.31,712.116 1268.87,710.786 1269.43,723.395 1269.99,690.908 1270.55,691.452 1271.11,706.293 1271.67,689.51 1272.23,671.86 1272.79,702.546 1273.35,701.626 1273.91,665.546 1274.46,702.432 1275.02,715.324 1275.58,718.106 1276.14,713.015 1276.7,695.018 1277.26,647.109 1277.82,650.402 1278.38,589.175 1278.94,596.787 1279.5,586.536 1280.06,573.909 1280.62,532.684 1281.18,559.194 1281.73,550.209 1282.29,558.901 1282.85,550.384 1283.41,571.081 1283.97,577.942 1284.53,581.727 1285.09,586.683 1285.65,608.777 1286.21,629.999 1286.77,668.749 1287.33,684.585 1287.89,670.457 1288.45,626.626 1289,632.632 1289.56,651.744 1290.12,610.319 1290.68,614.238 1291.24,631.725 1291.8,637.91 1292.36,641.796 1292.92,628.088 1293.48,628.969 1294.04,647.909 1294.6,697.835 1295.16,679.711 1295.72,698.241 1296.28,714.483 1296.83,729.444 1297.39,728.726 1297.95,772.87 1298.51,798.483 1299.07,810.175 1299.63,755.933 1300.19,769.581 1300.75,794.39 1301.31,786.529 1301.87,842.843 1302.43,818.964 1302.99,797.631 1303.55,777.039 1304.1,741.092 1304.66,704.68 1305.22,721.999 1305.78,735.788 1306.34,745.324 1306.9,727.851 1307.46,706.961 1308.02,707.583 1308.58,672.54 1309.14,688.974 1309.7,690.869 1310.26,702.971 1310.82,700.63 1311.38,700.214 1311.93,696.797 1312.49,743.312 1313.05,756.04 1313.61,754.545 1314.17,766.487 1314.73,763.32 1315.29,726.869 1315.85,722.696 1316.41,719.722 1316.97,685.04 1317.53,668.529 1318.09,636.987 1318.65,639.104 1319.2,602.959 1319.76,602.54 1320.32,620.873 1320.88,609.68 1321.44,598.604 1322,589.631 1322.56,596.406 1323.12,585.864 1323.68,575.564 1324.24,579.517 1324.8,554.247 1325.36,563.65 1325.92,535.088 1326.47,541.897 1327.03,567.203 1327.59,574.18 1328.15,576.923 1328.71,583.872 1329.27,601.875 1329.83,621.112 1330.39,640.722 1330.95,660.864 1331.51,696.436 1332.07,678.636 1332.63,679.62 1333.19,647.165 1333.75,634.246 1334.3,609.312 1334.86,610.273 1335.42,632.222 1335.98,650.615 1336.54,700.44 1337.1,699.836 1337.66,747.684 1338.22,729.944 1338.78,727.463 1339.34,708.83 1339.9,711.69 1340.46,711.751 1341.02,692.604 1341.57,711.337 1342.13,711.102 1342.69,743.393 1343.25,725.53 1343.81,707.7 1344.37,705.658 1344.93,717.645 1345.49,700.126 1346.05,682.32 1346.61,714.291 1347.17,744.199 1347.73,739.609 1348.29,703.032 1348.84,703.159 1349.4,700.579 1349.96,685.298 1350.52,671.082 1351.08,689.616 1351.64,673.034 1352.2,686.363 1352.76,653.824 1353.32,657.891 1353.88,689.64 1354.44,724.241 1355,674.729 1355.56,660.275 1356.12,648.052 1356.67,652.867 1357.23,639.645 1357.79,591.618 1358.35,582.733 1358.91,605.331 1359.47,580.02 1360.03,582.772 1360.59,585.846 1361.15,610.227 1361.71,598.567 1362.27,606.509 1362.83,658.878 1363.39,661.617 1363.94,659.895 1364.5,659.283 1365.06,645.706 1365.62,663.199 1366.18,647.248 1366.74,649.042 1367.3,649.503 1367.86,634.482 1368.42,652.069 1368.98,702.505 1369.54,712.059 1370.1,709.744 1370.66,705.956 1371.21,701.76 1371.77,667.192 1372.33,638.215 1372.89,638.567 1373.45,623.851 1374.01,642.079 1374.57,645.314 1375.13,631.64 1375.69,656.35 1376.25,675.566 1376.81,690.582 1377.37,706.07 1377.93,719.629 1378.49,719.34 1379.04,684.634 1379.6,685.105 1380.16,653.773 1380.72,654.116 1381.28,686.11 1381.84,670.936 1382.4,671.264 1382.96,671.867 1383.52,657.53 1384.08,656.271 1384.64,674.785 1385.2,661.943 1385.76,650.695 1386.31,675.06 1386.87,672.6 1387.43,706.997 1387.99,703.308 1388.55,683.511 1389.11,665.805 1389.67,683.656 1390.23,683.983 1390.79,684.336 1391.35,687.079 1391.91,669.263 1392.47,690.619 1393.03,688.643 1393.58,655.282 1394.14,655.879 1394.7,660.225 1395.26,695.922 1395.82,680.967 1396.38,681.906 1396.94,666.396 1397.5,716.545 1398.06,699.05 1398.62,696.388 1399.18,682.744 1399.74,696.478 1400.3,727.622 1400.86,720.03 1401.41,719.331 1401.97,764.31 1402.53,779.593 1403.09,774.205 1403.65,754.536 1404.21,751.734 1404.77,794.428 1405.33,807.217 1405.89,798.707 1406.45,797.213 1407.01,791.631 1407.57,785.169 1408.13,779.904 1408.68,746.48 1409.24,745.551 1409.8,740.906 1410.36,705.913 1410.92,704.938 1411.48,687.228 1412.04,704.048 1412.6,685.006 1413.16,652.303 1413.72,666.922 1414.28,667.213 1414.84,734.854 1415.4,730.971 1415.95,747.609 1416.51,761.879 1417.07,808.874 1417.63,803.37 1418.19,797.761 1418.75,779.789 1419.31,775.943 1419.87,770.686 1420.43,766.489 1420.99,758.375 1421.55,737.584 1422.11,722.086 1422.67,702.79 1423.23,698.869 1423.78,696.899 1424.34,681.98 1424.9,733.3 1425.46,714.397 1426.02,713.557 1426.58,697.635 1427.14,716.458 1427.7,730.931 1428.26,713.199 1428.82,712.356 1429.38,744.736 1429.94,774.797 1430.5,722.253 1431.05,701.876 1431.61,682.285 1432.17,683.064 1432.73,687.486 1433.29,687.888 1433.85,702.91 1434.41,698.142 1434.97,681.345 1435.53,696.425 1436.09,695.66 1436.65,708.772 1437.21,723.18 1437.77,656.769 1438.33,640.676 1438.88,640.1 1439.44,660.645 1440,679.203 1440.56,678.925 1441.12,663.228 1441.68,666.493 1442.24,716.538 1442.8,667.56 1443.36,653.23 1443.92,652.457 1444.48,703.492 1445.04,652.962 1445.6,688.633 1446.15,686.605 1446.71,655.562 1447.27,657.675 1447.83,644.797 1448.39,614.441 1448.95,617.57 1449.51,636.655 1450.07,623.205 1450.63,659.525 1451.19,692.137 1451.75,708.291 1452.31,706.468 1452.87,686.714 1453.42,688.206 1453.98,702.793 1454.54,669.73 1455.1,654.22 1455.66,657.686 1456.22,673.563 1456.78,674.617 1457.34,671.531 1457.9,734.772 1458.46,749.239 1459.02,760.155 1459.58,740.983 1460.14,721.126 1460.7,736.632 1461.25,735.88 1461.81,750.947 1462.37,716.629 1462.93,731.972 1463.49,731.473 1464.05,728.594 1464.61,739.644 1465.17,705.737 1465.73,686.565 1466.29,733.188 1466.85,761.733 1467.41,793.639 1467.97,786.756 1468.52,779.946 1469.08,755.596 1469.64,764.167 1470.2,711.505 1470.76,744.83 1471.32,743.123 1471.88,770.087 1472.44,766.224 1473,776.79 1473.56,804.842 1474.12,797.98 1474.68,790.426 1475.24,782.983 1475.79,762.33 1476.35,738.917 1476.91,701.558 1477.47,681.186 1478.03,693.805 1478.59,661.433 1479.15,678.757 1479.71,663.397 1480.27,681.354 1480.83,665.282 1481.39,649.201 1481.95,635.376 1482.51,667.376 1483.07,651.286 1483.62,652.812 1484.18,657.475 1484.74,674.036 1485.3,658.402 1485.86,661.373 1486.42,664.671 1486.98,681.031 1487.54,662.291 1488.1,660.985 1488.66,647.024 1489.22,634.485 1489.78,639.056 1490.34,639.179 1490.89,655.127 1491.45,657.19 1492.01,627.926 1492.57,645.904 1493.13,601.965 1493.69,575.825 1494.25,561.975 1494.81,584.676 1495.37,588.506 1495.93,562.693 1496.49,581.924 1497.05,618.309 1497.61,620.814 1498.16,605.262 1498.72,608.393 1499.28,582.678 1499.84,601.666 1500.4,617.622 1500.96,604.298 1501.52,592.185 1502.08,577.098 1502.64,596.955 1503.2,584.595 1503.76,640.882 1504.32,656.955 1504.88,659.144 1505.44,660.495 1505.99,643.417 1506.55,681.377 1507.11,698.535 1507.67,715.156 1508.23,727.239 1508.79,695.96 1509.35,693.603 1509.91,693.698 1510.47,679.289 1511.03,664.081 1511.59,662.624 1512.15,630.037 1512.71,652.046 1513.26,652.456 1513.82,671.303 1514.38,704.464 1514.94,735.696 1515.5,720.202 1516.06,701.831 1516.62,665.058 1517.18,665.418 1517.74,665.668 1518.3,632.149 1518.86,620.732 1519.42,609.407 1519.98,610.992 1520.53,626.957 1521.09,649.988 1521.65,635.539 1522.21,624.379 1522.77,626.174 1523.33,661.995 1523.89,665.301 1524.45,665.449 1525.01,649.923 1525.57,653.353 1526.13,655.384 1526.69,627.166 1527.25,613.598 1527.81,601.366 1528.36,619.587 1528.92,606.991 1529.48,641.848 1530.04,644.776 1530.6,665.376 1531.16,685.355 1531.72,686.356 1532.28,704.699 1532.84,688.089 1533.4,686.926 1533.96,688.384 1534.52,688.999 1535.08,686.615 1535.63,670.314 1536.19,657.308 1536.75,645.157 1537.31,632.825 1537.87,639.135 1538.43,641.213 1538.99,642.279 1539.55,647.981 1540.11,665.696 1540.67,686.419 1541.23,719.233 1541.79,749.677 1542.35,777.338 1542.9,723.443 1543.46,721.873 1544.02,720.218 1544.58,702.647 1545.14,735.037 1545.7,761.654 1546.26,755.083 1546.82,738.063 1547.38,748.085 1547.94,795.037 1548.5,776.306 1549.06,767.799 1549.62,782.05 1550.18,776.367 1550.73,773.517 1551.29,752.221 1551.85,780.983 1552.41,795.705 1552.97,789.057 1553.53,833.264 1554.09,825.381 1554.65,786.509 1555.21,761.46 1555.77,793.977 1556.33,790.339 1556.89,770.52 1557.45,768.122 1558,764.178 1558.56,757.261 1559.12,734.922 1559.68,700.27 1560.24,716.181 1560.8,729.324 1561.36,681.875 1561.92,648.694 1562.48,698.052 1563.04,678.973 1563.6,695.562 1564.16,695.544 1564.72,693.023 1565.28,687.476 1565.83,670.751 1566.39,654.032 1566.95,604.837 1567.51,561.131 1568.07,569.137 1568.63,590.88 1569.19,597.947 1569.75,601.653 1570.31,624.14 1570.87,610.692 1571.43,631.656 1571.99,648.531 1572.55,653.768 1573.1,656.805 1573.66,626.49 1574.22,630.368 1574.78,615.28 1575.34,598.668 1575.9,601.805 1576.46,686.53 1577.02,669.065 1577.58,652.786 1578.14,653.654 1578.7,656.282 1579.26,624.238 1579.82,643.999 1580.37,647.01 1580.93,665.804 1581.49,667.56 1582.05,669.114 1582.61,639.636 1583.17,655.19 1583.73,643.769 1584.29,662.212 1584.85,660.908 1585.41,665.786 1585.97,651.109 1586.53,655.549 1587.09,660.374 1587.65,645.291 1588.2,668.904 1588.76,685.281 1589.32,684.459 1589.88,732.841 1590.44,729.903 1591,727.745 1591.56,710.092 1592.12,692.544 1592.68,691.629 1593.24,657.96 1593.8,679.626 1594.36,664.384 1594.92,701.623 1595.47,684.294 1596.03,697.703 1596.59,744.841 1597.15,743.886 1597.71,740.881 1598.27,739.46 1598.83,739.624 1599.39,720.509 1599.95,734.736 1600.51,698.118 1601.07,682.249 1601.63,668.765 1602.19,651.926 1602.74,671.112 1603.3,670.207 1603.86,702.253 1604.42,685.009 1604.98,687.887 1605.54,691.104 1606.1,672.673 1606.66,672.736 1607.22,657.626 1607.78,673.668 1608.34,657.25 1608.9,656.869 1609.46,659.024 1610.02,676.475 1610.57,658.546 1611.13,659.332 1611.69,659.255 1612.25,659.341 1612.81,645.062 1613.37,649.87 1613.93,686.276 1614.49,683.652 1615.05,683.596 1615.61,713.353 1616.17,711.227 1616.73,707.396 1617.29,706.39 1617.84,706.052 1618.4,670.479 1618.96,670.953 1619.52,689.094 1620.08,669.213 1620.64,639.656 1621.2,652.855 1621.76,654.419 1622.32,670.465 1622.88,671.876 1623.44,658.447 1624,641.404 1624.56,676.805 1625.11,661.254 1625.67,676.213 1626.23,675.728 1626.79,677.176 1627.35,708.904 1627.91,740.464 1628.47,771.726 1629.03,737.315 1629.59,736.348 1630.15,733.174 1630.71,761.294 1631.27,739.615 1631.83,768.998 1632.39,763.991 1632.94,762.957 1633.5,759.751 1634.06,758.298 1634.62,741.442 1635.18,740.692 1635.74,738.279 1636.3,751.661 1636.86,748.084 1637.42,744.598 1637.98,723.694 1638.54,707.745 1639.1,708.28 1639.66,688.645 1640.21,673.627 1640.77,673.964 1641.33,691.671 1641.89,706.738 1642.45,690.56 1643.01,671.677 1643.57,690.86 1644.13,654.852 1644.69,657.165 1645.25,658.884 1645.81,658.111 1646.37,675.519 1646.93,661.055 1647.48,645.149 1648.04,647.154 1648.6,632.48 1649.16,649.622 1649.72,666.216 1650.28,619.233 1650.84,608.614 1651.4,644.882 1651.96,697.953 1652.52,697.169 1653.08,695.808 1653.64,662.495 1654.2,665.286 1654.76,665.66 1655.31,687.25 1655.87,684.09 1656.43,684.758 1656.99,636.46 1657.55,655.07 1658.11,655.992 1658.67,656.794 1659.23,676.294 1659.79,676.64 1660.35,659.555 1660.91,678.122 1661.47,680.966 1662.03,728.896 1662.58,742.79 1663.14,724.636 1663.7,711.532 1664.26,710.094 1664.82,676.014 1665.38,711.546 1665.94,712.354 1666.5,693.016 1667.06,707.39 1667.62,708.251 1668.18,725.338 1668.74,721.688 1669.3,686.805 1669.85,703.956 1670.41,685.468 1670.97,705.502 1671.53,687.291 1672.09,733.57 1672.65,762.247 1673.21,772.588 1673.77,718.929 1674.33,715.649 1674.89,714.747 1675.45,713.593 1676.01,707.156 1676.57,704.477 1677.13,702.528 1677.68,685.305 1678.24,685.761 1678.8,683.825 1679.36,653.074 1679.92,652.727 1680.48,681.866 1681.04,682.828 1681.6,715.262 1682.16,700.16 1682.72,698.422 1683.28,712.745 1683.84,743.683 1684.4,709.569 1684.95,673.323 1685.51,690.924 1686.07,672.524 1686.63,622.39 1687.19,580.112 1687.75,539.014 1688.31,565.378 1688.87,573.652 1689.43,594.148 1689.99,597.05 1690.55,585.539 1691.11,607.541 1691.67,629.273 1692.23,633.648 1692.78,636.868 1693.34,639.908 1693.9,658.107 1694.46,644.693 1695.02,663.565 1695.58,646.832 1696.14,649.144 1696.7,647.239 1697.26,666.706 1697.82,683.786 1698.38,681.884 1698.94,716.523 1699.5,730.339 1700.05,729.23 1700.61,700.103 1701.17,700.407 1701.73,696.69 1702.29,739.709 1702.85,770.5 1703.41,781.502 1703.97,730.014 1704.53,759.755 1705.09,721.761 1705.65,720.871 1706.21,717.241 1706.77,736.222 1707.32,778.505 1707.88,771.218 1708.44,796.645 1709,808.092 1709.56,769.662 1710.12,767.223 1710.68,746.915 1711.24,757.205 1711.8,721.296 1712.36,735.189 1712.92,749.005 1713.48,729.054 1714.04,712.458 1714.6,711.678 1715.15,740.737 1715.71,737.109 1716.27,747.795 1716.83,745.428 1717.39,740.658 1717.95,754.61 1718.51,738.634 1719.07,719.532 1719.63,702.841 1720.19,666.485 1720.75,681.303 1721.31,696.635 1721.87,712.18 1722.42,707.325 1722.98,721.971 1723.54,719.376 1724.1,699.391 1724.66,665.472 1725.22,667.096 1725.78,653.323 1726.34,668.336 1726.9,702.342 1727.46,685.553 1728.02,686.671 1728.58,685.418 1729.14,668.62 1729.69,685.002 1730.25,701.436 1730.81,764.118 1731.37,759.654 1731.93,753.005 1732.49,760.955 1733.05,758.008 1733.61,740.179 1734.17,767.162 1734.73,779.543 1735.29,710.781 1735.85,704.837 1736.41,687.955 1736.97,690.165 1737.52,689.578 1738.08,708.192 1738.64,721.41 1739.2,717.694 1739.76,716.807 1740.32,699.492 1740.88,758.579 1741.44,769.535 1742,731.619 1742.56,713.487 1743.12,711.439 1743.68,694.803 1744.24,676.982 1744.79,643.49 1745.35,631.477 1745.91,634.884 1746.47,620.242 1747.03,606.365 1747.59,581.751 1748.15,600.864 1748.71,584.05 1749.27,592.115 1749.83,614.263 1750.39,648.886 1750.95,668.413 1751.51,637.618 1752.06,655.906 1752.62,638.24 1753.18,626.795 1753.74,648.251 1754.3,652.234 1754.86,655.66 1755.42,659.42 1755.98,663.951 1756.54,684.115 1757.1,686.95 1757.66,684.846 1758.22,699.701 1758.78,682.564 1759.34,682.2 1759.89,700.813 1760.45,733.122 1761.01,742.959 1761.57,739.282 1762.13,705.385 1762.69,688.499 1763.25,704.115 1763.81,687.209 1764.37,688.381 1764.93,687.206 1765.49,692.083 1766.05,707.999 1766.61,675.608 1767.16,677.621 1767.72,663.31 1768.28,645.515 1768.84,664.475 1769.4,630.37 1769.96,629.977 1770.52,617.578 1771.08,617.992 1771.64,618.185 1772.2,604.149 1772.76,624.122 1773.32,665.4 1773.88,666.835 1774.43,685.989 1774.99,702.948 1775.55,735.878 1776.11,730.634 1776.67,729.227 1777.23,739.243 1777.79,735.924 1778.35,716.62 1778.91,698.064 1779.47,713.209 1780.03,692.679 1780.59,711.803 1781.15,727.721 1781.71,755.215 1782.26,753.339 1782.82,702.091 1783.38,697.872 1783.94,745.126 1784.5,727.137 1785.06,723.079 1785.62,721.079 1786.18,749.99 1786.74,696.392 1787.3,693.134 1787.86,711.89 1788.42,711.497 1788.98,724.173 1789.53,690.483 1790.09,723.792 1790.65,722.483 1791.21,735.903 1791.77,747.812 1792.33,743.109 1792.89,753.582 1793.45,732.417 1794.01,730.775 1794.57,727.675 1795.13,725.121 1795.69,736.35 1796.25,685.764 1796.8,651.786 1797.36,668.377 1797.92,634.243 1798.48,651.885 1799.04,639.586 1799.6,676.027 1800.16,695.628 1800.72,696.176 1801.28,727.428 1801.84,691.742 1802.4,693.531 1802.96,690.421 1803.52,702.656 1804.08,665.859 1804.63,666.896 1805.19,657.764 1805.75,658.477 1806.31,659.844 1806.87,659.467 1807.43,676.222 1807.99,663.279 1808.55,712.039 1809.11,706.867 1809.67,677.946 1810.23,650.597 1810.79,584.846 1811.35,557.245 1811.9,598.093 1812.46,616.475 1813.02,587.443 1813.58,590.377 1814.14,656.842 1814.7,658.127 1815.26,689.87 1815.82,705.152 1816.38,721.844 1816.94,719.616 1817.5,715.405 1818.06,695.786 1818.62,713.118 1819.18,729.276 1819.73,696.047 1820.29,697.259 1820.85,661.082 1821.41,662.933 1821.97,697.06 1822.53,680.754 1823.09,650.983 1823.65,671.484 1824.21,688.49 1824.77,687.234 1825.33,706.222 1825.89,702.571 1826.45,679.938 1827,680.462 1827.56,681.267 1828.12,649.469 1828.68,635.482 1829.24,592.836 1829.8,613.697 1830.36,632.081 1830.92,668.137 1831.48,701.972 1832.04,730.853 1832.6,713.133 1833.16,711.284 1833.72,692.114 1834.27,689.488 1834.83,686.002 1835.39,671.11 1835.95,674.824 1836.51,660.54 1837.07,661.018 1837.63,648.893 1838.19,669.861 \"/>\n<path clip-path=\"url(#clip003)\" d=\"M720.247 690.804 L720.806 690.804 L721.365 690.804 L721.924 690.804 L722.484 690.804 L723.043 690.804 L723.602 690.804 L724.161 690.804 L724.721 690.804 L725.28 690.804 L725.839 690.804 L726.398 690.804 L726.958 690.804 L727.517 690.804 L728.076 690.804 L728.635 690.804 L729.195 690.804 L729.754 690.804 L730.313 690.804 L730.872 690.804 L731.432 690.804 L731.991 690.804 L732.55 690.804 L733.109 690.804 L733.669 690.804 L734.228 690.804 L734.787 690.804 L735.346 690.804 L735.906 690.804 L736.465 690.804 L737.024 690.804 L737.583 690.804 L738.143 690.804 L738.702 690.804 L739.261 690.804 L739.82 690.804 L740.38 690.804 L740.939 690.804 L741.498 690.804 L742.057 690.804 L742.617 690.804 L743.176 690.804 L743.735 690.804 L744.294 690.804 L744.854 690.804 L745.413 690.804 L745.972 690.804 L746.531 690.804 L747.091 690.804 L747.65 690.804 L748.209 690.804 L748.768 690.804 L749.328 690.804 L749.887 690.804 L750.446 690.804 L751.005 690.804 L751.565 690.804 L752.124 690.804 L752.683 690.804 L753.242 690.804 L753.802 690.804 L754.361 690.804 L754.92 690.804 L755.479 690.804 L756.039 690.804 L756.598 690.804 L757.157 690.804 L757.716 690.804 L758.276 690.804 L758.835 690.804 L759.394 690.804 L759.953 690.804 L760.513 690.804 L761.072 690.804 L761.631 690.804 L762.19 690.804 L762.75 690.804 L763.309 690.804 L763.868 690.804 L764.427 690.804 L764.987 690.804 L765.546 690.804 L766.105 690.804 L766.664 690.804 L767.224 690.804 L767.783 690.804 L768.342 690.804 L768.901 690.804 L769.461 690.804 L770.02 690.804 L770.579 690.804 L771.138 690.804 L771.698 690.804 L772.257 690.804 L772.816 690.804 L773.375 690.804 L773.935 690.804 L774.494 690.804 L775.053 690.804 L775.612 690.804 L776.172 690.804 L776.731 690.804 L777.29 690.804 L777.849 690.804 L778.409 690.804 L778.968 690.804 L779.527 690.804 L780.086 690.804 L780.646 690.804 L781.205 690.804 L781.764 690.804 L782.323 690.804 L782.883 690.804 L783.442 690.804 L784.001 690.804 L784.56 690.804 L785.12 690.804 L785.679 690.804 L786.238 690.804 L786.797 690.804 L787.357 690.804 L787.916 690.804 L788.475 690.804 L789.034 690.804 L789.594 690.804 L790.153 690.804 L790.712 690.804 L791.271 690.804 L791.831 690.804 L792.39 690.804 L792.949 690.804 L793.508 690.804 L794.068 690.804 L794.627 690.804 L795.186 690.804 L795.745 690.804 L796.305 690.804 L796.864 690.804 L797.423 690.804 L797.982 690.804 L798.542 690.804 L799.101 690.804 L799.66 690.804 L800.219 690.804 L800.779 690.804 L801.338 690.804 L801.897 690.804 L802.456 690.804 L803.016 690.804 L803.575 690.804 L804.134 690.804 L804.693 690.804 L805.253 690.804 L805.812 690.804 L806.371 690.804 L806.931 690.804 L807.49 690.804 L808.049 690.804 L808.608 690.804 L809.168 690.804 L809.727 690.804 L810.286 690.804 L810.845 690.804 L811.405 690.804 L811.964 690.804 L812.523 690.804 L813.082 690.804 L813.642 690.804 L814.201 690.804 L814.76 690.804 L815.319 690.804 L815.879 690.804 L816.438 690.804 L816.997 690.804 L817.556 690.804 L818.116 690.804 L818.675 690.804 L819.234 690.804 L819.793 690.804 L820.353 690.804 L820.912 690.804 L821.471 690.804 L822.03 690.804 L822.59 690.804 L823.149 690.804 L823.708 690.804 L824.267 690.804 L824.827 690.804 L825.386 690.804 L825.945 690.804 L826.504 690.804 L827.064 690.804 L827.623 690.804 L828.182 690.804 L828.741 690.804 L829.301 690.804 L829.86 690.804 L830.419 690.804 L830.978 690.804 L831.538 690.804 L832.097 690.804 L832.656 690.804 L833.215 690.804 L833.775 690.804 L834.334 690.804 L834.893 690.804 L835.452 690.804 L836.012 690.804 L836.571 690.804 L837.13 690.804 L837.689 690.804 L838.249 690.804 L838.808 690.804 L839.367 690.804 L839.926 690.804 L840.486 690.804 L841.045 690.804 L841.604 690.804 L842.163 690.804 L842.723 690.804 L843.282 690.804 L843.841 690.804 L844.4 690.804 L844.96 690.804 L845.519 690.804 L846.078 690.804 L846.637 690.804 L847.197 690.804 L847.756 690.804 L848.315 690.804 L848.874 690.804 L849.434 690.804 L849.993 690.804 L850.552 690.804 L851.111 690.804 L851.671 690.804 L852.23 690.804 L852.789 690.804 L853.348 690.804 L853.908 690.804 L854.467 690.804 L855.026 690.804 L855.585 690.804 L856.145 690.804 L856.704 690.804 L857.263 690.804 L857.822 690.804 L858.382 690.804 L858.941 690.804 L859.5 690.804 L860.059 690.804 L860.619 690.804 L861.178 690.804 L861.737 690.804 L862.296 690.804 L862.856 690.804 L863.415 690.804 L863.974 690.804 L864.533 690.804 L865.093 690.804 L865.652 690.804 L866.211 690.804 L866.77 690.804 L867.33 690.804 L867.889 690.804 L868.448 690.804 L869.007 690.804 L869.567 690.804 L870.126 690.804 L870.685 690.804 L871.244 690.804 L871.804 690.804 L872.363 690.804 L872.922 690.804 L873.481 690.804 L874.041 690.804 L874.6 690.804 L875.159 690.804 L875.718 690.804 L876.278 690.804 L876.837 690.804 L877.396 690.804 L877.955 690.804 L878.515 690.804 L879.074 690.804 L879.633 690.804 L880.192 690.804 L880.752 690.804 L881.311 690.804 L881.87 690.804 L882.429 690.804 L882.989 690.804 L883.548 690.804 L884.107 690.804 L884.666 690.804 L885.226 690.804 L885.785 690.804 L886.344 690.804 L886.903 690.804 L887.463 690.804 L888.022 690.804 L888.581 690.804 L889.14 690.804 L889.7 690.804 L890.259 690.804 L890.818 690.804 L891.377 690.804 L891.937 690.804 L892.496 690.804 L893.055 690.804 L893.614 690.804 L894.174 690.804 L894.733 690.804 L895.292 690.804 L895.851 690.804 L896.411 690.804 L896.97 690.804 L897.529 690.804 L898.088 690.804 L898.648 690.804 L899.207 690.804 L899.766 690.804 L900.325 690.804 L900.885 690.804 L901.444 690.804 L902.003 690.804 L902.562 690.804 L903.122 690.804 L903.681 690.804 L904.24 690.804 L904.799 690.804 L905.359 690.804 L905.918 690.804 L906.477 690.804 L907.036 690.804 L907.596 690.804 L908.155 690.804 L908.714 690.804 L909.273 690.804 L909.833 690.804 L910.392 690.804 L910.951 690.804 L911.51 690.804 L912.07 690.804 L912.629 690.804 L913.188 690.804 L913.747 690.804 L914.307 690.804 L914.866 690.804 L915.425 690.804 L915.984 690.804 L916.544 690.804 L917.103 690.804 L917.662 690.804 L918.221 690.804 L918.781 690.804 L919.34 690.804 L919.899 690.804 L920.458 690.804 L921.018 690.804 L921.577 690.804 L922.136 690.804 L922.695 690.804 L923.255 690.804 L923.814 690.804 L924.373 690.804 L924.932 690.804 L925.492 690.804 L926.051 690.804 L926.61 690.804 L927.169 690.804 L927.729 690.804 L928.288 690.804 L928.847 690.804 L929.406 690.804 L929.966 690.804 L930.525 690.804 L931.084 690.804 L931.644 690.804 L932.203 690.804 L932.762 690.804 L933.321 690.804 L933.881 690.804 L934.44 690.804 L934.999 690.804 L935.558 690.804 L936.118 690.804 L936.677 690.804 L937.236 690.804 L937.795 690.804 L938.355 690.804 L938.914 690.804 L939.473 690.804 L940.032 690.804 L940.592 690.804 L941.151 690.804 L941.71 690.804 L942.269 690.804 L942.829 690.804 L943.388 690.804 L943.947 690.804 L944.506 690.804 L945.066 690.804 L945.625 690.804 L946.184 690.804 L946.743 690.804 L947.303 690.804 L947.862 690.804 L948.421 690.804 L948.98 690.804 L949.54 690.804 L950.099 690.804 L950.658 690.804 L951.217 690.804 L951.777 690.804 L952.336 690.804 L952.895 690.804 L953.454 690.804 L954.014 690.804 L954.573 690.804 L955.132 690.804 L955.691 690.804 L956.251 690.804 L956.81 690.804 L957.369 690.804 L957.928 690.804 L958.488 690.804 L959.047 690.804 L959.606 690.804 L960.165 690.804 L960.725 690.804 L961.284 690.804 L961.843 690.804 L962.402 690.804 L962.962 690.804 L963.521 690.804 L964.08 690.804 L964.639 690.804 L965.199 690.804 L965.758 690.804 L966.317 690.804 L966.876 690.804 L967.436 690.804 L967.995 690.804 L968.554 690.804 L969.113 690.804 L969.673 690.804 L970.232 690.804 L970.791 690.804 L971.35 690.804 L971.91 690.804 L972.469 690.804 L973.028 690.804 L973.587 690.804 L974.147 690.804 L974.706 690.804 L975.265 690.804 L975.824 690.804 L976.384 690.804 L976.943 690.804 L977.502 690.804 L978.061 690.804 L978.621 690.804 L979.18 690.804 L979.739 690.804 L980.298 690.804 L980.858 690.804 L981.417 690.804 L981.976 690.804 L982.535 690.804 L983.095 690.804 L983.654 690.804 L984.213 690.804 L984.772 690.804 L985.332 690.804 L985.891 690.804 L986.45 690.804 L987.009 690.804 L987.569 690.804 L988.128 690.804 L988.687 690.804 L989.246 690.804 L989.806 690.804 L990.365 690.804 L990.924 690.804 L991.483 690.804 L992.043 690.804 L992.602 690.804 L993.161 690.804 L993.72 690.804 L994.28 690.804 L994.839 690.804 L995.398 690.804 L995.957 690.804 L996.517 690.804 L997.076 690.804 L997.635 690.804 L998.194 690.804 L998.754 690.804 L999.313 690.804 L999.872 690.804 L1000.43 690.804 L1000.99 690.804 L1001.55 690.804 L1002.11 690.804 L1002.67 690.804 L1003.23 690.804 L1003.79 690.804 L1004.35 690.804 L1004.91 690.804 L1005.46 690.804 L1006.02 690.804 L1006.58 690.804 L1007.14 690.804 L1007.7 690.804 L1008.26 690.804 L1008.82 690.804 L1009.38 690.804 L1009.94 690.804 L1010.5 690.804 L1011.06 690.804 L1011.62 690.804 L1012.18 690.804 L1012.73 690.804 L1013.29 690.804 L1013.85 690.804 L1014.41 690.804 L1014.97 690.804 L1015.53 690.804 L1016.09 690.804 L1016.65 690.804 L1017.21 690.804 L1017.77 690.804 L1018.33 690.804 L1018.89 690.804 L1019.45 690.804 L1020.01 690.804 L1020.56 690.804 L1021.12 690.804 L1021.68 690.804 L1022.24 690.804 L1022.8 690.804 L1023.36 690.804 L1023.92 690.804 L1024.48 690.804 L1025.04 690.804 L1025.6 690.804 L1026.16 690.804 L1026.72 690.804 L1027.28 690.804 L1027.83 690.804 L1028.39 690.804 L1028.95 690.804 L1029.51 690.804 L1030.07 690.804 L1030.63 690.804 L1031.19 690.804 L1031.75 690.804 L1032.31 690.804 L1032.87 690.804 L1033.43 690.804 L1033.99 690.804 L1034.55 690.804 L1035.1 690.804 L1035.66 690.804 L1036.22 690.804 L1036.78 690.804 L1037.34 690.804 L1037.9 690.804 L1038.46 690.804 L1039.02 690.804 L1039.58 690.804 L1040.14 690.804 L1040.7 690.804 L1041.26 690.804 L1041.82 690.804 L1042.38 690.804 L1042.93 690.804 L1043.49 690.804 L1044.05 690.804 L1044.61 690.804 L1045.17 690.804 L1045.73 690.804 L1046.29 690.804 L1046.85 690.804 L1047.41 690.804 L1047.97 690.804 L1048.53 690.804 L1049.09 690.804 L1049.65 690.804 L1050.2 690.804 L1050.76 690.804 L1051.32 690.804 L1051.88 690.804 L1052.44 690.804 L1053 690.804 L1053.56 690.804 L1054.12 690.804 L1054.68 690.804 L1055.24 690.804 L1055.8 690.804 L1056.36 690.804 L1056.92 690.804 L1057.48 690.804 L1058.03 690.804 L1058.59 690.804 L1059.15 690.804 L1059.71 690.804 L1060.27 690.804 L1060.83 690.804 L1061.39 690.804 L1061.95 690.804 L1062.51 690.804 L1063.07 690.804 L1063.63 690.804 L1064.19 690.804 L1064.75 690.804 L1065.3 690.804 L1065.86 690.804 L1066.42 690.804 L1066.98 690.804 L1067.54 690.804 L1068.1 690.804 L1068.66 690.804 L1069.22 690.804 L1069.78 690.804 L1070.34 690.804 L1070.9 690.804 L1071.46 690.804 L1072.02 690.804 L1072.57 690.804 L1073.13 690.804 L1073.69 690.804 L1074.25 690.804 L1074.81 690.804 L1075.37 690.804 L1075.93 690.804 L1076.49 690.804 L1077.05 690.804 L1077.61 690.804 L1078.17 690.804 L1078.73 690.804 L1079.29 690.804 L1079.85 690.804 L1080.4 690.804 L1080.96 690.804 L1081.52 690.804 L1082.08 690.804 L1082.64 690.804 L1083.2 690.804 L1083.76 690.804 L1084.32 690.804 L1084.88 690.804 L1085.44 690.804 L1086 690.804 L1086.56 690.804 L1087.12 690.804 L1087.67 690.804 L1088.23 690.804 L1088.79 690.804 L1089.35 690.804 L1089.91 690.804 L1090.47 690.804 L1091.03 690.804 L1091.59 690.804 L1092.15 690.804 L1092.71 690.804 L1093.27 690.804 L1093.83 690.804 L1094.39 690.804 L1094.94 690.804 L1095.5 690.804 L1096.06 690.804 L1096.62 690.804 L1097.18 690.804 L1097.74 690.804 L1098.3 690.804 L1098.86 690.804 L1099.42 690.804 L1099.98 690.804 L1100.54 690.804 L1101.1 690.804 L1101.66 690.804 L1102.22 690.804 L1102.77 690.804 L1103.33 690.804 L1103.89 690.804 L1104.45 690.804 L1105.01 690.804 L1105.57 690.804 L1106.13 690.804 L1106.69 690.804 L1107.25 690.804 L1107.81 690.804 L1108.37 690.804 L1108.93 690.804 L1109.49 690.804 L1110.04 690.804 L1110.6 690.804 L1111.16 690.804 L1111.72 690.804 L1112.28 690.804 L1112.84 690.804 L1113.4 690.804 L1113.96 690.804 L1114.52 690.804 L1115.08 690.804 L1115.64 690.804 L1116.2 690.804 L1116.76 690.804 L1117.31 690.804 L1117.87 690.804 L1118.43 690.804 L1118.99 690.804 L1119.55 690.804 L1120.11 690.804 L1120.67 690.804 L1121.23 690.804 L1121.79 690.804 L1122.35 690.804 L1122.91 690.804 L1123.47 690.804 L1124.03 690.804 L1124.59 690.804 L1125.14 690.804 L1125.7 690.804 L1126.26 690.804 L1126.82 690.804 L1127.38 690.804 L1127.94 690.804 L1128.5 690.804 L1129.06 690.804 L1129.62 690.804 L1130.18 690.804 L1130.74 690.804 L1131.3 690.804 L1131.86 690.804 L1132.41 690.804 L1132.97 690.804 L1133.53 690.804 L1134.09 690.804 L1134.65 690.804 L1135.21 690.804 L1135.77 690.804 L1136.33 690.804 L1136.89 690.804 L1137.45 690.804 L1138.01 690.804 L1138.57 690.804 L1139.13 690.804 L1139.68 690.804 L1140.24 690.804 L1140.8 690.804 L1141.36 690.804 L1141.92 690.804 L1142.48 690.804 L1143.04 690.804 L1143.6 690.804 L1144.16 690.804 L1144.72 690.804 L1145.28 690.804 L1145.84 690.804 L1146.4 690.804 L1146.96 690.804 L1147.51 690.804 L1148.07 690.804 L1148.63 690.804 L1149.19 690.804 L1149.75 690.804 L1150.31 690.804 L1150.87 690.804 L1151.43 690.804 L1151.99 690.804 L1152.55 690.804 L1153.11 690.804 L1153.67 690.804 L1154.23 690.804 L1154.78 690.804 L1155.34 690.804 L1155.9 690.804 L1156.46 690.804 L1157.02 690.804 L1157.58 690.804 L1158.14 690.804 L1158.7 690.804 L1159.26 690.804 L1159.82 690.804 L1160.38 690.804 L1160.94 690.804 L1161.5 690.804 L1162.05 690.804 L1162.61 690.804 L1163.17 690.804 L1163.73 690.804 L1164.29 690.804 L1164.85 690.804 L1165.41 690.804 L1165.97 690.804 L1166.53 690.804 L1167.09 690.804 L1167.65 690.804 L1168.21 690.804 L1168.77 690.804 L1169.33 690.804 L1169.88 690.804 L1170.44 690.804 L1171 690.804 L1171.56 690.804 L1172.12 690.804 L1172.68 690.804 L1173.24 690.804 L1173.8 690.804 L1174.36 690.804 L1174.92 690.804 L1175.48 690.804 L1176.04 690.804 L1176.6 690.804 L1177.15 690.804 L1177.71 690.804 L1178.27 690.804 L1178.83 690.804 L1179.39 690.804 L1179.95 690.804 L1180.51 690.804 L1181.07 690.804 L1181.63 690.804 L1182.19 690.804 L1182.75 690.804 L1183.31 690.804 L1183.87 690.804 L1184.43 690.804 L1184.98 690.804 L1185.54 690.804 L1186.1 690.804 L1186.66 690.804 L1187.22 690.804 L1187.78 690.804 L1188.34 690.804 L1188.9 690.804 L1189.46 690.804 L1190.02 690.804 L1190.58 690.804 L1191.14 690.804 L1191.7 690.804 L1192.25 690.804 L1192.81 690.804 L1193.37 690.804 L1193.93 690.804 L1194.49 690.804 L1195.05 690.804 L1195.61 690.804 L1196.17 690.804 L1196.73 690.804 L1197.29 690.804 L1197.85 690.804 L1198.41 690.804 L1198.97 690.804 L1199.52 690.804 L1200.08 690.804 L1200.64 690.804 L1201.2 690.804 L1201.76 690.804 L1202.32 690.804 L1202.88 690.804 L1203.44 690.804 L1204 690.804 L1204.56 690.804 L1205.12 690.804 L1205.68 690.804 L1206.24 690.804 L1206.8 690.804 L1207.35 690.804 L1207.91 690.804 L1208.47 690.804 L1209.03 690.804 L1209.59 690.804 L1210.15 690.804 L1210.71 690.804 L1211.27 690.804 L1211.83 690.804 L1212.39 690.804 L1212.95 690.804 L1213.51 690.804 L1214.07 690.804 L1214.62 690.804 L1215.18 690.804 L1215.74 690.804 L1216.3 690.804 L1216.86 690.804 L1217.42 690.804 L1217.98 690.804 L1218.54 690.804 L1219.1 690.804 L1219.66 690.804 L1220.22 690.804 L1220.78 690.804 L1221.34 690.804 L1221.89 690.804 L1222.45 690.804 L1223.01 690.804 L1223.57 690.804 L1224.13 690.804 L1224.69 690.804 L1225.25 690.804 L1225.81 690.804 L1226.37 690.804 L1226.93 690.804 L1227.49 690.804 L1228.05 690.804 L1228.61 690.804 L1229.17 690.804 L1229.72 690.804 L1230.28 690.804 L1230.84 690.804 L1231.4 690.804 L1231.96 690.804 L1232.52 690.804 L1233.08 690.804 L1233.64 690.804 L1234.2 690.804 L1234.76 690.804 L1235.32 690.804 L1235.88 690.804 L1236.44 690.804 L1236.99 690.804 L1237.55 690.804 L1238.11 690.804 L1238.67 690.804 L1239.23 690.804 L1239.79 690.804 L1240.35 690.804 L1240.91 690.804 L1241.47 690.804 L1242.03 690.804 L1242.59 690.804 L1243.15 690.804 L1243.71 690.804 L1244.26 690.804 L1244.82 690.804 L1245.38 690.804 L1245.94 690.804 L1246.5 690.804 L1247.06 690.804 L1247.62 690.804 L1248.18 690.804 L1248.74 690.804 L1249.3 690.804 L1249.86 690.804 L1250.42 690.804 L1250.98 690.804 L1251.54 690.804 L1252.09 690.804 L1252.65 690.804 L1253.21 690.804 L1253.77 690.804 L1254.33 690.804 L1254.89 690.804 L1255.45 690.804 L1256.01 690.804 L1256.57 690.804 L1257.13 690.804 L1257.69 690.804 L1258.25 690.804 L1258.81 690.804 L1259.36 690.804 L1259.92 690.804 L1260.48 690.804 L1261.04 690.804 L1261.6 690.804 L1262.16 690.804 L1262.72 690.804 L1263.28 690.804 L1263.84 690.804 L1264.4 690.804 L1264.96 690.804 L1265.52 690.804 L1266.08 690.804 L1266.63 690.804 L1267.19 690.804 L1267.75 690.804 L1268.31 690.804 L1268.87 690.804 L1269.43 690.804 L1269.99 690.804 L1270.55 690.804 L1271.11 690.804 L1271.67 690.804 L1272.23 690.804 L1272.79 690.804 L1273.35 690.804 L1273.91 690.804 L1274.46 690.804 L1275.02 690.804 L1275.58 690.804 L1276.14 690.804 L1276.7 690.804 L1277.26 690.804 L1277.82 690.804 L1278.38 690.804 L1278.94 690.804 L1279.5 690.804 L1280.06 690.804 L1280.62 690.804 L1281.18 690.804 L1281.73 690.804 L1282.29 690.804 L1282.85 690.804 L1283.41 690.804 L1283.97 690.804 L1284.53 690.804 L1285.09 690.804 L1285.65 690.804 L1286.21 690.804 L1286.77 690.804 L1287.33 690.804 L1287.89 690.804 L1288.45 690.804 L1289 690.804 L1289.56 690.804 L1290.12 690.804 L1290.68 690.804 L1291.24 690.804 L1291.8 690.804 L1292.36 690.804 L1292.92 690.804 L1293.48 690.804 L1294.04 690.804 L1294.6 690.804 L1295.16 690.804 L1295.72 690.804 L1296.28 690.804 L1296.83 690.804 L1297.39 690.804 L1297.95 690.804 L1298.51 690.804 L1299.07 690.804 L1299.63 690.804 L1300.19 690.804 L1300.75 690.804 L1301.31 690.804 L1301.87 690.804 L1302.43 690.804 L1302.99 690.804 L1303.55 690.804 L1304.1 690.804 L1304.66 690.804 L1305.22 690.804 L1305.78 690.804 L1306.34 690.804 L1306.9 690.804 L1307.46 690.804 L1308.02 690.804 L1308.58 690.804 L1309.14 690.804 L1309.7 690.804 L1310.26 690.804 L1310.82 690.804 L1311.38 690.804 L1311.93 690.804 L1312.49 690.804 L1313.05 690.804 L1313.61 690.804 L1314.17 690.804 L1314.73 690.804 L1315.29 690.804 L1315.85 690.804 L1316.41 690.804 L1316.97 690.804 L1317.53 690.804 L1318.09 690.804 L1318.65 690.804 L1319.2 690.804 L1319.76 690.804 L1320.32 690.804 L1320.88 690.804 L1321.44 690.804 L1322 690.804 L1322.56 690.804 L1323.12 690.804 L1323.68 690.804 L1324.24 690.804 L1324.8 690.804 L1325.36 690.804 L1325.92 690.804 L1326.47 690.804 L1327.03 690.804 L1327.59 690.804 L1328.15 690.804 L1328.71 690.804 L1329.27 690.804 L1329.83 690.804 L1330.39 690.804 L1330.95 690.804 L1331.51 690.804 L1332.07 690.804 L1332.63 690.804 L1333.19 690.804 L1333.75 690.804 L1334.3 690.804 L1334.86 690.804 L1335.42 690.804 L1335.98 690.804 L1336.54 690.804 L1337.1 690.804 L1337.66 690.804 L1338.22 690.804 L1338.78 690.804 L1339.34 690.804 L1339.9 690.804 L1340.46 690.804 L1341.02 690.804 L1341.57 690.804 L1342.13 690.804 L1342.69 690.804 L1343.25 690.804 L1343.81 690.804 L1344.37 690.804 L1344.93 690.804 L1345.49 690.804 L1346.05 690.804 L1346.61 690.804 L1347.17 690.804 L1347.73 690.804 L1348.29 690.804 L1348.84 690.804 L1349.4 690.804 L1349.96 690.804 L1350.52 690.804 L1351.08 690.804 L1351.64 690.804 L1352.2 690.804 L1352.76 690.804 L1353.32 690.804 L1353.88 690.804 L1354.44 690.804 L1355 690.804 L1355.56 690.804 L1356.12 690.804 L1356.67 690.804 L1357.23 690.804 L1357.79 690.804 L1358.35 690.804 L1358.91 690.804 L1359.47 690.804 L1360.03 690.804 L1360.59 690.804 L1361.15 690.804 L1361.71 690.804 L1362.27 690.804 L1362.83 690.804 L1363.39 690.804 L1363.94 690.804 L1364.5 690.804 L1365.06 690.804 L1365.62 690.804 L1366.18 690.804 L1366.74 690.804 L1367.3 690.804 L1367.86 690.804 L1368.42 690.804 L1368.98 690.804 L1369.54 690.804 L1370.1 690.804 L1370.66 690.804 L1371.21 690.804 L1371.77 690.804 L1372.33 690.804 L1372.89 690.804 L1373.45 690.804 L1374.01 690.804 L1374.57 690.804 L1375.13 690.804 L1375.69 690.804 L1376.25 690.804 L1376.81 690.804 L1377.37 690.804 L1377.93 690.804 L1378.49 690.804 L1379.04 690.804 L1379.6 690.804 L1380.16 690.804 L1380.72 690.804 L1381.28 690.804 L1381.84 690.804 L1382.4 690.804 L1382.96 690.804 L1383.52 690.804 L1384.08 690.804 L1384.64 690.804 L1385.2 690.804 L1385.76 690.804 L1386.31 690.804 L1386.87 690.804 L1387.43 690.804 L1387.99 690.804 L1388.55 690.804 L1389.11 690.804 L1389.67 690.804 L1390.23 690.804 L1390.79 690.804 L1391.35 690.804 L1391.91 690.804 L1392.47 690.804 L1393.03 690.804 L1393.58 690.804 L1394.14 690.804 L1394.7 690.804 L1395.26 690.804 L1395.82 690.804 L1396.38 690.804 L1396.94 690.804 L1397.5 690.804 L1398.06 690.804 L1398.62 690.804 L1399.18 690.804 L1399.74 690.804 L1400.3 690.804 L1400.86 690.804 L1401.41 690.804 L1401.97 690.804 L1402.53 690.804 L1403.09 690.804 L1403.65 690.804 L1404.21 690.804 L1404.77 690.804 L1405.33 690.804 L1405.89 690.804 L1406.45 690.804 L1407.01 690.804 L1407.57 690.804 L1408.13 690.804 L1408.68 690.804 L1409.24 690.804 L1409.8 690.804 L1410.36 690.804 L1410.92 690.804 L1411.48 690.804 L1412.04 690.804 L1412.6 690.804 L1413.16 690.804 L1413.72 690.804 L1414.28 690.804 L1414.84 690.804 L1415.4 690.804 L1415.95 690.804 L1416.51 690.804 L1417.07 690.804 L1417.63 690.804 L1418.19 690.804 L1418.75 690.804 L1419.31 690.804 L1419.87 690.804 L1420.43 690.804 L1420.99 690.804 L1421.55 690.804 L1422.11 690.804 L1422.67 690.804 L1423.23 690.804 L1423.78 690.804 L1424.34 690.804 L1424.9 690.804 L1425.46 690.804 L1426.02 690.804 L1426.58 690.804 L1427.14 690.804 L1427.7 690.804 L1428.26 690.804 L1428.82 690.804 L1429.38 690.804 L1429.94 690.804 L1430.5 690.804 L1431.05 690.804 L1431.61 690.804 L1432.17 690.804 L1432.73 690.804 L1433.29 690.804 L1433.85 690.804 L1434.41 690.804 L1434.97 690.804 L1435.53 690.804 L1436.09 690.804 L1436.65 690.804 L1437.21 690.804 L1437.77 690.804 L1438.33 690.804 L1438.88 690.804 L1439.44 690.804 L1440 690.804 L1440.56 690.804 L1441.12 690.804 L1441.68 690.804 L1442.24 690.804 L1442.8 690.804 L1443.36 690.804 L1443.92 690.804 L1444.48 690.804 L1445.04 690.804 L1445.6 690.804 L1446.15 690.804 L1446.71 690.804 L1447.27 690.804 L1447.83 690.804 L1448.39 690.804 L1448.95 690.804 L1449.51 690.804 L1450.07 690.804 L1450.63 690.804 L1451.19 690.804 L1451.75 690.804 L1452.31 690.804 L1452.87 690.804 L1453.42 690.804 L1453.98 690.804 L1454.54 690.804 L1455.1 690.804 L1455.66 690.804 L1456.22 690.804 L1456.78 690.804 L1457.34 690.804 L1457.9 690.804 L1458.46 690.804 L1459.02 690.804 L1459.58 690.804 L1460.14 690.804 L1460.7 690.804 L1461.25 690.804 L1461.81 690.804 L1462.37 690.804 L1462.93 690.804 L1463.49 690.804 L1464.05 690.804 L1464.61 690.804 L1465.17 690.804 L1465.73 690.804 L1466.29 690.804 L1466.85 690.804 L1467.41 690.804 L1467.97 690.804 L1468.52 690.804 L1469.08 690.804 L1469.64 690.804 L1470.2 690.804 L1470.76 690.804 L1471.32 690.804 L1471.88 690.804 L1472.44 690.804 L1473 690.804 L1473.56 690.804 L1474.12 690.804 L1474.68 690.804 L1475.24 690.804 L1475.79 690.804 L1476.35 690.804 L1476.91 690.804 L1477.47 690.804 L1478.03 690.804 L1478.59 690.804 L1479.15 690.804 L1479.71 690.804 L1480.27 690.804 L1480.83 690.804 L1481.39 690.804 L1481.95 690.804 L1482.51 690.804 L1483.07 690.804 L1483.62 690.804 L1484.18 690.804 L1484.74 690.804 L1485.3 690.804 L1485.86 690.804 L1486.42 690.804 L1486.98 690.804 L1487.54 690.804 L1488.1 690.804 L1488.66 690.804 L1489.22 690.804 L1489.78 690.804 L1490.34 690.804 L1490.89 690.804 L1491.45 690.804 L1492.01 690.804 L1492.57 690.804 L1493.13 690.804 L1493.69 690.804 L1494.25 690.804 L1494.81 690.804 L1495.37 690.804 L1495.93 690.804 L1496.49 690.804 L1497.05 690.804 L1497.61 690.804 L1498.16 690.804 L1498.72 690.804 L1499.28 690.804 L1499.84 690.804 L1500.4 690.804 L1500.96 690.804 L1501.52 690.804 L1502.08 690.804 L1502.64 690.804 L1503.2 690.804 L1503.76 690.804 L1504.32 690.804 L1504.88 690.804 L1505.44 690.804 L1505.99 690.804 L1506.55 690.804 L1507.11 690.804 L1507.67 690.804 L1508.23 690.804 L1508.79 690.804 L1509.35 690.804 L1509.91 690.804 L1510.47 690.804 L1511.03 690.804 L1511.59 690.804 L1512.15 690.804 L1512.71 690.804 L1513.26 690.804 L1513.82 690.804 L1514.38 690.804 L1514.94 690.804 L1515.5 690.804 L1516.06 690.804 L1516.62 690.804 L1517.18 690.804 L1517.74 690.804 L1518.3 690.804 L1518.86 690.804 L1519.42 690.804 L1519.98 690.804 L1520.53 690.804 L1521.09 690.804 L1521.65 690.804 L1522.21 690.804 L1522.77 690.804 L1523.33 690.804 L1523.89 690.804 L1524.45 690.804 L1525.01 690.804 L1525.57 690.804 L1526.13 690.804 L1526.69 690.804 L1527.25 690.804 L1527.81 690.804 L1528.36 690.804 L1528.92 690.804 L1529.48 690.804 L1530.04 690.804 L1530.6 690.804 L1531.16 690.804 L1531.72 690.804 L1532.28 690.804 L1532.84 690.804 L1533.4 690.804 L1533.96 690.804 L1534.52 690.804 L1535.08 690.804 L1535.63 690.804 L1536.19 690.804 L1536.75 690.804 L1537.31 690.804 L1537.87 690.804 L1538.43 690.804 L1538.99 690.804 L1539.55 690.804 L1540.11 690.804 L1540.67 690.804 L1541.23 690.804 L1541.79 690.804 L1542.35 690.804 L1542.9 690.804 L1543.46 690.804 L1544.02 690.804 L1544.58 690.804 L1545.14 690.804 L1545.7 690.804 L1546.26 690.804 L1546.82 690.804 L1547.38 690.804 L1547.94 690.804 L1548.5 690.804 L1549.06 690.804 L1549.62 690.804 L1550.18 690.804 L1550.73 690.804 L1551.29 690.804 L1551.85 690.804 L1552.41 690.804 L1552.97 690.804 L1553.53 690.804 L1554.09 690.804 L1554.65 690.804 L1555.21 690.804 L1555.77 690.804 L1556.33 690.804 L1556.89 690.804 L1557.45 690.804 L1558 690.804 L1558.56 690.804 L1559.12 690.804 L1559.68 690.804 L1560.24 690.804 L1560.8 690.804 L1561.36 690.804 L1561.92 690.804 L1562.48 690.804 L1563.04 690.804 L1563.6 690.804 L1564.16 690.804 L1564.72 690.804 L1565.28 690.804 L1565.83 690.804 L1566.39 690.804 L1566.95 690.804 L1567.51 690.804 L1568.07 690.804 L1568.63 690.804 L1569.19 690.804 L1569.75 690.804 L1570.31 690.804 L1570.87 690.804 L1571.43 690.804 L1571.99 690.804 L1572.55 690.804 L1573.1 690.804 L1573.66 690.804 L1574.22 690.804 L1574.78 690.804 L1575.34 690.804 L1575.9 690.804 L1576.46 690.804 L1577.02 690.804 L1577.58 690.804 L1578.14 690.804 L1578.7 690.804 L1579.26 690.804 L1579.82 690.804 L1580.37 690.804 L1580.93 690.804 L1581.49 690.804 L1582.05 690.804 L1582.61 690.804 L1583.17 690.804 L1583.73 690.804 L1584.29 690.804 L1584.85 690.804 L1585.41 690.804 L1585.97 690.804 L1586.53 690.804 L1587.09 690.804 L1587.65 690.804 L1588.2 690.804 L1588.76 690.804 L1589.32 690.804 L1589.88 690.804 L1590.44 690.804 L1591 690.804 L1591.56 690.804 L1592.12 690.804 L1592.68 690.804 L1593.24 690.804 L1593.8 690.804 L1594.36 690.804 L1594.92 690.804 L1595.47 690.804 L1596.03 690.804 L1596.59 690.804 L1597.15 690.804 L1597.71 690.804 L1598.27 690.804 L1598.83 690.804 L1599.39 690.804 L1599.95 690.804 L1600.51 690.804 L1601.07 690.804 L1601.63 690.804 L1602.19 690.804 L1602.74 690.804 L1603.3 690.804 L1603.86 690.804 L1604.42 690.804 L1604.98 690.804 L1605.54 690.804 L1606.1 690.804 L1606.66 690.804 L1607.22 690.804 L1607.78 690.804 L1608.34 690.804 L1608.9 690.804 L1609.46 690.804 L1610.02 690.804 L1610.57 690.804 L1611.13 690.804 L1611.69 690.804 L1612.25 690.804 L1612.81 690.804 L1613.37 690.804 L1613.93 690.804 L1614.49 690.804 L1615.05 690.804 L1615.61 690.804 L1616.17 690.804 L1616.73 690.804 L1617.29 690.804 L1617.84 690.804 L1618.4 690.804 L1618.96 690.804 L1619.52 690.804 L1620.08 690.804 L1620.64 690.804 L1621.2 690.804 L1621.76 690.804 L1622.32 690.804 L1622.88 690.804 L1623.44 690.804 L1624 690.804 L1624.56 690.804 L1625.11 690.804 L1625.67 690.804 L1626.23 690.804 L1626.79 690.804 L1627.35 690.804 L1627.91 690.804 L1628.47 690.804 L1629.03 690.804 L1629.59 690.804 L1630.15 690.804 L1630.71 690.804 L1631.27 690.804 L1631.83 690.804 L1632.39 690.804 L1632.94 690.804 L1633.5 690.804 L1634.06 690.804 L1634.62 690.804 L1635.18 690.804 L1635.74 690.804 L1636.3 690.804 L1636.86 690.804 L1637.42 690.804 L1637.98 690.804 L1638.54 690.804 L1639.1 690.804 L1639.66 690.804 L1640.21 690.804 L1640.77 690.804 L1641.33 690.804 L1641.89 690.804 L1642.45 690.804 L1643.01 690.804 L1643.57 690.804 L1644.13 690.804 L1644.69 690.804 L1645.25 690.804 L1645.81 690.804 L1646.37 690.804 L1646.93 690.804 L1647.48 690.804 L1648.04 690.804 L1648.6 690.804 L1649.16 690.804 L1649.72 690.804 L1650.28 690.804 L1650.84 690.804 L1651.4 690.804 L1651.96 690.804 L1652.52 690.804 L1653.08 690.804 L1653.64 690.804 L1654.2 690.804 L1654.76 690.804 L1655.31 690.804 L1655.87 690.804 L1656.43 690.804 L1656.99 690.804 L1657.55 690.804 L1658.11 690.804 L1658.67 690.804 L1659.23 690.804 L1659.79 690.804 L1660.35 690.804 L1660.91 690.804 L1661.47 690.804 L1662.03 690.804 L1662.58 690.804 L1663.14 690.804 L1663.7 690.804 L1664.26 690.804 L1664.82 690.804 L1665.38 690.804 L1665.94 690.804 L1666.5 690.804 L1667.06 690.804 L1667.62 690.804 L1668.18 690.804 L1668.74 690.804 L1669.3 690.804 L1669.85 690.804 L1670.41 690.804 L1670.97 690.804 L1671.53 690.804 L1672.09 690.804 L1672.65 690.804 L1673.21 690.804 L1673.77 690.804 L1674.33 690.804 L1674.89 690.804 L1675.45 690.804 L1676.01 690.804 L1676.57 690.804 L1677.13 690.804 L1677.68 690.804 L1678.24 690.804 L1678.8 690.804 L1679.36 690.804 L1679.92 690.804 L1680.48 690.804 L1681.04 690.804 L1681.6 690.804 L1682.16 690.804 L1682.72 690.804 L1683.28 690.804 L1683.84 690.804 L1684.4 690.804 L1684.95 690.804 L1685.51 690.804 L1686.07 690.804 L1686.63 690.804 L1687.19 690.804 L1687.75 690.804 L1688.31 690.804 L1688.87 690.804 L1689.43 690.804 L1689.99 690.804 L1690.55 690.804 L1691.11 690.804 L1691.67 690.804 L1692.23 690.804 L1692.78 690.804 L1693.34 690.804 L1693.9 690.804 L1694.46 690.804 L1695.02 690.804 L1695.58 690.804 L1696.14 690.804 L1696.7 690.804 L1697.26 690.804 L1697.82 690.804 L1698.38 690.804 L1698.94 690.804 L1699.5 690.804 L1700.05 690.804 L1700.61 690.804 L1701.17 690.804 L1701.73 690.804 L1702.29 690.804 L1702.85 690.804 L1703.41 690.804 L1703.97 690.804 L1704.53 690.804 L1705.09 690.804 L1705.65 690.804 L1706.21 690.804 L1706.77 690.804 L1707.32 690.804 L1707.88 690.804 L1708.44 690.804 L1709 690.804 L1709.56 690.804 L1710.12 690.804 L1710.68 690.804 L1711.24 690.804 L1711.8 690.804 L1712.36 690.804 L1712.92 690.804 L1713.48 690.804 L1714.04 690.804 L1714.6 690.804 L1715.15 690.804 L1715.71 690.804 L1716.27 690.804 L1716.83 690.804 L1717.39 690.804 L1717.95 690.804 L1718.51 690.804 L1719.07 690.804 L1719.63 690.804 L1720.19 690.804 L1720.75 690.804 L1721.31 690.804 L1721.87 690.804 L1722.42 690.804 L1722.98 690.804 L1723.54 690.804 L1724.1 690.804 L1724.66 690.804 L1725.22 690.804 L1725.78 690.804 L1726.34 690.804 L1726.9 690.804 L1727.46 690.804 L1728.02 690.804 L1728.58 690.804 L1729.14 690.804 L1729.69 690.804 L1730.25 690.804 L1730.81 690.804 L1731.37 690.804 L1731.93 690.804 L1732.49 690.804 L1733.05 690.804 L1733.61 690.804 L1734.17 690.804 L1734.73 690.804 L1735.29 690.804 L1735.85 690.804 L1736.41 690.804 L1736.97 690.804 L1737.52 690.804 L1738.08 690.804 L1738.64 690.804 L1739.2 690.804 L1739.76 690.804 L1740.32 690.804 L1740.88 690.804 L1741.44 690.804 L1742 690.804 L1742.56 690.804 L1743.12 690.804 L1743.68 690.804 L1744.24 690.804 L1744.79 690.804 L1745.35 690.804 L1745.91 690.804 L1746.47 690.804 L1747.03 690.804 L1747.59 690.804 L1748.15 690.804 L1748.71 690.804 L1749.27 690.804 L1749.83 690.804 L1750.39 690.804 L1750.95 690.804 L1751.51 690.804 L1752.06 690.804 L1752.62 690.804 L1753.18 690.804 L1753.74 690.804 L1754.3 690.804 L1754.86 690.804 L1755.42 690.804 L1755.98 690.804 L1756.54 690.804 L1757.1 690.804 L1757.66 690.804 L1758.22 690.804 L1758.78 690.804 L1759.34 690.804 L1759.89 690.804 L1760.45 690.804 L1761.01 690.804 L1761.57 690.804 L1762.13 690.804 L1762.69 690.804 L1763.25 690.804 L1763.81 690.804 L1764.37 690.804 L1764.93 690.804 L1765.49 690.804 L1766.05 690.804 L1766.61 690.804 L1767.16 690.804 L1767.72 690.804 L1768.28 690.804 L1768.84 690.804 L1769.4 690.804 L1769.96 690.804 L1770.52 690.804 L1771.08 690.804 L1771.64 690.804 L1772.2 690.804 L1772.76 690.804 L1773.32 690.804 L1773.88 690.804 L1774.43 690.804 L1774.99 690.804 L1775.55 690.804 L1776.11 690.804 L1776.67 690.804 L1777.23 690.804 L1777.79 690.804 L1778.35 690.804 L1778.91 690.804 L1779.47 690.804 L1780.03 690.804 L1780.59 690.804 L1781.15 690.804 L1781.71 690.804 L1782.26 690.804 L1782.82 690.804 L1783.38 690.804 L1783.94 690.804 L1784.5 690.804 L1785.06 690.804 L1785.62 690.804 L1786.18 690.804 L1786.74 690.804 L1787.3 690.804 L1787.86 690.804 L1788.42 690.804 L1788.98 690.804 L1789.53 690.804 L1790.09 690.804 L1790.65 690.804 L1791.21 690.804 L1791.77 690.804 L1792.33 690.804 L1792.89 690.804 L1793.45 690.804 L1794.01 690.804 L1794.57 690.804 L1795.13 690.804 L1795.69 690.804 L1796.25 690.804 L1796.8 690.804 L1797.36 690.804 L1797.92 690.804 L1798.48 690.804 L1799.04 690.804 L1799.6 690.804 L1800.16 690.804 L1800.72 690.804 L1801.28 690.804 L1801.84 690.804 L1802.4 690.804 L1802.96 690.804 L1803.52 690.804 L1804.08 690.804 L1804.63 690.804 L1805.19 690.804 L1805.75 690.804 L1806.31 690.804 L1806.87 690.804 L1807.43 690.804 L1807.99 690.804 L1808.55 690.804 L1809.11 690.804 L1809.67 690.804 L1810.23 690.804 L1810.79 690.804 L1811.35 690.804 L1811.9 690.804 L1812.46 690.804 L1813.02 690.804 L1813.58 690.804 L1814.14 690.804 L1814.7 690.804 L1815.26 690.804 L1815.82 690.804 L1816.38 690.804 L1816.94 690.804 L1817.5 690.804 L1818.06 690.804 L1818.62 690.804 L1819.18 690.804 L1819.73 690.804 L1820.29 690.804 L1820.85 690.804 L1821.41 690.804 L1821.97 690.804 L1822.53 690.804 L1823.09 690.804 L1823.65 690.804 L1824.21 690.804 L1824.77 690.804 L1825.33 690.804 L1825.89 690.804 L1826.45 690.804 L1827 690.804 L1827.56 690.804 L1828.12 690.804 L1828.68 690.804 L1829.24 690.804 L1829.8 690.804 L1830.36 690.804 L1830.92 690.804 L1831.48 690.804 L1832.04 690.804 L1832.6 690.804 L1833.16 690.804 L1833.72 690.804 L1834.27 690.804 L1834.83 690.804 L1835.39 690.804 L1835.95 690.804 L1836.51 690.804 L1837.07 690.804 L1837.63 690.804 L1838.19 690.804 L1838.19 682.868 L1837.63 682.868 L1837.07 682.868 L1836.51 682.868 L1835.95 682.868 L1835.39 682.868 L1834.83 682.868 L1834.27 682.868 L1833.72 682.868 L1833.16 682.868 L1832.6 682.868 L1832.04 682.868 L1831.48 682.868 L1830.92 682.868 L1830.36 682.868 L1829.8 682.868 L1829.24 682.868 L1828.68 682.868 L1828.12 682.868 L1827.56 682.868 L1827 682.868 L1826.45 682.868 L1825.89 682.868 L1825.33 682.868 L1824.77 682.868 L1824.21 682.868 L1823.65 682.868 L1823.09 682.868 L1822.53 682.868 L1821.97 682.868 L1821.41 682.868 L1820.85 682.868 L1820.29 682.868 L1819.73 682.868 L1819.18 682.868 L1818.62 682.868 L1818.06 682.868 L1817.5 682.868 L1816.94 682.868 L1816.38 682.868 L1815.82 682.868 L1815.26 682.868 L1814.7 682.868 L1814.14 682.868 L1813.58 682.868 L1813.02 682.868 L1812.46 682.868 L1811.9 682.868 L1811.35 682.868 L1810.79 682.868 L1810.23 682.868 L1809.67 682.868 L1809.11 682.868 L1808.55 682.868 L1807.99 682.868 L1807.43 682.868 L1806.87 682.868 L1806.31 682.868 L1805.75 682.868 L1805.19 682.868 L1804.63 682.868 L1804.08 682.868 L1803.52 682.868 L1802.96 682.868 L1802.4 682.868 L1801.84 682.868 L1801.28 682.868 L1800.72 682.868 L1800.16 682.868 L1799.6 682.868 L1799.04 682.868 L1798.48 682.868 L1797.92 682.868 L1797.36 682.868 L1796.8 682.868 L1796.25 682.868 L1795.69 682.868 L1795.13 682.868 L1794.57 682.868 L1794.01 682.868 L1793.45 682.868 L1792.89 682.868 L1792.33 682.868 L1791.77 682.868 L1791.21 682.868 L1790.65 682.868 L1790.09 682.868 L1789.53 682.868 L1788.98 682.868 L1788.42 682.868 L1787.86 682.868 L1787.3 682.868 L1786.74 682.868 L1786.18 682.868 L1785.62 682.868 L1785.06 682.868 L1784.5 682.868 L1783.94 682.868 L1783.38 682.868 L1782.82 682.868 L1782.26 682.868 L1781.71 682.868 L1781.15 682.868 L1780.59 682.868 L1780.03 682.868 L1779.47 682.868 L1778.91 682.868 L1778.35 682.868 L1777.79 682.868 L1777.23 682.868 L1776.67 682.868 L1776.11 682.868 L1775.55 682.868 L1774.99 682.868 L1774.43 682.868 L1773.88 682.868 L1773.32 682.868 L1772.76 682.868 L1772.2 682.868 L1771.64 682.868 L1771.08 682.868 L1770.52 682.868 L1769.96 682.868 L1769.4 682.868 L1768.84 682.868 L1768.28 682.868 L1767.72 682.868 L1767.16 682.868 L1766.61 682.868 L1766.05 682.868 L1765.49 682.868 L1764.93 682.868 L1764.37 682.868 L1763.81 682.868 L1763.25 682.868 L1762.69 682.868 L1762.13 682.868 L1761.57 682.868 L1761.01 682.868 L1760.45 682.868 L1759.89 682.868 L1759.34 682.868 L1758.78 682.868 L1758.22 682.868 L1757.66 682.868 L1757.1 682.868 L1756.54 682.868 L1755.98 682.868 L1755.42 682.868 L1754.86 682.868 L1754.3 682.868 L1753.74 682.868 L1753.18 682.868 L1752.62 682.868 L1752.06 682.868 L1751.51 682.868 L1750.95 682.868 L1750.39 682.868 L1749.83 682.868 L1749.27 682.868 L1748.71 682.868 L1748.15 682.868 L1747.59 682.868 L1747.03 682.868 L1746.47 682.868 L1745.91 682.868 L1745.35 682.868 L1744.79 682.868 L1744.24 682.868 L1743.68 682.868 L1743.12 682.868 L1742.56 682.868 L1742 682.868 L1741.44 682.868 L1740.88 682.868 L1740.32 682.868 L1739.76 682.868 L1739.2 682.868 L1738.64 682.868 L1738.08 682.868 L1737.52 682.868 L1736.97 682.868 L1736.41 682.868 L1735.85 682.868 L1735.29 682.868 L1734.73 682.868 L1734.17 682.868 L1733.61 682.868 L1733.05 682.868 L1732.49 682.868 L1731.93 682.868 L1731.37 682.868 L1730.81 682.868 L1730.25 682.868 L1729.69 682.868 L1729.14 682.868 L1728.58 682.868 L1728.02 682.868 L1727.46 682.868 L1726.9 682.868 L1726.34 682.868 L1725.78 682.868 L1725.22 682.868 L1724.66 682.868 L1724.1 682.868 L1723.54 682.868 L1722.98 682.868 L1722.42 682.868 L1721.87 682.868 L1721.31 682.868 L1720.75 682.868 L1720.19 682.868 L1719.63 682.868 L1719.07 682.868 L1718.51 682.868 L1717.95 682.868 L1717.39 682.868 L1716.83 682.868 L1716.27 682.868 L1715.71 682.868 L1715.15 682.868 L1714.6 682.868 L1714.04 682.868 L1713.48 682.868 L1712.92 682.868 L1712.36 682.868 L1711.8 682.868 L1711.24 682.868 L1710.68 682.868 L1710.12 682.868 L1709.56 682.868 L1709 682.868 L1708.44 682.868 L1707.88 682.868 L1707.32 682.868 L1706.77 682.868 L1706.21 682.868 L1705.65 682.868 L1705.09 682.868 L1704.53 682.868 L1703.97 682.868 L1703.41 682.868 L1702.85 682.868 L1702.29 682.868 L1701.73 682.868 L1701.17 682.868 L1700.61 682.868 L1700.05 682.868 L1699.5 682.868 L1698.94 682.868 L1698.38 682.868 L1697.82 682.868 L1697.26 682.868 L1696.7 682.868 L1696.14 682.868 L1695.58 682.868 L1695.02 682.868 L1694.46 682.868 L1693.9 682.868 L1693.34 682.868 L1692.78 682.868 L1692.23 682.868 L1691.67 682.868 L1691.11 682.868 L1690.55 682.868 L1689.99 682.868 L1689.43 682.868 L1688.87 682.868 L1688.31 682.868 L1687.75 682.868 L1687.19 682.868 L1686.63 682.868 L1686.07 682.868 L1685.51 682.868 L1684.95 682.868 L1684.4 682.868 L1683.84 682.868 L1683.28 682.868 L1682.72 682.868 L1682.16 682.868 L1681.6 682.868 L1681.04 682.868 L1680.48 682.868 L1679.92 682.868 L1679.36 682.868 L1678.8 682.868 L1678.24 682.868 L1677.68 682.868 L1677.13 682.868 L1676.57 682.868 L1676.01 682.868 L1675.45 682.868 L1674.89 682.868 L1674.33 682.868 L1673.77 682.868 L1673.21 682.868 L1672.65 682.868 L1672.09 682.868 L1671.53 682.868 L1670.97 682.868 L1670.41 682.868 L1669.85 682.868 L1669.3 682.868 L1668.74 682.868 L1668.18 682.868 L1667.62 682.868 L1667.06 682.868 L1666.5 682.868 L1665.94 682.868 L1665.38 682.868 L1664.82 682.868 L1664.26 682.868 L1663.7 682.868 L1663.14 682.868 L1662.58 682.868 L1662.03 682.868 L1661.47 682.868 L1660.91 682.868 L1660.35 682.868 L1659.79 682.868 L1659.23 682.868 L1658.67 682.868 L1658.11 682.868 L1657.55 682.868 L1656.99 682.868 L1656.43 682.868 L1655.87 682.868 L1655.31 682.868 L1654.76 682.868 L1654.2 682.868 L1653.64 682.868 L1653.08 682.868 L1652.52 682.868 L1651.96 682.868 L1651.4 682.868 L1650.84 682.868 L1650.28 682.868 L1649.72 682.868 L1649.16 682.868 L1648.6 682.868 L1648.04 682.868 L1647.48 682.868 L1646.93 682.868 L1646.37 682.868 L1645.81 682.868 L1645.25 682.868 L1644.69 682.868 L1644.13 682.868 L1643.57 682.868 L1643.01 682.868 L1642.45 682.868 L1641.89 682.868 L1641.33 682.868 L1640.77 682.868 L1640.21 682.868 L1639.66 682.868 L1639.1 682.868 L1638.54 682.868 L1637.98 682.868 L1637.42 682.868 L1636.86 682.868 L1636.3 682.868 L1635.74 682.868 L1635.18 682.868 L1634.62 682.868 L1634.06 682.868 L1633.5 682.868 L1632.94 682.868 L1632.39 682.868 L1631.83 682.868 L1631.27 682.868 L1630.71 682.868 L1630.15 682.868 L1629.59 682.868 L1629.03 682.868 L1628.47 682.868 L1627.91 682.868 L1627.35 682.868 L1626.79 682.868 L1626.23 682.868 L1625.67 682.868 L1625.11 682.868 L1624.56 682.868 L1624 682.868 L1623.44 682.868 L1622.88 682.868 L1622.32 682.868 L1621.76 682.868 L1621.2 682.868 L1620.64 682.868 L1620.08 682.868 L1619.52 682.868 L1618.96 682.868 L1618.4 682.868 L1617.84 682.868 L1617.29 682.868 L1616.73 682.868 L1616.17 682.868 L1615.61 682.868 L1615.05 682.868 L1614.49 682.868 L1613.93 682.868 L1613.37 682.868 L1612.81 682.868 L1612.25 682.868 L1611.69 682.868 L1611.13 682.868 L1610.57 682.868 L1610.02 682.868 L1609.46 682.868 L1608.9 682.868 L1608.34 682.868 L1607.78 682.868 L1607.22 682.868 L1606.66 682.868 L1606.1 682.868 L1605.54 682.868 L1604.98 682.868 L1604.42 682.868 L1603.86 682.868 L1603.3 682.868 L1602.74 682.868 L1602.19 682.868 L1601.63 682.868 L1601.07 682.868 L1600.51 682.868 L1599.95 682.868 L1599.39 682.868 L1598.83 682.868 L1598.27 682.868 L1597.71 682.868 L1597.15 682.868 L1596.59 682.868 L1596.03 682.868 L1595.47 682.868 L1594.92 682.868 L1594.36 682.868 L1593.8 682.868 L1593.24 682.868 L1592.68 682.868 L1592.12 682.868 L1591.56 682.868 L1591 682.868 L1590.44 682.868 L1589.88 682.868 L1589.32 682.868 L1588.76 682.868 L1588.2 682.868 L1587.65 682.868 L1587.09 682.868 L1586.53 682.868 L1585.97 682.868 L1585.41 682.868 L1584.85 682.868 L1584.29 682.868 L1583.73 682.868 L1583.17 682.868 L1582.61 682.868 L1582.05 682.868 L1581.49 682.868 L1580.93 682.868 L1580.37 682.868 L1579.82 682.868 L1579.26 682.868 L1578.7 682.868 L1578.14 682.868 L1577.58 682.868 L1577.02 682.868 L1576.46 682.868 L1575.9 682.868 L1575.34 682.868 L1574.78 682.868 L1574.22 682.868 L1573.66 682.868 L1573.1 682.868 L1572.55 682.868 L1571.99 682.868 L1571.43 682.868 L1570.87 682.868 L1570.31 682.868 L1569.75 682.868 L1569.19 682.868 L1568.63 682.868 L1568.07 682.868 L1567.51 682.868 L1566.95 682.868 L1566.39 682.868 L1565.83 682.868 L1565.28 682.868 L1564.72 682.868 L1564.16 682.868 L1563.6 682.868 L1563.04 682.868 L1562.48 682.868 L1561.92 682.868 L1561.36 682.868 L1560.8 682.868 L1560.24 682.868 L1559.68 682.868 L1559.12 682.868 L1558.56 682.868 L1558 682.868 L1557.45 682.868 L1556.89 682.868 L1556.33 682.868 L1555.77 682.868 L1555.21 682.868 L1554.65 682.868 L1554.09 682.868 L1553.53 682.868 L1552.97 682.868 L1552.41 682.868 L1551.85 682.868 L1551.29 682.868 L1550.73 682.868 L1550.18 682.868 L1549.62 682.868 L1549.06 682.868 L1548.5 682.868 L1547.94 682.868 L1547.38 682.868 L1546.82 682.868 L1546.26 682.868 L1545.7 682.868 L1545.14 682.868 L1544.58 682.868 L1544.02 682.868 L1543.46 682.868 L1542.9 682.868 L1542.35 682.868 L1541.79 682.868 L1541.23 682.868 L1540.67 682.868 L1540.11 682.868 L1539.55 682.868 L1538.99 682.868 L1538.43 682.868 L1537.87 682.868 L1537.31 682.868 L1536.75 682.868 L1536.19 682.868 L1535.63 682.868 L1535.08 682.868 L1534.52 682.868 L1533.96 682.868 L1533.4 682.868 L1532.84 682.868 L1532.28 682.868 L1531.72 682.868 L1531.16 682.868 L1530.6 682.868 L1530.04 682.868 L1529.48 682.868 L1528.92 682.868 L1528.36 682.868 L1527.81 682.868 L1527.25 682.868 L1526.69 682.868 L1526.13 682.868 L1525.57 682.868 L1525.01 682.868 L1524.45 682.868 L1523.89 682.868 L1523.33 682.868 L1522.77 682.868 L1522.21 682.868 L1521.65 682.868 L1521.09 682.868 L1520.53 682.868 L1519.98 682.868 L1519.42 682.868 L1518.86 682.868 L1518.3 682.868 L1517.74 682.868 L1517.18 682.868 L1516.62 682.868 L1516.06 682.868 L1515.5 682.868 L1514.94 682.868 L1514.38 682.868 L1513.82 682.868 L1513.26 682.868 L1512.71 682.868 L1512.15 682.868 L1511.59 682.868 L1511.03 682.868 L1510.47 682.868 L1509.91 682.868 L1509.35 682.868 L1508.79 682.868 L1508.23 682.868 L1507.67 682.868 L1507.11 682.868 L1506.55 682.868 L1505.99 682.868 L1505.44 682.868 L1504.88 682.868 L1504.32 682.868 L1503.76 682.868 L1503.2 682.868 L1502.64 682.868 L1502.08 682.868 L1501.52 682.868 L1500.96 682.868 L1500.4 682.868 L1499.84 682.868 L1499.28 682.868 L1498.72 682.868 L1498.16 682.868 L1497.61 682.868 L1497.05 682.868 L1496.49 682.868 L1495.93 682.868 L1495.37 682.868 L1494.81 682.868 L1494.25 682.868 L1493.69 682.868 L1493.13 682.868 L1492.57 682.868 L1492.01 682.868 L1491.45 682.868 L1490.89 682.868 L1490.34 682.868 L1489.78 682.868 L1489.22 682.868 L1488.66 682.868 L1488.1 682.868 L1487.54 682.868 L1486.98 682.868 L1486.42 682.868 L1485.86 682.868 L1485.3 682.868 L1484.74 682.868 L1484.18 682.868 L1483.62 682.868 L1483.07 682.868 L1482.51 682.868 L1481.95 682.868 L1481.39 682.868 L1480.83 682.868 L1480.27 682.868 L1479.71 682.868 L1479.15 682.868 L1478.59 682.868 L1478.03 682.868 L1477.47 682.868 L1476.91 682.868 L1476.35 682.868 L1475.79 682.868 L1475.24 682.868 L1474.68 682.868 L1474.12 682.868 L1473.56 682.868 L1473 682.868 L1472.44 682.868 L1471.88 682.868 L1471.32 682.868 L1470.76 682.868 L1470.2 682.868 L1469.64 682.868 L1469.08 682.868 L1468.52 682.868 L1467.97 682.868 L1467.41 682.868 L1466.85 682.868 L1466.29 682.868 L1465.73 682.868 L1465.17 682.868 L1464.61 682.868 L1464.05 682.868 L1463.49 682.868 L1462.93 682.868 L1462.37 682.868 L1461.81 682.868 L1461.25 682.868 L1460.7 682.868 L1460.14 682.868 L1459.58 682.868 L1459.02 682.868 L1458.46 682.868 L1457.9 682.868 L1457.34 682.868 L1456.78 682.868 L1456.22 682.868 L1455.66 682.868 L1455.1 682.868 L1454.54 682.868 L1453.98 682.868 L1453.42 682.868 L1452.87 682.868 L1452.31 682.868 L1451.75 682.868 L1451.19 682.868 L1450.63 682.868 L1450.07 682.868 L1449.51 682.868 L1448.95 682.868 L1448.39 682.868 L1447.83 682.868 L1447.27 682.868 L1446.71 682.868 L1446.15 682.868 L1445.6 682.868 L1445.04 682.868 L1444.48 682.868 L1443.92 682.868 L1443.36 682.868 L1442.8 682.868 L1442.24 682.868 L1441.68 682.868 L1441.12 682.868 L1440.56 682.868 L1440 682.868 L1439.44 682.868 L1438.88 682.868 L1438.33 682.868 L1437.77 682.868 L1437.21 682.868 L1436.65 682.868 L1436.09 682.868 L1435.53 682.868 L1434.97 682.868 L1434.41 682.868 L1433.85 682.868 L1433.29 682.868 L1432.73 682.868 L1432.17 682.868 L1431.61 682.868 L1431.05 682.868 L1430.5 682.868 L1429.94 682.868 L1429.38 682.868 L1428.82 682.868 L1428.26 682.868 L1427.7 682.868 L1427.14 682.868 L1426.58 682.868 L1426.02 682.868 L1425.46 682.868 L1424.9 682.868 L1424.34 682.868 L1423.78 682.868 L1423.23 682.868 L1422.67 682.868 L1422.11 682.868 L1421.55 682.868 L1420.99 682.868 L1420.43 682.868 L1419.87 682.868 L1419.31 682.868 L1418.75 682.868 L1418.19 682.868 L1417.63 682.868 L1417.07 682.868 L1416.51 682.868 L1415.95 682.868 L1415.4 682.868 L1414.84 682.868 L1414.28 682.868 L1413.72 682.868 L1413.16 682.868 L1412.6 682.868 L1412.04 682.868 L1411.48 682.868 L1410.92 682.868 L1410.36 682.868 L1409.8 682.868 L1409.24 682.868 L1408.68 682.868 L1408.13 682.868 L1407.57 682.868 L1407.01 682.868 L1406.45 682.868 L1405.89 682.868 L1405.33 682.868 L1404.77 682.868 L1404.21 682.868 L1403.65 682.868 L1403.09 682.868 L1402.53 682.868 L1401.97 682.868 L1401.41 682.868 L1400.86 682.868 L1400.3 682.868 L1399.74 682.868 L1399.18 682.868 L1398.62 682.868 L1398.06 682.868 L1397.5 682.868 L1396.94 682.868 L1396.38 682.868 L1395.82 682.868 L1395.26 682.868 L1394.7 682.868 L1394.14 682.868 L1393.58 682.868 L1393.03 682.868 L1392.47 682.868 L1391.91 682.868 L1391.35 682.868 L1390.79 682.868 L1390.23 682.868 L1389.67 682.868 L1389.11 682.868 L1388.55 682.868 L1387.99 682.868 L1387.43 682.868 L1386.87 682.868 L1386.31 682.868 L1385.76 682.868 L1385.2 682.868 L1384.64 682.868 L1384.08 682.868 L1383.52 682.868 L1382.96 682.868 L1382.4 682.868 L1381.84 682.868 L1381.28 682.868 L1380.72 682.868 L1380.16 682.868 L1379.6 682.868 L1379.04 682.868 L1378.49 682.868 L1377.93 682.868 L1377.37 682.868 L1376.81 682.868 L1376.25 682.868 L1375.69 682.868 L1375.13 682.868 L1374.57 682.868 L1374.01 682.868 L1373.45 682.868 L1372.89 682.868 L1372.33 682.868 L1371.77 682.868 L1371.21 682.868 L1370.66 682.868 L1370.1 682.868 L1369.54 682.868 L1368.98 682.868 L1368.42 682.868 L1367.86 682.868 L1367.3 682.868 L1366.74 682.868 L1366.18 682.868 L1365.62 682.868 L1365.06 682.868 L1364.5 682.868 L1363.94 682.868 L1363.39 682.868 L1362.83 682.868 L1362.27 682.868 L1361.71 682.868 L1361.15 682.868 L1360.59 682.868 L1360.03 682.868 L1359.47 682.868 L1358.91 682.868 L1358.35 682.868 L1357.79 682.868 L1357.23 682.868 L1356.67 682.868 L1356.12 682.868 L1355.56 682.868 L1355 682.868 L1354.44 682.868 L1353.88 682.868 L1353.32 682.868 L1352.76 682.868 L1352.2 682.868 L1351.64 682.868 L1351.08 682.868 L1350.52 682.868 L1349.96 682.868 L1349.4 682.868 L1348.84 682.868 L1348.29 682.868 L1347.73 682.868 L1347.17 682.868 L1346.61 682.868 L1346.05 682.868 L1345.49 682.868 L1344.93 682.868 L1344.37 682.868 L1343.81 682.868 L1343.25 682.868 L1342.69 682.868 L1342.13 682.868 L1341.57 682.868 L1341.02 682.868 L1340.46 682.868 L1339.9 682.868 L1339.34 682.868 L1338.78 682.868 L1338.22 682.868 L1337.66 682.868 L1337.1 682.868 L1336.54 682.868 L1335.98 682.868 L1335.42 682.868 L1334.86 682.868 L1334.3 682.868 L1333.75 682.868 L1333.19 682.868 L1332.63 682.868 L1332.07 682.868 L1331.51 682.868 L1330.95 682.868 L1330.39 682.868 L1329.83 682.868 L1329.27 682.868 L1328.71 682.868 L1328.15 682.868 L1327.59 682.868 L1327.03 682.868 L1326.47 682.868 L1325.92 682.868 L1325.36 682.868 L1324.8 682.868 L1324.24 682.868 L1323.68 682.868 L1323.12 682.868 L1322.56 682.868 L1322 682.868 L1321.44 682.868 L1320.88 682.868 L1320.32 682.868 L1319.76 682.868 L1319.2 682.868 L1318.65 682.868 L1318.09 682.868 L1317.53 682.868 L1316.97 682.868 L1316.41 682.868 L1315.85 682.868 L1315.29 682.868 L1314.73 682.868 L1314.17 682.868 L1313.61 682.868 L1313.05 682.868 L1312.49 682.868 L1311.93 682.868 L1311.38 682.868 L1310.82 682.868 L1310.26 682.868 L1309.7 682.868 L1309.14 682.868 L1308.58 682.868 L1308.02 682.868 L1307.46 682.868 L1306.9 682.868 L1306.34 682.868 L1305.78 682.868 L1305.22 682.868 L1304.66 682.868 L1304.1 682.868 L1303.55 682.868 L1302.99 682.868 L1302.43 682.868 L1301.87 682.868 L1301.31 682.868 L1300.75 682.868 L1300.19 682.868 L1299.63 682.868 L1299.07 682.868 L1298.51 682.868 L1297.95 682.868 L1297.39 682.868 L1296.83 682.868 L1296.28 682.868 L1295.72 682.868 L1295.16 682.868 L1294.6 682.868 L1294.04 682.868 L1293.48 682.868 L1292.92 682.868 L1292.36 682.868 L1291.8 682.868 L1291.24 682.868 L1290.68 682.868 L1290.12 682.868 L1289.56 682.868 L1289 682.868 L1288.45 682.868 L1287.89 682.868 L1287.33 682.868 L1286.77 682.868 L1286.21 682.868 L1285.65 682.868 L1285.09 682.868 L1284.53 682.868 L1283.97 682.868 L1283.41 682.868 L1282.85 682.868 L1282.29 682.868 L1281.73 682.868 L1281.18 682.868 L1280.62 682.868 L1280.06 682.868 L1279.5 682.868 L1278.94 682.868 L1278.38 682.868 L1277.82 682.868 L1277.26 682.868 L1276.7 682.868 L1276.14 682.868 L1275.58 682.868 L1275.02 682.868 L1274.46 682.868 L1273.91 682.868 L1273.35 682.868 L1272.79 682.868 L1272.23 682.868 L1271.67 682.868 L1271.11 682.868 L1270.55 682.868 L1269.99 682.868 L1269.43 682.868 L1268.87 682.868 L1268.31 682.868 L1267.75 682.868 L1267.19 682.868 L1266.63 682.868 L1266.08 682.868 L1265.52 682.868 L1264.96 682.868 L1264.4 682.868 L1263.84 682.868 L1263.28 682.868 L1262.72 682.868 L1262.16 682.868 L1261.6 682.868 L1261.04 682.868 L1260.48 682.868 L1259.92 682.868 L1259.36 682.868 L1258.81 682.868 L1258.25 682.868 L1257.69 682.868 L1257.13 682.868 L1256.57 682.868 L1256.01 682.868 L1255.45 682.868 L1254.89 682.868 L1254.33 682.868 L1253.77 682.868 L1253.21 682.868 L1252.65 682.868 L1252.09 682.868 L1251.54 682.868 L1250.98 682.868 L1250.42 682.868 L1249.86 682.868 L1249.3 682.868 L1248.74 682.868 L1248.18 682.868 L1247.62 682.868 L1247.06 682.868 L1246.5 682.868 L1245.94 682.868 L1245.38 682.868 L1244.82 682.868 L1244.26 682.868 L1243.71 682.868 L1243.15 682.868 L1242.59 682.868 L1242.03 682.868 L1241.47 682.868 L1240.91 682.868 L1240.35 682.868 L1239.79 682.868 L1239.23 682.868 L1238.67 682.868 L1238.11 682.868 L1237.55 682.868 L1236.99 682.868 L1236.44 682.868 L1235.88 682.868 L1235.32 682.868 L1234.76 682.868 L1234.2 682.868 L1233.64 682.868 L1233.08 682.868 L1232.52 682.868 L1231.96 682.868 L1231.4 682.868 L1230.84 682.868 L1230.28 682.868 L1229.72 682.868 L1229.17 682.868 L1228.61 682.868 L1228.05 682.868 L1227.49 682.868 L1226.93 682.868 L1226.37 682.868 L1225.81 682.868 L1225.25 682.868 L1224.69 682.868 L1224.13 682.868 L1223.57 682.868 L1223.01 682.868 L1222.45 682.868 L1221.89 682.868 L1221.34 682.868 L1220.78 682.868 L1220.22 682.868 L1219.66 682.868 L1219.1 682.868 L1218.54 682.868 L1217.98 682.868 L1217.42 682.868 L1216.86 682.868 L1216.3 682.868 L1215.74 682.868 L1215.18 682.868 L1214.62 682.868 L1214.07 682.868 L1213.51 682.868 L1212.95 682.868 L1212.39 682.868 L1211.83 682.868 L1211.27 682.868 L1210.71 682.868 L1210.15 682.868 L1209.59 682.868 L1209.03 682.868 L1208.47 682.868 L1207.91 682.868 L1207.35 682.868 L1206.8 682.868 L1206.24 682.868 L1205.68 682.868 L1205.12 682.868 L1204.56 682.868 L1204 682.868 L1203.44 682.868 L1202.88 682.868 L1202.32 682.868 L1201.76 682.868 L1201.2 682.868 L1200.64 682.868 L1200.08 682.868 L1199.52 682.868 L1198.97 682.868 L1198.41 682.868 L1197.85 682.868 L1197.29 682.868 L1196.73 682.868 L1196.17 682.868 L1195.61 682.868 L1195.05 682.868 L1194.49 682.868 L1193.93 682.868 L1193.37 682.868 L1192.81 682.868 L1192.25 682.868 L1191.7 682.868 L1191.14 682.868 L1190.58 682.868 L1190.02 682.868 L1189.46 682.868 L1188.9 682.868 L1188.34 682.868 L1187.78 682.868 L1187.22 682.868 L1186.66 682.868 L1186.1 682.868 L1185.54 682.868 L1184.98 682.868 L1184.43 682.868 L1183.87 682.868 L1183.31 682.868 L1182.75 682.868 L1182.19 682.868 L1181.63 682.868 L1181.07 682.868 L1180.51 682.868 L1179.95 682.868 L1179.39 682.868 L1178.83 682.868 L1178.27 682.868 L1177.71 682.868 L1177.15 682.868 L1176.6 682.868 L1176.04 682.868 L1175.48 682.868 L1174.92 682.868 L1174.36 682.868 L1173.8 682.868 L1173.24 682.868 L1172.68 682.868 L1172.12 682.868 L1171.56 682.868 L1171 682.868 L1170.44 682.868 L1169.88 682.868 L1169.33 682.868 L1168.77 682.868 L1168.21 682.868 L1167.65 682.868 L1167.09 682.868 L1166.53 682.868 L1165.97 682.868 L1165.41 682.868 L1164.85 682.868 L1164.29 682.868 L1163.73 682.868 L1163.17 682.868 L1162.61 682.868 L1162.05 682.868 L1161.5 682.868 L1160.94 682.868 L1160.38 682.868 L1159.82 682.868 L1159.26 682.868 L1158.7 682.868 L1158.14 682.868 L1157.58 682.868 L1157.02 682.868 L1156.46 682.868 L1155.9 682.868 L1155.34 682.868 L1154.78 682.868 L1154.23 682.868 L1153.67 682.868 L1153.11 682.868 L1152.55 682.868 L1151.99 682.868 L1151.43 682.868 L1150.87 682.868 L1150.31 682.868 L1149.75 682.868 L1149.19 682.868 L1148.63 682.868 L1148.07 682.868 L1147.51 682.868 L1146.96 682.868 L1146.4 682.868 L1145.84 682.868 L1145.28 682.868 L1144.72 682.868 L1144.16 682.868 L1143.6 682.868 L1143.04 682.868 L1142.48 682.868 L1141.92 682.868 L1141.36 682.868 L1140.8 682.868 L1140.24 682.868 L1139.68 682.868 L1139.13 682.868 L1138.57 682.868 L1138.01 682.868 L1137.45 682.868 L1136.89 682.868 L1136.33 682.868 L1135.77 682.868 L1135.21 682.868 L1134.65 682.868 L1134.09 682.868 L1133.53 682.868 L1132.97 682.868 L1132.41 682.868 L1131.86 682.868 L1131.3 682.868 L1130.74 682.868 L1130.18 682.868 L1129.62 682.868 L1129.06 682.868 L1128.5 682.868 L1127.94 682.868 L1127.38 682.868 L1126.82 682.868 L1126.26 682.868 L1125.7 682.868 L1125.14 682.868 L1124.59 682.868 L1124.03 682.868 L1123.47 682.868 L1122.91 682.868 L1122.35 682.868 L1121.79 682.868 L1121.23 682.868 L1120.67 682.868 L1120.11 682.868 L1119.55 682.868 L1118.99 682.868 L1118.43 682.868 L1117.87 682.868 L1117.31 682.868 L1116.76 682.868 L1116.2 682.868 L1115.64 682.868 L1115.08 682.868 L1114.52 682.868 L1113.96 682.868 L1113.4 682.868 L1112.84 682.868 L1112.28 682.868 L1111.72 682.868 L1111.16 682.868 L1110.6 682.868 L1110.04 682.868 L1109.49 682.868 L1108.93 682.868 L1108.37 682.868 L1107.81 682.868 L1107.25 682.868 L1106.69 682.868 L1106.13 682.868 L1105.57 682.868 L1105.01 682.868 L1104.45 682.868 L1103.89 682.868 L1103.33 682.868 L1102.77 682.868 L1102.22 682.868 L1101.66 682.868 L1101.1 682.868 L1100.54 682.868 L1099.98 682.868 L1099.42 682.868 L1098.86 682.868 L1098.3 682.868 L1097.74 682.868 L1097.18 682.868 L1096.62 682.868 L1096.06 682.868 L1095.5 682.868 L1094.94 682.868 L1094.39 682.868 L1093.83 682.868 L1093.27 682.868 L1092.71 682.868 L1092.15 682.868 L1091.59 682.868 L1091.03 682.868 L1090.47 682.868 L1089.91 682.868 L1089.35 682.868 L1088.79 682.868 L1088.23 682.868 L1087.67 682.868 L1087.12 682.868 L1086.56 682.868 L1086 682.868 L1085.44 682.868 L1084.88 682.868 L1084.32 682.868 L1083.76 682.868 L1083.2 682.868 L1082.64 682.868 L1082.08 682.868 L1081.52 682.868 L1080.96 682.868 L1080.4 682.868 L1079.85 682.868 L1079.29 682.868 L1078.73 682.868 L1078.17 682.868 L1077.61 682.868 L1077.05 682.868 L1076.49 682.868 L1075.93 682.868 L1075.37 682.868 L1074.81 682.868 L1074.25 682.868 L1073.69 682.868 L1073.13 682.868 L1072.57 682.868 L1072.02 682.868 L1071.46 682.868 L1070.9 682.868 L1070.34 682.868 L1069.78 682.868 L1069.22 682.868 L1068.66 682.868 L1068.1 682.868 L1067.54 682.868 L1066.98 682.868 L1066.42 682.868 L1065.86 682.868 L1065.3 682.868 L1064.75 682.868 L1064.19 682.868 L1063.63 682.868 L1063.07 682.868 L1062.51 682.868 L1061.95 682.868 L1061.39 682.868 L1060.83 682.868 L1060.27 682.868 L1059.71 682.868 L1059.15 682.868 L1058.59 682.868 L1058.03 682.868 L1057.48 682.868 L1056.92 682.868 L1056.36 682.868 L1055.8 682.868 L1055.24 682.868 L1054.68 682.868 L1054.12 682.868 L1053.56 682.868 L1053 682.868 L1052.44 682.868 L1051.88 682.868 L1051.32 682.868 L1050.76 682.868 L1050.2 682.868 L1049.65 682.868 L1049.09 682.868 L1048.53 682.868 L1047.97 682.868 L1047.41 682.868 L1046.85 682.868 L1046.29 682.868 L1045.73 682.868 L1045.17 682.868 L1044.61 682.868 L1044.05 682.868 L1043.49 682.868 L1042.93 682.868 L1042.38 682.868 L1041.82 682.868 L1041.26 682.868 L1040.7 682.868 L1040.14 682.868 L1039.58 682.868 L1039.02 682.868 L1038.46 682.868 L1037.9 682.868 L1037.34 682.868 L1036.78 682.868 L1036.22 682.868 L1035.66 682.868 L1035.1 682.868 L1034.55 682.868 L1033.99 682.868 L1033.43 682.868 L1032.87 682.868 L1032.31 682.868 L1031.75 682.868 L1031.19 682.868 L1030.63 682.868 L1030.07 682.868 L1029.51 682.868 L1028.95 682.868 L1028.39 682.868 L1027.83 682.868 L1027.28 682.868 L1026.72 682.868 L1026.16 682.868 L1025.6 682.868 L1025.04 682.868 L1024.48 682.868 L1023.92 682.868 L1023.36 682.868 L1022.8 682.868 L1022.24 682.868 L1021.68 682.868 L1021.12 682.868 L1020.56 682.868 L1020.01 682.868 L1019.45 682.868 L1018.89 682.868 L1018.33 682.868 L1017.77 682.868 L1017.21 682.868 L1016.65 682.868 L1016.09 682.868 L1015.53 682.868 L1014.97 682.868 L1014.41 682.868 L1013.85 682.868 L1013.29 682.868 L1012.73 682.868 L1012.18 682.868 L1011.62 682.868 L1011.06 682.868 L1010.5 682.868 L1009.94 682.868 L1009.38 682.868 L1008.82 682.868 L1008.26 682.868 L1007.7 682.868 L1007.14 682.868 L1006.58 682.868 L1006.02 682.868 L1005.46 682.868 L1004.91 682.868 L1004.35 682.868 L1003.79 682.868 L1003.23 682.868 L1002.67 682.868 L1002.11 682.868 L1001.55 682.868 L1000.99 682.868 L1000.43 682.868 L999.872 682.868 L999.313 682.868 L998.754 682.868 L998.194 682.868 L997.635 682.868 L997.076 682.868 L996.517 682.868 L995.957 682.868 L995.398 682.868 L994.839 682.868 L994.28 682.868 L993.72 682.868 L993.161 682.868 L992.602 682.868 L992.043 682.868 L991.483 682.868 L990.924 682.868 L990.365 682.868 L989.806 682.868 L989.246 682.868 L988.687 682.868 L988.128 682.868 L987.569 682.868 L987.009 682.868 L986.45 682.868 L985.891 682.868 L985.332 682.868 L984.772 682.868 L984.213 682.868 L983.654 682.868 L983.095 682.868 L982.535 682.868 L981.976 682.868 L981.417 682.868 L980.858 682.868 L980.298 682.868 L979.739 682.868 L979.18 682.868 L978.621 682.868 L978.061 682.868 L977.502 682.868 L976.943 682.868 L976.384 682.868 L975.824 682.868 L975.265 682.868 L974.706 682.868 L974.147 682.868 L973.587 682.868 L973.028 682.868 L972.469 682.868 L971.91 682.868 L971.35 682.868 L970.791 682.868 L970.232 682.868 L969.673 682.868 L969.113 682.868 L968.554 682.868 L967.995 682.868 L967.436 682.868 L966.876 682.868 L966.317 682.868 L965.758 682.868 L965.199 682.868 L964.639 682.868 L964.08 682.868 L963.521 682.868 L962.962 682.868 L962.402 682.868 L961.843 682.868 L961.284 682.868 L960.725 682.868 L960.165 682.868 L959.606 682.868 L959.047 682.868 L958.488 682.868 L957.928 682.868 L957.369 682.868 L956.81 682.868 L956.251 682.868 L955.691 682.868 L955.132 682.868 L954.573 682.868 L954.014 682.868 L953.454 682.868 L952.895 682.868 L952.336 682.868 L951.777 682.868 L951.217 682.868 L950.658 682.868 L950.099 682.868 L949.54 682.868 L948.98 682.868 L948.421 682.868 L947.862 682.868 L947.303 682.868 L946.743 682.868 L946.184 682.868 L945.625 682.868 L945.066 682.868 L944.506 682.868 L943.947 682.868 L943.388 682.868 L942.829 682.868 L942.269 682.868 L941.71 682.868 L941.151 682.868 L940.592 682.868 L940.032 682.868 L939.473 682.868 L938.914 682.868 L938.355 682.868 L937.795 682.868 L937.236 682.868 L936.677 682.868 L936.118 682.868 L935.558 682.868 L934.999 682.868 L934.44 682.868 L933.881 682.868 L933.321 682.868 L932.762 682.868 L932.203 682.868 L931.644 682.868 L931.084 682.868 L930.525 682.868 L929.966 682.868 L929.406 682.868 L928.847 682.868 L928.288 682.868 L927.729 682.868 L927.169 682.868 L926.61 682.868 L926.051 682.868 L925.492 682.868 L924.932 682.868 L924.373 682.868 L923.814 682.868 L923.255 682.868 L922.695 682.868 L922.136 682.868 L921.577 682.868 L921.018 682.868 L920.458 682.868 L919.899 682.868 L919.34 682.868 L918.781 682.868 L918.221 682.868 L917.662 682.868 L917.103 682.868 L916.544 682.868 L915.984 682.868 L915.425 682.868 L914.866 682.868 L914.307 682.868 L913.747 682.868 L913.188 682.868 L912.629 682.868 L912.07 682.868 L911.51 682.868 L910.951 682.868 L910.392 682.868 L909.833 682.868 L909.273 682.868 L908.714 682.868 L908.155 682.868 L907.596 682.868 L907.036 682.868 L906.477 682.868 L905.918 682.868 L905.359 682.868 L904.799 682.868 L904.24 682.868 L903.681 682.868 L903.122 682.868 L902.562 682.868 L902.003 682.868 L901.444 682.868 L900.885 682.868 L900.325 682.868 L899.766 682.868 L899.207 682.868 L898.648 682.868 L898.088 682.868 L897.529 682.868 L896.97 682.868 L896.411 682.868 L895.851 682.868 L895.292 682.868 L894.733 682.868 L894.174 682.868 L893.614 682.868 L893.055 682.868 L892.496 682.868 L891.937 682.868 L891.377 682.868 L890.818 682.868 L890.259 682.868 L889.7 682.868 L889.14 682.868 L888.581 682.868 L888.022 682.868 L887.463 682.868 L886.903 682.868 L886.344 682.868 L885.785 682.868 L885.226 682.868 L884.666 682.868 L884.107 682.868 L883.548 682.868 L882.989 682.868 L882.429 682.868 L881.87 682.868 L881.311 682.868 L880.752 682.868 L880.192 682.868 L879.633 682.868 L879.074 682.868 L878.515 682.868 L877.955 682.868 L877.396 682.868 L876.837 682.868 L876.278 682.868 L875.718 682.868 L875.159 682.868 L874.6 682.868 L874.041 682.868 L873.481 682.868 L872.922 682.868 L872.363 682.868 L871.804 682.868 L871.244 682.868 L870.685 682.868 L870.126 682.868 L869.567 682.868 L869.007 682.868 L868.448 682.868 L867.889 682.868 L867.33 682.868 L866.77 682.868 L866.211 682.868 L865.652 682.868 L865.093 682.868 L864.533 682.868 L863.974 682.868 L863.415 682.868 L862.856 682.868 L862.296 682.868 L861.737 682.868 L861.178 682.868 L860.619 682.868 L860.059 682.868 L859.5 682.868 L858.941 682.868 L858.382 682.868 L857.822 682.868 L857.263 682.868 L856.704 682.868 L856.145 682.868 L855.585 682.868 L855.026 682.868 L854.467 682.868 L853.908 682.868 L853.348 682.868 L852.789 682.868 L852.23 682.868 L851.671 682.868 L851.111 682.868 L850.552 682.868 L849.993 682.868 L849.434 682.868 L848.874 682.868 L848.315 682.868 L847.756 682.868 L847.197 682.868 L846.637 682.868 L846.078 682.868 L845.519 682.868 L844.96 682.868 L844.4 682.868 L843.841 682.868 L843.282 682.868 L842.723 682.868 L842.163 682.868 L841.604 682.868 L841.045 682.868 L840.486 682.868 L839.926 682.868 L839.367 682.868 L838.808 682.868 L838.249 682.868 L837.689 682.868 L837.13 682.868 L836.571 682.868 L836.012 682.868 L835.452 682.868 L834.893 682.868 L834.334 682.868 L833.775 682.868 L833.215 682.868 L832.656 682.868 L832.097 682.868 L831.538 682.868 L830.978 682.868 L830.419 682.868 L829.86 682.868 L829.301 682.868 L828.741 682.868 L828.182 682.868 L827.623 682.868 L827.064 682.868 L826.504 682.868 L825.945 682.868 L825.386 682.868 L824.827 682.868 L824.267 682.868 L823.708 682.868 L823.149 682.868 L822.59 682.868 L822.03 682.868 L821.471 682.868 L820.912 682.868 L820.353 682.868 L819.793 682.868 L819.234 682.868 L818.675 682.868 L818.116 682.868 L817.556 682.868 L816.997 682.868 L816.438 682.868 L815.879 682.868 L815.319 682.868 L814.76 682.868 L814.201 682.868 L813.642 682.868 L813.082 682.868 L812.523 682.868 L811.964 682.868 L811.405 682.868 L810.845 682.868 L810.286 682.868 L809.727 682.868 L809.168 682.868 L808.608 682.868 L808.049 682.868 L807.49 682.868 L806.931 682.868 L806.371 682.868 L805.812 682.868 L805.253 682.868 L804.693 682.868 L804.134 682.868 L803.575 682.868 L803.016 682.868 L802.456 682.868 L801.897 682.868 L801.338 682.868 L800.779 682.868 L800.219 682.868 L799.66 682.868 L799.101 682.868 L798.542 682.868 L797.982 682.868 L797.423 682.868 L796.864 682.868 L796.305 682.868 L795.745 682.868 L795.186 682.868 L794.627 682.868 L794.068 682.868 L793.508 682.868 L792.949 682.868 L792.39 682.868 L791.831 682.868 L791.271 682.868 L790.712 682.868 L790.153 682.868 L789.594 682.868 L789.034 682.868 L788.475 682.868 L787.916 682.868 L787.357 682.868 L786.797 682.868 L786.238 682.868 L785.679 682.868 L785.12 682.868 L784.56 682.868 L784.001 682.868 L783.442 682.868 L782.883 682.868 L782.323 682.868 L781.764 682.868 L781.205 682.868 L780.646 682.868 L780.086 682.868 L779.527 682.868 L778.968 682.868 L778.409 682.868 L777.849 682.868 L777.29 682.868 L776.731 682.868 L776.172 682.868 L775.612 682.868 L775.053 682.868 L774.494 682.868 L773.935 682.868 L773.375 682.868 L772.816 682.868 L772.257 682.868 L771.698 682.868 L771.138 682.868 L770.579 682.868 L770.02 682.868 L769.461 682.868 L768.901 682.868 L768.342 682.868 L767.783 682.868 L767.224 682.868 L766.664 682.868 L766.105 682.868 L765.546 682.868 L764.987 682.868 L764.427 682.868 L763.868 682.868 L763.309 682.868 L762.75 682.868 L762.19 682.868 L761.631 682.868 L761.072 682.868 L760.513 682.868 L759.953 682.868 L759.394 682.868 L758.835 682.868 L758.276 682.868 L757.716 682.868 L757.157 682.868 L756.598 682.868 L756.039 682.868 L755.479 682.868 L754.92 682.868 L754.361 682.868 L753.802 682.868 L753.242 682.868 L752.683 682.868 L752.124 682.868 L751.565 682.868 L751.005 682.868 L750.446 682.868 L749.887 682.868 L749.328 682.868 L748.768 682.868 L748.209 682.868 L747.65 682.868 L747.091 682.868 L746.531 682.868 L745.972 682.868 L745.413 682.868 L744.854 682.868 L744.294 682.868 L743.735 682.868 L743.176 682.868 L742.617 682.868 L742.057 682.868 L741.498 682.868 L740.939 682.868 L740.38 682.868 L739.82 682.868 L739.261 682.868 L738.702 682.868 L738.143 682.868 L737.583 682.868 L737.024 682.868 L736.465 682.868 L735.906 682.868 L735.346 682.868 L734.787 682.868 L734.228 682.868 L733.669 682.868 L733.109 682.868 L732.55 682.868 L731.991 682.868 L731.432 682.868 L730.872 682.868 L730.313 682.868 L729.754 682.868 L729.195 682.868 L728.635 682.868 L728.076 682.868 L727.517 682.868 L726.958 682.868 L726.398 682.868 L725.839 682.868 L725.28 682.868 L724.721 682.868 L724.161 682.868 L723.602 682.868 L723.043 682.868 L722.484 682.868 L721.924 682.868 L721.365 682.868 L720.806 682.868 L720.247 682.868  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.836 720.806,686.836 721.365,686.836 721.924,686.836 722.484,686.836 723.043,686.836 723.602,686.836 724.161,686.836 724.721,686.836 725.28,686.836 725.839,686.836 726.398,686.836 726.958,686.836 727.517,686.836 728.076,686.836 728.635,686.836 729.195,686.836 729.754,686.836 730.313,686.836 730.872,686.836 731.432,686.836 731.991,686.836 732.55,686.836 733.109,686.836 733.669,686.836 734.228,686.836 734.787,686.836 735.346,686.836 735.906,686.836 736.465,686.836 737.024,686.836 737.583,686.836 738.143,686.836 738.702,686.836 739.261,686.836 739.82,686.836 740.38,686.836 740.939,686.836 741.498,686.836 742.057,686.836 742.617,686.836 743.176,686.836 743.735,686.836 744.294,686.836 744.854,686.836 745.413,686.836 745.972,686.836 746.531,686.836 747.091,686.836 747.65,686.836 748.209,686.836 748.768,686.836 749.328,686.836 749.887,686.836 750.446,686.836 751.005,686.836 751.565,686.836 752.124,686.836 752.683,686.836 753.242,686.836 753.802,686.836 754.361,686.836 754.92,686.836 755.479,686.836 756.039,686.836 756.598,686.836 757.157,686.836 757.716,686.836 758.276,686.836 758.835,686.836 759.394,686.836 759.953,686.836 760.513,686.836 761.072,686.836 761.631,686.836 762.19,686.836 762.75,686.836 763.309,686.836 763.868,686.836 764.427,686.836 764.987,686.836 765.546,686.836 766.105,686.836 766.664,686.836 767.224,686.836 767.783,686.836 768.342,686.836 768.901,686.836 769.461,686.836 770.02,686.836 770.579,686.836 771.138,686.836 771.698,686.836 772.257,686.836 772.816,686.836 773.375,686.836 773.935,686.836 774.494,686.836 775.053,686.836 775.612,686.836 776.172,686.836 776.731,686.836 777.29,686.836 777.849,686.836 778.409,686.836 778.968,686.836 779.527,686.836 780.086,686.836 780.646,686.836 781.205,686.836 781.764,686.836 782.323,686.836 782.883,686.836 783.442,686.836 784.001,686.836 784.56,686.836 785.12,686.836 785.679,686.836 786.238,686.836 786.797,686.836 787.357,686.836 787.916,686.836 788.475,686.836 789.034,686.836 789.594,686.836 790.153,686.836 790.712,686.836 791.271,686.836 791.831,686.836 792.39,686.836 792.949,686.836 793.508,686.836 794.068,686.836 794.627,686.836 795.186,686.836 795.745,686.836 796.305,686.836 796.864,686.836 797.423,686.836 797.982,686.836 798.542,686.836 799.101,686.836 799.66,686.836 800.219,686.836 800.779,686.836 801.338,686.836 801.897,686.836 802.456,686.836 803.016,686.836 803.575,686.836 804.134,686.836 804.693,686.836 805.253,686.836 805.812,686.836 806.371,686.836 806.931,686.836 807.49,686.836 808.049,686.836 808.608,686.836 809.168,686.836 809.727,686.836 810.286,686.836 810.845,686.836 811.405,686.836 811.964,686.836 812.523,686.836 813.082,686.836 813.642,686.836 814.201,686.836 814.76,686.836 815.319,686.836 815.879,686.836 816.438,686.836 816.997,686.836 817.556,686.836 818.116,686.836 818.675,686.836 819.234,686.836 819.793,686.836 820.353,686.836 820.912,686.836 821.471,686.836 822.03,686.836 822.59,686.836 823.149,686.836 823.708,686.836 824.267,686.836 824.827,686.836 825.386,686.836 825.945,686.836 826.504,686.836 827.064,686.836 827.623,686.836 828.182,686.836 828.741,686.836 829.301,686.836 829.86,686.836 830.419,686.836 830.978,686.836 831.538,686.836 832.097,686.836 832.656,686.836 833.215,686.836 833.775,686.836 834.334,686.836 834.893,686.836 835.452,686.836 836.012,686.836 836.571,686.836 837.13,686.836 837.689,686.836 838.249,686.836 838.808,686.836 839.367,686.836 839.926,686.836 840.486,686.836 841.045,686.836 841.604,686.836 842.163,686.836 842.723,686.836 843.282,686.836 843.841,686.836 844.4,686.836 844.96,686.836 845.519,686.836 846.078,686.836 846.637,686.836 847.197,686.836 847.756,686.836 848.315,686.836 848.874,686.836 849.434,686.836 849.993,686.836 850.552,686.836 851.111,686.836 851.671,686.836 852.23,686.836 852.789,686.836 853.348,686.836 853.908,686.836 854.467,686.836 855.026,686.836 855.585,686.836 856.145,686.836 856.704,686.836 857.263,686.836 857.822,686.836 858.382,686.836 858.941,686.836 859.5,686.836 860.059,686.836 860.619,686.836 861.178,686.836 861.737,686.836 862.296,686.836 862.856,686.836 863.415,686.836 863.974,686.836 864.533,686.836 865.093,686.836 865.652,686.836 866.211,686.836 866.77,686.836 867.33,686.836 867.889,686.836 868.448,686.836 869.007,686.836 869.567,686.836 870.126,686.836 870.685,686.836 871.244,686.836 871.804,686.836 872.363,686.836 872.922,686.836 873.481,686.836 874.041,686.836 874.6,686.836 875.159,686.836 875.718,686.836 876.278,686.836 876.837,686.836 877.396,686.836 877.955,686.836 878.515,686.836 879.074,686.836 879.633,686.836 880.192,686.836 880.752,686.836 881.311,686.836 881.87,686.836 882.429,686.836 882.989,686.836 883.548,686.836 884.107,686.836 884.666,686.836 885.226,686.836 885.785,686.836 886.344,686.836 886.903,686.836 887.463,686.836 888.022,686.836 888.581,686.836 889.14,686.836 889.7,686.836 890.259,686.836 890.818,686.836 891.377,686.836 891.937,686.836 892.496,686.836 893.055,686.836 893.614,686.836 894.174,686.836 894.733,686.836 895.292,686.836 895.851,686.836 896.411,686.836 896.97,686.836 897.529,686.836 898.088,686.836 898.648,686.836 899.207,686.836 899.766,686.836 900.325,686.836 900.885,686.836 901.444,686.836 902.003,686.836 902.562,686.836 903.122,686.836 903.681,686.836 904.24,686.836 904.799,686.836 905.359,686.836 905.918,686.836 906.477,686.836 907.036,686.836 907.596,686.836 908.155,686.836 908.714,686.836 909.273,686.836 909.833,686.836 910.392,686.836 910.951,686.836 911.51,686.836 912.07,686.836 912.629,686.836 913.188,686.836 913.747,686.836 914.307,686.836 914.866,686.836 915.425,686.836 915.984,686.836 916.544,686.836 917.103,686.836 917.662,686.836 918.221,686.836 918.781,686.836 919.34,686.836 919.899,686.836 920.458,686.836 921.018,686.836 921.577,686.836 922.136,686.836 922.695,686.836 923.255,686.836 923.814,686.836 924.373,686.836 924.932,686.836 925.492,686.836 926.051,686.836 926.61,686.836 927.169,686.836 927.729,686.836 928.288,686.836 928.847,686.836 929.406,686.836 929.966,686.836 930.525,686.836 931.084,686.836 931.644,686.836 932.203,686.836 932.762,686.836 933.321,686.836 933.881,686.836 934.44,686.836 934.999,686.836 935.558,686.836 936.118,686.836 936.677,686.836 937.236,686.836 937.795,686.836 938.355,686.836 938.914,686.836 939.473,686.836 940.032,686.836 940.592,686.836 941.151,686.836 941.71,686.836 942.269,686.836 942.829,686.836 943.388,686.836 943.947,686.836 944.506,686.836 945.066,686.836 945.625,686.836 946.184,686.836 946.743,686.836 947.303,686.836 947.862,686.836 948.421,686.836 948.98,686.836 949.54,686.836 950.099,686.836 950.658,686.836 951.217,686.836 951.777,686.836 952.336,686.836 952.895,686.836 953.454,686.836 954.014,686.836 954.573,686.836 955.132,686.836 955.691,686.836 956.251,686.836 956.81,686.836 957.369,686.836 957.928,686.836 958.488,686.836 959.047,686.836 959.606,686.836 960.165,686.836 960.725,686.836 961.284,686.836 961.843,686.836 962.402,686.836 962.962,686.836 963.521,686.836 964.08,686.836 964.639,686.836 965.199,686.836 965.758,686.836 966.317,686.836 966.876,686.836 967.436,686.836 967.995,686.836 968.554,686.836 969.113,686.836 969.673,686.836 970.232,686.836 970.791,686.836 971.35,686.836 971.91,686.836 972.469,686.836 973.028,686.836 973.587,686.836 974.147,686.836 974.706,686.836 975.265,686.836 975.824,686.836 976.384,686.836 976.943,686.836 977.502,686.836 978.061,686.836 978.621,686.836 979.18,686.836 979.739,686.836 980.298,686.836 980.858,686.836 981.417,686.836 981.976,686.836 982.535,686.836 983.095,686.836 983.654,686.836 984.213,686.836 984.772,686.836 985.332,686.836 985.891,686.836 986.45,686.836 987.009,686.836 987.569,686.836 988.128,686.836 988.687,686.836 989.246,686.836 989.806,686.836 990.365,686.836 990.924,686.836 991.483,686.836 992.043,686.836 992.602,686.836 993.161,686.836 993.72,686.836 994.28,686.836 994.839,686.836 995.398,686.836 995.957,686.836 996.517,686.836 997.076,686.836 997.635,686.836 998.194,686.836 998.754,686.836 999.313,686.836 999.872,686.836 1000.43,686.836 1000.99,686.836 1001.55,686.836 1002.11,686.836 1002.67,686.836 1003.23,686.836 1003.79,686.836 1004.35,686.836 1004.91,686.836 1005.46,686.836 1006.02,686.836 1006.58,686.836 1007.14,686.836 1007.7,686.836 1008.26,686.836 1008.82,686.836 1009.38,686.836 1009.94,686.836 1010.5,686.836 1011.06,686.836 1011.62,686.836 1012.18,686.836 1012.73,686.836 1013.29,686.836 1013.85,686.836 1014.41,686.836 1014.97,686.836 1015.53,686.836 1016.09,686.836 1016.65,686.836 1017.21,686.836 1017.77,686.836 1018.33,686.836 1018.89,686.836 1019.45,686.836 1020.01,686.836 1020.56,686.836 1021.12,686.836 1021.68,686.836 1022.24,686.836 1022.8,686.836 1023.36,686.836 1023.92,686.836 1024.48,686.836 1025.04,686.836 1025.6,686.836 1026.16,686.836 1026.72,686.836 1027.28,686.836 1027.83,686.836 1028.39,686.836 1028.95,686.836 1029.51,686.836 1030.07,686.836 1030.63,686.836 1031.19,686.836 1031.75,686.836 1032.31,686.836 1032.87,686.836 1033.43,686.836 1033.99,686.836 1034.55,686.836 1035.1,686.836 1035.66,686.836 1036.22,686.836 1036.78,686.836 1037.34,686.836 1037.9,686.836 1038.46,686.836 1039.02,686.836 1039.58,686.836 1040.14,686.836 1040.7,686.836 1041.26,686.836 1041.82,686.836 1042.38,686.836 1042.93,686.836 1043.49,686.836 1044.05,686.836 1044.61,686.836 1045.17,686.836 1045.73,686.836 1046.29,686.836 1046.85,686.836 1047.41,686.836 1047.97,686.836 1048.53,686.836 1049.09,686.836 1049.65,686.836 1050.2,686.836 1050.76,686.836 1051.32,686.836 1051.88,686.836 1052.44,686.836 1053,686.836 1053.56,686.836 1054.12,686.836 1054.68,686.836 1055.24,686.836 1055.8,686.836 1056.36,686.836 1056.92,686.836 1057.48,686.836 1058.03,686.836 1058.59,686.836 1059.15,686.836 1059.71,686.836 1060.27,686.836 1060.83,686.836 1061.39,686.836 1061.95,686.836 1062.51,686.836 1063.07,686.836 1063.63,686.836 1064.19,686.836 1064.75,686.836 1065.3,686.836 1065.86,686.836 1066.42,686.836 1066.98,686.836 1067.54,686.836 1068.1,686.836 1068.66,686.836 1069.22,686.836 1069.78,686.836 1070.34,686.836 1070.9,686.836 1071.46,686.836 1072.02,686.836 1072.57,686.836 1073.13,686.836 1073.69,686.836 1074.25,686.836 1074.81,686.836 1075.37,686.836 1075.93,686.836 1076.49,686.836 1077.05,686.836 1077.61,686.836 1078.17,686.836 1078.73,686.836 1079.29,686.836 1079.85,686.836 1080.4,686.836 1080.96,686.836 1081.52,686.836 1082.08,686.836 1082.64,686.836 1083.2,686.836 1083.76,686.836 1084.32,686.836 1084.88,686.836 1085.44,686.836 1086,686.836 1086.56,686.836 1087.12,686.836 1087.67,686.836 1088.23,686.836 1088.79,686.836 1089.35,686.836 1089.91,686.836 1090.47,686.836 1091.03,686.836 1091.59,686.836 1092.15,686.836 1092.71,686.836 1093.27,686.836 1093.83,686.836 1094.39,686.836 1094.94,686.836 1095.5,686.836 1096.06,686.836 1096.62,686.836 1097.18,686.836 1097.74,686.836 1098.3,686.836 1098.86,686.836 1099.42,686.836 1099.98,686.836 1100.54,686.836 1101.1,686.836 1101.66,686.836 1102.22,686.836 1102.77,686.836 1103.33,686.836 1103.89,686.836 1104.45,686.836 1105.01,686.836 1105.57,686.836 1106.13,686.836 1106.69,686.836 1107.25,686.836 1107.81,686.836 1108.37,686.836 1108.93,686.836 1109.49,686.836 1110.04,686.836 1110.6,686.836 1111.16,686.836 1111.72,686.836 1112.28,686.836 1112.84,686.836 1113.4,686.836 1113.96,686.836 1114.52,686.836 1115.08,686.836 1115.64,686.836 1116.2,686.836 1116.76,686.836 1117.31,686.836 1117.87,686.836 1118.43,686.836 1118.99,686.836 1119.55,686.836 1120.11,686.836 1120.67,686.836 1121.23,686.836 1121.79,686.836 1122.35,686.836 1122.91,686.836 1123.47,686.836 1124.03,686.836 1124.59,686.836 1125.14,686.836 1125.7,686.836 1126.26,686.836 1126.82,686.836 1127.38,686.836 1127.94,686.836 1128.5,686.836 1129.06,686.836 1129.62,686.836 1130.18,686.836 1130.74,686.836 1131.3,686.836 1131.86,686.836 1132.41,686.836 1132.97,686.836 1133.53,686.836 1134.09,686.836 1134.65,686.836 1135.21,686.836 1135.77,686.836 1136.33,686.836 1136.89,686.836 1137.45,686.836 1138.01,686.836 1138.57,686.836 1139.13,686.836 1139.68,686.836 1140.24,686.836 1140.8,686.836 1141.36,686.836 1141.92,686.836 1142.48,686.836 1143.04,686.836 1143.6,686.836 1144.16,686.836 1144.72,686.836 1145.28,686.836 1145.84,686.836 1146.4,686.836 1146.96,686.836 1147.51,686.836 1148.07,686.836 1148.63,686.836 1149.19,686.836 1149.75,686.836 1150.31,686.836 1150.87,686.836 1151.43,686.836 1151.99,686.836 1152.55,686.836 1153.11,686.836 1153.67,686.836 1154.23,686.836 1154.78,686.836 1155.34,686.836 1155.9,686.836 1156.46,686.836 1157.02,686.836 1157.58,686.836 1158.14,686.836 1158.7,686.836 1159.26,686.836 1159.82,686.836 1160.38,686.836 1160.94,686.836 1161.5,686.836 1162.05,686.836 1162.61,686.836 1163.17,686.836 1163.73,686.836 1164.29,686.836 1164.85,686.836 1165.41,686.836 1165.97,686.836 1166.53,686.836 1167.09,686.836 1167.65,686.836 1168.21,686.836 1168.77,686.836 1169.33,686.836 1169.88,686.836 1170.44,686.836 1171,686.836 1171.56,686.836 1172.12,686.836 1172.68,686.836 1173.24,686.836 1173.8,686.836 1174.36,686.836 1174.92,686.836 1175.48,686.836 1176.04,686.836 1176.6,686.836 1177.15,686.836 1177.71,686.836 1178.27,686.836 1178.83,686.836 1179.39,686.836 1179.95,686.836 1180.51,686.836 1181.07,686.836 1181.63,686.836 1182.19,686.836 1182.75,686.836 1183.31,686.836 1183.87,686.836 1184.43,686.836 1184.98,686.836 1185.54,686.836 1186.1,686.836 1186.66,686.836 1187.22,686.836 1187.78,686.836 1188.34,686.836 1188.9,686.836 1189.46,686.836 1190.02,686.836 1190.58,686.836 1191.14,686.836 1191.7,686.836 1192.25,686.836 1192.81,686.836 1193.37,686.836 1193.93,686.836 1194.49,686.836 1195.05,686.836 1195.61,686.836 1196.17,686.836 1196.73,686.836 1197.29,686.836 1197.85,686.836 1198.41,686.836 1198.97,686.836 1199.52,686.836 1200.08,686.836 1200.64,686.836 1201.2,686.836 1201.76,686.836 1202.32,686.836 1202.88,686.836 1203.44,686.836 1204,686.836 1204.56,686.836 1205.12,686.836 1205.68,686.836 1206.24,686.836 1206.8,686.836 1207.35,686.836 1207.91,686.836 1208.47,686.836 1209.03,686.836 1209.59,686.836 1210.15,686.836 1210.71,686.836 1211.27,686.836 1211.83,686.836 1212.39,686.836 1212.95,686.836 1213.51,686.836 1214.07,686.836 1214.62,686.836 1215.18,686.836 1215.74,686.836 1216.3,686.836 1216.86,686.836 1217.42,686.836 1217.98,686.836 1218.54,686.836 1219.1,686.836 1219.66,686.836 1220.22,686.836 1220.78,686.836 1221.34,686.836 1221.89,686.836 1222.45,686.836 1223.01,686.836 1223.57,686.836 1224.13,686.836 1224.69,686.836 1225.25,686.836 1225.81,686.836 1226.37,686.836 1226.93,686.836 1227.49,686.836 1228.05,686.836 1228.61,686.836 1229.17,686.836 1229.72,686.836 1230.28,686.836 1230.84,686.836 1231.4,686.836 1231.96,686.836 1232.52,686.836 1233.08,686.836 1233.64,686.836 1234.2,686.836 1234.76,686.836 1235.32,686.836 1235.88,686.836 1236.44,686.836 1236.99,686.836 1237.55,686.836 1238.11,686.836 1238.67,686.836 1239.23,686.836 1239.79,686.836 1240.35,686.836 1240.91,686.836 1241.47,686.836 1242.03,686.836 1242.59,686.836 1243.15,686.836 1243.71,686.836 1244.26,686.836 1244.82,686.836 1245.38,686.836 1245.94,686.836 1246.5,686.836 1247.06,686.836 1247.62,686.836 1248.18,686.836 1248.74,686.836 1249.3,686.836 1249.86,686.836 1250.42,686.836 1250.98,686.836 1251.54,686.836 1252.09,686.836 1252.65,686.836 1253.21,686.836 1253.77,686.836 1254.33,686.836 1254.89,686.836 1255.45,686.836 1256.01,686.836 1256.57,686.836 1257.13,686.836 1257.69,686.836 1258.25,686.836 1258.81,686.836 1259.36,686.836 1259.92,686.836 1260.48,686.836 1261.04,686.836 1261.6,686.836 1262.16,686.836 1262.72,686.836 1263.28,686.836 1263.84,686.836 1264.4,686.836 1264.96,686.836 1265.52,686.836 1266.08,686.836 1266.63,686.836 1267.19,686.836 1267.75,686.836 1268.31,686.836 1268.87,686.836 1269.43,686.836 1269.99,686.836 1270.55,686.836 1271.11,686.836 1271.67,686.836 1272.23,686.836 1272.79,686.836 1273.35,686.836 1273.91,686.836 1274.46,686.836 1275.02,686.836 1275.58,686.836 1276.14,686.836 1276.7,686.836 1277.26,686.836 1277.82,686.836 1278.38,686.836 1278.94,686.836 1279.5,686.836 1280.06,686.836 1280.62,686.836 1281.18,686.836 1281.73,686.836 1282.29,686.836 1282.85,686.836 1283.41,686.836 1283.97,686.836 1284.53,686.836 1285.09,686.836 1285.65,686.836 1286.21,686.836 1286.77,686.836 1287.33,686.836 1287.89,686.836 1288.45,686.836 1289,686.836 1289.56,686.836 1290.12,686.836 1290.68,686.836 1291.24,686.836 1291.8,686.836 1292.36,686.836 1292.92,686.836 1293.48,686.836 1294.04,686.836 1294.6,686.836 1295.16,686.836 1295.72,686.836 1296.28,686.836 1296.83,686.836 1297.39,686.836 1297.95,686.836 1298.51,686.836 1299.07,686.836 1299.63,686.836 1300.19,686.836 1300.75,686.836 1301.31,686.836 1301.87,686.836 1302.43,686.836 1302.99,686.836 1303.55,686.836 1304.1,686.836 1304.66,686.836 1305.22,686.836 1305.78,686.836 1306.34,686.836 1306.9,686.836 1307.46,686.836 1308.02,686.836 1308.58,686.836 1309.14,686.836 1309.7,686.836 1310.26,686.836 1310.82,686.836 1311.38,686.836 1311.93,686.836 1312.49,686.836 1313.05,686.836 1313.61,686.836 1314.17,686.836 1314.73,686.836 1315.29,686.836 1315.85,686.836 1316.41,686.836 1316.97,686.836 1317.53,686.836 1318.09,686.836 1318.65,686.836 1319.2,686.836 1319.76,686.836 1320.32,686.836 1320.88,686.836 1321.44,686.836 1322,686.836 1322.56,686.836 1323.12,686.836 1323.68,686.836 1324.24,686.836 1324.8,686.836 1325.36,686.836 1325.92,686.836 1326.47,686.836 1327.03,686.836 1327.59,686.836 1328.15,686.836 1328.71,686.836 1329.27,686.836 1329.83,686.836 1330.39,686.836 1330.95,686.836 1331.51,686.836 1332.07,686.836 1332.63,686.836 1333.19,686.836 1333.75,686.836 1334.3,686.836 1334.86,686.836 1335.42,686.836 1335.98,686.836 1336.54,686.836 1337.1,686.836 1337.66,686.836 1338.22,686.836 1338.78,686.836 1339.34,686.836 1339.9,686.836 1340.46,686.836 1341.02,686.836 1341.57,686.836 1342.13,686.836 1342.69,686.836 1343.25,686.836 1343.81,686.836 1344.37,686.836 1344.93,686.836 1345.49,686.836 1346.05,686.836 1346.61,686.836 1347.17,686.836 1347.73,686.836 1348.29,686.836 1348.84,686.836 1349.4,686.836 1349.96,686.836 1350.52,686.836 1351.08,686.836 1351.64,686.836 1352.2,686.836 1352.76,686.836 1353.32,686.836 1353.88,686.836 1354.44,686.836 1355,686.836 1355.56,686.836 1356.12,686.836 1356.67,686.836 1357.23,686.836 1357.79,686.836 1358.35,686.836 1358.91,686.836 1359.47,686.836 1360.03,686.836 1360.59,686.836 1361.15,686.836 1361.71,686.836 1362.27,686.836 1362.83,686.836 1363.39,686.836 1363.94,686.836 1364.5,686.836 1365.06,686.836 1365.62,686.836 1366.18,686.836 1366.74,686.836 1367.3,686.836 1367.86,686.836 1368.42,686.836 1368.98,686.836 1369.54,686.836 1370.1,686.836 1370.66,686.836 1371.21,686.836 1371.77,686.836 1372.33,686.836 1372.89,686.836 1373.45,686.836 1374.01,686.836 1374.57,686.836 1375.13,686.836 1375.69,686.836 1376.25,686.836 1376.81,686.836 1377.37,686.836 1377.93,686.836 1378.49,686.836 1379.04,686.836 1379.6,686.836 1380.16,686.836 1380.72,686.836 1381.28,686.836 1381.84,686.836 1382.4,686.836 1382.96,686.836 1383.52,686.836 1384.08,686.836 1384.64,686.836 1385.2,686.836 1385.76,686.836 1386.31,686.836 1386.87,686.836 1387.43,686.836 1387.99,686.836 1388.55,686.836 1389.11,686.836 1389.67,686.836 1390.23,686.836 1390.79,686.836 1391.35,686.836 1391.91,686.836 1392.47,686.836 1393.03,686.836 1393.58,686.836 1394.14,686.836 1394.7,686.836 1395.26,686.836 1395.82,686.836 1396.38,686.836 1396.94,686.836 1397.5,686.836 1398.06,686.836 1398.62,686.836 1399.18,686.836 1399.74,686.836 1400.3,686.836 1400.86,686.836 1401.41,686.836 1401.97,686.836 1402.53,686.836 1403.09,686.836 1403.65,686.836 1404.21,686.836 1404.77,686.836 1405.33,686.836 1405.89,686.836 1406.45,686.836 1407.01,686.836 1407.57,686.836 1408.13,686.836 1408.68,686.836 1409.24,686.836 1409.8,686.836 1410.36,686.836 1410.92,686.836 1411.48,686.836 1412.04,686.836 1412.6,686.836 1413.16,686.836 1413.72,686.836 1414.28,686.836 1414.84,686.836 1415.4,686.836 1415.95,686.836 1416.51,686.836 1417.07,686.836 1417.63,686.836 1418.19,686.836 1418.75,686.836 1419.31,686.836 1419.87,686.836 1420.43,686.836 1420.99,686.836 1421.55,686.836 1422.11,686.836 1422.67,686.836 1423.23,686.836 1423.78,686.836 1424.34,686.836 1424.9,686.836 1425.46,686.836 1426.02,686.836 1426.58,686.836 1427.14,686.836 1427.7,686.836 1428.26,686.836 1428.82,686.836 1429.38,686.836 1429.94,686.836 1430.5,686.836 1431.05,686.836 1431.61,686.836 1432.17,686.836 1432.73,686.836 1433.29,686.836 1433.85,686.836 1434.41,686.836 1434.97,686.836 1435.53,686.836 1436.09,686.836 1436.65,686.836 1437.21,686.836 1437.77,686.836 1438.33,686.836 1438.88,686.836 1439.44,686.836 1440,686.836 1440.56,686.836 1441.12,686.836 1441.68,686.836 1442.24,686.836 1442.8,686.836 1443.36,686.836 1443.92,686.836 1444.48,686.836 1445.04,686.836 1445.6,686.836 1446.15,686.836 1446.71,686.836 1447.27,686.836 1447.83,686.836 1448.39,686.836 1448.95,686.836 1449.51,686.836 1450.07,686.836 1450.63,686.836 1451.19,686.836 1451.75,686.836 1452.31,686.836 1452.87,686.836 1453.42,686.836 1453.98,686.836 1454.54,686.836 1455.1,686.836 1455.66,686.836 1456.22,686.836 1456.78,686.836 1457.34,686.836 1457.9,686.836 1458.46,686.836 1459.02,686.836 1459.58,686.836 1460.14,686.836 1460.7,686.836 1461.25,686.836 1461.81,686.836 1462.37,686.836 1462.93,686.836 1463.49,686.836 1464.05,686.836 1464.61,686.836 1465.17,686.836 1465.73,686.836 1466.29,686.836 1466.85,686.836 1467.41,686.836 1467.97,686.836 1468.52,686.836 1469.08,686.836 1469.64,686.836 1470.2,686.836 1470.76,686.836 1471.32,686.836 1471.88,686.836 1472.44,686.836 1473,686.836 1473.56,686.836 1474.12,686.836 1474.68,686.836 1475.24,686.836 1475.79,686.836 1476.35,686.836 1476.91,686.836 1477.47,686.836 1478.03,686.836 1478.59,686.836 1479.15,686.836 1479.71,686.836 1480.27,686.836 1480.83,686.836 1481.39,686.836 1481.95,686.836 1482.51,686.836 1483.07,686.836 1483.62,686.836 1484.18,686.836 1484.74,686.836 1485.3,686.836 1485.86,686.836 1486.42,686.836 1486.98,686.836 1487.54,686.836 1488.1,686.836 1488.66,686.836 1489.22,686.836 1489.78,686.836 1490.34,686.836 1490.89,686.836 1491.45,686.836 1492.01,686.836 1492.57,686.836 1493.13,686.836 1493.69,686.836 1494.25,686.836 1494.81,686.836 1495.37,686.836 1495.93,686.836 1496.49,686.836 1497.05,686.836 1497.61,686.836 1498.16,686.836 1498.72,686.836 1499.28,686.836 1499.84,686.836 1500.4,686.836 1500.96,686.836 1501.52,686.836 1502.08,686.836 1502.64,686.836 1503.2,686.836 1503.76,686.836 1504.32,686.836 1504.88,686.836 1505.44,686.836 1505.99,686.836 1506.55,686.836 1507.11,686.836 1507.67,686.836 1508.23,686.836 1508.79,686.836 1509.35,686.836 1509.91,686.836 1510.47,686.836 1511.03,686.836 1511.59,686.836 1512.15,686.836 1512.71,686.836 1513.26,686.836 1513.82,686.836 1514.38,686.836 1514.94,686.836 1515.5,686.836 1516.06,686.836 1516.62,686.836 1517.18,686.836 1517.74,686.836 1518.3,686.836 1518.86,686.836 1519.42,686.836 1519.98,686.836 1520.53,686.836 1521.09,686.836 1521.65,686.836 1522.21,686.836 1522.77,686.836 1523.33,686.836 1523.89,686.836 1524.45,686.836 1525.01,686.836 1525.57,686.836 1526.13,686.836 1526.69,686.836 1527.25,686.836 1527.81,686.836 1528.36,686.836 1528.92,686.836 1529.48,686.836 1530.04,686.836 1530.6,686.836 1531.16,686.836 1531.72,686.836 1532.28,686.836 1532.84,686.836 1533.4,686.836 1533.96,686.836 1534.52,686.836 1535.08,686.836 1535.63,686.836 1536.19,686.836 1536.75,686.836 1537.31,686.836 1537.87,686.836 1538.43,686.836 1538.99,686.836 1539.55,686.836 1540.11,686.836 1540.67,686.836 1541.23,686.836 1541.79,686.836 1542.35,686.836 1542.9,686.836 1543.46,686.836 1544.02,686.836 1544.58,686.836 1545.14,686.836 1545.7,686.836 1546.26,686.836 1546.82,686.836 1547.38,686.836 1547.94,686.836 1548.5,686.836 1549.06,686.836 1549.62,686.836 1550.18,686.836 1550.73,686.836 1551.29,686.836 1551.85,686.836 1552.41,686.836 1552.97,686.836 1553.53,686.836 1554.09,686.836 1554.65,686.836 1555.21,686.836 1555.77,686.836 1556.33,686.836 1556.89,686.836 1557.45,686.836 1558,686.836 1558.56,686.836 1559.12,686.836 1559.68,686.836 1560.24,686.836 1560.8,686.836 1561.36,686.836 1561.92,686.836 1562.48,686.836 1563.04,686.836 1563.6,686.836 1564.16,686.836 1564.72,686.836 1565.28,686.836 1565.83,686.836 1566.39,686.836 1566.95,686.836 1567.51,686.836 1568.07,686.836 1568.63,686.836 1569.19,686.836 1569.75,686.836 1570.31,686.836 1570.87,686.836 1571.43,686.836 1571.99,686.836 1572.55,686.836 1573.1,686.836 1573.66,686.836 1574.22,686.836 1574.78,686.836 1575.34,686.836 1575.9,686.836 1576.46,686.836 1577.02,686.836 1577.58,686.836 1578.14,686.836 1578.7,686.836 1579.26,686.836 1579.82,686.836 1580.37,686.836 1580.93,686.836 1581.49,686.836 1582.05,686.836 1582.61,686.836 1583.17,686.836 1583.73,686.836 1584.29,686.836 1584.85,686.836 1585.41,686.836 1585.97,686.836 1586.53,686.836 1587.09,686.836 1587.65,686.836 1588.2,686.836 1588.76,686.836 1589.32,686.836 1589.88,686.836 1590.44,686.836 1591,686.836 1591.56,686.836 1592.12,686.836 1592.68,686.836 1593.24,686.836 1593.8,686.836 1594.36,686.836 1594.92,686.836 1595.47,686.836 1596.03,686.836 1596.59,686.836 1597.15,686.836 1597.71,686.836 1598.27,686.836 1598.83,686.836 1599.39,686.836 1599.95,686.836 1600.51,686.836 1601.07,686.836 1601.63,686.836 1602.19,686.836 1602.74,686.836 1603.3,686.836 1603.86,686.836 1604.42,686.836 1604.98,686.836 1605.54,686.836 1606.1,686.836 1606.66,686.836 1607.22,686.836 1607.78,686.836 1608.34,686.836 1608.9,686.836 1609.46,686.836 1610.02,686.836 1610.57,686.836 1611.13,686.836 1611.69,686.836 1612.25,686.836 1612.81,686.836 1613.37,686.836 1613.93,686.836 1614.49,686.836 1615.05,686.836 1615.61,686.836 1616.17,686.836 1616.73,686.836 1617.29,686.836 1617.84,686.836 1618.4,686.836 1618.96,686.836 1619.52,686.836 1620.08,686.836 1620.64,686.836 1621.2,686.836 1621.76,686.836 1622.32,686.836 1622.88,686.836 1623.44,686.836 1624,686.836 1624.56,686.836 1625.11,686.836 1625.67,686.836 1626.23,686.836 1626.79,686.836 1627.35,686.836 1627.91,686.836 1628.47,686.836 1629.03,686.836 1629.59,686.836 1630.15,686.836 1630.71,686.836 1631.27,686.836 1631.83,686.836 1632.39,686.836 1632.94,686.836 1633.5,686.836 1634.06,686.836 1634.62,686.836 1635.18,686.836 1635.74,686.836 1636.3,686.836 1636.86,686.836 1637.42,686.836 1637.98,686.836 1638.54,686.836 1639.1,686.836 1639.66,686.836 1640.21,686.836 1640.77,686.836 1641.33,686.836 1641.89,686.836 1642.45,686.836 1643.01,686.836 1643.57,686.836 1644.13,686.836 1644.69,686.836 1645.25,686.836 1645.81,686.836 1646.37,686.836 1646.93,686.836 1647.48,686.836 1648.04,686.836 1648.6,686.836 1649.16,686.836 1649.72,686.836 1650.28,686.836 1650.84,686.836 1651.4,686.836 1651.96,686.836 1652.52,686.836 1653.08,686.836 1653.64,686.836 1654.2,686.836 1654.76,686.836 1655.31,686.836 1655.87,686.836 1656.43,686.836 1656.99,686.836 1657.55,686.836 1658.11,686.836 1658.67,686.836 1659.23,686.836 1659.79,686.836 1660.35,686.836 1660.91,686.836 1661.47,686.836 1662.03,686.836 1662.58,686.836 1663.14,686.836 1663.7,686.836 1664.26,686.836 1664.82,686.836 1665.38,686.836 1665.94,686.836 1666.5,686.836 1667.06,686.836 1667.62,686.836 1668.18,686.836 1668.74,686.836 1669.3,686.836 1669.85,686.836 1670.41,686.836 1670.97,686.836 1671.53,686.836 1672.09,686.836 1672.65,686.836 1673.21,686.836 1673.77,686.836 1674.33,686.836 1674.89,686.836 1675.45,686.836 1676.01,686.836 1676.57,686.836 1677.13,686.836 1677.68,686.836 1678.24,686.836 1678.8,686.836 1679.36,686.836 1679.92,686.836 1680.48,686.836 1681.04,686.836 1681.6,686.836 1682.16,686.836 1682.72,686.836 1683.28,686.836 1683.84,686.836 1684.4,686.836 1684.95,686.836 1685.51,686.836 1686.07,686.836 1686.63,686.836 1687.19,686.836 1687.75,686.836 1688.31,686.836 1688.87,686.836 1689.43,686.836 1689.99,686.836 1690.55,686.836 1691.11,686.836 1691.67,686.836 1692.23,686.836 1692.78,686.836 1693.34,686.836 1693.9,686.836 1694.46,686.836 1695.02,686.836 1695.58,686.836 1696.14,686.836 1696.7,686.836 1697.26,686.836 1697.82,686.836 1698.38,686.836 1698.94,686.836 1699.5,686.836 1700.05,686.836 1700.61,686.836 1701.17,686.836 1701.73,686.836 1702.29,686.836 1702.85,686.836 1703.41,686.836 1703.97,686.836 1704.53,686.836 1705.09,686.836 1705.65,686.836 1706.21,686.836 1706.77,686.836 1707.32,686.836 1707.88,686.836 1708.44,686.836 1709,686.836 1709.56,686.836 1710.12,686.836 1710.68,686.836 1711.24,686.836 1711.8,686.836 1712.36,686.836 1712.92,686.836 1713.48,686.836 1714.04,686.836 1714.6,686.836 1715.15,686.836 1715.71,686.836 1716.27,686.836 1716.83,686.836 1717.39,686.836 1717.95,686.836 1718.51,686.836 1719.07,686.836 1719.63,686.836 1720.19,686.836 1720.75,686.836 1721.31,686.836 1721.87,686.836 1722.42,686.836 1722.98,686.836 1723.54,686.836 1724.1,686.836 1724.66,686.836 1725.22,686.836 1725.78,686.836 1726.34,686.836 1726.9,686.836 1727.46,686.836 1728.02,686.836 1728.58,686.836 1729.14,686.836 1729.69,686.836 1730.25,686.836 1730.81,686.836 1731.37,686.836 1731.93,686.836 1732.49,686.836 1733.05,686.836 1733.61,686.836 1734.17,686.836 1734.73,686.836 1735.29,686.836 1735.85,686.836 1736.41,686.836 1736.97,686.836 1737.52,686.836 1738.08,686.836 1738.64,686.836 1739.2,686.836 1739.76,686.836 1740.32,686.836 1740.88,686.836 1741.44,686.836 1742,686.836 1742.56,686.836 1743.12,686.836 1743.68,686.836 1744.24,686.836 1744.79,686.836 1745.35,686.836 1745.91,686.836 1746.47,686.836 1747.03,686.836 1747.59,686.836 1748.15,686.836 1748.71,686.836 1749.27,686.836 1749.83,686.836 1750.39,686.836 1750.95,686.836 1751.51,686.836 1752.06,686.836 1752.62,686.836 1753.18,686.836 1753.74,686.836 1754.3,686.836 1754.86,686.836 1755.42,686.836 1755.98,686.836 1756.54,686.836 1757.1,686.836 1757.66,686.836 1758.22,686.836 1758.78,686.836 1759.34,686.836 1759.89,686.836 1760.45,686.836 1761.01,686.836 1761.57,686.836 1762.13,686.836 1762.69,686.836 1763.25,686.836 1763.81,686.836 1764.37,686.836 1764.93,686.836 1765.49,686.836 1766.05,686.836 1766.61,686.836 1767.16,686.836 1767.72,686.836 1768.28,686.836 1768.84,686.836 1769.4,686.836 1769.96,686.836 1770.52,686.836 1771.08,686.836 1771.64,686.836 1772.2,686.836 1772.76,686.836 1773.32,686.836 1773.88,686.836 1774.43,686.836 1774.99,686.836 1775.55,686.836 1776.11,686.836 1776.67,686.836 1777.23,686.836 1777.79,686.836 1778.35,686.836 1778.91,686.836 1779.47,686.836 1780.03,686.836 1780.59,686.836 1781.15,686.836 1781.71,686.836 1782.26,686.836 1782.82,686.836 1783.38,686.836 1783.94,686.836 1784.5,686.836 1785.06,686.836 1785.62,686.836 1786.18,686.836 1786.74,686.836 1787.3,686.836 1787.86,686.836 1788.42,686.836 1788.98,686.836 1789.53,686.836 1790.09,686.836 1790.65,686.836 1791.21,686.836 1791.77,686.836 1792.33,686.836 1792.89,686.836 1793.45,686.836 1794.01,686.836 1794.57,686.836 1795.13,686.836 1795.69,686.836 1796.25,686.836 1796.8,686.836 1797.36,686.836 1797.92,686.836 1798.48,686.836 1799.04,686.836 1799.6,686.836 1800.16,686.836 1800.72,686.836 1801.28,686.836 1801.84,686.836 1802.4,686.836 1802.96,686.836 1803.52,686.836 1804.08,686.836 1804.63,686.836 1805.19,686.836 1805.75,686.836 1806.31,686.836 1806.87,686.836 1807.43,686.836 1807.99,686.836 1808.55,686.836 1809.11,686.836 1809.67,686.836 1810.23,686.836 1810.79,686.836 1811.35,686.836 1811.9,686.836 1812.46,686.836 1813.02,686.836 1813.58,686.836 1814.14,686.836 1814.7,686.836 1815.26,686.836 1815.82,686.836 1816.38,686.836 1816.94,686.836 1817.5,686.836 1818.06,686.836 1818.62,686.836 1819.18,686.836 1819.73,686.836 1820.29,686.836 1820.85,686.836 1821.41,686.836 1821.97,686.836 1822.53,686.836 1823.09,686.836 1823.65,686.836 1824.21,686.836 1824.77,686.836 1825.33,686.836 1825.89,686.836 1826.45,686.836 1827,686.836 1827.56,686.836 1828.12,686.836 1828.68,686.836 1829.24,686.836 1829.8,686.836 1830.36,686.836 1830.92,686.836 1831.48,686.836 1832.04,686.836 1832.6,686.836 1833.16,686.836 1833.72,686.836 1834.27,686.836 1834.83,686.836 1835.39,686.836 1835.95,686.836 1836.51,686.836 1837.07,686.836 1837.63,686.836 1838.19,686.836 \"/>\n<path clip-path=\"url(#clip003)\" d=\"M720.247 684.447 L720.806 684.447 L721.365 684.447 L721.924 684.447 L722.484 684.447 L723.043 684.447 L723.602 684.447 L724.161 684.447 L724.721 684.447 L725.28 684.447 L725.839 684.447 L726.398 684.447 L726.958 684.447 L727.517 684.447 L728.076 684.447 L728.635 684.447 L729.195 684.447 L729.754 684.447 L730.313 684.447 L730.872 684.447 L731.432 684.447 L731.991 684.447 L732.55 684.447 L733.109 684.447 L733.669 684.447 L734.228 684.447 L734.787 684.447 L735.346 684.447 L735.906 684.447 L736.465 684.447 L737.024 684.447 L737.583 684.447 L738.143 684.447 L738.702 684.447 L739.261 684.447 L739.82 684.447 L740.38 684.447 L740.939 684.447 L741.498 684.447 L742.057 684.447 L742.617 684.447 L743.176 684.447 L743.735 684.447 L744.294 684.447 L744.854 684.447 L745.413 684.447 L745.972 684.447 L746.531 684.447 L747.091 684.447 L747.65 684.447 L748.209 684.447 L748.768 684.447 L749.328 684.447 L749.887 684.447 L750.446 684.447 L751.005 684.447 L751.565 684.447 L752.124 684.447 L752.683 684.447 L753.242 684.447 L753.802 684.447 L754.361 684.447 L754.92 684.447 L755.479 684.447 L756.039 684.447 L756.598 684.447 L757.157 684.447 L757.716 684.447 L758.276 684.447 L758.835 684.447 L759.394 684.447 L759.953 684.447 L760.513 684.447 L761.072 684.447 L761.631 684.447 L762.19 684.447 L762.75 684.447 L763.309 684.447 L763.868 684.447 L764.427 684.447 L764.987 684.447 L765.546 684.447 L766.105 684.447 L766.664 684.447 L767.224 684.447 L767.783 684.447 L768.342 684.447 L768.901 684.447 L769.461 684.447 L770.02 684.447 L770.579 684.447 L771.138 684.447 L771.698 684.447 L772.257 684.447 L772.816 684.447 L773.375 684.447 L773.935 684.447 L774.494 684.447 L775.053 684.447 L775.612 684.447 L776.172 684.447 L776.731 684.447 L777.29 684.447 L777.849 684.447 L778.409 684.447 L778.968 684.447 L779.527 684.447 L780.086 684.447 L780.646 684.447 L781.205 684.447 L781.764 684.447 L782.323 684.447 L782.883 684.447 L783.442 684.447 L784.001 684.447 L784.56 684.447 L785.12 684.447 L785.679 684.447 L786.238 684.447 L786.797 684.447 L787.357 684.447 L787.916 684.447 L788.475 684.447 L789.034 684.447 L789.594 684.447 L790.153 684.447 L790.712 684.447 L791.271 684.447 L791.831 684.447 L792.39 684.447 L792.949 684.447 L793.508 684.447 L794.068 684.447 L794.627 684.447 L795.186 684.447 L795.745 684.447 L796.305 684.447 L796.864 684.447 L797.423 684.447 L797.982 684.447 L798.542 684.447 L799.101 684.447 L799.66 684.447 L800.219 684.447 L800.779 684.447 L801.338 684.447 L801.897 684.447 L802.456 684.447 L803.016 684.447 L803.575 684.447 L804.134 684.447 L804.693 684.447 L805.253 684.447 L805.812 684.447 L806.371 684.447 L806.931 684.447 L807.49 684.447 L808.049 684.447 L808.608 684.447 L809.168 684.447 L809.727 684.447 L810.286 684.447 L810.845 684.447 L811.405 684.447 L811.964 684.447 L812.523 684.447 L813.082 684.447 L813.642 684.447 L814.201 684.447 L814.76 684.447 L815.319 684.447 L815.879 684.447 L816.438 684.447 L816.997 684.447 L817.556 684.447 L818.116 684.447 L818.675 684.447 L819.234 684.447 L819.793 684.447 L820.353 684.447 L820.912 684.447 L821.471 684.447 L822.03 684.447 L822.59 684.447 L823.149 684.447 L823.708 684.447 L824.267 684.447 L824.827 684.447 L825.386 684.447 L825.945 684.447 L826.504 684.447 L827.064 684.447 L827.623 684.447 L828.182 684.447 L828.741 684.447 L829.301 684.447 L829.86 684.447 L830.419 684.447 L830.978 684.447 L831.538 684.447 L832.097 684.447 L832.656 684.447 L833.215 684.447 L833.775 684.447 L834.334 684.447 L834.893 684.447 L835.452 684.447 L836.012 684.447 L836.571 684.447 L837.13 684.447 L837.689 684.447 L838.249 684.447 L838.808 684.447 L839.367 684.447 L839.926 684.447 L840.486 684.447 L841.045 684.447 L841.604 684.447 L842.163 684.447 L842.723 684.447 L843.282 684.447 L843.841 684.447 L844.4 684.447 L844.96 684.447 L845.519 684.447 L846.078 684.447 L846.637 684.447 L847.197 684.447 L847.756 684.447 L848.315 684.447 L848.874 684.447 L849.434 684.447 L849.993 684.447 L850.552 684.447 L851.111 684.447 L851.671 684.447 L852.23 684.447 L852.789 684.447 L853.348 684.447 L853.908 684.447 L854.467 684.447 L855.026 684.447 L855.585 684.447 L856.145 684.447 L856.704 684.447 L857.263 684.447 L857.822 684.447 L858.382 684.447 L858.941 684.447 L859.5 684.447 L860.059 684.447 L860.619 684.447 L861.178 684.447 L861.737 684.447 L862.296 684.447 L862.856 684.447 L863.415 684.447 L863.974 684.447 L864.533 684.447 L865.093 684.447 L865.652 684.447 L866.211 684.447 L866.77 684.447 L867.33 684.447 L867.889 684.447 L868.448 684.447 L869.007 684.447 L869.567 684.447 L870.126 684.447 L870.685 684.447 L871.244 684.447 L871.804 684.447 L872.363 684.447 L872.922 684.447 L873.481 684.447 L874.041 684.447 L874.6 684.447 L875.159 684.447 L875.718 684.447 L876.278 684.447 L876.837 684.447 L877.396 684.447 L877.955 684.447 L878.515 684.447 L879.074 684.447 L879.633 684.447 L880.192 684.447 L880.752 684.447 L881.311 684.447 L881.87 684.447 L882.429 684.447 L882.989 684.447 L883.548 684.447 L884.107 684.447 L884.666 684.447 L885.226 684.447 L885.785 684.447 L886.344 684.447 L886.903 684.447 L887.463 684.447 L888.022 684.447 L888.581 684.447 L889.14 684.447 L889.7 684.447 L890.259 684.447 L890.818 684.447 L891.377 684.447 L891.937 684.447 L892.496 684.447 L893.055 684.447 L893.614 684.447 L894.174 684.447 L894.733 684.447 L895.292 684.447 L895.851 684.447 L896.411 684.447 L896.97 684.447 L897.529 684.447 L898.088 684.447 L898.648 684.447 L899.207 684.447 L899.766 684.447 L900.325 684.447 L900.885 684.447 L901.444 684.447 L902.003 684.447 L902.562 684.447 L903.122 684.447 L903.681 684.447 L904.24 684.447 L904.799 684.447 L905.359 684.447 L905.918 684.447 L906.477 684.447 L907.036 684.447 L907.596 684.447 L908.155 684.447 L908.714 684.447 L909.273 684.447 L909.833 684.447 L910.392 684.447 L910.951 684.447 L911.51 684.447 L912.07 684.447 L912.629 684.447 L913.188 684.447 L913.747 684.447 L914.307 684.447 L914.866 684.447 L915.425 684.447 L915.984 684.447 L916.544 684.447 L917.103 684.447 L917.662 684.447 L918.221 684.447 L918.781 684.447 L919.34 684.447 L919.899 684.447 L920.458 684.447 L921.018 684.447 L921.577 684.447 L922.136 684.447 L922.695 684.447 L923.255 684.447 L923.814 684.447 L924.373 684.447 L924.932 684.447 L925.492 684.447 L926.051 684.447 L926.61 684.447 L927.169 684.447 L927.729 684.447 L928.288 684.447 L928.847 684.447 L929.406 684.447 L929.966 684.447 L930.525 684.447 L931.084 684.447 L931.644 684.447 L932.203 684.447 L932.762 684.447 L933.321 684.447 L933.881 684.447 L934.44 684.447 L934.999 684.447 L935.558 684.447 L936.118 684.447 L936.677 684.447 L937.236 684.447 L937.795 684.447 L938.355 684.447 L938.914 684.447 L939.473 684.447 L940.032 684.447 L940.592 684.447 L941.151 684.447 L941.71 684.447 L942.269 684.447 L942.829 684.447 L943.388 684.447 L943.947 684.447 L944.506 684.447 L945.066 684.447 L945.625 684.447 L946.184 684.447 L946.743 684.447 L947.303 684.447 L947.862 684.447 L948.421 684.447 L948.98 684.447 L949.54 684.447 L950.099 684.447 L950.658 684.447 L951.217 684.447 L951.777 684.447 L952.336 684.447 L952.895 684.447 L953.454 684.447 L954.014 684.447 L954.573 684.447 L955.132 684.447 L955.691 684.447 L956.251 684.447 L956.81 684.447 L957.369 684.447 L957.928 684.447 L958.488 684.447 L959.047 684.447 L959.606 684.447 L960.165 684.447 L960.725 684.447 L961.284 684.447 L961.843 684.447 L962.402 684.447 L962.962 684.447 L963.521 684.447 L964.08 684.447 L964.639 684.447 L965.199 684.447 L965.758 684.447 L966.317 684.447 L966.876 684.447 L967.436 684.447 L967.995 684.447 L968.554 684.447 L969.113 684.447 L969.673 684.447 L970.232 684.447 L970.791 684.447 L971.35 684.447 L971.91 684.447 L972.469 684.447 L973.028 684.447 L973.587 684.447 L974.147 684.447 L974.706 684.447 L975.265 684.447 L975.824 684.447 L976.384 684.447 L976.943 684.447 L977.502 684.447 L978.061 684.447 L978.621 684.447 L979.18 684.447 L979.739 684.447 L980.298 684.447 L980.858 684.447 L981.417 684.447 L981.976 684.447 L982.535 684.447 L983.095 684.447 L983.654 684.447 L984.213 684.447 L984.772 684.447 L985.332 684.447 L985.891 684.447 L986.45 684.447 L987.009 684.447 L987.569 684.447 L988.128 684.447 L988.687 684.447 L989.246 684.447 L989.806 684.447 L990.365 684.447 L990.924 684.447 L991.483 684.447 L992.043 684.447 L992.602 684.447 L993.161 684.447 L993.72 684.447 L994.28 684.447 L994.839 684.447 L995.398 684.447 L995.957 684.447 L996.517 684.447 L997.076 684.447 L997.635 684.447 L998.194 684.447 L998.754 684.447 L999.313 684.447 L999.872 684.447 L1000.43 684.447 L1000.99 684.447 L1001.55 684.447 L1002.11 684.447 L1002.67 684.447 L1003.23 684.447 L1003.79 684.447 L1004.35 684.447 L1004.91 684.447 L1005.46 684.447 L1006.02 684.447 L1006.58 684.447 L1007.14 684.447 L1007.7 684.447 L1008.26 684.447 L1008.82 684.447 L1009.38 684.447 L1009.94 684.447 L1010.5 684.447 L1011.06 684.447 L1011.62 684.447 L1012.18 684.447 L1012.73 684.447 L1013.29 684.447 L1013.85 684.447 L1014.41 684.447 L1014.97 684.447 L1015.53 684.447 L1016.09 684.447 L1016.65 684.447 L1017.21 684.447 L1017.77 684.447 L1018.33 684.447 L1018.89 684.447 L1019.45 684.447 L1020.01 684.447 L1020.56 684.447 L1021.12 684.447 L1021.68 684.447 L1022.24 684.447 L1022.8 684.447 L1023.36 684.447 L1023.92 684.447 L1024.48 684.447 L1025.04 684.447 L1025.6 684.447 L1026.16 684.447 L1026.72 684.447 L1027.28 684.447 L1027.83 684.447 L1028.39 684.447 L1028.95 684.447 L1029.51 684.447 L1030.07 684.447 L1030.63 684.447 L1031.19 684.447 L1031.75 684.447 L1032.31 684.447 L1032.87 684.447 L1033.43 684.447 L1033.99 684.447 L1034.55 684.447 L1035.1 684.447 L1035.66 684.447 L1036.22 684.447 L1036.78 684.447 L1037.34 684.447 L1037.9 684.447 L1038.46 684.447 L1039.02 684.447 L1039.58 684.447 L1040.14 684.447 L1040.7 684.447 L1041.26 684.447 L1041.82 684.447 L1042.38 684.447 L1042.93 684.447 L1043.49 684.447 L1044.05 684.447 L1044.61 684.447 L1045.17 684.447 L1045.73 684.447 L1046.29 684.447 L1046.85 684.447 L1047.41 684.447 L1047.97 684.447 L1048.53 684.447 L1049.09 684.447 L1049.65 684.447 L1050.2 684.447 L1050.76 684.447 L1051.32 684.447 L1051.88 684.447 L1052.44 684.447 L1053 684.447 L1053.56 684.447 L1054.12 684.447 L1054.68 684.447 L1055.24 684.447 L1055.8 684.447 L1056.36 684.447 L1056.92 684.447 L1057.48 684.447 L1058.03 684.447 L1058.59 684.447 L1059.15 684.447 L1059.71 684.447 L1060.27 684.447 L1060.83 684.447 L1061.39 684.447 L1061.95 684.447 L1062.51 684.447 L1063.07 684.447 L1063.63 684.447 L1064.19 684.447 L1064.75 684.447 L1065.3 684.447 L1065.86 684.447 L1066.42 684.447 L1066.98 684.447 L1067.54 684.447 L1068.1 684.447 L1068.66 684.447 L1069.22 684.447 L1069.78 684.447 L1070.34 684.447 L1070.9 684.447 L1071.46 684.447 L1072.02 684.447 L1072.57 684.447 L1073.13 684.447 L1073.69 684.447 L1074.25 684.447 L1074.81 684.447 L1075.37 684.447 L1075.93 684.447 L1076.49 684.447 L1077.05 684.447 L1077.61 684.447 L1078.17 684.447 L1078.73 684.447 L1079.29 684.447 L1079.85 684.447 L1080.4 684.447 L1080.96 684.447 L1081.52 684.447 L1082.08 684.447 L1082.64 684.447 L1083.2 684.447 L1083.76 684.447 L1084.32 684.447 L1084.88 684.447 L1085.44 684.447 L1086 684.447 L1086.56 684.447 L1087.12 684.447 L1087.67 684.447 L1088.23 684.447 L1088.79 684.447 L1089.35 684.447 L1089.91 684.447 L1090.47 684.447 L1091.03 684.447 L1091.59 684.447 L1092.15 684.447 L1092.71 684.447 L1093.27 684.447 L1093.83 684.447 L1094.39 684.447 L1094.94 684.447 L1095.5 684.447 L1096.06 684.447 L1096.62 684.447 L1097.18 684.447 L1097.74 684.447 L1098.3 684.447 L1098.86 684.447 L1099.42 684.447 L1099.98 684.447 L1100.54 684.447 L1101.1 684.447 L1101.66 684.447 L1102.22 684.447 L1102.77 684.447 L1103.33 684.447 L1103.89 684.447 L1104.45 684.447 L1105.01 684.447 L1105.57 684.447 L1106.13 684.447 L1106.69 684.447 L1107.25 684.447 L1107.81 684.447 L1108.37 684.447 L1108.93 684.447 L1109.49 684.447 L1110.04 684.447 L1110.6 684.447 L1111.16 684.447 L1111.72 684.447 L1112.28 684.447 L1112.84 684.447 L1113.4 684.447 L1113.96 684.447 L1114.52 684.447 L1115.08 684.447 L1115.64 684.447 L1116.2 684.447 L1116.76 684.447 L1117.31 684.447 L1117.87 684.447 L1118.43 684.447 L1118.99 684.447 L1119.55 684.447 L1120.11 684.447 L1120.67 684.447 L1121.23 684.447 L1121.79 684.447 L1122.35 684.447 L1122.91 684.447 L1123.47 684.447 L1124.03 684.447 L1124.59 684.447 L1125.14 684.447 L1125.7 684.447 L1126.26 684.447 L1126.82 684.447 L1127.38 684.447 L1127.94 684.447 L1128.5 684.447 L1129.06 684.447 L1129.62 684.447 L1130.18 684.447 L1130.74 684.447 L1131.3 684.447 L1131.86 684.447 L1132.41 684.447 L1132.97 684.447 L1133.53 684.447 L1134.09 684.447 L1134.65 684.447 L1135.21 684.447 L1135.77 684.447 L1136.33 684.447 L1136.89 684.447 L1137.45 684.447 L1138.01 684.447 L1138.57 684.447 L1139.13 684.447 L1139.68 684.447 L1140.24 684.447 L1140.8 684.447 L1141.36 684.447 L1141.92 684.447 L1142.48 684.447 L1143.04 684.447 L1143.6 684.447 L1144.16 684.447 L1144.72 684.447 L1145.28 684.447 L1145.84 684.447 L1146.4 684.447 L1146.96 684.447 L1147.51 684.447 L1148.07 684.447 L1148.63 684.447 L1149.19 684.447 L1149.75 684.447 L1150.31 684.447 L1150.87 684.447 L1151.43 684.447 L1151.99 684.447 L1152.55 684.447 L1153.11 684.447 L1153.67 684.447 L1154.23 684.447 L1154.78 684.447 L1155.34 684.447 L1155.9 684.447 L1156.46 684.447 L1157.02 684.447 L1157.58 684.447 L1158.14 684.447 L1158.7 684.447 L1159.26 684.447 L1159.82 684.447 L1160.38 684.447 L1160.94 684.447 L1161.5 684.447 L1162.05 684.447 L1162.61 684.447 L1163.17 684.447 L1163.73 684.447 L1164.29 684.447 L1164.85 684.447 L1165.41 684.447 L1165.97 684.447 L1166.53 684.447 L1167.09 684.447 L1167.65 684.447 L1168.21 684.447 L1168.77 684.447 L1169.33 684.447 L1169.88 684.447 L1170.44 684.447 L1171 684.447 L1171.56 684.447 L1172.12 684.447 L1172.68 684.447 L1173.24 684.447 L1173.8 684.447 L1174.36 684.447 L1174.92 684.447 L1175.48 684.447 L1176.04 684.447 L1176.6 684.447 L1177.15 684.447 L1177.71 684.447 L1178.27 684.447 L1178.83 684.447 L1179.39 684.447 L1179.95 684.447 L1180.51 684.447 L1181.07 684.447 L1181.63 684.447 L1182.19 684.447 L1182.75 684.447 L1183.31 684.447 L1183.87 684.447 L1184.43 684.447 L1184.98 684.447 L1185.54 684.447 L1186.1 684.447 L1186.66 684.447 L1187.22 684.447 L1187.78 684.447 L1188.34 684.447 L1188.9 684.447 L1189.46 684.447 L1190.02 684.447 L1190.58 684.447 L1191.14 684.447 L1191.7 684.447 L1192.25 684.447 L1192.81 684.447 L1193.37 684.447 L1193.93 684.447 L1194.49 684.447 L1195.05 684.447 L1195.61 684.447 L1196.17 684.447 L1196.73 684.447 L1197.29 684.447 L1197.85 684.447 L1198.41 684.447 L1198.97 684.447 L1199.52 684.447 L1200.08 684.447 L1200.64 684.447 L1201.2 684.447 L1201.76 684.447 L1202.32 684.447 L1202.88 684.447 L1203.44 684.447 L1204 684.447 L1204.56 684.447 L1205.12 684.447 L1205.68 684.447 L1206.24 684.447 L1206.8 684.447 L1207.35 684.447 L1207.91 684.447 L1208.47 684.447 L1209.03 684.447 L1209.59 684.447 L1210.15 684.447 L1210.71 684.447 L1211.27 684.447 L1211.83 684.447 L1212.39 684.447 L1212.95 684.447 L1213.51 684.447 L1214.07 684.447 L1214.62 684.447 L1215.18 684.447 L1215.74 684.447 L1216.3 684.447 L1216.86 684.447 L1217.42 684.447 L1217.98 684.447 L1218.54 684.447 L1219.1 684.447 L1219.66 684.447 L1220.22 684.447 L1220.78 684.447 L1221.34 684.447 L1221.89 684.447 L1222.45 684.447 L1223.01 684.447 L1223.57 684.447 L1224.13 684.447 L1224.69 684.447 L1225.25 684.447 L1225.81 684.447 L1226.37 684.447 L1226.93 684.447 L1227.49 684.447 L1228.05 684.447 L1228.61 684.447 L1229.17 684.447 L1229.72 684.447 L1230.28 684.447 L1230.84 684.447 L1231.4 684.447 L1231.96 684.447 L1232.52 684.447 L1233.08 684.447 L1233.64 684.447 L1234.2 684.447 L1234.76 684.447 L1235.32 684.447 L1235.88 684.447 L1236.44 684.447 L1236.99 684.447 L1237.55 684.447 L1238.11 684.447 L1238.67 684.447 L1239.23 684.447 L1239.79 684.447 L1240.35 684.447 L1240.91 684.447 L1241.47 684.447 L1242.03 684.447 L1242.59 684.447 L1243.15 684.447 L1243.71 684.447 L1244.26 684.447 L1244.82 684.447 L1245.38 684.447 L1245.94 684.447 L1246.5 684.447 L1247.06 684.447 L1247.62 684.447 L1248.18 684.447 L1248.74 684.447 L1249.3 684.447 L1249.86 684.447 L1250.42 684.447 L1250.98 684.447 L1251.54 684.447 L1252.09 684.447 L1252.65 684.447 L1253.21 684.447 L1253.77 684.447 L1254.33 684.447 L1254.89 684.447 L1255.45 684.447 L1256.01 684.447 L1256.57 684.447 L1257.13 684.447 L1257.69 684.447 L1258.25 684.447 L1258.81 684.447 L1259.36 684.447 L1259.92 684.447 L1260.48 684.447 L1261.04 684.447 L1261.6 684.447 L1262.16 684.447 L1262.72 684.447 L1263.28 684.447 L1263.84 684.447 L1264.4 684.447 L1264.96 684.447 L1265.52 684.447 L1266.08 684.447 L1266.63 684.447 L1267.19 684.447 L1267.75 684.447 L1268.31 684.447 L1268.87 684.447 L1269.43 684.447 L1269.99 684.447 L1270.55 684.447 L1271.11 684.447 L1271.67 684.447 L1272.23 684.447 L1272.79 684.447 L1273.35 684.447 L1273.91 684.447 L1274.46 684.447 L1275.02 684.447 L1275.58 684.447 L1276.14 684.447 L1276.7 684.447 L1277.26 684.447 L1277.82 684.447 L1278.38 684.447 L1278.94 684.447 L1279.5 684.447 L1280.06 684.447 L1280.62 684.447 L1281.18 684.447 L1281.73 684.447 L1282.29 684.447 L1282.85 684.447 L1283.41 684.447 L1283.97 684.447 L1284.53 684.447 L1285.09 684.447 L1285.65 684.447 L1286.21 684.447 L1286.77 684.447 L1287.33 684.447 L1287.89 684.447 L1288.45 684.447 L1289 684.447 L1289.56 684.447 L1290.12 684.447 L1290.68 684.447 L1291.24 684.447 L1291.8 684.447 L1292.36 684.447 L1292.92 684.447 L1293.48 684.447 L1294.04 684.447 L1294.6 684.447 L1295.16 684.447 L1295.72 684.447 L1296.28 684.447 L1296.83 684.447 L1297.39 684.447 L1297.95 684.447 L1298.51 684.447 L1299.07 684.447 L1299.63 684.447 L1300.19 684.447 L1300.75 684.447 L1301.31 684.447 L1301.87 684.447 L1302.43 684.447 L1302.99 684.447 L1303.55 684.447 L1304.1 684.447 L1304.66 684.447 L1305.22 684.447 L1305.78 684.447 L1306.34 684.447 L1306.9 684.447 L1307.46 684.447 L1308.02 684.447 L1308.58 684.447 L1309.14 684.447 L1309.7 684.447 L1310.26 684.447 L1310.82 684.447 L1311.38 684.447 L1311.93 684.447 L1312.49 684.447 L1313.05 684.447 L1313.61 684.447 L1314.17 684.447 L1314.73 684.447 L1315.29 684.447 L1315.85 684.447 L1316.41 684.447 L1316.97 684.447 L1317.53 684.447 L1318.09 684.447 L1318.65 684.447 L1319.2 684.447 L1319.76 684.447 L1320.32 684.447 L1320.88 684.447 L1321.44 684.447 L1322 684.447 L1322.56 684.447 L1323.12 684.447 L1323.68 684.447 L1324.24 684.447 L1324.8 684.447 L1325.36 684.447 L1325.92 684.447 L1326.47 684.447 L1327.03 684.447 L1327.59 684.447 L1328.15 684.447 L1328.71 684.447 L1329.27 684.447 L1329.83 684.447 L1330.39 684.447 L1330.95 684.447 L1331.51 684.447 L1332.07 684.447 L1332.63 684.447 L1333.19 684.447 L1333.75 684.447 L1334.3 684.447 L1334.86 684.447 L1335.42 684.447 L1335.98 684.447 L1336.54 684.447 L1337.1 684.447 L1337.66 684.447 L1338.22 684.447 L1338.78 684.447 L1339.34 684.447 L1339.9 684.447 L1340.46 684.447 L1341.02 684.447 L1341.57 684.447 L1342.13 684.447 L1342.69 684.447 L1343.25 684.447 L1343.81 684.447 L1344.37 684.447 L1344.93 684.447 L1345.49 684.447 L1346.05 684.447 L1346.61 684.447 L1347.17 684.447 L1347.73 684.447 L1348.29 684.447 L1348.84 684.447 L1349.4 684.447 L1349.96 684.447 L1350.52 684.447 L1351.08 684.447 L1351.64 684.447 L1352.2 684.447 L1352.76 684.447 L1353.32 684.447 L1353.88 684.447 L1354.44 684.447 L1355 684.447 L1355.56 684.447 L1356.12 684.447 L1356.67 684.447 L1357.23 684.447 L1357.79 684.447 L1358.35 684.447 L1358.91 684.447 L1359.47 684.447 L1360.03 684.447 L1360.59 684.447 L1361.15 684.447 L1361.71 684.447 L1362.27 684.447 L1362.83 684.447 L1363.39 684.447 L1363.94 684.447 L1364.5 684.447 L1365.06 684.447 L1365.62 684.447 L1366.18 684.447 L1366.74 684.447 L1367.3 684.447 L1367.86 684.447 L1368.42 684.447 L1368.98 684.447 L1369.54 684.447 L1370.1 684.447 L1370.66 684.447 L1371.21 684.447 L1371.77 684.447 L1372.33 684.447 L1372.89 684.447 L1373.45 684.447 L1374.01 684.447 L1374.57 684.447 L1375.13 684.447 L1375.69 684.447 L1376.25 684.447 L1376.81 684.447 L1377.37 684.447 L1377.93 684.447 L1378.49 684.447 L1379.04 684.447 L1379.6 684.447 L1380.16 684.447 L1380.72 684.447 L1381.28 684.447 L1381.84 684.447 L1382.4 684.447 L1382.96 684.447 L1383.52 684.447 L1384.08 684.447 L1384.64 684.447 L1385.2 684.447 L1385.76 684.447 L1386.31 684.447 L1386.87 684.447 L1387.43 684.447 L1387.99 684.447 L1388.55 684.447 L1389.11 684.447 L1389.67 684.447 L1390.23 684.447 L1390.79 684.447 L1391.35 684.447 L1391.91 684.447 L1392.47 684.447 L1393.03 684.447 L1393.58 684.447 L1394.14 684.447 L1394.7 684.447 L1395.26 684.447 L1395.82 684.447 L1396.38 684.447 L1396.94 684.447 L1397.5 684.447 L1398.06 684.447 L1398.62 684.447 L1399.18 684.447 L1399.74 684.447 L1400.3 684.447 L1400.86 684.447 L1401.41 684.447 L1401.97 684.447 L1402.53 684.447 L1403.09 684.447 L1403.65 684.447 L1404.21 684.447 L1404.77 684.447 L1405.33 684.447 L1405.89 684.447 L1406.45 684.447 L1407.01 684.447 L1407.57 684.447 L1408.13 684.447 L1408.68 684.447 L1409.24 684.447 L1409.8 684.447 L1410.36 684.447 L1410.92 684.447 L1411.48 684.447 L1412.04 684.447 L1412.6 684.447 L1413.16 684.447 L1413.72 684.447 L1414.28 684.447 L1414.84 684.447 L1415.4 684.447 L1415.95 684.447 L1416.51 684.447 L1417.07 684.447 L1417.63 684.447 L1418.19 684.447 L1418.75 684.447 L1419.31 684.447 L1419.87 684.447 L1420.43 684.447 L1420.99 684.447 L1421.55 684.447 L1422.11 684.447 L1422.67 684.447 L1423.23 684.447 L1423.78 684.447 L1424.34 684.447 L1424.9 684.447 L1425.46 684.447 L1426.02 684.447 L1426.58 684.447 L1427.14 684.447 L1427.7 684.447 L1428.26 684.447 L1428.82 684.447 L1429.38 684.447 L1429.94 684.447 L1430.5 684.447 L1431.05 684.447 L1431.61 684.447 L1432.17 684.447 L1432.73 684.447 L1433.29 684.447 L1433.85 684.447 L1434.41 684.447 L1434.97 684.447 L1435.53 684.447 L1436.09 684.447 L1436.65 684.447 L1437.21 684.447 L1437.77 684.447 L1438.33 684.447 L1438.88 684.447 L1439.44 684.447 L1440 684.447 L1440.56 684.447 L1441.12 684.447 L1441.68 684.447 L1442.24 684.447 L1442.8 684.447 L1443.36 684.447 L1443.92 684.447 L1444.48 684.447 L1445.04 684.447 L1445.6 684.447 L1446.15 684.447 L1446.71 684.447 L1447.27 684.447 L1447.83 684.447 L1448.39 684.447 L1448.95 684.447 L1449.51 684.447 L1450.07 684.447 L1450.63 684.447 L1451.19 684.447 L1451.75 684.447 L1452.31 684.447 L1452.87 684.447 L1453.42 684.447 L1453.98 684.447 L1454.54 684.447 L1455.1 684.447 L1455.66 684.447 L1456.22 684.447 L1456.78 684.447 L1457.34 684.447 L1457.9 684.447 L1458.46 684.447 L1459.02 684.447 L1459.58 684.447 L1460.14 684.447 L1460.7 684.447 L1461.25 684.447 L1461.81 684.447 L1462.37 684.447 L1462.93 684.447 L1463.49 684.447 L1464.05 684.447 L1464.61 684.447 L1465.17 684.447 L1465.73 684.447 L1466.29 684.447 L1466.85 684.447 L1467.41 684.447 L1467.97 684.447 L1468.52 684.447 L1469.08 684.447 L1469.64 684.447 L1470.2 684.447 L1470.76 684.447 L1471.32 684.447 L1471.88 684.447 L1472.44 684.447 L1473 684.447 L1473.56 684.447 L1474.12 684.447 L1474.68 684.447 L1475.24 684.447 L1475.79 684.447 L1476.35 684.447 L1476.91 684.447 L1477.47 684.447 L1478.03 684.447 L1478.59 684.447 L1479.15 684.447 L1479.71 684.447 L1480.27 684.447 L1480.83 684.447 L1481.39 684.447 L1481.95 684.447 L1482.51 684.447 L1483.07 684.447 L1483.62 684.447 L1484.18 684.447 L1484.74 684.447 L1485.3 684.447 L1485.86 684.447 L1486.42 684.447 L1486.98 684.447 L1487.54 684.447 L1488.1 684.447 L1488.66 684.447 L1489.22 684.447 L1489.78 684.447 L1490.34 684.447 L1490.89 684.447 L1491.45 684.447 L1492.01 684.447 L1492.57 684.447 L1493.13 684.447 L1493.69 684.447 L1494.25 684.447 L1494.81 684.447 L1495.37 684.447 L1495.93 684.447 L1496.49 684.447 L1497.05 684.447 L1497.61 684.447 L1498.16 684.447 L1498.72 684.447 L1499.28 684.447 L1499.84 684.447 L1500.4 684.447 L1500.96 684.447 L1501.52 684.447 L1502.08 684.447 L1502.64 684.447 L1503.2 684.447 L1503.76 684.447 L1504.32 684.447 L1504.88 684.447 L1505.44 684.447 L1505.99 684.447 L1506.55 684.447 L1507.11 684.447 L1507.67 684.447 L1508.23 684.447 L1508.79 684.447 L1509.35 684.447 L1509.91 684.447 L1510.47 684.447 L1511.03 684.447 L1511.59 684.447 L1512.15 684.447 L1512.71 684.447 L1513.26 684.447 L1513.82 684.447 L1514.38 684.447 L1514.94 684.447 L1515.5 684.447 L1516.06 684.447 L1516.62 684.447 L1517.18 684.447 L1517.74 684.447 L1518.3 684.447 L1518.86 684.447 L1519.42 684.447 L1519.98 684.447 L1520.53 684.447 L1521.09 684.447 L1521.65 684.447 L1522.21 684.447 L1522.77 684.447 L1523.33 684.447 L1523.89 684.447 L1524.45 684.447 L1525.01 684.447 L1525.57 684.447 L1526.13 684.447 L1526.69 684.447 L1527.25 684.447 L1527.81 684.447 L1528.36 684.447 L1528.92 684.447 L1529.48 684.447 L1530.04 684.447 L1530.6 684.447 L1531.16 684.447 L1531.72 684.447 L1532.28 684.447 L1532.84 684.447 L1533.4 684.447 L1533.96 684.447 L1534.52 684.447 L1535.08 684.447 L1535.63 684.447 L1536.19 684.447 L1536.75 684.447 L1537.31 684.447 L1537.87 684.447 L1538.43 684.447 L1538.99 684.447 L1539.55 684.447 L1540.11 684.447 L1540.67 684.447 L1541.23 684.447 L1541.79 684.447 L1542.35 684.447 L1542.9 684.447 L1543.46 684.447 L1544.02 684.447 L1544.58 684.447 L1545.14 684.447 L1545.7 684.447 L1546.26 684.447 L1546.82 684.447 L1547.38 684.447 L1547.94 684.447 L1548.5 684.447 L1549.06 684.447 L1549.62 684.447 L1550.18 684.447 L1550.73 684.447 L1551.29 684.447 L1551.85 684.447 L1552.41 684.447 L1552.97 684.447 L1553.53 684.447 L1554.09 684.447 L1554.65 684.447 L1555.21 684.447 L1555.77 684.447 L1556.33 684.447 L1556.89 684.447 L1557.45 684.447 L1558 684.447 L1558.56 684.447 L1559.12 684.447 L1559.68 684.447 L1560.24 684.447 L1560.8 684.447 L1561.36 684.447 L1561.92 684.447 L1562.48 684.447 L1563.04 684.447 L1563.6 684.447 L1564.16 684.447 L1564.72 684.447 L1565.28 684.447 L1565.83 684.447 L1566.39 684.447 L1566.95 684.447 L1567.51 684.447 L1568.07 684.447 L1568.63 684.447 L1569.19 684.447 L1569.75 684.447 L1570.31 684.447 L1570.87 684.447 L1571.43 684.447 L1571.99 684.447 L1572.55 684.447 L1573.1 684.447 L1573.66 684.447 L1574.22 684.447 L1574.78 684.447 L1575.34 684.447 L1575.9 684.447 L1576.46 684.447 L1577.02 684.447 L1577.58 684.447 L1578.14 684.447 L1578.7 684.447 L1579.26 684.447 L1579.82 684.447 L1580.37 684.447 L1580.93 684.447 L1581.49 684.447 L1582.05 684.447 L1582.61 684.447 L1583.17 684.447 L1583.73 684.447 L1584.29 684.447 L1584.85 684.447 L1585.41 684.447 L1585.97 684.447 L1586.53 684.447 L1587.09 684.447 L1587.65 684.447 L1588.2 684.447 L1588.76 684.447 L1589.32 684.447 L1589.88 684.447 L1590.44 684.447 L1591 684.447 L1591.56 684.447 L1592.12 684.447 L1592.68 684.447 L1593.24 684.447 L1593.8 684.447 L1594.36 684.447 L1594.92 684.447 L1595.47 684.447 L1596.03 684.447 L1596.59 684.447 L1597.15 684.447 L1597.71 684.447 L1598.27 684.447 L1598.83 684.447 L1599.39 684.447 L1599.95 684.447 L1600.51 684.447 L1601.07 684.447 L1601.63 684.447 L1602.19 684.447 L1602.74 684.447 L1603.3 684.447 L1603.86 684.447 L1604.42 684.447 L1604.98 684.447 L1605.54 684.447 L1606.1 684.447 L1606.66 684.447 L1607.22 684.447 L1607.78 684.447 L1608.34 684.447 L1608.9 684.447 L1609.46 684.447 L1610.02 684.447 L1610.57 684.447 L1611.13 684.447 L1611.69 684.447 L1612.25 684.447 L1612.81 684.447 L1613.37 684.447 L1613.93 684.447 L1614.49 684.447 L1615.05 684.447 L1615.61 684.447 L1616.17 684.447 L1616.73 684.447 L1617.29 684.447 L1617.84 684.447 L1618.4 684.447 L1618.96 684.447 L1619.52 684.447 L1620.08 684.447 L1620.64 684.447 L1621.2 684.447 L1621.76 684.447 L1622.32 684.447 L1622.88 684.447 L1623.44 684.447 L1624 684.447 L1624.56 684.447 L1625.11 684.447 L1625.67 684.447 L1626.23 684.447 L1626.79 684.447 L1627.35 684.447 L1627.91 684.447 L1628.47 684.447 L1629.03 684.447 L1629.59 684.447 L1630.15 684.447 L1630.71 684.447 L1631.27 684.447 L1631.83 684.447 L1632.39 684.447 L1632.94 684.447 L1633.5 684.447 L1634.06 684.447 L1634.62 684.447 L1635.18 684.447 L1635.74 684.447 L1636.3 684.447 L1636.86 684.447 L1637.42 684.447 L1637.98 684.447 L1638.54 684.447 L1639.1 684.447 L1639.66 684.447 L1640.21 684.447 L1640.77 684.447 L1641.33 684.447 L1641.89 684.447 L1642.45 684.447 L1643.01 684.447 L1643.57 684.447 L1644.13 684.447 L1644.69 684.447 L1645.25 684.447 L1645.81 684.447 L1646.37 684.447 L1646.93 684.447 L1647.48 684.447 L1648.04 684.447 L1648.6 684.447 L1649.16 684.447 L1649.72 684.447 L1650.28 684.447 L1650.84 684.447 L1651.4 684.447 L1651.96 684.447 L1652.52 684.447 L1653.08 684.447 L1653.64 684.447 L1654.2 684.447 L1654.76 684.447 L1655.31 684.447 L1655.87 684.447 L1656.43 684.447 L1656.99 684.447 L1657.55 684.447 L1658.11 684.447 L1658.67 684.447 L1659.23 684.447 L1659.79 684.447 L1660.35 684.447 L1660.91 684.447 L1661.47 684.447 L1662.03 684.447 L1662.58 684.447 L1663.14 684.447 L1663.7 684.447 L1664.26 684.447 L1664.82 684.447 L1665.38 684.447 L1665.94 684.447 L1666.5 684.447 L1667.06 684.447 L1667.62 684.447 L1668.18 684.447 L1668.74 684.447 L1669.3 684.447 L1669.85 684.447 L1670.41 684.447 L1670.97 684.447 L1671.53 684.447 L1672.09 684.447 L1672.65 684.447 L1673.21 684.447 L1673.77 684.447 L1674.33 684.447 L1674.89 684.447 L1675.45 684.447 L1676.01 684.447 L1676.57 684.447 L1677.13 684.447 L1677.68 684.447 L1678.24 684.447 L1678.8 684.447 L1679.36 684.447 L1679.92 684.447 L1680.48 684.447 L1681.04 684.447 L1681.6 684.447 L1682.16 684.447 L1682.72 684.447 L1683.28 684.447 L1683.84 684.447 L1684.4 684.447 L1684.95 684.447 L1685.51 684.447 L1686.07 684.447 L1686.63 684.447 L1687.19 684.447 L1687.75 684.447 L1688.31 684.447 L1688.87 684.447 L1689.43 684.447 L1689.99 684.447 L1690.55 684.447 L1691.11 684.447 L1691.67 684.447 L1692.23 684.447 L1692.78 684.447 L1693.34 684.447 L1693.9 684.447 L1694.46 684.447 L1695.02 684.447 L1695.58 684.447 L1696.14 684.447 L1696.7 684.447 L1697.26 684.447 L1697.82 684.447 L1698.38 684.447 L1698.94 684.447 L1699.5 684.447 L1700.05 684.447 L1700.61 684.447 L1701.17 684.447 L1701.73 684.447 L1702.29 684.447 L1702.85 684.447 L1703.41 684.447 L1703.97 684.447 L1704.53 684.447 L1705.09 684.447 L1705.65 684.447 L1706.21 684.447 L1706.77 684.447 L1707.32 684.447 L1707.88 684.447 L1708.44 684.447 L1709 684.447 L1709.56 684.447 L1710.12 684.447 L1710.68 684.447 L1711.24 684.447 L1711.8 684.447 L1712.36 684.447 L1712.92 684.447 L1713.48 684.447 L1714.04 684.447 L1714.6 684.447 L1715.15 684.447 L1715.71 684.447 L1716.27 684.447 L1716.83 684.447 L1717.39 684.447 L1717.95 684.447 L1718.51 684.447 L1719.07 684.447 L1719.63 684.447 L1720.19 684.447 L1720.75 684.447 L1721.31 684.447 L1721.87 684.447 L1722.42 684.447 L1722.98 684.447 L1723.54 684.447 L1724.1 684.447 L1724.66 684.447 L1725.22 684.447 L1725.78 684.447 L1726.34 684.447 L1726.9 684.447 L1727.46 684.447 L1728.02 684.447 L1728.58 684.447 L1729.14 684.447 L1729.69 684.447 L1730.25 684.447 L1730.81 684.447 L1731.37 684.447 L1731.93 684.447 L1732.49 684.447 L1733.05 684.447 L1733.61 684.447 L1734.17 684.447 L1734.73 684.447 L1735.29 684.447 L1735.85 684.447 L1736.41 684.447 L1736.97 684.447 L1737.52 684.447 L1738.08 684.447 L1738.64 684.447 L1739.2 684.447 L1739.76 684.447 L1740.32 684.447 L1740.88 684.447 L1741.44 684.447 L1742 684.447 L1742.56 684.447 L1743.12 684.447 L1743.68 684.447 L1744.24 684.447 L1744.79 684.447 L1745.35 684.447 L1745.91 684.447 L1746.47 684.447 L1747.03 684.447 L1747.59 684.447 L1748.15 684.447 L1748.71 684.447 L1749.27 684.447 L1749.83 684.447 L1750.39 684.447 L1750.95 684.447 L1751.51 684.447 L1752.06 684.447 L1752.62 684.447 L1753.18 684.447 L1753.74 684.447 L1754.3 684.447 L1754.86 684.447 L1755.42 684.447 L1755.98 684.447 L1756.54 684.447 L1757.1 684.447 L1757.66 684.447 L1758.22 684.447 L1758.78 684.447 L1759.34 684.447 L1759.89 684.447 L1760.45 684.447 L1761.01 684.447 L1761.57 684.447 L1762.13 684.447 L1762.69 684.447 L1763.25 684.447 L1763.81 684.447 L1764.37 684.447 L1764.93 684.447 L1765.49 684.447 L1766.05 684.447 L1766.61 684.447 L1767.16 684.447 L1767.72 684.447 L1768.28 684.447 L1768.84 684.447 L1769.4 684.447 L1769.96 684.447 L1770.52 684.447 L1771.08 684.447 L1771.64 684.447 L1772.2 684.447 L1772.76 684.447 L1773.32 684.447 L1773.88 684.447 L1774.43 684.447 L1774.99 684.447 L1775.55 684.447 L1776.11 684.447 L1776.67 684.447 L1777.23 684.447 L1777.79 684.447 L1778.35 684.447 L1778.91 684.447 L1779.47 684.447 L1780.03 684.447 L1780.59 684.447 L1781.15 684.447 L1781.71 684.447 L1782.26 684.447 L1782.82 684.447 L1783.38 684.447 L1783.94 684.447 L1784.5 684.447 L1785.06 684.447 L1785.62 684.447 L1786.18 684.447 L1786.74 684.447 L1787.3 684.447 L1787.86 684.447 L1788.42 684.447 L1788.98 684.447 L1789.53 684.447 L1790.09 684.447 L1790.65 684.447 L1791.21 684.447 L1791.77 684.447 L1792.33 684.447 L1792.89 684.447 L1793.45 684.447 L1794.01 684.447 L1794.57 684.447 L1795.13 684.447 L1795.69 684.447 L1796.25 684.447 L1796.8 684.447 L1797.36 684.447 L1797.92 684.447 L1798.48 684.447 L1799.04 684.447 L1799.6 684.447 L1800.16 684.447 L1800.72 684.447 L1801.28 684.447 L1801.84 684.447 L1802.4 684.447 L1802.96 684.447 L1803.52 684.447 L1804.08 684.447 L1804.63 684.447 L1805.19 684.447 L1805.75 684.447 L1806.31 684.447 L1806.87 684.447 L1807.43 684.447 L1807.99 684.447 L1808.55 684.447 L1809.11 684.447 L1809.67 684.447 L1810.23 684.447 L1810.79 684.447 L1811.35 684.447 L1811.9 684.447 L1812.46 684.447 L1813.02 684.447 L1813.58 684.447 L1814.14 684.447 L1814.7 684.447 L1815.26 684.447 L1815.82 684.447 L1816.38 684.447 L1816.94 684.447 L1817.5 684.447 L1818.06 684.447 L1818.62 684.447 L1819.18 684.447 L1819.73 684.447 L1820.29 684.447 L1820.85 684.447 L1821.41 684.447 L1821.97 684.447 L1822.53 684.447 L1823.09 684.447 L1823.65 684.447 L1824.21 684.447 L1824.77 684.447 L1825.33 684.447 L1825.89 684.447 L1826.45 684.447 L1827 684.447 L1827.56 684.447 L1828.12 684.447 L1828.68 684.447 L1829.24 684.447 L1829.8 684.447 L1830.36 684.447 L1830.92 684.447 L1831.48 684.447 L1832.04 684.447 L1832.6 684.447 L1833.16 684.447 L1833.72 684.447 L1834.27 684.447 L1834.83 684.447 L1835.39 684.447 L1835.95 684.447 L1836.51 684.447 L1837.07 684.447 L1837.63 684.447 L1838.19 684.447 L1838.19 682.98 L1837.63 682.98 L1837.07 682.98 L1836.51 682.98 L1835.95 682.98 L1835.39 682.98 L1834.83 682.98 L1834.27 682.98 L1833.72 682.98 L1833.16 682.98 L1832.6 682.98 L1832.04 682.98 L1831.48 682.98 L1830.92 682.98 L1830.36 682.98 L1829.8 682.98 L1829.24 682.98 L1828.68 682.98 L1828.12 682.98 L1827.56 682.98 L1827 682.98 L1826.45 682.98 L1825.89 682.98 L1825.33 682.98 L1824.77 682.98 L1824.21 682.98 L1823.65 682.98 L1823.09 682.98 L1822.53 682.98 L1821.97 682.98 L1821.41 682.98 L1820.85 682.98 L1820.29 682.98 L1819.73 682.98 L1819.18 682.98 L1818.62 682.98 L1818.06 682.98 L1817.5 682.98 L1816.94 682.98 L1816.38 682.98 L1815.82 682.98 L1815.26 682.98 L1814.7 682.98 L1814.14 682.98 L1813.58 682.98 L1813.02 682.98 L1812.46 682.98 L1811.9 682.98 L1811.35 682.98 L1810.79 682.98 L1810.23 682.98 L1809.67 682.98 L1809.11 682.98 L1808.55 682.98 L1807.99 682.98 L1807.43 682.98 L1806.87 682.98 L1806.31 682.98 L1805.75 682.98 L1805.19 682.98 L1804.63 682.98 L1804.08 682.98 L1803.52 682.98 L1802.96 682.98 L1802.4 682.98 L1801.84 682.98 L1801.28 682.98 L1800.72 682.98 L1800.16 682.98 L1799.6 682.98 L1799.04 682.98 L1798.48 682.98 L1797.92 682.98 L1797.36 682.98 L1796.8 682.98 L1796.25 682.98 L1795.69 682.98 L1795.13 682.98 L1794.57 682.98 L1794.01 682.98 L1793.45 682.98 L1792.89 682.98 L1792.33 682.98 L1791.77 682.98 L1791.21 682.98 L1790.65 682.98 L1790.09 682.98 L1789.53 682.98 L1788.98 682.98 L1788.42 682.98 L1787.86 682.98 L1787.3 682.98 L1786.74 682.98 L1786.18 682.98 L1785.62 682.98 L1785.06 682.98 L1784.5 682.98 L1783.94 682.98 L1783.38 682.98 L1782.82 682.98 L1782.26 682.98 L1781.71 682.98 L1781.15 682.98 L1780.59 682.98 L1780.03 682.98 L1779.47 682.98 L1778.91 682.98 L1778.35 682.98 L1777.79 682.98 L1777.23 682.98 L1776.67 682.98 L1776.11 682.98 L1775.55 682.98 L1774.99 682.98 L1774.43 682.98 L1773.88 682.98 L1773.32 682.98 L1772.76 682.98 L1772.2 682.98 L1771.64 682.98 L1771.08 682.98 L1770.52 682.98 L1769.96 682.98 L1769.4 682.98 L1768.84 682.98 L1768.28 682.98 L1767.72 682.98 L1767.16 682.98 L1766.61 682.98 L1766.05 682.98 L1765.49 682.98 L1764.93 682.98 L1764.37 682.98 L1763.81 682.98 L1763.25 682.98 L1762.69 682.98 L1762.13 682.98 L1761.57 682.98 L1761.01 682.98 L1760.45 682.98 L1759.89 682.98 L1759.34 682.98 L1758.78 682.98 L1758.22 682.98 L1757.66 682.98 L1757.1 682.98 L1756.54 682.98 L1755.98 682.98 L1755.42 682.98 L1754.86 682.98 L1754.3 682.98 L1753.74 682.98 L1753.18 682.98 L1752.62 682.98 L1752.06 682.98 L1751.51 682.98 L1750.95 682.98 L1750.39 682.98 L1749.83 682.98 L1749.27 682.98 L1748.71 682.98 L1748.15 682.98 L1747.59 682.98 L1747.03 682.98 L1746.47 682.98 L1745.91 682.98 L1745.35 682.98 L1744.79 682.98 L1744.24 682.98 L1743.68 682.98 L1743.12 682.98 L1742.56 682.98 L1742 682.98 L1741.44 682.98 L1740.88 682.98 L1740.32 682.98 L1739.76 682.98 L1739.2 682.98 L1738.64 682.98 L1738.08 682.98 L1737.52 682.98 L1736.97 682.98 L1736.41 682.98 L1735.85 682.98 L1735.29 682.98 L1734.73 682.98 L1734.17 682.98 L1733.61 682.98 L1733.05 682.98 L1732.49 682.98 L1731.93 682.98 L1731.37 682.98 L1730.81 682.98 L1730.25 682.98 L1729.69 682.98 L1729.14 682.98 L1728.58 682.98 L1728.02 682.98 L1727.46 682.98 L1726.9 682.98 L1726.34 682.98 L1725.78 682.98 L1725.22 682.98 L1724.66 682.98 L1724.1 682.98 L1723.54 682.98 L1722.98 682.98 L1722.42 682.98 L1721.87 682.98 L1721.31 682.98 L1720.75 682.98 L1720.19 682.98 L1719.63 682.98 L1719.07 682.98 L1718.51 682.98 L1717.95 682.98 L1717.39 682.98 L1716.83 682.98 L1716.27 682.98 L1715.71 682.98 L1715.15 682.98 L1714.6 682.98 L1714.04 682.98 L1713.48 682.98 L1712.92 682.98 L1712.36 682.98 L1711.8 682.98 L1711.24 682.98 L1710.68 682.98 L1710.12 682.98 L1709.56 682.98 L1709 682.98 L1708.44 682.98 L1707.88 682.98 L1707.32 682.98 L1706.77 682.98 L1706.21 682.98 L1705.65 682.98 L1705.09 682.98 L1704.53 682.98 L1703.97 682.98 L1703.41 682.98 L1702.85 682.98 L1702.29 682.98 L1701.73 682.98 L1701.17 682.98 L1700.61 682.98 L1700.05 682.98 L1699.5 682.98 L1698.94 682.98 L1698.38 682.98 L1697.82 682.98 L1697.26 682.98 L1696.7 682.98 L1696.14 682.98 L1695.58 682.98 L1695.02 682.98 L1694.46 682.98 L1693.9 682.98 L1693.34 682.98 L1692.78 682.98 L1692.23 682.98 L1691.67 682.98 L1691.11 682.98 L1690.55 682.98 L1689.99 682.98 L1689.43 682.98 L1688.87 682.98 L1688.31 682.98 L1687.75 682.98 L1687.19 682.98 L1686.63 682.98 L1686.07 682.98 L1685.51 682.98 L1684.95 682.98 L1684.4 682.98 L1683.84 682.98 L1683.28 682.98 L1682.72 682.98 L1682.16 682.98 L1681.6 682.98 L1681.04 682.98 L1680.48 682.98 L1679.92 682.98 L1679.36 682.98 L1678.8 682.98 L1678.24 682.98 L1677.68 682.98 L1677.13 682.98 L1676.57 682.98 L1676.01 682.98 L1675.45 682.98 L1674.89 682.98 L1674.33 682.98 L1673.77 682.98 L1673.21 682.98 L1672.65 682.98 L1672.09 682.98 L1671.53 682.98 L1670.97 682.98 L1670.41 682.98 L1669.85 682.98 L1669.3 682.98 L1668.74 682.98 L1668.18 682.98 L1667.62 682.98 L1667.06 682.98 L1666.5 682.98 L1665.94 682.98 L1665.38 682.98 L1664.82 682.98 L1664.26 682.98 L1663.7 682.98 L1663.14 682.98 L1662.58 682.98 L1662.03 682.98 L1661.47 682.98 L1660.91 682.98 L1660.35 682.98 L1659.79 682.98 L1659.23 682.98 L1658.67 682.98 L1658.11 682.98 L1657.55 682.98 L1656.99 682.98 L1656.43 682.98 L1655.87 682.98 L1655.31 682.98 L1654.76 682.98 L1654.2 682.98 L1653.64 682.98 L1653.08 682.98 L1652.52 682.98 L1651.96 682.98 L1651.4 682.98 L1650.84 682.98 L1650.28 682.98 L1649.72 682.98 L1649.16 682.98 L1648.6 682.98 L1648.04 682.98 L1647.48 682.98 L1646.93 682.98 L1646.37 682.98 L1645.81 682.98 L1645.25 682.98 L1644.69 682.98 L1644.13 682.98 L1643.57 682.98 L1643.01 682.98 L1642.45 682.98 L1641.89 682.98 L1641.33 682.98 L1640.77 682.98 L1640.21 682.98 L1639.66 682.98 L1639.1 682.98 L1638.54 682.98 L1637.98 682.98 L1637.42 682.98 L1636.86 682.98 L1636.3 682.98 L1635.74 682.98 L1635.18 682.98 L1634.62 682.98 L1634.06 682.98 L1633.5 682.98 L1632.94 682.98 L1632.39 682.98 L1631.83 682.98 L1631.27 682.98 L1630.71 682.98 L1630.15 682.98 L1629.59 682.98 L1629.03 682.98 L1628.47 682.98 L1627.91 682.98 L1627.35 682.98 L1626.79 682.98 L1626.23 682.98 L1625.67 682.98 L1625.11 682.98 L1624.56 682.98 L1624 682.98 L1623.44 682.98 L1622.88 682.98 L1622.32 682.98 L1621.76 682.98 L1621.2 682.98 L1620.64 682.98 L1620.08 682.98 L1619.52 682.98 L1618.96 682.98 L1618.4 682.98 L1617.84 682.98 L1617.29 682.98 L1616.73 682.98 L1616.17 682.98 L1615.61 682.98 L1615.05 682.98 L1614.49 682.98 L1613.93 682.98 L1613.37 682.98 L1612.81 682.98 L1612.25 682.98 L1611.69 682.98 L1611.13 682.98 L1610.57 682.98 L1610.02 682.98 L1609.46 682.98 L1608.9 682.98 L1608.34 682.98 L1607.78 682.98 L1607.22 682.98 L1606.66 682.98 L1606.1 682.98 L1605.54 682.98 L1604.98 682.98 L1604.42 682.98 L1603.86 682.98 L1603.3 682.98 L1602.74 682.98 L1602.19 682.98 L1601.63 682.98 L1601.07 682.98 L1600.51 682.98 L1599.95 682.98 L1599.39 682.98 L1598.83 682.98 L1598.27 682.98 L1597.71 682.98 L1597.15 682.98 L1596.59 682.98 L1596.03 682.98 L1595.47 682.98 L1594.92 682.98 L1594.36 682.98 L1593.8 682.98 L1593.24 682.98 L1592.68 682.98 L1592.12 682.98 L1591.56 682.98 L1591 682.98 L1590.44 682.98 L1589.88 682.98 L1589.32 682.98 L1588.76 682.98 L1588.2 682.98 L1587.65 682.98 L1587.09 682.98 L1586.53 682.98 L1585.97 682.98 L1585.41 682.98 L1584.85 682.98 L1584.29 682.98 L1583.73 682.98 L1583.17 682.98 L1582.61 682.98 L1582.05 682.98 L1581.49 682.98 L1580.93 682.98 L1580.37 682.98 L1579.82 682.98 L1579.26 682.98 L1578.7 682.98 L1578.14 682.98 L1577.58 682.98 L1577.02 682.98 L1576.46 682.98 L1575.9 682.98 L1575.34 682.98 L1574.78 682.98 L1574.22 682.98 L1573.66 682.98 L1573.1 682.98 L1572.55 682.98 L1571.99 682.98 L1571.43 682.98 L1570.87 682.98 L1570.31 682.98 L1569.75 682.98 L1569.19 682.98 L1568.63 682.98 L1568.07 682.98 L1567.51 682.98 L1566.95 682.98 L1566.39 682.98 L1565.83 682.98 L1565.28 682.98 L1564.72 682.98 L1564.16 682.98 L1563.6 682.98 L1563.04 682.98 L1562.48 682.98 L1561.92 682.98 L1561.36 682.98 L1560.8 682.98 L1560.24 682.98 L1559.68 682.98 L1559.12 682.98 L1558.56 682.98 L1558 682.98 L1557.45 682.98 L1556.89 682.98 L1556.33 682.98 L1555.77 682.98 L1555.21 682.98 L1554.65 682.98 L1554.09 682.98 L1553.53 682.98 L1552.97 682.98 L1552.41 682.98 L1551.85 682.98 L1551.29 682.98 L1550.73 682.98 L1550.18 682.98 L1549.62 682.98 L1549.06 682.98 L1548.5 682.98 L1547.94 682.98 L1547.38 682.98 L1546.82 682.98 L1546.26 682.98 L1545.7 682.98 L1545.14 682.98 L1544.58 682.98 L1544.02 682.98 L1543.46 682.98 L1542.9 682.98 L1542.35 682.98 L1541.79 682.98 L1541.23 682.98 L1540.67 682.98 L1540.11 682.98 L1539.55 682.98 L1538.99 682.98 L1538.43 682.98 L1537.87 682.98 L1537.31 682.98 L1536.75 682.98 L1536.19 682.98 L1535.63 682.98 L1535.08 682.98 L1534.52 682.98 L1533.96 682.98 L1533.4 682.98 L1532.84 682.98 L1532.28 682.98 L1531.72 682.98 L1531.16 682.98 L1530.6 682.98 L1530.04 682.98 L1529.48 682.98 L1528.92 682.98 L1528.36 682.98 L1527.81 682.98 L1527.25 682.98 L1526.69 682.98 L1526.13 682.98 L1525.57 682.98 L1525.01 682.98 L1524.45 682.98 L1523.89 682.98 L1523.33 682.98 L1522.77 682.98 L1522.21 682.98 L1521.65 682.98 L1521.09 682.98 L1520.53 682.98 L1519.98 682.98 L1519.42 682.98 L1518.86 682.98 L1518.3 682.98 L1517.74 682.98 L1517.18 682.98 L1516.62 682.98 L1516.06 682.98 L1515.5 682.98 L1514.94 682.98 L1514.38 682.98 L1513.82 682.98 L1513.26 682.98 L1512.71 682.98 L1512.15 682.98 L1511.59 682.98 L1511.03 682.98 L1510.47 682.98 L1509.91 682.98 L1509.35 682.98 L1508.79 682.98 L1508.23 682.98 L1507.67 682.98 L1507.11 682.98 L1506.55 682.98 L1505.99 682.98 L1505.44 682.98 L1504.88 682.98 L1504.32 682.98 L1503.76 682.98 L1503.2 682.98 L1502.64 682.98 L1502.08 682.98 L1501.52 682.98 L1500.96 682.98 L1500.4 682.98 L1499.84 682.98 L1499.28 682.98 L1498.72 682.98 L1498.16 682.98 L1497.61 682.98 L1497.05 682.98 L1496.49 682.98 L1495.93 682.98 L1495.37 682.98 L1494.81 682.98 L1494.25 682.98 L1493.69 682.98 L1493.13 682.98 L1492.57 682.98 L1492.01 682.98 L1491.45 682.98 L1490.89 682.98 L1490.34 682.98 L1489.78 682.98 L1489.22 682.98 L1488.66 682.98 L1488.1 682.98 L1487.54 682.98 L1486.98 682.98 L1486.42 682.98 L1485.86 682.98 L1485.3 682.98 L1484.74 682.98 L1484.18 682.98 L1483.62 682.98 L1483.07 682.98 L1482.51 682.98 L1481.95 682.98 L1481.39 682.98 L1480.83 682.98 L1480.27 682.98 L1479.71 682.98 L1479.15 682.98 L1478.59 682.98 L1478.03 682.98 L1477.47 682.98 L1476.91 682.98 L1476.35 682.98 L1475.79 682.98 L1475.24 682.98 L1474.68 682.98 L1474.12 682.98 L1473.56 682.98 L1473 682.98 L1472.44 682.98 L1471.88 682.98 L1471.32 682.98 L1470.76 682.98 L1470.2 682.98 L1469.64 682.98 L1469.08 682.98 L1468.52 682.98 L1467.97 682.98 L1467.41 682.98 L1466.85 682.98 L1466.29 682.98 L1465.73 682.98 L1465.17 682.98 L1464.61 682.98 L1464.05 682.98 L1463.49 682.98 L1462.93 682.98 L1462.37 682.98 L1461.81 682.98 L1461.25 682.98 L1460.7 682.98 L1460.14 682.98 L1459.58 682.98 L1459.02 682.98 L1458.46 682.98 L1457.9 682.98 L1457.34 682.98 L1456.78 682.98 L1456.22 682.98 L1455.66 682.98 L1455.1 682.98 L1454.54 682.98 L1453.98 682.98 L1453.42 682.98 L1452.87 682.98 L1452.31 682.98 L1451.75 682.98 L1451.19 682.98 L1450.63 682.98 L1450.07 682.98 L1449.51 682.98 L1448.95 682.98 L1448.39 682.98 L1447.83 682.98 L1447.27 682.98 L1446.71 682.98 L1446.15 682.98 L1445.6 682.98 L1445.04 682.98 L1444.48 682.98 L1443.92 682.98 L1443.36 682.98 L1442.8 682.98 L1442.24 682.98 L1441.68 682.98 L1441.12 682.98 L1440.56 682.98 L1440 682.98 L1439.44 682.98 L1438.88 682.98 L1438.33 682.98 L1437.77 682.98 L1437.21 682.98 L1436.65 682.98 L1436.09 682.98 L1435.53 682.98 L1434.97 682.98 L1434.41 682.98 L1433.85 682.98 L1433.29 682.98 L1432.73 682.98 L1432.17 682.98 L1431.61 682.98 L1431.05 682.98 L1430.5 682.98 L1429.94 682.98 L1429.38 682.98 L1428.82 682.98 L1428.26 682.98 L1427.7 682.98 L1427.14 682.98 L1426.58 682.98 L1426.02 682.98 L1425.46 682.98 L1424.9 682.98 L1424.34 682.98 L1423.78 682.98 L1423.23 682.98 L1422.67 682.98 L1422.11 682.98 L1421.55 682.98 L1420.99 682.98 L1420.43 682.98 L1419.87 682.98 L1419.31 682.98 L1418.75 682.98 L1418.19 682.98 L1417.63 682.98 L1417.07 682.98 L1416.51 682.98 L1415.95 682.98 L1415.4 682.98 L1414.84 682.98 L1414.28 682.98 L1413.72 682.98 L1413.16 682.98 L1412.6 682.98 L1412.04 682.98 L1411.48 682.98 L1410.92 682.98 L1410.36 682.98 L1409.8 682.98 L1409.24 682.98 L1408.68 682.98 L1408.13 682.98 L1407.57 682.98 L1407.01 682.98 L1406.45 682.98 L1405.89 682.98 L1405.33 682.98 L1404.77 682.98 L1404.21 682.98 L1403.65 682.98 L1403.09 682.98 L1402.53 682.98 L1401.97 682.98 L1401.41 682.98 L1400.86 682.98 L1400.3 682.98 L1399.74 682.98 L1399.18 682.98 L1398.62 682.98 L1398.06 682.98 L1397.5 682.98 L1396.94 682.98 L1396.38 682.98 L1395.82 682.98 L1395.26 682.98 L1394.7 682.98 L1394.14 682.98 L1393.58 682.98 L1393.03 682.98 L1392.47 682.98 L1391.91 682.98 L1391.35 682.98 L1390.79 682.98 L1390.23 682.98 L1389.67 682.98 L1389.11 682.98 L1388.55 682.98 L1387.99 682.98 L1387.43 682.98 L1386.87 682.98 L1386.31 682.98 L1385.76 682.98 L1385.2 682.98 L1384.64 682.98 L1384.08 682.98 L1383.52 682.98 L1382.96 682.98 L1382.4 682.98 L1381.84 682.98 L1381.28 682.98 L1380.72 682.98 L1380.16 682.98 L1379.6 682.98 L1379.04 682.98 L1378.49 682.98 L1377.93 682.98 L1377.37 682.98 L1376.81 682.98 L1376.25 682.98 L1375.69 682.98 L1375.13 682.98 L1374.57 682.98 L1374.01 682.98 L1373.45 682.98 L1372.89 682.98 L1372.33 682.98 L1371.77 682.98 L1371.21 682.98 L1370.66 682.98 L1370.1 682.98 L1369.54 682.98 L1368.98 682.98 L1368.42 682.98 L1367.86 682.98 L1367.3 682.98 L1366.74 682.98 L1366.18 682.98 L1365.62 682.98 L1365.06 682.98 L1364.5 682.98 L1363.94 682.98 L1363.39 682.98 L1362.83 682.98 L1362.27 682.98 L1361.71 682.98 L1361.15 682.98 L1360.59 682.98 L1360.03 682.98 L1359.47 682.98 L1358.91 682.98 L1358.35 682.98 L1357.79 682.98 L1357.23 682.98 L1356.67 682.98 L1356.12 682.98 L1355.56 682.98 L1355 682.98 L1354.44 682.98 L1353.88 682.98 L1353.32 682.98 L1352.76 682.98 L1352.2 682.98 L1351.64 682.98 L1351.08 682.98 L1350.52 682.98 L1349.96 682.98 L1349.4 682.98 L1348.84 682.98 L1348.29 682.98 L1347.73 682.98 L1347.17 682.98 L1346.61 682.98 L1346.05 682.98 L1345.49 682.98 L1344.93 682.98 L1344.37 682.98 L1343.81 682.98 L1343.25 682.98 L1342.69 682.98 L1342.13 682.98 L1341.57 682.98 L1341.02 682.98 L1340.46 682.98 L1339.9 682.98 L1339.34 682.98 L1338.78 682.98 L1338.22 682.98 L1337.66 682.98 L1337.1 682.98 L1336.54 682.98 L1335.98 682.98 L1335.42 682.98 L1334.86 682.98 L1334.3 682.98 L1333.75 682.98 L1333.19 682.98 L1332.63 682.98 L1332.07 682.98 L1331.51 682.98 L1330.95 682.98 L1330.39 682.98 L1329.83 682.98 L1329.27 682.98 L1328.71 682.98 L1328.15 682.98 L1327.59 682.98 L1327.03 682.98 L1326.47 682.98 L1325.92 682.98 L1325.36 682.98 L1324.8 682.98 L1324.24 682.98 L1323.68 682.98 L1323.12 682.98 L1322.56 682.98 L1322 682.98 L1321.44 682.98 L1320.88 682.98 L1320.32 682.98 L1319.76 682.98 L1319.2 682.98 L1318.65 682.98 L1318.09 682.98 L1317.53 682.98 L1316.97 682.98 L1316.41 682.98 L1315.85 682.98 L1315.29 682.98 L1314.73 682.98 L1314.17 682.98 L1313.61 682.98 L1313.05 682.98 L1312.49 682.98 L1311.93 682.98 L1311.38 682.98 L1310.82 682.98 L1310.26 682.98 L1309.7 682.98 L1309.14 682.98 L1308.58 682.98 L1308.02 682.98 L1307.46 682.98 L1306.9 682.98 L1306.34 682.98 L1305.78 682.98 L1305.22 682.98 L1304.66 682.98 L1304.1 682.98 L1303.55 682.98 L1302.99 682.98 L1302.43 682.98 L1301.87 682.98 L1301.31 682.98 L1300.75 682.98 L1300.19 682.98 L1299.63 682.98 L1299.07 682.98 L1298.51 682.98 L1297.95 682.98 L1297.39 682.98 L1296.83 682.98 L1296.28 682.98 L1295.72 682.98 L1295.16 682.98 L1294.6 682.98 L1294.04 682.98 L1293.48 682.98 L1292.92 682.98 L1292.36 682.98 L1291.8 682.98 L1291.24 682.98 L1290.68 682.98 L1290.12 682.98 L1289.56 682.98 L1289 682.98 L1288.45 682.98 L1287.89 682.98 L1287.33 682.98 L1286.77 682.98 L1286.21 682.98 L1285.65 682.98 L1285.09 682.98 L1284.53 682.98 L1283.97 682.98 L1283.41 682.98 L1282.85 682.98 L1282.29 682.98 L1281.73 682.98 L1281.18 682.98 L1280.62 682.98 L1280.06 682.98 L1279.5 682.98 L1278.94 682.98 L1278.38 682.98 L1277.82 682.98 L1277.26 682.98 L1276.7 682.98 L1276.14 682.98 L1275.58 682.98 L1275.02 682.98 L1274.46 682.98 L1273.91 682.98 L1273.35 682.98 L1272.79 682.98 L1272.23 682.98 L1271.67 682.98 L1271.11 682.98 L1270.55 682.98 L1269.99 682.98 L1269.43 682.98 L1268.87 682.98 L1268.31 682.98 L1267.75 682.98 L1267.19 682.98 L1266.63 682.98 L1266.08 682.98 L1265.52 682.98 L1264.96 682.98 L1264.4 682.98 L1263.84 682.98 L1263.28 682.98 L1262.72 682.98 L1262.16 682.98 L1261.6 682.98 L1261.04 682.98 L1260.48 682.98 L1259.92 682.98 L1259.36 682.98 L1258.81 682.98 L1258.25 682.98 L1257.69 682.98 L1257.13 682.98 L1256.57 682.98 L1256.01 682.98 L1255.45 682.98 L1254.89 682.98 L1254.33 682.98 L1253.77 682.98 L1253.21 682.98 L1252.65 682.98 L1252.09 682.98 L1251.54 682.98 L1250.98 682.98 L1250.42 682.98 L1249.86 682.98 L1249.3 682.98 L1248.74 682.98 L1248.18 682.98 L1247.62 682.98 L1247.06 682.98 L1246.5 682.98 L1245.94 682.98 L1245.38 682.98 L1244.82 682.98 L1244.26 682.98 L1243.71 682.98 L1243.15 682.98 L1242.59 682.98 L1242.03 682.98 L1241.47 682.98 L1240.91 682.98 L1240.35 682.98 L1239.79 682.98 L1239.23 682.98 L1238.67 682.98 L1238.11 682.98 L1237.55 682.98 L1236.99 682.98 L1236.44 682.98 L1235.88 682.98 L1235.32 682.98 L1234.76 682.98 L1234.2 682.98 L1233.64 682.98 L1233.08 682.98 L1232.52 682.98 L1231.96 682.98 L1231.4 682.98 L1230.84 682.98 L1230.28 682.98 L1229.72 682.98 L1229.17 682.98 L1228.61 682.98 L1228.05 682.98 L1227.49 682.98 L1226.93 682.98 L1226.37 682.98 L1225.81 682.98 L1225.25 682.98 L1224.69 682.98 L1224.13 682.98 L1223.57 682.98 L1223.01 682.98 L1222.45 682.98 L1221.89 682.98 L1221.34 682.98 L1220.78 682.98 L1220.22 682.98 L1219.66 682.98 L1219.1 682.98 L1218.54 682.98 L1217.98 682.98 L1217.42 682.98 L1216.86 682.98 L1216.3 682.98 L1215.74 682.98 L1215.18 682.98 L1214.62 682.98 L1214.07 682.98 L1213.51 682.98 L1212.95 682.98 L1212.39 682.98 L1211.83 682.98 L1211.27 682.98 L1210.71 682.98 L1210.15 682.98 L1209.59 682.98 L1209.03 682.98 L1208.47 682.98 L1207.91 682.98 L1207.35 682.98 L1206.8 682.98 L1206.24 682.98 L1205.68 682.98 L1205.12 682.98 L1204.56 682.98 L1204 682.98 L1203.44 682.98 L1202.88 682.98 L1202.32 682.98 L1201.76 682.98 L1201.2 682.98 L1200.64 682.98 L1200.08 682.98 L1199.52 682.98 L1198.97 682.98 L1198.41 682.98 L1197.85 682.98 L1197.29 682.98 L1196.73 682.98 L1196.17 682.98 L1195.61 682.98 L1195.05 682.98 L1194.49 682.98 L1193.93 682.98 L1193.37 682.98 L1192.81 682.98 L1192.25 682.98 L1191.7 682.98 L1191.14 682.98 L1190.58 682.98 L1190.02 682.98 L1189.46 682.98 L1188.9 682.98 L1188.34 682.98 L1187.78 682.98 L1187.22 682.98 L1186.66 682.98 L1186.1 682.98 L1185.54 682.98 L1184.98 682.98 L1184.43 682.98 L1183.87 682.98 L1183.31 682.98 L1182.75 682.98 L1182.19 682.98 L1181.63 682.98 L1181.07 682.98 L1180.51 682.98 L1179.95 682.98 L1179.39 682.98 L1178.83 682.98 L1178.27 682.98 L1177.71 682.98 L1177.15 682.98 L1176.6 682.98 L1176.04 682.98 L1175.48 682.98 L1174.92 682.98 L1174.36 682.98 L1173.8 682.98 L1173.24 682.98 L1172.68 682.98 L1172.12 682.98 L1171.56 682.98 L1171 682.98 L1170.44 682.98 L1169.88 682.98 L1169.33 682.98 L1168.77 682.98 L1168.21 682.98 L1167.65 682.98 L1167.09 682.98 L1166.53 682.98 L1165.97 682.98 L1165.41 682.98 L1164.85 682.98 L1164.29 682.98 L1163.73 682.98 L1163.17 682.98 L1162.61 682.98 L1162.05 682.98 L1161.5 682.98 L1160.94 682.98 L1160.38 682.98 L1159.82 682.98 L1159.26 682.98 L1158.7 682.98 L1158.14 682.98 L1157.58 682.98 L1157.02 682.98 L1156.46 682.98 L1155.9 682.98 L1155.34 682.98 L1154.78 682.98 L1154.23 682.98 L1153.67 682.98 L1153.11 682.98 L1152.55 682.98 L1151.99 682.98 L1151.43 682.98 L1150.87 682.98 L1150.31 682.98 L1149.75 682.98 L1149.19 682.98 L1148.63 682.98 L1148.07 682.98 L1147.51 682.98 L1146.96 682.98 L1146.4 682.98 L1145.84 682.98 L1145.28 682.98 L1144.72 682.98 L1144.16 682.98 L1143.6 682.98 L1143.04 682.98 L1142.48 682.98 L1141.92 682.98 L1141.36 682.98 L1140.8 682.98 L1140.24 682.98 L1139.68 682.98 L1139.13 682.98 L1138.57 682.98 L1138.01 682.98 L1137.45 682.98 L1136.89 682.98 L1136.33 682.98 L1135.77 682.98 L1135.21 682.98 L1134.65 682.98 L1134.09 682.98 L1133.53 682.98 L1132.97 682.98 L1132.41 682.98 L1131.86 682.98 L1131.3 682.98 L1130.74 682.98 L1130.18 682.98 L1129.62 682.98 L1129.06 682.98 L1128.5 682.98 L1127.94 682.98 L1127.38 682.98 L1126.82 682.98 L1126.26 682.98 L1125.7 682.98 L1125.14 682.98 L1124.59 682.98 L1124.03 682.98 L1123.47 682.98 L1122.91 682.98 L1122.35 682.98 L1121.79 682.98 L1121.23 682.98 L1120.67 682.98 L1120.11 682.98 L1119.55 682.98 L1118.99 682.98 L1118.43 682.98 L1117.87 682.98 L1117.31 682.98 L1116.76 682.98 L1116.2 682.98 L1115.64 682.98 L1115.08 682.98 L1114.52 682.98 L1113.96 682.98 L1113.4 682.98 L1112.84 682.98 L1112.28 682.98 L1111.72 682.98 L1111.16 682.98 L1110.6 682.98 L1110.04 682.98 L1109.49 682.98 L1108.93 682.98 L1108.37 682.98 L1107.81 682.98 L1107.25 682.98 L1106.69 682.98 L1106.13 682.98 L1105.57 682.98 L1105.01 682.98 L1104.45 682.98 L1103.89 682.98 L1103.33 682.98 L1102.77 682.98 L1102.22 682.98 L1101.66 682.98 L1101.1 682.98 L1100.54 682.98 L1099.98 682.98 L1099.42 682.98 L1098.86 682.98 L1098.3 682.98 L1097.74 682.98 L1097.18 682.98 L1096.62 682.98 L1096.06 682.98 L1095.5 682.98 L1094.94 682.98 L1094.39 682.98 L1093.83 682.98 L1093.27 682.98 L1092.71 682.98 L1092.15 682.98 L1091.59 682.98 L1091.03 682.98 L1090.47 682.98 L1089.91 682.98 L1089.35 682.98 L1088.79 682.98 L1088.23 682.98 L1087.67 682.98 L1087.12 682.98 L1086.56 682.98 L1086 682.98 L1085.44 682.98 L1084.88 682.98 L1084.32 682.98 L1083.76 682.98 L1083.2 682.98 L1082.64 682.98 L1082.08 682.98 L1081.52 682.98 L1080.96 682.98 L1080.4 682.98 L1079.85 682.98 L1079.29 682.98 L1078.73 682.98 L1078.17 682.98 L1077.61 682.98 L1077.05 682.98 L1076.49 682.98 L1075.93 682.98 L1075.37 682.98 L1074.81 682.98 L1074.25 682.98 L1073.69 682.98 L1073.13 682.98 L1072.57 682.98 L1072.02 682.98 L1071.46 682.98 L1070.9 682.98 L1070.34 682.98 L1069.78 682.98 L1069.22 682.98 L1068.66 682.98 L1068.1 682.98 L1067.54 682.98 L1066.98 682.98 L1066.42 682.98 L1065.86 682.98 L1065.3 682.98 L1064.75 682.98 L1064.19 682.98 L1063.63 682.98 L1063.07 682.98 L1062.51 682.98 L1061.95 682.98 L1061.39 682.98 L1060.83 682.98 L1060.27 682.98 L1059.71 682.98 L1059.15 682.98 L1058.59 682.98 L1058.03 682.98 L1057.48 682.98 L1056.92 682.98 L1056.36 682.98 L1055.8 682.98 L1055.24 682.98 L1054.68 682.98 L1054.12 682.98 L1053.56 682.98 L1053 682.98 L1052.44 682.98 L1051.88 682.98 L1051.32 682.98 L1050.76 682.98 L1050.2 682.98 L1049.65 682.98 L1049.09 682.98 L1048.53 682.98 L1047.97 682.98 L1047.41 682.98 L1046.85 682.98 L1046.29 682.98 L1045.73 682.98 L1045.17 682.98 L1044.61 682.98 L1044.05 682.98 L1043.49 682.98 L1042.93 682.98 L1042.38 682.98 L1041.82 682.98 L1041.26 682.98 L1040.7 682.98 L1040.14 682.98 L1039.58 682.98 L1039.02 682.98 L1038.46 682.98 L1037.9 682.98 L1037.34 682.98 L1036.78 682.98 L1036.22 682.98 L1035.66 682.98 L1035.1 682.98 L1034.55 682.98 L1033.99 682.98 L1033.43 682.98 L1032.87 682.98 L1032.31 682.98 L1031.75 682.98 L1031.19 682.98 L1030.63 682.98 L1030.07 682.98 L1029.51 682.98 L1028.95 682.98 L1028.39 682.98 L1027.83 682.98 L1027.28 682.98 L1026.72 682.98 L1026.16 682.98 L1025.6 682.98 L1025.04 682.98 L1024.48 682.98 L1023.92 682.98 L1023.36 682.98 L1022.8 682.98 L1022.24 682.98 L1021.68 682.98 L1021.12 682.98 L1020.56 682.98 L1020.01 682.98 L1019.45 682.98 L1018.89 682.98 L1018.33 682.98 L1017.77 682.98 L1017.21 682.98 L1016.65 682.98 L1016.09 682.98 L1015.53 682.98 L1014.97 682.98 L1014.41 682.98 L1013.85 682.98 L1013.29 682.98 L1012.73 682.98 L1012.18 682.98 L1011.62 682.98 L1011.06 682.98 L1010.5 682.98 L1009.94 682.98 L1009.38 682.98 L1008.82 682.98 L1008.26 682.98 L1007.7 682.98 L1007.14 682.98 L1006.58 682.98 L1006.02 682.98 L1005.46 682.98 L1004.91 682.98 L1004.35 682.98 L1003.79 682.98 L1003.23 682.98 L1002.67 682.98 L1002.11 682.98 L1001.55 682.98 L1000.99 682.98 L1000.43 682.98 L999.872 682.98 L999.313 682.98 L998.754 682.98 L998.194 682.98 L997.635 682.98 L997.076 682.98 L996.517 682.98 L995.957 682.98 L995.398 682.98 L994.839 682.98 L994.28 682.98 L993.72 682.98 L993.161 682.98 L992.602 682.98 L992.043 682.98 L991.483 682.98 L990.924 682.98 L990.365 682.98 L989.806 682.98 L989.246 682.98 L988.687 682.98 L988.128 682.98 L987.569 682.98 L987.009 682.98 L986.45 682.98 L985.891 682.98 L985.332 682.98 L984.772 682.98 L984.213 682.98 L983.654 682.98 L983.095 682.98 L982.535 682.98 L981.976 682.98 L981.417 682.98 L980.858 682.98 L980.298 682.98 L979.739 682.98 L979.18 682.98 L978.621 682.98 L978.061 682.98 L977.502 682.98 L976.943 682.98 L976.384 682.98 L975.824 682.98 L975.265 682.98 L974.706 682.98 L974.147 682.98 L973.587 682.98 L973.028 682.98 L972.469 682.98 L971.91 682.98 L971.35 682.98 L970.791 682.98 L970.232 682.98 L969.673 682.98 L969.113 682.98 L968.554 682.98 L967.995 682.98 L967.436 682.98 L966.876 682.98 L966.317 682.98 L965.758 682.98 L965.199 682.98 L964.639 682.98 L964.08 682.98 L963.521 682.98 L962.962 682.98 L962.402 682.98 L961.843 682.98 L961.284 682.98 L960.725 682.98 L960.165 682.98 L959.606 682.98 L959.047 682.98 L958.488 682.98 L957.928 682.98 L957.369 682.98 L956.81 682.98 L956.251 682.98 L955.691 682.98 L955.132 682.98 L954.573 682.98 L954.014 682.98 L953.454 682.98 L952.895 682.98 L952.336 682.98 L951.777 682.98 L951.217 682.98 L950.658 682.98 L950.099 682.98 L949.54 682.98 L948.98 682.98 L948.421 682.98 L947.862 682.98 L947.303 682.98 L946.743 682.98 L946.184 682.98 L945.625 682.98 L945.066 682.98 L944.506 682.98 L943.947 682.98 L943.388 682.98 L942.829 682.98 L942.269 682.98 L941.71 682.98 L941.151 682.98 L940.592 682.98 L940.032 682.98 L939.473 682.98 L938.914 682.98 L938.355 682.98 L937.795 682.98 L937.236 682.98 L936.677 682.98 L936.118 682.98 L935.558 682.98 L934.999 682.98 L934.44 682.98 L933.881 682.98 L933.321 682.98 L932.762 682.98 L932.203 682.98 L931.644 682.98 L931.084 682.98 L930.525 682.98 L929.966 682.98 L929.406 682.98 L928.847 682.98 L928.288 682.98 L927.729 682.98 L927.169 682.98 L926.61 682.98 L926.051 682.98 L925.492 682.98 L924.932 682.98 L924.373 682.98 L923.814 682.98 L923.255 682.98 L922.695 682.98 L922.136 682.98 L921.577 682.98 L921.018 682.98 L920.458 682.98 L919.899 682.98 L919.34 682.98 L918.781 682.98 L918.221 682.98 L917.662 682.98 L917.103 682.98 L916.544 682.98 L915.984 682.98 L915.425 682.98 L914.866 682.98 L914.307 682.98 L913.747 682.98 L913.188 682.98 L912.629 682.98 L912.07 682.98 L911.51 682.98 L910.951 682.98 L910.392 682.98 L909.833 682.98 L909.273 682.98 L908.714 682.98 L908.155 682.98 L907.596 682.98 L907.036 682.98 L906.477 682.98 L905.918 682.98 L905.359 682.98 L904.799 682.98 L904.24 682.98 L903.681 682.98 L903.122 682.98 L902.562 682.98 L902.003 682.98 L901.444 682.98 L900.885 682.98 L900.325 682.98 L899.766 682.98 L899.207 682.98 L898.648 682.98 L898.088 682.98 L897.529 682.98 L896.97 682.98 L896.411 682.98 L895.851 682.98 L895.292 682.98 L894.733 682.98 L894.174 682.98 L893.614 682.98 L893.055 682.98 L892.496 682.98 L891.937 682.98 L891.377 682.98 L890.818 682.98 L890.259 682.98 L889.7 682.98 L889.14 682.98 L888.581 682.98 L888.022 682.98 L887.463 682.98 L886.903 682.98 L886.344 682.98 L885.785 682.98 L885.226 682.98 L884.666 682.98 L884.107 682.98 L883.548 682.98 L882.989 682.98 L882.429 682.98 L881.87 682.98 L881.311 682.98 L880.752 682.98 L880.192 682.98 L879.633 682.98 L879.074 682.98 L878.515 682.98 L877.955 682.98 L877.396 682.98 L876.837 682.98 L876.278 682.98 L875.718 682.98 L875.159 682.98 L874.6 682.98 L874.041 682.98 L873.481 682.98 L872.922 682.98 L872.363 682.98 L871.804 682.98 L871.244 682.98 L870.685 682.98 L870.126 682.98 L869.567 682.98 L869.007 682.98 L868.448 682.98 L867.889 682.98 L867.33 682.98 L866.77 682.98 L866.211 682.98 L865.652 682.98 L865.093 682.98 L864.533 682.98 L863.974 682.98 L863.415 682.98 L862.856 682.98 L862.296 682.98 L861.737 682.98 L861.178 682.98 L860.619 682.98 L860.059 682.98 L859.5 682.98 L858.941 682.98 L858.382 682.98 L857.822 682.98 L857.263 682.98 L856.704 682.98 L856.145 682.98 L855.585 682.98 L855.026 682.98 L854.467 682.98 L853.908 682.98 L853.348 682.98 L852.789 682.98 L852.23 682.98 L851.671 682.98 L851.111 682.98 L850.552 682.98 L849.993 682.98 L849.434 682.98 L848.874 682.98 L848.315 682.98 L847.756 682.98 L847.197 682.98 L846.637 682.98 L846.078 682.98 L845.519 682.98 L844.96 682.98 L844.4 682.98 L843.841 682.98 L843.282 682.98 L842.723 682.98 L842.163 682.98 L841.604 682.98 L841.045 682.98 L840.486 682.98 L839.926 682.98 L839.367 682.98 L838.808 682.98 L838.249 682.98 L837.689 682.98 L837.13 682.98 L836.571 682.98 L836.012 682.98 L835.452 682.98 L834.893 682.98 L834.334 682.98 L833.775 682.98 L833.215 682.98 L832.656 682.98 L832.097 682.98 L831.538 682.98 L830.978 682.98 L830.419 682.98 L829.86 682.98 L829.301 682.98 L828.741 682.98 L828.182 682.98 L827.623 682.98 L827.064 682.98 L826.504 682.98 L825.945 682.98 L825.386 682.98 L824.827 682.98 L824.267 682.98 L823.708 682.98 L823.149 682.98 L822.59 682.98 L822.03 682.98 L821.471 682.98 L820.912 682.98 L820.353 682.98 L819.793 682.98 L819.234 682.98 L818.675 682.98 L818.116 682.98 L817.556 682.98 L816.997 682.98 L816.438 682.98 L815.879 682.98 L815.319 682.98 L814.76 682.98 L814.201 682.98 L813.642 682.98 L813.082 682.98 L812.523 682.98 L811.964 682.98 L811.405 682.98 L810.845 682.98 L810.286 682.98 L809.727 682.98 L809.168 682.98 L808.608 682.98 L808.049 682.98 L807.49 682.98 L806.931 682.98 L806.371 682.98 L805.812 682.98 L805.253 682.98 L804.693 682.98 L804.134 682.98 L803.575 682.98 L803.016 682.98 L802.456 682.98 L801.897 682.98 L801.338 682.98 L800.779 682.98 L800.219 682.98 L799.66 682.98 L799.101 682.98 L798.542 682.98 L797.982 682.98 L797.423 682.98 L796.864 682.98 L796.305 682.98 L795.745 682.98 L795.186 682.98 L794.627 682.98 L794.068 682.98 L793.508 682.98 L792.949 682.98 L792.39 682.98 L791.831 682.98 L791.271 682.98 L790.712 682.98 L790.153 682.98 L789.594 682.98 L789.034 682.98 L788.475 682.98 L787.916 682.98 L787.357 682.98 L786.797 682.98 L786.238 682.98 L785.679 682.98 L785.12 682.98 L784.56 682.98 L784.001 682.98 L783.442 682.98 L782.883 682.98 L782.323 682.98 L781.764 682.98 L781.205 682.98 L780.646 682.98 L780.086 682.98 L779.527 682.98 L778.968 682.98 L778.409 682.98 L777.849 682.98 L777.29 682.98 L776.731 682.98 L776.172 682.98 L775.612 682.98 L775.053 682.98 L774.494 682.98 L773.935 682.98 L773.375 682.98 L772.816 682.98 L772.257 682.98 L771.698 682.98 L771.138 682.98 L770.579 682.98 L770.02 682.98 L769.461 682.98 L768.901 682.98 L768.342 682.98 L767.783 682.98 L767.224 682.98 L766.664 682.98 L766.105 682.98 L765.546 682.98 L764.987 682.98 L764.427 682.98 L763.868 682.98 L763.309 682.98 L762.75 682.98 L762.19 682.98 L761.631 682.98 L761.072 682.98 L760.513 682.98 L759.953 682.98 L759.394 682.98 L758.835 682.98 L758.276 682.98 L757.716 682.98 L757.157 682.98 L756.598 682.98 L756.039 682.98 L755.479 682.98 L754.92 682.98 L754.361 682.98 L753.802 682.98 L753.242 682.98 L752.683 682.98 L752.124 682.98 L751.565 682.98 L751.005 682.98 L750.446 682.98 L749.887 682.98 L749.328 682.98 L748.768 682.98 L748.209 682.98 L747.65 682.98 L747.091 682.98 L746.531 682.98 L745.972 682.98 L745.413 682.98 L744.854 682.98 L744.294 682.98 L743.735 682.98 L743.176 682.98 L742.617 682.98 L742.057 682.98 L741.498 682.98 L740.939 682.98 L740.38 682.98 L739.82 682.98 L739.261 682.98 L738.702 682.98 L738.143 682.98 L737.583 682.98 L737.024 682.98 L736.465 682.98 L735.906 682.98 L735.346 682.98 L734.787 682.98 L734.228 682.98 L733.669 682.98 L733.109 682.98 L732.55 682.98 L731.991 682.98 L731.432 682.98 L730.872 682.98 L730.313 682.98 L729.754 682.98 L729.195 682.98 L728.635 682.98 L728.076 682.98 L727.517 682.98 L726.958 682.98 L726.398 682.98 L725.839 682.98 L725.28 682.98 L724.721 682.98 L724.161 682.98 L723.602 682.98 L723.043 682.98 L722.484 682.98 L721.924 682.98 L721.365 682.98 L720.806 682.98 L720.247 682.98  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.705 720.806,683.705 721.365,683.705 721.924,683.705 722.484,683.705 723.043,683.705 723.602,683.705 724.161,683.705 724.721,683.705 725.28,683.705 725.839,683.705 726.398,683.705 726.958,683.705 727.517,683.705 728.076,683.705 728.635,683.705 729.195,683.705 729.754,683.705 730.313,683.705 730.872,683.705 731.432,683.705 731.991,683.705 732.55,683.705 733.109,683.705 733.669,683.705 734.228,683.705 734.787,683.705 735.346,683.705 735.906,683.705 736.465,683.705 737.024,683.705 737.583,683.705 738.143,683.705 738.702,683.705 739.261,683.705 739.82,683.705 740.38,683.705 740.939,683.705 741.498,683.705 742.057,683.705 742.617,683.705 743.176,683.705 743.735,683.705 744.294,683.705 744.854,683.705 745.413,683.705 745.972,683.705 746.531,683.705 747.091,683.705 747.65,683.705 748.209,683.705 748.768,683.705 749.328,683.705 749.887,683.705 750.446,683.705 751.005,683.705 751.565,683.705 752.124,683.705 752.683,683.705 753.242,683.705 753.802,683.705 754.361,683.705 754.92,683.705 755.479,683.705 756.039,683.705 756.598,683.705 757.157,683.705 757.716,683.705 758.276,683.705 758.835,683.705 759.394,683.705 759.953,683.705 760.513,683.705 761.072,683.705 761.631,683.705 762.19,683.705 762.75,683.705 763.309,683.705 763.868,683.705 764.427,683.705 764.987,683.705 765.546,683.705 766.105,683.705 766.664,683.705 767.224,683.705 767.783,683.705 768.342,683.705 768.901,683.705 769.461,683.705 770.02,683.705 770.579,683.705 771.138,683.705 771.698,683.705 772.257,683.705 772.816,683.705 773.375,683.705 773.935,683.705 774.494,683.705 775.053,683.705 775.612,683.705 776.172,683.705 776.731,683.705 777.29,683.705 777.849,683.705 778.409,683.705 778.968,683.705 779.527,683.705 780.086,683.705 780.646,683.705 781.205,683.705 781.764,683.705 782.323,683.705 782.883,683.705 783.442,683.705 784.001,683.705 784.56,683.705 785.12,683.705 785.679,683.705 786.238,683.705 786.797,683.705 787.357,683.705 787.916,683.705 788.475,683.705 789.034,683.705 789.594,683.705 790.153,683.705 790.712,683.705 791.271,683.705 791.831,683.705 792.39,683.705 792.949,683.705 793.508,683.705 794.068,683.705 794.627,683.705 795.186,683.705 795.745,683.705 796.305,683.705 796.864,683.705 797.423,683.705 797.982,683.705 798.542,683.705 799.101,683.705 799.66,683.705 800.219,683.705 800.779,683.705 801.338,683.705 801.897,683.705 802.456,683.705 803.016,683.705 803.575,683.705 804.134,683.705 804.693,683.705 805.253,683.705 805.812,683.705 806.371,683.705 806.931,683.705 807.49,683.705 808.049,683.705 808.608,683.705 809.168,683.705 809.727,683.705 810.286,683.705 810.845,683.705 811.405,683.705 811.964,683.705 812.523,683.705 813.082,683.705 813.642,683.705 814.201,683.705 814.76,683.705 815.319,683.705 815.879,683.705 816.438,683.705 816.997,683.705 817.556,683.705 818.116,683.705 818.675,683.705 819.234,683.705 819.793,683.705 820.353,683.705 820.912,683.705 821.471,683.705 822.03,683.705 822.59,683.705 823.149,683.705 823.708,683.705 824.267,683.705 824.827,683.705 825.386,683.705 825.945,683.705 826.504,683.705 827.064,683.705 827.623,683.705 828.182,683.705 828.741,683.705 829.301,683.705 829.86,683.705 830.419,683.705 830.978,683.705 831.538,683.705 832.097,683.705 832.656,683.705 833.215,683.705 833.775,683.705 834.334,683.705 834.893,683.705 835.452,683.705 836.012,683.705 836.571,683.705 837.13,683.705 837.689,683.705 838.249,683.705 838.808,683.705 839.367,683.705 839.926,683.705 840.486,683.705 841.045,683.705 841.604,683.705 842.163,683.705 842.723,683.705 843.282,683.705 843.841,683.705 844.4,683.705 844.96,683.705 845.519,683.705 846.078,683.705 846.637,683.705 847.197,683.705 847.756,683.705 848.315,683.705 848.874,683.705 849.434,683.705 849.993,683.705 850.552,683.705 851.111,683.705 851.671,683.705 852.23,683.705 852.789,683.705 853.348,683.705 853.908,683.705 854.467,683.705 855.026,683.705 855.585,683.705 856.145,683.705 856.704,683.705 857.263,683.705 857.822,683.705 858.382,683.705 858.941,683.705 859.5,683.705 860.059,683.705 860.619,683.705 861.178,683.705 861.737,683.705 862.296,683.705 862.856,683.705 863.415,683.705 863.974,683.705 864.533,683.705 865.093,683.705 865.652,683.705 866.211,683.705 866.77,683.705 867.33,683.705 867.889,683.705 868.448,683.705 869.007,683.705 869.567,683.705 870.126,683.705 870.685,683.705 871.244,683.705 871.804,683.705 872.363,683.705 872.922,683.705 873.481,683.705 874.041,683.705 874.6,683.705 875.159,683.705 875.718,683.705 876.278,683.705 876.837,683.705 877.396,683.705 877.955,683.705 878.515,683.705 879.074,683.705 879.633,683.705 880.192,683.705 880.752,683.705 881.311,683.705 881.87,683.705 882.429,683.705 882.989,683.705 883.548,683.705 884.107,683.705 884.666,683.705 885.226,683.705 885.785,683.705 886.344,683.705 886.903,683.705 887.463,683.705 888.022,683.705 888.581,683.705 889.14,683.705 889.7,683.705 890.259,683.705 890.818,683.705 891.377,683.705 891.937,683.705 892.496,683.705 893.055,683.705 893.614,683.705 894.174,683.705 894.733,683.705 895.292,683.705 895.851,683.705 896.411,683.705 896.97,683.705 897.529,683.705 898.088,683.705 898.648,683.705 899.207,683.705 899.766,683.705 900.325,683.705 900.885,683.705 901.444,683.705 902.003,683.705 902.562,683.705 903.122,683.705 903.681,683.705 904.24,683.705 904.799,683.705 905.359,683.705 905.918,683.705 906.477,683.705 907.036,683.705 907.596,683.705 908.155,683.705 908.714,683.705 909.273,683.705 909.833,683.705 910.392,683.705 910.951,683.705 911.51,683.705 912.07,683.705 912.629,683.705 913.188,683.705 913.747,683.705 914.307,683.705 914.866,683.705 915.425,683.705 915.984,683.705 916.544,683.705 917.103,683.705 917.662,683.705 918.221,683.705 918.781,683.705 919.34,683.705 919.899,683.705 920.458,683.705 921.018,683.705 921.577,683.705 922.136,683.705 922.695,683.705 923.255,683.705 923.814,683.705 924.373,683.705 924.932,683.705 925.492,683.705 926.051,683.705 926.61,683.705 927.169,683.705 927.729,683.705 928.288,683.705 928.847,683.705 929.406,683.705 929.966,683.705 930.525,683.705 931.084,683.705 931.644,683.705 932.203,683.705 932.762,683.705 933.321,683.705 933.881,683.705 934.44,683.705 934.999,683.705 935.558,683.705 936.118,683.705 936.677,683.705 937.236,683.705 937.795,683.705 938.355,683.705 938.914,683.705 939.473,683.705 940.032,683.705 940.592,683.705 941.151,683.705 941.71,683.705 942.269,683.705 942.829,683.705 943.388,683.705 943.947,683.705 944.506,683.705 945.066,683.705 945.625,683.705 946.184,683.705 946.743,683.705 947.303,683.705 947.862,683.705 948.421,683.705 948.98,683.705 949.54,683.705 950.099,683.705 950.658,683.705 951.217,683.705 951.777,683.705 952.336,683.705 952.895,683.705 953.454,683.705 954.014,683.705 954.573,683.705 955.132,683.705 955.691,683.705 956.251,683.705 956.81,683.705 957.369,683.705 957.928,683.705 958.488,683.705 959.047,683.705 959.606,683.705 960.165,683.705 960.725,683.705 961.284,683.705 961.843,683.705 962.402,683.705 962.962,683.705 963.521,683.705 964.08,683.705 964.639,683.705 965.199,683.705 965.758,683.705 966.317,683.705 966.876,683.705 967.436,683.705 967.995,683.705 968.554,683.705 969.113,683.705 969.673,683.705 970.232,683.705 970.791,683.705 971.35,683.705 971.91,683.705 972.469,683.705 973.028,683.705 973.587,683.705 974.147,683.705 974.706,683.705 975.265,683.705 975.824,683.705 976.384,683.705 976.943,683.705 977.502,683.705 978.061,683.705 978.621,683.705 979.18,683.705 979.739,683.705 980.298,683.705 980.858,683.705 981.417,683.705 981.976,683.705 982.535,683.705 983.095,683.705 983.654,683.705 984.213,683.705 984.772,683.705 985.332,683.705 985.891,683.705 986.45,683.705 987.009,683.705 987.569,683.705 988.128,683.705 988.687,683.705 989.246,683.705 989.806,683.705 990.365,683.705 990.924,683.705 991.483,683.705 992.043,683.705 992.602,683.705 993.161,683.705 993.72,683.705 994.28,683.705 994.839,683.705 995.398,683.705 995.957,683.705 996.517,683.705 997.076,683.705 997.635,683.705 998.194,683.705 998.754,683.705 999.313,683.705 999.872,683.705 1000.43,683.705 1000.99,683.705 1001.55,683.705 1002.11,683.705 1002.67,683.705 1003.23,683.705 1003.79,683.705 1004.35,683.705 1004.91,683.705 1005.46,683.705 1006.02,683.705 1006.58,683.705 1007.14,683.705 1007.7,683.705 1008.26,683.705 1008.82,683.705 1009.38,683.705 1009.94,683.705 1010.5,683.705 1011.06,683.705 1011.62,683.705 1012.18,683.705 1012.73,683.705 1013.29,683.705 1013.85,683.705 1014.41,683.705 1014.97,683.705 1015.53,683.705 1016.09,683.705 1016.65,683.705 1017.21,683.705 1017.77,683.705 1018.33,683.705 1018.89,683.705 1019.45,683.705 1020.01,683.705 1020.56,683.705 1021.12,683.705 1021.68,683.705 1022.24,683.705 1022.8,683.705 1023.36,683.705 1023.92,683.705 1024.48,683.705 1025.04,683.705 1025.6,683.705 1026.16,683.705 1026.72,683.705 1027.28,683.705 1027.83,683.705 1028.39,683.705 1028.95,683.705 1029.51,683.705 1030.07,683.705 1030.63,683.705 1031.19,683.705 1031.75,683.705 1032.31,683.705 1032.87,683.705 1033.43,683.705 1033.99,683.705 1034.55,683.705 1035.1,683.705 1035.66,683.705 1036.22,683.705 1036.78,683.705 1037.34,683.705 1037.9,683.705 1038.46,683.705 1039.02,683.705 1039.58,683.705 1040.14,683.705 1040.7,683.705 1041.26,683.705 1041.82,683.705 1042.38,683.705 1042.93,683.705 1043.49,683.705 1044.05,683.705 1044.61,683.705 1045.17,683.705 1045.73,683.705 1046.29,683.705 1046.85,683.705 1047.41,683.705 1047.97,683.705 1048.53,683.705 1049.09,683.705 1049.65,683.705 1050.2,683.705 1050.76,683.705 1051.32,683.705 1051.88,683.705 1052.44,683.705 1053,683.705 1053.56,683.705 1054.12,683.705 1054.68,683.705 1055.24,683.705 1055.8,683.705 1056.36,683.705 1056.92,683.705 1057.48,683.705 1058.03,683.705 1058.59,683.705 1059.15,683.705 1059.71,683.705 1060.27,683.705 1060.83,683.705 1061.39,683.705 1061.95,683.705 1062.51,683.705 1063.07,683.705 1063.63,683.705 1064.19,683.705 1064.75,683.705 1065.3,683.705 1065.86,683.705 1066.42,683.705 1066.98,683.705 1067.54,683.705 1068.1,683.705 1068.66,683.705 1069.22,683.705 1069.78,683.705 1070.34,683.705 1070.9,683.705 1071.46,683.705 1072.02,683.705 1072.57,683.705 1073.13,683.705 1073.69,683.705 1074.25,683.705 1074.81,683.705 1075.37,683.705 1075.93,683.705 1076.49,683.705 1077.05,683.705 1077.61,683.705 1078.17,683.705 1078.73,683.705 1079.29,683.705 1079.85,683.705 1080.4,683.705 1080.96,683.705 1081.52,683.705 1082.08,683.705 1082.64,683.705 1083.2,683.705 1083.76,683.705 1084.32,683.705 1084.88,683.705 1085.44,683.705 1086,683.705 1086.56,683.705 1087.12,683.705 1087.67,683.705 1088.23,683.705 1088.79,683.705 1089.35,683.705 1089.91,683.705 1090.47,683.705 1091.03,683.705 1091.59,683.705 1092.15,683.705 1092.71,683.705 1093.27,683.705 1093.83,683.705 1094.39,683.705 1094.94,683.705 1095.5,683.705 1096.06,683.705 1096.62,683.705 1097.18,683.705 1097.74,683.705 1098.3,683.705 1098.86,683.705 1099.42,683.705 1099.98,683.705 1100.54,683.705 1101.1,683.705 1101.66,683.705 1102.22,683.705 1102.77,683.705 1103.33,683.705 1103.89,683.705 1104.45,683.705 1105.01,683.705 1105.57,683.705 1106.13,683.705 1106.69,683.705 1107.25,683.705 1107.81,683.705 1108.37,683.705 1108.93,683.705 1109.49,683.705 1110.04,683.705 1110.6,683.705 1111.16,683.705 1111.72,683.705 1112.28,683.705 1112.84,683.705 1113.4,683.705 1113.96,683.705 1114.52,683.705 1115.08,683.705 1115.64,683.705 1116.2,683.705 1116.76,683.705 1117.31,683.705 1117.87,683.705 1118.43,683.705 1118.99,683.705 1119.55,683.705 1120.11,683.705 1120.67,683.705 1121.23,683.705 1121.79,683.705 1122.35,683.705 1122.91,683.705 1123.47,683.705 1124.03,683.705 1124.59,683.705 1125.14,683.705 1125.7,683.705 1126.26,683.705 1126.82,683.705 1127.38,683.705 1127.94,683.705 1128.5,683.705 1129.06,683.705 1129.62,683.705 1130.18,683.705 1130.74,683.705 1131.3,683.705 1131.86,683.705 1132.41,683.705 1132.97,683.705 1133.53,683.705 1134.09,683.705 1134.65,683.705 1135.21,683.705 1135.77,683.705 1136.33,683.705 1136.89,683.705 1137.45,683.705 1138.01,683.705 1138.57,683.705 1139.13,683.705 1139.68,683.705 1140.24,683.705 1140.8,683.705 1141.36,683.705 1141.92,683.705 1142.48,683.705 1143.04,683.705 1143.6,683.705 1144.16,683.705 1144.72,683.705 1145.28,683.705 1145.84,683.705 1146.4,683.705 1146.96,683.705 1147.51,683.705 1148.07,683.705 1148.63,683.705 1149.19,683.705 1149.75,683.705 1150.31,683.705 1150.87,683.705 1151.43,683.705 1151.99,683.705 1152.55,683.705 1153.11,683.705 1153.67,683.705 1154.23,683.705 1154.78,683.705 1155.34,683.705 1155.9,683.705 1156.46,683.705 1157.02,683.705 1157.58,683.705 1158.14,683.705 1158.7,683.705 1159.26,683.705 1159.82,683.705 1160.38,683.705 1160.94,683.705 1161.5,683.705 1162.05,683.705 1162.61,683.705 1163.17,683.705 1163.73,683.705 1164.29,683.705 1164.85,683.705 1165.41,683.705 1165.97,683.705 1166.53,683.705 1167.09,683.705 1167.65,683.705 1168.21,683.705 1168.77,683.705 1169.33,683.705 1169.88,683.705 1170.44,683.705 1171,683.705 1171.56,683.705 1172.12,683.705 1172.68,683.705 1173.24,683.705 1173.8,683.705 1174.36,683.705 1174.92,683.705 1175.48,683.705 1176.04,683.705 1176.6,683.705 1177.15,683.705 1177.71,683.705 1178.27,683.705 1178.83,683.705 1179.39,683.705 1179.95,683.705 1180.51,683.705 1181.07,683.705 1181.63,683.705 1182.19,683.705 1182.75,683.705 1183.31,683.705 1183.87,683.705 1184.43,683.705 1184.98,683.705 1185.54,683.705 1186.1,683.705 1186.66,683.705 1187.22,683.705 1187.78,683.705 1188.34,683.705 1188.9,683.705 1189.46,683.705 1190.02,683.705 1190.58,683.705 1191.14,683.705 1191.7,683.705 1192.25,683.705 1192.81,683.705 1193.37,683.705 1193.93,683.705 1194.49,683.705 1195.05,683.705 1195.61,683.705 1196.17,683.705 1196.73,683.705 1197.29,683.705 1197.85,683.705 1198.41,683.705 1198.97,683.705 1199.52,683.705 1200.08,683.705 1200.64,683.705 1201.2,683.705 1201.76,683.705 1202.32,683.705 1202.88,683.705 1203.44,683.705 1204,683.705 1204.56,683.705 1205.12,683.705 1205.68,683.705 1206.24,683.705 1206.8,683.705 1207.35,683.705 1207.91,683.705 1208.47,683.705 1209.03,683.705 1209.59,683.705 1210.15,683.705 1210.71,683.705 1211.27,683.705 1211.83,683.705 1212.39,683.705 1212.95,683.705 1213.51,683.705 1214.07,683.705 1214.62,683.705 1215.18,683.705 1215.74,683.705 1216.3,683.705 1216.86,683.705 1217.42,683.705 1217.98,683.705 1218.54,683.705 1219.1,683.705 1219.66,683.705 1220.22,683.705 1220.78,683.705 1221.34,683.705 1221.89,683.705 1222.45,683.705 1223.01,683.705 1223.57,683.705 1224.13,683.705 1224.69,683.705 1225.25,683.705 1225.81,683.705 1226.37,683.705 1226.93,683.705 1227.49,683.705 1228.05,683.705 1228.61,683.705 1229.17,683.705 1229.72,683.705 1230.28,683.705 1230.84,683.705 1231.4,683.705 1231.96,683.705 1232.52,683.705 1233.08,683.705 1233.64,683.705 1234.2,683.705 1234.76,683.705 1235.32,683.705 1235.88,683.705 1236.44,683.705 1236.99,683.705 1237.55,683.705 1238.11,683.705 1238.67,683.705 1239.23,683.705 1239.79,683.705 1240.35,683.705 1240.91,683.705 1241.47,683.705 1242.03,683.705 1242.59,683.705 1243.15,683.705 1243.71,683.705 1244.26,683.705 1244.82,683.705 1245.38,683.705 1245.94,683.705 1246.5,683.705 1247.06,683.705 1247.62,683.705 1248.18,683.705 1248.74,683.705 1249.3,683.705 1249.86,683.705 1250.42,683.705 1250.98,683.705 1251.54,683.705 1252.09,683.705 1252.65,683.705 1253.21,683.705 1253.77,683.705 1254.33,683.705 1254.89,683.705 1255.45,683.705 1256.01,683.705 1256.57,683.705 1257.13,683.705 1257.69,683.705 1258.25,683.705 1258.81,683.705 1259.36,683.705 1259.92,683.705 1260.48,683.705 1261.04,683.705 1261.6,683.705 1262.16,683.705 1262.72,683.705 1263.28,683.705 1263.84,683.705 1264.4,683.705 1264.96,683.705 1265.52,683.705 1266.08,683.705 1266.63,683.705 1267.19,683.705 1267.75,683.705 1268.31,683.705 1268.87,683.705 1269.43,683.705 1269.99,683.705 1270.55,683.705 1271.11,683.705 1271.67,683.705 1272.23,683.705 1272.79,683.705 1273.35,683.705 1273.91,683.705 1274.46,683.705 1275.02,683.705 1275.58,683.705 1276.14,683.705 1276.7,683.705 1277.26,683.705 1277.82,683.705 1278.38,683.705 1278.94,683.705 1279.5,683.705 1280.06,683.705 1280.62,683.705 1281.18,683.705 1281.73,683.705 1282.29,683.705 1282.85,683.705 1283.41,683.705 1283.97,683.705 1284.53,683.705 1285.09,683.705 1285.65,683.705 1286.21,683.705 1286.77,683.705 1287.33,683.705 1287.89,683.705 1288.45,683.705 1289,683.705 1289.56,683.705 1290.12,683.705 1290.68,683.705 1291.24,683.705 1291.8,683.705 1292.36,683.705 1292.92,683.705 1293.48,683.705 1294.04,683.705 1294.6,683.705 1295.16,683.705 1295.72,683.705 1296.28,683.705 1296.83,683.705 1297.39,683.705 1297.95,683.705 1298.51,683.705 1299.07,683.705 1299.63,683.705 1300.19,683.705 1300.75,683.705 1301.31,683.705 1301.87,683.705 1302.43,683.705 1302.99,683.705 1303.55,683.705 1304.1,683.705 1304.66,683.705 1305.22,683.705 1305.78,683.705 1306.34,683.705 1306.9,683.705 1307.46,683.705 1308.02,683.705 1308.58,683.705 1309.14,683.705 1309.7,683.705 1310.26,683.705 1310.82,683.705 1311.38,683.705 1311.93,683.705 1312.49,683.705 1313.05,683.705 1313.61,683.705 1314.17,683.705 1314.73,683.705 1315.29,683.705 1315.85,683.705 1316.41,683.705 1316.97,683.705 1317.53,683.705 1318.09,683.705 1318.65,683.705 1319.2,683.705 1319.76,683.705 1320.32,683.705 1320.88,683.705 1321.44,683.705 1322,683.705 1322.56,683.705 1323.12,683.705 1323.68,683.705 1324.24,683.705 1324.8,683.705 1325.36,683.705 1325.92,683.705 1326.47,683.705 1327.03,683.705 1327.59,683.705 1328.15,683.705 1328.71,683.705 1329.27,683.705 1329.83,683.705 1330.39,683.705 1330.95,683.705 1331.51,683.705 1332.07,683.705 1332.63,683.705 1333.19,683.705 1333.75,683.705 1334.3,683.705 1334.86,683.705 1335.42,683.705 1335.98,683.705 1336.54,683.705 1337.1,683.705 1337.66,683.705 1338.22,683.705 1338.78,683.705 1339.34,683.705 1339.9,683.705 1340.46,683.705 1341.02,683.705 1341.57,683.705 1342.13,683.705 1342.69,683.705 1343.25,683.705 1343.81,683.705 1344.37,683.705 1344.93,683.705 1345.49,683.705 1346.05,683.705 1346.61,683.705 1347.17,683.705 1347.73,683.705 1348.29,683.705 1348.84,683.705 1349.4,683.705 1349.96,683.705 1350.52,683.705 1351.08,683.705 1351.64,683.705 1352.2,683.705 1352.76,683.705 1353.32,683.705 1353.88,683.705 1354.44,683.705 1355,683.705 1355.56,683.705 1356.12,683.705 1356.67,683.705 1357.23,683.705 1357.79,683.705 1358.35,683.705 1358.91,683.705 1359.47,683.705 1360.03,683.705 1360.59,683.705 1361.15,683.705 1361.71,683.705 1362.27,683.705 1362.83,683.705 1363.39,683.705 1363.94,683.705 1364.5,683.705 1365.06,683.705 1365.62,683.705 1366.18,683.705 1366.74,683.705 1367.3,683.705 1367.86,683.705 1368.42,683.705 1368.98,683.705 1369.54,683.705 1370.1,683.705 1370.66,683.705 1371.21,683.705 1371.77,683.705 1372.33,683.705 1372.89,683.705 1373.45,683.705 1374.01,683.705 1374.57,683.705 1375.13,683.705 1375.69,683.705 1376.25,683.705 1376.81,683.705 1377.37,683.705 1377.93,683.705 1378.49,683.705 1379.04,683.705 1379.6,683.705 1380.16,683.705 1380.72,683.705 1381.28,683.705 1381.84,683.705 1382.4,683.705 1382.96,683.705 1383.52,683.705 1384.08,683.705 1384.64,683.705 1385.2,683.705 1385.76,683.705 1386.31,683.705 1386.87,683.705 1387.43,683.705 1387.99,683.705 1388.55,683.705 1389.11,683.705 1389.67,683.705 1390.23,683.705 1390.79,683.705 1391.35,683.705 1391.91,683.705 1392.47,683.705 1393.03,683.705 1393.58,683.705 1394.14,683.705 1394.7,683.705 1395.26,683.705 1395.82,683.705 1396.38,683.705 1396.94,683.705 1397.5,683.705 1398.06,683.705 1398.62,683.705 1399.18,683.705 1399.74,683.705 1400.3,683.705 1400.86,683.705 1401.41,683.705 1401.97,683.705 1402.53,683.705 1403.09,683.705 1403.65,683.705 1404.21,683.705 1404.77,683.705 1405.33,683.705 1405.89,683.705 1406.45,683.705 1407.01,683.705 1407.57,683.705 1408.13,683.705 1408.68,683.705 1409.24,683.705 1409.8,683.705 1410.36,683.705 1410.92,683.705 1411.48,683.705 1412.04,683.705 1412.6,683.705 1413.16,683.705 1413.72,683.705 1414.28,683.705 1414.84,683.705 1415.4,683.705 1415.95,683.705 1416.51,683.705 1417.07,683.705 1417.63,683.705 1418.19,683.705 1418.75,683.705 1419.31,683.705 1419.87,683.705 1420.43,683.705 1420.99,683.705 1421.55,683.705 1422.11,683.705 1422.67,683.705 1423.23,683.705 1423.78,683.705 1424.34,683.705 1424.9,683.705 1425.46,683.705 1426.02,683.705 1426.58,683.705 1427.14,683.705 1427.7,683.705 1428.26,683.705 1428.82,683.705 1429.38,683.705 1429.94,683.705 1430.5,683.705 1431.05,683.705 1431.61,683.705 1432.17,683.705 1432.73,683.705 1433.29,683.705 1433.85,683.705 1434.41,683.705 1434.97,683.705 1435.53,683.705 1436.09,683.705 1436.65,683.705 1437.21,683.705 1437.77,683.705 1438.33,683.705 1438.88,683.705 1439.44,683.705 1440,683.705 1440.56,683.705 1441.12,683.705 1441.68,683.705 1442.24,683.705 1442.8,683.705 1443.36,683.705 1443.92,683.705 1444.48,683.705 1445.04,683.705 1445.6,683.705 1446.15,683.705 1446.71,683.705 1447.27,683.705 1447.83,683.705 1448.39,683.705 1448.95,683.705 1449.51,683.705 1450.07,683.705 1450.63,683.705 1451.19,683.705 1451.75,683.705 1452.31,683.705 1452.87,683.705 1453.42,683.705 1453.98,683.705 1454.54,683.705 1455.1,683.705 1455.66,683.705 1456.22,683.705 1456.78,683.705 1457.34,683.705 1457.9,683.705 1458.46,683.705 1459.02,683.705 1459.58,683.705 1460.14,683.705 1460.7,683.705 1461.25,683.705 1461.81,683.705 1462.37,683.705 1462.93,683.705 1463.49,683.705 1464.05,683.705 1464.61,683.705 1465.17,683.705 1465.73,683.705 1466.29,683.705 1466.85,683.705 1467.41,683.705 1467.97,683.705 1468.52,683.705 1469.08,683.705 1469.64,683.705 1470.2,683.705 1470.76,683.705 1471.32,683.705 1471.88,683.705 1472.44,683.705 1473,683.705 1473.56,683.705 1474.12,683.705 1474.68,683.705 1475.24,683.705 1475.79,683.705 1476.35,683.705 1476.91,683.705 1477.47,683.705 1478.03,683.705 1478.59,683.705 1479.15,683.705 1479.71,683.705 1480.27,683.705 1480.83,683.705 1481.39,683.705 1481.95,683.705 1482.51,683.705 1483.07,683.705 1483.62,683.705 1484.18,683.705 1484.74,683.705 1485.3,683.705 1485.86,683.705 1486.42,683.705 1486.98,683.705 1487.54,683.705 1488.1,683.705 1488.66,683.705 1489.22,683.705 1489.78,683.705 1490.34,683.705 1490.89,683.705 1491.45,683.705 1492.01,683.705 1492.57,683.705 1493.13,683.705 1493.69,683.705 1494.25,683.705 1494.81,683.705 1495.37,683.705 1495.93,683.705 1496.49,683.705 1497.05,683.705 1497.61,683.705 1498.16,683.705 1498.72,683.705 1499.28,683.705 1499.84,683.705 1500.4,683.705 1500.96,683.705 1501.52,683.705 1502.08,683.705 1502.64,683.705 1503.2,683.705 1503.76,683.705 1504.32,683.705 1504.88,683.705 1505.44,683.705 1505.99,683.705 1506.55,683.705 1507.11,683.705 1507.67,683.705 1508.23,683.705 1508.79,683.705 1509.35,683.705 1509.91,683.705 1510.47,683.705 1511.03,683.705 1511.59,683.705 1512.15,683.705 1512.71,683.705 1513.26,683.705 1513.82,683.705 1514.38,683.705 1514.94,683.705 1515.5,683.705 1516.06,683.705 1516.62,683.705 1517.18,683.705 1517.74,683.705 1518.3,683.705 1518.86,683.705 1519.42,683.705 1519.98,683.705 1520.53,683.705 1521.09,683.705 1521.65,683.705 1522.21,683.705 1522.77,683.705 1523.33,683.705 1523.89,683.705 1524.45,683.705 1525.01,683.705 1525.57,683.705 1526.13,683.705 1526.69,683.705 1527.25,683.705 1527.81,683.705 1528.36,683.705 1528.92,683.705 1529.48,683.705 1530.04,683.705 1530.6,683.705 1531.16,683.705 1531.72,683.705 1532.28,683.705 1532.84,683.705 1533.4,683.705 1533.96,683.705 1534.52,683.705 1535.08,683.705 1535.63,683.705 1536.19,683.705 1536.75,683.705 1537.31,683.705 1537.87,683.705 1538.43,683.705 1538.99,683.705 1539.55,683.705 1540.11,683.705 1540.67,683.705 1541.23,683.705 1541.79,683.705 1542.35,683.705 1542.9,683.705 1543.46,683.705 1544.02,683.705 1544.58,683.705 1545.14,683.705 1545.7,683.705 1546.26,683.705 1546.82,683.705 1547.38,683.705 1547.94,683.705 1548.5,683.705 1549.06,683.705 1549.62,683.705 1550.18,683.705 1550.73,683.705 1551.29,683.705 1551.85,683.705 1552.41,683.705 1552.97,683.705 1553.53,683.705 1554.09,683.705 1554.65,683.705 1555.21,683.705 1555.77,683.705 1556.33,683.705 1556.89,683.705 1557.45,683.705 1558,683.705 1558.56,683.705 1559.12,683.705 1559.68,683.705 1560.24,683.705 1560.8,683.705 1561.36,683.705 1561.92,683.705 1562.48,683.705 1563.04,683.705 1563.6,683.705 1564.16,683.705 1564.72,683.705 1565.28,683.705 1565.83,683.705 1566.39,683.705 1566.95,683.705 1567.51,683.705 1568.07,683.705 1568.63,683.705 1569.19,683.705 1569.75,683.705 1570.31,683.705 1570.87,683.705 1571.43,683.705 1571.99,683.705 1572.55,683.705 1573.1,683.705 1573.66,683.705 1574.22,683.705 1574.78,683.705 1575.34,683.705 1575.9,683.705 1576.46,683.705 1577.02,683.705 1577.58,683.705 1578.14,683.705 1578.7,683.705 1579.26,683.705 1579.82,683.705 1580.37,683.705 1580.93,683.705 1581.49,683.705 1582.05,683.705 1582.61,683.705 1583.17,683.705 1583.73,683.705 1584.29,683.705 1584.85,683.705 1585.41,683.705 1585.97,683.705 1586.53,683.705 1587.09,683.705 1587.65,683.705 1588.2,683.705 1588.76,683.705 1589.32,683.705 1589.88,683.705 1590.44,683.705 1591,683.705 1591.56,683.705 1592.12,683.705 1592.68,683.705 1593.24,683.705 1593.8,683.705 1594.36,683.705 1594.92,683.705 1595.47,683.705 1596.03,683.705 1596.59,683.705 1597.15,683.705 1597.71,683.705 1598.27,683.705 1598.83,683.705 1599.39,683.705 1599.95,683.705 1600.51,683.705 1601.07,683.705 1601.63,683.705 1602.19,683.705 1602.74,683.705 1603.3,683.705 1603.86,683.705 1604.42,683.705 1604.98,683.705 1605.54,683.705 1606.1,683.705 1606.66,683.705 1607.22,683.705 1607.78,683.705 1608.34,683.705 1608.9,683.705 1609.46,683.705 1610.02,683.705 1610.57,683.705 1611.13,683.705 1611.69,683.705 1612.25,683.705 1612.81,683.705 1613.37,683.705 1613.93,683.705 1614.49,683.705 1615.05,683.705 1615.61,683.705 1616.17,683.705 1616.73,683.705 1617.29,683.705 1617.84,683.705 1618.4,683.705 1618.96,683.705 1619.52,683.705 1620.08,683.705 1620.64,683.705 1621.2,683.705 1621.76,683.705 1622.32,683.705 1622.88,683.705 1623.44,683.705 1624,683.705 1624.56,683.705 1625.11,683.705 1625.67,683.705 1626.23,683.705 1626.79,683.705 1627.35,683.705 1627.91,683.705 1628.47,683.705 1629.03,683.705 1629.59,683.705 1630.15,683.705 1630.71,683.705 1631.27,683.705 1631.83,683.705 1632.39,683.705 1632.94,683.705 1633.5,683.705 1634.06,683.705 1634.62,683.705 1635.18,683.705 1635.74,683.705 1636.3,683.705 1636.86,683.705 1637.42,683.705 1637.98,683.705 1638.54,683.705 1639.1,683.705 1639.66,683.705 1640.21,683.705 1640.77,683.705 1641.33,683.705 1641.89,683.705 1642.45,683.705 1643.01,683.705 1643.57,683.705 1644.13,683.705 1644.69,683.705 1645.25,683.705 1645.81,683.705 1646.37,683.705 1646.93,683.705 1647.48,683.705 1648.04,683.705 1648.6,683.705 1649.16,683.705 1649.72,683.705 1650.28,683.705 1650.84,683.705 1651.4,683.705 1651.96,683.705 1652.52,683.705 1653.08,683.705 1653.64,683.705 1654.2,683.705 1654.76,683.705 1655.31,683.705 1655.87,683.705 1656.43,683.705 1656.99,683.705 1657.55,683.705 1658.11,683.705 1658.67,683.705 1659.23,683.705 1659.79,683.705 1660.35,683.705 1660.91,683.705 1661.47,683.705 1662.03,683.705 1662.58,683.705 1663.14,683.705 1663.7,683.705 1664.26,683.705 1664.82,683.705 1665.38,683.705 1665.94,683.705 1666.5,683.705 1667.06,683.705 1667.62,683.705 1668.18,683.705 1668.74,683.705 1669.3,683.705 1669.85,683.705 1670.41,683.705 1670.97,683.705 1671.53,683.705 1672.09,683.705 1672.65,683.705 1673.21,683.705 1673.77,683.705 1674.33,683.705 1674.89,683.705 1675.45,683.705 1676.01,683.705 1676.57,683.705 1677.13,683.705 1677.68,683.705 1678.24,683.705 1678.8,683.705 1679.36,683.705 1679.92,683.705 1680.48,683.705 1681.04,683.705 1681.6,683.705 1682.16,683.705 1682.72,683.705 1683.28,683.705 1683.84,683.705 1684.4,683.705 1684.95,683.705 1685.51,683.705 1686.07,683.705 1686.63,683.705 1687.19,683.705 1687.75,683.705 1688.31,683.705 1688.87,683.705 1689.43,683.705 1689.99,683.705 1690.55,683.705 1691.11,683.705 1691.67,683.705 1692.23,683.705 1692.78,683.705 1693.34,683.705 1693.9,683.705 1694.46,683.705 1695.02,683.705 1695.58,683.705 1696.14,683.705 1696.7,683.705 1697.26,683.705 1697.82,683.705 1698.38,683.705 1698.94,683.705 1699.5,683.705 1700.05,683.705 1700.61,683.705 1701.17,683.705 1701.73,683.705 1702.29,683.705 1702.85,683.705 1703.41,683.705 1703.97,683.705 1704.53,683.705 1705.09,683.705 1705.65,683.705 1706.21,683.705 1706.77,683.705 1707.32,683.705 1707.88,683.705 1708.44,683.705 1709,683.705 1709.56,683.705 1710.12,683.705 1710.68,683.705 1711.24,683.705 1711.8,683.705 1712.36,683.705 1712.92,683.705 1713.48,683.705 1714.04,683.705 1714.6,683.705 1715.15,683.705 1715.71,683.705 1716.27,683.705 1716.83,683.705 1717.39,683.705 1717.95,683.705 1718.51,683.705 1719.07,683.705 1719.63,683.705 1720.19,683.705 1720.75,683.705 1721.31,683.705 1721.87,683.705 1722.42,683.705 1722.98,683.705 1723.54,683.705 1724.1,683.705 1724.66,683.705 1725.22,683.705 1725.78,683.705 1726.34,683.705 1726.9,683.705 1727.46,683.705 1728.02,683.705 1728.58,683.705 1729.14,683.705 1729.69,683.705 1730.25,683.705 1730.81,683.705 1731.37,683.705 1731.93,683.705 1732.49,683.705 1733.05,683.705 1733.61,683.705 1734.17,683.705 1734.73,683.705 1735.29,683.705 1735.85,683.705 1736.41,683.705 1736.97,683.705 1737.52,683.705 1738.08,683.705 1738.64,683.705 1739.2,683.705 1739.76,683.705 1740.32,683.705 1740.88,683.705 1741.44,683.705 1742,683.705 1742.56,683.705 1743.12,683.705 1743.68,683.705 1744.24,683.705 1744.79,683.705 1745.35,683.705 1745.91,683.705 1746.47,683.705 1747.03,683.705 1747.59,683.705 1748.15,683.705 1748.71,683.705 1749.27,683.705 1749.83,683.705 1750.39,683.705 1750.95,683.705 1751.51,683.705 1752.06,683.705 1752.62,683.705 1753.18,683.705 1753.74,683.705 1754.3,683.705 1754.86,683.705 1755.42,683.705 1755.98,683.705 1756.54,683.705 1757.1,683.705 1757.66,683.705 1758.22,683.705 1758.78,683.705 1759.34,683.705 1759.89,683.705 1760.45,683.705 1761.01,683.705 1761.57,683.705 1762.13,683.705 1762.69,683.705 1763.25,683.705 1763.81,683.705 1764.37,683.705 1764.93,683.705 1765.49,683.705 1766.05,683.705 1766.61,683.705 1767.16,683.705 1767.72,683.705 1768.28,683.705 1768.84,683.705 1769.4,683.705 1769.96,683.705 1770.52,683.705 1771.08,683.705 1771.64,683.705 1772.2,683.705 1772.76,683.705 1773.32,683.705 1773.88,683.705 1774.43,683.705 1774.99,683.705 1775.55,683.705 1776.11,683.705 1776.67,683.705 1777.23,683.705 1777.79,683.705 1778.35,683.705 1778.91,683.705 1779.47,683.705 1780.03,683.705 1780.59,683.705 1781.15,683.705 1781.71,683.705 1782.26,683.705 1782.82,683.705 1783.38,683.705 1783.94,683.705 1784.5,683.705 1785.06,683.705 1785.62,683.705 1786.18,683.705 1786.74,683.705 1787.3,683.705 1787.86,683.705 1788.42,683.705 1788.98,683.705 1789.53,683.705 1790.09,683.705 1790.65,683.705 1791.21,683.705 1791.77,683.705 1792.33,683.705 1792.89,683.705 1793.45,683.705 1794.01,683.705 1794.57,683.705 1795.13,683.705 1795.69,683.705 1796.25,683.705 1796.8,683.705 1797.36,683.705 1797.92,683.705 1798.48,683.705 1799.04,683.705 1799.6,683.705 1800.16,683.705 1800.72,683.705 1801.28,683.705 1801.84,683.705 1802.4,683.705 1802.96,683.705 1803.52,683.705 1804.08,683.705 1804.63,683.705 1805.19,683.705 1805.75,683.705 1806.31,683.705 1806.87,683.705 1807.43,683.705 1807.99,683.705 1808.55,683.705 1809.11,683.705 1809.67,683.705 1810.23,683.705 1810.79,683.705 1811.35,683.705 1811.9,683.705 1812.46,683.705 1813.02,683.705 1813.58,683.705 1814.14,683.705 1814.7,683.705 1815.26,683.705 1815.82,683.705 1816.38,683.705 1816.94,683.705 1817.5,683.705 1818.06,683.705 1818.62,683.705 1819.18,683.705 1819.73,683.705 1820.29,683.705 1820.85,683.705 1821.41,683.705 1821.97,683.705 1822.53,683.705 1823.09,683.705 1823.65,683.705 1824.21,683.705 1824.77,683.705 1825.33,683.705 1825.89,683.705 1826.45,683.705 1827,683.705 1827.56,683.705 1828.12,683.705 1828.68,683.705 1829.24,683.705 1829.8,683.705 1830.36,683.705 1830.92,683.705 1831.48,683.705 1832.04,683.705 1832.6,683.705 1833.16,683.705 1833.72,683.705 1834.27,683.705 1834.83,683.705 1835.39,683.705 1835.95,683.705 1836.51,683.705 1837.07,683.705 1837.63,683.705 1838.19,683.705 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.031452485137154 ± 0.019978297255233632\nProjected Energy: -4.015690416394923 ± (0.0037372752896631667, 0.0036480999416594884)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.471289</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3425e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">9.067e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.546e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.252e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">1.9186e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.395e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.3631242916133637\n -0.7590191922770924\n  0.13584182219621077\n  0.1578999869460862\n  0.8767114411781343\n  1.5305929970973358\n  1.5835732611867384\n  3.0728703303258698\n  3.1256726539518365\n  4.862107221562168\n  6.260694850380597\n  6.40267121118311\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2(Re(t) * cos(k) + Im(t) * sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) * k^2 - 2 * Im(t) * k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t,k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) * cos(k) + Im(t) * sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) * k^2 - 2 * Im(t) * k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
