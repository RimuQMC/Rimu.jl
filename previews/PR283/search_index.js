var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21215373271345947 ± 0.0016957515374447208\n   G2(1) = 0.9175789476816545 ± 0.0008246210404803031\n   G2(2) = 0.9821836066419395 ± 0.0007934054887210469\n   G2(3) = 0.9883211586393523 ± 0.0011225079556595454\n   G2(4) = 0.9821836066419395 ± 0.0007934054887210469\n   G2(5) = 0.9175789476816545 ± 0.0008246210404803031\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.021897586718433 ± 0.13988000172185758\n   Replica 2: -4.062559876492965 ± 0.14418290738792117\n   Replica 3: -4.00415402679315 ± 0.15418673335852814\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip970\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip970)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip971\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip970)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip972\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.14 2211.02,1003.14 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.436 2211.02,745.436 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.736 2211.02,487.736 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.036 2211.02,230.036 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.14 423.181,1003.14 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.436 423.181,745.436 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.736 423.181,487.736 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.036 423.181,230.036 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.64 356.339 1246.64 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.2 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.2 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M290.043 1016.48 L306.363 1016.48 L306.363 1020.42 L284.418 1020.42 L284.418 1016.48 Q287.08 1013.73 291.664 1009.1 Q296.27 1004.44 297.451 1003.1 Q299.696 1000.58 300.576 998.842 Q301.478 997.083 301.478 995.393 Q301.478 992.639 299.534 990.903 Q297.613 989.167 294.511 989.167 Q292.312 989.167 289.858 989.93 Q287.427 990.694 284.65 992.245 L284.65 987.523 Q287.474 986.389 289.927 985.81 Q292.381 985.231 294.418 985.231 Q299.789 985.231 302.983 987.917 Q306.177 990.602 306.177 995.092 Q306.177 997.222 305.367 999.143 Q304.58 1001.04 302.474 1003.63 Q301.895 1004.31 298.793 1007.52 Q295.691 1010.72 290.043 1016.48 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M316.224 985.856 L334.58 985.856 L334.58 989.792 L320.506 989.792 L320.506 998.264 Q321.524 997.916 322.543 997.754 Q323.562 997.569 324.58 997.569 Q330.367 997.569 333.747 1000.74 Q337.126 1003.91 337.126 1009.33 Q337.126 1014.91 333.654 1018.01 Q330.182 1021.09 323.862 1021.09 Q321.687 1021.09 319.418 1020.72 Q317.173 1020.35 314.765 1019.61 L314.765 1014.91 Q316.849 1016.04 319.071 1016.6 Q321.293 1017.15 323.77 1017.15 Q327.774 1017.15 330.112 1015.05 Q332.45 1012.94 332.45 1009.33 Q332.45 1005.72 330.112 1003.61 Q327.774 1001.5 323.77 1001.5 Q321.895 1001.5 320.02 1001.92 Q318.168 1002.34 316.224 1003.22 L316.224 985.856 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M356.339 988.935 Q352.728 988.935 350.899 992.5 Q349.094 996.041 349.094 1003.17 Q349.094 1010.28 350.899 1013.84 Q352.728 1017.38 356.339 1017.38 Q359.973 1017.38 361.779 1013.84 Q363.608 1010.28 363.608 1003.17 Q363.608 996.041 361.779 992.5 Q359.973 988.935 356.339 988.935 M356.339 985.231 Q362.149 985.231 365.205 989.838 Q368.284 994.421 368.284 1003.17 Q368.284 1011.9 365.205 1016.5 Q362.149 1021.09 356.339 1021.09 Q350.529 1021.09 347.45 1016.5 Q344.395 1011.9 344.395 1003.17 Q344.395 994.421 347.45 989.838 Q350.529 985.231 356.339 985.231 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M286.062 728.156 L304.418 728.156 L304.418 732.091 L290.344 732.091 L290.344 740.563 Q291.363 740.216 292.381 740.054 Q293.4 739.869 294.418 739.869 Q300.205 739.869 303.585 743.04 Q306.964 746.212 306.964 751.628 Q306.964 757.207 303.492 760.309 Q300.02 763.387 293.701 763.387 Q291.525 763.387 289.256 763.017 Q287.011 762.647 284.603 761.906 L284.603 757.207 Q286.687 758.341 288.909 758.897 Q291.131 759.452 293.608 759.452 Q297.613 759.452 299.951 757.346 Q302.288 755.239 302.288 751.628 Q302.288 748.017 299.951 745.911 Q297.613 743.804 293.608 743.804 Q291.733 743.804 289.858 744.221 Q288.006 744.638 286.062 745.517 L286.062 728.156 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M326.177 731.235 Q322.566 731.235 320.737 734.8 Q318.932 738.341 318.932 745.471 Q318.932 752.577 320.737 756.142 Q322.566 759.684 326.177 759.684 Q329.811 759.684 331.617 756.142 Q333.446 752.577 333.446 745.471 Q333.446 738.341 331.617 734.8 Q329.811 731.235 326.177 731.235 M326.177 727.531 Q331.987 727.531 335.043 732.138 Q338.122 736.721 338.122 745.471 Q338.122 754.198 335.043 758.804 Q331.987 763.387 326.177 763.387 Q320.367 763.387 317.288 758.804 Q314.233 754.198 314.233 745.471 Q314.233 736.721 317.288 732.138 Q320.367 727.531 326.177 727.531 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M356.339 731.235 Q352.728 731.235 350.899 734.8 Q349.094 738.341 349.094 745.471 Q349.094 752.577 350.899 756.142 Q352.728 759.684 356.339 759.684 Q359.973 759.684 361.779 756.142 Q363.608 752.577 363.608 745.471 Q363.608 738.341 361.779 734.8 Q359.973 731.235 356.339 731.235 M356.339 727.531 Q362.149 727.531 365.205 732.138 Q368.284 736.721 368.284 745.471 Q368.284 754.198 365.205 758.804 Q362.149 763.387 356.339 763.387 Q350.529 763.387 347.45 758.804 Q344.395 754.198 344.395 745.471 Q344.395 736.721 347.45 732.138 Q350.529 727.531 356.339 727.531 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M284.835 470.456 L307.057 470.456 L307.057 472.447 L294.511 505.016 L289.627 505.016 L301.432 474.391 L284.835 474.391 L284.835 470.456 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M316.224 470.456 L334.58 470.456 L334.58 474.391 L320.506 474.391 L320.506 482.863 Q321.524 482.516 322.543 482.354 Q323.562 482.169 324.58 482.169 Q330.367 482.169 333.747 485.34 Q337.126 488.511 337.126 493.928 Q337.126 499.507 333.654 502.609 Q330.182 505.687 323.862 505.687 Q321.687 505.687 319.418 505.317 Q317.173 504.947 314.765 504.206 L314.765 499.507 Q316.849 500.641 319.071 501.197 Q321.293 501.752 323.77 501.752 Q327.774 501.752 330.112 499.646 Q332.45 497.539 332.45 493.928 Q332.45 490.317 330.112 488.21 Q327.774 486.104 323.77 486.104 Q321.895 486.104 320.02 486.521 Q318.168 486.937 316.224 487.817 L316.224 470.456 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M356.339 473.535 Q352.728 473.535 350.899 477.099 Q349.094 480.641 349.094 487.771 Q349.094 494.877 350.899 498.442 Q352.728 501.984 356.339 501.984 Q359.973 501.984 361.779 498.442 Q363.608 494.877 363.608 487.771 Q363.608 480.641 361.779 477.099 Q359.973 473.535 356.339 473.535 M356.339 469.831 Q362.149 469.831 365.205 474.437 Q368.284 479.021 368.284 487.771 Q368.284 496.497 365.205 501.104 Q362.149 505.687 356.339 505.687 Q350.529 505.687 347.45 501.104 Q344.395 496.497 344.395 487.771 Q344.395 479.021 347.45 474.437 Q350.529 469.831 356.339 469.831 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M256.664 243.381 L264.303 243.381 L264.303 217.015 L255.992 218.682 L255.992 214.422 L264.256 212.756 L268.932 212.756 L268.932 243.381 L276.571 243.381 L276.571 247.316 L256.664 247.316 L256.664 243.381 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M296.015 215.834 Q292.404 215.834 290.576 219.399 Q288.77 222.941 288.77 230.07 Q288.77 237.177 290.576 240.742 Q292.404 244.283 296.015 244.283 Q299.65 244.283 301.455 240.742 Q303.284 237.177 303.284 230.07 Q303.284 222.941 301.455 219.399 Q299.65 215.834 296.015 215.834 M296.015 212.131 Q301.826 212.131 304.881 216.737 Q307.96 221.321 307.96 230.07 Q307.96 238.797 304.881 243.404 Q301.826 247.987 296.015 247.987 Q290.205 247.987 287.127 243.404 Q284.071 238.797 284.071 230.07 Q284.071 221.321 287.127 216.737 Q290.205 212.131 296.015 212.131 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M326.177 215.834 Q322.566 215.834 320.737 219.399 Q318.932 222.941 318.932 230.07 Q318.932 237.177 320.737 240.742 Q322.566 244.283 326.177 244.283 Q329.811 244.283 331.617 240.742 Q333.446 237.177 333.446 230.07 Q333.446 222.941 331.617 219.399 Q329.811 215.834 326.177 215.834 M326.177 212.131 Q331.987 212.131 335.043 216.737 Q338.122 221.321 338.122 230.07 Q338.122 238.797 335.043 243.404 Q331.987 247.987 326.177 247.987 Q320.367 247.987 317.288 243.404 Q314.233 238.797 314.233 230.07 Q314.233 221.321 317.288 216.737 Q320.367 212.131 326.177 212.131 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M356.339 215.834 Q352.728 215.834 350.899 219.399 Q349.094 222.941 349.094 230.07 Q349.094 237.177 350.899 240.742 Q352.728 244.283 356.339 244.283 Q359.973 244.283 361.779 240.742 Q363.608 237.177 363.608 230.07 Q363.608 222.941 361.779 219.399 Q359.973 215.834 356.339 215.834 M356.339 212.131 Q362.149 212.131 365.205 216.737 Q368.284 221.321 368.284 230.07 Q368.284 238.797 365.205 243.404 Q362.149 247.987 356.339 247.987 Q350.529 247.987 347.45 243.404 Q344.395 238.797 344.395 230.07 Q344.395 221.321 347.45 216.737 Q350.529 212.131 356.339 212.131 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip972)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.036 4017.76,230.036 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1247.43 461.101,1246.75 461.669,1245.99 462.238,1244.12 462.806,1243.2 463.375,1242.2 463.943,1241.11 464.511,1237.85 465.08,1236.56 465.648,1235.15 466.216,1233.63 466.785,1231.97 467.353,1230.18 467.921,1228.27 468.49,1226.21 469.058,1221.95 469.626,1218.53 470.195,1216.04 470.763,1212.32 471.331,1209.46 471.9,1206.41 472.468,1203.19 473.036,1197.68 473.605,1194.07 474.173,1190.24 474.741,1186.23 475.31,1182.04 475.878,1176.58 476.446,1169.95 477.015,1164.17 477.583,1159.19 478.152,1151.97 478.72,1145.46 479.288,1139.76 479.857,1133.85 480.425,1127.74 480.993,1120.36 481.562,1112.69 482.13,1104.78 482.698,1096.77 483.267,1088.46 483.835,1077.91 484.403,1070.33 484.972,1062.43 485.54,1054.4 486.108,1046.05 486.677,1036.58 487.245,1027.98 487.813,1017.07 488.382,1007.22 488.95,995.206 489.518,984.233 490.087,975.34 490.655,964.2 491.224,953.946 491.792,942.648 492.36,932.452 492.929,920.01 493.497,908.676 494.065,899.343 494.634,889.912 495.202,880.639 495.77,867.999 496.339,858.564 496.907,848.058 497.475,837.528 498.044,827.09 498.612,814.654 499.18,802.108 499.749,792.895 500.317,779.613 500.885,769.537 501.454,760.514 502.022,751.391 502.59,741.244 503.159,731.154 503.727,721.144 504.295,709.174 504.864,696.448 505.432,685.059 506.001,676.929 506.569,666.674 507.137,655.514 507.706,647.621 508.274,638.982 508.842,628.443 509.411,619.939 509.979,610.578 510.547,602.337 511.116,594.256 511.684,586.243 512.252,580.477 512.821,573.636 513.389,566.756 513.957,560.04 514.526,553.409 515.094,545.741 515.662,538.135 516.231,531.724 516.799,522.43 517.367,513.398 517.936,507.752 518.504,499.917 519.072,493.304 519.641,486.745 520.209,479.419 520.778,474.415 521.346,468.47 521.914,461.547 522.483,452.59 523.051,447.152 523.619,442.984 524.188,438.631 524.756,435.762 525.324,428.765 525.893,424.868 526.461,419.951 527.029,416.19 527.598,413.432 528.166,408.764 528.734,404.098 529.303,399.612 529.871,394.046 530.439,390.785 531.008,383.556 531.576,379.64 532.144,376.857 532.713,375.18 533.281,372.573 533.85,368.847 534.418,367.08 534.986,362.34 535.555,359.933 536.123,357.523 536.691,354.004 537.26,350.68 537.828,347.385 538.396,344.077 538.965,341.112 539.533,338.054 540.101,335.024 540.67,333.038 541.238,329.097 541.806,328.21 542.375,324.361 542.943,320.781 543.511,318.475 544.08,316.886 544.648,315.679 545.216,314.429 545.785,310.791 546.353,309.795 546.921,308.673 547.49,307.456 548.058,305.09 548.627,302.972 549.195,299.136 549.763,299.374 550.332,298.362 550.9,294.443 551.468,293.754 552.037,294.067 552.605,293.077 553.173,291.071 553.742,291.429 554.31,287.483 554.878,286.864 555.447,286.001 556.015,286.366 556.583,284.535 557.152,282.786 557.72,279.917 558.288,278.353 558.857,279.881 559.425,279.228 559.993,275.512 560.562,274.195 561.13,271.776 561.698,269.649 562.267,270.746 562.835,270.542 563.404,271.476 563.972,272.185 564.54,268.61 565.109,269.602 565.677,270.096 566.245,268.698 566.814,266.122 567.382,263.756 567.95,262.695 568.519,262.576 569.087,260.333 569.655,259.302 570.224,258.122 570.792,259.445 571.36,259.243 571.929,256.272 572.497,255.301 573.065,253.508 573.634,253.83 574.202,254.1 574.77,254.506 575.339,254.582 575.907,255.887 576.476,253.024 577.044,252.061 577.612,250.111 578.181,248.557 578.749,248.979 579.317,248.196 579.886,247.781 580.454,248.337 581.022,248.978 581.591,252.507 582.159,253.538 582.727,253.588 583.296,252.41 583.864,251.104 584.432,252.309 585.001,250.389 585.569,250.472 586.137,250.581 586.706,246.405 587.274,244.792 587.842,245.172 588.411,245.761 588.979,247.232 589.547,247.554 590.116,247.712 590.684,246.61 591.253,246.661 591.821,245.693 592.389,244.865 592.958,243.876 593.526,243.251 594.094,243.741 594.663,243.174 595.231,244.763 595.799,242.848 596.368,243.181 596.936,242.581 597.504,241.814 598.073,241.327 598.641,240.719 599.209,240.215 599.778,243.781 600.346,244.046 600.914,245.4 601.483,246.643 602.051,246.635 602.619,246.812 603.188,245.725 603.756,246.165 604.325,245.941 604.893,244.924 605.461,245.106 606.03,243.95 606.598,244.965 607.166,243.118 607.735,243.085 608.303,244.105 608.871,248.236 609.44,249.001 610.008,248.783 610.576,249.421 611.145,247.822 611.713,246.307 612.281,248.36 612.85,249.04 613.418,248.431 613.986,245.159 614.555,243.857 615.123,243.805 615.691,242.564 616.26,242.609 616.828,240.61 617.396,239.62 617.965,239.606 618.533,239.927 619.102,239.306 619.67,239.231 620.238,239.351 620.807,239.463 621.375,240.353 621.943,239.413 622.512,239.455 623.08,240.537 623.648,241.67 624.217,239.687 624.785,236.766 625.353,238.012 625.922,238.203 626.49,238.383 627.058,237.407 627.627,235.604 628.195,235.866 628.763,237.198 629.332,239.337 629.9,238.254 630.468,240.387 631.037,239.31 631.605,239.094 632.173,239.157 632.742,240.271 633.31,241.251 633.879,238.883 634.447,240.848 635.015,240.693 635.584,239.489 636.152,239.476 636.72,238.234 637.289,241.325 637.857,240.987 638.425,239.718 638.994,238.692 639.562,239.78 640.13,239.645 640.699,239.5 641.267,238.418 641.835,238.586 642.404,237.332 642.972,233.144 643.54,233.6 644.109,232.925 644.677,234.192 645.245,234.19 645.814,234.572 646.382,234.982 646.951,235.159 647.519,235.414 648.087,235.575 648.656,233.629 649.224,234.948 649.792,234.945 650.361,235.161 650.929,232.363 651.497,234.693 652.066,237.065 652.634,236.997 653.202,237.938 653.771,238.043 654.339,237.81 654.907,235.626 655.476,235.656 656.044,234.725 656.612,231.67 657.181,229.97 657.749,229.382 658.317,229.131 658.886,229.6 659.454,228.077 660.022,227.669 660.591,229.277 661.159,227.959 661.728,230.64 662.296,230.04 662.864,229.698 663.433,231.035 664.001,231.469 664.569,230.728 665.138,227.998 665.706,228.331 666.274,227.803 666.843,229.581 667.411,230.148 667.979,230.623 668.548,231.092 669.116,232.578 669.684,235.16 670.253,237.44 670.821,237.465 671.389,239.559 671.958,239.44 672.526,238.402 673.094,238.531 673.663,238.356 674.231,239.289 674.799,239.078 675.368,239.214 675.936,239.02 676.505,237.989 677.073,237.871 677.641,236.776 678.21,235.615 678.778,232.521 679.346,232.671 679.915,232.068 680.483,232.394 681.051,232.865 681.62,229.081 682.188,229.853 682.756,230.171 683.325,229.712 683.893,229.116 684.461,227.576 685.03,228.134 685.598,229.76 686.166,230.192 686.735,226.479 687.303,228.24 687.871,227.912 688.44,229.614 689.008,230.187 689.577,231.818 690.145,232.064 690.713,232.493 691.282,232.709 691.85,231.907 692.418,232.465 692.987,231.652 693.555,231.81 694.123,231.961 694.692,232.162 695.26,232.394 695.828,233.763 696.397,230.868 696.965,231.256 697.533,233.551 698.102,235.68 698.67,238.928 699.238,237.896 699.807,238.745 700.375,239.686 700.943,238.279 701.512,236.114 702.08,236.121 702.648,236.942 703.217,234.702 703.785,235.818 704.354,234.793 704.922,233.91 705.49,232.955 706.059,230.864 706.627,231.176 707.195,231.396 707.764,232.778 708.332,235.307 708.9,236.438 709.469,239.402 710.037,239.399 710.605,238.995 711.174,236.69 711.742,236.477 712.31,236.41 712.879,236.473 713.447,237.314 714.015,235.869 714.584,234.951 715.152,235.95 715.72,232.635 716.289,233.747 716.857,234.757 717.425,232.435 717.994,232.506 718.562,233.62 719.131,234.613 719.699,235.357 720.267,233.235 720.836,233.271 721.404,231.498 721.972,230.798 722.541,232.012 723.109,232.313 723.677,230.633 724.246,229.834 724.814,229.991 725.382,230.178 725.951,230.574 726.519,228.859 727.087,229.043 727.656,229.435 728.224,230.484 728.792,230.787 729.361,229.08 729.929,230.703 730.497,228.895 731.066,229.385 731.634,230.611 732.203,229.839 732.771,230.154 733.339,232.447 733.908,232.62 734.476,232.752 735.044,233.712 735.613,233.601 736.181,233.599 736.749,232.77 737.318,234 737.886,233.899 738.454,233.909 739.023,232.824 739.591,230.945 740.159,229.232 740.728,229.704 741.296,227.972 741.864,228.29 742.433,229.635 743.001,230.907 743.569,232.286 744.138,232.4 744.706,230.33 745.274,229.563 745.843,230.699 746.411,230.736 746.98,231.085 747.548,232.323 748.116,231.305 748.685,232.618 749.253,231.876 749.821,231.985 750.39,235.235 750.958,232.146 751.526,232.193 752.095,232.305 752.663,232.659 753.231,233.694 753.8,234.944 754.368,233.775 754.936,234.883 755.505,233.766 756.073,233.685 756.641,235.589 757.21,233.413 757.778,232.445 758.346,232.381 758.915,232.211 759.483,232.222 760.052,232.31 760.62,232.373 761.188,233.557 761.757,232.44 762.325,234.589 762.893,233.574 763.462,230.48 764.03,229.652 764.598,229.752 765.167,229.91 765.735,231.127 766.303,231.422 766.872,230.566 767.44,230.896 768.008,230.91 768.577,231.048 769.145,231.2 769.713,229.403 770.282,230.6 770.85,230.798 771.418,229.116 771.987,232.404 772.555,234.386 773.123,234.392 773.692,234.329 774.26,233.418 774.829,233.487 775.397,233.682 775.965,233.585 776.534,234.471 777.102,235.379 777.67,236.489 778.239,235.301 778.807,235.978 779.375,235.791 779.944,234.592 780.512,236.673 781.08,239.117 781.649,238.35 782.217,237.865 782.785,236.277 783.354,235.925 783.922,234.44 784.49,234.136 785.059,234.049 785.627,232.804 786.195,232.882 786.764,231.775 787.332,231.747 787.9,232.656 788.469,233.549 789.037,235.509 789.606,235.225 790.174,232.864 790.742,232.833 791.311,232.61 791.879,232.462 792.447,232.208 793.016,230.042 793.584,231.133 794.152,231.177 794.721,232.314 795.289,235.21 795.857,233.948 796.426,234.84 796.994,234.724 797.562,234.462 798.131,233.313 798.699,232.874 799.267,234.381 799.836,233.015 800.404,231.76 800.972,233.664 801.541,233.43 802.109,233.241 802.678,232.979 803.246,231.693 803.814,231.513 804.383,231.512 804.951,231.465 805.519,232.467 806.088,233.339 806.656,233.198 807.224,233.962 807.793,234.837 808.361,232.676 808.929,232.558 809.498,231.244 810.066,232.202 810.634,231.162 811.203,231.082 811.771,228.982 812.339,230.386 812.908,231.317 813.476,230.298 814.044,229.174 814.613,229.095 815.181,232.329 815.749,232.063 816.318,231.85 816.886,231.683 817.455,230.544 818.023,230.36 818.591,231.584 819.16,231.354 819.728,230.263 820.296,234.513 820.865,233.056 821.433,232.998 822.001,233.777 822.57,233.451 823.138,231.148 823.706,230.815 824.275,230.654 824.843,229.617 825.411,228.526 825.98,227.571 826.548,227.773 827.116,227.954 827.685,226.842 828.253,227.015 828.821,225.181 829.39,224.382 829.958,227.82 830.526,226.834 831.095,227.925 831.663,229.962 832.232,229.912 832.8,230.913 833.368,230.802 833.937,230.726 834.505,229.808 835.073,228.782 835.642,228.914 836.21,224.075 836.778,225.424 837.347,227.864 837.915,226.937 838.483,226.127 839.052,225.3 839.62,224.798 840.188,225.225 840.757,224.878 841.325,223.241 841.893,223.662 842.462,225.298 843.03,225.665 843.598,227.205 844.167,228.695 844.735,225.805 845.304,224.281 845.872,223.714 846.44,226.049 847.009,228.466 847.577,231.573 848.145,231.764 848.714,231.808 849.282,232.964 849.85,232.883 850.419,233.91 850.987,232.86 851.555,233.692 852.124,233.839 852.692,232.401 853.26,230.5 853.829,230.46 854.397,229.441 854.965,228.735 855.534,230.847 856.102,232.956 856.67,232.962 857.239,231.912 857.807,232.051 858.375,230.981 858.944,229.851 859.512,232.137 860.081,231.112 860.649,230.319 861.217,231.481 861.786,234.608 862.354,233.282 862.922,232.243 863.491,232.158 864.059,232.165 864.627,234.121 865.196,234.039 865.764,233.972 866.332,233.684 866.901,234.492 867.469,235.335 868.037,233.798 868.606,232.424 869.174,233.296 869.742,233.166 870.311,234.087 870.879,235.198 871.447,232.869 872.016,232.736 872.584,230.591 873.152,230.591 873.721,230.605 874.289,230.409 874.858,230.519 875.426,231.57 875.994,232.42 876.563,229.206 877.131,232.265 877.699,231.131 878.268,230.909 878.836,233.958 879.404,232.429 879.973,233.168 880.541,233.842 881.109,233.489 881.678,232.006 882.246,230.833 882.814,231.728 883.383,231.728 883.951,230.606 884.519,228.438 885.088,228.498 885.656,228.638 886.224,228.487 886.793,230.627 887.361,231.795 887.93,230.722 888.498,227.555 889.066,227.946 889.635,227.1 890.203,225.479 890.771,224.952 891.34,224.266 891.908,223.906 892.476,224.437 893.045,225.033 893.613,225.51 894.181,224.78 894.75,224.301 895.318,223.757 895.886,222.198 896.455,224.838 897.023,226.232 897.591,227.569 898.16,229.127 898.728,230.391 899.296,231.633 899.865,228.586 900.433,230.939 901.001,231.039 901.57,232.093 902.138,231.099 902.707,227.816 903.275,226.152 903.843,227.596 904.412,228.806 904.98,228.94 905.548,229.221 906.117,229.136 906.685,231.665 907.253,230.606 907.822,229.564 908.39,225.49 908.958,224.672 909.527,225.274 910.095,229.922 910.663,231.276 911.232,232.355 911.8,232.168 912.368,231.155 912.937,231.309 913.505,230.332 914.073,230.465 914.642,231.648 915.21,229.636 915.779,228.785 916.347,230.191 916.915,230.233 917.484,231.34 918.052,232.504 918.62,232.487 919.189,231.643 919.757,231.766 920.325,232.722 920.894,231.683 921.462,231.947 922.03,231.9 922.599,232.867 923.167,233.848 923.735,234.746 924.304,232.502 924.872,231.427 925.44,230.484 926.009,233.783 926.577,235.597 927.145,232.31 927.714,232.2 928.282,230.376 928.85,229.418 929.419,229.549 929.987,231.782 930.556,232.669 931.124,232.458 931.692,231.456 932.261,232.442 932.829,233.267 933.397,236.188 933.966,235.873 934.534,234.153 935.102,234.877 935.671,234.653 936.239,233.308 936.807,232.864 937.376,231.5 937.944,231.357 938.512,230.426 939.081,231.592 939.649,231.551 940.217,231.374 940.786,231.295 941.354,231.314 941.922,231.299 942.491,232.248 943.059,232.17 943.627,233.157 944.196,231.82 944.764,233.564 945.333,232.537 945.901,234.552 946.469,234.408 947.038,236.198 947.606,235.807 948.174,238.598 948.743,237.877 949.311,236.218 949.879,235.722 950.448,236.354 951.016,236.731 951.584,236.13 952.153,236.647 952.721,236.219 953.289,234.544 953.858,235.164 954.426,233.906 954.994,233.516 955.563,234.239 956.131,235.037 956.699,234.432 957.268,229.921 957.836,230.858 958.405,228.61 958.973,226.659 959.541,226.5 960.11,226.764 960.678,227.017 961.246,227.162 961.815,228.278 962.383,228.103 962.951,229.22 963.52,229.294 964.088,230.288 964.656,231.374 965.225,234.259 965.793,235.794 966.361,234.339 966.93,234.046 967.498,232.505 968.066,233.233 968.635,229.52 969.203,228.397 969.771,226.318 970.34,226.606 970.908,226.668 971.476,227.529 972.045,227.501 972.613,227.497 973.182,226.189 973.75,223.311 974.318,223.727 974.887,225.026 975.455,225.478 976.023,227.891 976.592,229.118 977.16,229.017 977.728,228.96 978.297,227.797 978.865,226.753 979.433,227.075 980.002,228.44 980.57,228.512 981.138,227.59 981.707,227.668 982.275,229.935 982.843,229.986 983.412,230.101 983.98,231.094 984.548,230.968 985.117,231.857 985.685,231.614 986.253,231.411 986.822,231.428 987.39,232.308 987.959,231.19 988.527,231.928 989.095,231.727 989.664,232.844 990.232,232.636 990.8,232.371 991.369,231.224 991.937,228.011 992.505,222.874 993.074,225.401 993.642,224.469 994.21,224.802 994.779,227.374 995.347,227.518 995.915,227.537 996.484,226.553 997.052,227.218 997.62,231.668 998.189,231.704 998.757,229.511 999.325,230.525 999.894,229.266 1000.46,228.306 1001.03,229.71 1001.6,228.618 1002.17,228.561 1002.74,230.539 1003.3,229.456 1003.87,229.716 1004.44,228.908 1005.01,231.895 1005.58,231.838 1006.15,231.714 1006.71,231.672 1007.28,231.452 1007.85,232.446 1008.42,231.066 1008.99,232.107 1009.56,231.904 1010.12,231.968 1010.69,232.826 1011.26,232.733 1011.83,231.301 1012.4,231.117 1012.97,227.734 1013.53,225.735 1014.1,224.962 1014.67,225.324 1015.24,227.814 1015.81,228.09 1016.38,228.327 1016.94,229.285 1017.51,228.16 1018.08,229.427 1018.65,230.419 1019.22,229.359 1019.79,228.402 1020.35,227.62 1020.92,228.729 1021.49,226.941 1022.06,227.073 1022.63,229.448 1023.2,228.239 1023.76,226.409 1024.33,228.814 1024.9,228.096 1025.47,228.363 1026.04,227.753 1026.61,230.126 1027.17,230.1 1027.74,230.963 1028.31,230.835 1028.88,231.051 1029.45,231.205 1030.02,232.211 1030.58,233.205 1031.15,233.954 1031.72,230.473 1032.29,228.531 1032.86,228.781 1033.43,230.695 1033.99,229.747 1034.56,230.734 1035.13,229.675 1035.7,229.758 1036.27,231.953 1036.84,231.747 1037.4,229.616 1037.97,229.36 1038.54,230.27 1039.11,232.352 1039.68,234.385 1040.25,236.291 1040.81,233.614 1041.38,231.476 1041.95,231.364 1042.52,230.351 1043.09,231.355 1043.66,231.153 1044.22,231.992 1044.79,230.977 1045.36,231.021 1045.93,231.037 1046.5,231.18 1047.07,230.179 1047.63,229.173 1048.2,227.346 1048.77,227.53 1049.34,227.87 1049.91,229.39 1050.48,228.385 1051.05,230.419 1051.61,232.55 1052.18,231.568 1052.75,230.57 1053.32,228.59 1053.89,229.958 1054.46,230.907 1055.02,230.854 1055.59,228.741 1056.16,228.649 1056.73,229.726 1057.3,228.694 1057.87,228.683 1058.43,231.917 1059,232.837 1059.57,232.708 1060.14,233.626 1060.71,232.277 1061.28,229.924 1061.84,231.844 1062.41,231.816 1062.98,231.503 1063.55,232.458 1064.12,233.577 1064.69,231.401 1065.25,232.289 1065.82,233.102 1066.39,231.848 1066.96,231.861 1067.53,228.7 1068.1,226.516 1068.66,228.927 1069.23,228.909 1069.8,228.987 1070.37,228.345 1070.94,228.586 1071.51,230.842 1072.07,229.527 1072.64,227.274 1073.21,229.317 1073.78,225.36 1074.35,226.514 1074.92,227.8 1075.48,227.834 1076.05,226.005 1076.62,229.504 1077.19,231.552 1077.76,229.555 1078.33,229.866 1078.89,228.801 1079.46,229.004 1080.03,229.954 1080.6,229.937 1081.17,231.01 1081.74,229.93 1082.3,229.239 1082.87,231.53 1083.44,231.412 1084.01,232.289 1084.58,231.106 1085.15,228.946 1085.71,228.943 1086.28,230.083 1086.85,229.105 1087.42,226.924 1087.99,227.16 1088.56,229.455 1089.12,228.524 1089.69,229.763 1090.26,230.908 1090.83,229.996 1091.4,231.002 1091.97,231.937 1092.53,230.793 1093.1,229.784 1093.67,227.946 1094.24,228.04 1094.81,229.261 1095.38,229.451 1095.94,230.789 1096.51,229.802 1097.08,228.859 1097.65,230.926 1098.22,228.84 1098.79,230.267 1099.35,229.345 1099.92,229.542 1100.49,229.662 1101.06,229.845 1101.63,228.997 1102.2,228.901 1102.76,227.925 1103.33,229.163 1103.9,228.092 1104.47,227.292 1105.04,227.598 1105.61,228.75 1106.17,228.007 1106.74,228.014 1107.31,227.939 1107.88,231.047 1108.45,232.237 1109.02,232.09 1109.58,230.899 1110.15,230.054 1110.72,231.231 1111.29,231.047 1111.86,230.078 1112.43,229.058 1112.99,229.216 1113.56,229.502 1114.13,229.268 1114.7,227.255 1115.27,225.345 1115.84,225.729 1116.4,227.067 1116.97,226.111 1117.54,229.721 1118.11,230.897 1118.68,230.799 1119.25,228.751 1119.81,228.964 1120.38,230.214 1120.95,229.121 1121.52,229.429 1122.09,229.565 1122.66,228.693 1123.23,226.765 1123.79,227.129 1124.36,227.405 1124.93,228.566 1125.5,228.574 1126.07,228.811 1126.64,227.818 1127.2,227.006 1127.77,228.398 1128.34,230.397 1128.91,232.623 1129.48,231.706 1130.05,232.646 1130.61,233.508 1131.18,231.442 1131.75,232.558 1132.32,235.478 1132.89,232.112 1133.46,232.058 1134.02,232.974 1134.59,233.753 1135.16,236.45 1135.73,237.999 1136.3,236.449 1136.87,234.989 1137.43,233.696 1138,235.237 1138.57,235.883 1139.14,234.352 1139.71,234.97 1140.28,234.876 1140.84,235.378 1141.41,233.005 1141.98,229.748 1142.55,228.531 1143.12,228.731 1143.69,228.791 1144.25,230.098 1144.82,228.809 1145.39,229.854 1145.96,230.116 1146.53,229.046 1147.1,228.03 1147.66,228.218 1148.23,227.454 1148.8,227.757 1149.37,227.887 1149.94,230.176 1150.51,230.234 1151.07,229.184 1151.64,231.297 1152.21,233.347 1152.78,233.012 1153.35,231.705 1153.92,232.509 1154.48,232.487 1155.05,237.384 1155.62,236.666 1156.19,236.304 1156.76,236.722 1157.33,235.06 1157.89,233.685 1158.46,233.385 1159.03,233.093 1159.6,232.728 1160.17,232.638 1160.74,232.297 1161.3,230.817 1161.87,231.569 1162.44,231.399 1163.01,231.266 1163.58,233.157 1164.15,233.855 1164.71,232.373 1165.28,231.277 1165.85,232.349 1166.42,233.069 1166.99,231.747 1167.56,230.618 1168.12,230.527 1168.69,232.567 1169.26,232.345 1169.83,233.209 1170.4,233.65 1170.97,233.123 1171.53,232.619 1172.1,230.29 1172.67,231.294 1173.24,231.301 1173.81,231.259 1174.38,230.035 1174.94,229.824 1175.51,230.822 1176.08,229.872 1176.65,232.856 1177.22,231.617 1177.79,232.163 1178.35,230.912 1178.92,229.461 1179.49,230.447 1180.06,230.153 1180.63,230.115 1181.2,231.006 1181.76,230.912 1182.33,228.59 1182.9,229.568 1183.47,227.196 1184.04,226.362 1184.61,226.458 1185.17,223.715 1185.74,224.246 1186.31,223.74 1186.88,224.942 1187.45,224.383 1188.02,226.827 1188.58,228.988 1189.15,229.017 1189.72,229.996 1190.29,226.815 1190.86,227.022 1191.43,226.793 1192,226.886 1192.56,226.907 1193.13,228.096 1193.7,228.175 1194.27,228.362 1194.84,228.303 1195.41,227.414 1195.97,229.644 1196.54,229.626 1197.11,228.755 1197.68,230.03 1198.25,228.943 1198.82,229.059 1199.38,226.212 1199.95,225.464 1200.52,224.782 1201.09,225.219 1201.66,225.771 1202.23,228.166 1202.79,227.294 1203.36,228.468 1203.93,232.7 1204.5,232.656 1205.07,234.33 1205.64,231.995 1206.2,234.154 1206.77,230.761 1207.34,229.774 1207.91,230.891 1208.48,230.882 1209.05,229.029 1209.61,229.209 1210.18,231.153 1210.75,231.08 1211.32,232.071 1211.89,228.971 1212.46,228.962 1213.02,230.049 1213.59,230.032 1214.16,231.137 1214.73,231.097 1215.3,230.033 1215.87,229.115 1216.43,228.254 1217,227.428 1217.57,226.417 1218.14,226.708 1218.71,226.769 1219.28,227.135 1219.84,227.567 1220.41,227.761 1220.98,228.041 1221.55,229.33 1222.12,229.321 1222.69,228.397 1223.25,226.475 1223.82,227.717 1224.39,228.745 1224.96,225.834 1225.53,226.142 1226.1,226.311 1226.66,227.648 1227.23,228.823 1227.8,232.106 1228.37,233.191 1228.94,232.871 1229.51,232.636 1230.07,232.449 1230.64,232.268 1231.21,234.417 1231.78,234.166 1232.35,234.773 1232.92,234.349 1233.48,234.11 1234.05,234.836 1234.62,234.653 1235.19,235.383 1235.76,234.993 1236.33,234.637 1236.89,234.448 1237.46,233.046 1238.03,233.837 1238.6,231.412 1239.17,232.263 1239.74,232.039 1240.3,231.031 1240.87,229.884 1241.44,230.01 1242.01,230.895 1242.58,229.827 1243.15,228.812 1243.71,229.79 1244.28,228.786 1244.85,227.951 1245.42,230.323 1245.99,232.441 1246.56,233.401 1247.12,233.055 1247.69,232.903 1248.26,231.696 1248.83,230.485 1249.4,229.414 1249.97,231.562 1250.53,231.345 1251.1,230.203 1251.67,228.962 1252.24,232.131 1252.81,229.851 1253.38,229.745 1253.94,228.803 1254.51,231.924 1255.08,232.793 1255.65,232.542 1256.22,233.382 1256.79,235.028 1257.35,235.502 1257.92,234.766 1258.49,234.318 1259.06,233.831 1259.63,232.373 1260.2,232.186 1260.76,229.798 1261.33,228.724 1261.9,229.889 1262.47,230.778 1263.04,229.795 1263.61,230.685 1264.18,228.405 1264.74,226.269 1265.31,230.523 1265.88,230.165 1266.45,230.182 1267.02,229.911 1267.59,229.669 1268.15,230.584 1268.72,228.561 1269.29,228.857 1269.86,227.783 1270.43,226.854 1271,228.993 1271.56,226.9 1272.13,228.333 1272.7,226.289 1273.27,224.534 1273.84,223.856 1274.41,223.232 1274.97,225.8 1275.54,225.271 1276.11,226.667 1276.68,226.779 1277.25,225.943 1277.82,222.957 1278.38,225.547 1278.95,225.892 1279.52,224.103 1280.09,224.327 1280.66,225.539 1281.23,225.925 1281.79,228.085 1282.36,229.469 1282.93,228.285 1283.5,226.578 1284.07,227.852 1284.64,231.351 1285.2,231.248 1285.77,232.009 1286.34,231.075 1286.91,231.113 1287.48,229.983 1288.05,228.852 1288.61,228.926 1289.18,228.998 1289.75,228.215 1290.32,227.427 1290.89,227.837 1291.46,225.815 1292.02,228.118 1292.59,227.181 1293.16,228.133 1293.73,227.056 1294.3,226.289 1294.87,230.652 1295.43,230.686 1296,231.824 1296.57,230.739 1297.14,232.716 1297.71,230.479 1298.28,231.605 1298.84,229.668 1299.41,229.747 1299.98,227.659 1300.55,227.853 1301.12,228.051 1301.69,230.466 1302.25,229.492 1302.82,226.337 1303.39,227.66 1303.96,227.97 1304.53,231.179 1305.1,231.234 1305.66,231.087 1306.23,232.152 1306.8,232.895 1307.37,231.676 1307.94,231.646 1308.51,230.475 1309.07,229.421 1309.64,232.369 1310.21,231.141 1310.78,232.15 1311.35,231.879 1311.92,230.825 1312.48,229.722 1313.05,230.788 1313.62,230.491 1314.19,230.35 1314.76,230.06 1315.33,230.094 1315.89,229.952 1316.46,228.044 1317.03,228.286 1317.6,229.513 1318.17,228.679 1318.74,226.619 1319.3,223.659 1319.87,223.912 1320.44,223.293 1321.01,222.651 1321.58,224.414 1322.15,224.921 1322.71,224.226 1323.28,226.705 1323.85,228.188 1324.42,226.416 1324.99,227.565 1325.56,227.615 1326.12,227.871 1326.69,230.038 1327.26,229.95 1327.83,229.102 1328.4,229.241 1328.97,225.176 1329.53,225.652 1330.1,224.258 1330.67,224.94 1331.24,227.579 1331.81,228.066 1332.38,230.582 1332.94,231.74 1333.51,227.592 1334.08,227.856 1334.65,225.068 1335.22,226.386 1335.79,224.769 1336.36,226.271 1336.92,225.666 1337.49,227.203 1338.06,230.567 1338.63,233.739 1339.2,235.583 1339.77,233.278 1340.33,232.257 1340.9,232.472 1341.47,232.277 1342.04,234.521 1342.61,233.313 1343.18,234.099 1343.74,233.88 1344.31,231.552 1344.88,231.553 1345.45,232.653 1346.02,234.685 1346.59,235.561 1347.15,232.227 1347.72,233.243 1348.29,236.134 1348.86,235.803 1349.43,235.484 1350,233.267 1350.56,234.16 1351.13,233.711 1351.7,234.53 1352.27,234.222 1352.84,233.053 1353.41,230.963 1353.97,230.853 1354.54,229.804 1355.11,231.901 1355.68,232.884 1356.25,231.752 1356.82,231.506 1357.38,231.194 1357.95,234.305 1358.52,230.196 1359.09,229.104 1359.66,229.314 1360.23,229.494 1360.79,229.478 1361.36,230.581 1361.93,229.601 1362.5,230.696 1363.07,233.577 1363.64,235.448 1364.2,233.239 1364.77,233.248 1365.34,232.121 1365.91,232.995 1366.48,232.87 1367.05,231.563 1367.61,231.62 1368.18,232.628 1368.75,232.527 1369.32,231.273 1369.89,231.174 1370.46,230.108 1371.02,229.142 1371.59,227.052 1372.16,228.189 1372.73,228.219 1373.3,230.57 1373.87,229.776 1374.43,226.759 1375,224.893 1375.57,224.271 1376.14,224.682 1376.71,225.241 1377.28,223.614 1377.84,223.045 1378.41,224.583 1378.98,224.177 1379.55,224.69 1380.12,225.497 1380.69,225.869 1381.25,228.388 1381.82,228.696 1382.39,226.774 1382.96,227.293 1383.53,227.696 1384.1,229.965 1384.66,231.228 1385.23,230.402 1385.8,231.674 1386.37,232.743 1386.94,232.722 1387.51,234.571 1388.07,235.441 1388.64,235.131 1389.21,236.126 1389.78,236.861 1390.35,236.323 1390.92,235.025 1391.48,234.773 1392.05,232.424 1392.62,233.07 1393.19,233.97 1393.76,230.555 1394.33,230.483 1394.89,230.551 1395.46,231.619 1396.03,229.456 1396.6,228.417 1397.17,228.701 1397.74,228.835 1398.3,230.982 1398.87,231.934 1399.44,231.753 1400.01,232.809 1400.58,233.605 1401.15,232.309 1401.71,232.145 1402.28,230.822 1402.85,230.553 1403.42,228.292 1403.99,228.563 1404.56,228.742 1405.13,230.897 1405.69,230.697 1406.26,229.62 1406.83,229.752 1407.4,229.846 1407.97,230.575 1408.54,230.638 1409.1,229.416 1409.67,228.275 1410.24,229.62 1410.81,231.695 1411.38,232.697 1411.95,232.444 1412.51,233.375 1413.08,236.214 1413.65,236.655 1414.22,235.139 1414.79,235.848 1415.36,236.383 1415.92,238.938 1416.49,236.451 1417.06,236.041 1417.63,236.581 1418.2,234.088 1418.77,234.829 1419.33,234.291 1419.9,234.93 1420.47,236.505 1421.04,234.925 1421.61,234.278 1422.18,232.977 1422.74,232.619 1423.31,231.271 1423.88,231.163 1424.45,229.992 1425.02,228.703 1425.59,229.669 1426.15,227.529 1426.72,227.475 1427.29,227.696 1427.86,227.622 1428.43,228.679 1429,229.693 1429.56,230.641 1430.13,231.411 1430.7,230.048 1431.27,228.791 1431.84,227.83 1432.41,227.803 1432.97,229.059 1433.54,228.885 1434.11,225.877 1434.68,227.077 1435.25,225.206 1435.82,227.49 1436.38,228.727 1436.95,228.729 1437.52,229.583 1438.09,229.466 1438.66,230.525 1439.23,229.498 1439.79,230.324 1440.36,232.205 1440.93,231.865 1441.5,231.809 1442.07,230.547 1442.64,228.522 1443.2,230.499 1443.77,233.333 1444.34,233.031 1444.91,231.683 1445.48,230.463 1446.05,231.434 1446.61,230.198 1447.18,231.125 1447.75,230.858 1448.32,230.842 1448.89,229.557 1449.46,228.38 1450.02,227.312 1450.59,226.464 1451.16,226.743 1451.73,227.991 1452.3,229.215 1452.87,228.154 1453.43,227.171 1454,228.384 1454.57,229.628 1455.14,228.729 1455.71,229.675 1456.28,227.753 1456.84,229.047 1457.41,230.106 1457.98,228.202 1458.55,227.275 1459.12,227.296 1459.69,228.6 1460.25,229.944 1460.82,230.988 1461.39,229.778 1461.96,228.891 1462.53,227.874 1463.1,229.203 1463.66,229.259 1464.23,229.285 1464.8,229.139 1465.37,229.128 1465.94,228.199 1466.51,230.303 1467.07,231.451 1467.64,233.4 1468.21,233.074 1468.78,232.796 1469.35,235.679 1469.92,237.078 1470.48,236.613 1471.05,235.961 1471.62,234.547 1472.19,234.33 1472.76,232.844 1473.33,232.562 1473.89,232.159 1474.46,232.996 1475.03,235.83 1475.6,234.985 1476.17,232.448 1476.74,231.14 1477.31,229.886 1477.87,228.915 1478.44,230.934 1479.01,229.958 1479.58,231.965 1480.15,230.502 1480.72,229.438 1481.28,228.19 1481.85,226.98 1482.42,228.074 1482.99,227.064 1483.56,227.513 1484.13,226.753 1484.69,227.99 1485.26,228.03 1485.83,225.151 1486.4,227.556 1486.97,228.756 1487.54,228.667 1488.1,227.719 1488.67,228.894 1489.24,224.73 1489.81,224.025 1490.38,225.602 1490.95,225.833 1491.51,225.22 1492.08,227.546 1492.65,227.662 1493.22,227.614 1493.79,225.608 1494.36,227.946 1494.92,227.021 1495.49,227.127 1496.06,228.142 1496.63,229.454 1497.2,232.617 1497.77,232.492 1498.33,232.226 1498.9,230.923 1499.47,231.717 1500.04,231.383 1500.61,232.344 1501.18,231.369 1501.74,232.457 1502.31,232.256 1502.88,231.113 1503.45,227.566 1504.02,227.668 1504.59,227.751 1505.15,227.861 1505.72,227.912 1506.29,228.131 1506.86,229.349 1507.43,228.341 1508,228.564 1508.56,229.689 1509.13,229.806 1509.7,227.689 1510.27,226.569 1510.84,225.922 1511.41,228.327 1511.97,230.393 1512.54,229.155 1513.11,228.082 1513.68,227.223 1514.25,226.45 1514.82,226.811 1515.38,229.175 1515.95,228.223 1516.52,227.329 1517.09,227.608 1517.66,227.796 1518.23,229.037 1518.79,230.052 1519.36,231.048 1519.93,232.995 1520.5,232.747 1521.07,233.544 1521.64,234.401 1522.2,233.99 1522.77,232.865 1523.34,232.57 1523.91,232.351 1524.48,234.21 1525.05,232.769 1525.61,232.437 1526.18,232.293 1526.75,232.109 1527.32,230.955 1527.89,230.684 1528.46,229.434 1529.02,229.272 1529.59,231.402 1530.16,231.217 1530.73,230.344 1531.3,230.052 1531.87,227.692 1532.43,227.855 1533,229.146 1533.57,229.007 1534.14,232.16 1534.71,231.041 1535.28,231.26 1535.84,231.189 1536.41,231.044 1536.98,233.128 1537.55,231.662 1538.12,232.623 1538.69,231.287 1539.25,232.115 1539.82,233.253 1540.39,229.986 1540.96,231.074 1541.53,230.879 1542.1,228.736 1542.66,228.559 1543.23,228.44 1543.8,228.644 1544.37,228.7 1544.94,228.612 1545.51,227.868 1546.08,227.996 1546.64,229.029 1547.21,230.971 1547.78,229.713 1548.35,227.946 1548.92,228.176 1549.49,227.292 1550.05,228.394 1550.62,230.402 1551.19,229.348 1551.76,230.454 1552.33,228.526 1552.9,226.632 1553.46,225.445 1554.03,226.656 1554.6,224.843 1555.17,225.239 1555.74,223.533 1556.31,222.795 1556.87,223.052 1557.44,223.53 1558.01,226.166 1558.58,226.284 1559.15,225.484 1559.72,224.664 1560.28,225.129 1560.85,224.306 1561.42,224.865 1561.99,225.222 1562.56,224.532 1563.13,225.206 1563.69,222.731 1564.26,222.293 1564.83,221.941 1565.4,223.67 1565.97,223.008 1566.54,224.752 1567.1,228.073 1567.67,229.364 1568.24,231.662 1568.81,229.825 1569.38,230.204 1569.95,229.226 1570.51,231.369 1571.08,232.296 1571.65,232.104 1572.22,230.844 1572.79,229.713 1573.36,230.902 1573.92,232.004 1574.49,233.839 1575.06,235.91 1575.63,233.465 1576.2,234.634 1576.77,235.274 1577.33,235.041 1577.9,234.696 1578.47,235.47 1579.04,236.121 1579.61,234.81 1580.18,235.745 1580.74,235.327 1581.31,238.27 1581.88,238.881 1582.45,239.187 1583.02,238.617 1583.59,237.955 1584.15,237.528 1584.72,235.707 1585.29,233.379 1585.86,233.023 1586.43,233.163 1587,232.067 1587.56,231.747 1588.13,232.509 1588.7,232.208 1589.27,230.998 1589.84,229.773 1590.41,228.741 1590.97,226.823 1591.54,227.023 1592.11,229.286 1592.68,229.501 1593.25,230.516 1593.82,229.304 1594.38,228.293 1594.95,226.344 1595.52,226.675 1596.09,225.709 1596.66,224.946 1597.23,223.255 1597.79,226.052 1598.36,229.172 1598.93,229.304 1599.5,229.643 1600.07,230.722 1600.64,230.765 1601.2,230.882 1601.77,231.008 1602.34,231.035 1602.91,226.896 1603.48,226.137 1604.05,225.429 1604.61,226.725 1605.18,227.045 1605.75,228.351 1606.32,227.641 1606.89,227.861 1607.46,228.063 1608.02,229.236 1608.59,231.503 1609.16,231.448 1609.73,231.407 1610.3,229.355 1610.87,231.139 1611.43,229.977 1612,229.12 1612.57,229.233 1613.14,228.381 1613.71,228.642 1614.28,228.844 1614.84,226.926 1615.41,226.193 1615.98,226.805 1616.55,228.282 1617.12,230.628 1617.69,231.804 1618.26,232.799 1618.82,230.478 1619.39,228.453 1619.96,229.391 1620.53,228.516 1621.1,229.748 1621.67,231.899 1622.23,233.878 1622.8,232.622 1623.37,231.443 1623.94,231.412 1624.51,232.088 1625.08,231.051 1625.64,231.168 1626.21,233.224 1626.78,234.109 1627.35,232.878 1627.92,230.425 1628.49,230.213 1629.05,230.12 1629.62,228.012 1630.19,226.955 1630.76,228.195 1631.33,229.192 1631.9,229.143 1632.46,229.17 1633.03,229.172 1633.6,229.313 1634.17,229.5 1634.74,228.522 1635.31,229.804 1635.87,229.089 1636.44,227.295 1637.01,226.419 1637.58,225.789 1638.15,226.348 1638.72,228.823 1639.28,228.846 1639.85,228.788 1640.42,226.779 1640.99,224.779 1641.56,224.128 1642.13,221.828 1642.69,224.464 1643.26,226.812 1643.83,228.064 1644.4,230.207 1644.97,229.225 1645.54,229.321 1646.1,228.469 1646.67,227.808 1647.24,229.2 1647.81,229.167 1648.38,227.314 1648.95,226.732 1649.51,226.279 1650.08,228.877 1650.65,232.226 1651.22,231.307 1651.79,230.285 1652.36,232.465 1652.92,232.199 1653.49,231.05 1654.06,231.025 1654.63,230.243 1655.2,232.302 1655.77,234.188 1656.33,234.149 1656.9,234.961 1657.47,233.625 1658.04,234.501 1658.61,235.246 1659.18,236.14 1659.74,233.711 1660.31,232.684 1660.88,235.54 1661.45,236.581 1662.02,234.222 1662.59,233.998 1663.15,235.82 1663.72,235.42 1664.29,237.025 1664.86,236.478 1665.43,233.907 1666,232.672 1666.56,233.572 1667.13,233.242 1667.7,234.247 1668.27,233.002 1668.84,231.694 1669.41,232.459 1669.97,234.192 1670.54,236.833 1671.11,236.234 1671.68,235.569 1672.25,235.283 1672.82,232.957 1673.38,233.605 1673.95,235.384 1674.52,233.908 1675.09,232.69 1675.66,231.512 1676.23,230.442 1676.79,230.337 1677.36,229.375 1677.93,230.511 1678.5,228.485 1679.07,229.68 1679.64,229.705 1680.2,229.667 1680.77,229.684 1681.34,228.639 1681.91,228.922 1682.48,230.003 1683.05,231.001 1683.61,228.863 1684.18,226.604 1684.75,226.8 1685.32,227.138 1685.89,228.41 1686.46,227.184 1687.02,230.317 1687.59,230.282 1688.16,228.317 1688.73,228.285 1689.3,227.429 1689.87,227.549 1690.44,228.773 1691,228.707 1691.57,227.552 1692.14,226.834 1692.71,227.061 1693.28,229.281 1693.85,231.339 1694.41,231.198 1694.98,230 1695.55,227.915 1696.12,227.084 1696.69,229.539 1697.26,227.379 1697.82,225.386 1698.39,226.726 1698.96,226.782 1699.53,227.982 1700.1,230.217 1700.67,232.433 1701.23,232.193 1701.8,233.037 1702.37,233.882 1702.94,231.671 1703.51,230.444 1704.08,228.352 1704.64,227.604 1705.21,226.7 1705.78,226.965 1706.35,227.326 1706.92,228.274 1707.49,229.409 1708.05,229.507 1708.62,230.534 1709.19,230.554 1709.76,232.75 1710.33,231.523 1710.9,230.537 1711.46,230.303 1712.03,229.228 1712.6,229.101 1713.17,228.053 1713.74,227.264 1714.31,228.544 1714.87,227.81 1715.44,230.01 1716.01,229.029 1716.58,232.322 1717.15,234.201 1717.72,232.707 1718.28,232.682 1718.85,230.316 1719.42,231.322 1719.99,232.158 1720.56,229.912 1721.13,230.661 1721.69,230.503 1722.26,231.862 1722.83,233.719 1723.4,233.668 1723.97,231.486 1724.54,231.278 1725.1,231.133 1725.67,231.237 1726.24,230.938 1726.81,228.765 1727.38,228.647 1727.95,228.909 1728.51,228.822 1729.08,228.975 1729.65,229.074 1730.22,226.044 1730.79,226.278 1731.36,225.502 1731.92,228.01 1732.49,230.281 1733.06,230.018 1733.63,230.151 1734.2,231.079 1734.77,233.02 1735.33,229.715 1735.9,227.794 1736.47,226.795 1737.04,230.084 1737.61,228.123 1738.18,228.348 1738.74,226.568 1739.31,226.845 1739.88,227.051 1740.45,229.61 1741.02,229.433 1741.59,230.591 1742.15,231.553 1742.72,233.35 1743.29,229.112 1743.86,230.103 1744.43,232.224 1745,229.846 1745.56,228.058 1746.13,227.228 1746.7,228.56 1747.27,229.946 1747.84,228.871 1748.41,228.776 1748.97,228.759 1749.54,228.864 1750.11,230.888 1750.68,229.759 1751.25,230.811 1751.82,231.78 1752.38,229.757 1752.95,228.761 1753.52,227.951 1754.09,227.089 1754.66,223.175 1755.23,223.684 1755.79,223.013 1756.36,224.526 1756.93,223.862 1757.5,224.327 1758.07,224.754 1758.64,226.297 1759.21,227.668 1759.77,228.831 1760.34,229.099 1760.91,231.069 1761.48,230.906 1762.05,230.676 1762.62,232.668 1763.18,232.411 1763.75,231.351 1764.32,232.334 1764.89,233.393 1765.46,234.434 1766.03,233.19 1766.59,234.083 1767.16,233.935 1767.73,233.862 1768.3,234.647 1768.87,232.448 1769.44,233.462 1770,233.064 1770.57,231.878 1771.14,231.948 1771.71,231.776 1772.28,230.783 1772.85,227.61 1773.41,228.595 1773.98,229.479 1774.55,230.631 1775.12,230.811 1775.69,232.713 1776.26,233.714 1776.82,234.444 1777.39,236.285 1777.96,235.738 1778.53,234.454 1779.1,233.243 1779.67,234.041 1780.23,232.697 1780.8,233.504 1781.37,235.369 1781.94,234.843 1782.51,236.478 1783.08,234.98 1783.64,234.348 1784.21,232.859 1784.78,231.571 1785.35,232.179 1785.92,232.871 1786.49,233.34 1787.05,233.236 1787.62,232.765 1788.19,234.537 1788.76,233.179 1789.33,234.024 1789.9,234.712 1790.46,233.319 1791.03,234.152 1791.6,233.784 1792.17,234.258 1792.74,233.637 1793.31,232.317 1793.87,231.707 1794.44,232.368 1795.01,232.067 1795.58,231.592 1796.15,231.283 1796.72,229.191 1797.28,225.933 1797.85,226.976 1798.42,226.907 1798.99,227.034 1799.56,227.168 1800.13,227.154 1800.69,228.388 1801.26,226.051 1801.83,226.43 1802.4,226.561 1802.97,226.757 1803.54,226.616 1804.1,223.724 1804.67,226.262 1805.24,227.327 1805.81,227.432 1806.38,225.454 1806.95,222.744 1807.51,224.235 1808.08,222.527 1808.65,223.89 1809.22,223.335 1809.79,225.658 1810.36,222.947 1810.92,225.639 1811.49,226.003 1812.06,224.306 1812.63,223.678 1813.2,224.128 1813.77,225.6 1814.33,226.118 1814.9,225.426 1815.47,225.877 1816.04,225.023 1816.61,227.6 1817.18,229.944 1817.74,232.238 1818.31,232.073 1818.88,234.913 1819.45,233.778 1820.02,233.565 1820.59,233.299 1821.15,231.966 1821.72,231.726 1822.29,232.693 1822.86,234.532 1823.43,236.295 1824,234.553 1824.56,234.173 1825.13,234.008 1825.7,234.804 1826.27,232.514 1826.84,231.305 1827.41,231.164 1827.97,231.08 1828.54,230.888 1829.11,230.827 1829.68,227.654 1830.25,228.003 1830.82,227.242 1831.39,229.492 1831.95,229.578 1832.52,230.482 1833.09,229.176 1833.66,230.018 1834.23,229.674 1834.8,228.797 1835.36,231.968 1835.93,231.597 1836.5,230.353 1837.07,232.325 1837.64,231.99 1838.21,230.727 1838.77,230.567 1839.34,231.31 1839.91,231.288 1840.48,232.19 1841.05,231.932 1841.62,232.58 1842.18,230.468 1842.75,232.588 1843.32,232.289 1843.89,229.135 1844.46,228.086 1845.03,225.864 1845.59,227.423 1846.16,226.47 1846.73,227.729 1847.3,226.931 1847.87,229.313 1848.44,227.009 1849,227.405 1849.57,226.627 1850.14,226.145 1850.71,227.412 1851.28,227.64 1851.85,227.781 1852.41,228.947 1852.98,231.054 1853.55,229.887 1854.12,227.915 1854.69,228.066 1855.26,229.321 1855.82,231.445 1856.39,230.186 1856.96,228.109 1857.53,228.354 1858.1,228.465 1858.67,227.795 1859.23,226.947 1859.8,226.113 1860.37,225.598 1860.94,227.775 1861.51,228.92 1862.08,231.13 1862.64,233.139 1863.21,232.145 1863.78,230.197 1864.35,227.323 1864.92,223.356 1865.49,223.822 1866.05,226.366 1866.62,227.716 1867.19,228.795 1867.76,228.987 1868.33,225.848 1868.9,228.256 1869.46,229.428 1870.03,226.178 1870.6,227.403 1871.17,227.642 1871.74,226.76 1872.31,229.263 1872.87,229.7 1873.44,229.739 1874.01,229.934 1874.58,230.094 1875.15,230.108 1875.72,230.088 1876.28,226.182 1876.85,228.706 1877.42,229.1 1877.99,229.438 1878.56,228.598 1879.13,226.893 1879.69,224.175 1880.26,225.611 1880.83,230.154 1881.4,229.37 1881.97,225.396 1882.54,225.924 1883.1,228.372 1883.67,226.712 1884.24,228.219 1884.81,228.579 1885.38,227.694 1885.95,228.91 1886.51,229.174 1887.08,229.511 1887.65,229.692 1888.22,229.704 1888.79,227.786 1889.36,227.924 1889.92,224.056 1890.49,223.479 1891.06,224.16 1891.63,224.989 1892.2,226.686 1892.77,228.924 1893.33,228.271 1893.9,228.379 1894.47,228.532 1895.04,230.732 1895.61,234.13 1896.18,233.129 1896.74,232.976 1897.31,232.022 1897.88,231.963 1898.45,232.928 1899.02,231.907 1899.59,231.965 1900.16,233.235 1900.72,235.286 1901.29,235.899 1901.86,235.437 1902.43,232.956 1903,233.1 1903.57,233.265 1904.13,233.155 1904.7,233.217 1905.27,234.159 1905.84,234.066 1906.41,233.892 1906.98,234.675 1907.54,234.551 1908.11,233.309 1908.68,234.148 1909.25,236.129 1909.82,236.677 1910.39,238.29 1910.95,235.745 1911.52,238.558 1912.09,240.231 1912.66,238.474 1913.23,237.747 1913.8,234.035 1914.36,236.877 1914.93,235.435 1915.5,235.981 1916.07,235.497 1916.64,235.246 1917.21,233.748 1917.77,235.341 1918.34,235.731 1918.91,233.133 1919.48,233.904 1920.05,233.42 1920.62,233.045 1921.18,234.123 1921.75,232.803 1922.32,233.753 1922.89,231.391 1923.46,231.104 1924.03,230.897 1924.59,230.818 1925.16,231.763 1925.73,230.678 1926.3,228.433 1926.87,228.433 1927.44,226.381 1928,226.602 1928.57,226.935 1929.14,227.092 1929.71,230.205 1930.28,230.147 1930.85,230.14 1931.41,227.968 1931.98,227.998 1932.55,229.103 1933.12,229.131 1933.69,230.193 1934.26,230.173 1934.82,231.094 1935.39,230.953 1935.96,226.76 1936.53,226.899 1937.1,226.863 1937.67,226.888 1938.23,227.011 1938.8,225.372 1939.37,227.688 1939.94,230.738 1940.51,230.41 1941.08,230.244 1941.64,230.257 1942.21,228.311 1942.78,228.426 1943.35,227.559 1943.92,227.682 1944.49,227.109 1945.05,229.643 1945.62,230.561 1946.19,228.52 1946.76,229.515 1947.33,229.507 1947.9,227.444 1948.46,229.591 1949.03,228.421 1949.6,227.571 1950.17,227.644 1950.74,227.891 1951.31,229.069 1951.87,228.835 1952.44,227.926 1953.01,225.911 1953.58,226.161 1954.15,228.431 1954.72,225.411 1955.28,227.696 1955.85,227.79 1956.42,228.943 1956.99,232.194 1957.56,231.049 1958.13,231.06 1958.69,231.768 1959.26,231.659 1959.83,231.486 1960.4,232.524 1960.97,232.448 1961.54,231.155 1962.1,229.176 1962.67,230.309 1963.24,230.36 1963.81,230.366 1964.38,229.271 1964.95,230.363 1965.51,230.531 1966.08,230.413 1966.65,231.374 1967.22,232.288 1967.79,231.307 1968.36,233.194 1968.92,231.887 1969.49,232.904 1970.06,232.761 1970.63,231.393 1971.2,230.325 1971.77,231.259 1972.34,231.19 1972.9,230.742 1973.47,229.734 1974.04,230.705 1974.61,231.724 1975.18,230.69 1975.75,230.523 1976.31,229.598 1976.88,229.717 1977.45,230.701 1978.02,229.707 1978.59,230.738 1979.16,229.901 1979.72,228.808 1980.29,225.893 1980.86,226.076 1981.43,229.568 1982,230.638 1982.57,230.759 1983.13,229.882 1983.7,227.59 1984.27,229.863 1984.84,227.843 1985.41,227.839 1985.98,229.041 1986.54,228.13 1987.11,227.182 1987.68,229.396 1988.25,229.441 1988.82,230.501 1989.39,232.536 1989.95,230.497 1990.52,230.459 1991.09,228.646 1991.66,228.729 1992.23,229.779 1992.8,228.693 1993.36,229.938 1993.93,229.062 1994.5,229.26 1995.07,228.243 1995.64,229.346 1996.21,229.353 1996.77,229.449 1997.34,229.664 1997.91,232.751 1998.48,231.49 1999.05,231.429 1999.62,231.459 2000.18,232.445 2000.75,232.122 2001.32,235.313 2001.89,235.071 2002.46,237.584 2003.03,237.991 2003.59,235.415 2004.16,235.065 2004.73,234.686 2005.3,232.462 2005.87,230.292 2006.44,228.342 2007,230.298 2007.57,231.109 2008.14,230.053 2008.71,229.882 2009.28,229.82 2009.85,229.542 2010.41,229.454 2010.98,229.023 2011.55,227.774 2012.12,226.826 2012.69,226.152 2013.26,226.603 2013.82,227.648 2014.39,224.904 2014.96,225.115 2015.53,224.465 2016.1,225.821 2016.67,227.001 2017.23,228.252 2017.8,228.197 2018.37,229.523 2018.94,229.504 2019.51,231.769 2020.08,231.69 2020.64,230.517 2021.21,230.535 2021.78,232.464 2022.35,231.065 2022.92,230.785 2023.49,228.779 2024.05,227.541 2024.62,227.389 2025.19,227.505 2025.76,227.686 2026.33,225.497 2026.9,224.682 2027.46,224.102 2028.03,225.743 2028.6,226.205 2029.17,226.274 2029.74,229.535 2030.31,229.556 2030.87,230.433 2031.44,231.474 2032.01,229.121 2032.58,228.153 2033.15,225.227 2033.72,224.57 2034.28,224.219 2034.85,223.875 2035.42,224.868 2035.99,225.126 2036.56,228.815 2037.13,228.214 2037.69,227.388 2038.26,228.786 2038.83,227.934 2039.4,226.943 2039.97,225.058 2040.54,223.474 2041.11,223.983 2041.67,226.395 2042.24,227.852 2042.81,227.965 2043.38,228.234 2043.95,228.496 2044.52,223.624 2045.08,225.263 2045.65,225.656 2046.22,226.122 2046.79,225.714 2047.36,228.264 2047.93,229.278 2048.49,229.566 2049.06,230.86 2049.63,230.952 2050.2,229.836 2050.77,228.892 2051.34,229.098 2051.9,227.303 2052.47,227.494 2053.04,226.825 2053.61,228.342 2054.18,227.673 2054.75,228.819 2055.31,228.252 2055.88,229.387 2056.45,231.705 2057.02,229.604 2057.59,231.073 2058.16,234.138 2058.72,235.226 2059.29,233.928 2059.86,233.928 2060.43,235.921 2061,237.591 2061.57,239.307 2062.13,236.528 2062.7,237.121 2063.27,234.55 2063.84,235.608 2064.41,234.298 2064.98,237.125 2065.54,237.81 2066.11,237.224 2066.68,236.827 2067.25,237.308 2067.82,240.245 2068.39,239.482 2068.95,238.768 2069.52,238.122 2070.09,237.626 2070.66,236.156 2071.23,236.453 2071.8,235.977 2072.36,234.65 2072.93,234.271 2073.5,234.124 2074.07,232.883 2074.64,233.751 2075.21,231.473 2075.77,231.389 2076.34,231.033 2076.91,232.951 2077.48,232.566 2078.05,232.29 2078.62,232.091 2079.18,230.671 2079.75,231.708 2080.32,231.536 2080.89,230.224 2081.46,227.868 2082.03,227.086 2082.59,226.275 2083.16,226.306 2083.73,226.399 2084.3,226.419 2084.87,227.492 2085.44,225.262 2086,225.319 2086.57,226.681 2087.14,228.671 2087.71,227.658 2088.28,227.88 2088.85,231.104 2089.41,232.019 2089.98,231.735 2090.55,232.627 2091.12,233.563 2091.69,235.231 2092.26,233.655 2092.82,231.455 2093.39,231.096 2093.96,233.165 2094.53,232.873 2095.1,232.783 2095.67,233.38 2096.23,235.243 2096.8,234.641 2097.37,234.376 2097.94,232.95 2098.51,232.892 2099.08,233.655 2099.64,233.431 2100.21,230.994 2100.78,229.811 2101.35,227.643 2101.92,225.795 2102.49,225.839 2103.05,224.777 2103.62,223.89 2104.19,223.07 2104.76,222.669 2105.33,222.37 2105.9,220.543 2106.46,219.895 2107.03,222.708 2107.6,223.214 2108.17,222.716 2108.74,224.246 2109.31,224.78 2109.87,223.047 2110.44,225.391 2111.01,229.73 2111.58,231.894 2112.15,230.747 2112.72,229.481 2113.29,230.575 2113.85,231.632 2114.42,232.397 2114.99,231.191 2115.56,229.153 2116.13,226.913 2116.7,228.155 2117.26,226.975 2117.83,225.38 2118.4,222.562 2118.97,223.249 2119.54,223.889 2120.11,222.326 2120.67,222.096 2121.24,224.799 2121.81,224.304 2122.38,226.777 2122.95,226.117 2123.52,225.306 2124.08,225.615 2124.65,224.14 2125.22,223.756 2125.79,225.327 2126.36,227.811 2126.93,228.037 2127.49,227.188 2128.06,227.383 2128.63,228.921 2129.2,232.25 2129.77,229.141 2130.34,231.46 2130.9,232.601 2131.47,235.504 2132.04,235.316 2132.61,235.061 2133.18,233.669 2133.75,234.736 2134.31,233.377 2134.88,235.414 2135.45,234.163 2136.02,233.822 2136.59,229.519 2137.16,228.847 2137.72,229.272 2138.29,227.499 2138.86,228.004 2139.43,228.277 2140,229.688 2140.57,230.656 2141.13,231.676 2141.7,230.72 2142.27,229.406 2142.84,228.654 2143.41,230.83 2143.98,230.973 2144.54,233.088 2145.11,233.98 2145.68,233.739 2146.25,234.615 2146.82,231.399 2147.39,229.283 2147.95,230.393 2148.52,229.383 2149.09,229.626 2149.66,229.59 2150.23,230.818 2150.8,233.049 2151.36,230.834 2151.93,229.683 2152.5,229.752 2153.07,234.109 2153.64,233.892 2154.21,236.689 2154.77,237.265 2155.34,233.434 2155.91,233.114 2156.48,231.845 2157.05,232.586 2157.62,233.417 2158.18,234.166 2158.75,233.025 2159.32,231.848 2159.89,231.744 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip970)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.038 ± 0.022\n  with uncertainty of ± 0.0020207144759480933\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01516 ± (0.00193693, 0.00205538) (MC)\n  95% confidence interval: [-4.01932, -4.01104]) (MC)\n  linear error propagation: -4.01534 ± 0.00202435\n  |δ_y| = |0.00173437| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.015160866748371, val_l = 0.0041548022282178465, val_u = 0.004124103121306177)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip000\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip000)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip001\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip000)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip002\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1150.15 2211.02,1150.15 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,996.945 2211.02,996.945 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,843.738 2211.02,843.738 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,690.53 2211.02,690.53 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,537.322 2211.02,537.322 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,384.115 2211.02,384.115 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,230.907 2211.02,230.907 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1150.15 365.751,1150.15 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,996.945 365.751,996.945 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,843.738 365.751,843.738 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,690.53 365.751,690.53 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,537.322 365.751,537.322 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,384.115 365.751,384.115 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,230.907 365.751,230.907 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M298.909 1135.95 Q295.298 1135.95 293.469 1139.52 Q291.664 1143.06 291.664 1150.19 Q291.664 1157.29 293.469 1160.86 Q295.298 1164.4 298.909 1164.4 Q302.543 1164.4 304.349 1160.86 Q306.177 1157.29 306.177 1150.19 Q306.177 1143.06 304.349 1139.52 Q302.543 1135.95 298.909 1135.95 M298.909 1132.25 Q304.719 1132.25 307.775 1136.85 Q310.853 1141.44 310.853 1150.19 Q310.853 1158.91 307.775 1163.52 Q304.719 1168.1 298.909 1168.1 Q293.099 1168.1 290.02 1163.52 Q286.964 1158.91 286.964 1150.19 Q286.964 1141.44 290.02 1136.85 Q293.099 1132.25 298.909 1132.25 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M259.557 1010.29 L267.196 1010.29 L267.196 983.924 L258.886 985.591 L258.886 981.332 L267.15 979.665 L271.826 979.665 L271.826 1010.29 L279.465 1010.29 L279.465 1014.23 L259.557 1014.23 L259.557 1010.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M298.909 982.744 Q295.298 982.744 293.469 986.309 Q291.664 989.85 291.664 996.98 Q291.664 1004.09 293.469 1007.65 Q295.298 1011.19 298.909 1011.19 Q302.543 1011.19 304.349 1007.65 Q306.177 1004.09 306.177 996.98 Q306.177 989.85 304.349 986.309 Q302.543 982.744 298.909 982.744 M298.909 979.04 Q304.719 979.04 307.775 983.647 Q310.853 988.23 310.853 996.98 Q310.853 1005.71 307.775 1010.31 Q304.719 1014.9 298.909 1014.9 Q293.099 1014.9 290.02 1010.31 Q286.964 1005.71 286.964 996.98 Q286.964 988.23 290.02 983.647 Q293.099 979.04 298.909 979.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M262.775 857.082 L279.094 857.082 L279.094 861.018 L257.15 861.018 L257.15 857.082 Q259.812 854.328 264.395 849.698 Q269.002 845.045 270.182 843.703 Q272.428 841.18 273.307 839.444 Q274.21 837.684 274.21 835.994 Q274.21 833.24 272.266 831.504 Q270.344 829.768 267.242 829.768 Q265.043 829.768 262.59 830.532 Q260.159 831.295 257.381 832.846 L257.381 828.124 Q260.205 826.99 262.659 826.411 Q265.113 825.833 267.15 825.833 Q272.52 825.833 275.715 828.518 Q278.909 831.203 278.909 835.694 Q278.909 837.823 278.099 839.744 Q277.312 841.643 275.205 844.235 Q274.627 844.906 271.525 848.124 Q268.423 851.318 262.775 857.082 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M298.909 829.536 Q295.298 829.536 293.469 833.101 Q291.664 836.643 291.664 843.772 Q291.664 850.879 293.469 854.443 Q295.298 857.985 298.909 857.985 Q302.543 857.985 304.349 854.443 Q306.177 850.879 306.177 843.772 Q306.177 836.643 304.349 833.101 Q302.543 829.536 298.909 829.536 M298.909 825.833 Q304.719 825.833 307.775 830.439 Q310.853 835.022 310.853 843.772 Q310.853 852.499 307.775 857.105 Q304.719 861.689 298.909 861.689 Q293.099 861.689 290.02 857.105 Q286.964 852.499 286.964 843.772 Q286.964 835.022 290.02 830.439 Q293.099 825.833 298.909 825.833 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M272.914 689.176 Q276.27 689.893 278.145 692.162 Q280.043 694.43 280.043 697.764 Q280.043 702.879 276.525 705.68 Q273.006 708.481 266.525 708.481 Q264.349 708.481 262.034 708.041 Q259.742 707.625 257.289 706.768 L257.289 702.254 Q259.233 703.389 261.548 703.967 Q263.863 704.546 266.386 704.546 Q270.784 704.546 273.076 702.81 Q275.39 701.074 275.39 697.764 Q275.39 694.708 273.238 692.995 Q271.108 691.259 267.289 691.259 L263.261 691.259 L263.261 687.417 L267.474 687.417 Q270.923 687.417 272.752 686.051 Q274.58 684.662 274.58 682.069 Q274.58 679.407 272.682 677.995 Q270.807 676.56 267.289 676.56 Q265.367 676.56 263.168 676.977 Q260.969 677.393 258.33 678.273 L258.33 674.106 Q260.992 673.366 263.307 672.995 Q265.645 672.625 267.705 672.625 Q273.029 672.625 276.131 675.055 Q279.233 677.463 279.233 681.583 Q279.233 684.454 277.59 686.444 Q275.946 688.412 272.914 689.176 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M298.909 676.329 Q295.298 676.329 293.469 679.893 Q291.664 683.435 291.664 690.565 Q291.664 697.671 293.469 701.236 Q295.298 704.778 298.909 704.778 Q302.543 704.778 304.349 701.236 Q306.177 697.671 306.177 690.565 Q306.177 683.435 304.349 679.893 Q302.543 676.329 298.909 676.329 M298.909 672.625 Q304.719 672.625 307.775 677.231 Q310.853 681.815 310.853 690.565 Q310.853 699.291 307.775 703.898 Q304.719 708.481 298.909 708.481 Q293.099 708.481 290.02 703.898 Q286.964 699.291 286.964 690.565 Q286.964 681.815 290.02 677.231 Q293.099 672.625 298.909 672.625 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M271.594 524.116 L259.789 542.565 L271.594 542.565 L271.594 524.116 M270.367 520.042 L276.247 520.042 L276.247 542.565 L281.177 542.565 L281.177 546.454 L276.247 546.454 L276.247 554.602 L271.594 554.602 L271.594 546.454 L255.992 546.454 L255.992 541.94 L270.367 520.042 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M298.909 523.121 Q295.298 523.121 293.469 526.686 Q291.664 530.227 291.664 537.357 Q291.664 544.463 293.469 548.028 Q295.298 551.57 298.909 551.57 Q302.543 551.57 304.349 548.028 Q306.177 544.463 306.177 537.357 Q306.177 530.227 304.349 526.686 Q302.543 523.121 298.909 523.121 M298.909 519.417 Q304.719 519.417 307.775 524.024 Q310.853 528.607 310.853 537.357 Q310.853 546.084 307.775 550.69 Q304.719 555.274 298.909 555.274 Q293.099 555.274 290.02 550.69 Q286.964 546.084 286.964 537.357 Q286.964 528.607 290.02 524.024 Q293.099 519.417 298.909 519.417 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M258.793 366.835 L277.15 366.835 L277.15 370.77 L263.076 370.77 L263.076 379.242 Q264.094 378.895 265.113 378.733 Q266.131 378.548 267.15 378.548 Q272.937 378.548 276.316 381.719 Q279.696 384.89 279.696 390.307 Q279.696 395.886 276.224 398.987 Q272.752 402.066 266.432 402.066 Q264.256 402.066 261.988 401.696 Q259.742 401.325 257.335 400.585 L257.335 395.886 Q259.418 397.02 261.641 397.575 Q263.863 398.131 266.34 398.131 Q270.344 398.131 272.682 396.024 Q275.02 393.918 275.02 390.307 Q275.02 386.696 272.682 384.589 Q270.344 382.483 266.34 382.483 Q264.465 382.483 262.59 382.899 Q260.738 383.316 258.793 384.196 L258.793 366.835 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M298.909 369.913 Q295.298 369.913 293.469 373.478 Q291.664 377.02 291.664 384.149 Q291.664 391.256 293.469 394.821 Q295.298 398.362 298.909 398.362 Q302.543 398.362 304.349 394.821 Q306.177 391.256 306.177 384.149 Q306.177 377.02 304.349 373.478 Q302.543 369.913 298.909 369.913 M298.909 366.21 Q304.719 366.21 307.775 370.816 Q310.853 375.4 310.853 384.149 Q310.853 392.876 307.775 397.483 Q304.719 402.066 298.909 402.066 Q293.099 402.066 290.02 397.483 Q286.964 392.876 286.964 384.149 Q286.964 375.4 290.02 370.816 Q293.099 366.21 298.909 366.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M269.326 229.044 Q266.178 229.044 264.326 231.196 Q262.497 233.349 262.497 237.099 Q262.497 240.826 264.326 243.002 Q266.178 245.155 269.326 245.155 Q272.474 245.155 274.303 243.002 Q276.154 240.826 276.154 237.099 Q276.154 233.349 274.303 231.196 Q272.474 229.044 269.326 229.044 M278.608 214.391 L278.608 218.65 Q276.849 217.817 275.043 217.377 Q273.261 216.937 271.502 216.937 Q266.872 216.937 264.418 220.062 Q261.988 223.187 261.641 229.507 Q263.006 227.493 265.066 226.428 Q267.127 225.34 269.603 225.34 Q274.812 225.34 277.821 228.511 Q280.853 231.659 280.853 237.099 Q280.853 242.423 277.705 245.641 Q274.557 248.858 269.326 248.858 Q263.33 248.858 260.159 244.275 Q256.988 239.669 256.988 230.942 Q256.988 222.747 260.877 217.886 Q264.766 213.002 271.316 213.002 Q273.076 213.002 274.858 213.349 Q276.664 213.697 278.608 214.391 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M298.909 216.706 Q295.298 216.706 293.469 220.271 Q291.664 223.812 291.664 230.942 Q291.664 238.048 293.469 241.613 Q295.298 245.155 298.909 245.155 Q302.543 245.155 304.349 241.613 Q306.177 238.048 306.177 230.942 Q306.177 223.812 304.349 220.271 Q302.543 216.706 298.909 216.706 M298.909 213.002 Q304.719 213.002 307.775 217.609 Q310.853 222.192 310.853 230.942 Q310.853 239.669 307.775 244.275 Q304.719 248.858 298.909 248.858 Q293.099 248.858 290.02 244.275 Q286.964 239.669 286.964 230.942 Q286.964 222.192 290.02 217.609 Q293.099 213.002 298.909 213.002 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip002)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1037.27 400.199,933.555 400.786,838.398 401.372,751.219 401.958,671.486 402.545,598.708 403.131,532.429 403.718,472.227 404.304,417.707 404.891,368.502 405.477,324.267 406.063,284.682 406.65,328.994 407.236,294.372 407.823,263.721 408.409,236.781 408.995,330.783 409.582,305.91 410.168,284.272 410.755,265.652 411.341,250.635 411.927,238.444 412.514,227.618 413.1,219.895 413.687,281.537 414.273,306.596 414.86,299.932 415.446,322.712 416.032,319.385 416.619,318.029 417.205,317.858 417.792,361.19 418.378,362.171 418.964,364.857 419.551,368.272 420.137,372.19 420.724,392.949 421.31,426.189 421.896,443.729 422.483,448.531 423.069,477.492 423.656,495.093 424.242,501.631 424.829,508.693 425.415,516.198 426.001,533.401 426.588,551.018 427.174,568.53 427.761,584.801 428.347,601.571 428.933,631.96 429.52,640.353 430.106,649.77 430.693,658.985 431.279,669.105 431.865,684.608 432.452,694.25 433.038,715.045 433.625,729.225 434.211,752.702 434.798,770.07 435.384,777.381 435.97,793.763 436.557,805.718 437.143,821.213 437.73,831.832 438.316,850.282 438.902,864.053 439.489,870.424 440.075,876.936 440.662,882.75 441.248,899.188 441.835,905.213 442.421,914.377 443.007,923.437 443.594,932.072 444.18,946.193 444.767,960.333 445.353,965.345 445.939,980.978 446.526,988.212 447.112,992.797 447.699,997.668 448.285,1005.05 448.871,1012.3 449.458,1019.38 450.044,1030.95 450.631,1044.13 451.217,1054.35 451.804,1057.6 452.39,1065.43 452.976,1075.19 453.563,1078.34 454.149,1083.1 454.736,1091.72 455.322,1096.44 455.908,1102.92 456.495,1107.37 457.081,1111.63 457.668,1115.89 458.254,1116.13 458.84,1118.46 459.427,1120.97 460.013,1123.32 460.6,1125.63 461.186,1129.88 461.773,1134.14 462.359,1136.48 462.945,1143.83 463.532,1150.85 464.118,1152.38 464.705,1157.62 465.291,1161 465.877,1164.41 466.464,1169.16 467.05,1170.35 467.637,1173.14 468.223,1177.56 468.809,1185.26 469.396,1187.68 469.982,1188.27 470.569,1189.23 471.155,1188.05 471.742,1193.14 472.328,1193.74 472.914,1195.93 473.501,1196.52 474.087,1195.71 474.674,1197.78 475.26,1199.94 475.846,1201.93 476.433,1205.58 477.019,1206.03 477.606,1212.22 478.192,1213.83 478.778,1213.93 479.365,1212.53 479.951,1212.49 480.538,1214.07 481.124,1213 481.711,1216.12 482.297,1216.09 482.883,1216.13 483.47,1217.76 484.056,1219.19 484.643,1220.66 485.229,1222.21 485.815,1223.37 486.402,1224.73 486.988,1226.11 487.575,1226.16 488.161,1228.88 488.748,1227.59 489.334,1230.29 489.92,1232.7 490.507,1233.51 491.093,1233.42 491.68,1232.86 492.266,1232.38 492.852,1235.08 493.439,1234.39 494.025,1233.89 494.612,1233.55 495.198,1234.73 495.784,1235.64 496.371,1238.84 496.957,1236.83 497.544,1236.44 498.13,1239.84 498.717,1239.15 499.303,1237.18 499.889,1236.89 500.476,1237.93 501.062,1235.97 501.649,1239.55 502.235,1238.93 502.821,1238.65 503.408,1236.82 503.994,1237.78 504.581,1238.69 505.167,1241.06 505.753,1241.84 506.34,1238.72 506.926,1238.33 507.513,1241.86 508.099,1242.42 508.686,1244.41 509.272,1246.08 509.858,1243.74 510.445,1243.01 511.031,1240.85 511.618,1238.94 512.204,1242.43 512.79,1240.25 513.377,1238.67 513.963,1239.46 514.55,1241.76 515.136,1243.86 515.722,1244.37 516.309,1243.73 516.895,1245.75 517.482,1246.31 518.068,1247.07 518.655,1244.75 519.241,1244.29 519.827,1247.29 520.414,1247.86 521,1249.48 521.587,1248.52 522.173,1247.61 522.759,1246.53 523.346,1245.84 523.932,1243.63 524.519,1246.56 525.105,1247.2 525.691,1249.09 526.278,1250.53 526.864,1249.56 527.451,1250.07 528.037,1250.15 528.624,1249.04 529.21,1247.81 529.796,1242.99 530.383,1241.17 530.969,1240.54 531.556,1241.43 532.142,1242.51 532.728,1240.52 533.315,1242.36 533.901,1241.77 534.488,1241.14 535.074,1245.8 535.661,1247.4 536.247,1246.58 536.833,1245.49 537.42,1243.3 538.006,1242.49 538.593,1241.87 539.179,1242.81 539.765,1242.35 540.352,1243.14 540.938,1243.79 541.525,1244.65 542.111,1245.08 542.697,1244.17 543.284,1244.54 543.87,1242.27 544.457,1244.27 545.043,1243.55 545.63,1243.97 546.216,1244.62 546.802,1244.93 547.389,1245.41 547.975,1245.77 548.562,1241.15 549.148,1240.5 549.734,1238.49 550.321,1236.59 550.907,1236.21 551.494,1235.59 552.08,1236.53 552.666,1235.61 553.253,1235.5 553.839,1236.37 554.426,1235.79 555.012,1236.85 555.599,1235.27 556.185,1237.18 556.771,1236.91 557.358,1235.34 557.944,1229.92 558.531,1228.54 559.117,1228.35 559.703,1227.11 560.29,1228.62 560.876,1230.06 561.463,1227.14 562.049,1225.86 562.635,1226.16 563.222,1229.75 563.808,1230.99 564.395,1230.72 564.981,1231.92 565.568,1231.56 566.154,1233.71 566.74,1234.67 567.327,1234.46 567.913,1233.84 568.5,1234.36 569.086,1234.23 569.672,1233.87 570.259,1233.51 570.845,1232.19 571.432,1233.1 572.018,1232.82 572.605,1231.27 573.191,1229.63 573.777,1231.78 574.364,1235.12 574.95,1233.44 575.537,1233.02 576.123,1232.6 576.709,1233.59 577.296,1235.62 577.882,1235.17 578.469,1233.4 579.055,1230.62 579.641,1231.72 580.228,1228.91 580.814,1229.98 581.401,1230.03 581.987,1229.73 582.574,1228.15 583.16,1226.71 583.746,1229.34 584.333,1226.72 584.919,1226.65 585.506,1227.87 586.092,1227.66 586.678,1228.95 587.265,1224.97 587.851,1225.12 588.438,1226.41 589.024,1227.44 589.61,1225.9 590.197,1225.83 590.783,1225.78 591.37,1226.88 591.956,1226.47 592.543,1227.8 593.129,1232.73 593.715,1232.1 594.302,1232.84 594.888,1231.23 595.475,1231.13 596.061,1230.57 596.647,1229.96 597.234,1229.62 597.82,1229.19 598.407,1228.87 598.993,1231.11 599.579,1229.41 600.166,1229.3 600.752,1228.92 601.339,1232.2 601.925,1229.31 602.512,1226.31 603.098,1226.22 603.684,1224.91 604.271,1224.59 604.857,1224.68 605.444,1227.17 606.03,1226.99 606.616,1228 607.203,1231.6 607.789,1233.62 608.376,1234.34 608.962,1234.66 609.548,1234.11 610.135,1235.97 610.721,1236.51 611.308,1234.62 611.894,1236.23 612.481,1233.03 613.067,1233.75 613.653,1234.16 614.24,1232.55 614.826,1231.99 615.413,1232.86 615.999,1236.15 616.585,1235.8 617.172,1236.48 617.758,1234.38 618.345,1233.7 618.931,1233.12 619.518,1232.54 620.104,1230.71 620.69,1227.5 621.277,1224.6 621.863,1224.39 622.45,1221.65 623.036,1221.57 623.622,1222.62 624.209,1222.26 624.795,1222.27 625.382,1220.93 625.968,1220.97 626.554,1220.59 627.141,1220.6 627.727,1221.65 628.314,1221.6 628.9,1222.76 629.487,1224.01 630.073,1227.65 630.659,1227.4 631.246,1228.07 631.832,1227.63 632.419,1227 633.005,1231.53 633.591,1230.61 634.178,1230.23 634.764,1230.78 635.351,1231.52 635.937,1233.4 636.523,1232.79 637.11,1230.86 637.696,1230.34 638.283,1234.84 638.869,1232.79 639.456,1233.23 640.042,1231.22 640.628,1230.53 641.215,1228.55 641.801,1228.21 642.388,1227.64 642.974,1227.32 643.56,1228.23 644.147,1227.51 644.733,1228.44 645.32,1228.21 645.906,1227.98 646.492,1227.69 647.079,1227.36 647.665,1225.64 648.252,1229.07 648.838,1228.57 649.425,1225.76 650.011,1223.08 650.597,1218.98 651.184,1220.03 651.77,1218.8 652.357,1217.44 652.943,1218.93 653.529,1221.38 654.116,1221.23 654.702,1220.08 655.289,1222.65 655.875,1221.17 656.462,1222.29 657.048,1223.25 657.634,1224.32 658.221,1226.79 658.807,1226.39 659.394,1226.1 659.98,1224.38 660.566,1221.24 661.153,1219.73 661.739,1215.96 662.326,1215.74 662.912,1216.01 663.498,1218.61 664.085,1218.71 664.671,1218.64 665.258,1218.41 665.844,1217.23 666.431,1218.82 667.017,1219.8 667.603,1218.47 668.19,1222.36 668.776,1220.95 669.363,1219.63 669.949,1222.34 670.535,1222.2 671.122,1220.79 671.708,1219.49 672.295,1218.48 672.881,1220.93 673.467,1220.81 674.054,1222.89 674.64,1223.71 675.227,1222.22 675.813,1221.8 676.4,1223.79 676.986,1224.74 677.572,1224.56 678.159,1224.33 678.745,1223.85 679.332,1225.91 679.918,1225.72 680.504,1225.27 681.091,1224.01 681.677,1223.63 682.264,1225.68 682.85,1223.74 683.436,1225.92 684.023,1225.35 684.609,1223.88 685.196,1224.8 685.782,1224.42 686.369,1221.63 686.955,1221.37 687.541,1221.15 688.128,1219.91 688.714,1219.96 689.301,1219.88 689.887,1220.8 690.473,1219.24 691.06,1219.27 691.646,1219.16 692.233,1220.39 692.819,1222.61 693.405,1224.66 693.992,1224.11 694.578,1226.22 695.165,1225.88 695.751,1224.29 696.338,1222.76 696.924,1221.06 697.51,1220.87 698.097,1223.33 698.683,1224.25 699.27,1222.89 699.856,1222.83 700.442,1222.39 701.029,1220.86 701.615,1222.04 702.202,1220.41 702.788,1221.25 703.375,1221.08 703.961,1217.08 704.547,1220.71 705.134,1220.6 705.72,1220.42 706.307,1219.93 706.893,1218.61 707.479,1217 708.066,1218.31 708.652,1216.87 709.239,1218.11 709.825,1218.12 710.411,1215.72 710.998,1218.24 711.584,1219.33 712.171,1219.35 712.757,1219.5 713.344,1219.44 713.93,1219.28 714.516,1219.15 715.103,1217.65 715.689,1218.93 716.276,1216.25 716.862,1217.38 717.448,1221.06 718.035,1222.05 718.621,1221.94 719.208,1221.75 719.794,1220.28 720.38,1219.9 720.967,1220.9 721.553,1220.49 722.14,1220.45 722.726,1220.26 723.313,1220.05 723.899,1222.21 724.485,1220.77 725.072,1220.52 725.658,1222.54 726.245,1218.57 726.831,1216.1 727.417,1215.99 728.004,1215.96 728.59,1216.97 729.177,1216.81 729.763,1216.49 730.349,1216.52 730.936,1215.36 731.522,1214.14 732.109,1212.66 732.695,1213.96 733.282,1213.01 733.868,1213.09 734.454,1214.42 735.041,1211.77 735.627,1208.62 736.214,1209.35 736.8,1209.74 737.386,1211.49 737.973,1211.77 738.559,1213.44 739.146,1213.71 739.732,1213.72 740.318,1215.14 740.905,1214.97 741.491,1216.25 742.078,1216.24 742.664,1215.1 743.251,1213.95 743.837,1211.48 744.423,1211.7 745.01,1214.45 745.596,1214.42 746.183,1214.62 746.769,1214.74 747.355,1214.99 747.942,1217.57 748.528,1216.24 749.115,1216.16 749.701,1214.76 750.288,1211.18 750.874,1212.59 751.46,1211.41 752.047,1211.44 752.633,1211.65 753.22,1212.94 753.806,1213.4 754.392,1211.49 754.979,1213.05 755.565,1214.51 756.152,1212.15 756.738,1212.35 757.324,1212.5 757.911,1212.74 758.497,1214.23 759.084,1214.41 759.67,1214.38 760.257,1214.4 760.843,1213.15 761.429,1212.03 762.016,1212.12 762.602,1211.12 763.189,1209.96 763.775,1212.47 764.361,1212.56 764.948,1214.09 765.534,1212.9 766.121,1214.11 766.707,1214.18 767.293,1216.7 767.88,1215.03 768.466,1213.89 769.053,1215.1 769.639,1216.45 770.226,1216.57 770.812,1212.67 771.398,1212.93 771.985,1213.14 772.571,1213.3 773.158,1214.65 773.744,1214.86 774.33,1213.37 774.917,1213.61 775.503,1214.9 776.09,1209.73 776.676,1211.4 777.262,1211.39 777.849,1210.38 778.435,1210.68 779.022,1213.4 779.608,1213.78 780.195,1213.96 780.781,1215.2 781.367,1216.53 781.954,1217.72 782.54,1217.54 783.127,1217.37 783.713,1218.77 784.299,1218.63 784.886,1220.92 785.472,1222 786.059,1217.98 786.645,1219.23 787.232,1217.98 787.818,1215.56 788.404,1215.63 788.991,1214.42 789.577,1214.53 790.164,1214.6 790.75,1215.7 791.336,1216.95 791.923,1216.82 792.509,1222.69 793.096,1221.21 793.682,1218.37 794.268,1219.54 794.855,1220.59 795.441,1221.69 796.028,1222.4 796.614,1222.01 797.201,1222.55 797.787,1224.64 798.373,1224.3 798.96,1222.47 799.546,1222.14 800.133,1220.38 800.719,1218.65 801.305,1222.18 801.892,1224.12 802.478,1224.94 803.065,1222.27 803.651,1219.44 804.237,1215.71 804.824,1215.44 805.41,1215.35 805.997,1213.9 806.583,1213.93 807.17,1212.61 807.756,1213.79 808.342,1212.71 808.929,1212.45 809.515,1214.11 810.102,1216.36 810.688,1216.4 811.274,1217.62 811.861,1218.49 812.447,1215.96 813.034,1213.38 813.62,1213.3 814.206,1214.51 814.793,1214.3 815.379,1215.55 815.966,1216.9 816.552,1214.13 817.139,1215.32 817.725,1216.26 818.311,1214.84 818.898,1211 819.484,1212.51 820.071,1213.7 820.657,1213.75 821.243,1213.69 821.83,1211.26 822.416,1211.26 823.003,1211.24 823.589,1211.5 824.175,1210.43 824.762,1209.3 825.348,1211.04 825.935,1212.62 826.521,1211.51 827.108,1211.59 827.694,1210.39 828.28,1208.94 828.867,1211.66 829.453,1211.75 830.04,1214.29 830.626,1214.28 831.212,1214.25 831.799,1214.47 832.385,1214.33 832.972,1213.04 833.558,1211.97 834.145,1215.82 834.731,1212.12 835.317,1213.45 835.904,1213.69 836.49,1209.97 837.077,1211.73 837.663,1210.78 838.249,1209.88 838.836,1210.22 839.422,1211.94 840.009,1213.32 840.595,1212.21 841.181,1212.17 841.768,1213.49 842.354,1216.11 842.941,1216.07 843.527,1215.94 844.114,1216.16 844.7,1213.6 845.286,1212.17 845.873,1213.43 846.459,1217.25 847.046,1216.84 847.632,1217.91 848.218,1219.94 848.805,1220.68 849.391,1221.63 849.978,1222.2 850.564,1221.71 851.15,1221.12 851.737,1220.66 852.323,1221.65 852.91,1222.35 853.496,1223.15 854.083,1225.17 854.669,1222.18 855.255,1220.62 855.842,1219.09 856.428,1217.26 857.015,1215.75 857.601,1214.23 858.187,1217.89 858.774,1215.07 859.36,1214.93 859.947,1213.63 860.533,1214.79 861.119,1218.74 861.706,1220.81 862.292,1219.15 862.879,1217.74 863.465,1217.61 864.052,1217.3 864.638,1217.42 865.224,1214.37 865.811,1215.62 866.397,1216.87 866.984,1221.81 867.57,1222.9 868.156,1222.3 868.743,1216.79 869.329,1215.15 869.916,1213.81 870.502,1213.99 871.089,1215.17 871.675,1214.95 872.261,1216.11 872.848,1215.94 873.434,1214.49 874.021,1216.9 874.607,1217.94 875.193,1216.26 875.78,1216.21 876.366,1214.86 876.953,1213.41 877.539,1213.38 878.125,1214.34 878.712,1214.15 879.298,1212.95 879.885,1214.15 880.471,1213.79 881.058,1213.8 881.644,1212.58 882.23,1211.32 882.817,1210.14 883.403,1212.76 883.99,1214 884.576,1215.11 885.162,1211.09 885.749,1208.8 886.335,1212.67 886.922,1212.74 887.508,1214.91 888.094,1216.06 888.681,1215.92 889.267,1213.22 889.854,1212.1 890.44,1212.29 891.027,1213.45 891.613,1212.22 892.199,1211.16 892.786,1207.52 893.372,1207.76 893.959,1209.72 894.545,1208.74 895.131,1208.9 895.718,1210.42 896.304,1210.89 896.891,1212.48 897.477,1212.62 898.063,1213.71 898.65,1212.29 899.236,1212.3 899.823,1212.48 900.409,1212.54 900.996,1212.49 901.582,1212.48 902.168,1211.3 902.755,1211.34 903.341,1210.09 903.928,1211.64 904.514,1209.48 905.1,1210.64 905.687,1208.13 906.273,1208.2 906.86,1205.91 907.446,1206.24 908.032,1202.7 908.619,1203.37 909.205,1205.21 909.792,1205.67 910.378,1204.76 910.965,1204.15 911.551,1204.72 912.137,1203.95 912.724,1204.31 913.31,1206.21 913.897,1205.34 914.483,1206.75 915.069,1207.14 915.656,1206.17 916.242,1205.1 916.829,1205.72 917.415,1211.1 918.002,1209.96 918.588,1212.67 919.174,1215.06 919.761,1215.34 920.347,1215.1 920.934,1214.87 921.52,1214.77 922.106,1213.49 922.693,1213.74 923.279,1212.43 923.866,1212.36 924.452,1211.18 925.038,1209.85 925.625,1206.31 926.211,1204.34 926.798,1205.98 927.384,1206.23 927.971,1208.01 928.557,1207.07 929.143,1211.5 929.73,1212.87 930.316,1215.43 930.903,1215.17 931.489,1215.17 932.075,1214.21 932.662,1214.3 933.248,1214.37 933.835,1216.01 934.421,1219.57 935.007,1219.23 935.594,1217.81 936.18,1217.39 936.767,1214.58 937.353,1213.14 937.94,1213.29 938.526,1213.38 939.112,1214.82 939.699,1216.13 940.285,1215.82 940.872,1214.24 941.458,1214.19 942.044,1215.34 942.631,1215.31 943.217,1212.62 943.804,1212.56 944.39,1212.42 944.976,1211.21 945.563,1211.34 946.149,1210.24 946.736,1210.49 947.322,1210.7 947.909,1210.64 948.495,1209.54 949.081,1210.85 949.668,1209.92 950.254,1210.12 950.841,1208.72 951.427,1208.91 952.013,1209.17 952.6,1210.51 953.186,1214.37 953.773,1220.63 954.359,1217.75 954.945,1218.98 955.532,1218.71 956.118,1215.73 956.705,1215.62 957.291,1215.65 957.878,1216.9 958.464,1216.18 959.05,1210.86 959.637,1210.77 960.223,1213.39 960.81,1212.18 961.396,1213.69 961.982,1214.87 962.569,1213.21 963.155,1214.54 963.742,1214.65 964.328,1212.29 964.915,1213.59 965.501,1213.29 966.087,1214.27 966.674,1210.67 967.26,1210.7 967.847,1210.81 968.433,1210.82 969.019,1211.05 969.606,1209.81 970.192,1211.42 970.779,1210.14 971.365,1210.33 971.951,1210.21 972.538,1209.12 973.124,1209.17 973.711,1210.84 974.297,1211.04 974.884,1215.11 975.47,1217.58 976.056,1218.62 976.643,1218.3 977.229,1215.4 977.816,1215.12 978.402,1214.88 978.988,1213.76 979.575,1215.14 980.161,1213.65 980.748,1212.46 981.334,1213.74 981.92,1214.92 982.507,1215.9 983.093,1214.62 983.68,1216.81 984.266,1216.73 984.853,1213.92 985.439,1215.4 986.025,1217.66 986.612,1214.83 987.198,1215.73 987.785,1215.45 988.371,1216.23 988.957,1213.41 989.544,1213.44 990.13,1212.39 990.717,1212.52 991.303,1212.24 991.889,1212.03 992.476,1210.78 993.062,1209.52 993.649,1208.53 994.235,1212.67 994.822,1215.01 995.408,1214.75 995.994,1212.46 996.581,1213.59 997.167,1212.4 997.754,1213.67 998.34,1213.58 998.926,1210.92 999.513,1211.12 1000.1,1213.67 1000.69,1213.99 1001.27,1212.9 1001.86,1210.37 1002.44,1207.84 1003.03,1205.41 1003.62,1208.53 1004.2,1211.04 1004.79,1211.14 1005.38,1212.34 1005.96,1211.11 1006.55,1211.33 1007.14,1210.28 1007.72,1211.47 1008.31,1211.39 1008.9,1211.35 1009.48,1211.15 1010.07,1212.34 1010.65,1213.56 1011.24,1215.79 1011.83,1215.63 1012.41,1215.28 1013,1213.49 1013.59,1214.72 1014.17,1212.29 1014.76,1209.7 1015.35,1210.83 1015.93,1212.01 1016.52,1214.39 1017.11,1212.77 1017.69,1211.62 1018.28,1211.66 1018.86,1214.21 1019.45,1214.35 1020.04,1213.08 1020.62,1214.33 1021.21,1214.38 1021.8,1210.49 1022.38,1209.33 1022.97,1209.42 1023.56,1208.24 1024.14,1209.79 1024.73,1212.59 1025.32,1210.27 1025.9,1210.26 1026.49,1210.59 1027.07,1209.4 1027.66,1207.98 1028.25,1210.54 1028.83,1209.43 1029.42,1208.39 1030.01,1209.84 1030.59,1209.78 1031.18,1213.57 1031.77,1216.25 1032.35,1213.41 1032.94,1213.46 1033.52,1213.39 1034.11,1214.2 1034.7,1213.94 1035.28,1211.24 1035.87,1212.82 1036.46,1215.56 1037.04,1213.15 1037.63,1217.95 1038.22,1216.67 1038.8,1215.2 1039.39,1215.21 1039.98,1217.48 1040.56,1213.34 1041.15,1210.86 1041.73,1213.25 1042.32,1212.89 1042.91,1214.18 1043.49,1213.96 1044.08,1212.84 1044.67,1212.86 1045.25,1211.56 1045.84,1212.85 1046.43,1213.69 1047.01,1210.93 1047.6,1211.03 1048.19,1209.94 1048.77,1211.32 1049.36,1213.91 1049.94,1213.94 1050.53,1212.59 1051.12,1213.77 1051.7,1216.43 1052.29,1216.22 1052.88,1213.51 1053.46,1214.65 1054.05,1213.19 1054.64,1211.81 1055.22,1212.89 1055.81,1211.67 1056.39,1210.51 1056.98,1211.86 1057.57,1213.06 1058.15,1215.3 1058.74,1215.23 1059.33,1213.8 1059.91,1213.59 1060.5,1211.98 1061.09,1213.16 1061.67,1214.31 1062.26,1211.83 1062.85,1214.34 1063.43,1212.64 1064.02,1213.75 1064.6,1213.53 1065.19,1213.39 1065.78,1213.18 1066.36,1214.21 1066.95,1214.35 1067.54,1215.56 1068.12,1214.11 1068.71,1215.43 1069.3,1216.44 1069.88,1216.14 1070.47,1214.8 1071.06,1215.73 1071.64,1215.77 1072.23,1215.91 1072.81,1212.19 1073.4,1210.72 1073.99,1210.85 1074.57,1212.25 1075.16,1213.25 1075.75,1211.82 1076.33,1212.02 1076.92,1213.17 1077.51,1214.41 1078.09,1214.24 1078.68,1213.91 1079.26,1214.21 1079.85,1216.66 1080.44,1219.04 1081.02,1218.68 1081.61,1217.17 1082.2,1218.4 1082.78,1214.12 1083.37,1212.7 1083.96,1212.8 1084.54,1215.26 1085.13,1215.04 1085.72,1213.55 1086.3,1214.87 1086.89,1214.52 1087.47,1214.37 1088.06,1215.43 1088.65,1217.8 1089.23,1217.44 1089.82,1217.17 1090.41,1215.83 1090.99,1215.85 1091.58,1215.6 1092.17,1216.83 1092.75,1217.87 1093.34,1216.25 1093.93,1213.87 1094.51,1211.16 1095.1,1212.21 1095.68,1211.03 1096.27,1209.92 1096.86,1212.35 1097.44,1210.96 1098.03,1207.34 1098.62,1211.31 1099.2,1211.33 1099.79,1210.17 1100.38,1209.15 1100.96,1205.77 1101.55,1203.73 1102.14,1205.43 1102.72,1207.06 1103.31,1208.51 1103.89,1206.55 1104.48,1205.64 1105.07,1207.36 1105.65,1206.51 1106.24,1206.51 1106.83,1205.78 1107.41,1208.54 1108,1212.43 1108.59,1213.91 1109.17,1213.7 1109.76,1213.66 1110.34,1212.1 1110.93,1213.66 1111.52,1212.43 1112.1,1212.11 1112.69,1213.41 1113.28,1214.66 1113.86,1214.48 1114.45,1215.45 1115.04,1215.15 1115.62,1215.04 1116.21,1212.32 1116.8,1212.25 1117.38,1213.51 1117.97,1210.97 1118.55,1208.45 1119.14,1208.78 1119.73,1210.3 1120.31,1209.28 1120.9,1209.25 1121.49,1203.22 1122.07,1203.92 1122.66,1204.21 1123.25,1203.55 1123.83,1205.42 1124.42,1206.97 1125.01,1207.25 1125.59,1207.52 1126.18,1207.89 1126.76,1207.94 1127.35,1208.29 1127.94,1210.04 1128.52,1209.1 1129.11,1209.27 1129.7,1209.4 1130.28,1207.08 1130.87,1206.15 1131.46,1207.86 1132.04,1209.14 1132.63,1207.81 1133.21,1206.88 1133.8,1208.41 1134.39,1209.74 1134.97,1209.84 1135.56,1207.35 1136.15,1207.56 1136.73,1206.45 1137.32,1205.84 1137.91,1206.4 1138.49,1206.94 1139.08,1209.7 1139.67,1208.48 1140.25,1208.44 1140.84,1208.46 1141.42,1209.92 1142.01,1210.17 1142.6,1208.97 1143.18,1210.1 1143.77,1206.48 1144.36,1207.92 1144.94,1207.22 1145.53,1208.69 1146.12,1210.43 1146.7,1209.24 1147.29,1209.59 1147.88,1209.63 1148.46,1208.55 1149.05,1208.64 1149.63,1211.44 1150.22,1210.29 1150.81,1213.17 1151.39,1214.25 1151.98,1214.22 1152.57,1217.61 1153.15,1217.12 1153.74,1217.87 1154.33,1216.57 1154.91,1217.37 1155.5,1214.55 1156.09,1212.01 1156.67,1212 1157.26,1210.84 1157.84,1214.69 1158.43,1214.51 1159.02,1214.86 1159.6,1214.83 1160.19,1214.88 1160.78,1213.51 1161.36,1213.46 1161.95,1213.28 1162.54,1213.39 1163.12,1214.51 1163.71,1211.87 1164.29,1211.9 1164.88,1212.97 1165.47,1211.45 1166.05,1212.77 1166.64,1212.66 1167.23,1216.12 1167.81,1217.12 1168.4,1218.05 1168.99,1217.65 1169.57,1217.09 1170.16,1214.3 1170.75,1215.4 1171.33,1214.04 1171.92,1208.94 1172.5,1208.94 1173.09,1206.84 1173.68,1209.57 1174.26,1206.9 1174.85,1210.93 1175.44,1212.11 1176.02,1210.76 1176.61,1210.75 1177.2,1212.98 1177.78,1212.78 1178.37,1210.44 1178.96,1210.51 1179.54,1209.28 1180.13,1212.99 1180.71,1213.03 1181.3,1211.73 1181.89,1211.76 1182.47,1210.41 1183.06,1210.44 1183.65,1211.7 1184.23,1212.81 1184.82,1213.88 1185.41,1214.92 1185.99,1216.21 1186.58,1215.94 1187.16,1215.95 1187.75,1215.58 1188.34,1215.13 1188.92,1214.95 1189.51,1214.67 1190.1,1213.15 1190.68,1213.18 1191.27,1214.32 1191.86,1216.68 1192.44,1215.26 1193.03,1214.07 1193.62,1217.63 1194.2,1217.35 1194.79,1217.24 1195.37,1215.71 1195.96,1214.35 1196.55,1210.39 1197.13,1209.02 1197.72,1209.34 1198.31,1209.56 1198.89,1209.72 1199.48,1209.88 1200.07,1207.22 1200.65,1207.42 1201.24,1206.58 1201.83,1206.98 1202.41,1207.17 1203,1206.19 1203.58,1206.3 1204.17,1205.3 1204.76,1205.65 1205.34,1205.96 1205.93,1206.08 1206.52,1207.68 1207.1,1206.65 1207.69,1209.51 1208.28,1208.44 1208.86,1208.66 1209.45,1209.84 1210.03,1211.21 1210.62,1211.06 1211.21,1209.98 1211.79,1211.26 1212.38,1212.49 1212.97,1211.34 1213.55,1212.56 1214.14,1213.6 1214.73,1210.78 1215.31,1208.2 1215.9,1206.97 1216.49,1207.31 1217.07,1207.43 1217.66,1208.82 1218.24,1210.26 1218.83,1211.54 1219.42,1208.95 1220,1209.18 1220.59,1210.53 1221.18,1212.03 1221.76,1208.22 1222.35,1210.93 1222.94,1211.07 1223.52,1212.21 1224.11,1208.46 1224.7,1207.36 1225.28,1207.59 1225.87,1206.51 1226.45,1204.43 1227.04,1203.73 1227.63,1204.5 1228.21,1204.93 1228.8,1205.42 1229.39,1207.11 1229.97,1207.28 1230.56,1210.13 1231.15,1211.43 1231.73,1210.05 1232.32,1208.98 1232.91,1210.15 1233.49,1209.08 1234.08,1211.83 1234.66,1214.45 1235.25,1209.39 1235.84,1209.81 1236.42,1209.79 1237.01,1210.11 1237.6,1210.41 1238.18,1209.31 1238.77,1211.75 1239.36,1211.42 1239.94,1212.75 1240.53,1213.93 1241.11,1211.42 1241.7,1213.97 1242.29,1212.31 1242.87,1214.83 1243.46,1217.04 1244.05,1217.98 1244.63,1218.88 1245.22,1215.94 1245.81,1216.68 1246.39,1215.11 1246.98,1215.05 1247.57,1216.14 1248.15,1219.84 1248.74,1216.89 1249.32,1216.58 1249.91,1218.83 1250.5,1218.7 1251.08,1217.38 1251.67,1217.02 1252.26,1214.5 1252.84,1212.87 1253.43,1214.32 1254.02,1216.43 1254.6,1214.97 1255.19,1210.78 1255.78,1210.87 1256.36,1209.92 1256.95,1211.01 1257.53,1210.94 1258.12,1212.28 1258.71,1213.65 1259.29,1213.59 1259.88,1213.53 1260.47,1214.5 1261.05,1215.5 1261.64,1215.07 1262.23,1217.56 1262.81,1214.88 1263.4,1216.06 1263.98,1214.97 1264.57,1216.32 1265.16,1217.32 1265.74,1212.13 1266.33,1212.07 1266.92,1210.67 1267.5,1211.95 1268.09,1209.53 1268.68,1212.18 1269.26,1210.8 1269.85,1213.12 1270.44,1213.03 1271.02,1215.57 1271.61,1215.39 1272.19,1215.2 1272.78,1212.32 1273.37,1213.49 1273.95,1217.32 1274.54,1215.81 1275.13,1215.49 1275.71,1211.65 1276.3,1211.56 1276.89,1211.71 1277.47,1210.39 1278.06,1209.44 1278.65,1210.85 1279.23,1210.85 1279.82,1212.23 1280.4,1213.5 1280.99,1209.93 1281.58,1211.37 1282.16,1210.12 1282.75,1210.4 1283.34,1211.63 1283.92,1212.95 1284.51,1211.67 1285.1,1212.01 1285.68,1212.17 1286.27,1212.51 1286.86,1212.47 1287.44,1212.64 1288.03,1214.96 1288.61,1214.71 1289.2,1213.27 1289.79,1214.29 1290.37,1216.81 1290.96,1220.47 1291.55,1220.31 1292.13,1221.21 1292.72,1222.14 1293.31,1220.19 1293.89,1219.71 1294.48,1220.67 1295.06,1217.81 1295.65,1216.1 1296.24,1218.29 1296.82,1216.98 1297.41,1216.98 1298,1216.73 1298.58,1214.16 1299.17,1214.26 1299.76,1215.29 1300.34,1215.15 1300.93,1220.08 1301.52,1219.62 1302.1,1221.41 1302.69,1220.72 1303.27,1217.65 1303.86,1217.12 1304.45,1214.12 1305.03,1212.7 1305.62,1217.69 1306.21,1217.43 1306.79,1220.85 1307.38,1219.38 1307.97,1221.42 1308.55,1219.73 1309.14,1220.55 1309.73,1218.79 1310.31,1214.79 1310.9,1210.92 1311.48,1208.58 1312.07,1211.26 1312.66,1212.42 1313.24,1212.11 1313.83,1212.29 1314.42,1209.5 1315,1210.87 1315.59,1209.83 1316.18,1210 1316.76,1212.74 1317.35,1212.7 1317.93,1211.33 1318.52,1208.8 1319.11,1207.62 1319.69,1211.54 1320.28,1210.26 1320.87,1206.66 1321.45,1206.92 1322.04,1207.17 1322.63,1209.74 1323.21,1208.57 1323.8,1209.02 1324.39,1207.94 1324.97,1208.21 1325.56,1209.53 1326.14,1212 1326.73,1212.11 1327.32,1213.36 1327.9,1210.82 1328.49,1209.58 1329.08,1210.89 1329.66,1211.15 1330.25,1211.49 1330.84,1207.68 1331.42,1212.57 1332.01,1213.89 1332.6,1213.66 1333.18,1213.46 1333.77,1213.49 1334.35,1212.17 1334.94,1213.34 1335.53,1212.03 1336.11,1208.51 1336.7,1206.15 1337.29,1208.71 1337.87,1208.62 1338.46,1209.91 1339.05,1208.8 1339.63,1208.88 1340.22,1210.4 1340.8,1210.3 1341.39,1209.04 1341.98,1209.1 1342.56,1210.56 1343.15,1210.65 1343.74,1211.92 1344.32,1213.09 1344.91,1215.64 1345.5,1214.33 1346.08,1214.34 1346.67,1211.54 1347.26,1212.49 1347.84,1216.15 1348.43,1218.48 1349.01,1219.35 1349.6,1218.99 1350.19,1218.44 1350.77,1220.52 1351.36,1221.36 1351.95,1219.67 1352.53,1220.29 1353.12,1219.81 1353.71,1218.96 1354.29,1218.62 1354.88,1215.67 1355.47,1215.34 1356.05,1217.7 1356.64,1217.14 1357.22,1216.72 1357.81,1214.03 1358.4,1212.5 1358.98,1213.47 1359.57,1211.92 1360.16,1210.58 1360.74,1210.54 1361.33,1208.23 1361.92,1207.06 1362.5,1207.31 1363.09,1205.97 1363.68,1204.93 1364.26,1205.43 1364.85,1206.86 1365.43,1207.05 1366.02,1209.79 1366.61,1208.95 1367.19,1207.78 1367.78,1211.84 1368.37,1211.91 1368.95,1211.82 1369.54,1210.51 1370.13,1213.1 1370.71,1214.37 1371.3,1214.07 1371.88,1213.94 1372.47,1211.36 1373.06,1210.18 1373.64,1210.36 1374.23,1209.03 1374.82,1208 1375.4,1209.49 1375.99,1209.63 1376.58,1211.19 1377.16,1211.5 1377.75,1214.23 1378.34,1213.94 1378.92,1213.76 1379.51,1211.18 1380.09,1211.4 1380.68,1212.69 1381.27,1212.54 1381.85,1212.43 1382.44,1211.55 1383.03,1211.46 1383.61,1212.93 1384.2,1214.33 1384.79,1212.74 1385.37,1210.23 1385.96,1208.97 1386.55,1209.22 1387.13,1208.03 1387.72,1204.49 1388.3,1203.8 1388.89,1205.5 1389.48,1204.51 1390.06,1203.72 1390.65,1200.44 1391.24,1203.27 1391.82,1203.62 1392.41,1202.82 1393,1205.7 1393.58,1204.7 1394.17,1205.24 1394.75,1204.36 1395.34,1202.32 1395.93,1204.1 1396.51,1204.77 1397.1,1206.25 1397.69,1206.62 1398.27,1208.19 1398.86,1208.29 1399.45,1209.69 1400.03,1211.25 1400.62,1210.11 1401.21,1212.71 1401.79,1212.84 1402.38,1212.63 1402.96,1212.78 1403.55,1211.55 1404.14,1210.36 1404.72,1209.22 1405.31,1208.27 1405.9,1209.89 1406.48,1211.41 1407.07,1212.6 1407.66,1212.69 1408.24,1211.22 1408.83,1211.46 1409.42,1215.12 1410,1213.77 1410.59,1216.1 1411.17,1213.45 1411.76,1212.02 1412.35,1212.05 1412.93,1211.04 1413.52,1211.2 1414.11,1209.92 1414.69,1211.16 1415.28,1210.17 1415.87,1207.88 1416.45,1208.24 1417.04,1208.27 1417.63,1209.75 1418.21,1212.2 1418.8,1209.84 1419.38,1206.38 1419.97,1206.67 1420.56,1208.24 1421.14,1209.68 1421.73,1208.49 1422.32,1209.96 1422.9,1208.83 1423.49,1209.13 1424.08,1209.13 1424.66,1210.67 1425.25,1212.1 1425.83,1213.44 1426.42,1214.53 1427.01,1214.27 1427.59,1212.84 1428.18,1211.41 1428.77,1212.71 1429.35,1213.95 1429.94,1212.55 1430.53,1211.08 1431.11,1212.18 1431.7,1211.06 1432.29,1213.4 1432.87,1211.89 1433.46,1210.63 1434.04,1212.93 1434.63,1214.1 1435.22,1214.14 1435.8,1212.63 1436.39,1211.03 1436.98,1209.77 1437.56,1211.21 1438.15,1212.29 1438.74,1213.55 1439.32,1211.99 1439.91,1211.95 1440.5,1211.93 1441.08,1212.13 1441.67,1212.16 1442.25,1213.31 1442.84,1210.8 1443.43,1209.4 1444.01,1207 1444.6,1207.32 1445.19,1207.58 1445.77,1204.01 1446.36,1202.16 1446.95,1202.56 1447.53,1203.2 1448.12,1204.78 1448.7,1204.94 1449.29,1206.65 1449.88,1206.92 1450.46,1207.35 1451.05,1206.28 1451.64,1202.76 1452.22,1203.65 1452.81,1206.62 1453.4,1208.16 1453.98,1209.65 1454.57,1210.83 1455.16,1208.41 1455.74,1209.57 1456.33,1207.14 1456.91,1208.87 1457.5,1210.15 1458.09,1211.67 1458.67,1213.18 1459.26,1211.93 1459.85,1213.2 1460.43,1212.73 1461.02,1213.71 1461.61,1212.29 1462.19,1212.29 1462.78,1215.81 1463.37,1213.02 1463.95,1211.63 1464.54,1211.77 1465.12,1212.95 1465.71,1211.58 1466.3,1216.64 1466.88,1217.62 1467.47,1215.86 1468.06,1215.69 1468.64,1216.52 1469.23,1213.83 1469.82,1213.75 1470.4,1213.86 1470.99,1216.34 1471.57,1213.62 1472.16,1214.79 1472.75,1214.73 1473.33,1213.58 1473.92,1212.03 1474.51,1208.2 1475.09,1208.3 1475.68,1208.56 1476.27,1210.09 1476.85,1209.11 1477.44,1209.47 1478.03,1208.27 1478.61,1209.4 1479.2,1208.05 1479.78,1208.23 1480.37,1209.57 1480.96,1213.84 1481.54,1213.78 1482.13,1213.73 1482.72,1213.66 1483.3,1213.65 1483.89,1213.43 1484.48,1212 1485.06,1213.24 1485.65,1213.01 1486.24,1211.68 1486.82,1211.55 1487.41,1214.12 1487.99,1215.53 1488.58,1216.39 1489.17,1213.58 1489.75,1211.12 1490.34,1212.61 1490.93,1213.93 1491.51,1215.02 1492.1,1216.02 1492.69,1215.67 1493.27,1212.88 1493.86,1214.05 1494.45,1215.18 1495.03,1214.91 1495.62,1214.74 1496.2,1213.29 1496.79,1212.08 1497.38,1210.87 1497.96,1208.48 1498.55,1208.71 1499.14,1207.68 1499.72,1206.55 1500.31,1206.95 1500.9,1208.22 1501.48,1208.51 1502.07,1208.72 1502.65,1206.4 1503.24,1208.06 1503.83,1208.39 1504.41,1208.51 1505,1208.68 1505.59,1210.04 1506.17,1210.34 1506.76,1211.84 1507.35,1212.05 1507.93,1209.49 1508.52,1209.68 1509.11,1210.71 1509.69,1211.06 1510.28,1213.92 1510.86,1213.78 1511.45,1212.26 1512.04,1212.45 1512.62,1208.65 1513.21,1209.96 1513.8,1209.67 1514.38,1209.73 1514.97,1209.88 1515.56,1207.32 1516.14,1209.03 1516.73,1207.82 1517.32,1209.38 1517.9,1208.35 1518.49,1206.91 1519.07,1210.81 1519.66,1209.49 1520.25,1209.7 1520.83,1212.28 1521.42,1212.52 1522.01,1212.7 1522.59,1212.49 1523.18,1212.46 1523.77,1212.6 1524.35,1213.53 1524.94,1213.43 1525.52,1212.22 1526.11,1209.89 1526.7,1211.4 1527.28,1213.55 1527.87,1213.32 1528.46,1214.43 1529.04,1213.16 1529.63,1210.77 1530.22,1212.04 1530.8,1210.71 1531.39,1213.04 1531.98,1215.37 1532.56,1216.88 1533.15,1215.53 1533.73,1217.8 1534.32,1217.44 1534.91,1219.61 1535.49,1220.66 1536.08,1220.52 1536.67,1220.11 1537.25,1217.08 1537.84,1217.03 1538.43,1218.09 1539.01,1219.18 1539.6,1218.75 1540.19,1219.86 1540.77,1219.32 1541.36,1219.01 1541.94,1219.96 1542.53,1219.28 1543.12,1222.38 1543.7,1223.08 1544.29,1223.68 1544.88,1221.79 1545.46,1222.74 1546.05,1220.81 1546.64,1216.92 1547.22,1215.4 1547.81,1212.63 1548.4,1214.82 1548.98,1214.36 1549.57,1215.55 1550.15,1212.97 1550.74,1211.81 1551.33,1211.99 1551.91,1213.47 1552.5,1214.82 1553.09,1213.39 1553.67,1212.03 1554.26,1209.75 1554.85,1207.13 1555.43,1209.97 1556.02,1208.47 1556.6,1207.58 1557.19,1207.74 1557.78,1208.04 1558.36,1206.98 1558.95,1206.06 1559.54,1207.51 1560.12,1206.26 1560.71,1206.63 1561.3,1202.92 1561.88,1201.97 1562.47,1201.39 1563.06,1201.86 1563.64,1202.47 1564.23,1202.8 1564.81,1204.85 1565.4,1207.55 1565.99,1207.9 1566.57,1207.66 1567.16,1208.92 1567.75,1209.26 1568.33,1208.29 1568.92,1208.6 1569.51,1210.01 1570.09,1211.48 1570.68,1212.74 1571.27,1215.09 1571.85,1214.92 1572.44,1212.25 1573.02,1212.01 1573.61,1210.79 1574.2,1212.25 1574.78,1213.49 1575.37,1215.89 1575.96,1215.58 1576.54,1216.83 1577.13,1217.85 1577.72,1220.01 1578.3,1216.8 1578.89,1213.12 1579.47,1212.98 1580.06,1212.58 1580.65,1211.28 1581.23,1211.21 1581.82,1211.06 1582.41,1210.88 1582.99,1210.83 1583.58,1215.82 1584.17,1216.81 1584.75,1217.76 1585.34,1216.3 1585.93,1215.99 1586.51,1214.48 1587.1,1215.38 1587.68,1215.17 1588.27,1214.98 1588.86,1213.61 1589.44,1210.87 1590.03,1210.91 1590.62,1210.92 1591.2,1213.38 1591.79,1211.23 1592.38,1212.62 1592.96,1213.66 1593.55,1213.54 1594.14,1214.59 1594.72,1214.31 1595.31,1214.1 1595.89,1216.45 1596.48,1217.41 1597.07,1216.76 1597.65,1215.05 1598.24,1212.25 1598.83,1210.81 1599.41,1209.56 1600,1212.31 1600.59,1214.76 1601.17,1213.66 1601.76,1214.73 1602.34,1213.28 1602.93,1210.67 1603.52,1208.22 1604.1,1209.66 1604.69,1211.03 1605.28,1211.03 1605.86,1210.18 1606.45,1211.39 1607.04,1211.22 1607.62,1208.7 1608.21,1207.54 1608.8,1208.95 1609.38,1211.86 1609.97,1212.11 1610.55,1212.21 1611.14,1214.77 1611.73,1216.09 1612.31,1214.67 1612.9,1213.5 1613.49,1213.58 1614.07,1213.57 1614.66,1213.59 1615.25,1213.44 1615.83,1213.23 1616.42,1214.43 1617.01,1212.91 1617.59,1213.78 1618.18,1215.97 1618.76,1217.1 1619.35,1217.95 1619.94,1217.37 1620.52,1214.47 1621.11,1214.47 1621.7,1214.56 1622.28,1217.03 1622.87,1219.52 1623.46,1220.43 1624.04,1223.34 1624.63,1220.36 1625.22,1217.65 1625.8,1216.22 1626.39,1213.67 1626.97,1214.85 1627.56,1214.75 1628.15,1215.8 1628.73,1216.64 1629.32,1215.01 1629.91,1215.07 1630.49,1217.33 1631.08,1218.1 1631.67,1218.73 1632.25,1215.67 1632.84,1211.64 1633.42,1212.7 1634.01,1213.91 1634.6,1211.26 1635.18,1211.52 1635.77,1212.87 1636.36,1212.87 1636.94,1213.8 1637.53,1211.29 1638.12,1208.95 1638.7,1208.89 1639.29,1207.81 1639.88,1209.32 1640.46,1208.17 1641.05,1207.15 1641.63,1205.94 1642.22,1208.75 1642.81,1209.91 1643.39,1206.37 1643.98,1204.97 1644.57,1207.69 1645.15,1207.86 1645.74,1205.55 1646.33,1205.9 1646.91,1203.81 1647.5,1204.31 1648.09,1207.29 1648.67,1208.7 1649.26,1207.55 1649.84,1207.86 1650.43,1206.56 1651.02,1207.98 1651.6,1209.5 1652.19,1208.53 1652.78,1206.36 1653.36,1203.04 1653.95,1203.61 1654.54,1204.28 1655.12,1204.49 1655.71,1207.2 1656.29,1206.34 1656.88,1204.09 1657.47,1205.76 1658.05,1207.15 1658.64,1208.52 1659.23,1209.78 1659.81,1209.9 1660.4,1211.06 1660.99,1209.7 1661.57,1212.14 1662.16,1210.73 1662.75,1210.71 1663.33,1210.76 1663.92,1210.75 1664.5,1212.03 1665.09,1211.72 1665.68,1210.43 1666.26,1209.22 1666.85,1211.79 1667.44,1214.55 1668.02,1214.4 1668.61,1214.07 1669.2,1212.59 1669.78,1214.12 1670.37,1210.39 1670.96,1210.43 1671.54,1212.8 1672.13,1212.88 1672.71,1213.96 1673.3,1213.87 1673.89,1212.45 1674.47,1212.56 1675.06,1213.99 1675.65,1214.92 1676.23,1214.72 1676.82,1212.1 1677.41,1209.63 1677.99,1209.77 1678.58,1211.19 1679.17,1213.72 1679.75,1214.77 1680.34,1211.87 1680.92,1214.5 1681.51,1216.97 1682.1,1215.46 1682.68,1215.47 1683.27,1214.1 1683.86,1211.44 1684.44,1208.74 1685.03,1208.98 1685.62,1207.9 1686.2,1206.8 1686.79,1209.4 1687.37,1210.85 1687.96,1213.38 1688.55,1214.32 1689.13,1215.47 1689.72,1215.23 1690.31,1214.87 1690.89,1213.78 1691.48,1212.45 1692.07,1212.35 1692.65,1211.11 1693.24,1211.08 1693.83,1208.4 1694.41,1209.82 1695,1210.99 1695.58,1211.26 1696.17,1212.56 1696.76,1212.73 1697.34,1214.02 1697.93,1215.02 1698.52,1213.54 1699.1,1214.46 1699.69,1211.85 1700.28,1213.04 1700.86,1209.07 1701.45,1206.73 1702.04,1208.45 1702.62,1208.41 1703.21,1211.22 1703.79,1210 1704.38,1208.95 1704.97,1211.63 1705.55,1210.72 1706.14,1210.9 1706.73,1209.24 1707.31,1206.93 1707.9,1206.91 1708.49,1209.47 1709.07,1209.69 1709.66,1209.84 1710.24,1209.69 1710.83,1210.02 1711.42,1212.63 1712,1212.81 1712.59,1212.52 1713.18,1212.66 1713.76,1212.5 1714.35,1212.4 1714.94,1216.09 1715.52,1215.91 1716.11,1216.93 1716.7,1214.01 1717.28,1211.3 1717.87,1211.62 1718.45,1211.46 1719.04,1210.33 1719.63,1207.94 1720.21,1211.89 1720.8,1214.22 1721.39,1215.48 1721.97,1211.58 1722.56,1213.95 1723.15,1213.72 1723.73,1215.92 1724.32,1215.67 1724.91,1215.49 1725.49,1212.46 1726.08,1212.69 1726.66,1211.3 1727.25,1210.12 1727.84,1207.9 1728.42,1212.96 1729.01,1211.78 1729.6,1209.21 1730.18,1212.04 1730.77,1214.21 1731.36,1215.26 1731.94,1213.72 1732.53,1212.07 1733.11,1213.38 1733.7,1213.52 1734.29,1213.57 1734.87,1213.48 1735.46,1211.05 1736.05,1212.4 1736.63,1211.13 1737.22,1209.93 1737.81,1212.35 1738.39,1213.56 1738.98,1214.57 1739.57,1215.67 1740.15,1220.46 1740.74,1220.01 1741.32,1220.97 1741.91,1219.31 1742.5,1220.24 1743.08,1219.83 1743.67,1219.45 1744.26,1217.71 1744.84,1216.14 1745.43,1214.79 1746.02,1214.49 1746.6,1212.13 1747.19,1212.3 1747.78,1212.56 1748.36,1210.12 1748.95,1210.37 1749.53,1211.6 1750.12,1210.38 1750.71,1209.04 1751.29,1207.69 1751.88,1209.1 1752.47,1207.94 1753.05,1208.02 1753.64,1208.02 1754.23,1206.97 1754.81,1209.53 1755.4,1208.24 1755.99,1208.65 1756.57,1210.02 1757.16,1209.89 1757.74,1210.05 1758.33,1211.21 1758.92,1215.04 1759.5,1213.91 1760.09,1212.87 1760.68,1211.49 1761.26,1211.25 1761.85,1208.92 1762.44,1207.64 1763.02,1206.67 1763.61,1204.32 1764.19,1204.84 1764.78,1206.27 1765.37,1207.63 1765.95,1206.59 1766.54,1208.13 1767.13,1207.08 1767.71,1204.73 1768.3,1205.24 1768.89,1203.13 1769.47,1204.81 1770.06,1205.46 1770.65,1207.17 1771.23,1208.67 1771.82,1207.89 1772.4,1207 1772.99,1206.36 1773.58,1206.41 1774.16,1206.9 1774.75,1204.68 1775.34,1206.23 1775.92,1205.13 1776.51,1204.19 1777.1,1205.78 1777.68,1204.68 1778.27,1205.03 1778.86,1204.37 1779.44,1205.02 1780.03,1206.54 1780.61,1207.23 1781.2,1206.39 1781.79,1206.7 1782.37,1207.23 1782.96,1207.57 1783.55,1210.07 1784.13,1214.03 1784.72,1212.87 1785.31,1213.03 1785.89,1212.95 1786.48,1212.86 1787.06,1212.94 1787.65,1211.52 1788.24,1214.38 1788.82,1214.02 1789.41,1213.95 1790,1213.79 1790.58,1214.04 1791.17,1217.61 1791.76,1214.7 1792.34,1213.5 1792.93,1213.44 1793.52,1215.89 1794.1,1219.27 1794.69,1217.64 1795.27,1219.84 1795.86,1218.38 1796.45,1219.19 1797.03,1216.55 1797.62,1219.92 1798.21,1216.84 1798.79,1216.51 1799.38,1218.65 1799.97,1219.54 1800.55,1219.15 1801.14,1217.52 1801.73,1216.99 1802.31,1217.92 1802.9,1217.49 1803.48,1218.62 1804.07,1215.62 1804.66,1212.84 1805.24,1210.06 1805.83,1210.21 1806.42,1206.7 1807,1207.97 1807.59,1208.14 1808.18,1208.38 1808.76,1209.92 1809.35,1210.17 1809.94,1208.95 1810.52,1206.65 1811.11,1204.39 1811.69,1206.37 1812.28,1206.72 1812.87,1206.82 1813.45,1205.76 1814.04,1208.43 1814.63,1209.84 1815.21,1209.99 1815.8,1210.06 1816.39,1210.27 1816.97,1210.32 1817.56,1214.15 1818.14,1213.78 1818.73,1214.75 1819.32,1212.09 1819.9,1212 1820.49,1210.92 1821.08,1212.49 1821.66,1211.49 1822.25,1211.91 1822.84,1212.98 1823.42,1209.16 1824.01,1209.57 1824.6,1211.04 1825.18,1208.64 1825.77,1208.99 1826.35,1210.48 1826.94,1210.65 1827.53,1209.74 1828.11,1209.74 1828.7,1208.61 1829.29,1208.87 1829.87,1208.04 1830.46,1210.54 1831.05,1207.96 1831.63,1208.26 1832.22,1212.04 1832.81,1213.33 1833.39,1216.06 1833.98,1214.28 1834.56,1215.49 1835.15,1214.05 1835.74,1215.07 1836.32,1212.26 1836.91,1215.07 1837.5,1214.66 1838.08,1215.66 1838.67,1216.33 1839.26,1214.89 1839.84,1214.68 1840.43,1214.56 1841.01,1213.2 1841.6,1210.67 1842.19,1212.07 1842.77,1214.46 1843.36,1214.33 1843.95,1212.85 1844.53,1210.29 1845.12,1211.79 1845.71,1214.3 1846.29,1214.05 1846.88,1213.96 1847.47,1214.8 1848.05,1215.88 1848.64,1216.96 1849.22,1217.68 1849.81,1215.15 1850.4,1213.82 1850.98,1211.17 1851.57,1208.7 1852.16,1209.83 1852.74,1212.15 1853.33,1215.63 1853.92,1220.48 1854.5,1220.08 1855.09,1217.15 1855.68,1215.61 1856.26,1214.36 1856.85,1214.15 1857.43,1217.98 1858.02,1215.16 1858.61,1213.79 1859.19,1217.73 1859.78,1216.34 1860.37,1216.12 1860.95,1217.24 1861.54,1214.29 1862.13,1213.78 1862.71,1213.74 1863.3,1213.51 1863.88,1213.32 1864.47,1213.3 1865.06,1213.32 1865.64,1218.05 1866.23,1215.09 1866.82,1214.64 1867.4,1214.25 1867.99,1215.29 1868.58,1217.38 1869.16,1220.74 1869.75,1219.15 1870.34,1213.75 1870.92,1214.7 1871.51,1219.52 1872.09,1219 1872.68,1216.13 1873.27,1218.18 1873.85,1216.44 1874.44,1216.04 1875.03,1217.15 1875.61,1215.73 1876.2,1215.44 1876.79,1215.05 1877.37,1214.84 1877.96,1214.84 1878.55,1217.17 1879.13,1217.06 1879.72,1221.78 1880.3,1222.62 1880.89,1221.95 1881.48,1221.09 1882.06,1219.16 1882.65,1216.53 1883.24,1217.35 1883.82,1217.26 1884.41,1217.11 1885,1214.48 1885.58,1210.34 1886.17,1211.46 1886.76,1211.57 1887.34,1212.66 1887.93,1212.68 1888.51,1211.46 1889.1,1212.64 1889.69,1212.52 1890.27,1210.93 1890.86,1208.36 1891.45,1207.48 1892.03,1207.91 1892.62,1210.8 1893.21,1210.56 1893.79,1210.28 1894.38,1210.34 1894.96,1210.19 1895.55,1208.97 1896.14,1208.98 1896.72,1209.1 1897.31,1208.05 1897.9,1208.09 1898.48,1209.5 1899.07,1208.4 1899.66,1205.88 1900.24,1205.07 1900.83,1202.94 1901.42,1205.85 1902,1202.28 1902.59,1200.03 1903.17,1201.94 1903.76,1202.62 1904.35,1206.97 1904.93,1203.41 1905.52,1205 1906.11,1204.21 1906.69,1204.66 1907.28,1204.83 1907.87,1206.53 1908.45,1204.5 1909.04,1203.9 1909.63,1206.93 1910.21,1205.92 1910.8,1206.42 1911.38,1206.79 1911.97,1205.41 1912.56,1206.92 1913.14,1205.7 1913.73,1208.48 1914.32,1208.79 1914.9,1209.02 1915.49,1209.1 1916.08,1207.93 1916.66,1209.21 1917.25,1211.91 1917.83,1211.95 1918.42,1214.47 1919.01,1214.29 1919.59,1213.97 1920.18,1213.85 1920.77,1210.15 1921.35,1210.22 1921.94,1210.22 1922.53,1212.85 1923.11,1212.87 1923.7,1211.58 1924.29,1211.56 1924.87,1210.3 1925.46,1210.32 1926.04,1209.2 1926.63,1209.34 1927.22,1214.4 1927.8,1214.31 1928.39,1214.43 1928.98,1214.48 1929.56,1214.4 1930.15,1216.45 1930.74,1213.76 1931.32,1210.12 1931.91,1210.51 1932.5,1210.7 1933.08,1210.68 1933.67,1213.03 1934.25,1212.93 1934.84,1214.02 1935.43,1213.93 1936.01,1214.68 1936.6,1211.68 1937.19,1210.58 1937.77,1213.04 1938.36,1211.87 1938.95,1211.89 1939.53,1214.4 1940.12,1211.86 1940.71,1213.29 1941.29,1214.36 1941.88,1214.33 1942.46,1214.09 1943.05,1212.71 1943.64,1213.02 1944.22,1214.15 1944.81,1216.63 1945.4,1216.43 1945.98,1213.77 1946.57,1217.46 1947.16,1214.81 1947.74,1214.75 1948.33,1213.41 1948.91,1209.49 1949.5,1210.83 1950.09,1210.79 1950.67,1209.91 1951.26,1210 1951.85,1210.17 1952.43,1208.88 1953.02,1208.91 1953.61,1210.42 1954.19,1212.8 1954.78,1211.44 1955.37,1211.38 1955.95,1211.36 1956.54,1212.68 1957.12,1211.38 1957.71,1211.16 1958.3,1211.3 1958.88,1210.12 1959.47,1208.98 1960.06,1210.11 1960.64,1207.79 1961.23,1209.3 1961.82,1208.02 1962.4,1208.13 1962.99,1209.73 1963.58,1210.99 1964.16,1209.85 1964.75,1209.91 1965.33,1210.42 1965.92,1211.63 1966.51,1210.46 1967.09,1209.2 1967.68,1210.42 1968.27,1210.61 1968.85,1211.72 1969.44,1211.58 1970.03,1210.4 1970.61,1211.59 1971.2,1210.34 1971.78,1211.34 1972.37,1212.67 1972.96,1216.23 1973.54,1216.1 1974.13,1211.97 1974.72,1210.68 1975.3,1210.52 1975.89,1211.57 1976.48,1214.35 1977.06,1211.66 1977.65,1214.11 1978.24,1214.16 1978.82,1212.76 1979.41,1213.89 1979.99,1215.08 1980.58,1212.47 1981.17,1212.43 1981.75,1211.16 1982.34,1208.67 1982.93,1211.09 1983.51,1211.12 1984.1,1213.31 1984.69,1213.25 1985.27,1212 1985.86,1213.33 1986.45,1211.85 1987.03,1212.91 1987.62,1212.7 1988.2,1213.95 1988.79,1212.65 1989.38,1212.66 1989.96,1212.56 1990.55,1212.31 1991.14,1208.57 1991.72,1210.04 1992.31,1210.08 1992.9,1210.01 1993.48,1208.78 1994.07,1209.12 1994.65,1205.18 1995.24,1205.35 1995.83,1202.17 1996.41,1201.49 1997,1204.44 1997.59,1204.74 1998.17,1205.08 1998.76,1207.68 1999.35,1210.26 1999.93,1212.61 2000.52,1210.28 2001.11,1209.29 2001.69,1210.55 2002.28,1210.76 2002.86,1210.83 2003.45,1211.18 2004.04,1211.29 2004.62,1211.83 2005.21,1213.37 2005.8,1214.57 2006.38,1215.46 2006.97,1215.01 2007.56,1213.82 2008.14,1217.2 2008.73,1217.06 2009.32,1217.96 2009.9,1216.46 2010.49,1215.13 2011.07,1213.69 2011.66,1213.8 2012.25,1212.24 2012.83,1212.27 2013.42,1209.54 2014.01,1209.59 2014.59,1210.98 2015.18,1210.94 2015.77,1208.59 2016.35,1210.23 2016.94,1210.55 2017.53,1212.96 2018.11,1214.49 2018.7,1214.73 2019.28,1214.65 2019.87,1214.49 2020.46,1217.2 2021.04,1218.29 2021.63,1219.11 2022.22,1217.27 2022.8,1216.82 2023.39,1216.83 2023.98,1212.97 2024.56,1212.96 2025.15,1211.9 2025.73,1210.63 2026.32,1213.45 2026.91,1214.64 2027.49,1218.23 2028.08,1219.13 2028.67,1219.69 2029.25,1220.24 2029.84,1219.19 2030.43,1219 2031.01,1214.66 2031.6,1215.41 2032.19,1216.45 2032.77,1214.82 2033.36,1215.89 2033.94,1217.14 2034.53,1219.49 2035.12,1221.51 2035.7,1221.06 2036.29,1218.29 2036.88,1216.61 2037.46,1216.53 2038.05,1216.25 2038.64,1215.98 2039.22,1221.9 2039.81,1220.07 2040.4,1219.71 2040.98,1219.25 2041.57,1219.84 2042.15,1216.86 2042.74,1215.67 2043.33,1215.34 2043.91,1213.78 2044.5,1213.65 2045.09,1214.98 2045.67,1216.13 2046.26,1215.91 2046.85,1218.11 2047.43,1217.94 2048.02,1218.81 2048.6,1217.05 2049.19,1217.9 2049.78,1216.57 2050.36,1217.28 2050.95,1215.95 2051.54,1213.15 2052.12,1215.66 2052.71,1213.89 2053.3,1210.14 2053.88,1208.72 2054.47,1210.18 2055.06,1210.08 2055.64,1207.56 2056.23,1205.38 2056.81,1203.1 2057.4,1206.28 2057.99,1205.4 2058.57,1208.37 2059.16,1206.97 2059.75,1208.43 2060.33,1204.88 2060.92,1203.88 2061.51,1204.41 2062.09,1204.72 2062.68,1203.97 2063.27,1200.21 2063.85,1200.9 2064.44,1201.54 2065.02,1202.12 2065.61,1202.54 2066.2,1204.15 2066.78,1203.64 2067.37,1204.07 2067.96,1205.55 2068.54,1205.9 2069.13,1205.98 2069.72,1207.39 2070.3,1206.27 2070.89,1208.95 2071.48,1209.02 2072.06,1209.41 2072.65,1207.06 2073.23,1207.46 2073.82,1207.73 2074.41,1207.92 2074.99,1209.6 2075.58,1208.32 2076.17,1208.49 2076.75,1210.05 2077.34,1212.9 2077.93,1213.9 2078.51,1214.95 2079.1,1215 2079.68,1214.98 2080.27,1215.04 2080.86,1213.83 2081.44,1216.58 2082.03,1216.63 2082.62,1215.09 2083.2,1212.77 2083.79,1214.02 2084.38,1213.81 2084.96,1209.96 2085.55,1208.82 2086.14,1209.12 2086.72,1207.99 2087.31,1206.79 2087.89,1204.68 2088.48,1206.47 2089.07,1209.06 2089.65,1209.46 2090.24,1206.92 2090.83,1207.2 2091.41,1207.24 2092,1206.45 2092.59,1204.1 2093.17,1204.71 2093.76,1204.93 2094.35,1206.56 2094.93,1206.56 2095.52,1205.56 2096.1,1205.75 2096.69,1208.63 2097.28,1210.04 2097.86,1212.67 2098.45,1214.97 2099.04,1215.01 2099.62,1216.4 2100.21,1217.59 2100.8,1218.72 2101.38,1219.37 2101.97,1219.91 2102.55,1222.29 2103.14,1223.29 2103.73,1220.15 2104.31,1219.71 2104.9,1220.47 2105.49,1218.8 2106.07,1218.29 2106.66,1220.51 2107.25,1217.85 2107.83,1212.71 2108.42,1210.09 2109.01,1211.44 2109.59,1212.96 2110.18,1211.64 2110.76,1210.35 2111.35,1209.38 2111.94,1210.79 2112.52,1213.23 2113.11,1215.96 2113.7,1214.54 2114.28,1216.01 2114.87,1218.01 2115.46,1221.52 2116.04,1220.87 2116.63,1220.26 2117.22,1222.28 2117.8,1222.74 2118.39,1219.67 2118.97,1220.4 2119.56,1217.55 2120.15,1218.42 2120.73,1219.49 2121.32,1219.23 2121.91,1221.12 2122.49,1221.72 2123.08,1219.97 2123.67,1217.08 2124.25,1216.86 2124.84,1217.94 2125.42,1217.77 2126.01,1215.97 2126.6,1211.96 2127.18,1215.68 2127.77,1212.88 2128.36,1211.46 2128.94,1207.87 2129.53,1207.97 2130.12,1208.15 2130.7,1209.73 2131.29,1208.34 2131.88,1209.88 2132.46,1207.32 2133.05,1208.72 2133.63,1209.04 2134.22,1214.17 2134.81,1215 2135.39,1214.51 2135.98,1216.68 2136.57,1216.13 2137.15,1215.85 2137.74,1214.18 2138.33,1213.01 2138.91,1211.76 2139.5,1212.88 2140.09,1214.46 2140.67,1215.38 2141.26,1212.78 2141.84,1212.59 2142.43,1209.99 2143.02,1208.84 2143.6,1209.03 2144.19,1207.88 2144.78,1211.68 2145.36,1214.22 2145.95,1212.89 2146.54,1214.11 2147.12,1213.83 2147.71,1213.88 2148.3,1212.4 2148.88,1209.67 2149.47,1212.29 2150.05,1213.67 2150.64,1213.59 2151.23,1208.3 2151.81,1208.47 2152.4,1204.97 2152.99,1204.11 2153.57,1208.61 2154.16,1208.92 2154.75,1210.38 2155.33,1209.44 2155.92,1208.37 2156.5,1207.38 2157.09,1208.67 2157.68,1210.03 2158.26,1210.11 \"/>\n<path clip-path=\"url(#clip002)\" d=\"M986.025 1212.35 L986.612 1212.35 L987.198 1212.35 L987.785 1212.35 L988.371 1212.35 L988.957 1212.35 L989.544 1212.35 L990.13 1212.35 L990.717 1212.35 L991.303 1212.35 L991.889 1212.35 L992.476 1212.35 L993.062 1212.35 L993.649 1212.35 L994.235 1212.35 L994.822 1212.35 L995.408 1212.35 L995.994 1212.35 L996.581 1212.35 L997.167 1212.35 L997.754 1212.35 L998.34 1212.35 L998.926 1212.35 L999.513 1212.35 L1000.1 1212.35 L1000.69 1212.35 L1001.27 1212.35 L1001.86 1212.35 L1002.44 1212.35 L1003.03 1212.35 L1003.62 1212.35 L1004.2 1212.35 L1004.79 1212.35 L1005.38 1212.35 L1005.96 1212.35 L1006.55 1212.35 L1007.14 1212.35 L1007.72 1212.35 L1008.31 1212.35 L1008.9 1212.35 L1009.48 1212.35 L1010.07 1212.35 L1010.65 1212.35 L1011.24 1212.35 L1011.83 1212.35 L1012.41 1212.35 L1013 1212.35 L1013.59 1212.35 L1014.17 1212.35 L1014.76 1212.35 L1015.35 1212.35 L1015.93 1212.35 L1016.52 1212.35 L1017.11 1212.35 L1017.69 1212.35 L1018.28 1212.35 L1018.86 1212.35 L1019.45 1212.35 L1020.04 1212.35 L1020.62 1212.35 L1021.21 1212.35 L1021.8 1212.35 L1022.38 1212.35 L1022.97 1212.35 L1023.56 1212.35 L1024.14 1212.35 L1024.73 1212.35 L1025.32 1212.35 L1025.9 1212.35 L1026.49 1212.35 L1027.07 1212.35 L1027.66 1212.35 L1028.25 1212.35 L1028.83 1212.35 L1029.42 1212.35 L1030.01 1212.35 L1030.59 1212.35 L1031.18 1212.35 L1031.77 1212.35 L1032.35 1212.35 L1032.94 1212.35 L1033.52 1212.35 L1034.11 1212.35 L1034.7 1212.35 L1035.28 1212.35 L1035.87 1212.35 L1036.46 1212.35 L1037.04 1212.35 L1037.63 1212.35 L1038.22 1212.35 L1038.8 1212.35 L1039.39 1212.35 L1039.98 1212.35 L1040.56 1212.35 L1041.15 1212.35 L1041.73 1212.35 L1042.32 1212.35 L1042.91 1212.35 L1043.49 1212.35 L1044.08 1212.35 L1044.67 1212.35 L1045.25 1212.35 L1045.84 1212.35 L1046.43 1212.35 L1047.01 1212.35 L1047.6 1212.35 L1048.19 1212.35 L1048.77 1212.35 L1049.36 1212.35 L1049.94 1212.35 L1050.53 1212.35 L1051.12 1212.35 L1051.7 1212.35 L1052.29 1212.35 L1052.88 1212.35 L1053.46 1212.35 L1054.05 1212.35 L1054.64 1212.35 L1055.22 1212.35 L1055.81 1212.35 L1056.39 1212.35 L1056.98 1212.35 L1057.57 1212.35 L1058.15 1212.35 L1058.74 1212.35 L1059.33 1212.35 L1059.91 1212.35 L1060.5 1212.35 L1061.09 1212.35 L1061.67 1212.35 L1062.26 1212.35 L1062.85 1212.35 L1063.43 1212.35 L1064.02 1212.35 L1064.6 1212.35 L1065.19 1212.35 L1065.78 1212.35 L1066.36 1212.35 L1066.95 1212.35 L1067.54 1212.35 L1068.12 1212.35 L1068.71 1212.35 L1069.3 1212.35 L1069.88 1212.35 L1070.47 1212.35 L1071.06 1212.35 L1071.64 1212.35 L1072.23 1212.35 L1072.81 1212.35 L1073.4 1212.35 L1073.99 1212.35 L1074.57 1212.35 L1075.16 1212.35 L1075.75 1212.35 L1076.33 1212.35 L1076.92 1212.35 L1077.51 1212.35 L1078.09 1212.35 L1078.68 1212.35 L1079.26 1212.35 L1079.85 1212.35 L1080.44 1212.35 L1081.02 1212.35 L1081.61 1212.35 L1082.2 1212.35 L1082.78 1212.35 L1083.37 1212.35 L1083.96 1212.35 L1084.54 1212.35 L1085.13 1212.35 L1085.72 1212.35 L1086.3 1212.35 L1086.89 1212.35 L1087.47 1212.35 L1088.06 1212.35 L1088.65 1212.35 L1089.23 1212.35 L1089.82 1212.35 L1090.41 1212.35 L1090.99 1212.35 L1091.58 1212.35 L1092.17 1212.35 L1092.75 1212.35 L1093.34 1212.35 L1093.93 1212.35 L1094.51 1212.35 L1095.1 1212.35 L1095.68 1212.35 L1096.27 1212.35 L1096.86 1212.35 L1097.44 1212.35 L1098.03 1212.35 L1098.62 1212.35 L1099.2 1212.35 L1099.79 1212.35 L1100.38 1212.35 L1100.96 1212.35 L1101.55 1212.35 L1102.14 1212.35 L1102.72 1212.35 L1103.31 1212.35 L1103.89 1212.35 L1104.48 1212.35 L1105.07 1212.35 L1105.65 1212.35 L1106.24 1212.35 L1106.83 1212.35 L1107.41 1212.35 L1108 1212.35 L1108.59 1212.35 L1109.17 1212.35 L1109.76 1212.35 L1110.34 1212.35 L1110.93 1212.35 L1111.52 1212.35 L1112.1 1212.35 L1112.69 1212.35 L1113.28 1212.35 L1113.86 1212.35 L1114.45 1212.35 L1115.04 1212.35 L1115.62 1212.35 L1116.21 1212.35 L1116.8 1212.35 L1117.38 1212.35 L1117.97 1212.35 L1118.55 1212.35 L1119.14 1212.35 L1119.73 1212.35 L1120.31 1212.35 L1120.9 1212.35 L1121.49 1212.35 L1122.07 1212.35 L1122.66 1212.35 L1123.25 1212.35 L1123.83 1212.35 L1124.42 1212.35 L1125.01 1212.35 L1125.59 1212.35 L1126.18 1212.35 L1126.76 1212.35 L1127.35 1212.35 L1127.94 1212.35 L1128.52 1212.35 L1129.11 1212.35 L1129.7 1212.35 L1130.28 1212.35 L1130.87 1212.35 L1131.46 1212.35 L1132.04 1212.35 L1132.63 1212.35 L1133.21 1212.35 L1133.8 1212.35 L1134.39 1212.35 L1134.97 1212.35 L1135.56 1212.35 L1136.15 1212.35 L1136.73 1212.35 L1137.32 1212.35 L1137.91 1212.35 L1138.49 1212.35 L1139.08 1212.35 L1139.67 1212.35 L1140.25 1212.35 L1140.84 1212.35 L1141.42 1212.35 L1142.01 1212.35 L1142.6 1212.35 L1143.18 1212.35 L1143.77 1212.35 L1144.36 1212.35 L1144.94 1212.35 L1145.53 1212.35 L1146.12 1212.35 L1146.7 1212.35 L1147.29 1212.35 L1147.88 1212.35 L1148.46 1212.35 L1149.05 1212.35 L1149.63 1212.35 L1150.22 1212.35 L1150.81 1212.35 L1151.39 1212.35 L1151.98 1212.35 L1152.57 1212.35 L1153.15 1212.35 L1153.74 1212.35 L1154.33 1212.35 L1154.91 1212.35 L1155.5 1212.35 L1156.09 1212.35 L1156.67 1212.35 L1157.26 1212.35 L1157.84 1212.35 L1158.43 1212.35 L1159.02 1212.35 L1159.6 1212.35 L1160.19 1212.35 L1160.78 1212.35 L1161.36 1212.35 L1161.95 1212.35 L1162.54 1212.35 L1163.12 1212.35 L1163.71 1212.35 L1164.29 1212.35 L1164.88 1212.35 L1165.47 1212.35 L1166.05 1212.35 L1166.64 1212.35 L1167.23 1212.35 L1167.81 1212.35 L1168.4 1212.35 L1168.99 1212.35 L1169.57 1212.35 L1170.16 1212.35 L1170.75 1212.35 L1171.33 1212.35 L1171.92 1212.35 L1172.5 1212.35 L1173.09 1212.35 L1173.68 1212.35 L1174.26 1212.35 L1174.85 1212.35 L1175.44 1212.35 L1176.02 1212.35 L1176.61 1212.35 L1177.2 1212.35 L1177.78 1212.35 L1178.37 1212.35 L1178.96 1212.35 L1179.54 1212.35 L1180.13 1212.35 L1180.71 1212.35 L1181.3 1212.35 L1181.89 1212.35 L1182.47 1212.35 L1183.06 1212.35 L1183.65 1212.35 L1184.23 1212.35 L1184.82 1212.35 L1185.41 1212.35 L1185.99 1212.35 L1186.58 1212.35 L1187.16 1212.35 L1187.75 1212.35 L1188.34 1212.35 L1188.92 1212.35 L1189.51 1212.35 L1190.1 1212.35 L1190.68 1212.35 L1191.27 1212.35 L1191.86 1212.35 L1192.44 1212.35 L1193.03 1212.35 L1193.62 1212.35 L1194.2 1212.35 L1194.79 1212.35 L1195.37 1212.35 L1195.96 1212.35 L1196.55 1212.35 L1197.13 1212.35 L1197.72 1212.35 L1198.31 1212.35 L1198.89 1212.35 L1199.48 1212.35 L1200.07 1212.35 L1200.65 1212.35 L1201.24 1212.35 L1201.83 1212.35 L1202.41 1212.35 L1203 1212.35 L1203.58 1212.35 L1204.17 1212.35 L1204.76 1212.35 L1205.34 1212.35 L1205.93 1212.35 L1206.52 1212.35 L1207.1 1212.35 L1207.69 1212.35 L1208.28 1212.35 L1208.86 1212.35 L1209.45 1212.35 L1210.03 1212.35 L1210.62 1212.35 L1211.21 1212.35 L1211.79 1212.35 L1212.38 1212.35 L1212.97 1212.35 L1213.55 1212.35 L1214.14 1212.35 L1214.73 1212.35 L1215.31 1212.35 L1215.9 1212.35 L1216.49 1212.35 L1217.07 1212.35 L1217.66 1212.35 L1218.24 1212.35 L1218.83 1212.35 L1219.42 1212.35 L1220 1212.35 L1220.59 1212.35 L1221.18 1212.35 L1221.76 1212.35 L1222.35 1212.35 L1222.94 1212.35 L1223.52 1212.35 L1224.11 1212.35 L1224.7 1212.35 L1225.28 1212.35 L1225.87 1212.35 L1226.45 1212.35 L1227.04 1212.35 L1227.63 1212.35 L1228.21 1212.35 L1228.8 1212.35 L1229.39 1212.35 L1229.97 1212.35 L1230.56 1212.35 L1231.15 1212.35 L1231.73 1212.35 L1232.32 1212.35 L1232.91 1212.35 L1233.49 1212.35 L1234.08 1212.35 L1234.66 1212.35 L1235.25 1212.35 L1235.84 1212.35 L1236.42 1212.35 L1237.01 1212.35 L1237.6 1212.35 L1238.18 1212.35 L1238.77 1212.35 L1239.36 1212.35 L1239.94 1212.35 L1240.53 1212.35 L1241.11 1212.35 L1241.7 1212.35 L1242.29 1212.35 L1242.87 1212.35 L1243.46 1212.35 L1244.05 1212.35 L1244.63 1212.35 L1245.22 1212.35 L1245.81 1212.35 L1246.39 1212.35 L1246.98 1212.35 L1247.57 1212.35 L1248.15 1212.35 L1248.74 1212.35 L1249.32 1212.35 L1249.91 1212.35 L1250.5 1212.35 L1251.08 1212.35 L1251.67 1212.35 L1252.26 1212.35 L1252.84 1212.35 L1253.43 1212.35 L1254.02 1212.35 L1254.6 1212.35 L1255.19 1212.35 L1255.78 1212.35 L1256.36 1212.35 L1256.95 1212.35 L1257.53 1212.35 L1258.12 1212.35 L1258.71 1212.35 L1259.29 1212.35 L1259.88 1212.35 L1260.47 1212.35 L1261.05 1212.35 L1261.64 1212.35 L1262.23 1212.35 L1262.81 1212.35 L1263.4 1212.35 L1263.98 1212.35 L1264.57 1212.35 L1265.16 1212.35 L1265.74 1212.35 L1266.33 1212.35 L1266.92 1212.35 L1267.5 1212.35 L1268.09 1212.35 L1268.68 1212.35 L1269.26 1212.35 L1269.85 1212.35 L1270.44 1212.35 L1271.02 1212.35 L1271.61 1212.35 L1272.19 1212.35 L1272.78 1212.35 L1273.37 1212.35 L1273.95 1212.35 L1274.54 1212.35 L1275.13 1212.35 L1275.71 1212.35 L1276.3 1212.35 L1276.89 1212.35 L1277.47 1212.35 L1278.06 1212.35 L1278.65 1212.35 L1279.23 1212.35 L1279.82 1212.35 L1280.4 1212.35 L1280.99 1212.35 L1281.58 1212.35 L1282.16 1212.35 L1282.75 1212.35 L1283.34 1212.35 L1283.92 1212.35 L1284.51 1212.35 L1285.1 1212.35 L1285.68 1212.35 L1286.27 1212.35 L1286.86 1212.35 L1287.44 1212.35 L1288.03 1212.35 L1288.61 1212.35 L1289.2 1212.35 L1289.79 1212.35 L1290.37 1212.35 L1290.96 1212.35 L1291.55 1212.35 L1292.13 1212.35 L1292.72 1212.35 L1293.31 1212.35 L1293.89 1212.35 L1294.48 1212.35 L1295.06 1212.35 L1295.65 1212.35 L1296.24 1212.35 L1296.82 1212.35 L1297.41 1212.35 L1298 1212.35 L1298.58 1212.35 L1299.17 1212.35 L1299.76 1212.35 L1300.34 1212.35 L1300.93 1212.35 L1301.52 1212.35 L1302.1 1212.35 L1302.69 1212.35 L1303.27 1212.35 L1303.86 1212.35 L1304.45 1212.35 L1305.03 1212.35 L1305.62 1212.35 L1306.21 1212.35 L1306.79 1212.35 L1307.38 1212.35 L1307.97 1212.35 L1308.55 1212.35 L1309.14 1212.35 L1309.73 1212.35 L1310.31 1212.35 L1310.9 1212.35 L1311.48 1212.35 L1312.07 1212.35 L1312.66 1212.35 L1313.24 1212.35 L1313.83 1212.35 L1314.42 1212.35 L1315 1212.35 L1315.59 1212.35 L1316.18 1212.35 L1316.76 1212.35 L1317.35 1212.35 L1317.93 1212.35 L1318.52 1212.35 L1319.11 1212.35 L1319.69 1212.35 L1320.28 1212.35 L1320.87 1212.35 L1321.45 1212.35 L1322.04 1212.35 L1322.63 1212.35 L1323.21 1212.35 L1323.8 1212.35 L1324.39 1212.35 L1324.97 1212.35 L1325.56 1212.35 L1326.14 1212.35 L1326.73 1212.35 L1327.32 1212.35 L1327.9 1212.35 L1328.49 1212.35 L1329.08 1212.35 L1329.66 1212.35 L1330.25 1212.35 L1330.84 1212.35 L1331.42 1212.35 L1332.01 1212.35 L1332.6 1212.35 L1333.18 1212.35 L1333.77 1212.35 L1334.35 1212.35 L1334.94 1212.35 L1335.53 1212.35 L1336.11 1212.35 L1336.7 1212.35 L1337.29 1212.35 L1337.87 1212.35 L1338.46 1212.35 L1339.05 1212.35 L1339.63 1212.35 L1340.22 1212.35 L1340.8 1212.35 L1341.39 1212.35 L1341.98 1212.35 L1342.56 1212.35 L1343.15 1212.35 L1343.74 1212.35 L1344.32 1212.35 L1344.91 1212.35 L1345.5 1212.35 L1346.08 1212.35 L1346.67 1212.35 L1347.26 1212.35 L1347.84 1212.35 L1348.43 1212.35 L1349.01 1212.35 L1349.6 1212.35 L1350.19 1212.35 L1350.77 1212.35 L1351.36 1212.35 L1351.95 1212.35 L1352.53 1212.35 L1353.12 1212.35 L1353.71 1212.35 L1354.29 1212.35 L1354.88 1212.35 L1355.47 1212.35 L1356.05 1212.35 L1356.64 1212.35 L1357.22 1212.35 L1357.81 1212.35 L1358.4 1212.35 L1358.98 1212.35 L1359.57 1212.35 L1360.16 1212.35 L1360.74 1212.35 L1361.33 1212.35 L1361.92 1212.35 L1362.5 1212.35 L1363.09 1212.35 L1363.68 1212.35 L1364.26 1212.35 L1364.85 1212.35 L1365.43 1212.35 L1366.02 1212.35 L1366.61 1212.35 L1367.19 1212.35 L1367.78 1212.35 L1368.37 1212.35 L1368.95 1212.35 L1369.54 1212.35 L1370.13 1212.35 L1370.71 1212.35 L1371.3 1212.35 L1371.88 1212.35 L1372.47 1212.35 L1373.06 1212.35 L1373.64 1212.35 L1374.23 1212.35 L1374.82 1212.35 L1375.4 1212.35 L1375.99 1212.35 L1376.58 1212.35 L1377.16 1212.35 L1377.75 1212.35 L1378.34 1212.35 L1378.92 1212.35 L1379.51 1212.35 L1380.09 1212.35 L1380.68 1212.35 L1381.27 1212.35 L1381.85 1212.35 L1382.44 1212.35 L1383.03 1212.35 L1383.61 1212.35 L1384.2 1212.35 L1384.79 1212.35 L1385.37 1212.35 L1385.96 1212.35 L1386.55 1212.35 L1387.13 1212.35 L1387.72 1212.35 L1388.3 1212.35 L1388.89 1212.35 L1389.48 1212.35 L1390.06 1212.35 L1390.65 1212.35 L1391.24 1212.35 L1391.82 1212.35 L1392.41 1212.35 L1393 1212.35 L1393.58 1212.35 L1394.17 1212.35 L1394.75 1212.35 L1395.34 1212.35 L1395.93 1212.35 L1396.51 1212.35 L1397.1 1212.35 L1397.69 1212.35 L1398.27 1212.35 L1398.86 1212.35 L1399.45 1212.35 L1400.03 1212.35 L1400.62 1212.35 L1401.21 1212.35 L1401.79 1212.35 L1402.38 1212.35 L1402.96 1212.35 L1403.55 1212.35 L1404.14 1212.35 L1404.72 1212.35 L1405.31 1212.35 L1405.9 1212.35 L1406.48 1212.35 L1407.07 1212.35 L1407.66 1212.35 L1408.24 1212.35 L1408.83 1212.35 L1409.42 1212.35 L1410 1212.35 L1410.59 1212.35 L1411.17 1212.35 L1411.76 1212.35 L1412.35 1212.35 L1412.93 1212.35 L1413.52 1212.35 L1414.11 1212.35 L1414.69 1212.35 L1415.28 1212.35 L1415.87 1212.35 L1416.45 1212.35 L1417.04 1212.35 L1417.63 1212.35 L1418.21 1212.35 L1418.8 1212.35 L1419.38 1212.35 L1419.97 1212.35 L1420.56 1212.35 L1421.14 1212.35 L1421.73 1212.35 L1422.32 1212.35 L1422.9 1212.35 L1423.49 1212.35 L1424.08 1212.35 L1424.66 1212.35 L1425.25 1212.35 L1425.83 1212.35 L1426.42 1212.35 L1427.01 1212.35 L1427.59 1212.35 L1428.18 1212.35 L1428.77 1212.35 L1429.35 1212.35 L1429.94 1212.35 L1430.53 1212.35 L1431.11 1212.35 L1431.7 1212.35 L1432.29 1212.35 L1432.87 1212.35 L1433.46 1212.35 L1434.04 1212.35 L1434.63 1212.35 L1435.22 1212.35 L1435.8 1212.35 L1436.39 1212.35 L1436.98 1212.35 L1437.56 1212.35 L1438.15 1212.35 L1438.74 1212.35 L1439.32 1212.35 L1439.91 1212.35 L1440.5 1212.35 L1441.08 1212.35 L1441.67 1212.35 L1442.25 1212.35 L1442.84 1212.35 L1443.43 1212.35 L1444.01 1212.35 L1444.6 1212.35 L1445.19 1212.35 L1445.77 1212.35 L1446.36 1212.35 L1446.95 1212.35 L1447.53 1212.35 L1448.12 1212.35 L1448.7 1212.35 L1449.29 1212.35 L1449.88 1212.35 L1450.46 1212.35 L1451.05 1212.35 L1451.64 1212.35 L1452.22 1212.35 L1452.81 1212.35 L1453.4 1212.35 L1453.98 1212.35 L1454.57 1212.35 L1455.16 1212.35 L1455.74 1212.35 L1456.33 1212.35 L1456.91 1212.35 L1457.5 1212.35 L1458.09 1212.35 L1458.67 1212.35 L1459.26 1212.35 L1459.85 1212.35 L1460.43 1212.35 L1461.02 1212.35 L1461.61 1212.35 L1462.19 1212.35 L1462.78 1212.35 L1463.37 1212.35 L1463.95 1212.35 L1464.54 1212.35 L1465.12 1212.35 L1465.71 1212.35 L1466.3 1212.35 L1466.88 1212.35 L1467.47 1212.35 L1468.06 1212.35 L1468.64 1212.35 L1469.23 1212.35 L1469.82 1212.35 L1470.4 1212.35 L1470.99 1212.35 L1471.57 1212.35 L1472.16 1212.35 L1472.75 1212.35 L1473.33 1212.35 L1473.92 1212.35 L1474.51 1212.35 L1475.09 1212.35 L1475.68 1212.35 L1476.27 1212.35 L1476.85 1212.35 L1477.44 1212.35 L1478.03 1212.35 L1478.61 1212.35 L1479.2 1212.35 L1479.78 1212.35 L1480.37 1212.35 L1480.96 1212.35 L1481.54 1212.35 L1482.13 1212.35 L1482.72 1212.35 L1483.3 1212.35 L1483.89 1212.35 L1484.48 1212.35 L1485.06 1212.35 L1485.65 1212.35 L1486.24 1212.35 L1486.82 1212.35 L1487.41 1212.35 L1487.99 1212.35 L1488.58 1212.35 L1489.17 1212.35 L1489.75 1212.35 L1490.34 1212.35 L1490.93 1212.35 L1491.51 1212.35 L1492.1 1212.35 L1492.69 1212.35 L1493.27 1212.35 L1493.86 1212.35 L1494.45 1212.35 L1495.03 1212.35 L1495.62 1212.35 L1496.2 1212.35 L1496.79 1212.35 L1497.38 1212.35 L1497.96 1212.35 L1498.55 1212.35 L1499.14 1212.35 L1499.72 1212.35 L1500.31 1212.35 L1500.9 1212.35 L1501.48 1212.35 L1502.07 1212.35 L1502.65 1212.35 L1503.24 1212.35 L1503.83 1212.35 L1504.41 1212.35 L1505 1212.35 L1505.59 1212.35 L1506.17 1212.35 L1506.76 1212.35 L1507.35 1212.35 L1507.93 1212.35 L1508.52 1212.35 L1509.11 1212.35 L1509.69 1212.35 L1510.28 1212.35 L1510.86 1212.35 L1511.45 1212.35 L1512.04 1212.35 L1512.62 1212.35 L1513.21 1212.35 L1513.8 1212.35 L1514.38 1212.35 L1514.97 1212.35 L1515.56 1212.35 L1516.14 1212.35 L1516.73 1212.35 L1517.32 1212.35 L1517.9 1212.35 L1518.49 1212.35 L1519.07 1212.35 L1519.66 1212.35 L1520.25 1212.35 L1520.83 1212.35 L1521.42 1212.35 L1522.01 1212.35 L1522.59 1212.35 L1523.18 1212.35 L1523.77 1212.35 L1524.35 1212.35 L1524.94 1212.35 L1525.52 1212.35 L1526.11 1212.35 L1526.7 1212.35 L1527.28 1212.35 L1527.87 1212.35 L1528.46 1212.35 L1529.04 1212.35 L1529.63 1212.35 L1530.22 1212.35 L1530.8 1212.35 L1531.39 1212.35 L1531.98 1212.35 L1532.56 1212.35 L1533.15 1212.35 L1533.73 1212.35 L1534.32 1212.35 L1534.91 1212.35 L1535.49 1212.35 L1536.08 1212.35 L1536.67 1212.35 L1537.25 1212.35 L1537.84 1212.35 L1538.43 1212.35 L1539.01 1212.35 L1539.6 1212.35 L1540.19 1212.35 L1540.77 1212.35 L1541.36 1212.35 L1541.94 1212.35 L1542.53 1212.35 L1543.12 1212.35 L1543.7 1212.35 L1544.29 1212.35 L1544.88 1212.35 L1545.46 1212.35 L1546.05 1212.35 L1546.64 1212.35 L1547.22 1212.35 L1547.81 1212.35 L1548.4 1212.35 L1548.98 1212.35 L1549.57 1212.35 L1550.15 1212.35 L1550.74 1212.35 L1551.33 1212.35 L1551.91 1212.35 L1552.5 1212.35 L1553.09 1212.35 L1553.67 1212.35 L1554.26 1212.35 L1554.85 1212.35 L1555.43 1212.35 L1556.02 1212.35 L1556.6 1212.35 L1557.19 1212.35 L1557.78 1212.35 L1558.36 1212.35 L1558.95 1212.35 L1559.54 1212.35 L1560.12 1212.35 L1560.71 1212.35 L1561.3 1212.35 L1561.88 1212.35 L1562.47 1212.35 L1563.06 1212.35 L1563.64 1212.35 L1564.23 1212.35 L1564.81 1212.35 L1565.4 1212.35 L1565.99 1212.35 L1566.57 1212.35 L1567.16 1212.35 L1567.75 1212.35 L1568.33 1212.35 L1568.92 1212.35 L1569.51 1212.35 L1570.09 1212.35 L1570.68 1212.35 L1571.27 1212.35 L1571.85 1212.35 L1572.44 1212.35 L1573.02 1212.35 L1573.61 1212.35 L1574.2 1212.35 L1574.78 1212.35 L1575.37 1212.35 L1575.96 1212.35 L1576.54 1212.35 L1577.13 1212.35 L1577.72 1212.35 L1578.3 1212.35 L1578.89 1212.35 L1579.47 1212.35 L1580.06 1212.35 L1580.65 1212.35 L1581.23 1212.35 L1581.82 1212.35 L1582.41 1212.35 L1582.99 1212.35 L1583.58 1212.35 L1584.17 1212.35 L1584.75 1212.35 L1585.34 1212.35 L1585.93 1212.35 L1586.51 1212.35 L1587.1 1212.35 L1587.68 1212.35 L1588.27 1212.35 L1588.86 1212.35 L1589.44 1212.35 L1590.03 1212.35 L1590.62 1212.35 L1591.2 1212.35 L1591.79 1212.35 L1592.38 1212.35 L1592.96 1212.35 L1593.55 1212.35 L1594.14 1212.35 L1594.72 1212.35 L1595.31 1212.35 L1595.89 1212.35 L1596.48 1212.35 L1597.07 1212.35 L1597.65 1212.35 L1598.24 1212.35 L1598.83 1212.35 L1599.41 1212.35 L1600 1212.35 L1600.59 1212.35 L1601.17 1212.35 L1601.76 1212.35 L1602.34 1212.35 L1602.93 1212.35 L1603.52 1212.35 L1604.1 1212.35 L1604.69 1212.35 L1605.28 1212.35 L1605.86 1212.35 L1606.45 1212.35 L1607.04 1212.35 L1607.62 1212.35 L1608.21 1212.35 L1608.8 1212.35 L1609.38 1212.35 L1609.97 1212.35 L1610.55 1212.35 L1611.14 1212.35 L1611.73 1212.35 L1612.31 1212.35 L1612.9 1212.35 L1613.49 1212.35 L1614.07 1212.35 L1614.66 1212.35 L1615.25 1212.35 L1615.83 1212.35 L1616.42 1212.35 L1617.01 1212.35 L1617.59 1212.35 L1618.18 1212.35 L1618.76 1212.35 L1619.35 1212.35 L1619.94 1212.35 L1620.52 1212.35 L1621.11 1212.35 L1621.7 1212.35 L1622.28 1212.35 L1622.87 1212.35 L1623.46 1212.35 L1624.04 1212.35 L1624.63 1212.35 L1625.22 1212.35 L1625.8 1212.35 L1626.39 1212.35 L1626.97 1212.35 L1627.56 1212.35 L1628.15 1212.35 L1628.73 1212.35 L1629.32 1212.35 L1629.91 1212.35 L1630.49 1212.35 L1631.08 1212.35 L1631.67 1212.35 L1632.25 1212.35 L1632.84 1212.35 L1633.42 1212.35 L1634.01 1212.35 L1634.6 1212.35 L1635.18 1212.35 L1635.77 1212.35 L1636.36 1212.35 L1636.94 1212.35 L1637.53 1212.35 L1638.12 1212.35 L1638.7 1212.35 L1639.29 1212.35 L1639.88 1212.35 L1640.46 1212.35 L1641.05 1212.35 L1641.63 1212.35 L1642.22 1212.35 L1642.81 1212.35 L1643.39 1212.35 L1643.98 1212.35 L1644.57 1212.35 L1645.15 1212.35 L1645.74 1212.35 L1646.33 1212.35 L1646.91 1212.35 L1647.5 1212.35 L1648.09 1212.35 L1648.67 1212.35 L1649.26 1212.35 L1649.84 1212.35 L1650.43 1212.35 L1651.02 1212.35 L1651.6 1212.35 L1652.19 1212.35 L1652.78 1212.35 L1653.36 1212.35 L1653.95 1212.35 L1654.54 1212.35 L1655.12 1212.35 L1655.71 1212.35 L1656.29 1212.35 L1656.88 1212.35 L1657.47 1212.35 L1658.05 1212.35 L1658.64 1212.35 L1659.23 1212.35 L1659.81 1212.35 L1660.4 1212.35 L1660.99 1212.35 L1661.57 1212.35 L1662.16 1212.35 L1662.75 1212.35 L1663.33 1212.35 L1663.92 1212.35 L1664.5 1212.35 L1665.09 1212.35 L1665.68 1212.35 L1666.26 1212.35 L1666.85 1212.35 L1667.44 1212.35 L1668.02 1212.35 L1668.61 1212.35 L1669.2 1212.35 L1669.78 1212.35 L1670.37 1212.35 L1670.96 1212.35 L1671.54 1212.35 L1672.13 1212.35 L1672.71 1212.35 L1673.3 1212.35 L1673.89 1212.35 L1674.47 1212.35 L1675.06 1212.35 L1675.65 1212.35 L1676.23 1212.35 L1676.82 1212.35 L1677.41 1212.35 L1677.99 1212.35 L1678.58 1212.35 L1679.17 1212.35 L1679.75 1212.35 L1680.34 1212.35 L1680.92 1212.35 L1681.51 1212.35 L1682.1 1212.35 L1682.68 1212.35 L1683.27 1212.35 L1683.86 1212.35 L1684.44 1212.35 L1685.03 1212.35 L1685.62 1212.35 L1686.2 1212.35 L1686.79 1212.35 L1687.37 1212.35 L1687.96 1212.35 L1688.55 1212.35 L1689.13 1212.35 L1689.72 1212.35 L1690.31 1212.35 L1690.89 1212.35 L1691.48 1212.35 L1692.07 1212.35 L1692.65 1212.35 L1693.24 1212.35 L1693.83 1212.35 L1694.41 1212.35 L1695 1212.35 L1695.58 1212.35 L1696.17 1212.35 L1696.76 1212.35 L1697.34 1212.35 L1697.93 1212.35 L1698.52 1212.35 L1699.1 1212.35 L1699.69 1212.35 L1700.28 1212.35 L1700.86 1212.35 L1701.45 1212.35 L1702.04 1212.35 L1702.62 1212.35 L1703.21 1212.35 L1703.79 1212.35 L1704.38 1212.35 L1704.97 1212.35 L1705.55 1212.35 L1706.14 1212.35 L1706.73 1212.35 L1707.31 1212.35 L1707.9 1212.35 L1708.49 1212.35 L1709.07 1212.35 L1709.66 1212.35 L1710.24 1212.35 L1710.83 1212.35 L1711.42 1212.35 L1712 1212.35 L1712.59 1212.35 L1713.18 1212.35 L1713.76 1212.35 L1714.35 1212.35 L1714.94 1212.35 L1715.52 1212.35 L1716.11 1212.35 L1716.7 1212.35 L1717.28 1212.35 L1717.87 1212.35 L1718.45 1212.35 L1719.04 1212.35 L1719.63 1212.35 L1720.21 1212.35 L1720.8 1212.35 L1721.39 1212.35 L1721.97 1212.35 L1722.56 1212.35 L1723.15 1212.35 L1723.73 1212.35 L1724.32 1212.35 L1724.91 1212.35 L1725.49 1212.35 L1726.08 1212.35 L1726.66 1212.35 L1727.25 1212.35 L1727.84 1212.35 L1728.42 1212.35 L1729.01 1212.35 L1729.6 1212.35 L1730.18 1212.35 L1730.77 1212.35 L1731.36 1212.35 L1731.94 1212.35 L1732.53 1212.35 L1733.11 1212.35 L1733.7 1212.35 L1734.29 1212.35 L1734.87 1212.35 L1735.46 1212.35 L1736.05 1212.35 L1736.63 1212.35 L1737.22 1212.35 L1737.81 1212.35 L1738.39 1212.35 L1738.98 1212.35 L1739.57 1212.35 L1740.15 1212.35 L1740.74 1212.35 L1741.32 1212.35 L1741.91 1212.35 L1742.5 1212.35 L1743.08 1212.35 L1743.67 1212.35 L1744.26 1212.35 L1744.84 1212.35 L1745.43 1212.35 L1746.02 1212.35 L1746.6 1212.35 L1747.19 1212.35 L1747.78 1212.35 L1748.36 1212.35 L1748.95 1212.35 L1749.53 1212.35 L1750.12 1212.35 L1750.71 1212.35 L1751.29 1212.35 L1751.88 1212.35 L1752.47 1212.35 L1753.05 1212.35 L1753.64 1212.35 L1754.23 1212.35 L1754.81 1212.35 L1755.4 1212.35 L1755.99 1212.35 L1756.57 1212.35 L1757.16 1212.35 L1757.74 1212.35 L1758.33 1212.35 L1758.92 1212.35 L1759.5 1212.35 L1760.09 1212.35 L1760.68 1212.35 L1761.26 1212.35 L1761.85 1212.35 L1762.44 1212.35 L1763.02 1212.35 L1763.61 1212.35 L1764.19 1212.35 L1764.78 1212.35 L1765.37 1212.35 L1765.95 1212.35 L1766.54 1212.35 L1767.13 1212.35 L1767.71 1212.35 L1768.3 1212.35 L1768.89 1212.35 L1769.47 1212.35 L1770.06 1212.35 L1770.65 1212.35 L1771.23 1212.35 L1771.82 1212.35 L1772.4 1212.35 L1772.99 1212.35 L1773.58 1212.35 L1774.16 1212.35 L1774.75 1212.35 L1775.34 1212.35 L1775.92 1212.35 L1776.51 1212.35 L1777.1 1212.35 L1777.68 1212.35 L1778.27 1212.35 L1778.86 1212.35 L1779.44 1212.35 L1780.03 1212.35 L1780.61 1212.35 L1781.2 1212.35 L1781.79 1212.35 L1782.37 1212.35 L1782.96 1212.35 L1783.55 1212.35 L1784.13 1212.35 L1784.72 1212.35 L1785.31 1212.35 L1785.89 1212.35 L1786.48 1212.35 L1787.06 1212.35 L1787.65 1212.35 L1788.24 1212.35 L1788.82 1212.35 L1789.41 1212.35 L1790 1212.35 L1790.58 1212.35 L1791.17 1212.35 L1791.76 1212.35 L1792.34 1212.35 L1792.93 1212.35 L1793.52 1212.35 L1794.1 1212.35 L1794.69 1212.35 L1795.27 1212.35 L1795.86 1212.35 L1796.45 1212.35 L1797.03 1212.35 L1797.62 1212.35 L1798.21 1212.35 L1798.79 1212.35 L1799.38 1212.35 L1799.97 1212.35 L1800.55 1212.35 L1801.14 1212.35 L1801.73 1212.35 L1802.31 1212.35 L1802.9 1212.35 L1803.48 1212.35 L1804.07 1212.35 L1804.66 1212.35 L1805.24 1212.35 L1805.83 1212.35 L1806.42 1212.35 L1807 1212.35 L1807.59 1212.35 L1808.18 1212.35 L1808.76 1212.35 L1809.35 1212.35 L1809.94 1212.35 L1810.52 1212.35 L1811.11 1212.35 L1811.69 1212.35 L1812.28 1212.35 L1812.87 1212.35 L1813.45 1212.35 L1814.04 1212.35 L1814.63 1212.35 L1815.21 1212.35 L1815.8 1212.35 L1816.39 1212.35 L1816.97 1212.35 L1817.56 1212.35 L1818.14 1212.35 L1818.73 1212.35 L1819.32 1212.35 L1819.9 1212.35 L1820.49 1212.35 L1821.08 1212.35 L1821.66 1212.35 L1822.25 1212.35 L1822.84 1212.35 L1823.42 1212.35 L1824.01 1212.35 L1824.6 1212.35 L1825.18 1212.35 L1825.77 1212.35 L1826.35 1212.35 L1826.94 1212.35 L1827.53 1212.35 L1828.11 1212.35 L1828.7 1212.35 L1829.29 1212.35 L1829.87 1212.35 L1830.46 1212.35 L1831.05 1212.35 L1831.63 1212.35 L1832.22 1212.35 L1832.81 1212.35 L1833.39 1212.35 L1833.98 1212.35 L1834.56 1212.35 L1835.15 1212.35 L1835.74 1212.35 L1836.32 1212.35 L1836.91 1212.35 L1837.5 1212.35 L1838.08 1212.35 L1838.67 1212.35 L1839.26 1212.35 L1839.84 1212.35 L1840.43 1212.35 L1841.01 1212.35 L1841.6 1212.35 L1842.19 1212.35 L1842.77 1212.35 L1843.36 1212.35 L1843.95 1212.35 L1844.53 1212.35 L1845.12 1212.35 L1845.71 1212.35 L1846.29 1212.35 L1846.88 1212.35 L1847.47 1212.35 L1848.05 1212.35 L1848.64 1212.35 L1849.22 1212.35 L1849.81 1212.35 L1850.4 1212.35 L1850.98 1212.35 L1851.57 1212.35 L1852.16 1212.35 L1852.74 1212.35 L1853.33 1212.35 L1853.92 1212.35 L1854.5 1212.35 L1855.09 1212.35 L1855.68 1212.35 L1856.26 1212.35 L1856.85 1212.35 L1857.43 1212.35 L1858.02 1212.35 L1858.61 1212.35 L1859.19 1212.35 L1859.78 1212.35 L1860.37 1212.35 L1860.95 1212.35 L1861.54 1212.35 L1862.13 1212.35 L1862.71 1212.35 L1863.3 1212.35 L1863.88 1212.35 L1864.47 1212.35 L1865.06 1212.35 L1865.64 1212.35 L1866.23 1212.35 L1866.82 1212.35 L1867.4 1212.35 L1867.99 1212.35 L1868.58 1212.35 L1869.16 1212.35 L1869.75 1212.35 L1870.34 1212.35 L1870.92 1212.35 L1871.51 1212.35 L1872.09 1212.35 L1872.68 1212.35 L1873.27 1212.35 L1873.85 1212.35 L1874.44 1212.35 L1875.03 1212.35 L1875.61 1212.35 L1876.2 1212.35 L1876.79 1212.35 L1877.37 1212.35 L1877.96 1212.35 L1878.55 1212.35 L1879.13 1212.35 L1879.72 1212.35 L1880.3 1212.35 L1880.89 1212.35 L1881.48 1212.35 L1882.06 1212.35 L1882.65 1212.35 L1883.24 1212.35 L1883.82 1212.35 L1884.41 1212.35 L1885 1212.35 L1885.58 1212.35 L1886.17 1212.35 L1886.76 1212.35 L1887.34 1212.35 L1887.93 1212.35 L1888.51 1212.35 L1889.1 1212.35 L1889.69 1212.35 L1890.27 1212.35 L1890.86 1212.35 L1891.45 1212.35 L1892.03 1212.35 L1892.62 1212.35 L1893.21 1212.35 L1893.79 1212.35 L1894.38 1212.35 L1894.96 1212.35 L1895.55 1212.35 L1896.14 1212.35 L1896.72 1212.35 L1897.31 1212.35 L1897.9 1212.35 L1898.48 1212.35 L1899.07 1212.35 L1899.66 1212.35 L1900.24 1212.35 L1900.83 1212.35 L1901.42 1212.35 L1902 1212.35 L1902.59 1212.35 L1903.17 1212.35 L1903.76 1212.35 L1904.35 1212.35 L1904.93 1212.35 L1905.52 1212.35 L1906.11 1212.35 L1906.69 1212.35 L1907.28 1212.35 L1907.87 1212.35 L1908.45 1212.35 L1909.04 1212.35 L1909.63 1212.35 L1910.21 1212.35 L1910.8 1212.35 L1911.38 1212.35 L1911.97 1212.35 L1912.56 1212.35 L1913.14 1212.35 L1913.73 1212.35 L1914.32 1212.35 L1914.9 1212.35 L1915.49 1212.35 L1916.08 1212.35 L1916.66 1212.35 L1917.25 1212.35 L1917.83 1212.35 L1918.42 1212.35 L1919.01 1212.35 L1919.59 1212.35 L1920.18 1212.35 L1920.77 1212.35 L1921.35 1212.35 L1921.94 1212.35 L1922.53 1212.35 L1923.11 1212.35 L1923.7 1212.35 L1924.29 1212.35 L1924.87 1212.35 L1925.46 1212.35 L1926.04 1212.35 L1926.63 1212.35 L1927.22 1212.35 L1927.8 1212.35 L1928.39 1212.35 L1928.98 1212.35 L1929.56 1212.35 L1930.15 1212.35 L1930.74 1212.35 L1931.32 1212.35 L1931.91 1212.35 L1932.5 1212.35 L1933.08 1212.35 L1933.67 1212.35 L1934.25 1212.35 L1934.84 1212.35 L1935.43 1212.35 L1936.01 1212.35 L1936.6 1212.35 L1937.19 1212.35 L1937.77 1212.35 L1938.36 1212.35 L1938.95 1212.35 L1939.53 1212.35 L1940.12 1212.35 L1940.71 1212.35 L1941.29 1212.35 L1941.88 1212.35 L1942.46 1212.35 L1943.05 1212.35 L1943.64 1212.35 L1944.22 1212.35 L1944.81 1212.35 L1945.4 1212.35 L1945.98 1212.35 L1946.57 1212.35 L1947.16 1212.35 L1947.74 1212.35 L1948.33 1212.35 L1948.91 1212.35 L1949.5 1212.35 L1950.09 1212.35 L1950.67 1212.35 L1951.26 1212.35 L1951.85 1212.35 L1952.43 1212.35 L1953.02 1212.35 L1953.61 1212.35 L1954.19 1212.35 L1954.78 1212.35 L1955.37 1212.35 L1955.95 1212.35 L1956.54 1212.35 L1957.12 1212.35 L1957.71 1212.35 L1958.3 1212.35 L1958.88 1212.35 L1959.47 1212.35 L1960.06 1212.35 L1960.64 1212.35 L1961.23 1212.35 L1961.82 1212.35 L1962.4 1212.35 L1962.99 1212.35 L1963.58 1212.35 L1964.16 1212.35 L1964.75 1212.35 L1965.33 1212.35 L1965.92 1212.35 L1966.51 1212.35 L1967.09 1212.35 L1967.68 1212.35 L1968.27 1212.35 L1968.85 1212.35 L1969.44 1212.35 L1970.03 1212.35 L1970.61 1212.35 L1971.2 1212.35 L1971.78 1212.35 L1972.37 1212.35 L1972.96 1212.35 L1973.54 1212.35 L1974.13 1212.35 L1974.72 1212.35 L1975.3 1212.35 L1975.89 1212.35 L1976.48 1212.35 L1977.06 1212.35 L1977.65 1212.35 L1978.24 1212.35 L1978.82 1212.35 L1979.41 1212.35 L1979.99 1212.35 L1980.58 1212.35 L1981.17 1212.35 L1981.75 1212.35 L1982.34 1212.35 L1982.93 1212.35 L1983.51 1212.35 L1984.1 1212.35 L1984.69 1212.35 L1985.27 1212.35 L1985.86 1212.35 L1986.45 1212.35 L1987.03 1212.35 L1987.62 1212.35 L1988.2 1212.35 L1988.79 1212.35 L1989.38 1212.35 L1989.96 1212.35 L1990.55 1212.35 L1991.14 1212.35 L1991.72 1212.35 L1992.31 1212.35 L1992.9 1212.35 L1993.48 1212.35 L1994.07 1212.35 L1994.65 1212.35 L1995.24 1212.35 L1995.83 1212.35 L1996.41 1212.35 L1997 1212.35 L1997.59 1212.35 L1998.17 1212.35 L1998.76 1212.35 L1999.35 1212.35 L1999.93 1212.35 L2000.52 1212.35 L2001.11 1212.35 L2001.69 1212.35 L2002.28 1212.35 L2002.86 1212.35 L2003.45 1212.35 L2004.04 1212.35 L2004.62 1212.35 L2005.21 1212.35 L2005.8 1212.35 L2006.38 1212.35 L2006.97 1212.35 L2007.56 1212.35 L2008.14 1212.35 L2008.73 1212.35 L2009.32 1212.35 L2009.9 1212.35 L2010.49 1212.35 L2011.07 1212.35 L2011.66 1212.35 L2012.25 1212.35 L2012.83 1212.35 L2013.42 1212.35 L2014.01 1212.35 L2014.59 1212.35 L2015.18 1212.35 L2015.77 1212.35 L2016.35 1212.35 L2016.94 1212.35 L2017.53 1212.35 L2018.11 1212.35 L2018.7 1212.35 L2019.28 1212.35 L2019.87 1212.35 L2020.46 1212.35 L2021.04 1212.35 L2021.63 1212.35 L2022.22 1212.35 L2022.8 1212.35 L2023.39 1212.35 L2023.98 1212.35 L2024.56 1212.35 L2025.15 1212.35 L2025.73 1212.35 L2026.32 1212.35 L2026.91 1212.35 L2027.49 1212.35 L2028.08 1212.35 L2028.67 1212.35 L2029.25 1212.35 L2029.84 1212.35 L2030.43 1212.35 L2031.01 1212.35 L2031.6 1212.35 L2032.19 1212.35 L2032.77 1212.35 L2033.36 1212.35 L2033.94 1212.35 L2034.53 1212.35 L2035.12 1212.35 L2035.7 1212.35 L2036.29 1212.35 L2036.88 1212.35 L2037.46 1212.35 L2038.05 1212.35 L2038.64 1212.35 L2039.22 1212.35 L2039.81 1212.35 L2040.4 1212.35 L2040.98 1212.35 L2041.57 1212.35 L2042.15 1212.35 L2042.74 1212.35 L2043.33 1212.35 L2043.91 1212.35 L2044.5 1212.35 L2045.09 1212.35 L2045.67 1212.35 L2046.26 1212.35 L2046.85 1212.35 L2047.43 1212.35 L2048.02 1212.35 L2048.6 1212.35 L2049.19 1212.35 L2049.78 1212.35 L2050.36 1212.35 L2050.95 1212.35 L2051.54 1212.35 L2052.12 1212.35 L2052.71 1212.35 L2053.3 1212.35 L2053.88 1212.35 L2054.47 1212.35 L2055.06 1212.35 L2055.64 1212.35 L2056.23 1212.35 L2056.81 1212.35 L2057.4 1212.35 L2057.99 1212.35 L2058.57 1212.35 L2059.16 1212.35 L2059.75 1212.35 L2060.33 1212.35 L2060.92 1212.35 L2061.51 1212.35 L2062.09 1212.35 L2062.68 1212.35 L2063.27 1212.35 L2063.85 1212.35 L2064.44 1212.35 L2065.02 1212.35 L2065.61 1212.35 L2066.2 1212.35 L2066.78 1212.35 L2067.37 1212.35 L2067.96 1212.35 L2068.54 1212.35 L2069.13 1212.35 L2069.72 1212.35 L2070.3 1212.35 L2070.89 1212.35 L2071.48 1212.35 L2072.06 1212.35 L2072.65 1212.35 L2073.23 1212.35 L2073.82 1212.35 L2074.41 1212.35 L2074.99 1212.35 L2075.58 1212.35 L2076.17 1212.35 L2076.75 1212.35 L2077.34 1212.35 L2077.93 1212.35 L2078.51 1212.35 L2079.1 1212.35 L2079.68 1212.35 L2080.27 1212.35 L2080.86 1212.35 L2081.44 1212.35 L2082.03 1212.35 L2082.62 1212.35 L2083.2 1212.35 L2083.79 1212.35 L2084.38 1212.35 L2084.96 1212.35 L2085.55 1212.35 L2086.14 1212.35 L2086.72 1212.35 L2087.31 1212.35 L2087.89 1212.35 L2088.48 1212.35 L2089.07 1212.35 L2089.65 1212.35 L2090.24 1212.35 L2090.83 1212.35 L2091.41 1212.35 L2092 1212.35 L2092.59 1212.35 L2093.17 1212.35 L2093.76 1212.35 L2094.35 1212.35 L2094.93 1212.35 L2095.52 1212.35 L2096.1 1212.35 L2096.69 1212.35 L2097.28 1212.35 L2097.86 1212.35 L2098.45 1212.35 L2099.04 1212.35 L2099.62 1212.35 L2100.21 1212.35 L2100.8 1212.35 L2101.38 1212.35 L2101.97 1212.35 L2102.55 1212.35 L2103.14 1212.35 L2103.73 1212.35 L2104.31 1212.35 L2104.9 1212.35 L2105.49 1212.35 L2106.07 1212.35 L2106.66 1212.35 L2107.25 1212.35 L2107.83 1212.35 L2108.42 1212.35 L2109.01 1212.35 L2109.59 1212.35 L2110.18 1212.35 L2110.76 1212.35 L2111.35 1212.35 L2111.94 1212.35 L2112.52 1212.35 L2113.11 1212.35 L2113.7 1212.35 L2114.28 1212.35 L2114.87 1212.35 L2115.46 1212.35 L2116.04 1212.35 L2116.63 1212.35 L2117.22 1212.35 L2117.8 1212.35 L2118.39 1212.35 L2118.97 1212.35 L2119.56 1212.35 L2120.15 1212.35 L2120.73 1212.35 L2121.32 1212.35 L2121.91 1212.35 L2122.49 1212.35 L2123.08 1212.35 L2123.67 1212.35 L2124.25 1212.35 L2124.84 1212.35 L2125.42 1212.35 L2126.01 1212.35 L2126.6 1212.35 L2127.18 1212.35 L2127.77 1212.35 L2128.36 1212.35 L2128.94 1212.35 L2129.53 1212.35 L2130.12 1212.35 L2130.7 1212.35 L2131.29 1212.35 L2131.88 1212.35 L2132.46 1212.35 L2133.05 1212.35 L2133.63 1212.35 L2134.22 1212.35 L2134.81 1212.35 L2135.39 1212.35 L2135.98 1212.35 L2136.57 1212.35 L2137.15 1212.35 L2137.74 1212.35 L2138.33 1212.35 L2138.91 1212.35 L2139.5 1212.35 L2140.09 1212.35 L2140.67 1212.35 L2141.26 1212.35 L2141.84 1212.35 L2142.43 1212.35 L2143.02 1212.35 L2143.6 1212.35 L2144.19 1212.35 L2144.78 1212.35 L2145.36 1212.35 L2145.95 1212.35 L2146.54 1212.35 L2147.12 1212.35 L2147.71 1212.35 L2148.3 1212.35 L2148.88 1212.35 L2149.47 1212.35 L2150.05 1212.35 L2150.64 1212.35 L2151.23 1212.35 L2151.81 1212.35 L2152.4 1212.35 L2152.99 1212.35 L2153.57 1212.35 L2154.16 1212.35 L2154.75 1212.35 L2155.33 1212.35 L2155.92 1212.35 L2156.5 1212.35 L2157.09 1212.35 L2157.68 1212.35 L2158.26 1212.35 L2158.26 1211.67 L2157.68 1211.67 L2157.09 1211.67 L2156.5 1211.67 L2155.92 1211.67 L2155.33 1211.67 L2154.75 1211.67 L2154.16 1211.67 L2153.57 1211.67 L2152.99 1211.67 L2152.4 1211.67 L2151.81 1211.67 L2151.23 1211.67 L2150.64 1211.67 L2150.05 1211.67 L2149.47 1211.67 L2148.88 1211.67 L2148.3 1211.67 L2147.71 1211.67 L2147.12 1211.67 L2146.54 1211.67 L2145.95 1211.67 L2145.36 1211.67 L2144.78 1211.67 L2144.19 1211.67 L2143.6 1211.67 L2143.02 1211.67 L2142.43 1211.67 L2141.84 1211.67 L2141.26 1211.67 L2140.67 1211.67 L2140.09 1211.67 L2139.5 1211.67 L2138.91 1211.67 L2138.33 1211.67 L2137.74 1211.67 L2137.15 1211.67 L2136.57 1211.67 L2135.98 1211.67 L2135.39 1211.67 L2134.81 1211.67 L2134.22 1211.67 L2133.63 1211.67 L2133.05 1211.67 L2132.46 1211.67 L2131.88 1211.67 L2131.29 1211.67 L2130.7 1211.67 L2130.12 1211.67 L2129.53 1211.67 L2128.94 1211.67 L2128.36 1211.67 L2127.77 1211.67 L2127.18 1211.67 L2126.6 1211.67 L2126.01 1211.67 L2125.42 1211.67 L2124.84 1211.67 L2124.25 1211.67 L2123.67 1211.67 L2123.08 1211.67 L2122.49 1211.67 L2121.91 1211.67 L2121.32 1211.67 L2120.73 1211.67 L2120.15 1211.67 L2119.56 1211.67 L2118.97 1211.67 L2118.39 1211.67 L2117.8 1211.67 L2117.22 1211.67 L2116.63 1211.67 L2116.04 1211.67 L2115.46 1211.67 L2114.87 1211.67 L2114.28 1211.67 L2113.7 1211.67 L2113.11 1211.67 L2112.52 1211.67 L2111.94 1211.67 L2111.35 1211.67 L2110.76 1211.67 L2110.18 1211.67 L2109.59 1211.67 L2109.01 1211.67 L2108.42 1211.67 L2107.83 1211.67 L2107.25 1211.67 L2106.66 1211.67 L2106.07 1211.67 L2105.49 1211.67 L2104.9 1211.67 L2104.31 1211.67 L2103.73 1211.67 L2103.14 1211.67 L2102.55 1211.67 L2101.97 1211.67 L2101.38 1211.67 L2100.8 1211.67 L2100.21 1211.67 L2099.62 1211.67 L2099.04 1211.67 L2098.45 1211.67 L2097.86 1211.67 L2097.28 1211.67 L2096.69 1211.67 L2096.1 1211.67 L2095.52 1211.67 L2094.93 1211.67 L2094.35 1211.67 L2093.76 1211.67 L2093.17 1211.67 L2092.59 1211.67 L2092 1211.67 L2091.41 1211.67 L2090.83 1211.67 L2090.24 1211.67 L2089.65 1211.67 L2089.07 1211.67 L2088.48 1211.67 L2087.89 1211.67 L2087.31 1211.67 L2086.72 1211.67 L2086.14 1211.67 L2085.55 1211.67 L2084.96 1211.67 L2084.38 1211.67 L2083.79 1211.67 L2083.2 1211.67 L2082.62 1211.67 L2082.03 1211.67 L2081.44 1211.67 L2080.86 1211.67 L2080.27 1211.67 L2079.68 1211.67 L2079.1 1211.67 L2078.51 1211.67 L2077.93 1211.67 L2077.34 1211.67 L2076.75 1211.67 L2076.17 1211.67 L2075.58 1211.67 L2074.99 1211.67 L2074.41 1211.67 L2073.82 1211.67 L2073.23 1211.67 L2072.65 1211.67 L2072.06 1211.67 L2071.48 1211.67 L2070.89 1211.67 L2070.3 1211.67 L2069.72 1211.67 L2069.13 1211.67 L2068.54 1211.67 L2067.96 1211.67 L2067.37 1211.67 L2066.78 1211.67 L2066.2 1211.67 L2065.61 1211.67 L2065.02 1211.67 L2064.44 1211.67 L2063.85 1211.67 L2063.27 1211.67 L2062.68 1211.67 L2062.09 1211.67 L2061.51 1211.67 L2060.92 1211.67 L2060.33 1211.67 L2059.75 1211.67 L2059.16 1211.67 L2058.57 1211.67 L2057.99 1211.67 L2057.4 1211.67 L2056.81 1211.67 L2056.23 1211.67 L2055.64 1211.67 L2055.06 1211.67 L2054.47 1211.67 L2053.88 1211.67 L2053.3 1211.67 L2052.71 1211.67 L2052.12 1211.67 L2051.54 1211.67 L2050.95 1211.67 L2050.36 1211.67 L2049.78 1211.67 L2049.19 1211.67 L2048.6 1211.67 L2048.02 1211.67 L2047.43 1211.67 L2046.85 1211.67 L2046.26 1211.67 L2045.67 1211.67 L2045.09 1211.67 L2044.5 1211.67 L2043.91 1211.67 L2043.33 1211.67 L2042.74 1211.67 L2042.15 1211.67 L2041.57 1211.67 L2040.98 1211.67 L2040.4 1211.67 L2039.81 1211.67 L2039.22 1211.67 L2038.64 1211.67 L2038.05 1211.67 L2037.46 1211.67 L2036.88 1211.67 L2036.29 1211.67 L2035.7 1211.67 L2035.12 1211.67 L2034.53 1211.67 L2033.94 1211.67 L2033.36 1211.67 L2032.77 1211.67 L2032.19 1211.67 L2031.6 1211.67 L2031.01 1211.67 L2030.43 1211.67 L2029.84 1211.67 L2029.25 1211.67 L2028.67 1211.67 L2028.08 1211.67 L2027.49 1211.67 L2026.91 1211.67 L2026.32 1211.67 L2025.73 1211.67 L2025.15 1211.67 L2024.56 1211.67 L2023.98 1211.67 L2023.39 1211.67 L2022.8 1211.67 L2022.22 1211.67 L2021.63 1211.67 L2021.04 1211.67 L2020.46 1211.67 L2019.87 1211.67 L2019.28 1211.67 L2018.7 1211.67 L2018.11 1211.67 L2017.53 1211.67 L2016.94 1211.67 L2016.35 1211.67 L2015.77 1211.67 L2015.18 1211.67 L2014.59 1211.67 L2014.01 1211.67 L2013.42 1211.67 L2012.83 1211.67 L2012.25 1211.67 L2011.66 1211.67 L2011.07 1211.67 L2010.49 1211.67 L2009.9 1211.67 L2009.32 1211.67 L2008.73 1211.67 L2008.14 1211.67 L2007.56 1211.67 L2006.97 1211.67 L2006.38 1211.67 L2005.8 1211.67 L2005.21 1211.67 L2004.62 1211.67 L2004.04 1211.67 L2003.45 1211.67 L2002.86 1211.67 L2002.28 1211.67 L2001.69 1211.67 L2001.11 1211.67 L2000.52 1211.67 L1999.93 1211.67 L1999.35 1211.67 L1998.76 1211.67 L1998.17 1211.67 L1997.59 1211.67 L1997 1211.67 L1996.41 1211.67 L1995.83 1211.67 L1995.24 1211.67 L1994.65 1211.67 L1994.07 1211.67 L1993.48 1211.67 L1992.9 1211.67 L1992.31 1211.67 L1991.72 1211.67 L1991.14 1211.67 L1990.55 1211.67 L1989.96 1211.67 L1989.38 1211.67 L1988.79 1211.67 L1988.2 1211.67 L1987.62 1211.67 L1987.03 1211.67 L1986.45 1211.67 L1985.86 1211.67 L1985.27 1211.67 L1984.69 1211.67 L1984.1 1211.67 L1983.51 1211.67 L1982.93 1211.67 L1982.34 1211.67 L1981.75 1211.67 L1981.17 1211.67 L1980.58 1211.67 L1979.99 1211.67 L1979.41 1211.67 L1978.82 1211.67 L1978.24 1211.67 L1977.65 1211.67 L1977.06 1211.67 L1976.48 1211.67 L1975.89 1211.67 L1975.3 1211.67 L1974.72 1211.67 L1974.13 1211.67 L1973.54 1211.67 L1972.96 1211.67 L1972.37 1211.67 L1971.78 1211.67 L1971.2 1211.67 L1970.61 1211.67 L1970.03 1211.67 L1969.44 1211.67 L1968.85 1211.67 L1968.27 1211.67 L1967.68 1211.67 L1967.09 1211.67 L1966.51 1211.67 L1965.92 1211.67 L1965.33 1211.67 L1964.75 1211.67 L1964.16 1211.67 L1963.58 1211.67 L1962.99 1211.67 L1962.4 1211.67 L1961.82 1211.67 L1961.23 1211.67 L1960.64 1211.67 L1960.06 1211.67 L1959.47 1211.67 L1958.88 1211.67 L1958.3 1211.67 L1957.71 1211.67 L1957.12 1211.67 L1956.54 1211.67 L1955.95 1211.67 L1955.37 1211.67 L1954.78 1211.67 L1954.19 1211.67 L1953.61 1211.67 L1953.02 1211.67 L1952.43 1211.67 L1951.85 1211.67 L1951.26 1211.67 L1950.67 1211.67 L1950.09 1211.67 L1949.5 1211.67 L1948.91 1211.67 L1948.33 1211.67 L1947.74 1211.67 L1947.16 1211.67 L1946.57 1211.67 L1945.98 1211.67 L1945.4 1211.67 L1944.81 1211.67 L1944.22 1211.67 L1943.64 1211.67 L1943.05 1211.67 L1942.46 1211.67 L1941.88 1211.67 L1941.29 1211.67 L1940.71 1211.67 L1940.12 1211.67 L1939.53 1211.67 L1938.95 1211.67 L1938.36 1211.67 L1937.77 1211.67 L1937.19 1211.67 L1936.6 1211.67 L1936.01 1211.67 L1935.43 1211.67 L1934.84 1211.67 L1934.25 1211.67 L1933.67 1211.67 L1933.08 1211.67 L1932.5 1211.67 L1931.91 1211.67 L1931.32 1211.67 L1930.74 1211.67 L1930.15 1211.67 L1929.56 1211.67 L1928.98 1211.67 L1928.39 1211.67 L1927.8 1211.67 L1927.22 1211.67 L1926.63 1211.67 L1926.04 1211.67 L1925.46 1211.67 L1924.87 1211.67 L1924.29 1211.67 L1923.7 1211.67 L1923.11 1211.67 L1922.53 1211.67 L1921.94 1211.67 L1921.35 1211.67 L1920.77 1211.67 L1920.18 1211.67 L1919.59 1211.67 L1919.01 1211.67 L1918.42 1211.67 L1917.83 1211.67 L1917.25 1211.67 L1916.66 1211.67 L1916.08 1211.67 L1915.49 1211.67 L1914.9 1211.67 L1914.32 1211.67 L1913.73 1211.67 L1913.14 1211.67 L1912.56 1211.67 L1911.97 1211.67 L1911.38 1211.67 L1910.8 1211.67 L1910.21 1211.67 L1909.63 1211.67 L1909.04 1211.67 L1908.45 1211.67 L1907.87 1211.67 L1907.28 1211.67 L1906.69 1211.67 L1906.11 1211.67 L1905.52 1211.67 L1904.93 1211.67 L1904.35 1211.67 L1903.76 1211.67 L1903.17 1211.67 L1902.59 1211.67 L1902 1211.67 L1901.42 1211.67 L1900.83 1211.67 L1900.24 1211.67 L1899.66 1211.67 L1899.07 1211.67 L1898.48 1211.67 L1897.9 1211.67 L1897.31 1211.67 L1896.72 1211.67 L1896.14 1211.67 L1895.55 1211.67 L1894.96 1211.67 L1894.38 1211.67 L1893.79 1211.67 L1893.21 1211.67 L1892.62 1211.67 L1892.03 1211.67 L1891.45 1211.67 L1890.86 1211.67 L1890.27 1211.67 L1889.69 1211.67 L1889.1 1211.67 L1888.51 1211.67 L1887.93 1211.67 L1887.34 1211.67 L1886.76 1211.67 L1886.17 1211.67 L1885.58 1211.67 L1885 1211.67 L1884.41 1211.67 L1883.82 1211.67 L1883.24 1211.67 L1882.65 1211.67 L1882.06 1211.67 L1881.48 1211.67 L1880.89 1211.67 L1880.3 1211.67 L1879.72 1211.67 L1879.13 1211.67 L1878.55 1211.67 L1877.96 1211.67 L1877.37 1211.67 L1876.79 1211.67 L1876.2 1211.67 L1875.61 1211.67 L1875.03 1211.67 L1874.44 1211.67 L1873.85 1211.67 L1873.27 1211.67 L1872.68 1211.67 L1872.09 1211.67 L1871.51 1211.67 L1870.92 1211.67 L1870.34 1211.67 L1869.75 1211.67 L1869.16 1211.67 L1868.58 1211.67 L1867.99 1211.67 L1867.4 1211.67 L1866.82 1211.67 L1866.23 1211.67 L1865.64 1211.67 L1865.06 1211.67 L1864.47 1211.67 L1863.88 1211.67 L1863.3 1211.67 L1862.71 1211.67 L1862.13 1211.67 L1861.54 1211.67 L1860.95 1211.67 L1860.37 1211.67 L1859.78 1211.67 L1859.19 1211.67 L1858.61 1211.67 L1858.02 1211.67 L1857.43 1211.67 L1856.85 1211.67 L1856.26 1211.67 L1855.68 1211.67 L1855.09 1211.67 L1854.5 1211.67 L1853.92 1211.67 L1853.33 1211.67 L1852.74 1211.67 L1852.16 1211.67 L1851.57 1211.67 L1850.98 1211.67 L1850.4 1211.67 L1849.81 1211.67 L1849.22 1211.67 L1848.64 1211.67 L1848.05 1211.67 L1847.47 1211.67 L1846.88 1211.67 L1846.29 1211.67 L1845.71 1211.67 L1845.12 1211.67 L1844.53 1211.67 L1843.95 1211.67 L1843.36 1211.67 L1842.77 1211.67 L1842.19 1211.67 L1841.6 1211.67 L1841.01 1211.67 L1840.43 1211.67 L1839.84 1211.67 L1839.26 1211.67 L1838.67 1211.67 L1838.08 1211.67 L1837.5 1211.67 L1836.91 1211.67 L1836.32 1211.67 L1835.74 1211.67 L1835.15 1211.67 L1834.56 1211.67 L1833.98 1211.67 L1833.39 1211.67 L1832.81 1211.67 L1832.22 1211.67 L1831.63 1211.67 L1831.05 1211.67 L1830.46 1211.67 L1829.87 1211.67 L1829.29 1211.67 L1828.7 1211.67 L1828.11 1211.67 L1827.53 1211.67 L1826.94 1211.67 L1826.35 1211.67 L1825.77 1211.67 L1825.18 1211.67 L1824.6 1211.67 L1824.01 1211.67 L1823.42 1211.67 L1822.84 1211.67 L1822.25 1211.67 L1821.66 1211.67 L1821.08 1211.67 L1820.49 1211.67 L1819.9 1211.67 L1819.32 1211.67 L1818.73 1211.67 L1818.14 1211.67 L1817.56 1211.67 L1816.97 1211.67 L1816.39 1211.67 L1815.8 1211.67 L1815.21 1211.67 L1814.63 1211.67 L1814.04 1211.67 L1813.45 1211.67 L1812.87 1211.67 L1812.28 1211.67 L1811.69 1211.67 L1811.11 1211.67 L1810.52 1211.67 L1809.94 1211.67 L1809.35 1211.67 L1808.76 1211.67 L1808.18 1211.67 L1807.59 1211.67 L1807 1211.67 L1806.42 1211.67 L1805.83 1211.67 L1805.24 1211.67 L1804.66 1211.67 L1804.07 1211.67 L1803.48 1211.67 L1802.9 1211.67 L1802.31 1211.67 L1801.73 1211.67 L1801.14 1211.67 L1800.55 1211.67 L1799.97 1211.67 L1799.38 1211.67 L1798.79 1211.67 L1798.21 1211.67 L1797.62 1211.67 L1797.03 1211.67 L1796.45 1211.67 L1795.86 1211.67 L1795.27 1211.67 L1794.69 1211.67 L1794.1 1211.67 L1793.52 1211.67 L1792.93 1211.67 L1792.34 1211.67 L1791.76 1211.67 L1791.17 1211.67 L1790.58 1211.67 L1790 1211.67 L1789.41 1211.67 L1788.82 1211.67 L1788.24 1211.67 L1787.65 1211.67 L1787.06 1211.67 L1786.48 1211.67 L1785.89 1211.67 L1785.31 1211.67 L1784.72 1211.67 L1784.13 1211.67 L1783.55 1211.67 L1782.96 1211.67 L1782.37 1211.67 L1781.79 1211.67 L1781.2 1211.67 L1780.61 1211.67 L1780.03 1211.67 L1779.44 1211.67 L1778.86 1211.67 L1778.27 1211.67 L1777.68 1211.67 L1777.1 1211.67 L1776.51 1211.67 L1775.92 1211.67 L1775.34 1211.67 L1774.75 1211.67 L1774.16 1211.67 L1773.58 1211.67 L1772.99 1211.67 L1772.4 1211.67 L1771.82 1211.67 L1771.23 1211.67 L1770.65 1211.67 L1770.06 1211.67 L1769.47 1211.67 L1768.89 1211.67 L1768.3 1211.67 L1767.71 1211.67 L1767.13 1211.67 L1766.54 1211.67 L1765.95 1211.67 L1765.37 1211.67 L1764.78 1211.67 L1764.19 1211.67 L1763.61 1211.67 L1763.02 1211.67 L1762.44 1211.67 L1761.85 1211.67 L1761.26 1211.67 L1760.68 1211.67 L1760.09 1211.67 L1759.5 1211.67 L1758.92 1211.67 L1758.33 1211.67 L1757.74 1211.67 L1757.16 1211.67 L1756.57 1211.67 L1755.99 1211.67 L1755.4 1211.67 L1754.81 1211.67 L1754.23 1211.67 L1753.64 1211.67 L1753.05 1211.67 L1752.47 1211.67 L1751.88 1211.67 L1751.29 1211.67 L1750.71 1211.67 L1750.12 1211.67 L1749.53 1211.67 L1748.95 1211.67 L1748.36 1211.67 L1747.78 1211.67 L1747.19 1211.67 L1746.6 1211.67 L1746.02 1211.67 L1745.43 1211.67 L1744.84 1211.67 L1744.26 1211.67 L1743.67 1211.67 L1743.08 1211.67 L1742.5 1211.67 L1741.91 1211.67 L1741.32 1211.67 L1740.74 1211.67 L1740.15 1211.67 L1739.57 1211.67 L1738.98 1211.67 L1738.39 1211.67 L1737.81 1211.67 L1737.22 1211.67 L1736.63 1211.67 L1736.05 1211.67 L1735.46 1211.67 L1734.87 1211.67 L1734.29 1211.67 L1733.7 1211.67 L1733.11 1211.67 L1732.53 1211.67 L1731.94 1211.67 L1731.36 1211.67 L1730.77 1211.67 L1730.18 1211.67 L1729.6 1211.67 L1729.01 1211.67 L1728.42 1211.67 L1727.84 1211.67 L1727.25 1211.67 L1726.66 1211.67 L1726.08 1211.67 L1725.49 1211.67 L1724.91 1211.67 L1724.32 1211.67 L1723.73 1211.67 L1723.15 1211.67 L1722.56 1211.67 L1721.97 1211.67 L1721.39 1211.67 L1720.8 1211.67 L1720.21 1211.67 L1719.63 1211.67 L1719.04 1211.67 L1718.45 1211.67 L1717.87 1211.67 L1717.28 1211.67 L1716.7 1211.67 L1716.11 1211.67 L1715.52 1211.67 L1714.94 1211.67 L1714.35 1211.67 L1713.76 1211.67 L1713.18 1211.67 L1712.59 1211.67 L1712 1211.67 L1711.42 1211.67 L1710.83 1211.67 L1710.24 1211.67 L1709.66 1211.67 L1709.07 1211.67 L1708.49 1211.67 L1707.9 1211.67 L1707.31 1211.67 L1706.73 1211.67 L1706.14 1211.67 L1705.55 1211.67 L1704.97 1211.67 L1704.38 1211.67 L1703.79 1211.67 L1703.21 1211.67 L1702.62 1211.67 L1702.04 1211.67 L1701.45 1211.67 L1700.86 1211.67 L1700.28 1211.67 L1699.69 1211.67 L1699.1 1211.67 L1698.52 1211.67 L1697.93 1211.67 L1697.34 1211.67 L1696.76 1211.67 L1696.17 1211.67 L1695.58 1211.67 L1695 1211.67 L1694.41 1211.67 L1693.83 1211.67 L1693.24 1211.67 L1692.65 1211.67 L1692.07 1211.67 L1691.48 1211.67 L1690.89 1211.67 L1690.31 1211.67 L1689.72 1211.67 L1689.13 1211.67 L1688.55 1211.67 L1687.96 1211.67 L1687.37 1211.67 L1686.79 1211.67 L1686.2 1211.67 L1685.62 1211.67 L1685.03 1211.67 L1684.44 1211.67 L1683.86 1211.67 L1683.27 1211.67 L1682.68 1211.67 L1682.1 1211.67 L1681.51 1211.67 L1680.92 1211.67 L1680.34 1211.67 L1679.75 1211.67 L1679.17 1211.67 L1678.58 1211.67 L1677.99 1211.67 L1677.41 1211.67 L1676.82 1211.67 L1676.23 1211.67 L1675.65 1211.67 L1675.06 1211.67 L1674.47 1211.67 L1673.89 1211.67 L1673.3 1211.67 L1672.71 1211.67 L1672.13 1211.67 L1671.54 1211.67 L1670.96 1211.67 L1670.37 1211.67 L1669.78 1211.67 L1669.2 1211.67 L1668.61 1211.67 L1668.02 1211.67 L1667.44 1211.67 L1666.85 1211.67 L1666.26 1211.67 L1665.68 1211.67 L1665.09 1211.67 L1664.5 1211.67 L1663.92 1211.67 L1663.33 1211.67 L1662.75 1211.67 L1662.16 1211.67 L1661.57 1211.67 L1660.99 1211.67 L1660.4 1211.67 L1659.81 1211.67 L1659.23 1211.67 L1658.64 1211.67 L1658.05 1211.67 L1657.47 1211.67 L1656.88 1211.67 L1656.29 1211.67 L1655.71 1211.67 L1655.12 1211.67 L1654.54 1211.67 L1653.95 1211.67 L1653.36 1211.67 L1652.78 1211.67 L1652.19 1211.67 L1651.6 1211.67 L1651.02 1211.67 L1650.43 1211.67 L1649.84 1211.67 L1649.26 1211.67 L1648.67 1211.67 L1648.09 1211.67 L1647.5 1211.67 L1646.91 1211.67 L1646.33 1211.67 L1645.74 1211.67 L1645.15 1211.67 L1644.57 1211.67 L1643.98 1211.67 L1643.39 1211.67 L1642.81 1211.67 L1642.22 1211.67 L1641.63 1211.67 L1641.05 1211.67 L1640.46 1211.67 L1639.88 1211.67 L1639.29 1211.67 L1638.7 1211.67 L1638.12 1211.67 L1637.53 1211.67 L1636.94 1211.67 L1636.36 1211.67 L1635.77 1211.67 L1635.18 1211.67 L1634.6 1211.67 L1634.01 1211.67 L1633.42 1211.67 L1632.84 1211.67 L1632.25 1211.67 L1631.67 1211.67 L1631.08 1211.67 L1630.49 1211.67 L1629.91 1211.67 L1629.32 1211.67 L1628.73 1211.67 L1628.15 1211.67 L1627.56 1211.67 L1626.97 1211.67 L1626.39 1211.67 L1625.8 1211.67 L1625.22 1211.67 L1624.63 1211.67 L1624.04 1211.67 L1623.46 1211.67 L1622.87 1211.67 L1622.28 1211.67 L1621.7 1211.67 L1621.11 1211.67 L1620.52 1211.67 L1619.94 1211.67 L1619.35 1211.67 L1618.76 1211.67 L1618.18 1211.67 L1617.59 1211.67 L1617.01 1211.67 L1616.42 1211.67 L1615.83 1211.67 L1615.25 1211.67 L1614.66 1211.67 L1614.07 1211.67 L1613.49 1211.67 L1612.9 1211.67 L1612.31 1211.67 L1611.73 1211.67 L1611.14 1211.67 L1610.55 1211.67 L1609.97 1211.67 L1609.38 1211.67 L1608.8 1211.67 L1608.21 1211.67 L1607.62 1211.67 L1607.04 1211.67 L1606.45 1211.67 L1605.86 1211.67 L1605.28 1211.67 L1604.69 1211.67 L1604.1 1211.67 L1603.52 1211.67 L1602.93 1211.67 L1602.34 1211.67 L1601.76 1211.67 L1601.17 1211.67 L1600.59 1211.67 L1600 1211.67 L1599.41 1211.67 L1598.83 1211.67 L1598.24 1211.67 L1597.65 1211.67 L1597.07 1211.67 L1596.48 1211.67 L1595.89 1211.67 L1595.31 1211.67 L1594.72 1211.67 L1594.14 1211.67 L1593.55 1211.67 L1592.96 1211.67 L1592.38 1211.67 L1591.79 1211.67 L1591.2 1211.67 L1590.62 1211.67 L1590.03 1211.67 L1589.44 1211.67 L1588.86 1211.67 L1588.27 1211.67 L1587.68 1211.67 L1587.1 1211.67 L1586.51 1211.67 L1585.93 1211.67 L1585.34 1211.67 L1584.75 1211.67 L1584.17 1211.67 L1583.58 1211.67 L1582.99 1211.67 L1582.41 1211.67 L1581.82 1211.67 L1581.23 1211.67 L1580.65 1211.67 L1580.06 1211.67 L1579.47 1211.67 L1578.89 1211.67 L1578.3 1211.67 L1577.72 1211.67 L1577.13 1211.67 L1576.54 1211.67 L1575.96 1211.67 L1575.37 1211.67 L1574.78 1211.67 L1574.2 1211.67 L1573.61 1211.67 L1573.02 1211.67 L1572.44 1211.67 L1571.85 1211.67 L1571.27 1211.67 L1570.68 1211.67 L1570.09 1211.67 L1569.51 1211.67 L1568.92 1211.67 L1568.33 1211.67 L1567.75 1211.67 L1567.16 1211.67 L1566.57 1211.67 L1565.99 1211.67 L1565.4 1211.67 L1564.81 1211.67 L1564.23 1211.67 L1563.64 1211.67 L1563.06 1211.67 L1562.47 1211.67 L1561.88 1211.67 L1561.3 1211.67 L1560.71 1211.67 L1560.12 1211.67 L1559.54 1211.67 L1558.95 1211.67 L1558.36 1211.67 L1557.78 1211.67 L1557.19 1211.67 L1556.6 1211.67 L1556.02 1211.67 L1555.43 1211.67 L1554.85 1211.67 L1554.26 1211.67 L1553.67 1211.67 L1553.09 1211.67 L1552.5 1211.67 L1551.91 1211.67 L1551.33 1211.67 L1550.74 1211.67 L1550.15 1211.67 L1549.57 1211.67 L1548.98 1211.67 L1548.4 1211.67 L1547.81 1211.67 L1547.22 1211.67 L1546.64 1211.67 L1546.05 1211.67 L1545.46 1211.67 L1544.88 1211.67 L1544.29 1211.67 L1543.7 1211.67 L1543.12 1211.67 L1542.53 1211.67 L1541.94 1211.67 L1541.36 1211.67 L1540.77 1211.67 L1540.19 1211.67 L1539.6 1211.67 L1539.01 1211.67 L1538.43 1211.67 L1537.84 1211.67 L1537.25 1211.67 L1536.67 1211.67 L1536.08 1211.67 L1535.49 1211.67 L1534.91 1211.67 L1534.32 1211.67 L1533.73 1211.67 L1533.15 1211.67 L1532.56 1211.67 L1531.98 1211.67 L1531.39 1211.67 L1530.8 1211.67 L1530.22 1211.67 L1529.63 1211.67 L1529.04 1211.67 L1528.46 1211.67 L1527.87 1211.67 L1527.28 1211.67 L1526.7 1211.67 L1526.11 1211.67 L1525.52 1211.67 L1524.94 1211.67 L1524.35 1211.67 L1523.77 1211.67 L1523.18 1211.67 L1522.59 1211.67 L1522.01 1211.67 L1521.42 1211.67 L1520.83 1211.67 L1520.25 1211.67 L1519.66 1211.67 L1519.07 1211.67 L1518.49 1211.67 L1517.9 1211.67 L1517.32 1211.67 L1516.73 1211.67 L1516.14 1211.67 L1515.56 1211.67 L1514.97 1211.67 L1514.38 1211.67 L1513.8 1211.67 L1513.21 1211.67 L1512.62 1211.67 L1512.04 1211.67 L1511.45 1211.67 L1510.86 1211.67 L1510.28 1211.67 L1509.69 1211.67 L1509.11 1211.67 L1508.52 1211.67 L1507.93 1211.67 L1507.35 1211.67 L1506.76 1211.67 L1506.17 1211.67 L1505.59 1211.67 L1505 1211.67 L1504.41 1211.67 L1503.83 1211.67 L1503.24 1211.67 L1502.65 1211.67 L1502.07 1211.67 L1501.48 1211.67 L1500.9 1211.67 L1500.31 1211.67 L1499.72 1211.67 L1499.14 1211.67 L1498.55 1211.67 L1497.96 1211.67 L1497.38 1211.67 L1496.79 1211.67 L1496.2 1211.67 L1495.62 1211.67 L1495.03 1211.67 L1494.45 1211.67 L1493.86 1211.67 L1493.27 1211.67 L1492.69 1211.67 L1492.1 1211.67 L1491.51 1211.67 L1490.93 1211.67 L1490.34 1211.67 L1489.75 1211.67 L1489.17 1211.67 L1488.58 1211.67 L1487.99 1211.67 L1487.41 1211.67 L1486.82 1211.67 L1486.24 1211.67 L1485.65 1211.67 L1485.06 1211.67 L1484.48 1211.67 L1483.89 1211.67 L1483.3 1211.67 L1482.72 1211.67 L1482.13 1211.67 L1481.54 1211.67 L1480.96 1211.67 L1480.37 1211.67 L1479.78 1211.67 L1479.2 1211.67 L1478.61 1211.67 L1478.03 1211.67 L1477.44 1211.67 L1476.85 1211.67 L1476.27 1211.67 L1475.68 1211.67 L1475.09 1211.67 L1474.51 1211.67 L1473.92 1211.67 L1473.33 1211.67 L1472.75 1211.67 L1472.16 1211.67 L1471.57 1211.67 L1470.99 1211.67 L1470.4 1211.67 L1469.82 1211.67 L1469.23 1211.67 L1468.64 1211.67 L1468.06 1211.67 L1467.47 1211.67 L1466.88 1211.67 L1466.3 1211.67 L1465.71 1211.67 L1465.12 1211.67 L1464.54 1211.67 L1463.95 1211.67 L1463.37 1211.67 L1462.78 1211.67 L1462.19 1211.67 L1461.61 1211.67 L1461.02 1211.67 L1460.43 1211.67 L1459.85 1211.67 L1459.26 1211.67 L1458.67 1211.67 L1458.09 1211.67 L1457.5 1211.67 L1456.91 1211.67 L1456.33 1211.67 L1455.74 1211.67 L1455.16 1211.67 L1454.57 1211.67 L1453.98 1211.67 L1453.4 1211.67 L1452.81 1211.67 L1452.22 1211.67 L1451.64 1211.67 L1451.05 1211.67 L1450.46 1211.67 L1449.88 1211.67 L1449.29 1211.67 L1448.7 1211.67 L1448.12 1211.67 L1447.53 1211.67 L1446.95 1211.67 L1446.36 1211.67 L1445.77 1211.67 L1445.19 1211.67 L1444.6 1211.67 L1444.01 1211.67 L1443.43 1211.67 L1442.84 1211.67 L1442.25 1211.67 L1441.67 1211.67 L1441.08 1211.67 L1440.5 1211.67 L1439.91 1211.67 L1439.32 1211.67 L1438.74 1211.67 L1438.15 1211.67 L1437.56 1211.67 L1436.98 1211.67 L1436.39 1211.67 L1435.8 1211.67 L1435.22 1211.67 L1434.63 1211.67 L1434.04 1211.67 L1433.46 1211.67 L1432.87 1211.67 L1432.29 1211.67 L1431.7 1211.67 L1431.11 1211.67 L1430.53 1211.67 L1429.94 1211.67 L1429.35 1211.67 L1428.77 1211.67 L1428.18 1211.67 L1427.59 1211.67 L1427.01 1211.67 L1426.42 1211.67 L1425.83 1211.67 L1425.25 1211.67 L1424.66 1211.67 L1424.08 1211.67 L1423.49 1211.67 L1422.9 1211.67 L1422.32 1211.67 L1421.73 1211.67 L1421.14 1211.67 L1420.56 1211.67 L1419.97 1211.67 L1419.38 1211.67 L1418.8 1211.67 L1418.21 1211.67 L1417.63 1211.67 L1417.04 1211.67 L1416.45 1211.67 L1415.87 1211.67 L1415.28 1211.67 L1414.69 1211.67 L1414.11 1211.67 L1413.52 1211.67 L1412.93 1211.67 L1412.35 1211.67 L1411.76 1211.67 L1411.17 1211.67 L1410.59 1211.67 L1410 1211.67 L1409.42 1211.67 L1408.83 1211.67 L1408.24 1211.67 L1407.66 1211.67 L1407.07 1211.67 L1406.48 1211.67 L1405.9 1211.67 L1405.31 1211.67 L1404.72 1211.67 L1404.14 1211.67 L1403.55 1211.67 L1402.96 1211.67 L1402.38 1211.67 L1401.79 1211.67 L1401.21 1211.67 L1400.62 1211.67 L1400.03 1211.67 L1399.45 1211.67 L1398.86 1211.67 L1398.27 1211.67 L1397.69 1211.67 L1397.1 1211.67 L1396.51 1211.67 L1395.93 1211.67 L1395.34 1211.67 L1394.75 1211.67 L1394.17 1211.67 L1393.58 1211.67 L1393 1211.67 L1392.41 1211.67 L1391.82 1211.67 L1391.24 1211.67 L1390.65 1211.67 L1390.06 1211.67 L1389.48 1211.67 L1388.89 1211.67 L1388.3 1211.67 L1387.72 1211.67 L1387.13 1211.67 L1386.55 1211.67 L1385.96 1211.67 L1385.37 1211.67 L1384.79 1211.67 L1384.2 1211.67 L1383.61 1211.67 L1383.03 1211.67 L1382.44 1211.67 L1381.85 1211.67 L1381.27 1211.67 L1380.68 1211.67 L1380.09 1211.67 L1379.51 1211.67 L1378.92 1211.67 L1378.34 1211.67 L1377.75 1211.67 L1377.16 1211.67 L1376.58 1211.67 L1375.99 1211.67 L1375.4 1211.67 L1374.82 1211.67 L1374.23 1211.67 L1373.64 1211.67 L1373.06 1211.67 L1372.47 1211.67 L1371.88 1211.67 L1371.3 1211.67 L1370.71 1211.67 L1370.13 1211.67 L1369.54 1211.67 L1368.95 1211.67 L1368.37 1211.67 L1367.78 1211.67 L1367.19 1211.67 L1366.61 1211.67 L1366.02 1211.67 L1365.43 1211.67 L1364.85 1211.67 L1364.26 1211.67 L1363.68 1211.67 L1363.09 1211.67 L1362.5 1211.67 L1361.92 1211.67 L1361.33 1211.67 L1360.74 1211.67 L1360.16 1211.67 L1359.57 1211.67 L1358.98 1211.67 L1358.4 1211.67 L1357.81 1211.67 L1357.22 1211.67 L1356.64 1211.67 L1356.05 1211.67 L1355.47 1211.67 L1354.88 1211.67 L1354.29 1211.67 L1353.71 1211.67 L1353.12 1211.67 L1352.53 1211.67 L1351.95 1211.67 L1351.36 1211.67 L1350.77 1211.67 L1350.19 1211.67 L1349.6 1211.67 L1349.01 1211.67 L1348.43 1211.67 L1347.84 1211.67 L1347.26 1211.67 L1346.67 1211.67 L1346.08 1211.67 L1345.5 1211.67 L1344.91 1211.67 L1344.32 1211.67 L1343.74 1211.67 L1343.15 1211.67 L1342.56 1211.67 L1341.98 1211.67 L1341.39 1211.67 L1340.8 1211.67 L1340.22 1211.67 L1339.63 1211.67 L1339.05 1211.67 L1338.46 1211.67 L1337.87 1211.67 L1337.29 1211.67 L1336.7 1211.67 L1336.11 1211.67 L1335.53 1211.67 L1334.94 1211.67 L1334.35 1211.67 L1333.77 1211.67 L1333.18 1211.67 L1332.6 1211.67 L1332.01 1211.67 L1331.42 1211.67 L1330.84 1211.67 L1330.25 1211.67 L1329.66 1211.67 L1329.08 1211.67 L1328.49 1211.67 L1327.9 1211.67 L1327.32 1211.67 L1326.73 1211.67 L1326.14 1211.67 L1325.56 1211.67 L1324.97 1211.67 L1324.39 1211.67 L1323.8 1211.67 L1323.21 1211.67 L1322.63 1211.67 L1322.04 1211.67 L1321.45 1211.67 L1320.87 1211.67 L1320.28 1211.67 L1319.69 1211.67 L1319.11 1211.67 L1318.52 1211.67 L1317.93 1211.67 L1317.35 1211.67 L1316.76 1211.67 L1316.18 1211.67 L1315.59 1211.67 L1315 1211.67 L1314.42 1211.67 L1313.83 1211.67 L1313.24 1211.67 L1312.66 1211.67 L1312.07 1211.67 L1311.48 1211.67 L1310.9 1211.67 L1310.31 1211.67 L1309.73 1211.67 L1309.14 1211.67 L1308.55 1211.67 L1307.97 1211.67 L1307.38 1211.67 L1306.79 1211.67 L1306.21 1211.67 L1305.62 1211.67 L1305.03 1211.67 L1304.45 1211.67 L1303.86 1211.67 L1303.27 1211.67 L1302.69 1211.67 L1302.1 1211.67 L1301.52 1211.67 L1300.93 1211.67 L1300.34 1211.67 L1299.76 1211.67 L1299.17 1211.67 L1298.58 1211.67 L1298 1211.67 L1297.41 1211.67 L1296.82 1211.67 L1296.24 1211.67 L1295.65 1211.67 L1295.06 1211.67 L1294.48 1211.67 L1293.89 1211.67 L1293.31 1211.67 L1292.72 1211.67 L1292.13 1211.67 L1291.55 1211.67 L1290.96 1211.67 L1290.37 1211.67 L1289.79 1211.67 L1289.2 1211.67 L1288.61 1211.67 L1288.03 1211.67 L1287.44 1211.67 L1286.86 1211.67 L1286.27 1211.67 L1285.68 1211.67 L1285.1 1211.67 L1284.51 1211.67 L1283.92 1211.67 L1283.34 1211.67 L1282.75 1211.67 L1282.16 1211.67 L1281.58 1211.67 L1280.99 1211.67 L1280.4 1211.67 L1279.82 1211.67 L1279.23 1211.67 L1278.65 1211.67 L1278.06 1211.67 L1277.47 1211.67 L1276.89 1211.67 L1276.3 1211.67 L1275.71 1211.67 L1275.13 1211.67 L1274.54 1211.67 L1273.95 1211.67 L1273.37 1211.67 L1272.78 1211.67 L1272.19 1211.67 L1271.61 1211.67 L1271.02 1211.67 L1270.44 1211.67 L1269.85 1211.67 L1269.26 1211.67 L1268.68 1211.67 L1268.09 1211.67 L1267.5 1211.67 L1266.92 1211.67 L1266.33 1211.67 L1265.74 1211.67 L1265.16 1211.67 L1264.57 1211.67 L1263.98 1211.67 L1263.4 1211.67 L1262.81 1211.67 L1262.23 1211.67 L1261.64 1211.67 L1261.05 1211.67 L1260.47 1211.67 L1259.88 1211.67 L1259.29 1211.67 L1258.71 1211.67 L1258.12 1211.67 L1257.53 1211.67 L1256.95 1211.67 L1256.36 1211.67 L1255.78 1211.67 L1255.19 1211.67 L1254.6 1211.67 L1254.02 1211.67 L1253.43 1211.67 L1252.84 1211.67 L1252.26 1211.67 L1251.67 1211.67 L1251.08 1211.67 L1250.5 1211.67 L1249.91 1211.67 L1249.32 1211.67 L1248.74 1211.67 L1248.15 1211.67 L1247.57 1211.67 L1246.98 1211.67 L1246.39 1211.67 L1245.81 1211.67 L1245.22 1211.67 L1244.63 1211.67 L1244.05 1211.67 L1243.46 1211.67 L1242.87 1211.67 L1242.29 1211.67 L1241.7 1211.67 L1241.11 1211.67 L1240.53 1211.67 L1239.94 1211.67 L1239.36 1211.67 L1238.77 1211.67 L1238.18 1211.67 L1237.6 1211.67 L1237.01 1211.67 L1236.42 1211.67 L1235.84 1211.67 L1235.25 1211.67 L1234.66 1211.67 L1234.08 1211.67 L1233.49 1211.67 L1232.91 1211.67 L1232.32 1211.67 L1231.73 1211.67 L1231.15 1211.67 L1230.56 1211.67 L1229.97 1211.67 L1229.39 1211.67 L1228.8 1211.67 L1228.21 1211.67 L1227.63 1211.67 L1227.04 1211.67 L1226.45 1211.67 L1225.87 1211.67 L1225.28 1211.67 L1224.7 1211.67 L1224.11 1211.67 L1223.52 1211.67 L1222.94 1211.67 L1222.35 1211.67 L1221.76 1211.67 L1221.18 1211.67 L1220.59 1211.67 L1220 1211.67 L1219.42 1211.67 L1218.83 1211.67 L1218.24 1211.67 L1217.66 1211.67 L1217.07 1211.67 L1216.49 1211.67 L1215.9 1211.67 L1215.31 1211.67 L1214.73 1211.67 L1214.14 1211.67 L1213.55 1211.67 L1212.97 1211.67 L1212.38 1211.67 L1211.79 1211.67 L1211.21 1211.67 L1210.62 1211.67 L1210.03 1211.67 L1209.45 1211.67 L1208.86 1211.67 L1208.28 1211.67 L1207.69 1211.67 L1207.1 1211.67 L1206.52 1211.67 L1205.93 1211.67 L1205.34 1211.67 L1204.76 1211.67 L1204.17 1211.67 L1203.58 1211.67 L1203 1211.67 L1202.41 1211.67 L1201.83 1211.67 L1201.24 1211.67 L1200.65 1211.67 L1200.07 1211.67 L1199.48 1211.67 L1198.89 1211.67 L1198.31 1211.67 L1197.72 1211.67 L1197.13 1211.67 L1196.55 1211.67 L1195.96 1211.67 L1195.37 1211.67 L1194.79 1211.67 L1194.2 1211.67 L1193.62 1211.67 L1193.03 1211.67 L1192.44 1211.67 L1191.86 1211.67 L1191.27 1211.67 L1190.68 1211.67 L1190.1 1211.67 L1189.51 1211.67 L1188.92 1211.67 L1188.34 1211.67 L1187.75 1211.67 L1187.16 1211.67 L1186.58 1211.67 L1185.99 1211.67 L1185.41 1211.67 L1184.82 1211.67 L1184.23 1211.67 L1183.65 1211.67 L1183.06 1211.67 L1182.47 1211.67 L1181.89 1211.67 L1181.3 1211.67 L1180.71 1211.67 L1180.13 1211.67 L1179.54 1211.67 L1178.96 1211.67 L1178.37 1211.67 L1177.78 1211.67 L1177.2 1211.67 L1176.61 1211.67 L1176.02 1211.67 L1175.44 1211.67 L1174.85 1211.67 L1174.26 1211.67 L1173.68 1211.67 L1173.09 1211.67 L1172.5 1211.67 L1171.92 1211.67 L1171.33 1211.67 L1170.75 1211.67 L1170.16 1211.67 L1169.57 1211.67 L1168.99 1211.67 L1168.4 1211.67 L1167.81 1211.67 L1167.23 1211.67 L1166.64 1211.67 L1166.05 1211.67 L1165.47 1211.67 L1164.88 1211.67 L1164.29 1211.67 L1163.71 1211.67 L1163.12 1211.67 L1162.54 1211.67 L1161.95 1211.67 L1161.36 1211.67 L1160.78 1211.67 L1160.19 1211.67 L1159.6 1211.67 L1159.02 1211.67 L1158.43 1211.67 L1157.84 1211.67 L1157.26 1211.67 L1156.67 1211.67 L1156.09 1211.67 L1155.5 1211.67 L1154.91 1211.67 L1154.33 1211.67 L1153.74 1211.67 L1153.15 1211.67 L1152.57 1211.67 L1151.98 1211.67 L1151.39 1211.67 L1150.81 1211.67 L1150.22 1211.67 L1149.63 1211.67 L1149.05 1211.67 L1148.46 1211.67 L1147.88 1211.67 L1147.29 1211.67 L1146.7 1211.67 L1146.12 1211.67 L1145.53 1211.67 L1144.94 1211.67 L1144.36 1211.67 L1143.77 1211.67 L1143.18 1211.67 L1142.6 1211.67 L1142.01 1211.67 L1141.42 1211.67 L1140.84 1211.67 L1140.25 1211.67 L1139.67 1211.67 L1139.08 1211.67 L1138.49 1211.67 L1137.91 1211.67 L1137.32 1211.67 L1136.73 1211.67 L1136.15 1211.67 L1135.56 1211.67 L1134.97 1211.67 L1134.39 1211.67 L1133.8 1211.67 L1133.21 1211.67 L1132.63 1211.67 L1132.04 1211.67 L1131.46 1211.67 L1130.87 1211.67 L1130.28 1211.67 L1129.7 1211.67 L1129.11 1211.67 L1128.52 1211.67 L1127.94 1211.67 L1127.35 1211.67 L1126.76 1211.67 L1126.18 1211.67 L1125.59 1211.67 L1125.01 1211.67 L1124.42 1211.67 L1123.83 1211.67 L1123.25 1211.67 L1122.66 1211.67 L1122.07 1211.67 L1121.49 1211.67 L1120.9 1211.67 L1120.31 1211.67 L1119.73 1211.67 L1119.14 1211.67 L1118.55 1211.67 L1117.97 1211.67 L1117.38 1211.67 L1116.8 1211.67 L1116.21 1211.67 L1115.62 1211.67 L1115.04 1211.67 L1114.45 1211.67 L1113.86 1211.67 L1113.28 1211.67 L1112.69 1211.67 L1112.1 1211.67 L1111.52 1211.67 L1110.93 1211.67 L1110.34 1211.67 L1109.76 1211.67 L1109.17 1211.67 L1108.59 1211.67 L1108 1211.67 L1107.41 1211.67 L1106.83 1211.67 L1106.24 1211.67 L1105.65 1211.67 L1105.07 1211.67 L1104.48 1211.67 L1103.89 1211.67 L1103.31 1211.67 L1102.72 1211.67 L1102.14 1211.67 L1101.55 1211.67 L1100.96 1211.67 L1100.38 1211.67 L1099.79 1211.67 L1099.2 1211.67 L1098.62 1211.67 L1098.03 1211.67 L1097.44 1211.67 L1096.86 1211.67 L1096.27 1211.67 L1095.68 1211.67 L1095.1 1211.67 L1094.51 1211.67 L1093.93 1211.67 L1093.34 1211.67 L1092.75 1211.67 L1092.17 1211.67 L1091.58 1211.67 L1090.99 1211.67 L1090.41 1211.67 L1089.82 1211.67 L1089.23 1211.67 L1088.65 1211.67 L1088.06 1211.67 L1087.47 1211.67 L1086.89 1211.67 L1086.3 1211.67 L1085.72 1211.67 L1085.13 1211.67 L1084.54 1211.67 L1083.96 1211.67 L1083.37 1211.67 L1082.78 1211.67 L1082.2 1211.67 L1081.61 1211.67 L1081.02 1211.67 L1080.44 1211.67 L1079.85 1211.67 L1079.26 1211.67 L1078.68 1211.67 L1078.09 1211.67 L1077.51 1211.67 L1076.92 1211.67 L1076.33 1211.67 L1075.75 1211.67 L1075.16 1211.67 L1074.57 1211.67 L1073.99 1211.67 L1073.4 1211.67 L1072.81 1211.67 L1072.23 1211.67 L1071.64 1211.67 L1071.06 1211.67 L1070.47 1211.67 L1069.88 1211.67 L1069.3 1211.67 L1068.71 1211.67 L1068.12 1211.67 L1067.54 1211.67 L1066.95 1211.67 L1066.36 1211.67 L1065.78 1211.67 L1065.19 1211.67 L1064.6 1211.67 L1064.02 1211.67 L1063.43 1211.67 L1062.85 1211.67 L1062.26 1211.67 L1061.67 1211.67 L1061.09 1211.67 L1060.5 1211.67 L1059.91 1211.67 L1059.33 1211.67 L1058.74 1211.67 L1058.15 1211.67 L1057.57 1211.67 L1056.98 1211.67 L1056.39 1211.67 L1055.81 1211.67 L1055.22 1211.67 L1054.64 1211.67 L1054.05 1211.67 L1053.46 1211.67 L1052.88 1211.67 L1052.29 1211.67 L1051.7 1211.67 L1051.12 1211.67 L1050.53 1211.67 L1049.94 1211.67 L1049.36 1211.67 L1048.77 1211.67 L1048.19 1211.67 L1047.6 1211.67 L1047.01 1211.67 L1046.43 1211.67 L1045.84 1211.67 L1045.25 1211.67 L1044.67 1211.67 L1044.08 1211.67 L1043.49 1211.67 L1042.91 1211.67 L1042.32 1211.67 L1041.73 1211.67 L1041.15 1211.67 L1040.56 1211.67 L1039.98 1211.67 L1039.39 1211.67 L1038.8 1211.67 L1038.22 1211.67 L1037.63 1211.67 L1037.04 1211.67 L1036.46 1211.67 L1035.87 1211.67 L1035.28 1211.67 L1034.7 1211.67 L1034.11 1211.67 L1033.52 1211.67 L1032.94 1211.67 L1032.35 1211.67 L1031.77 1211.67 L1031.18 1211.67 L1030.59 1211.67 L1030.01 1211.67 L1029.42 1211.67 L1028.83 1211.67 L1028.25 1211.67 L1027.66 1211.67 L1027.07 1211.67 L1026.49 1211.67 L1025.9 1211.67 L1025.32 1211.67 L1024.73 1211.67 L1024.14 1211.67 L1023.56 1211.67 L1022.97 1211.67 L1022.38 1211.67 L1021.8 1211.67 L1021.21 1211.67 L1020.62 1211.67 L1020.04 1211.67 L1019.45 1211.67 L1018.86 1211.67 L1018.28 1211.67 L1017.69 1211.67 L1017.11 1211.67 L1016.52 1211.67 L1015.93 1211.67 L1015.35 1211.67 L1014.76 1211.67 L1014.17 1211.67 L1013.59 1211.67 L1013 1211.67 L1012.41 1211.67 L1011.83 1211.67 L1011.24 1211.67 L1010.65 1211.67 L1010.07 1211.67 L1009.48 1211.67 L1008.9 1211.67 L1008.31 1211.67 L1007.72 1211.67 L1007.14 1211.67 L1006.55 1211.67 L1005.96 1211.67 L1005.38 1211.67 L1004.79 1211.67 L1004.2 1211.67 L1003.62 1211.67 L1003.03 1211.67 L1002.44 1211.67 L1001.86 1211.67 L1001.27 1211.67 L1000.69 1211.67 L1000.1 1211.67 L999.513 1211.67 L998.926 1211.67 L998.34 1211.67 L997.754 1211.67 L997.167 1211.67 L996.581 1211.67 L995.994 1211.67 L995.408 1211.67 L994.822 1211.67 L994.235 1211.67 L993.649 1211.67 L993.062 1211.67 L992.476 1211.67 L991.889 1211.67 L991.303 1211.67 L990.717 1211.67 L990.13 1211.67 L989.544 1211.67 L988.957 1211.67 L988.371 1211.67 L987.785 1211.67 L987.198 1211.67 L986.612 1211.67 L986.025 1211.67  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.01 986.612,1212.01 987.198,1212.01 987.785,1212.01 988.371,1212.01 988.957,1212.01 989.544,1212.01 990.13,1212.01 990.717,1212.01 991.303,1212.01 991.889,1212.01 992.476,1212.01 993.062,1212.01 993.649,1212.01 994.235,1212.01 994.822,1212.01 995.408,1212.01 995.994,1212.01 996.581,1212.01 997.167,1212.01 997.754,1212.01 998.34,1212.01 998.926,1212.01 999.513,1212.01 1000.1,1212.01 1000.69,1212.01 1001.27,1212.01 1001.86,1212.01 1002.44,1212.01 1003.03,1212.01 1003.62,1212.01 1004.2,1212.01 1004.79,1212.01 1005.38,1212.01 1005.96,1212.01 1006.55,1212.01 1007.14,1212.01 1007.72,1212.01 1008.31,1212.01 1008.9,1212.01 1009.48,1212.01 1010.07,1212.01 1010.65,1212.01 1011.24,1212.01 1011.83,1212.01 1012.41,1212.01 1013,1212.01 1013.59,1212.01 1014.17,1212.01 1014.76,1212.01 1015.35,1212.01 1015.93,1212.01 1016.52,1212.01 1017.11,1212.01 1017.69,1212.01 1018.28,1212.01 1018.86,1212.01 1019.45,1212.01 1020.04,1212.01 1020.62,1212.01 1021.21,1212.01 1021.8,1212.01 1022.38,1212.01 1022.97,1212.01 1023.56,1212.01 1024.14,1212.01 1024.73,1212.01 1025.32,1212.01 1025.9,1212.01 1026.49,1212.01 1027.07,1212.01 1027.66,1212.01 1028.25,1212.01 1028.83,1212.01 1029.42,1212.01 1030.01,1212.01 1030.59,1212.01 1031.18,1212.01 1031.77,1212.01 1032.35,1212.01 1032.94,1212.01 1033.52,1212.01 1034.11,1212.01 1034.7,1212.01 1035.28,1212.01 1035.87,1212.01 1036.46,1212.01 1037.04,1212.01 1037.63,1212.01 1038.22,1212.01 1038.8,1212.01 1039.39,1212.01 1039.98,1212.01 1040.56,1212.01 1041.15,1212.01 1041.73,1212.01 1042.32,1212.01 1042.91,1212.01 1043.49,1212.01 1044.08,1212.01 1044.67,1212.01 1045.25,1212.01 1045.84,1212.01 1046.43,1212.01 1047.01,1212.01 1047.6,1212.01 1048.19,1212.01 1048.77,1212.01 1049.36,1212.01 1049.94,1212.01 1050.53,1212.01 1051.12,1212.01 1051.7,1212.01 1052.29,1212.01 1052.88,1212.01 1053.46,1212.01 1054.05,1212.01 1054.64,1212.01 1055.22,1212.01 1055.81,1212.01 1056.39,1212.01 1056.98,1212.01 1057.57,1212.01 1058.15,1212.01 1058.74,1212.01 1059.33,1212.01 1059.91,1212.01 1060.5,1212.01 1061.09,1212.01 1061.67,1212.01 1062.26,1212.01 1062.85,1212.01 1063.43,1212.01 1064.02,1212.01 1064.6,1212.01 1065.19,1212.01 1065.78,1212.01 1066.36,1212.01 1066.95,1212.01 1067.54,1212.01 1068.12,1212.01 1068.71,1212.01 1069.3,1212.01 1069.88,1212.01 1070.47,1212.01 1071.06,1212.01 1071.64,1212.01 1072.23,1212.01 1072.81,1212.01 1073.4,1212.01 1073.99,1212.01 1074.57,1212.01 1075.16,1212.01 1075.75,1212.01 1076.33,1212.01 1076.92,1212.01 1077.51,1212.01 1078.09,1212.01 1078.68,1212.01 1079.26,1212.01 1079.85,1212.01 1080.44,1212.01 1081.02,1212.01 1081.61,1212.01 1082.2,1212.01 1082.78,1212.01 1083.37,1212.01 1083.96,1212.01 1084.54,1212.01 1085.13,1212.01 1085.72,1212.01 1086.3,1212.01 1086.89,1212.01 1087.47,1212.01 1088.06,1212.01 1088.65,1212.01 1089.23,1212.01 1089.82,1212.01 1090.41,1212.01 1090.99,1212.01 1091.58,1212.01 1092.17,1212.01 1092.75,1212.01 1093.34,1212.01 1093.93,1212.01 1094.51,1212.01 1095.1,1212.01 1095.68,1212.01 1096.27,1212.01 1096.86,1212.01 1097.44,1212.01 1098.03,1212.01 1098.62,1212.01 1099.2,1212.01 1099.79,1212.01 1100.38,1212.01 1100.96,1212.01 1101.55,1212.01 1102.14,1212.01 1102.72,1212.01 1103.31,1212.01 1103.89,1212.01 1104.48,1212.01 1105.07,1212.01 1105.65,1212.01 1106.24,1212.01 1106.83,1212.01 1107.41,1212.01 1108,1212.01 1108.59,1212.01 1109.17,1212.01 1109.76,1212.01 1110.34,1212.01 1110.93,1212.01 1111.52,1212.01 1112.1,1212.01 1112.69,1212.01 1113.28,1212.01 1113.86,1212.01 1114.45,1212.01 1115.04,1212.01 1115.62,1212.01 1116.21,1212.01 1116.8,1212.01 1117.38,1212.01 1117.97,1212.01 1118.55,1212.01 1119.14,1212.01 1119.73,1212.01 1120.31,1212.01 1120.9,1212.01 1121.49,1212.01 1122.07,1212.01 1122.66,1212.01 1123.25,1212.01 1123.83,1212.01 1124.42,1212.01 1125.01,1212.01 1125.59,1212.01 1126.18,1212.01 1126.76,1212.01 1127.35,1212.01 1127.94,1212.01 1128.52,1212.01 1129.11,1212.01 1129.7,1212.01 1130.28,1212.01 1130.87,1212.01 1131.46,1212.01 1132.04,1212.01 1132.63,1212.01 1133.21,1212.01 1133.8,1212.01 1134.39,1212.01 1134.97,1212.01 1135.56,1212.01 1136.15,1212.01 1136.73,1212.01 1137.32,1212.01 1137.91,1212.01 1138.49,1212.01 1139.08,1212.01 1139.67,1212.01 1140.25,1212.01 1140.84,1212.01 1141.42,1212.01 1142.01,1212.01 1142.6,1212.01 1143.18,1212.01 1143.77,1212.01 1144.36,1212.01 1144.94,1212.01 1145.53,1212.01 1146.12,1212.01 1146.7,1212.01 1147.29,1212.01 1147.88,1212.01 1148.46,1212.01 1149.05,1212.01 1149.63,1212.01 1150.22,1212.01 1150.81,1212.01 1151.39,1212.01 1151.98,1212.01 1152.57,1212.01 1153.15,1212.01 1153.74,1212.01 1154.33,1212.01 1154.91,1212.01 1155.5,1212.01 1156.09,1212.01 1156.67,1212.01 1157.26,1212.01 1157.84,1212.01 1158.43,1212.01 1159.02,1212.01 1159.6,1212.01 1160.19,1212.01 1160.78,1212.01 1161.36,1212.01 1161.95,1212.01 1162.54,1212.01 1163.12,1212.01 1163.71,1212.01 1164.29,1212.01 1164.88,1212.01 1165.47,1212.01 1166.05,1212.01 1166.64,1212.01 1167.23,1212.01 1167.81,1212.01 1168.4,1212.01 1168.99,1212.01 1169.57,1212.01 1170.16,1212.01 1170.75,1212.01 1171.33,1212.01 1171.92,1212.01 1172.5,1212.01 1173.09,1212.01 1173.68,1212.01 1174.26,1212.01 1174.85,1212.01 1175.44,1212.01 1176.02,1212.01 1176.61,1212.01 1177.2,1212.01 1177.78,1212.01 1178.37,1212.01 1178.96,1212.01 1179.54,1212.01 1180.13,1212.01 1180.71,1212.01 1181.3,1212.01 1181.89,1212.01 1182.47,1212.01 1183.06,1212.01 1183.65,1212.01 1184.23,1212.01 1184.82,1212.01 1185.41,1212.01 1185.99,1212.01 1186.58,1212.01 1187.16,1212.01 1187.75,1212.01 1188.34,1212.01 1188.92,1212.01 1189.51,1212.01 1190.1,1212.01 1190.68,1212.01 1191.27,1212.01 1191.86,1212.01 1192.44,1212.01 1193.03,1212.01 1193.62,1212.01 1194.2,1212.01 1194.79,1212.01 1195.37,1212.01 1195.96,1212.01 1196.55,1212.01 1197.13,1212.01 1197.72,1212.01 1198.31,1212.01 1198.89,1212.01 1199.48,1212.01 1200.07,1212.01 1200.65,1212.01 1201.24,1212.01 1201.83,1212.01 1202.41,1212.01 1203,1212.01 1203.58,1212.01 1204.17,1212.01 1204.76,1212.01 1205.34,1212.01 1205.93,1212.01 1206.52,1212.01 1207.1,1212.01 1207.69,1212.01 1208.28,1212.01 1208.86,1212.01 1209.45,1212.01 1210.03,1212.01 1210.62,1212.01 1211.21,1212.01 1211.79,1212.01 1212.38,1212.01 1212.97,1212.01 1213.55,1212.01 1214.14,1212.01 1214.73,1212.01 1215.31,1212.01 1215.9,1212.01 1216.49,1212.01 1217.07,1212.01 1217.66,1212.01 1218.24,1212.01 1218.83,1212.01 1219.42,1212.01 1220,1212.01 1220.59,1212.01 1221.18,1212.01 1221.76,1212.01 1222.35,1212.01 1222.94,1212.01 1223.52,1212.01 1224.11,1212.01 1224.7,1212.01 1225.28,1212.01 1225.87,1212.01 1226.45,1212.01 1227.04,1212.01 1227.63,1212.01 1228.21,1212.01 1228.8,1212.01 1229.39,1212.01 1229.97,1212.01 1230.56,1212.01 1231.15,1212.01 1231.73,1212.01 1232.32,1212.01 1232.91,1212.01 1233.49,1212.01 1234.08,1212.01 1234.66,1212.01 1235.25,1212.01 1235.84,1212.01 1236.42,1212.01 1237.01,1212.01 1237.6,1212.01 1238.18,1212.01 1238.77,1212.01 1239.36,1212.01 1239.94,1212.01 1240.53,1212.01 1241.11,1212.01 1241.7,1212.01 1242.29,1212.01 1242.87,1212.01 1243.46,1212.01 1244.05,1212.01 1244.63,1212.01 1245.22,1212.01 1245.81,1212.01 1246.39,1212.01 1246.98,1212.01 1247.57,1212.01 1248.15,1212.01 1248.74,1212.01 1249.32,1212.01 1249.91,1212.01 1250.5,1212.01 1251.08,1212.01 1251.67,1212.01 1252.26,1212.01 1252.84,1212.01 1253.43,1212.01 1254.02,1212.01 1254.6,1212.01 1255.19,1212.01 1255.78,1212.01 1256.36,1212.01 1256.95,1212.01 1257.53,1212.01 1258.12,1212.01 1258.71,1212.01 1259.29,1212.01 1259.88,1212.01 1260.47,1212.01 1261.05,1212.01 1261.64,1212.01 1262.23,1212.01 1262.81,1212.01 1263.4,1212.01 1263.98,1212.01 1264.57,1212.01 1265.16,1212.01 1265.74,1212.01 1266.33,1212.01 1266.92,1212.01 1267.5,1212.01 1268.09,1212.01 1268.68,1212.01 1269.26,1212.01 1269.85,1212.01 1270.44,1212.01 1271.02,1212.01 1271.61,1212.01 1272.19,1212.01 1272.78,1212.01 1273.37,1212.01 1273.95,1212.01 1274.54,1212.01 1275.13,1212.01 1275.71,1212.01 1276.3,1212.01 1276.89,1212.01 1277.47,1212.01 1278.06,1212.01 1278.65,1212.01 1279.23,1212.01 1279.82,1212.01 1280.4,1212.01 1280.99,1212.01 1281.58,1212.01 1282.16,1212.01 1282.75,1212.01 1283.34,1212.01 1283.92,1212.01 1284.51,1212.01 1285.1,1212.01 1285.68,1212.01 1286.27,1212.01 1286.86,1212.01 1287.44,1212.01 1288.03,1212.01 1288.61,1212.01 1289.2,1212.01 1289.79,1212.01 1290.37,1212.01 1290.96,1212.01 1291.55,1212.01 1292.13,1212.01 1292.72,1212.01 1293.31,1212.01 1293.89,1212.01 1294.48,1212.01 1295.06,1212.01 1295.65,1212.01 1296.24,1212.01 1296.82,1212.01 1297.41,1212.01 1298,1212.01 1298.58,1212.01 1299.17,1212.01 1299.76,1212.01 1300.34,1212.01 1300.93,1212.01 1301.52,1212.01 1302.1,1212.01 1302.69,1212.01 1303.27,1212.01 1303.86,1212.01 1304.45,1212.01 1305.03,1212.01 1305.62,1212.01 1306.21,1212.01 1306.79,1212.01 1307.38,1212.01 1307.97,1212.01 1308.55,1212.01 1309.14,1212.01 1309.73,1212.01 1310.31,1212.01 1310.9,1212.01 1311.48,1212.01 1312.07,1212.01 1312.66,1212.01 1313.24,1212.01 1313.83,1212.01 1314.42,1212.01 1315,1212.01 1315.59,1212.01 1316.18,1212.01 1316.76,1212.01 1317.35,1212.01 1317.93,1212.01 1318.52,1212.01 1319.11,1212.01 1319.69,1212.01 1320.28,1212.01 1320.87,1212.01 1321.45,1212.01 1322.04,1212.01 1322.63,1212.01 1323.21,1212.01 1323.8,1212.01 1324.39,1212.01 1324.97,1212.01 1325.56,1212.01 1326.14,1212.01 1326.73,1212.01 1327.32,1212.01 1327.9,1212.01 1328.49,1212.01 1329.08,1212.01 1329.66,1212.01 1330.25,1212.01 1330.84,1212.01 1331.42,1212.01 1332.01,1212.01 1332.6,1212.01 1333.18,1212.01 1333.77,1212.01 1334.35,1212.01 1334.94,1212.01 1335.53,1212.01 1336.11,1212.01 1336.7,1212.01 1337.29,1212.01 1337.87,1212.01 1338.46,1212.01 1339.05,1212.01 1339.63,1212.01 1340.22,1212.01 1340.8,1212.01 1341.39,1212.01 1341.98,1212.01 1342.56,1212.01 1343.15,1212.01 1343.74,1212.01 1344.32,1212.01 1344.91,1212.01 1345.5,1212.01 1346.08,1212.01 1346.67,1212.01 1347.26,1212.01 1347.84,1212.01 1348.43,1212.01 1349.01,1212.01 1349.6,1212.01 1350.19,1212.01 1350.77,1212.01 1351.36,1212.01 1351.95,1212.01 1352.53,1212.01 1353.12,1212.01 1353.71,1212.01 1354.29,1212.01 1354.88,1212.01 1355.47,1212.01 1356.05,1212.01 1356.64,1212.01 1357.22,1212.01 1357.81,1212.01 1358.4,1212.01 1358.98,1212.01 1359.57,1212.01 1360.16,1212.01 1360.74,1212.01 1361.33,1212.01 1361.92,1212.01 1362.5,1212.01 1363.09,1212.01 1363.68,1212.01 1364.26,1212.01 1364.85,1212.01 1365.43,1212.01 1366.02,1212.01 1366.61,1212.01 1367.19,1212.01 1367.78,1212.01 1368.37,1212.01 1368.95,1212.01 1369.54,1212.01 1370.13,1212.01 1370.71,1212.01 1371.3,1212.01 1371.88,1212.01 1372.47,1212.01 1373.06,1212.01 1373.64,1212.01 1374.23,1212.01 1374.82,1212.01 1375.4,1212.01 1375.99,1212.01 1376.58,1212.01 1377.16,1212.01 1377.75,1212.01 1378.34,1212.01 1378.92,1212.01 1379.51,1212.01 1380.09,1212.01 1380.68,1212.01 1381.27,1212.01 1381.85,1212.01 1382.44,1212.01 1383.03,1212.01 1383.61,1212.01 1384.2,1212.01 1384.79,1212.01 1385.37,1212.01 1385.96,1212.01 1386.55,1212.01 1387.13,1212.01 1387.72,1212.01 1388.3,1212.01 1388.89,1212.01 1389.48,1212.01 1390.06,1212.01 1390.65,1212.01 1391.24,1212.01 1391.82,1212.01 1392.41,1212.01 1393,1212.01 1393.58,1212.01 1394.17,1212.01 1394.75,1212.01 1395.34,1212.01 1395.93,1212.01 1396.51,1212.01 1397.1,1212.01 1397.69,1212.01 1398.27,1212.01 1398.86,1212.01 1399.45,1212.01 1400.03,1212.01 1400.62,1212.01 1401.21,1212.01 1401.79,1212.01 1402.38,1212.01 1402.96,1212.01 1403.55,1212.01 1404.14,1212.01 1404.72,1212.01 1405.31,1212.01 1405.9,1212.01 1406.48,1212.01 1407.07,1212.01 1407.66,1212.01 1408.24,1212.01 1408.83,1212.01 1409.42,1212.01 1410,1212.01 1410.59,1212.01 1411.17,1212.01 1411.76,1212.01 1412.35,1212.01 1412.93,1212.01 1413.52,1212.01 1414.11,1212.01 1414.69,1212.01 1415.28,1212.01 1415.87,1212.01 1416.45,1212.01 1417.04,1212.01 1417.63,1212.01 1418.21,1212.01 1418.8,1212.01 1419.38,1212.01 1419.97,1212.01 1420.56,1212.01 1421.14,1212.01 1421.73,1212.01 1422.32,1212.01 1422.9,1212.01 1423.49,1212.01 1424.08,1212.01 1424.66,1212.01 1425.25,1212.01 1425.83,1212.01 1426.42,1212.01 1427.01,1212.01 1427.59,1212.01 1428.18,1212.01 1428.77,1212.01 1429.35,1212.01 1429.94,1212.01 1430.53,1212.01 1431.11,1212.01 1431.7,1212.01 1432.29,1212.01 1432.87,1212.01 1433.46,1212.01 1434.04,1212.01 1434.63,1212.01 1435.22,1212.01 1435.8,1212.01 1436.39,1212.01 1436.98,1212.01 1437.56,1212.01 1438.15,1212.01 1438.74,1212.01 1439.32,1212.01 1439.91,1212.01 1440.5,1212.01 1441.08,1212.01 1441.67,1212.01 1442.25,1212.01 1442.84,1212.01 1443.43,1212.01 1444.01,1212.01 1444.6,1212.01 1445.19,1212.01 1445.77,1212.01 1446.36,1212.01 1446.95,1212.01 1447.53,1212.01 1448.12,1212.01 1448.7,1212.01 1449.29,1212.01 1449.88,1212.01 1450.46,1212.01 1451.05,1212.01 1451.64,1212.01 1452.22,1212.01 1452.81,1212.01 1453.4,1212.01 1453.98,1212.01 1454.57,1212.01 1455.16,1212.01 1455.74,1212.01 1456.33,1212.01 1456.91,1212.01 1457.5,1212.01 1458.09,1212.01 1458.67,1212.01 1459.26,1212.01 1459.85,1212.01 1460.43,1212.01 1461.02,1212.01 1461.61,1212.01 1462.19,1212.01 1462.78,1212.01 1463.37,1212.01 1463.95,1212.01 1464.54,1212.01 1465.12,1212.01 1465.71,1212.01 1466.3,1212.01 1466.88,1212.01 1467.47,1212.01 1468.06,1212.01 1468.64,1212.01 1469.23,1212.01 1469.82,1212.01 1470.4,1212.01 1470.99,1212.01 1471.57,1212.01 1472.16,1212.01 1472.75,1212.01 1473.33,1212.01 1473.92,1212.01 1474.51,1212.01 1475.09,1212.01 1475.68,1212.01 1476.27,1212.01 1476.85,1212.01 1477.44,1212.01 1478.03,1212.01 1478.61,1212.01 1479.2,1212.01 1479.78,1212.01 1480.37,1212.01 1480.96,1212.01 1481.54,1212.01 1482.13,1212.01 1482.72,1212.01 1483.3,1212.01 1483.89,1212.01 1484.48,1212.01 1485.06,1212.01 1485.65,1212.01 1486.24,1212.01 1486.82,1212.01 1487.41,1212.01 1487.99,1212.01 1488.58,1212.01 1489.17,1212.01 1489.75,1212.01 1490.34,1212.01 1490.93,1212.01 1491.51,1212.01 1492.1,1212.01 1492.69,1212.01 1493.27,1212.01 1493.86,1212.01 1494.45,1212.01 1495.03,1212.01 1495.62,1212.01 1496.2,1212.01 1496.79,1212.01 1497.38,1212.01 1497.96,1212.01 1498.55,1212.01 1499.14,1212.01 1499.72,1212.01 1500.31,1212.01 1500.9,1212.01 1501.48,1212.01 1502.07,1212.01 1502.65,1212.01 1503.24,1212.01 1503.83,1212.01 1504.41,1212.01 1505,1212.01 1505.59,1212.01 1506.17,1212.01 1506.76,1212.01 1507.35,1212.01 1507.93,1212.01 1508.52,1212.01 1509.11,1212.01 1509.69,1212.01 1510.28,1212.01 1510.86,1212.01 1511.45,1212.01 1512.04,1212.01 1512.62,1212.01 1513.21,1212.01 1513.8,1212.01 1514.38,1212.01 1514.97,1212.01 1515.56,1212.01 1516.14,1212.01 1516.73,1212.01 1517.32,1212.01 1517.9,1212.01 1518.49,1212.01 1519.07,1212.01 1519.66,1212.01 1520.25,1212.01 1520.83,1212.01 1521.42,1212.01 1522.01,1212.01 1522.59,1212.01 1523.18,1212.01 1523.77,1212.01 1524.35,1212.01 1524.94,1212.01 1525.52,1212.01 1526.11,1212.01 1526.7,1212.01 1527.28,1212.01 1527.87,1212.01 1528.46,1212.01 1529.04,1212.01 1529.63,1212.01 1530.22,1212.01 1530.8,1212.01 1531.39,1212.01 1531.98,1212.01 1532.56,1212.01 1533.15,1212.01 1533.73,1212.01 1534.32,1212.01 1534.91,1212.01 1535.49,1212.01 1536.08,1212.01 1536.67,1212.01 1537.25,1212.01 1537.84,1212.01 1538.43,1212.01 1539.01,1212.01 1539.6,1212.01 1540.19,1212.01 1540.77,1212.01 1541.36,1212.01 1541.94,1212.01 1542.53,1212.01 1543.12,1212.01 1543.7,1212.01 1544.29,1212.01 1544.88,1212.01 1545.46,1212.01 1546.05,1212.01 1546.64,1212.01 1547.22,1212.01 1547.81,1212.01 1548.4,1212.01 1548.98,1212.01 1549.57,1212.01 1550.15,1212.01 1550.74,1212.01 1551.33,1212.01 1551.91,1212.01 1552.5,1212.01 1553.09,1212.01 1553.67,1212.01 1554.26,1212.01 1554.85,1212.01 1555.43,1212.01 1556.02,1212.01 1556.6,1212.01 1557.19,1212.01 1557.78,1212.01 1558.36,1212.01 1558.95,1212.01 1559.54,1212.01 1560.12,1212.01 1560.71,1212.01 1561.3,1212.01 1561.88,1212.01 1562.47,1212.01 1563.06,1212.01 1563.64,1212.01 1564.23,1212.01 1564.81,1212.01 1565.4,1212.01 1565.99,1212.01 1566.57,1212.01 1567.16,1212.01 1567.75,1212.01 1568.33,1212.01 1568.92,1212.01 1569.51,1212.01 1570.09,1212.01 1570.68,1212.01 1571.27,1212.01 1571.85,1212.01 1572.44,1212.01 1573.02,1212.01 1573.61,1212.01 1574.2,1212.01 1574.78,1212.01 1575.37,1212.01 1575.96,1212.01 1576.54,1212.01 1577.13,1212.01 1577.72,1212.01 1578.3,1212.01 1578.89,1212.01 1579.47,1212.01 1580.06,1212.01 1580.65,1212.01 1581.23,1212.01 1581.82,1212.01 1582.41,1212.01 1582.99,1212.01 1583.58,1212.01 1584.17,1212.01 1584.75,1212.01 1585.34,1212.01 1585.93,1212.01 1586.51,1212.01 1587.1,1212.01 1587.68,1212.01 1588.27,1212.01 1588.86,1212.01 1589.44,1212.01 1590.03,1212.01 1590.62,1212.01 1591.2,1212.01 1591.79,1212.01 1592.38,1212.01 1592.96,1212.01 1593.55,1212.01 1594.14,1212.01 1594.72,1212.01 1595.31,1212.01 1595.89,1212.01 1596.48,1212.01 1597.07,1212.01 1597.65,1212.01 1598.24,1212.01 1598.83,1212.01 1599.41,1212.01 1600,1212.01 1600.59,1212.01 1601.17,1212.01 1601.76,1212.01 1602.34,1212.01 1602.93,1212.01 1603.52,1212.01 1604.1,1212.01 1604.69,1212.01 1605.28,1212.01 1605.86,1212.01 1606.45,1212.01 1607.04,1212.01 1607.62,1212.01 1608.21,1212.01 1608.8,1212.01 1609.38,1212.01 1609.97,1212.01 1610.55,1212.01 1611.14,1212.01 1611.73,1212.01 1612.31,1212.01 1612.9,1212.01 1613.49,1212.01 1614.07,1212.01 1614.66,1212.01 1615.25,1212.01 1615.83,1212.01 1616.42,1212.01 1617.01,1212.01 1617.59,1212.01 1618.18,1212.01 1618.76,1212.01 1619.35,1212.01 1619.94,1212.01 1620.52,1212.01 1621.11,1212.01 1621.7,1212.01 1622.28,1212.01 1622.87,1212.01 1623.46,1212.01 1624.04,1212.01 1624.63,1212.01 1625.22,1212.01 1625.8,1212.01 1626.39,1212.01 1626.97,1212.01 1627.56,1212.01 1628.15,1212.01 1628.73,1212.01 1629.32,1212.01 1629.91,1212.01 1630.49,1212.01 1631.08,1212.01 1631.67,1212.01 1632.25,1212.01 1632.84,1212.01 1633.42,1212.01 1634.01,1212.01 1634.6,1212.01 1635.18,1212.01 1635.77,1212.01 1636.36,1212.01 1636.94,1212.01 1637.53,1212.01 1638.12,1212.01 1638.7,1212.01 1639.29,1212.01 1639.88,1212.01 1640.46,1212.01 1641.05,1212.01 1641.63,1212.01 1642.22,1212.01 1642.81,1212.01 1643.39,1212.01 1643.98,1212.01 1644.57,1212.01 1645.15,1212.01 1645.74,1212.01 1646.33,1212.01 1646.91,1212.01 1647.5,1212.01 1648.09,1212.01 1648.67,1212.01 1649.26,1212.01 1649.84,1212.01 1650.43,1212.01 1651.02,1212.01 1651.6,1212.01 1652.19,1212.01 1652.78,1212.01 1653.36,1212.01 1653.95,1212.01 1654.54,1212.01 1655.12,1212.01 1655.71,1212.01 1656.29,1212.01 1656.88,1212.01 1657.47,1212.01 1658.05,1212.01 1658.64,1212.01 1659.23,1212.01 1659.81,1212.01 1660.4,1212.01 1660.99,1212.01 1661.57,1212.01 1662.16,1212.01 1662.75,1212.01 1663.33,1212.01 1663.92,1212.01 1664.5,1212.01 1665.09,1212.01 1665.68,1212.01 1666.26,1212.01 1666.85,1212.01 1667.44,1212.01 1668.02,1212.01 1668.61,1212.01 1669.2,1212.01 1669.78,1212.01 1670.37,1212.01 1670.96,1212.01 1671.54,1212.01 1672.13,1212.01 1672.71,1212.01 1673.3,1212.01 1673.89,1212.01 1674.47,1212.01 1675.06,1212.01 1675.65,1212.01 1676.23,1212.01 1676.82,1212.01 1677.41,1212.01 1677.99,1212.01 1678.58,1212.01 1679.17,1212.01 1679.75,1212.01 1680.34,1212.01 1680.92,1212.01 1681.51,1212.01 1682.1,1212.01 1682.68,1212.01 1683.27,1212.01 1683.86,1212.01 1684.44,1212.01 1685.03,1212.01 1685.62,1212.01 1686.2,1212.01 1686.79,1212.01 1687.37,1212.01 1687.96,1212.01 1688.55,1212.01 1689.13,1212.01 1689.72,1212.01 1690.31,1212.01 1690.89,1212.01 1691.48,1212.01 1692.07,1212.01 1692.65,1212.01 1693.24,1212.01 1693.83,1212.01 1694.41,1212.01 1695,1212.01 1695.58,1212.01 1696.17,1212.01 1696.76,1212.01 1697.34,1212.01 1697.93,1212.01 1698.52,1212.01 1699.1,1212.01 1699.69,1212.01 1700.28,1212.01 1700.86,1212.01 1701.45,1212.01 1702.04,1212.01 1702.62,1212.01 1703.21,1212.01 1703.79,1212.01 1704.38,1212.01 1704.97,1212.01 1705.55,1212.01 1706.14,1212.01 1706.73,1212.01 1707.31,1212.01 1707.9,1212.01 1708.49,1212.01 1709.07,1212.01 1709.66,1212.01 1710.24,1212.01 1710.83,1212.01 1711.42,1212.01 1712,1212.01 1712.59,1212.01 1713.18,1212.01 1713.76,1212.01 1714.35,1212.01 1714.94,1212.01 1715.52,1212.01 1716.11,1212.01 1716.7,1212.01 1717.28,1212.01 1717.87,1212.01 1718.45,1212.01 1719.04,1212.01 1719.63,1212.01 1720.21,1212.01 1720.8,1212.01 1721.39,1212.01 1721.97,1212.01 1722.56,1212.01 1723.15,1212.01 1723.73,1212.01 1724.32,1212.01 1724.91,1212.01 1725.49,1212.01 1726.08,1212.01 1726.66,1212.01 1727.25,1212.01 1727.84,1212.01 1728.42,1212.01 1729.01,1212.01 1729.6,1212.01 1730.18,1212.01 1730.77,1212.01 1731.36,1212.01 1731.94,1212.01 1732.53,1212.01 1733.11,1212.01 1733.7,1212.01 1734.29,1212.01 1734.87,1212.01 1735.46,1212.01 1736.05,1212.01 1736.63,1212.01 1737.22,1212.01 1737.81,1212.01 1738.39,1212.01 1738.98,1212.01 1739.57,1212.01 1740.15,1212.01 1740.74,1212.01 1741.32,1212.01 1741.91,1212.01 1742.5,1212.01 1743.08,1212.01 1743.67,1212.01 1744.26,1212.01 1744.84,1212.01 1745.43,1212.01 1746.02,1212.01 1746.6,1212.01 1747.19,1212.01 1747.78,1212.01 1748.36,1212.01 1748.95,1212.01 1749.53,1212.01 1750.12,1212.01 1750.71,1212.01 1751.29,1212.01 1751.88,1212.01 1752.47,1212.01 1753.05,1212.01 1753.64,1212.01 1754.23,1212.01 1754.81,1212.01 1755.4,1212.01 1755.99,1212.01 1756.57,1212.01 1757.16,1212.01 1757.74,1212.01 1758.33,1212.01 1758.92,1212.01 1759.5,1212.01 1760.09,1212.01 1760.68,1212.01 1761.26,1212.01 1761.85,1212.01 1762.44,1212.01 1763.02,1212.01 1763.61,1212.01 1764.19,1212.01 1764.78,1212.01 1765.37,1212.01 1765.95,1212.01 1766.54,1212.01 1767.13,1212.01 1767.71,1212.01 1768.3,1212.01 1768.89,1212.01 1769.47,1212.01 1770.06,1212.01 1770.65,1212.01 1771.23,1212.01 1771.82,1212.01 1772.4,1212.01 1772.99,1212.01 1773.58,1212.01 1774.16,1212.01 1774.75,1212.01 1775.34,1212.01 1775.92,1212.01 1776.51,1212.01 1777.1,1212.01 1777.68,1212.01 1778.27,1212.01 1778.86,1212.01 1779.44,1212.01 1780.03,1212.01 1780.61,1212.01 1781.2,1212.01 1781.79,1212.01 1782.37,1212.01 1782.96,1212.01 1783.55,1212.01 1784.13,1212.01 1784.72,1212.01 1785.31,1212.01 1785.89,1212.01 1786.48,1212.01 1787.06,1212.01 1787.65,1212.01 1788.24,1212.01 1788.82,1212.01 1789.41,1212.01 1790,1212.01 1790.58,1212.01 1791.17,1212.01 1791.76,1212.01 1792.34,1212.01 1792.93,1212.01 1793.52,1212.01 1794.1,1212.01 1794.69,1212.01 1795.27,1212.01 1795.86,1212.01 1796.45,1212.01 1797.03,1212.01 1797.62,1212.01 1798.21,1212.01 1798.79,1212.01 1799.38,1212.01 1799.97,1212.01 1800.55,1212.01 1801.14,1212.01 1801.73,1212.01 1802.31,1212.01 1802.9,1212.01 1803.48,1212.01 1804.07,1212.01 1804.66,1212.01 1805.24,1212.01 1805.83,1212.01 1806.42,1212.01 1807,1212.01 1807.59,1212.01 1808.18,1212.01 1808.76,1212.01 1809.35,1212.01 1809.94,1212.01 1810.52,1212.01 1811.11,1212.01 1811.69,1212.01 1812.28,1212.01 1812.87,1212.01 1813.45,1212.01 1814.04,1212.01 1814.63,1212.01 1815.21,1212.01 1815.8,1212.01 1816.39,1212.01 1816.97,1212.01 1817.56,1212.01 1818.14,1212.01 1818.73,1212.01 1819.32,1212.01 1819.9,1212.01 1820.49,1212.01 1821.08,1212.01 1821.66,1212.01 1822.25,1212.01 1822.84,1212.01 1823.42,1212.01 1824.01,1212.01 1824.6,1212.01 1825.18,1212.01 1825.77,1212.01 1826.35,1212.01 1826.94,1212.01 1827.53,1212.01 1828.11,1212.01 1828.7,1212.01 1829.29,1212.01 1829.87,1212.01 1830.46,1212.01 1831.05,1212.01 1831.63,1212.01 1832.22,1212.01 1832.81,1212.01 1833.39,1212.01 1833.98,1212.01 1834.56,1212.01 1835.15,1212.01 1835.74,1212.01 1836.32,1212.01 1836.91,1212.01 1837.5,1212.01 1838.08,1212.01 1838.67,1212.01 1839.26,1212.01 1839.84,1212.01 1840.43,1212.01 1841.01,1212.01 1841.6,1212.01 1842.19,1212.01 1842.77,1212.01 1843.36,1212.01 1843.95,1212.01 1844.53,1212.01 1845.12,1212.01 1845.71,1212.01 1846.29,1212.01 1846.88,1212.01 1847.47,1212.01 1848.05,1212.01 1848.64,1212.01 1849.22,1212.01 1849.81,1212.01 1850.4,1212.01 1850.98,1212.01 1851.57,1212.01 1852.16,1212.01 1852.74,1212.01 1853.33,1212.01 1853.92,1212.01 1854.5,1212.01 1855.09,1212.01 1855.68,1212.01 1856.26,1212.01 1856.85,1212.01 1857.43,1212.01 1858.02,1212.01 1858.61,1212.01 1859.19,1212.01 1859.78,1212.01 1860.37,1212.01 1860.95,1212.01 1861.54,1212.01 1862.13,1212.01 1862.71,1212.01 1863.3,1212.01 1863.88,1212.01 1864.47,1212.01 1865.06,1212.01 1865.64,1212.01 1866.23,1212.01 1866.82,1212.01 1867.4,1212.01 1867.99,1212.01 1868.58,1212.01 1869.16,1212.01 1869.75,1212.01 1870.34,1212.01 1870.92,1212.01 1871.51,1212.01 1872.09,1212.01 1872.68,1212.01 1873.27,1212.01 1873.85,1212.01 1874.44,1212.01 1875.03,1212.01 1875.61,1212.01 1876.2,1212.01 1876.79,1212.01 1877.37,1212.01 1877.96,1212.01 1878.55,1212.01 1879.13,1212.01 1879.72,1212.01 1880.3,1212.01 1880.89,1212.01 1881.48,1212.01 1882.06,1212.01 1882.65,1212.01 1883.24,1212.01 1883.82,1212.01 1884.41,1212.01 1885,1212.01 1885.58,1212.01 1886.17,1212.01 1886.76,1212.01 1887.34,1212.01 1887.93,1212.01 1888.51,1212.01 1889.1,1212.01 1889.69,1212.01 1890.27,1212.01 1890.86,1212.01 1891.45,1212.01 1892.03,1212.01 1892.62,1212.01 1893.21,1212.01 1893.79,1212.01 1894.38,1212.01 1894.96,1212.01 1895.55,1212.01 1896.14,1212.01 1896.72,1212.01 1897.31,1212.01 1897.9,1212.01 1898.48,1212.01 1899.07,1212.01 1899.66,1212.01 1900.24,1212.01 1900.83,1212.01 1901.42,1212.01 1902,1212.01 1902.59,1212.01 1903.17,1212.01 1903.76,1212.01 1904.35,1212.01 1904.93,1212.01 1905.52,1212.01 1906.11,1212.01 1906.69,1212.01 1907.28,1212.01 1907.87,1212.01 1908.45,1212.01 1909.04,1212.01 1909.63,1212.01 1910.21,1212.01 1910.8,1212.01 1911.38,1212.01 1911.97,1212.01 1912.56,1212.01 1913.14,1212.01 1913.73,1212.01 1914.32,1212.01 1914.9,1212.01 1915.49,1212.01 1916.08,1212.01 1916.66,1212.01 1917.25,1212.01 1917.83,1212.01 1918.42,1212.01 1919.01,1212.01 1919.59,1212.01 1920.18,1212.01 1920.77,1212.01 1921.35,1212.01 1921.94,1212.01 1922.53,1212.01 1923.11,1212.01 1923.7,1212.01 1924.29,1212.01 1924.87,1212.01 1925.46,1212.01 1926.04,1212.01 1926.63,1212.01 1927.22,1212.01 1927.8,1212.01 1928.39,1212.01 1928.98,1212.01 1929.56,1212.01 1930.15,1212.01 1930.74,1212.01 1931.32,1212.01 1931.91,1212.01 1932.5,1212.01 1933.08,1212.01 1933.67,1212.01 1934.25,1212.01 1934.84,1212.01 1935.43,1212.01 1936.01,1212.01 1936.6,1212.01 1937.19,1212.01 1937.77,1212.01 1938.36,1212.01 1938.95,1212.01 1939.53,1212.01 1940.12,1212.01 1940.71,1212.01 1941.29,1212.01 1941.88,1212.01 1942.46,1212.01 1943.05,1212.01 1943.64,1212.01 1944.22,1212.01 1944.81,1212.01 1945.4,1212.01 1945.98,1212.01 1946.57,1212.01 1947.16,1212.01 1947.74,1212.01 1948.33,1212.01 1948.91,1212.01 1949.5,1212.01 1950.09,1212.01 1950.67,1212.01 1951.26,1212.01 1951.85,1212.01 1952.43,1212.01 1953.02,1212.01 1953.61,1212.01 1954.19,1212.01 1954.78,1212.01 1955.37,1212.01 1955.95,1212.01 1956.54,1212.01 1957.12,1212.01 1957.71,1212.01 1958.3,1212.01 1958.88,1212.01 1959.47,1212.01 1960.06,1212.01 1960.64,1212.01 1961.23,1212.01 1961.82,1212.01 1962.4,1212.01 1962.99,1212.01 1963.58,1212.01 1964.16,1212.01 1964.75,1212.01 1965.33,1212.01 1965.92,1212.01 1966.51,1212.01 1967.09,1212.01 1967.68,1212.01 1968.27,1212.01 1968.85,1212.01 1969.44,1212.01 1970.03,1212.01 1970.61,1212.01 1971.2,1212.01 1971.78,1212.01 1972.37,1212.01 1972.96,1212.01 1973.54,1212.01 1974.13,1212.01 1974.72,1212.01 1975.3,1212.01 1975.89,1212.01 1976.48,1212.01 1977.06,1212.01 1977.65,1212.01 1978.24,1212.01 1978.82,1212.01 1979.41,1212.01 1979.99,1212.01 1980.58,1212.01 1981.17,1212.01 1981.75,1212.01 1982.34,1212.01 1982.93,1212.01 1983.51,1212.01 1984.1,1212.01 1984.69,1212.01 1985.27,1212.01 1985.86,1212.01 1986.45,1212.01 1987.03,1212.01 1987.62,1212.01 1988.2,1212.01 1988.79,1212.01 1989.38,1212.01 1989.96,1212.01 1990.55,1212.01 1991.14,1212.01 1991.72,1212.01 1992.31,1212.01 1992.9,1212.01 1993.48,1212.01 1994.07,1212.01 1994.65,1212.01 1995.24,1212.01 1995.83,1212.01 1996.41,1212.01 1997,1212.01 1997.59,1212.01 1998.17,1212.01 1998.76,1212.01 1999.35,1212.01 1999.93,1212.01 2000.52,1212.01 2001.11,1212.01 2001.69,1212.01 2002.28,1212.01 2002.86,1212.01 2003.45,1212.01 2004.04,1212.01 2004.62,1212.01 2005.21,1212.01 2005.8,1212.01 2006.38,1212.01 2006.97,1212.01 2007.56,1212.01 2008.14,1212.01 2008.73,1212.01 2009.32,1212.01 2009.9,1212.01 2010.49,1212.01 2011.07,1212.01 2011.66,1212.01 2012.25,1212.01 2012.83,1212.01 2013.42,1212.01 2014.01,1212.01 2014.59,1212.01 2015.18,1212.01 2015.77,1212.01 2016.35,1212.01 2016.94,1212.01 2017.53,1212.01 2018.11,1212.01 2018.7,1212.01 2019.28,1212.01 2019.87,1212.01 2020.46,1212.01 2021.04,1212.01 2021.63,1212.01 2022.22,1212.01 2022.8,1212.01 2023.39,1212.01 2023.98,1212.01 2024.56,1212.01 2025.15,1212.01 2025.73,1212.01 2026.32,1212.01 2026.91,1212.01 2027.49,1212.01 2028.08,1212.01 2028.67,1212.01 2029.25,1212.01 2029.84,1212.01 2030.43,1212.01 2031.01,1212.01 2031.6,1212.01 2032.19,1212.01 2032.77,1212.01 2033.36,1212.01 2033.94,1212.01 2034.53,1212.01 2035.12,1212.01 2035.7,1212.01 2036.29,1212.01 2036.88,1212.01 2037.46,1212.01 2038.05,1212.01 2038.64,1212.01 2039.22,1212.01 2039.81,1212.01 2040.4,1212.01 2040.98,1212.01 2041.57,1212.01 2042.15,1212.01 2042.74,1212.01 2043.33,1212.01 2043.91,1212.01 2044.5,1212.01 2045.09,1212.01 2045.67,1212.01 2046.26,1212.01 2046.85,1212.01 2047.43,1212.01 2048.02,1212.01 2048.6,1212.01 2049.19,1212.01 2049.78,1212.01 2050.36,1212.01 2050.95,1212.01 2051.54,1212.01 2052.12,1212.01 2052.71,1212.01 2053.3,1212.01 2053.88,1212.01 2054.47,1212.01 2055.06,1212.01 2055.64,1212.01 2056.23,1212.01 2056.81,1212.01 2057.4,1212.01 2057.99,1212.01 2058.57,1212.01 2059.16,1212.01 2059.75,1212.01 2060.33,1212.01 2060.92,1212.01 2061.51,1212.01 2062.09,1212.01 2062.68,1212.01 2063.27,1212.01 2063.85,1212.01 2064.44,1212.01 2065.02,1212.01 2065.61,1212.01 2066.2,1212.01 2066.78,1212.01 2067.37,1212.01 2067.96,1212.01 2068.54,1212.01 2069.13,1212.01 2069.72,1212.01 2070.3,1212.01 2070.89,1212.01 2071.48,1212.01 2072.06,1212.01 2072.65,1212.01 2073.23,1212.01 2073.82,1212.01 2074.41,1212.01 2074.99,1212.01 2075.58,1212.01 2076.17,1212.01 2076.75,1212.01 2077.34,1212.01 2077.93,1212.01 2078.51,1212.01 2079.1,1212.01 2079.68,1212.01 2080.27,1212.01 2080.86,1212.01 2081.44,1212.01 2082.03,1212.01 2082.62,1212.01 2083.2,1212.01 2083.79,1212.01 2084.38,1212.01 2084.96,1212.01 2085.55,1212.01 2086.14,1212.01 2086.72,1212.01 2087.31,1212.01 2087.89,1212.01 2088.48,1212.01 2089.07,1212.01 2089.65,1212.01 2090.24,1212.01 2090.83,1212.01 2091.41,1212.01 2092,1212.01 2092.59,1212.01 2093.17,1212.01 2093.76,1212.01 2094.35,1212.01 2094.93,1212.01 2095.52,1212.01 2096.1,1212.01 2096.69,1212.01 2097.28,1212.01 2097.86,1212.01 2098.45,1212.01 2099.04,1212.01 2099.62,1212.01 2100.21,1212.01 2100.8,1212.01 2101.38,1212.01 2101.97,1212.01 2102.55,1212.01 2103.14,1212.01 2103.73,1212.01 2104.31,1212.01 2104.9,1212.01 2105.49,1212.01 2106.07,1212.01 2106.66,1212.01 2107.25,1212.01 2107.83,1212.01 2108.42,1212.01 2109.01,1212.01 2109.59,1212.01 2110.18,1212.01 2110.76,1212.01 2111.35,1212.01 2111.94,1212.01 2112.52,1212.01 2113.11,1212.01 2113.7,1212.01 2114.28,1212.01 2114.87,1212.01 2115.46,1212.01 2116.04,1212.01 2116.63,1212.01 2117.22,1212.01 2117.8,1212.01 2118.39,1212.01 2118.97,1212.01 2119.56,1212.01 2120.15,1212.01 2120.73,1212.01 2121.32,1212.01 2121.91,1212.01 2122.49,1212.01 2123.08,1212.01 2123.67,1212.01 2124.25,1212.01 2124.84,1212.01 2125.42,1212.01 2126.01,1212.01 2126.6,1212.01 2127.18,1212.01 2127.77,1212.01 2128.36,1212.01 2128.94,1212.01 2129.53,1212.01 2130.12,1212.01 2130.7,1212.01 2131.29,1212.01 2131.88,1212.01 2132.46,1212.01 2133.05,1212.01 2133.63,1212.01 2134.22,1212.01 2134.81,1212.01 2135.39,1212.01 2135.98,1212.01 2136.57,1212.01 2137.15,1212.01 2137.74,1212.01 2138.33,1212.01 2138.91,1212.01 2139.5,1212.01 2140.09,1212.01 2140.67,1212.01 2141.26,1212.01 2141.84,1212.01 2142.43,1212.01 2143.02,1212.01 2143.6,1212.01 2144.19,1212.01 2144.78,1212.01 2145.36,1212.01 2145.95,1212.01 2146.54,1212.01 2147.12,1212.01 2147.71,1212.01 2148.3,1212.01 2148.88,1212.01 2149.47,1212.01 2150.05,1212.01 2150.64,1212.01 2151.23,1212.01 2151.81,1212.01 2152.4,1212.01 2152.99,1212.01 2153.57,1212.01 2154.16,1212.01 2154.75,1212.01 2155.33,1212.01 2155.92,1212.01 2156.5,1212.01 2157.09,1212.01 2157.68,1212.01 2158.26,1212.01 \"/>\n<path clip-path=\"url(#clip002)\" d=\"M986.025 1211.73 L986.612 1211.73 L987.198 1211.73 L987.785 1211.73 L988.371 1211.73 L988.957 1211.73 L989.544 1211.73 L990.13 1211.73 L990.717 1211.73 L991.303 1211.73 L991.889 1211.73 L992.476 1211.73 L993.062 1211.73 L993.649 1211.73 L994.235 1211.73 L994.822 1211.73 L995.408 1211.73 L995.994 1211.73 L996.581 1211.73 L997.167 1211.73 L997.754 1211.73 L998.34 1211.73 L998.926 1211.73 L999.513 1211.73 L1000.1 1211.73 L1000.69 1211.73 L1001.27 1211.73 L1001.86 1211.73 L1002.44 1211.73 L1003.03 1211.73 L1003.62 1211.73 L1004.2 1211.73 L1004.79 1211.73 L1005.38 1211.73 L1005.96 1211.73 L1006.55 1211.73 L1007.14 1211.73 L1007.72 1211.73 L1008.31 1211.73 L1008.9 1211.73 L1009.48 1211.73 L1010.07 1211.73 L1010.65 1211.73 L1011.24 1211.73 L1011.83 1211.73 L1012.41 1211.73 L1013 1211.73 L1013.59 1211.73 L1014.17 1211.73 L1014.76 1211.73 L1015.35 1211.73 L1015.93 1211.73 L1016.52 1211.73 L1017.11 1211.73 L1017.69 1211.73 L1018.28 1211.73 L1018.86 1211.73 L1019.45 1211.73 L1020.04 1211.73 L1020.62 1211.73 L1021.21 1211.73 L1021.8 1211.73 L1022.38 1211.73 L1022.97 1211.73 L1023.56 1211.73 L1024.14 1211.73 L1024.73 1211.73 L1025.32 1211.73 L1025.9 1211.73 L1026.49 1211.73 L1027.07 1211.73 L1027.66 1211.73 L1028.25 1211.73 L1028.83 1211.73 L1029.42 1211.73 L1030.01 1211.73 L1030.59 1211.73 L1031.18 1211.73 L1031.77 1211.73 L1032.35 1211.73 L1032.94 1211.73 L1033.52 1211.73 L1034.11 1211.73 L1034.7 1211.73 L1035.28 1211.73 L1035.87 1211.73 L1036.46 1211.73 L1037.04 1211.73 L1037.63 1211.73 L1038.22 1211.73 L1038.8 1211.73 L1039.39 1211.73 L1039.98 1211.73 L1040.56 1211.73 L1041.15 1211.73 L1041.73 1211.73 L1042.32 1211.73 L1042.91 1211.73 L1043.49 1211.73 L1044.08 1211.73 L1044.67 1211.73 L1045.25 1211.73 L1045.84 1211.73 L1046.43 1211.73 L1047.01 1211.73 L1047.6 1211.73 L1048.19 1211.73 L1048.77 1211.73 L1049.36 1211.73 L1049.94 1211.73 L1050.53 1211.73 L1051.12 1211.73 L1051.7 1211.73 L1052.29 1211.73 L1052.88 1211.73 L1053.46 1211.73 L1054.05 1211.73 L1054.64 1211.73 L1055.22 1211.73 L1055.81 1211.73 L1056.39 1211.73 L1056.98 1211.73 L1057.57 1211.73 L1058.15 1211.73 L1058.74 1211.73 L1059.33 1211.73 L1059.91 1211.73 L1060.5 1211.73 L1061.09 1211.73 L1061.67 1211.73 L1062.26 1211.73 L1062.85 1211.73 L1063.43 1211.73 L1064.02 1211.73 L1064.6 1211.73 L1065.19 1211.73 L1065.78 1211.73 L1066.36 1211.73 L1066.95 1211.73 L1067.54 1211.73 L1068.12 1211.73 L1068.71 1211.73 L1069.3 1211.73 L1069.88 1211.73 L1070.47 1211.73 L1071.06 1211.73 L1071.64 1211.73 L1072.23 1211.73 L1072.81 1211.73 L1073.4 1211.73 L1073.99 1211.73 L1074.57 1211.73 L1075.16 1211.73 L1075.75 1211.73 L1076.33 1211.73 L1076.92 1211.73 L1077.51 1211.73 L1078.09 1211.73 L1078.68 1211.73 L1079.26 1211.73 L1079.85 1211.73 L1080.44 1211.73 L1081.02 1211.73 L1081.61 1211.73 L1082.2 1211.73 L1082.78 1211.73 L1083.37 1211.73 L1083.96 1211.73 L1084.54 1211.73 L1085.13 1211.73 L1085.72 1211.73 L1086.3 1211.73 L1086.89 1211.73 L1087.47 1211.73 L1088.06 1211.73 L1088.65 1211.73 L1089.23 1211.73 L1089.82 1211.73 L1090.41 1211.73 L1090.99 1211.73 L1091.58 1211.73 L1092.17 1211.73 L1092.75 1211.73 L1093.34 1211.73 L1093.93 1211.73 L1094.51 1211.73 L1095.1 1211.73 L1095.68 1211.73 L1096.27 1211.73 L1096.86 1211.73 L1097.44 1211.73 L1098.03 1211.73 L1098.62 1211.73 L1099.2 1211.73 L1099.79 1211.73 L1100.38 1211.73 L1100.96 1211.73 L1101.55 1211.73 L1102.14 1211.73 L1102.72 1211.73 L1103.31 1211.73 L1103.89 1211.73 L1104.48 1211.73 L1105.07 1211.73 L1105.65 1211.73 L1106.24 1211.73 L1106.83 1211.73 L1107.41 1211.73 L1108 1211.73 L1108.59 1211.73 L1109.17 1211.73 L1109.76 1211.73 L1110.34 1211.73 L1110.93 1211.73 L1111.52 1211.73 L1112.1 1211.73 L1112.69 1211.73 L1113.28 1211.73 L1113.86 1211.73 L1114.45 1211.73 L1115.04 1211.73 L1115.62 1211.73 L1116.21 1211.73 L1116.8 1211.73 L1117.38 1211.73 L1117.97 1211.73 L1118.55 1211.73 L1119.14 1211.73 L1119.73 1211.73 L1120.31 1211.73 L1120.9 1211.73 L1121.49 1211.73 L1122.07 1211.73 L1122.66 1211.73 L1123.25 1211.73 L1123.83 1211.73 L1124.42 1211.73 L1125.01 1211.73 L1125.59 1211.73 L1126.18 1211.73 L1126.76 1211.73 L1127.35 1211.73 L1127.94 1211.73 L1128.52 1211.73 L1129.11 1211.73 L1129.7 1211.73 L1130.28 1211.73 L1130.87 1211.73 L1131.46 1211.73 L1132.04 1211.73 L1132.63 1211.73 L1133.21 1211.73 L1133.8 1211.73 L1134.39 1211.73 L1134.97 1211.73 L1135.56 1211.73 L1136.15 1211.73 L1136.73 1211.73 L1137.32 1211.73 L1137.91 1211.73 L1138.49 1211.73 L1139.08 1211.73 L1139.67 1211.73 L1140.25 1211.73 L1140.84 1211.73 L1141.42 1211.73 L1142.01 1211.73 L1142.6 1211.73 L1143.18 1211.73 L1143.77 1211.73 L1144.36 1211.73 L1144.94 1211.73 L1145.53 1211.73 L1146.12 1211.73 L1146.7 1211.73 L1147.29 1211.73 L1147.88 1211.73 L1148.46 1211.73 L1149.05 1211.73 L1149.63 1211.73 L1150.22 1211.73 L1150.81 1211.73 L1151.39 1211.73 L1151.98 1211.73 L1152.57 1211.73 L1153.15 1211.73 L1153.74 1211.73 L1154.33 1211.73 L1154.91 1211.73 L1155.5 1211.73 L1156.09 1211.73 L1156.67 1211.73 L1157.26 1211.73 L1157.84 1211.73 L1158.43 1211.73 L1159.02 1211.73 L1159.6 1211.73 L1160.19 1211.73 L1160.78 1211.73 L1161.36 1211.73 L1161.95 1211.73 L1162.54 1211.73 L1163.12 1211.73 L1163.71 1211.73 L1164.29 1211.73 L1164.88 1211.73 L1165.47 1211.73 L1166.05 1211.73 L1166.64 1211.73 L1167.23 1211.73 L1167.81 1211.73 L1168.4 1211.73 L1168.99 1211.73 L1169.57 1211.73 L1170.16 1211.73 L1170.75 1211.73 L1171.33 1211.73 L1171.92 1211.73 L1172.5 1211.73 L1173.09 1211.73 L1173.68 1211.73 L1174.26 1211.73 L1174.85 1211.73 L1175.44 1211.73 L1176.02 1211.73 L1176.61 1211.73 L1177.2 1211.73 L1177.78 1211.73 L1178.37 1211.73 L1178.96 1211.73 L1179.54 1211.73 L1180.13 1211.73 L1180.71 1211.73 L1181.3 1211.73 L1181.89 1211.73 L1182.47 1211.73 L1183.06 1211.73 L1183.65 1211.73 L1184.23 1211.73 L1184.82 1211.73 L1185.41 1211.73 L1185.99 1211.73 L1186.58 1211.73 L1187.16 1211.73 L1187.75 1211.73 L1188.34 1211.73 L1188.92 1211.73 L1189.51 1211.73 L1190.1 1211.73 L1190.68 1211.73 L1191.27 1211.73 L1191.86 1211.73 L1192.44 1211.73 L1193.03 1211.73 L1193.62 1211.73 L1194.2 1211.73 L1194.79 1211.73 L1195.37 1211.73 L1195.96 1211.73 L1196.55 1211.73 L1197.13 1211.73 L1197.72 1211.73 L1198.31 1211.73 L1198.89 1211.73 L1199.48 1211.73 L1200.07 1211.73 L1200.65 1211.73 L1201.24 1211.73 L1201.83 1211.73 L1202.41 1211.73 L1203 1211.73 L1203.58 1211.73 L1204.17 1211.73 L1204.76 1211.73 L1205.34 1211.73 L1205.93 1211.73 L1206.52 1211.73 L1207.1 1211.73 L1207.69 1211.73 L1208.28 1211.73 L1208.86 1211.73 L1209.45 1211.73 L1210.03 1211.73 L1210.62 1211.73 L1211.21 1211.73 L1211.79 1211.73 L1212.38 1211.73 L1212.97 1211.73 L1213.55 1211.73 L1214.14 1211.73 L1214.73 1211.73 L1215.31 1211.73 L1215.9 1211.73 L1216.49 1211.73 L1217.07 1211.73 L1217.66 1211.73 L1218.24 1211.73 L1218.83 1211.73 L1219.42 1211.73 L1220 1211.73 L1220.59 1211.73 L1221.18 1211.73 L1221.76 1211.73 L1222.35 1211.73 L1222.94 1211.73 L1223.52 1211.73 L1224.11 1211.73 L1224.7 1211.73 L1225.28 1211.73 L1225.87 1211.73 L1226.45 1211.73 L1227.04 1211.73 L1227.63 1211.73 L1228.21 1211.73 L1228.8 1211.73 L1229.39 1211.73 L1229.97 1211.73 L1230.56 1211.73 L1231.15 1211.73 L1231.73 1211.73 L1232.32 1211.73 L1232.91 1211.73 L1233.49 1211.73 L1234.08 1211.73 L1234.66 1211.73 L1235.25 1211.73 L1235.84 1211.73 L1236.42 1211.73 L1237.01 1211.73 L1237.6 1211.73 L1238.18 1211.73 L1238.77 1211.73 L1239.36 1211.73 L1239.94 1211.73 L1240.53 1211.73 L1241.11 1211.73 L1241.7 1211.73 L1242.29 1211.73 L1242.87 1211.73 L1243.46 1211.73 L1244.05 1211.73 L1244.63 1211.73 L1245.22 1211.73 L1245.81 1211.73 L1246.39 1211.73 L1246.98 1211.73 L1247.57 1211.73 L1248.15 1211.73 L1248.74 1211.73 L1249.32 1211.73 L1249.91 1211.73 L1250.5 1211.73 L1251.08 1211.73 L1251.67 1211.73 L1252.26 1211.73 L1252.84 1211.73 L1253.43 1211.73 L1254.02 1211.73 L1254.6 1211.73 L1255.19 1211.73 L1255.78 1211.73 L1256.36 1211.73 L1256.95 1211.73 L1257.53 1211.73 L1258.12 1211.73 L1258.71 1211.73 L1259.29 1211.73 L1259.88 1211.73 L1260.47 1211.73 L1261.05 1211.73 L1261.64 1211.73 L1262.23 1211.73 L1262.81 1211.73 L1263.4 1211.73 L1263.98 1211.73 L1264.57 1211.73 L1265.16 1211.73 L1265.74 1211.73 L1266.33 1211.73 L1266.92 1211.73 L1267.5 1211.73 L1268.09 1211.73 L1268.68 1211.73 L1269.26 1211.73 L1269.85 1211.73 L1270.44 1211.73 L1271.02 1211.73 L1271.61 1211.73 L1272.19 1211.73 L1272.78 1211.73 L1273.37 1211.73 L1273.95 1211.73 L1274.54 1211.73 L1275.13 1211.73 L1275.71 1211.73 L1276.3 1211.73 L1276.89 1211.73 L1277.47 1211.73 L1278.06 1211.73 L1278.65 1211.73 L1279.23 1211.73 L1279.82 1211.73 L1280.4 1211.73 L1280.99 1211.73 L1281.58 1211.73 L1282.16 1211.73 L1282.75 1211.73 L1283.34 1211.73 L1283.92 1211.73 L1284.51 1211.73 L1285.1 1211.73 L1285.68 1211.73 L1286.27 1211.73 L1286.86 1211.73 L1287.44 1211.73 L1288.03 1211.73 L1288.61 1211.73 L1289.2 1211.73 L1289.79 1211.73 L1290.37 1211.73 L1290.96 1211.73 L1291.55 1211.73 L1292.13 1211.73 L1292.72 1211.73 L1293.31 1211.73 L1293.89 1211.73 L1294.48 1211.73 L1295.06 1211.73 L1295.65 1211.73 L1296.24 1211.73 L1296.82 1211.73 L1297.41 1211.73 L1298 1211.73 L1298.58 1211.73 L1299.17 1211.73 L1299.76 1211.73 L1300.34 1211.73 L1300.93 1211.73 L1301.52 1211.73 L1302.1 1211.73 L1302.69 1211.73 L1303.27 1211.73 L1303.86 1211.73 L1304.45 1211.73 L1305.03 1211.73 L1305.62 1211.73 L1306.21 1211.73 L1306.79 1211.73 L1307.38 1211.73 L1307.97 1211.73 L1308.55 1211.73 L1309.14 1211.73 L1309.73 1211.73 L1310.31 1211.73 L1310.9 1211.73 L1311.48 1211.73 L1312.07 1211.73 L1312.66 1211.73 L1313.24 1211.73 L1313.83 1211.73 L1314.42 1211.73 L1315 1211.73 L1315.59 1211.73 L1316.18 1211.73 L1316.76 1211.73 L1317.35 1211.73 L1317.93 1211.73 L1318.52 1211.73 L1319.11 1211.73 L1319.69 1211.73 L1320.28 1211.73 L1320.87 1211.73 L1321.45 1211.73 L1322.04 1211.73 L1322.63 1211.73 L1323.21 1211.73 L1323.8 1211.73 L1324.39 1211.73 L1324.97 1211.73 L1325.56 1211.73 L1326.14 1211.73 L1326.73 1211.73 L1327.32 1211.73 L1327.9 1211.73 L1328.49 1211.73 L1329.08 1211.73 L1329.66 1211.73 L1330.25 1211.73 L1330.84 1211.73 L1331.42 1211.73 L1332.01 1211.73 L1332.6 1211.73 L1333.18 1211.73 L1333.77 1211.73 L1334.35 1211.73 L1334.94 1211.73 L1335.53 1211.73 L1336.11 1211.73 L1336.7 1211.73 L1337.29 1211.73 L1337.87 1211.73 L1338.46 1211.73 L1339.05 1211.73 L1339.63 1211.73 L1340.22 1211.73 L1340.8 1211.73 L1341.39 1211.73 L1341.98 1211.73 L1342.56 1211.73 L1343.15 1211.73 L1343.74 1211.73 L1344.32 1211.73 L1344.91 1211.73 L1345.5 1211.73 L1346.08 1211.73 L1346.67 1211.73 L1347.26 1211.73 L1347.84 1211.73 L1348.43 1211.73 L1349.01 1211.73 L1349.6 1211.73 L1350.19 1211.73 L1350.77 1211.73 L1351.36 1211.73 L1351.95 1211.73 L1352.53 1211.73 L1353.12 1211.73 L1353.71 1211.73 L1354.29 1211.73 L1354.88 1211.73 L1355.47 1211.73 L1356.05 1211.73 L1356.64 1211.73 L1357.22 1211.73 L1357.81 1211.73 L1358.4 1211.73 L1358.98 1211.73 L1359.57 1211.73 L1360.16 1211.73 L1360.74 1211.73 L1361.33 1211.73 L1361.92 1211.73 L1362.5 1211.73 L1363.09 1211.73 L1363.68 1211.73 L1364.26 1211.73 L1364.85 1211.73 L1365.43 1211.73 L1366.02 1211.73 L1366.61 1211.73 L1367.19 1211.73 L1367.78 1211.73 L1368.37 1211.73 L1368.95 1211.73 L1369.54 1211.73 L1370.13 1211.73 L1370.71 1211.73 L1371.3 1211.73 L1371.88 1211.73 L1372.47 1211.73 L1373.06 1211.73 L1373.64 1211.73 L1374.23 1211.73 L1374.82 1211.73 L1375.4 1211.73 L1375.99 1211.73 L1376.58 1211.73 L1377.16 1211.73 L1377.75 1211.73 L1378.34 1211.73 L1378.92 1211.73 L1379.51 1211.73 L1380.09 1211.73 L1380.68 1211.73 L1381.27 1211.73 L1381.85 1211.73 L1382.44 1211.73 L1383.03 1211.73 L1383.61 1211.73 L1384.2 1211.73 L1384.79 1211.73 L1385.37 1211.73 L1385.96 1211.73 L1386.55 1211.73 L1387.13 1211.73 L1387.72 1211.73 L1388.3 1211.73 L1388.89 1211.73 L1389.48 1211.73 L1390.06 1211.73 L1390.65 1211.73 L1391.24 1211.73 L1391.82 1211.73 L1392.41 1211.73 L1393 1211.73 L1393.58 1211.73 L1394.17 1211.73 L1394.75 1211.73 L1395.34 1211.73 L1395.93 1211.73 L1396.51 1211.73 L1397.1 1211.73 L1397.69 1211.73 L1398.27 1211.73 L1398.86 1211.73 L1399.45 1211.73 L1400.03 1211.73 L1400.62 1211.73 L1401.21 1211.73 L1401.79 1211.73 L1402.38 1211.73 L1402.96 1211.73 L1403.55 1211.73 L1404.14 1211.73 L1404.72 1211.73 L1405.31 1211.73 L1405.9 1211.73 L1406.48 1211.73 L1407.07 1211.73 L1407.66 1211.73 L1408.24 1211.73 L1408.83 1211.73 L1409.42 1211.73 L1410 1211.73 L1410.59 1211.73 L1411.17 1211.73 L1411.76 1211.73 L1412.35 1211.73 L1412.93 1211.73 L1413.52 1211.73 L1414.11 1211.73 L1414.69 1211.73 L1415.28 1211.73 L1415.87 1211.73 L1416.45 1211.73 L1417.04 1211.73 L1417.63 1211.73 L1418.21 1211.73 L1418.8 1211.73 L1419.38 1211.73 L1419.97 1211.73 L1420.56 1211.73 L1421.14 1211.73 L1421.73 1211.73 L1422.32 1211.73 L1422.9 1211.73 L1423.49 1211.73 L1424.08 1211.73 L1424.66 1211.73 L1425.25 1211.73 L1425.83 1211.73 L1426.42 1211.73 L1427.01 1211.73 L1427.59 1211.73 L1428.18 1211.73 L1428.77 1211.73 L1429.35 1211.73 L1429.94 1211.73 L1430.53 1211.73 L1431.11 1211.73 L1431.7 1211.73 L1432.29 1211.73 L1432.87 1211.73 L1433.46 1211.73 L1434.04 1211.73 L1434.63 1211.73 L1435.22 1211.73 L1435.8 1211.73 L1436.39 1211.73 L1436.98 1211.73 L1437.56 1211.73 L1438.15 1211.73 L1438.74 1211.73 L1439.32 1211.73 L1439.91 1211.73 L1440.5 1211.73 L1441.08 1211.73 L1441.67 1211.73 L1442.25 1211.73 L1442.84 1211.73 L1443.43 1211.73 L1444.01 1211.73 L1444.6 1211.73 L1445.19 1211.73 L1445.77 1211.73 L1446.36 1211.73 L1446.95 1211.73 L1447.53 1211.73 L1448.12 1211.73 L1448.7 1211.73 L1449.29 1211.73 L1449.88 1211.73 L1450.46 1211.73 L1451.05 1211.73 L1451.64 1211.73 L1452.22 1211.73 L1452.81 1211.73 L1453.4 1211.73 L1453.98 1211.73 L1454.57 1211.73 L1455.16 1211.73 L1455.74 1211.73 L1456.33 1211.73 L1456.91 1211.73 L1457.5 1211.73 L1458.09 1211.73 L1458.67 1211.73 L1459.26 1211.73 L1459.85 1211.73 L1460.43 1211.73 L1461.02 1211.73 L1461.61 1211.73 L1462.19 1211.73 L1462.78 1211.73 L1463.37 1211.73 L1463.95 1211.73 L1464.54 1211.73 L1465.12 1211.73 L1465.71 1211.73 L1466.3 1211.73 L1466.88 1211.73 L1467.47 1211.73 L1468.06 1211.73 L1468.64 1211.73 L1469.23 1211.73 L1469.82 1211.73 L1470.4 1211.73 L1470.99 1211.73 L1471.57 1211.73 L1472.16 1211.73 L1472.75 1211.73 L1473.33 1211.73 L1473.92 1211.73 L1474.51 1211.73 L1475.09 1211.73 L1475.68 1211.73 L1476.27 1211.73 L1476.85 1211.73 L1477.44 1211.73 L1478.03 1211.73 L1478.61 1211.73 L1479.2 1211.73 L1479.78 1211.73 L1480.37 1211.73 L1480.96 1211.73 L1481.54 1211.73 L1482.13 1211.73 L1482.72 1211.73 L1483.3 1211.73 L1483.89 1211.73 L1484.48 1211.73 L1485.06 1211.73 L1485.65 1211.73 L1486.24 1211.73 L1486.82 1211.73 L1487.41 1211.73 L1487.99 1211.73 L1488.58 1211.73 L1489.17 1211.73 L1489.75 1211.73 L1490.34 1211.73 L1490.93 1211.73 L1491.51 1211.73 L1492.1 1211.73 L1492.69 1211.73 L1493.27 1211.73 L1493.86 1211.73 L1494.45 1211.73 L1495.03 1211.73 L1495.62 1211.73 L1496.2 1211.73 L1496.79 1211.73 L1497.38 1211.73 L1497.96 1211.73 L1498.55 1211.73 L1499.14 1211.73 L1499.72 1211.73 L1500.31 1211.73 L1500.9 1211.73 L1501.48 1211.73 L1502.07 1211.73 L1502.65 1211.73 L1503.24 1211.73 L1503.83 1211.73 L1504.41 1211.73 L1505 1211.73 L1505.59 1211.73 L1506.17 1211.73 L1506.76 1211.73 L1507.35 1211.73 L1507.93 1211.73 L1508.52 1211.73 L1509.11 1211.73 L1509.69 1211.73 L1510.28 1211.73 L1510.86 1211.73 L1511.45 1211.73 L1512.04 1211.73 L1512.62 1211.73 L1513.21 1211.73 L1513.8 1211.73 L1514.38 1211.73 L1514.97 1211.73 L1515.56 1211.73 L1516.14 1211.73 L1516.73 1211.73 L1517.32 1211.73 L1517.9 1211.73 L1518.49 1211.73 L1519.07 1211.73 L1519.66 1211.73 L1520.25 1211.73 L1520.83 1211.73 L1521.42 1211.73 L1522.01 1211.73 L1522.59 1211.73 L1523.18 1211.73 L1523.77 1211.73 L1524.35 1211.73 L1524.94 1211.73 L1525.52 1211.73 L1526.11 1211.73 L1526.7 1211.73 L1527.28 1211.73 L1527.87 1211.73 L1528.46 1211.73 L1529.04 1211.73 L1529.63 1211.73 L1530.22 1211.73 L1530.8 1211.73 L1531.39 1211.73 L1531.98 1211.73 L1532.56 1211.73 L1533.15 1211.73 L1533.73 1211.73 L1534.32 1211.73 L1534.91 1211.73 L1535.49 1211.73 L1536.08 1211.73 L1536.67 1211.73 L1537.25 1211.73 L1537.84 1211.73 L1538.43 1211.73 L1539.01 1211.73 L1539.6 1211.73 L1540.19 1211.73 L1540.77 1211.73 L1541.36 1211.73 L1541.94 1211.73 L1542.53 1211.73 L1543.12 1211.73 L1543.7 1211.73 L1544.29 1211.73 L1544.88 1211.73 L1545.46 1211.73 L1546.05 1211.73 L1546.64 1211.73 L1547.22 1211.73 L1547.81 1211.73 L1548.4 1211.73 L1548.98 1211.73 L1549.57 1211.73 L1550.15 1211.73 L1550.74 1211.73 L1551.33 1211.73 L1551.91 1211.73 L1552.5 1211.73 L1553.09 1211.73 L1553.67 1211.73 L1554.26 1211.73 L1554.85 1211.73 L1555.43 1211.73 L1556.02 1211.73 L1556.6 1211.73 L1557.19 1211.73 L1557.78 1211.73 L1558.36 1211.73 L1558.95 1211.73 L1559.54 1211.73 L1560.12 1211.73 L1560.71 1211.73 L1561.3 1211.73 L1561.88 1211.73 L1562.47 1211.73 L1563.06 1211.73 L1563.64 1211.73 L1564.23 1211.73 L1564.81 1211.73 L1565.4 1211.73 L1565.99 1211.73 L1566.57 1211.73 L1567.16 1211.73 L1567.75 1211.73 L1568.33 1211.73 L1568.92 1211.73 L1569.51 1211.73 L1570.09 1211.73 L1570.68 1211.73 L1571.27 1211.73 L1571.85 1211.73 L1572.44 1211.73 L1573.02 1211.73 L1573.61 1211.73 L1574.2 1211.73 L1574.78 1211.73 L1575.37 1211.73 L1575.96 1211.73 L1576.54 1211.73 L1577.13 1211.73 L1577.72 1211.73 L1578.3 1211.73 L1578.89 1211.73 L1579.47 1211.73 L1580.06 1211.73 L1580.65 1211.73 L1581.23 1211.73 L1581.82 1211.73 L1582.41 1211.73 L1582.99 1211.73 L1583.58 1211.73 L1584.17 1211.73 L1584.75 1211.73 L1585.34 1211.73 L1585.93 1211.73 L1586.51 1211.73 L1587.1 1211.73 L1587.68 1211.73 L1588.27 1211.73 L1588.86 1211.73 L1589.44 1211.73 L1590.03 1211.73 L1590.62 1211.73 L1591.2 1211.73 L1591.79 1211.73 L1592.38 1211.73 L1592.96 1211.73 L1593.55 1211.73 L1594.14 1211.73 L1594.72 1211.73 L1595.31 1211.73 L1595.89 1211.73 L1596.48 1211.73 L1597.07 1211.73 L1597.65 1211.73 L1598.24 1211.73 L1598.83 1211.73 L1599.41 1211.73 L1600 1211.73 L1600.59 1211.73 L1601.17 1211.73 L1601.76 1211.73 L1602.34 1211.73 L1602.93 1211.73 L1603.52 1211.73 L1604.1 1211.73 L1604.69 1211.73 L1605.28 1211.73 L1605.86 1211.73 L1606.45 1211.73 L1607.04 1211.73 L1607.62 1211.73 L1608.21 1211.73 L1608.8 1211.73 L1609.38 1211.73 L1609.97 1211.73 L1610.55 1211.73 L1611.14 1211.73 L1611.73 1211.73 L1612.31 1211.73 L1612.9 1211.73 L1613.49 1211.73 L1614.07 1211.73 L1614.66 1211.73 L1615.25 1211.73 L1615.83 1211.73 L1616.42 1211.73 L1617.01 1211.73 L1617.59 1211.73 L1618.18 1211.73 L1618.76 1211.73 L1619.35 1211.73 L1619.94 1211.73 L1620.52 1211.73 L1621.11 1211.73 L1621.7 1211.73 L1622.28 1211.73 L1622.87 1211.73 L1623.46 1211.73 L1624.04 1211.73 L1624.63 1211.73 L1625.22 1211.73 L1625.8 1211.73 L1626.39 1211.73 L1626.97 1211.73 L1627.56 1211.73 L1628.15 1211.73 L1628.73 1211.73 L1629.32 1211.73 L1629.91 1211.73 L1630.49 1211.73 L1631.08 1211.73 L1631.67 1211.73 L1632.25 1211.73 L1632.84 1211.73 L1633.42 1211.73 L1634.01 1211.73 L1634.6 1211.73 L1635.18 1211.73 L1635.77 1211.73 L1636.36 1211.73 L1636.94 1211.73 L1637.53 1211.73 L1638.12 1211.73 L1638.7 1211.73 L1639.29 1211.73 L1639.88 1211.73 L1640.46 1211.73 L1641.05 1211.73 L1641.63 1211.73 L1642.22 1211.73 L1642.81 1211.73 L1643.39 1211.73 L1643.98 1211.73 L1644.57 1211.73 L1645.15 1211.73 L1645.74 1211.73 L1646.33 1211.73 L1646.91 1211.73 L1647.5 1211.73 L1648.09 1211.73 L1648.67 1211.73 L1649.26 1211.73 L1649.84 1211.73 L1650.43 1211.73 L1651.02 1211.73 L1651.6 1211.73 L1652.19 1211.73 L1652.78 1211.73 L1653.36 1211.73 L1653.95 1211.73 L1654.54 1211.73 L1655.12 1211.73 L1655.71 1211.73 L1656.29 1211.73 L1656.88 1211.73 L1657.47 1211.73 L1658.05 1211.73 L1658.64 1211.73 L1659.23 1211.73 L1659.81 1211.73 L1660.4 1211.73 L1660.99 1211.73 L1661.57 1211.73 L1662.16 1211.73 L1662.75 1211.73 L1663.33 1211.73 L1663.92 1211.73 L1664.5 1211.73 L1665.09 1211.73 L1665.68 1211.73 L1666.26 1211.73 L1666.85 1211.73 L1667.44 1211.73 L1668.02 1211.73 L1668.61 1211.73 L1669.2 1211.73 L1669.78 1211.73 L1670.37 1211.73 L1670.96 1211.73 L1671.54 1211.73 L1672.13 1211.73 L1672.71 1211.73 L1673.3 1211.73 L1673.89 1211.73 L1674.47 1211.73 L1675.06 1211.73 L1675.65 1211.73 L1676.23 1211.73 L1676.82 1211.73 L1677.41 1211.73 L1677.99 1211.73 L1678.58 1211.73 L1679.17 1211.73 L1679.75 1211.73 L1680.34 1211.73 L1680.92 1211.73 L1681.51 1211.73 L1682.1 1211.73 L1682.68 1211.73 L1683.27 1211.73 L1683.86 1211.73 L1684.44 1211.73 L1685.03 1211.73 L1685.62 1211.73 L1686.2 1211.73 L1686.79 1211.73 L1687.37 1211.73 L1687.96 1211.73 L1688.55 1211.73 L1689.13 1211.73 L1689.72 1211.73 L1690.31 1211.73 L1690.89 1211.73 L1691.48 1211.73 L1692.07 1211.73 L1692.65 1211.73 L1693.24 1211.73 L1693.83 1211.73 L1694.41 1211.73 L1695 1211.73 L1695.58 1211.73 L1696.17 1211.73 L1696.76 1211.73 L1697.34 1211.73 L1697.93 1211.73 L1698.52 1211.73 L1699.1 1211.73 L1699.69 1211.73 L1700.28 1211.73 L1700.86 1211.73 L1701.45 1211.73 L1702.04 1211.73 L1702.62 1211.73 L1703.21 1211.73 L1703.79 1211.73 L1704.38 1211.73 L1704.97 1211.73 L1705.55 1211.73 L1706.14 1211.73 L1706.73 1211.73 L1707.31 1211.73 L1707.9 1211.73 L1708.49 1211.73 L1709.07 1211.73 L1709.66 1211.73 L1710.24 1211.73 L1710.83 1211.73 L1711.42 1211.73 L1712 1211.73 L1712.59 1211.73 L1713.18 1211.73 L1713.76 1211.73 L1714.35 1211.73 L1714.94 1211.73 L1715.52 1211.73 L1716.11 1211.73 L1716.7 1211.73 L1717.28 1211.73 L1717.87 1211.73 L1718.45 1211.73 L1719.04 1211.73 L1719.63 1211.73 L1720.21 1211.73 L1720.8 1211.73 L1721.39 1211.73 L1721.97 1211.73 L1722.56 1211.73 L1723.15 1211.73 L1723.73 1211.73 L1724.32 1211.73 L1724.91 1211.73 L1725.49 1211.73 L1726.08 1211.73 L1726.66 1211.73 L1727.25 1211.73 L1727.84 1211.73 L1728.42 1211.73 L1729.01 1211.73 L1729.6 1211.73 L1730.18 1211.73 L1730.77 1211.73 L1731.36 1211.73 L1731.94 1211.73 L1732.53 1211.73 L1733.11 1211.73 L1733.7 1211.73 L1734.29 1211.73 L1734.87 1211.73 L1735.46 1211.73 L1736.05 1211.73 L1736.63 1211.73 L1737.22 1211.73 L1737.81 1211.73 L1738.39 1211.73 L1738.98 1211.73 L1739.57 1211.73 L1740.15 1211.73 L1740.74 1211.73 L1741.32 1211.73 L1741.91 1211.73 L1742.5 1211.73 L1743.08 1211.73 L1743.67 1211.73 L1744.26 1211.73 L1744.84 1211.73 L1745.43 1211.73 L1746.02 1211.73 L1746.6 1211.73 L1747.19 1211.73 L1747.78 1211.73 L1748.36 1211.73 L1748.95 1211.73 L1749.53 1211.73 L1750.12 1211.73 L1750.71 1211.73 L1751.29 1211.73 L1751.88 1211.73 L1752.47 1211.73 L1753.05 1211.73 L1753.64 1211.73 L1754.23 1211.73 L1754.81 1211.73 L1755.4 1211.73 L1755.99 1211.73 L1756.57 1211.73 L1757.16 1211.73 L1757.74 1211.73 L1758.33 1211.73 L1758.92 1211.73 L1759.5 1211.73 L1760.09 1211.73 L1760.68 1211.73 L1761.26 1211.73 L1761.85 1211.73 L1762.44 1211.73 L1763.02 1211.73 L1763.61 1211.73 L1764.19 1211.73 L1764.78 1211.73 L1765.37 1211.73 L1765.95 1211.73 L1766.54 1211.73 L1767.13 1211.73 L1767.71 1211.73 L1768.3 1211.73 L1768.89 1211.73 L1769.47 1211.73 L1770.06 1211.73 L1770.65 1211.73 L1771.23 1211.73 L1771.82 1211.73 L1772.4 1211.73 L1772.99 1211.73 L1773.58 1211.73 L1774.16 1211.73 L1774.75 1211.73 L1775.34 1211.73 L1775.92 1211.73 L1776.51 1211.73 L1777.1 1211.73 L1777.68 1211.73 L1778.27 1211.73 L1778.86 1211.73 L1779.44 1211.73 L1780.03 1211.73 L1780.61 1211.73 L1781.2 1211.73 L1781.79 1211.73 L1782.37 1211.73 L1782.96 1211.73 L1783.55 1211.73 L1784.13 1211.73 L1784.72 1211.73 L1785.31 1211.73 L1785.89 1211.73 L1786.48 1211.73 L1787.06 1211.73 L1787.65 1211.73 L1788.24 1211.73 L1788.82 1211.73 L1789.41 1211.73 L1790 1211.73 L1790.58 1211.73 L1791.17 1211.73 L1791.76 1211.73 L1792.34 1211.73 L1792.93 1211.73 L1793.52 1211.73 L1794.1 1211.73 L1794.69 1211.73 L1795.27 1211.73 L1795.86 1211.73 L1796.45 1211.73 L1797.03 1211.73 L1797.62 1211.73 L1798.21 1211.73 L1798.79 1211.73 L1799.38 1211.73 L1799.97 1211.73 L1800.55 1211.73 L1801.14 1211.73 L1801.73 1211.73 L1802.31 1211.73 L1802.9 1211.73 L1803.48 1211.73 L1804.07 1211.73 L1804.66 1211.73 L1805.24 1211.73 L1805.83 1211.73 L1806.42 1211.73 L1807 1211.73 L1807.59 1211.73 L1808.18 1211.73 L1808.76 1211.73 L1809.35 1211.73 L1809.94 1211.73 L1810.52 1211.73 L1811.11 1211.73 L1811.69 1211.73 L1812.28 1211.73 L1812.87 1211.73 L1813.45 1211.73 L1814.04 1211.73 L1814.63 1211.73 L1815.21 1211.73 L1815.8 1211.73 L1816.39 1211.73 L1816.97 1211.73 L1817.56 1211.73 L1818.14 1211.73 L1818.73 1211.73 L1819.32 1211.73 L1819.9 1211.73 L1820.49 1211.73 L1821.08 1211.73 L1821.66 1211.73 L1822.25 1211.73 L1822.84 1211.73 L1823.42 1211.73 L1824.01 1211.73 L1824.6 1211.73 L1825.18 1211.73 L1825.77 1211.73 L1826.35 1211.73 L1826.94 1211.73 L1827.53 1211.73 L1828.11 1211.73 L1828.7 1211.73 L1829.29 1211.73 L1829.87 1211.73 L1830.46 1211.73 L1831.05 1211.73 L1831.63 1211.73 L1832.22 1211.73 L1832.81 1211.73 L1833.39 1211.73 L1833.98 1211.73 L1834.56 1211.73 L1835.15 1211.73 L1835.74 1211.73 L1836.32 1211.73 L1836.91 1211.73 L1837.5 1211.73 L1838.08 1211.73 L1838.67 1211.73 L1839.26 1211.73 L1839.84 1211.73 L1840.43 1211.73 L1841.01 1211.73 L1841.6 1211.73 L1842.19 1211.73 L1842.77 1211.73 L1843.36 1211.73 L1843.95 1211.73 L1844.53 1211.73 L1845.12 1211.73 L1845.71 1211.73 L1846.29 1211.73 L1846.88 1211.73 L1847.47 1211.73 L1848.05 1211.73 L1848.64 1211.73 L1849.22 1211.73 L1849.81 1211.73 L1850.4 1211.73 L1850.98 1211.73 L1851.57 1211.73 L1852.16 1211.73 L1852.74 1211.73 L1853.33 1211.73 L1853.92 1211.73 L1854.5 1211.73 L1855.09 1211.73 L1855.68 1211.73 L1856.26 1211.73 L1856.85 1211.73 L1857.43 1211.73 L1858.02 1211.73 L1858.61 1211.73 L1859.19 1211.73 L1859.78 1211.73 L1860.37 1211.73 L1860.95 1211.73 L1861.54 1211.73 L1862.13 1211.73 L1862.71 1211.73 L1863.3 1211.73 L1863.88 1211.73 L1864.47 1211.73 L1865.06 1211.73 L1865.64 1211.73 L1866.23 1211.73 L1866.82 1211.73 L1867.4 1211.73 L1867.99 1211.73 L1868.58 1211.73 L1869.16 1211.73 L1869.75 1211.73 L1870.34 1211.73 L1870.92 1211.73 L1871.51 1211.73 L1872.09 1211.73 L1872.68 1211.73 L1873.27 1211.73 L1873.85 1211.73 L1874.44 1211.73 L1875.03 1211.73 L1875.61 1211.73 L1876.2 1211.73 L1876.79 1211.73 L1877.37 1211.73 L1877.96 1211.73 L1878.55 1211.73 L1879.13 1211.73 L1879.72 1211.73 L1880.3 1211.73 L1880.89 1211.73 L1881.48 1211.73 L1882.06 1211.73 L1882.65 1211.73 L1883.24 1211.73 L1883.82 1211.73 L1884.41 1211.73 L1885 1211.73 L1885.58 1211.73 L1886.17 1211.73 L1886.76 1211.73 L1887.34 1211.73 L1887.93 1211.73 L1888.51 1211.73 L1889.1 1211.73 L1889.69 1211.73 L1890.27 1211.73 L1890.86 1211.73 L1891.45 1211.73 L1892.03 1211.73 L1892.62 1211.73 L1893.21 1211.73 L1893.79 1211.73 L1894.38 1211.73 L1894.96 1211.73 L1895.55 1211.73 L1896.14 1211.73 L1896.72 1211.73 L1897.31 1211.73 L1897.9 1211.73 L1898.48 1211.73 L1899.07 1211.73 L1899.66 1211.73 L1900.24 1211.73 L1900.83 1211.73 L1901.42 1211.73 L1902 1211.73 L1902.59 1211.73 L1903.17 1211.73 L1903.76 1211.73 L1904.35 1211.73 L1904.93 1211.73 L1905.52 1211.73 L1906.11 1211.73 L1906.69 1211.73 L1907.28 1211.73 L1907.87 1211.73 L1908.45 1211.73 L1909.04 1211.73 L1909.63 1211.73 L1910.21 1211.73 L1910.8 1211.73 L1911.38 1211.73 L1911.97 1211.73 L1912.56 1211.73 L1913.14 1211.73 L1913.73 1211.73 L1914.32 1211.73 L1914.9 1211.73 L1915.49 1211.73 L1916.08 1211.73 L1916.66 1211.73 L1917.25 1211.73 L1917.83 1211.73 L1918.42 1211.73 L1919.01 1211.73 L1919.59 1211.73 L1920.18 1211.73 L1920.77 1211.73 L1921.35 1211.73 L1921.94 1211.73 L1922.53 1211.73 L1923.11 1211.73 L1923.7 1211.73 L1924.29 1211.73 L1924.87 1211.73 L1925.46 1211.73 L1926.04 1211.73 L1926.63 1211.73 L1927.22 1211.73 L1927.8 1211.73 L1928.39 1211.73 L1928.98 1211.73 L1929.56 1211.73 L1930.15 1211.73 L1930.74 1211.73 L1931.32 1211.73 L1931.91 1211.73 L1932.5 1211.73 L1933.08 1211.73 L1933.67 1211.73 L1934.25 1211.73 L1934.84 1211.73 L1935.43 1211.73 L1936.01 1211.73 L1936.6 1211.73 L1937.19 1211.73 L1937.77 1211.73 L1938.36 1211.73 L1938.95 1211.73 L1939.53 1211.73 L1940.12 1211.73 L1940.71 1211.73 L1941.29 1211.73 L1941.88 1211.73 L1942.46 1211.73 L1943.05 1211.73 L1943.64 1211.73 L1944.22 1211.73 L1944.81 1211.73 L1945.4 1211.73 L1945.98 1211.73 L1946.57 1211.73 L1947.16 1211.73 L1947.74 1211.73 L1948.33 1211.73 L1948.91 1211.73 L1949.5 1211.73 L1950.09 1211.73 L1950.67 1211.73 L1951.26 1211.73 L1951.85 1211.73 L1952.43 1211.73 L1953.02 1211.73 L1953.61 1211.73 L1954.19 1211.73 L1954.78 1211.73 L1955.37 1211.73 L1955.95 1211.73 L1956.54 1211.73 L1957.12 1211.73 L1957.71 1211.73 L1958.3 1211.73 L1958.88 1211.73 L1959.47 1211.73 L1960.06 1211.73 L1960.64 1211.73 L1961.23 1211.73 L1961.82 1211.73 L1962.4 1211.73 L1962.99 1211.73 L1963.58 1211.73 L1964.16 1211.73 L1964.75 1211.73 L1965.33 1211.73 L1965.92 1211.73 L1966.51 1211.73 L1967.09 1211.73 L1967.68 1211.73 L1968.27 1211.73 L1968.85 1211.73 L1969.44 1211.73 L1970.03 1211.73 L1970.61 1211.73 L1971.2 1211.73 L1971.78 1211.73 L1972.37 1211.73 L1972.96 1211.73 L1973.54 1211.73 L1974.13 1211.73 L1974.72 1211.73 L1975.3 1211.73 L1975.89 1211.73 L1976.48 1211.73 L1977.06 1211.73 L1977.65 1211.73 L1978.24 1211.73 L1978.82 1211.73 L1979.41 1211.73 L1979.99 1211.73 L1980.58 1211.73 L1981.17 1211.73 L1981.75 1211.73 L1982.34 1211.73 L1982.93 1211.73 L1983.51 1211.73 L1984.1 1211.73 L1984.69 1211.73 L1985.27 1211.73 L1985.86 1211.73 L1986.45 1211.73 L1987.03 1211.73 L1987.62 1211.73 L1988.2 1211.73 L1988.79 1211.73 L1989.38 1211.73 L1989.96 1211.73 L1990.55 1211.73 L1991.14 1211.73 L1991.72 1211.73 L1992.31 1211.73 L1992.9 1211.73 L1993.48 1211.73 L1994.07 1211.73 L1994.65 1211.73 L1995.24 1211.73 L1995.83 1211.73 L1996.41 1211.73 L1997 1211.73 L1997.59 1211.73 L1998.17 1211.73 L1998.76 1211.73 L1999.35 1211.73 L1999.93 1211.73 L2000.52 1211.73 L2001.11 1211.73 L2001.69 1211.73 L2002.28 1211.73 L2002.86 1211.73 L2003.45 1211.73 L2004.04 1211.73 L2004.62 1211.73 L2005.21 1211.73 L2005.8 1211.73 L2006.38 1211.73 L2006.97 1211.73 L2007.56 1211.73 L2008.14 1211.73 L2008.73 1211.73 L2009.32 1211.73 L2009.9 1211.73 L2010.49 1211.73 L2011.07 1211.73 L2011.66 1211.73 L2012.25 1211.73 L2012.83 1211.73 L2013.42 1211.73 L2014.01 1211.73 L2014.59 1211.73 L2015.18 1211.73 L2015.77 1211.73 L2016.35 1211.73 L2016.94 1211.73 L2017.53 1211.73 L2018.11 1211.73 L2018.7 1211.73 L2019.28 1211.73 L2019.87 1211.73 L2020.46 1211.73 L2021.04 1211.73 L2021.63 1211.73 L2022.22 1211.73 L2022.8 1211.73 L2023.39 1211.73 L2023.98 1211.73 L2024.56 1211.73 L2025.15 1211.73 L2025.73 1211.73 L2026.32 1211.73 L2026.91 1211.73 L2027.49 1211.73 L2028.08 1211.73 L2028.67 1211.73 L2029.25 1211.73 L2029.84 1211.73 L2030.43 1211.73 L2031.01 1211.73 L2031.6 1211.73 L2032.19 1211.73 L2032.77 1211.73 L2033.36 1211.73 L2033.94 1211.73 L2034.53 1211.73 L2035.12 1211.73 L2035.7 1211.73 L2036.29 1211.73 L2036.88 1211.73 L2037.46 1211.73 L2038.05 1211.73 L2038.64 1211.73 L2039.22 1211.73 L2039.81 1211.73 L2040.4 1211.73 L2040.98 1211.73 L2041.57 1211.73 L2042.15 1211.73 L2042.74 1211.73 L2043.33 1211.73 L2043.91 1211.73 L2044.5 1211.73 L2045.09 1211.73 L2045.67 1211.73 L2046.26 1211.73 L2046.85 1211.73 L2047.43 1211.73 L2048.02 1211.73 L2048.6 1211.73 L2049.19 1211.73 L2049.78 1211.73 L2050.36 1211.73 L2050.95 1211.73 L2051.54 1211.73 L2052.12 1211.73 L2052.71 1211.73 L2053.3 1211.73 L2053.88 1211.73 L2054.47 1211.73 L2055.06 1211.73 L2055.64 1211.73 L2056.23 1211.73 L2056.81 1211.73 L2057.4 1211.73 L2057.99 1211.73 L2058.57 1211.73 L2059.16 1211.73 L2059.75 1211.73 L2060.33 1211.73 L2060.92 1211.73 L2061.51 1211.73 L2062.09 1211.73 L2062.68 1211.73 L2063.27 1211.73 L2063.85 1211.73 L2064.44 1211.73 L2065.02 1211.73 L2065.61 1211.73 L2066.2 1211.73 L2066.78 1211.73 L2067.37 1211.73 L2067.96 1211.73 L2068.54 1211.73 L2069.13 1211.73 L2069.72 1211.73 L2070.3 1211.73 L2070.89 1211.73 L2071.48 1211.73 L2072.06 1211.73 L2072.65 1211.73 L2073.23 1211.73 L2073.82 1211.73 L2074.41 1211.73 L2074.99 1211.73 L2075.58 1211.73 L2076.17 1211.73 L2076.75 1211.73 L2077.34 1211.73 L2077.93 1211.73 L2078.51 1211.73 L2079.1 1211.73 L2079.68 1211.73 L2080.27 1211.73 L2080.86 1211.73 L2081.44 1211.73 L2082.03 1211.73 L2082.62 1211.73 L2083.2 1211.73 L2083.79 1211.73 L2084.38 1211.73 L2084.96 1211.73 L2085.55 1211.73 L2086.14 1211.73 L2086.72 1211.73 L2087.31 1211.73 L2087.89 1211.73 L2088.48 1211.73 L2089.07 1211.73 L2089.65 1211.73 L2090.24 1211.73 L2090.83 1211.73 L2091.41 1211.73 L2092 1211.73 L2092.59 1211.73 L2093.17 1211.73 L2093.76 1211.73 L2094.35 1211.73 L2094.93 1211.73 L2095.52 1211.73 L2096.1 1211.73 L2096.69 1211.73 L2097.28 1211.73 L2097.86 1211.73 L2098.45 1211.73 L2099.04 1211.73 L2099.62 1211.73 L2100.21 1211.73 L2100.8 1211.73 L2101.38 1211.73 L2101.97 1211.73 L2102.55 1211.73 L2103.14 1211.73 L2103.73 1211.73 L2104.31 1211.73 L2104.9 1211.73 L2105.49 1211.73 L2106.07 1211.73 L2106.66 1211.73 L2107.25 1211.73 L2107.83 1211.73 L2108.42 1211.73 L2109.01 1211.73 L2109.59 1211.73 L2110.18 1211.73 L2110.76 1211.73 L2111.35 1211.73 L2111.94 1211.73 L2112.52 1211.73 L2113.11 1211.73 L2113.7 1211.73 L2114.28 1211.73 L2114.87 1211.73 L2115.46 1211.73 L2116.04 1211.73 L2116.63 1211.73 L2117.22 1211.73 L2117.8 1211.73 L2118.39 1211.73 L2118.97 1211.73 L2119.56 1211.73 L2120.15 1211.73 L2120.73 1211.73 L2121.32 1211.73 L2121.91 1211.73 L2122.49 1211.73 L2123.08 1211.73 L2123.67 1211.73 L2124.25 1211.73 L2124.84 1211.73 L2125.42 1211.73 L2126.01 1211.73 L2126.6 1211.73 L2127.18 1211.73 L2127.77 1211.73 L2128.36 1211.73 L2128.94 1211.73 L2129.53 1211.73 L2130.12 1211.73 L2130.7 1211.73 L2131.29 1211.73 L2131.88 1211.73 L2132.46 1211.73 L2133.05 1211.73 L2133.63 1211.73 L2134.22 1211.73 L2134.81 1211.73 L2135.39 1211.73 L2135.98 1211.73 L2136.57 1211.73 L2137.15 1211.73 L2137.74 1211.73 L2138.33 1211.73 L2138.91 1211.73 L2139.5 1211.73 L2140.09 1211.73 L2140.67 1211.73 L2141.26 1211.73 L2141.84 1211.73 L2142.43 1211.73 L2143.02 1211.73 L2143.6 1211.73 L2144.19 1211.73 L2144.78 1211.73 L2145.36 1211.73 L2145.95 1211.73 L2146.54 1211.73 L2147.12 1211.73 L2147.71 1211.73 L2148.3 1211.73 L2148.88 1211.73 L2149.47 1211.73 L2150.05 1211.73 L2150.64 1211.73 L2151.23 1211.73 L2151.81 1211.73 L2152.4 1211.73 L2152.99 1211.73 L2153.57 1211.73 L2154.16 1211.73 L2154.75 1211.73 L2155.33 1211.73 L2155.92 1211.73 L2156.5 1211.73 L2157.09 1211.73 L2157.68 1211.73 L2158.26 1211.73 L2158.26 1211.6 L2157.68 1211.6 L2157.09 1211.6 L2156.5 1211.6 L2155.92 1211.6 L2155.33 1211.6 L2154.75 1211.6 L2154.16 1211.6 L2153.57 1211.6 L2152.99 1211.6 L2152.4 1211.6 L2151.81 1211.6 L2151.23 1211.6 L2150.64 1211.6 L2150.05 1211.6 L2149.47 1211.6 L2148.88 1211.6 L2148.3 1211.6 L2147.71 1211.6 L2147.12 1211.6 L2146.54 1211.6 L2145.95 1211.6 L2145.36 1211.6 L2144.78 1211.6 L2144.19 1211.6 L2143.6 1211.6 L2143.02 1211.6 L2142.43 1211.6 L2141.84 1211.6 L2141.26 1211.6 L2140.67 1211.6 L2140.09 1211.6 L2139.5 1211.6 L2138.91 1211.6 L2138.33 1211.6 L2137.74 1211.6 L2137.15 1211.6 L2136.57 1211.6 L2135.98 1211.6 L2135.39 1211.6 L2134.81 1211.6 L2134.22 1211.6 L2133.63 1211.6 L2133.05 1211.6 L2132.46 1211.6 L2131.88 1211.6 L2131.29 1211.6 L2130.7 1211.6 L2130.12 1211.6 L2129.53 1211.6 L2128.94 1211.6 L2128.36 1211.6 L2127.77 1211.6 L2127.18 1211.6 L2126.6 1211.6 L2126.01 1211.6 L2125.42 1211.6 L2124.84 1211.6 L2124.25 1211.6 L2123.67 1211.6 L2123.08 1211.6 L2122.49 1211.6 L2121.91 1211.6 L2121.32 1211.6 L2120.73 1211.6 L2120.15 1211.6 L2119.56 1211.6 L2118.97 1211.6 L2118.39 1211.6 L2117.8 1211.6 L2117.22 1211.6 L2116.63 1211.6 L2116.04 1211.6 L2115.46 1211.6 L2114.87 1211.6 L2114.28 1211.6 L2113.7 1211.6 L2113.11 1211.6 L2112.52 1211.6 L2111.94 1211.6 L2111.35 1211.6 L2110.76 1211.6 L2110.18 1211.6 L2109.59 1211.6 L2109.01 1211.6 L2108.42 1211.6 L2107.83 1211.6 L2107.25 1211.6 L2106.66 1211.6 L2106.07 1211.6 L2105.49 1211.6 L2104.9 1211.6 L2104.31 1211.6 L2103.73 1211.6 L2103.14 1211.6 L2102.55 1211.6 L2101.97 1211.6 L2101.38 1211.6 L2100.8 1211.6 L2100.21 1211.6 L2099.62 1211.6 L2099.04 1211.6 L2098.45 1211.6 L2097.86 1211.6 L2097.28 1211.6 L2096.69 1211.6 L2096.1 1211.6 L2095.52 1211.6 L2094.93 1211.6 L2094.35 1211.6 L2093.76 1211.6 L2093.17 1211.6 L2092.59 1211.6 L2092 1211.6 L2091.41 1211.6 L2090.83 1211.6 L2090.24 1211.6 L2089.65 1211.6 L2089.07 1211.6 L2088.48 1211.6 L2087.89 1211.6 L2087.31 1211.6 L2086.72 1211.6 L2086.14 1211.6 L2085.55 1211.6 L2084.96 1211.6 L2084.38 1211.6 L2083.79 1211.6 L2083.2 1211.6 L2082.62 1211.6 L2082.03 1211.6 L2081.44 1211.6 L2080.86 1211.6 L2080.27 1211.6 L2079.68 1211.6 L2079.1 1211.6 L2078.51 1211.6 L2077.93 1211.6 L2077.34 1211.6 L2076.75 1211.6 L2076.17 1211.6 L2075.58 1211.6 L2074.99 1211.6 L2074.41 1211.6 L2073.82 1211.6 L2073.23 1211.6 L2072.65 1211.6 L2072.06 1211.6 L2071.48 1211.6 L2070.89 1211.6 L2070.3 1211.6 L2069.72 1211.6 L2069.13 1211.6 L2068.54 1211.6 L2067.96 1211.6 L2067.37 1211.6 L2066.78 1211.6 L2066.2 1211.6 L2065.61 1211.6 L2065.02 1211.6 L2064.44 1211.6 L2063.85 1211.6 L2063.27 1211.6 L2062.68 1211.6 L2062.09 1211.6 L2061.51 1211.6 L2060.92 1211.6 L2060.33 1211.6 L2059.75 1211.6 L2059.16 1211.6 L2058.57 1211.6 L2057.99 1211.6 L2057.4 1211.6 L2056.81 1211.6 L2056.23 1211.6 L2055.64 1211.6 L2055.06 1211.6 L2054.47 1211.6 L2053.88 1211.6 L2053.3 1211.6 L2052.71 1211.6 L2052.12 1211.6 L2051.54 1211.6 L2050.95 1211.6 L2050.36 1211.6 L2049.78 1211.6 L2049.19 1211.6 L2048.6 1211.6 L2048.02 1211.6 L2047.43 1211.6 L2046.85 1211.6 L2046.26 1211.6 L2045.67 1211.6 L2045.09 1211.6 L2044.5 1211.6 L2043.91 1211.6 L2043.33 1211.6 L2042.74 1211.6 L2042.15 1211.6 L2041.57 1211.6 L2040.98 1211.6 L2040.4 1211.6 L2039.81 1211.6 L2039.22 1211.6 L2038.64 1211.6 L2038.05 1211.6 L2037.46 1211.6 L2036.88 1211.6 L2036.29 1211.6 L2035.7 1211.6 L2035.12 1211.6 L2034.53 1211.6 L2033.94 1211.6 L2033.36 1211.6 L2032.77 1211.6 L2032.19 1211.6 L2031.6 1211.6 L2031.01 1211.6 L2030.43 1211.6 L2029.84 1211.6 L2029.25 1211.6 L2028.67 1211.6 L2028.08 1211.6 L2027.49 1211.6 L2026.91 1211.6 L2026.32 1211.6 L2025.73 1211.6 L2025.15 1211.6 L2024.56 1211.6 L2023.98 1211.6 L2023.39 1211.6 L2022.8 1211.6 L2022.22 1211.6 L2021.63 1211.6 L2021.04 1211.6 L2020.46 1211.6 L2019.87 1211.6 L2019.28 1211.6 L2018.7 1211.6 L2018.11 1211.6 L2017.53 1211.6 L2016.94 1211.6 L2016.35 1211.6 L2015.77 1211.6 L2015.18 1211.6 L2014.59 1211.6 L2014.01 1211.6 L2013.42 1211.6 L2012.83 1211.6 L2012.25 1211.6 L2011.66 1211.6 L2011.07 1211.6 L2010.49 1211.6 L2009.9 1211.6 L2009.32 1211.6 L2008.73 1211.6 L2008.14 1211.6 L2007.56 1211.6 L2006.97 1211.6 L2006.38 1211.6 L2005.8 1211.6 L2005.21 1211.6 L2004.62 1211.6 L2004.04 1211.6 L2003.45 1211.6 L2002.86 1211.6 L2002.28 1211.6 L2001.69 1211.6 L2001.11 1211.6 L2000.52 1211.6 L1999.93 1211.6 L1999.35 1211.6 L1998.76 1211.6 L1998.17 1211.6 L1997.59 1211.6 L1997 1211.6 L1996.41 1211.6 L1995.83 1211.6 L1995.24 1211.6 L1994.65 1211.6 L1994.07 1211.6 L1993.48 1211.6 L1992.9 1211.6 L1992.31 1211.6 L1991.72 1211.6 L1991.14 1211.6 L1990.55 1211.6 L1989.96 1211.6 L1989.38 1211.6 L1988.79 1211.6 L1988.2 1211.6 L1987.62 1211.6 L1987.03 1211.6 L1986.45 1211.6 L1985.86 1211.6 L1985.27 1211.6 L1984.69 1211.6 L1984.1 1211.6 L1983.51 1211.6 L1982.93 1211.6 L1982.34 1211.6 L1981.75 1211.6 L1981.17 1211.6 L1980.58 1211.6 L1979.99 1211.6 L1979.41 1211.6 L1978.82 1211.6 L1978.24 1211.6 L1977.65 1211.6 L1977.06 1211.6 L1976.48 1211.6 L1975.89 1211.6 L1975.3 1211.6 L1974.72 1211.6 L1974.13 1211.6 L1973.54 1211.6 L1972.96 1211.6 L1972.37 1211.6 L1971.78 1211.6 L1971.2 1211.6 L1970.61 1211.6 L1970.03 1211.6 L1969.44 1211.6 L1968.85 1211.6 L1968.27 1211.6 L1967.68 1211.6 L1967.09 1211.6 L1966.51 1211.6 L1965.92 1211.6 L1965.33 1211.6 L1964.75 1211.6 L1964.16 1211.6 L1963.58 1211.6 L1962.99 1211.6 L1962.4 1211.6 L1961.82 1211.6 L1961.23 1211.6 L1960.64 1211.6 L1960.06 1211.6 L1959.47 1211.6 L1958.88 1211.6 L1958.3 1211.6 L1957.71 1211.6 L1957.12 1211.6 L1956.54 1211.6 L1955.95 1211.6 L1955.37 1211.6 L1954.78 1211.6 L1954.19 1211.6 L1953.61 1211.6 L1953.02 1211.6 L1952.43 1211.6 L1951.85 1211.6 L1951.26 1211.6 L1950.67 1211.6 L1950.09 1211.6 L1949.5 1211.6 L1948.91 1211.6 L1948.33 1211.6 L1947.74 1211.6 L1947.16 1211.6 L1946.57 1211.6 L1945.98 1211.6 L1945.4 1211.6 L1944.81 1211.6 L1944.22 1211.6 L1943.64 1211.6 L1943.05 1211.6 L1942.46 1211.6 L1941.88 1211.6 L1941.29 1211.6 L1940.71 1211.6 L1940.12 1211.6 L1939.53 1211.6 L1938.95 1211.6 L1938.36 1211.6 L1937.77 1211.6 L1937.19 1211.6 L1936.6 1211.6 L1936.01 1211.6 L1935.43 1211.6 L1934.84 1211.6 L1934.25 1211.6 L1933.67 1211.6 L1933.08 1211.6 L1932.5 1211.6 L1931.91 1211.6 L1931.32 1211.6 L1930.74 1211.6 L1930.15 1211.6 L1929.56 1211.6 L1928.98 1211.6 L1928.39 1211.6 L1927.8 1211.6 L1927.22 1211.6 L1926.63 1211.6 L1926.04 1211.6 L1925.46 1211.6 L1924.87 1211.6 L1924.29 1211.6 L1923.7 1211.6 L1923.11 1211.6 L1922.53 1211.6 L1921.94 1211.6 L1921.35 1211.6 L1920.77 1211.6 L1920.18 1211.6 L1919.59 1211.6 L1919.01 1211.6 L1918.42 1211.6 L1917.83 1211.6 L1917.25 1211.6 L1916.66 1211.6 L1916.08 1211.6 L1915.49 1211.6 L1914.9 1211.6 L1914.32 1211.6 L1913.73 1211.6 L1913.14 1211.6 L1912.56 1211.6 L1911.97 1211.6 L1911.38 1211.6 L1910.8 1211.6 L1910.21 1211.6 L1909.63 1211.6 L1909.04 1211.6 L1908.45 1211.6 L1907.87 1211.6 L1907.28 1211.6 L1906.69 1211.6 L1906.11 1211.6 L1905.52 1211.6 L1904.93 1211.6 L1904.35 1211.6 L1903.76 1211.6 L1903.17 1211.6 L1902.59 1211.6 L1902 1211.6 L1901.42 1211.6 L1900.83 1211.6 L1900.24 1211.6 L1899.66 1211.6 L1899.07 1211.6 L1898.48 1211.6 L1897.9 1211.6 L1897.31 1211.6 L1896.72 1211.6 L1896.14 1211.6 L1895.55 1211.6 L1894.96 1211.6 L1894.38 1211.6 L1893.79 1211.6 L1893.21 1211.6 L1892.62 1211.6 L1892.03 1211.6 L1891.45 1211.6 L1890.86 1211.6 L1890.27 1211.6 L1889.69 1211.6 L1889.1 1211.6 L1888.51 1211.6 L1887.93 1211.6 L1887.34 1211.6 L1886.76 1211.6 L1886.17 1211.6 L1885.58 1211.6 L1885 1211.6 L1884.41 1211.6 L1883.82 1211.6 L1883.24 1211.6 L1882.65 1211.6 L1882.06 1211.6 L1881.48 1211.6 L1880.89 1211.6 L1880.3 1211.6 L1879.72 1211.6 L1879.13 1211.6 L1878.55 1211.6 L1877.96 1211.6 L1877.37 1211.6 L1876.79 1211.6 L1876.2 1211.6 L1875.61 1211.6 L1875.03 1211.6 L1874.44 1211.6 L1873.85 1211.6 L1873.27 1211.6 L1872.68 1211.6 L1872.09 1211.6 L1871.51 1211.6 L1870.92 1211.6 L1870.34 1211.6 L1869.75 1211.6 L1869.16 1211.6 L1868.58 1211.6 L1867.99 1211.6 L1867.4 1211.6 L1866.82 1211.6 L1866.23 1211.6 L1865.64 1211.6 L1865.06 1211.6 L1864.47 1211.6 L1863.88 1211.6 L1863.3 1211.6 L1862.71 1211.6 L1862.13 1211.6 L1861.54 1211.6 L1860.95 1211.6 L1860.37 1211.6 L1859.78 1211.6 L1859.19 1211.6 L1858.61 1211.6 L1858.02 1211.6 L1857.43 1211.6 L1856.85 1211.6 L1856.26 1211.6 L1855.68 1211.6 L1855.09 1211.6 L1854.5 1211.6 L1853.92 1211.6 L1853.33 1211.6 L1852.74 1211.6 L1852.16 1211.6 L1851.57 1211.6 L1850.98 1211.6 L1850.4 1211.6 L1849.81 1211.6 L1849.22 1211.6 L1848.64 1211.6 L1848.05 1211.6 L1847.47 1211.6 L1846.88 1211.6 L1846.29 1211.6 L1845.71 1211.6 L1845.12 1211.6 L1844.53 1211.6 L1843.95 1211.6 L1843.36 1211.6 L1842.77 1211.6 L1842.19 1211.6 L1841.6 1211.6 L1841.01 1211.6 L1840.43 1211.6 L1839.84 1211.6 L1839.26 1211.6 L1838.67 1211.6 L1838.08 1211.6 L1837.5 1211.6 L1836.91 1211.6 L1836.32 1211.6 L1835.74 1211.6 L1835.15 1211.6 L1834.56 1211.6 L1833.98 1211.6 L1833.39 1211.6 L1832.81 1211.6 L1832.22 1211.6 L1831.63 1211.6 L1831.05 1211.6 L1830.46 1211.6 L1829.87 1211.6 L1829.29 1211.6 L1828.7 1211.6 L1828.11 1211.6 L1827.53 1211.6 L1826.94 1211.6 L1826.35 1211.6 L1825.77 1211.6 L1825.18 1211.6 L1824.6 1211.6 L1824.01 1211.6 L1823.42 1211.6 L1822.84 1211.6 L1822.25 1211.6 L1821.66 1211.6 L1821.08 1211.6 L1820.49 1211.6 L1819.9 1211.6 L1819.32 1211.6 L1818.73 1211.6 L1818.14 1211.6 L1817.56 1211.6 L1816.97 1211.6 L1816.39 1211.6 L1815.8 1211.6 L1815.21 1211.6 L1814.63 1211.6 L1814.04 1211.6 L1813.45 1211.6 L1812.87 1211.6 L1812.28 1211.6 L1811.69 1211.6 L1811.11 1211.6 L1810.52 1211.6 L1809.94 1211.6 L1809.35 1211.6 L1808.76 1211.6 L1808.18 1211.6 L1807.59 1211.6 L1807 1211.6 L1806.42 1211.6 L1805.83 1211.6 L1805.24 1211.6 L1804.66 1211.6 L1804.07 1211.6 L1803.48 1211.6 L1802.9 1211.6 L1802.31 1211.6 L1801.73 1211.6 L1801.14 1211.6 L1800.55 1211.6 L1799.97 1211.6 L1799.38 1211.6 L1798.79 1211.6 L1798.21 1211.6 L1797.62 1211.6 L1797.03 1211.6 L1796.45 1211.6 L1795.86 1211.6 L1795.27 1211.6 L1794.69 1211.6 L1794.1 1211.6 L1793.52 1211.6 L1792.93 1211.6 L1792.34 1211.6 L1791.76 1211.6 L1791.17 1211.6 L1790.58 1211.6 L1790 1211.6 L1789.41 1211.6 L1788.82 1211.6 L1788.24 1211.6 L1787.65 1211.6 L1787.06 1211.6 L1786.48 1211.6 L1785.89 1211.6 L1785.31 1211.6 L1784.72 1211.6 L1784.13 1211.6 L1783.55 1211.6 L1782.96 1211.6 L1782.37 1211.6 L1781.79 1211.6 L1781.2 1211.6 L1780.61 1211.6 L1780.03 1211.6 L1779.44 1211.6 L1778.86 1211.6 L1778.27 1211.6 L1777.68 1211.6 L1777.1 1211.6 L1776.51 1211.6 L1775.92 1211.6 L1775.34 1211.6 L1774.75 1211.6 L1774.16 1211.6 L1773.58 1211.6 L1772.99 1211.6 L1772.4 1211.6 L1771.82 1211.6 L1771.23 1211.6 L1770.65 1211.6 L1770.06 1211.6 L1769.47 1211.6 L1768.89 1211.6 L1768.3 1211.6 L1767.71 1211.6 L1767.13 1211.6 L1766.54 1211.6 L1765.95 1211.6 L1765.37 1211.6 L1764.78 1211.6 L1764.19 1211.6 L1763.61 1211.6 L1763.02 1211.6 L1762.44 1211.6 L1761.85 1211.6 L1761.26 1211.6 L1760.68 1211.6 L1760.09 1211.6 L1759.5 1211.6 L1758.92 1211.6 L1758.33 1211.6 L1757.74 1211.6 L1757.16 1211.6 L1756.57 1211.6 L1755.99 1211.6 L1755.4 1211.6 L1754.81 1211.6 L1754.23 1211.6 L1753.64 1211.6 L1753.05 1211.6 L1752.47 1211.6 L1751.88 1211.6 L1751.29 1211.6 L1750.71 1211.6 L1750.12 1211.6 L1749.53 1211.6 L1748.95 1211.6 L1748.36 1211.6 L1747.78 1211.6 L1747.19 1211.6 L1746.6 1211.6 L1746.02 1211.6 L1745.43 1211.6 L1744.84 1211.6 L1744.26 1211.6 L1743.67 1211.6 L1743.08 1211.6 L1742.5 1211.6 L1741.91 1211.6 L1741.32 1211.6 L1740.74 1211.6 L1740.15 1211.6 L1739.57 1211.6 L1738.98 1211.6 L1738.39 1211.6 L1737.81 1211.6 L1737.22 1211.6 L1736.63 1211.6 L1736.05 1211.6 L1735.46 1211.6 L1734.87 1211.6 L1734.29 1211.6 L1733.7 1211.6 L1733.11 1211.6 L1732.53 1211.6 L1731.94 1211.6 L1731.36 1211.6 L1730.77 1211.6 L1730.18 1211.6 L1729.6 1211.6 L1729.01 1211.6 L1728.42 1211.6 L1727.84 1211.6 L1727.25 1211.6 L1726.66 1211.6 L1726.08 1211.6 L1725.49 1211.6 L1724.91 1211.6 L1724.32 1211.6 L1723.73 1211.6 L1723.15 1211.6 L1722.56 1211.6 L1721.97 1211.6 L1721.39 1211.6 L1720.8 1211.6 L1720.21 1211.6 L1719.63 1211.6 L1719.04 1211.6 L1718.45 1211.6 L1717.87 1211.6 L1717.28 1211.6 L1716.7 1211.6 L1716.11 1211.6 L1715.52 1211.6 L1714.94 1211.6 L1714.35 1211.6 L1713.76 1211.6 L1713.18 1211.6 L1712.59 1211.6 L1712 1211.6 L1711.42 1211.6 L1710.83 1211.6 L1710.24 1211.6 L1709.66 1211.6 L1709.07 1211.6 L1708.49 1211.6 L1707.9 1211.6 L1707.31 1211.6 L1706.73 1211.6 L1706.14 1211.6 L1705.55 1211.6 L1704.97 1211.6 L1704.38 1211.6 L1703.79 1211.6 L1703.21 1211.6 L1702.62 1211.6 L1702.04 1211.6 L1701.45 1211.6 L1700.86 1211.6 L1700.28 1211.6 L1699.69 1211.6 L1699.1 1211.6 L1698.52 1211.6 L1697.93 1211.6 L1697.34 1211.6 L1696.76 1211.6 L1696.17 1211.6 L1695.58 1211.6 L1695 1211.6 L1694.41 1211.6 L1693.83 1211.6 L1693.24 1211.6 L1692.65 1211.6 L1692.07 1211.6 L1691.48 1211.6 L1690.89 1211.6 L1690.31 1211.6 L1689.72 1211.6 L1689.13 1211.6 L1688.55 1211.6 L1687.96 1211.6 L1687.37 1211.6 L1686.79 1211.6 L1686.2 1211.6 L1685.62 1211.6 L1685.03 1211.6 L1684.44 1211.6 L1683.86 1211.6 L1683.27 1211.6 L1682.68 1211.6 L1682.1 1211.6 L1681.51 1211.6 L1680.92 1211.6 L1680.34 1211.6 L1679.75 1211.6 L1679.17 1211.6 L1678.58 1211.6 L1677.99 1211.6 L1677.41 1211.6 L1676.82 1211.6 L1676.23 1211.6 L1675.65 1211.6 L1675.06 1211.6 L1674.47 1211.6 L1673.89 1211.6 L1673.3 1211.6 L1672.71 1211.6 L1672.13 1211.6 L1671.54 1211.6 L1670.96 1211.6 L1670.37 1211.6 L1669.78 1211.6 L1669.2 1211.6 L1668.61 1211.6 L1668.02 1211.6 L1667.44 1211.6 L1666.85 1211.6 L1666.26 1211.6 L1665.68 1211.6 L1665.09 1211.6 L1664.5 1211.6 L1663.92 1211.6 L1663.33 1211.6 L1662.75 1211.6 L1662.16 1211.6 L1661.57 1211.6 L1660.99 1211.6 L1660.4 1211.6 L1659.81 1211.6 L1659.23 1211.6 L1658.64 1211.6 L1658.05 1211.6 L1657.47 1211.6 L1656.88 1211.6 L1656.29 1211.6 L1655.71 1211.6 L1655.12 1211.6 L1654.54 1211.6 L1653.95 1211.6 L1653.36 1211.6 L1652.78 1211.6 L1652.19 1211.6 L1651.6 1211.6 L1651.02 1211.6 L1650.43 1211.6 L1649.84 1211.6 L1649.26 1211.6 L1648.67 1211.6 L1648.09 1211.6 L1647.5 1211.6 L1646.91 1211.6 L1646.33 1211.6 L1645.74 1211.6 L1645.15 1211.6 L1644.57 1211.6 L1643.98 1211.6 L1643.39 1211.6 L1642.81 1211.6 L1642.22 1211.6 L1641.63 1211.6 L1641.05 1211.6 L1640.46 1211.6 L1639.88 1211.6 L1639.29 1211.6 L1638.7 1211.6 L1638.12 1211.6 L1637.53 1211.6 L1636.94 1211.6 L1636.36 1211.6 L1635.77 1211.6 L1635.18 1211.6 L1634.6 1211.6 L1634.01 1211.6 L1633.42 1211.6 L1632.84 1211.6 L1632.25 1211.6 L1631.67 1211.6 L1631.08 1211.6 L1630.49 1211.6 L1629.91 1211.6 L1629.32 1211.6 L1628.73 1211.6 L1628.15 1211.6 L1627.56 1211.6 L1626.97 1211.6 L1626.39 1211.6 L1625.8 1211.6 L1625.22 1211.6 L1624.63 1211.6 L1624.04 1211.6 L1623.46 1211.6 L1622.87 1211.6 L1622.28 1211.6 L1621.7 1211.6 L1621.11 1211.6 L1620.52 1211.6 L1619.94 1211.6 L1619.35 1211.6 L1618.76 1211.6 L1618.18 1211.6 L1617.59 1211.6 L1617.01 1211.6 L1616.42 1211.6 L1615.83 1211.6 L1615.25 1211.6 L1614.66 1211.6 L1614.07 1211.6 L1613.49 1211.6 L1612.9 1211.6 L1612.31 1211.6 L1611.73 1211.6 L1611.14 1211.6 L1610.55 1211.6 L1609.97 1211.6 L1609.38 1211.6 L1608.8 1211.6 L1608.21 1211.6 L1607.62 1211.6 L1607.04 1211.6 L1606.45 1211.6 L1605.86 1211.6 L1605.28 1211.6 L1604.69 1211.6 L1604.1 1211.6 L1603.52 1211.6 L1602.93 1211.6 L1602.34 1211.6 L1601.76 1211.6 L1601.17 1211.6 L1600.59 1211.6 L1600 1211.6 L1599.41 1211.6 L1598.83 1211.6 L1598.24 1211.6 L1597.65 1211.6 L1597.07 1211.6 L1596.48 1211.6 L1595.89 1211.6 L1595.31 1211.6 L1594.72 1211.6 L1594.14 1211.6 L1593.55 1211.6 L1592.96 1211.6 L1592.38 1211.6 L1591.79 1211.6 L1591.2 1211.6 L1590.62 1211.6 L1590.03 1211.6 L1589.44 1211.6 L1588.86 1211.6 L1588.27 1211.6 L1587.68 1211.6 L1587.1 1211.6 L1586.51 1211.6 L1585.93 1211.6 L1585.34 1211.6 L1584.75 1211.6 L1584.17 1211.6 L1583.58 1211.6 L1582.99 1211.6 L1582.41 1211.6 L1581.82 1211.6 L1581.23 1211.6 L1580.65 1211.6 L1580.06 1211.6 L1579.47 1211.6 L1578.89 1211.6 L1578.3 1211.6 L1577.72 1211.6 L1577.13 1211.6 L1576.54 1211.6 L1575.96 1211.6 L1575.37 1211.6 L1574.78 1211.6 L1574.2 1211.6 L1573.61 1211.6 L1573.02 1211.6 L1572.44 1211.6 L1571.85 1211.6 L1571.27 1211.6 L1570.68 1211.6 L1570.09 1211.6 L1569.51 1211.6 L1568.92 1211.6 L1568.33 1211.6 L1567.75 1211.6 L1567.16 1211.6 L1566.57 1211.6 L1565.99 1211.6 L1565.4 1211.6 L1564.81 1211.6 L1564.23 1211.6 L1563.64 1211.6 L1563.06 1211.6 L1562.47 1211.6 L1561.88 1211.6 L1561.3 1211.6 L1560.71 1211.6 L1560.12 1211.6 L1559.54 1211.6 L1558.95 1211.6 L1558.36 1211.6 L1557.78 1211.6 L1557.19 1211.6 L1556.6 1211.6 L1556.02 1211.6 L1555.43 1211.6 L1554.85 1211.6 L1554.26 1211.6 L1553.67 1211.6 L1553.09 1211.6 L1552.5 1211.6 L1551.91 1211.6 L1551.33 1211.6 L1550.74 1211.6 L1550.15 1211.6 L1549.57 1211.6 L1548.98 1211.6 L1548.4 1211.6 L1547.81 1211.6 L1547.22 1211.6 L1546.64 1211.6 L1546.05 1211.6 L1545.46 1211.6 L1544.88 1211.6 L1544.29 1211.6 L1543.7 1211.6 L1543.12 1211.6 L1542.53 1211.6 L1541.94 1211.6 L1541.36 1211.6 L1540.77 1211.6 L1540.19 1211.6 L1539.6 1211.6 L1539.01 1211.6 L1538.43 1211.6 L1537.84 1211.6 L1537.25 1211.6 L1536.67 1211.6 L1536.08 1211.6 L1535.49 1211.6 L1534.91 1211.6 L1534.32 1211.6 L1533.73 1211.6 L1533.15 1211.6 L1532.56 1211.6 L1531.98 1211.6 L1531.39 1211.6 L1530.8 1211.6 L1530.22 1211.6 L1529.63 1211.6 L1529.04 1211.6 L1528.46 1211.6 L1527.87 1211.6 L1527.28 1211.6 L1526.7 1211.6 L1526.11 1211.6 L1525.52 1211.6 L1524.94 1211.6 L1524.35 1211.6 L1523.77 1211.6 L1523.18 1211.6 L1522.59 1211.6 L1522.01 1211.6 L1521.42 1211.6 L1520.83 1211.6 L1520.25 1211.6 L1519.66 1211.6 L1519.07 1211.6 L1518.49 1211.6 L1517.9 1211.6 L1517.32 1211.6 L1516.73 1211.6 L1516.14 1211.6 L1515.56 1211.6 L1514.97 1211.6 L1514.38 1211.6 L1513.8 1211.6 L1513.21 1211.6 L1512.62 1211.6 L1512.04 1211.6 L1511.45 1211.6 L1510.86 1211.6 L1510.28 1211.6 L1509.69 1211.6 L1509.11 1211.6 L1508.52 1211.6 L1507.93 1211.6 L1507.35 1211.6 L1506.76 1211.6 L1506.17 1211.6 L1505.59 1211.6 L1505 1211.6 L1504.41 1211.6 L1503.83 1211.6 L1503.24 1211.6 L1502.65 1211.6 L1502.07 1211.6 L1501.48 1211.6 L1500.9 1211.6 L1500.31 1211.6 L1499.72 1211.6 L1499.14 1211.6 L1498.55 1211.6 L1497.96 1211.6 L1497.38 1211.6 L1496.79 1211.6 L1496.2 1211.6 L1495.62 1211.6 L1495.03 1211.6 L1494.45 1211.6 L1493.86 1211.6 L1493.27 1211.6 L1492.69 1211.6 L1492.1 1211.6 L1491.51 1211.6 L1490.93 1211.6 L1490.34 1211.6 L1489.75 1211.6 L1489.17 1211.6 L1488.58 1211.6 L1487.99 1211.6 L1487.41 1211.6 L1486.82 1211.6 L1486.24 1211.6 L1485.65 1211.6 L1485.06 1211.6 L1484.48 1211.6 L1483.89 1211.6 L1483.3 1211.6 L1482.72 1211.6 L1482.13 1211.6 L1481.54 1211.6 L1480.96 1211.6 L1480.37 1211.6 L1479.78 1211.6 L1479.2 1211.6 L1478.61 1211.6 L1478.03 1211.6 L1477.44 1211.6 L1476.85 1211.6 L1476.27 1211.6 L1475.68 1211.6 L1475.09 1211.6 L1474.51 1211.6 L1473.92 1211.6 L1473.33 1211.6 L1472.75 1211.6 L1472.16 1211.6 L1471.57 1211.6 L1470.99 1211.6 L1470.4 1211.6 L1469.82 1211.6 L1469.23 1211.6 L1468.64 1211.6 L1468.06 1211.6 L1467.47 1211.6 L1466.88 1211.6 L1466.3 1211.6 L1465.71 1211.6 L1465.12 1211.6 L1464.54 1211.6 L1463.95 1211.6 L1463.37 1211.6 L1462.78 1211.6 L1462.19 1211.6 L1461.61 1211.6 L1461.02 1211.6 L1460.43 1211.6 L1459.85 1211.6 L1459.26 1211.6 L1458.67 1211.6 L1458.09 1211.6 L1457.5 1211.6 L1456.91 1211.6 L1456.33 1211.6 L1455.74 1211.6 L1455.16 1211.6 L1454.57 1211.6 L1453.98 1211.6 L1453.4 1211.6 L1452.81 1211.6 L1452.22 1211.6 L1451.64 1211.6 L1451.05 1211.6 L1450.46 1211.6 L1449.88 1211.6 L1449.29 1211.6 L1448.7 1211.6 L1448.12 1211.6 L1447.53 1211.6 L1446.95 1211.6 L1446.36 1211.6 L1445.77 1211.6 L1445.19 1211.6 L1444.6 1211.6 L1444.01 1211.6 L1443.43 1211.6 L1442.84 1211.6 L1442.25 1211.6 L1441.67 1211.6 L1441.08 1211.6 L1440.5 1211.6 L1439.91 1211.6 L1439.32 1211.6 L1438.74 1211.6 L1438.15 1211.6 L1437.56 1211.6 L1436.98 1211.6 L1436.39 1211.6 L1435.8 1211.6 L1435.22 1211.6 L1434.63 1211.6 L1434.04 1211.6 L1433.46 1211.6 L1432.87 1211.6 L1432.29 1211.6 L1431.7 1211.6 L1431.11 1211.6 L1430.53 1211.6 L1429.94 1211.6 L1429.35 1211.6 L1428.77 1211.6 L1428.18 1211.6 L1427.59 1211.6 L1427.01 1211.6 L1426.42 1211.6 L1425.83 1211.6 L1425.25 1211.6 L1424.66 1211.6 L1424.08 1211.6 L1423.49 1211.6 L1422.9 1211.6 L1422.32 1211.6 L1421.73 1211.6 L1421.14 1211.6 L1420.56 1211.6 L1419.97 1211.6 L1419.38 1211.6 L1418.8 1211.6 L1418.21 1211.6 L1417.63 1211.6 L1417.04 1211.6 L1416.45 1211.6 L1415.87 1211.6 L1415.28 1211.6 L1414.69 1211.6 L1414.11 1211.6 L1413.52 1211.6 L1412.93 1211.6 L1412.35 1211.6 L1411.76 1211.6 L1411.17 1211.6 L1410.59 1211.6 L1410 1211.6 L1409.42 1211.6 L1408.83 1211.6 L1408.24 1211.6 L1407.66 1211.6 L1407.07 1211.6 L1406.48 1211.6 L1405.9 1211.6 L1405.31 1211.6 L1404.72 1211.6 L1404.14 1211.6 L1403.55 1211.6 L1402.96 1211.6 L1402.38 1211.6 L1401.79 1211.6 L1401.21 1211.6 L1400.62 1211.6 L1400.03 1211.6 L1399.45 1211.6 L1398.86 1211.6 L1398.27 1211.6 L1397.69 1211.6 L1397.1 1211.6 L1396.51 1211.6 L1395.93 1211.6 L1395.34 1211.6 L1394.75 1211.6 L1394.17 1211.6 L1393.58 1211.6 L1393 1211.6 L1392.41 1211.6 L1391.82 1211.6 L1391.24 1211.6 L1390.65 1211.6 L1390.06 1211.6 L1389.48 1211.6 L1388.89 1211.6 L1388.3 1211.6 L1387.72 1211.6 L1387.13 1211.6 L1386.55 1211.6 L1385.96 1211.6 L1385.37 1211.6 L1384.79 1211.6 L1384.2 1211.6 L1383.61 1211.6 L1383.03 1211.6 L1382.44 1211.6 L1381.85 1211.6 L1381.27 1211.6 L1380.68 1211.6 L1380.09 1211.6 L1379.51 1211.6 L1378.92 1211.6 L1378.34 1211.6 L1377.75 1211.6 L1377.16 1211.6 L1376.58 1211.6 L1375.99 1211.6 L1375.4 1211.6 L1374.82 1211.6 L1374.23 1211.6 L1373.64 1211.6 L1373.06 1211.6 L1372.47 1211.6 L1371.88 1211.6 L1371.3 1211.6 L1370.71 1211.6 L1370.13 1211.6 L1369.54 1211.6 L1368.95 1211.6 L1368.37 1211.6 L1367.78 1211.6 L1367.19 1211.6 L1366.61 1211.6 L1366.02 1211.6 L1365.43 1211.6 L1364.85 1211.6 L1364.26 1211.6 L1363.68 1211.6 L1363.09 1211.6 L1362.5 1211.6 L1361.92 1211.6 L1361.33 1211.6 L1360.74 1211.6 L1360.16 1211.6 L1359.57 1211.6 L1358.98 1211.6 L1358.4 1211.6 L1357.81 1211.6 L1357.22 1211.6 L1356.64 1211.6 L1356.05 1211.6 L1355.47 1211.6 L1354.88 1211.6 L1354.29 1211.6 L1353.71 1211.6 L1353.12 1211.6 L1352.53 1211.6 L1351.95 1211.6 L1351.36 1211.6 L1350.77 1211.6 L1350.19 1211.6 L1349.6 1211.6 L1349.01 1211.6 L1348.43 1211.6 L1347.84 1211.6 L1347.26 1211.6 L1346.67 1211.6 L1346.08 1211.6 L1345.5 1211.6 L1344.91 1211.6 L1344.32 1211.6 L1343.74 1211.6 L1343.15 1211.6 L1342.56 1211.6 L1341.98 1211.6 L1341.39 1211.6 L1340.8 1211.6 L1340.22 1211.6 L1339.63 1211.6 L1339.05 1211.6 L1338.46 1211.6 L1337.87 1211.6 L1337.29 1211.6 L1336.7 1211.6 L1336.11 1211.6 L1335.53 1211.6 L1334.94 1211.6 L1334.35 1211.6 L1333.77 1211.6 L1333.18 1211.6 L1332.6 1211.6 L1332.01 1211.6 L1331.42 1211.6 L1330.84 1211.6 L1330.25 1211.6 L1329.66 1211.6 L1329.08 1211.6 L1328.49 1211.6 L1327.9 1211.6 L1327.32 1211.6 L1326.73 1211.6 L1326.14 1211.6 L1325.56 1211.6 L1324.97 1211.6 L1324.39 1211.6 L1323.8 1211.6 L1323.21 1211.6 L1322.63 1211.6 L1322.04 1211.6 L1321.45 1211.6 L1320.87 1211.6 L1320.28 1211.6 L1319.69 1211.6 L1319.11 1211.6 L1318.52 1211.6 L1317.93 1211.6 L1317.35 1211.6 L1316.76 1211.6 L1316.18 1211.6 L1315.59 1211.6 L1315 1211.6 L1314.42 1211.6 L1313.83 1211.6 L1313.24 1211.6 L1312.66 1211.6 L1312.07 1211.6 L1311.48 1211.6 L1310.9 1211.6 L1310.31 1211.6 L1309.73 1211.6 L1309.14 1211.6 L1308.55 1211.6 L1307.97 1211.6 L1307.38 1211.6 L1306.79 1211.6 L1306.21 1211.6 L1305.62 1211.6 L1305.03 1211.6 L1304.45 1211.6 L1303.86 1211.6 L1303.27 1211.6 L1302.69 1211.6 L1302.1 1211.6 L1301.52 1211.6 L1300.93 1211.6 L1300.34 1211.6 L1299.76 1211.6 L1299.17 1211.6 L1298.58 1211.6 L1298 1211.6 L1297.41 1211.6 L1296.82 1211.6 L1296.24 1211.6 L1295.65 1211.6 L1295.06 1211.6 L1294.48 1211.6 L1293.89 1211.6 L1293.31 1211.6 L1292.72 1211.6 L1292.13 1211.6 L1291.55 1211.6 L1290.96 1211.6 L1290.37 1211.6 L1289.79 1211.6 L1289.2 1211.6 L1288.61 1211.6 L1288.03 1211.6 L1287.44 1211.6 L1286.86 1211.6 L1286.27 1211.6 L1285.68 1211.6 L1285.1 1211.6 L1284.51 1211.6 L1283.92 1211.6 L1283.34 1211.6 L1282.75 1211.6 L1282.16 1211.6 L1281.58 1211.6 L1280.99 1211.6 L1280.4 1211.6 L1279.82 1211.6 L1279.23 1211.6 L1278.65 1211.6 L1278.06 1211.6 L1277.47 1211.6 L1276.89 1211.6 L1276.3 1211.6 L1275.71 1211.6 L1275.13 1211.6 L1274.54 1211.6 L1273.95 1211.6 L1273.37 1211.6 L1272.78 1211.6 L1272.19 1211.6 L1271.61 1211.6 L1271.02 1211.6 L1270.44 1211.6 L1269.85 1211.6 L1269.26 1211.6 L1268.68 1211.6 L1268.09 1211.6 L1267.5 1211.6 L1266.92 1211.6 L1266.33 1211.6 L1265.74 1211.6 L1265.16 1211.6 L1264.57 1211.6 L1263.98 1211.6 L1263.4 1211.6 L1262.81 1211.6 L1262.23 1211.6 L1261.64 1211.6 L1261.05 1211.6 L1260.47 1211.6 L1259.88 1211.6 L1259.29 1211.6 L1258.71 1211.6 L1258.12 1211.6 L1257.53 1211.6 L1256.95 1211.6 L1256.36 1211.6 L1255.78 1211.6 L1255.19 1211.6 L1254.6 1211.6 L1254.02 1211.6 L1253.43 1211.6 L1252.84 1211.6 L1252.26 1211.6 L1251.67 1211.6 L1251.08 1211.6 L1250.5 1211.6 L1249.91 1211.6 L1249.32 1211.6 L1248.74 1211.6 L1248.15 1211.6 L1247.57 1211.6 L1246.98 1211.6 L1246.39 1211.6 L1245.81 1211.6 L1245.22 1211.6 L1244.63 1211.6 L1244.05 1211.6 L1243.46 1211.6 L1242.87 1211.6 L1242.29 1211.6 L1241.7 1211.6 L1241.11 1211.6 L1240.53 1211.6 L1239.94 1211.6 L1239.36 1211.6 L1238.77 1211.6 L1238.18 1211.6 L1237.6 1211.6 L1237.01 1211.6 L1236.42 1211.6 L1235.84 1211.6 L1235.25 1211.6 L1234.66 1211.6 L1234.08 1211.6 L1233.49 1211.6 L1232.91 1211.6 L1232.32 1211.6 L1231.73 1211.6 L1231.15 1211.6 L1230.56 1211.6 L1229.97 1211.6 L1229.39 1211.6 L1228.8 1211.6 L1228.21 1211.6 L1227.63 1211.6 L1227.04 1211.6 L1226.45 1211.6 L1225.87 1211.6 L1225.28 1211.6 L1224.7 1211.6 L1224.11 1211.6 L1223.52 1211.6 L1222.94 1211.6 L1222.35 1211.6 L1221.76 1211.6 L1221.18 1211.6 L1220.59 1211.6 L1220 1211.6 L1219.42 1211.6 L1218.83 1211.6 L1218.24 1211.6 L1217.66 1211.6 L1217.07 1211.6 L1216.49 1211.6 L1215.9 1211.6 L1215.31 1211.6 L1214.73 1211.6 L1214.14 1211.6 L1213.55 1211.6 L1212.97 1211.6 L1212.38 1211.6 L1211.79 1211.6 L1211.21 1211.6 L1210.62 1211.6 L1210.03 1211.6 L1209.45 1211.6 L1208.86 1211.6 L1208.28 1211.6 L1207.69 1211.6 L1207.1 1211.6 L1206.52 1211.6 L1205.93 1211.6 L1205.34 1211.6 L1204.76 1211.6 L1204.17 1211.6 L1203.58 1211.6 L1203 1211.6 L1202.41 1211.6 L1201.83 1211.6 L1201.24 1211.6 L1200.65 1211.6 L1200.07 1211.6 L1199.48 1211.6 L1198.89 1211.6 L1198.31 1211.6 L1197.72 1211.6 L1197.13 1211.6 L1196.55 1211.6 L1195.96 1211.6 L1195.37 1211.6 L1194.79 1211.6 L1194.2 1211.6 L1193.62 1211.6 L1193.03 1211.6 L1192.44 1211.6 L1191.86 1211.6 L1191.27 1211.6 L1190.68 1211.6 L1190.1 1211.6 L1189.51 1211.6 L1188.92 1211.6 L1188.34 1211.6 L1187.75 1211.6 L1187.16 1211.6 L1186.58 1211.6 L1185.99 1211.6 L1185.41 1211.6 L1184.82 1211.6 L1184.23 1211.6 L1183.65 1211.6 L1183.06 1211.6 L1182.47 1211.6 L1181.89 1211.6 L1181.3 1211.6 L1180.71 1211.6 L1180.13 1211.6 L1179.54 1211.6 L1178.96 1211.6 L1178.37 1211.6 L1177.78 1211.6 L1177.2 1211.6 L1176.61 1211.6 L1176.02 1211.6 L1175.44 1211.6 L1174.85 1211.6 L1174.26 1211.6 L1173.68 1211.6 L1173.09 1211.6 L1172.5 1211.6 L1171.92 1211.6 L1171.33 1211.6 L1170.75 1211.6 L1170.16 1211.6 L1169.57 1211.6 L1168.99 1211.6 L1168.4 1211.6 L1167.81 1211.6 L1167.23 1211.6 L1166.64 1211.6 L1166.05 1211.6 L1165.47 1211.6 L1164.88 1211.6 L1164.29 1211.6 L1163.71 1211.6 L1163.12 1211.6 L1162.54 1211.6 L1161.95 1211.6 L1161.36 1211.6 L1160.78 1211.6 L1160.19 1211.6 L1159.6 1211.6 L1159.02 1211.6 L1158.43 1211.6 L1157.84 1211.6 L1157.26 1211.6 L1156.67 1211.6 L1156.09 1211.6 L1155.5 1211.6 L1154.91 1211.6 L1154.33 1211.6 L1153.74 1211.6 L1153.15 1211.6 L1152.57 1211.6 L1151.98 1211.6 L1151.39 1211.6 L1150.81 1211.6 L1150.22 1211.6 L1149.63 1211.6 L1149.05 1211.6 L1148.46 1211.6 L1147.88 1211.6 L1147.29 1211.6 L1146.7 1211.6 L1146.12 1211.6 L1145.53 1211.6 L1144.94 1211.6 L1144.36 1211.6 L1143.77 1211.6 L1143.18 1211.6 L1142.6 1211.6 L1142.01 1211.6 L1141.42 1211.6 L1140.84 1211.6 L1140.25 1211.6 L1139.67 1211.6 L1139.08 1211.6 L1138.49 1211.6 L1137.91 1211.6 L1137.32 1211.6 L1136.73 1211.6 L1136.15 1211.6 L1135.56 1211.6 L1134.97 1211.6 L1134.39 1211.6 L1133.8 1211.6 L1133.21 1211.6 L1132.63 1211.6 L1132.04 1211.6 L1131.46 1211.6 L1130.87 1211.6 L1130.28 1211.6 L1129.7 1211.6 L1129.11 1211.6 L1128.52 1211.6 L1127.94 1211.6 L1127.35 1211.6 L1126.76 1211.6 L1126.18 1211.6 L1125.59 1211.6 L1125.01 1211.6 L1124.42 1211.6 L1123.83 1211.6 L1123.25 1211.6 L1122.66 1211.6 L1122.07 1211.6 L1121.49 1211.6 L1120.9 1211.6 L1120.31 1211.6 L1119.73 1211.6 L1119.14 1211.6 L1118.55 1211.6 L1117.97 1211.6 L1117.38 1211.6 L1116.8 1211.6 L1116.21 1211.6 L1115.62 1211.6 L1115.04 1211.6 L1114.45 1211.6 L1113.86 1211.6 L1113.28 1211.6 L1112.69 1211.6 L1112.1 1211.6 L1111.52 1211.6 L1110.93 1211.6 L1110.34 1211.6 L1109.76 1211.6 L1109.17 1211.6 L1108.59 1211.6 L1108 1211.6 L1107.41 1211.6 L1106.83 1211.6 L1106.24 1211.6 L1105.65 1211.6 L1105.07 1211.6 L1104.48 1211.6 L1103.89 1211.6 L1103.31 1211.6 L1102.72 1211.6 L1102.14 1211.6 L1101.55 1211.6 L1100.96 1211.6 L1100.38 1211.6 L1099.79 1211.6 L1099.2 1211.6 L1098.62 1211.6 L1098.03 1211.6 L1097.44 1211.6 L1096.86 1211.6 L1096.27 1211.6 L1095.68 1211.6 L1095.1 1211.6 L1094.51 1211.6 L1093.93 1211.6 L1093.34 1211.6 L1092.75 1211.6 L1092.17 1211.6 L1091.58 1211.6 L1090.99 1211.6 L1090.41 1211.6 L1089.82 1211.6 L1089.23 1211.6 L1088.65 1211.6 L1088.06 1211.6 L1087.47 1211.6 L1086.89 1211.6 L1086.3 1211.6 L1085.72 1211.6 L1085.13 1211.6 L1084.54 1211.6 L1083.96 1211.6 L1083.37 1211.6 L1082.78 1211.6 L1082.2 1211.6 L1081.61 1211.6 L1081.02 1211.6 L1080.44 1211.6 L1079.85 1211.6 L1079.26 1211.6 L1078.68 1211.6 L1078.09 1211.6 L1077.51 1211.6 L1076.92 1211.6 L1076.33 1211.6 L1075.75 1211.6 L1075.16 1211.6 L1074.57 1211.6 L1073.99 1211.6 L1073.4 1211.6 L1072.81 1211.6 L1072.23 1211.6 L1071.64 1211.6 L1071.06 1211.6 L1070.47 1211.6 L1069.88 1211.6 L1069.3 1211.6 L1068.71 1211.6 L1068.12 1211.6 L1067.54 1211.6 L1066.95 1211.6 L1066.36 1211.6 L1065.78 1211.6 L1065.19 1211.6 L1064.6 1211.6 L1064.02 1211.6 L1063.43 1211.6 L1062.85 1211.6 L1062.26 1211.6 L1061.67 1211.6 L1061.09 1211.6 L1060.5 1211.6 L1059.91 1211.6 L1059.33 1211.6 L1058.74 1211.6 L1058.15 1211.6 L1057.57 1211.6 L1056.98 1211.6 L1056.39 1211.6 L1055.81 1211.6 L1055.22 1211.6 L1054.64 1211.6 L1054.05 1211.6 L1053.46 1211.6 L1052.88 1211.6 L1052.29 1211.6 L1051.7 1211.6 L1051.12 1211.6 L1050.53 1211.6 L1049.94 1211.6 L1049.36 1211.6 L1048.77 1211.6 L1048.19 1211.6 L1047.6 1211.6 L1047.01 1211.6 L1046.43 1211.6 L1045.84 1211.6 L1045.25 1211.6 L1044.67 1211.6 L1044.08 1211.6 L1043.49 1211.6 L1042.91 1211.6 L1042.32 1211.6 L1041.73 1211.6 L1041.15 1211.6 L1040.56 1211.6 L1039.98 1211.6 L1039.39 1211.6 L1038.8 1211.6 L1038.22 1211.6 L1037.63 1211.6 L1037.04 1211.6 L1036.46 1211.6 L1035.87 1211.6 L1035.28 1211.6 L1034.7 1211.6 L1034.11 1211.6 L1033.52 1211.6 L1032.94 1211.6 L1032.35 1211.6 L1031.77 1211.6 L1031.18 1211.6 L1030.59 1211.6 L1030.01 1211.6 L1029.42 1211.6 L1028.83 1211.6 L1028.25 1211.6 L1027.66 1211.6 L1027.07 1211.6 L1026.49 1211.6 L1025.9 1211.6 L1025.32 1211.6 L1024.73 1211.6 L1024.14 1211.6 L1023.56 1211.6 L1022.97 1211.6 L1022.38 1211.6 L1021.8 1211.6 L1021.21 1211.6 L1020.62 1211.6 L1020.04 1211.6 L1019.45 1211.6 L1018.86 1211.6 L1018.28 1211.6 L1017.69 1211.6 L1017.11 1211.6 L1016.52 1211.6 L1015.93 1211.6 L1015.35 1211.6 L1014.76 1211.6 L1014.17 1211.6 L1013.59 1211.6 L1013 1211.6 L1012.41 1211.6 L1011.83 1211.6 L1011.24 1211.6 L1010.65 1211.6 L1010.07 1211.6 L1009.48 1211.6 L1008.9 1211.6 L1008.31 1211.6 L1007.72 1211.6 L1007.14 1211.6 L1006.55 1211.6 L1005.96 1211.6 L1005.38 1211.6 L1004.79 1211.6 L1004.2 1211.6 L1003.62 1211.6 L1003.03 1211.6 L1002.44 1211.6 L1001.86 1211.6 L1001.27 1211.6 L1000.69 1211.6 L1000.1 1211.6 L999.513 1211.6 L998.926 1211.6 L998.34 1211.6 L997.754 1211.6 L997.167 1211.6 L996.581 1211.6 L995.994 1211.6 L995.408 1211.6 L994.822 1211.6 L994.235 1211.6 L993.649 1211.6 L993.062 1211.6 L992.476 1211.6 L991.889 1211.6 L991.303 1211.6 L990.717 1211.6 L990.13 1211.6 L989.544 1211.6 L988.957 1211.6 L988.371 1211.6 L987.785 1211.6 L987.198 1211.6 L986.612 1211.6 L986.025 1211.6  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.67 986.612,1211.67 987.198,1211.67 987.785,1211.67 988.371,1211.67 988.957,1211.67 989.544,1211.67 990.13,1211.67 990.717,1211.67 991.303,1211.67 991.889,1211.67 992.476,1211.67 993.062,1211.67 993.649,1211.67 994.235,1211.67 994.822,1211.67 995.408,1211.67 995.994,1211.67 996.581,1211.67 997.167,1211.67 997.754,1211.67 998.34,1211.67 998.926,1211.67 999.513,1211.67 1000.1,1211.67 1000.69,1211.67 1001.27,1211.67 1001.86,1211.67 1002.44,1211.67 1003.03,1211.67 1003.62,1211.67 1004.2,1211.67 1004.79,1211.67 1005.38,1211.67 1005.96,1211.67 1006.55,1211.67 1007.14,1211.67 1007.72,1211.67 1008.31,1211.67 1008.9,1211.67 1009.48,1211.67 1010.07,1211.67 1010.65,1211.67 1011.24,1211.67 1011.83,1211.67 1012.41,1211.67 1013,1211.67 1013.59,1211.67 1014.17,1211.67 1014.76,1211.67 1015.35,1211.67 1015.93,1211.67 1016.52,1211.67 1017.11,1211.67 1017.69,1211.67 1018.28,1211.67 1018.86,1211.67 1019.45,1211.67 1020.04,1211.67 1020.62,1211.67 1021.21,1211.67 1021.8,1211.67 1022.38,1211.67 1022.97,1211.67 1023.56,1211.67 1024.14,1211.67 1024.73,1211.67 1025.32,1211.67 1025.9,1211.67 1026.49,1211.67 1027.07,1211.67 1027.66,1211.67 1028.25,1211.67 1028.83,1211.67 1029.42,1211.67 1030.01,1211.67 1030.59,1211.67 1031.18,1211.67 1031.77,1211.67 1032.35,1211.67 1032.94,1211.67 1033.52,1211.67 1034.11,1211.67 1034.7,1211.67 1035.28,1211.67 1035.87,1211.67 1036.46,1211.67 1037.04,1211.67 1037.63,1211.67 1038.22,1211.67 1038.8,1211.67 1039.39,1211.67 1039.98,1211.67 1040.56,1211.67 1041.15,1211.67 1041.73,1211.67 1042.32,1211.67 1042.91,1211.67 1043.49,1211.67 1044.08,1211.67 1044.67,1211.67 1045.25,1211.67 1045.84,1211.67 1046.43,1211.67 1047.01,1211.67 1047.6,1211.67 1048.19,1211.67 1048.77,1211.67 1049.36,1211.67 1049.94,1211.67 1050.53,1211.67 1051.12,1211.67 1051.7,1211.67 1052.29,1211.67 1052.88,1211.67 1053.46,1211.67 1054.05,1211.67 1054.64,1211.67 1055.22,1211.67 1055.81,1211.67 1056.39,1211.67 1056.98,1211.67 1057.57,1211.67 1058.15,1211.67 1058.74,1211.67 1059.33,1211.67 1059.91,1211.67 1060.5,1211.67 1061.09,1211.67 1061.67,1211.67 1062.26,1211.67 1062.85,1211.67 1063.43,1211.67 1064.02,1211.67 1064.6,1211.67 1065.19,1211.67 1065.78,1211.67 1066.36,1211.67 1066.95,1211.67 1067.54,1211.67 1068.12,1211.67 1068.71,1211.67 1069.3,1211.67 1069.88,1211.67 1070.47,1211.67 1071.06,1211.67 1071.64,1211.67 1072.23,1211.67 1072.81,1211.67 1073.4,1211.67 1073.99,1211.67 1074.57,1211.67 1075.16,1211.67 1075.75,1211.67 1076.33,1211.67 1076.92,1211.67 1077.51,1211.67 1078.09,1211.67 1078.68,1211.67 1079.26,1211.67 1079.85,1211.67 1080.44,1211.67 1081.02,1211.67 1081.61,1211.67 1082.2,1211.67 1082.78,1211.67 1083.37,1211.67 1083.96,1211.67 1084.54,1211.67 1085.13,1211.67 1085.72,1211.67 1086.3,1211.67 1086.89,1211.67 1087.47,1211.67 1088.06,1211.67 1088.65,1211.67 1089.23,1211.67 1089.82,1211.67 1090.41,1211.67 1090.99,1211.67 1091.58,1211.67 1092.17,1211.67 1092.75,1211.67 1093.34,1211.67 1093.93,1211.67 1094.51,1211.67 1095.1,1211.67 1095.68,1211.67 1096.27,1211.67 1096.86,1211.67 1097.44,1211.67 1098.03,1211.67 1098.62,1211.67 1099.2,1211.67 1099.79,1211.67 1100.38,1211.67 1100.96,1211.67 1101.55,1211.67 1102.14,1211.67 1102.72,1211.67 1103.31,1211.67 1103.89,1211.67 1104.48,1211.67 1105.07,1211.67 1105.65,1211.67 1106.24,1211.67 1106.83,1211.67 1107.41,1211.67 1108,1211.67 1108.59,1211.67 1109.17,1211.67 1109.76,1211.67 1110.34,1211.67 1110.93,1211.67 1111.52,1211.67 1112.1,1211.67 1112.69,1211.67 1113.28,1211.67 1113.86,1211.67 1114.45,1211.67 1115.04,1211.67 1115.62,1211.67 1116.21,1211.67 1116.8,1211.67 1117.38,1211.67 1117.97,1211.67 1118.55,1211.67 1119.14,1211.67 1119.73,1211.67 1120.31,1211.67 1120.9,1211.67 1121.49,1211.67 1122.07,1211.67 1122.66,1211.67 1123.25,1211.67 1123.83,1211.67 1124.42,1211.67 1125.01,1211.67 1125.59,1211.67 1126.18,1211.67 1126.76,1211.67 1127.35,1211.67 1127.94,1211.67 1128.52,1211.67 1129.11,1211.67 1129.7,1211.67 1130.28,1211.67 1130.87,1211.67 1131.46,1211.67 1132.04,1211.67 1132.63,1211.67 1133.21,1211.67 1133.8,1211.67 1134.39,1211.67 1134.97,1211.67 1135.56,1211.67 1136.15,1211.67 1136.73,1211.67 1137.32,1211.67 1137.91,1211.67 1138.49,1211.67 1139.08,1211.67 1139.67,1211.67 1140.25,1211.67 1140.84,1211.67 1141.42,1211.67 1142.01,1211.67 1142.6,1211.67 1143.18,1211.67 1143.77,1211.67 1144.36,1211.67 1144.94,1211.67 1145.53,1211.67 1146.12,1211.67 1146.7,1211.67 1147.29,1211.67 1147.88,1211.67 1148.46,1211.67 1149.05,1211.67 1149.63,1211.67 1150.22,1211.67 1150.81,1211.67 1151.39,1211.67 1151.98,1211.67 1152.57,1211.67 1153.15,1211.67 1153.74,1211.67 1154.33,1211.67 1154.91,1211.67 1155.5,1211.67 1156.09,1211.67 1156.67,1211.67 1157.26,1211.67 1157.84,1211.67 1158.43,1211.67 1159.02,1211.67 1159.6,1211.67 1160.19,1211.67 1160.78,1211.67 1161.36,1211.67 1161.95,1211.67 1162.54,1211.67 1163.12,1211.67 1163.71,1211.67 1164.29,1211.67 1164.88,1211.67 1165.47,1211.67 1166.05,1211.67 1166.64,1211.67 1167.23,1211.67 1167.81,1211.67 1168.4,1211.67 1168.99,1211.67 1169.57,1211.67 1170.16,1211.67 1170.75,1211.67 1171.33,1211.67 1171.92,1211.67 1172.5,1211.67 1173.09,1211.67 1173.68,1211.67 1174.26,1211.67 1174.85,1211.67 1175.44,1211.67 1176.02,1211.67 1176.61,1211.67 1177.2,1211.67 1177.78,1211.67 1178.37,1211.67 1178.96,1211.67 1179.54,1211.67 1180.13,1211.67 1180.71,1211.67 1181.3,1211.67 1181.89,1211.67 1182.47,1211.67 1183.06,1211.67 1183.65,1211.67 1184.23,1211.67 1184.82,1211.67 1185.41,1211.67 1185.99,1211.67 1186.58,1211.67 1187.16,1211.67 1187.75,1211.67 1188.34,1211.67 1188.92,1211.67 1189.51,1211.67 1190.1,1211.67 1190.68,1211.67 1191.27,1211.67 1191.86,1211.67 1192.44,1211.67 1193.03,1211.67 1193.62,1211.67 1194.2,1211.67 1194.79,1211.67 1195.37,1211.67 1195.96,1211.67 1196.55,1211.67 1197.13,1211.67 1197.72,1211.67 1198.31,1211.67 1198.89,1211.67 1199.48,1211.67 1200.07,1211.67 1200.65,1211.67 1201.24,1211.67 1201.83,1211.67 1202.41,1211.67 1203,1211.67 1203.58,1211.67 1204.17,1211.67 1204.76,1211.67 1205.34,1211.67 1205.93,1211.67 1206.52,1211.67 1207.1,1211.67 1207.69,1211.67 1208.28,1211.67 1208.86,1211.67 1209.45,1211.67 1210.03,1211.67 1210.62,1211.67 1211.21,1211.67 1211.79,1211.67 1212.38,1211.67 1212.97,1211.67 1213.55,1211.67 1214.14,1211.67 1214.73,1211.67 1215.31,1211.67 1215.9,1211.67 1216.49,1211.67 1217.07,1211.67 1217.66,1211.67 1218.24,1211.67 1218.83,1211.67 1219.42,1211.67 1220,1211.67 1220.59,1211.67 1221.18,1211.67 1221.76,1211.67 1222.35,1211.67 1222.94,1211.67 1223.52,1211.67 1224.11,1211.67 1224.7,1211.67 1225.28,1211.67 1225.87,1211.67 1226.45,1211.67 1227.04,1211.67 1227.63,1211.67 1228.21,1211.67 1228.8,1211.67 1229.39,1211.67 1229.97,1211.67 1230.56,1211.67 1231.15,1211.67 1231.73,1211.67 1232.32,1211.67 1232.91,1211.67 1233.49,1211.67 1234.08,1211.67 1234.66,1211.67 1235.25,1211.67 1235.84,1211.67 1236.42,1211.67 1237.01,1211.67 1237.6,1211.67 1238.18,1211.67 1238.77,1211.67 1239.36,1211.67 1239.94,1211.67 1240.53,1211.67 1241.11,1211.67 1241.7,1211.67 1242.29,1211.67 1242.87,1211.67 1243.46,1211.67 1244.05,1211.67 1244.63,1211.67 1245.22,1211.67 1245.81,1211.67 1246.39,1211.67 1246.98,1211.67 1247.57,1211.67 1248.15,1211.67 1248.74,1211.67 1249.32,1211.67 1249.91,1211.67 1250.5,1211.67 1251.08,1211.67 1251.67,1211.67 1252.26,1211.67 1252.84,1211.67 1253.43,1211.67 1254.02,1211.67 1254.6,1211.67 1255.19,1211.67 1255.78,1211.67 1256.36,1211.67 1256.95,1211.67 1257.53,1211.67 1258.12,1211.67 1258.71,1211.67 1259.29,1211.67 1259.88,1211.67 1260.47,1211.67 1261.05,1211.67 1261.64,1211.67 1262.23,1211.67 1262.81,1211.67 1263.4,1211.67 1263.98,1211.67 1264.57,1211.67 1265.16,1211.67 1265.74,1211.67 1266.33,1211.67 1266.92,1211.67 1267.5,1211.67 1268.09,1211.67 1268.68,1211.67 1269.26,1211.67 1269.85,1211.67 1270.44,1211.67 1271.02,1211.67 1271.61,1211.67 1272.19,1211.67 1272.78,1211.67 1273.37,1211.67 1273.95,1211.67 1274.54,1211.67 1275.13,1211.67 1275.71,1211.67 1276.3,1211.67 1276.89,1211.67 1277.47,1211.67 1278.06,1211.67 1278.65,1211.67 1279.23,1211.67 1279.82,1211.67 1280.4,1211.67 1280.99,1211.67 1281.58,1211.67 1282.16,1211.67 1282.75,1211.67 1283.34,1211.67 1283.92,1211.67 1284.51,1211.67 1285.1,1211.67 1285.68,1211.67 1286.27,1211.67 1286.86,1211.67 1287.44,1211.67 1288.03,1211.67 1288.61,1211.67 1289.2,1211.67 1289.79,1211.67 1290.37,1211.67 1290.96,1211.67 1291.55,1211.67 1292.13,1211.67 1292.72,1211.67 1293.31,1211.67 1293.89,1211.67 1294.48,1211.67 1295.06,1211.67 1295.65,1211.67 1296.24,1211.67 1296.82,1211.67 1297.41,1211.67 1298,1211.67 1298.58,1211.67 1299.17,1211.67 1299.76,1211.67 1300.34,1211.67 1300.93,1211.67 1301.52,1211.67 1302.1,1211.67 1302.69,1211.67 1303.27,1211.67 1303.86,1211.67 1304.45,1211.67 1305.03,1211.67 1305.62,1211.67 1306.21,1211.67 1306.79,1211.67 1307.38,1211.67 1307.97,1211.67 1308.55,1211.67 1309.14,1211.67 1309.73,1211.67 1310.31,1211.67 1310.9,1211.67 1311.48,1211.67 1312.07,1211.67 1312.66,1211.67 1313.24,1211.67 1313.83,1211.67 1314.42,1211.67 1315,1211.67 1315.59,1211.67 1316.18,1211.67 1316.76,1211.67 1317.35,1211.67 1317.93,1211.67 1318.52,1211.67 1319.11,1211.67 1319.69,1211.67 1320.28,1211.67 1320.87,1211.67 1321.45,1211.67 1322.04,1211.67 1322.63,1211.67 1323.21,1211.67 1323.8,1211.67 1324.39,1211.67 1324.97,1211.67 1325.56,1211.67 1326.14,1211.67 1326.73,1211.67 1327.32,1211.67 1327.9,1211.67 1328.49,1211.67 1329.08,1211.67 1329.66,1211.67 1330.25,1211.67 1330.84,1211.67 1331.42,1211.67 1332.01,1211.67 1332.6,1211.67 1333.18,1211.67 1333.77,1211.67 1334.35,1211.67 1334.94,1211.67 1335.53,1211.67 1336.11,1211.67 1336.7,1211.67 1337.29,1211.67 1337.87,1211.67 1338.46,1211.67 1339.05,1211.67 1339.63,1211.67 1340.22,1211.67 1340.8,1211.67 1341.39,1211.67 1341.98,1211.67 1342.56,1211.67 1343.15,1211.67 1343.74,1211.67 1344.32,1211.67 1344.91,1211.67 1345.5,1211.67 1346.08,1211.67 1346.67,1211.67 1347.26,1211.67 1347.84,1211.67 1348.43,1211.67 1349.01,1211.67 1349.6,1211.67 1350.19,1211.67 1350.77,1211.67 1351.36,1211.67 1351.95,1211.67 1352.53,1211.67 1353.12,1211.67 1353.71,1211.67 1354.29,1211.67 1354.88,1211.67 1355.47,1211.67 1356.05,1211.67 1356.64,1211.67 1357.22,1211.67 1357.81,1211.67 1358.4,1211.67 1358.98,1211.67 1359.57,1211.67 1360.16,1211.67 1360.74,1211.67 1361.33,1211.67 1361.92,1211.67 1362.5,1211.67 1363.09,1211.67 1363.68,1211.67 1364.26,1211.67 1364.85,1211.67 1365.43,1211.67 1366.02,1211.67 1366.61,1211.67 1367.19,1211.67 1367.78,1211.67 1368.37,1211.67 1368.95,1211.67 1369.54,1211.67 1370.13,1211.67 1370.71,1211.67 1371.3,1211.67 1371.88,1211.67 1372.47,1211.67 1373.06,1211.67 1373.64,1211.67 1374.23,1211.67 1374.82,1211.67 1375.4,1211.67 1375.99,1211.67 1376.58,1211.67 1377.16,1211.67 1377.75,1211.67 1378.34,1211.67 1378.92,1211.67 1379.51,1211.67 1380.09,1211.67 1380.68,1211.67 1381.27,1211.67 1381.85,1211.67 1382.44,1211.67 1383.03,1211.67 1383.61,1211.67 1384.2,1211.67 1384.79,1211.67 1385.37,1211.67 1385.96,1211.67 1386.55,1211.67 1387.13,1211.67 1387.72,1211.67 1388.3,1211.67 1388.89,1211.67 1389.48,1211.67 1390.06,1211.67 1390.65,1211.67 1391.24,1211.67 1391.82,1211.67 1392.41,1211.67 1393,1211.67 1393.58,1211.67 1394.17,1211.67 1394.75,1211.67 1395.34,1211.67 1395.93,1211.67 1396.51,1211.67 1397.1,1211.67 1397.69,1211.67 1398.27,1211.67 1398.86,1211.67 1399.45,1211.67 1400.03,1211.67 1400.62,1211.67 1401.21,1211.67 1401.79,1211.67 1402.38,1211.67 1402.96,1211.67 1403.55,1211.67 1404.14,1211.67 1404.72,1211.67 1405.31,1211.67 1405.9,1211.67 1406.48,1211.67 1407.07,1211.67 1407.66,1211.67 1408.24,1211.67 1408.83,1211.67 1409.42,1211.67 1410,1211.67 1410.59,1211.67 1411.17,1211.67 1411.76,1211.67 1412.35,1211.67 1412.93,1211.67 1413.52,1211.67 1414.11,1211.67 1414.69,1211.67 1415.28,1211.67 1415.87,1211.67 1416.45,1211.67 1417.04,1211.67 1417.63,1211.67 1418.21,1211.67 1418.8,1211.67 1419.38,1211.67 1419.97,1211.67 1420.56,1211.67 1421.14,1211.67 1421.73,1211.67 1422.32,1211.67 1422.9,1211.67 1423.49,1211.67 1424.08,1211.67 1424.66,1211.67 1425.25,1211.67 1425.83,1211.67 1426.42,1211.67 1427.01,1211.67 1427.59,1211.67 1428.18,1211.67 1428.77,1211.67 1429.35,1211.67 1429.94,1211.67 1430.53,1211.67 1431.11,1211.67 1431.7,1211.67 1432.29,1211.67 1432.87,1211.67 1433.46,1211.67 1434.04,1211.67 1434.63,1211.67 1435.22,1211.67 1435.8,1211.67 1436.39,1211.67 1436.98,1211.67 1437.56,1211.67 1438.15,1211.67 1438.74,1211.67 1439.32,1211.67 1439.91,1211.67 1440.5,1211.67 1441.08,1211.67 1441.67,1211.67 1442.25,1211.67 1442.84,1211.67 1443.43,1211.67 1444.01,1211.67 1444.6,1211.67 1445.19,1211.67 1445.77,1211.67 1446.36,1211.67 1446.95,1211.67 1447.53,1211.67 1448.12,1211.67 1448.7,1211.67 1449.29,1211.67 1449.88,1211.67 1450.46,1211.67 1451.05,1211.67 1451.64,1211.67 1452.22,1211.67 1452.81,1211.67 1453.4,1211.67 1453.98,1211.67 1454.57,1211.67 1455.16,1211.67 1455.74,1211.67 1456.33,1211.67 1456.91,1211.67 1457.5,1211.67 1458.09,1211.67 1458.67,1211.67 1459.26,1211.67 1459.85,1211.67 1460.43,1211.67 1461.02,1211.67 1461.61,1211.67 1462.19,1211.67 1462.78,1211.67 1463.37,1211.67 1463.95,1211.67 1464.54,1211.67 1465.12,1211.67 1465.71,1211.67 1466.3,1211.67 1466.88,1211.67 1467.47,1211.67 1468.06,1211.67 1468.64,1211.67 1469.23,1211.67 1469.82,1211.67 1470.4,1211.67 1470.99,1211.67 1471.57,1211.67 1472.16,1211.67 1472.75,1211.67 1473.33,1211.67 1473.92,1211.67 1474.51,1211.67 1475.09,1211.67 1475.68,1211.67 1476.27,1211.67 1476.85,1211.67 1477.44,1211.67 1478.03,1211.67 1478.61,1211.67 1479.2,1211.67 1479.78,1211.67 1480.37,1211.67 1480.96,1211.67 1481.54,1211.67 1482.13,1211.67 1482.72,1211.67 1483.3,1211.67 1483.89,1211.67 1484.48,1211.67 1485.06,1211.67 1485.65,1211.67 1486.24,1211.67 1486.82,1211.67 1487.41,1211.67 1487.99,1211.67 1488.58,1211.67 1489.17,1211.67 1489.75,1211.67 1490.34,1211.67 1490.93,1211.67 1491.51,1211.67 1492.1,1211.67 1492.69,1211.67 1493.27,1211.67 1493.86,1211.67 1494.45,1211.67 1495.03,1211.67 1495.62,1211.67 1496.2,1211.67 1496.79,1211.67 1497.38,1211.67 1497.96,1211.67 1498.55,1211.67 1499.14,1211.67 1499.72,1211.67 1500.31,1211.67 1500.9,1211.67 1501.48,1211.67 1502.07,1211.67 1502.65,1211.67 1503.24,1211.67 1503.83,1211.67 1504.41,1211.67 1505,1211.67 1505.59,1211.67 1506.17,1211.67 1506.76,1211.67 1507.35,1211.67 1507.93,1211.67 1508.52,1211.67 1509.11,1211.67 1509.69,1211.67 1510.28,1211.67 1510.86,1211.67 1511.45,1211.67 1512.04,1211.67 1512.62,1211.67 1513.21,1211.67 1513.8,1211.67 1514.38,1211.67 1514.97,1211.67 1515.56,1211.67 1516.14,1211.67 1516.73,1211.67 1517.32,1211.67 1517.9,1211.67 1518.49,1211.67 1519.07,1211.67 1519.66,1211.67 1520.25,1211.67 1520.83,1211.67 1521.42,1211.67 1522.01,1211.67 1522.59,1211.67 1523.18,1211.67 1523.77,1211.67 1524.35,1211.67 1524.94,1211.67 1525.52,1211.67 1526.11,1211.67 1526.7,1211.67 1527.28,1211.67 1527.87,1211.67 1528.46,1211.67 1529.04,1211.67 1529.63,1211.67 1530.22,1211.67 1530.8,1211.67 1531.39,1211.67 1531.98,1211.67 1532.56,1211.67 1533.15,1211.67 1533.73,1211.67 1534.32,1211.67 1534.91,1211.67 1535.49,1211.67 1536.08,1211.67 1536.67,1211.67 1537.25,1211.67 1537.84,1211.67 1538.43,1211.67 1539.01,1211.67 1539.6,1211.67 1540.19,1211.67 1540.77,1211.67 1541.36,1211.67 1541.94,1211.67 1542.53,1211.67 1543.12,1211.67 1543.7,1211.67 1544.29,1211.67 1544.88,1211.67 1545.46,1211.67 1546.05,1211.67 1546.64,1211.67 1547.22,1211.67 1547.81,1211.67 1548.4,1211.67 1548.98,1211.67 1549.57,1211.67 1550.15,1211.67 1550.74,1211.67 1551.33,1211.67 1551.91,1211.67 1552.5,1211.67 1553.09,1211.67 1553.67,1211.67 1554.26,1211.67 1554.85,1211.67 1555.43,1211.67 1556.02,1211.67 1556.6,1211.67 1557.19,1211.67 1557.78,1211.67 1558.36,1211.67 1558.95,1211.67 1559.54,1211.67 1560.12,1211.67 1560.71,1211.67 1561.3,1211.67 1561.88,1211.67 1562.47,1211.67 1563.06,1211.67 1563.64,1211.67 1564.23,1211.67 1564.81,1211.67 1565.4,1211.67 1565.99,1211.67 1566.57,1211.67 1567.16,1211.67 1567.75,1211.67 1568.33,1211.67 1568.92,1211.67 1569.51,1211.67 1570.09,1211.67 1570.68,1211.67 1571.27,1211.67 1571.85,1211.67 1572.44,1211.67 1573.02,1211.67 1573.61,1211.67 1574.2,1211.67 1574.78,1211.67 1575.37,1211.67 1575.96,1211.67 1576.54,1211.67 1577.13,1211.67 1577.72,1211.67 1578.3,1211.67 1578.89,1211.67 1579.47,1211.67 1580.06,1211.67 1580.65,1211.67 1581.23,1211.67 1581.82,1211.67 1582.41,1211.67 1582.99,1211.67 1583.58,1211.67 1584.17,1211.67 1584.75,1211.67 1585.34,1211.67 1585.93,1211.67 1586.51,1211.67 1587.1,1211.67 1587.68,1211.67 1588.27,1211.67 1588.86,1211.67 1589.44,1211.67 1590.03,1211.67 1590.62,1211.67 1591.2,1211.67 1591.79,1211.67 1592.38,1211.67 1592.96,1211.67 1593.55,1211.67 1594.14,1211.67 1594.72,1211.67 1595.31,1211.67 1595.89,1211.67 1596.48,1211.67 1597.07,1211.67 1597.65,1211.67 1598.24,1211.67 1598.83,1211.67 1599.41,1211.67 1600,1211.67 1600.59,1211.67 1601.17,1211.67 1601.76,1211.67 1602.34,1211.67 1602.93,1211.67 1603.52,1211.67 1604.1,1211.67 1604.69,1211.67 1605.28,1211.67 1605.86,1211.67 1606.45,1211.67 1607.04,1211.67 1607.62,1211.67 1608.21,1211.67 1608.8,1211.67 1609.38,1211.67 1609.97,1211.67 1610.55,1211.67 1611.14,1211.67 1611.73,1211.67 1612.31,1211.67 1612.9,1211.67 1613.49,1211.67 1614.07,1211.67 1614.66,1211.67 1615.25,1211.67 1615.83,1211.67 1616.42,1211.67 1617.01,1211.67 1617.59,1211.67 1618.18,1211.67 1618.76,1211.67 1619.35,1211.67 1619.94,1211.67 1620.52,1211.67 1621.11,1211.67 1621.7,1211.67 1622.28,1211.67 1622.87,1211.67 1623.46,1211.67 1624.04,1211.67 1624.63,1211.67 1625.22,1211.67 1625.8,1211.67 1626.39,1211.67 1626.97,1211.67 1627.56,1211.67 1628.15,1211.67 1628.73,1211.67 1629.32,1211.67 1629.91,1211.67 1630.49,1211.67 1631.08,1211.67 1631.67,1211.67 1632.25,1211.67 1632.84,1211.67 1633.42,1211.67 1634.01,1211.67 1634.6,1211.67 1635.18,1211.67 1635.77,1211.67 1636.36,1211.67 1636.94,1211.67 1637.53,1211.67 1638.12,1211.67 1638.7,1211.67 1639.29,1211.67 1639.88,1211.67 1640.46,1211.67 1641.05,1211.67 1641.63,1211.67 1642.22,1211.67 1642.81,1211.67 1643.39,1211.67 1643.98,1211.67 1644.57,1211.67 1645.15,1211.67 1645.74,1211.67 1646.33,1211.67 1646.91,1211.67 1647.5,1211.67 1648.09,1211.67 1648.67,1211.67 1649.26,1211.67 1649.84,1211.67 1650.43,1211.67 1651.02,1211.67 1651.6,1211.67 1652.19,1211.67 1652.78,1211.67 1653.36,1211.67 1653.95,1211.67 1654.54,1211.67 1655.12,1211.67 1655.71,1211.67 1656.29,1211.67 1656.88,1211.67 1657.47,1211.67 1658.05,1211.67 1658.64,1211.67 1659.23,1211.67 1659.81,1211.67 1660.4,1211.67 1660.99,1211.67 1661.57,1211.67 1662.16,1211.67 1662.75,1211.67 1663.33,1211.67 1663.92,1211.67 1664.5,1211.67 1665.09,1211.67 1665.68,1211.67 1666.26,1211.67 1666.85,1211.67 1667.44,1211.67 1668.02,1211.67 1668.61,1211.67 1669.2,1211.67 1669.78,1211.67 1670.37,1211.67 1670.96,1211.67 1671.54,1211.67 1672.13,1211.67 1672.71,1211.67 1673.3,1211.67 1673.89,1211.67 1674.47,1211.67 1675.06,1211.67 1675.65,1211.67 1676.23,1211.67 1676.82,1211.67 1677.41,1211.67 1677.99,1211.67 1678.58,1211.67 1679.17,1211.67 1679.75,1211.67 1680.34,1211.67 1680.92,1211.67 1681.51,1211.67 1682.1,1211.67 1682.68,1211.67 1683.27,1211.67 1683.86,1211.67 1684.44,1211.67 1685.03,1211.67 1685.62,1211.67 1686.2,1211.67 1686.79,1211.67 1687.37,1211.67 1687.96,1211.67 1688.55,1211.67 1689.13,1211.67 1689.72,1211.67 1690.31,1211.67 1690.89,1211.67 1691.48,1211.67 1692.07,1211.67 1692.65,1211.67 1693.24,1211.67 1693.83,1211.67 1694.41,1211.67 1695,1211.67 1695.58,1211.67 1696.17,1211.67 1696.76,1211.67 1697.34,1211.67 1697.93,1211.67 1698.52,1211.67 1699.1,1211.67 1699.69,1211.67 1700.28,1211.67 1700.86,1211.67 1701.45,1211.67 1702.04,1211.67 1702.62,1211.67 1703.21,1211.67 1703.79,1211.67 1704.38,1211.67 1704.97,1211.67 1705.55,1211.67 1706.14,1211.67 1706.73,1211.67 1707.31,1211.67 1707.9,1211.67 1708.49,1211.67 1709.07,1211.67 1709.66,1211.67 1710.24,1211.67 1710.83,1211.67 1711.42,1211.67 1712,1211.67 1712.59,1211.67 1713.18,1211.67 1713.76,1211.67 1714.35,1211.67 1714.94,1211.67 1715.52,1211.67 1716.11,1211.67 1716.7,1211.67 1717.28,1211.67 1717.87,1211.67 1718.45,1211.67 1719.04,1211.67 1719.63,1211.67 1720.21,1211.67 1720.8,1211.67 1721.39,1211.67 1721.97,1211.67 1722.56,1211.67 1723.15,1211.67 1723.73,1211.67 1724.32,1211.67 1724.91,1211.67 1725.49,1211.67 1726.08,1211.67 1726.66,1211.67 1727.25,1211.67 1727.84,1211.67 1728.42,1211.67 1729.01,1211.67 1729.6,1211.67 1730.18,1211.67 1730.77,1211.67 1731.36,1211.67 1731.94,1211.67 1732.53,1211.67 1733.11,1211.67 1733.7,1211.67 1734.29,1211.67 1734.87,1211.67 1735.46,1211.67 1736.05,1211.67 1736.63,1211.67 1737.22,1211.67 1737.81,1211.67 1738.39,1211.67 1738.98,1211.67 1739.57,1211.67 1740.15,1211.67 1740.74,1211.67 1741.32,1211.67 1741.91,1211.67 1742.5,1211.67 1743.08,1211.67 1743.67,1211.67 1744.26,1211.67 1744.84,1211.67 1745.43,1211.67 1746.02,1211.67 1746.6,1211.67 1747.19,1211.67 1747.78,1211.67 1748.36,1211.67 1748.95,1211.67 1749.53,1211.67 1750.12,1211.67 1750.71,1211.67 1751.29,1211.67 1751.88,1211.67 1752.47,1211.67 1753.05,1211.67 1753.64,1211.67 1754.23,1211.67 1754.81,1211.67 1755.4,1211.67 1755.99,1211.67 1756.57,1211.67 1757.16,1211.67 1757.74,1211.67 1758.33,1211.67 1758.92,1211.67 1759.5,1211.67 1760.09,1211.67 1760.68,1211.67 1761.26,1211.67 1761.85,1211.67 1762.44,1211.67 1763.02,1211.67 1763.61,1211.67 1764.19,1211.67 1764.78,1211.67 1765.37,1211.67 1765.95,1211.67 1766.54,1211.67 1767.13,1211.67 1767.71,1211.67 1768.3,1211.67 1768.89,1211.67 1769.47,1211.67 1770.06,1211.67 1770.65,1211.67 1771.23,1211.67 1771.82,1211.67 1772.4,1211.67 1772.99,1211.67 1773.58,1211.67 1774.16,1211.67 1774.75,1211.67 1775.34,1211.67 1775.92,1211.67 1776.51,1211.67 1777.1,1211.67 1777.68,1211.67 1778.27,1211.67 1778.86,1211.67 1779.44,1211.67 1780.03,1211.67 1780.61,1211.67 1781.2,1211.67 1781.79,1211.67 1782.37,1211.67 1782.96,1211.67 1783.55,1211.67 1784.13,1211.67 1784.72,1211.67 1785.31,1211.67 1785.89,1211.67 1786.48,1211.67 1787.06,1211.67 1787.65,1211.67 1788.24,1211.67 1788.82,1211.67 1789.41,1211.67 1790,1211.67 1790.58,1211.67 1791.17,1211.67 1791.76,1211.67 1792.34,1211.67 1792.93,1211.67 1793.52,1211.67 1794.1,1211.67 1794.69,1211.67 1795.27,1211.67 1795.86,1211.67 1796.45,1211.67 1797.03,1211.67 1797.62,1211.67 1798.21,1211.67 1798.79,1211.67 1799.38,1211.67 1799.97,1211.67 1800.55,1211.67 1801.14,1211.67 1801.73,1211.67 1802.31,1211.67 1802.9,1211.67 1803.48,1211.67 1804.07,1211.67 1804.66,1211.67 1805.24,1211.67 1805.83,1211.67 1806.42,1211.67 1807,1211.67 1807.59,1211.67 1808.18,1211.67 1808.76,1211.67 1809.35,1211.67 1809.94,1211.67 1810.52,1211.67 1811.11,1211.67 1811.69,1211.67 1812.28,1211.67 1812.87,1211.67 1813.45,1211.67 1814.04,1211.67 1814.63,1211.67 1815.21,1211.67 1815.8,1211.67 1816.39,1211.67 1816.97,1211.67 1817.56,1211.67 1818.14,1211.67 1818.73,1211.67 1819.32,1211.67 1819.9,1211.67 1820.49,1211.67 1821.08,1211.67 1821.66,1211.67 1822.25,1211.67 1822.84,1211.67 1823.42,1211.67 1824.01,1211.67 1824.6,1211.67 1825.18,1211.67 1825.77,1211.67 1826.35,1211.67 1826.94,1211.67 1827.53,1211.67 1828.11,1211.67 1828.7,1211.67 1829.29,1211.67 1829.87,1211.67 1830.46,1211.67 1831.05,1211.67 1831.63,1211.67 1832.22,1211.67 1832.81,1211.67 1833.39,1211.67 1833.98,1211.67 1834.56,1211.67 1835.15,1211.67 1835.74,1211.67 1836.32,1211.67 1836.91,1211.67 1837.5,1211.67 1838.08,1211.67 1838.67,1211.67 1839.26,1211.67 1839.84,1211.67 1840.43,1211.67 1841.01,1211.67 1841.6,1211.67 1842.19,1211.67 1842.77,1211.67 1843.36,1211.67 1843.95,1211.67 1844.53,1211.67 1845.12,1211.67 1845.71,1211.67 1846.29,1211.67 1846.88,1211.67 1847.47,1211.67 1848.05,1211.67 1848.64,1211.67 1849.22,1211.67 1849.81,1211.67 1850.4,1211.67 1850.98,1211.67 1851.57,1211.67 1852.16,1211.67 1852.74,1211.67 1853.33,1211.67 1853.92,1211.67 1854.5,1211.67 1855.09,1211.67 1855.68,1211.67 1856.26,1211.67 1856.85,1211.67 1857.43,1211.67 1858.02,1211.67 1858.61,1211.67 1859.19,1211.67 1859.78,1211.67 1860.37,1211.67 1860.95,1211.67 1861.54,1211.67 1862.13,1211.67 1862.71,1211.67 1863.3,1211.67 1863.88,1211.67 1864.47,1211.67 1865.06,1211.67 1865.64,1211.67 1866.23,1211.67 1866.82,1211.67 1867.4,1211.67 1867.99,1211.67 1868.58,1211.67 1869.16,1211.67 1869.75,1211.67 1870.34,1211.67 1870.92,1211.67 1871.51,1211.67 1872.09,1211.67 1872.68,1211.67 1873.27,1211.67 1873.85,1211.67 1874.44,1211.67 1875.03,1211.67 1875.61,1211.67 1876.2,1211.67 1876.79,1211.67 1877.37,1211.67 1877.96,1211.67 1878.55,1211.67 1879.13,1211.67 1879.72,1211.67 1880.3,1211.67 1880.89,1211.67 1881.48,1211.67 1882.06,1211.67 1882.65,1211.67 1883.24,1211.67 1883.82,1211.67 1884.41,1211.67 1885,1211.67 1885.58,1211.67 1886.17,1211.67 1886.76,1211.67 1887.34,1211.67 1887.93,1211.67 1888.51,1211.67 1889.1,1211.67 1889.69,1211.67 1890.27,1211.67 1890.86,1211.67 1891.45,1211.67 1892.03,1211.67 1892.62,1211.67 1893.21,1211.67 1893.79,1211.67 1894.38,1211.67 1894.96,1211.67 1895.55,1211.67 1896.14,1211.67 1896.72,1211.67 1897.31,1211.67 1897.9,1211.67 1898.48,1211.67 1899.07,1211.67 1899.66,1211.67 1900.24,1211.67 1900.83,1211.67 1901.42,1211.67 1902,1211.67 1902.59,1211.67 1903.17,1211.67 1903.76,1211.67 1904.35,1211.67 1904.93,1211.67 1905.52,1211.67 1906.11,1211.67 1906.69,1211.67 1907.28,1211.67 1907.87,1211.67 1908.45,1211.67 1909.04,1211.67 1909.63,1211.67 1910.21,1211.67 1910.8,1211.67 1911.38,1211.67 1911.97,1211.67 1912.56,1211.67 1913.14,1211.67 1913.73,1211.67 1914.32,1211.67 1914.9,1211.67 1915.49,1211.67 1916.08,1211.67 1916.66,1211.67 1917.25,1211.67 1917.83,1211.67 1918.42,1211.67 1919.01,1211.67 1919.59,1211.67 1920.18,1211.67 1920.77,1211.67 1921.35,1211.67 1921.94,1211.67 1922.53,1211.67 1923.11,1211.67 1923.7,1211.67 1924.29,1211.67 1924.87,1211.67 1925.46,1211.67 1926.04,1211.67 1926.63,1211.67 1927.22,1211.67 1927.8,1211.67 1928.39,1211.67 1928.98,1211.67 1929.56,1211.67 1930.15,1211.67 1930.74,1211.67 1931.32,1211.67 1931.91,1211.67 1932.5,1211.67 1933.08,1211.67 1933.67,1211.67 1934.25,1211.67 1934.84,1211.67 1935.43,1211.67 1936.01,1211.67 1936.6,1211.67 1937.19,1211.67 1937.77,1211.67 1938.36,1211.67 1938.95,1211.67 1939.53,1211.67 1940.12,1211.67 1940.71,1211.67 1941.29,1211.67 1941.88,1211.67 1942.46,1211.67 1943.05,1211.67 1943.64,1211.67 1944.22,1211.67 1944.81,1211.67 1945.4,1211.67 1945.98,1211.67 1946.57,1211.67 1947.16,1211.67 1947.74,1211.67 1948.33,1211.67 1948.91,1211.67 1949.5,1211.67 1950.09,1211.67 1950.67,1211.67 1951.26,1211.67 1951.85,1211.67 1952.43,1211.67 1953.02,1211.67 1953.61,1211.67 1954.19,1211.67 1954.78,1211.67 1955.37,1211.67 1955.95,1211.67 1956.54,1211.67 1957.12,1211.67 1957.71,1211.67 1958.3,1211.67 1958.88,1211.67 1959.47,1211.67 1960.06,1211.67 1960.64,1211.67 1961.23,1211.67 1961.82,1211.67 1962.4,1211.67 1962.99,1211.67 1963.58,1211.67 1964.16,1211.67 1964.75,1211.67 1965.33,1211.67 1965.92,1211.67 1966.51,1211.67 1967.09,1211.67 1967.68,1211.67 1968.27,1211.67 1968.85,1211.67 1969.44,1211.67 1970.03,1211.67 1970.61,1211.67 1971.2,1211.67 1971.78,1211.67 1972.37,1211.67 1972.96,1211.67 1973.54,1211.67 1974.13,1211.67 1974.72,1211.67 1975.3,1211.67 1975.89,1211.67 1976.48,1211.67 1977.06,1211.67 1977.65,1211.67 1978.24,1211.67 1978.82,1211.67 1979.41,1211.67 1979.99,1211.67 1980.58,1211.67 1981.17,1211.67 1981.75,1211.67 1982.34,1211.67 1982.93,1211.67 1983.51,1211.67 1984.1,1211.67 1984.69,1211.67 1985.27,1211.67 1985.86,1211.67 1986.45,1211.67 1987.03,1211.67 1987.62,1211.67 1988.2,1211.67 1988.79,1211.67 1989.38,1211.67 1989.96,1211.67 1990.55,1211.67 1991.14,1211.67 1991.72,1211.67 1992.31,1211.67 1992.9,1211.67 1993.48,1211.67 1994.07,1211.67 1994.65,1211.67 1995.24,1211.67 1995.83,1211.67 1996.41,1211.67 1997,1211.67 1997.59,1211.67 1998.17,1211.67 1998.76,1211.67 1999.35,1211.67 1999.93,1211.67 2000.52,1211.67 2001.11,1211.67 2001.69,1211.67 2002.28,1211.67 2002.86,1211.67 2003.45,1211.67 2004.04,1211.67 2004.62,1211.67 2005.21,1211.67 2005.8,1211.67 2006.38,1211.67 2006.97,1211.67 2007.56,1211.67 2008.14,1211.67 2008.73,1211.67 2009.32,1211.67 2009.9,1211.67 2010.49,1211.67 2011.07,1211.67 2011.66,1211.67 2012.25,1211.67 2012.83,1211.67 2013.42,1211.67 2014.01,1211.67 2014.59,1211.67 2015.18,1211.67 2015.77,1211.67 2016.35,1211.67 2016.94,1211.67 2017.53,1211.67 2018.11,1211.67 2018.7,1211.67 2019.28,1211.67 2019.87,1211.67 2020.46,1211.67 2021.04,1211.67 2021.63,1211.67 2022.22,1211.67 2022.8,1211.67 2023.39,1211.67 2023.98,1211.67 2024.56,1211.67 2025.15,1211.67 2025.73,1211.67 2026.32,1211.67 2026.91,1211.67 2027.49,1211.67 2028.08,1211.67 2028.67,1211.67 2029.25,1211.67 2029.84,1211.67 2030.43,1211.67 2031.01,1211.67 2031.6,1211.67 2032.19,1211.67 2032.77,1211.67 2033.36,1211.67 2033.94,1211.67 2034.53,1211.67 2035.12,1211.67 2035.7,1211.67 2036.29,1211.67 2036.88,1211.67 2037.46,1211.67 2038.05,1211.67 2038.64,1211.67 2039.22,1211.67 2039.81,1211.67 2040.4,1211.67 2040.98,1211.67 2041.57,1211.67 2042.15,1211.67 2042.74,1211.67 2043.33,1211.67 2043.91,1211.67 2044.5,1211.67 2045.09,1211.67 2045.67,1211.67 2046.26,1211.67 2046.85,1211.67 2047.43,1211.67 2048.02,1211.67 2048.6,1211.67 2049.19,1211.67 2049.78,1211.67 2050.36,1211.67 2050.95,1211.67 2051.54,1211.67 2052.12,1211.67 2052.71,1211.67 2053.3,1211.67 2053.88,1211.67 2054.47,1211.67 2055.06,1211.67 2055.64,1211.67 2056.23,1211.67 2056.81,1211.67 2057.4,1211.67 2057.99,1211.67 2058.57,1211.67 2059.16,1211.67 2059.75,1211.67 2060.33,1211.67 2060.92,1211.67 2061.51,1211.67 2062.09,1211.67 2062.68,1211.67 2063.27,1211.67 2063.85,1211.67 2064.44,1211.67 2065.02,1211.67 2065.61,1211.67 2066.2,1211.67 2066.78,1211.67 2067.37,1211.67 2067.96,1211.67 2068.54,1211.67 2069.13,1211.67 2069.72,1211.67 2070.3,1211.67 2070.89,1211.67 2071.48,1211.67 2072.06,1211.67 2072.65,1211.67 2073.23,1211.67 2073.82,1211.67 2074.41,1211.67 2074.99,1211.67 2075.58,1211.67 2076.17,1211.67 2076.75,1211.67 2077.34,1211.67 2077.93,1211.67 2078.51,1211.67 2079.1,1211.67 2079.68,1211.67 2080.27,1211.67 2080.86,1211.67 2081.44,1211.67 2082.03,1211.67 2082.62,1211.67 2083.2,1211.67 2083.79,1211.67 2084.38,1211.67 2084.96,1211.67 2085.55,1211.67 2086.14,1211.67 2086.72,1211.67 2087.31,1211.67 2087.89,1211.67 2088.48,1211.67 2089.07,1211.67 2089.65,1211.67 2090.24,1211.67 2090.83,1211.67 2091.41,1211.67 2092,1211.67 2092.59,1211.67 2093.17,1211.67 2093.76,1211.67 2094.35,1211.67 2094.93,1211.67 2095.52,1211.67 2096.1,1211.67 2096.69,1211.67 2097.28,1211.67 2097.86,1211.67 2098.45,1211.67 2099.04,1211.67 2099.62,1211.67 2100.21,1211.67 2100.8,1211.67 2101.38,1211.67 2101.97,1211.67 2102.55,1211.67 2103.14,1211.67 2103.73,1211.67 2104.31,1211.67 2104.9,1211.67 2105.49,1211.67 2106.07,1211.67 2106.66,1211.67 2107.25,1211.67 2107.83,1211.67 2108.42,1211.67 2109.01,1211.67 2109.59,1211.67 2110.18,1211.67 2110.76,1211.67 2111.35,1211.67 2111.94,1211.67 2112.52,1211.67 2113.11,1211.67 2113.7,1211.67 2114.28,1211.67 2114.87,1211.67 2115.46,1211.67 2116.04,1211.67 2116.63,1211.67 2117.22,1211.67 2117.8,1211.67 2118.39,1211.67 2118.97,1211.67 2119.56,1211.67 2120.15,1211.67 2120.73,1211.67 2121.32,1211.67 2121.91,1211.67 2122.49,1211.67 2123.08,1211.67 2123.67,1211.67 2124.25,1211.67 2124.84,1211.67 2125.42,1211.67 2126.01,1211.67 2126.6,1211.67 2127.18,1211.67 2127.77,1211.67 2128.36,1211.67 2128.94,1211.67 2129.53,1211.67 2130.12,1211.67 2130.7,1211.67 2131.29,1211.67 2131.88,1211.67 2132.46,1211.67 2133.05,1211.67 2133.63,1211.67 2134.22,1211.67 2134.81,1211.67 2135.39,1211.67 2135.98,1211.67 2136.57,1211.67 2137.15,1211.67 2137.74,1211.67 2138.33,1211.67 2138.91,1211.67 2139.5,1211.67 2140.09,1211.67 2140.67,1211.67 2141.26,1211.67 2141.84,1211.67 2142.43,1211.67 2143.02,1211.67 2143.6,1211.67 2144.19,1211.67 2144.78,1211.67 2145.36,1211.67 2145.95,1211.67 2146.54,1211.67 2147.12,1211.67 2147.71,1211.67 2148.3,1211.67 2148.88,1211.67 2149.47,1211.67 2150.05,1211.67 2150.64,1211.67 2151.23,1211.67 2151.81,1211.67 2152.4,1211.67 2152.99,1211.67 2153.57,1211.67 2154.16,1211.67 2154.75,1211.67 2155.33,1211.67 2155.92,1211.67 2156.5,1211.67 2157.09,1211.67 2157.68,1211.67 2158.26,1211.67 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.55,1194.58 1399.5,899.083 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1228.29 985.439,1194.58 2158.26,1194.58 2158.26,1228.29 985.439,1228.29 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip000)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip000)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip003\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip003)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-10247.9 166.588,-10821.4 167.147,-11334.6 167.706,-10760.1 168.266,-11209 168.825,-11606.4 169.384,-11955.6 169.943,-10736.9 170.503,-11059.4 171.062,-11339.9 171.621,-11581.3 172.18,-11776 172.74,-11934.1 173.299,-12074.4 173.858,-12174.6 174.417,-11375.4 174.977,-11050.5 175.536,-11136.9 176.095,-10841.6 176.655,-10884.7 177.214,-10902.3 177.773,-10904.5 178.332,-10342.7 178.892,-10330 179.451,-10295.2 180.01,-10250.9 180.569,-10200.1 181.129,-9930.96 181.688,-9500 182.247,-9272.6 182.806,-9210.35 183.366,-8834.87 183.925,-8606.68 184.484,-8521.91 185.043,-8430.36 185.603,-8333.05 186.162,-8110.02 186.721,-7881.62 187.28,-7654.58 187.84,-7443.63 188.399,-7226.2 188.958,-6832.22 189.517,-6723.4 190.077,-6601.31 190.636,-6481.84 191.195,-6350.64 191.754,-6149.65 192.314,-6024.64 192.873,-5755.04 193.432,-5571.2 193.991,-5266.82 194.551,-5041.65 195.11,-4946.86 195.669,-4734.47 196.228,-4579.48 196.788,-4378.59 197.347,-4240.91 197.906,-4001.71 198.465,-3823.18 199.025,-3740.57 199.584,-3656.14 200.143,-3580.77 200.702,-3367.65 201.262,-3289.53 201.821,-3170.73 202.38,-3053.27 202.939,-2941.32 203.499,-2758.24 204.058,-2574.91 204.617,-2509.93 205.176,-2307.26 205.736,-2213.47 206.295,-2154.03 206.854,-2090.87 207.413,-1995.18 207.973,-1901.17 208.532,-1809.33 209.091,-1659.42 209.65,-1488.44 210.21,-1356.04 210.769,-1313.87 211.328,-1212.31 211.887,-1085.78 212.447,-1044.99 213.006,-983.305 213.565,-871.526 214.124,-810.303 214.684,-726.316 215.243,-668.605 215.802,-613.317 216.361,-558.193 216.921,-554.991 217.48,-524.866 218.039,-492.273 218.598,-461.88 219.158,-431.869 219.717,-376.769 220.276,-321.501 220.835,-291.194 221.395,-195.936 221.954,-104.911 222.513,-85.0886 223.072,-17.0936 223.632,26.6753 224.191,70.8732 224.75,132.514 225.309,147.965 225.869,184.026 226.428,241.426 226.987,341.204 227.546,372.598 228.106,380.245 228.665,392.737 229.224,377.335 229.783,443.449 230.343,451.117 230.902,479.595 231.461,487.217 232.02,476.75 232.58,503.521 233.139,531.531 233.698,557.402 234.257,604.683 234.817,610.48 235.376,690.713 235.935,711.641 236.494,712.923 237.054,694.801 237.613,694.218 238.172,714.757 238.731,700.875 239.291,741.276 239.85,740.982 240.409,741.467 240.968,762.536 241.528,781.103 242.087,800.118 242.646,820.297 243.205,835.371 243.765,852.949 244.324,870.894 244.883,871.483 245.442,906.726 246.002,890.052 246.561,924.995 247.12,956.335 247.679,966.765 248.239,965.558 248.798,958.297 249.357,952.149 249.916,987.194 250.476,978.246 251.035,971.761 251.594,967.248 252.153,982.615 252.713,994.457 253.272,1035.92 253.831,1009.85 254.39,1004.77 254.95,1048.84 255.509,1039.89 256.068,1014.37 256.627,1010.58 257.187,1024.08 257.746,998.7 258.305,1045.02 258.864,1037.1 259.424,1033.43 259.983,1009.63 260.542,1022.2 261.101,1033.94 261.661,1064.72 262.22,1074.77 262.779,1034.3 263.338,1029.33 263.898,1075.03 264.457,1082.34 265.016,1108.12 265.575,1129.79 266.135,1099.39 266.694,1089.93 267.253,1061.89 267.812,1037.24 268.372,1082.47 268.931,1054.14 269.49,1033.61 270.049,1043.88 270.609,1073.75 271.168,1100.93 271.727,1107.59 272.286,1099.3 272.846,1125.48 273.405,1132.7 273.964,1142.62 274.523,1112.46 275.083,1106.52 275.642,1145.39 276.201,1152.86 276.76,1173.85 277.32,1161.35 277.879,1149.57 278.438,1135.53 278.997,1126.67 279.557,1097.98 280.116,1136.02 280.675,1144.33 281.234,1168.76 281.794,1187.42 282.353,1174.89 282.912,1181.53 283.471,1182.52 284.031,1168.11 284.59,1152.16 285.149,1089.63 285.708,1066.04 286.268,1057.92 286.827,1069.51 287.386,1083.51 287.945,1057.6 288.505,1081.49 289.064,1073.82 289.623,1065.71 290.182,1126.16 290.742,1146.83 291.301,1136.18 291.86,1122.08 292.419,1093.69 292.979,1083.18 293.538,1075.21 294.097,1087.34 294.656,1081.38 295.216,1091.67 295.775,1100.02 296.334,1111.18 296.893,1116.85 297.453,1104.93 298.012,1109.72 298.571,1080.32 299.13,1106.26 299.69,1096.98 300.249,1102.45 300.808,1110.77 301.368,1114.85 301.927,1121.02 302.486,1125.71 303.045,1065.83 303.605,1057.34 304.164,1031.4 304.723,1006.77 305.282,1001.73 305.842,993.742 306.401,1005.9 306.96,993.995 307.519,992.563 308.079,1003.86 308.638,996.322 309.197,1010.09 309.756,989.584 310.316,1014.39 310.875,1010.85 311.434,990.542 311.993,920.197 312.553,902.288 313.112,899.873 313.671,883.823 314.23,903.393 314.79,922.082 315.349,884.193 315.908,867.594 316.467,871.445 317.027,918.014 317.586,934.078 318.145,930.614 318.704,946.108 319.264,941.514 319.823,969.394 320.382,981.84 320.941,979.095 321.501,971.031 322.06,977.83 322.619,976.143 323.178,971.399 323.738,966.735 324.297,949.68 324.856,961.41 325.415,957.835 325.975,937.733 326.534,916.472 327.093,944.368 327.652,987.691 328.212,965.872 328.771,960.377 329.33,954.992 329.889,967.871 330.449,994.121 331.008,988.264 331.567,965.379 332.126,929.249 332.686,943.558 333.245,907.16 333.804,921.048 334.363,921.614 334.923,917.802 335.482,897.302 336.041,878.557 336.6,912.67 337.16,878.74 337.719,877.851 338.278,893.663 338.837,890.944 339.397,907.719 339.956,856.112 340.515,857.995 341.074,874.75 341.634,888.03 342.193,868.089 342.752,867.209 343.311,866.532 343.871,880.766 344.43,875.501 344.989,892.724 345.548,956.657 346.108,948.508 346.667,958.055 347.226,937.173 347.785,935.912 348.345,928.607 348.904,920.724 349.463,916.403 350.022,910.783 350.582,906.576 351.141,935.603 351.7,913.663 352.259,912.196 352.819,907.262 353.378,949.827 353.937,912.359 354.496,873.407 355.056,872.3 355.615,855.251 356.174,851.147 356.733,852.358 357.293,884.517 357.852,882.305 358.411,895.288 358.97,942.015 359.53,968.263 360.089,977.529 360.648,981.669 361.207,974.586 361.767,998.633 362.326,1005.65 362.885,981.121 363.444,1002.06 364.004,960.567 364.563,969.828 365.122,975.192 365.681,954.273 366.241,947.134 366.8,958.352 367.359,1001.04 367.918,996.444 368.478,1005.25 369.037,978.017 369.596,969.238 370.155,961.739 370.715,954.182 371.274,930.445 371.833,888.904 372.392,851.249 372.952,848.562 373.511,813.072 374.07,812.002 374.629,825.561 375.189,820.929 375.748,821.067 376.307,803.699 376.866,804.181 377.426,799.224 377.985,799.449 378.544,813.01 379.103,812.423 379.663,827.344 380.222,843.619 380.781,890.74 381.34,887.608 381.9,896.3 382.459,890.537 383.018,882.374 383.577,941.06 384.137,929.227 384.696,924.281 385.255,931.447 385.814,940.917 386.374,965.381 386.933,957.379 387.492,932.428 388.051,925.724 388.611,983.957 389.17,957.43 389.729,963.128 390.288,937.061 390.848,928.177 391.407,902.465 391.966,898.037 392.525,890.65 393.085,886.493 393.644,898.303 394.203,888.925 394.762,900.987 395.322,898.004 395.881,895.081 396.44,891.314 396.999,887.008 397.559,864.689 398.118,909.159 398.677,902.792 399.236,866.247 399.796,831.53 400.355,778.358 400.914,791.967 401.473,776.075 402.033,758.45 402.592,777.78 403.151,809.499 403.71,807.509 404.27,792.644 404.829,825.929 405.388,806.848 405.947,821.254 406.507,833.729 407.066,847.6 407.625,879.644 408.184,874.472 408.744,870.662 409.303,848.456 409.862,807.691 410.421,788.187 410.981,739.242 411.54,736.386 412.099,739.894 412.658,773.645 413.218,774.946 413.777,774.019 414.336,771.053 414.895,755.746 415.455,776.368 416.014,789.072 416.573,771.752 417.132,822.274 417.692,803.929 418.251,786.841 418.81,822.022 419.369,820.162 419.929,801.825 420.488,785.047 421.047,771.865 421.606,803.729 422.166,802.184 422.725,829.115 423.284,839.683 423.843,820.341 424.403,814.986 424.962,840.728 425.521,853.117 426.08,850.71 426.64,847.784 427.199,841.512 427.758,868.309 428.318,865.779 428.877,859.925 429.436,843.619 429.995,838.703 430.555,865.319 431.114,840.088 431.673,868.315 432.232,860.971 432.792,841.883 433.351,853.852 433.91,848.96 434.469,812.817 435.029,809.355 435.588,806.472 436.147,790.498 436.706,791.11 437.266,790.033 437.825,802.014 438.384,781.766 438.943,782.139 439.503,780.789 440.062,796.7 440.621,825.447 441.18,852.1 441.74,844.922 442.299,872.228 442.858,867.872 443.417,847.288 443.977,827.407 444.536,805.427 445.095,802.933 445.654,834.79 446.214,846.765 446.773,829.043 447.332,828.261 447.891,822.554 448.451,802.719 449.01,818.047 449.569,796.977 450.128,807.872 450.688,805.594 451.247,753.709 451.806,800.838 452.365,799.454 452.925,797.014 453.484,790.738 454.043,773.606 454.602,752.747 455.162,769.675 455.721,751.032 456.28,767.164 456.839,767.299 457.399,736.092 457.958,768.747 458.517,782.959 459.076,783.224 459.636,785.19 460.195,784.338 460.754,782.282 461.313,780.578 461.873,761.189 462.432,777.724 462.991,743.068 463.55,757.68 464.11,805.331 464.669,818.216 465.228,816.762 465.787,814.375 466.347,795.267 466.906,790.279 467.465,803.333 468.024,797.977 468.584,797.485 469.143,795.053 469.702,792.335 470.261,820.25 470.821,801.626 471.38,798.326 471.939,824.544 472.498,773.086 473.058,741.088 473.617,739.656 474.176,739.297 474.735,752.351 475.295,750.217 475.854,746.083 476.413,746.485 476.972,731.403 477.532,715.68 478.091,696.48 478.65,713.262 479.209,700.94 479.769,702.052 480.328,719.218 480.887,684.918 481.446,644.138 482.006,653.488 482.565,658.606 483.124,681.315 483.683,684.962 484.243,706.602 484.802,710.045 485.361,710.152 485.92,728.558 486.48,726.46 487.039,743.031 487.598,742.94 488.157,728.082 488.717,713.191 489.276,681.156 489.835,683.955 490.394,719.615 490.954,719.236 491.513,721.881 492.072,723.429 492.631,726.674 493.191,760.104 493.75,742.928 494.309,741.899 494.868,723.641 495.428,677.234 495.987,695.575 496.546,680.274 497.105,680.631 497.665,683.32 498.224,700.085 498.783,705.996 499.342,681.345 499.902,701.554 500.461,720.41 501.02,689.862 501.579,692.435 502.139,694.369 502.698,697.5 503.257,716.861 503.816,719.183 504.376,718.747 504.935,719.027 505.494,702.808 506.053,688.307 506.613,689.504 507.172,676.482 507.731,661.453 508.29,694.062 508.85,695.113 509.409,715.026 509.968,699.567 510.527,715.287 511.087,716.199 511.646,748.887 512.205,727.155 512.764,712.384 513.324,728.036 513.883,745.611 514.442,747.124 515.001,696.527 515.561,700.01 516.12,702.744 516.679,704.814 517.238,722.237 517.798,724.964 518.357,705.612 518.916,708.752 519.475,725.518 520.035,658.461 520.594,680.073 521.153,680.049 521.712,666.851 522.272,670.843 522.831,706.083 523.39,710.975 523.949,713.26 524.509,729.381 525.068,746.652 525.627,762.098 526.186,759.697 526.746,757.555 527.305,775.635 527.864,773.904 528.423,803.564 528.983,817.55 529.542,765.442 530.101,781.584 530.66,765.467 531.22,734.114 531.779,734.924 532.338,719.222 532.897,720.695 533.457,721.651 534.016,735.877 534.575,752.068 535.134,750.381 535.694,826.556 536.253,807.282 536.812,770.456 537.371,785.666 537.931,799.312 538.49,813.472 539.049,822.78 539.608,817.708 540.168,824.627 540.727,851.804 541.286,847.309 541.845,823.681 542.405,819.398 542.964,796.608 543.523,774.091 544.082,819.829 544.642,844.976 545.201,855.618 545.76,821.019 546.319,784.342 546.879,735.977 547.438,732.489 547.997,731.274 548.556,712.5 549.116,712.877 549.675,695.789 550.234,711.161 550.793,697.169 551.353,693.718 551.912,715.229 552.471,744.419 553.031,744.915 553.59,760.798 554.149,772.08 554.708,739.282 555.268,705.81 555.827,704.805 556.386,720.454 556.945,717.684 557.505,733.911 558.064,751.398 558.623,715.479 559.182,730.958 559.742,743.114 560.301,724.73 560.86,674.98 561.419,694.491 561.979,709.88 562.538,710.533 563.097,709.758 563.656,678.26 564.216,678.29 564.775,678.108 565.334,681.445 565.893,667.564 566.453,652.863 567.012,675.499 567.571,696.007 568.13,681.524 568.69,682.568 569.249,667.059 569.808,648.267 570.367,683.435 570.927,684.654 571.486,717.604 572.045,717.435 572.604,717.037 573.164,719.953 573.723,718.105 574.282,701.418 574.841,687.557 575.401,737.391 575.96,689.512 576.519,706.689 577.078,709.836 577.638,661.522 578.197,684.423 578.756,672.036 579.315,660.433 579.875,664.826 580.434,687.146 580.993,704.999 581.552,690.66 582.112,690.14 582.671,707.285 583.23,741.183 583.789,740.734 584.349,739.01 584.908,741.799 585.467,708.644 586.026,690.082 586.586,706.436 587.145,755.966 587.704,750.598 588.263,764.51 588.823,790.811 589.382,800.47 589.941,812.763 590.5,820.167 591.06,813.744 591.619,806.134 592.178,800.213 592.737,813.029 593.297,822.144 593.856,832.399 594.415,858.688 594.974,819.84 595.534,799.613 596.093,779.83 596.652,756.128 597.211,736.531 597.771,716.88 598.33,764.302 598.889,727.76 599.448,725.901 600.008,709.004 600.567,724.014 601.126,775.276 601.685,802.06 602.245,780.621 602.804,762.371 603.363,760.652 603.922,756.573 604.482,758.161 605.041,718.648 605.6,734.824 606.159,751.031 606.719,815.086 607.278,829.272 607.837,821.505 608.396,750.053 608.956,728.787 609.515,711.408 610.074,713.647 610.633,728.946 611.193,726.171 611.752,741.156 612.311,738.964 612.87,720.212 613.43,751.369 613.989,764.862 614.548,743.151 615.107,742.452 615.667,724.963 616.226,706.227 616.785,705.744 617.344,718.278 617.904,715.839 618.463,700.239 619.022,715.788 619.581,711.124 620.141,711.269 620.7,695.454 621.259,679.113 621.818,663.748 622.378,697.704 622.937,713.88 623.496,728.289 624.055,676.166 624.615,646.354 625.174,696.529 625.733,697.558 626.292,725.602 626.852,740.562 627.411,738.687 627.97,703.714 628.529,689.197 629.089,691.71 629.648,706.746 630.207,690.778 630.766,677.018 631.326,629.885 631.885,632.968 632.444,658.338 633.003,645.63 633.563,647.67 634.122,667.477 634.681,673.459 635.24,694.081 635.8,695.886 636.359,710.132 636.918,691.655 637.477,691.825 638.037,694.134 638.596,694.97 639.155,694.28 639.714,694.122 640.274,678.789 640.833,679.338 641.392,663.114 641.951,683.229 642.511,655.178 643.07,670.291 643.629,637.723 644.188,638.6 644.748,608.969 645.307,613.245 645.866,567.27 646.425,576.038 646.985,599.876 647.544,605.804 648.103,594.06 648.662,586.132 649.222,593.572 649.781,583.505 650.34,588.234 650.899,612.799 651.459,601.606 652.018,619.894 652.577,624.852 653.136,612.375 653.696,598.463 654.255,606.474 654.814,676.192 655.373,661.501 655.933,696.582 656.492,727.615 657.051,731.16 657.61,728.098 658.17,725.149 658.729,723.801 659.288,707.174 659.847,710.462 660.407,693.528 660.966,692.612 661.525,677.217 662.084,660.04 662.644,614.147 663.203,588.586 663.762,609.8 664.321,613.101 664.881,636.165 665.44,623.927 665.999,681.395 666.558,699.189 667.118,732.309 667.677,728.939 668.236,729.016 668.795,716.553 669.355,717.769 669.914,718.608 670.473,739.899 671.032,786.097 671.592,781.662 672.151,763.293 672.71,757.766 673.269,721.344 673.829,702.736 674.388,704.611 674.947,705.812 675.506,724.413 676.066,741.461 676.625,737.433 677.184,716.922 677.743,716.291 678.303,731.233 678.862,730.762 679.421,695.878 679.981,695.104 680.54,693.325 681.099,677.672 681.658,679.326 682.218,665.049 682.777,668.31 683.336,671.019 683.895,670.327 684.455,656.045 685.014,672.943 685.573,660.969 686.132,663.547 686.692,645.419 687.251,647.833 687.81,651.207 688.369,668.553 688.929,718.695 689.488,799.735 690.047,762.416 690.606,778.436 691.166,774.942 691.725,736.263 692.284,734.81 692.843,735.289 693.403,751.495 693.962,742.136 694.521,673.077 695.08,672.003 695.64,705.986 696.199,690.216 696.758,709.854 697.317,725.171 697.877,703.649 698.436,720.898 698.995,722.24 699.554,691.605 700.114,708.471 700.673,704.569 701.232,717.359 701.791,670.716 702.351,671.042 702.91,672.438 703.469,672.594 704.028,675.547 704.588,659.457 705.147,680.439 705.706,663.732 706.265,666.298 706.825,664.7 707.384,650.583 707.943,651.185 708.502,672.922 709.062,675.431 709.621,728.251 710.18,760.302 710.739,773.722 711.299,769.621 711.858,732.041 712.417,728.389 712.976,725.275 713.536,710.748 714.095,728.657 714.654,709.336 715.213,693.931 715.773,710.472 716.332,725.717 716.891,738.49 717.45,721.822 718.01,750.278 718.569,749.167 719.128,712.794 719.687,731.969 720.247,761.225 720.806,724.608 721.365,736.259 721.924,732.665 722.484,742.751 723.043,706.181 723.602,706.561 724.161,692.967 724.721,694.694 725.28,691.042 725.839,688.315 726.398,672.1 726.958,655.768 727.517,642.967 728.076,696.61 728.635,726.992 729.195,723.527 729.754,693.838 730.313,708.539 730.872,693.108 731.432,709.55 731.991,708.354 732.55,673.897 733.109,676.54 733.669,709.553 734.228,713.703 734.787,699.601 735.346,666.754 735.906,633.964 736.465,602.491 737.024,642.859 737.583,675.456 738.143,676.779 738.702,692.307 739.261,676.407 739.82,679.181 740.38,665.63 740.939,680.998 741.498,680.022 742.057,679.465 742.617,676.907 743.176,692.295 743.735,708.07 744.294,737.014 744.854,734.952 745.413,730.388 745.972,707.193 746.531,723.174 747.091,691.728 747.65,658.047 748.209,672.746 748.768,687.981 749.328,718.934 749.887,697.889 750.446,682.989 751.005,683.543 751.565,716.518 752.124,718.36 752.683,701.856 753.242,718.177 753.802,718.757 754.361,668.31 754.92,653.233 755.479,654.396 756.039,639.1 756.598,659.258 757.157,695.606 757.716,665.43 758.276,665.312 758.835,669.684 759.394,654.193 759.953,635.8 760.513,668.995 761.072,654.59 761.631,641.081 762.19,659.897 762.75,659.129 763.309,708.285 763.868,742.96 764.427,706.221 764.987,706.835 765.546,705.954 766.105,716.367 766.664,713.101 767.224,678.092 767.783,698.52 768.342,734.04 768.901,702.824 769.461,765.097 770.02,748.474 770.579,729.386 771.138,729.546 771.698,758.893 772.257,705.238 772.816,673.181 773.375,704.127 773.935,699.389 774.494,716.182 775.053,713.366 775.612,698.764 776.172,699.048 776.731,682.197 777.29,698.89 777.849,709.78 778.409,673.994 778.968,675.393 779.527,661.158 780.086,679.089 780.646,712.724 781.205,713.112 781.764,695.518 782.323,710.874 782.883,745.394 783.442,742.65 784.001,707.514 784.56,722.317 785.12,703.311 785.679,685.384 786.238,699.474 786.797,683.659 787.357,668.639 787.916,686.053 788.475,701.7 789.034,730.639 789.594,729.815 790.153,711.246 790.712,708.503 791.271,687.646 791.831,702.933 792.39,717.817 792.949,685.693 793.508,718.211 794.068,696.145 794.627,710.567 795.186,707.697 795.745,705.956 796.305,703.198 796.864,716.575 797.423,718.404 797.982,734.086 798.542,715.286 799.101,732.378 799.66,745.532 800.219,741.573 800.779,724.245 801.338,736.311 801.897,736.82 802.456,738.614 803.016,690.414 803.575,671.371 804.134,672.998 804.693,691.118 805.253,704.152 805.812,685.623 806.371,688.155 806.931,703.091 807.49,719.105 808.049,716.923 808.608,712.686 809.168,716.525 809.727,748.356 810.286,779.137 810.845,774.571 811.405,754.936 811.964,770.82 812.523,715.389 813.082,696.991 813.642,698.263 814.201,730.218 814.76,727.28 815.319,707.954 815.879,725.082 816.438,720.523 816.997,718.571 817.556,732.418 818.116,763.087 818.675,758.378 819.234,754.954 819.793,737.537 820.353,737.86 820.912,734.589 821.471,750.556 822.03,763.985 822.59,743.067 823.149,712.16 823.708,677.001 824.267,690.649 824.827,675.331 825.386,660.918 825.945,692.415 826.504,674.398 827.064,627.529 827.623,678.962 828.182,679.17 828.741,664.121 829.301,650.924 829.86,607.155 830.419,580.644 830.978,602.717 831.538,623.826 832.097,642.702 832.656,617.238 833.215,605.422 833.775,627.806 834.334,616.717 834.893,616.668 835.452,607.244 836.012,643.061 836.571,693.415 837.13,712.621 837.689,709.954 838.249,709.407 838.808,689.254 839.367,709.49 839.926,693.442 840.486,689.387 841.045,706.182 841.604,722.436 842.163,720.098 842.723,732.649 843.282,728.69 843.841,727.356 844.4,692.064 844.96,691.111 845.519,707.541 846.078,674.586 846.637,641.884 847.197,646.151 847.756,665.829 848.315,652.636 848.874,652.225 849.434,574.095 849.993,583.187 850.552,586.869 851.111,578.32 851.671,602.532 852.23,622.691 852.789,626.304 853.348,629.864 853.908,634.672 854.467,635.261 855.026,639.837 855.585,662.448 856.145,650.367 856.704,652.57 857.263,654.242 857.822,624.07 858.382,612.092 858.941,634.286 859.5,650.819 860.059,633.554 860.619,621.486 861.178,641.389 861.737,658.639 862.296,659.882 862.856,627.618 863.415,630.332 863.974,616.003 864.533,608.06 865.093,615.255 865.652,622.252 866.211,658.131 866.77,642.253 867.33,641.751 867.889,642.022 868.448,660.903 869.007,664.215 869.567,648.582 870.126,663.279 870.685,616.351 871.244,635.005 871.804,625.921 872.363,644.966 872.922,667.514 873.481,652.181 874.041,656.685 874.6,657.236 875.159,643.208 875.718,644.389 876.278,680.609 876.837,665.7 877.396,703.07 877.955,717.027 878.515,716.656 879.074,760.669 879.633,754.318 880.192,764.001 880.752,747.139 881.311,757.461 881.87,720.935 882.429,688.009 882.989,687.881 883.548,672.812 884.107,722.754 884.666,720.504 885.226,725.018 885.785,724.554 886.344,725.2 886.903,707.509 887.463,706.865 888.022,704.506 888.581,705.945 889.14,720.433 889.7,686.23 890.259,686.637 890.818,700.438 891.377,680.798 891.937,697.884 892.496,696.403 893.055,741.361 893.614,754.253 894.174,766.328 894.733,761.103 895.292,753.955 895.851,717.723 896.411,731.969 896.97,714.395 897.529,648.294 898.088,648.174 898.648,620.957 899.207,656.444 899.766,621.8 900.325,673.995 900.885,689.306 901.444,671.806 902.003,671.692 902.562,700.565 903.122,698.047 903.681,667.737 904.24,668.538 904.799,652.607 905.359,700.742 905.918,701.21 906.477,684.468 907.036,684.731 907.596,667.349 908.155,667.637 908.714,684.043 909.273,698.466 909.833,712.284 910.392,725.791 910.951,742.44 911.51,738.989 912.07,739.065 912.629,734.325 913.188,728.448 913.747,726.161 914.307,722.467 914.866,702.84 915.425,703.195 915.984,717.938 916.544,748.591 917.103,730.203 917.662,714.785 918.221,760.837 918.781,757.298 919.34,755.861 919.899,736.036 920.458,718.327 921.018,667.059 921.577,649.317 922.136,653.39 922.695,656.223 923.255,658.364 923.814,660.47 924.373,625.883 924.932,628.497 925.492,617.637 926.051,622.865 926.61,625.3 927.169,612.582 927.729,613.995 928.288,601.033 928.847,605.544 929.406,609.624 929.966,611.195 930.525,631.956 931.084,618.549 931.644,655.602 932.203,641.77 932.762,644.615 933.321,659.863 933.881,677.601 934.44,675.66 934.999,661.757 935.558,678.285 936.118,694.305 936.677,679.308 937.236,695.159 937.795,708.648 938.355,672.03 938.914,638.59 939.473,622.722 940.032,627.135 940.592,628.596 941.151,646.738 941.71,665.288 942.269,681.977 942.829,648.382 943.388,651.328 943.947,668.891 944.506,688.349 945.066,638.834 945.625,674.057 946.184,675.783 946.743,690.675 947.303,641.967 947.862,627.691 948.421,630.789 948.98,616.77 949.54,589.748 950.099,580.728 950.658,590.657 951.217,596.276 951.777,602.645 952.336,624.459 952.895,626.683 953.454,663.615 954.014,680.55 954.573,662.656 955.132,648.711 955.691,663.942 956.251,650.033 956.81,685.663 957.369,719.655 957.928,654.033 958.488,659.518 959.047,659.211 959.606,663.433 960.165,667.275 960.725,653 961.284,684.617 961.843,680.422 962.402,697.64 962.962,712.907 963.521,680.329 964.08,713.486 964.639,691.97 965.199,724.559 965.758,753.184 966.317,765.468 966.876,777.12 967.436,739.044 967.995,748.641 968.554,728.237 969.113,727.51 969.673,741.612 970.232,789.573 970.791,751.253 971.35,747.237 971.91,776.497 972.469,774.829 973.028,757.614 973.587,752.949 974.147,720.36 974.706,699.219 975.265,717.99 975.824,745.298 976.384,726.393 976.943,672.06 977.502,673.275 978.061,660.923 978.621,675.021 979.18,674.099 979.739,691.543 980.298,709.34 980.858,708.534 981.417,707.746 981.976,720.362 982.535,733.286 983.095,727.669 983.654,760.039 984.213,725.229 984.772,740.52 985.332,726.467 985.891,743.95 986.45,756.876 987.009,689.537 987.569,688.803 988.128,670.694 988.687,687.231 989.246,655.877 989.806,690.27 990.365,672.409 990.924,702.403 991.483,701.267 992.043,734.152 992.602,731.837 993.161,729.41 993.72,692.071 994.28,707.255 994.839,756.936 995.398,737.322 995.957,733.195 996.517,683.391 997.076,682.173 997.635,684.12 998.194,667.023 998.754,654.654 999.313,672.985 999.872,672.953 1000.43,690.88 1000.99,707.319 1001.55,661.114 1002.11,679.736 1002.67,663.504 1003.23,667.125 1003.79,683.15 1004.35,700.254 1004.91,683.583 1005.46,688.024 1006.02,690.105 1006.58,694.573 1007.14,694.028 1007.7,696.247 1008.26,726.244 1008.82,723.054 1009.38,704.322 1009.94,717.581 1010.5,750.323 1011.06,797.696 1011.62,795.697 1012.18,807.248 1012.73,819.351 1013.29,794.076 1013.85,787.868 1014.41,800.314 1014.97,763.286 1015.53,741.05 1016.09,769.409 1016.65,752.516 1017.21,752.496 1017.77,749.227 1018.33,715.851 1018.89,717.235 1019.45,730.582 1020.01,728.688 1020.56,792.685 1021.12,786.718 1021.68,809.88 1022.24,800.998 1022.8,761.216 1023.36,754.337 1023.92,715.407 1024.48,697.004 1025.04,761.683 1025.6,758.294 1026.16,802.651 1026.72,783.546 1027.28,809.982 1027.83,788.087 1028.39,798.721 1028.95,775.986 1029.51,724.023 1030.07,673.88 1030.63,643.61 1031.19,678.279 1031.75,693.384 1032.31,689.304 1032.87,691.622 1033.43,655.531 1033.99,673.212 1034.55,659.809 1035.1,662.012 1035.66,697.52 1036.22,697.034 1036.78,679.234 1037.34,646.362 1037.9,631.077 1038.46,681.996 1039.02,665.306 1039.58,618.655 1040.14,621.997 1040.7,625.262 1041.26,658.58 1041.82,643.489 1042.38,649.309 1042.93,635.243 1043.49,638.72 1044.05,655.862 1044.61,687.865 1045.17,689.312 1045.73,705.546 1046.29,672.627 1046.85,656.553 1047.41,673.522 1047.97,676.856 1048.53,681.323 1049.09,631.918 1049.65,695.352 1050.2,712.465 1050.76,709.442 1051.32,706.846 1051.88,707.258 1052.44,690.096 1053,705.327 1053.56,688.243 1054.12,642.651 1054.68,612.012 1055.24,645.214 1055.8,644.077 1056.36,660.861 1056.92,646.435 1057.48,647.5 1058.03,667.219 1058.59,665.842 1059.15,649.473 1059.71,650.275 1060.27,669.247 1060.83,670.426 1061.39,686.856 1061.95,702.01 1062.51,735.094 1063.07,718.167 1063.63,718.268 1064.19,681.879 1064.75,694.2 1065.3,741.647 1065.86,771.878 1066.42,783.178 1066.98,778.53 1067.54,771.435 1068.1,798.35 1068.66,809.213 1069.22,787.319 1069.78,795.352 1070.34,789.125 1070.9,778.144 1071.46,773.715 1072.02,735.492 1072.57,731.161 1073.13,761.74 1073.69,754.598 1074.25,749.123 1074.81,714.207 1075.37,694.355 1075.93,706.992 1076.49,686.857 1077.05,669.512 1077.61,669.005 1078.17,638.996 1078.73,623.847 1079.29,627.072 1079.85,609.767 1080.4,596.26 1080.96,602.662 1081.52,621.241 1082.08,623.685 1082.64,659.276 1083.2,648.356 1083.76,633.22 1084.32,685.823 1084.88,686.795 1085.44,685.577 1086,668.609 1086.56,702.157 1087.12,718.654 1087.67,714.686 1088.23,713.004 1088.79,679.621 1089.35,664.327 1089.91,666.589 1090.47,649.426 1091.03,636.018 1091.59,655.356 1092.15,657.226 1092.71,677.414 1093.27,681.406 1093.83,716.769 1094.39,713.058 1094.94,710.705 1095.5,677.221 1096.06,680.108 1096.62,696.841 1097.18,694.889 1097.74,693.497 1098.3,682.084 1098.86,680.939 1099.42,699.96 1099.98,718.068 1100.54,697.495 1101.1,664.977 1101.66,648.67 1102.22,651.841 1102.77,636.412 1103.33,590.527 1103.89,581.641 1104.45,603.572 1105.01,590.787 1105.57,580.523 1106.13,538.091 1106.69,574.727 1107.25,579.233 1107.81,568.831 1108.37,606.22 1108.93,593.257 1109.49,600.274 1110.04,588.872 1110.6,562.449 1111.16,585.438 1111.72,594.147 1112.28,613.359 1112.84,618.096 1113.4,638.526 1113.96,639.857 1114.52,657.928 1115.08,678.201 1115.64,663.421 1116.2,697.14 1116.76,698.767 1117.31,696.091 1117.87,697.969 1118.43,682.127 1118.99,666.607 1119.55,651.806 1120.11,639.494 1120.67,660.526 1121.23,680.274 1121.79,695.74 1122.35,696.843 1122.91,677.806 1123.47,680.84 1124.03,728.374 1124.59,710.858 1125.14,741.069 1125.7,706.766 1126.26,688.141 1126.82,688.513 1127.38,675.504 1127.94,677.478 1128.5,661.002 1129.06,677.007 1129.62,664.175 1130.18,634.481 1130.74,639.17 1131.3,639.488 1131.86,658.795 1132.41,690.472 1132.97,659.864 1133.53,615.08 1134.09,618.818 1134.65,639.137 1135.21,657.837 1135.77,642.417 1136.33,661.446 1136.89,646.806 1137.45,650.68 1138.01,650.663 1138.57,670.634 1139.13,689.261 1139.68,706.535 1140.24,720.672 1140.8,717.397 1141.36,698.835 1141.92,680.238 1142.48,697.155 1143.04,713.166 1143.6,695.004 1144.16,675.976 1144.72,690.232 1145.28,675.766 1145.84,706.055 1146.4,686.456 1146.96,670.103 1147.51,700 1148.07,715.111 1148.63,715.632 1149.19,696.011 1149.75,675.328 1150.31,658.948 1150.87,677.682 1151.43,691.692 1151.99,708.012 1152.55,687.81 1153.11,687.196 1153.67,687.019 1154.23,689.554 1154.78,689.991 1155.34,704.871 1155.9,672.376 1156.46,654.217 1157.02,623.071 1157.58,627.179 1158.14,630.625 1158.7,584.257 1159.26,560.362 1159.82,565.554 1160.38,573.839 1160.94,594.345 1161.5,596.387 1162.05,618.496 1162.61,622.08 1163.17,627.657 1163.73,613.801 1164.29,568.141 1164.85,579.702 1165.41,618.204 1165.97,638.065 1166.53,657.453 1167.09,672.751 1167.65,641.364 1168.21,656.427 1168.77,624.875 1169.33,647.299 1169.88,663.891 1170.44,683.682 1171,703.224 1171.56,687.001 1172.12,703.451 1172.68,697.33 1173.24,710.016 1173.8,691.629 1174.36,691.638 1174.92,737.361 1175.48,701.191 1176.04,683.115 1176.6,684.918 1177.15,700.211 1177.71,682.475 1178.27,748.11 1178.83,760.755 1179.39,737.942 1179.95,735.689 1180.51,746.567 1181.07,711.609 1181.63,710.55 1182.19,712.035 1182.75,744.228 1183.31,708.934 1183.87,724.094 1184.43,723.358 1184.98,708.326 1185.54,688.303 1186.1,638.702 1186.66,639.884 1187.22,643.312 1187.78,663.15 1188.34,650.381 1188.9,655.118 1189.46,639.575 1190.02,654.218 1190.58,636.665 1191.14,639.088 1191.7,656.392 1192.25,711.801 1192.81,710.959 1193.37,710.384 1193.93,709.373 1194.49,709.241 1195.05,706.46 1195.61,687.919 1196.17,703.96 1196.73,700.98 1197.29,683.762 1197.85,682.027 1198.41,715.337 1198.97,733.622 1199.52,744.829 1200.08,708.39 1200.64,676.45 1201.2,695.792 1201.76,712.925 1202.32,727 1202.88,739.983 1203.44,735.423 1204,699.315 1204.56,714.54 1205.12,729.126 1205.68,725.575 1206.24,723.37 1206.8,704.589 1207.35,688.932 1207.91,673.271 1208.47,642.285 1209.03,645.279 1209.59,631.875 1210.15,617.252 1210.71,622.392 1211.27,638.928 1211.83,642.705 1212.39,645.37 1212.95,615.334 1213.51,636.777 1214.07,641.162 1214.62,642.691 1215.18,644.9 1215.74,662.435 1216.3,666.41 1216.86,685.869 1217.42,688.605 1217.98,655.327 1218.54,657.825 1219.1,671.194 1219.66,675.696 1220.22,712.754 1220.78,710.923 1221.34,691.313 1221.89,693.773 1222.45,644.498 1223.01,661.453 1223.57,657.694 1224.13,658.442 1224.69,660.366 1225.25,627.215 1225.81,649.363 1226.37,633.722 1226.93,653.967 1227.49,640.553 1228.05,621.972 1228.61,672.422 1229.17,655.327 1229.72,658.067 1230.28,691.494 1230.84,694.687 1231.4,697.006 1231.96,694.286 1232.52,693.844 1233.08,695.632 1233.64,707.755 1234.2,706.41 1234.76,690.819 1235.32,660.595 1235.88,680.095 1236.44,707.95 1236.99,704.981 1237.55,719.421 1238.11,702.975 1238.67,671.927 1239.23,688.376 1239.79,671.206 1240.35,701.371 1240.91,731.558 1241.47,751.197 1242.03,733.637 1242.59,763.071 1243.15,758.472 1243.71,786.618 1244.26,800.15 1244.82,798.36 1245.38,793.041 1245.94,753.8 1246.5,753.141 1247.06,766.825 1247.62,781.055 1248.18,775.43 1248.74,789.822 1249.3,782.833 1249.86,778.841 1250.42,791.112 1250.98,782.258 1251.54,822.429 1252.09,831.519 1252.65,839.386 1253.21,814.87 1253.77,827.181 1254.33,802.075 1254.89,751.66 1255.45,731.988 1256.01,696.053 1256.57,724.449 1257.13,718.553 1257.69,733.884 1258.25,700.418 1258.81,685.411 1259.36,687.737 1259.92,706.945 1260.48,724.473 1261.04,705.871 1261.6,688.26 1262.16,658.713 1262.72,624.824 1263.28,661.626 1263.84,642.112 1264.4,630.584 1264.96,632.65 1265.52,636.554 1266.08,622.871 1266.63,610.905 1267.19,629.738 1267.75,613.496 1268.31,618.333 1268.87,570.121 1269.43,557.888 1269.99,550.287 1270.55,556.497 1271.11,564.331 1271.67,568.649 1272.23,595.148 1272.79,630.151 1273.35,634.739 1273.91,631.604 1274.46,647.923 1275.02,652.334 1275.58,639.808 1276.14,643.789 1276.7,662.166 1277.26,681.138 1277.82,697.436 1278.38,727.932 1278.94,725.776 1279.5,691.19 1280.06,688.041 1280.62,672.249 1281.18,691.155 1281.73,707.257 1282.29,738.356 1282.85,734.314 1283.41,750.474 1283.97,763.756 1284.53,791.754 1285.09,750.08 1285.65,702.363 1286.21,700.565 1286.77,695.465 1287.33,678.61 1287.89,677.724 1288.45,675.657 1289,673.409 1289.56,672.689 1290.12,737.397 1290.68,750.251 1291.24,762.543 1291.8,743.661 1292.36,739.657 1292.92,720.095 1293.48,731.753 1294.04,729.037 1294.6,726.539 1295.16,708.728 1295.72,673.313 1296.28,673.735 1296.83,673.934 1297.39,705.788 1297.95,677.942 1298.51,695.883 1299.07,709.372 1299.63,707.883 1300.19,721.508 1300.75,717.911 1301.31,715.18 1301.87,745.637 1302.43,758.079 1302.99,749.677 1303.55,727.502 1304.1,691.17 1304.66,672.483 1305.22,656.259 1305.78,691.957 1306.34,723.635 1306.9,709.393 1307.46,723.343 1308.02,704.456 1308.58,670.689 1309.14,638.903 1309.7,657.539 1310.26,675.314 1310.82,675.362 1311.38,664.287 1311.93,679.995 1312.49,677.84 1313.05,645.09 1313.61,630.146 1314.17,648.305 1314.73,686.05 1315.29,689.268 1315.85,690.673 1316.41,723.766 1316.97,740.974 1317.53,722.469 1318.09,707.379 1318.65,708.416 1319.2,708.261 1319.76,708.493 1320.32,706.549 1320.88,703.833 1321.44,719.359 1322,699.688 1322.56,710.99 1323.12,739.439 1323.68,754.022 1324.24,764.994 1324.8,757.556 1325.36,719.867 1325.92,719.866 1326.47,721.158 1327.03,753.061 1327.59,785.376 1328.15,797.181 1328.71,834.907 1329.27,796.257 1329.83,761.21 1330.39,742.566 1330.95,709.497 1331.51,724.881 1332.07,723.62 1332.63,737.224 1333.19,748.09 1333.75,726.922 1334.3,727.686 1334.86,757.046 1335.42,767.017 1335.98,775.127 1336.54,735.532 1337.1,683.207 1337.66,697.001 1338.22,712.69 1338.78,678.282 1339.34,681.73 1339.9,699.157 1340.46,699.23 1341.02,711.24 1341.57,678.75 1342.13,648.306 1342.69,647.643 1343.25,633.545 1343.81,653.12 1344.37,638.187 1344.93,625.04 1345.49,609.284 1346.05,645.769 1346.61,660.838 1347.17,614.942 1347.73,596.762 1348.29,632.027 1348.84,634.282 1349.4,604.27 1349.96,608.793 1350.52,581.746 1351.08,588.244 1351.64,626.878 1352.2,645.168 1352.76,630.16 1353.32,634.263 1353.88,617.425 1354.44,635.769 1355,655.454 1355.56,642.903 1356.12,614.811 1356.67,571.786 1357.23,579.158 1357.79,587.76 1358.35,590.568 1358.91,625.658 1359.47,614.546 1360.03,585.338 1360.59,607.002 1361.15,625.018 1361.71,642.752 1362.27,659.151 1362.83,660.675 1363.39,675.705 1363.94,658.043 1364.5,689.733 1365.06,671.449 1365.62,671.157 1366.18,671.862 1366.74,671.707 1367.3,688.232 1367.86,684.215 1368.42,667.579 1368.98,651.876 1369.54,685.207 1370.1,721.003 1370.66,718.991 1371.21,714.681 1371.77,695.615 1372.33,715.361 1372.89,667.039 1373.45,667.495 1374.01,698.29 1374.57,699.328 1375.13,713.292 1375.69,712.211 1376.25,693.779 1376.81,695.198 1377.37,713.737 1377.93,725.764 1378.49,723.182 1379.04,689.256 1379.6,657.126 1380.16,658.937 1380.72,677.432 1381.28,710.194 1381.84,723.88 1382.4,686.254 1382.96,720.315 1383.52,752.364 1384.08,732.796 1384.64,732.937 1385.2,715.116 1385.76,680.649 1386.31,645.697 1386.87,648.742 1387.43,634.766 1387.99,620.519 1388.55,654.187 1389.11,672.991 1389.67,705.736 1390.23,717.999 1390.79,732.923 1391.35,729.797 1391.91,725.075 1392.47,711.033 1393.03,693.758 1393.58,692.402 1394.14,676.416 1394.7,675.95 1395.26,641.205 1395.82,659.702 1396.38,674.767 1396.94,678.291 1397.5,695.115 1398.06,697.354 1398.62,714.09 1399.18,727.082 1399.74,707.852 1400.3,719.829 1400.86,685.969 1401.41,701.396 1401.97,649.888 1402.53,619.537 1403.09,641.824 1403.65,641.4 1404.21,677.835 1404.77,661.922 1405.33,648.361 1405.89,683.05 1406.45,671.312 1407.01,673.601 1407.57,652.071 1408.13,622.22 1408.68,621.89 1409.24,655.158 1409.8,657.996 1410.36,659.89 1410.92,657.92 1411.48,662.242 1412.04,696.136 1412.6,698.375 1413.16,694.687 1413.72,696.398 1414.28,694.383 1414.84,693.142 1415.4,740.966 1415.95,738.539 1416.51,751.837 1417.07,713.925 1417.63,678.876 1418.19,682.934 1418.75,680.854 1419.31,666.213 1419.87,635.312 1420.43,686.422 1420.99,716.698 1421.55,733.045 1422.11,682.406 1422.67,713.203 1423.23,710.26 1423.78,738.704 1424.34,735.432 1424.9,733.181 1425.46,693.933 1426.02,696.842 1426.58,678.809 1427.14,663.511 1427.7,634.708 1428.26,700.398 1428.82,685.112 1429.38,651.701 1429.94,688.455 1430.5,716.609 1431.05,730.231 1431.61,710.19 1432.17,688.871 1432.73,705.798 1433.29,707.639 1433.85,708.296 1434.41,707.041 1434.97,675.587 1435.53,693.075 1436.09,676.619 1436.65,661.123 1437.21,692.425 1437.77,708.15 1438.33,721.254 1438.88,735.428 1439.44,797.59 1440,791.747 1440.56,804.169 1441.12,782.685 1441.68,794.76 1442.24,789.388 1442.8,784.474 1443.36,761.938 1443.92,741.588 1444.48,724.061 1445.04,720.232 1445.6,689.535 1446.15,691.789 1446.71,695.143 1447.27,663.568 1447.83,666.807 1448.39,682.769 1448.95,666.878 1449.51,649.467 1450.07,632.007 1450.63,650.273 1451.19,635.208 1451.75,636.297 1452.31,636.252 1452.87,622.666 1453.42,655.94 1453.98,639.214 1454.54,644.423 1455.1,662.185 1455.66,660.52 1456.22,662.631 1456.78,677.724 1457.34,727.346 1457.9,712.645 1458.46,699.196 1459.02,681.253 1459.58,678.231 1460.14,648.036 1460.7,631.427 1461.25,618.761 1461.81,588.312 1462.37,595.02 1462.93,613.555 1463.49,631.3 1464.05,617.717 1464.61,637.683 1465.17,624.134 1465.73,593.616 1466.29,600.27 1466.85,572.934 1467.41,594.632 1467.97,603.084 1468.52,625.242 1469.08,644.669 1469.64,634.617 1470.2,623.054 1470.76,614.776 1471.32,615.396 1471.88,621.836 1472.44,593.041 1473,613.073 1473.56,598.776 1474.12,586.671 1474.68,607.222 1475.24,593.058 1475.79,597.6 1476.35,588.952 1476.91,597.46 1477.47,617.162 1478.03,626.071 1478.59,615.131 1479.15,619.163 1479.71,626.014 1480.27,630.406 1480.83,662.908 1481.39,714.287 1481.95,699.197 1482.51,701.225 1483.07,700.202 1483.62,699.024 1484.18,700.127 1484.74,681.645 1485.3,718.802 1485.86,714.087 1486.42,713.142 1486.98,711.142 1487.54,714.357 1488.1,760.678 1488.66,722.901 1489.22,707.367 1489.78,706.559 1490.34,738.349 1490.89,782.13 1491.45,761.072 1492.01,789.538 1492.57,770.567 1493.13,781.119 1493.69,746.851 1494.25,790.587 1494.81,750.672 1495.37,746.316 1495.93,774.13 1496.49,785.707 1497.05,780.626 1497.61,759.408 1498.16,752.657 1498.72,764.708 1499.28,759.052 1499.84,773.713 1500.4,734.875 1500.96,698.809 1501.52,662.738 1502.08,664.647 1502.64,619.224 1503.2,635.627 1503.76,637.837 1504.32,640.938 1504.88,660.956 1505.44,664.129 1505.99,648.368 1506.55,618.535 1507.11,589.279 1507.67,614.887 1508.23,619.482 1508.79,620.811 1509.35,607.009 1509.91,641.677 1510.47,659.957 1511.03,661.788 1511.59,662.759 1512.15,665.45 1512.71,666.15 1513.26,715.766 1513.82,711.015 1514.38,723.583 1514.94,689.128 1515.5,687.948 1516.06,673.875 1516.62,694.254 1517.18,681.285 1517.74,686.706 1518.3,700.602 1518.86,651.106 1519.42,656.353 1519.98,675.442 1520.53,644.299 1521.09,648.869 1521.65,668.155 1522.21,670.465 1522.77,658.595 1523.33,658.559 1523.89,643.964 1524.45,647.363 1525.01,636.564 1525.57,669.036 1526.13,635.513 1526.69,639.451 1527.25,688.374 1527.81,705.121 1528.36,740.563 1528.92,717.406 1529.48,733.155 1530.04,714.516 1530.6,727.744 1531.16,691.31 1531.72,727.695 1532.28,722.422 1532.84,735.42 1533.4,744.032 1533.96,725.364 1534.52,722.599 1535.08,721.116 1535.63,703.511 1536.19,670.709 1536.75,688.755 1537.31,719.781 1537.87,718.063 1538.43,698.966 1538.99,665.775 1539.55,685.157 1540.11,717.728 1540.67,714.487 1541.23,713.263 1541.79,724.263 1542.35,738.253 1542.9,752.273 1543.46,761.536 1544.02,728.784 1544.58,711.507 1545.14,677.092 1545.7,645.112 1546.26,659.814 1546.82,689.84 1547.38,734.913 1547.94,797.845 1548.5,792.619 1549.06,754.709 1549.62,734.684 1550.18,718.463 1550.73,715.819 1551.29,765.377 1551.85,728.922 1552.41,711.053 1552.97,762.244 1553.53,744.225 1554.09,741.284 1554.65,755.846 1555.21,717.583 1555.77,710.945 1556.33,710.437 1556.89,707.472 1557.45,704.976 1558,704.74 1558.56,705.033 1559.12,766.321 1559.68,727.917 1560.24,722.136 1560.8,717.121 1561.36,730.503 1561.92,757.688 1562.48,801.216 1563.04,780.545 1563.6,710.628 1564.16,722.91 1564.72,785.45 1565.28,778.599 1565.83,741.48 1566.39,768.031 1566.95,745.425 1567.51,740.33 1568.07,754.663 1568.63,736.293 1569.19,732.505 1569.75,727.474 1570.31,724.783 1570.87,724.71 1571.43,754.935 1571.99,753.451 1572.55,814.689 1573.1,825.541 1573.66,816.914 1574.22,805.762 1574.78,780.727 1575.34,746.643 1575.9,757.244 1576.46,756.092 1577.02,754.195 1577.58,720.082 1578.14,666.321 1578.7,680.851 1579.26,682.312 1579.82,696.431 1580.37,696.743 1580.93,680.939 1581.49,696.142 1582.05,694.65 1582.61,674.042 1583.17,640.668 1583.73,629.357 1584.29,634.842 1584.85,672.351 1585.41,669.175 1585.97,665.617 1586.53,666.368 1587.09,664.427 1587.65,648.576 1588.2,648.772 1588.76,650.277 1589.32,636.721 1589.88,637.234 1590.44,655.444 1591,641.197 1591.56,608.624 1592.12,598.069 1592.68,570.46 1593.24,608.21 1593.8,561.898 1594.36,532.717 1594.92,557.44 1595.47,566.344 1596.03,622.662 1596.59,576.502 1597.15,597.194 1597.71,586.882 1598.27,592.708 1598.83,594.977 1599.39,617.026 1599.95,590.717 1600.51,582.926 1601.07,622.178 1601.63,609.059 1602.19,615.502 1602.74,620.378 1603.3,602.43 1603.86,622.006 1604.42,606.166 1604.98,642.247 1605.54,646.341 1606.1,649.267 1606.66,650.253 1607.22,635.128 1607.78,651.682 1608.34,686.765 1608.9,687.257 1609.46,719.939 1610.02,717.604 1610.57,713.435 1611.13,711.924 1611.69,663.948 1612.25,664.808 1612.81,664.887 1613.37,698.981 1613.93,699.133 1614.49,682.419 1615.05,682.26 1615.61,665.846 1616.17,666.122 1616.73,651.588 1617.29,653.478 1617.84,719.048 1618.4,717.887 1618.96,719.416 1619.52,720.001 1620.08,719.038 1620.64,745.646 1621.2,710.778 1621.76,663.594 1622.32,668.53 1622.88,671.024 1623.44,670.756 1624,701.262 1624.56,699.998 1625.11,714.086 1625.67,712.928 1626.23,722.64 1626.79,683.759 1627.35,669.44 1627.91,701.361 1628.47,686.2 1629.03,686.483 1629.59,719.028 1630.15,686.125 1630.71,704.639 1631.27,718.47 1631.83,718.086 1632.39,714.953 1632.94,697.121 1633.5,701.084 1634.06,715.73 1634.62,747.968 1635.18,745.322 1635.74,710.909 1636.3,758.747 1636.86,724.363 1637.42,723.617 1637.98,706.21 1638.54,655.395 1639.1,672.758 1639.66,672.27 1640.21,660.811 1640.77,662.001 1641.33,664.224 1641.89,647.416 1642.45,647.846 1643.01,667.473 1643.57,698.249 1644.13,680.693 1644.69,679.816 1645.25,679.626 1645.81,696.735 1646.37,679.808 1646.93,677.062 1647.48,678.767 1648.04,663.521 1648.6,648.705 1649.16,663.462 1649.72,633.334 1650.28,652.959 1650.84,636.366 1651.4,637.732 1651.96,658.446 1652.52,674.832 1653.08,660.051 1653.64,660.757 1654.2,667.445 1654.76,683.081 1655.31,667.908 1655.87,651.662 1656.43,667.412 1656.99,669.845 1657.55,684.232 1658.11,682.503 1658.67,667.13 1659.23,682.549 1659.79,666.435 1660.35,679.393 1660.91,696.603 1661.47,742.701 1662.03,741.106 1662.58,687.542 1663.14,670.846 1663.7,668.764 1664.26,682.342 1664.82,718.372 1665.38,683.434 1665.94,715.208 1666.5,715.948 1667.06,697.761 1667.62,712.371 1668.18,727.832 1668.74,693.958 1669.3,693.449 1669.85,676.953 1670.41,644.777 1670.97,676.109 1671.53,676.56 1672.09,704.922 1672.65,704.047 1673.21,687.954 1673.77,705.091 1674.33,685.944 1674.89,699.744 1675.45,696.929 1676.01,713.142 1676.57,696.379 1677.13,696.47 1677.68,695.183 1678.24,691.976 1678.8,643.497 1679.36,662.524 1679.92,663.05 1680.48,662.136 1681.04,646.16 1681.6,650.509 1682.16,599.515 1682.72,601.703 1683.28,560.396 1683.84,551.609 1684.4,589.921 1684.95,593.79 1685.51,598.216 1686.07,631.876 1686.63,665.284 1687.19,695.854 1687.75,665.637 1688.31,652.796 1688.87,669.078 1689.43,671.769 1689.99,672.784 1690.55,677.214 1691.11,678.757 1691.67,685.71 1692.23,705.632 1692.78,721.186 1693.34,732.743 1693.9,726.868 1694.46,711.535 1695.02,755.271 1695.58,753.549 1696.14,765.228 1696.7,745.715 1697.26,728.531 1697.82,709.836 1698.38,711.24 1698.94,690.993 1699.5,691.44 1700.05,655.976 1700.61,656.678 1701.17,674.629 1701.73,674.201 1702.29,643.666 1702.85,664.954 1703.41,669.052 1703.97,700.352 1704.53,720.169 1705.09,723.316 1705.65,722.324 1706.21,720.25 1706.77,755.289 1707.32,769.43 1707.88,780.147 1708.44,756.293 1709,750.388 1709.56,750.479 1710.12,700.47 1710.68,700.288 1711.24,686.659 1711.8,670.152 1712.36,706.711 1712.92,722.187 1713.48,768.627 1714.04,780.393 1714.6,787.559 1715.15,794.726 1715.71,781.089 1716.27,778.646 1716.83,722.328 1717.39,732.128 1717.95,745.651 1718.51,724.529 1719.07,738.283 1719.63,754.479 1720.19,784.96 1720.75,811.254 1721.31,805.316 1721.87,769.433 1722.42,747.701 1722.98,746.6 1723.54,743.025 1724.1,739.468 1724.66,816.254 1725.22,792.592 1725.78,787.899 1726.34,781.957 1726.9,789.547 1727.46,750.893 1728.02,735.522 1728.58,731.224 1729.14,711.015 1729.69,709.321 1730.25,726.593 1730.81,741.486 1731.37,738.599 1731.93,767.064 1732.49,764.906 1733.05,776.185 1733.61,753.374 1734.17,764.402 1734.73,747.132 1735.29,756.407 1735.85,739.132 1736.41,702.866 1736.97,735.414 1737.52,712.447 1738.08,663.8 1738.64,645.35 1739.2,664.249 1739.76,663.04 1740.32,630.363 1740.88,602.099 1741.44,572.556 1742,613.732 1742.56,602.335 1743.12,640.787 1743.68,622.683 1744.24,641.651 1744.79,595.646 1745.35,582.597 1745.91,589.476 1746.47,593.536 1747.03,583.815 1747.59,534.996 1748.15,543.943 1748.71,552.346 1749.27,559.876 1749.83,565.233 1750.39,586.149 1750.95,579.563 1751.51,585.118 1752.06,604.24 1752.62,608.804 1753.18,609.82 1753.74,628.128 1754.3,613.561 1754.86,648.319 1755.42,649.211 1755.98,654.384 1756.54,623.872 1757.1,629.036 1757.66,632.6 1758.22,635.044 1758.78,656.772 1759.34,640.245 1759.89,642.449 1760.45,662.624 1761.01,699.585 1761.57,712.507 1762.13,726.134 1762.69,726.798 1763.25,726.489 1763.81,727.293 1764.37,711.584 1764.93,747.31 1765.49,747.89 1766.05,728.006 1766.61,697.828 1767.16,714.138 1767.72,711.391 1768.28,661.393 1768.84,646.645 1769.4,650.509 1769.96,635.933 1770.52,620.368 1771.08,592.945 1771.64,616.23 1772.2,649.786 1772.76,655 1773.32,622.063 1773.88,625.702 1774.43,626.247 1774.99,615.987 1775.55,585.54 1776.11,593.439 1776.67,596.2 1777.23,617.371 1777.79,617.384 1778.35,604.459 1778.91,606.878 1779.47,644.232 1780.03,662.544 1780.59,696.652 1781.15,726.357 1781.71,726.975 1782.26,744.886 1782.82,760.373 1783.38,775.075 1783.94,783.48 1784.5,790.406 1785.06,821.258 1785.62,834.257 1786.18,793.513 1786.74,787.866 1787.3,797.731 1787.86,776.081 1788.42,769.508 1788.98,798.212 1789.53,763.711 1790.09,697.081 1790.65,663.122 1791.21,680.6 1791.77,700.291 1792.33,683.259 1792.89,666.462 1793.45,653.906 1794.01,672.181 1794.57,703.868 1795.13,739.3 1795.69,720.782 1796.25,739.867 1796.8,765.787 1797.36,811.279 1797.92,802.84 1798.48,794.932 1799.04,821.239 1799.6,827.187 1800.16,787.396 1800.72,796.745 1801.28,759.799 1801.84,771.142 1802.4,785.046 1802.96,781.661 1803.52,806.103 1804.08,813.915 1804.63,791.274 1805.19,753.8 1805.75,750.932 1806.31,764.867 1806.87,762.688 1807.43,739.368 1807.99,687.326 1808.55,735.574 1809.11,699.363 1809.67,680.954 1810.23,634.333 1810.79,635.612 1811.35,638.021 1811.9,658.445 1812.46,640.475 1813.02,660.476 1813.58,627.28 1814.14,645.385 1814.7,649.479 1815.26,716.085 1815.82,726.808 1816.38,720.494 1816.94,748.566 1817.5,741.417 1818.06,737.761 1818.62,716.137 1819.18,701.025 1819.73,684.773 1820.29,699.318 1820.85,719.772 1821.41,731.774 1821.97,697.991 1822.53,695.504 1823.09,661.896 1823.65,646.872 1824.21,649.452 1824.77,634.492 1825.33,683.78 1825.89,716.644 1826.45,699.423 1827,715.201 1827.56,711.572 1828.12,712.271 1828.68,693.1 1829.24,657.712 1829.8,691.667 1830.36,709.527 1830.92,708.559 1831.48,639.998 1832.04,642.177 1832.6,596.775 1833.16,585.595 1833.72,643.911 1834.27,647.91 1834.83,666.957 1835.39,654.727 1835.95,640.84 1836.51,627.967 1837.07,644.691 1837.63,662.33 1838.19,663.401 \"/>\n<path clip-path=\"url(#clip003)\" d=\"M720.247 692.499 L720.806 692.499 L721.365 692.499 L721.924 692.499 L722.484 692.499 L723.043 692.499 L723.602 692.499 L724.161 692.499 L724.721 692.499 L725.28 692.499 L725.839 692.499 L726.398 692.499 L726.958 692.499 L727.517 692.499 L728.076 692.499 L728.635 692.499 L729.195 692.499 L729.754 692.499 L730.313 692.499 L730.872 692.499 L731.432 692.499 L731.991 692.499 L732.55 692.499 L733.109 692.499 L733.669 692.499 L734.228 692.499 L734.787 692.499 L735.346 692.499 L735.906 692.499 L736.465 692.499 L737.024 692.499 L737.583 692.499 L738.143 692.499 L738.702 692.499 L739.261 692.499 L739.82 692.499 L740.38 692.499 L740.939 692.499 L741.498 692.499 L742.057 692.499 L742.617 692.499 L743.176 692.499 L743.735 692.499 L744.294 692.499 L744.854 692.499 L745.413 692.499 L745.972 692.499 L746.531 692.499 L747.091 692.499 L747.65 692.499 L748.209 692.499 L748.768 692.499 L749.328 692.499 L749.887 692.499 L750.446 692.499 L751.005 692.499 L751.565 692.499 L752.124 692.499 L752.683 692.499 L753.242 692.499 L753.802 692.499 L754.361 692.499 L754.92 692.499 L755.479 692.499 L756.039 692.499 L756.598 692.499 L757.157 692.499 L757.716 692.499 L758.276 692.499 L758.835 692.499 L759.394 692.499 L759.953 692.499 L760.513 692.499 L761.072 692.499 L761.631 692.499 L762.19 692.499 L762.75 692.499 L763.309 692.499 L763.868 692.499 L764.427 692.499 L764.987 692.499 L765.546 692.499 L766.105 692.499 L766.664 692.499 L767.224 692.499 L767.783 692.499 L768.342 692.499 L768.901 692.499 L769.461 692.499 L770.02 692.499 L770.579 692.499 L771.138 692.499 L771.698 692.499 L772.257 692.499 L772.816 692.499 L773.375 692.499 L773.935 692.499 L774.494 692.499 L775.053 692.499 L775.612 692.499 L776.172 692.499 L776.731 692.499 L777.29 692.499 L777.849 692.499 L778.409 692.499 L778.968 692.499 L779.527 692.499 L780.086 692.499 L780.646 692.499 L781.205 692.499 L781.764 692.499 L782.323 692.499 L782.883 692.499 L783.442 692.499 L784.001 692.499 L784.56 692.499 L785.12 692.499 L785.679 692.499 L786.238 692.499 L786.797 692.499 L787.357 692.499 L787.916 692.499 L788.475 692.499 L789.034 692.499 L789.594 692.499 L790.153 692.499 L790.712 692.499 L791.271 692.499 L791.831 692.499 L792.39 692.499 L792.949 692.499 L793.508 692.499 L794.068 692.499 L794.627 692.499 L795.186 692.499 L795.745 692.499 L796.305 692.499 L796.864 692.499 L797.423 692.499 L797.982 692.499 L798.542 692.499 L799.101 692.499 L799.66 692.499 L800.219 692.499 L800.779 692.499 L801.338 692.499 L801.897 692.499 L802.456 692.499 L803.016 692.499 L803.575 692.499 L804.134 692.499 L804.693 692.499 L805.253 692.499 L805.812 692.499 L806.371 692.499 L806.931 692.499 L807.49 692.499 L808.049 692.499 L808.608 692.499 L809.168 692.499 L809.727 692.499 L810.286 692.499 L810.845 692.499 L811.405 692.499 L811.964 692.499 L812.523 692.499 L813.082 692.499 L813.642 692.499 L814.201 692.499 L814.76 692.499 L815.319 692.499 L815.879 692.499 L816.438 692.499 L816.997 692.499 L817.556 692.499 L818.116 692.499 L818.675 692.499 L819.234 692.499 L819.793 692.499 L820.353 692.499 L820.912 692.499 L821.471 692.499 L822.03 692.499 L822.59 692.499 L823.149 692.499 L823.708 692.499 L824.267 692.499 L824.827 692.499 L825.386 692.499 L825.945 692.499 L826.504 692.499 L827.064 692.499 L827.623 692.499 L828.182 692.499 L828.741 692.499 L829.301 692.499 L829.86 692.499 L830.419 692.499 L830.978 692.499 L831.538 692.499 L832.097 692.499 L832.656 692.499 L833.215 692.499 L833.775 692.499 L834.334 692.499 L834.893 692.499 L835.452 692.499 L836.012 692.499 L836.571 692.499 L837.13 692.499 L837.689 692.499 L838.249 692.499 L838.808 692.499 L839.367 692.499 L839.926 692.499 L840.486 692.499 L841.045 692.499 L841.604 692.499 L842.163 692.499 L842.723 692.499 L843.282 692.499 L843.841 692.499 L844.4 692.499 L844.96 692.499 L845.519 692.499 L846.078 692.499 L846.637 692.499 L847.197 692.499 L847.756 692.499 L848.315 692.499 L848.874 692.499 L849.434 692.499 L849.993 692.499 L850.552 692.499 L851.111 692.499 L851.671 692.499 L852.23 692.499 L852.789 692.499 L853.348 692.499 L853.908 692.499 L854.467 692.499 L855.026 692.499 L855.585 692.499 L856.145 692.499 L856.704 692.499 L857.263 692.499 L857.822 692.499 L858.382 692.499 L858.941 692.499 L859.5 692.499 L860.059 692.499 L860.619 692.499 L861.178 692.499 L861.737 692.499 L862.296 692.499 L862.856 692.499 L863.415 692.499 L863.974 692.499 L864.533 692.499 L865.093 692.499 L865.652 692.499 L866.211 692.499 L866.77 692.499 L867.33 692.499 L867.889 692.499 L868.448 692.499 L869.007 692.499 L869.567 692.499 L870.126 692.499 L870.685 692.499 L871.244 692.499 L871.804 692.499 L872.363 692.499 L872.922 692.499 L873.481 692.499 L874.041 692.499 L874.6 692.499 L875.159 692.499 L875.718 692.499 L876.278 692.499 L876.837 692.499 L877.396 692.499 L877.955 692.499 L878.515 692.499 L879.074 692.499 L879.633 692.499 L880.192 692.499 L880.752 692.499 L881.311 692.499 L881.87 692.499 L882.429 692.499 L882.989 692.499 L883.548 692.499 L884.107 692.499 L884.666 692.499 L885.226 692.499 L885.785 692.499 L886.344 692.499 L886.903 692.499 L887.463 692.499 L888.022 692.499 L888.581 692.499 L889.14 692.499 L889.7 692.499 L890.259 692.499 L890.818 692.499 L891.377 692.499 L891.937 692.499 L892.496 692.499 L893.055 692.499 L893.614 692.499 L894.174 692.499 L894.733 692.499 L895.292 692.499 L895.851 692.499 L896.411 692.499 L896.97 692.499 L897.529 692.499 L898.088 692.499 L898.648 692.499 L899.207 692.499 L899.766 692.499 L900.325 692.499 L900.885 692.499 L901.444 692.499 L902.003 692.499 L902.562 692.499 L903.122 692.499 L903.681 692.499 L904.24 692.499 L904.799 692.499 L905.359 692.499 L905.918 692.499 L906.477 692.499 L907.036 692.499 L907.596 692.499 L908.155 692.499 L908.714 692.499 L909.273 692.499 L909.833 692.499 L910.392 692.499 L910.951 692.499 L911.51 692.499 L912.07 692.499 L912.629 692.499 L913.188 692.499 L913.747 692.499 L914.307 692.499 L914.866 692.499 L915.425 692.499 L915.984 692.499 L916.544 692.499 L917.103 692.499 L917.662 692.499 L918.221 692.499 L918.781 692.499 L919.34 692.499 L919.899 692.499 L920.458 692.499 L921.018 692.499 L921.577 692.499 L922.136 692.499 L922.695 692.499 L923.255 692.499 L923.814 692.499 L924.373 692.499 L924.932 692.499 L925.492 692.499 L926.051 692.499 L926.61 692.499 L927.169 692.499 L927.729 692.499 L928.288 692.499 L928.847 692.499 L929.406 692.499 L929.966 692.499 L930.525 692.499 L931.084 692.499 L931.644 692.499 L932.203 692.499 L932.762 692.499 L933.321 692.499 L933.881 692.499 L934.44 692.499 L934.999 692.499 L935.558 692.499 L936.118 692.499 L936.677 692.499 L937.236 692.499 L937.795 692.499 L938.355 692.499 L938.914 692.499 L939.473 692.499 L940.032 692.499 L940.592 692.499 L941.151 692.499 L941.71 692.499 L942.269 692.499 L942.829 692.499 L943.388 692.499 L943.947 692.499 L944.506 692.499 L945.066 692.499 L945.625 692.499 L946.184 692.499 L946.743 692.499 L947.303 692.499 L947.862 692.499 L948.421 692.499 L948.98 692.499 L949.54 692.499 L950.099 692.499 L950.658 692.499 L951.217 692.499 L951.777 692.499 L952.336 692.499 L952.895 692.499 L953.454 692.499 L954.014 692.499 L954.573 692.499 L955.132 692.499 L955.691 692.499 L956.251 692.499 L956.81 692.499 L957.369 692.499 L957.928 692.499 L958.488 692.499 L959.047 692.499 L959.606 692.499 L960.165 692.499 L960.725 692.499 L961.284 692.499 L961.843 692.499 L962.402 692.499 L962.962 692.499 L963.521 692.499 L964.08 692.499 L964.639 692.499 L965.199 692.499 L965.758 692.499 L966.317 692.499 L966.876 692.499 L967.436 692.499 L967.995 692.499 L968.554 692.499 L969.113 692.499 L969.673 692.499 L970.232 692.499 L970.791 692.499 L971.35 692.499 L971.91 692.499 L972.469 692.499 L973.028 692.499 L973.587 692.499 L974.147 692.499 L974.706 692.499 L975.265 692.499 L975.824 692.499 L976.384 692.499 L976.943 692.499 L977.502 692.499 L978.061 692.499 L978.621 692.499 L979.18 692.499 L979.739 692.499 L980.298 692.499 L980.858 692.499 L981.417 692.499 L981.976 692.499 L982.535 692.499 L983.095 692.499 L983.654 692.499 L984.213 692.499 L984.772 692.499 L985.332 692.499 L985.891 692.499 L986.45 692.499 L987.009 692.499 L987.569 692.499 L988.128 692.499 L988.687 692.499 L989.246 692.499 L989.806 692.499 L990.365 692.499 L990.924 692.499 L991.483 692.499 L992.043 692.499 L992.602 692.499 L993.161 692.499 L993.72 692.499 L994.28 692.499 L994.839 692.499 L995.398 692.499 L995.957 692.499 L996.517 692.499 L997.076 692.499 L997.635 692.499 L998.194 692.499 L998.754 692.499 L999.313 692.499 L999.872 692.499 L1000.43 692.499 L1000.99 692.499 L1001.55 692.499 L1002.11 692.499 L1002.67 692.499 L1003.23 692.499 L1003.79 692.499 L1004.35 692.499 L1004.91 692.499 L1005.46 692.499 L1006.02 692.499 L1006.58 692.499 L1007.14 692.499 L1007.7 692.499 L1008.26 692.499 L1008.82 692.499 L1009.38 692.499 L1009.94 692.499 L1010.5 692.499 L1011.06 692.499 L1011.62 692.499 L1012.18 692.499 L1012.73 692.499 L1013.29 692.499 L1013.85 692.499 L1014.41 692.499 L1014.97 692.499 L1015.53 692.499 L1016.09 692.499 L1016.65 692.499 L1017.21 692.499 L1017.77 692.499 L1018.33 692.499 L1018.89 692.499 L1019.45 692.499 L1020.01 692.499 L1020.56 692.499 L1021.12 692.499 L1021.68 692.499 L1022.24 692.499 L1022.8 692.499 L1023.36 692.499 L1023.92 692.499 L1024.48 692.499 L1025.04 692.499 L1025.6 692.499 L1026.16 692.499 L1026.72 692.499 L1027.28 692.499 L1027.83 692.499 L1028.39 692.499 L1028.95 692.499 L1029.51 692.499 L1030.07 692.499 L1030.63 692.499 L1031.19 692.499 L1031.75 692.499 L1032.31 692.499 L1032.87 692.499 L1033.43 692.499 L1033.99 692.499 L1034.55 692.499 L1035.1 692.499 L1035.66 692.499 L1036.22 692.499 L1036.78 692.499 L1037.34 692.499 L1037.9 692.499 L1038.46 692.499 L1039.02 692.499 L1039.58 692.499 L1040.14 692.499 L1040.7 692.499 L1041.26 692.499 L1041.82 692.499 L1042.38 692.499 L1042.93 692.499 L1043.49 692.499 L1044.05 692.499 L1044.61 692.499 L1045.17 692.499 L1045.73 692.499 L1046.29 692.499 L1046.85 692.499 L1047.41 692.499 L1047.97 692.499 L1048.53 692.499 L1049.09 692.499 L1049.65 692.499 L1050.2 692.499 L1050.76 692.499 L1051.32 692.499 L1051.88 692.499 L1052.44 692.499 L1053 692.499 L1053.56 692.499 L1054.12 692.499 L1054.68 692.499 L1055.24 692.499 L1055.8 692.499 L1056.36 692.499 L1056.92 692.499 L1057.48 692.499 L1058.03 692.499 L1058.59 692.499 L1059.15 692.499 L1059.71 692.499 L1060.27 692.499 L1060.83 692.499 L1061.39 692.499 L1061.95 692.499 L1062.51 692.499 L1063.07 692.499 L1063.63 692.499 L1064.19 692.499 L1064.75 692.499 L1065.3 692.499 L1065.86 692.499 L1066.42 692.499 L1066.98 692.499 L1067.54 692.499 L1068.1 692.499 L1068.66 692.499 L1069.22 692.499 L1069.78 692.499 L1070.34 692.499 L1070.9 692.499 L1071.46 692.499 L1072.02 692.499 L1072.57 692.499 L1073.13 692.499 L1073.69 692.499 L1074.25 692.499 L1074.81 692.499 L1075.37 692.499 L1075.93 692.499 L1076.49 692.499 L1077.05 692.499 L1077.61 692.499 L1078.17 692.499 L1078.73 692.499 L1079.29 692.499 L1079.85 692.499 L1080.4 692.499 L1080.96 692.499 L1081.52 692.499 L1082.08 692.499 L1082.64 692.499 L1083.2 692.499 L1083.76 692.499 L1084.32 692.499 L1084.88 692.499 L1085.44 692.499 L1086 692.499 L1086.56 692.499 L1087.12 692.499 L1087.67 692.499 L1088.23 692.499 L1088.79 692.499 L1089.35 692.499 L1089.91 692.499 L1090.47 692.499 L1091.03 692.499 L1091.59 692.499 L1092.15 692.499 L1092.71 692.499 L1093.27 692.499 L1093.83 692.499 L1094.39 692.499 L1094.94 692.499 L1095.5 692.499 L1096.06 692.499 L1096.62 692.499 L1097.18 692.499 L1097.74 692.499 L1098.3 692.499 L1098.86 692.499 L1099.42 692.499 L1099.98 692.499 L1100.54 692.499 L1101.1 692.499 L1101.66 692.499 L1102.22 692.499 L1102.77 692.499 L1103.33 692.499 L1103.89 692.499 L1104.45 692.499 L1105.01 692.499 L1105.57 692.499 L1106.13 692.499 L1106.69 692.499 L1107.25 692.499 L1107.81 692.499 L1108.37 692.499 L1108.93 692.499 L1109.49 692.499 L1110.04 692.499 L1110.6 692.499 L1111.16 692.499 L1111.72 692.499 L1112.28 692.499 L1112.84 692.499 L1113.4 692.499 L1113.96 692.499 L1114.52 692.499 L1115.08 692.499 L1115.64 692.499 L1116.2 692.499 L1116.76 692.499 L1117.31 692.499 L1117.87 692.499 L1118.43 692.499 L1118.99 692.499 L1119.55 692.499 L1120.11 692.499 L1120.67 692.499 L1121.23 692.499 L1121.79 692.499 L1122.35 692.499 L1122.91 692.499 L1123.47 692.499 L1124.03 692.499 L1124.59 692.499 L1125.14 692.499 L1125.7 692.499 L1126.26 692.499 L1126.82 692.499 L1127.38 692.499 L1127.94 692.499 L1128.5 692.499 L1129.06 692.499 L1129.62 692.499 L1130.18 692.499 L1130.74 692.499 L1131.3 692.499 L1131.86 692.499 L1132.41 692.499 L1132.97 692.499 L1133.53 692.499 L1134.09 692.499 L1134.65 692.499 L1135.21 692.499 L1135.77 692.499 L1136.33 692.499 L1136.89 692.499 L1137.45 692.499 L1138.01 692.499 L1138.57 692.499 L1139.13 692.499 L1139.68 692.499 L1140.24 692.499 L1140.8 692.499 L1141.36 692.499 L1141.92 692.499 L1142.48 692.499 L1143.04 692.499 L1143.6 692.499 L1144.16 692.499 L1144.72 692.499 L1145.28 692.499 L1145.84 692.499 L1146.4 692.499 L1146.96 692.499 L1147.51 692.499 L1148.07 692.499 L1148.63 692.499 L1149.19 692.499 L1149.75 692.499 L1150.31 692.499 L1150.87 692.499 L1151.43 692.499 L1151.99 692.499 L1152.55 692.499 L1153.11 692.499 L1153.67 692.499 L1154.23 692.499 L1154.78 692.499 L1155.34 692.499 L1155.9 692.499 L1156.46 692.499 L1157.02 692.499 L1157.58 692.499 L1158.14 692.499 L1158.7 692.499 L1159.26 692.499 L1159.82 692.499 L1160.38 692.499 L1160.94 692.499 L1161.5 692.499 L1162.05 692.499 L1162.61 692.499 L1163.17 692.499 L1163.73 692.499 L1164.29 692.499 L1164.85 692.499 L1165.41 692.499 L1165.97 692.499 L1166.53 692.499 L1167.09 692.499 L1167.65 692.499 L1168.21 692.499 L1168.77 692.499 L1169.33 692.499 L1169.88 692.499 L1170.44 692.499 L1171 692.499 L1171.56 692.499 L1172.12 692.499 L1172.68 692.499 L1173.24 692.499 L1173.8 692.499 L1174.36 692.499 L1174.92 692.499 L1175.48 692.499 L1176.04 692.499 L1176.6 692.499 L1177.15 692.499 L1177.71 692.499 L1178.27 692.499 L1178.83 692.499 L1179.39 692.499 L1179.95 692.499 L1180.51 692.499 L1181.07 692.499 L1181.63 692.499 L1182.19 692.499 L1182.75 692.499 L1183.31 692.499 L1183.87 692.499 L1184.43 692.499 L1184.98 692.499 L1185.54 692.499 L1186.1 692.499 L1186.66 692.499 L1187.22 692.499 L1187.78 692.499 L1188.34 692.499 L1188.9 692.499 L1189.46 692.499 L1190.02 692.499 L1190.58 692.499 L1191.14 692.499 L1191.7 692.499 L1192.25 692.499 L1192.81 692.499 L1193.37 692.499 L1193.93 692.499 L1194.49 692.499 L1195.05 692.499 L1195.61 692.499 L1196.17 692.499 L1196.73 692.499 L1197.29 692.499 L1197.85 692.499 L1198.41 692.499 L1198.97 692.499 L1199.52 692.499 L1200.08 692.499 L1200.64 692.499 L1201.2 692.499 L1201.76 692.499 L1202.32 692.499 L1202.88 692.499 L1203.44 692.499 L1204 692.499 L1204.56 692.499 L1205.12 692.499 L1205.68 692.499 L1206.24 692.499 L1206.8 692.499 L1207.35 692.499 L1207.91 692.499 L1208.47 692.499 L1209.03 692.499 L1209.59 692.499 L1210.15 692.499 L1210.71 692.499 L1211.27 692.499 L1211.83 692.499 L1212.39 692.499 L1212.95 692.499 L1213.51 692.499 L1214.07 692.499 L1214.62 692.499 L1215.18 692.499 L1215.74 692.499 L1216.3 692.499 L1216.86 692.499 L1217.42 692.499 L1217.98 692.499 L1218.54 692.499 L1219.1 692.499 L1219.66 692.499 L1220.22 692.499 L1220.78 692.499 L1221.34 692.499 L1221.89 692.499 L1222.45 692.499 L1223.01 692.499 L1223.57 692.499 L1224.13 692.499 L1224.69 692.499 L1225.25 692.499 L1225.81 692.499 L1226.37 692.499 L1226.93 692.499 L1227.49 692.499 L1228.05 692.499 L1228.61 692.499 L1229.17 692.499 L1229.72 692.499 L1230.28 692.499 L1230.84 692.499 L1231.4 692.499 L1231.96 692.499 L1232.52 692.499 L1233.08 692.499 L1233.64 692.499 L1234.2 692.499 L1234.76 692.499 L1235.32 692.499 L1235.88 692.499 L1236.44 692.499 L1236.99 692.499 L1237.55 692.499 L1238.11 692.499 L1238.67 692.499 L1239.23 692.499 L1239.79 692.499 L1240.35 692.499 L1240.91 692.499 L1241.47 692.499 L1242.03 692.499 L1242.59 692.499 L1243.15 692.499 L1243.71 692.499 L1244.26 692.499 L1244.82 692.499 L1245.38 692.499 L1245.94 692.499 L1246.5 692.499 L1247.06 692.499 L1247.62 692.499 L1248.18 692.499 L1248.74 692.499 L1249.3 692.499 L1249.86 692.499 L1250.42 692.499 L1250.98 692.499 L1251.54 692.499 L1252.09 692.499 L1252.65 692.499 L1253.21 692.499 L1253.77 692.499 L1254.33 692.499 L1254.89 692.499 L1255.45 692.499 L1256.01 692.499 L1256.57 692.499 L1257.13 692.499 L1257.69 692.499 L1258.25 692.499 L1258.81 692.499 L1259.36 692.499 L1259.92 692.499 L1260.48 692.499 L1261.04 692.499 L1261.6 692.499 L1262.16 692.499 L1262.72 692.499 L1263.28 692.499 L1263.84 692.499 L1264.4 692.499 L1264.96 692.499 L1265.52 692.499 L1266.08 692.499 L1266.63 692.499 L1267.19 692.499 L1267.75 692.499 L1268.31 692.499 L1268.87 692.499 L1269.43 692.499 L1269.99 692.499 L1270.55 692.499 L1271.11 692.499 L1271.67 692.499 L1272.23 692.499 L1272.79 692.499 L1273.35 692.499 L1273.91 692.499 L1274.46 692.499 L1275.02 692.499 L1275.58 692.499 L1276.14 692.499 L1276.7 692.499 L1277.26 692.499 L1277.82 692.499 L1278.38 692.499 L1278.94 692.499 L1279.5 692.499 L1280.06 692.499 L1280.62 692.499 L1281.18 692.499 L1281.73 692.499 L1282.29 692.499 L1282.85 692.499 L1283.41 692.499 L1283.97 692.499 L1284.53 692.499 L1285.09 692.499 L1285.65 692.499 L1286.21 692.499 L1286.77 692.499 L1287.33 692.499 L1287.89 692.499 L1288.45 692.499 L1289 692.499 L1289.56 692.499 L1290.12 692.499 L1290.68 692.499 L1291.24 692.499 L1291.8 692.499 L1292.36 692.499 L1292.92 692.499 L1293.48 692.499 L1294.04 692.499 L1294.6 692.499 L1295.16 692.499 L1295.72 692.499 L1296.28 692.499 L1296.83 692.499 L1297.39 692.499 L1297.95 692.499 L1298.51 692.499 L1299.07 692.499 L1299.63 692.499 L1300.19 692.499 L1300.75 692.499 L1301.31 692.499 L1301.87 692.499 L1302.43 692.499 L1302.99 692.499 L1303.55 692.499 L1304.1 692.499 L1304.66 692.499 L1305.22 692.499 L1305.78 692.499 L1306.34 692.499 L1306.9 692.499 L1307.46 692.499 L1308.02 692.499 L1308.58 692.499 L1309.14 692.499 L1309.7 692.499 L1310.26 692.499 L1310.82 692.499 L1311.38 692.499 L1311.93 692.499 L1312.49 692.499 L1313.05 692.499 L1313.61 692.499 L1314.17 692.499 L1314.73 692.499 L1315.29 692.499 L1315.85 692.499 L1316.41 692.499 L1316.97 692.499 L1317.53 692.499 L1318.09 692.499 L1318.65 692.499 L1319.2 692.499 L1319.76 692.499 L1320.32 692.499 L1320.88 692.499 L1321.44 692.499 L1322 692.499 L1322.56 692.499 L1323.12 692.499 L1323.68 692.499 L1324.24 692.499 L1324.8 692.499 L1325.36 692.499 L1325.92 692.499 L1326.47 692.499 L1327.03 692.499 L1327.59 692.499 L1328.15 692.499 L1328.71 692.499 L1329.27 692.499 L1329.83 692.499 L1330.39 692.499 L1330.95 692.499 L1331.51 692.499 L1332.07 692.499 L1332.63 692.499 L1333.19 692.499 L1333.75 692.499 L1334.3 692.499 L1334.86 692.499 L1335.42 692.499 L1335.98 692.499 L1336.54 692.499 L1337.1 692.499 L1337.66 692.499 L1338.22 692.499 L1338.78 692.499 L1339.34 692.499 L1339.9 692.499 L1340.46 692.499 L1341.02 692.499 L1341.57 692.499 L1342.13 692.499 L1342.69 692.499 L1343.25 692.499 L1343.81 692.499 L1344.37 692.499 L1344.93 692.499 L1345.49 692.499 L1346.05 692.499 L1346.61 692.499 L1347.17 692.499 L1347.73 692.499 L1348.29 692.499 L1348.84 692.499 L1349.4 692.499 L1349.96 692.499 L1350.52 692.499 L1351.08 692.499 L1351.64 692.499 L1352.2 692.499 L1352.76 692.499 L1353.32 692.499 L1353.88 692.499 L1354.44 692.499 L1355 692.499 L1355.56 692.499 L1356.12 692.499 L1356.67 692.499 L1357.23 692.499 L1357.79 692.499 L1358.35 692.499 L1358.91 692.499 L1359.47 692.499 L1360.03 692.499 L1360.59 692.499 L1361.15 692.499 L1361.71 692.499 L1362.27 692.499 L1362.83 692.499 L1363.39 692.499 L1363.94 692.499 L1364.5 692.499 L1365.06 692.499 L1365.62 692.499 L1366.18 692.499 L1366.74 692.499 L1367.3 692.499 L1367.86 692.499 L1368.42 692.499 L1368.98 692.499 L1369.54 692.499 L1370.1 692.499 L1370.66 692.499 L1371.21 692.499 L1371.77 692.499 L1372.33 692.499 L1372.89 692.499 L1373.45 692.499 L1374.01 692.499 L1374.57 692.499 L1375.13 692.499 L1375.69 692.499 L1376.25 692.499 L1376.81 692.499 L1377.37 692.499 L1377.93 692.499 L1378.49 692.499 L1379.04 692.499 L1379.6 692.499 L1380.16 692.499 L1380.72 692.499 L1381.28 692.499 L1381.84 692.499 L1382.4 692.499 L1382.96 692.499 L1383.52 692.499 L1384.08 692.499 L1384.64 692.499 L1385.2 692.499 L1385.76 692.499 L1386.31 692.499 L1386.87 692.499 L1387.43 692.499 L1387.99 692.499 L1388.55 692.499 L1389.11 692.499 L1389.67 692.499 L1390.23 692.499 L1390.79 692.499 L1391.35 692.499 L1391.91 692.499 L1392.47 692.499 L1393.03 692.499 L1393.58 692.499 L1394.14 692.499 L1394.7 692.499 L1395.26 692.499 L1395.82 692.499 L1396.38 692.499 L1396.94 692.499 L1397.5 692.499 L1398.06 692.499 L1398.62 692.499 L1399.18 692.499 L1399.74 692.499 L1400.3 692.499 L1400.86 692.499 L1401.41 692.499 L1401.97 692.499 L1402.53 692.499 L1403.09 692.499 L1403.65 692.499 L1404.21 692.499 L1404.77 692.499 L1405.33 692.499 L1405.89 692.499 L1406.45 692.499 L1407.01 692.499 L1407.57 692.499 L1408.13 692.499 L1408.68 692.499 L1409.24 692.499 L1409.8 692.499 L1410.36 692.499 L1410.92 692.499 L1411.48 692.499 L1412.04 692.499 L1412.6 692.499 L1413.16 692.499 L1413.72 692.499 L1414.28 692.499 L1414.84 692.499 L1415.4 692.499 L1415.95 692.499 L1416.51 692.499 L1417.07 692.499 L1417.63 692.499 L1418.19 692.499 L1418.75 692.499 L1419.31 692.499 L1419.87 692.499 L1420.43 692.499 L1420.99 692.499 L1421.55 692.499 L1422.11 692.499 L1422.67 692.499 L1423.23 692.499 L1423.78 692.499 L1424.34 692.499 L1424.9 692.499 L1425.46 692.499 L1426.02 692.499 L1426.58 692.499 L1427.14 692.499 L1427.7 692.499 L1428.26 692.499 L1428.82 692.499 L1429.38 692.499 L1429.94 692.499 L1430.5 692.499 L1431.05 692.499 L1431.61 692.499 L1432.17 692.499 L1432.73 692.499 L1433.29 692.499 L1433.85 692.499 L1434.41 692.499 L1434.97 692.499 L1435.53 692.499 L1436.09 692.499 L1436.65 692.499 L1437.21 692.499 L1437.77 692.499 L1438.33 692.499 L1438.88 692.499 L1439.44 692.499 L1440 692.499 L1440.56 692.499 L1441.12 692.499 L1441.68 692.499 L1442.24 692.499 L1442.8 692.499 L1443.36 692.499 L1443.92 692.499 L1444.48 692.499 L1445.04 692.499 L1445.6 692.499 L1446.15 692.499 L1446.71 692.499 L1447.27 692.499 L1447.83 692.499 L1448.39 692.499 L1448.95 692.499 L1449.51 692.499 L1450.07 692.499 L1450.63 692.499 L1451.19 692.499 L1451.75 692.499 L1452.31 692.499 L1452.87 692.499 L1453.42 692.499 L1453.98 692.499 L1454.54 692.499 L1455.1 692.499 L1455.66 692.499 L1456.22 692.499 L1456.78 692.499 L1457.34 692.499 L1457.9 692.499 L1458.46 692.499 L1459.02 692.499 L1459.58 692.499 L1460.14 692.499 L1460.7 692.499 L1461.25 692.499 L1461.81 692.499 L1462.37 692.499 L1462.93 692.499 L1463.49 692.499 L1464.05 692.499 L1464.61 692.499 L1465.17 692.499 L1465.73 692.499 L1466.29 692.499 L1466.85 692.499 L1467.41 692.499 L1467.97 692.499 L1468.52 692.499 L1469.08 692.499 L1469.64 692.499 L1470.2 692.499 L1470.76 692.499 L1471.32 692.499 L1471.88 692.499 L1472.44 692.499 L1473 692.499 L1473.56 692.499 L1474.12 692.499 L1474.68 692.499 L1475.24 692.499 L1475.79 692.499 L1476.35 692.499 L1476.91 692.499 L1477.47 692.499 L1478.03 692.499 L1478.59 692.499 L1479.15 692.499 L1479.71 692.499 L1480.27 692.499 L1480.83 692.499 L1481.39 692.499 L1481.95 692.499 L1482.51 692.499 L1483.07 692.499 L1483.62 692.499 L1484.18 692.499 L1484.74 692.499 L1485.3 692.499 L1485.86 692.499 L1486.42 692.499 L1486.98 692.499 L1487.54 692.499 L1488.1 692.499 L1488.66 692.499 L1489.22 692.499 L1489.78 692.499 L1490.34 692.499 L1490.89 692.499 L1491.45 692.499 L1492.01 692.499 L1492.57 692.499 L1493.13 692.499 L1493.69 692.499 L1494.25 692.499 L1494.81 692.499 L1495.37 692.499 L1495.93 692.499 L1496.49 692.499 L1497.05 692.499 L1497.61 692.499 L1498.16 692.499 L1498.72 692.499 L1499.28 692.499 L1499.84 692.499 L1500.4 692.499 L1500.96 692.499 L1501.52 692.499 L1502.08 692.499 L1502.64 692.499 L1503.2 692.499 L1503.76 692.499 L1504.32 692.499 L1504.88 692.499 L1505.44 692.499 L1505.99 692.499 L1506.55 692.499 L1507.11 692.499 L1507.67 692.499 L1508.23 692.499 L1508.79 692.499 L1509.35 692.499 L1509.91 692.499 L1510.47 692.499 L1511.03 692.499 L1511.59 692.499 L1512.15 692.499 L1512.71 692.499 L1513.26 692.499 L1513.82 692.499 L1514.38 692.499 L1514.94 692.499 L1515.5 692.499 L1516.06 692.499 L1516.62 692.499 L1517.18 692.499 L1517.74 692.499 L1518.3 692.499 L1518.86 692.499 L1519.42 692.499 L1519.98 692.499 L1520.53 692.499 L1521.09 692.499 L1521.65 692.499 L1522.21 692.499 L1522.77 692.499 L1523.33 692.499 L1523.89 692.499 L1524.45 692.499 L1525.01 692.499 L1525.57 692.499 L1526.13 692.499 L1526.69 692.499 L1527.25 692.499 L1527.81 692.499 L1528.36 692.499 L1528.92 692.499 L1529.48 692.499 L1530.04 692.499 L1530.6 692.499 L1531.16 692.499 L1531.72 692.499 L1532.28 692.499 L1532.84 692.499 L1533.4 692.499 L1533.96 692.499 L1534.52 692.499 L1535.08 692.499 L1535.63 692.499 L1536.19 692.499 L1536.75 692.499 L1537.31 692.499 L1537.87 692.499 L1538.43 692.499 L1538.99 692.499 L1539.55 692.499 L1540.11 692.499 L1540.67 692.499 L1541.23 692.499 L1541.79 692.499 L1542.35 692.499 L1542.9 692.499 L1543.46 692.499 L1544.02 692.499 L1544.58 692.499 L1545.14 692.499 L1545.7 692.499 L1546.26 692.499 L1546.82 692.499 L1547.38 692.499 L1547.94 692.499 L1548.5 692.499 L1549.06 692.499 L1549.62 692.499 L1550.18 692.499 L1550.73 692.499 L1551.29 692.499 L1551.85 692.499 L1552.41 692.499 L1552.97 692.499 L1553.53 692.499 L1554.09 692.499 L1554.65 692.499 L1555.21 692.499 L1555.77 692.499 L1556.33 692.499 L1556.89 692.499 L1557.45 692.499 L1558 692.499 L1558.56 692.499 L1559.12 692.499 L1559.68 692.499 L1560.24 692.499 L1560.8 692.499 L1561.36 692.499 L1561.92 692.499 L1562.48 692.499 L1563.04 692.499 L1563.6 692.499 L1564.16 692.499 L1564.72 692.499 L1565.28 692.499 L1565.83 692.499 L1566.39 692.499 L1566.95 692.499 L1567.51 692.499 L1568.07 692.499 L1568.63 692.499 L1569.19 692.499 L1569.75 692.499 L1570.31 692.499 L1570.87 692.499 L1571.43 692.499 L1571.99 692.499 L1572.55 692.499 L1573.1 692.499 L1573.66 692.499 L1574.22 692.499 L1574.78 692.499 L1575.34 692.499 L1575.9 692.499 L1576.46 692.499 L1577.02 692.499 L1577.58 692.499 L1578.14 692.499 L1578.7 692.499 L1579.26 692.499 L1579.82 692.499 L1580.37 692.499 L1580.93 692.499 L1581.49 692.499 L1582.05 692.499 L1582.61 692.499 L1583.17 692.499 L1583.73 692.499 L1584.29 692.499 L1584.85 692.499 L1585.41 692.499 L1585.97 692.499 L1586.53 692.499 L1587.09 692.499 L1587.65 692.499 L1588.2 692.499 L1588.76 692.499 L1589.32 692.499 L1589.88 692.499 L1590.44 692.499 L1591 692.499 L1591.56 692.499 L1592.12 692.499 L1592.68 692.499 L1593.24 692.499 L1593.8 692.499 L1594.36 692.499 L1594.92 692.499 L1595.47 692.499 L1596.03 692.499 L1596.59 692.499 L1597.15 692.499 L1597.71 692.499 L1598.27 692.499 L1598.83 692.499 L1599.39 692.499 L1599.95 692.499 L1600.51 692.499 L1601.07 692.499 L1601.63 692.499 L1602.19 692.499 L1602.74 692.499 L1603.3 692.499 L1603.86 692.499 L1604.42 692.499 L1604.98 692.499 L1605.54 692.499 L1606.1 692.499 L1606.66 692.499 L1607.22 692.499 L1607.78 692.499 L1608.34 692.499 L1608.9 692.499 L1609.46 692.499 L1610.02 692.499 L1610.57 692.499 L1611.13 692.499 L1611.69 692.499 L1612.25 692.499 L1612.81 692.499 L1613.37 692.499 L1613.93 692.499 L1614.49 692.499 L1615.05 692.499 L1615.61 692.499 L1616.17 692.499 L1616.73 692.499 L1617.29 692.499 L1617.84 692.499 L1618.4 692.499 L1618.96 692.499 L1619.52 692.499 L1620.08 692.499 L1620.64 692.499 L1621.2 692.499 L1621.76 692.499 L1622.32 692.499 L1622.88 692.499 L1623.44 692.499 L1624 692.499 L1624.56 692.499 L1625.11 692.499 L1625.67 692.499 L1626.23 692.499 L1626.79 692.499 L1627.35 692.499 L1627.91 692.499 L1628.47 692.499 L1629.03 692.499 L1629.59 692.499 L1630.15 692.499 L1630.71 692.499 L1631.27 692.499 L1631.83 692.499 L1632.39 692.499 L1632.94 692.499 L1633.5 692.499 L1634.06 692.499 L1634.62 692.499 L1635.18 692.499 L1635.74 692.499 L1636.3 692.499 L1636.86 692.499 L1637.42 692.499 L1637.98 692.499 L1638.54 692.499 L1639.1 692.499 L1639.66 692.499 L1640.21 692.499 L1640.77 692.499 L1641.33 692.499 L1641.89 692.499 L1642.45 692.499 L1643.01 692.499 L1643.57 692.499 L1644.13 692.499 L1644.69 692.499 L1645.25 692.499 L1645.81 692.499 L1646.37 692.499 L1646.93 692.499 L1647.48 692.499 L1648.04 692.499 L1648.6 692.499 L1649.16 692.499 L1649.72 692.499 L1650.28 692.499 L1650.84 692.499 L1651.4 692.499 L1651.96 692.499 L1652.52 692.499 L1653.08 692.499 L1653.64 692.499 L1654.2 692.499 L1654.76 692.499 L1655.31 692.499 L1655.87 692.499 L1656.43 692.499 L1656.99 692.499 L1657.55 692.499 L1658.11 692.499 L1658.67 692.499 L1659.23 692.499 L1659.79 692.499 L1660.35 692.499 L1660.91 692.499 L1661.47 692.499 L1662.03 692.499 L1662.58 692.499 L1663.14 692.499 L1663.7 692.499 L1664.26 692.499 L1664.82 692.499 L1665.38 692.499 L1665.94 692.499 L1666.5 692.499 L1667.06 692.499 L1667.62 692.499 L1668.18 692.499 L1668.74 692.499 L1669.3 692.499 L1669.85 692.499 L1670.41 692.499 L1670.97 692.499 L1671.53 692.499 L1672.09 692.499 L1672.65 692.499 L1673.21 692.499 L1673.77 692.499 L1674.33 692.499 L1674.89 692.499 L1675.45 692.499 L1676.01 692.499 L1676.57 692.499 L1677.13 692.499 L1677.68 692.499 L1678.24 692.499 L1678.8 692.499 L1679.36 692.499 L1679.92 692.499 L1680.48 692.499 L1681.04 692.499 L1681.6 692.499 L1682.16 692.499 L1682.72 692.499 L1683.28 692.499 L1683.84 692.499 L1684.4 692.499 L1684.95 692.499 L1685.51 692.499 L1686.07 692.499 L1686.63 692.499 L1687.19 692.499 L1687.75 692.499 L1688.31 692.499 L1688.87 692.499 L1689.43 692.499 L1689.99 692.499 L1690.55 692.499 L1691.11 692.499 L1691.67 692.499 L1692.23 692.499 L1692.78 692.499 L1693.34 692.499 L1693.9 692.499 L1694.46 692.499 L1695.02 692.499 L1695.58 692.499 L1696.14 692.499 L1696.7 692.499 L1697.26 692.499 L1697.82 692.499 L1698.38 692.499 L1698.94 692.499 L1699.5 692.499 L1700.05 692.499 L1700.61 692.499 L1701.17 692.499 L1701.73 692.499 L1702.29 692.499 L1702.85 692.499 L1703.41 692.499 L1703.97 692.499 L1704.53 692.499 L1705.09 692.499 L1705.65 692.499 L1706.21 692.499 L1706.77 692.499 L1707.32 692.499 L1707.88 692.499 L1708.44 692.499 L1709 692.499 L1709.56 692.499 L1710.12 692.499 L1710.68 692.499 L1711.24 692.499 L1711.8 692.499 L1712.36 692.499 L1712.92 692.499 L1713.48 692.499 L1714.04 692.499 L1714.6 692.499 L1715.15 692.499 L1715.71 692.499 L1716.27 692.499 L1716.83 692.499 L1717.39 692.499 L1717.95 692.499 L1718.51 692.499 L1719.07 692.499 L1719.63 692.499 L1720.19 692.499 L1720.75 692.499 L1721.31 692.499 L1721.87 692.499 L1722.42 692.499 L1722.98 692.499 L1723.54 692.499 L1724.1 692.499 L1724.66 692.499 L1725.22 692.499 L1725.78 692.499 L1726.34 692.499 L1726.9 692.499 L1727.46 692.499 L1728.02 692.499 L1728.58 692.499 L1729.14 692.499 L1729.69 692.499 L1730.25 692.499 L1730.81 692.499 L1731.37 692.499 L1731.93 692.499 L1732.49 692.499 L1733.05 692.499 L1733.61 692.499 L1734.17 692.499 L1734.73 692.499 L1735.29 692.499 L1735.85 692.499 L1736.41 692.499 L1736.97 692.499 L1737.52 692.499 L1738.08 692.499 L1738.64 692.499 L1739.2 692.499 L1739.76 692.499 L1740.32 692.499 L1740.88 692.499 L1741.44 692.499 L1742 692.499 L1742.56 692.499 L1743.12 692.499 L1743.68 692.499 L1744.24 692.499 L1744.79 692.499 L1745.35 692.499 L1745.91 692.499 L1746.47 692.499 L1747.03 692.499 L1747.59 692.499 L1748.15 692.499 L1748.71 692.499 L1749.27 692.499 L1749.83 692.499 L1750.39 692.499 L1750.95 692.499 L1751.51 692.499 L1752.06 692.499 L1752.62 692.499 L1753.18 692.499 L1753.74 692.499 L1754.3 692.499 L1754.86 692.499 L1755.42 692.499 L1755.98 692.499 L1756.54 692.499 L1757.1 692.499 L1757.66 692.499 L1758.22 692.499 L1758.78 692.499 L1759.34 692.499 L1759.89 692.499 L1760.45 692.499 L1761.01 692.499 L1761.57 692.499 L1762.13 692.499 L1762.69 692.499 L1763.25 692.499 L1763.81 692.499 L1764.37 692.499 L1764.93 692.499 L1765.49 692.499 L1766.05 692.499 L1766.61 692.499 L1767.16 692.499 L1767.72 692.499 L1768.28 692.499 L1768.84 692.499 L1769.4 692.499 L1769.96 692.499 L1770.52 692.499 L1771.08 692.499 L1771.64 692.499 L1772.2 692.499 L1772.76 692.499 L1773.32 692.499 L1773.88 692.499 L1774.43 692.499 L1774.99 692.499 L1775.55 692.499 L1776.11 692.499 L1776.67 692.499 L1777.23 692.499 L1777.79 692.499 L1778.35 692.499 L1778.91 692.499 L1779.47 692.499 L1780.03 692.499 L1780.59 692.499 L1781.15 692.499 L1781.71 692.499 L1782.26 692.499 L1782.82 692.499 L1783.38 692.499 L1783.94 692.499 L1784.5 692.499 L1785.06 692.499 L1785.62 692.499 L1786.18 692.499 L1786.74 692.499 L1787.3 692.499 L1787.86 692.499 L1788.42 692.499 L1788.98 692.499 L1789.53 692.499 L1790.09 692.499 L1790.65 692.499 L1791.21 692.499 L1791.77 692.499 L1792.33 692.499 L1792.89 692.499 L1793.45 692.499 L1794.01 692.499 L1794.57 692.499 L1795.13 692.499 L1795.69 692.499 L1796.25 692.499 L1796.8 692.499 L1797.36 692.499 L1797.92 692.499 L1798.48 692.499 L1799.04 692.499 L1799.6 692.499 L1800.16 692.499 L1800.72 692.499 L1801.28 692.499 L1801.84 692.499 L1802.4 692.499 L1802.96 692.499 L1803.52 692.499 L1804.08 692.499 L1804.63 692.499 L1805.19 692.499 L1805.75 692.499 L1806.31 692.499 L1806.87 692.499 L1807.43 692.499 L1807.99 692.499 L1808.55 692.499 L1809.11 692.499 L1809.67 692.499 L1810.23 692.499 L1810.79 692.499 L1811.35 692.499 L1811.9 692.499 L1812.46 692.499 L1813.02 692.499 L1813.58 692.499 L1814.14 692.499 L1814.7 692.499 L1815.26 692.499 L1815.82 692.499 L1816.38 692.499 L1816.94 692.499 L1817.5 692.499 L1818.06 692.499 L1818.62 692.499 L1819.18 692.499 L1819.73 692.499 L1820.29 692.499 L1820.85 692.499 L1821.41 692.499 L1821.97 692.499 L1822.53 692.499 L1823.09 692.499 L1823.65 692.499 L1824.21 692.499 L1824.77 692.499 L1825.33 692.499 L1825.89 692.499 L1826.45 692.499 L1827 692.499 L1827.56 692.499 L1828.12 692.499 L1828.68 692.499 L1829.24 692.499 L1829.8 692.499 L1830.36 692.499 L1830.92 692.499 L1831.48 692.499 L1832.04 692.499 L1832.6 692.499 L1833.16 692.499 L1833.72 692.499 L1834.27 692.499 L1834.83 692.499 L1835.39 692.499 L1835.95 692.499 L1836.51 692.499 L1837.07 692.499 L1837.63 692.499 L1838.19 692.499 L1838.19 683.632 L1837.63 683.632 L1837.07 683.632 L1836.51 683.632 L1835.95 683.632 L1835.39 683.632 L1834.83 683.632 L1834.27 683.632 L1833.72 683.632 L1833.16 683.632 L1832.6 683.632 L1832.04 683.632 L1831.48 683.632 L1830.92 683.632 L1830.36 683.632 L1829.8 683.632 L1829.24 683.632 L1828.68 683.632 L1828.12 683.632 L1827.56 683.632 L1827 683.632 L1826.45 683.632 L1825.89 683.632 L1825.33 683.632 L1824.77 683.632 L1824.21 683.632 L1823.65 683.632 L1823.09 683.632 L1822.53 683.632 L1821.97 683.632 L1821.41 683.632 L1820.85 683.632 L1820.29 683.632 L1819.73 683.632 L1819.18 683.632 L1818.62 683.632 L1818.06 683.632 L1817.5 683.632 L1816.94 683.632 L1816.38 683.632 L1815.82 683.632 L1815.26 683.632 L1814.7 683.632 L1814.14 683.632 L1813.58 683.632 L1813.02 683.632 L1812.46 683.632 L1811.9 683.632 L1811.35 683.632 L1810.79 683.632 L1810.23 683.632 L1809.67 683.632 L1809.11 683.632 L1808.55 683.632 L1807.99 683.632 L1807.43 683.632 L1806.87 683.632 L1806.31 683.632 L1805.75 683.632 L1805.19 683.632 L1804.63 683.632 L1804.08 683.632 L1803.52 683.632 L1802.96 683.632 L1802.4 683.632 L1801.84 683.632 L1801.28 683.632 L1800.72 683.632 L1800.16 683.632 L1799.6 683.632 L1799.04 683.632 L1798.48 683.632 L1797.92 683.632 L1797.36 683.632 L1796.8 683.632 L1796.25 683.632 L1795.69 683.632 L1795.13 683.632 L1794.57 683.632 L1794.01 683.632 L1793.45 683.632 L1792.89 683.632 L1792.33 683.632 L1791.77 683.632 L1791.21 683.632 L1790.65 683.632 L1790.09 683.632 L1789.53 683.632 L1788.98 683.632 L1788.42 683.632 L1787.86 683.632 L1787.3 683.632 L1786.74 683.632 L1786.18 683.632 L1785.62 683.632 L1785.06 683.632 L1784.5 683.632 L1783.94 683.632 L1783.38 683.632 L1782.82 683.632 L1782.26 683.632 L1781.71 683.632 L1781.15 683.632 L1780.59 683.632 L1780.03 683.632 L1779.47 683.632 L1778.91 683.632 L1778.35 683.632 L1777.79 683.632 L1777.23 683.632 L1776.67 683.632 L1776.11 683.632 L1775.55 683.632 L1774.99 683.632 L1774.43 683.632 L1773.88 683.632 L1773.32 683.632 L1772.76 683.632 L1772.2 683.632 L1771.64 683.632 L1771.08 683.632 L1770.52 683.632 L1769.96 683.632 L1769.4 683.632 L1768.84 683.632 L1768.28 683.632 L1767.72 683.632 L1767.16 683.632 L1766.61 683.632 L1766.05 683.632 L1765.49 683.632 L1764.93 683.632 L1764.37 683.632 L1763.81 683.632 L1763.25 683.632 L1762.69 683.632 L1762.13 683.632 L1761.57 683.632 L1761.01 683.632 L1760.45 683.632 L1759.89 683.632 L1759.34 683.632 L1758.78 683.632 L1758.22 683.632 L1757.66 683.632 L1757.1 683.632 L1756.54 683.632 L1755.98 683.632 L1755.42 683.632 L1754.86 683.632 L1754.3 683.632 L1753.74 683.632 L1753.18 683.632 L1752.62 683.632 L1752.06 683.632 L1751.51 683.632 L1750.95 683.632 L1750.39 683.632 L1749.83 683.632 L1749.27 683.632 L1748.71 683.632 L1748.15 683.632 L1747.59 683.632 L1747.03 683.632 L1746.47 683.632 L1745.91 683.632 L1745.35 683.632 L1744.79 683.632 L1744.24 683.632 L1743.68 683.632 L1743.12 683.632 L1742.56 683.632 L1742 683.632 L1741.44 683.632 L1740.88 683.632 L1740.32 683.632 L1739.76 683.632 L1739.2 683.632 L1738.64 683.632 L1738.08 683.632 L1737.52 683.632 L1736.97 683.632 L1736.41 683.632 L1735.85 683.632 L1735.29 683.632 L1734.73 683.632 L1734.17 683.632 L1733.61 683.632 L1733.05 683.632 L1732.49 683.632 L1731.93 683.632 L1731.37 683.632 L1730.81 683.632 L1730.25 683.632 L1729.69 683.632 L1729.14 683.632 L1728.58 683.632 L1728.02 683.632 L1727.46 683.632 L1726.9 683.632 L1726.34 683.632 L1725.78 683.632 L1725.22 683.632 L1724.66 683.632 L1724.1 683.632 L1723.54 683.632 L1722.98 683.632 L1722.42 683.632 L1721.87 683.632 L1721.31 683.632 L1720.75 683.632 L1720.19 683.632 L1719.63 683.632 L1719.07 683.632 L1718.51 683.632 L1717.95 683.632 L1717.39 683.632 L1716.83 683.632 L1716.27 683.632 L1715.71 683.632 L1715.15 683.632 L1714.6 683.632 L1714.04 683.632 L1713.48 683.632 L1712.92 683.632 L1712.36 683.632 L1711.8 683.632 L1711.24 683.632 L1710.68 683.632 L1710.12 683.632 L1709.56 683.632 L1709 683.632 L1708.44 683.632 L1707.88 683.632 L1707.32 683.632 L1706.77 683.632 L1706.21 683.632 L1705.65 683.632 L1705.09 683.632 L1704.53 683.632 L1703.97 683.632 L1703.41 683.632 L1702.85 683.632 L1702.29 683.632 L1701.73 683.632 L1701.17 683.632 L1700.61 683.632 L1700.05 683.632 L1699.5 683.632 L1698.94 683.632 L1698.38 683.632 L1697.82 683.632 L1697.26 683.632 L1696.7 683.632 L1696.14 683.632 L1695.58 683.632 L1695.02 683.632 L1694.46 683.632 L1693.9 683.632 L1693.34 683.632 L1692.78 683.632 L1692.23 683.632 L1691.67 683.632 L1691.11 683.632 L1690.55 683.632 L1689.99 683.632 L1689.43 683.632 L1688.87 683.632 L1688.31 683.632 L1687.75 683.632 L1687.19 683.632 L1686.63 683.632 L1686.07 683.632 L1685.51 683.632 L1684.95 683.632 L1684.4 683.632 L1683.84 683.632 L1683.28 683.632 L1682.72 683.632 L1682.16 683.632 L1681.6 683.632 L1681.04 683.632 L1680.48 683.632 L1679.92 683.632 L1679.36 683.632 L1678.8 683.632 L1678.24 683.632 L1677.68 683.632 L1677.13 683.632 L1676.57 683.632 L1676.01 683.632 L1675.45 683.632 L1674.89 683.632 L1674.33 683.632 L1673.77 683.632 L1673.21 683.632 L1672.65 683.632 L1672.09 683.632 L1671.53 683.632 L1670.97 683.632 L1670.41 683.632 L1669.85 683.632 L1669.3 683.632 L1668.74 683.632 L1668.18 683.632 L1667.62 683.632 L1667.06 683.632 L1666.5 683.632 L1665.94 683.632 L1665.38 683.632 L1664.82 683.632 L1664.26 683.632 L1663.7 683.632 L1663.14 683.632 L1662.58 683.632 L1662.03 683.632 L1661.47 683.632 L1660.91 683.632 L1660.35 683.632 L1659.79 683.632 L1659.23 683.632 L1658.67 683.632 L1658.11 683.632 L1657.55 683.632 L1656.99 683.632 L1656.43 683.632 L1655.87 683.632 L1655.31 683.632 L1654.76 683.632 L1654.2 683.632 L1653.64 683.632 L1653.08 683.632 L1652.52 683.632 L1651.96 683.632 L1651.4 683.632 L1650.84 683.632 L1650.28 683.632 L1649.72 683.632 L1649.16 683.632 L1648.6 683.632 L1648.04 683.632 L1647.48 683.632 L1646.93 683.632 L1646.37 683.632 L1645.81 683.632 L1645.25 683.632 L1644.69 683.632 L1644.13 683.632 L1643.57 683.632 L1643.01 683.632 L1642.45 683.632 L1641.89 683.632 L1641.33 683.632 L1640.77 683.632 L1640.21 683.632 L1639.66 683.632 L1639.1 683.632 L1638.54 683.632 L1637.98 683.632 L1637.42 683.632 L1636.86 683.632 L1636.3 683.632 L1635.74 683.632 L1635.18 683.632 L1634.62 683.632 L1634.06 683.632 L1633.5 683.632 L1632.94 683.632 L1632.39 683.632 L1631.83 683.632 L1631.27 683.632 L1630.71 683.632 L1630.15 683.632 L1629.59 683.632 L1629.03 683.632 L1628.47 683.632 L1627.91 683.632 L1627.35 683.632 L1626.79 683.632 L1626.23 683.632 L1625.67 683.632 L1625.11 683.632 L1624.56 683.632 L1624 683.632 L1623.44 683.632 L1622.88 683.632 L1622.32 683.632 L1621.76 683.632 L1621.2 683.632 L1620.64 683.632 L1620.08 683.632 L1619.52 683.632 L1618.96 683.632 L1618.4 683.632 L1617.84 683.632 L1617.29 683.632 L1616.73 683.632 L1616.17 683.632 L1615.61 683.632 L1615.05 683.632 L1614.49 683.632 L1613.93 683.632 L1613.37 683.632 L1612.81 683.632 L1612.25 683.632 L1611.69 683.632 L1611.13 683.632 L1610.57 683.632 L1610.02 683.632 L1609.46 683.632 L1608.9 683.632 L1608.34 683.632 L1607.78 683.632 L1607.22 683.632 L1606.66 683.632 L1606.1 683.632 L1605.54 683.632 L1604.98 683.632 L1604.42 683.632 L1603.86 683.632 L1603.3 683.632 L1602.74 683.632 L1602.19 683.632 L1601.63 683.632 L1601.07 683.632 L1600.51 683.632 L1599.95 683.632 L1599.39 683.632 L1598.83 683.632 L1598.27 683.632 L1597.71 683.632 L1597.15 683.632 L1596.59 683.632 L1596.03 683.632 L1595.47 683.632 L1594.92 683.632 L1594.36 683.632 L1593.8 683.632 L1593.24 683.632 L1592.68 683.632 L1592.12 683.632 L1591.56 683.632 L1591 683.632 L1590.44 683.632 L1589.88 683.632 L1589.32 683.632 L1588.76 683.632 L1588.2 683.632 L1587.65 683.632 L1587.09 683.632 L1586.53 683.632 L1585.97 683.632 L1585.41 683.632 L1584.85 683.632 L1584.29 683.632 L1583.73 683.632 L1583.17 683.632 L1582.61 683.632 L1582.05 683.632 L1581.49 683.632 L1580.93 683.632 L1580.37 683.632 L1579.82 683.632 L1579.26 683.632 L1578.7 683.632 L1578.14 683.632 L1577.58 683.632 L1577.02 683.632 L1576.46 683.632 L1575.9 683.632 L1575.34 683.632 L1574.78 683.632 L1574.22 683.632 L1573.66 683.632 L1573.1 683.632 L1572.55 683.632 L1571.99 683.632 L1571.43 683.632 L1570.87 683.632 L1570.31 683.632 L1569.75 683.632 L1569.19 683.632 L1568.63 683.632 L1568.07 683.632 L1567.51 683.632 L1566.95 683.632 L1566.39 683.632 L1565.83 683.632 L1565.28 683.632 L1564.72 683.632 L1564.16 683.632 L1563.6 683.632 L1563.04 683.632 L1562.48 683.632 L1561.92 683.632 L1561.36 683.632 L1560.8 683.632 L1560.24 683.632 L1559.68 683.632 L1559.12 683.632 L1558.56 683.632 L1558 683.632 L1557.45 683.632 L1556.89 683.632 L1556.33 683.632 L1555.77 683.632 L1555.21 683.632 L1554.65 683.632 L1554.09 683.632 L1553.53 683.632 L1552.97 683.632 L1552.41 683.632 L1551.85 683.632 L1551.29 683.632 L1550.73 683.632 L1550.18 683.632 L1549.62 683.632 L1549.06 683.632 L1548.5 683.632 L1547.94 683.632 L1547.38 683.632 L1546.82 683.632 L1546.26 683.632 L1545.7 683.632 L1545.14 683.632 L1544.58 683.632 L1544.02 683.632 L1543.46 683.632 L1542.9 683.632 L1542.35 683.632 L1541.79 683.632 L1541.23 683.632 L1540.67 683.632 L1540.11 683.632 L1539.55 683.632 L1538.99 683.632 L1538.43 683.632 L1537.87 683.632 L1537.31 683.632 L1536.75 683.632 L1536.19 683.632 L1535.63 683.632 L1535.08 683.632 L1534.52 683.632 L1533.96 683.632 L1533.4 683.632 L1532.84 683.632 L1532.28 683.632 L1531.72 683.632 L1531.16 683.632 L1530.6 683.632 L1530.04 683.632 L1529.48 683.632 L1528.92 683.632 L1528.36 683.632 L1527.81 683.632 L1527.25 683.632 L1526.69 683.632 L1526.13 683.632 L1525.57 683.632 L1525.01 683.632 L1524.45 683.632 L1523.89 683.632 L1523.33 683.632 L1522.77 683.632 L1522.21 683.632 L1521.65 683.632 L1521.09 683.632 L1520.53 683.632 L1519.98 683.632 L1519.42 683.632 L1518.86 683.632 L1518.3 683.632 L1517.74 683.632 L1517.18 683.632 L1516.62 683.632 L1516.06 683.632 L1515.5 683.632 L1514.94 683.632 L1514.38 683.632 L1513.82 683.632 L1513.26 683.632 L1512.71 683.632 L1512.15 683.632 L1511.59 683.632 L1511.03 683.632 L1510.47 683.632 L1509.91 683.632 L1509.35 683.632 L1508.79 683.632 L1508.23 683.632 L1507.67 683.632 L1507.11 683.632 L1506.55 683.632 L1505.99 683.632 L1505.44 683.632 L1504.88 683.632 L1504.32 683.632 L1503.76 683.632 L1503.2 683.632 L1502.64 683.632 L1502.08 683.632 L1501.52 683.632 L1500.96 683.632 L1500.4 683.632 L1499.84 683.632 L1499.28 683.632 L1498.72 683.632 L1498.16 683.632 L1497.61 683.632 L1497.05 683.632 L1496.49 683.632 L1495.93 683.632 L1495.37 683.632 L1494.81 683.632 L1494.25 683.632 L1493.69 683.632 L1493.13 683.632 L1492.57 683.632 L1492.01 683.632 L1491.45 683.632 L1490.89 683.632 L1490.34 683.632 L1489.78 683.632 L1489.22 683.632 L1488.66 683.632 L1488.1 683.632 L1487.54 683.632 L1486.98 683.632 L1486.42 683.632 L1485.86 683.632 L1485.3 683.632 L1484.74 683.632 L1484.18 683.632 L1483.62 683.632 L1483.07 683.632 L1482.51 683.632 L1481.95 683.632 L1481.39 683.632 L1480.83 683.632 L1480.27 683.632 L1479.71 683.632 L1479.15 683.632 L1478.59 683.632 L1478.03 683.632 L1477.47 683.632 L1476.91 683.632 L1476.35 683.632 L1475.79 683.632 L1475.24 683.632 L1474.68 683.632 L1474.12 683.632 L1473.56 683.632 L1473 683.632 L1472.44 683.632 L1471.88 683.632 L1471.32 683.632 L1470.76 683.632 L1470.2 683.632 L1469.64 683.632 L1469.08 683.632 L1468.52 683.632 L1467.97 683.632 L1467.41 683.632 L1466.85 683.632 L1466.29 683.632 L1465.73 683.632 L1465.17 683.632 L1464.61 683.632 L1464.05 683.632 L1463.49 683.632 L1462.93 683.632 L1462.37 683.632 L1461.81 683.632 L1461.25 683.632 L1460.7 683.632 L1460.14 683.632 L1459.58 683.632 L1459.02 683.632 L1458.46 683.632 L1457.9 683.632 L1457.34 683.632 L1456.78 683.632 L1456.22 683.632 L1455.66 683.632 L1455.1 683.632 L1454.54 683.632 L1453.98 683.632 L1453.42 683.632 L1452.87 683.632 L1452.31 683.632 L1451.75 683.632 L1451.19 683.632 L1450.63 683.632 L1450.07 683.632 L1449.51 683.632 L1448.95 683.632 L1448.39 683.632 L1447.83 683.632 L1447.27 683.632 L1446.71 683.632 L1446.15 683.632 L1445.6 683.632 L1445.04 683.632 L1444.48 683.632 L1443.92 683.632 L1443.36 683.632 L1442.8 683.632 L1442.24 683.632 L1441.68 683.632 L1441.12 683.632 L1440.56 683.632 L1440 683.632 L1439.44 683.632 L1438.88 683.632 L1438.33 683.632 L1437.77 683.632 L1437.21 683.632 L1436.65 683.632 L1436.09 683.632 L1435.53 683.632 L1434.97 683.632 L1434.41 683.632 L1433.85 683.632 L1433.29 683.632 L1432.73 683.632 L1432.17 683.632 L1431.61 683.632 L1431.05 683.632 L1430.5 683.632 L1429.94 683.632 L1429.38 683.632 L1428.82 683.632 L1428.26 683.632 L1427.7 683.632 L1427.14 683.632 L1426.58 683.632 L1426.02 683.632 L1425.46 683.632 L1424.9 683.632 L1424.34 683.632 L1423.78 683.632 L1423.23 683.632 L1422.67 683.632 L1422.11 683.632 L1421.55 683.632 L1420.99 683.632 L1420.43 683.632 L1419.87 683.632 L1419.31 683.632 L1418.75 683.632 L1418.19 683.632 L1417.63 683.632 L1417.07 683.632 L1416.51 683.632 L1415.95 683.632 L1415.4 683.632 L1414.84 683.632 L1414.28 683.632 L1413.72 683.632 L1413.16 683.632 L1412.6 683.632 L1412.04 683.632 L1411.48 683.632 L1410.92 683.632 L1410.36 683.632 L1409.8 683.632 L1409.24 683.632 L1408.68 683.632 L1408.13 683.632 L1407.57 683.632 L1407.01 683.632 L1406.45 683.632 L1405.89 683.632 L1405.33 683.632 L1404.77 683.632 L1404.21 683.632 L1403.65 683.632 L1403.09 683.632 L1402.53 683.632 L1401.97 683.632 L1401.41 683.632 L1400.86 683.632 L1400.3 683.632 L1399.74 683.632 L1399.18 683.632 L1398.62 683.632 L1398.06 683.632 L1397.5 683.632 L1396.94 683.632 L1396.38 683.632 L1395.82 683.632 L1395.26 683.632 L1394.7 683.632 L1394.14 683.632 L1393.58 683.632 L1393.03 683.632 L1392.47 683.632 L1391.91 683.632 L1391.35 683.632 L1390.79 683.632 L1390.23 683.632 L1389.67 683.632 L1389.11 683.632 L1388.55 683.632 L1387.99 683.632 L1387.43 683.632 L1386.87 683.632 L1386.31 683.632 L1385.76 683.632 L1385.2 683.632 L1384.64 683.632 L1384.08 683.632 L1383.52 683.632 L1382.96 683.632 L1382.4 683.632 L1381.84 683.632 L1381.28 683.632 L1380.72 683.632 L1380.16 683.632 L1379.6 683.632 L1379.04 683.632 L1378.49 683.632 L1377.93 683.632 L1377.37 683.632 L1376.81 683.632 L1376.25 683.632 L1375.69 683.632 L1375.13 683.632 L1374.57 683.632 L1374.01 683.632 L1373.45 683.632 L1372.89 683.632 L1372.33 683.632 L1371.77 683.632 L1371.21 683.632 L1370.66 683.632 L1370.1 683.632 L1369.54 683.632 L1368.98 683.632 L1368.42 683.632 L1367.86 683.632 L1367.3 683.632 L1366.74 683.632 L1366.18 683.632 L1365.62 683.632 L1365.06 683.632 L1364.5 683.632 L1363.94 683.632 L1363.39 683.632 L1362.83 683.632 L1362.27 683.632 L1361.71 683.632 L1361.15 683.632 L1360.59 683.632 L1360.03 683.632 L1359.47 683.632 L1358.91 683.632 L1358.35 683.632 L1357.79 683.632 L1357.23 683.632 L1356.67 683.632 L1356.12 683.632 L1355.56 683.632 L1355 683.632 L1354.44 683.632 L1353.88 683.632 L1353.32 683.632 L1352.76 683.632 L1352.2 683.632 L1351.64 683.632 L1351.08 683.632 L1350.52 683.632 L1349.96 683.632 L1349.4 683.632 L1348.84 683.632 L1348.29 683.632 L1347.73 683.632 L1347.17 683.632 L1346.61 683.632 L1346.05 683.632 L1345.49 683.632 L1344.93 683.632 L1344.37 683.632 L1343.81 683.632 L1343.25 683.632 L1342.69 683.632 L1342.13 683.632 L1341.57 683.632 L1341.02 683.632 L1340.46 683.632 L1339.9 683.632 L1339.34 683.632 L1338.78 683.632 L1338.22 683.632 L1337.66 683.632 L1337.1 683.632 L1336.54 683.632 L1335.98 683.632 L1335.42 683.632 L1334.86 683.632 L1334.3 683.632 L1333.75 683.632 L1333.19 683.632 L1332.63 683.632 L1332.07 683.632 L1331.51 683.632 L1330.95 683.632 L1330.39 683.632 L1329.83 683.632 L1329.27 683.632 L1328.71 683.632 L1328.15 683.632 L1327.59 683.632 L1327.03 683.632 L1326.47 683.632 L1325.92 683.632 L1325.36 683.632 L1324.8 683.632 L1324.24 683.632 L1323.68 683.632 L1323.12 683.632 L1322.56 683.632 L1322 683.632 L1321.44 683.632 L1320.88 683.632 L1320.32 683.632 L1319.76 683.632 L1319.2 683.632 L1318.65 683.632 L1318.09 683.632 L1317.53 683.632 L1316.97 683.632 L1316.41 683.632 L1315.85 683.632 L1315.29 683.632 L1314.73 683.632 L1314.17 683.632 L1313.61 683.632 L1313.05 683.632 L1312.49 683.632 L1311.93 683.632 L1311.38 683.632 L1310.82 683.632 L1310.26 683.632 L1309.7 683.632 L1309.14 683.632 L1308.58 683.632 L1308.02 683.632 L1307.46 683.632 L1306.9 683.632 L1306.34 683.632 L1305.78 683.632 L1305.22 683.632 L1304.66 683.632 L1304.1 683.632 L1303.55 683.632 L1302.99 683.632 L1302.43 683.632 L1301.87 683.632 L1301.31 683.632 L1300.75 683.632 L1300.19 683.632 L1299.63 683.632 L1299.07 683.632 L1298.51 683.632 L1297.95 683.632 L1297.39 683.632 L1296.83 683.632 L1296.28 683.632 L1295.72 683.632 L1295.16 683.632 L1294.6 683.632 L1294.04 683.632 L1293.48 683.632 L1292.92 683.632 L1292.36 683.632 L1291.8 683.632 L1291.24 683.632 L1290.68 683.632 L1290.12 683.632 L1289.56 683.632 L1289 683.632 L1288.45 683.632 L1287.89 683.632 L1287.33 683.632 L1286.77 683.632 L1286.21 683.632 L1285.65 683.632 L1285.09 683.632 L1284.53 683.632 L1283.97 683.632 L1283.41 683.632 L1282.85 683.632 L1282.29 683.632 L1281.73 683.632 L1281.18 683.632 L1280.62 683.632 L1280.06 683.632 L1279.5 683.632 L1278.94 683.632 L1278.38 683.632 L1277.82 683.632 L1277.26 683.632 L1276.7 683.632 L1276.14 683.632 L1275.58 683.632 L1275.02 683.632 L1274.46 683.632 L1273.91 683.632 L1273.35 683.632 L1272.79 683.632 L1272.23 683.632 L1271.67 683.632 L1271.11 683.632 L1270.55 683.632 L1269.99 683.632 L1269.43 683.632 L1268.87 683.632 L1268.31 683.632 L1267.75 683.632 L1267.19 683.632 L1266.63 683.632 L1266.08 683.632 L1265.52 683.632 L1264.96 683.632 L1264.4 683.632 L1263.84 683.632 L1263.28 683.632 L1262.72 683.632 L1262.16 683.632 L1261.6 683.632 L1261.04 683.632 L1260.48 683.632 L1259.92 683.632 L1259.36 683.632 L1258.81 683.632 L1258.25 683.632 L1257.69 683.632 L1257.13 683.632 L1256.57 683.632 L1256.01 683.632 L1255.45 683.632 L1254.89 683.632 L1254.33 683.632 L1253.77 683.632 L1253.21 683.632 L1252.65 683.632 L1252.09 683.632 L1251.54 683.632 L1250.98 683.632 L1250.42 683.632 L1249.86 683.632 L1249.3 683.632 L1248.74 683.632 L1248.18 683.632 L1247.62 683.632 L1247.06 683.632 L1246.5 683.632 L1245.94 683.632 L1245.38 683.632 L1244.82 683.632 L1244.26 683.632 L1243.71 683.632 L1243.15 683.632 L1242.59 683.632 L1242.03 683.632 L1241.47 683.632 L1240.91 683.632 L1240.35 683.632 L1239.79 683.632 L1239.23 683.632 L1238.67 683.632 L1238.11 683.632 L1237.55 683.632 L1236.99 683.632 L1236.44 683.632 L1235.88 683.632 L1235.32 683.632 L1234.76 683.632 L1234.2 683.632 L1233.64 683.632 L1233.08 683.632 L1232.52 683.632 L1231.96 683.632 L1231.4 683.632 L1230.84 683.632 L1230.28 683.632 L1229.72 683.632 L1229.17 683.632 L1228.61 683.632 L1228.05 683.632 L1227.49 683.632 L1226.93 683.632 L1226.37 683.632 L1225.81 683.632 L1225.25 683.632 L1224.69 683.632 L1224.13 683.632 L1223.57 683.632 L1223.01 683.632 L1222.45 683.632 L1221.89 683.632 L1221.34 683.632 L1220.78 683.632 L1220.22 683.632 L1219.66 683.632 L1219.1 683.632 L1218.54 683.632 L1217.98 683.632 L1217.42 683.632 L1216.86 683.632 L1216.3 683.632 L1215.74 683.632 L1215.18 683.632 L1214.62 683.632 L1214.07 683.632 L1213.51 683.632 L1212.95 683.632 L1212.39 683.632 L1211.83 683.632 L1211.27 683.632 L1210.71 683.632 L1210.15 683.632 L1209.59 683.632 L1209.03 683.632 L1208.47 683.632 L1207.91 683.632 L1207.35 683.632 L1206.8 683.632 L1206.24 683.632 L1205.68 683.632 L1205.12 683.632 L1204.56 683.632 L1204 683.632 L1203.44 683.632 L1202.88 683.632 L1202.32 683.632 L1201.76 683.632 L1201.2 683.632 L1200.64 683.632 L1200.08 683.632 L1199.52 683.632 L1198.97 683.632 L1198.41 683.632 L1197.85 683.632 L1197.29 683.632 L1196.73 683.632 L1196.17 683.632 L1195.61 683.632 L1195.05 683.632 L1194.49 683.632 L1193.93 683.632 L1193.37 683.632 L1192.81 683.632 L1192.25 683.632 L1191.7 683.632 L1191.14 683.632 L1190.58 683.632 L1190.02 683.632 L1189.46 683.632 L1188.9 683.632 L1188.34 683.632 L1187.78 683.632 L1187.22 683.632 L1186.66 683.632 L1186.1 683.632 L1185.54 683.632 L1184.98 683.632 L1184.43 683.632 L1183.87 683.632 L1183.31 683.632 L1182.75 683.632 L1182.19 683.632 L1181.63 683.632 L1181.07 683.632 L1180.51 683.632 L1179.95 683.632 L1179.39 683.632 L1178.83 683.632 L1178.27 683.632 L1177.71 683.632 L1177.15 683.632 L1176.6 683.632 L1176.04 683.632 L1175.48 683.632 L1174.92 683.632 L1174.36 683.632 L1173.8 683.632 L1173.24 683.632 L1172.68 683.632 L1172.12 683.632 L1171.56 683.632 L1171 683.632 L1170.44 683.632 L1169.88 683.632 L1169.33 683.632 L1168.77 683.632 L1168.21 683.632 L1167.65 683.632 L1167.09 683.632 L1166.53 683.632 L1165.97 683.632 L1165.41 683.632 L1164.85 683.632 L1164.29 683.632 L1163.73 683.632 L1163.17 683.632 L1162.61 683.632 L1162.05 683.632 L1161.5 683.632 L1160.94 683.632 L1160.38 683.632 L1159.82 683.632 L1159.26 683.632 L1158.7 683.632 L1158.14 683.632 L1157.58 683.632 L1157.02 683.632 L1156.46 683.632 L1155.9 683.632 L1155.34 683.632 L1154.78 683.632 L1154.23 683.632 L1153.67 683.632 L1153.11 683.632 L1152.55 683.632 L1151.99 683.632 L1151.43 683.632 L1150.87 683.632 L1150.31 683.632 L1149.75 683.632 L1149.19 683.632 L1148.63 683.632 L1148.07 683.632 L1147.51 683.632 L1146.96 683.632 L1146.4 683.632 L1145.84 683.632 L1145.28 683.632 L1144.72 683.632 L1144.16 683.632 L1143.6 683.632 L1143.04 683.632 L1142.48 683.632 L1141.92 683.632 L1141.36 683.632 L1140.8 683.632 L1140.24 683.632 L1139.68 683.632 L1139.13 683.632 L1138.57 683.632 L1138.01 683.632 L1137.45 683.632 L1136.89 683.632 L1136.33 683.632 L1135.77 683.632 L1135.21 683.632 L1134.65 683.632 L1134.09 683.632 L1133.53 683.632 L1132.97 683.632 L1132.41 683.632 L1131.86 683.632 L1131.3 683.632 L1130.74 683.632 L1130.18 683.632 L1129.62 683.632 L1129.06 683.632 L1128.5 683.632 L1127.94 683.632 L1127.38 683.632 L1126.82 683.632 L1126.26 683.632 L1125.7 683.632 L1125.14 683.632 L1124.59 683.632 L1124.03 683.632 L1123.47 683.632 L1122.91 683.632 L1122.35 683.632 L1121.79 683.632 L1121.23 683.632 L1120.67 683.632 L1120.11 683.632 L1119.55 683.632 L1118.99 683.632 L1118.43 683.632 L1117.87 683.632 L1117.31 683.632 L1116.76 683.632 L1116.2 683.632 L1115.64 683.632 L1115.08 683.632 L1114.52 683.632 L1113.96 683.632 L1113.4 683.632 L1112.84 683.632 L1112.28 683.632 L1111.72 683.632 L1111.16 683.632 L1110.6 683.632 L1110.04 683.632 L1109.49 683.632 L1108.93 683.632 L1108.37 683.632 L1107.81 683.632 L1107.25 683.632 L1106.69 683.632 L1106.13 683.632 L1105.57 683.632 L1105.01 683.632 L1104.45 683.632 L1103.89 683.632 L1103.33 683.632 L1102.77 683.632 L1102.22 683.632 L1101.66 683.632 L1101.1 683.632 L1100.54 683.632 L1099.98 683.632 L1099.42 683.632 L1098.86 683.632 L1098.3 683.632 L1097.74 683.632 L1097.18 683.632 L1096.62 683.632 L1096.06 683.632 L1095.5 683.632 L1094.94 683.632 L1094.39 683.632 L1093.83 683.632 L1093.27 683.632 L1092.71 683.632 L1092.15 683.632 L1091.59 683.632 L1091.03 683.632 L1090.47 683.632 L1089.91 683.632 L1089.35 683.632 L1088.79 683.632 L1088.23 683.632 L1087.67 683.632 L1087.12 683.632 L1086.56 683.632 L1086 683.632 L1085.44 683.632 L1084.88 683.632 L1084.32 683.632 L1083.76 683.632 L1083.2 683.632 L1082.64 683.632 L1082.08 683.632 L1081.52 683.632 L1080.96 683.632 L1080.4 683.632 L1079.85 683.632 L1079.29 683.632 L1078.73 683.632 L1078.17 683.632 L1077.61 683.632 L1077.05 683.632 L1076.49 683.632 L1075.93 683.632 L1075.37 683.632 L1074.81 683.632 L1074.25 683.632 L1073.69 683.632 L1073.13 683.632 L1072.57 683.632 L1072.02 683.632 L1071.46 683.632 L1070.9 683.632 L1070.34 683.632 L1069.78 683.632 L1069.22 683.632 L1068.66 683.632 L1068.1 683.632 L1067.54 683.632 L1066.98 683.632 L1066.42 683.632 L1065.86 683.632 L1065.3 683.632 L1064.75 683.632 L1064.19 683.632 L1063.63 683.632 L1063.07 683.632 L1062.51 683.632 L1061.95 683.632 L1061.39 683.632 L1060.83 683.632 L1060.27 683.632 L1059.71 683.632 L1059.15 683.632 L1058.59 683.632 L1058.03 683.632 L1057.48 683.632 L1056.92 683.632 L1056.36 683.632 L1055.8 683.632 L1055.24 683.632 L1054.68 683.632 L1054.12 683.632 L1053.56 683.632 L1053 683.632 L1052.44 683.632 L1051.88 683.632 L1051.32 683.632 L1050.76 683.632 L1050.2 683.632 L1049.65 683.632 L1049.09 683.632 L1048.53 683.632 L1047.97 683.632 L1047.41 683.632 L1046.85 683.632 L1046.29 683.632 L1045.73 683.632 L1045.17 683.632 L1044.61 683.632 L1044.05 683.632 L1043.49 683.632 L1042.93 683.632 L1042.38 683.632 L1041.82 683.632 L1041.26 683.632 L1040.7 683.632 L1040.14 683.632 L1039.58 683.632 L1039.02 683.632 L1038.46 683.632 L1037.9 683.632 L1037.34 683.632 L1036.78 683.632 L1036.22 683.632 L1035.66 683.632 L1035.1 683.632 L1034.55 683.632 L1033.99 683.632 L1033.43 683.632 L1032.87 683.632 L1032.31 683.632 L1031.75 683.632 L1031.19 683.632 L1030.63 683.632 L1030.07 683.632 L1029.51 683.632 L1028.95 683.632 L1028.39 683.632 L1027.83 683.632 L1027.28 683.632 L1026.72 683.632 L1026.16 683.632 L1025.6 683.632 L1025.04 683.632 L1024.48 683.632 L1023.92 683.632 L1023.36 683.632 L1022.8 683.632 L1022.24 683.632 L1021.68 683.632 L1021.12 683.632 L1020.56 683.632 L1020.01 683.632 L1019.45 683.632 L1018.89 683.632 L1018.33 683.632 L1017.77 683.632 L1017.21 683.632 L1016.65 683.632 L1016.09 683.632 L1015.53 683.632 L1014.97 683.632 L1014.41 683.632 L1013.85 683.632 L1013.29 683.632 L1012.73 683.632 L1012.18 683.632 L1011.62 683.632 L1011.06 683.632 L1010.5 683.632 L1009.94 683.632 L1009.38 683.632 L1008.82 683.632 L1008.26 683.632 L1007.7 683.632 L1007.14 683.632 L1006.58 683.632 L1006.02 683.632 L1005.46 683.632 L1004.91 683.632 L1004.35 683.632 L1003.79 683.632 L1003.23 683.632 L1002.67 683.632 L1002.11 683.632 L1001.55 683.632 L1000.99 683.632 L1000.43 683.632 L999.872 683.632 L999.313 683.632 L998.754 683.632 L998.194 683.632 L997.635 683.632 L997.076 683.632 L996.517 683.632 L995.957 683.632 L995.398 683.632 L994.839 683.632 L994.28 683.632 L993.72 683.632 L993.161 683.632 L992.602 683.632 L992.043 683.632 L991.483 683.632 L990.924 683.632 L990.365 683.632 L989.806 683.632 L989.246 683.632 L988.687 683.632 L988.128 683.632 L987.569 683.632 L987.009 683.632 L986.45 683.632 L985.891 683.632 L985.332 683.632 L984.772 683.632 L984.213 683.632 L983.654 683.632 L983.095 683.632 L982.535 683.632 L981.976 683.632 L981.417 683.632 L980.858 683.632 L980.298 683.632 L979.739 683.632 L979.18 683.632 L978.621 683.632 L978.061 683.632 L977.502 683.632 L976.943 683.632 L976.384 683.632 L975.824 683.632 L975.265 683.632 L974.706 683.632 L974.147 683.632 L973.587 683.632 L973.028 683.632 L972.469 683.632 L971.91 683.632 L971.35 683.632 L970.791 683.632 L970.232 683.632 L969.673 683.632 L969.113 683.632 L968.554 683.632 L967.995 683.632 L967.436 683.632 L966.876 683.632 L966.317 683.632 L965.758 683.632 L965.199 683.632 L964.639 683.632 L964.08 683.632 L963.521 683.632 L962.962 683.632 L962.402 683.632 L961.843 683.632 L961.284 683.632 L960.725 683.632 L960.165 683.632 L959.606 683.632 L959.047 683.632 L958.488 683.632 L957.928 683.632 L957.369 683.632 L956.81 683.632 L956.251 683.632 L955.691 683.632 L955.132 683.632 L954.573 683.632 L954.014 683.632 L953.454 683.632 L952.895 683.632 L952.336 683.632 L951.777 683.632 L951.217 683.632 L950.658 683.632 L950.099 683.632 L949.54 683.632 L948.98 683.632 L948.421 683.632 L947.862 683.632 L947.303 683.632 L946.743 683.632 L946.184 683.632 L945.625 683.632 L945.066 683.632 L944.506 683.632 L943.947 683.632 L943.388 683.632 L942.829 683.632 L942.269 683.632 L941.71 683.632 L941.151 683.632 L940.592 683.632 L940.032 683.632 L939.473 683.632 L938.914 683.632 L938.355 683.632 L937.795 683.632 L937.236 683.632 L936.677 683.632 L936.118 683.632 L935.558 683.632 L934.999 683.632 L934.44 683.632 L933.881 683.632 L933.321 683.632 L932.762 683.632 L932.203 683.632 L931.644 683.632 L931.084 683.632 L930.525 683.632 L929.966 683.632 L929.406 683.632 L928.847 683.632 L928.288 683.632 L927.729 683.632 L927.169 683.632 L926.61 683.632 L926.051 683.632 L925.492 683.632 L924.932 683.632 L924.373 683.632 L923.814 683.632 L923.255 683.632 L922.695 683.632 L922.136 683.632 L921.577 683.632 L921.018 683.632 L920.458 683.632 L919.899 683.632 L919.34 683.632 L918.781 683.632 L918.221 683.632 L917.662 683.632 L917.103 683.632 L916.544 683.632 L915.984 683.632 L915.425 683.632 L914.866 683.632 L914.307 683.632 L913.747 683.632 L913.188 683.632 L912.629 683.632 L912.07 683.632 L911.51 683.632 L910.951 683.632 L910.392 683.632 L909.833 683.632 L909.273 683.632 L908.714 683.632 L908.155 683.632 L907.596 683.632 L907.036 683.632 L906.477 683.632 L905.918 683.632 L905.359 683.632 L904.799 683.632 L904.24 683.632 L903.681 683.632 L903.122 683.632 L902.562 683.632 L902.003 683.632 L901.444 683.632 L900.885 683.632 L900.325 683.632 L899.766 683.632 L899.207 683.632 L898.648 683.632 L898.088 683.632 L897.529 683.632 L896.97 683.632 L896.411 683.632 L895.851 683.632 L895.292 683.632 L894.733 683.632 L894.174 683.632 L893.614 683.632 L893.055 683.632 L892.496 683.632 L891.937 683.632 L891.377 683.632 L890.818 683.632 L890.259 683.632 L889.7 683.632 L889.14 683.632 L888.581 683.632 L888.022 683.632 L887.463 683.632 L886.903 683.632 L886.344 683.632 L885.785 683.632 L885.226 683.632 L884.666 683.632 L884.107 683.632 L883.548 683.632 L882.989 683.632 L882.429 683.632 L881.87 683.632 L881.311 683.632 L880.752 683.632 L880.192 683.632 L879.633 683.632 L879.074 683.632 L878.515 683.632 L877.955 683.632 L877.396 683.632 L876.837 683.632 L876.278 683.632 L875.718 683.632 L875.159 683.632 L874.6 683.632 L874.041 683.632 L873.481 683.632 L872.922 683.632 L872.363 683.632 L871.804 683.632 L871.244 683.632 L870.685 683.632 L870.126 683.632 L869.567 683.632 L869.007 683.632 L868.448 683.632 L867.889 683.632 L867.33 683.632 L866.77 683.632 L866.211 683.632 L865.652 683.632 L865.093 683.632 L864.533 683.632 L863.974 683.632 L863.415 683.632 L862.856 683.632 L862.296 683.632 L861.737 683.632 L861.178 683.632 L860.619 683.632 L860.059 683.632 L859.5 683.632 L858.941 683.632 L858.382 683.632 L857.822 683.632 L857.263 683.632 L856.704 683.632 L856.145 683.632 L855.585 683.632 L855.026 683.632 L854.467 683.632 L853.908 683.632 L853.348 683.632 L852.789 683.632 L852.23 683.632 L851.671 683.632 L851.111 683.632 L850.552 683.632 L849.993 683.632 L849.434 683.632 L848.874 683.632 L848.315 683.632 L847.756 683.632 L847.197 683.632 L846.637 683.632 L846.078 683.632 L845.519 683.632 L844.96 683.632 L844.4 683.632 L843.841 683.632 L843.282 683.632 L842.723 683.632 L842.163 683.632 L841.604 683.632 L841.045 683.632 L840.486 683.632 L839.926 683.632 L839.367 683.632 L838.808 683.632 L838.249 683.632 L837.689 683.632 L837.13 683.632 L836.571 683.632 L836.012 683.632 L835.452 683.632 L834.893 683.632 L834.334 683.632 L833.775 683.632 L833.215 683.632 L832.656 683.632 L832.097 683.632 L831.538 683.632 L830.978 683.632 L830.419 683.632 L829.86 683.632 L829.301 683.632 L828.741 683.632 L828.182 683.632 L827.623 683.632 L827.064 683.632 L826.504 683.632 L825.945 683.632 L825.386 683.632 L824.827 683.632 L824.267 683.632 L823.708 683.632 L823.149 683.632 L822.59 683.632 L822.03 683.632 L821.471 683.632 L820.912 683.632 L820.353 683.632 L819.793 683.632 L819.234 683.632 L818.675 683.632 L818.116 683.632 L817.556 683.632 L816.997 683.632 L816.438 683.632 L815.879 683.632 L815.319 683.632 L814.76 683.632 L814.201 683.632 L813.642 683.632 L813.082 683.632 L812.523 683.632 L811.964 683.632 L811.405 683.632 L810.845 683.632 L810.286 683.632 L809.727 683.632 L809.168 683.632 L808.608 683.632 L808.049 683.632 L807.49 683.632 L806.931 683.632 L806.371 683.632 L805.812 683.632 L805.253 683.632 L804.693 683.632 L804.134 683.632 L803.575 683.632 L803.016 683.632 L802.456 683.632 L801.897 683.632 L801.338 683.632 L800.779 683.632 L800.219 683.632 L799.66 683.632 L799.101 683.632 L798.542 683.632 L797.982 683.632 L797.423 683.632 L796.864 683.632 L796.305 683.632 L795.745 683.632 L795.186 683.632 L794.627 683.632 L794.068 683.632 L793.508 683.632 L792.949 683.632 L792.39 683.632 L791.831 683.632 L791.271 683.632 L790.712 683.632 L790.153 683.632 L789.594 683.632 L789.034 683.632 L788.475 683.632 L787.916 683.632 L787.357 683.632 L786.797 683.632 L786.238 683.632 L785.679 683.632 L785.12 683.632 L784.56 683.632 L784.001 683.632 L783.442 683.632 L782.883 683.632 L782.323 683.632 L781.764 683.632 L781.205 683.632 L780.646 683.632 L780.086 683.632 L779.527 683.632 L778.968 683.632 L778.409 683.632 L777.849 683.632 L777.29 683.632 L776.731 683.632 L776.172 683.632 L775.612 683.632 L775.053 683.632 L774.494 683.632 L773.935 683.632 L773.375 683.632 L772.816 683.632 L772.257 683.632 L771.698 683.632 L771.138 683.632 L770.579 683.632 L770.02 683.632 L769.461 683.632 L768.901 683.632 L768.342 683.632 L767.783 683.632 L767.224 683.632 L766.664 683.632 L766.105 683.632 L765.546 683.632 L764.987 683.632 L764.427 683.632 L763.868 683.632 L763.309 683.632 L762.75 683.632 L762.19 683.632 L761.631 683.632 L761.072 683.632 L760.513 683.632 L759.953 683.632 L759.394 683.632 L758.835 683.632 L758.276 683.632 L757.716 683.632 L757.157 683.632 L756.598 683.632 L756.039 683.632 L755.479 683.632 L754.92 683.632 L754.361 683.632 L753.802 683.632 L753.242 683.632 L752.683 683.632 L752.124 683.632 L751.565 683.632 L751.005 683.632 L750.446 683.632 L749.887 683.632 L749.328 683.632 L748.768 683.632 L748.209 683.632 L747.65 683.632 L747.091 683.632 L746.531 683.632 L745.972 683.632 L745.413 683.632 L744.854 683.632 L744.294 683.632 L743.735 683.632 L743.176 683.632 L742.617 683.632 L742.057 683.632 L741.498 683.632 L740.939 683.632 L740.38 683.632 L739.82 683.632 L739.261 683.632 L738.702 683.632 L738.143 683.632 L737.583 683.632 L737.024 683.632 L736.465 683.632 L735.906 683.632 L735.346 683.632 L734.787 683.632 L734.228 683.632 L733.669 683.632 L733.109 683.632 L732.55 683.632 L731.991 683.632 L731.432 683.632 L730.872 683.632 L730.313 683.632 L729.754 683.632 L729.195 683.632 L728.635 683.632 L728.076 683.632 L727.517 683.632 L726.958 683.632 L726.398 683.632 L725.839 683.632 L725.28 683.632 L724.721 683.632 L724.161 683.632 L723.602 683.632 L723.043 683.632 L722.484 683.632 L721.924 683.632 L721.365 683.632 L720.806 683.632 L720.247 683.632  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,688.066 720.806,688.066 721.365,688.066 721.924,688.066 722.484,688.066 723.043,688.066 723.602,688.066 724.161,688.066 724.721,688.066 725.28,688.066 725.839,688.066 726.398,688.066 726.958,688.066 727.517,688.066 728.076,688.066 728.635,688.066 729.195,688.066 729.754,688.066 730.313,688.066 730.872,688.066 731.432,688.066 731.991,688.066 732.55,688.066 733.109,688.066 733.669,688.066 734.228,688.066 734.787,688.066 735.346,688.066 735.906,688.066 736.465,688.066 737.024,688.066 737.583,688.066 738.143,688.066 738.702,688.066 739.261,688.066 739.82,688.066 740.38,688.066 740.939,688.066 741.498,688.066 742.057,688.066 742.617,688.066 743.176,688.066 743.735,688.066 744.294,688.066 744.854,688.066 745.413,688.066 745.972,688.066 746.531,688.066 747.091,688.066 747.65,688.066 748.209,688.066 748.768,688.066 749.328,688.066 749.887,688.066 750.446,688.066 751.005,688.066 751.565,688.066 752.124,688.066 752.683,688.066 753.242,688.066 753.802,688.066 754.361,688.066 754.92,688.066 755.479,688.066 756.039,688.066 756.598,688.066 757.157,688.066 757.716,688.066 758.276,688.066 758.835,688.066 759.394,688.066 759.953,688.066 760.513,688.066 761.072,688.066 761.631,688.066 762.19,688.066 762.75,688.066 763.309,688.066 763.868,688.066 764.427,688.066 764.987,688.066 765.546,688.066 766.105,688.066 766.664,688.066 767.224,688.066 767.783,688.066 768.342,688.066 768.901,688.066 769.461,688.066 770.02,688.066 770.579,688.066 771.138,688.066 771.698,688.066 772.257,688.066 772.816,688.066 773.375,688.066 773.935,688.066 774.494,688.066 775.053,688.066 775.612,688.066 776.172,688.066 776.731,688.066 777.29,688.066 777.849,688.066 778.409,688.066 778.968,688.066 779.527,688.066 780.086,688.066 780.646,688.066 781.205,688.066 781.764,688.066 782.323,688.066 782.883,688.066 783.442,688.066 784.001,688.066 784.56,688.066 785.12,688.066 785.679,688.066 786.238,688.066 786.797,688.066 787.357,688.066 787.916,688.066 788.475,688.066 789.034,688.066 789.594,688.066 790.153,688.066 790.712,688.066 791.271,688.066 791.831,688.066 792.39,688.066 792.949,688.066 793.508,688.066 794.068,688.066 794.627,688.066 795.186,688.066 795.745,688.066 796.305,688.066 796.864,688.066 797.423,688.066 797.982,688.066 798.542,688.066 799.101,688.066 799.66,688.066 800.219,688.066 800.779,688.066 801.338,688.066 801.897,688.066 802.456,688.066 803.016,688.066 803.575,688.066 804.134,688.066 804.693,688.066 805.253,688.066 805.812,688.066 806.371,688.066 806.931,688.066 807.49,688.066 808.049,688.066 808.608,688.066 809.168,688.066 809.727,688.066 810.286,688.066 810.845,688.066 811.405,688.066 811.964,688.066 812.523,688.066 813.082,688.066 813.642,688.066 814.201,688.066 814.76,688.066 815.319,688.066 815.879,688.066 816.438,688.066 816.997,688.066 817.556,688.066 818.116,688.066 818.675,688.066 819.234,688.066 819.793,688.066 820.353,688.066 820.912,688.066 821.471,688.066 822.03,688.066 822.59,688.066 823.149,688.066 823.708,688.066 824.267,688.066 824.827,688.066 825.386,688.066 825.945,688.066 826.504,688.066 827.064,688.066 827.623,688.066 828.182,688.066 828.741,688.066 829.301,688.066 829.86,688.066 830.419,688.066 830.978,688.066 831.538,688.066 832.097,688.066 832.656,688.066 833.215,688.066 833.775,688.066 834.334,688.066 834.893,688.066 835.452,688.066 836.012,688.066 836.571,688.066 837.13,688.066 837.689,688.066 838.249,688.066 838.808,688.066 839.367,688.066 839.926,688.066 840.486,688.066 841.045,688.066 841.604,688.066 842.163,688.066 842.723,688.066 843.282,688.066 843.841,688.066 844.4,688.066 844.96,688.066 845.519,688.066 846.078,688.066 846.637,688.066 847.197,688.066 847.756,688.066 848.315,688.066 848.874,688.066 849.434,688.066 849.993,688.066 850.552,688.066 851.111,688.066 851.671,688.066 852.23,688.066 852.789,688.066 853.348,688.066 853.908,688.066 854.467,688.066 855.026,688.066 855.585,688.066 856.145,688.066 856.704,688.066 857.263,688.066 857.822,688.066 858.382,688.066 858.941,688.066 859.5,688.066 860.059,688.066 860.619,688.066 861.178,688.066 861.737,688.066 862.296,688.066 862.856,688.066 863.415,688.066 863.974,688.066 864.533,688.066 865.093,688.066 865.652,688.066 866.211,688.066 866.77,688.066 867.33,688.066 867.889,688.066 868.448,688.066 869.007,688.066 869.567,688.066 870.126,688.066 870.685,688.066 871.244,688.066 871.804,688.066 872.363,688.066 872.922,688.066 873.481,688.066 874.041,688.066 874.6,688.066 875.159,688.066 875.718,688.066 876.278,688.066 876.837,688.066 877.396,688.066 877.955,688.066 878.515,688.066 879.074,688.066 879.633,688.066 880.192,688.066 880.752,688.066 881.311,688.066 881.87,688.066 882.429,688.066 882.989,688.066 883.548,688.066 884.107,688.066 884.666,688.066 885.226,688.066 885.785,688.066 886.344,688.066 886.903,688.066 887.463,688.066 888.022,688.066 888.581,688.066 889.14,688.066 889.7,688.066 890.259,688.066 890.818,688.066 891.377,688.066 891.937,688.066 892.496,688.066 893.055,688.066 893.614,688.066 894.174,688.066 894.733,688.066 895.292,688.066 895.851,688.066 896.411,688.066 896.97,688.066 897.529,688.066 898.088,688.066 898.648,688.066 899.207,688.066 899.766,688.066 900.325,688.066 900.885,688.066 901.444,688.066 902.003,688.066 902.562,688.066 903.122,688.066 903.681,688.066 904.24,688.066 904.799,688.066 905.359,688.066 905.918,688.066 906.477,688.066 907.036,688.066 907.596,688.066 908.155,688.066 908.714,688.066 909.273,688.066 909.833,688.066 910.392,688.066 910.951,688.066 911.51,688.066 912.07,688.066 912.629,688.066 913.188,688.066 913.747,688.066 914.307,688.066 914.866,688.066 915.425,688.066 915.984,688.066 916.544,688.066 917.103,688.066 917.662,688.066 918.221,688.066 918.781,688.066 919.34,688.066 919.899,688.066 920.458,688.066 921.018,688.066 921.577,688.066 922.136,688.066 922.695,688.066 923.255,688.066 923.814,688.066 924.373,688.066 924.932,688.066 925.492,688.066 926.051,688.066 926.61,688.066 927.169,688.066 927.729,688.066 928.288,688.066 928.847,688.066 929.406,688.066 929.966,688.066 930.525,688.066 931.084,688.066 931.644,688.066 932.203,688.066 932.762,688.066 933.321,688.066 933.881,688.066 934.44,688.066 934.999,688.066 935.558,688.066 936.118,688.066 936.677,688.066 937.236,688.066 937.795,688.066 938.355,688.066 938.914,688.066 939.473,688.066 940.032,688.066 940.592,688.066 941.151,688.066 941.71,688.066 942.269,688.066 942.829,688.066 943.388,688.066 943.947,688.066 944.506,688.066 945.066,688.066 945.625,688.066 946.184,688.066 946.743,688.066 947.303,688.066 947.862,688.066 948.421,688.066 948.98,688.066 949.54,688.066 950.099,688.066 950.658,688.066 951.217,688.066 951.777,688.066 952.336,688.066 952.895,688.066 953.454,688.066 954.014,688.066 954.573,688.066 955.132,688.066 955.691,688.066 956.251,688.066 956.81,688.066 957.369,688.066 957.928,688.066 958.488,688.066 959.047,688.066 959.606,688.066 960.165,688.066 960.725,688.066 961.284,688.066 961.843,688.066 962.402,688.066 962.962,688.066 963.521,688.066 964.08,688.066 964.639,688.066 965.199,688.066 965.758,688.066 966.317,688.066 966.876,688.066 967.436,688.066 967.995,688.066 968.554,688.066 969.113,688.066 969.673,688.066 970.232,688.066 970.791,688.066 971.35,688.066 971.91,688.066 972.469,688.066 973.028,688.066 973.587,688.066 974.147,688.066 974.706,688.066 975.265,688.066 975.824,688.066 976.384,688.066 976.943,688.066 977.502,688.066 978.061,688.066 978.621,688.066 979.18,688.066 979.739,688.066 980.298,688.066 980.858,688.066 981.417,688.066 981.976,688.066 982.535,688.066 983.095,688.066 983.654,688.066 984.213,688.066 984.772,688.066 985.332,688.066 985.891,688.066 986.45,688.066 987.009,688.066 987.569,688.066 988.128,688.066 988.687,688.066 989.246,688.066 989.806,688.066 990.365,688.066 990.924,688.066 991.483,688.066 992.043,688.066 992.602,688.066 993.161,688.066 993.72,688.066 994.28,688.066 994.839,688.066 995.398,688.066 995.957,688.066 996.517,688.066 997.076,688.066 997.635,688.066 998.194,688.066 998.754,688.066 999.313,688.066 999.872,688.066 1000.43,688.066 1000.99,688.066 1001.55,688.066 1002.11,688.066 1002.67,688.066 1003.23,688.066 1003.79,688.066 1004.35,688.066 1004.91,688.066 1005.46,688.066 1006.02,688.066 1006.58,688.066 1007.14,688.066 1007.7,688.066 1008.26,688.066 1008.82,688.066 1009.38,688.066 1009.94,688.066 1010.5,688.066 1011.06,688.066 1011.62,688.066 1012.18,688.066 1012.73,688.066 1013.29,688.066 1013.85,688.066 1014.41,688.066 1014.97,688.066 1015.53,688.066 1016.09,688.066 1016.65,688.066 1017.21,688.066 1017.77,688.066 1018.33,688.066 1018.89,688.066 1019.45,688.066 1020.01,688.066 1020.56,688.066 1021.12,688.066 1021.68,688.066 1022.24,688.066 1022.8,688.066 1023.36,688.066 1023.92,688.066 1024.48,688.066 1025.04,688.066 1025.6,688.066 1026.16,688.066 1026.72,688.066 1027.28,688.066 1027.83,688.066 1028.39,688.066 1028.95,688.066 1029.51,688.066 1030.07,688.066 1030.63,688.066 1031.19,688.066 1031.75,688.066 1032.31,688.066 1032.87,688.066 1033.43,688.066 1033.99,688.066 1034.55,688.066 1035.1,688.066 1035.66,688.066 1036.22,688.066 1036.78,688.066 1037.34,688.066 1037.9,688.066 1038.46,688.066 1039.02,688.066 1039.58,688.066 1040.14,688.066 1040.7,688.066 1041.26,688.066 1041.82,688.066 1042.38,688.066 1042.93,688.066 1043.49,688.066 1044.05,688.066 1044.61,688.066 1045.17,688.066 1045.73,688.066 1046.29,688.066 1046.85,688.066 1047.41,688.066 1047.97,688.066 1048.53,688.066 1049.09,688.066 1049.65,688.066 1050.2,688.066 1050.76,688.066 1051.32,688.066 1051.88,688.066 1052.44,688.066 1053,688.066 1053.56,688.066 1054.12,688.066 1054.68,688.066 1055.24,688.066 1055.8,688.066 1056.36,688.066 1056.92,688.066 1057.48,688.066 1058.03,688.066 1058.59,688.066 1059.15,688.066 1059.71,688.066 1060.27,688.066 1060.83,688.066 1061.39,688.066 1061.95,688.066 1062.51,688.066 1063.07,688.066 1063.63,688.066 1064.19,688.066 1064.75,688.066 1065.3,688.066 1065.86,688.066 1066.42,688.066 1066.98,688.066 1067.54,688.066 1068.1,688.066 1068.66,688.066 1069.22,688.066 1069.78,688.066 1070.34,688.066 1070.9,688.066 1071.46,688.066 1072.02,688.066 1072.57,688.066 1073.13,688.066 1073.69,688.066 1074.25,688.066 1074.81,688.066 1075.37,688.066 1075.93,688.066 1076.49,688.066 1077.05,688.066 1077.61,688.066 1078.17,688.066 1078.73,688.066 1079.29,688.066 1079.85,688.066 1080.4,688.066 1080.96,688.066 1081.52,688.066 1082.08,688.066 1082.64,688.066 1083.2,688.066 1083.76,688.066 1084.32,688.066 1084.88,688.066 1085.44,688.066 1086,688.066 1086.56,688.066 1087.12,688.066 1087.67,688.066 1088.23,688.066 1088.79,688.066 1089.35,688.066 1089.91,688.066 1090.47,688.066 1091.03,688.066 1091.59,688.066 1092.15,688.066 1092.71,688.066 1093.27,688.066 1093.83,688.066 1094.39,688.066 1094.94,688.066 1095.5,688.066 1096.06,688.066 1096.62,688.066 1097.18,688.066 1097.74,688.066 1098.3,688.066 1098.86,688.066 1099.42,688.066 1099.98,688.066 1100.54,688.066 1101.1,688.066 1101.66,688.066 1102.22,688.066 1102.77,688.066 1103.33,688.066 1103.89,688.066 1104.45,688.066 1105.01,688.066 1105.57,688.066 1106.13,688.066 1106.69,688.066 1107.25,688.066 1107.81,688.066 1108.37,688.066 1108.93,688.066 1109.49,688.066 1110.04,688.066 1110.6,688.066 1111.16,688.066 1111.72,688.066 1112.28,688.066 1112.84,688.066 1113.4,688.066 1113.96,688.066 1114.52,688.066 1115.08,688.066 1115.64,688.066 1116.2,688.066 1116.76,688.066 1117.31,688.066 1117.87,688.066 1118.43,688.066 1118.99,688.066 1119.55,688.066 1120.11,688.066 1120.67,688.066 1121.23,688.066 1121.79,688.066 1122.35,688.066 1122.91,688.066 1123.47,688.066 1124.03,688.066 1124.59,688.066 1125.14,688.066 1125.7,688.066 1126.26,688.066 1126.82,688.066 1127.38,688.066 1127.94,688.066 1128.5,688.066 1129.06,688.066 1129.62,688.066 1130.18,688.066 1130.74,688.066 1131.3,688.066 1131.86,688.066 1132.41,688.066 1132.97,688.066 1133.53,688.066 1134.09,688.066 1134.65,688.066 1135.21,688.066 1135.77,688.066 1136.33,688.066 1136.89,688.066 1137.45,688.066 1138.01,688.066 1138.57,688.066 1139.13,688.066 1139.68,688.066 1140.24,688.066 1140.8,688.066 1141.36,688.066 1141.92,688.066 1142.48,688.066 1143.04,688.066 1143.6,688.066 1144.16,688.066 1144.72,688.066 1145.28,688.066 1145.84,688.066 1146.4,688.066 1146.96,688.066 1147.51,688.066 1148.07,688.066 1148.63,688.066 1149.19,688.066 1149.75,688.066 1150.31,688.066 1150.87,688.066 1151.43,688.066 1151.99,688.066 1152.55,688.066 1153.11,688.066 1153.67,688.066 1154.23,688.066 1154.78,688.066 1155.34,688.066 1155.9,688.066 1156.46,688.066 1157.02,688.066 1157.58,688.066 1158.14,688.066 1158.7,688.066 1159.26,688.066 1159.82,688.066 1160.38,688.066 1160.94,688.066 1161.5,688.066 1162.05,688.066 1162.61,688.066 1163.17,688.066 1163.73,688.066 1164.29,688.066 1164.85,688.066 1165.41,688.066 1165.97,688.066 1166.53,688.066 1167.09,688.066 1167.65,688.066 1168.21,688.066 1168.77,688.066 1169.33,688.066 1169.88,688.066 1170.44,688.066 1171,688.066 1171.56,688.066 1172.12,688.066 1172.68,688.066 1173.24,688.066 1173.8,688.066 1174.36,688.066 1174.92,688.066 1175.48,688.066 1176.04,688.066 1176.6,688.066 1177.15,688.066 1177.71,688.066 1178.27,688.066 1178.83,688.066 1179.39,688.066 1179.95,688.066 1180.51,688.066 1181.07,688.066 1181.63,688.066 1182.19,688.066 1182.75,688.066 1183.31,688.066 1183.87,688.066 1184.43,688.066 1184.98,688.066 1185.54,688.066 1186.1,688.066 1186.66,688.066 1187.22,688.066 1187.78,688.066 1188.34,688.066 1188.9,688.066 1189.46,688.066 1190.02,688.066 1190.58,688.066 1191.14,688.066 1191.7,688.066 1192.25,688.066 1192.81,688.066 1193.37,688.066 1193.93,688.066 1194.49,688.066 1195.05,688.066 1195.61,688.066 1196.17,688.066 1196.73,688.066 1197.29,688.066 1197.85,688.066 1198.41,688.066 1198.97,688.066 1199.52,688.066 1200.08,688.066 1200.64,688.066 1201.2,688.066 1201.76,688.066 1202.32,688.066 1202.88,688.066 1203.44,688.066 1204,688.066 1204.56,688.066 1205.12,688.066 1205.68,688.066 1206.24,688.066 1206.8,688.066 1207.35,688.066 1207.91,688.066 1208.47,688.066 1209.03,688.066 1209.59,688.066 1210.15,688.066 1210.71,688.066 1211.27,688.066 1211.83,688.066 1212.39,688.066 1212.95,688.066 1213.51,688.066 1214.07,688.066 1214.62,688.066 1215.18,688.066 1215.74,688.066 1216.3,688.066 1216.86,688.066 1217.42,688.066 1217.98,688.066 1218.54,688.066 1219.1,688.066 1219.66,688.066 1220.22,688.066 1220.78,688.066 1221.34,688.066 1221.89,688.066 1222.45,688.066 1223.01,688.066 1223.57,688.066 1224.13,688.066 1224.69,688.066 1225.25,688.066 1225.81,688.066 1226.37,688.066 1226.93,688.066 1227.49,688.066 1228.05,688.066 1228.61,688.066 1229.17,688.066 1229.72,688.066 1230.28,688.066 1230.84,688.066 1231.4,688.066 1231.96,688.066 1232.52,688.066 1233.08,688.066 1233.64,688.066 1234.2,688.066 1234.76,688.066 1235.32,688.066 1235.88,688.066 1236.44,688.066 1236.99,688.066 1237.55,688.066 1238.11,688.066 1238.67,688.066 1239.23,688.066 1239.79,688.066 1240.35,688.066 1240.91,688.066 1241.47,688.066 1242.03,688.066 1242.59,688.066 1243.15,688.066 1243.71,688.066 1244.26,688.066 1244.82,688.066 1245.38,688.066 1245.94,688.066 1246.5,688.066 1247.06,688.066 1247.62,688.066 1248.18,688.066 1248.74,688.066 1249.3,688.066 1249.86,688.066 1250.42,688.066 1250.98,688.066 1251.54,688.066 1252.09,688.066 1252.65,688.066 1253.21,688.066 1253.77,688.066 1254.33,688.066 1254.89,688.066 1255.45,688.066 1256.01,688.066 1256.57,688.066 1257.13,688.066 1257.69,688.066 1258.25,688.066 1258.81,688.066 1259.36,688.066 1259.92,688.066 1260.48,688.066 1261.04,688.066 1261.6,688.066 1262.16,688.066 1262.72,688.066 1263.28,688.066 1263.84,688.066 1264.4,688.066 1264.96,688.066 1265.52,688.066 1266.08,688.066 1266.63,688.066 1267.19,688.066 1267.75,688.066 1268.31,688.066 1268.87,688.066 1269.43,688.066 1269.99,688.066 1270.55,688.066 1271.11,688.066 1271.67,688.066 1272.23,688.066 1272.79,688.066 1273.35,688.066 1273.91,688.066 1274.46,688.066 1275.02,688.066 1275.58,688.066 1276.14,688.066 1276.7,688.066 1277.26,688.066 1277.82,688.066 1278.38,688.066 1278.94,688.066 1279.5,688.066 1280.06,688.066 1280.62,688.066 1281.18,688.066 1281.73,688.066 1282.29,688.066 1282.85,688.066 1283.41,688.066 1283.97,688.066 1284.53,688.066 1285.09,688.066 1285.65,688.066 1286.21,688.066 1286.77,688.066 1287.33,688.066 1287.89,688.066 1288.45,688.066 1289,688.066 1289.56,688.066 1290.12,688.066 1290.68,688.066 1291.24,688.066 1291.8,688.066 1292.36,688.066 1292.92,688.066 1293.48,688.066 1294.04,688.066 1294.6,688.066 1295.16,688.066 1295.72,688.066 1296.28,688.066 1296.83,688.066 1297.39,688.066 1297.95,688.066 1298.51,688.066 1299.07,688.066 1299.63,688.066 1300.19,688.066 1300.75,688.066 1301.31,688.066 1301.87,688.066 1302.43,688.066 1302.99,688.066 1303.55,688.066 1304.1,688.066 1304.66,688.066 1305.22,688.066 1305.78,688.066 1306.34,688.066 1306.9,688.066 1307.46,688.066 1308.02,688.066 1308.58,688.066 1309.14,688.066 1309.7,688.066 1310.26,688.066 1310.82,688.066 1311.38,688.066 1311.93,688.066 1312.49,688.066 1313.05,688.066 1313.61,688.066 1314.17,688.066 1314.73,688.066 1315.29,688.066 1315.85,688.066 1316.41,688.066 1316.97,688.066 1317.53,688.066 1318.09,688.066 1318.65,688.066 1319.2,688.066 1319.76,688.066 1320.32,688.066 1320.88,688.066 1321.44,688.066 1322,688.066 1322.56,688.066 1323.12,688.066 1323.68,688.066 1324.24,688.066 1324.8,688.066 1325.36,688.066 1325.92,688.066 1326.47,688.066 1327.03,688.066 1327.59,688.066 1328.15,688.066 1328.71,688.066 1329.27,688.066 1329.83,688.066 1330.39,688.066 1330.95,688.066 1331.51,688.066 1332.07,688.066 1332.63,688.066 1333.19,688.066 1333.75,688.066 1334.3,688.066 1334.86,688.066 1335.42,688.066 1335.98,688.066 1336.54,688.066 1337.1,688.066 1337.66,688.066 1338.22,688.066 1338.78,688.066 1339.34,688.066 1339.9,688.066 1340.46,688.066 1341.02,688.066 1341.57,688.066 1342.13,688.066 1342.69,688.066 1343.25,688.066 1343.81,688.066 1344.37,688.066 1344.93,688.066 1345.49,688.066 1346.05,688.066 1346.61,688.066 1347.17,688.066 1347.73,688.066 1348.29,688.066 1348.84,688.066 1349.4,688.066 1349.96,688.066 1350.52,688.066 1351.08,688.066 1351.64,688.066 1352.2,688.066 1352.76,688.066 1353.32,688.066 1353.88,688.066 1354.44,688.066 1355,688.066 1355.56,688.066 1356.12,688.066 1356.67,688.066 1357.23,688.066 1357.79,688.066 1358.35,688.066 1358.91,688.066 1359.47,688.066 1360.03,688.066 1360.59,688.066 1361.15,688.066 1361.71,688.066 1362.27,688.066 1362.83,688.066 1363.39,688.066 1363.94,688.066 1364.5,688.066 1365.06,688.066 1365.62,688.066 1366.18,688.066 1366.74,688.066 1367.3,688.066 1367.86,688.066 1368.42,688.066 1368.98,688.066 1369.54,688.066 1370.1,688.066 1370.66,688.066 1371.21,688.066 1371.77,688.066 1372.33,688.066 1372.89,688.066 1373.45,688.066 1374.01,688.066 1374.57,688.066 1375.13,688.066 1375.69,688.066 1376.25,688.066 1376.81,688.066 1377.37,688.066 1377.93,688.066 1378.49,688.066 1379.04,688.066 1379.6,688.066 1380.16,688.066 1380.72,688.066 1381.28,688.066 1381.84,688.066 1382.4,688.066 1382.96,688.066 1383.52,688.066 1384.08,688.066 1384.64,688.066 1385.2,688.066 1385.76,688.066 1386.31,688.066 1386.87,688.066 1387.43,688.066 1387.99,688.066 1388.55,688.066 1389.11,688.066 1389.67,688.066 1390.23,688.066 1390.79,688.066 1391.35,688.066 1391.91,688.066 1392.47,688.066 1393.03,688.066 1393.58,688.066 1394.14,688.066 1394.7,688.066 1395.26,688.066 1395.82,688.066 1396.38,688.066 1396.94,688.066 1397.5,688.066 1398.06,688.066 1398.62,688.066 1399.18,688.066 1399.74,688.066 1400.3,688.066 1400.86,688.066 1401.41,688.066 1401.97,688.066 1402.53,688.066 1403.09,688.066 1403.65,688.066 1404.21,688.066 1404.77,688.066 1405.33,688.066 1405.89,688.066 1406.45,688.066 1407.01,688.066 1407.57,688.066 1408.13,688.066 1408.68,688.066 1409.24,688.066 1409.8,688.066 1410.36,688.066 1410.92,688.066 1411.48,688.066 1412.04,688.066 1412.6,688.066 1413.16,688.066 1413.72,688.066 1414.28,688.066 1414.84,688.066 1415.4,688.066 1415.95,688.066 1416.51,688.066 1417.07,688.066 1417.63,688.066 1418.19,688.066 1418.75,688.066 1419.31,688.066 1419.87,688.066 1420.43,688.066 1420.99,688.066 1421.55,688.066 1422.11,688.066 1422.67,688.066 1423.23,688.066 1423.78,688.066 1424.34,688.066 1424.9,688.066 1425.46,688.066 1426.02,688.066 1426.58,688.066 1427.14,688.066 1427.7,688.066 1428.26,688.066 1428.82,688.066 1429.38,688.066 1429.94,688.066 1430.5,688.066 1431.05,688.066 1431.61,688.066 1432.17,688.066 1432.73,688.066 1433.29,688.066 1433.85,688.066 1434.41,688.066 1434.97,688.066 1435.53,688.066 1436.09,688.066 1436.65,688.066 1437.21,688.066 1437.77,688.066 1438.33,688.066 1438.88,688.066 1439.44,688.066 1440,688.066 1440.56,688.066 1441.12,688.066 1441.68,688.066 1442.24,688.066 1442.8,688.066 1443.36,688.066 1443.92,688.066 1444.48,688.066 1445.04,688.066 1445.6,688.066 1446.15,688.066 1446.71,688.066 1447.27,688.066 1447.83,688.066 1448.39,688.066 1448.95,688.066 1449.51,688.066 1450.07,688.066 1450.63,688.066 1451.19,688.066 1451.75,688.066 1452.31,688.066 1452.87,688.066 1453.42,688.066 1453.98,688.066 1454.54,688.066 1455.1,688.066 1455.66,688.066 1456.22,688.066 1456.78,688.066 1457.34,688.066 1457.9,688.066 1458.46,688.066 1459.02,688.066 1459.58,688.066 1460.14,688.066 1460.7,688.066 1461.25,688.066 1461.81,688.066 1462.37,688.066 1462.93,688.066 1463.49,688.066 1464.05,688.066 1464.61,688.066 1465.17,688.066 1465.73,688.066 1466.29,688.066 1466.85,688.066 1467.41,688.066 1467.97,688.066 1468.52,688.066 1469.08,688.066 1469.64,688.066 1470.2,688.066 1470.76,688.066 1471.32,688.066 1471.88,688.066 1472.44,688.066 1473,688.066 1473.56,688.066 1474.12,688.066 1474.68,688.066 1475.24,688.066 1475.79,688.066 1476.35,688.066 1476.91,688.066 1477.47,688.066 1478.03,688.066 1478.59,688.066 1479.15,688.066 1479.71,688.066 1480.27,688.066 1480.83,688.066 1481.39,688.066 1481.95,688.066 1482.51,688.066 1483.07,688.066 1483.62,688.066 1484.18,688.066 1484.74,688.066 1485.3,688.066 1485.86,688.066 1486.42,688.066 1486.98,688.066 1487.54,688.066 1488.1,688.066 1488.66,688.066 1489.22,688.066 1489.78,688.066 1490.34,688.066 1490.89,688.066 1491.45,688.066 1492.01,688.066 1492.57,688.066 1493.13,688.066 1493.69,688.066 1494.25,688.066 1494.81,688.066 1495.37,688.066 1495.93,688.066 1496.49,688.066 1497.05,688.066 1497.61,688.066 1498.16,688.066 1498.72,688.066 1499.28,688.066 1499.84,688.066 1500.4,688.066 1500.96,688.066 1501.52,688.066 1502.08,688.066 1502.64,688.066 1503.2,688.066 1503.76,688.066 1504.32,688.066 1504.88,688.066 1505.44,688.066 1505.99,688.066 1506.55,688.066 1507.11,688.066 1507.67,688.066 1508.23,688.066 1508.79,688.066 1509.35,688.066 1509.91,688.066 1510.47,688.066 1511.03,688.066 1511.59,688.066 1512.15,688.066 1512.71,688.066 1513.26,688.066 1513.82,688.066 1514.38,688.066 1514.94,688.066 1515.5,688.066 1516.06,688.066 1516.62,688.066 1517.18,688.066 1517.74,688.066 1518.3,688.066 1518.86,688.066 1519.42,688.066 1519.98,688.066 1520.53,688.066 1521.09,688.066 1521.65,688.066 1522.21,688.066 1522.77,688.066 1523.33,688.066 1523.89,688.066 1524.45,688.066 1525.01,688.066 1525.57,688.066 1526.13,688.066 1526.69,688.066 1527.25,688.066 1527.81,688.066 1528.36,688.066 1528.92,688.066 1529.48,688.066 1530.04,688.066 1530.6,688.066 1531.16,688.066 1531.72,688.066 1532.28,688.066 1532.84,688.066 1533.4,688.066 1533.96,688.066 1534.52,688.066 1535.08,688.066 1535.63,688.066 1536.19,688.066 1536.75,688.066 1537.31,688.066 1537.87,688.066 1538.43,688.066 1538.99,688.066 1539.55,688.066 1540.11,688.066 1540.67,688.066 1541.23,688.066 1541.79,688.066 1542.35,688.066 1542.9,688.066 1543.46,688.066 1544.02,688.066 1544.58,688.066 1545.14,688.066 1545.7,688.066 1546.26,688.066 1546.82,688.066 1547.38,688.066 1547.94,688.066 1548.5,688.066 1549.06,688.066 1549.62,688.066 1550.18,688.066 1550.73,688.066 1551.29,688.066 1551.85,688.066 1552.41,688.066 1552.97,688.066 1553.53,688.066 1554.09,688.066 1554.65,688.066 1555.21,688.066 1555.77,688.066 1556.33,688.066 1556.89,688.066 1557.45,688.066 1558,688.066 1558.56,688.066 1559.12,688.066 1559.68,688.066 1560.24,688.066 1560.8,688.066 1561.36,688.066 1561.92,688.066 1562.48,688.066 1563.04,688.066 1563.6,688.066 1564.16,688.066 1564.72,688.066 1565.28,688.066 1565.83,688.066 1566.39,688.066 1566.95,688.066 1567.51,688.066 1568.07,688.066 1568.63,688.066 1569.19,688.066 1569.75,688.066 1570.31,688.066 1570.87,688.066 1571.43,688.066 1571.99,688.066 1572.55,688.066 1573.1,688.066 1573.66,688.066 1574.22,688.066 1574.78,688.066 1575.34,688.066 1575.9,688.066 1576.46,688.066 1577.02,688.066 1577.58,688.066 1578.14,688.066 1578.7,688.066 1579.26,688.066 1579.82,688.066 1580.37,688.066 1580.93,688.066 1581.49,688.066 1582.05,688.066 1582.61,688.066 1583.17,688.066 1583.73,688.066 1584.29,688.066 1584.85,688.066 1585.41,688.066 1585.97,688.066 1586.53,688.066 1587.09,688.066 1587.65,688.066 1588.2,688.066 1588.76,688.066 1589.32,688.066 1589.88,688.066 1590.44,688.066 1591,688.066 1591.56,688.066 1592.12,688.066 1592.68,688.066 1593.24,688.066 1593.8,688.066 1594.36,688.066 1594.92,688.066 1595.47,688.066 1596.03,688.066 1596.59,688.066 1597.15,688.066 1597.71,688.066 1598.27,688.066 1598.83,688.066 1599.39,688.066 1599.95,688.066 1600.51,688.066 1601.07,688.066 1601.63,688.066 1602.19,688.066 1602.74,688.066 1603.3,688.066 1603.86,688.066 1604.42,688.066 1604.98,688.066 1605.54,688.066 1606.1,688.066 1606.66,688.066 1607.22,688.066 1607.78,688.066 1608.34,688.066 1608.9,688.066 1609.46,688.066 1610.02,688.066 1610.57,688.066 1611.13,688.066 1611.69,688.066 1612.25,688.066 1612.81,688.066 1613.37,688.066 1613.93,688.066 1614.49,688.066 1615.05,688.066 1615.61,688.066 1616.17,688.066 1616.73,688.066 1617.29,688.066 1617.84,688.066 1618.4,688.066 1618.96,688.066 1619.52,688.066 1620.08,688.066 1620.64,688.066 1621.2,688.066 1621.76,688.066 1622.32,688.066 1622.88,688.066 1623.44,688.066 1624,688.066 1624.56,688.066 1625.11,688.066 1625.67,688.066 1626.23,688.066 1626.79,688.066 1627.35,688.066 1627.91,688.066 1628.47,688.066 1629.03,688.066 1629.59,688.066 1630.15,688.066 1630.71,688.066 1631.27,688.066 1631.83,688.066 1632.39,688.066 1632.94,688.066 1633.5,688.066 1634.06,688.066 1634.62,688.066 1635.18,688.066 1635.74,688.066 1636.3,688.066 1636.86,688.066 1637.42,688.066 1637.98,688.066 1638.54,688.066 1639.1,688.066 1639.66,688.066 1640.21,688.066 1640.77,688.066 1641.33,688.066 1641.89,688.066 1642.45,688.066 1643.01,688.066 1643.57,688.066 1644.13,688.066 1644.69,688.066 1645.25,688.066 1645.81,688.066 1646.37,688.066 1646.93,688.066 1647.48,688.066 1648.04,688.066 1648.6,688.066 1649.16,688.066 1649.72,688.066 1650.28,688.066 1650.84,688.066 1651.4,688.066 1651.96,688.066 1652.52,688.066 1653.08,688.066 1653.64,688.066 1654.2,688.066 1654.76,688.066 1655.31,688.066 1655.87,688.066 1656.43,688.066 1656.99,688.066 1657.55,688.066 1658.11,688.066 1658.67,688.066 1659.23,688.066 1659.79,688.066 1660.35,688.066 1660.91,688.066 1661.47,688.066 1662.03,688.066 1662.58,688.066 1663.14,688.066 1663.7,688.066 1664.26,688.066 1664.82,688.066 1665.38,688.066 1665.94,688.066 1666.5,688.066 1667.06,688.066 1667.62,688.066 1668.18,688.066 1668.74,688.066 1669.3,688.066 1669.85,688.066 1670.41,688.066 1670.97,688.066 1671.53,688.066 1672.09,688.066 1672.65,688.066 1673.21,688.066 1673.77,688.066 1674.33,688.066 1674.89,688.066 1675.45,688.066 1676.01,688.066 1676.57,688.066 1677.13,688.066 1677.68,688.066 1678.24,688.066 1678.8,688.066 1679.36,688.066 1679.92,688.066 1680.48,688.066 1681.04,688.066 1681.6,688.066 1682.16,688.066 1682.72,688.066 1683.28,688.066 1683.84,688.066 1684.4,688.066 1684.95,688.066 1685.51,688.066 1686.07,688.066 1686.63,688.066 1687.19,688.066 1687.75,688.066 1688.31,688.066 1688.87,688.066 1689.43,688.066 1689.99,688.066 1690.55,688.066 1691.11,688.066 1691.67,688.066 1692.23,688.066 1692.78,688.066 1693.34,688.066 1693.9,688.066 1694.46,688.066 1695.02,688.066 1695.58,688.066 1696.14,688.066 1696.7,688.066 1697.26,688.066 1697.82,688.066 1698.38,688.066 1698.94,688.066 1699.5,688.066 1700.05,688.066 1700.61,688.066 1701.17,688.066 1701.73,688.066 1702.29,688.066 1702.85,688.066 1703.41,688.066 1703.97,688.066 1704.53,688.066 1705.09,688.066 1705.65,688.066 1706.21,688.066 1706.77,688.066 1707.32,688.066 1707.88,688.066 1708.44,688.066 1709,688.066 1709.56,688.066 1710.12,688.066 1710.68,688.066 1711.24,688.066 1711.8,688.066 1712.36,688.066 1712.92,688.066 1713.48,688.066 1714.04,688.066 1714.6,688.066 1715.15,688.066 1715.71,688.066 1716.27,688.066 1716.83,688.066 1717.39,688.066 1717.95,688.066 1718.51,688.066 1719.07,688.066 1719.63,688.066 1720.19,688.066 1720.75,688.066 1721.31,688.066 1721.87,688.066 1722.42,688.066 1722.98,688.066 1723.54,688.066 1724.1,688.066 1724.66,688.066 1725.22,688.066 1725.78,688.066 1726.34,688.066 1726.9,688.066 1727.46,688.066 1728.02,688.066 1728.58,688.066 1729.14,688.066 1729.69,688.066 1730.25,688.066 1730.81,688.066 1731.37,688.066 1731.93,688.066 1732.49,688.066 1733.05,688.066 1733.61,688.066 1734.17,688.066 1734.73,688.066 1735.29,688.066 1735.85,688.066 1736.41,688.066 1736.97,688.066 1737.52,688.066 1738.08,688.066 1738.64,688.066 1739.2,688.066 1739.76,688.066 1740.32,688.066 1740.88,688.066 1741.44,688.066 1742,688.066 1742.56,688.066 1743.12,688.066 1743.68,688.066 1744.24,688.066 1744.79,688.066 1745.35,688.066 1745.91,688.066 1746.47,688.066 1747.03,688.066 1747.59,688.066 1748.15,688.066 1748.71,688.066 1749.27,688.066 1749.83,688.066 1750.39,688.066 1750.95,688.066 1751.51,688.066 1752.06,688.066 1752.62,688.066 1753.18,688.066 1753.74,688.066 1754.3,688.066 1754.86,688.066 1755.42,688.066 1755.98,688.066 1756.54,688.066 1757.1,688.066 1757.66,688.066 1758.22,688.066 1758.78,688.066 1759.34,688.066 1759.89,688.066 1760.45,688.066 1761.01,688.066 1761.57,688.066 1762.13,688.066 1762.69,688.066 1763.25,688.066 1763.81,688.066 1764.37,688.066 1764.93,688.066 1765.49,688.066 1766.05,688.066 1766.61,688.066 1767.16,688.066 1767.72,688.066 1768.28,688.066 1768.84,688.066 1769.4,688.066 1769.96,688.066 1770.52,688.066 1771.08,688.066 1771.64,688.066 1772.2,688.066 1772.76,688.066 1773.32,688.066 1773.88,688.066 1774.43,688.066 1774.99,688.066 1775.55,688.066 1776.11,688.066 1776.67,688.066 1777.23,688.066 1777.79,688.066 1778.35,688.066 1778.91,688.066 1779.47,688.066 1780.03,688.066 1780.59,688.066 1781.15,688.066 1781.71,688.066 1782.26,688.066 1782.82,688.066 1783.38,688.066 1783.94,688.066 1784.5,688.066 1785.06,688.066 1785.62,688.066 1786.18,688.066 1786.74,688.066 1787.3,688.066 1787.86,688.066 1788.42,688.066 1788.98,688.066 1789.53,688.066 1790.09,688.066 1790.65,688.066 1791.21,688.066 1791.77,688.066 1792.33,688.066 1792.89,688.066 1793.45,688.066 1794.01,688.066 1794.57,688.066 1795.13,688.066 1795.69,688.066 1796.25,688.066 1796.8,688.066 1797.36,688.066 1797.92,688.066 1798.48,688.066 1799.04,688.066 1799.6,688.066 1800.16,688.066 1800.72,688.066 1801.28,688.066 1801.84,688.066 1802.4,688.066 1802.96,688.066 1803.52,688.066 1804.08,688.066 1804.63,688.066 1805.19,688.066 1805.75,688.066 1806.31,688.066 1806.87,688.066 1807.43,688.066 1807.99,688.066 1808.55,688.066 1809.11,688.066 1809.67,688.066 1810.23,688.066 1810.79,688.066 1811.35,688.066 1811.9,688.066 1812.46,688.066 1813.02,688.066 1813.58,688.066 1814.14,688.066 1814.7,688.066 1815.26,688.066 1815.82,688.066 1816.38,688.066 1816.94,688.066 1817.5,688.066 1818.06,688.066 1818.62,688.066 1819.18,688.066 1819.73,688.066 1820.29,688.066 1820.85,688.066 1821.41,688.066 1821.97,688.066 1822.53,688.066 1823.09,688.066 1823.65,688.066 1824.21,688.066 1824.77,688.066 1825.33,688.066 1825.89,688.066 1826.45,688.066 1827,688.066 1827.56,688.066 1828.12,688.066 1828.68,688.066 1829.24,688.066 1829.8,688.066 1830.36,688.066 1830.92,688.066 1831.48,688.066 1832.04,688.066 1832.6,688.066 1833.16,688.066 1833.72,688.066 1834.27,688.066 1834.83,688.066 1835.39,688.066 1835.95,688.066 1836.51,688.066 1837.07,688.066 1837.63,688.066 1838.19,688.066 \"/>\n<path clip-path=\"url(#clip003)\" d=\"M720.247 684.425 L720.806 684.425 L721.365 684.425 L721.924 684.425 L722.484 684.425 L723.043 684.425 L723.602 684.425 L724.161 684.425 L724.721 684.425 L725.28 684.425 L725.839 684.425 L726.398 684.425 L726.958 684.425 L727.517 684.425 L728.076 684.425 L728.635 684.425 L729.195 684.425 L729.754 684.425 L730.313 684.425 L730.872 684.425 L731.432 684.425 L731.991 684.425 L732.55 684.425 L733.109 684.425 L733.669 684.425 L734.228 684.425 L734.787 684.425 L735.346 684.425 L735.906 684.425 L736.465 684.425 L737.024 684.425 L737.583 684.425 L738.143 684.425 L738.702 684.425 L739.261 684.425 L739.82 684.425 L740.38 684.425 L740.939 684.425 L741.498 684.425 L742.057 684.425 L742.617 684.425 L743.176 684.425 L743.735 684.425 L744.294 684.425 L744.854 684.425 L745.413 684.425 L745.972 684.425 L746.531 684.425 L747.091 684.425 L747.65 684.425 L748.209 684.425 L748.768 684.425 L749.328 684.425 L749.887 684.425 L750.446 684.425 L751.005 684.425 L751.565 684.425 L752.124 684.425 L752.683 684.425 L753.242 684.425 L753.802 684.425 L754.361 684.425 L754.92 684.425 L755.479 684.425 L756.039 684.425 L756.598 684.425 L757.157 684.425 L757.716 684.425 L758.276 684.425 L758.835 684.425 L759.394 684.425 L759.953 684.425 L760.513 684.425 L761.072 684.425 L761.631 684.425 L762.19 684.425 L762.75 684.425 L763.309 684.425 L763.868 684.425 L764.427 684.425 L764.987 684.425 L765.546 684.425 L766.105 684.425 L766.664 684.425 L767.224 684.425 L767.783 684.425 L768.342 684.425 L768.901 684.425 L769.461 684.425 L770.02 684.425 L770.579 684.425 L771.138 684.425 L771.698 684.425 L772.257 684.425 L772.816 684.425 L773.375 684.425 L773.935 684.425 L774.494 684.425 L775.053 684.425 L775.612 684.425 L776.172 684.425 L776.731 684.425 L777.29 684.425 L777.849 684.425 L778.409 684.425 L778.968 684.425 L779.527 684.425 L780.086 684.425 L780.646 684.425 L781.205 684.425 L781.764 684.425 L782.323 684.425 L782.883 684.425 L783.442 684.425 L784.001 684.425 L784.56 684.425 L785.12 684.425 L785.679 684.425 L786.238 684.425 L786.797 684.425 L787.357 684.425 L787.916 684.425 L788.475 684.425 L789.034 684.425 L789.594 684.425 L790.153 684.425 L790.712 684.425 L791.271 684.425 L791.831 684.425 L792.39 684.425 L792.949 684.425 L793.508 684.425 L794.068 684.425 L794.627 684.425 L795.186 684.425 L795.745 684.425 L796.305 684.425 L796.864 684.425 L797.423 684.425 L797.982 684.425 L798.542 684.425 L799.101 684.425 L799.66 684.425 L800.219 684.425 L800.779 684.425 L801.338 684.425 L801.897 684.425 L802.456 684.425 L803.016 684.425 L803.575 684.425 L804.134 684.425 L804.693 684.425 L805.253 684.425 L805.812 684.425 L806.371 684.425 L806.931 684.425 L807.49 684.425 L808.049 684.425 L808.608 684.425 L809.168 684.425 L809.727 684.425 L810.286 684.425 L810.845 684.425 L811.405 684.425 L811.964 684.425 L812.523 684.425 L813.082 684.425 L813.642 684.425 L814.201 684.425 L814.76 684.425 L815.319 684.425 L815.879 684.425 L816.438 684.425 L816.997 684.425 L817.556 684.425 L818.116 684.425 L818.675 684.425 L819.234 684.425 L819.793 684.425 L820.353 684.425 L820.912 684.425 L821.471 684.425 L822.03 684.425 L822.59 684.425 L823.149 684.425 L823.708 684.425 L824.267 684.425 L824.827 684.425 L825.386 684.425 L825.945 684.425 L826.504 684.425 L827.064 684.425 L827.623 684.425 L828.182 684.425 L828.741 684.425 L829.301 684.425 L829.86 684.425 L830.419 684.425 L830.978 684.425 L831.538 684.425 L832.097 684.425 L832.656 684.425 L833.215 684.425 L833.775 684.425 L834.334 684.425 L834.893 684.425 L835.452 684.425 L836.012 684.425 L836.571 684.425 L837.13 684.425 L837.689 684.425 L838.249 684.425 L838.808 684.425 L839.367 684.425 L839.926 684.425 L840.486 684.425 L841.045 684.425 L841.604 684.425 L842.163 684.425 L842.723 684.425 L843.282 684.425 L843.841 684.425 L844.4 684.425 L844.96 684.425 L845.519 684.425 L846.078 684.425 L846.637 684.425 L847.197 684.425 L847.756 684.425 L848.315 684.425 L848.874 684.425 L849.434 684.425 L849.993 684.425 L850.552 684.425 L851.111 684.425 L851.671 684.425 L852.23 684.425 L852.789 684.425 L853.348 684.425 L853.908 684.425 L854.467 684.425 L855.026 684.425 L855.585 684.425 L856.145 684.425 L856.704 684.425 L857.263 684.425 L857.822 684.425 L858.382 684.425 L858.941 684.425 L859.5 684.425 L860.059 684.425 L860.619 684.425 L861.178 684.425 L861.737 684.425 L862.296 684.425 L862.856 684.425 L863.415 684.425 L863.974 684.425 L864.533 684.425 L865.093 684.425 L865.652 684.425 L866.211 684.425 L866.77 684.425 L867.33 684.425 L867.889 684.425 L868.448 684.425 L869.007 684.425 L869.567 684.425 L870.126 684.425 L870.685 684.425 L871.244 684.425 L871.804 684.425 L872.363 684.425 L872.922 684.425 L873.481 684.425 L874.041 684.425 L874.6 684.425 L875.159 684.425 L875.718 684.425 L876.278 684.425 L876.837 684.425 L877.396 684.425 L877.955 684.425 L878.515 684.425 L879.074 684.425 L879.633 684.425 L880.192 684.425 L880.752 684.425 L881.311 684.425 L881.87 684.425 L882.429 684.425 L882.989 684.425 L883.548 684.425 L884.107 684.425 L884.666 684.425 L885.226 684.425 L885.785 684.425 L886.344 684.425 L886.903 684.425 L887.463 684.425 L888.022 684.425 L888.581 684.425 L889.14 684.425 L889.7 684.425 L890.259 684.425 L890.818 684.425 L891.377 684.425 L891.937 684.425 L892.496 684.425 L893.055 684.425 L893.614 684.425 L894.174 684.425 L894.733 684.425 L895.292 684.425 L895.851 684.425 L896.411 684.425 L896.97 684.425 L897.529 684.425 L898.088 684.425 L898.648 684.425 L899.207 684.425 L899.766 684.425 L900.325 684.425 L900.885 684.425 L901.444 684.425 L902.003 684.425 L902.562 684.425 L903.122 684.425 L903.681 684.425 L904.24 684.425 L904.799 684.425 L905.359 684.425 L905.918 684.425 L906.477 684.425 L907.036 684.425 L907.596 684.425 L908.155 684.425 L908.714 684.425 L909.273 684.425 L909.833 684.425 L910.392 684.425 L910.951 684.425 L911.51 684.425 L912.07 684.425 L912.629 684.425 L913.188 684.425 L913.747 684.425 L914.307 684.425 L914.866 684.425 L915.425 684.425 L915.984 684.425 L916.544 684.425 L917.103 684.425 L917.662 684.425 L918.221 684.425 L918.781 684.425 L919.34 684.425 L919.899 684.425 L920.458 684.425 L921.018 684.425 L921.577 684.425 L922.136 684.425 L922.695 684.425 L923.255 684.425 L923.814 684.425 L924.373 684.425 L924.932 684.425 L925.492 684.425 L926.051 684.425 L926.61 684.425 L927.169 684.425 L927.729 684.425 L928.288 684.425 L928.847 684.425 L929.406 684.425 L929.966 684.425 L930.525 684.425 L931.084 684.425 L931.644 684.425 L932.203 684.425 L932.762 684.425 L933.321 684.425 L933.881 684.425 L934.44 684.425 L934.999 684.425 L935.558 684.425 L936.118 684.425 L936.677 684.425 L937.236 684.425 L937.795 684.425 L938.355 684.425 L938.914 684.425 L939.473 684.425 L940.032 684.425 L940.592 684.425 L941.151 684.425 L941.71 684.425 L942.269 684.425 L942.829 684.425 L943.388 684.425 L943.947 684.425 L944.506 684.425 L945.066 684.425 L945.625 684.425 L946.184 684.425 L946.743 684.425 L947.303 684.425 L947.862 684.425 L948.421 684.425 L948.98 684.425 L949.54 684.425 L950.099 684.425 L950.658 684.425 L951.217 684.425 L951.777 684.425 L952.336 684.425 L952.895 684.425 L953.454 684.425 L954.014 684.425 L954.573 684.425 L955.132 684.425 L955.691 684.425 L956.251 684.425 L956.81 684.425 L957.369 684.425 L957.928 684.425 L958.488 684.425 L959.047 684.425 L959.606 684.425 L960.165 684.425 L960.725 684.425 L961.284 684.425 L961.843 684.425 L962.402 684.425 L962.962 684.425 L963.521 684.425 L964.08 684.425 L964.639 684.425 L965.199 684.425 L965.758 684.425 L966.317 684.425 L966.876 684.425 L967.436 684.425 L967.995 684.425 L968.554 684.425 L969.113 684.425 L969.673 684.425 L970.232 684.425 L970.791 684.425 L971.35 684.425 L971.91 684.425 L972.469 684.425 L973.028 684.425 L973.587 684.425 L974.147 684.425 L974.706 684.425 L975.265 684.425 L975.824 684.425 L976.384 684.425 L976.943 684.425 L977.502 684.425 L978.061 684.425 L978.621 684.425 L979.18 684.425 L979.739 684.425 L980.298 684.425 L980.858 684.425 L981.417 684.425 L981.976 684.425 L982.535 684.425 L983.095 684.425 L983.654 684.425 L984.213 684.425 L984.772 684.425 L985.332 684.425 L985.891 684.425 L986.45 684.425 L987.009 684.425 L987.569 684.425 L988.128 684.425 L988.687 684.425 L989.246 684.425 L989.806 684.425 L990.365 684.425 L990.924 684.425 L991.483 684.425 L992.043 684.425 L992.602 684.425 L993.161 684.425 L993.72 684.425 L994.28 684.425 L994.839 684.425 L995.398 684.425 L995.957 684.425 L996.517 684.425 L997.076 684.425 L997.635 684.425 L998.194 684.425 L998.754 684.425 L999.313 684.425 L999.872 684.425 L1000.43 684.425 L1000.99 684.425 L1001.55 684.425 L1002.11 684.425 L1002.67 684.425 L1003.23 684.425 L1003.79 684.425 L1004.35 684.425 L1004.91 684.425 L1005.46 684.425 L1006.02 684.425 L1006.58 684.425 L1007.14 684.425 L1007.7 684.425 L1008.26 684.425 L1008.82 684.425 L1009.38 684.425 L1009.94 684.425 L1010.5 684.425 L1011.06 684.425 L1011.62 684.425 L1012.18 684.425 L1012.73 684.425 L1013.29 684.425 L1013.85 684.425 L1014.41 684.425 L1014.97 684.425 L1015.53 684.425 L1016.09 684.425 L1016.65 684.425 L1017.21 684.425 L1017.77 684.425 L1018.33 684.425 L1018.89 684.425 L1019.45 684.425 L1020.01 684.425 L1020.56 684.425 L1021.12 684.425 L1021.68 684.425 L1022.24 684.425 L1022.8 684.425 L1023.36 684.425 L1023.92 684.425 L1024.48 684.425 L1025.04 684.425 L1025.6 684.425 L1026.16 684.425 L1026.72 684.425 L1027.28 684.425 L1027.83 684.425 L1028.39 684.425 L1028.95 684.425 L1029.51 684.425 L1030.07 684.425 L1030.63 684.425 L1031.19 684.425 L1031.75 684.425 L1032.31 684.425 L1032.87 684.425 L1033.43 684.425 L1033.99 684.425 L1034.55 684.425 L1035.1 684.425 L1035.66 684.425 L1036.22 684.425 L1036.78 684.425 L1037.34 684.425 L1037.9 684.425 L1038.46 684.425 L1039.02 684.425 L1039.58 684.425 L1040.14 684.425 L1040.7 684.425 L1041.26 684.425 L1041.82 684.425 L1042.38 684.425 L1042.93 684.425 L1043.49 684.425 L1044.05 684.425 L1044.61 684.425 L1045.17 684.425 L1045.73 684.425 L1046.29 684.425 L1046.85 684.425 L1047.41 684.425 L1047.97 684.425 L1048.53 684.425 L1049.09 684.425 L1049.65 684.425 L1050.2 684.425 L1050.76 684.425 L1051.32 684.425 L1051.88 684.425 L1052.44 684.425 L1053 684.425 L1053.56 684.425 L1054.12 684.425 L1054.68 684.425 L1055.24 684.425 L1055.8 684.425 L1056.36 684.425 L1056.92 684.425 L1057.48 684.425 L1058.03 684.425 L1058.59 684.425 L1059.15 684.425 L1059.71 684.425 L1060.27 684.425 L1060.83 684.425 L1061.39 684.425 L1061.95 684.425 L1062.51 684.425 L1063.07 684.425 L1063.63 684.425 L1064.19 684.425 L1064.75 684.425 L1065.3 684.425 L1065.86 684.425 L1066.42 684.425 L1066.98 684.425 L1067.54 684.425 L1068.1 684.425 L1068.66 684.425 L1069.22 684.425 L1069.78 684.425 L1070.34 684.425 L1070.9 684.425 L1071.46 684.425 L1072.02 684.425 L1072.57 684.425 L1073.13 684.425 L1073.69 684.425 L1074.25 684.425 L1074.81 684.425 L1075.37 684.425 L1075.93 684.425 L1076.49 684.425 L1077.05 684.425 L1077.61 684.425 L1078.17 684.425 L1078.73 684.425 L1079.29 684.425 L1079.85 684.425 L1080.4 684.425 L1080.96 684.425 L1081.52 684.425 L1082.08 684.425 L1082.64 684.425 L1083.2 684.425 L1083.76 684.425 L1084.32 684.425 L1084.88 684.425 L1085.44 684.425 L1086 684.425 L1086.56 684.425 L1087.12 684.425 L1087.67 684.425 L1088.23 684.425 L1088.79 684.425 L1089.35 684.425 L1089.91 684.425 L1090.47 684.425 L1091.03 684.425 L1091.59 684.425 L1092.15 684.425 L1092.71 684.425 L1093.27 684.425 L1093.83 684.425 L1094.39 684.425 L1094.94 684.425 L1095.5 684.425 L1096.06 684.425 L1096.62 684.425 L1097.18 684.425 L1097.74 684.425 L1098.3 684.425 L1098.86 684.425 L1099.42 684.425 L1099.98 684.425 L1100.54 684.425 L1101.1 684.425 L1101.66 684.425 L1102.22 684.425 L1102.77 684.425 L1103.33 684.425 L1103.89 684.425 L1104.45 684.425 L1105.01 684.425 L1105.57 684.425 L1106.13 684.425 L1106.69 684.425 L1107.25 684.425 L1107.81 684.425 L1108.37 684.425 L1108.93 684.425 L1109.49 684.425 L1110.04 684.425 L1110.6 684.425 L1111.16 684.425 L1111.72 684.425 L1112.28 684.425 L1112.84 684.425 L1113.4 684.425 L1113.96 684.425 L1114.52 684.425 L1115.08 684.425 L1115.64 684.425 L1116.2 684.425 L1116.76 684.425 L1117.31 684.425 L1117.87 684.425 L1118.43 684.425 L1118.99 684.425 L1119.55 684.425 L1120.11 684.425 L1120.67 684.425 L1121.23 684.425 L1121.79 684.425 L1122.35 684.425 L1122.91 684.425 L1123.47 684.425 L1124.03 684.425 L1124.59 684.425 L1125.14 684.425 L1125.7 684.425 L1126.26 684.425 L1126.82 684.425 L1127.38 684.425 L1127.94 684.425 L1128.5 684.425 L1129.06 684.425 L1129.62 684.425 L1130.18 684.425 L1130.74 684.425 L1131.3 684.425 L1131.86 684.425 L1132.41 684.425 L1132.97 684.425 L1133.53 684.425 L1134.09 684.425 L1134.65 684.425 L1135.21 684.425 L1135.77 684.425 L1136.33 684.425 L1136.89 684.425 L1137.45 684.425 L1138.01 684.425 L1138.57 684.425 L1139.13 684.425 L1139.68 684.425 L1140.24 684.425 L1140.8 684.425 L1141.36 684.425 L1141.92 684.425 L1142.48 684.425 L1143.04 684.425 L1143.6 684.425 L1144.16 684.425 L1144.72 684.425 L1145.28 684.425 L1145.84 684.425 L1146.4 684.425 L1146.96 684.425 L1147.51 684.425 L1148.07 684.425 L1148.63 684.425 L1149.19 684.425 L1149.75 684.425 L1150.31 684.425 L1150.87 684.425 L1151.43 684.425 L1151.99 684.425 L1152.55 684.425 L1153.11 684.425 L1153.67 684.425 L1154.23 684.425 L1154.78 684.425 L1155.34 684.425 L1155.9 684.425 L1156.46 684.425 L1157.02 684.425 L1157.58 684.425 L1158.14 684.425 L1158.7 684.425 L1159.26 684.425 L1159.82 684.425 L1160.38 684.425 L1160.94 684.425 L1161.5 684.425 L1162.05 684.425 L1162.61 684.425 L1163.17 684.425 L1163.73 684.425 L1164.29 684.425 L1164.85 684.425 L1165.41 684.425 L1165.97 684.425 L1166.53 684.425 L1167.09 684.425 L1167.65 684.425 L1168.21 684.425 L1168.77 684.425 L1169.33 684.425 L1169.88 684.425 L1170.44 684.425 L1171 684.425 L1171.56 684.425 L1172.12 684.425 L1172.68 684.425 L1173.24 684.425 L1173.8 684.425 L1174.36 684.425 L1174.92 684.425 L1175.48 684.425 L1176.04 684.425 L1176.6 684.425 L1177.15 684.425 L1177.71 684.425 L1178.27 684.425 L1178.83 684.425 L1179.39 684.425 L1179.95 684.425 L1180.51 684.425 L1181.07 684.425 L1181.63 684.425 L1182.19 684.425 L1182.75 684.425 L1183.31 684.425 L1183.87 684.425 L1184.43 684.425 L1184.98 684.425 L1185.54 684.425 L1186.1 684.425 L1186.66 684.425 L1187.22 684.425 L1187.78 684.425 L1188.34 684.425 L1188.9 684.425 L1189.46 684.425 L1190.02 684.425 L1190.58 684.425 L1191.14 684.425 L1191.7 684.425 L1192.25 684.425 L1192.81 684.425 L1193.37 684.425 L1193.93 684.425 L1194.49 684.425 L1195.05 684.425 L1195.61 684.425 L1196.17 684.425 L1196.73 684.425 L1197.29 684.425 L1197.85 684.425 L1198.41 684.425 L1198.97 684.425 L1199.52 684.425 L1200.08 684.425 L1200.64 684.425 L1201.2 684.425 L1201.76 684.425 L1202.32 684.425 L1202.88 684.425 L1203.44 684.425 L1204 684.425 L1204.56 684.425 L1205.12 684.425 L1205.68 684.425 L1206.24 684.425 L1206.8 684.425 L1207.35 684.425 L1207.91 684.425 L1208.47 684.425 L1209.03 684.425 L1209.59 684.425 L1210.15 684.425 L1210.71 684.425 L1211.27 684.425 L1211.83 684.425 L1212.39 684.425 L1212.95 684.425 L1213.51 684.425 L1214.07 684.425 L1214.62 684.425 L1215.18 684.425 L1215.74 684.425 L1216.3 684.425 L1216.86 684.425 L1217.42 684.425 L1217.98 684.425 L1218.54 684.425 L1219.1 684.425 L1219.66 684.425 L1220.22 684.425 L1220.78 684.425 L1221.34 684.425 L1221.89 684.425 L1222.45 684.425 L1223.01 684.425 L1223.57 684.425 L1224.13 684.425 L1224.69 684.425 L1225.25 684.425 L1225.81 684.425 L1226.37 684.425 L1226.93 684.425 L1227.49 684.425 L1228.05 684.425 L1228.61 684.425 L1229.17 684.425 L1229.72 684.425 L1230.28 684.425 L1230.84 684.425 L1231.4 684.425 L1231.96 684.425 L1232.52 684.425 L1233.08 684.425 L1233.64 684.425 L1234.2 684.425 L1234.76 684.425 L1235.32 684.425 L1235.88 684.425 L1236.44 684.425 L1236.99 684.425 L1237.55 684.425 L1238.11 684.425 L1238.67 684.425 L1239.23 684.425 L1239.79 684.425 L1240.35 684.425 L1240.91 684.425 L1241.47 684.425 L1242.03 684.425 L1242.59 684.425 L1243.15 684.425 L1243.71 684.425 L1244.26 684.425 L1244.82 684.425 L1245.38 684.425 L1245.94 684.425 L1246.5 684.425 L1247.06 684.425 L1247.62 684.425 L1248.18 684.425 L1248.74 684.425 L1249.3 684.425 L1249.86 684.425 L1250.42 684.425 L1250.98 684.425 L1251.54 684.425 L1252.09 684.425 L1252.65 684.425 L1253.21 684.425 L1253.77 684.425 L1254.33 684.425 L1254.89 684.425 L1255.45 684.425 L1256.01 684.425 L1256.57 684.425 L1257.13 684.425 L1257.69 684.425 L1258.25 684.425 L1258.81 684.425 L1259.36 684.425 L1259.92 684.425 L1260.48 684.425 L1261.04 684.425 L1261.6 684.425 L1262.16 684.425 L1262.72 684.425 L1263.28 684.425 L1263.84 684.425 L1264.4 684.425 L1264.96 684.425 L1265.52 684.425 L1266.08 684.425 L1266.63 684.425 L1267.19 684.425 L1267.75 684.425 L1268.31 684.425 L1268.87 684.425 L1269.43 684.425 L1269.99 684.425 L1270.55 684.425 L1271.11 684.425 L1271.67 684.425 L1272.23 684.425 L1272.79 684.425 L1273.35 684.425 L1273.91 684.425 L1274.46 684.425 L1275.02 684.425 L1275.58 684.425 L1276.14 684.425 L1276.7 684.425 L1277.26 684.425 L1277.82 684.425 L1278.38 684.425 L1278.94 684.425 L1279.5 684.425 L1280.06 684.425 L1280.62 684.425 L1281.18 684.425 L1281.73 684.425 L1282.29 684.425 L1282.85 684.425 L1283.41 684.425 L1283.97 684.425 L1284.53 684.425 L1285.09 684.425 L1285.65 684.425 L1286.21 684.425 L1286.77 684.425 L1287.33 684.425 L1287.89 684.425 L1288.45 684.425 L1289 684.425 L1289.56 684.425 L1290.12 684.425 L1290.68 684.425 L1291.24 684.425 L1291.8 684.425 L1292.36 684.425 L1292.92 684.425 L1293.48 684.425 L1294.04 684.425 L1294.6 684.425 L1295.16 684.425 L1295.72 684.425 L1296.28 684.425 L1296.83 684.425 L1297.39 684.425 L1297.95 684.425 L1298.51 684.425 L1299.07 684.425 L1299.63 684.425 L1300.19 684.425 L1300.75 684.425 L1301.31 684.425 L1301.87 684.425 L1302.43 684.425 L1302.99 684.425 L1303.55 684.425 L1304.1 684.425 L1304.66 684.425 L1305.22 684.425 L1305.78 684.425 L1306.34 684.425 L1306.9 684.425 L1307.46 684.425 L1308.02 684.425 L1308.58 684.425 L1309.14 684.425 L1309.7 684.425 L1310.26 684.425 L1310.82 684.425 L1311.38 684.425 L1311.93 684.425 L1312.49 684.425 L1313.05 684.425 L1313.61 684.425 L1314.17 684.425 L1314.73 684.425 L1315.29 684.425 L1315.85 684.425 L1316.41 684.425 L1316.97 684.425 L1317.53 684.425 L1318.09 684.425 L1318.65 684.425 L1319.2 684.425 L1319.76 684.425 L1320.32 684.425 L1320.88 684.425 L1321.44 684.425 L1322 684.425 L1322.56 684.425 L1323.12 684.425 L1323.68 684.425 L1324.24 684.425 L1324.8 684.425 L1325.36 684.425 L1325.92 684.425 L1326.47 684.425 L1327.03 684.425 L1327.59 684.425 L1328.15 684.425 L1328.71 684.425 L1329.27 684.425 L1329.83 684.425 L1330.39 684.425 L1330.95 684.425 L1331.51 684.425 L1332.07 684.425 L1332.63 684.425 L1333.19 684.425 L1333.75 684.425 L1334.3 684.425 L1334.86 684.425 L1335.42 684.425 L1335.98 684.425 L1336.54 684.425 L1337.1 684.425 L1337.66 684.425 L1338.22 684.425 L1338.78 684.425 L1339.34 684.425 L1339.9 684.425 L1340.46 684.425 L1341.02 684.425 L1341.57 684.425 L1342.13 684.425 L1342.69 684.425 L1343.25 684.425 L1343.81 684.425 L1344.37 684.425 L1344.93 684.425 L1345.49 684.425 L1346.05 684.425 L1346.61 684.425 L1347.17 684.425 L1347.73 684.425 L1348.29 684.425 L1348.84 684.425 L1349.4 684.425 L1349.96 684.425 L1350.52 684.425 L1351.08 684.425 L1351.64 684.425 L1352.2 684.425 L1352.76 684.425 L1353.32 684.425 L1353.88 684.425 L1354.44 684.425 L1355 684.425 L1355.56 684.425 L1356.12 684.425 L1356.67 684.425 L1357.23 684.425 L1357.79 684.425 L1358.35 684.425 L1358.91 684.425 L1359.47 684.425 L1360.03 684.425 L1360.59 684.425 L1361.15 684.425 L1361.71 684.425 L1362.27 684.425 L1362.83 684.425 L1363.39 684.425 L1363.94 684.425 L1364.5 684.425 L1365.06 684.425 L1365.62 684.425 L1366.18 684.425 L1366.74 684.425 L1367.3 684.425 L1367.86 684.425 L1368.42 684.425 L1368.98 684.425 L1369.54 684.425 L1370.1 684.425 L1370.66 684.425 L1371.21 684.425 L1371.77 684.425 L1372.33 684.425 L1372.89 684.425 L1373.45 684.425 L1374.01 684.425 L1374.57 684.425 L1375.13 684.425 L1375.69 684.425 L1376.25 684.425 L1376.81 684.425 L1377.37 684.425 L1377.93 684.425 L1378.49 684.425 L1379.04 684.425 L1379.6 684.425 L1380.16 684.425 L1380.72 684.425 L1381.28 684.425 L1381.84 684.425 L1382.4 684.425 L1382.96 684.425 L1383.52 684.425 L1384.08 684.425 L1384.64 684.425 L1385.2 684.425 L1385.76 684.425 L1386.31 684.425 L1386.87 684.425 L1387.43 684.425 L1387.99 684.425 L1388.55 684.425 L1389.11 684.425 L1389.67 684.425 L1390.23 684.425 L1390.79 684.425 L1391.35 684.425 L1391.91 684.425 L1392.47 684.425 L1393.03 684.425 L1393.58 684.425 L1394.14 684.425 L1394.7 684.425 L1395.26 684.425 L1395.82 684.425 L1396.38 684.425 L1396.94 684.425 L1397.5 684.425 L1398.06 684.425 L1398.62 684.425 L1399.18 684.425 L1399.74 684.425 L1400.3 684.425 L1400.86 684.425 L1401.41 684.425 L1401.97 684.425 L1402.53 684.425 L1403.09 684.425 L1403.65 684.425 L1404.21 684.425 L1404.77 684.425 L1405.33 684.425 L1405.89 684.425 L1406.45 684.425 L1407.01 684.425 L1407.57 684.425 L1408.13 684.425 L1408.68 684.425 L1409.24 684.425 L1409.8 684.425 L1410.36 684.425 L1410.92 684.425 L1411.48 684.425 L1412.04 684.425 L1412.6 684.425 L1413.16 684.425 L1413.72 684.425 L1414.28 684.425 L1414.84 684.425 L1415.4 684.425 L1415.95 684.425 L1416.51 684.425 L1417.07 684.425 L1417.63 684.425 L1418.19 684.425 L1418.75 684.425 L1419.31 684.425 L1419.87 684.425 L1420.43 684.425 L1420.99 684.425 L1421.55 684.425 L1422.11 684.425 L1422.67 684.425 L1423.23 684.425 L1423.78 684.425 L1424.34 684.425 L1424.9 684.425 L1425.46 684.425 L1426.02 684.425 L1426.58 684.425 L1427.14 684.425 L1427.7 684.425 L1428.26 684.425 L1428.82 684.425 L1429.38 684.425 L1429.94 684.425 L1430.5 684.425 L1431.05 684.425 L1431.61 684.425 L1432.17 684.425 L1432.73 684.425 L1433.29 684.425 L1433.85 684.425 L1434.41 684.425 L1434.97 684.425 L1435.53 684.425 L1436.09 684.425 L1436.65 684.425 L1437.21 684.425 L1437.77 684.425 L1438.33 684.425 L1438.88 684.425 L1439.44 684.425 L1440 684.425 L1440.56 684.425 L1441.12 684.425 L1441.68 684.425 L1442.24 684.425 L1442.8 684.425 L1443.36 684.425 L1443.92 684.425 L1444.48 684.425 L1445.04 684.425 L1445.6 684.425 L1446.15 684.425 L1446.71 684.425 L1447.27 684.425 L1447.83 684.425 L1448.39 684.425 L1448.95 684.425 L1449.51 684.425 L1450.07 684.425 L1450.63 684.425 L1451.19 684.425 L1451.75 684.425 L1452.31 684.425 L1452.87 684.425 L1453.42 684.425 L1453.98 684.425 L1454.54 684.425 L1455.1 684.425 L1455.66 684.425 L1456.22 684.425 L1456.78 684.425 L1457.34 684.425 L1457.9 684.425 L1458.46 684.425 L1459.02 684.425 L1459.58 684.425 L1460.14 684.425 L1460.7 684.425 L1461.25 684.425 L1461.81 684.425 L1462.37 684.425 L1462.93 684.425 L1463.49 684.425 L1464.05 684.425 L1464.61 684.425 L1465.17 684.425 L1465.73 684.425 L1466.29 684.425 L1466.85 684.425 L1467.41 684.425 L1467.97 684.425 L1468.52 684.425 L1469.08 684.425 L1469.64 684.425 L1470.2 684.425 L1470.76 684.425 L1471.32 684.425 L1471.88 684.425 L1472.44 684.425 L1473 684.425 L1473.56 684.425 L1474.12 684.425 L1474.68 684.425 L1475.24 684.425 L1475.79 684.425 L1476.35 684.425 L1476.91 684.425 L1477.47 684.425 L1478.03 684.425 L1478.59 684.425 L1479.15 684.425 L1479.71 684.425 L1480.27 684.425 L1480.83 684.425 L1481.39 684.425 L1481.95 684.425 L1482.51 684.425 L1483.07 684.425 L1483.62 684.425 L1484.18 684.425 L1484.74 684.425 L1485.3 684.425 L1485.86 684.425 L1486.42 684.425 L1486.98 684.425 L1487.54 684.425 L1488.1 684.425 L1488.66 684.425 L1489.22 684.425 L1489.78 684.425 L1490.34 684.425 L1490.89 684.425 L1491.45 684.425 L1492.01 684.425 L1492.57 684.425 L1493.13 684.425 L1493.69 684.425 L1494.25 684.425 L1494.81 684.425 L1495.37 684.425 L1495.93 684.425 L1496.49 684.425 L1497.05 684.425 L1497.61 684.425 L1498.16 684.425 L1498.72 684.425 L1499.28 684.425 L1499.84 684.425 L1500.4 684.425 L1500.96 684.425 L1501.52 684.425 L1502.08 684.425 L1502.64 684.425 L1503.2 684.425 L1503.76 684.425 L1504.32 684.425 L1504.88 684.425 L1505.44 684.425 L1505.99 684.425 L1506.55 684.425 L1507.11 684.425 L1507.67 684.425 L1508.23 684.425 L1508.79 684.425 L1509.35 684.425 L1509.91 684.425 L1510.47 684.425 L1511.03 684.425 L1511.59 684.425 L1512.15 684.425 L1512.71 684.425 L1513.26 684.425 L1513.82 684.425 L1514.38 684.425 L1514.94 684.425 L1515.5 684.425 L1516.06 684.425 L1516.62 684.425 L1517.18 684.425 L1517.74 684.425 L1518.3 684.425 L1518.86 684.425 L1519.42 684.425 L1519.98 684.425 L1520.53 684.425 L1521.09 684.425 L1521.65 684.425 L1522.21 684.425 L1522.77 684.425 L1523.33 684.425 L1523.89 684.425 L1524.45 684.425 L1525.01 684.425 L1525.57 684.425 L1526.13 684.425 L1526.69 684.425 L1527.25 684.425 L1527.81 684.425 L1528.36 684.425 L1528.92 684.425 L1529.48 684.425 L1530.04 684.425 L1530.6 684.425 L1531.16 684.425 L1531.72 684.425 L1532.28 684.425 L1532.84 684.425 L1533.4 684.425 L1533.96 684.425 L1534.52 684.425 L1535.08 684.425 L1535.63 684.425 L1536.19 684.425 L1536.75 684.425 L1537.31 684.425 L1537.87 684.425 L1538.43 684.425 L1538.99 684.425 L1539.55 684.425 L1540.11 684.425 L1540.67 684.425 L1541.23 684.425 L1541.79 684.425 L1542.35 684.425 L1542.9 684.425 L1543.46 684.425 L1544.02 684.425 L1544.58 684.425 L1545.14 684.425 L1545.7 684.425 L1546.26 684.425 L1546.82 684.425 L1547.38 684.425 L1547.94 684.425 L1548.5 684.425 L1549.06 684.425 L1549.62 684.425 L1550.18 684.425 L1550.73 684.425 L1551.29 684.425 L1551.85 684.425 L1552.41 684.425 L1552.97 684.425 L1553.53 684.425 L1554.09 684.425 L1554.65 684.425 L1555.21 684.425 L1555.77 684.425 L1556.33 684.425 L1556.89 684.425 L1557.45 684.425 L1558 684.425 L1558.56 684.425 L1559.12 684.425 L1559.68 684.425 L1560.24 684.425 L1560.8 684.425 L1561.36 684.425 L1561.92 684.425 L1562.48 684.425 L1563.04 684.425 L1563.6 684.425 L1564.16 684.425 L1564.72 684.425 L1565.28 684.425 L1565.83 684.425 L1566.39 684.425 L1566.95 684.425 L1567.51 684.425 L1568.07 684.425 L1568.63 684.425 L1569.19 684.425 L1569.75 684.425 L1570.31 684.425 L1570.87 684.425 L1571.43 684.425 L1571.99 684.425 L1572.55 684.425 L1573.1 684.425 L1573.66 684.425 L1574.22 684.425 L1574.78 684.425 L1575.34 684.425 L1575.9 684.425 L1576.46 684.425 L1577.02 684.425 L1577.58 684.425 L1578.14 684.425 L1578.7 684.425 L1579.26 684.425 L1579.82 684.425 L1580.37 684.425 L1580.93 684.425 L1581.49 684.425 L1582.05 684.425 L1582.61 684.425 L1583.17 684.425 L1583.73 684.425 L1584.29 684.425 L1584.85 684.425 L1585.41 684.425 L1585.97 684.425 L1586.53 684.425 L1587.09 684.425 L1587.65 684.425 L1588.2 684.425 L1588.76 684.425 L1589.32 684.425 L1589.88 684.425 L1590.44 684.425 L1591 684.425 L1591.56 684.425 L1592.12 684.425 L1592.68 684.425 L1593.24 684.425 L1593.8 684.425 L1594.36 684.425 L1594.92 684.425 L1595.47 684.425 L1596.03 684.425 L1596.59 684.425 L1597.15 684.425 L1597.71 684.425 L1598.27 684.425 L1598.83 684.425 L1599.39 684.425 L1599.95 684.425 L1600.51 684.425 L1601.07 684.425 L1601.63 684.425 L1602.19 684.425 L1602.74 684.425 L1603.3 684.425 L1603.86 684.425 L1604.42 684.425 L1604.98 684.425 L1605.54 684.425 L1606.1 684.425 L1606.66 684.425 L1607.22 684.425 L1607.78 684.425 L1608.34 684.425 L1608.9 684.425 L1609.46 684.425 L1610.02 684.425 L1610.57 684.425 L1611.13 684.425 L1611.69 684.425 L1612.25 684.425 L1612.81 684.425 L1613.37 684.425 L1613.93 684.425 L1614.49 684.425 L1615.05 684.425 L1615.61 684.425 L1616.17 684.425 L1616.73 684.425 L1617.29 684.425 L1617.84 684.425 L1618.4 684.425 L1618.96 684.425 L1619.52 684.425 L1620.08 684.425 L1620.64 684.425 L1621.2 684.425 L1621.76 684.425 L1622.32 684.425 L1622.88 684.425 L1623.44 684.425 L1624 684.425 L1624.56 684.425 L1625.11 684.425 L1625.67 684.425 L1626.23 684.425 L1626.79 684.425 L1627.35 684.425 L1627.91 684.425 L1628.47 684.425 L1629.03 684.425 L1629.59 684.425 L1630.15 684.425 L1630.71 684.425 L1631.27 684.425 L1631.83 684.425 L1632.39 684.425 L1632.94 684.425 L1633.5 684.425 L1634.06 684.425 L1634.62 684.425 L1635.18 684.425 L1635.74 684.425 L1636.3 684.425 L1636.86 684.425 L1637.42 684.425 L1637.98 684.425 L1638.54 684.425 L1639.1 684.425 L1639.66 684.425 L1640.21 684.425 L1640.77 684.425 L1641.33 684.425 L1641.89 684.425 L1642.45 684.425 L1643.01 684.425 L1643.57 684.425 L1644.13 684.425 L1644.69 684.425 L1645.25 684.425 L1645.81 684.425 L1646.37 684.425 L1646.93 684.425 L1647.48 684.425 L1648.04 684.425 L1648.6 684.425 L1649.16 684.425 L1649.72 684.425 L1650.28 684.425 L1650.84 684.425 L1651.4 684.425 L1651.96 684.425 L1652.52 684.425 L1653.08 684.425 L1653.64 684.425 L1654.2 684.425 L1654.76 684.425 L1655.31 684.425 L1655.87 684.425 L1656.43 684.425 L1656.99 684.425 L1657.55 684.425 L1658.11 684.425 L1658.67 684.425 L1659.23 684.425 L1659.79 684.425 L1660.35 684.425 L1660.91 684.425 L1661.47 684.425 L1662.03 684.425 L1662.58 684.425 L1663.14 684.425 L1663.7 684.425 L1664.26 684.425 L1664.82 684.425 L1665.38 684.425 L1665.94 684.425 L1666.5 684.425 L1667.06 684.425 L1667.62 684.425 L1668.18 684.425 L1668.74 684.425 L1669.3 684.425 L1669.85 684.425 L1670.41 684.425 L1670.97 684.425 L1671.53 684.425 L1672.09 684.425 L1672.65 684.425 L1673.21 684.425 L1673.77 684.425 L1674.33 684.425 L1674.89 684.425 L1675.45 684.425 L1676.01 684.425 L1676.57 684.425 L1677.13 684.425 L1677.68 684.425 L1678.24 684.425 L1678.8 684.425 L1679.36 684.425 L1679.92 684.425 L1680.48 684.425 L1681.04 684.425 L1681.6 684.425 L1682.16 684.425 L1682.72 684.425 L1683.28 684.425 L1683.84 684.425 L1684.4 684.425 L1684.95 684.425 L1685.51 684.425 L1686.07 684.425 L1686.63 684.425 L1687.19 684.425 L1687.75 684.425 L1688.31 684.425 L1688.87 684.425 L1689.43 684.425 L1689.99 684.425 L1690.55 684.425 L1691.11 684.425 L1691.67 684.425 L1692.23 684.425 L1692.78 684.425 L1693.34 684.425 L1693.9 684.425 L1694.46 684.425 L1695.02 684.425 L1695.58 684.425 L1696.14 684.425 L1696.7 684.425 L1697.26 684.425 L1697.82 684.425 L1698.38 684.425 L1698.94 684.425 L1699.5 684.425 L1700.05 684.425 L1700.61 684.425 L1701.17 684.425 L1701.73 684.425 L1702.29 684.425 L1702.85 684.425 L1703.41 684.425 L1703.97 684.425 L1704.53 684.425 L1705.09 684.425 L1705.65 684.425 L1706.21 684.425 L1706.77 684.425 L1707.32 684.425 L1707.88 684.425 L1708.44 684.425 L1709 684.425 L1709.56 684.425 L1710.12 684.425 L1710.68 684.425 L1711.24 684.425 L1711.8 684.425 L1712.36 684.425 L1712.92 684.425 L1713.48 684.425 L1714.04 684.425 L1714.6 684.425 L1715.15 684.425 L1715.71 684.425 L1716.27 684.425 L1716.83 684.425 L1717.39 684.425 L1717.95 684.425 L1718.51 684.425 L1719.07 684.425 L1719.63 684.425 L1720.19 684.425 L1720.75 684.425 L1721.31 684.425 L1721.87 684.425 L1722.42 684.425 L1722.98 684.425 L1723.54 684.425 L1724.1 684.425 L1724.66 684.425 L1725.22 684.425 L1725.78 684.425 L1726.34 684.425 L1726.9 684.425 L1727.46 684.425 L1728.02 684.425 L1728.58 684.425 L1729.14 684.425 L1729.69 684.425 L1730.25 684.425 L1730.81 684.425 L1731.37 684.425 L1731.93 684.425 L1732.49 684.425 L1733.05 684.425 L1733.61 684.425 L1734.17 684.425 L1734.73 684.425 L1735.29 684.425 L1735.85 684.425 L1736.41 684.425 L1736.97 684.425 L1737.52 684.425 L1738.08 684.425 L1738.64 684.425 L1739.2 684.425 L1739.76 684.425 L1740.32 684.425 L1740.88 684.425 L1741.44 684.425 L1742 684.425 L1742.56 684.425 L1743.12 684.425 L1743.68 684.425 L1744.24 684.425 L1744.79 684.425 L1745.35 684.425 L1745.91 684.425 L1746.47 684.425 L1747.03 684.425 L1747.59 684.425 L1748.15 684.425 L1748.71 684.425 L1749.27 684.425 L1749.83 684.425 L1750.39 684.425 L1750.95 684.425 L1751.51 684.425 L1752.06 684.425 L1752.62 684.425 L1753.18 684.425 L1753.74 684.425 L1754.3 684.425 L1754.86 684.425 L1755.42 684.425 L1755.98 684.425 L1756.54 684.425 L1757.1 684.425 L1757.66 684.425 L1758.22 684.425 L1758.78 684.425 L1759.34 684.425 L1759.89 684.425 L1760.45 684.425 L1761.01 684.425 L1761.57 684.425 L1762.13 684.425 L1762.69 684.425 L1763.25 684.425 L1763.81 684.425 L1764.37 684.425 L1764.93 684.425 L1765.49 684.425 L1766.05 684.425 L1766.61 684.425 L1767.16 684.425 L1767.72 684.425 L1768.28 684.425 L1768.84 684.425 L1769.4 684.425 L1769.96 684.425 L1770.52 684.425 L1771.08 684.425 L1771.64 684.425 L1772.2 684.425 L1772.76 684.425 L1773.32 684.425 L1773.88 684.425 L1774.43 684.425 L1774.99 684.425 L1775.55 684.425 L1776.11 684.425 L1776.67 684.425 L1777.23 684.425 L1777.79 684.425 L1778.35 684.425 L1778.91 684.425 L1779.47 684.425 L1780.03 684.425 L1780.59 684.425 L1781.15 684.425 L1781.71 684.425 L1782.26 684.425 L1782.82 684.425 L1783.38 684.425 L1783.94 684.425 L1784.5 684.425 L1785.06 684.425 L1785.62 684.425 L1786.18 684.425 L1786.74 684.425 L1787.3 684.425 L1787.86 684.425 L1788.42 684.425 L1788.98 684.425 L1789.53 684.425 L1790.09 684.425 L1790.65 684.425 L1791.21 684.425 L1791.77 684.425 L1792.33 684.425 L1792.89 684.425 L1793.45 684.425 L1794.01 684.425 L1794.57 684.425 L1795.13 684.425 L1795.69 684.425 L1796.25 684.425 L1796.8 684.425 L1797.36 684.425 L1797.92 684.425 L1798.48 684.425 L1799.04 684.425 L1799.6 684.425 L1800.16 684.425 L1800.72 684.425 L1801.28 684.425 L1801.84 684.425 L1802.4 684.425 L1802.96 684.425 L1803.52 684.425 L1804.08 684.425 L1804.63 684.425 L1805.19 684.425 L1805.75 684.425 L1806.31 684.425 L1806.87 684.425 L1807.43 684.425 L1807.99 684.425 L1808.55 684.425 L1809.11 684.425 L1809.67 684.425 L1810.23 684.425 L1810.79 684.425 L1811.35 684.425 L1811.9 684.425 L1812.46 684.425 L1813.02 684.425 L1813.58 684.425 L1814.14 684.425 L1814.7 684.425 L1815.26 684.425 L1815.82 684.425 L1816.38 684.425 L1816.94 684.425 L1817.5 684.425 L1818.06 684.425 L1818.62 684.425 L1819.18 684.425 L1819.73 684.425 L1820.29 684.425 L1820.85 684.425 L1821.41 684.425 L1821.97 684.425 L1822.53 684.425 L1823.09 684.425 L1823.65 684.425 L1824.21 684.425 L1824.77 684.425 L1825.33 684.425 L1825.89 684.425 L1826.45 684.425 L1827 684.425 L1827.56 684.425 L1828.12 684.425 L1828.68 684.425 L1829.24 684.425 L1829.8 684.425 L1830.36 684.425 L1830.92 684.425 L1831.48 684.425 L1832.04 684.425 L1832.6 684.425 L1833.16 684.425 L1833.72 684.425 L1834.27 684.425 L1834.83 684.425 L1835.39 684.425 L1835.95 684.425 L1836.51 684.425 L1837.07 684.425 L1837.63 684.425 L1838.19 684.425 L1838.19 682.781 L1837.63 682.781 L1837.07 682.781 L1836.51 682.781 L1835.95 682.781 L1835.39 682.781 L1834.83 682.781 L1834.27 682.781 L1833.72 682.781 L1833.16 682.781 L1832.6 682.781 L1832.04 682.781 L1831.48 682.781 L1830.92 682.781 L1830.36 682.781 L1829.8 682.781 L1829.24 682.781 L1828.68 682.781 L1828.12 682.781 L1827.56 682.781 L1827 682.781 L1826.45 682.781 L1825.89 682.781 L1825.33 682.781 L1824.77 682.781 L1824.21 682.781 L1823.65 682.781 L1823.09 682.781 L1822.53 682.781 L1821.97 682.781 L1821.41 682.781 L1820.85 682.781 L1820.29 682.781 L1819.73 682.781 L1819.18 682.781 L1818.62 682.781 L1818.06 682.781 L1817.5 682.781 L1816.94 682.781 L1816.38 682.781 L1815.82 682.781 L1815.26 682.781 L1814.7 682.781 L1814.14 682.781 L1813.58 682.781 L1813.02 682.781 L1812.46 682.781 L1811.9 682.781 L1811.35 682.781 L1810.79 682.781 L1810.23 682.781 L1809.67 682.781 L1809.11 682.781 L1808.55 682.781 L1807.99 682.781 L1807.43 682.781 L1806.87 682.781 L1806.31 682.781 L1805.75 682.781 L1805.19 682.781 L1804.63 682.781 L1804.08 682.781 L1803.52 682.781 L1802.96 682.781 L1802.4 682.781 L1801.84 682.781 L1801.28 682.781 L1800.72 682.781 L1800.16 682.781 L1799.6 682.781 L1799.04 682.781 L1798.48 682.781 L1797.92 682.781 L1797.36 682.781 L1796.8 682.781 L1796.25 682.781 L1795.69 682.781 L1795.13 682.781 L1794.57 682.781 L1794.01 682.781 L1793.45 682.781 L1792.89 682.781 L1792.33 682.781 L1791.77 682.781 L1791.21 682.781 L1790.65 682.781 L1790.09 682.781 L1789.53 682.781 L1788.98 682.781 L1788.42 682.781 L1787.86 682.781 L1787.3 682.781 L1786.74 682.781 L1786.18 682.781 L1785.62 682.781 L1785.06 682.781 L1784.5 682.781 L1783.94 682.781 L1783.38 682.781 L1782.82 682.781 L1782.26 682.781 L1781.71 682.781 L1781.15 682.781 L1780.59 682.781 L1780.03 682.781 L1779.47 682.781 L1778.91 682.781 L1778.35 682.781 L1777.79 682.781 L1777.23 682.781 L1776.67 682.781 L1776.11 682.781 L1775.55 682.781 L1774.99 682.781 L1774.43 682.781 L1773.88 682.781 L1773.32 682.781 L1772.76 682.781 L1772.2 682.781 L1771.64 682.781 L1771.08 682.781 L1770.52 682.781 L1769.96 682.781 L1769.4 682.781 L1768.84 682.781 L1768.28 682.781 L1767.72 682.781 L1767.16 682.781 L1766.61 682.781 L1766.05 682.781 L1765.49 682.781 L1764.93 682.781 L1764.37 682.781 L1763.81 682.781 L1763.25 682.781 L1762.69 682.781 L1762.13 682.781 L1761.57 682.781 L1761.01 682.781 L1760.45 682.781 L1759.89 682.781 L1759.34 682.781 L1758.78 682.781 L1758.22 682.781 L1757.66 682.781 L1757.1 682.781 L1756.54 682.781 L1755.98 682.781 L1755.42 682.781 L1754.86 682.781 L1754.3 682.781 L1753.74 682.781 L1753.18 682.781 L1752.62 682.781 L1752.06 682.781 L1751.51 682.781 L1750.95 682.781 L1750.39 682.781 L1749.83 682.781 L1749.27 682.781 L1748.71 682.781 L1748.15 682.781 L1747.59 682.781 L1747.03 682.781 L1746.47 682.781 L1745.91 682.781 L1745.35 682.781 L1744.79 682.781 L1744.24 682.781 L1743.68 682.781 L1743.12 682.781 L1742.56 682.781 L1742 682.781 L1741.44 682.781 L1740.88 682.781 L1740.32 682.781 L1739.76 682.781 L1739.2 682.781 L1738.64 682.781 L1738.08 682.781 L1737.52 682.781 L1736.97 682.781 L1736.41 682.781 L1735.85 682.781 L1735.29 682.781 L1734.73 682.781 L1734.17 682.781 L1733.61 682.781 L1733.05 682.781 L1732.49 682.781 L1731.93 682.781 L1731.37 682.781 L1730.81 682.781 L1730.25 682.781 L1729.69 682.781 L1729.14 682.781 L1728.58 682.781 L1728.02 682.781 L1727.46 682.781 L1726.9 682.781 L1726.34 682.781 L1725.78 682.781 L1725.22 682.781 L1724.66 682.781 L1724.1 682.781 L1723.54 682.781 L1722.98 682.781 L1722.42 682.781 L1721.87 682.781 L1721.31 682.781 L1720.75 682.781 L1720.19 682.781 L1719.63 682.781 L1719.07 682.781 L1718.51 682.781 L1717.95 682.781 L1717.39 682.781 L1716.83 682.781 L1716.27 682.781 L1715.71 682.781 L1715.15 682.781 L1714.6 682.781 L1714.04 682.781 L1713.48 682.781 L1712.92 682.781 L1712.36 682.781 L1711.8 682.781 L1711.24 682.781 L1710.68 682.781 L1710.12 682.781 L1709.56 682.781 L1709 682.781 L1708.44 682.781 L1707.88 682.781 L1707.32 682.781 L1706.77 682.781 L1706.21 682.781 L1705.65 682.781 L1705.09 682.781 L1704.53 682.781 L1703.97 682.781 L1703.41 682.781 L1702.85 682.781 L1702.29 682.781 L1701.73 682.781 L1701.17 682.781 L1700.61 682.781 L1700.05 682.781 L1699.5 682.781 L1698.94 682.781 L1698.38 682.781 L1697.82 682.781 L1697.26 682.781 L1696.7 682.781 L1696.14 682.781 L1695.58 682.781 L1695.02 682.781 L1694.46 682.781 L1693.9 682.781 L1693.34 682.781 L1692.78 682.781 L1692.23 682.781 L1691.67 682.781 L1691.11 682.781 L1690.55 682.781 L1689.99 682.781 L1689.43 682.781 L1688.87 682.781 L1688.31 682.781 L1687.75 682.781 L1687.19 682.781 L1686.63 682.781 L1686.07 682.781 L1685.51 682.781 L1684.95 682.781 L1684.4 682.781 L1683.84 682.781 L1683.28 682.781 L1682.72 682.781 L1682.16 682.781 L1681.6 682.781 L1681.04 682.781 L1680.48 682.781 L1679.92 682.781 L1679.36 682.781 L1678.8 682.781 L1678.24 682.781 L1677.68 682.781 L1677.13 682.781 L1676.57 682.781 L1676.01 682.781 L1675.45 682.781 L1674.89 682.781 L1674.33 682.781 L1673.77 682.781 L1673.21 682.781 L1672.65 682.781 L1672.09 682.781 L1671.53 682.781 L1670.97 682.781 L1670.41 682.781 L1669.85 682.781 L1669.3 682.781 L1668.74 682.781 L1668.18 682.781 L1667.62 682.781 L1667.06 682.781 L1666.5 682.781 L1665.94 682.781 L1665.38 682.781 L1664.82 682.781 L1664.26 682.781 L1663.7 682.781 L1663.14 682.781 L1662.58 682.781 L1662.03 682.781 L1661.47 682.781 L1660.91 682.781 L1660.35 682.781 L1659.79 682.781 L1659.23 682.781 L1658.67 682.781 L1658.11 682.781 L1657.55 682.781 L1656.99 682.781 L1656.43 682.781 L1655.87 682.781 L1655.31 682.781 L1654.76 682.781 L1654.2 682.781 L1653.64 682.781 L1653.08 682.781 L1652.52 682.781 L1651.96 682.781 L1651.4 682.781 L1650.84 682.781 L1650.28 682.781 L1649.72 682.781 L1649.16 682.781 L1648.6 682.781 L1648.04 682.781 L1647.48 682.781 L1646.93 682.781 L1646.37 682.781 L1645.81 682.781 L1645.25 682.781 L1644.69 682.781 L1644.13 682.781 L1643.57 682.781 L1643.01 682.781 L1642.45 682.781 L1641.89 682.781 L1641.33 682.781 L1640.77 682.781 L1640.21 682.781 L1639.66 682.781 L1639.1 682.781 L1638.54 682.781 L1637.98 682.781 L1637.42 682.781 L1636.86 682.781 L1636.3 682.781 L1635.74 682.781 L1635.18 682.781 L1634.62 682.781 L1634.06 682.781 L1633.5 682.781 L1632.94 682.781 L1632.39 682.781 L1631.83 682.781 L1631.27 682.781 L1630.71 682.781 L1630.15 682.781 L1629.59 682.781 L1629.03 682.781 L1628.47 682.781 L1627.91 682.781 L1627.35 682.781 L1626.79 682.781 L1626.23 682.781 L1625.67 682.781 L1625.11 682.781 L1624.56 682.781 L1624 682.781 L1623.44 682.781 L1622.88 682.781 L1622.32 682.781 L1621.76 682.781 L1621.2 682.781 L1620.64 682.781 L1620.08 682.781 L1619.52 682.781 L1618.96 682.781 L1618.4 682.781 L1617.84 682.781 L1617.29 682.781 L1616.73 682.781 L1616.17 682.781 L1615.61 682.781 L1615.05 682.781 L1614.49 682.781 L1613.93 682.781 L1613.37 682.781 L1612.81 682.781 L1612.25 682.781 L1611.69 682.781 L1611.13 682.781 L1610.57 682.781 L1610.02 682.781 L1609.46 682.781 L1608.9 682.781 L1608.34 682.781 L1607.78 682.781 L1607.22 682.781 L1606.66 682.781 L1606.1 682.781 L1605.54 682.781 L1604.98 682.781 L1604.42 682.781 L1603.86 682.781 L1603.3 682.781 L1602.74 682.781 L1602.19 682.781 L1601.63 682.781 L1601.07 682.781 L1600.51 682.781 L1599.95 682.781 L1599.39 682.781 L1598.83 682.781 L1598.27 682.781 L1597.71 682.781 L1597.15 682.781 L1596.59 682.781 L1596.03 682.781 L1595.47 682.781 L1594.92 682.781 L1594.36 682.781 L1593.8 682.781 L1593.24 682.781 L1592.68 682.781 L1592.12 682.781 L1591.56 682.781 L1591 682.781 L1590.44 682.781 L1589.88 682.781 L1589.32 682.781 L1588.76 682.781 L1588.2 682.781 L1587.65 682.781 L1587.09 682.781 L1586.53 682.781 L1585.97 682.781 L1585.41 682.781 L1584.85 682.781 L1584.29 682.781 L1583.73 682.781 L1583.17 682.781 L1582.61 682.781 L1582.05 682.781 L1581.49 682.781 L1580.93 682.781 L1580.37 682.781 L1579.82 682.781 L1579.26 682.781 L1578.7 682.781 L1578.14 682.781 L1577.58 682.781 L1577.02 682.781 L1576.46 682.781 L1575.9 682.781 L1575.34 682.781 L1574.78 682.781 L1574.22 682.781 L1573.66 682.781 L1573.1 682.781 L1572.55 682.781 L1571.99 682.781 L1571.43 682.781 L1570.87 682.781 L1570.31 682.781 L1569.75 682.781 L1569.19 682.781 L1568.63 682.781 L1568.07 682.781 L1567.51 682.781 L1566.95 682.781 L1566.39 682.781 L1565.83 682.781 L1565.28 682.781 L1564.72 682.781 L1564.16 682.781 L1563.6 682.781 L1563.04 682.781 L1562.48 682.781 L1561.92 682.781 L1561.36 682.781 L1560.8 682.781 L1560.24 682.781 L1559.68 682.781 L1559.12 682.781 L1558.56 682.781 L1558 682.781 L1557.45 682.781 L1556.89 682.781 L1556.33 682.781 L1555.77 682.781 L1555.21 682.781 L1554.65 682.781 L1554.09 682.781 L1553.53 682.781 L1552.97 682.781 L1552.41 682.781 L1551.85 682.781 L1551.29 682.781 L1550.73 682.781 L1550.18 682.781 L1549.62 682.781 L1549.06 682.781 L1548.5 682.781 L1547.94 682.781 L1547.38 682.781 L1546.82 682.781 L1546.26 682.781 L1545.7 682.781 L1545.14 682.781 L1544.58 682.781 L1544.02 682.781 L1543.46 682.781 L1542.9 682.781 L1542.35 682.781 L1541.79 682.781 L1541.23 682.781 L1540.67 682.781 L1540.11 682.781 L1539.55 682.781 L1538.99 682.781 L1538.43 682.781 L1537.87 682.781 L1537.31 682.781 L1536.75 682.781 L1536.19 682.781 L1535.63 682.781 L1535.08 682.781 L1534.52 682.781 L1533.96 682.781 L1533.4 682.781 L1532.84 682.781 L1532.28 682.781 L1531.72 682.781 L1531.16 682.781 L1530.6 682.781 L1530.04 682.781 L1529.48 682.781 L1528.92 682.781 L1528.36 682.781 L1527.81 682.781 L1527.25 682.781 L1526.69 682.781 L1526.13 682.781 L1525.57 682.781 L1525.01 682.781 L1524.45 682.781 L1523.89 682.781 L1523.33 682.781 L1522.77 682.781 L1522.21 682.781 L1521.65 682.781 L1521.09 682.781 L1520.53 682.781 L1519.98 682.781 L1519.42 682.781 L1518.86 682.781 L1518.3 682.781 L1517.74 682.781 L1517.18 682.781 L1516.62 682.781 L1516.06 682.781 L1515.5 682.781 L1514.94 682.781 L1514.38 682.781 L1513.82 682.781 L1513.26 682.781 L1512.71 682.781 L1512.15 682.781 L1511.59 682.781 L1511.03 682.781 L1510.47 682.781 L1509.91 682.781 L1509.35 682.781 L1508.79 682.781 L1508.23 682.781 L1507.67 682.781 L1507.11 682.781 L1506.55 682.781 L1505.99 682.781 L1505.44 682.781 L1504.88 682.781 L1504.32 682.781 L1503.76 682.781 L1503.2 682.781 L1502.64 682.781 L1502.08 682.781 L1501.52 682.781 L1500.96 682.781 L1500.4 682.781 L1499.84 682.781 L1499.28 682.781 L1498.72 682.781 L1498.16 682.781 L1497.61 682.781 L1497.05 682.781 L1496.49 682.781 L1495.93 682.781 L1495.37 682.781 L1494.81 682.781 L1494.25 682.781 L1493.69 682.781 L1493.13 682.781 L1492.57 682.781 L1492.01 682.781 L1491.45 682.781 L1490.89 682.781 L1490.34 682.781 L1489.78 682.781 L1489.22 682.781 L1488.66 682.781 L1488.1 682.781 L1487.54 682.781 L1486.98 682.781 L1486.42 682.781 L1485.86 682.781 L1485.3 682.781 L1484.74 682.781 L1484.18 682.781 L1483.62 682.781 L1483.07 682.781 L1482.51 682.781 L1481.95 682.781 L1481.39 682.781 L1480.83 682.781 L1480.27 682.781 L1479.71 682.781 L1479.15 682.781 L1478.59 682.781 L1478.03 682.781 L1477.47 682.781 L1476.91 682.781 L1476.35 682.781 L1475.79 682.781 L1475.24 682.781 L1474.68 682.781 L1474.12 682.781 L1473.56 682.781 L1473 682.781 L1472.44 682.781 L1471.88 682.781 L1471.32 682.781 L1470.76 682.781 L1470.2 682.781 L1469.64 682.781 L1469.08 682.781 L1468.52 682.781 L1467.97 682.781 L1467.41 682.781 L1466.85 682.781 L1466.29 682.781 L1465.73 682.781 L1465.17 682.781 L1464.61 682.781 L1464.05 682.781 L1463.49 682.781 L1462.93 682.781 L1462.37 682.781 L1461.81 682.781 L1461.25 682.781 L1460.7 682.781 L1460.14 682.781 L1459.58 682.781 L1459.02 682.781 L1458.46 682.781 L1457.9 682.781 L1457.34 682.781 L1456.78 682.781 L1456.22 682.781 L1455.66 682.781 L1455.1 682.781 L1454.54 682.781 L1453.98 682.781 L1453.42 682.781 L1452.87 682.781 L1452.31 682.781 L1451.75 682.781 L1451.19 682.781 L1450.63 682.781 L1450.07 682.781 L1449.51 682.781 L1448.95 682.781 L1448.39 682.781 L1447.83 682.781 L1447.27 682.781 L1446.71 682.781 L1446.15 682.781 L1445.6 682.781 L1445.04 682.781 L1444.48 682.781 L1443.92 682.781 L1443.36 682.781 L1442.8 682.781 L1442.24 682.781 L1441.68 682.781 L1441.12 682.781 L1440.56 682.781 L1440 682.781 L1439.44 682.781 L1438.88 682.781 L1438.33 682.781 L1437.77 682.781 L1437.21 682.781 L1436.65 682.781 L1436.09 682.781 L1435.53 682.781 L1434.97 682.781 L1434.41 682.781 L1433.85 682.781 L1433.29 682.781 L1432.73 682.781 L1432.17 682.781 L1431.61 682.781 L1431.05 682.781 L1430.5 682.781 L1429.94 682.781 L1429.38 682.781 L1428.82 682.781 L1428.26 682.781 L1427.7 682.781 L1427.14 682.781 L1426.58 682.781 L1426.02 682.781 L1425.46 682.781 L1424.9 682.781 L1424.34 682.781 L1423.78 682.781 L1423.23 682.781 L1422.67 682.781 L1422.11 682.781 L1421.55 682.781 L1420.99 682.781 L1420.43 682.781 L1419.87 682.781 L1419.31 682.781 L1418.75 682.781 L1418.19 682.781 L1417.63 682.781 L1417.07 682.781 L1416.51 682.781 L1415.95 682.781 L1415.4 682.781 L1414.84 682.781 L1414.28 682.781 L1413.72 682.781 L1413.16 682.781 L1412.6 682.781 L1412.04 682.781 L1411.48 682.781 L1410.92 682.781 L1410.36 682.781 L1409.8 682.781 L1409.24 682.781 L1408.68 682.781 L1408.13 682.781 L1407.57 682.781 L1407.01 682.781 L1406.45 682.781 L1405.89 682.781 L1405.33 682.781 L1404.77 682.781 L1404.21 682.781 L1403.65 682.781 L1403.09 682.781 L1402.53 682.781 L1401.97 682.781 L1401.41 682.781 L1400.86 682.781 L1400.3 682.781 L1399.74 682.781 L1399.18 682.781 L1398.62 682.781 L1398.06 682.781 L1397.5 682.781 L1396.94 682.781 L1396.38 682.781 L1395.82 682.781 L1395.26 682.781 L1394.7 682.781 L1394.14 682.781 L1393.58 682.781 L1393.03 682.781 L1392.47 682.781 L1391.91 682.781 L1391.35 682.781 L1390.79 682.781 L1390.23 682.781 L1389.67 682.781 L1389.11 682.781 L1388.55 682.781 L1387.99 682.781 L1387.43 682.781 L1386.87 682.781 L1386.31 682.781 L1385.76 682.781 L1385.2 682.781 L1384.64 682.781 L1384.08 682.781 L1383.52 682.781 L1382.96 682.781 L1382.4 682.781 L1381.84 682.781 L1381.28 682.781 L1380.72 682.781 L1380.16 682.781 L1379.6 682.781 L1379.04 682.781 L1378.49 682.781 L1377.93 682.781 L1377.37 682.781 L1376.81 682.781 L1376.25 682.781 L1375.69 682.781 L1375.13 682.781 L1374.57 682.781 L1374.01 682.781 L1373.45 682.781 L1372.89 682.781 L1372.33 682.781 L1371.77 682.781 L1371.21 682.781 L1370.66 682.781 L1370.1 682.781 L1369.54 682.781 L1368.98 682.781 L1368.42 682.781 L1367.86 682.781 L1367.3 682.781 L1366.74 682.781 L1366.18 682.781 L1365.62 682.781 L1365.06 682.781 L1364.5 682.781 L1363.94 682.781 L1363.39 682.781 L1362.83 682.781 L1362.27 682.781 L1361.71 682.781 L1361.15 682.781 L1360.59 682.781 L1360.03 682.781 L1359.47 682.781 L1358.91 682.781 L1358.35 682.781 L1357.79 682.781 L1357.23 682.781 L1356.67 682.781 L1356.12 682.781 L1355.56 682.781 L1355 682.781 L1354.44 682.781 L1353.88 682.781 L1353.32 682.781 L1352.76 682.781 L1352.2 682.781 L1351.64 682.781 L1351.08 682.781 L1350.52 682.781 L1349.96 682.781 L1349.4 682.781 L1348.84 682.781 L1348.29 682.781 L1347.73 682.781 L1347.17 682.781 L1346.61 682.781 L1346.05 682.781 L1345.49 682.781 L1344.93 682.781 L1344.37 682.781 L1343.81 682.781 L1343.25 682.781 L1342.69 682.781 L1342.13 682.781 L1341.57 682.781 L1341.02 682.781 L1340.46 682.781 L1339.9 682.781 L1339.34 682.781 L1338.78 682.781 L1338.22 682.781 L1337.66 682.781 L1337.1 682.781 L1336.54 682.781 L1335.98 682.781 L1335.42 682.781 L1334.86 682.781 L1334.3 682.781 L1333.75 682.781 L1333.19 682.781 L1332.63 682.781 L1332.07 682.781 L1331.51 682.781 L1330.95 682.781 L1330.39 682.781 L1329.83 682.781 L1329.27 682.781 L1328.71 682.781 L1328.15 682.781 L1327.59 682.781 L1327.03 682.781 L1326.47 682.781 L1325.92 682.781 L1325.36 682.781 L1324.8 682.781 L1324.24 682.781 L1323.68 682.781 L1323.12 682.781 L1322.56 682.781 L1322 682.781 L1321.44 682.781 L1320.88 682.781 L1320.32 682.781 L1319.76 682.781 L1319.2 682.781 L1318.65 682.781 L1318.09 682.781 L1317.53 682.781 L1316.97 682.781 L1316.41 682.781 L1315.85 682.781 L1315.29 682.781 L1314.73 682.781 L1314.17 682.781 L1313.61 682.781 L1313.05 682.781 L1312.49 682.781 L1311.93 682.781 L1311.38 682.781 L1310.82 682.781 L1310.26 682.781 L1309.7 682.781 L1309.14 682.781 L1308.58 682.781 L1308.02 682.781 L1307.46 682.781 L1306.9 682.781 L1306.34 682.781 L1305.78 682.781 L1305.22 682.781 L1304.66 682.781 L1304.1 682.781 L1303.55 682.781 L1302.99 682.781 L1302.43 682.781 L1301.87 682.781 L1301.31 682.781 L1300.75 682.781 L1300.19 682.781 L1299.63 682.781 L1299.07 682.781 L1298.51 682.781 L1297.95 682.781 L1297.39 682.781 L1296.83 682.781 L1296.28 682.781 L1295.72 682.781 L1295.16 682.781 L1294.6 682.781 L1294.04 682.781 L1293.48 682.781 L1292.92 682.781 L1292.36 682.781 L1291.8 682.781 L1291.24 682.781 L1290.68 682.781 L1290.12 682.781 L1289.56 682.781 L1289 682.781 L1288.45 682.781 L1287.89 682.781 L1287.33 682.781 L1286.77 682.781 L1286.21 682.781 L1285.65 682.781 L1285.09 682.781 L1284.53 682.781 L1283.97 682.781 L1283.41 682.781 L1282.85 682.781 L1282.29 682.781 L1281.73 682.781 L1281.18 682.781 L1280.62 682.781 L1280.06 682.781 L1279.5 682.781 L1278.94 682.781 L1278.38 682.781 L1277.82 682.781 L1277.26 682.781 L1276.7 682.781 L1276.14 682.781 L1275.58 682.781 L1275.02 682.781 L1274.46 682.781 L1273.91 682.781 L1273.35 682.781 L1272.79 682.781 L1272.23 682.781 L1271.67 682.781 L1271.11 682.781 L1270.55 682.781 L1269.99 682.781 L1269.43 682.781 L1268.87 682.781 L1268.31 682.781 L1267.75 682.781 L1267.19 682.781 L1266.63 682.781 L1266.08 682.781 L1265.52 682.781 L1264.96 682.781 L1264.4 682.781 L1263.84 682.781 L1263.28 682.781 L1262.72 682.781 L1262.16 682.781 L1261.6 682.781 L1261.04 682.781 L1260.48 682.781 L1259.92 682.781 L1259.36 682.781 L1258.81 682.781 L1258.25 682.781 L1257.69 682.781 L1257.13 682.781 L1256.57 682.781 L1256.01 682.781 L1255.45 682.781 L1254.89 682.781 L1254.33 682.781 L1253.77 682.781 L1253.21 682.781 L1252.65 682.781 L1252.09 682.781 L1251.54 682.781 L1250.98 682.781 L1250.42 682.781 L1249.86 682.781 L1249.3 682.781 L1248.74 682.781 L1248.18 682.781 L1247.62 682.781 L1247.06 682.781 L1246.5 682.781 L1245.94 682.781 L1245.38 682.781 L1244.82 682.781 L1244.26 682.781 L1243.71 682.781 L1243.15 682.781 L1242.59 682.781 L1242.03 682.781 L1241.47 682.781 L1240.91 682.781 L1240.35 682.781 L1239.79 682.781 L1239.23 682.781 L1238.67 682.781 L1238.11 682.781 L1237.55 682.781 L1236.99 682.781 L1236.44 682.781 L1235.88 682.781 L1235.32 682.781 L1234.76 682.781 L1234.2 682.781 L1233.64 682.781 L1233.08 682.781 L1232.52 682.781 L1231.96 682.781 L1231.4 682.781 L1230.84 682.781 L1230.28 682.781 L1229.72 682.781 L1229.17 682.781 L1228.61 682.781 L1228.05 682.781 L1227.49 682.781 L1226.93 682.781 L1226.37 682.781 L1225.81 682.781 L1225.25 682.781 L1224.69 682.781 L1224.13 682.781 L1223.57 682.781 L1223.01 682.781 L1222.45 682.781 L1221.89 682.781 L1221.34 682.781 L1220.78 682.781 L1220.22 682.781 L1219.66 682.781 L1219.1 682.781 L1218.54 682.781 L1217.98 682.781 L1217.42 682.781 L1216.86 682.781 L1216.3 682.781 L1215.74 682.781 L1215.18 682.781 L1214.62 682.781 L1214.07 682.781 L1213.51 682.781 L1212.95 682.781 L1212.39 682.781 L1211.83 682.781 L1211.27 682.781 L1210.71 682.781 L1210.15 682.781 L1209.59 682.781 L1209.03 682.781 L1208.47 682.781 L1207.91 682.781 L1207.35 682.781 L1206.8 682.781 L1206.24 682.781 L1205.68 682.781 L1205.12 682.781 L1204.56 682.781 L1204 682.781 L1203.44 682.781 L1202.88 682.781 L1202.32 682.781 L1201.76 682.781 L1201.2 682.781 L1200.64 682.781 L1200.08 682.781 L1199.52 682.781 L1198.97 682.781 L1198.41 682.781 L1197.85 682.781 L1197.29 682.781 L1196.73 682.781 L1196.17 682.781 L1195.61 682.781 L1195.05 682.781 L1194.49 682.781 L1193.93 682.781 L1193.37 682.781 L1192.81 682.781 L1192.25 682.781 L1191.7 682.781 L1191.14 682.781 L1190.58 682.781 L1190.02 682.781 L1189.46 682.781 L1188.9 682.781 L1188.34 682.781 L1187.78 682.781 L1187.22 682.781 L1186.66 682.781 L1186.1 682.781 L1185.54 682.781 L1184.98 682.781 L1184.43 682.781 L1183.87 682.781 L1183.31 682.781 L1182.75 682.781 L1182.19 682.781 L1181.63 682.781 L1181.07 682.781 L1180.51 682.781 L1179.95 682.781 L1179.39 682.781 L1178.83 682.781 L1178.27 682.781 L1177.71 682.781 L1177.15 682.781 L1176.6 682.781 L1176.04 682.781 L1175.48 682.781 L1174.92 682.781 L1174.36 682.781 L1173.8 682.781 L1173.24 682.781 L1172.68 682.781 L1172.12 682.781 L1171.56 682.781 L1171 682.781 L1170.44 682.781 L1169.88 682.781 L1169.33 682.781 L1168.77 682.781 L1168.21 682.781 L1167.65 682.781 L1167.09 682.781 L1166.53 682.781 L1165.97 682.781 L1165.41 682.781 L1164.85 682.781 L1164.29 682.781 L1163.73 682.781 L1163.17 682.781 L1162.61 682.781 L1162.05 682.781 L1161.5 682.781 L1160.94 682.781 L1160.38 682.781 L1159.82 682.781 L1159.26 682.781 L1158.7 682.781 L1158.14 682.781 L1157.58 682.781 L1157.02 682.781 L1156.46 682.781 L1155.9 682.781 L1155.34 682.781 L1154.78 682.781 L1154.23 682.781 L1153.67 682.781 L1153.11 682.781 L1152.55 682.781 L1151.99 682.781 L1151.43 682.781 L1150.87 682.781 L1150.31 682.781 L1149.75 682.781 L1149.19 682.781 L1148.63 682.781 L1148.07 682.781 L1147.51 682.781 L1146.96 682.781 L1146.4 682.781 L1145.84 682.781 L1145.28 682.781 L1144.72 682.781 L1144.16 682.781 L1143.6 682.781 L1143.04 682.781 L1142.48 682.781 L1141.92 682.781 L1141.36 682.781 L1140.8 682.781 L1140.24 682.781 L1139.68 682.781 L1139.13 682.781 L1138.57 682.781 L1138.01 682.781 L1137.45 682.781 L1136.89 682.781 L1136.33 682.781 L1135.77 682.781 L1135.21 682.781 L1134.65 682.781 L1134.09 682.781 L1133.53 682.781 L1132.97 682.781 L1132.41 682.781 L1131.86 682.781 L1131.3 682.781 L1130.74 682.781 L1130.18 682.781 L1129.62 682.781 L1129.06 682.781 L1128.5 682.781 L1127.94 682.781 L1127.38 682.781 L1126.82 682.781 L1126.26 682.781 L1125.7 682.781 L1125.14 682.781 L1124.59 682.781 L1124.03 682.781 L1123.47 682.781 L1122.91 682.781 L1122.35 682.781 L1121.79 682.781 L1121.23 682.781 L1120.67 682.781 L1120.11 682.781 L1119.55 682.781 L1118.99 682.781 L1118.43 682.781 L1117.87 682.781 L1117.31 682.781 L1116.76 682.781 L1116.2 682.781 L1115.64 682.781 L1115.08 682.781 L1114.52 682.781 L1113.96 682.781 L1113.4 682.781 L1112.84 682.781 L1112.28 682.781 L1111.72 682.781 L1111.16 682.781 L1110.6 682.781 L1110.04 682.781 L1109.49 682.781 L1108.93 682.781 L1108.37 682.781 L1107.81 682.781 L1107.25 682.781 L1106.69 682.781 L1106.13 682.781 L1105.57 682.781 L1105.01 682.781 L1104.45 682.781 L1103.89 682.781 L1103.33 682.781 L1102.77 682.781 L1102.22 682.781 L1101.66 682.781 L1101.1 682.781 L1100.54 682.781 L1099.98 682.781 L1099.42 682.781 L1098.86 682.781 L1098.3 682.781 L1097.74 682.781 L1097.18 682.781 L1096.62 682.781 L1096.06 682.781 L1095.5 682.781 L1094.94 682.781 L1094.39 682.781 L1093.83 682.781 L1093.27 682.781 L1092.71 682.781 L1092.15 682.781 L1091.59 682.781 L1091.03 682.781 L1090.47 682.781 L1089.91 682.781 L1089.35 682.781 L1088.79 682.781 L1088.23 682.781 L1087.67 682.781 L1087.12 682.781 L1086.56 682.781 L1086 682.781 L1085.44 682.781 L1084.88 682.781 L1084.32 682.781 L1083.76 682.781 L1083.2 682.781 L1082.64 682.781 L1082.08 682.781 L1081.52 682.781 L1080.96 682.781 L1080.4 682.781 L1079.85 682.781 L1079.29 682.781 L1078.73 682.781 L1078.17 682.781 L1077.61 682.781 L1077.05 682.781 L1076.49 682.781 L1075.93 682.781 L1075.37 682.781 L1074.81 682.781 L1074.25 682.781 L1073.69 682.781 L1073.13 682.781 L1072.57 682.781 L1072.02 682.781 L1071.46 682.781 L1070.9 682.781 L1070.34 682.781 L1069.78 682.781 L1069.22 682.781 L1068.66 682.781 L1068.1 682.781 L1067.54 682.781 L1066.98 682.781 L1066.42 682.781 L1065.86 682.781 L1065.3 682.781 L1064.75 682.781 L1064.19 682.781 L1063.63 682.781 L1063.07 682.781 L1062.51 682.781 L1061.95 682.781 L1061.39 682.781 L1060.83 682.781 L1060.27 682.781 L1059.71 682.781 L1059.15 682.781 L1058.59 682.781 L1058.03 682.781 L1057.48 682.781 L1056.92 682.781 L1056.36 682.781 L1055.8 682.781 L1055.24 682.781 L1054.68 682.781 L1054.12 682.781 L1053.56 682.781 L1053 682.781 L1052.44 682.781 L1051.88 682.781 L1051.32 682.781 L1050.76 682.781 L1050.2 682.781 L1049.65 682.781 L1049.09 682.781 L1048.53 682.781 L1047.97 682.781 L1047.41 682.781 L1046.85 682.781 L1046.29 682.781 L1045.73 682.781 L1045.17 682.781 L1044.61 682.781 L1044.05 682.781 L1043.49 682.781 L1042.93 682.781 L1042.38 682.781 L1041.82 682.781 L1041.26 682.781 L1040.7 682.781 L1040.14 682.781 L1039.58 682.781 L1039.02 682.781 L1038.46 682.781 L1037.9 682.781 L1037.34 682.781 L1036.78 682.781 L1036.22 682.781 L1035.66 682.781 L1035.1 682.781 L1034.55 682.781 L1033.99 682.781 L1033.43 682.781 L1032.87 682.781 L1032.31 682.781 L1031.75 682.781 L1031.19 682.781 L1030.63 682.781 L1030.07 682.781 L1029.51 682.781 L1028.95 682.781 L1028.39 682.781 L1027.83 682.781 L1027.28 682.781 L1026.72 682.781 L1026.16 682.781 L1025.6 682.781 L1025.04 682.781 L1024.48 682.781 L1023.92 682.781 L1023.36 682.781 L1022.8 682.781 L1022.24 682.781 L1021.68 682.781 L1021.12 682.781 L1020.56 682.781 L1020.01 682.781 L1019.45 682.781 L1018.89 682.781 L1018.33 682.781 L1017.77 682.781 L1017.21 682.781 L1016.65 682.781 L1016.09 682.781 L1015.53 682.781 L1014.97 682.781 L1014.41 682.781 L1013.85 682.781 L1013.29 682.781 L1012.73 682.781 L1012.18 682.781 L1011.62 682.781 L1011.06 682.781 L1010.5 682.781 L1009.94 682.781 L1009.38 682.781 L1008.82 682.781 L1008.26 682.781 L1007.7 682.781 L1007.14 682.781 L1006.58 682.781 L1006.02 682.781 L1005.46 682.781 L1004.91 682.781 L1004.35 682.781 L1003.79 682.781 L1003.23 682.781 L1002.67 682.781 L1002.11 682.781 L1001.55 682.781 L1000.99 682.781 L1000.43 682.781 L999.872 682.781 L999.313 682.781 L998.754 682.781 L998.194 682.781 L997.635 682.781 L997.076 682.781 L996.517 682.781 L995.957 682.781 L995.398 682.781 L994.839 682.781 L994.28 682.781 L993.72 682.781 L993.161 682.781 L992.602 682.781 L992.043 682.781 L991.483 682.781 L990.924 682.781 L990.365 682.781 L989.806 682.781 L989.246 682.781 L988.687 682.781 L988.128 682.781 L987.569 682.781 L987.009 682.781 L986.45 682.781 L985.891 682.781 L985.332 682.781 L984.772 682.781 L984.213 682.781 L983.654 682.781 L983.095 682.781 L982.535 682.781 L981.976 682.781 L981.417 682.781 L980.858 682.781 L980.298 682.781 L979.739 682.781 L979.18 682.781 L978.621 682.781 L978.061 682.781 L977.502 682.781 L976.943 682.781 L976.384 682.781 L975.824 682.781 L975.265 682.781 L974.706 682.781 L974.147 682.781 L973.587 682.781 L973.028 682.781 L972.469 682.781 L971.91 682.781 L971.35 682.781 L970.791 682.781 L970.232 682.781 L969.673 682.781 L969.113 682.781 L968.554 682.781 L967.995 682.781 L967.436 682.781 L966.876 682.781 L966.317 682.781 L965.758 682.781 L965.199 682.781 L964.639 682.781 L964.08 682.781 L963.521 682.781 L962.962 682.781 L962.402 682.781 L961.843 682.781 L961.284 682.781 L960.725 682.781 L960.165 682.781 L959.606 682.781 L959.047 682.781 L958.488 682.781 L957.928 682.781 L957.369 682.781 L956.81 682.781 L956.251 682.781 L955.691 682.781 L955.132 682.781 L954.573 682.781 L954.014 682.781 L953.454 682.781 L952.895 682.781 L952.336 682.781 L951.777 682.781 L951.217 682.781 L950.658 682.781 L950.099 682.781 L949.54 682.781 L948.98 682.781 L948.421 682.781 L947.862 682.781 L947.303 682.781 L946.743 682.781 L946.184 682.781 L945.625 682.781 L945.066 682.781 L944.506 682.781 L943.947 682.781 L943.388 682.781 L942.829 682.781 L942.269 682.781 L941.71 682.781 L941.151 682.781 L940.592 682.781 L940.032 682.781 L939.473 682.781 L938.914 682.781 L938.355 682.781 L937.795 682.781 L937.236 682.781 L936.677 682.781 L936.118 682.781 L935.558 682.781 L934.999 682.781 L934.44 682.781 L933.881 682.781 L933.321 682.781 L932.762 682.781 L932.203 682.781 L931.644 682.781 L931.084 682.781 L930.525 682.781 L929.966 682.781 L929.406 682.781 L928.847 682.781 L928.288 682.781 L927.729 682.781 L927.169 682.781 L926.61 682.781 L926.051 682.781 L925.492 682.781 L924.932 682.781 L924.373 682.781 L923.814 682.781 L923.255 682.781 L922.695 682.781 L922.136 682.781 L921.577 682.781 L921.018 682.781 L920.458 682.781 L919.899 682.781 L919.34 682.781 L918.781 682.781 L918.221 682.781 L917.662 682.781 L917.103 682.781 L916.544 682.781 L915.984 682.781 L915.425 682.781 L914.866 682.781 L914.307 682.781 L913.747 682.781 L913.188 682.781 L912.629 682.781 L912.07 682.781 L911.51 682.781 L910.951 682.781 L910.392 682.781 L909.833 682.781 L909.273 682.781 L908.714 682.781 L908.155 682.781 L907.596 682.781 L907.036 682.781 L906.477 682.781 L905.918 682.781 L905.359 682.781 L904.799 682.781 L904.24 682.781 L903.681 682.781 L903.122 682.781 L902.562 682.781 L902.003 682.781 L901.444 682.781 L900.885 682.781 L900.325 682.781 L899.766 682.781 L899.207 682.781 L898.648 682.781 L898.088 682.781 L897.529 682.781 L896.97 682.781 L896.411 682.781 L895.851 682.781 L895.292 682.781 L894.733 682.781 L894.174 682.781 L893.614 682.781 L893.055 682.781 L892.496 682.781 L891.937 682.781 L891.377 682.781 L890.818 682.781 L890.259 682.781 L889.7 682.781 L889.14 682.781 L888.581 682.781 L888.022 682.781 L887.463 682.781 L886.903 682.781 L886.344 682.781 L885.785 682.781 L885.226 682.781 L884.666 682.781 L884.107 682.781 L883.548 682.781 L882.989 682.781 L882.429 682.781 L881.87 682.781 L881.311 682.781 L880.752 682.781 L880.192 682.781 L879.633 682.781 L879.074 682.781 L878.515 682.781 L877.955 682.781 L877.396 682.781 L876.837 682.781 L876.278 682.781 L875.718 682.781 L875.159 682.781 L874.6 682.781 L874.041 682.781 L873.481 682.781 L872.922 682.781 L872.363 682.781 L871.804 682.781 L871.244 682.781 L870.685 682.781 L870.126 682.781 L869.567 682.781 L869.007 682.781 L868.448 682.781 L867.889 682.781 L867.33 682.781 L866.77 682.781 L866.211 682.781 L865.652 682.781 L865.093 682.781 L864.533 682.781 L863.974 682.781 L863.415 682.781 L862.856 682.781 L862.296 682.781 L861.737 682.781 L861.178 682.781 L860.619 682.781 L860.059 682.781 L859.5 682.781 L858.941 682.781 L858.382 682.781 L857.822 682.781 L857.263 682.781 L856.704 682.781 L856.145 682.781 L855.585 682.781 L855.026 682.781 L854.467 682.781 L853.908 682.781 L853.348 682.781 L852.789 682.781 L852.23 682.781 L851.671 682.781 L851.111 682.781 L850.552 682.781 L849.993 682.781 L849.434 682.781 L848.874 682.781 L848.315 682.781 L847.756 682.781 L847.197 682.781 L846.637 682.781 L846.078 682.781 L845.519 682.781 L844.96 682.781 L844.4 682.781 L843.841 682.781 L843.282 682.781 L842.723 682.781 L842.163 682.781 L841.604 682.781 L841.045 682.781 L840.486 682.781 L839.926 682.781 L839.367 682.781 L838.808 682.781 L838.249 682.781 L837.689 682.781 L837.13 682.781 L836.571 682.781 L836.012 682.781 L835.452 682.781 L834.893 682.781 L834.334 682.781 L833.775 682.781 L833.215 682.781 L832.656 682.781 L832.097 682.781 L831.538 682.781 L830.978 682.781 L830.419 682.781 L829.86 682.781 L829.301 682.781 L828.741 682.781 L828.182 682.781 L827.623 682.781 L827.064 682.781 L826.504 682.781 L825.945 682.781 L825.386 682.781 L824.827 682.781 L824.267 682.781 L823.708 682.781 L823.149 682.781 L822.59 682.781 L822.03 682.781 L821.471 682.781 L820.912 682.781 L820.353 682.781 L819.793 682.781 L819.234 682.781 L818.675 682.781 L818.116 682.781 L817.556 682.781 L816.997 682.781 L816.438 682.781 L815.879 682.781 L815.319 682.781 L814.76 682.781 L814.201 682.781 L813.642 682.781 L813.082 682.781 L812.523 682.781 L811.964 682.781 L811.405 682.781 L810.845 682.781 L810.286 682.781 L809.727 682.781 L809.168 682.781 L808.608 682.781 L808.049 682.781 L807.49 682.781 L806.931 682.781 L806.371 682.781 L805.812 682.781 L805.253 682.781 L804.693 682.781 L804.134 682.781 L803.575 682.781 L803.016 682.781 L802.456 682.781 L801.897 682.781 L801.338 682.781 L800.779 682.781 L800.219 682.781 L799.66 682.781 L799.101 682.781 L798.542 682.781 L797.982 682.781 L797.423 682.781 L796.864 682.781 L796.305 682.781 L795.745 682.781 L795.186 682.781 L794.627 682.781 L794.068 682.781 L793.508 682.781 L792.949 682.781 L792.39 682.781 L791.831 682.781 L791.271 682.781 L790.712 682.781 L790.153 682.781 L789.594 682.781 L789.034 682.781 L788.475 682.781 L787.916 682.781 L787.357 682.781 L786.797 682.781 L786.238 682.781 L785.679 682.781 L785.12 682.781 L784.56 682.781 L784.001 682.781 L783.442 682.781 L782.883 682.781 L782.323 682.781 L781.764 682.781 L781.205 682.781 L780.646 682.781 L780.086 682.781 L779.527 682.781 L778.968 682.781 L778.409 682.781 L777.849 682.781 L777.29 682.781 L776.731 682.781 L776.172 682.781 L775.612 682.781 L775.053 682.781 L774.494 682.781 L773.935 682.781 L773.375 682.781 L772.816 682.781 L772.257 682.781 L771.698 682.781 L771.138 682.781 L770.579 682.781 L770.02 682.781 L769.461 682.781 L768.901 682.781 L768.342 682.781 L767.783 682.781 L767.224 682.781 L766.664 682.781 L766.105 682.781 L765.546 682.781 L764.987 682.781 L764.427 682.781 L763.868 682.781 L763.309 682.781 L762.75 682.781 L762.19 682.781 L761.631 682.781 L761.072 682.781 L760.513 682.781 L759.953 682.781 L759.394 682.781 L758.835 682.781 L758.276 682.781 L757.716 682.781 L757.157 682.781 L756.598 682.781 L756.039 682.781 L755.479 682.781 L754.92 682.781 L754.361 682.781 L753.802 682.781 L753.242 682.781 L752.683 682.781 L752.124 682.781 L751.565 682.781 L751.005 682.781 L750.446 682.781 L749.887 682.781 L749.328 682.781 L748.768 682.781 L748.209 682.781 L747.65 682.781 L747.091 682.781 L746.531 682.781 L745.972 682.781 L745.413 682.781 L744.854 682.781 L744.294 682.781 L743.735 682.781 L743.176 682.781 L742.617 682.781 L742.057 682.781 L741.498 682.781 L740.939 682.781 L740.38 682.781 L739.82 682.781 L739.261 682.781 L738.702 682.781 L738.143 682.781 L737.583 682.781 L737.024 682.781 L736.465 682.781 L735.906 682.781 L735.346 682.781 L734.787 682.781 L734.228 682.781 L733.669 682.781 L733.109 682.781 L732.55 682.781 L731.991 682.781 L731.432 682.781 L730.872 682.781 L730.313 682.781 L729.754 682.781 L729.195 682.781 L728.635 682.781 L728.076 682.781 L727.517 682.781 L726.958 682.781 L726.398 682.781 L725.839 682.781 L725.28 682.781 L724.721 682.781 L724.161 682.781 L723.602 682.781 L723.043 682.781 L722.484 682.781 L721.924 682.781 L721.365 682.781 L720.806 682.781 L720.247 682.781  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.6 720.806,683.6 721.365,683.6 721.924,683.6 722.484,683.6 723.043,683.6 723.602,683.6 724.161,683.6 724.721,683.6 725.28,683.6 725.839,683.6 726.398,683.6 726.958,683.6 727.517,683.6 728.076,683.6 728.635,683.6 729.195,683.6 729.754,683.6 730.313,683.6 730.872,683.6 731.432,683.6 731.991,683.6 732.55,683.6 733.109,683.6 733.669,683.6 734.228,683.6 734.787,683.6 735.346,683.6 735.906,683.6 736.465,683.6 737.024,683.6 737.583,683.6 738.143,683.6 738.702,683.6 739.261,683.6 739.82,683.6 740.38,683.6 740.939,683.6 741.498,683.6 742.057,683.6 742.617,683.6 743.176,683.6 743.735,683.6 744.294,683.6 744.854,683.6 745.413,683.6 745.972,683.6 746.531,683.6 747.091,683.6 747.65,683.6 748.209,683.6 748.768,683.6 749.328,683.6 749.887,683.6 750.446,683.6 751.005,683.6 751.565,683.6 752.124,683.6 752.683,683.6 753.242,683.6 753.802,683.6 754.361,683.6 754.92,683.6 755.479,683.6 756.039,683.6 756.598,683.6 757.157,683.6 757.716,683.6 758.276,683.6 758.835,683.6 759.394,683.6 759.953,683.6 760.513,683.6 761.072,683.6 761.631,683.6 762.19,683.6 762.75,683.6 763.309,683.6 763.868,683.6 764.427,683.6 764.987,683.6 765.546,683.6 766.105,683.6 766.664,683.6 767.224,683.6 767.783,683.6 768.342,683.6 768.901,683.6 769.461,683.6 770.02,683.6 770.579,683.6 771.138,683.6 771.698,683.6 772.257,683.6 772.816,683.6 773.375,683.6 773.935,683.6 774.494,683.6 775.053,683.6 775.612,683.6 776.172,683.6 776.731,683.6 777.29,683.6 777.849,683.6 778.409,683.6 778.968,683.6 779.527,683.6 780.086,683.6 780.646,683.6 781.205,683.6 781.764,683.6 782.323,683.6 782.883,683.6 783.442,683.6 784.001,683.6 784.56,683.6 785.12,683.6 785.679,683.6 786.238,683.6 786.797,683.6 787.357,683.6 787.916,683.6 788.475,683.6 789.034,683.6 789.594,683.6 790.153,683.6 790.712,683.6 791.271,683.6 791.831,683.6 792.39,683.6 792.949,683.6 793.508,683.6 794.068,683.6 794.627,683.6 795.186,683.6 795.745,683.6 796.305,683.6 796.864,683.6 797.423,683.6 797.982,683.6 798.542,683.6 799.101,683.6 799.66,683.6 800.219,683.6 800.779,683.6 801.338,683.6 801.897,683.6 802.456,683.6 803.016,683.6 803.575,683.6 804.134,683.6 804.693,683.6 805.253,683.6 805.812,683.6 806.371,683.6 806.931,683.6 807.49,683.6 808.049,683.6 808.608,683.6 809.168,683.6 809.727,683.6 810.286,683.6 810.845,683.6 811.405,683.6 811.964,683.6 812.523,683.6 813.082,683.6 813.642,683.6 814.201,683.6 814.76,683.6 815.319,683.6 815.879,683.6 816.438,683.6 816.997,683.6 817.556,683.6 818.116,683.6 818.675,683.6 819.234,683.6 819.793,683.6 820.353,683.6 820.912,683.6 821.471,683.6 822.03,683.6 822.59,683.6 823.149,683.6 823.708,683.6 824.267,683.6 824.827,683.6 825.386,683.6 825.945,683.6 826.504,683.6 827.064,683.6 827.623,683.6 828.182,683.6 828.741,683.6 829.301,683.6 829.86,683.6 830.419,683.6 830.978,683.6 831.538,683.6 832.097,683.6 832.656,683.6 833.215,683.6 833.775,683.6 834.334,683.6 834.893,683.6 835.452,683.6 836.012,683.6 836.571,683.6 837.13,683.6 837.689,683.6 838.249,683.6 838.808,683.6 839.367,683.6 839.926,683.6 840.486,683.6 841.045,683.6 841.604,683.6 842.163,683.6 842.723,683.6 843.282,683.6 843.841,683.6 844.4,683.6 844.96,683.6 845.519,683.6 846.078,683.6 846.637,683.6 847.197,683.6 847.756,683.6 848.315,683.6 848.874,683.6 849.434,683.6 849.993,683.6 850.552,683.6 851.111,683.6 851.671,683.6 852.23,683.6 852.789,683.6 853.348,683.6 853.908,683.6 854.467,683.6 855.026,683.6 855.585,683.6 856.145,683.6 856.704,683.6 857.263,683.6 857.822,683.6 858.382,683.6 858.941,683.6 859.5,683.6 860.059,683.6 860.619,683.6 861.178,683.6 861.737,683.6 862.296,683.6 862.856,683.6 863.415,683.6 863.974,683.6 864.533,683.6 865.093,683.6 865.652,683.6 866.211,683.6 866.77,683.6 867.33,683.6 867.889,683.6 868.448,683.6 869.007,683.6 869.567,683.6 870.126,683.6 870.685,683.6 871.244,683.6 871.804,683.6 872.363,683.6 872.922,683.6 873.481,683.6 874.041,683.6 874.6,683.6 875.159,683.6 875.718,683.6 876.278,683.6 876.837,683.6 877.396,683.6 877.955,683.6 878.515,683.6 879.074,683.6 879.633,683.6 880.192,683.6 880.752,683.6 881.311,683.6 881.87,683.6 882.429,683.6 882.989,683.6 883.548,683.6 884.107,683.6 884.666,683.6 885.226,683.6 885.785,683.6 886.344,683.6 886.903,683.6 887.463,683.6 888.022,683.6 888.581,683.6 889.14,683.6 889.7,683.6 890.259,683.6 890.818,683.6 891.377,683.6 891.937,683.6 892.496,683.6 893.055,683.6 893.614,683.6 894.174,683.6 894.733,683.6 895.292,683.6 895.851,683.6 896.411,683.6 896.97,683.6 897.529,683.6 898.088,683.6 898.648,683.6 899.207,683.6 899.766,683.6 900.325,683.6 900.885,683.6 901.444,683.6 902.003,683.6 902.562,683.6 903.122,683.6 903.681,683.6 904.24,683.6 904.799,683.6 905.359,683.6 905.918,683.6 906.477,683.6 907.036,683.6 907.596,683.6 908.155,683.6 908.714,683.6 909.273,683.6 909.833,683.6 910.392,683.6 910.951,683.6 911.51,683.6 912.07,683.6 912.629,683.6 913.188,683.6 913.747,683.6 914.307,683.6 914.866,683.6 915.425,683.6 915.984,683.6 916.544,683.6 917.103,683.6 917.662,683.6 918.221,683.6 918.781,683.6 919.34,683.6 919.899,683.6 920.458,683.6 921.018,683.6 921.577,683.6 922.136,683.6 922.695,683.6 923.255,683.6 923.814,683.6 924.373,683.6 924.932,683.6 925.492,683.6 926.051,683.6 926.61,683.6 927.169,683.6 927.729,683.6 928.288,683.6 928.847,683.6 929.406,683.6 929.966,683.6 930.525,683.6 931.084,683.6 931.644,683.6 932.203,683.6 932.762,683.6 933.321,683.6 933.881,683.6 934.44,683.6 934.999,683.6 935.558,683.6 936.118,683.6 936.677,683.6 937.236,683.6 937.795,683.6 938.355,683.6 938.914,683.6 939.473,683.6 940.032,683.6 940.592,683.6 941.151,683.6 941.71,683.6 942.269,683.6 942.829,683.6 943.388,683.6 943.947,683.6 944.506,683.6 945.066,683.6 945.625,683.6 946.184,683.6 946.743,683.6 947.303,683.6 947.862,683.6 948.421,683.6 948.98,683.6 949.54,683.6 950.099,683.6 950.658,683.6 951.217,683.6 951.777,683.6 952.336,683.6 952.895,683.6 953.454,683.6 954.014,683.6 954.573,683.6 955.132,683.6 955.691,683.6 956.251,683.6 956.81,683.6 957.369,683.6 957.928,683.6 958.488,683.6 959.047,683.6 959.606,683.6 960.165,683.6 960.725,683.6 961.284,683.6 961.843,683.6 962.402,683.6 962.962,683.6 963.521,683.6 964.08,683.6 964.639,683.6 965.199,683.6 965.758,683.6 966.317,683.6 966.876,683.6 967.436,683.6 967.995,683.6 968.554,683.6 969.113,683.6 969.673,683.6 970.232,683.6 970.791,683.6 971.35,683.6 971.91,683.6 972.469,683.6 973.028,683.6 973.587,683.6 974.147,683.6 974.706,683.6 975.265,683.6 975.824,683.6 976.384,683.6 976.943,683.6 977.502,683.6 978.061,683.6 978.621,683.6 979.18,683.6 979.739,683.6 980.298,683.6 980.858,683.6 981.417,683.6 981.976,683.6 982.535,683.6 983.095,683.6 983.654,683.6 984.213,683.6 984.772,683.6 985.332,683.6 985.891,683.6 986.45,683.6 987.009,683.6 987.569,683.6 988.128,683.6 988.687,683.6 989.246,683.6 989.806,683.6 990.365,683.6 990.924,683.6 991.483,683.6 992.043,683.6 992.602,683.6 993.161,683.6 993.72,683.6 994.28,683.6 994.839,683.6 995.398,683.6 995.957,683.6 996.517,683.6 997.076,683.6 997.635,683.6 998.194,683.6 998.754,683.6 999.313,683.6 999.872,683.6 1000.43,683.6 1000.99,683.6 1001.55,683.6 1002.11,683.6 1002.67,683.6 1003.23,683.6 1003.79,683.6 1004.35,683.6 1004.91,683.6 1005.46,683.6 1006.02,683.6 1006.58,683.6 1007.14,683.6 1007.7,683.6 1008.26,683.6 1008.82,683.6 1009.38,683.6 1009.94,683.6 1010.5,683.6 1011.06,683.6 1011.62,683.6 1012.18,683.6 1012.73,683.6 1013.29,683.6 1013.85,683.6 1014.41,683.6 1014.97,683.6 1015.53,683.6 1016.09,683.6 1016.65,683.6 1017.21,683.6 1017.77,683.6 1018.33,683.6 1018.89,683.6 1019.45,683.6 1020.01,683.6 1020.56,683.6 1021.12,683.6 1021.68,683.6 1022.24,683.6 1022.8,683.6 1023.36,683.6 1023.92,683.6 1024.48,683.6 1025.04,683.6 1025.6,683.6 1026.16,683.6 1026.72,683.6 1027.28,683.6 1027.83,683.6 1028.39,683.6 1028.95,683.6 1029.51,683.6 1030.07,683.6 1030.63,683.6 1031.19,683.6 1031.75,683.6 1032.31,683.6 1032.87,683.6 1033.43,683.6 1033.99,683.6 1034.55,683.6 1035.1,683.6 1035.66,683.6 1036.22,683.6 1036.78,683.6 1037.34,683.6 1037.9,683.6 1038.46,683.6 1039.02,683.6 1039.58,683.6 1040.14,683.6 1040.7,683.6 1041.26,683.6 1041.82,683.6 1042.38,683.6 1042.93,683.6 1043.49,683.6 1044.05,683.6 1044.61,683.6 1045.17,683.6 1045.73,683.6 1046.29,683.6 1046.85,683.6 1047.41,683.6 1047.97,683.6 1048.53,683.6 1049.09,683.6 1049.65,683.6 1050.2,683.6 1050.76,683.6 1051.32,683.6 1051.88,683.6 1052.44,683.6 1053,683.6 1053.56,683.6 1054.12,683.6 1054.68,683.6 1055.24,683.6 1055.8,683.6 1056.36,683.6 1056.92,683.6 1057.48,683.6 1058.03,683.6 1058.59,683.6 1059.15,683.6 1059.71,683.6 1060.27,683.6 1060.83,683.6 1061.39,683.6 1061.95,683.6 1062.51,683.6 1063.07,683.6 1063.63,683.6 1064.19,683.6 1064.75,683.6 1065.3,683.6 1065.86,683.6 1066.42,683.6 1066.98,683.6 1067.54,683.6 1068.1,683.6 1068.66,683.6 1069.22,683.6 1069.78,683.6 1070.34,683.6 1070.9,683.6 1071.46,683.6 1072.02,683.6 1072.57,683.6 1073.13,683.6 1073.69,683.6 1074.25,683.6 1074.81,683.6 1075.37,683.6 1075.93,683.6 1076.49,683.6 1077.05,683.6 1077.61,683.6 1078.17,683.6 1078.73,683.6 1079.29,683.6 1079.85,683.6 1080.4,683.6 1080.96,683.6 1081.52,683.6 1082.08,683.6 1082.64,683.6 1083.2,683.6 1083.76,683.6 1084.32,683.6 1084.88,683.6 1085.44,683.6 1086,683.6 1086.56,683.6 1087.12,683.6 1087.67,683.6 1088.23,683.6 1088.79,683.6 1089.35,683.6 1089.91,683.6 1090.47,683.6 1091.03,683.6 1091.59,683.6 1092.15,683.6 1092.71,683.6 1093.27,683.6 1093.83,683.6 1094.39,683.6 1094.94,683.6 1095.5,683.6 1096.06,683.6 1096.62,683.6 1097.18,683.6 1097.74,683.6 1098.3,683.6 1098.86,683.6 1099.42,683.6 1099.98,683.6 1100.54,683.6 1101.1,683.6 1101.66,683.6 1102.22,683.6 1102.77,683.6 1103.33,683.6 1103.89,683.6 1104.45,683.6 1105.01,683.6 1105.57,683.6 1106.13,683.6 1106.69,683.6 1107.25,683.6 1107.81,683.6 1108.37,683.6 1108.93,683.6 1109.49,683.6 1110.04,683.6 1110.6,683.6 1111.16,683.6 1111.72,683.6 1112.28,683.6 1112.84,683.6 1113.4,683.6 1113.96,683.6 1114.52,683.6 1115.08,683.6 1115.64,683.6 1116.2,683.6 1116.76,683.6 1117.31,683.6 1117.87,683.6 1118.43,683.6 1118.99,683.6 1119.55,683.6 1120.11,683.6 1120.67,683.6 1121.23,683.6 1121.79,683.6 1122.35,683.6 1122.91,683.6 1123.47,683.6 1124.03,683.6 1124.59,683.6 1125.14,683.6 1125.7,683.6 1126.26,683.6 1126.82,683.6 1127.38,683.6 1127.94,683.6 1128.5,683.6 1129.06,683.6 1129.62,683.6 1130.18,683.6 1130.74,683.6 1131.3,683.6 1131.86,683.6 1132.41,683.6 1132.97,683.6 1133.53,683.6 1134.09,683.6 1134.65,683.6 1135.21,683.6 1135.77,683.6 1136.33,683.6 1136.89,683.6 1137.45,683.6 1138.01,683.6 1138.57,683.6 1139.13,683.6 1139.68,683.6 1140.24,683.6 1140.8,683.6 1141.36,683.6 1141.92,683.6 1142.48,683.6 1143.04,683.6 1143.6,683.6 1144.16,683.6 1144.72,683.6 1145.28,683.6 1145.84,683.6 1146.4,683.6 1146.96,683.6 1147.51,683.6 1148.07,683.6 1148.63,683.6 1149.19,683.6 1149.75,683.6 1150.31,683.6 1150.87,683.6 1151.43,683.6 1151.99,683.6 1152.55,683.6 1153.11,683.6 1153.67,683.6 1154.23,683.6 1154.78,683.6 1155.34,683.6 1155.9,683.6 1156.46,683.6 1157.02,683.6 1157.58,683.6 1158.14,683.6 1158.7,683.6 1159.26,683.6 1159.82,683.6 1160.38,683.6 1160.94,683.6 1161.5,683.6 1162.05,683.6 1162.61,683.6 1163.17,683.6 1163.73,683.6 1164.29,683.6 1164.85,683.6 1165.41,683.6 1165.97,683.6 1166.53,683.6 1167.09,683.6 1167.65,683.6 1168.21,683.6 1168.77,683.6 1169.33,683.6 1169.88,683.6 1170.44,683.6 1171,683.6 1171.56,683.6 1172.12,683.6 1172.68,683.6 1173.24,683.6 1173.8,683.6 1174.36,683.6 1174.92,683.6 1175.48,683.6 1176.04,683.6 1176.6,683.6 1177.15,683.6 1177.71,683.6 1178.27,683.6 1178.83,683.6 1179.39,683.6 1179.95,683.6 1180.51,683.6 1181.07,683.6 1181.63,683.6 1182.19,683.6 1182.75,683.6 1183.31,683.6 1183.87,683.6 1184.43,683.6 1184.98,683.6 1185.54,683.6 1186.1,683.6 1186.66,683.6 1187.22,683.6 1187.78,683.6 1188.34,683.6 1188.9,683.6 1189.46,683.6 1190.02,683.6 1190.58,683.6 1191.14,683.6 1191.7,683.6 1192.25,683.6 1192.81,683.6 1193.37,683.6 1193.93,683.6 1194.49,683.6 1195.05,683.6 1195.61,683.6 1196.17,683.6 1196.73,683.6 1197.29,683.6 1197.85,683.6 1198.41,683.6 1198.97,683.6 1199.52,683.6 1200.08,683.6 1200.64,683.6 1201.2,683.6 1201.76,683.6 1202.32,683.6 1202.88,683.6 1203.44,683.6 1204,683.6 1204.56,683.6 1205.12,683.6 1205.68,683.6 1206.24,683.6 1206.8,683.6 1207.35,683.6 1207.91,683.6 1208.47,683.6 1209.03,683.6 1209.59,683.6 1210.15,683.6 1210.71,683.6 1211.27,683.6 1211.83,683.6 1212.39,683.6 1212.95,683.6 1213.51,683.6 1214.07,683.6 1214.62,683.6 1215.18,683.6 1215.74,683.6 1216.3,683.6 1216.86,683.6 1217.42,683.6 1217.98,683.6 1218.54,683.6 1219.1,683.6 1219.66,683.6 1220.22,683.6 1220.78,683.6 1221.34,683.6 1221.89,683.6 1222.45,683.6 1223.01,683.6 1223.57,683.6 1224.13,683.6 1224.69,683.6 1225.25,683.6 1225.81,683.6 1226.37,683.6 1226.93,683.6 1227.49,683.6 1228.05,683.6 1228.61,683.6 1229.17,683.6 1229.72,683.6 1230.28,683.6 1230.84,683.6 1231.4,683.6 1231.96,683.6 1232.52,683.6 1233.08,683.6 1233.64,683.6 1234.2,683.6 1234.76,683.6 1235.32,683.6 1235.88,683.6 1236.44,683.6 1236.99,683.6 1237.55,683.6 1238.11,683.6 1238.67,683.6 1239.23,683.6 1239.79,683.6 1240.35,683.6 1240.91,683.6 1241.47,683.6 1242.03,683.6 1242.59,683.6 1243.15,683.6 1243.71,683.6 1244.26,683.6 1244.82,683.6 1245.38,683.6 1245.94,683.6 1246.5,683.6 1247.06,683.6 1247.62,683.6 1248.18,683.6 1248.74,683.6 1249.3,683.6 1249.86,683.6 1250.42,683.6 1250.98,683.6 1251.54,683.6 1252.09,683.6 1252.65,683.6 1253.21,683.6 1253.77,683.6 1254.33,683.6 1254.89,683.6 1255.45,683.6 1256.01,683.6 1256.57,683.6 1257.13,683.6 1257.69,683.6 1258.25,683.6 1258.81,683.6 1259.36,683.6 1259.92,683.6 1260.48,683.6 1261.04,683.6 1261.6,683.6 1262.16,683.6 1262.72,683.6 1263.28,683.6 1263.84,683.6 1264.4,683.6 1264.96,683.6 1265.52,683.6 1266.08,683.6 1266.63,683.6 1267.19,683.6 1267.75,683.6 1268.31,683.6 1268.87,683.6 1269.43,683.6 1269.99,683.6 1270.55,683.6 1271.11,683.6 1271.67,683.6 1272.23,683.6 1272.79,683.6 1273.35,683.6 1273.91,683.6 1274.46,683.6 1275.02,683.6 1275.58,683.6 1276.14,683.6 1276.7,683.6 1277.26,683.6 1277.82,683.6 1278.38,683.6 1278.94,683.6 1279.5,683.6 1280.06,683.6 1280.62,683.6 1281.18,683.6 1281.73,683.6 1282.29,683.6 1282.85,683.6 1283.41,683.6 1283.97,683.6 1284.53,683.6 1285.09,683.6 1285.65,683.6 1286.21,683.6 1286.77,683.6 1287.33,683.6 1287.89,683.6 1288.45,683.6 1289,683.6 1289.56,683.6 1290.12,683.6 1290.68,683.6 1291.24,683.6 1291.8,683.6 1292.36,683.6 1292.92,683.6 1293.48,683.6 1294.04,683.6 1294.6,683.6 1295.16,683.6 1295.72,683.6 1296.28,683.6 1296.83,683.6 1297.39,683.6 1297.95,683.6 1298.51,683.6 1299.07,683.6 1299.63,683.6 1300.19,683.6 1300.75,683.6 1301.31,683.6 1301.87,683.6 1302.43,683.6 1302.99,683.6 1303.55,683.6 1304.1,683.6 1304.66,683.6 1305.22,683.6 1305.78,683.6 1306.34,683.6 1306.9,683.6 1307.46,683.6 1308.02,683.6 1308.58,683.6 1309.14,683.6 1309.7,683.6 1310.26,683.6 1310.82,683.6 1311.38,683.6 1311.93,683.6 1312.49,683.6 1313.05,683.6 1313.61,683.6 1314.17,683.6 1314.73,683.6 1315.29,683.6 1315.85,683.6 1316.41,683.6 1316.97,683.6 1317.53,683.6 1318.09,683.6 1318.65,683.6 1319.2,683.6 1319.76,683.6 1320.32,683.6 1320.88,683.6 1321.44,683.6 1322,683.6 1322.56,683.6 1323.12,683.6 1323.68,683.6 1324.24,683.6 1324.8,683.6 1325.36,683.6 1325.92,683.6 1326.47,683.6 1327.03,683.6 1327.59,683.6 1328.15,683.6 1328.71,683.6 1329.27,683.6 1329.83,683.6 1330.39,683.6 1330.95,683.6 1331.51,683.6 1332.07,683.6 1332.63,683.6 1333.19,683.6 1333.75,683.6 1334.3,683.6 1334.86,683.6 1335.42,683.6 1335.98,683.6 1336.54,683.6 1337.1,683.6 1337.66,683.6 1338.22,683.6 1338.78,683.6 1339.34,683.6 1339.9,683.6 1340.46,683.6 1341.02,683.6 1341.57,683.6 1342.13,683.6 1342.69,683.6 1343.25,683.6 1343.81,683.6 1344.37,683.6 1344.93,683.6 1345.49,683.6 1346.05,683.6 1346.61,683.6 1347.17,683.6 1347.73,683.6 1348.29,683.6 1348.84,683.6 1349.4,683.6 1349.96,683.6 1350.52,683.6 1351.08,683.6 1351.64,683.6 1352.2,683.6 1352.76,683.6 1353.32,683.6 1353.88,683.6 1354.44,683.6 1355,683.6 1355.56,683.6 1356.12,683.6 1356.67,683.6 1357.23,683.6 1357.79,683.6 1358.35,683.6 1358.91,683.6 1359.47,683.6 1360.03,683.6 1360.59,683.6 1361.15,683.6 1361.71,683.6 1362.27,683.6 1362.83,683.6 1363.39,683.6 1363.94,683.6 1364.5,683.6 1365.06,683.6 1365.62,683.6 1366.18,683.6 1366.74,683.6 1367.3,683.6 1367.86,683.6 1368.42,683.6 1368.98,683.6 1369.54,683.6 1370.1,683.6 1370.66,683.6 1371.21,683.6 1371.77,683.6 1372.33,683.6 1372.89,683.6 1373.45,683.6 1374.01,683.6 1374.57,683.6 1375.13,683.6 1375.69,683.6 1376.25,683.6 1376.81,683.6 1377.37,683.6 1377.93,683.6 1378.49,683.6 1379.04,683.6 1379.6,683.6 1380.16,683.6 1380.72,683.6 1381.28,683.6 1381.84,683.6 1382.4,683.6 1382.96,683.6 1383.52,683.6 1384.08,683.6 1384.64,683.6 1385.2,683.6 1385.76,683.6 1386.31,683.6 1386.87,683.6 1387.43,683.6 1387.99,683.6 1388.55,683.6 1389.11,683.6 1389.67,683.6 1390.23,683.6 1390.79,683.6 1391.35,683.6 1391.91,683.6 1392.47,683.6 1393.03,683.6 1393.58,683.6 1394.14,683.6 1394.7,683.6 1395.26,683.6 1395.82,683.6 1396.38,683.6 1396.94,683.6 1397.5,683.6 1398.06,683.6 1398.62,683.6 1399.18,683.6 1399.74,683.6 1400.3,683.6 1400.86,683.6 1401.41,683.6 1401.97,683.6 1402.53,683.6 1403.09,683.6 1403.65,683.6 1404.21,683.6 1404.77,683.6 1405.33,683.6 1405.89,683.6 1406.45,683.6 1407.01,683.6 1407.57,683.6 1408.13,683.6 1408.68,683.6 1409.24,683.6 1409.8,683.6 1410.36,683.6 1410.92,683.6 1411.48,683.6 1412.04,683.6 1412.6,683.6 1413.16,683.6 1413.72,683.6 1414.28,683.6 1414.84,683.6 1415.4,683.6 1415.95,683.6 1416.51,683.6 1417.07,683.6 1417.63,683.6 1418.19,683.6 1418.75,683.6 1419.31,683.6 1419.87,683.6 1420.43,683.6 1420.99,683.6 1421.55,683.6 1422.11,683.6 1422.67,683.6 1423.23,683.6 1423.78,683.6 1424.34,683.6 1424.9,683.6 1425.46,683.6 1426.02,683.6 1426.58,683.6 1427.14,683.6 1427.7,683.6 1428.26,683.6 1428.82,683.6 1429.38,683.6 1429.94,683.6 1430.5,683.6 1431.05,683.6 1431.61,683.6 1432.17,683.6 1432.73,683.6 1433.29,683.6 1433.85,683.6 1434.41,683.6 1434.97,683.6 1435.53,683.6 1436.09,683.6 1436.65,683.6 1437.21,683.6 1437.77,683.6 1438.33,683.6 1438.88,683.6 1439.44,683.6 1440,683.6 1440.56,683.6 1441.12,683.6 1441.68,683.6 1442.24,683.6 1442.8,683.6 1443.36,683.6 1443.92,683.6 1444.48,683.6 1445.04,683.6 1445.6,683.6 1446.15,683.6 1446.71,683.6 1447.27,683.6 1447.83,683.6 1448.39,683.6 1448.95,683.6 1449.51,683.6 1450.07,683.6 1450.63,683.6 1451.19,683.6 1451.75,683.6 1452.31,683.6 1452.87,683.6 1453.42,683.6 1453.98,683.6 1454.54,683.6 1455.1,683.6 1455.66,683.6 1456.22,683.6 1456.78,683.6 1457.34,683.6 1457.9,683.6 1458.46,683.6 1459.02,683.6 1459.58,683.6 1460.14,683.6 1460.7,683.6 1461.25,683.6 1461.81,683.6 1462.37,683.6 1462.93,683.6 1463.49,683.6 1464.05,683.6 1464.61,683.6 1465.17,683.6 1465.73,683.6 1466.29,683.6 1466.85,683.6 1467.41,683.6 1467.97,683.6 1468.52,683.6 1469.08,683.6 1469.64,683.6 1470.2,683.6 1470.76,683.6 1471.32,683.6 1471.88,683.6 1472.44,683.6 1473,683.6 1473.56,683.6 1474.12,683.6 1474.68,683.6 1475.24,683.6 1475.79,683.6 1476.35,683.6 1476.91,683.6 1477.47,683.6 1478.03,683.6 1478.59,683.6 1479.15,683.6 1479.71,683.6 1480.27,683.6 1480.83,683.6 1481.39,683.6 1481.95,683.6 1482.51,683.6 1483.07,683.6 1483.62,683.6 1484.18,683.6 1484.74,683.6 1485.3,683.6 1485.86,683.6 1486.42,683.6 1486.98,683.6 1487.54,683.6 1488.1,683.6 1488.66,683.6 1489.22,683.6 1489.78,683.6 1490.34,683.6 1490.89,683.6 1491.45,683.6 1492.01,683.6 1492.57,683.6 1493.13,683.6 1493.69,683.6 1494.25,683.6 1494.81,683.6 1495.37,683.6 1495.93,683.6 1496.49,683.6 1497.05,683.6 1497.61,683.6 1498.16,683.6 1498.72,683.6 1499.28,683.6 1499.84,683.6 1500.4,683.6 1500.96,683.6 1501.52,683.6 1502.08,683.6 1502.64,683.6 1503.2,683.6 1503.76,683.6 1504.32,683.6 1504.88,683.6 1505.44,683.6 1505.99,683.6 1506.55,683.6 1507.11,683.6 1507.67,683.6 1508.23,683.6 1508.79,683.6 1509.35,683.6 1509.91,683.6 1510.47,683.6 1511.03,683.6 1511.59,683.6 1512.15,683.6 1512.71,683.6 1513.26,683.6 1513.82,683.6 1514.38,683.6 1514.94,683.6 1515.5,683.6 1516.06,683.6 1516.62,683.6 1517.18,683.6 1517.74,683.6 1518.3,683.6 1518.86,683.6 1519.42,683.6 1519.98,683.6 1520.53,683.6 1521.09,683.6 1521.65,683.6 1522.21,683.6 1522.77,683.6 1523.33,683.6 1523.89,683.6 1524.45,683.6 1525.01,683.6 1525.57,683.6 1526.13,683.6 1526.69,683.6 1527.25,683.6 1527.81,683.6 1528.36,683.6 1528.92,683.6 1529.48,683.6 1530.04,683.6 1530.6,683.6 1531.16,683.6 1531.72,683.6 1532.28,683.6 1532.84,683.6 1533.4,683.6 1533.96,683.6 1534.52,683.6 1535.08,683.6 1535.63,683.6 1536.19,683.6 1536.75,683.6 1537.31,683.6 1537.87,683.6 1538.43,683.6 1538.99,683.6 1539.55,683.6 1540.11,683.6 1540.67,683.6 1541.23,683.6 1541.79,683.6 1542.35,683.6 1542.9,683.6 1543.46,683.6 1544.02,683.6 1544.58,683.6 1545.14,683.6 1545.7,683.6 1546.26,683.6 1546.82,683.6 1547.38,683.6 1547.94,683.6 1548.5,683.6 1549.06,683.6 1549.62,683.6 1550.18,683.6 1550.73,683.6 1551.29,683.6 1551.85,683.6 1552.41,683.6 1552.97,683.6 1553.53,683.6 1554.09,683.6 1554.65,683.6 1555.21,683.6 1555.77,683.6 1556.33,683.6 1556.89,683.6 1557.45,683.6 1558,683.6 1558.56,683.6 1559.12,683.6 1559.68,683.6 1560.24,683.6 1560.8,683.6 1561.36,683.6 1561.92,683.6 1562.48,683.6 1563.04,683.6 1563.6,683.6 1564.16,683.6 1564.72,683.6 1565.28,683.6 1565.83,683.6 1566.39,683.6 1566.95,683.6 1567.51,683.6 1568.07,683.6 1568.63,683.6 1569.19,683.6 1569.75,683.6 1570.31,683.6 1570.87,683.6 1571.43,683.6 1571.99,683.6 1572.55,683.6 1573.1,683.6 1573.66,683.6 1574.22,683.6 1574.78,683.6 1575.34,683.6 1575.9,683.6 1576.46,683.6 1577.02,683.6 1577.58,683.6 1578.14,683.6 1578.7,683.6 1579.26,683.6 1579.82,683.6 1580.37,683.6 1580.93,683.6 1581.49,683.6 1582.05,683.6 1582.61,683.6 1583.17,683.6 1583.73,683.6 1584.29,683.6 1584.85,683.6 1585.41,683.6 1585.97,683.6 1586.53,683.6 1587.09,683.6 1587.65,683.6 1588.2,683.6 1588.76,683.6 1589.32,683.6 1589.88,683.6 1590.44,683.6 1591,683.6 1591.56,683.6 1592.12,683.6 1592.68,683.6 1593.24,683.6 1593.8,683.6 1594.36,683.6 1594.92,683.6 1595.47,683.6 1596.03,683.6 1596.59,683.6 1597.15,683.6 1597.71,683.6 1598.27,683.6 1598.83,683.6 1599.39,683.6 1599.95,683.6 1600.51,683.6 1601.07,683.6 1601.63,683.6 1602.19,683.6 1602.74,683.6 1603.3,683.6 1603.86,683.6 1604.42,683.6 1604.98,683.6 1605.54,683.6 1606.1,683.6 1606.66,683.6 1607.22,683.6 1607.78,683.6 1608.34,683.6 1608.9,683.6 1609.46,683.6 1610.02,683.6 1610.57,683.6 1611.13,683.6 1611.69,683.6 1612.25,683.6 1612.81,683.6 1613.37,683.6 1613.93,683.6 1614.49,683.6 1615.05,683.6 1615.61,683.6 1616.17,683.6 1616.73,683.6 1617.29,683.6 1617.84,683.6 1618.4,683.6 1618.96,683.6 1619.52,683.6 1620.08,683.6 1620.64,683.6 1621.2,683.6 1621.76,683.6 1622.32,683.6 1622.88,683.6 1623.44,683.6 1624,683.6 1624.56,683.6 1625.11,683.6 1625.67,683.6 1626.23,683.6 1626.79,683.6 1627.35,683.6 1627.91,683.6 1628.47,683.6 1629.03,683.6 1629.59,683.6 1630.15,683.6 1630.71,683.6 1631.27,683.6 1631.83,683.6 1632.39,683.6 1632.94,683.6 1633.5,683.6 1634.06,683.6 1634.62,683.6 1635.18,683.6 1635.74,683.6 1636.3,683.6 1636.86,683.6 1637.42,683.6 1637.98,683.6 1638.54,683.6 1639.1,683.6 1639.66,683.6 1640.21,683.6 1640.77,683.6 1641.33,683.6 1641.89,683.6 1642.45,683.6 1643.01,683.6 1643.57,683.6 1644.13,683.6 1644.69,683.6 1645.25,683.6 1645.81,683.6 1646.37,683.6 1646.93,683.6 1647.48,683.6 1648.04,683.6 1648.6,683.6 1649.16,683.6 1649.72,683.6 1650.28,683.6 1650.84,683.6 1651.4,683.6 1651.96,683.6 1652.52,683.6 1653.08,683.6 1653.64,683.6 1654.2,683.6 1654.76,683.6 1655.31,683.6 1655.87,683.6 1656.43,683.6 1656.99,683.6 1657.55,683.6 1658.11,683.6 1658.67,683.6 1659.23,683.6 1659.79,683.6 1660.35,683.6 1660.91,683.6 1661.47,683.6 1662.03,683.6 1662.58,683.6 1663.14,683.6 1663.7,683.6 1664.26,683.6 1664.82,683.6 1665.38,683.6 1665.94,683.6 1666.5,683.6 1667.06,683.6 1667.62,683.6 1668.18,683.6 1668.74,683.6 1669.3,683.6 1669.85,683.6 1670.41,683.6 1670.97,683.6 1671.53,683.6 1672.09,683.6 1672.65,683.6 1673.21,683.6 1673.77,683.6 1674.33,683.6 1674.89,683.6 1675.45,683.6 1676.01,683.6 1676.57,683.6 1677.13,683.6 1677.68,683.6 1678.24,683.6 1678.8,683.6 1679.36,683.6 1679.92,683.6 1680.48,683.6 1681.04,683.6 1681.6,683.6 1682.16,683.6 1682.72,683.6 1683.28,683.6 1683.84,683.6 1684.4,683.6 1684.95,683.6 1685.51,683.6 1686.07,683.6 1686.63,683.6 1687.19,683.6 1687.75,683.6 1688.31,683.6 1688.87,683.6 1689.43,683.6 1689.99,683.6 1690.55,683.6 1691.11,683.6 1691.67,683.6 1692.23,683.6 1692.78,683.6 1693.34,683.6 1693.9,683.6 1694.46,683.6 1695.02,683.6 1695.58,683.6 1696.14,683.6 1696.7,683.6 1697.26,683.6 1697.82,683.6 1698.38,683.6 1698.94,683.6 1699.5,683.6 1700.05,683.6 1700.61,683.6 1701.17,683.6 1701.73,683.6 1702.29,683.6 1702.85,683.6 1703.41,683.6 1703.97,683.6 1704.53,683.6 1705.09,683.6 1705.65,683.6 1706.21,683.6 1706.77,683.6 1707.32,683.6 1707.88,683.6 1708.44,683.6 1709,683.6 1709.56,683.6 1710.12,683.6 1710.68,683.6 1711.24,683.6 1711.8,683.6 1712.36,683.6 1712.92,683.6 1713.48,683.6 1714.04,683.6 1714.6,683.6 1715.15,683.6 1715.71,683.6 1716.27,683.6 1716.83,683.6 1717.39,683.6 1717.95,683.6 1718.51,683.6 1719.07,683.6 1719.63,683.6 1720.19,683.6 1720.75,683.6 1721.31,683.6 1721.87,683.6 1722.42,683.6 1722.98,683.6 1723.54,683.6 1724.1,683.6 1724.66,683.6 1725.22,683.6 1725.78,683.6 1726.34,683.6 1726.9,683.6 1727.46,683.6 1728.02,683.6 1728.58,683.6 1729.14,683.6 1729.69,683.6 1730.25,683.6 1730.81,683.6 1731.37,683.6 1731.93,683.6 1732.49,683.6 1733.05,683.6 1733.61,683.6 1734.17,683.6 1734.73,683.6 1735.29,683.6 1735.85,683.6 1736.41,683.6 1736.97,683.6 1737.52,683.6 1738.08,683.6 1738.64,683.6 1739.2,683.6 1739.76,683.6 1740.32,683.6 1740.88,683.6 1741.44,683.6 1742,683.6 1742.56,683.6 1743.12,683.6 1743.68,683.6 1744.24,683.6 1744.79,683.6 1745.35,683.6 1745.91,683.6 1746.47,683.6 1747.03,683.6 1747.59,683.6 1748.15,683.6 1748.71,683.6 1749.27,683.6 1749.83,683.6 1750.39,683.6 1750.95,683.6 1751.51,683.6 1752.06,683.6 1752.62,683.6 1753.18,683.6 1753.74,683.6 1754.3,683.6 1754.86,683.6 1755.42,683.6 1755.98,683.6 1756.54,683.6 1757.1,683.6 1757.66,683.6 1758.22,683.6 1758.78,683.6 1759.34,683.6 1759.89,683.6 1760.45,683.6 1761.01,683.6 1761.57,683.6 1762.13,683.6 1762.69,683.6 1763.25,683.6 1763.81,683.6 1764.37,683.6 1764.93,683.6 1765.49,683.6 1766.05,683.6 1766.61,683.6 1767.16,683.6 1767.72,683.6 1768.28,683.6 1768.84,683.6 1769.4,683.6 1769.96,683.6 1770.52,683.6 1771.08,683.6 1771.64,683.6 1772.2,683.6 1772.76,683.6 1773.32,683.6 1773.88,683.6 1774.43,683.6 1774.99,683.6 1775.55,683.6 1776.11,683.6 1776.67,683.6 1777.23,683.6 1777.79,683.6 1778.35,683.6 1778.91,683.6 1779.47,683.6 1780.03,683.6 1780.59,683.6 1781.15,683.6 1781.71,683.6 1782.26,683.6 1782.82,683.6 1783.38,683.6 1783.94,683.6 1784.5,683.6 1785.06,683.6 1785.62,683.6 1786.18,683.6 1786.74,683.6 1787.3,683.6 1787.86,683.6 1788.42,683.6 1788.98,683.6 1789.53,683.6 1790.09,683.6 1790.65,683.6 1791.21,683.6 1791.77,683.6 1792.33,683.6 1792.89,683.6 1793.45,683.6 1794.01,683.6 1794.57,683.6 1795.13,683.6 1795.69,683.6 1796.25,683.6 1796.8,683.6 1797.36,683.6 1797.92,683.6 1798.48,683.6 1799.04,683.6 1799.6,683.6 1800.16,683.6 1800.72,683.6 1801.28,683.6 1801.84,683.6 1802.4,683.6 1802.96,683.6 1803.52,683.6 1804.08,683.6 1804.63,683.6 1805.19,683.6 1805.75,683.6 1806.31,683.6 1806.87,683.6 1807.43,683.6 1807.99,683.6 1808.55,683.6 1809.11,683.6 1809.67,683.6 1810.23,683.6 1810.79,683.6 1811.35,683.6 1811.9,683.6 1812.46,683.6 1813.02,683.6 1813.58,683.6 1814.14,683.6 1814.7,683.6 1815.26,683.6 1815.82,683.6 1816.38,683.6 1816.94,683.6 1817.5,683.6 1818.06,683.6 1818.62,683.6 1819.18,683.6 1819.73,683.6 1820.29,683.6 1820.85,683.6 1821.41,683.6 1821.97,683.6 1822.53,683.6 1823.09,683.6 1823.65,683.6 1824.21,683.6 1824.77,683.6 1825.33,683.6 1825.89,683.6 1826.45,683.6 1827,683.6 1827.56,683.6 1828.12,683.6 1828.68,683.6 1829.24,683.6 1829.8,683.6 1830.36,683.6 1830.92,683.6 1831.48,683.6 1832.04,683.6 1832.6,683.6 1833.16,683.6 1833.72,683.6 1834.27,683.6 1834.83,683.6 1835.39,683.6 1835.95,683.6 1836.51,683.6 1837.07,683.6 1837.63,683.6 1838.19,683.6 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.037643715136522 ± 0.022319520899503054\nProjected Energy: -4.015160866748371 ± (0.0041548022282178465, 0.004124103121306177)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.467866</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4918e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.0148e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">2.5748e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.703e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.655e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">7.915e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321637\n -3.3631242916133672\n -0.7590191922770817\n  0.13584182219621965\n  0.15789998694608798\n  0.8767114411781343\n  1.5305929970973322\n  1.583573261186734\n  3.0728703303258698\n  3.12567265395184\n  4.862107221562175\n  6.260694850380592\n  6.4026712111831126\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2( Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t,k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
