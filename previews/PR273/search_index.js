var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21438278903893251 ± 0.001519346203629467\n   G2(1) = 0.9171426138811015 ± 0.0008688673619000086\n   G2(2) = 0.9811496519522632 ± 0.0007616325205439169\n   G2(3) = 0.9890326792943382 ± 0.0012988227729806533\n   G2(4) = 0.9811496519522632 ± 0.0007616325205439169\n   G2(5) = 0.9171426138811015 ± 0.0008688673619000086\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9497278921532146 ± 0.12763243140666544\n   Replica 2: -4.009549965641112 ± 0.14000085705251925\n   Replica 3: -4.009099049564226 ± 0.13654864534733013\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip980\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip980)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip981\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip980)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip982\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip980)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.33 2211.02,1003.33 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.831 2211.02,745.831 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.332 2211.02,488.332 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.833 2211.02,230.833 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.33 423.181,1003.33 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.831 423.181,745.831 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.332 423.181,488.332 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.833 423.181,230.833 \"/>\n<path clip-path=\"url(#clip980)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.19 Q349.094 1253.73 349.094 1260.86 Q349.094 1267.97 350.899 1271.53 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.53 Q363.608 1267.97 363.608 1260.86 Q363.608 1253.73 361.779 1250.19 Q359.973 1246.63 356.339 1246.63 M356.339 1242.92 Q362.149 1242.92 365.205 1247.53 Q368.284 1252.11 368.284 1260.86 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.86 Q344.395 1252.11 347.45 1247.53 Q350.529 1242.92 356.339 1242.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M290.043 1016.67 L306.363 1016.67 L306.363 1020.61 L284.418 1020.61 L284.418 1016.67 Q287.08 1013.92 291.664 1009.29 Q296.27 1004.64 297.451 1003.29 Q299.696 1000.77 300.576 999.036 Q301.478 997.276 301.478 995.587 Q301.478 992.832 299.534 991.096 Q297.613 989.36 294.511 989.36 Q292.312 989.36 289.858 990.124 Q287.427 990.887 284.65 992.438 L284.65 987.716 Q287.474 986.582 289.927 986.003 Q292.381 985.425 294.418 985.425 Q299.789 985.425 302.983 988.11 Q306.177 990.795 306.177 995.286 Q306.177 997.415 305.367 999.337 Q304.58 1001.23 302.474 1003.83 Q301.895 1004.5 298.793 1007.72 Q295.691 1010.91 290.043 1016.67 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M316.224 986.05 L334.58 986.05 L334.58 989.985 L320.506 989.985 L320.506 998.457 Q321.524 998.11 322.543 997.948 Q323.562 997.762 324.58 997.762 Q330.367 997.762 333.747 1000.93 Q337.126 1004.11 337.126 1009.52 Q337.126 1015.1 333.654 1018.2 Q330.182 1021.28 323.862 1021.28 Q321.687 1021.28 319.418 1020.91 Q317.173 1020.54 314.765 1019.8 L314.765 1015.1 Q316.849 1016.23 319.071 1016.79 Q321.293 1017.35 323.77 1017.35 Q327.774 1017.35 330.112 1015.24 Q332.45 1013.13 332.45 1009.52 Q332.45 1005.91 330.112 1003.8 Q327.774 1001.7 323.77 1001.7 Q321.895 1001.7 320.02 1002.11 Q318.168 1002.53 316.224 1003.41 L316.224 986.05 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M356.339 989.128 Q352.728 989.128 350.899 992.693 Q349.094 996.235 349.094 1003.36 Q349.094 1010.47 350.899 1014.04 Q352.728 1017.58 356.339 1017.58 Q359.973 1017.58 361.779 1014.04 Q363.608 1010.47 363.608 1003.36 Q363.608 996.235 361.779 992.693 Q359.973 989.128 356.339 989.128 M356.339 985.425 Q362.149 985.425 365.205 990.031 Q368.284 994.614 368.284 1003.36 Q368.284 1012.09 365.205 1016.7 Q362.149 1021.28 356.339 1021.28 Q350.529 1021.28 347.45 1016.7 Q344.395 1012.09 344.395 1003.36 Q344.395 994.614 347.45 990.031 Q350.529 985.425 356.339 985.425 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M286.062 728.551 L304.418 728.551 L304.418 732.486 L290.344 732.486 L290.344 740.958 Q291.363 740.611 292.381 740.449 Q293.4 740.263 294.418 740.263 Q300.205 740.263 303.585 743.435 Q306.964 746.606 306.964 752.023 Q306.964 757.601 303.492 760.703 Q300.02 763.782 293.701 763.782 Q291.525 763.782 289.256 763.412 Q287.011 763.041 284.603 762.3 L284.603 757.601 Q286.687 758.736 288.909 759.291 Q291.131 759.847 293.608 759.847 Q297.613 759.847 299.951 757.74 Q302.288 755.634 302.288 752.023 Q302.288 748.412 299.951 746.305 Q297.613 744.199 293.608 744.199 Q291.733 744.199 289.858 744.615 Q288.006 745.032 286.062 745.912 L286.062 728.551 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M326.177 731.629 Q322.566 731.629 320.737 735.194 Q318.932 738.736 318.932 745.865 Q318.932 752.972 320.737 756.537 Q322.566 760.078 326.177 760.078 Q329.811 760.078 331.617 756.537 Q333.446 752.972 333.446 745.865 Q333.446 738.736 331.617 735.194 Q329.811 731.629 326.177 731.629 M326.177 727.926 Q331.987 727.926 335.043 732.532 Q338.122 737.115 338.122 745.865 Q338.122 754.592 335.043 759.199 Q331.987 763.782 326.177 763.782 Q320.367 763.782 317.288 759.199 Q314.233 754.592 314.233 745.865 Q314.233 737.115 317.288 732.532 Q320.367 727.926 326.177 727.926 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M356.339 731.629 Q352.728 731.629 350.899 735.194 Q349.094 738.736 349.094 745.865 Q349.094 752.972 350.899 756.537 Q352.728 760.078 356.339 760.078 Q359.973 760.078 361.779 756.537 Q363.608 752.972 363.608 745.865 Q363.608 738.736 361.779 735.194 Q359.973 731.629 356.339 731.629 M356.339 727.926 Q362.149 727.926 365.205 732.532 Q368.284 737.115 368.284 745.865 Q368.284 754.592 365.205 759.199 Q362.149 763.782 356.339 763.782 Q350.529 763.782 347.45 759.199 Q344.395 754.592 344.395 745.865 Q344.395 737.115 347.45 732.532 Q350.529 727.926 356.339 727.926 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M284.835 471.052 L307.057 471.052 L307.057 473.042 L294.511 505.612 L289.627 505.612 L301.432 474.987 L284.835 474.987 L284.835 471.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M316.224 471.052 L334.58 471.052 L334.58 474.987 L320.506 474.987 L320.506 483.459 Q321.524 483.112 322.543 482.95 Q323.562 482.765 324.58 482.765 Q330.367 482.765 333.747 485.936 Q337.126 489.107 337.126 494.524 Q337.126 500.102 333.654 503.204 Q330.182 506.283 323.862 506.283 Q321.687 506.283 319.418 505.913 Q317.173 505.542 314.765 504.801 L314.765 500.102 Q316.849 501.237 319.071 501.792 Q321.293 502.348 323.77 502.348 Q327.774 502.348 330.112 500.241 Q332.45 498.135 332.45 494.524 Q332.45 490.913 330.112 488.806 Q327.774 486.7 323.77 486.7 Q321.895 486.7 320.02 487.116 Q318.168 487.533 316.224 488.413 L316.224 471.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M356.339 474.13 Q352.728 474.13 350.899 477.695 Q349.094 481.237 349.094 488.366 Q349.094 495.473 350.899 499.038 Q352.728 502.579 356.339 502.579 Q359.973 502.579 361.779 499.038 Q363.608 495.473 363.608 488.366 Q363.608 481.237 361.779 477.695 Q359.973 474.13 356.339 474.13 M356.339 470.427 Q362.149 470.427 365.205 475.033 Q368.284 479.616 368.284 488.366 Q368.284 497.093 365.205 501.7 Q362.149 506.283 356.339 506.283 Q350.529 506.283 347.45 501.7 Q344.395 497.093 344.395 488.366 Q344.395 479.616 347.45 475.033 Q350.529 470.427 356.339 470.427 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M256.664 244.177 L264.303 244.177 L264.303 217.812 L255.992 219.479 L255.992 215.219 L264.256 213.553 L268.932 213.553 L268.932 244.177 L276.571 244.177 L276.571 248.113 L256.664 248.113 L256.664 244.177 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M296.015 216.631 Q292.404 216.631 290.576 220.196 Q288.77 223.738 288.77 230.867 Q288.77 237.974 290.576 241.539 Q292.404 245.08 296.015 245.08 Q299.65 245.08 301.455 241.539 Q303.284 237.974 303.284 230.867 Q303.284 223.738 301.455 220.196 Q299.65 216.631 296.015 216.631 M296.015 212.928 Q301.826 212.928 304.881 217.534 Q307.96 222.117 307.96 230.867 Q307.96 239.594 304.881 244.201 Q301.826 248.784 296.015 248.784 Q290.205 248.784 287.127 244.201 Q284.071 239.594 284.071 230.867 Q284.071 222.117 287.127 217.534 Q290.205 212.928 296.015 212.928 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M326.177 216.631 Q322.566 216.631 320.737 220.196 Q318.932 223.738 318.932 230.867 Q318.932 237.974 320.737 241.539 Q322.566 245.08 326.177 245.08 Q329.811 245.08 331.617 241.539 Q333.446 237.974 333.446 230.867 Q333.446 223.738 331.617 220.196 Q329.811 216.631 326.177 216.631 M326.177 212.928 Q331.987 212.928 335.043 217.534 Q338.122 222.117 338.122 230.867 Q338.122 239.594 335.043 244.201 Q331.987 248.784 326.177 248.784 Q320.367 248.784 317.288 244.201 Q314.233 239.594 314.233 230.867 Q314.233 222.117 317.288 217.534 Q320.367 212.928 326.177 212.928 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M356.339 216.631 Q352.728 216.631 350.899 220.196 Q349.094 223.738 349.094 230.867 Q349.094 237.974 350.899 241.539 Q352.728 245.08 356.339 245.08 Q359.973 245.08 361.779 241.539 Q363.608 237.974 363.608 230.867 Q363.608 223.738 361.779 220.196 Q359.973 216.631 356.339 216.631 M356.339 212.928 Q362.149 212.928 365.205 217.534 Q368.284 222.117 368.284 230.867 Q368.284 239.594 365.205 244.201 Q362.149 248.784 356.339 248.784 Q350.529 248.784 347.45 244.201 Q344.395 239.594 344.395 230.867 Q344.395 222.117 347.45 217.534 Q350.529 212.928 356.339 212.928 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip982)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.833 4017.76,230.833 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1249.28 457.123,1249.14 457.691,1248.88 458.259,1248.58 458.828,1248.21 459.396,1247.79 459.964,1247.25 460.533,1246.69 461.101,1246.03 461.669,1245.3 462.238,1244.48 462.806,1243.58 463.375,1242.6 463.943,1241.52 464.511,1240.34 465.08,1239.06 465.648,1237.67 466.216,1236.16 466.785,1234.54 467.353,1232.78 467.921,1229.83 468.49,1226.76 469.058,1223.49 469.626,1221.1 470.195,1217.54 470.763,1214.87 471.331,1212.03 471.9,1208.99 472.468,1204.7 473.036,1200.28 473.605,1195.54 474.173,1190.66 474.741,1186.61 475.31,1182.37 475.878,1174.83 476.446,1170.02 477.015,1163.87 477.583,1157.54 478.152,1151.02 478.72,1145.3 479.288,1138.37 479.857,1131.31 480.425,1125.04 480.993,1117.56 481.562,1109.85 482.13,1103.05 482.698,1094.93 483.267,1087.69 483.835,1080.17 484.403,1070.54 484.972,1062.53 485.54,1054.48 486.108,1044.18 486.677,1035.67 487.245,1027.09 487.813,1018.4 488.382,1009.54 488.95,999.429 489.518,988.179 490.087,977.93 490.655,968.729 491.224,958.23 491.792,948.786 492.36,936.144 492.929,925.66 493.497,914.046 494.065,901.168 494.634,890.371 495.202,879.606 495.77,867.822 496.339,858.016 496.907,848.332 497.475,838.523 498.044,825.455 498.612,815.733 499.18,804.997 499.749,793.191 500.317,782.669 500.885,773.154 501.454,763.893 502.022,754.482 502.59,743.054 503.159,732.775 503.727,721.489 504.295,710.372 504.864,698.287 505.432,689.587 506.001,678.875 506.569,670.377 507.137,659.763 507.706,649.347 508.274,639.13 508.842,628.018 509.411,620.189 509.979,609.188 510.547,599.61 511.116,591.221 511.684,579.93 512.252,572.894 512.821,562.944 513.389,557.223 513.957,549.433 514.526,542.783 515.094,534.25 515.662,524.854 516.231,517.961 516.799,510.331 517.367,501.576 517.936,496.291 518.504,488.938 519.072,481.715 519.641,475.602 520.209,467.699 520.778,462.237 521.346,453.682 521.914,448.63 522.483,444.631 523.051,439.779 523.619,429.818 524.188,426.348 524.756,422.716 525.324,420.289 525.893,415.693 526.461,411.237 527.029,406.954 527.598,402.816 528.166,399.605 528.734,396.461 529.303,390.211 529.871,386.128 530.439,381.292 531.008,378.647 531.576,374.023 532.144,371.646 532.713,368.131 533.281,364.813 533.85,363.302 534.418,360.037 534.986,356.824 535.555,354.559 536.123,352.327 536.691,344.979 537.26,344.196 537.828,342.284 538.396,340.525 538.965,337.689 539.533,335.821 540.101,330.849 540.67,328.28 541.238,324.803 541.806,321.045 542.375,319.949 542.943,318.75 543.511,316.565 544.08,315.384 544.648,314.073 545.216,313.058 545.785,311.034 546.353,309.836 546.921,307.55 547.49,304.407 548.058,302.416 548.627,301.746 549.195,301.895 549.763,303.019 550.332,300.938 550.9,298.798 551.468,296.579 552.037,294.613 552.605,291.738 553.173,290.933 553.742,290.203 554.31,289.744 554.878,287.092 555.447,286.426 556.015,283.78 556.583,280.264 557.152,280.05 557.72,278.745 558.288,277.466 558.857,277.245 559.425,278.164 559.993,275.771 560.562,271.491 561.13,272.509 561.698,271.311 562.267,272.287 562.835,270.19 563.404,269.198 563.972,271.328 564.54,271.371 565.109,270.094 565.677,271.092 566.245,269.759 566.814,268.328 567.382,268.052 567.95,266.746 568.519,267.56 569.087,266.079 569.655,265.676 570.224,264.135 570.792,264.003 571.36,263.042 571.929,262.861 572.497,262.845 573.065,262.882 573.634,260.618 574.202,260.411 574.77,261.324 575.339,261.017 575.907,260.838 576.476,261.746 577.044,261.551 577.612,260.053 578.181,258.874 578.749,260.028 579.317,256.643 579.886,256.76 580.454,256.748 581.022,252.441 581.591,251.762 582.159,251.912 582.727,251.11 583.296,250.255 583.864,250.252 584.432,250.549 585.001,256.008 585.569,252.78 586.137,250.853 586.706,251.08 587.274,251.09 587.842,251.278 588.411,251.358 588.979,252.509 589.547,251.508 590.116,250.64 590.684,250.662 591.253,249.54 591.821,247.599 592.389,247.713 592.958,248.073 593.526,246.118 594.094,244.296 594.663,247.884 595.231,247.887 595.799,249.072 596.368,248.18 596.936,248.212 597.504,249.335 598.073,248.122 598.641,248.292 599.209,249.339 599.778,248.395 600.346,246.092 600.914,246.238 601.483,245.167 602.051,245.271 602.619,246.407 603.188,245.168 603.756,245.146 604.325,245.259 604.893,246.328 605.461,246.201 606.03,247.1 606.598,247.925 607.166,246.602 607.735,248.421 608.303,248.244 608.871,247.693 609.44,246.444 610.008,247.268 610.576,244.976 611.145,242.861 611.713,241.445 612.281,242.587 612.85,242.545 613.418,242.606 613.986,241.596 614.555,240.884 615.123,240.869 615.691,241.992 616.26,242.983 616.828,242.371 617.396,242.269 617.965,242.192 618.533,242.222 619.102,242.456 619.67,243.491 620.238,243.556 620.807,242.273 621.375,241.242 621.943,241.302 622.512,241.339 623.08,239.284 623.648,239.479 624.217,238.712 624.785,237.96 625.353,237.883 625.922,238.117 626.49,237.111 627.058,236.401 627.627,235.495 628.195,233.944 628.763,234.419 629.332,232.66 629.9,233.233 630.468,234.045 631.037,233.58 631.605,234.19 632.173,235.025 632.742,234.349 633.31,235.772 633.879,235.135 634.447,233.453 635.015,233.068 635.584,233.612 636.152,234.172 636.72,234.571 637.289,234.118 637.857,236.784 638.425,236.152 638.994,237.446 639.562,234.547 640.13,233.059 640.699,232.14 641.267,232.87 641.835,234.362 642.404,235.89 642.972,233.077 643.54,234.92 644.109,235.418 644.677,237.005 645.245,237.159 645.814,237.407 646.382,236.451 646.951,237.892 647.519,238.06 648.087,239.337 648.656,239.431 649.224,239.555 649.792,239.408 650.361,240.269 650.929,241.233 651.497,237.791 652.066,238.866 652.634,238.899 653.202,238.897 653.771,241.348 654.339,240.112 654.907,240.01 655.476,237.822 656.044,237.759 656.612,237.797 657.181,238.964 657.749,237.916 658.317,239.865 658.886,237.586 659.454,235.393 660.022,234.721 660.591,234.01 661.159,234.448 661.728,236.735 662.296,237.937 662.864,235.925 663.433,235.189 664.001,234.266 664.569,233.554 665.138,237.028 665.706,235.197 666.274,235.531 666.843,235.894 667.411,235.828 667.979,236.163 668.548,238.483 669.116,240.486 669.684,240.215 670.253,240.943 670.821,239.691 671.389,238.594 671.958,238.649 672.526,237.547 673.094,238.589 673.663,237.448 674.231,234.481 674.799,234.554 675.368,234.773 675.936,234.963 676.505,233.986 677.073,234.245 677.641,234.413 678.21,234.796 678.778,233.909 679.346,235.185 679.915,230.174 680.483,231.409 681.051,231.693 681.62,232.961 682.188,233.266 682.756,234.498 683.325,234.43 683.893,234.717 684.461,235.917 685.03,233.936 685.598,234.139 686.166,232.31 686.735,232.733 687.303,230.902 687.871,235.46 688.44,237.579 689.008,236.603 689.577,234.699 690.145,233.762 690.713,234.077 691.282,236.169 691.85,237.518 692.418,236.544 692.987,234.484 693.555,235.659 694.123,236.812 694.692,234.622 695.26,231.478 695.828,231.769 696.397,231.085 696.965,235.503 697.533,233.461 698.102,232.427 698.67,232.581 699.238,231.771 699.807,233.009 700.375,231.02 700.943,234.488 701.512,231.811 702.08,230.144 702.648,229.58 703.217,230.896 703.785,231.22 704.354,231.399 704.922,233.742 705.49,235.966 706.059,235.882 706.627,234.767 707.195,235.962 707.764,235.82 708.332,233.624 708.9,233.923 709.469,231.069 710.037,234.627 710.605,234.974 711.174,233.936 711.742,232.953 712.31,233.214 712.879,233.539 713.447,235.011 714.015,236.325 714.584,237.522 715.152,237.333 715.72,236.397 716.289,234.361 716.857,233.365 717.425,234.525 717.994,235.705 718.562,236.712 719.131,235.417 719.699,235.236 720.267,235.09 720.836,237.007 721.404,237.881 721.972,238.798 722.541,241.614 723.109,240.968 723.677,243.493 724.246,238.659 724.814,237.315 725.382,236.104 725.951,235.939 726.519,233.737 727.087,235.86 727.656,237.842 728.224,239.609 728.792,239.239 729.361,237.627 729.929,239.124 730.497,237.698 731.066,238.544 731.634,237.189 732.203,239.028 732.771,239.542 733.339,239.863 733.908,239.238 734.476,237.688 735.044,236.251 735.613,235.833 736.181,235.56 736.749,235.109 737.318,235.873 737.886,235.841 738.454,236.72 739.023,236.266 739.591,235.881 740.159,233.678 740.728,235.48 741.296,235.354 741.864,233.161 742.433,232.054 743.001,232.082 743.569,232.088 744.138,232.13 744.706,230.958 745.274,228.922 745.843,228.099 746.411,228.375 746.98,226.562 747.548,229.846 748.116,229.099 748.685,228.261 749.253,227.654 749.821,229.081 750.39,230.28 750.958,230.307 751.526,230.675 752.095,229.776 752.663,229.997 753.231,230.162 753.8,232.422 754.368,231.247 754.936,232.419 755.505,232.326 756.073,232.354 756.641,231.431 757.21,229.524 757.778,229.76 758.346,233.102 758.915,232.902 759.483,230.808 760.052,231.931 760.62,232.027 761.188,230.888 761.757,230.005 762.325,228.952 762.893,230.286 763.462,230.466 764.03,231.745 764.598,231.89 765.167,233.756 765.735,231.506 766.303,229.462 766.872,230.727 767.44,232.73 768.008,230.654 768.577,230.737 769.145,231.911 769.713,232.995 770.282,236.05 770.85,233.737 771.418,233.526 771.987,233.366 772.555,231.18 773.123,231.115 773.692,230.041 774.26,231.035 774.829,231.083 775.397,231.168 775.965,231.225 776.534,233.559 777.102,231.367 777.67,229.149 778.239,228.25 778.807,228.521 779.375,227.761 779.944,228.158 780.512,229.653 781.08,229.721 781.649,229.194 782.217,228.535 782.785,227.809 783.354,227.252 783.922,225.714 784.49,226.12 785.059,226.709 785.627,226.235 786.195,226.826 786.764,228.421 787.332,225.797 787.9,226.29 788.469,227.695 789.037,227.332 789.606,227.691 790.174,229.002 790.742,228.253 791.311,228.743 791.879,230.097 792.447,232.199 793.016,236.248 793.584,236.079 794.152,236.985 794.721,238.817 795.289,237.362 795.857,238.035 796.426,237.55 796.994,237.158 797.562,237.923 798.131,237.461 798.699,236.103 799.267,233.656 799.836,234.771 800.404,233.491 800.972,233.588 801.541,234.512 802.109,234.37 802.678,234.244 803.246,235.152 803.814,235.025 804.383,237.988 804.951,236.522 805.519,238.014 806.088,237.604 806.656,236.5 807.224,236.03 807.793,237.78 808.361,238.196 808.929,237.88 809.498,238.563 810.066,238.21 810.634,238.661 811.203,238.147 811.771,236.541 812.339,233.292 812.908,233.255 813.476,230.899 814.044,230.957 814.613,230.099 815.181,233.287 815.749,233.059 816.318,232.008 816.886,231.01 817.455,231.057 818.023,233.138 818.591,231.785 819.16,231.736 819.728,228.387 820.296,228.723 820.865,228.029 821.433,229.336 822.001,229.874 822.57,227.937 823.138,230.332 823.706,230.487 824.275,229.504 824.843,229.883 825.411,229.961 825.98,229.969 826.548,227.887 827.116,226.13 827.685,224.459 828.253,224.88 828.821,226.184 829.39,226.731 829.958,227.017 830.526,227.445 831.095,226.822 831.663,227.187 832.232,227.777 832.8,227.131 833.368,227.546 833.937,229.988 834.505,225.199 835.073,227.793 835.642,228.218 836.21,227.417 836.778,226.942 837.347,226.389 837.915,226.88 838.483,228.268 839.052,227.761 839.62,224.059 840.188,225.786 840.757,224.281 841.325,222.817 841.893,222.284 842.462,223.934 843.03,224.63 843.598,224.207 844.167,224.948 844.735,227.668 845.304,227.09 845.872,228.407 846.44,226.753 847.009,227.314 847.577,228.657 848.145,229.098 848.714,227.405 849.282,229.033 849.85,229.677 850.419,229.185 850.987,231.77 851.555,231.9 852.124,232.406 852.692,232.504 853.26,232.551 853.829,233.72 854.397,232.889 854.965,233.133 855.534,233.321 856.102,232.547 856.67,232.656 857.239,230.993 857.807,229.273 858.375,228.625 858.944,228.991 859.512,229.274 860.081,229.572 860.649,231.956 861.217,234.27 861.786,235.321 862.354,235.187 862.922,237.24 863.491,237.087 864.059,240.007 864.627,242.393 865.196,239.633 865.764,241.465 866.332,239.937 866.901,239.376 867.469,239.892 868.037,238.279 868.606,234.759 869.174,234.662 869.742,233.39 870.311,233.17 870.879,233.993 871.447,234.947 872.016,234.902 872.584,234.616 873.152,235.534 873.721,234.287 874.289,237.264 874.858,237.795 875.426,235.323 875.994,236.145 876.563,235.703 877.131,236.191 877.699,234.909 878.268,233.559 878.836,234.487 879.404,235.435 879.973,235.217 880.541,234.74 881.109,234.705 881.678,234.415 882.246,232.982 882.814,233.942 883.383,233.832 883.951,234.592 884.519,234.243 885.088,232.027 885.656,230.97 886.224,228.979 886.793,228.178 887.361,229.395 887.93,230.571 888.498,232.471 889.066,232.568 889.635,234.566 890.203,234.432 890.771,234.113 891.34,232.675 891.908,233.486 892.476,234.304 893.045,235.159 893.613,234.041 894.181,233.769 894.75,233.422 895.318,234.426 895.886,234.148 896.455,232.722 897.023,231.468 897.591,232.293 898.16,234.215 898.728,235.983 899.296,236.634 899.865,236 900.433,235.412 901.001,236.077 901.57,235.479 902.138,232.08 902.707,230.698 903.275,231.647 903.843,232.641 904.412,233.577 904.98,233.33 905.548,232.996 906.117,232.933 906.685,232.945 907.253,231.711 907.822,228.617 908.39,231.854 908.958,232.892 909.527,232.844 910.095,230.583 910.663,230.703 911.232,232.85 911.8,233.566 912.368,231.294 912.937,230.306 913.505,231.358 914.073,232.106 914.642,231.068 915.21,232.105 915.779,231.087 916.347,230.704 916.915,230.752 917.484,230.691 918.052,229.394 918.62,231.552 919.189,231.39 919.757,231.112 920.325,232.042 920.894,232.008 921.462,229.893 922.03,231.154 922.599,232.025 923.167,233.659 923.735,233.475 924.304,232.393 924.872,231.183 925.44,230.889 926.009,232.813 926.577,231.507 927.145,229.289 927.714,229.39 928.282,230.57 928.85,230.504 929.419,230.579 929.987,227.757 930.556,225.784 931.124,227.027 931.692,226.35 932.261,223.531 932.829,223.014 933.397,223.578 933.966,223.054 934.534,224.411 935.102,223.803 935.671,225.252 936.239,225.658 936.807,226.205 937.376,223.312 937.944,222.83 938.512,224.675 939.081,222.106 939.649,223.739 940.217,224.349 940.786,222.866 941.354,224.663 941.922,226.179 942.491,230.631 943.059,228.709 943.627,232.072 944.196,231.215 944.764,232.485 945.333,231.748 945.901,231.618 946.469,235.81 947.038,234.4 947.606,235.319 948.174,236.185 948.743,236.072 949.311,235.738 949.879,236.596 950.448,236.249 951.016,236.788 951.584,235.372 952.153,238.063 952.721,238.417 953.289,236.814 953.858,235.291 954.426,233.98 954.994,235.006 955.563,233.64 956.131,231.507 956.699,231.567 957.268,232.434 957.836,231.467 958.405,230.269 958.973,227.206 959.541,227.281 960.11,228.589 960.678,229.884 961.246,231.267 961.815,232.283 962.383,230.071 962.951,228.892 963.52,227.089 964.088,229.441 964.656,231.619 965.225,230.325 965.793,229.257 966.361,231.31 966.93,232.09 967.498,231.135 968.066,230.958 968.635,228.76 969.203,226.871 969.771,231.397 970.34,228.172 970.908,228.498 971.476,228.498 972.045,229.799 972.613,229.879 973.182,229.97 973.75,230.085 974.318,230.115 974.887,230.305 975.455,230.603 976.023,230.643 976.592,230.823 977.16,229.989 977.728,228.923 978.297,229.039 978.865,232.395 979.433,232.586 980.002,232.503 980.57,231.498 981.138,230.559 981.707,230.528 982.275,233.623 982.843,233.51 983.412,233.215 983.98,232.918 984.548,232.605 985.117,234.787 985.685,234.597 986.253,233.263 986.822,231.153 987.39,230.322 987.959,228.338 988.527,226.579 989.095,226.809 989.664,229.436 990.232,227.68 990.8,229.921 991.369,233.037 991.937,234.897 992.505,236.552 993.074,235.441 993.642,235.119 994.21,235.776 994.779,235.591 995.347,236.182 995.915,234.683 996.484,234.378 997.052,232.183 997.62,232.093 998.189,232.878 998.757,231.61 999.325,230.457 999.894,229.392 1000.46,230.339 1001.03,230.48 1001.6,230.511 1002.17,228.437 1002.74,227.476 1003.3,229.781 1003.87,229.765 1004.44,229.882 1005.01,229.962 1005.58,228.19 1006.15,227.357 1006.71,224.628 1007.28,225.157 1007.85,225.548 1008.42,226.946 1008.99,227.213 1009.56,228.674 1010.12,229.645 1010.69,229.575 1011.26,230.806 1011.83,228.946 1012.4,230.209 1012.97,230.144 1013.53,229.952 1014.1,228.06 1014.67,228.32 1015.24,228.492 1015.81,228.536 1016.38,227.699 1016.94,228.876 1017.51,230.16 1018.08,231.2 1018.65,232.299 1019.22,233.419 1019.79,233.446 1020.35,235.301 1020.92,235.284 1021.49,234.204 1022.06,233.779 1022.63,233.54 1023.2,233.39 1023.76,234.315 1024.33,235.111 1024.9,232.815 1025.47,233.647 1026.04,233.537 1026.61,231.263 1027.17,231.315 1027.74,231.155 1028.31,233.206 1028.88,231.857 1029.45,231.979 1030.02,231.811 1030.58,230.906 1031.15,229.945 1031.72,231.17 1032.29,230.101 1032.86,230.339 1033.43,231.263 1033.99,230.199 1034.56,229.055 1035.13,227.059 1035.7,227.342 1036.27,227.529 1036.84,227.674 1037.4,226.774 1037.97,229.317 1038.54,228.631 1039.11,230.044 1039.68,230.227 1040.25,230.312 1040.81,231.462 1041.38,229.364 1041.95,227.371 1042.52,227.7 1043.09,228.8 1043.66,227.955 1044.22,227.147 1044.79,227.454 1045.36,228.683 1045.93,228.97 1046.5,228.209 1047.07,228.617 1047.63,228.711 1048.2,231.046 1048.77,231.291 1049.34,232.507 1049.91,234.535 1050.48,233.279 1051.05,233.231 1051.61,232.17 1052.18,232.052 1052.75,231.91 1053.32,231.983 1053.89,233.874 1054.46,230.569 1055.02,230.828 1055.59,229.702 1056.16,230.832 1056.73,232.017 1057.3,232.893 1057.87,233.973 1058.43,233.831 1059,232.488 1059.57,232.241 1060.14,235.147 1060.71,233.825 1061.28,235.709 1061.84,236.454 1062.41,237.126 1062.98,235.666 1063.55,235.321 1064.12,235.01 1064.69,234.875 1065.25,234.852 1065.82,234.592 1066.39,233.69 1066.96,233.591 1067.53,232.373 1068.1,234.299 1068.66,237.244 1069.23,238.995 1069.8,239.616 1070.37,237.953 1070.94,236.426 1071.51,236.109 1072.07,234.662 1072.64,234.17 1073.21,232.765 1073.78,233.447 1074.35,235.008 1074.92,233.531 1075.48,234.42 1076.05,234.049 1076.62,233.606 1077.19,232.318 1077.76,233.177 1078.33,232.062 1078.89,234.009 1079.46,233.562 1080.03,231.197 1080.6,231.058 1081.17,230.935 1081.74,230.919 1082.3,231.791 1082.87,230.619 1083.44,230.584 1084.01,228.515 1084.58,228.391 1085.15,228.392 1085.71,228.495 1086.28,225.593 1086.85,226.032 1087.42,225.346 1087.99,224.691 1088.56,226.173 1089.12,226.38 1089.69,223.504 1090.26,219.895 1090.83,222.627 1091.4,224.233 1091.97,227.978 1092.53,229.063 1093.1,228.064 1093.67,229.135 1094.24,228.256 1094.81,229.461 1095.38,229.558 1095.94,230.593 1096.51,230.478 1097.08,231.477 1097.65,232.461 1098.22,231.223 1098.79,234.232 1099.35,233.056 1099.92,232.675 1100.49,232.474 1101.06,232.435 1101.63,228.237 1102.2,230.416 1102.76,229.293 1103.33,229.373 1103.9,231.393 1104.47,232.431 1105.04,232.494 1105.61,232.514 1106.17,230.405 1106.74,231.571 1107.31,233.612 1107.88,234.179 1108.45,233.037 1109.02,233.834 1109.58,233.564 1110.15,235.361 1110.72,236.055 1111.29,235.512 1111.86,235.226 1112.43,233.003 1112.99,232.893 1113.56,232.611 1114.13,232.44 1114.7,231.47 1115.27,231.244 1115.84,229.03 1116.4,227.863 1116.97,228.124 1117.54,228.302 1118.11,227.614 1118.68,227.83 1119.25,228.097 1119.81,225.913 1120.38,225.199 1120.95,224.501 1121.52,224.898 1122.09,223.437 1122.66,224.033 1123.23,225.445 1123.79,224.625 1124.36,226.66 1124.93,227.091 1125.5,226.33 1126.07,225.536 1126.64,224.887 1127.2,224.251 1127.77,224.617 1128.34,225.209 1128.91,222.534 1129.48,222.146 1130.05,222.169 1130.61,222.991 1131.18,224.826 1131.75,226.624 1132.32,224.978 1132.89,223.618 1133.46,227.44 1134.02,227.763 1134.59,230.251 1135.16,231.436 1135.73,231.489 1136.3,231.521 1136.87,232.705 1137.43,231.795 1138,232.996 1138.57,233.93 1139.14,233.991 1139.71,234.054 1140.28,235.216 1140.84,233.913 1141.41,234.802 1141.98,234.578 1142.55,234.171 1143.12,235.212 1143.69,234.034 1144.25,233.899 1144.82,231.773 1145.39,230.871 1145.96,229.857 1146.53,227.969 1147.1,230.361 1147.66,232.569 1148.23,234.728 1148.8,235.705 1149.37,236.248 1149.94,234.727 1150.51,232.476 1151.07,232.523 1151.64,231.59 1152.21,229.636 1152.78,227.556 1153.35,229.011 1153.92,228.296 1154.48,226.413 1155.05,227.905 1155.62,230.23 1156.19,229.482 1156.76,227.77 1157.33,229.065 1157.89,230.191 1158.46,232.433 1159.03,234.164 1159.6,234.21 1160.17,231.9 1160.74,232.781 1161.3,233.723 1161.87,234.66 1162.44,236.597 1163.01,236.375 1163.58,236.065 1164.15,234.602 1164.71,233.348 1165.28,234.25 1165.85,229.939 1166.42,231.295 1166.99,232.344 1167.56,232.471 1168.12,231.435 1168.69,232.498 1169.26,233.613 1169.83,232.393 1170.4,234.378 1170.97,233.336 1171.53,232.027 1172.1,233.152 1172.67,232.227 1173.24,232.15 1173.81,231.866 1174.38,231.66 1174.94,231.588 1175.51,229.281 1176.08,228.586 1176.65,227.74 1177.22,230.083 1177.79,232.188 1178.35,234.193 1178.92,236.099 1179.49,233.573 1180.06,230.692 1180.63,229.733 1181.2,228.706 1181.76,229.915 1182.33,230.007 1182.9,230.128 1183.47,233.137 1184.04,230.017 1184.61,231.194 1185.17,231.213 1185.74,233.45 1186.31,234.131 1186.88,234.889 1187.45,233.584 1188.02,235.675 1188.58,236.464 1189.15,238.056 1189.72,236.389 1190.29,234.839 1190.86,235.468 1191.43,235.21 1192,234.917 1192.56,234.752 1193.13,235.342 1193.7,234.861 1194.27,235.693 1194.84,235.072 1195.41,233.54 1195.97,233.354 1196.54,233.376 1197.11,232.067 1197.68,236.053 1198.25,234.786 1198.82,233.242 1199.38,232.024 1199.95,230.768 1200.52,230.625 1201.09,229.565 1201.66,228.551 1202.23,229.546 1202.79,230.663 1203.36,232.38 1203.93,233.946 1204.5,233.766 1205.07,232.139 1205.64,231.986 1206.2,233.003 1206.77,232.712 1207.34,231.382 1207.91,231.397 1208.48,231.269 1209.05,229.876 1209.61,229.975 1210.18,229.748 1210.75,229.592 1211.32,230.538 1211.89,228.359 1212.46,228.458 1213.02,230.601 1213.59,230.59 1214.16,231.496 1214.73,231.368 1215.3,230.161 1215.87,232.191 1216.43,231.975 1217,229.775 1217.57,230.557 1218.14,228.522 1218.71,229.878 1219.28,229.891 1219.84,227.779 1220.41,228.91 1220.98,228.863 1221.55,228.921 1222.12,227.991 1222.69,229.291 1223.25,225.262 1223.82,225.597 1224.39,227.934 1224.96,228.383 1225.53,228.598 1226.1,229.73 1226.66,227.947 1227.23,228.926 1227.8,230.1 1228.37,232.193 1228.94,230.948 1229.51,229.922 1230.07,232.089 1230.64,231.733 1231.21,230.63 1231.78,231.454 1232.35,229.189 1232.92,229.408 1233.48,228.494 1234.05,227.716 1234.62,228.987 1235.19,229.047 1235.76,228.317 1236.33,228.541 1236.89,226.678 1237.46,230 1238.03,228.859 1238.6,229.067 1239.17,227.957 1239.74,226.07 1240.3,225.259 1240.87,225.003 1241.44,226.436 1242.01,226.702 1242.58,224.071 1243.15,224.524 1243.71,224.835 1244.28,224.176 1244.85,224.772 1245.42,228.583 1245.99,227.909 1246.56,228.287 1247.12,230.453 1247.69,232.735 1248.26,232.605 1248.83,232.599 1249.4,233.599 1249.97,234.456 1250.53,233.901 1251.1,231.62 1251.67,230.373 1252.24,228.335 1252.81,226.549 1253.38,226.12 1253.94,227.679 1254.51,227.087 1255.08,227.412 1255.65,225.746 1256.22,224.996 1256.79,224.527 1257.35,222.887 1257.92,226.669 1258.49,226.02 1259.06,226.593 1259.63,227.198 1260.2,228.693 1260.76,229.064 1261.33,228.214 1261.9,228.567 1262.47,228.617 1263.04,228.047 1263.61,228.428 1264.18,228.722 1264.74,229.143 1265.31,231.535 1265.88,231.574 1266.45,231.674 1267.02,230.705 1267.59,234.963 1268.15,236.789 1268.72,235.545 1269.29,235.368 1269.86,236.217 1270.43,234.952 1271,234.798 1271.56,233.658 1272.13,231.549 1272.7,233.678 1273.27,233.52 1273.84,231.264 1274.41,232.395 1274.97,232.272 1275.54,231.254 1276.11,231.445 1276.68,232.446 1277.25,230.609 1277.82,229.633 1278.38,232.812 1278.95,232.597 1279.52,231.518 1280.09,232.63 1280.66,234.791 1281.23,234.317 1281.79,233.306 1282.36,232.135 1282.93,230.976 1283.5,230.856 1284.07,231.731 1284.64,233.655 1285.2,230.478 1285.77,229.824 1286.34,231.161 1286.91,231.229 1287.48,231.308 1288.05,230.346 1288.61,231.4 1289.18,230.189 1289.75,230.215 1290.32,230.389 1290.89,230.571 1291.46,230.747 1292.02,230.882 1292.59,232.833 1293.16,230.617 1293.73,230.592 1294.3,232.526 1294.87,232.311 1295.43,230.328 1296,231.587 1296.57,230.648 1297.14,230.78 1297.71,231.87 1298.28,233.025 1298.84,234.187 1299.41,234.082 1299.98,234.98 1300.55,232.909 1301.12,233.815 1301.69,233.726 1302.25,233.635 1302.82,234.318 1303.39,234.311 1303.96,234.062 1304.53,235.772 1305.1,235.292 1305.66,234.08 1306.23,234.918 1306.8,234.566 1307.37,233.113 1307.94,231.801 1308.51,231.649 1309.07,230.563 1309.64,232.614 1310.21,229.488 1310.78,230.564 1311.35,229.504 1311.92,229.729 1312.48,229.823 1313.05,228.671 1313.62,231.858 1314.19,229.521 1314.76,230.722 1315.33,229.806 1315.89,231.803 1316.46,231.849 1317.03,232.747 1317.6,231.697 1318.17,233.756 1318.74,234.528 1319.3,234.179 1319.87,232.871 1320.44,231.855 1321.01,231.633 1321.58,232.76 1322.15,232.662 1322.71,234.801 1323.28,233.718 1323.85,233.456 1324.42,233.408 1324.99,233.068 1325.56,234.868 1326.12,236.513 1326.69,236.004 1327.26,234.739 1327.83,232.405 1328.4,232.372 1328.97,232.332 1329.53,232.152 1330.1,233.806 1330.67,228.204 1331.24,229.168 1331.81,227.019 1332.38,225.992 1332.94,227.351 1333.51,227.73 1334.08,227.938 1334.65,228.264 1335.22,225.253 1335.79,225.613 1336.36,226.78 1336.92,228.055 1337.49,229.172 1338.06,228.269 1338.63,229.474 1339.2,228.555 1339.77,227.685 1340.33,230.722 1340.9,230.8 1341.47,230.014 1342.04,230.037 1342.61,228.11 1343.18,228.265 1343.74,229.477 1344.31,228.734 1344.88,227.953 1345.45,227.075 1346.02,226.107 1346.59,225.353 1347.15,226.034 1347.72,228.458 1348.29,228.582 1348.86,225.819 1349.43,226.244 1350,226.623 1350.56,224.887 1351.13,226.371 1351.7,227.371 1352.27,227.762 1352.84,227.035 1353.41,226.54 1353.97,226.934 1354.54,227.54 1355.11,226.858 1355.68,224.129 1356.25,225.907 1356.82,225.599 1357.38,226.087 1357.95,226.593 1358.52,227.002 1359.09,228.386 1359.66,226.617 1360.23,225.926 1360.79,227.572 1361.36,228.978 1361.93,229.306 1362.5,229.675 1363.07,230.069 1363.64,230.282 1364.2,231.454 1364.77,232.461 1365.34,232.612 1365.91,232.782 1366.48,234.741 1367.05,233.64 1367.61,235.76 1368.18,237.407 1368.75,236.036 1369.32,234.863 1369.89,232.751 1370.46,232.747 1371.02,235.642 1371.59,234.256 1372.16,234.301 1372.73,234.237 1373.3,234.239 1373.87,234.074 1374.43,233.875 1375,235.847 1375.57,235.616 1376.14,234.271 1376.71,234.098 1377.28,235.777 1377.84,235.524 1378.41,234.24 1378.98,234.196 1379.55,234.909 1380.12,233.507 1380.69,234.263 1381.25,233.16 1381.82,235.126 1382.39,233.771 1382.96,233.694 1383.53,230.567 1384.1,231.601 1384.66,233.472 1385.23,235.215 1385.8,234.834 1386.37,233.563 1386.94,235.298 1387.51,236.914 1388.07,237.33 1388.64,236.866 1389.21,236.458 1389.78,233.055 1390.35,234.984 1390.92,236.392 1391.48,236.814 1392.05,236.339 1392.62,236.804 1393.19,235.146 1393.76,234.836 1394.33,232.423 1394.89,229.155 1395.46,228.089 1396.03,229.277 1396.6,228.185 1397.17,229.084 1397.74,229.108 1398.3,230.156 1398.87,229.147 1399.44,227.176 1400.01,227.541 1400.58,228.856 1401.15,228.009 1401.71,226.132 1402.28,226.476 1402.85,226.565 1403.42,227.778 1403.99,229.207 1404.56,229.242 1405.13,229.184 1405.69,230.442 1406.26,230.544 1406.83,230.471 1407.4,230.365 1407.97,230.539 1408.54,231.875 1409.1,231.851 1409.67,232.713 1410.24,231.411 1410.81,233.507 1411.38,235.297 1411.95,235.858 1412.51,237.64 1413.08,239.225 1413.65,237.532 1414.22,234.994 1414.79,234.332 1415.36,235.006 1415.92,235.623 1416.49,236.219 1417.06,236.855 1417.63,236.37 1418.2,234.796 1418.77,236.571 1419.33,235.811 1419.9,235.233 1420.47,233.657 1421.04,232.321 1421.61,232.232 1422.18,232.012 1422.74,231.82 1423.31,232.445 1423.88,232.355 1424.45,231.18 1425.02,227.884 1425.59,226.913 1426.15,226.12 1426.72,225.233 1427.29,226.482 1427.86,223.608 1428.43,223.856 1429,226.144 1429.56,224.39 1430.13,225.026 1430.7,227.396 1431.27,228.54 1431.84,228.552 1432.41,228.671 1432.97,228.779 1433.54,230.006 1434.11,230.07 1434.68,230.1 1435.25,230.266 1435.82,231.274 1436.38,230.264 1436.95,230.167 1437.52,228.024 1438.09,228.342 1438.66,227.794 1439.23,229.068 1439.79,229.129 1440.36,229.142 1440.93,229.124 1441.5,231.438 1442.07,232.433 1442.64,231.272 1443.2,231.234 1443.77,232.185 1444.34,233.075 1444.91,233.937 1445.48,231.658 1446.05,231.747 1446.61,231.499 1447.18,230.517 1447.75,229.528 1448.32,227.848 1448.89,230.098 1449.46,231.12 1450.02,230.983 1450.59,233.212 1451.16,230.052 1451.73,229.043 1452.3,228.233 1452.87,227.467 1453.43,230.866 1454,231.974 1454.57,233.801 1455.14,231.609 1455.71,231.573 1456.28,232.361 1456.84,231.127 1457.41,230.091 1457.98,229.99 1458.55,229.016 1459.12,229.09 1459.69,226.069 1460.25,226.327 1460.82,227.568 1461.39,228.86 1461.96,231.177 1462.53,228.306 1463.1,226.384 1463.66,229.665 1464.23,229.661 1464.8,231.588 1465.37,232.57 1465.94,234.575 1466.51,234.261 1467.07,236.132 1467.64,233.69 1468.21,234.43 1468.78,233.082 1469.35,234.034 1469.92,234.521 1470.48,234.253 1471.05,233.904 1471.62,231.719 1472.19,229.472 1472.76,230.643 1473.33,229.637 1473.89,230.673 1474.46,226.558 1475.03,228.891 1475.6,229.13 1476.17,230.167 1476.74,230.187 1477.31,230.244 1477.87,231.341 1478.44,231.089 1479.01,234.126 1479.58,231.835 1480.15,232.799 1480.72,232.592 1481.28,232.401 1481.85,234.531 1482.42,235.013 1482.99,234.812 1483.56,234.447 1484.13,233.186 1484.69,232.9 1485.26,231.468 1485.83,231.372 1486.4,233.338 1486.97,235.171 1487.54,234.74 1488.1,234.449 1488.67,233.105 1489.24,231.854 1489.81,231.683 1490.38,232.453 1490.95,231.111 1491.51,232.035 1492.08,232.934 1492.65,233.667 1493.22,233.458 1493.79,231.08 1494.36,230.965 1494.92,231.689 1495.49,231.445 1496.06,230.241 1496.63,228.949 1497.2,231.855 1497.77,231.613 1498.33,231.414 1498.9,232.095 1499.47,232.018 1500.04,232.866 1500.61,231.513 1501.18,232.467 1501.74,232.156 1502.31,230.746 1502.88,230.619 1503.45,230.449 1504.02,230.444 1504.59,230.282 1505.15,229.372 1505.72,229.314 1506.29,230.56 1506.86,230.459 1507.43,229.445 1508,228.401 1508.56,228.38 1509.13,228.258 1509.7,229.418 1510.27,231.315 1510.84,231.018 1511.41,229.782 1511.97,228.844 1512.54,228.881 1513.11,229.8 1513.68,226.914 1514.25,228.058 1514.82,225.075 1515.38,227.395 1515.95,227.384 1516.52,226.397 1517.09,225.423 1517.66,225.786 1518.23,225.106 1518.79,225.624 1519.36,223.824 1519.93,226.191 1520.5,226.557 1521.07,226.764 1521.64,226.017 1522.2,226.297 1522.77,226.528 1523.34,226.019 1523.91,228.597 1524.48,228.754 1525.05,227.886 1525.61,227.973 1526.18,227.042 1526.75,227.446 1527.32,229.719 1527.89,228.847 1528.46,231.042 1529.02,230.112 1529.59,229.193 1530.16,231.412 1530.73,228.533 1531.3,228.6 1531.87,229.668 1532.43,231.812 1533,229.606 1533.57,228.526 1534.14,225.712 1534.71,225.216 1535.28,223.564 1535.84,224.229 1536.41,224.742 1536.98,227.197 1537.55,230.879 1538.12,228.016 1538.69,229.367 1539.25,228.619 1539.82,227.598 1540.39,226.75 1540.96,228.209 1541.53,229.382 1542.1,230.871 1542.66,230.992 1543.23,232.008 1543.8,233.053 1544.37,232.991 1544.94,235.104 1545.51,233.853 1546.08,232.611 1546.64,233.622 1547.21,228.317 1547.78,227.513 1548.35,227.96 1548.92,228.203 1549.49,230.272 1550.05,232.493 1550.62,232.484 1551.19,236.589 1551.76,234.336 1552.33,234.076 1552.9,235.675 1553.46,236.509 1554.03,237.022 1554.6,232.78 1555.17,233.698 1555.74,232.516 1556.31,232.462 1556.87,234.614 1557.44,232.519 1558.01,230.35 1558.58,230.235 1559.15,230.379 1559.72,231.403 1560.28,230.331 1560.85,229.454 1561.42,229.444 1561.99,229.534 1562.56,229.643 1563.13,226.737 1563.69,229.282 1564.26,228.141 1564.83,227.254 1565.4,227.51 1565.97,226.821 1566.54,228.224 1567.1,227.604 1567.67,226.908 1568.24,225.142 1568.81,222.421 1569.38,224.964 1569.95,225.454 1570.51,225.789 1571.08,226.265 1571.65,225.791 1572.22,224.216 1572.79,226.075 1573.36,226.257 1573.92,226.88 1574.49,226.124 1575.06,227.6 1575.63,226.918 1576.2,227.452 1576.77,229.903 1577.33,232.105 1577.9,232.351 1578.47,235.669 1579.04,236.377 1579.61,238.098 1580.18,237.61 1580.74,237.149 1581.31,235.9 1581.88,235.802 1582.45,235.665 1583.02,233.462 1583.59,236.355 1584.15,236.101 1584.72,233.752 1585.29,232.554 1585.86,233.536 1586.43,233.286 1587,230.043 1587.56,230.417 1588.13,230.571 1588.7,232.654 1589.27,232.762 1589.84,235.599 1590.41,235.018 1590.97,234.702 1591.54,233.457 1592.11,234.321 1592.68,235.143 1593.25,234.095 1593.82,232.785 1594.38,232.731 1594.95,235.902 1595.52,235.578 1596.09,235.142 1596.66,235.853 1597.23,236.59 1597.79,235.197 1598.36,233.094 1598.93,232.946 1599.5,234.035 1600.07,232.84 1600.64,233.475 1601.2,231.227 1601.77,230.08 1602.34,230.328 1602.91,230.341 1603.48,229.247 1604.05,229.55 1604.61,228.75 1605.18,228.794 1605.75,231.006 1606.32,231.086 1606.89,230.159 1607.46,228.542 1608.02,232.767 1608.59,230.651 1609.16,230.625 1609.73,231.668 1610.3,232.696 1610.87,233.343 1611.43,233.15 1612,233.901 1612.57,233.751 1613.14,232.367 1613.71,233.364 1614.28,235.068 1614.84,233.636 1615.41,233.329 1615.98,233.059 1616.55,234.835 1617.12,234.392 1617.69,232.936 1618.26,231.779 1618.82,229.675 1619.39,230.766 1619.96,229.461 1620.53,229.402 1621.1,229.348 1621.67,227.456 1622.23,228.635 1622.8,227.899 1623.37,230.189 1623.94,230.323 1624.51,228.189 1625.08,226.356 1625.64,227.553 1626.21,228.765 1626.78,227.877 1627.35,228.003 1627.92,228.132 1628.49,229.513 1629.05,229.629 1629.62,228.681 1630.19,229.857 1630.76,229.136 1631.33,231.496 1631.9,231.118 1632.46,229.858 1633.03,230.047 1633.6,228.829 1634.17,228.806 1634.74,229.018 1635.31,229.338 1635.87,230.693 1636.44,229.665 1637.01,232.864 1637.58,229.653 1638.15,231.118 1638.72,232.141 1639.28,232.187 1639.85,233.333 1640.42,233.288 1640.99,232.145 1641.56,231.067 1642.13,231.06 1642.69,229.023 1643.26,227.966 1643.83,229.081 1644.4,228.102 1644.97,228.373 1645.54,227.543 1646.1,228.842 1646.67,228.869 1647.24,227.916 1647.81,228.06 1648.38,228.079 1648.95,227.303 1649.51,228.827 1650.08,229.032 1650.65,229.182 1651.22,229.399 1651.79,229.519 1652.36,231.582 1652.92,232.474 1653.49,232.52 1654.06,230.455 1654.63,229.486 1655.2,229.646 1655.77,228.898 1656.33,230.027 1656.9,230.193 1657.47,229.042 1658.04,229.16 1658.61,228.473 1659.18,228.656 1659.74,228.758 1660.31,228.886 1660.88,228.042 1661.45,226.301 1662.02,224.871 1662.59,228.573 1663.15,229.821 1663.72,229.855 1664.29,232.177 1664.86,233.025 1665.43,233.967 1666,233.551 1666.56,232.276 1667.13,232.108 1667.7,232.01 1668.27,232.049 1668.84,232.02 1669.41,230 1669.97,230.332 1670.54,227.378 1671.11,228.91 1671.68,228.021 1672.25,228.201 1672.82,228.425 1673.38,230.597 1673.95,229.606 1674.52,229.808 1675.09,229.87 1675.66,231.193 1676.23,232.339 1676.79,233.421 1677.36,235.35 1677.93,234.952 1678.5,235.72 1679.07,235.509 1679.64,236.116 1680.2,236.842 1680.77,236.562 1681.34,235.237 1681.91,236.235 1682.48,236.915 1683.05,235.482 1683.61,235.274 1684.18,235.092 1684.75,236.638 1685.32,236.304 1685.89,236.041 1686.46,237.746 1687.02,237.182 1687.59,234.814 1688.16,233.481 1688.73,232.306 1689.3,231.103 1689.87,230.095 1690.44,227.852 1691,225.821 1691.57,226.157 1692.14,226.53 1692.71,225.735 1693.28,225.135 1693.85,225.512 1694.41,226.919 1694.98,227.937 1695.55,231.397 1696.12,228.206 1696.69,229.289 1697.26,231.344 1697.82,229.453 1698.39,229.479 1698.96,229.537 1699.53,229.688 1700.1,229.599 1700.67,233.658 1701.23,232.505 1701.8,233.359 1702.37,232.002 1702.94,229.802 1703.51,231.89 1704.08,231.918 1704.64,233.034 1705.21,234.895 1705.78,233.629 1706.35,236.206 1706.92,235.652 1707.49,235.23 1708.05,234.672 1708.62,234.248 1709.19,233.977 1709.76,234.83 1710.33,232.43 1710.9,231.289 1711.46,233.361 1712.03,233.029 1712.6,232.825 1713.17,231.676 1713.74,231.477 1714.31,234.61 1714.87,236.358 1715.44,236.971 1716.01,235.322 1716.58,235.87 1717.15,238.731 1717.72,237.873 1718.28,238.114 1718.85,237.717 1719.42,238.311 1719.99,237.634 1720.56,237.098 1721.13,235.462 1721.69,234.048 1722.26,233.538 1722.83,235.057 1723.4,234.648 1723.97,234.493 1724.54,233.027 1725.1,230.428 1725.67,231.228 1726.24,232.059 1726.81,234.938 1727.38,234.339 1727.95,233.755 1728.51,233.179 1729.08,233.963 1729.65,233.679 1730.22,233.362 1730.79,233.786 1731.36,236.365 1731.92,234.546 1732.49,234.065 1733.06,230.314 1733.63,229.296 1734.2,224.955 1734.77,226.215 1735.33,228.512 1735.9,229.673 1736.47,228.565 1737.04,229.536 1737.61,228.333 1738.18,228.519 1738.74,229.351 1739.31,229.071 1739.88,226.769 1740.45,224.687 1741.02,222.687 1741.59,222.245 1742.15,222.695 1742.72,223.282 1743.29,224.978 1743.86,226.343 1744.43,227.55 1745,227.917 1745.56,228.012 1746.13,229.307 1746.7,227.444 1747.27,226.732 1747.84,227.786 1748.41,229.104 1748.97,229.099 1749.54,228.187 1750.11,225.959 1750.68,225.435 1751.25,226.752 1751.82,227.129 1752.38,226.281 1752.95,224.438 1753.52,223.646 1754.09,225.278 1754.66,226.788 1755.23,227.146 1755.79,226.245 1756.36,225.323 1756.93,230.888 1757.5,231.873 1758.07,231.691 1758.64,231.713 1759.21,230.543 1759.77,231.694 1760.34,231.715 1760.91,231.525 1761.48,228.206 1762.05,227.241 1762.62,226.562 1763.18,226.868 1763.75,227.162 1764.32,227.761 1764.89,229.27 1765.46,230.643 1766.03,230.707 1766.59,231.815 1767.16,228.643 1767.73,230.89 1768.3,231.074 1768.87,232.064 1769.44,231.062 1770,229.937 1770.57,229.747 1771.14,229.741 1771.71,228.995 1772.28,229.457 1772.85,230.783 1773.41,231.484 1773.98,231.576 1774.55,231.378 1775.12,234.6 1775.69,234.354 1776.26,234.281 1776.82,234.305 1777.39,234.044 1777.96,230.776 1778.53,230.925 1779.1,231.029 1779.67,231.102 1780.23,231.028 1780.8,232.124 1781.37,233.935 1781.94,234.584 1782.51,234.137 1783.08,234.945 1783.64,232.675 1784.21,232.531 1784.78,230.315 1785.35,229.357 1785.92,229.353 1786.49,230.377 1787.05,230.617 1787.62,229.754 1788.19,229.846 1788.76,228.92 1789.33,228.029 1789.9,227.088 1790.46,226.145 1791.03,225.407 1791.6,226.115 1792.17,227.383 1792.74,229.773 1793.31,232.085 1793.87,230.851 1794.44,232.03 1795.01,232.213 1795.58,234.337 1796.15,233.063 1796.72,231.717 1797.28,229.576 1797.85,227.696 1798.42,227.902 1798.99,227.093 1799.56,226.31 1800.13,225.561 1800.69,224.822 1801.26,226.164 1801.83,226.579 1802.4,227.993 1802.97,230.469 1803.54,229.371 1804.1,231.691 1804.67,234.679 1805.24,233.293 1805.81,232.04 1806.38,232.007 1806.95,231.97 1807.51,230.031 1808.08,227.799 1808.65,228.869 1809.22,229.915 1809.79,230.142 1810.36,230.323 1810.92,231.253 1811.49,232.531 1812.06,232.585 1812.63,231.392 1813.2,231.378 1813.77,230.275 1814.33,230.259 1814.9,229.394 1815.47,231.482 1816.04,230.314 1816.61,231.303 1817.18,230.151 1817.74,229.256 1818.31,229.34 1818.88,230.664 1819.45,229.484 1820.02,230.775 1820.59,233.706 1821.15,232.405 1821.72,232.336 1822.29,235.273 1822.86,235.025 1823.43,235.697 1824,237.504 1824.56,237.066 1825.13,235.86 1825.7,234.563 1826.27,234.222 1826.84,233.911 1827.41,232.555 1827.97,233.356 1828.54,233.248 1829.11,233.935 1829.68,234.849 1830.25,236.551 1830.82,236.207 1831.39,236.843 1831.95,236.245 1832.52,235.695 1833.09,235.425 1833.66,237.075 1834.23,233.56 1834.8,234.376 1835.36,232.844 1835.93,231.688 1836.5,229.563 1837.07,229.529 1837.64,230.595 1838.21,229.703 1838.77,228.575 1839.34,229.726 1839.91,230.8 1840.48,227.552 1841.05,225.909 1841.62,223.032 1842.18,224.563 1842.75,224.922 1843.32,224.302 1843.89,225.699 1844.46,220.686 1845.03,223.55 1845.59,223.01 1846.16,226.537 1846.73,226.732 1847.3,228.955 1847.87,230.125 1848.44,230.176 1849,229.132 1849.57,229.286 1850.14,229.326 1850.71,227.292 1851.28,229.726 1851.85,231.647 1852.41,233.565 1852.98,233.141 1853.55,229.97 1854.12,231.097 1854.69,233.1 1855.26,233.964 1855.82,233.645 1856.39,234.664 1856.96,234.361 1857.53,233.295 1858.1,234.094 1858.67,233.87 1859.23,233.67 1859.8,235.655 1860.37,235.234 1860.94,234.788 1861.51,235.436 1862.08,234.909 1862.64,234.71 1863.21,234.66 1863.78,233.406 1864.35,233.207 1864.92,232.739 1865.49,233.744 1866.05,233.501 1866.62,235.475 1867.19,233.024 1867.76,230.668 1868.33,231.811 1868.9,230.642 1869.46,231.739 1870.03,229.431 1870.6,227.38 1871.17,227.403 1871.74,228.726 1872.31,228.862 1872.87,227.955 1873.44,225.069 1874.01,222.487 1874.58,223.017 1875.15,222.623 1875.72,225.288 1876.28,226.709 1876.85,227.183 1877.42,225.299 1877.99,224.855 1878.56,227.484 1879.13,228.741 1879.69,226.893 1880.26,226.177 1880.83,226.728 1881.4,227.14 1881.97,225.061 1882.54,226.279 1883.1,227.717 1883.67,229.25 1884.24,228.187 1884.81,229.308 1885.38,228.369 1885.95,229.625 1886.51,229.694 1887.08,228.794 1887.65,228.135 1888.22,231.118 1888.79,231.295 1889.36,234.181 1889.92,235.032 1890.49,235.867 1891.06,233.598 1891.63,232.32 1892.2,232.035 1892.77,229.934 1893.33,230.189 1893.9,231.331 1894.47,232.338 1895.04,233.298 1895.61,235.313 1896.18,233.94 1896.74,235.86 1897.31,235.593 1897.88,235.104 1898.45,234.638 1899.02,235.456 1899.59,233.164 1900.16,233.001 1900.72,231.87 1901.29,232.806 1901.86,232.972 1902.43,233.864 1903,233.234 1903.57,232.849 1904.13,231.76 1904.7,229.764 1905.27,229.768 1905.84,230.939 1906.41,231.84 1906.98,233.746 1907.54,232.385 1908.11,233.178 1908.68,233.92 1909.25,234.82 1909.82,235.456 1910.39,235.176 1910.95,234.818 1911.52,235.634 1912.09,233.039 1912.66,233.001 1913.23,233.781 1913.8,232.436 1914.36,234.204 1914.93,233.961 1915.5,233.71 1916.07,232.377 1916.64,231.322 1917.21,230.221 1917.77,231.067 1918.34,230.028 1918.91,229.861 1919.48,227.994 1920.05,227.108 1920.62,225.15 1921.18,225.548 1921.75,223.752 1922.32,226.371 1922.89,226.699 1923.46,225.919 1924.03,226.319 1924.59,225.606 1925.16,226.093 1925.73,226.629 1926.3,226.934 1926.87,228.114 1927.44,228.39 1928,228.664 1928.57,228.81 1929.14,229.145 1929.71,230.257 1930.28,231.516 1930.85,232.421 1931.41,231.389 1931.98,230.326 1932.55,232.422 1933.12,232.257 1933.69,234.333 1934.26,235.124 1934.82,234.933 1935.39,234.693 1935.96,234.528 1936.53,233.204 1937.1,232.134 1937.67,231.153 1938.23,230.165 1938.8,230.336 1939.37,229.435 1939.94,229.469 1940.51,229.7 1941.08,230.022 1941.64,231.235 1942.21,232.013 1942.78,231.819 1943.35,233.871 1943.92,233.508 1944.49,232.342 1945.05,232.347 1945.62,232.169 1946.19,230.861 1946.76,230.832 1947.33,230.814 1947.9,229.91 1948.46,232.198 1949.03,233.054 1949.6,230.851 1950.17,232.878 1950.74,233.61 1951.31,234.372 1951.87,232.911 1952.44,233.986 1953.01,233.679 1953.58,232.403 1954.15,232.234 1954.72,234.329 1955.28,234.052 1955.85,232.824 1956.42,232.329 1956.99,233.29 1957.56,234.076 1958.13,232.884 1958.69,232.536 1959.26,232.517 1959.83,231.342 1960.4,232.337 1960.97,231 1961.54,228.801 1962.1,228.821 1962.67,229.843 1963.24,227.593 1963.81,226.701 1964.38,227.076 1964.95,228.601 1965.51,227.52 1966.08,226.676 1966.65,227.022 1967.22,225.198 1967.79,225.563 1968.36,227.182 1968.92,227.577 1969.49,226.863 1970.06,227.192 1970.63,227.295 1971.2,228.366 1971.77,229.457 1972.34,228.725 1972.9,230.02 1973.47,229.007 1974.04,229.885 1974.61,232.1 1975.18,231.778 1975.75,229.669 1976.31,229.827 1976.88,229.839 1977.45,230.776 1978.02,229.813 1978.59,229.162 1979.16,229.147 1979.72,232.495 1980.29,232.281 1980.86,231.998 1981.43,233.927 1982,232.684 1982.57,230.708 1983.13,231.74 1983.7,231.541 1984.27,234.605 1984.84,235.157 1985.41,234.641 1985.98,236.22 1986.54,232.515 1987.11,232.34 1987.68,231.96 1988.25,232.822 1988.82,232.777 1989.39,232.583 1989.95,232.266 1990.52,231.062 1991.09,232.243 1991.66,233.379 1992.23,229.983 1992.8,232.303 1993.36,232.159 1993.93,233.36 1994.5,230.12 1995.07,230.191 1995.64,228.99 1996.21,228.147 1996.77,229.431 1997.34,228.648 1997.91,229.753 1998.48,229.89 1999.05,231.073 1999.62,230.904 2000.18,231.085 2000.75,231.268 2001.32,231.33 2001.89,231.267 2002.46,232.007 2003.03,235.13 2003.59,234.776 2004.16,234.527 2004.73,234.13 2005.3,234.804 2005.87,234.564 2006.44,234.421 2007,236.269 2007.57,233.637 2008.14,232.412 2008.71,232.282 2009.28,231.903 2009.85,231.845 2010.41,232.769 2010.98,233.599 2011.55,234.401 2012.12,234.054 2012.69,235.96 2013.26,234.336 2013.82,231.721 2014.39,229.563 2014.96,230.686 2015.53,227.323 2016.1,225.398 2016.67,224.352 2017.23,223.576 2017.8,226.129 2018.37,227.23 2018.94,227.38 2019.51,226.294 2020.08,226.613 2020.64,224.932 2021.21,226.252 2021.78,225.611 2022.35,225.916 2022.92,224.266 2023.49,222.875 2024.05,222.488 2024.62,223.998 2025.19,223.326 2025.76,223.786 2026.33,223.387 2026.9,223.009 2027.46,224.768 2028.03,224.97 2028.6,223.531 2029.17,225.258 2029.74,226.756 2030.31,225.263 2030.87,224.714 2031.44,226.334 2032.01,226.697 2032.58,226.212 2033.15,227.443 2033.72,228.954 2034.28,229.964 2034.85,230.053 2035.42,230.112 2035.99,230.245 2036.56,229.642 2037.13,230.992 2037.69,228.981 2038.26,230.166 2038.83,233.49 2039.4,231.263 2039.97,230.035 2040.54,229.213 2041.11,226.162 2041.67,226.528 2042.24,226.011 2042.81,228.728 2043.38,227.964 2043.95,228.35 2044.52,229.897 2045.08,231.261 2045.65,231.126 2046.22,230.285 2046.79,230.502 2047.36,230.854 2047.93,230.947 2048.49,229.967 2049.06,230.235 2049.63,230.42 2050.2,229.531 2050.77,228.921 2051.34,230.196 2051.9,230.18 2052.47,229.2 2053.04,229.274 2053.61,228.546 2054.18,230.997 2054.75,231.135 2055.31,229.415 2055.88,229.608 2056.45,231.967 2057.02,231.844 2057.59,230.739 2058.16,229.795 2058.72,230.042 2059.29,230.311 2059.86,228.595 2060.43,231.079 2061,232.357 2061.57,233.241 2062.13,232.337 2062.7,233.346 2063.27,230.166 2063.84,230.336 2064.41,231.593 2064.98,232.641 2065.54,232.509 2066.11,232.592 2066.68,232.714 2067.25,231.765 2067.82,231.9 2068.39,233.901 2068.95,233.57 2069.52,233.572 2070.09,230.636 2070.66,230.847 2071.23,230.949 2071.8,229.054 2072.36,228.186 2072.93,229.54 2073.5,229.677 2074.07,231.709 2074.64,231.495 2075.21,231.615 2075.77,232.926 2076.34,230.687 2076.91,229.116 2077.48,229.532 2078.05,229.736 2078.62,228.918 2079.18,229.194 2079.75,229.499 2080.32,230.764 2080.89,230.966 2081.46,233.175 2082.03,235.116 2082.59,234.978 2083.16,234.819 2083.73,233.642 2084.3,233.499 2084.87,232.264 2085.44,234.101 2086,237.165 2086.57,239.677 2087.14,239.046 2087.71,238.549 2088.28,235.702 2088.85,233.411 2089.41,234.398 2089.98,233.852 2090.55,232.724 2091.12,233.828 2091.69,233.268 2092.26,233.167 2092.82,232.946 2093.39,234.036 2093.96,231.709 2094.53,231.902 2095.1,232.656 2095.67,232.458 2096.23,232.259 2096.8,232.302 2097.37,233.552 2097.94,232.466 2098.51,233.409 2099.08,234.229 2099.64,235.141 2100.21,233.874 2100.78,230.62 2101.35,230.626 2101.92,234.736 2102.49,234.51 2103.05,234.277 2103.62,233.897 2104.19,234.797 2104.76,235.502 2105.33,234.35 2105.9,235.042 2106.46,235.67 2107.03,235.282 2107.6,234.871 2108.17,237.578 2108.74,236.037 2109.31,236.533 2109.87,233.952 2110.44,233.606 2111.01,235.316 2111.58,234.707 2112.15,233.181 2112.72,231.886 2113.29,227.782 2113.85,227.085 2114.42,226.144 2114.99,226.386 2115.56,225.69 2116.13,223.774 2116.7,227.373 2117.26,228.735 2117.83,228.848 2118.4,229.858 2118.97,228.672 2119.54,228.802 2120.11,226.549 2120.67,226.683 2121.24,225.826 2121.81,228.421 2122.38,229.552 2122.95,229.754 2123.52,229.894 2124.08,231.064 2124.65,227.162 2125.22,228.412 2125.79,227.328 2126.36,228.503 2126.93,227.611 2127.49,227.684 2128.06,227.903 2128.63,228.894 2129.2,231.073 2129.77,233.131 2130.34,234.081 2130.9,233.801 2131.47,231.645 2132.04,232.475 2132.61,232.246 2133.18,231.043 2133.75,227.81 2134.31,225.925 2134.88,227.53 2135.45,227.941 2136.02,229.043 2136.59,227.987 2137.16,228.14 2137.72,232.592 2138.29,232.561 2138.86,234.578 2139.43,234.358 2140,236.266 2140.57,236.842 2141.13,238.551 2141.7,236.959 2142.27,236.605 2142.84,235.919 2143.41,235.629 2143.98,236.326 2144.54,236.905 2145.11,236.551 2145.68,234.985 2146.25,233.468 2146.82,232.316 2147.39,232.145 2147.95,230.099 2148.52,227.914 2149.09,227.257 2149.66,227.268 2150.23,228.532 2150.8,229.716 2151.36,229.594 2151.93,229.695 2152.5,230.743 2153.07,228.715 2153.64,227.751 2154.21,226.9 2154.77,225.891 2155.34,227.362 2155.91,224.598 2156.48,223.922 2157.05,224.38 2157.62,223.957 2158.18,224.357 2158.75,227.92 2159.32,226.044 2159.89,225.403 \"/>\n<path clip-path=\"url(#clip980)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip980)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip980)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip980)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.033 ± 0.024\n  with uncertainty of ± 0.0021303195298989913\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01436 ± (0.00256762, 0.00244309) (MC)\n  95% confidence interval: [-4.01941, -4.00933]) (MC)\n  linear error propagation: -4.01438 ± 0.0024877\n  |δ_y| = |0.0018977| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.014359074781899, val_l = 0.005048644999630092, val_u = 0.005029542242195539)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip010\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip010)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip011\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip010)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip012\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip012)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip012)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip012)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip012)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip010)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip012)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1157.16 2211.02,1157.16 \"/>\n<polyline clip-path=\"url(#clip012)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1016.4 2211.02,1016.4 \"/>\n<polyline clip-path=\"url(#clip012)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,875.648 2211.02,875.648 \"/>\n<polyline clip-path=\"url(#clip012)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,734.894 2211.02,734.894 \"/>\n<polyline clip-path=\"url(#clip012)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,594.14 2211.02,594.14 \"/>\n<polyline clip-path=\"url(#clip012)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,453.386 2211.02,453.386 \"/>\n<polyline clip-path=\"url(#clip012)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,312.632 2211.02,312.632 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1157.16 365.751,1157.16 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1016.4 365.751,1016.4 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,875.648 365.751,875.648 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,734.894 365.751,734.894 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,594.14 365.751,594.14 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,453.386 365.751,453.386 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,312.632 365.751,312.632 \"/>\n<path clip-path=\"url(#clip010)\" d=\"M298.909 1142.95 Q295.298 1142.95 293.469 1146.52 Q291.664 1150.06 291.664 1157.19 Q291.664 1164.3 293.469 1167.86 Q295.298 1171.4 298.909 1171.4 Q302.543 1171.4 304.349 1167.86 Q306.177 1164.3 306.177 1157.19 Q306.177 1150.06 304.349 1146.52 Q302.543 1142.95 298.909 1142.95 M298.909 1139.25 Q304.719 1139.25 307.775 1143.86 Q310.853 1148.44 310.853 1157.19 Q310.853 1165.92 307.775 1170.52 Q304.719 1175.11 298.909 1175.11 Q293.099 1175.11 290.02 1170.52 Q286.964 1165.92 286.964 1157.19 Q286.964 1148.44 290.02 1143.86 Q293.099 1139.25 298.909 1139.25 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M259.557 1029.75 L267.196 1029.75 L267.196 1003.38 L258.886 1005.05 L258.886 1000.79 L267.15 999.121 L271.826 999.121 L271.826 1029.75 L279.465 1029.75 L279.465 1033.68 L259.557 1033.68 L259.557 1029.75 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M298.909 1002.2 Q295.298 1002.2 293.469 1005.76 Q291.664 1009.31 291.664 1016.44 Q291.664 1023.54 293.469 1027.11 Q295.298 1030.65 298.909 1030.65 Q302.543 1030.65 304.349 1027.11 Q306.177 1023.54 306.177 1016.44 Q306.177 1009.31 304.349 1005.76 Q302.543 1002.2 298.909 1002.2 M298.909 998.496 Q304.719 998.496 307.775 1003.1 Q310.853 1007.69 310.853 1016.44 Q310.853 1025.16 307.775 1029.77 Q304.719 1034.35 298.909 1034.35 Q293.099 1034.35 290.02 1029.77 Q286.964 1025.16 286.964 1016.44 Q286.964 1007.69 290.02 1003.1 Q293.099 998.496 298.909 998.496 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M262.775 888.992 L279.094 888.992 L279.094 892.928 L257.15 892.928 L257.15 888.992 Q259.812 886.238 264.395 881.608 Q269.002 876.956 270.182 875.613 Q272.428 873.09 273.307 871.354 Q274.21 869.594 274.21 867.905 Q274.21 865.15 272.266 863.414 Q270.344 861.678 267.242 861.678 Q265.043 861.678 262.59 862.442 Q260.159 863.206 257.381 864.756 L257.381 860.034 Q260.205 858.9 262.659 858.321 Q265.113 857.743 267.15 857.743 Q272.52 857.743 275.715 860.428 Q278.909 863.113 278.909 867.604 Q278.909 869.733 278.099 871.655 Q277.312 873.553 275.205 876.145 Q274.627 876.817 271.525 880.034 Q268.423 883.229 262.775 888.992 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M298.909 861.446 Q295.298 861.446 293.469 865.011 Q291.664 868.553 291.664 875.682 Q291.664 882.789 293.469 886.354 Q295.298 889.895 298.909 889.895 Q302.543 889.895 304.349 886.354 Q306.177 882.789 306.177 875.682 Q306.177 868.553 304.349 865.011 Q302.543 861.446 298.909 861.446 M298.909 857.743 Q304.719 857.743 307.775 862.349 Q310.853 866.932 310.853 875.682 Q310.853 884.409 307.775 889.016 Q304.719 893.599 298.909 893.599 Q293.099 893.599 290.02 889.016 Q286.964 884.409 286.964 875.682 Q286.964 866.932 290.02 862.349 Q293.099 857.743 298.909 857.743 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M272.914 733.54 Q276.27 734.257 278.145 736.526 Q280.043 738.794 280.043 742.128 Q280.043 747.243 276.525 750.044 Q273.006 752.845 266.525 752.845 Q264.349 752.845 262.034 752.405 Q259.742 751.989 257.289 751.132 L257.289 746.618 Q259.233 747.753 261.548 748.331 Q263.863 748.91 266.386 748.91 Q270.784 748.91 273.076 747.174 Q275.39 745.438 275.39 742.128 Q275.39 739.072 273.238 737.359 Q271.108 735.623 267.289 735.623 L263.261 735.623 L263.261 731.78 L267.474 731.78 Q270.923 731.78 272.752 730.415 Q274.58 729.026 274.58 726.433 Q274.58 723.771 272.682 722.359 Q270.807 720.924 267.289 720.924 Q265.367 720.924 263.168 721.341 Q260.969 721.757 258.33 722.637 L258.33 718.47 Q260.992 717.73 263.307 717.359 Q265.645 716.989 267.705 716.989 Q273.029 716.989 276.131 719.419 Q279.233 721.827 279.233 725.947 Q279.233 728.817 277.59 730.808 Q275.946 732.776 272.914 733.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M298.909 720.693 Q295.298 720.693 293.469 724.257 Q291.664 727.799 291.664 734.929 Q291.664 742.035 293.469 745.6 Q295.298 749.141 298.909 749.141 Q302.543 749.141 304.349 745.6 Q306.177 742.035 306.177 734.929 Q306.177 727.799 304.349 724.257 Q302.543 720.693 298.909 720.693 M298.909 716.989 Q304.719 716.989 307.775 721.595 Q310.853 726.179 310.853 734.929 Q310.853 743.655 307.775 748.262 Q304.719 752.845 298.909 752.845 Q293.099 752.845 290.02 748.262 Q286.964 743.655 286.964 734.929 Q286.964 726.179 290.02 721.595 Q293.099 716.989 298.909 716.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M271.594 580.934 L259.789 599.383 L271.594 599.383 L271.594 580.934 M270.367 576.86 L276.247 576.86 L276.247 599.383 L281.177 599.383 L281.177 603.272 L276.247 603.272 L276.247 611.42 L271.594 611.42 L271.594 603.272 L255.992 603.272 L255.992 598.758 L270.367 576.86 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M298.909 579.939 Q295.298 579.939 293.469 583.503 Q291.664 587.045 291.664 594.175 Q291.664 601.281 293.469 604.846 Q295.298 608.388 298.909 608.388 Q302.543 608.388 304.349 604.846 Q306.177 601.281 306.177 594.175 Q306.177 587.045 304.349 583.503 Q302.543 579.939 298.909 579.939 M298.909 576.235 Q304.719 576.235 307.775 580.841 Q310.853 585.425 310.853 594.175 Q310.853 602.902 307.775 607.508 Q304.719 612.091 298.909 612.091 Q293.099 612.091 290.02 607.508 Q286.964 602.902 286.964 594.175 Q286.964 585.425 290.02 580.841 Q293.099 576.235 298.909 576.235 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M258.793 436.106 L277.15 436.106 L277.15 440.041 L263.076 440.041 L263.076 448.514 Q264.094 448.166 265.113 448.004 Q266.131 447.819 267.15 447.819 Q272.937 447.819 276.316 450.99 Q279.696 454.162 279.696 459.578 Q279.696 465.157 276.224 468.259 Q272.752 471.337 266.432 471.337 Q264.256 471.337 261.988 470.967 Q259.742 470.597 257.335 469.856 L257.335 465.157 Q259.418 466.291 261.641 466.847 Q263.863 467.402 266.34 467.402 Q270.344 467.402 272.682 465.296 Q275.02 463.189 275.02 459.578 Q275.02 455.967 272.682 453.861 Q270.344 451.754 266.34 451.754 Q264.465 451.754 262.59 452.171 Q260.738 452.588 258.793 453.467 L258.793 436.106 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M298.909 439.185 Q295.298 439.185 293.469 442.75 Q291.664 446.291 291.664 453.421 Q291.664 460.527 293.469 464.092 Q295.298 467.634 298.909 467.634 Q302.543 467.634 304.349 464.092 Q306.177 460.527 306.177 453.421 Q306.177 446.291 304.349 442.75 Q302.543 439.185 298.909 439.185 M298.909 435.481 Q304.719 435.481 307.775 440.088 Q310.853 444.671 310.853 453.421 Q310.853 462.148 307.775 466.754 Q304.719 471.337 298.909 471.337 Q293.099 471.337 290.02 466.754 Q286.964 462.148 286.964 453.421 Q286.964 444.671 290.02 440.088 Q293.099 435.481 298.909 435.481 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M269.326 310.769 Q266.178 310.769 264.326 312.922 Q262.497 315.074 262.497 318.824 Q262.497 322.551 264.326 324.727 Q266.178 326.88 269.326 326.88 Q272.474 326.88 274.303 324.727 Q276.154 322.551 276.154 318.824 Q276.154 315.074 274.303 312.922 Q272.474 310.769 269.326 310.769 M278.608 296.116 L278.608 300.375 Q276.849 299.542 275.043 299.102 Q273.261 298.663 271.502 298.663 Q266.872 298.663 264.418 301.787 Q261.988 304.912 261.641 311.232 Q263.006 309.218 265.066 308.153 Q267.127 307.065 269.603 307.065 Q274.812 307.065 277.821 310.237 Q280.853 313.385 280.853 318.824 Q280.853 324.148 277.705 327.366 Q274.557 330.584 269.326 330.584 Q263.33 330.584 260.159 326 Q256.988 321.394 256.988 312.667 Q256.988 304.473 260.877 299.612 Q264.766 294.727 271.316 294.727 Q273.076 294.727 274.858 295.075 Q276.664 295.422 278.608 296.116 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M298.909 298.431 Q295.298 298.431 293.469 301.996 Q291.664 305.537 291.664 312.667 Q291.664 319.774 293.469 323.338 Q295.298 326.88 298.909 326.88 Q302.543 326.88 304.349 323.338 Q306.177 319.774 306.177 312.667 Q306.177 305.537 304.349 301.996 Q302.543 298.431 298.909 298.431 M298.909 294.727 Q304.719 294.727 307.775 299.334 Q310.853 303.917 310.853 312.667 Q310.853 321.394 307.775 326 Q304.719 330.584 298.909 330.584 Q293.099 330.584 290.02 326 Q286.964 321.394 286.964 312.667 Q286.964 303.917 290.02 299.334 Q293.099 294.727 298.909 294.727 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip012)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1053.44 400.199,958.165 400.786,978 401.372,890.794 401.958,814.355 402.545,742.735 403.131,677.356 403.718,616.101 404.304,563.514 404.891,512.843 405.477,468.464 406.063,428.559 406.65,392.838 407.236,361.03 407.823,332.88 408.409,308.15 408.995,286.616 409.582,268.065 410.168,252.3 410.755,239.133 411.341,228.386 411.927,219.895 412.514,253.843 413.1,283.446 413.687,311.772 414.273,308.279 414.86,333.653 415.446,330.925 416.032,329.726 416.619,330.441 417.205,354.538 417.792,376.092 418.378,398.746 418.964,419.489 419.551,423.488 420.137,427.95 420.724,475.38 421.31,482.016 421.896,502.533 422.483,522.017 423.069,540.46 423.656,548.39 424.242,566.036 424.829,582.487 425.415,590.03 426.001,605.99 426.588,621.83 427.174,629.167 427.761,644.53 428.347,652.521 428.933,661.194 429.52,681.632 430.106,690.936 430.693,699.53 431.279,719.291 431.865,728.403 432.452,737.117 433.038,745.673 433.625,754.28 434.211,767.84 434.798,785.355 435.384,797.803 435.97,805.465 436.557,817.642 437.143,825.354 437.73,844.075 438.316,854.576 438.902,868.417 439.489,885.779 440.075,896.056 440.662,905.928 441.248,918.51 441.835,925.116 442.421,931.259 443.007,937.645 443.594,952.567 444.18,958.54 444.767,967.02 445.353,978.03 445.939,985.804 446.526,991.153 447.112,995.922 447.699,1001.06 448.285,1010.7 448.871,1017.79 449.458,1027.03 450.044,1035.89 450.631,1046.72 451.217,1050.73 451.804,1058.79 452.39,1062.59 452.976,1070.52 453.563,1078.12 454.149,1085.41 454.736,1094.39 455.322,1097.54 455.908,1106.4 456.495,1112.85 457.081,1117.35 457.668,1126.86 458.254,1129.34 458.84,1136.75 459.427,1137.36 460.013,1141.42 460.6,1143.77 461.186,1149.22 461.773,1156.12 462.359,1159.25 462.945,1163.63 463.532,1169.82 464.118,1170.92 464.705,1175.2 465.291,1179.4 465.877,1182.09 466.464,1187.48 467.05,1189.48 467.637,1195.99 468.223,1197.67 468.809,1197.96 469.396,1199.53 469.982,1208.27 470.569,1208.22 471.155,1208.47 471.742,1207.15 472.328,1208.83 472.914,1210.42 473.501,1211.86 474.087,1213.19 474.674,1213.36 475.26,1213.52 475.846,1217.84 476.433,1219.43 477.019,1222.08 477.606,1221.98 478.192,1224.49 478.778,1224.2 479.365,1225.42 479.951,1226.46 480.538,1225.25 481.124,1226.32 481.711,1227.39 482.297,1227.33 482.883,1227.27 483.47,1233.7 484.056,1232.03 484.643,1231.8 485.229,1231.42 485.815,1232.42 486.402,1232.27 486.988,1236.01 487.575,1236.88 488.161,1238.91 488.748,1241.36 489.334,1240.64 489.92,1240.06 490.507,1240.71 491.093,1240.19 491.68,1239.85 492.266,1239.18 492.852,1239.76 493.439,1239.38 494.025,1240.34 494.612,1242.38 495.198,1243.1 495.784,1242.28 496.371,1240.5 496.957,1237.54 497.544,1238.4 498.13,1239.37 498.717,1240.47 499.303,1241.33 499.889,1243.3 500.476,1242.88 501.062,1242.39 501.649,1241.6 502.235,1243.41 502.821,1242.92 503.408,1244.79 503.994,1247.73 504.581,1246.87 505.167,1247.3 505.753,1247.72 506.34,1246.93 506.926,1244.82 507.513,1246.55 508.099,1250.53 508.686,1248.44 509.272,1248.9 509.858,1246.86 510.445,1248.37 511.031,1248.64 511.618,1245.32 512.204,1244.37 512.79,1244.94 513.377,1242.91 513.963,1243.56 514.55,1244.35 515.136,1243.83 515.722,1244.51 516.309,1242.77 516.895,1243.67 517.482,1243.35 518.068,1244.35 518.655,1243.76 519.241,1244.13 519.827,1243.63 520.414,1242.93 521,1242.18 521.587,1244.07 522.173,1243.65 522.759,1241.94 523.346,1241.62 523.932,1241.15 524.519,1239.44 525.105,1238.98 525.691,1240.02 526.278,1240.72 526.864,1238.78 527.451,1242.01 528.037,1241.3 528.624,1240.74 529.21,1245.09 529.796,1245.38 530.383,1244.75 530.969,1245.2 531.556,1245.72 532.142,1245.29 532.728,1244.53 533.315,1237.87 533.901,1241 534.488,1242.71 535.074,1242.01 535.661,1241.55 536.247,1240.89 536.833,1240.34 537.42,1238.58 538.006,1239.24 538.593,1239.77 539.179,1239.31 539.765,1240.15 540.352,1241.93 540.938,1241.44 541.525,1240.66 542.111,1242.49 542.697,1244.21 543.284,1239.86 543.87,1239.48 544.457,1237.76 545.043,1238.37 545.63,1237.95 546.216,1236.29 546.802,1237.26 547.389,1236.69 547.975,1235.11 548.562,1235.77 549.148,1238 549.734,1237.5 550.321,1238.37 550.907,1237.94 551.494,1236.33 552.08,1237.39 552.666,1237.1 553.253,1236.66 553.839,1235.13 554.426,1234.93 555.012,1233.57 555.599,1232.28 556.185,1233.4 556.771,1230.99 557.358,1230.81 557.944,1231.05 558.531,1232.09 559.117,1230.81 559.703,1233.05 560.29,1235.12 560.876,1236.46 561.463,1234.94 562.049,1234.72 562.635,1234.4 563.222,1235.28 563.808,1235.84 564.395,1235.64 564.981,1234.15 565.568,1232.79 566.154,1233.21 566.74,1233.07 567.327,1232.91 567.913,1232.63 568.5,1232.11 569.086,1230.69 569.672,1230.34 570.259,1231.51 570.845,1232.41 571.432,1232.12 572.018,1231.85 572.605,1233.93 573.191,1233.52 573.777,1234.2 574.364,1234.87 574.95,1234.8 575.537,1234.38 576.123,1235.35 576.709,1236.01 577.296,1236.9 577.882,1238.54 578.469,1237.94 579.055,1239.82 579.641,1239.14 580.228,1238.18 580.814,1238.63 581.401,1237.89 581.987,1236.88 582.574,1237.55 583.16,1235.88 583.746,1236.48 584.333,1238.27 584.919,1238.64 585.506,1237.99 586.092,1237.3 586.678,1236.78 587.265,1237.2 587.851,1234.15 588.438,1234.72 589.024,1233.16 589.61,1236.26 590.197,1237.84 590.783,1238.82 591.37,1237.98 591.956,1236.26 592.543,1234.48 593.129,1237.51 593.715,1235.4 594.302,1234.75 594.888,1232.88 595.475,1232.57 596.061,1232.15 596.647,1233.08 597.234,1231.34 597.82,1231 598.407,1229.4 598.993,1229.11 599.579,1228.78 600.166,1228.76 600.752,1227.6 601.339,1226.31 601.925,1229.95 602.512,1228.59 603.098,1228.37 603.684,1228.2 604.271,1225.26 604.857,1226.42 605.444,1226.34 606.03,1228.59 606.616,1228.51 607.203,1228.32 607.789,1226.85 608.376,1227.85 608.962,1225.5 609.548,1227.87 610.135,1230.18 610.721,1230.83 611.308,1231.54 611.894,1230.98 612.481,1228.34 613.067,1226.86 613.653,1228.96 614.24,1229.68 614.826,1230.61 615.413,1231.34 615.999,1227.38 616.585,1229.3 617.172,1228.83 617.758,1228.32 618.345,1228.28 618.931,1227.8 619.518,1225.08 620.104,1222.66 620.69,1222.75 621.277,1221.73 621.863,1222.91 622.45,1223.95 623.036,1223.72 623.622,1224.79 624.209,1223.47 624.795,1224.58 625.382,1227.76 625.968,1227.6 626.554,1227.27 627.141,1226.97 627.727,1227.97 628.314,1227.62 628.9,1227.35 629.487,1226.85 630.073,1227.75 630.659,1226.26 631.246,1231.76 631.832,1230.4 632.419,1230.07 633.005,1228.63 633.591,1228.24 634.178,1226.81 634.764,1226.81 635.351,1226.41 635.937,1224.98 636.523,1227.09 637.11,1226.79 637.696,1228.76 638.283,1228.26 638.869,1230.26 639.456,1225.16 640.042,1222.69 640.628,1223.64 641.215,1225.64 641.801,1226.61 642.388,1226.19 642.974,1223.77 643.56,1222.15 644.147,1223.09 644.733,1225.27 645.32,1223.88 645.906,1222.48 646.492,1224.8 647.079,1228.23 647.665,1227.89 648.252,1228.64 648.838,1223.69 649.425,1225.88 650.011,1226.97 650.597,1226.77 651.184,1227.63 651.77,1226.23 652.357,1228.4 652.943,1224.52 653.529,1227.44 654.116,1229.27 654.702,1229.92 655.289,1228.48 655.875,1228.11 656.462,1227.91 657.048,1225.28 657.634,1222.72 658.221,1222.7 658.807,1223.84 659.394,1222.42 659.98,1222.47 660.566,1224.81 661.153,1224.42 661.739,1227.54 662.326,1223.56 662.912,1223.09 663.498,1224.16 664.085,1225.19 664.671,1224.85 665.258,1224.43 665.844,1222.73 666.431,1221.16 667.017,1219.7 667.603,1219.77 668.19,1220.67 668.776,1222.83 669.363,1223.87 669.949,1222.52 670.535,1221.11 671.122,1219.88 671.708,1221.2 672.295,1221.3 672.881,1221.37 673.467,1219.13 674.054,1218.01 674.64,1216.83 675.227,1213.48 675.813,1213.97 676.4,1210.9 676.986,1216.07 677.572,1217.41 678.159,1218.62 678.745,1218.69 679.332,1221.05 679.918,1218.61 680.504,1216.27 681.091,1214.13 681.677,1214.36 682.264,1215.98 682.85,1214.15 683.436,1215.57 684.023,1214.47 684.609,1215.82 685.196,1213.62 685.782,1212.86 686.369,1212.31 686.955,1212.81 687.541,1214.37 688.128,1215.83 688.714,1216.18 689.301,1216.38 689.887,1216.78 690.473,1215.83 691.06,1215.76 691.646,1214.66 692.233,1215.04 692.819,1215.35 693.405,1217.71 693.992,1215.63 694.578,1215.67 695.165,1218.02 695.751,1219.21 696.338,1219.15 696.924,1219.12 697.51,1219.04 698.097,1220.32 698.683,1222.59 699.27,1223.54 699.856,1223.3 700.442,1225.37 701.029,1221.81 701.615,1222.66 702.202,1223.63 702.788,1224.36 703.375,1222.84 703.961,1221.55 704.547,1221.53 705.134,1221.13 705.72,1222.13 706.307,1221.91 706.893,1221.75 707.479,1219.24 708.066,1220.52 708.652,1219.2 709.239,1219.27 709.825,1219.2 710.411,1220.2 710.998,1222.31 711.584,1222.08 712.171,1218.37 712.757,1218.55 713.344,1220.84 713.93,1219.59 714.516,1219.46 715.103,1220.7 715.689,1221.68 716.276,1222.88 716.862,1221.43 717.448,1221.24 718.035,1219.82 718.621,1219.64 719.208,1217.53 719.794,1219.98 720.38,1222.25 720.967,1220.87 721.553,1218.63 722.14,1220.91 722.726,1220.82 723.313,1219.51 723.899,1218.28 724.485,1214.81 725.072,1217.29 725.658,1217.46 726.245,1217.58 726.831,1219.97 727.417,1220.03 728.004,1221.22 728.59,1220.13 729.177,1220.07 729.763,1219.97 730.349,1219.9 730.936,1217.29 731.522,1219.67 732.109,1222.14 732.695,1223.17 733.282,1222.93 733.868,1223.82 734.454,1223.45 735.041,1221.84 735.627,1221.79 736.214,1222.4 736.8,1223.17 737.386,1224.03 737.973,1224.72 738.559,1226.5 739.146,1226.16 739.732,1225.61 740.318,1226.23 740.905,1225.67 741.491,1223.99 742.078,1226.96 742.664,1226.52 743.251,1225.06 743.837,1225.53 744.423,1225.21 745.01,1223.82 745.596,1224.69 746.183,1224.2 746.769,1222.74 747.355,1220.41 747.942,1215.85 748.528,1215.92 749.115,1214.79 749.701,1212.6 750.288,1214.06 750.874,1213.16 751.46,1213.54 752.047,1213.84 752.633,1212.84 753.22,1213.2 753.806,1214.58 754.392,1217.2 754.979,1215.89 755.565,1217.24 756.152,1217.07 756.738,1215.98 757.324,1216.06 757.911,1216.12 758.497,1215.03 759.084,1215.08 759.67,1211.66 760.257,1213.15 760.843,1211.35 761.429,1211.66 762.016,1212.74 762.602,1213.15 763.189,1211.07 763.775,1210.45 764.361,1210.64 764.948,1209.72 765.534,1209.95 766.121,1209.28 766.707,1209.69 767.293,1211.33 767.88,1214.84 768.466,1214.83 769.053,1217.41 769.639,1217.34 770.226,1218.29 770.812,1214.75 771.398,1214.95 771.985,1216.08 772.571,1217.17 773.158,1217.11 773.744,1214.78 774.33,1216.24 774.917,1216.28 775.503,1219.99 776.09,1219.67 776.676,1220.49 777.262,1219.09 777.849,1218.53 778.435,1220.7 779.022,1218.1 779.608,1217.94 780.195,1219.04 780.781,1218.65 781.367,1218.58 781.954,1218.59 782.54,1220.93 783.127,1222.94 783.713,1224.9 784.299,1224.57 784.886,1223.26 785.472,1222.75 786.059,1222.52 786.645,1222.13 787.232,1222.89 787.818,1222.58 788.404,1222 788.991,1222.79 789.577,1222.4 790.164,1219.76 790.75,1225.1 791.336,1222.34 791.923,1221.94 792.509,1222.88 793.096,1223.49 793.682,1224.19 794.268,1223.74 794.855,1222.28 795.441,1222.9 796.028,1227.08 796.614,1225.31 797.201,1227.09 797.787,1228.85 798.373,1229.62 798.96,1227.98 799.546,1227.36 800.133,1227.96 800.719,1227.28 801.305,1224.39 801.892,1225.1 802.478,1223.72 803.065,1225.61 803.651,1225.08 804.237,1223.66 804.824,1223.22 805.41,1225.14 805.997,1223.4 806.583,1222.72 807.17,1223.3 807.756,1220.45 808.342,1220.29 808.929,1219.7 809.515,1219.55 810.102,1219.46 810.688,1218.12 811.274,1218.99 811.861,1218.67 812.447,1218.41 813.034,1219.22 813.62,1219.06 814.206,1220.88 814.793,1222.79 815.379,1223.54 815.966,1223.19 816.552,1222.91 817.139,1222.61 817.725,1219.98 818.311,1217.37 818.898,1216.12 819.484,1216.17 820.071,1213.77 820.657,1213.81 821.243,1210.39 821.83,1207.5 822.416,1210.35 823.003,1208.1 823.589,1209.58 824.175,1210.02 824.762,1209.25 825.348,1210.86 825.935,1214.64 826.521,1214.67 827.108,1216.01 827.694,1216.2 828.28,1215.23 828.867,1214.09 829.453,1214.05 830.04,1214.28 830.626,1213.17 831.212,1214.46 831.799,1211.05 832.385,1210.31 832.972,1212.93 833.558,1211.91 834.145,1212.29 834.731,1211.64 835.317,1212.96 835.904,1214.38 836.49,1213.28 837.077,1212.14 837.663,1212.28 838.249,1212.72 838.836,1212.67 839.422,1212.91 840.009,1214.44 840.595,1213.32 841.181,1213.37 841.768,1212.46 842.354,1212.76 842.941,1215.17 843.527,1216.32 844.114,1218.54 844.7,1219.47 845.286,1218.17 845.873,1216.89 846.459,1214.78 847.046,1214.63 847.632,1212.36 848.218,1212.43 848.805,1212.71 849.391,1214.24 849.978,1213.3 850.564,1212.32 851.15,1211.29 851.737,1212.45 852.323,1212.68 852.91,1213 853.496,1211.82 854.083,1212.06 854.669,1213.58 855.255,1214.94 855.842,1214 856.428,1211.82 857.015,1209.77 857.601,1208.93 858.187,1209.51 858.774,1210.05 859.36,1209.21 859.947,1209.76 860.533,1213.46 861.119,1214.98 861.706,1213.92 862.292,1212.79 862.879,1211.71 863.465,1211.93 864.052,1212.24 864.638,1212.27 865.224,1212.21 865.811,1213.54 866.397,1216.97 866.984,1213.41 867.57,1212.23 868.156,1212.24 868.743,1214.72 869.329,1214.59 869.916,1212.19 870.502,1211.35 871.089,1213.83 871.675,1214.92 872.261,1213.76 872.848,1212.91 873.434,1214.04 874.021,1212.88 874.607,1213.99 875.193,1214.41 875.78,1214.36 876.366,1214.43 876.953,1215.88 877.539,1213.5 878.125,1213.67 878.712,1213.97 879.298,1212.92 879.885,1212.93 880.471,1215.27 881.058,1213.88 881.644,1212.9 882.23,1211.05 882.817,1211.19 883.403,1212.34 883.99,1213.66 884.576,1213.98 885.162,1211.83 885.749,1213.25 886.335,1215.71 886.922,1215.63 887.508,1214.34 888.094,1214.42 888.681,1214.35 889.267,1217.49 889.854,1219.75 890.44,1218.48 891.027,1219.32 891.613,1222.54 892.199,1223.27 892.786,1222.82 893.372,1223.56 893.959,1222.22 894.545,1223.04 895.131,1221.58 895.718,1221.25 896.304,1220.76 896.891,1224.07 897.477,1224.76 898.063,1222.9 898.65,1225.87 899.236,1224.26 899.823,1223.74 900.409,1225.52 900.996,1223.7 901.582,1222.16 902.168,1217.31 902.755,1219.45 903.341,1215.75 903.928,1216.68 904.514,1215.25 905.1,1216.04 905.687,1216.16 906.273,1211.46 906.86,1212.93 907.446,1211.82 908.032,1210.75 908.619,1210.76 909.205,1211.02 909.792,1209.95 910.378,1210.21 910.965,1209.49 911.551,1210.95 912.137,1207.83 912.724,1207.27 913.31,1208.91 913.897,1210.48 914.483,1211.85 915.069,1210.64 915.656,1212.07 916.242,1214.39 916.829,1214.31 917.415,1213.33 918.002,1214.37 918.588,1215.69 919.174,1219.12 919.761,1219.11 920.347,1217.73 920.934,1216.34 921.52,1214.82 922.106,1213.68 922.693,1216.11 923.279,1217.44 923.866,1219.49 924.452,1216.95 925.038,1214.56 925.625,1215.98 926.211,1217.18 926.798,1214.93 927.384,1214.05 927.971,1215.09 928.557,1215.28 929.143,1217.72 929.73,1219.87 930.316,1214.92 930.903,1218.5 931.489,1218.19 932.075,1218.24 932.662,1216.85 933.248,1216.78 933.835,1216.7 934.421,1216.59 935.007,1216.57 935.594,1216.38 936.18,1216.06 936.767,1216.02 937.353,1215.82 937.94,1216.75 938.526,1217.96 939.112,1217.87 939.699,1214.17 940.285,1213.92 940.872,1213.97 941.458,1215.06 942.044,1216.09 942.631,1216.13 943.217,1212.68 943.804,1212.75 944.39,1213.02 944.976,1213.3 945.563,1213.6 946.149,1211.12 946.736,1211.25 947.322,1212.66 947.909,1214.96 948.495,1215.88 949.081,1218.1 949.668,1220.11 950.254,1219.95 950.841,1217.12 951.427,1219.1 952.013,1216.67 952.6,1213.22 953.186,1211.09 953.773,1209.15 954.359,1210.27 954.945,1210.52 955.532,1209.69 956.118,1209.79 956.705,1209.03 957.291,1210.59 957.878,1210.85 958.464,1213.22 959.05,1213.29 959.637,1212.39 960.223,1213.76 960.81,1215.03 961.396,1216.22 961.982,1215.2 962.569,1215.05 963.155,1215.03 963.742,1217.34 964.328,1218.46 964.915,1215.97 965.501,1216.01 966.087,1215.91 966.674,1215.84 967.26,1217.83 967.847,1218.81 968.433,1221.92 969.019,1221.47 969.606,1221.16 970.192,1219.72 970.779,1219.51 971.365,1217.96 971.951,1216.93 972.538,1217.03 973.124,1215.69 973.711,1217.76 974.297,1216.4 974.884,1216.48 975.47,1216.71 976.056,1218.84 976.643,1218.61 977.229,1218.47 977.816,1218.47 978.402,1219.45 978.988,1218.21 979.575,1216.83 980.161,1215.68 980.748,1214.45 981.334,1213.16 981.92,1213.08 982.507,1210.94 983.093,1210.87 983.68,1211.98 984.266,1212.38 984.853,1212.58 985.439,1212.69 986.025,1211.6 986.612,1210.63 987.198,1213.11 987.785,1212.13 988.371,1212.19 988.957,1214.67 989.544,1214.61 990.13,1214.77 990.717,1212.48 991.303,1213.93 991.889,1213.77 992.476,1213.94 993.062,1214.92 993.649,1215.99 994.235,1214.65 994.822,1215.83 995.408,1215.58 995.994,1214.56 996.581,1215.74 997.167,1217.03 997.754,1219.29 998.34,1219.05 998.926,1218.92 999.513,1218.84 1000.1,1219.9 1000.69,1217.16 1001.27,1217.96 1001.86,1216.44 1002.44,1216.25 1003.03,1216.17 1003.62,1214.9 1004.2,1217.22 1004.79,1219.47 1005.38,1219.18 1005.96,1218.02 1006.55,1219.01 1007.14,1219.97 1007.72,1219.71 1008.31,1218.42 1008.9,1218.14 1009.48,1219.03 1010.07,1218.64 1010.65,1218.58 1011.24,1216.02 1011.83,1215.75 1012.41,1214.38 1013,1212.07 1013.59,1213.4 1014.17,1213.4 1014.76,1214.53 1015.35,1214.63 1015.93,1214.77 1016.52,1214.66 1017.11,1212.52 1017.69,1216.15 1018.28,1215.86 1018.86,1217.12 1019.45,1215.88 1020.04,1214.56 1020.62,1213.56 1021.21,1212.3 1021.8,1212.39 1022.38,1213.83 1022.97,1214.07 1023.56,1210.79 1024.14,1212.17 1024.73,1210 1025.32,1209.06 1025.9,1208.18 1026.49,1209.68 1027.07,1209.96 1027.66,1210.21 1028.25,1210.27 1028.83,1210.21 1029.42,1210.41 1030.01,1211.34 1030.59,1211.38 1031.18,1212.69 1031.77,1210.5 1032.35,1207.12 1032.94,1205.02 1033.52,1204.14 1034.11,1205.81 1034.7,1207.37 1035.28,1207.6 1035.87,1209.11 1036.46,1209.58 1037.04,1211.07 1037.63,1210.27 1038.22,1208.47 1038.8,1210.03 1039.39,1208.97 1039.98,1209.31 1040.56,1209.74 1041.15,1211.11 1041.73,1210.12 1042.32,1211.32 1042.91,1209.11 1043.49,1209.54 1044.08,1212.12 1044.67,1212.27 1045.25,1212.4 1045.84,1212.42 1046.43,1211.44 1047.01,1212.73 1047.6,1212.77 1048.19,1215.08 1048.77,1215.27 1049.36,1215.33 1049.94,1215.26 1050.53,1218.54 1051.12,1218.17 1051.7,1219.03 1052.29,1219.88 1052.88,1218.37 1053.46,1218.24 1054.05,1221.53 1054.64,1225.67 1055.22,1222.89 1055.81,1221.29 1056.39,1217.28 1056.98,1216.14 1057.57,1217.29 1058.15,1216.15 1058.74,1217.17 1059.33,1215.89 1059.91,1215.81 1060.5,1214.68 1061.09,1214.82 1061.67,1213.71 1062.26,1212.6 1062.85,1213.94 1063.43,1210.57 1064.02,1211.81 1064.6,1212.19 1065.19,1212.38 1065.78,1212.38 1066.36,1217.03 1066.95,1214.66 1067.54,1215.92 1068.12,1215.86 1068.71,1213.64 1069.3,1212.47 1069.88,1212.37 1070.47,1212.31 1071.06,1214.62 1071.64,1213.33 1072.23,1211.04 1072.81,1210.34 1073.4,1211.54 1073.99,1210.61 1074.57,1210.84 1075.16,1208.77 1075.75,1207.89 1076.33,1208.39 1076.92,1208.61 1077.51,1211 1078.09,1211.07 1078.68,1211.34 1079.26,1211.49 1079.85,1212.54 1080.44,1212.78 1081.02,1215.24 1081.61,1216.58 1082.2,1216.35 1082.78,1216.21 1083.37,1217.03 1083.96,1216.86 1084.54,1216.63 1085.13,1219.12 1085.72,1220.02 1086.3,1220.91 1086.89,1220.61 1087.47,1222.36 1088.06,1221.86 1088.65,1220.44 1089.23,1221.47 1089.82,1219.35 1090.41,1218.96 1090.99,1219.89 1091.58,1220.87 1092.17,1221.7 1092.75,1222.54 1093.34,1222.27 1093.93,1221.75 1094.51,1224.84 1095.1,1225.45 1095.68,1225.61 1096.27,1224.89 1096.86,1223.03 1097.44,1221.17 1098.03,1223.08 1098.62,1224.72 1099.2,1220.63 1099.79,1220.35 1100.38,1217.65 1100.96,1216.34 1101.55,1216.27 1102.14,1216.22 1102.72,1214.88 1103.31,1215.85 1103.89,1214.49 1104.48,1213.4 1105.07,1213.27 1105.65,1213.13 1106.24,1211.75 1106.83,1213.12 1107.41,1212.05 1108,1212.22 1108.59,1212.59 1109.17,1211.35 1109.76,1212.57 1110.34,1212.66 1110.93,1214.96 1111.52,1215.95 1112.1,1217.08 1112.69,1219.2 1113.28,1216.6 1113.86,1214.15 1114.45,1211.7 1115.04,1210.52 1115.62,1209.8 1116.21,1211.39 1116.8,1213.82 1117.38,1213.73 1117.97,1214.73 1118.55,1216.9 1119.14,1219.24 1119.73,1217.69 1120.31,1218.52 1120.9,1220.67 1121.49,1219.11 1122.07,1216.59 1122.66,1217.43 1123.25,1219.37 1123.83,1217.99 1124.42,1216.78 1125.01,1214.29 1125.59,1212.32 1126.18,1212.2 1126.76,1214.7 1127.35,1213.7 1127.94,1212.6 1128.52,1211.49 1129.11,1209.24 1129.7,1209.36 1130.28,1209.59 1130.87,1211.11 1131.46,1212.43 1132.04,1211.37 1132.63,1216.1 1133.21,1214.61 1133.8,1213.43 1134.39,1213.26 1134.97,1214.38 1135.56,1213.18 1136.15,1211.89 1136.73,1213.2 1137.32,1210.94 1137.91,1212.03 1138.49,1213.44 1139.08,1212.16 1139.67,1213.14 1140.25,1213.19 1140.84,1213.48 1141.42,1213.69 1142.01,1213.75 1142.6,1216.31 1143.18,1217.11 1143.77,1218.1 1144.36,1215.56 1144.94,1213.23 1145.53,1210.96 1146.12,1208.75 1146.7,1211.47 1147.29,1214.62 1147.88,1215.69 1148.46,1216.86 1149.05,1215.56 1149.63,1215.48 1150.22,1215.36 1150.81,1212.02 1151.39,1215.45 1151.98,1214.16 1152.57,1214.13 1153.15,1211.62 1153.74,1210.8 1154.33,1209.88 1154.91,1211.25 1155.5,1208.85 1156.09,1207.86 1156.67,1205.95 1157.26,1207.66 1157.84,1209.28 1158.43,1208.49 1159.02,1208.67 1159.6,1208.91 1160.19,1209 1160.78,1208.26 1161.36,1208.7 1161.95,1207.67 1162.54,1208.26 1163.12,1209.89 1163.71,1210.03 1164.29,1209.95 1164.88,1211.36 1165.47,1206.87 1166.05,1208.18 1166.64,1209.82 1167.23,1211.13 1167.81,1212.5 1168.4,1212.66 1168.99,1213.85 1169.57,1215.01 1170.16,1213.95 1170.75,1212.73 1171.33,1210.82 1171.92,1209.04 1172.5,1209.17 1173.09,1210.92 1173.68,1211.06 1174.26,1209.9 1174.85,1210.18 1175.44,1211.63 1176.02,1211.6 1176.61,1211.73 1177.2,1213.27 1177.78,1213.18 1178.37,1213.45 1178.96,1213.65 1179.54,1212.62 1180.13,1215.06 1180.71,1215 1181.3,1212.67 1181.89,1212.68 1182.47,1211.68 1183.06,1211.81 1183.65,1213.14 1184.23,1210.89 1184.82,1211.1 1185.41,1213.53 1185.99,1212.68 1186.58,1214.95 1187.16,1213.49 1187.75,1213.5 1188.34,1215.87 1188.92,1214.68 1189.51,1214.77 1190.1,1214.75 1190.68,1215.83 1191.27,1214.45 1191.86,1218.96 1192.44,1218.71 1193.03,1216.22 1193.62,1215.79 1194.2,1215.6 1194.79,1214.39 1195.37,1216.4 1195.96,1215.37 1196.55,1214.11 1197.13,1211.79 1197.72,1213.15 1198.31,1214.29 1198.89,1211.89 1199.48,1212.26 1200.07,1213.47 1200.65,1212.56 1201.24,1215.07 1201.83,1214.86 1202.41,1215.91 1203,1216.83 1203.58,1215.48 1204.17,1215.45 1204.76,1216.31 1205.34,1216.11 1205.93,1218.23 1206.52,1214.63 1207.1,1215.92 1207.69,1215.73 1208.28,1217 1208.86,1219.16 1209.45,1220.16 1210.03,1220.57 1210.62,1219.11 1211.21,1218.91 1211.79,1221.92 1212.38,1221.56 1212.97,1221.35 1213.55,1222.22 1214.14,1221.7 1214.73,1217.6 1215.31,1218.4 1215.9,1218.04 1216.49,1215.69 1217.07,1213.15 1217.66,1213.25 1218.24,1213.22 1218.83,1212.06 1219.42,1211.04 1220,1211.59 1220.59,1214.07 1221.18,1215.44 1221.76,1217.72 1222.35,1219.76 1222.94,1220.33 1223.52,1218.7 1224.11,1219.43 1224.7,1219.15 1225.28,1221.07 1225.87,1222.01 1226.45,1222.66 1227.04,1224.62 1227.63,1220.6 1228.21,1221.41 1228.8,1220.88 1229.39,1220.3 1229.97,1218.71 1230.56,1218.35 1231.15,1219.33 1231.73,1219 1232.32,1218.99 1232.91,1219.67 1233.49,1219.31 1234.08,1219.04 1234.66,1218.61 1235.25,1215.98 1235.84,1215.92 1236.42,1215.8 1237.01,1216.86 1237.6,1212.1 1238.18,1209.97 1238.77,1211.23 1239.36,1211.33 1239.94,1210.28 1240.53,1211.58 1241.11,1211.66 1241.7,1212.85 1242.29,1215.14 1242.87,1212.75 1243.46,1212.86 1244.05,1215.32 1244.63,1214.05 1245.22,1214.15 1245.81,1215.26 1246.39,1215.03 1246.98,1213.9 1247.57,1215.92 1248.15,1217.01 1248.74,1213.49 1249.32,1213.69 1249.91,1214.85 1250.5,1213.6 1251.08,1211.14 1251.67,1211.59 1252.26,1212.64 1252.84,1213.89 1253.43,1215.16 1254.02,1215.29 1254.6,1214.31 1255.19,1212.14 1255.78,1215.63 1256.36,1216.37 1256.95,1214.9 1257.53,1214.81 1258.12,1214.72 1258.71,1215.78 1259.29,1214.61 1259.88,1215.95 1260.47,1215.94 1261.05,1215.76 1261.64,1215.56 1262.23,1215.37 1262.81,1215.22 1263.4,1213.05 1263.98,1215.48 1264.57,1215.51 1265.16,1213.36 1265.74,1213.56 1266.33,1215.74 1266.92,1214.35 1267.5,1215.38 1268.09,1215.23 1268.68,1214.02 1269.26,1212.71 1269.85,1211.36 1270.44,1211.4 1271.02,1210.33 1271.61,1212.55 1272.19,1211.49 1272.78,1211.53 1273.37,1211.57 1273.95,1210.74 1274.54,1210.67 1275.13,1210.87 1275.71,1208.89 1276.3,1209.32 1276.89,1210.58 1277.47,1209.57 1278.06,1209.87 1278.65,1211.42 1279.23,1212.83 1279.82,1212.98 1280.4,1214.17 1280.99,1211.89 1281.58,1215.34 1282.16,1214.17 1282.75,1215.36 1283.34,1215.13 1283.92,1215.05 1284.51,1216.36 1285.1,1212.85 1285.68,1215.44 1286.27,1214.13 1286.86,1215.15 1287.44,1212.95 1288.03,1212.87 1288.61,1211.85 1289.2,1212.98 1289.79,1210.66 1290.37,1209.73 1290.96,1210.04 1291.55,1211.43 1292.13,1212.52 1292.72,1212.75 1293.31,1211.47 1293.89,1211.54 1294.48,1209.11 1295.06,1210.23 1295.65,1210.46 1296.24,1210.46 1296.82,1210.78 1297.41,1208.72 1298,1206.79 1298.58,1207.23 1299.17,1208.54 1299.76,1211.06 1300.34,1211.06 1300.93,1211.07 1301.52,1211.24 1302.1,1209.36 1302.69,1215.55 1303.27,1214.53 1303.86,1216.96 1304.45,1218.18 1305.03,1216.78 1305.62,1216.43 1306.21,1216.27 1306.79,1215.97 1307.38,1219.37 1307.97,1219.09 1308.55,1217.91 1309.14,1216.58 1309.73,1215.4 1310.31,1216.44 1310.9,1215.16 1311.48,1216.21 1312.07,1217.23 1312.66,1213.91 1313.24,1213.83 1313.83,1214.71 1314.42,1214.7 1315,1216.86 1315.59,1216.75 1316.18,1215.46 1316.76,1216.31 1317.35,1217.23 1317.93,1218.27 1318.52,1219.42 1319.11,1220.36 1319.69,1219.73 1320.28,1217.14 1320.87,1217.05 1321.45,1220.17 1322.04,1219.81 1322.63,1219.49 1323.21,1221.51 1323.8,1219.99 1324.39,1218.98 1324.97,1218.62 1325.56,1219.49 1326.14,1220.12 1326.73,1219.78 1327.32,1219.19 1327.9,1220.02 1328.49,1223.14 1329.08,1221.31 1329.66,1221.76 1330.25,1221.33 1330.84,1220.87 1331.42,1220.51 1332.01,1219.06 1332.6,1221.08 1333.18,1221.94 1333.77,1220.21 1334.35,1218.72 1334.94,1218.4 1335.53,1218.02 1336.11,1217.61 1336.7,1217.38 1337.29,1216.09 1337.87,1214.95 1338.46,1214.75 1339.05,1214.52 1339.63,1212.29 1340.22,1213.43 1340.8,1211 1341.39,1209.04 1341.98,1210.44 1342.56,1211.64 1343.15,1213.91 1343.74,1213.87 1344.32,1210.59 1344.91,1212.04 1345.5,1211.91 1346.08,1211.91 1346.67,1211.83 1347.26,1211.94 1347.84,1212.09 1348.43,1209.82 1349.01,1209.97 1349.6,1211.37 1350.19,1211.49 1350.77,1209.54 1351.36,1209.71 1351.95,1211.05 1352.53,1211.02 1353.12,1210.15 1353.71,1211.63 1354.29,1210.72 1354.88,1211.88 1355.47,1209.63 1356.05,1211.05 1356.64,1211.08 1357.22,1214.5 1357.81,1213.36 1358.4,1211.25 1358.98,1209.24 1359.57,1209.57 1360.16,1210.91 1360.74,1208.91 1361.33,1207 1361.92,1206.4 1362.5,1206.77 1363.09,1207.1 1363.68,1210.79 1364.26,1208.58 1364.85,1206.91 1365.43,1206.32 1366.02,1206.72 1366.61,1206.08 1367.19,1207.8 1367.78,1208.05 1368.37,1210.67 1368.95,1214.27 1369.54,1215.5 1370.13,1214.24 1370.71,1215.48 1371.3,1214.54 1371.88,1214.55 1372.47,1213.42 1373.06,1214.56 1373.64,1216.79 1374.23,1216.46 1374.82,1215.07 1375.4,1216.06 1375.99,1218.21 1376.58,1217.93 1377.16,1217.92 1377.75,1216.67 1378.34,1215.15 1378.92,1215.14 1379.51,1215.24 1380.09,1213.88 1380.68,1213.77 1381.27,1213.86 1381.85,1213.98 1382.44,1213.8 1383.03,1212.32 1383.61,1212.32 1384.2,1211.34 1384.79,1212.75 1385.37,1210.4 1385.96,1208.33 1386.55,1207.61 1387.13,1205.5 1387.72,1203.57 1388.3,1205.29 1388.89,1207.98 1389.48,1208.63 1390.06,1207.8 1390.65,1207.02 1391.24,1206.25 1391.82,1205.42 1392.41,1205.83 1393,1207.47 1393.58,1205.4 1394.17,1206.12 1394.75,1206.66 1395.34,1208.33 1395.93,1209.76 1396.51,1209.82 1397.1,1210.04 1397.69,1210.23 1398.27,1209.51 1398.86,1209.57 1399.45,1210.85 1400.03,1214.51 1400.62,1215.66 1401.21,1216.62 1401.79,1217.71 1402.38,1216.45 1402.96,1219.73 1403.55,1219.61 1404.14,1217.23 1404.72,1219.28 1405.31,1218.71 1405.9,1216.21 1406.48,1215.01 1407.07,1215.05 1407.66,1214.96 1408.24,1214.89 1408.83,1213.57 1409.42,1213.52 1410,1213.5 1410.59,1213.33 1411.17,1212.22 1411.76,1213.33 1412.35,1213.46 1412.93,1215.86 1413.52,1215.56 1414.11,1216.23 1414.69,1214.88 1415.28,1214.85 1415.87,1214.87 1416.45,1214.93 1417.04,1212.38 1417.63,1211.26 1418.21,1212.52 1418.8,1212.55 1419.38,1211.48 1419.97,1210.46 1420.56,1209.45 1421.14,1211.93 1421.73,1211.81 1422.32,1212.07 1422.9,1213.15 1423.49,1214.26 1424.08,1216.15 1424.66,1213.71 1425.25,1212.59 1425.83,1212.74 1426.42,1210.24 1427.01,1213.72 1427.59,1214.86 1428.18,1215.8 1428.77,1216.71 1429.35,1213 1429.94,1211.76 1430.53,1209.69 1431.11,1212.08 1431.7,1212.1 1432.29,1211.21 1432.87,1212.55 1433.46,1213.7 1434.04,1213.83 1434.63,1214.93 1435.22,1214.89 1435.8,1218.28 1436.39,1218.1 1436.98,1216.82 1437.56,1215.45 1438.15,1212.92 1438.74,1216.11 1439.32,1218.3 1439.91,1214.75 1440.5,1214.78 1441.08,1212.65 1441.67,1211.54 1442.25,1209.26 1442.84,1209.53 1443.43,1207.36 1444.01,1209.98 1444.6,1209.09 1445.19,1210.52 1445.77,1209.4 1446.36,1208.79 1446.95,1209.01 1447.53,1209.32 1448.12,1211.7 1448.7,1214.18 1449.29,1212.91 1449.88,1214.03 1450.46,1212.9 1451.05,1217.49 1451.64,1214.99 1452.22,1214.76 1452.81,1213.64 1453.4,1213.64 1453.98,1213.59 1454.57,1212.38 1455.16,1212.65 1455.74,1209.25 1456.33,1211.74 1456.91,1210.64 1457.5,1210.83 1458.09,1211 1458.67,1208.59 1459.26,1207.96 1459.85,1208.1 1460.43,1208.42 1461.02,1209.75 1461.61,1210.02 1462.19,1211.57 1462.78,1211.67 1463.37,1209.46 1463.95,1207.35 1464.54,1207.74 1465.12,1207.98 1465.71,1209.4 1466.3,1210.75 1466.88,1210.92 1467.47,1210.04 1468.06,1211.5 1468.64,1210.47 1469.23,1209.44 1469.82,1208.57 1470.4,1208.74 1470.99,1211.34 1471.57,1211.46 1472.16,1210.65 1472.75,1210.91 1473.33,1212.24 1473.92,1213.69 1474.51,1210.49 1475.09,1210.74 1475.68,1210.94 1476.27,1210.17 1476.85,1210.23 1477.44,1209.26 1478.03,1210.72 1478.61,1209.64 1479.2,1209.95 1479.78,1211.5 1480.37,1211.64 1480.96,1211.83 1481.54,1211.85 1482.13,1212.04 1482.72,1213.06 1483.3,1213.16 1483.89,1211.81 1484.48,1211.92 1485.06,1213.06 1485.65,1214.25 1486.24,1214.33 1486.82,1214.52 1487.41,1213.29 1487.99,1211.2 1488.58,1211.52 1489.17,1212.9 1489.75,1213.96 1490.34,1213.97 1490.93,1212.98 1491.51,1216.22 1492.1,1215.03 1492.69,1218.4 1493.27,1215.96 1493.86,1216.04 1494.45,1217.21 1495.03,1218.39 1495.62,1218.11 1496.2,1218.97 1496.79,1218.52 1497.38,1220.63 1497.96,1218.16 1498.55,1217.85 1499.14,1217.72 1499.72,1218.63 1500.31,1218.43 1500.9,1218.27 1501.48,1218.93 1502.07,1216.17 1502.65,1216.05 1503.24,1217.06 1503.83,1217.02 1504.41,1218.12 1505,1217.75 1505.59,1215.3 1506.17,1216.3 1506.76,1213.89 1507.35,1214.93 1507.93,1215.96 1508.52,1213.53 1509.11,1216.72 1509.69,1216.7 1510.28,1215.56 1510.86,1213.19 1511.45,1215.63 1512.04,1216.86 1512.62,1220.04 1513.21,1220.7 1513.8,1222.65 1514.38,1222.07 1514.97,1221.65 1515.56,1219.06 1516.14,1215.04 1516.73,1218.22 1517.32,1216.78 1517.9,1217.65 1518.49,1218.83 1519.07,1219.84 1519.66,1218.31 1520.25,1217.06 1520.83,1215.44 1521.42,1215.3 1522.01,1214.16 1522.59,1212.97 1523.18,1212.99 1523.77,1210.58 1524.35,1211.89 1524.94,1213.21 1525.52,1212.04 1526.11,1217.89 1526.7,1218.84 1527.28,1218.42 1527.87,1218.21 1528.46,1215.97 1529.04,1213.5 1529.63,1213.47 1530.22,1208.84 1530.8,1211.24 1531.39,1211.46 1531.98,1209.59 1532.56,1208.55 1533.15,1207.85 1533.73,1212.47 1534.32,1211.4 1534.91,1212.66 1535.49,1212.68 1536.08,1210.24 1536.67,1212.5 1537.25,1214.88 1537.84,1215.02 1538.43,1214.87 1539.01,1213.74 1539.6,1214.92 1540.19,1215.91 1540.77,1215.95 1541.36,1215.88 1541.94,1215.79 1542.53,1219.05 1543.12,1216.31 1543.7,1217.61 1544.29,1218.66 1544.88,1218.45 1545.46,1219.29 1546.05,1217.81 1546.64,1218.56 1547.22,1219.4 1547.81,1221.45 1548.4,1224.59 1548.98,1221.96 1549.57,1221.54 1550.15,1221.29 1550.74,1220.87 1551.33,1221.49 1551.91,1223.35 1552.5,1221.43 1553.09,1221.33 1553.67,1220.74 1554.26,1221.67 1554.85,1220.13 1555.43,1220.96 1556.02,1220.45 1556.6,1217.8 1557.19,1215.36 1557.78,1215.06 1558.36,1211.31 1558.95,1210.42 1559.54,1208.36 1560.12,1208.75 1560.71,1209.12 1561.3,1210.38 1561.88,1210.38 1562.47,1210.42 1563.06,1212.78 1563.64,1209.49 1564.23,1209.65 1564.81,1212.17 1565.4,1213.44 1565.99,1212.31 1566.57,1212.53 1567.16,1216.09 1567.75,1215.69 1568.33,1215.53 1568.92,1213.21 1569.51,1213.05 1570.09,1209.84 1570.68,1210.38 1571.27,1210.64 1571.85,1211.95 1572.44,1210.93 1573.02,1209.93 1573.61,1211.01 1574.2,1212.4 1574.78,1212.42 1575.37,1208.83 1575.96,1209.08 1576.54,1209.47 1577.13,1208.58 1577.72,1207.64 1578.3,1209.07 1578.89,1211.33 1579.47,1211.45 1580.06,1210.18 1580.65,1211.45 1581.23,1210.7 1581.82,1213.15 1582.41,1214.42 1582.99,1214.16 1583.58,1214.16 1584.17,1215.38 1584.75,1215.08 1585.34,1216 1585.93,1216 1586.51,1213.58 1587.1,1213.48 1587.68,1214.51 1588.27,1216.33 1588.86,1211.67 1589.44,1213.99 1590.03,1214.02 1590.62,1212.86 1591.2,1211.69 1591.79,1210.93 1592.38,1211.09 1592.96,1210.2 1593.55,1210.3 1594.14,1211.78 1594.72,1210.64 1595.31,1208.67 1595.89,1210.18 1596.48,1210.47 1597.07,1210.71 1597.65,1208.68 1598.24,1209.09 1598.83,1210.64 1599.41,1211.88 1600,1214.21 1600.59,1213.02 1601.17,1214.47 1601.76,1214.57 1602.34,1214.66 1602.93,1216.8 1603.52,1215.56 1604.1,1216.43 1604.69,1213.94 1605.28,1213.81 1605.86,1216.19 1606.45,1218.29 1607.04,1217.06 1607.62,1215.78 1608.21,1216.81 1608.8,1216.74 1609.38,1216.65 1609.97,1215.18 1610.55,1215.08 1611.14,1216.16 1611.73,1214.9 1612.31,1215.72 1612.9,1213.13 1613.49,1213.53 1614.07,1214.93 1614.66,1214.74 1615.25,1216.12 1615.83,1216.19 1616.42,1215.99 1617.01,1215.68 1617.59,1214.2 1618.18,1215.35 1618.76,1211.81 1619.35,1215.34 1619.94,1213.74 1620.52,1212.59 1621.11,1212.51 1621.7,1211.2 1622.28,1211.19 1622.87,1212.42 1623.46,1213.59 1624.04,1213.59 1624.63,1215.86 1625.22,1217.07 1625.8,1215.9 1626.39,1217.02 1626.97,1216.78 1627.56,1217.76 1628.15,1216.39 1628.73,1216.4 1629.32,1217.5 1629.91,1217.41 1630.49,1217.45 1631.08,1218.37 1631.67,1216.75 1632.25,1216.57 1632.84,1216.44 1633.42,1216.23 1634.01,1216.13 1634.6,1213.86 1635.18,1212.85 1635.77,1212.76 1636.36,1215.03 1636.94,1216.12 1637.53,1215.97 1638.12,1216.83 1638.7,1215.61 1639.29,1215.44 1639.88,1216.74 1640.46,1216.65 1641.05,1217.45 1641.63,1217.3 1642.22,1217.23 1642.81,1217.13 1643.39,1218.11 1643.98,1220.11 1644.57,1221.8 1645.15,1217.81 1645.74,1216.47 1646.33,1216.46 1646.91,1213.89 1647.5,1212.91 1648.09,1211.81 1648.67,1212.21 1649.26,1213.57 1649.84,1213.73 1650.43,1213.81 1651.02,1213.74 1651.6,1213.75 1652.19,1215.97 1652.78,1215.62 1653.36,1218.92 1653.95,1217.29 1654.54,1218.32 1655.12,1218.18 1655.71,1217.99 1656.29,1215.63 1656.88,1216.74 1657.47,1216.54 1658.05,1216.49 1658.64,1215.04 1659.23,1213.75 1659.81,1212.51 1660.4,1210.29 1660.99,1210.64 1661.57,1209.69 1662.16,1209.82 1662.75,1209.04 1663.33,1208.11 1663.92,1208.29 1664.5,1209.65 1665.09,1208.43 1665.68,1207.55 1666.26,1209.02 1666.85,1209.16 1667.44,1209.26 1668.02,1207.44 1668.61,1207.68 1669.2,1207.86 1669.78,1205.83 1670.37,1206.31 1670.96,1208.83 1671.54,1210.23 1672.13,1211.49 1672.71,1212.8 1673.3,1213.91 1673.89,1216.43 1674.47,1218.75 1675.06,1218.49 1675.65,1218.17 1676.23,1219.15 1676.82,1219.93 1677.41,1219.63 1677.99,1218.19 1678.58,1217.14 1679.17,1213.35 1679.75,1216.89 1680.34,1215.74 1680.92,1213.49 1681.51,1215.58 1682.1,1215.59 1682.68,1215.55 1683.27,1215.41 1683.86,1215.53 1684.44,1211.03 1685.03,1212.26 1685.62,1211.27 1686.2,1212.73 1686.79,1215.16 1687.37,1212.85 1687.96,1212.8 1688.55,1211.53 1689.13,1209.4 1689.72,1210.72 1690.31,1207.78 1690.89,1208.28 1691.48,1208.65 1692.07,1209.18 1692.65,1209.57 1693.24,1209.79 1693.83,1208.77 1694.41,1211.37 1695,1212.61 1695.58,1210.28 1696.17,1210.6 1696.76,1210.78 1697.34,1212.02 1697.93,1212.22 1698.52,1208.71 1699.1,1206.66 1699.69,1205.86 1700.28,1207.57 1700.86,1206.86 1701.45,1203.54 1702.04,1204.33 1702.62,1203.9 1703.21,1204.19 1703.79,1203.37 1704.38,1203.97 1704.97,1204.42 1705.55,1206.11 1706.14,1207.6 1706.73,1208.1 1707.31,1206.34 1707.9,1206.7 1708.49,1206.79 1709.07,1208.35 1709.66,1211.2 1710.24,1210.32 1710.83,1209.38 1711.42,1206.14 1712,1206.72 1712.59,1207.3 1713.18,1207.88 1713.76,1206.95 1714.35,1207.2 1714.94,1207.49 1715.52,1206.96 1716.11,1204.01 1716.7,1205.92 1717.28,1206.38 1717.87,1210.5 1718.45,1211.64 1719.04,1216.5 1719.63,1215.23 1720.21,1212.78 1720.8,1211.54 1721.39,1212.8 1721.97,1211.76 1722.56,1213.13 1723.15,1212.98 1723.73,1212.1 1724.32,1212.45 1724.91,1215.05 1725.49,1217.44 1726.08,1219.79 1726.66,1220.46 1727.25,1220.15 1727.84,1219.68 1728.42,1217.96 1729.01,1216.58 1729.6,1215.33 1730.18,1215 1730.77,1214.95 1731.36,1213.57 1731.94,1215.68 1732.53,1216.55 1733.11,1215.46 1733.7,1214.06 1734.29,1214.11 1734.87,1215.16 1735.46,1217.69 1736.05,1218.38 1736.63,1217.04 1737.22,1216.71 1737.81,1217.73 1738.39,1219.87 1738.98,1220.89 1739.57,1219.24 1740.15,1217.68 1740.74,1217.37 1741.32,1218.45 1741.91,1219.58 1742.5,1213.51 1743.08,1212.41 1743.67,1212.59 1744.26,1212.55 1744.84,1213.83 1745.43,1212.55 1746.02,1212.51 1746.6,1212.7 1747.19,1216.39 1747.78,1217.52 1748.36,1218.35 1748.95,1218.1 1749.53,1217.86 1750.12,1217.28 1750.71,1215.67 1751.29,1214.17 1751.88,1214.1 1752.47,1212.87 1753.05,1216.38 1753.64,1213.93 1754.23,1213.72 1754.81,1212.61 1755.4,1213.7 1755.99,1214.95 1756.57,1215.18 1757.16,1215.21 1757.74,1216.07 1758.33,1215.59 1758.92,1214.15 1759.5,1213.36 1760.09,1213.25 1760.68,1213.45 1761.26,1209.84 1761.85,1210.03 1762.44,1210.04 1763.02,1209.94 1763.61,1210.15 1764.19,1213.73 1764.78,1213.57 1765.37,1213.45 1765.95,1213.36 1766.54,1213.44 1767.13,1212.21 1767.71,1210.16 1768.3,1209.37 1768.89,1209.78 1769.47,1208.81 1770.06,1211.26 1770.65,1211.38 1771.23,1213.81 1771.82,1214.89 1772.4,1214.93 1772.99,1213.82 1773.58,1213.56 1774.16,1214.53 1774.75,1214.45 1775.34,1215.5 1775.92,1216.53 1776.51,1217.64 1777.1,1218.77 1777.68,1219.69 1778.27,1219.02 1778.86,1217.72 1779.44,1215.13 1780.03,1212.58 1780.61,1213.93 1781.2,1212.61 1781.79,1212.38 1782.37,1209.98 1782.96,1211.33 1783.55,1212.78 1784.13,1215.15 1784.72,1217.27 1785.31,1217.11 1785.89,1218.07 1786.48,1219.02 1787.06,1219.95 1787.65,1220.89 1788.24,1219.53 1788.82,1219.17 1789.41,1217.69 1790,1215 1790.58,1216.23 1791.17,1213.67 1791.76,1210.31 1792.34,1211.78 1792.93,1213.13 1793.52,1213.14 1794.1,1213.15 1794.69,1215.29 1795.27,1217.79 1795.86,1216.67 1796.45,1215.55 1797.03,1215.31 1797.62,1215.13 1798.21,1214.1 1798.79,1212.66 1799.38,1212.57 1799.97,1213.86 1800.55,1213.86 1801.14,1215.08 1801.73,1215.11 1802.31,1216.09 1802.9,1213.79 1803.48,1215.08 1804.07,1213.99 1804.66,1215.26 1805.24,1216.27 1805.83,1216.22 1806.42,1214.77 1807,1216.09 1807.59,1214.68 1808.18,1211.41 1808.76,1212.8 1809.35,1212.84 1809.94,1209.53 1810.52,1209.71 1811.11,1208.86 1811.69,1206.73 1812.28,1207.08 1812.87,1208.29 1813.45,1209.63 1814.04,1209.93 1814.63,1210.21 1815.21,1211.65 1815.8,1210.72 1816.39,1210.79 1816.97,1209.97 1817.56,1208.88 1818.14,1206.88 1818.73,1207.14 1819.32,1206.31 1819.9,1206.85 1820.49,1207.35 1821.08,1207.54 1821.66,1205.59 1822.25,1209.39 1822.84,1208.42 1823.42,1210.06 1824.01,1211.3 1824.6,1213.65 1825.18,1213.72 1825.77,1212.56 1826.35,1213.56 1826.94,1214.84 1827.53,1213.61 1828.11,1212.43 1828.7,1216.05 1829.29,1217.95 1829.87,1221.24 1830.46,1219.72 1831.05,1219.46 1831.63,1220.27 1832.22,1218.87 1832.81,1224.53 1833.39,1221.58 1833.98,1222.34 1834.56,1218.6 1835.15,1218.47 1835.74,1216.09 1836.32,1214.83 1836.91,1214.79 1837.5,1215.97 1838.08,1215.83 1838.67,1215.82 1839.26,1218.12 1839.84,1215.49 1840.43,1213.37 1841.01,1211.21 1841.6,1211.62 1842.19,1215.11 1842.77,1213.87 1843.36,1211.63 1843.95,1210.61 1844.53,1210.9 1845.12,1209.7 1845.71,1209.96 1846.29,1211.07 1846.88,1210.12 1847.47,1210.3 1848.05,1210.46 1848.64,1208.18 1849.22,1208.54 1849.81,1208.94 1850.4,1208.13 1850.98,1208.62 1851.57,1208.76 1852.16,1208.73 1852.74,1210.05 1853.33,1210.21 1853.92,1210.68 1854.5,1209.52 1855.09,1209.73 1855.68,1207.46 1856.26,1210.1 1856.85,1212.68 1857.43,1211.41 1858.02,1212.69 1858.61,1211.47 1859.19,1214.03 1859.78,1216.34 1860.37,1216.39 1860.95,1214.99 1861.54,1214.88 1862.13,1215.94 1862.71,1219.2 1863.3,1222.19 1863.88,1221.79 1864.47,1222.39 1865.06,1219.62 1865.64,1218.16 1866.23,1217.73 1866.82,1219.9 1867.4,1220.51 1867.99,1217.72 1868.58,1216.4 1869.16,1218.5 1869.75,1219.38 1870.34,1218.87 1870.92,1218.5 1871.51,1220.89 1872.09,1219.66 1872.68,1218.16 1873.27,1216.53 1873.85,1217.74 1874.44,1216.55 1875.03,1217.63 1875.61,1216.29 1876.2,1216.24 1876.79,1217.27 1877.37,1218.04 1877.96,1214.78 1878.55,1214.58 1879.13,1211.34 1879.72,1210.32 1880.3,1209.29 1880.89,1211.72 1881.48,1213.09 1882.06,1213.37 1882.65,1215.69 1883.24,1215.42 1883.82,1214.16 1884.41,1213.03 1885,1211.92 1885.58,1209.62 1886.17,1211.05 1886.76,1208.84 1887.34,1209.02 1887.93,1209.47 1888.51,1209.9 1889.1,1208.9 1889.69,1211.36 1890.27,1211.49 1890.86,1212.71 1891.45,1211.64 1892.03,1211.41 1892.62,1210.37 1893.21,1211 1893.79,1211.38 1894.38,1212.55 1894.96,1214.76 1895.55,1214.78 1896.14,1213.5 1896.72,1212.49 1897.31,1210.34 1897.9,1211.79 1898.48,1210.87 1899.07,1209.99 1899.66,1208.92 1900.24,1208.12 1900.83,1208.33 1901.42,1208.64 1902,1207.64 1902.59,1210.44 1903.17,1210.43 1903.76,1209.51 1904.35,1210.95 1904.93,1208.94 1905.52,1209.14 1906.11,1209.35 1906.69,1210.77 1907.28,1211.92 1907.87,1213.13 1908.45,1212.2 1909.04,1213.36 1909.63,1213.56 1910.21,1215.66 1910.8,1216.71 1911.38,1218.96 1911.97,1218.64 1912.56,1220.75 1913.14,1218 1913.73,1217.73 1914.32,1218.69 1914.9,1218.35 1915.49,1219.24 1916.08,1218.82 1916.66,1218.32 1917.25,1218.08 1917.83,1216.85 1918.42,1216.6 1919.01,1216.35 1919.59,1216.24 1920.18,1215.91 1920.77,1214.71 1921.35,1213.32 1921.94,1212.29 1922.53,1213.41 1923.11,1214.58 1923.7,1212.25 1924.29,1212.4 1924.87,1210.05 1925.46,1209.09 1926.04,1209.21 1926.63,1209.39 1927.22,1209.49 1927.8,1210.89 1928.39,1212.03 1928.98,1213.1 1929.56,1214.19 1930.15,1214.02 1930.74,1215.03 1931.32,1215.02 1931.91,1214.8 1932.5,1214.46 1933.08,1213.13 1933.67,1212.25 1934.25,1212.44 1934.84,1210.13 1935.43,1210.47 1936.01,1211.71 1936.6,1211.67 1937.19,1211.84 1937.77,1213.27 1938.36,1213.3 1938.95,1213.32 1939.53,1214.33 1940.12,1211.8 1940.71,1210.81 1941.29,1213.22 1941.88,1210.96 1942.46,1210.09 1943.05,1209.18 1943.64,1210.74 1944.22,1209.49 1944.81,1209.76 1945.4,1211.13 1945.98,1211.28 1946.57,1208.91 1947.16,1209.14 1947.74,1210.45 1948.33,1210.95 1948.91,1209.85 1949.5,1208.92 1950.09,1210.18 1950.67,1210.52 1951.26,1210.51 1951.85,1211.78 1952.43,1210.66 1953.02,1212.12 1953.61,1214.56 1954.19,1214.58 1954.78,1213.49 1955.37,1216.02 1955.95,1217.08 1956.54,1216.75 1957.12,1215.14 1957.71,1216.39 1958.3,1217.4 1958.88,1217.11 1959.47,1219.21 1960.06,1218.93 1960.64,1217.25 1961.23,1216.89 1961.82,1217.75 1962.4,1217.48 1962.99,1217.44 1963.58,1216.33 1964.16,1215.17 1964.75,1216.01 1965.33,1214.61 1965.92,1215.76 1966.51,1214.82 1967.09,1212.37 1967.68,1212.7 1968.27,1215.04 1968.85,1214.89 1969.44,1214.89 1970.03,1213.87 1970.61,1214.95 1971.2,1215.69 1971.78,1215.75 1972.37,1212.05 1972.96,1212.25 1973.54,1212.54 1974.13,1210.36 1974.72,1211.68 1975.3,1213.84 1975.89,1212.69 1976.48,1212.9 1977.06,1209.46 1977.65,1208.76 1978.24,1209.24 1978.82,1207.39 1979.41,1211.41 1979.99,1211.57 1980.58,1211.96 1981.17,1210.98 1981.75,1210.98 1982.34,1211.16 1982.93,1211.47 1983.51,1212.79 1984.1,1211.46 1984.69,1210.16 1985.27,1213.9 1985.86,1211.33 1986.45,1211.46 1987.03,1210.09 1987.62,1213.65 1988.2,1213.58 1988.79,1214.93 1989.38,1215.91 1989.96,1214.54 1990.55,1215.44 1991.14,1214.26 1991.72,1214.13 1992.31,1212.84 1992.9,1213.02 1993.48,1212.81 1994.07,1212.61 1994.65,1212.53 1995.24,1212.59 1995.83,1211.75 1996.41,1208.23 1997,1208.54 1997.59,1208.73 1998.17,1209.09 1998.76,1208.26 1999.35,1208.45 1999.93,1208.52 2000.52,1206.38 2001.11,1209.2 2001.69,1210.51 2002.28,1210.62 2002.86,1211.01 2003.45,1211.05 2004.04,1210 2004.62,1209.03 2005.21,1208.07 2005.8,1208.38 2006.38,1206.18 2006.97,1207.88 2007.56,1210.73 2008.14,1213.12 2008.73,1211.89 2009.32,1215.64 2009.9,1217.85 2010.49,1219.13 2011.07,1220.13 2011.66,1217.46 2012.25,1216.34 2012.83,1216.25 2013.42,1217.53 2014.01,1217.28 2014.59,1219.24 2015.18,1217.9 2015.77,1218.71 2016.35,1218.49 2016.94,1220.42 2017.53,1222.11 2018.11,1222.71 2018.7,1221.22 2019.28,1222.11 2019.87,1221.77 2020.46,1222.36 2021.04,1222.94 2021.63,1221.16 2022.22,1221.07 2022.8,1222.79 2023.39,1221.04 2023.98,1219.5 2024.56,1221.24 2025.15,1221.98 2025.73,1220.31 2026.32,1220.01 2026.91,1220.63 2027.49,1219.37 2028.08,1217.76 2028.67,1216.68 2029.25,1216.6 2029.84,1216.55 2030.43,1216.42 2031.01,1217.1 2031.6,1215.62 2032.19,1217.86 2032.77,1216.58 2033.36,1212.89 2033.94,1215.31 2034.53,1216.67 2035.12,1217.61 2035.7,1221.03 2036.29,1220.73 2036.88,1221.4 2037.46,1218.48 2038.05,1219.38 2038.64,1219.01 2039.22,1217.34 2039.81,1215.84 2040.4,1215.99 2040.98,1216.92 2041.57,1216.69 2042.15,1216.3 2042.74,1216.2 2043.33,1217.29 2043.91,1217.01 2044.5,1216.81 2045.09,1217.81 2045.67,1218.52 2046.26,1217.14 2046.85,1217.18 2047.43,1218.28 2048.02,1218.23 2048.6,1219.08 2049.19,1216.4 2049.78,1216.24 2050.36,1218.15 2050.95,1217.97 2051.54,1215.36 2052.12,1215.48 2052.71,1216.69 2053.3,1217.74 2053.88,1217.49 2054.47,1217.2 2055.06,1219.13 2055.64,1216.41 2056.23,1214.98 2056.81,1213.96 2057.4,1214.91 2057.99,1213.75 2058.57,1217.25 2059.16,1217.07 2059.75,1215.68 2060.33,1214.49 2060.92,1214.6 2061.51,1214.47 2062.09,1214.3 2062.68,1215.32 2063.27,1215.15 2063.85,1212.89 2064.44,1213.19 2065.02,1213.13 2065.61,1216.35 2066.2,1216.11 2066.78,1216 2067.37,1218.11 2067.96,1219.11 2068.54,1217.67 2069.13,1217.54 2069.72,1215.3 2070.3,1215.52 2070.89,1215.37 2071.48,1213.89 2072.06,1216.34 2072.65,1218.1 2073.23,1217.67 2073.82,1217.47 2074.41,1218.41 2074.99,1218.14 2075.58,1217.84 2076.17,1216.46 2076.75,1216.23 2077.34,1213.77 2077.93,1211.54 2078.51,1211.6 2079.1,1211.69 2079.68,1212.92 2080.27,1213.02 2080.86,1214.34 2081.44,1212.26 2082.03,1208.75 2082.62,1205.79 2083.2,1206.31 2083.79,1206.68 2084.38,1209.71 2084.96,1212.17 2085.55,1211.01 2086.14,1211.54 2086.72,1212.73 2087.31,1211.46 2087.89,1212.02 2088.48,1212.08 2089.07,1212.27 2089.65,1211.01 2090.24,1213.54 2090.83,1213.3 2091.41,1212.44 2092,1212.62 2092.59,1212.81 2093.17,1212.73 2093.76,1211.3 2094.35,1212.45 2094.93,1211.36 2095.52,1210.39 2096.1,1209.29 2096.69,1210.62 2097.28,1214.19 2097.86,1214.18 2098.45,1209.6 2099.04,1209.76 2099.62,1209.94 2100.21,1210.29 2100.8,1209.22 2101.38,1208.34 2101.97,1209.53 2102.55,1208.68 2103.14,1207.88 2103.73,1208.21 2104.31,1208.57 2104.9,1205.45 2105.49,1207.03 2106.07,1206.36 2106.66,1209.13 2107.25,1209.45 2107.83,1207.47 2108.42,1208.05 2109.01,1209.68 2109.59,1211.07 2110.18,1215.62 2110.76,1216.46 2111.35,1217.59 2111.94,1217.42 2112.52,1218.29 2113.11,1220.53 2113.7,1216.69 2114.28,1215.25 2114.87,1215.17 2115.46,1214.09 2116.04,1215.43 2116.63,1215.33 2117.22,1217.88 2117.8,1217.83 2118.39,1218.87 2118.97,1216.09 2119.56,1214.89 2120.15,1214.69 2120.73,1214.56 2121.32,1213.28 2121.91,1217.61 2122.49,1216.3 2123.08,1217.56 2123.67,1216.33 2124.25,1217.38 2124.84,1217.36 2125.42,1217.19 2126.01,1216.15 2126.6,1213.77 2127.18,1211.46 2127.77,1210.35 2128.36,1210.59 2128.94,1212.94 2129.53,1211.99 2130.12,1212.21 2130.7,1213.52 2131.29,1217.12 2131.88,1219.28 2132.46,1217.6 2133.05,1217.22 2133.63,1216.06 2134.22,1217.27 2134.81,1217.16 2135.39,1212.26 2135.98,1212.25 2136.57,1209.96 2137.15,1210.13 2137.74,1207.91 2138.33,1207.15 2138.91,1205.1 2139.5,1206.71 2140.09,1206.98 2140.67,1207.62 2141.26,1207.83 2141.84,1206.95 2142.43,1206.18 2143.02,1206.44 2143.6,1208.07 2144.19,1209.68 2144.78,1210.91 2145.36,1211.06 2145.95,1213.32 2146.54,1215.76 2147.12,1216.56 2147.71,1216.62 2148.3,1215.3 2148.88,1214.03 2149.47,1214.19 2150.05,1214.1 2150.64,1212.96 2151.23,1215.22 2151.81,1216.34 2152.4,1217.35 2152.99,1218.56 2153.57,1217.03 2154.16,1220.18 2154.75,1221.06 2155.33,1220.71 2155.92,1221.32 2156.5,1221.02 2157.09,1217.21 2157.68,1219.36 2158.26,1220.17 \"/>\n<path clip-path=\"url(#clip012)\" d=\"M986.025 1214.25 L986.612 1214.25 L987.198 1214.25 L987.785 1214.25 L988.371 1214.25 L988.957 1214.25 L989.544 1214.25 L990.13 1214.25 L990.717 1214.25 L991.303 1214.25 L991.889 1214.25 L992.476 1214.25 L993.062 1214.25 L993.649 1214.25 L994.235 1214.25 L994.822 1214.25 L995.408 1214.25 L995.994 1214.25 L996.581 1214.25 L997.167 1214.25 L997.754 1214.25 L998.34 1214.25 L998.926 1214.25 L999.513 1214.25 L1000.1 1214.25 L1000.69 1214.25 L1001.27 1214.25 L1001.86 1214.25 L1002.44 1214.25 L1003.03 1214.25 L1003.62 1214.25 L1004.2 1214.25 L1004.79 1214.25 L1005.38 1214.25 L1005.96 1214.25 L1006.55 1214.25 L1007.14 1214.25 L1007.72 1214.25 L1008.31 1214.25 L1008.9 1214.25 L1009.48 1214.25 L1010.07 1214.25 L1010.65 1214.25 L1011.24 1214.25 L1011.83 1214.25 L1012.41 1214.25 L1013 1214.25 L1013.59 1214.25 L1014.17 1214.25 L1014.76 1214.25 L1015.35 1214.25 L1015.93 1214.25 L1016.52 1214.25 L1017.11 1214.25 L1017.69 1214.25 L1018.28 1214.25 L1018.86 1214.25 L1019.45 1214.25 L1020.04 1214.25 L1020.62 1214.25 L1021.21 1214.25 L1021.8 1214.25 L1022.38 1214.25 L1022.97 1214.25 L1023.56 1214.25 L1024.14 1214.25 L1024.73 1214.25 L1025.32 1214.25 L1025.9 1214.25 L1026.49 1214.25 L1027.07 1214.25 L1027.66 1214.25 L1028.25 1214.25 L1028.83 1214.25 L1029.42 1214.25 L1030.01 1214.25 L1030.59 1214.25 L1031.18 1214.25 L1031.77 1214.25 L1032.35 1214.25 L1032.94 1214.25 L1033.52 1214.25 L1034.11 1214.25 L1034.7 1214.25 L1035.28 1214.25 L1035.87 1214.25 L1036.46 1214.25 L1037.04 1214.25 L1037.63 1214.25 L1038.22 1214.25 L1038.8 1214.25 L1039.39 1214.25 L1039.98 1214.25 L1040.56 1214.25 L1041.15 1214.25 L1041.73 1214.25 L1042.32 1214.25 L1042.91 1214.25 L1043.49 1214.25 L1044.08 1214.25 L1044.67 1214.25 L1045.25 1214.25 L1045.84 1214.25 L1046.43 1214.25 L1047.01 1214.25 L1047.6 1214.25 L1048.19 1214.25 L1048.77 1214.25 L1049.36 1214.25 L1049.94 1214.25 L1050.53 1214.25 L1051.12 1214.25 L1051.7 1214.25 L1052.29 1214.25 L1052.88 1214.25 L1053.46 1214.25 L1054.05 1214.25 L1054.64 1214.25 L1055.22 1214.25 L1055.81 1214.25 L1056.39 1214.25 L1056.98 1214.25 L1057.57 1214.25 L1058.15 1214.25 L1058.74 1214.25 L1059.33 1214.25 L1059.91 1214.25 L1060.5 1214.25 L1061.09 1214.25 L1061.67 1214.25 L1062.26 1214.25 L1062.85 1214.25 L1063.43 1214.25 L1064.02 1214.25 L1064.6 1214.25 L1065.19 1214.25 L1065.78 1214.25 L1066.36 1214.25 L1066.95 1214.25 L1067.54 1214.25 L1068.12 1214.25 L1068.71 1214.25 L1069.3 1214.25 L1069.88 1214.25 L1070.47 1214.25 L1071.06 1214.25 L1071.64 1214.25 L1072.23 1214.25 L1072.81 1214.25 L1073.4 1214.25 L1073.99 1214.25 L1074.57 1214.25 L1075.16 1214.25 L1075.75 1214.25 L1076.33 1214.25 L1076.92 1214.25 L1077.51 1214.25 L1078.09 1214.25 L1078.68 1214.25 L1079.26 1214.25 L1079.85 1214.25 L1080.44 1214.25 L1081.02 1214.25 L1081.61 1214.25 L1082.2 1214.25 L1082.78 1214.25 L1083.37 1214.25 L1083.96 1214.25 L1084.54 1214.25 L1085.13 1214.25 L1085.72 1214.25 L1086.3 1214.25 L1086.89 1214.25 L1087.47 1214.25 L1088.06 1214.25 L1088.65 1214.25 L1089.23 1214.25 L1089.82 1214.25 L1090.41 1214.25 L1090.99 1214.25 L1091.58 1214.25 L1092.17 1214.25 L1092.75 1214.25 L1093.34 1214.25 L1093.93 1214.25 L1094.51 1214.25 L1095.1 1214.25 L1095.68 1214.25 L1096.27 1214.25 L1096.86 1214.25 L1097.44 1214.25 L1098.03 1214.25 L1098.62 1214.25 L1099.2 1214.25 L1099.79 1214.25 L1100.38 1214.25 L1100.96 1214.25 L1101.55 1214.25 L1102.14 1214.25 L1102.72 1214.25 L1103.31 1214.25 L1103.89 1214.25 L1104.48 1214.25 L1105.07 1214.25 L1105.65 1214.25 L1106.24 1214.25 L1106.83 1214.25 L1107.41 1214.25 L1108 1214.25 L1108.59 1214.25 L1109.17 1214.25 L1109.76 1214.25 L1110.34 1214.25 L1110.93 1214.25 L1111.52 1214.25 L1112.1 1214.25 L1112.69 1214.25 L1113.28 1214.25 L1113.86 1214.25 L1114.45 1214.25 L1115.04 1214.25 L1115.62 1214.25 L1116.21 1214.25 L1116.8 1214.25 L1117.38 1214.25 L1117.97 1214.25 L1118.55 1214.25 L1119.14 1214.25 L1119.73 1214.25 L1120.31 1214.25 L1120.9 1214.25 L1121.49 1214.25 L1122.07 1214.25 L1122.66 1214.25 L1123.25 1214.25 L1123.83 1214.25 L1124.42 1214.25 L1125.01 1214.25 L1125.59 1214.25 L1126.18 1214.25 L1126.76 1214.25 L1127.35 1214.25 L1127.94 1214.25 L1128.52 1214.25 L1129.11 1214.25 L1129.7 1214.25 L1130.28 1214.25 L1130.87 1214.25 L1131.46 1214.25 L1132.04 1214.25 L1132.63 1214.25 L1133.21 1214.25 L1133.8 1214.25 L1134.39 1214.25 L1134.97 1214.25 L1135.56 1214.25 L1136.15 1214.25 L1136.73 1214.25 L1137.32 1214.25 L1137.91 1214.25 L1138.49 1214.25 L1139.08 1214.25 L1139.67 1214.25 L1140.25 1214.25 L1140.84 1214.25 L1141.42 1214.25 L1142.01 1214.25 L1142.6 1214.25 L1143.18 1214.25 L1143.77 1214.25 L1144.36 1214.25 L1144.94 1214.25 L1145.53 1214.25 L1146.12 1214.25 L1146.7 1214.25 L1147.29 1214.25 L1147.88 1214.25 L1148.46 1214.25 L1149.05 1214.25 L1149.63 1214.25 L1150.22 1214.25 L1150.81 1214.25 L1151.39 1214.25 L1151.98 1214.25 L1152.57 1214.25 L1153.15 1214.25 L1153.74 1214.25 L1154.33 1214.25 L1154.91 1214.25 L1155.5 1214.25 L1156.09 1214.25 L1156.67 1214.25 L1157.26 1214.25 L1157.84 1214.25 L1158.43 1214.25 L1159.02 1214.25 L1159.6 1214.25 L1160.19 1214.25 L1160.78 1214.25 L1161.36 1214.25 L1161.95 1214.25 L1162.54 1214.25 L1163.12 1214.25 L1163.71 1214.25 L1164.29 1214.25 L1164.88 1214.25 L1165.47 1214.25 L1166.05 1214.25 L1166.64 1214.25 L1167.23 1214.25 L1167.81 1214.25 L1168.4 1214.25 L1168.99 1214.25 L1169.57 1214.25 L1170.16 1214.25 L1170.75 1214.25 L1171.33 1214.25 L1171.92 1214.25 L1172.5 1214.25 L1173.09 1214.25 L1173.68 1214.25 L1174.26 1214.25 L1174.85 1214.25 L1175.44 1214.25 L1176.02 1214.25 L1176.61 1214.25 L1177.2 1214.25 L1177.78 1214.25 L1178.37 1214.25 L1178.96 1214.25 L1179.54 1214.25 L1180.13 1214.25 L1180.71 1214.25 L1181.3 1214.25 L1181.89 1214.25 L1182.47 1214.25 L1183.06 1214.25 L1183.65 1214.25 L1184.23 1214.25 L1184.82 1214.25 L1185.41 1214.25 L1185.99 1214.25 L1186.58 1214.25 L1187.16 1214.25 L1187.75 1214.25 L1188.34 1214.25 L1188.92 1214.25 L1189.51 1214.25 L1190.1 1214.25 L1190.68 1214.25 L1191.27 1214.25 L1191.86 1214.25 L1192.44 1214.25 L1193.03 1214.25 L1193.62 1214.25 L1194.2 1214.25 L1194.79 1214.25 L1195.37 1214.25 L1195.96 1214.25 L1196.55 1214.25 L1197.13 1214.25 L1197.72 1214.25 L1198.31 1214.25 L1198.89 1214.25 L1199.48 1214.25 L1200.07 1214.25 L1200.65 1214.25 L1201.24 1214.25 L1201.83 1214.25 L1202.41 1214.25 L1203 1214.25 L1203.58 1214.25 L1204.17 1214.25 L1204.76 1214.25 L1205.34 1214.25 L1205.93 1214.25 L1206.52 1214.25 L1207.1 1214.25 L1207.69 1214.25 L1208.28 1214.25 L1208.86 1214.25 L1209.45 1214.25 L1210.03 1214.25 L1210.62 1214.25 L1211.21 1214.25 L1211.79 1214.25 L1212.38 1214.25 L1212.97 1214.25 L1213.55 1214.25 L1214.14 1214.25 L1214.73 1214.25 L1215.31 1214.25 L1215.9 1214.25 L1216.49 1214.25 L1217.07 1214.25 L1217.66 1214.25 L1218.24 1214.25 L1218.83 1214.25 L1219.42 1214.25 L1220 1214.25 L1220.59 1214.25 L1221.18 1214.25 L1221.76 1214.25 L1222.35 1214.25 L1222.94 1214.25 L1223.52 1214.25 L1224.11 1214.25 L1224.7 1214.25 L1225.28 1214.25 L1225.87 1214.25 L1226.45 1214.25 L1227.04 1214.25 L1227.63 1214.25 L1228.21 1214.25 L1228.8 1214.25 L1229.39 1214.25 L1229.97 1214.25 L1230.56 1214.25 L1231.15 1214.25 L1231.73 1214.25 L1232.32 1214.25 L1232.91 1214.25 L1233.49 1214.25 L1234.08 1214.25 L1234.66 1214.25 L1235.25 1214.25 L1235.84 1214.25 L1236.42 1214.25 L1237.01 1214.25 L1237.6 1214.25 L1238.18 1214.25 L1238.77 1214.25 L1239.36 1214.25 L1239.94 1214.25 L1240.53 1214.25 L1241.11 1214.25 L1241.7 1214.25 L1242.29 1214.25 L1242.87 1214.25 L1243.46 1214.25 L1244.05 1214.25 L1244.63 1214.25 L1245.22 1214.25 L1245.81 1214.25 L1246.39 1214.25 L1246.98 1214.25 L1247.57 1214.25 L1248.15 1214.25 L1248.74 1214.25 L1249.32 1214.25 L1249.91 1214.25 L1250.5 1214.25 L1251.08 1214.25 L1251.67 1214.25 L1252.26 1214.25 L1252.84 1214.25 L1253.43 1214.25 L1254.02 1214.25 L1254.6 1214.25 L1255.19 1214.25 L1255.78 1214.25 L1256.36 1214.25 L1256.95 1214.25 L1257.53 1214.25 L1258.12 1214.25 L1258.71 1214.25 L1259.29 1214.25 L1259.88 1214.25 L1260.47 1214.25 L1261.05 1214.25 L1261.64 1214.25 L1262.23 1214.25 L1262.81 1214.25 L1263.4 1214.25 L1263.98 1214.25 L1264.57 1214.25 L1265.16 1214.25 L1265.74 1214.25 L1266.33 1214.25 L1266.92 1214.25 L1267.5 1214.25 L1268.09 1214.25 L1268.68 1214.25 L1269.26 1214.25 L1269.85 1214.25 L1270.44 1214.25 L1271.02 1214.25 L1271.61 1214.25 L1272.19 1214.25 L1272.78 1214.25 L1273.37 1214.25 L1273.95 1214.25 L1274.54 1214.25 L1275.13 1214.25 L1275.71 1214.25 L1276.3 1214.25 L1276.89 1214.25 L1277.47 1214.25 L1278.06 1214.25 L1278.65 1214.25 L1279.23 1214.25 L1279.82 1214.25 L1280.4 1214.25 L1280.99 1214.25 L1281.58 1214.25 L1282.16 1214.25 L1282.75 1214.25 L1283.34 1214.25 L1283.92 1214.25 L1284.51 1214.25 L1285.1 1214.25 L1285.68 1214.25 L1286.27 1214.25 L1286.86 1214.25 L1287.44 1214.25 L1288.03 1214.25 L1288.61 1214.25 L1289.2 1214.25 L1289.79 1214.25 L1290.37 1214.25 L1290.96 1214.25 L1291.55 1214.25 L1292.13 1214.25 L1292.72 1214.25 L1293.31 1214.25 L1293.89 1214.25 L1294.48 1214.25 L1295.06 1214.25 L1295.65 1214.25 L1296.24 1214.25 L1296.82 1214.25 L1297.41 1214.25 L1298 1214.25 L1298.58 1214.25 L1299.17 1214.25 L1299.76 1214.25 L1300.34 1214.25 L1300.93 1214.25 L1301.52 1214.25 L1302.1 1214.25 L1302.69 1214.25 L1303.27 1214.25 L1303.86 1214.25 L1304.45 1214.25 L1305.03 1214.25 L1305.62 1214.25 L1306.21 1214.25 L1306.79 1214.25 L1307.38 1214.25 L1307.97 1214.25 L1308.55 1214.25 L1309.14 1214.25 L1309.73 1214.25 L1310.31 1214.25 L1310.9 1214.25 L1311.48 1214.25 L1312.07 1214.25 L1312.66 1214.25 L1313.24 1214.25 L1313.83 1214.25 L1314.42 1214.25 L1315 1214.25 L1315.59 1214.25 L1316.18 1214.25 L1316.76 1214.25 L1317.35 1214.25 L1317.93 1214.25 L1318.52 1214.25 L1319.11 1214.25 L1319.69 1214.25 L1320.28 1214.25 L1320.87 1214.25 L1321.45 1214.25 L1322.04 1214.25 L1322.63 1214.25 L1323.21 1214.25 L1323.8 1214.25 L1324.39 1214.25 L1324.97 1214.25 L1325.56 1214.25 L1326.14 1214.25 L1326.73 1214.25 L1327.32 1214.25 L1327.9 1214.25 L1328.49 1214.25 L1329.08 1214.25 L1329.66 1214.25 L1330.25 1214.25 L1330.84 1214.25 L1331.42 1214.25 L1332.01 1214.25 L1332.6 1214.25 L1333.18 1214.25 L1333.77 1214.25 L1334.35 1214.25 L1334.94 1214.25 L1335.53 1214.25 L1336.11 1214.25 L1336.7 1214.25 L1337.29 1214.25 L1337.87 1214.25 L1338.46 1214.25 L1339.05 1214.25 L1339.63 1214.25 L1340.22 1214.25 L1340.8 1214.25 L1341.39 1214.25 L1341.98 1214.25 L1342.56 1214.25 L1343.15 1214.25 L1343.74 1214.25 L1344.32 1214.25 L1344.91 1214.25 L1345.5 1214.25 L1346.08 1214.25 L1346.67 1214.25 L1347.26 1214.25 L1347.84 1214.25 L1348.43 1214.25 L1349.01 1214.25 L1349.6 1214.25 L1350.19 1214.25 L1350.77 1214.25 L1351.36 1214.25 L1351.95 1214.25 L1352.53 1214.25 L1353.12 1214.25 L1353.71 1214.25 L1354.29 1214.25 L1354.88 1214.25 L1355.47 1214.25 L1356.05 1214.25 L1356.64 1214.25 L1357.22 1214.25 L1357.81 1214.25 L1358.4 1214.25 L1358.98 1214.25 L1359.57 1214.25 L1360.16 1214.25 L1360.74 1214.25 L1361.33 1214.25 L1361.92 1214.25 L1362.5 1214.25 L1363.09 1214.25 L1363.68 1214.25 L1364.26 1214.25 L1364.85 1214.25 L1365.43 1214.25 L1366.02 1214.25 L1366.61 1214.25 L1367.19 1214.25 L1367.78 1214.25 L1368.37 1214.25 L1368.95 1214.25 L1369.54 1214.25 L1370.13 1214.25 L1370.71 1214.25 L1371.3 1214.25 L1371.88 1214.25 L1372.47 1214.25 L1373.06 1214.25 L1373.64 1214.25 L1374.23 1214.25 L1374.82 1214.25 L1375.4 1214.25 L1375.99 1214.25 L1376.58 1214.25 L1377.16 1214.25 L1377.75 1214.25 L1378.34 1214.25 L1378.92 1214.25 L1379.51 1214.25 L1380.09 1214.25 L1380.68 1214.25 L1381.27 1214.25 L1381.85 1214.25 L1382.44 1214.25 L1383.03 1214.25 L1383.61 1214.25 L1384.2 1214.25 L1384.79 1214.25 L1385.37 1214.25 L1385.96 1214.25 L1386.55 1214.25 L1387.13 1214.25 L1387.72 1214.25 L1388.3 1214.25 L1388.89 1214.25 L1389.48 1214.25 L1390.06 1214.25 L1390.65 1214.25 L1391.24 1214.25 L1391.82 1214.25 L1392.41 1214.25 L1393 1214.25 L1393.58 1214.25 L1394.17 1214.25 L1394.75 1214.25 L1395.34 1214.25 L1395.93 1214.25 L1396.51 1214.25 L1397.1 1214.25 L1397.69 1214.25 L1398.27 1214.25 L1398.86 1214.25 L1399.45 1214.25 L1400.03 1214.25 L1400.62 1214.25 L1401.21 1214.25 L1401.79 1214.25 L1402.38 1214.25 L1402.96 1214.25 L1403.55 1214.25 L1404.14 1214.25 L1404.72 1214.25 L1405.31 1214.25 L1405.9 1214.25 L1406.48 1214.25 L1407.07 1214.25 L1407.66 1214.25 L1408.24 1214.25 L1408.83 1214.25 L1409.42 1214.25 L1410 1214.25 L1410.59 1214.25 L1411.17 1214.25 L1411.76 1214.25 L1412.35 1214.25 L1412.93 1214.25 L1413.52 1214.25 L1414.11 1214.25 L1414.69 1214.25 L1415.28 1214.25 L1415.87 1214.25 L1416.45 1214.25 L1417.04 1214.25 L1417.63 1214.25 L1418.21 1214.25 L1418.8 1214.25 L1419.38 1214.25 L1419.97 1214.25 L1420.56 1214.25 L1421.14 1214.25 L1421.73 1214.25 L1422.32 1214.25 L1422.9 1214.25 L1423.49 1214.25 L1424.08 1214.25 L1424.66 1214.25 L1425.25 1214.25 L1425.83 1214.25 L1426.42 1214.25 L1427.01 1214.25 L1427.59 1214.25 L1428.18 1214.25 L1428.77 1214.25 L1429.35 1214.25 L1429.94 1214.25 L1430.53 1214.25 L1431.11 1214.25 L1431.7 1214.25 L1432.29 1214.25 L1432.87 1214.25 L1433.46 1214.25 L1434.04 1214.25 L1434.63 1214.25 L1435.22 1214.25 L1435.8 1214.25 L1436.39 1214.25 L1436.98 1214.25 L1437.56 1214.25 L1438.15 1214.25 L1438.74 1214.25 L1439.32 1214.25 L1439.91 1214.25 L1440.5 1214.25 L1441.08 1214.25 L1441.67 1214.25 L1442.25 1214.25 L1442.84 1214.25 L1443.43 1214.25 L1444.01 1214.25 L1444.6 1214.25 L1445.19 1214.25 L1445.77 1214.25 L1446.36 1214.25 L1446.95 1214.25 L1447.53 1214.25 L1448.12 1214.25 L1448.7 1214.25 L1449.29 1214.25 L1449.88 1214.25 L1450.46 1214.25 L1451.05 1214.25 L1451.64 1214.25 L1452.22 1214.25 L1452.81 1214.25 L1453.4 1214.25 L1453.98 1214.25 L1454.57 1214.25 L1455.16 1214.25 L1455.74 1214.25 L1456.33 1214.25 L1456.91 1214.25 L1457.5 1214.25 L1458.09 1214.25 L1458.67 1214.25 L1459.26 1214.25 L1459.85 1214.25 L1460.43 1214.25 L1461.02 1214.25 L1461.61 1214.25 L1462.19 1214.25 L1462.78 1214.25 L1463.37 1214.25 L1463.95 1214.25 L1464.54 1214.25 L1465.12 1214.25 L1465.71 1214.25 L1466.3 1214.25 L1466.88 1214.25 L1467.47 1214.25 L1468.06 1214.25 L1468.64 1214.25 L1469.23 1214.25 L1469.82 1214.25 L1470.4 1214.25 L1470.99 1214.25 L1471.57 1214.25 L1472.16 1214.25 L1472.75 1214.25 L1473.33 1214.25 L1473.92 1214.25 L1474.51 1214.25 L1475.09 1214.25 L1475.68 1214.25 L1476.27 1214.25 L1476.85 1214.25 L1477.44 1214.25 L1478.03 1214.25 L1478.61 1214.25 L1479.2 1214.25 L1479.78 1214.25 L1480.37 1214.25 L1480.96 1214.25 L1481.54 1214.25 L1482.13 1214.25 L1482.72 1214.25 L1483.3 1214.25 L1483.89 1214.25 L1484.48 1214.25 L1485.06 1214.25 L1485.65 1214.25 L1486.24 1214.25 L1486.82 1214.25 L1487.41 1214.25 L1487.99 1214.25 L1488.58 1214.25 L1489.17 1214.25 L1489.75 1214.25 L1490.34 1214.25 L1490.93 1214.25 L1491.51 1214.25 L1492.1 1214.25 L1492.69 1214.25 L1493.27 1214.25 L1493.86 1214.25 L1494.45 1214.25 L1495.03 1214.25 L1495.62 1214.25 L1496.2 1214.25 L1496.79 1214.25 L1497.38 1214.25 L1497.96 1214.25 L1498.55 1214.25 L1499.14 1214.25 L1499.72 1214.25 L1500.31 1214.25 L1500.9 1214.25 L1501.48 1214.25 L1502.07 1214.25 L1502.65 1214.25 L1503.24 1214.25 L1503.83 1214.25 L1504.41 1214.25 L1505 1214.25 L1505.59 1214.25 L1506.17 1214.25 L1506.76 1214.25 L1507.35 1214.25 L1507.93 1214.25 L1508.52 1214.25 L1509.11 1214.25 L1509.69 1214.25 L1510.28 1214.25 L1510.86 1214.25 L1511.45 1214.25 L1512.04 1214.25 L1512.62 1214.25 L1513.21 1214.25 L1513.8 1214.25 L1514.38 1214.25 L1514.97 1214.25 L1515.56 1214.25 L1516.14 1214.25 L1516.73 1214.25 L1517.32 1214.25 L1517.9 1214.25 L1518.49 1214.25 L1519.07 1214.25 L1519.66 1214.25 L1520.25 1214.25 L1520.83 1214.25 L1521.42 1214.25 L1522.01 1214.25 L1522.59 1214.25 L1523.18 1214.25 L1523.77 1214.25 L1524.35 1214.25 L1524.94 1214.25 L1525.52 1214.25 L1526.11 1214.25 L1526.7 1214.25 L1527.28 1214.25 L1527.87 1214.25 L1528.46 1214.25 L1529.04 1214.25 L1529.63 1214.25 L1530.22 1214.25 L1530.8 1214.25 L1531.39 1214.25 L1531.98 1214.25 L1532.56 1214.25 L1533.15 1214.25 L1533.73 1214.25 L1534.32 1214.25 L1534.91 1214.25 L1535.49 1214.25 L1536.08 1214.25 L1536.67 1214.25 L1537.25 1214.25 L1537.84 1214.25 L1538.43 1214.25 L1539.01 1214.25 L1539.6 1214.25 L1540.19 1214.25 L1540.77 1214.25 L1541.36 1214.25 L1541.94 1214.25 L1542.53 1214.25 L1543.12 1214.25 L1543.7 1214.25 L1544.29 1214.25 L1544.88 1214.25 L1545.46 1214.25 L1546.05 1214.25 L1546.64 1214.25 L1547.22 1214.25 L1547.81 1214.25 L1548.4 1214.25 L1548.98 1214.25 L1549.57 1214.25 L1550.15 1214.25 L1550.74 1214.25 L1551.33 1214.25 L1551.91 1214.25 L1552.5 1214.25 L1553.09 1214.25 L1553.67 1214.25 L1554.26 1214.25 L1554.85 1214.25 L1555.43 1214.25 L1556.02 1214.25 L1556.6 1214.25 L1557.19 1214.25 L1557.78 1214.25 L1558.36 1214.25 L1558.95 1214.25 L1559.54 1214.25 L1560.12 1214.25 L1560.71 1214.25 L1561.3 1214.25 L1561.88 1214.25 L1562.47 1214.25 L1563.06 1214.25 L1563.64 1214.25 L1564.23 1214.25 L1564.81 1214.25 L1565.4 1214.25 L1565.99 1214.25 L1566.57 1214.25 L1567.16 1214.25 L1567.75 1214.25 L1568.33 1214.25 L1568.92 1214.25 L1569.51 1214.25 L1570.09 1214.25 L1570.68 1214.25 L1571.27 1214.25 L1571.85 1214.25 L1572.44 1214.25 L1573.02 1214.25 L1573.61 1214.25 L1574.2 1214.25 L1574.78 1214.25 L1575.37 1214.25 L1575.96 1214.25 L1576.54 1214.25 L1577.13 1214.25 L1577.72 1214.25 L1578.3 1214.25 L1578.89 1214.25 L1579.47 1214.25 L1580.06 1214.25 L1580.65 1214.25 L1581.23 1214.25 L1581.82 1214.25 L1582.41 1214.25 L1582.99 1214.25 L1583.58 1214.25 L1584.17 1214.25 L1584.75 1214.25 L1585.34 1214.25 L1585.93 1214.25 L1586.51 1214.25 L1587.1 1214.25 L1587.68 1214.25 L1588.27 1214.25 L1588.86 1214.25 L1589.44 1214.25 L1590.03 1214.25 L1590.62 1214.25 L1591.2 1214.25 L1591.79 1214.25 L1592.38 1214.25 L1592.96 1214.25 L1593.55 1214.25 L1594.14 1214.25 L1594.72 1214.25 L1595.31 1214.25 L1595.89 1214.25 L1596.48 1214.25 L1597.07 1214.25 L1597.65 1214.25 L1598.24 1214.25 L1598.83 1214.25 L1599.41 1214.25 L1600 1214.25 L1600.59 1214.25 L1601.17 1214.25 L1601.76 1214.25 L1602.34 1214.25 L1602.93 1214.25 L1603.52 1214.25 L1604.1 1214.25 L1604.69 1214.25 L1605.28 1214.25 L1605.86 1214.25 L1606.45 1214.25 L1607.04 1214.25 L1607.62 1214.25 L1608.21 1214.25 L1608.8 1214.25 L1609.38 1214.25 L1609.97 1214.25 L1610.55 1214.25 L1611.14 1214.25 L1611.73 1214.25 L1612.31 1214.25 L1612.9 1214.25 L1613.49 1214.25 L1614.07 1214.25 L1614.66 1214.25 L1615.25 1214.25 L1615.83 1214.25 L1616.42 1214.25 L1617.01 1214.25 L1617.59 1214.25 L1618.18 1214.25 L1618.76 1214.25 L1619.35 1214.25 L1619.94 1214.25 L1620.52 1214.25 L1621.11 1214.25 L1621.7 1214.25 L1622.28 1214.25 L1622.87 1214.25 L1623.46 1214.25 L1624.04 1214.25 L1624.63 1214.25 L1625.22 1214.25 L1625.8 1214.25 L1626.39 1214.25 L1626.97 1214.25 L1627.56 1214.25 L1628.15 1214.25 L1628.73 1214.25 L1629.32 1214.25 L1629.91 1214.25 L1630.49 1214.25 L1631.08 1214.25 L1631.67 1214.25 L1632.25 1214.25 L1632.84 1214.25 L1633.42 1214.25 L1634.01 1214.25 L1634.6 1214.25 L1635.18 1214.25 L1635.77 1214.25 L1636.36 1214.25 L1636.94 1214.25 L1637.53 1214.25 L1638.12 1214.25 L1638.7 1214.25 L1639.29 1214.25 L1639.88 1214.25 L1640.46 1214.25 L1641.05 1214.25 L1641.63 1214.25 L1642.22 1214.25 L1642.81 1214.25 L1643.39 1214.25 L1643.98 1214.25 L1644.57 1214.25 L1645.15 1214.25 L1645.74 1214.25 L1646.33 1214.25 L1646.91 1214.25 L1647.5 1214.25 L1648.09 1214.25 L1648.67 1214.25 L1649.26 1214.25 L1649.84 1214.25 L1650.43 1214.25 L1651.02 1214.25 L1651.6 1214.25 L1652.19 1214.25 L1652.78 1214.25 L1653.36 1214.25 L1653.95 1214.25 L1654.54 1214.25 L1655.12 1214.25 L1655.71 1214.25 L1656.29 1214.25 L1656.88 1214.25 L1657.47 1214.25 L1658.05 1214.25 L1658.64 1214.25 L1659.23 1214.25 L1659.81 1214.25 L1660.4 1214.25 L1660.99 1214.25 L1661.57 1214.25 L1662.16 1214.25 L1662.75 1214.25 L1663.33 1214.25 L1663.92 1214.25 L1664.5 1214.25 L1665.09 1214.25 L1665.68 1214.25 L1666.26 1214.25 L1666.85 1214.25 L1667.44 1214.25 L1668.02 1214.25 L1668.61 1214.25 L1669.2 1214.25 L1669.78 1214.25 L1670.37 1214.25 L1670.96 1214.25 L1671.54 1214.25 L1672.13 1214.25 L1672.71 1214.25 L1673.3 1214.25 L1673.89 1214.25 L1674.47 1214.25 L1675.06 1214.25 L1675.65 1214.25 L1676.23 1214.25 L1676.82 1214.25 L1677.41 1214.25 L1677.99 1214.25 L1678.58 1214.25 L1679.17 1214.25 L1679.75 1214.25 L1680.34 1214.25 L1680.92 1214.25 L1681.51 1214.25 L1682.1 1214.25 L1682.68 1214.25 L1683.27 1214.25 L1683.86 1214.25 L1684.44 1214.25 L1685.03 1214.25 L1685.62 1214.25 L1686.2 1214.25 L1686.79 1214.25 L1687.37 1214.25 L1687.96 1214.25 L1688.55 1214.25 L1689.13 1214.25 L1689.72 1214.25 L1690.31 1214.25 L1690.89 1214.25 L1691.48 1214.25 L1692.07 1214.25 L1692.65 1214.25 L1693.24 1214.25 L1693.83 1214.25 L1694.41 1214.25 L1695 1214.25 L1695.58 1214.25 L1696.17 1214.25 L1696.76 1214.25 L1697.34 1214.25 L1697.93 1214.25 L1698.52 1214.25 L1699.1 1214.25 L1699.69 1214.25 L1700.28 1214.25 L1700.86 1214.25 L1701.45 1214.25 L1702.04 1214.25 L1702.62 1214.25 L1703.21 1214.25 L1703.79 1214.25 L1704.38 1214.25 L1704.97 1214.25 L1705.55 1214.25 L1706.14 1214.25 L1706.73 1214.25 L1707.31 1214.25 L1707.9 1214.25 L1708.49 1214.25 L1709.07 1214.25 L1709.66 1214.25 L1710.24 1214.25 L1710.83 1214.25 L1711.42 1214.25 L1712 1214.25 L1712.59 1214.25 L1713.18 1214.25 L1713.76 1214.25 L1714.35 1214.25 L1714.94 1214.25 L1715.52 1214.25 L1716.11 1214.25 L1716.7 1214.25 L1717.28 1214.25 L1717.87 1214.25 L1718.45 1214.25 L1719.04 1214.25 L1719.63 1214.25 L1720.21 1214.25 L1720.8 1214.25 L1721.39 1214.25 L1721.97 1214.25 L1722.56 1214.25 L1723.15 1214.25 L1723.73 1214.25 L1724.32 1214.25 L1724.91 1214.25 L1725.49 1214.25 L1726.08 1214.25 L1726.66 1214.25 L1727.25 1214.25 L1727.84 1214.25 L1728.42 1214.25 L1729.01 1214.25 L1729.6 1214.25 L1730.18 1214.25 L1730.77 1214.25 L1731.36 1214.25 L1731.94 1214.25 L1732.53 1214.25 L1733.11 1214.25 L1733.7 1214.25 L1734.29 1214.25 L1734.87 1214.25 L1735.46 1214.25 L1736.05 1214.25 L1736.63 1214.25 L1737.22 1214.25 L1737.81 1214.25 L1738.39 1214.25 L1738.98 1214.25 L1739.57 1214.25 L1740.15 1214.25 L1740.74 1214.25 L1741.32 1214.25 L1741.91 1214.25 L1742.5 1214.25 L1743.08 1214.25 L1743.67 1214.25 L1744.26 1214.25 L1744.84 1214.25 L1745.43 1214.25 L1746.02 1214.25 L1746.6 1214.25 L1747.19 1214.25 L1747.78 1214.25 L1748.36 1214.25 L1748.95 1214.25 L1749.53 1214.25 L1750.12 1214.25 L1750.71 1214.25 L1751.29 1214.25 L1751.88 1214.25 L1752.47 1214.25 L1753.05 1214.25 L1753.64 1214.25 L1754.23 1214.25 L1754.81 1214.25 L1755.4 1214.25 L1755.99 1214.25 L1756.57 1214.25 L1757.16 1214.25 L1757.74 1214.25 L1758.33 1214.25 L1758.92 1214.25 L1759.5 1214.25 L1760.09 1214.25 L1760.68 1214.25 L1761.26 1214.25 L1761.85 1214.25 L1762.44 1214.25 L1763.02 1214.25 L1763.61 1214.25 L1764.19 1214.25 L1764.78 1214.25 L1765.37 1214.25 L1765.95 1214.25 L1766.54 1214.25 L1767.13 1214.25 L1767.71 1214.25 L1768.3 1214.25 L1768.89 1214.25 L1769.47 1214.25 L1770.06 1214.25 L1770.65 1214.25 L1771.23 1214.25 L1771.82 1214.25 L1772.4 1214.25 L1772.99 1214.25 L1773.58 1214.25 L1774.16 1214.25 L1774.75 1214.25 L1775.34 1214.25 L1775.92 1214.25 L1776.51 1214.25 L1777.1 1214.25 L1777.68 1214.25 L1778.27 1214.25 L1778.86 1214.25 L1779.44 1214.25 L1780.03 1214.25 L1780.61 1214.25 L1781.2 1214.25 L1781.79 1214.25 L1782.37 1214.25 L1782.96 1214.25 L1783.55 1214.25 L1784.13 1214.25 L1784.72 1214.25 L1785.31 1214.25 L1785.89 1214.25 L1786.48 1214.25 L1787.06 1214.25 L1787.65 1214.25 L1788.24 1214.25 L1788.82 1214.25 L1789.41 1214.25 L1790 1214.25 L1790.58 1214.25 L1791.17 1214.25 L1791.76 1214.25 L1792.34 1214.25 L1792.93 1214.25 L1793.52 1214.25 L1794.1 1214.25 L1794.69 1214.25 L1795.27 1214.25 L1795.86 1214.25 L1796.45 1214.25 L1797.03 1214.25 L1797.62 1214.25 L1798.21 1214.25 L1798.79 1214.25 L1799.38 1214.25 L1799.97 1214.25 L1800.55 1214.25 L1801.14 1214.25 L1801.73 1214.25 L1802.31 1214.25 L1802.9 1214.25 L1803.48 1214.25 L1804.07 1214.25 L1804.66 1214.25 L1805.24 1214.25 L1805.83 1214.25 L1806.42 1214.25 L1807 1214.25 L1807.59 1214.25 L1808.18 1214.25 L1808.76 1214.25 L1809.35 1214.25 L1809.94 1214.25 L1810.52 1214.25 L1811.11 1214.25 L1811.69 1214.25 L1812.28 1214.25 L1812.87 1214.25 L1813.45 1214.25 L1814.04 1214.25 L1814.63 1214.25 L1815.21 1214.25 L1815.8 1214.25 L1816.39 1214.25 L1816.97 1214.25 L1817.56 1214.25 L1818.14 1214.25 L1818.73 1214.25 L1819.32 1214.25 L1819.9 1214.25 L1820.49 1214.25 L1821.08 1214.25 L1821.66 1214.25 L1822.25 1214.25 L1822.84 1214.25 L1823.42 1214.25 L1824.01 1214.25 L1824.6 1214.25 L1825.18 1214.25 L1825.77 1214.25 L1826.35 1214.25 L1826.94 1214.25 L1827.53 1214.25 L1828.11 1214.25 L1828.7 1214.25 L1829.29 1214.25 L1829.87 1214.25 L1830.46 1214.25 L1831.05 1214.25 L1831.63 1214.25 L1832.22 1214.25 L1832.81 1214.25 L1833.39 1214.25 L1833.98 1214.25 L1834.56 1214.25 L1835.15 1214.25 L1835.74 1214.25 L1836.32 1214.25 L1836.91 1214.25 L1837.5 1214.25 L1838.08 1214.25 L1838.67 1214.25 L1839.26 1214.25 L1839.84 1214.25 L1840.43 1214.25 L1841.01 1214.25 L1841.6 1214.25 L1842.19 1214.25 L1842.77 1214.25 L1843.36 1214.25 L1843.95 1214.25 L1844.53 1214.25 L1845.12 1214.25 L1845.71 1214.25 L1846.29 1214.25 L1846.88 1214.25 L1847.47 1214.25 L1848.05 1214.25 L1848.64 1214.25 L1849.22 1214.25 L1849.81 1214.25 L1850.4 1214.25 L1850.98 1214.25 L1851.57 1214.25 L1852.16 1214.25 L1852.74 1214.25 L1853.33 1214.25 L1853.92 1214.25 L1854.5 1214.25 L1855.09 1214.25 L1855.68 1214.25 L1856.26 1214.25 L1856.85 1214.25 L1857.43 1214.25 L1858.02 1214.25 L1858.61 1214.25 L1859.19 1214.25 L1859.78 1214.25 L1860.37 1214.25 L1860.95 1214.25 L1861.54 1214.25 L1862.13 1214.25 L1862.71 1214.25 L1863.3 1214.25 L1863.88 1214.25 L1864.47 1214.25 L1865.06 1214.25 L1865.64 1214.25 L1866.23 1214.25 L1866.82 1214.25 L1867.4 1214.25 L1867.99 1214.25 L1868.58 1214.25 L1869.16 1214.25 L1869.75 1214.25 L1870.34 1214.25 L1870.92 1214.25 L1871.51 1214.25 L1872.09 1214.25 L1872.68 1214.25 L1873.27 1214.25 L1873.85 1214.25 L1874.44 1214.25 L1875.03 1214.25 L1875.61 1214.25 L1876.2 1214.25 L1876.79 1214.25 L1877.37 1214.25 L1877.96 1214.25 L1878.55 1214.25 L1879.13 1214.25 L1879.72 1214.25 L1880.3 1214.25 L1880.89 1214.25 L1881.48 1214.25 L1882.06 1214.25 L1882.65 1214.25 L1883.24 1214.25 L1883.82 1214.25 L1884.41 1214.25 L1885 1214.25 L1885.58 1214.25 L1886.17 1214.25 L1886.76 1214.25 L1887.34 1214.25 L1887.93 1214.25 L1888.51 1214.25 L1889.1 1214.25 L1889.69 1214.25 L1890.27 1214.25 L1890.86 1214.25 L1891.45 1214.25 L1892.03 1214.25 L1892.62 1214.25 L1893.21 1214.25 L1893.79 1214.25 L1894.38 1214.25 L1894.96 1214.25 L1895.55 1214.25 L1896.14 1214.25 L1896.72 1214.25 L1897.31 1214.25 L1897.9 1214.25 L1898.48 1214.25 L1899.07 1214.25 L1899.66 1214.25 L1900.24 1214.25 L1900.83 1214.25 L1901.42 1214.25 L1902 1214.25 L1902.59 1214.25 L1903.17 1214.25 L1903.76 1214.25 L1904.35 1214.25 L1904.93 1214.25 L1905.52 1214.25 L1906.11 1214.25 L1906.69 1214.25 L1907.28 1214.25 L1907.87 1214.25 L1908.45 1214.25 L1909.04 1214.25 L1909.63 1214.25 L1910.21 1214.25 L1910.8 1214.25 L1911.38 1214.25 L1911.97 1214.25 L1912.56 1214.25 L1913.14 1214.25 L1913.73 1214.25 L1914.32 1214.25 L1914.9 1214.25 L1915.49 1214.25 L1916.08 1214.25 L1916.66 1214.25 L1917.25 1214.25 L1917.83 1214.25 L1918.42 1214.25 L1919.01 1214.25 L1919.59 1214.25 L1920.18 1214.25 L1920.77 1214.25 L1921.35 1214.25 L1921.94 1214.25 L1922.53 1214.25 L1923.11 1214.25 L1923.7 1214.25 L1924.29 1214.25 L1924.87 1214.25 L1925.46 1214.25 L1926.04 1214.25 L1926.63 1214.25 L1927.22 1214.25 L1927.8 1214.25 L1928.39 1214.25 L1928.98 1214.25 L1929.56 1214.25 L1930.15 1214.25 L1930.74 1214.25 L1931.32 1214.25 L1931.91 1214.25 L1932.5 1214.25 L1933.08 1214.25 L1933.67 1214.25 L1934.25 1214.25 L1934.84 1214.25 L1935.43 1214.25 L1936.01 1214.25 L1936.6 1214.25 L1937.19 1214.25 L1937.77 1214.25 L1938.36 1214.25 L1938.95 1214.25 L1939.53 1214.25 L1940.12 1214.25 L1940.71 1214.25 L1941.29 1214.25 L1941.88 1214.25 L1942.46 1214.25 L1943.05 1214.25 L1943.64 1214.25 L1944.22 1214.25 L1944.81 1214.25 L1945.4 1214.25 L1945.98 1214.25 L1946.57 1214.25 L1947.16 1214.25 L1947.74 1214.25 L1948.33 1214.25 L1948.91 1214.25 L1949.5 1214.25 L1950.09 1214.25 L1950.67 1214.25 L1951.26 1214.25 L1951.85 1214.25 L1952.43 1214.25 L1953.02 1214.25 L1953.61 1214.25 L1954.19 1214.25 L1954.78 1214.25 L1955.37 1214.25 L1955.95 1214.25 L1956.54 1214.25 L1957.12 1214.25 L1957.71 1214.25 L1958.3 1214.25 L1958.88 1214.25 L1959.47 1214.25 L1960.06 1214.25 L1960.64 1214.25 L1961.23 1214.25 L1961.82 1214.25 L1962.4 1214.25 L1962.99 1214.25 L1963.58 1214.25 L1964.16 1214.25 L1964.75 1214.25 L1965.33 1214.25 L1965.92 1214.25 L1966.51 1214.25 L1967.09 1214.25 L1967.68 1214.25 L1968.27 1214.25 L1968.85 1214.25 L1969.44 1214.25 L1970.03 1214.25 L1970.61 1214.25 L1971.2 1214.25 L1971.78 1214.25 L1972.37 1214.25 L1972.96 1214.25 L1973.54 1214.25 L1974.13 1214.25 L1974.72 1214.25 L1975.3 1214.25 L1975.89 1214.25 L1976.48 1214.25 L1977.06 1214.25 L1977.65 1214.25 L1978.24 1214.25 L1978.82 1214.25 L1979.41 1214.25 L1979.99 1214.25 L1980.58 1214.25 L1981.17 1214.25 L1981.75 1214.25 L1982.34 1214.25 L1982.93 1214.25 L1983.51 1214.25 L1984.1 1214.25 L1984.69 1214.25 L1985.27 1214.25 L1985.86 1214.25 L1986.45 1214.25 L1987.03 1214.25 L1987.62 1214.25 L1988.2 1214.25 L1988.79 1214.25 L1989.38 1214.25 L1989.96 1214.25 L1990.55 1214.25 L1991.14 1214.25 L1991.72 1214.25 L1992.31 1214.25 L1992.9 1214.25 L1993.48 1214.25 L1994.07 1214.25 L1994.65 1214.25 L1995.24 1214.25 L1995.83 1214.25 L1996.41 1214.25 L1997 1214.25 L1997.59 1214.25 L1998.17 1214.25 L1998.76 1214.25 L1999.35 1214.25 L1999.93 1214.25 L2000.52 1214.25 L2001.11 1214.25 L2001.69 1214.25 L2002.28 1214.25 L2002.86 1214.25 L2003.45 1214.25 L2004.04 1214.25 L2004.62 1214.25 L2005.21 1214.25 L2005.8 1214.25 L2006.38 1214.25 L2006.97 1214.25 L2007.56 1214.25 L2008.14 1214.25 L2008.73 1214.25 L2009.32 1214.25 L2009.9 1214.25 L2010.49 1214.25 L2011.07 1214.25 L2011.66 1214.25 L2012.25 1214.25 L2012.83 1214.25 L2013.42 1214.25 L2014.01 1214.25 L2014.59 1214.25 L2015.18 1214.25 L2015.77 1214.25 L2016.35 1214.25 L2016.94 1214.25 L2017.53 1214.25 L2018.11 1214.25 L2018.7 1214.25 L2019.28 1214.25 L2019.87 1214.25 L2020.46 1214.25 L2021.04 1214.25 L2021.63 1214.25 L2022.22 1214.25 L2022.8 1214.25 L2023.39 1214.25 L2023.98 1214.25 L2024.56 1214.25 L2025.15 1214.25 L2025.73 1214.25 L2026.32 1214.25 L2026.91 1214.25 L2027.49 1214.25 L2028.08 1214.25 L2028.67 1214.25 L2029.25 1214.25 L2029.84 1214.25 L2030.43 1214.25 L2031.01 1214.25 L2031.6 1214.25 L2032.19 1214.25 L2032.77 1214.25 L2033.36 1214.25 L2033.94 1214.25 L2034.53 1214.25 L2035.12 1214.25 L2035.7 1214.25 L2036.29 1214.25 L2036.88 1214.25 L2037.46 1214.25 L2038.05 1214.25 L2038.64 1214.25 L2039.22 1214.25 L2039.81 1214.25 L2040.4 1214.25 L2040.98 1214.25 L2041.57 1214.25 L2042.15 1214.25 L2042.74 1214.25 L2043.33 1214.25 L2043.91 1214.25 L2044.5 1214.25 L2045.09 1214.25 L2045.67 1214.25 L2046.26 1214.25 L2046.85 1214.25 L2047.43 1214.25 L2048.02 1214.25 L2048.6 1214.25 L2049.19 1214.25 L2049.78 1214.25 L2050.36 1214.25 L2050.95 1214.25 L2051.54 1214.25 L2052.12 1214.25 L2052.71 1214.25 L2053.3 1214.25 L2053.88 1214.25 L2054.47 1214.25 L2055.06 1214.25 L2055.64 1214.25 L2056.23 1214.25 L2056.81 1214.25 L2057.4 1214.25 L2057.99 1214.25 L2058.57 1214.25 L2059.16 1214.25 L2059.75 1214.25 L2060.33 1214.25 L2060.92 1214.25 L2061.51 1214.25 L2062.09 1214.25 L2062.68 1214.25 L2063.27 1214.25 L2063.85 1214.25 L2064.44 1214.25 L2065.02 1214.25 L2065.61 1214.25 L2066.2 1214.25 L2066.78 1214.25 L2067.37 1214.25 L2067.96 1214.25 L2068.54 1214.25 L2069.13 1214.25 L2069.72 1214.25 L2070.3 1214.25 L2070.89 1214.25 L2071.48 1214.25 L2072.06 1214.25 L2072.65 1214.25 L2073.23 1214.25 L2073.82 1214.25 L2074.41 1214.25 L2074.99 1214.25 L2075.58 1214.25 L2076.17 1214.25 L2076.75 1214.25 L2077.34 1214.25 L2077.93 1214.25 L2078.51 1214.25 L2079.1 1214.25 L2079.68 1214.25 L2080.27 1214.25 L2080.86 1214.25 L2081.44 1214.25 L2082.03 1214.25 L2082.62 1214.25 L2083.2 1214.25 L2083.79 1214.25 L2084.38 1214.25 L2084.96 1214.25 L2085.55 1214.25 L2086.14 1214.25 L2086.72 1214.25 L2087.31 1214.25 L2087.89 1214.25 L2088.48 1214.25 L2089.07 1214.25 L2089.65 1214.25 L2090.24 1214.25 L2090.83 1214.25 L2091.41 1214.25 L2092 1214.25 L2092.59 1214.25 L2093.17 1214.25 L2093.76 1214.25 L2094.35 1214.25 L2094.93 1214.25 L2095.52 1214.25 L2096.1 1214.25 L2096.69 1214.25 L2097.28 1214.25 L2097.86 1214.25 L2098.45 1214.25 L2099.04 1214.25 L2099.62 1214.25 L2100.21 1214.25 L2100.8 1214.25 L2101.38 1214.25 L2101.97 1214.25 L2102.55 1214.25 L2103.14 1214.25 L2103.73 1214.25 L2104.31 1214.25 L2104.9 1214.25 L2105.49 1214.25 L2106.07 1214.25 L2106.66 1214.25 L2107.25 1214.25 L2107.83 1214.25 L2108.42 1214.25 L2109.01 1214.25 L2109.59 1214.25 L2110.18 1214.25 L2110.76 1214.25 L2111.35 1214.25 L2111.94 1214.25 L2112.52 1214.25 L2113.11 1214.25 L2113.7 1214.25 L2114.28 1214.25 L2114.87 1214.25 L2115.46 1214.25 L2116.04 1214.25 L2116.63 1214.25 L2117.22 1214.25 L2117.8 1214.25 L2118.39 1214.25 L2118.97 1214.25 L2119.56 1214.25 L2120.15 1214.25 L2120.73 1214.25 L2121.32 1214.25 L2121.91 1214.25 L2122.49 1214.25 L2123.08 1214.25 L2123.67 1214.25 L2124.25 1214.25 L2124.84 1214.25 L2125.42 1214.25 L2126.01 1214.25 L2126.6 1214.25 L2127.18 1214.25 L2127.77 1214.25 L2128.36 1214.25 L2128.94 1214.25 L2129.53 1214.25 L2130.12 1214.25 L2130.7 1214.25 L2131.29 1214.25 L2131.88 1214.25 L2132.46 1214.25 L2133.05 1214.25 L2133.63 1214.25 L2134.22 1214.25 L2134.81 1214.25 L2135.39 1214.25 L2135.98 1214.25 L2136.57 1214.25 L2137.15 1214.25 L2137.74 1214.25 L2138.33 1214.25 L2138.91 1214.25 L2139.5 1214.25 L2140.09 1214.25 L2140.67 1214.25 L2141.26 1214.25 L2141.84 1214.25 L2142.43 1214.25 L2143.02 1214.25 L2143.6 1214.25 L2144.19 1214.25 L2144.78 1214.25 L2145.36 1214.25 L2145.95 1214.25 L2146.54 1214.25 L2147.12 1214.25 L2147.71 1214.25 L2148.3 1214.25 L2148.88 1214.25 L2149.47 1214.25 L2150.05 1214.25 L2150.64 1214.25 L2151.23 1214.25 L2151.81 1214.25 L2152.4 1214.25 L2152.99 1214.25 L2153.57 1214.25 L2154.16 1214.25 L2154.75 1214.25 L2155.33 1214.25 L2155.92 1214.25 L2156.5 1214.25 L2157.09 1214.25 L2157.68 1214.25 L2158.26 1214.25 L2158.26 1213.59 L2157.68 1213.59 L2157.09 1213.59 L2156.5 1213.59 L2155.92 1213.59 L2155.33 1213.59 L2154.75 1213.59 L2154.16 1213.59 L2153.57 1213.59 L2152.99 1213.59 L2152.4 1213.59 L2151.81 1213.59 L2151.23 1213.59 L2150.64 1213.59 L2150.05 1213.59 L2149.47 1213.59 L2148.88 1213.59 L2148.3 1213.59 L2147.71 1213.59 L2147.12 1213.59 L2146.54 1213.59 L2145.95 1213.59 L2145.36 1213.59 L2144.78 1213.59 L2144.19 1213.59 L2143.6 1213.59 L2143.02 1213.59 L2142.43 1213.59 L2141.84 1213.59 L2141.26 1213.59 L2140.67 1213.59 L2140.09 1213.59 L2139.5 1213.59 L2138.91 1213.59 L2138.33 1213.59 L2137.74 1213.59 L2137.15 1213.59 L2136.57 1213.59 L2135.98 1213.59 L2135.39 1213.59 L2134.81 1213.59 L2134.22 1213.59 L2133.63 1213.59 L2133.05 1213.59 L2132.46 1213.59 L2131.88 1213.59 L2131.29 1213.59 L2130.7 1213.59 L2130.12 1213.59 L2129.53 1213.59 L2128.94 1213.59 L2128.36 1213.59 L2127.77 1213.59 L2127.18 1213.59 L2126.6 1213.59 L2126.01 1213.59 L2125.42 1213.59 L2124.84 1213.59 L2124.25 1213.59 L2123.67 1213.59 L2123.08 1213.59 L2122.49 1213.59 L2121.91 1213.59 L2121.32 1213.59 L2120.73 1213.59 L2120.15 1213.59 L2119.56 1213.59 L2118.97 1213.59 L2118.39 1213.59 L2117.8 1213.59 L2117.22 1213.59 L2116.63 1213.59 L2116.04 1213.59 L2115.46 1213.59 L2114.87 1213.59 L2114.28 1213.59 L2113.7 1213.59 L2113.11 1213.59 L2112.52 1213.59 L2111.94 1213.59 L2111.35 1213.59 L2110.76 1213.59 L2110.18 1213.59 L2109.59 1213.59 L2109.01 1213.59 L2108.42 1213.59 L2107.83 1213.59 L2107.25 1213.59 L2106.66 1213.59 L2106.07 1213.59 L2105.49 1213.59 L2104.9 1213.59 L2104.31 1213.59 L2103.73 1213.59 L2103.14 1213.59 L2102.55 1213.59 L2101.97 1213.59 L2101.38 1213.59 L2100.8 1213.59 L2100.21 1213.59 L2099.62 1213.59 L2099.04 1213.59 L2098.45 1213.59 L2097.86 1213.59 L2097.28 1213.59 L2096.69 1213.59 L2096.1 1213.59 L2095.52 1213.59 L2094.93 1213.59 L2094.35 1213.59 L2093.76 1213.59 L2093.17 1213.59 L2092.59 1213.59 L2092 1213.59 L2091.41 1213.59 L2090.83 1213.59 L2090.24 1213.59 L2089.65 1213.59 L2089.07 1213.59 L2088.48 1213.59 L2087.89 1213.59 L2087.31 1213.59 L2086.72 1213.59 L2086.14 1213.59 L2085.55 1213.59 L2084.96 1213.59 L2084.38 1213.59 L2083.79 1213.59 L2083.2 1213.59 L2082.62 1213.59 L2082.03 1213.59 L2081.44 1213.59 L2080.86 1213.59 L2080.27 1213.59 L2079.68 1213.59 L2079.1 1213.59 L2078.51 1213.59 L2077.93 1213.59 L2077.34 1213.59 L2076.75 1213.59 L2076.17 1213.59 L2075.58 1213.59 L2074.99 1213.59 L2074.41 1213.59 L2073.82 1213.59 L2073.23 1213.59 L2072.65 1213.59 L2072.06 1213.59 L2071.48 1213.59 L2070.89 1213.59 L2070.3 1213.59 L2069.72 1213.59 L2069.13 1213.59 L2068.54 1213.59 L2067.96 1213.59 L2067.37 1213.59 L2066.78 1213.59 L2066.2 1213.59 L2065.61 1213.59 L2065.02 1213.59 L2064.44 1213.59 L2063.85 1213.59 L2063.27 1213.59 L2062.68 1213.59 L2062.09 1213.59 L2061.51 1213.59 L2060.92 1213.59 L2060.33 1213.59 L2059.75 1213.59 L2059.16 1213.59 L2058.57 1213.59 L2057.99 1213.59 L2057.4 1213.59 L2056.81 1213.59 L2056.23 1213.59 L2055.64 1213.59 L2055.06 1213.59 L2054.47 1213.59 L2053.88 1213.59 L2053.3 1213.59 L2052.71 1213.59 L2052.12 1213.59 L2051.54 1213.59 L2050.95 1213.59 L2050.36 1213.59 L2049.78 1213.59 L2049.19 1213.59 L2048.6 1213.59 L2048.02 1213.59 L2047.43 1213.59 L2046.85 1213.59 L2046.26 1213.59 L2045.67 1213.59 L2045.09 1213.59 L2044.5 1213.59 L2043.91 1213.59 L2043.33 1213.59 L2042.74 1213.59 L2042.15 1213.59 L2041.57 1213.59 L2040.98 1213.59 L2040.4 1213.59 L2039.81 1213.59 L2039.22 1213.59 L2038.64 1213.59 L2038.05 1213.59 L2037.46 1213.59 L2036.88 1213.59 L2036.29 1213.59 L2035.7 1213.59 L2035.12 1213.59 L2034.53 1213.59 L2033.94 1213.59 L2033.36 1213.59 L2032.77 1213.59 L2032.19 1213.59 L2031.6 1213.59 L2031.01 1213.59 L2030.43 1213.59 L2029.84 1213.59 L2029.25 1213.59 L2028.67 1213.59 L2028.08 1213.59 L2027.49 1213.59 L2026.91 1213.59 L2026.32 1213.59 L2025.73 1213.59 L2025.15 1213.59 L2024.56 1213.59 L2023.98 1213.59 L2023.39 1213.59 L2022.8 1213.59 L2022.22 1213.59 L2021.63 1213.59 L2021.04 1213.59 L2020.46 1213.59 L2019.87 1213.59 L2019.28 1213.59 L2018.7 1213.59 L2018.11 1213.59 L2017.53 1213.59 L2016.94 1213.59 L2016.35 1213.59 L2015.77 1213.59 L2015.18 1213.59 L2014.59 1213.59 L2014.01 1213.59 L2013.42 1213.59 L2012.83 1213.59 L2012.25 1213.59 L2011.66 1213.59 L2011.07 1213.59 L2010.49 1213.59 L2009.9 1213.59 L2009.32 1213.59 L2008.73 1213.59 L2008.14 1213.59 L2007.56 1213.59 L2006.97 1213.59 L2006.38 1213.59 L2005.8 1213.59 L2005.21 1213.59 L2004.62 1213.59 L2004.04 1213.59 L2003.45 1213.59 L2002.86 1213.59 L2002.28 1213.59 L2001.69 1213.59 L2001.11 1213.59 L2000.52 1213.59 L1999.93 1213.59 L1999.35 1213.59 L1998.76 1213.59 L1998.17 1213.59 L1997.59 1213.59 L1997 1213.59 L1996.41 1213.59 L1995.83 1213.59 L1995.24 1213.59 L1994.65 1213.59 L1994.07 1213.59 L1993.48 1213.59 L1992.9 1213.59 L1992.31 1213.59 L1991.72 1213.59 L1991.14 1213.59 L1990.55 1213.59 L1989.96 1213.59 L1989.38 1213.59 L1988.79 1213.59 L1988.2 1213.59 L1987.62 1213.59 L1987.03 1213.59 L1986.45 1213.59 L1985.86 1213.59 L1985.27 1213.59 L1984.69 1213.59 L1984.1 1213.59 L1983.51 1213.59 L1982.93 1213.59 L1982.34 1213.59 L1981.75 1213.59 L1981.17 1213.59 L1980.58 1213.59 L1979.99 1213.59 L1979.41 1213.59 L1978.82 1213.59 L1978.24 1213.59 L1977.65 1213.59 L1977.06 1213.59 L1976.48 1213.59 L1975.89 1213.59 L1975.3 1213.59 L1974.72 1213.59 L1974.13 1213.59 L1973.54 1213.59 L1972.96 1213.59 L1972.37 1213.59 L1971.78 1213.59 L1971.2 1213.59 L1970.61 1213.59 L1970.03 1213.59 L1969.44 1213.59 L1968.85 1213.59 L1968.27 1213.59 L1967.68 1213.59 L1967.09 1213.59 L1966.51 1213.59 L1965.92 1213.59 L1965.33 1213.59 L1964.75 1213.59 L1964.16 1213.59 L1963.58 1213.59 L1962.99 1213.59 L1962.4 1213.59 L1961.82 1213.59 L1961.23 1213.59 L1960.64 1213.59 L1960.06 1213.59 L1959.47 1213.59 L1958.88 1213.59 L1958.3 1213.59 L1957.71 1213.59 L1957.12 1213.59 L1956.54 1213.59 L1955.95 1213.59 L1955.37 1213.59 L1954.78 1213.59 L1954.19 1213.59 L1953.61 1213.59 L1953.02 1213.59 L1952.43 1213.59 L1951.85 1213.59 L1951.26 1213.59 L1950.67 1213.59 L1950.09 1213.59 L1949.5 1213.59 L1948.91 1213.59 L1948.33 1213.59 L1947.74 1213.59 L1947.16 1213.59 L1946.57 1213.59 L1945.98 1213.59 L1945.4 1213.59 L1944.81 1213.59 L1944.22 1213.59 L1943.64 1213.59 L1943.05 1213.59 L1942.46 1213.59 L1941.88 1213.59 L1941.29 1213.59 L1940.71 1213.59 L1940.12 1213.59 L1939.53 1213.59 L1938.95 1213.59 L1938.36 1213.59 L1937.77 1213.59 L1937.19 1213.59 L1936.6 1213.59 L1936.01 1213.59 L1935.43 1213.59 L1934.84 1213.59 L1934.25 1213.59 L1933.67 1213.59 L1933.08 1213.59 L1932.5 1213.59 L1931.91 1213.59 L1931.32 1213.59 L1930.74 1213.59 L1930.15 1213.59 L1929.56 1213.59 L1928.98 1213.59 L1928.39 1213.59 L1927.8 1213.59 L1927.22 1213.59 L1926.63 1213.59 L1926.04 1213.59 L1925.46 1213.59 L1924.87 1213.59 L1924.29 1213.59 L1923.7 1213.59 L1923.11 1213.59 L1922.53 1213.59 L1921.94 1213.59 L1921.35 1213.59 L1920.77 1213.59 L1920.18 1213.59 L1919.59 1213.59 L1919.01 1213.59 L1918.42 1213.59 L1917.83 1213.59 L1917.25 1213.59 L1916.66 1213.59 L1916.08 1213.59 L1915.49 1213.59 L1914.9 1213.59 L1914.32 1213.59 L1913.73 1213.59 L1913.14 1213.59 L1912.56 1213.59 L1911.97 1213.59 L1911.38 1213.59 L1910.8 1213.59 L1910.21 1213.59 L1909.63 1213.59 L1909.04 1213.59 L1908.45 1213.59 L1907.87 1213.59 L1907.28 1213.59 L1906.69 1213.59 L1906.11 1213.59 L1905.52 1213.59 L1904.93 1213.59 L1904.35 1213.59 L1903.76 1213.59 L1903.17 1213.59 L1902.59 1213.59 L1902 1213.59 L1901.42 1213.59 L1900.83 1213.59 L1900.24 1213.59 L1899.66 1213.59 L1899.07 1213.59 L1898.48 1213.59 L1897.9 1213.59 L1897.31 1213.59 L1896.72 1213.59 L1896.14 1213.59 L1895.55 1213.59 L1894.96 1213.59 L1894.38 1213.59 L1893.79 1213.59 L1893.21 1213.59 L1892.62 1213.59 L1892.03 1213.59 L1891.45 1213.59 L1890.86 1213.59 L1890.27 1213.59 L1889.69 1213.59 L1889.1 1213.59 L1888.51 1213.59 L1887.93 1213.59 L1887.34 1213.59 L1886.76 1213.59 L1886.17 1213.59 L1885.58 1213.59 L1885 1213.59 L1884.41 1213.59 L1883.82 1213.59 L1883.24 1213.59 L1882.65 1213.59 L1882.06 1213.59 L1881.48 1213.59 L1880.89 1213.59 L1880.3 1213.59 L1879.72 1213.59 L1879.13 1213.59 L1878.55 1213.59 L1877.96 1213.59 L1877.37 1213.59 L1876.79 1213.59 L1876.2 1213.59 L1875.61 1213.59 L1875.03 1213.59 L1874.44 1213.59 L1873.85 1213.59 L1873.27 1213.59 L1872.68 1213.59 L1872.09 1213.59 L1871.51 1213.59 L1870.92 1213.59 L1870.34 1213.59 L1869.75 1213.59 L1869.16 1213.59 L1868.58 1213.59 L1867.99 1213.59 L1867.4 1213.59 L1866.82 1213.59 L1866.23 1213.59 L1865.64 1213.59 L1865.06 1213.59 L1864.47 1213.59 L1863.88 1213.59 L1863.3 1213.59 L1862.71 1213.59 L1862.13 1213.59 L1861.54 1213.59 L1860.95 1213.59 L1860.37 1213.59 L1859.78 1213.59 L1859.19 1213.59 L1858.61 1213.59 L1858.02 1213.59 L1857.43 1213.59 L1856.85 1213.59 L1856.26 1213.59 L1855.68 1213.59 L1855.09 1213.59 L1854.5 1213.59 L1853.92 1213.59 L1853.33 1213.59 L1852.74 1213.59 L1852.16 1213.59 L1851.57 1213.59 L1850.98 1213.59 L1850.4 1213.59 L1849.81 1213.59 L1849.22 1213.59 L1848.64 1213.59 L1848.05 1213.59 L1847.47 1213.59 L1846.88 1213.59 L1846.29 1213.59 L1845.71 1213.59 L1845.12 1213.59 L1844.53 1213.59 L1843.95 1213.59 L1843.36 1213.59 L1842.77 1213.59 L1842.19 1213.59 L1841.6 1213.59 L1841.01 1213.59 L1840.43 1213.59 L1839.84 1213.59 L1839.26 1213.59 L1838.67 1213.59 L1838.08 1213.59 L1837.5 1213.59 L1836.91 1213.59 L1836.32 1213.59 L1835.74 1213.59 L1835.15 1213.59 L1834.56 1213.59 L1833.98 1213.59 L1833.39 1213.59 L1832.81 1213.59 L1832.22 1213.59 L1831.63 1213.59 L1831.05 1213.59 L1830.46 1213.59 L1829.87 1213.59 L1829.29 1213.59 L1828.7 1213.59 L1828.11 1213.59 L1827.53 1213.59 L1826.94 1213.59 L1826.35 1213.59 L1825.77 1213.59 L1825.18 1213.59 L1824.6 1213.59 L1824.01 1213.59 L1823.42 1213.59 L1822.84 1213.59 L1822.25 1213.59 L1821.66 1213.59 L1821.08 1213.59 L1820.49 1213.59 L1819.9 1213.59 L1819.32 1213.59 L1818.73 1213.59 L1818.14 1213.59 L1817.56 1213.59 L1816.97 1213.59 L1816.39 1213.59 L1815.8 1213.59 L1815.21 1213.59 L1814.63 1213.59 L1814.04 1213.59 L1813.45 1213.59 L1812.87 1213.59 L1812.28 1213.59 L1811.69 1213.59 L1811.11 1213.59 L1810.52 1213.59 L1809.94 1213.59 L1809.35 1213.59 L1808.76 1213.59 L1808.18 1213.59 L1807.59 1213.59 L1807 1213.59 L1806.42 1213.59 L1805.83 1213.59 L1805.24 1213.59 L1804.66 1213.59 L1804.07 1213.59 L1803.48 1213.59 L1802.9 1213.59 L1802.31 1213.59 L1801.73 1213.59 L1801.14 1213.59 L1800.55 1213.59 L1799.97 1213.59 L1799.38 1213.59 L1798.79 1213.59 L1798.21 1213.59 L1797.62 1213.59 L1797.03 1213.59 L1796.45 1213.59 L1795.86 1213.59 L1795.27 1213.59 L1794.69 1213.59 L1794.1 1213.59 L1793.52 1213.59 L1792.93 1213.59 L1792.34 1213.59 L1791.76 1213.59 L1791.17 1213.59 L1790.58 1213.59 L1790 1213.59 L1789.41 1213.59 L1788.82 1213.59 L1788.24 1213.59 L1787.65 1213.59 L1787.06 1213.59 L1786.48 1213.59 L1785.89 1213.59 L1785.31 1213.59 L1784.72 1213.59 L1784.13 1213.59 L1783.55 1213.59 L1782.96 1213.59 L1782.37 1213.59 L1781.79 1213.59 L1781.2 1213.59 L1780.61 1213.59 L1780.03 1213.59 L1779.44 1213.59 L1778.86 1213.59 L1778.27 1213.59 L1777.68 1213.59 L1777.1 1213.59 L1776.51 1213.59 L1775.92 1213.59 L1775.34 1213.59 L1774.75 1213.59 L1774.16 1213.59 L1773.58 1213.59 L1772.99 1213.59 L1772.4 1213.59 L1771.82 1213.59 L1771.23 1213.59 L1770.65 1213.59 L1770.06 1213.59 L1769.47 1213.59 L1768.89 1213.59 L1768.3 1213.59 L1767.71 1213.59 L1767.13 1213.59 L1766.54 1213.59 L1765.95 1213.59 L1765.37 1213.59 L1764.78 1213.59 L1764.19 1213.59 L1763.61 1213.59 L1763.02 1213.59 L1762.44 1213.59 L1761.85 1213.59 L1761.26 1213.59 L1760.68 1213.59 L1760.09 1213.59 L1759.5 1213.59 L1758.92 1213.59 L1758.33 1213.59 L1757.74 1213.59 L1757.16 1213.59 L1756.57 1213.59 L1755.99 1213.59 L1755.4 1213.59 L1754.81 1213.59 L1754.23 1213.59 L1753.64 1213.59 L1753.05 1213.59 L1752.47 1213.59 L1751.88 1213.59 L1751.29 1213.59 L1750.71 1213.59 L1750.12 1213.59 L1749.53 1213.59 L1748.95 1213.59 L1748.36 1213.59 L1747.78 1213.59 L1747.19 1213.59 L1746.6 1213.59 L1746.02 1213.59 L1745.43 1213.59 L1744.84 1213.59 L1744.26 1213.59 L1743.67 1213.59 L1743.08 1213.59 L1742.5 1213.59 L1741.91 1213.59 L1741.32 1213.59 L1740.74 1213.59 L1740.15 1213.59 L1739.57 1213.59 L1738.98 1213.59 L1738.39 1213.59 L1737.81 1213.59 L1737.22 1213.59 L1736.63 1213.59 L1736.05 1213.59 L1735.46 1213.59 L1734.87 1213.59 L1734.29 1213.59 L1733.7 1213.59 L1733.11 1213.59 L1732.53 1213.59 L1731.94 1213.59 L1731.36 1213.59 L1730.77 1213.59 L1730.18 1213.59 L1729.6 1213.59 L1729.01 1213.59 L1728.42 1213.59 L1727.84 1213.59 L1727.25 1213.59 L1726.66 1213.59 L1726.08 1213.59 L1725.49 1213.59 L1724.91 1213.59 L1724.32 1213.59 L1723.73 1213.59 L1723.15 1213.59 L1722.56 1213.59 L1721.97 1213.59 L1721.39 1213.59 L1720.8 1213.59 L1720.21 1213.59 L1719.63 1213.59 L1719.04 1213.59 L1718.45 1213.59 L1717.87 1213.59 L1717.28 1213.59 L1716.7 1213.59 L1716.11 1213.59 L1715.52 1213.59 L1714.94 1213.59 L1714.35 1213.59 L1713.76 1213.59 L1713.18 1213.59 L1712.59 1213.59 L1712 1213.59 L1711.42 1213.59 L1710.83 1213.59 L1710.24 1213.59 L1709.66 1213.59 L1709.07 1213.59 L1708.49 1213.59 L1707.9 1213.59 L1707.31 1213.59 L1706.73 1213.59 L1706.14 1213.59 L1705.55 1213.59 L1704.97 1213.59 L1704.38 1213.59 L1703.79 1213.59 L1703.21 1213.59 L1702.62 1213.59 L1702.04 1213.59 L1701.45 1213.59 L1700.86 1213.59 L1700.28 1213.59 L1699.69 1213.59 L1699.1 1213.59 L1698.52 1213.59 L1697.93 1213.59 L1697.34 1213.59 L1696.76 1213.59 L1696.17 1213.59 L1695.58 1213.59 L1695 1213.59 L1694.41 1213.59 L1693.83 1213.59 L1693.24 1213.59 L1692.65 1213.59 L1692.07 1213.59 L1691.48 1213.59 L1690.89 1213.59 L1690.31 1213.59 L1689.72 1213.59 L1689.13 1213.59 L1688.55 1213.59 L1687.96 1213.59 L1687.37 1213.59 L1686.79 1213.59 L1686.2 1213.59 L1685.62 1213.59 L1685.03 1213.59 L1684.44 1213.59 L1683.86 1213.59 L1683.27 1213.59 L1682.68 1213.59 L1682.1 1213.59 L1681.51 1213.59 L1680.92 1213.59 L1680.34 1213.59 L1679.75 1213.59 L1679.17 1213.59 L1678.58 1213.59 L1677.99 1213.59 L1677.41 1213.59 L1676.82 1213.59 L1676.23 1213.59 L1675.65 1213.59 L1675.06 1213.59 L1674.47 1213.59 L1673.89 1213.59 L1673.3 1213.59 L1672.71 1213.59 L1672.13 1213.59 L1671.54 1213.59 L1670.96 1213.59 L1670.37 1213.59 L1669.78 1213.59 L1669.2 1213.59 L1668.61 1213.59 L1668.02 1213.59 L1667.44 1213.59 L1666.85 1213.59 L1666.26 1213.59 L1665.68 1213.59 L1665.09 1213.59 L1664.5 1213.59 L1663.92 1213.59 L1663.33 1213.59 L1662.75 1213.59 L1662.16 1213.59 L1661.57 1213.59 L1660.99 1213.59 L1660.4 1213.59 L1659.81 1213.59 L1659.23 1213.59 L1658.64 1213.59 L1658.05 1213.59 L1657.47 1213.59 L1656.88 1213.59 L1656.29 1213.59 L1655.71 1213.59 L1655.12 1213.59 L1654.54 1213.59 L1653.95 1213.59 L1653.36 1213.59 L1652.78 1213.59 L1652.19 1213.59 L1651.6 1213.59 L1651.02 1213.59 L1650.43 1213.59 L1649.84 1213.59 L1649.26 1213.59 L1648.67 1213.59 L1648.09 1213.59 L1647.5 1213.59 L1646.91 1213.59 L1646.33 1213.59 L1645.74 1213.59 L1645.15 1213.59 L1644.57 1213.59 L1643.98 1213.59 L1643.39 1213.59 L1642.81 1213.59 L1642.22 1213.59 L1641.63 1213.59 L1641.05 1213.59 L1640.46 1213.59 L1639.88 1213.59 L1639.29 1213.59 L1638.7 1213.59 L1638.12 1213.59 L1637.53 1213.59 L1636.94 1213.59 L1636.36 1213.59 L1635.77 1213.59 L1635.18 1213.59 L1634.6 1213.59 L1634.01 1213.59 L1633.42 1213.59 L1632.84 1213.59 L1632.25 1213.59 L1631.67 1213.59 L1631.08 1213.59 L1630.49 1213.59 L1629.91 1213.59 L1629.32 1213.59 L1628.73 1213.59 L1628.15 1213.59 L1627.56 1213.59 L1626.97 1213.59 L1626.39 1213.59 L1625.8 1213.59 L1625.22 1213.59 L1624.63 1213.59 L1624.04 1213.59 L1623.46 1213.59 L1622.87 1213.59 L1622.28 1213.59 L1621.7 1213.59 L1621.11 1213.59 L1620.52 1213.59 L1619.94 1213.59 L1619.35 1213.59 L1618.76 1213.59 L1618.18 1213.59 L1617.59 1213.59 L1617.01 1213.59 L1616.42 1213.59 L1615.83 1213.59 L1615.25 1213.59 L1614.66 1213.59 L1614.07 1213.59 L1613.49 1213.59 L1612.9 1213.59 L1612.31 1213.59 L1611.73 1213.59 L1611.14 1213.59 L1610.55 1213.59 L1609.97 1213.59 L1609.38 1213.59 L1608.8 1213.59 L1608.21 1213.59 L1607.62 1213.59 L1607.04 1213.59 L1606.45 1213.59 L1605.86 1213.59 L1605.28 1213.59 L1604.69 1213.59 L1604.1 1213.59 L1603.52 1213.59 L1602.93 1213.59 L1602.34 1213.59 L1601.76 1213.59 L1601.17 1213.59 L1600.59 1213.59 L1600 1213.59 L1599.41 1213.59 L1598.83 1213.59 L1598.24 1213.59 L1597.65 1213.59 L1597.07 1213.59 L1596.48 1213.59 L1595.89 1213.59 L1595.31 1213.59 L1594.72 1213.59 L1594.14 1213.59 L1593.55 1213.59 L1592.96 1213.59 L1592.38 1213.59 L1591.79 1213.59 L1591.2 1213.59 L1590.62 1213.59 L1590.03 1213.59 L1589.44 1213.59 L1588.86 1213.59 L1588.27 1213.59 L1587.68 1213.59 L1587.1 1213.59 L1586.51 1213.59 L1585.93 1213.59 L1585.34 1213.59 L1584.75 1213.59 L1584.17 1213.59 L1583.58 1213.59 L1582.99 1213.59 L1582.41 1213.59 L1581.82 1213.59 L1581.23 1213.59 L1580.65 1213.59 L1580.06 1213.59 L1579.47 1213.59 L1578.89 1213.59 L1578.3 1213.59 L1577.72 1213.59 L1577.13 1213.59 L1576.54 1213.59 L1575.96 1213.59 L1575.37 1213.59 L1574.78 1213.59 L1574.2 1213.59 L1573.61 1213.59 L1573.02 1213.59 L1572.44 1213.59 L1571.85 1213.59 L1571.27 1213.59 L1570.68 1213.59 L1570.09 1213.59 L1569.51 1213.59 L1568.92 1213.59 L1568.33 1213.59 L1567.75 1213.59 L1567.16 1213.59 L1566.57 1213.59 L1565.99 1213.59 L1565.4 1213.59 L1564.81 1213.59 L1564.23 1213.59 L1563.64 1213.59 L1563.06 1213.59 L1562.47 1213.59 L1561.88 1213.59 L1561.3 1213.59 L1560.71 1213.59 L1560.12 1213.59 L1559.54 1213.59 L1558.95 1213.59 L1558.36 1213.59 L1557.78 1213.59 L1557.19 1213.59 L1556.6 1213.59 L1556.02 1213.59 L1555.43 1213.59 L1554.85 1213.59 L1554.26 1213.59 L1553.67 1213.59 L1553.09 1213.59 L1552.5 1213.59 L1551.91 1213.59 L1551.33 1213.59 L1550.74 1213.59 L1550.15 1213.59 L1549.57 1213.59 L1548.98 1213.59 L1548.4 1213.59 L1547.81 1213.59 L1547.22 1213.59 L1546.64 1213.59 L1546.05 1213.59 L1545.46 1213.59 L1544.88 1213.59 L1544.29 1213.59 L1543.7 1213.59 L1543.12 1213.59 L1542.53 1213.59 L1541.94 1213.59 L1541.36 1213.59 L1540.77 1213.59 L1540.19 1213.59 L1539.6 1213.59 L1539.01 1213.59 L1538.43 1213.59 L1537.84 1213.59 L1537.25 1213.59 L1536.67 1213.59 L1536.08 1213.59 L1535.49 1213.59 L1534.91 1213.59 L1534.32 1213.59 L1533.73 1213.59 L1533.15 1213.59 L1532.56 1213.59 L1531.98 1213.59 L1531.39 1213.59 L1530.8 1213.59 L1530.22 1213.59 L1529.63 1213.59 L1529.04 1213.59 L1528.46 1213.59 L1527.87 1213.59 L1527.28 1213.59 L1526.7 1213.59 L1526.11 1213.59 L1525.52 1213.59 L1524.94 1213.59 L1524.35 1213.59 L1523.77 1213.59 L1523.18 1213.59 L1522.59 1213.59 L1522.01 1213.59 L1521.42 1213.59 L1520.83 1213.59 L1520.25 1213.59 L1519.66 1213.59 L1519.07 1213.59 L1518.49 1213.59 L1517.9 1213.59 L1517.32 1213.59 L1516.73 1213.59 L1516.14 1213.59 L1515.56 1213.59 L1514.97 1213.59 L1514.38 1213.59 L1513.8 1213.59 L1513.21 1213.59 L1512.62 1213.59 L1512.04 1213.59 L1511.45 1213.59 L1510.86 1213.59 L1510.28 1213.59 L1509.69 1213.59 L1509.11 1213.59 L1508.52 1213.59 L1507.93 1213.59 L1507.35 1213.59 L1506.76 1213.59 L1506.17 1213.59 L1505.59 1213.59 L1505 1213.59 L1504.41 1213.59 L1503.83 1213.59 L1503.24 1213.59 L1502.65 1213.59 L1502.07 1213.59 L1501.48 1213.59 L1500.9 1213.59 L1500.31 1213.59 L1499.72 1213.59 L1499.14 1213.59 L1498.55 1213.59 L1497.96 1213.59 L1497.38 1213.59 L1496.79 1213.59 L1496.2 1213.59 L1495.62 1213.59 L1495.03 1213.59 L1494.45 1213.59 L1493.86 1213.59 L1493.27 1213.59 L1492.69 1213.59 L1492.1 1213.59 L1491.51 1213.59 L1490.93 1213.59 L1490.34 1213.59 L1489.75 1213.59 L1489.17 1213.59 L1488.58 1213.59 L1487.99 1213.59 L1487.41 1213.59 L1486.82 1213.59 L1486.24 1213.59 L1485.65 1213.59 L1485.06 1213.59 L1484.48 1213.59 L1483.89 1213.59 L1483.3 1213.59 L1482.72 1213.59 L1482.13 1213.59 L1481.54 1213.59 L1480.96 1213.59 L1480.37 1213.59 L1479.78 1213.59 L1479.2 1213.59 L1478.61 1213.59 L1478.03 1213.59 L1477.44 1213.59 L1476.85 1213.59 L1476.27 1213.59 L1475.68 1213.59 L1475.09 1213.59 L1474.51 1213.59 L1473.92 1213.59 L1473.33 1213.59 L1472.75 1213.59 L1472.16 1213.59 L1471.57 1213.59 L1470.99 1213.59 L1470.4 1213.59 L1469.82 1213.59 L1469.23 1213.59 L1468.64 1213.59 L1468.06 1213.59 L1467.47 1213.59 L1466.88 1213.59 L1466.3 1213.59 L1465.71 1213.59 L1465.12 1213.59 L1464.54 1213.59 L1463.95 1213.59 L1463.37 1213.59 L1462.78 1213.59 L1462.19 1213.59 L1461.61 1213.59 L1461.02 1213.59 L1460.43 1213.59 L1459.85 1213.59 L1459.26 1213.59 L1458.67 1213.59 L1458.09 1213.59 L1457.5 1213.59 L1456.91 1213.59 L1456.33 1213.59 L1455.74 1213.59 L1455.16 1213.59 L1454.57 1213.59 L1453.98 1213.59 L1453.4 1213.59 L1452.81 1213.59 L1452.22 1213.59 L1451.64 1213.59 L1451.05 1213.59 L1450.46 1213.59 L1449.88 1213.59 L1449.29 1213.59 L1448.7 1213.59 L1448.12 1213.59 L1447.53 1213.59 L1446.95 1213.59 L1446.36 1213.59 L1445.77 1213.59 L1445.19 1213.59 L1444.6 1213.59 L1444.01 1213.59 L1443.43 1213.59 L1442.84 1213.59 L1442.25 1213.59 L1441.67 1213.59 L1441.08 1213.59 L1440.5 1213.59 L1439.91 1213.59 L1439.32 1213.59 L1438.74 1213.59 L1438.15 1213.59 L1437.56 1213.59 L1436.98 1213.59 L1436.39 1213.59 L1435.8 1213.59 L1435.22 1213.59 L1434.63 1213.59 L1434.04 1213.59 L1433.46 1213.59 L1432.87 1213.59 L1432.29 1213.59 L1431.7 1213.59 L1431.11 1213.59 L1430.53 1213.59 L1429.94 1213.59 L1429.35 1213.59 L1428.77 1213.59 L1428.18 1213.59 L1427.59 1213.59 L1427.01 1213.59 L1426.42 1213.59 L1425.83 1213.59 L1425.25 1213.59 L1424.66 1213.59 L1424.08 1213.59 L1423.49 1213.59 L1422.9 1213.59 L1422.32 1213.59 L1421.73 1213.59 L1421.14 1213.59 L1420.56 1213.59 L1419.97 1213.59 L1419.38 1213.59 L1418.8 1213.59 L1418.21 1213.59 L1417.63 1213.59 L1417.04 1213.59 L1416.45 1213.59 L1415.87 1213.59 L1415.28 1213.59 L1414.69 1213.59 L1414.11 1213.59 L1413.52 1213.59 L1412.93 1213.59 L1412.35 1213.59 L1411.76 1213.59 L1411.17 1213.59 L1410.59 1213.59 L1410 1213.59 L1409.42 1213.59 L1408.83 1213.59 L1408.24 1213.59 L1407.66 1213.59 L1407.07 1213.59 L1406.48 1213.59 L1405.9 1213.59 L1405.31 1213.59 L1404.72 1213.59 L1404.14 1213.59 L1403.55 1213.59 L1402.96 1213.59 L1402.38 1213.59 L1401.79 1213.59 L1401.21 1213.59 L1400.62 1213.59 L1400.03 1213.59 L1399.45 1213.59 L1398.86 1213.59 L1398.27 1213.59 L1397.69 1213.59 L1397.1 1213.59 L1396.51 1213.59 L1395.93 1213.59 L1395.34 1213.59 L1394.75 1213.59 L1394.17 1213.59 L1393.58 1213.59 L1393 1213.59 L1392.41 1213.59 L1391.82 1213.59 L1391.24 1213.59 L1390.65 1213.59 L1390.06 1213.59 L1389.48 1213.59 L1388.89 1213.59 L1388.3 1213.59 L1387.72 1213.59 L1387.13 1213.59 L1386.55 1213.59 L1385.96 1213.59 L1385.37 1213.59 L1384.79 1213.59 L1384.2 1213.59 L1383.61 1213.59 L1383.03 1213.59 L1382.44 1213.59 L1381.85 1213.59 L1381.27 1213.59 L1380.68 1213.59 L1380.09 1213.59 L1379.51 1213.59 L1378.92 1213.59 L1378.34 1213.59 L1377.75 1213.59 L1377.16 1213.59 L1376.58 1213.59 L1375.99 1213.59 L1375.4 1213.59 L1374.82 1213.59 L1374.23 1213.59 L1373.64 1213.59 L1373.06 1213.59 L1372.47 1213.59 L1371.88 1213.59 L1371.3 1213.59 L1370.71 1213.59 L1370.13 1213.59 L1369.54 1213.59 L1368.95 1213.59 L1368.37 1213.59 L1367.78 1213.59 L1367.19 1213.59 L1366.61 1213.59 L1366.02 1213.59 L1365.43 1213.59 L1364.85 1213.59 L1364.26 1213.59 L1363.68 1213.59 L1363.09 1213.59 L1362.5 1213.59 L1361.92 1213.59 L1361.33 1213.59 L1360.74 1213.59 L1360.16 1213.59 L1359.57 1213.59 L1358.98 1213.59 L1358.4 1213.59 L1357.81 1213.59 L1357.22 1213.59 L1356.64 1213.59 L1356.05 1213.59 L1355.47 1213.59 L1354.88 1213.59 L1354.29 1213.59 L1353.71 1213.59 L1353.12 1213.59 L1352.53 1213.59 L1351.95 1213.59 L1351.36 1213.59 L1350.77 1213.59 L1350.19 1213.59 L1349.6 1213.59 L1349.01 1213.59 L1348.43 1213.59 L1347.84 1213.59 L1347.26 1213.59 L1346.67 1213.59 L1346.08 1213.59 L1345.5 1213.59 L1344.91 1213.59 L1344.32 1213.59 L1343.74 1213.59 L1343.15 1213.59 L1342.56 1213.59 L1341.98 1213.59 L1341.39 1213.59 L1340.8 1213.59 L1340.22 1213.59 L1339.63 1213.59 L1339.05 1213.59 L1338.46 1213.59 L1337.87 1213.59 L1337.29 1213.59 L1336.7 1213.59 L1336.11 1213.59 L1335.53 1213.59 L1334.94 1213.59 L1334.35 1213.59 L1333.77 1213.59 L1333.18 1213.59 L1332.6 1213.59 L1332.01 1213.59 L1331.42 1213.59 L1330.84 1213.59 L1330.25 1213.59 L1329.66 1213.59 L1329.08 1213.59 L1328.49 1213.59 L1327.9 1213.59 L1327.32 1213.59 L1326.73 1213.59 L1326.14 1213.59 L1325.56 1213.59 L1324.97 1213.59 L1324.39 1213.59 L1323.8 1213.59 L1323.21 1213.59 L1322.63 1213.59 L1322.04 1213.59 L1321.45 1213.59 L1320.87 1213.59 L1320.28 1213.59 L1319.69 1213.59 L1319.11 1213.59 L1318.52 1213.59 L1317.93 1213.59 L1317.35 1213.59 L1316.76 1213.59 L1316.18 1213.59 L1315.59 1213.59 L1315 1213.59 L1314.42 1213.59 L1313.83 1213.59 L1313.24 1213.59 L1312.66 1213.59 L1312.07 1213.59 L1311.48 1213.59 L1310.9 1213.59 L1310.31 1213.59 L1309.73 1213.59 L1309.14 1213.59 L1308.55 1213.59 L1307.97 1213.59 L1307.38 1213.59 L1306.79 1213.59 L1306.21 1213.59 L1305.62 1213.59 L1305.03 1213.59 L1304.45 1213.59 L1303.86 1213.59 L1303.27 1213.59 L1302.69 1213.59 L1302.1 1213.59 L1301.52 1213.59 L1300.93 1213.59 L1300.34 1213.59 L1299.76 1213.59 L1299.17 1213.59 L1298.58 1213.59 L1298 1213.59 L1297.41 1213.59 L1296.82 1213.59 L1296.24 1213.59 L1295.65 1213.59 L1295.06 1213.59 L1294.48 1213.59 L1293.89 1213.59 L1293.31 1213.59 L1292.72 1213.59 L1292.13 1213.59 L1291.55 1213.59 L1290.96 1213.59 L1290.37 1213.59 L1289.79 1213.59 L1289.2 1213.59 L1288.61 1213.59 L1288.03 1213.59 L1287.44 1213.59 L1286.86 1213.59 L1286.27 1213.59 L1285.68 1213.59 L1285.1 1213.59 L1284.51 1213.59 L1283.92 1213.59 L1283.34 1213.59 L1282.75 1213.59 L1282.16 1213.59 L1281.58 1213.59 L1280.99 1213.59 L1280.4 1213.59 L1279.82 1213.59 L1279.23 1213.59 L1278.65 1213.59 L1278.06 1213.59 L1277.47 1213.59 L1276.89 1213.59 L1276.3 1213.59 L1275.71 1213.59 L1275.13 1213.59 L1274.54 1213.59 L1273.95 1213.59 L1273.37 1213.59 L1272.78 1213.59 L1272.19 1213.59 L1271.61 1213.59 L1271.02 1213.59 L1270.44 1213.59 L1269.85 1213.59 L1269.26 1213.59 L1268.68 1213.59 L1268.09 1213.59 L1267.5 1213.59 L1266.92 1213.59 L1266.33 1213.59 L1265.74 1213.59 L1265.16 1213.59 L1264.57 1213.59 L1263.98 1213.59 L1263.4 1213.59 L1262.81 1213.59 L1262.23 1213.59 L1261.64 1213.59 L1261.05 1213.59 L1260.47 1213.59 L1259.88 1213.59 L1259.29 1213.59 L1258.71 1213.59 L1258.12 1213.59 L1257.53 1213.59 L1256.95 1213.59 L1256.36 1213.59 L1255.78 1213.59 L1255.19 1213.59 L1254.6 1213.59 L1254.02 1213.59 L1253.43 1213.59 L1252.84 1213.59 L1252.26 1213.59 L1251.67 1213.59 L1251.08 1213.59 L1250.5 1213.59 L1249.91 1213.59 L1249.32 1213.59 L1248.74 1213.59 L1248.15 1213.59 L1247.57 1213.59 L1246.98 1213.59 L1246.39 1213.59 L1245.81 1213.59 L1245.22 1213.59 L1244.63 1213.59 L1244.05 1213.59 L1243.46 1213.59 L1242.87 1213.59 L1242.29 1213.59 L1241.7 1213.59 L1241.11 1213.59 L1240.53 1213.59 L1239.94 1213.59 L1239.36 1213.59 L1238.77 1213.59 L1238.18 1213.59 L1237.6 1213.59 L1237.01 1213.59 L1236.42 1213.59 L1235.84 1213.59 L1235.25 1213.59 L1234.66 1213.59 L1234.08 1213.59 L1233.49 1213.59 L1232.91 1213.59 L1232.32 1213.59 L1231.73 1213.59 L1231.15 1213.59 L1230.56 1213.59 L1229.97 1213.59 L1229.39 1213.59 L1228.8 1213.59 L1228.21 1213.59 L1227.63 1213.59 L1227.04 1213.59 L1226.45 1213.59 L1225.87 1213.59 L1225.28 1213.59 L1224.7 1213.59 L1224.11 1213.59 L1223.52 1213.59 L1222.94 1213.59 L1222.35 1213.59 L1221.76 1213.59 L1221.18 1213.59 L1220.59 1213.59 L1220 1213.59 L1219.42 1213.59 L1218.83 1213.59 L1218.24 1213.59 L1217.66 1213.59 L1217.07 1213.59 L1216.49 1213.59 L1215.9 1213.59 L1215.31 1213.59 L1214.73 1213.59 L1214.14 1213.59 L1213.55 1213.59 L1212.97 1213.59 L1212.38 1213.59 L1211.79 1213.59 L1211.21 1213.59 L1210.62 1213.59 L1210.03 1213.59 L1209.45 1213.59 L1208.86 1213.59 L1208.28 1213.59 L1207.69 1213.59 L1207.1 1213.59 L1206.52 1213.59 L1205.93 1213.59 L1205.34 1213.59 L1204.76 1213.59 L1204.17 1213.59 L1203.58 1213.59 L1203 1213.59 L1202.41 1213.59 L1201.83 1213.59 L1201.24 1213.59 L1200.65 1213.59 L1200.07 1213.59 L1199.48 1213.59 L1198.89 1213.59 L1198.31 1213.59 L1197.72 1213.59 L1197.13 1213.59 L1196.55 1213.59 L1195.96 1213.59 L1195.37 1213.59 L1194.79 1213.59 L1194.2 1213.59 L1193.62 1213.59 L1193.03 1213.59 L1192.44 1213.59 L1191.86 1213.59 L1191.27 1213.59 L1190.68 1213.59 L1190.1 1213.59 L1189.51 1213.59 L1188.92 1213.59 L1188.34 1213.59 L1187.75 1213.59 L1187.16 1213.59 L1186.58 1213.59 L1185.99 1213.59 L1185.41 1213.59 L1184.82 1213.59 L1184.23 1213.59 L1183.65 1213.59 L1183.06 1213.59 L1182.47 1213.59 L1181.89 1213.59 L1181.3 1213.59 L1180.71 1213.59 L1180.13 1213.59 L1179.54 1213.59 L1178.96 1213.59 L1178.37 1213.59 L1177.78 1213.59 L1177.2 1213.59 L1176.61 1213.59 L1176.02 1213.59 L1175.44 1213.59 L1174.85 1213.59 L1174.26 1213.59 L1173.68 1213.59 L1173.09 1213.59 L1172.5 1213.59 L1171.92 1213.59 L1171.33 1213.59 L1170.75 1213.59 L1170.16 1213.59 L1169.57 1213.59 L1168.99 1213.59 L1168.4 1213.59 L1167.81 1213.59 L1167.23 1213.59 L1166.64 1213.59 L1166.05 1213.59 L1165.47 1213.59 L1164.88 1213.59 L1164.29 1213.59 L1163.71 1213.59 L1163.12 1213.59 L1162.54 1213.59 L1161.95 1213.59 L1161.36 1213.59 L1160.78 1213.59 L1160.19 1213.59 L1159.6 1213.59 L1159.02 1213.59 L1158.43 1213.59 L1157.84 1213.59 L1157.26 1213.59 L1156.67 1213.59 L1156.09 1213.59 L1155.5 1213.59 L1154.91 1213.59 L1154.33 1213.59 L1153.74 1213.59 L1153.15 1213.59 L1152.57 1213.59 L1151.98 1213.59 L1151.39 1213.59 L1150.81 1213.59 L1150.22 1213.59 L1149.63 1213.59 L1149.05 1213.59 L1148.46 1213.59 L1147.88 1213.59 L1147.29 1213.59 L1146.7 1213.59 L1146.12 1213.59 L1145.53 1213.59 L1144.94 1213.59 L1144.36 1213.59 L1143.77 1213.59 L1143.18 1213.59 L1142.6 1213.59 L1142.01 1213.59 L1141.42 1213.59 L1140.84 1213.59 L1140.25 1213.59 L1139.67 1213.59 L1139.08 1213.59 L1138.49 1213.59 L1137.91 1213.59 L1137.32 1213.59 L1136.73 1213.59 L1136.15 1213.59 L1135.56 1213.59 L1134.97 1213.59 L1134.39 1213.59 L1133.8 1213.59 L1133.21 1213.59 L1132.63 1213.59 L1132.04 1213.59 L1131.46 1213.59 L1130.87 1213.59 L1130.28 1213.59 L1129.7 1213.59 L1129.11 1213.59 L1128.52 1213.59 L1127.94 1213.59 L1127.35 1213.59 L1126.76 1213.59 L1126.18 1213.59 L1125.59 1213.59 L1125.01 1213.59 L1124.42 1213.59 L1123.83 1213.59 L1123.25 1213.59 L1122.66 1213.59 L1122.07 1213.59 L1121.49 1213.59 L1120.9 1213.59 L1120.31 1213.59 L1119.73 1213.59 L1119.14 1213.59 L1118.55 1213.59 L1117.97 1213.59 L1117.38 1213.59 L1116.8 1213.59 L1116.21 1213.59 L1115.62 1213.59 L1115.04 1213.59 L1114.45 1213.59 L1113.86 1213.59 L1113.28 1213.59 L1112.69 1213.59 L1112.1 1213.59 L1111.52 1213.59 L1110.93 1213.59 L1110.34 1213.59 L1109.76 1213.59 L1109.17 1213.59 L1108.59 1213.59 L1108 1213.59 L1107.41 1213.59 L1106.83 1213.59 L1106.24 1213.59 L1105.65 1213.59 L1105.07 1213.59 L1104.48 1213.59 L1103.89 1213.59 L1103.31 1213.59 L1102.72 1213.59 L1102.14 1213.59 L1101.55 1213.59 L1100.96 1213.59 L1100.38 1213.59 L1099.79 1213.59 L1099.2 1213.59 L1098.62 1213.59 L1098.03 1213.59 L1097.44 1213.59 L1096.86 1213.59 L1096.27 1213.59 L1095.68 1213.59 L1095.1 1213.59 L1094.51 1213.59 L1093.93 1213.59 L1093.34 1213.59 L1092.75 1213.59 L1092.17 1213.59 L1091.58 1213.59 L1090.99 1213.59 L1090.41 1213.59 L1089.82 1213.59 L1089.23 1213.59 L1088.65 1213.59 L1088.06 1213.59 L1087.47 1213.59 L1086.89 1213.59 L1086.3 1213.59 L1085.72 1213.59 L1085.13 1213.59 L1084.54 1213.59 L1083.96 1213.59 L1083.37 1213.59 L1082.78 1213.59 L1082.2 1213.59 L1081.61 1213.59 L1081.02 1213.59 L1080.44 1213.59 L1079.85 1213.59 L1079.26 1213.59 L1078.68 1213.59 L1078.09 1213.59 L1077.51 1213.59 L1076.92 1213.59 L1076.33 1213.59 L1075.75 1213.59 L1075.16 1213.59 L1074.57 1213.59 L1073.99 1213.59 L1073.4 1213.59 L1072.81 1213.59 L1072.23 1213.59 L1071.64 1213.59 L1071.06 1213.59 L1070.47 1213.59 L1069.88 1213.59 L1069.3 1213.59 L1068.71 1213.59 L1068.12 1213.59 L1067.54 1213.59 L1066.95 1213.59 L1066.36 1213.59 L1065.78 1213.59 L1065.19 1213.59 L1064.6 1213.59 L1064.02 1213.59 L1063.43 1213.59 L1062.85 1213.59 L1062.26 1213.59 L1061.67 1213.59 L1061.09 1213.59 L1060.5 1213.59 L1059.91 1213.59 L1059.33 1213.59 L1058.74 1213.59 L1058.15 1213.59 L1057.57 1213.59 L1056.98 1213.59 L1056.39 1213.59 L1055.81 1213.59 L1055.22 1213.59 L1054.64 1213.59 L1054.05 1213.59 L1053.46 1213.59 L1052.88 1213.59 L1052.29 1213.59 L1051.7 1213.59 L1051.12 1213.59 L1050.53 1213.59 L1049.94 1213.59 L1049.36 1213.59 L1048.77 1213.59 L1048.19 1213.59 L1047.6 1213.59 L1047.01 1213.59 L1046.43 1213.59 L1045.84 1213.59 L1045.25 1213.59 L1044.67 1213.59 L1044.08 1213.59 L1043.49 1213.59 L1042.91 1213.59 L1042.32 1213.59 L1041.73 1213.59 L1041.15 1213.59 L1040.56 1213.59 L1039.98 1213.59 L1039.39 1213.59 L1038.8 1213.59 L1038.22 1213.59 L1037.63 1213.59 L1037.04 1213.59 L1036.46 1213.59 L1035.87 1213.59 L1035.28 1213.59 L1034.7 1213.59 L1034.11 1213.59 L1033.52 1213.59 L1032.94 1213.59 L1032.35 1213.59 L1031.77 1213.59 L1031.18 1213.59 L1030.59 1213.59 L1030.01 1213.59 L1029.42 1213.59 L1028.83 1213.59 L1028.25 1213.59 L1027.66 1213.59 L1027.07 1213.59 L1026.49 1213.59 L1025.9 1213.59 L1025.32 1213.59 L1024.73 1213.59 L1024.14 1213.59 L1023.56 1213.59 L1022.97 1213.59 L1022.38 1213.59 L1021.8 1213.59 L1021.21 1213.59 L1020.62 1213.59 L1020.04 1213.59 L1019.45 1213.59 L1018.86 1213.59 L1018.28 1213.59 L1017.69 1213.59 L1017.11 1213.59 L1016.52 1213.59 L1015.93 1213.59 L1015.35 1213.59 L1014.76 1213.59 L1014.17 1213.59 L1013.59 1213.59 L1013 1213.59 L1012.41 1213.59 L1011.83 1213.59 L1011.24 1213.59 L1010.65 1213.59 L1010.07 1213.59 L1009.48 1213.59 L1008.9 1213.59 L1008.31 1213.59 L1007.72 1213.59 L1007.14 1213.59 L1006.55 1213.59 L1005.96 1213.59 L1005.38 1213.59 L1004.79 1213.59 L1004.2 1213.59 L1003.62 1213.59 L1003.03 1213.59 L1002.44 1213.59 L1001.86 1213.59 L1001.27 1213.59 L1000.69 1213.59 L1000.1 1213.59 L999.513 1213.59 L998.926 1213.59 L998.34 1213.59 L997.754 1213.59 L997.167 1213.59 L996.581 1213.59 L995.994 1213.59 L995.408 1213.59 L994.822 1213.59 L994.235 1213.59 L993.649 1213.59 L993.062 1213.59 L992.476 1213.59 L991.889 1213.59 L991.303 1213.59 L990.717 1213.59 L990.13 1213.59 L989.544 1213.59 L988.957 1213.59 L988.371 1213.59 L987.785 1213.59 L987.198 1213.59 L986.612 1213.59 L986.025 1213.59  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip012)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.92 986.612,1213.92 987.198,1213.92 987.785,1213.92 988.371,1213.92 988.957,1213.92 989.544,1213.92 990.13,1213.92 990.717,1213.92 991.303,1213.92 991.889,1213.92 992.476,1213.92 993.062,1213.92 993.649,1213.92 994.235,1213.92 994.822,1213.92 995.408,1213.92 995.994,1213.92 996.581,1213.92 997.167,1213.92 997.754,1213.92 998.34,1213.92 998.926,1213.92 999.513,1213.92 1000.1,1213.92 1000.69,1213.92 1001.27,1213.92 1001.86,1213.92 1002.44,1213.92 1003.03,1213.92 1003.62,1213.92 1004.2,1213.92 1004.79,1213.92 1005.38,1213.92 1005.96,1213.92 1006.55,1213.92 1007.14,1213.92 1007.72,1213.92 1008.31,1213.92 1008.9,1213.92 1009.48,1213.92 1010.07,1213.92 1010.65,1213.92 1011.24,1213.92 1011.83,1213.92 1012.41,1213.92 1013,1213.92 1013.59,1213.92 1014.17,1213.92 1014.76,1213.92 1015.35,1213.92 1015.93,1213.92 1016.52,1213.92 1017.11,1213.92 1017.69,1213.92 1018.28,1213.92 1018.86,1213.92 1019.45,1213.92 1020.04,1213.92 1020.62,1213.92 1021.21,1213.92 1021.8,1213.92 1022.38,1213.92 1022.97,1213.92 1023.56,1213.92 1024.14,1213.92 1024.73,1213.92 1025.32,1213.92 1025.9,1213.92 1026.49,1213.92 1027.07,1213.92 1027.66,1213.92 1028.25,1213.92 1028.83,1213.92 1029.42,1213.92 1030.01,1213.92 1030.59,1213.92 1031.18,1213.92 1031.77,1213.92 1032.35,1213.92 1032.94,1213.92 1033.52,1213.92 1034.11,1213.92 1034.7,1213.92 1035.28,1213.92 1035.87,1213.92 1036.46,1213.92 1037.04,1213.92 1037.63,1213.92 1038.22,1213.92 1038.8,1213.92 1039.39,1213.92 1039.98,1213.92 1040.56,1213.92 1041.15,1213.92 1041.73,1213.92 1042.32,1213.92 1042.91,1213.92 1043.49,1213.92 1044.08,1213.92 1044.67,1213.92 1045.25,1213.92 1045.84,1213.92 1046.43,1213.92 1047.01,1213.92 1047.6,1213.92 1048.19,1213.92 1048.77,1213.92 1049.36,1213.92 1049.94,1213.92 1050.53,1213.92 1051.12,1213.92 1051.7,1213.92 1052.29,1213.92 1052.88,1213.92 1053.46,1213.92 1054.05,1213.92 1054.64,1213.92 1055.22,1213.92 1055.81,1213.92 1056.39,1213.92 1056.98,1213.92 1057.57,1213.92 1058.15,1213.92 1058.74,1213.92 1059.33,1213.92 1059.91,1213.92 1060.5,1213.92 1061.09,1213.92 1061.67,1213.92 1062.26,1213.92 1062.85,1213.92 1063.43,1213.92 1064.02,1213.92 1064.6,1213.92 1065.19,1213.92 1065.78,1213.92 1066.36,1213.92 1066.95,1213.92 1067.54,1213.92 1068.12,1213.92 1068.71,1213.92 1069.3,1213.92 1069.88,1213.92 1070.47,1213.92 1071.06,1213.92 1071.64,1213.92 1072.23,1213.92 1072.81,1213.92 1073.4,1213.92 1073.99,1213.92 1074.57,1213.92 1075.16,1213.92 1075.75,1213.92 1076.33,1213.92 1076.92,1213.92 1077.51,1213.92 1078.09,1213.92 1078.68,1213.92 1079.26,1213.92 1079.85,1213.92 1080.44,1213.92 1081.02,1213.92 1081.61,1213.92 1082.2,1213.92 1082.78,1213.92 1083.37,1213.92 1083.96,1213.92 1084.54,1213.92 1085.13,1213.92 1085.72,1213.92 1086.3,1213.92 1086.89,1213.92 1087.47,1213.92 1088.06,1213.92 1088.65,1213.92 1089.23,1213.92 1089.82,1213.92 1090.41,1213.92 1090.99,1213.92 1091.58,1213.92 1092.17,1213.92 1092.75,1213.92 1093.34,1213.92 1093.93,1213.92 1094.51,1213.92 1095.1,1213.92 1095.68,1213.92 1096.27,1213.92 1096.86,1213.92 1097.44,1213.92 1098.03,1213.92 1098.62,1213.92 1099.2,1213.92 1099.79,1213.92 1100.38,1213.92 1100.96,1213.92 1101.55,1213.92 1102.14,1213.92 1102.72,1213.92 1103.31,1213.92 1103.89,1213.92 1104.48,1213.92 1105.07,1213.92 1105.65,1213.92 1106.24,1213.92 1106.83,1213.92 1107.41,1213.92 1108,1213.92 1108.59,1213.92 1109.17,1213.92 1109.76,1213.92 1110.34,1213.92 1110.93,1213.92 1111.52,1213.92 1112.1,1213.92 1112.69,1213.92 1113.28,1213.92 1113.86,1213.92 1114.45,1213.92 1115.04,1213.92 1115.62,1213.92 1116.21,1213.92 1116.8,1213.92 1117.38,1213.92 1117.97,1213.92 1118.55,1213.92 1119.14,1213.92 1119.73,1213.92 1120.31,1213.92 1120.9,1213.92 1121.49,1213.92 1122.07,1213.92 1122.66,1213.92 1123.25,1213.92 1123.83,1213.92 1124.42,1213.92 1125.01,1213.92 1125.59,1213.92 1126.18,1213.92 1126.76,1213.92 1127.35,1213.92 1127.94,1213.92 1128.52,1213.92 1129.11,1213.92 1129.7,1213.92 1130.28,1213.92 1130.87,1213.92 1131.46,1213.92 1132.04,1213.92 1132.63,1213.92 1133.21,1213.92 1133.8,1213.92 1134.39,1213.92 1134.97,1213.92 1135.56,1213.92 1136.15,1213.92 1136.73,1213.92 1137.32,1213.92 1137.91,1213.92 1138.49,1213.92 1139.08,1213.92 1139.67,1213.92 1140.25,1213.92 1140.84,1213.92 1141.42,1213.92 1142.01,1213.92 1142.6,1213.92 1143.18,1213.92 1143.77,1213.92 1144.36,1213.92 1144.94,1213.92 1145.53,1213.92 1146.12,1213.92 1146.7,1213.92 1147.29,1213.92 1147.88,1213.92 1148.46,1213.92 1149.05,1213.92 1149.63,1213.92 1150.22,1213.92 1150.81,1213.92 1151.39,1213.92 1151.98,1213.92 1152.57,1213.92 1153.15,1213.92 1153.74,1213.92 1154.33,1213.92 1154.91,1213.92 1155.5,1213.92 1156.09,1213.92 1156.67,1213.92 1157.26,1213.92 1157.84,1213.92 1158.43,1213.92 1159.02,1213.92 1159.6,1213.92 1160.19,1213.92 1160.78,1213.92 1161.36,1213.92 1161.95,1213.92 1162.54,1213.92 1163.12,1213.92 1163.71,1213.92 1164.29,1213.92 1164.88,1213.92 1165.47,1213.92 1166.05,1213.92 1166.64,1213.92 1167.23,1213.92 1167.81,1213.92 1168.4,1213.92 1168.99,1213.92 1169.57,1213.92 1170.16,1213.92 1170.75,1213.92 1171.33,1213.92 1171.92,1213.92 1172.5,1213.92 1173.09,1213.92 1173.68,1213.92 1174.26,1213.92 1174.85,1213.92 1175.44,1213.92 1176.02,1213.92 1176.61,1213.92 1177.2,1213.92 1177.78,1213.92 1178.37,1213.92 1178.96,1213.92 1179.54,1213.92 1180.13,1213.92 1180.71,1213.92 1181.3,1213.92 1181.89,1213.92 1182.47,1213.92 1183.06,1213.92 1183.65,1213.92 1184.23,1213.92 1184.82,1213.92 1185.41,1213.92 1185.99,1213.92 1186.58,1213.92 1187.16,1213.92 1187.75,1213.92 1188.34,1213.92 1188.92,1213.92 1189.51,1213.92 1190.1,1213.92 1190.68,1213.92 1191.27,1213.92 1191.86,1213.92 1192.44,1213.92 1193.03,1213.92 1193.62,1213.92 1194.2,1213.92 1194.79,1213.92 1195.37,1213.92 1195.96,1213.92 1196.55,1213.92 1197.13,1213.92 1197.72,1213.92 1198.31,1213.92 1198.89,1213.92 1199.48,1213.92 1200.07,1213.92 1200.65,1213.92 1201.24,1213.92 1201.83,1213.92 1202.41,1213.92 1203,1213.92 1203.58,1213.92 1204.17,1213.92 1204.76,1213.92 1205.34,1213.92 1205.93,1213.92 1206.52,1213.92 1207.1,1213.92 1207.69,1213.92 1208.28,1213.92 1208.86,1213.92 1209.45,1213.92 1210.03,1213.92 1210.62,1213.92 1211.21,1213.92 1211.79,1213.92 1212.38,1213.92 1212.97,1213.92 1213.55,1213.92 1214.14,1213.92 1214.73,1213.92 1215.31,1213.92 1215.9,1213.92 1216.49,1213.92 1217.07,1213.92 1217.66,1213.92 1218.24,1213.92 1218.83,1213.92 1219.42,1213.92 1220,1213.92 1220.59,1213.92 1221.18,1213.92 1221.76,1213.92 1222.35,1213.92 1222.94,1213.92 1223.52,1213.92 1224.11,1213.92 1224.7,1213.92 1225.28,1213.92 1225.87,1213.92 1226.45,1213.92 1227.04,1213.92 1227.63,1213.92 1228.21,1213.92 1228.8,1213.92 1229.39,1213.92 1229.97,1213.92 1230.56,1213.92 1231.15,1213.92 1231.73,1213.92 1232.32,1213.92 1232.91,1213.92 1233.49,1213.92 1234.08,1213.92 1234.66,1213.92 1235.25,1213.92 1235.84,1213.92 1236.42,1213.92 1237.01,1213.92 1237.6,1213.92 1238.18,1213.92 1238.77,1213.92 1239.36,1213.92 1239.94,1213.92 1240.53,1213.92 1241.11,1213.92 1241.7,1213.92 1242.29,1213.92 1242.87,1213.92 1243.46,1213.92 1244.05,1213.92 1244.63,1213.92 1245.22,1213.92 1245.81,1213.92 1246.39,1213.92 1246.98,1213.92 1247.57,1213.92 1248.15,1213.92 1248.74,1213.92 1249.32,1213.92 1249.91,1213.92 1250.5,1213.92 1251.08,1213.92 1251.67,1213.92 1252.26,1213.92 1252.84,1213.92 1253.43,1213.92 1254.02,1213.92 1254.6,1213.92 1255.19,1213.92 1255.78,1213.92 1256.36,1213.92 1256.95,1213.92 1257.53,1213.92 1258.12,1213.92 1258.71,1213.92 1259.29,1213.92 1259.88,1213.92 1260.47,1213.92 1261.05,1213.92 1261.64,1213.92 1262.23,1213.92 1262.81,1213.92 1263.4,1213.92 1263.98,1213.92 1264.57,1213.92 1265.16,1213.92 1265.74,1213.92 1266.33,1213.92 1266.92,1213.92 1267.5,1213.92 1268.09,1213.92 1268.68,1213.92 1269.26,1213.92 1269.85,1213.92 1270.44,1213.92 1271.02,1213.92 1271.61,1213.92 1272.19,1213.92 1272.78,1213.92 1273.37,1213.92 1273.95,1213.92 1274.54,1213.92 1275.13,1213.92 1275.71,1213.92 1276.3,1213.92 1276.89,1213.92 1277.47,1213.92 1278.06,1213.92 1278.65,1213.92 1279.23,1213.92 1279.82,1213.92 1280.4,1213.92 1280.99,1213.92 1281.58,1213.92 1282.16,1213.92 1282.75,1213.92 1283.34,1213.92 1283.92,1213.92 1284.51,1213.92 1285.1,1213.92 1285.68,1213.92 1286.27,1213.92 1286.86,1213.92 1287.44,1213.92 1288.03,1213.92 1288.61,1213.92 1289.2,1213.92 1289.79,1213.92 1290.37,1213.92 1290.96,1213.92 1291.55,1213.92 1292.13,1213.92 1292.72,1213.92 1293.31,1213.92 1293.89,1213.92 1294.48,1213.92 1295.06,1213.92 1295.65,1213.92 1296.24,1213.92 1296.82,1213.92 1297.41,1213.92 1298,1213.92 1298.58,1213.92 1299.17,1213.92 1299.76,1213.92 1300.34,1213.92 1300.93,1213.92 1301.52,1213.92 1302.1,1213.92 1302.69,1213.92 1303.27,1213.92 1303.86,1213.92 1304.45,1213.92 1305.03,1213.92 1305.62,1213.92 1306.21,1213.92 1306.79,1213.92 1307.38,1213.92 1307.97,1213.92 1308.55,1213.92 1309.14,1213.92 1309.73,1213.92 1310.31,1213.92 1310.9,1213.92 1311.48,1213.92 1312.07,1213.92 1312.66,1213.92 1313.24,1213.92 1313.83,1213.92 1314.42,1213.92 1315,1213.92 1315.59,1213.92 1316.18,1213.92 1316.76,1213.92 1317.35,1213.92 1317.93,1213.92 1318.52,1213.92 1319.11,1213.92 1319.69,1213.92 1320.28,1213.92 1320.87,1213.92 1321.45,1213.92 1322.04,1213.92 1322.63,1213.92 1323.21,1213.92 1323.8,1213.92 1324.39,1213.92 1324.97,1213.92 1325.56,1213.92 1326.14,1213.92 1326.73,1213.92 1327.32,1213.92 1327.9,1213.92 1328.49,1213.92 1329.08,1213.92 1329.66,1213.92 1330.25,1213.92 1330.84,1213.92 1331.42,1213.92 1332.01,1213.92 1332.6,1213.92 1333.18,1213.92 1333.77,1213.92 1334.35,1213.92 1334.94,1213.92 1335.53,1213.92 1336.11,1213.92 1336.7,1213.92 1337.29,1213.92 1337.87,1213.92 1338.46,1213.92 1339.05,1213.92 1339.63,1213.92 1340.22,1213.92 1340.8,1213.92 1341.39,1213.92 1341.98,1213.92 1342.56,1213.92 1343.15,1213.92 1343.74,1213.92 1344.32,1213.92 1344.91,1213.92 1345.5,1213.92 1346.08,1213.92 1346.67,1213.92 1347.26,1213.92 1347.84,1213.92 1348.43,1213.92 1349.01,1213.92 1349.6,1213.92 1350.19,1213.92 1350.77,1213.92 1351.36,1213.92 1351.95,1213.92 1352.53,1213.92 1353.12,1213.92 1353.71,1213.92 1354.29,1213.92 1354.88,1213.92 1355.47,1213.92 1356.05,1213.92 1356.64,1213.92 1357.22,1213.92 1357.81,1213.92 1358.4,1213.92 1358.98,1213.92 1359.57,1213.92 1360.16,1213.92 1360.74,1213.92 1361.33,1213.92 1361.92,1213.92 1362.5,1213.92 1363.09,1213.92 1363.68,1213.92 1364.26,1213.92 1364.85,1213.92 1365.43,1213.92 1366.02,1213.92 1366.61,1213.92 1367.19,1213.92 1367.78,1213.92 1368.37,1213.92 1368.95,1213.92 1369.54,1213.92 1370.13,1213.92 1370.71,1213.92 1371.3,1213.92 1371.88,1213.92 1372.47,1213.92 1373.06,1213.92 1373.64,1213.92 1374.23,1213.92 1374.82,1213.92 1375.4,1213.92 1375.99,1213.92 1376.58,1213.92 1377.16,1213.92 1377.75,1213.92 1378.34,1213.92 1378.92,1213.92 1379.51,1213.92 1380.09,1213.92 1380.68,1213.92 1381.27,1213.92 1381.85,1213.92 1382.44,1213.92 1383.03,1213.92 1383.61,1213.92 1384.2,1213.92 1384.79,1213.92 1385.37,1213.92 1385.96,1213.92 1386.55,1213.92 1387.13,1213.92 1387.72,1213.92 1388.3,1213.92 1388.89,1213.92 1389.48,1213.92 1390.06,1213.92 1390.65,1213.92 1391.24,1213.92 1391.82,1213.92 1392.41,1213.92 1393,1213.92 1393.58,1213.92 1394.17,1213.92 1394.75,1213.92 1395.34,1213.92 1395.93,1213.92 1396.51,1213.92 1397.1,1213.92 1397.69,1213.92 1398.27,1213.92 1398.86,1213.92 1399.45,1213.92 1400.03,1213.92 1400.62,1213.92 1401.21,1213.92 1401.79,1213.92 1402.38,1213.92 1402.96,1213.92 1403.55,1213.92 1404.14,1213.92 1404.72,1213.92 1405.31,1213.92 1405.9,1213.92 1406.48,1213.92 1407.07,1213.92 1407.66,1213.92 1408.24,1213.92 1408.83,1213.92 1409.42,1213.92 1410,1213.92 1410.59,1213.92 1411.17,1213.92 1411.76,1213.92 1412.35,1213.92 1412.93,1213.92 1413.52,1213.92 1414.11,1213.92 1414.69,1213.92 1415.28,1213.92 1415.87,1213.92 1416.45,1213.92 1417.04,1213.92 1417.63,1213.92 1418.21,1213.92 1418.8,1213.92 1419.38,1213.92 1419.97,1213.92 1420.56,1213.92 1421.14,1213.92 1421.73,1213.92 1422.32,1213.92 1422.9,1213.92 1423.49,1213.92 1424.08,1213.92 1424.66,1213.92 1425.25,1213.92 1425.83,1213.92 1426.42,1213.92 1427.01,1213.92 1427.59,1213.92 1428.18,1213.92 1428.77,1213.92 1429.35,1213.92 1429.94,1213.92 1430.53,1213.92 1431.11,1213.92 1431.7,1213.92 1432.29,1213.92 1432.87,1213.92 1433.46,1213.92 1434.04,1213.92 1434.63,1213.92 1435.22,1213.92 1435.8,1213.92 1436.39,1213.92 1436.98,1213.92 1437.56,1213.92 1438.15,1213.92 1438.74,1213.92 1439.32,1213.92 1439.91,1213.92 1440.5,1213.92 1441.08,1213.92 1441.67,1213.92 1442.25,1213.92 1442.84,1213.92 1443.43,1213.92 1444.01,1213.92 1444.6,1213.92 1445.19,1213.92 1445.77,1213.92 1446.36,1213.92 1446.95,1213.92 1447.53,1213.92 1448.12,1213.92 1448.7,1213.92 1449.29,1213.92 1449.88,1213.92 1450.46,1213.92 1451.05,1213.92 1451.64,1213.92 1452.22,1213.92 1452.81,1213.92 1453.4,1213.92 1453.98,1213.92 1454.57,1213.92 1455.16,1213.92 1455.74,1213.92 1456.33,1213.92 1456.91,1213.92 1457.5,1213.92 1458.09,1213.92 1458.67,1213.92 1459.26,1213.92 1459.85,1213.92 1460.43,1213.92 1461.02,1213.92 1461.61,1213.92 1462.19,1213.92 1462.78,1213.92 1463.37,1213.92 1463.95,1213.92 1464.54,1213.92 1465.12,1213.92 1465.71,1213.92 1466.3,1213.92 1466.88,1213.92 1467.47,1213.92 1468.06,1213.92 1468.64,1213.92 1469.23,1213.92 1469.82,1213.92 1470.4,1213.92 1470.99,1213.92 1471.57,1213.92 1472.16,1213.92 1472.75,1213.92 1473.33,1213.92 1473.92,1213.92 1474.51,1213.92 1475.09,1213.92 1475.68,1213.92 1476.27,1213.92 1476.85,1213.92 1477.44,1213.92 1478.03,1213.92 1478.61,1213.92 1479.2,1213.92 1479.78,1213.92 1480.37,1213.92 1480.96,1213.92 1481.54,1213.92 1482.13,1213.92 1482.72,1213.92 1483.3,1213.92 1483.89,1213.92 1484.48,1213.92 1485.06,1213.92 1485.65,1213.92 1486.24,1213.92 1486.82,1213.92 1487.41,1213.92 1487.99,1213.92 1488.58,1213.92 1489.17,1213.92 1489.75,1213.92 1490.34,1213.92 1490.93,1213.92 1491.51,1213.92 1492.1,1213.92 1492.69,1213.92 1493.27,1213.92 1493.86,1213.92 1494.45,1213.92 1495.03,1213.92 1495.62,1213.92 1496.2,1213.92 1496.79,1213.92 1497.38,1213.92 1497.96,1213.92 1498.55,1213.92 1499.14,1213.92 1499.72,1213.92 1500.31,1213.92 1500.9,1213.92 1501.48,1213.92 1502.07,1213.92 1502.65,1213.92 1503.24,1213.92 1503.83,1213.92 1504.41,1213.92 1505,1213.92 1505.59,1213.92 1506.17,1213.92 1506.76,1213.92 1507.35,1213.92 1507.93,1213.92 1508.52,1213.92 1509.11,1213.92 1509.69,1213.92 1510.28,1213.92 1510.86,1213.92 1511.45,1213.92 1512.04,1213.92 1512.62,1213.92 1513.21,1213.92 1513.8,1213.92 1514.38,1213.92 1514.97,1213.92 1515.56,1213.92 1516.14,1213.92 1516.73,1213.92 1517.32,1213.92 1517.9,1213.92 1518.49,1213.92 1519.07,1213.92 1519.66,1213.92 1520.25,1213.92 1520.83,1213.92 1521.42,1213.92 1522.01,1213.92 1522.59,1213.92 1523.18,1213.92 1523.77,1213.92 1524.35,1213.92 1524.94,1213.92 1525.52,1213.92 1526.11,1213.92 1526.7,1213.92 1527.28,1213.92 1527.87,1213.92 1528.46,1213.92 1529.04,1213.92 1529.63,1213.92 1530.22,1213.92 1530.8,1213.92 1531.39,1213.92 1531.98,1213.92 1532.56,1213.92 1533.15,1213.92 1533.73,1213.92 1534.32,1213.92 1534.91,1213.92 1535.49,1213.92 1536.08,1213.92 1536.67,1213.92 1537.25,1213.92 1537.84,1213.92 1538.43,1213.92 1539.01,1213.92 1539.6,1213.92 1540.19,1213.92 1540.77,1213.92 1541.36,1213.92 1541.94,1213.92 1542.53,1213.92 1543.12,1213.92 1543.7,1213.92 1544.29,1213.92 1544.88,1213.92 1545.46,1213.92 1546.05,1213.92 1546.64,1213.92 1547.22,1213.92 1547.81,1213.92 1548.4,1213.92 1548.98,1213.92 1549.57,1213.92 1550.15,1213.92 1550.74,1213.92 1551.33,1213.92 1551.91,1213.92 1552.5,1213.92 1553.09,1213.92 1553.67,1213.92 1554.26,1213.92 1554.85,1213.92 1555.43,1213.92 1556.02,1213.92 1556.6,1213.92 1557.19,1213.92 1557.78,1213.92 1558.36,1213.92 1558.95,1213.92 1559.54,1213.92 1560.12,1213.92 1560.71,1213.92 1561.3,1213.92 1561.88,1213.92 1562.47,1213.92 1563.06,1213.92 1563.64,1213.92 1564.23,1213.92 1564.81,1213.92 1565.4,1213.92 1565.99,1213.92 1566.57,1213.92 1567.16,1213.92 1567.75,1213.92 1568.33,1213.92 1568.92,1213.92 1569.51,1213.92 1570.09,1213.92 1570.68,1213.92 1571.27,1213.92 1571.85,1213.92 1572.44,1213.92 1573.02,1213.92 1573.61,1213.92 1574.2,1213.92 1574.78,1213.92 1575.37,1213.92 1575.96,1213.92 1576.54,1213.92 1577.13,1213.92 1577.72,1213.92 1578.3,1213.92 1578.89,1213.92 1579.47,1213.92 1580.06,1213.92 1580.65,1213.92 1581.23,1213.92 1581.82,1213.92 1582.41,1213.92 1582.99,1213.92 1583.58,1213.92 1584.17,1213.92 1584.75,1213.92 1585.34,1213.92 1585.93,1213.92 1586.51,1213.92 1587.1,1213.92 1587.68,1213.92 1588.27,1213.92 1588.86,1213.92 1589.44,1213.92 1590.03,1213.92 1590.62,1213.92 1591.2,1213.92 1591.79,1213.92 1592.38,1213.92 1592.96,1213.92 1593.55,1213.92 1594.14,1213.92 1594.72,1213.92 1595.31,1213.92 1595.89,1213.92 1596.48,1213.92 1597.07,1213.92 1597.65,1213.92 1598.24,1213.92 1598.83,1213.92 1599.41,1213.92 1600,1213.92 1600.59,1213.92 1601.17,1213.92 1601.76,1213.92 1602.34,1213.92 1602.93,1213.92 1603.52,1213.92 1604.1,1213.92 1604.69,1213.92 1605.28,1213.92 1605.86,1213.92 1606.45,1213.92 1607.04,1213.92 1607.62,1213.92 1608.21,1213.92 1608.8,1213.92 1609.38,1213.92 1609.97,1213.92 1610.55,1213.92 1611.14,1213.92 1611.73,1213.92 1612.31,1213.92 1612.9,1213.92 1613.49,1213.92 1614.07,1213.92 1614.66,1213.92 1615.25,1213.92 1615.83,1213.92 1616.42,1213.92 1617.01,1213.92 1617.59,1213.92 1618.18,1213.92 1618.76,1213.92 1619.35,1213.92 1619.94,1213.92 1620.52,1213.92 1621.11,1213.92 1621.7,1213.92 1622.28,1213.92 1622.87,1213.92 1623.46,1213.92 1624.04,1213.92 1624.63,1213.92 1625.22,1213.92 1625.8,1213.92 1626.39,1213.92 1626.97,1213.92 1627.56,1213.92 1628.15,1213.92 1628.73,1213.92 1629.32,1213.92 1629.91,1213.92 1630.49,1213.92 1631.08,1213.92 1631.67,1213.92 1632.25,1213.92 1632.84,1213.92 1633.42,1213.92 1634.01,1213.92 1634.6,1213.92 1635.18,1213.92 1635.77,1213.92 1636.36,1213.92 1636.94,1213.92 1637.53,1213.92 1638.12,1213.92 1638.7,1213.92 1639.29,1213.92 1639.88,1213.92 1640.46,1213.92 1641.05,1213.92 1641.63,1213.92 1642.22,1213.92 1642.81,1213.92 1643.39,1213.92 1643.98,1213.92 1644.57,1213.92 1645.15,1213.92 1645.74,1213.92 1646.33,1213.92 1646.91,1213.92 1647.5,1213.92 1648.09,1213.92 1648.67,1213.92 1649.26,1213.92 1649.84,1213.92 1650.43,1213.92 1651.02,1213.92 1651.6,1213.92 1652.19,1213.92 1652.78,1213.92 1653.36,1213.92 1653.95,1213.92 1654.54,1213.92 1655.12,1213.92 1655.71,1213.92 1656.29,1213.92 1656.88,1213.92 1657.47,1213.92 1658.05,1213.92 1658.64,1213.92 1659.23,1213.92 1659.81,1213.92 1660.4,1213.92 1660.99,1213.92 1661.57,1213.92 1662.16,1213.92 1662.75,1213.92 1663.33,1213.92 1663.92,1213.92 1664.5,1213.92 1665.09,1213.92 1665.68,1213.92 1666.26,1213.92 1666.85,1213.92 1667.44,1213.92 1668.02,1213.92 1668.61,1213.92 1669.2,1213.92 1669.78,1213.92 1670.37,1213.92 1670.96,1213.92 1671.54,1213.92 1672.13,1213.92 1672.71,1213.92 1673.3,1213.92 1673.89,1213.92 1674.47,1213.92 1675.06,1213.92 1675.65,1213.92 1676.23,1213.92 1676.82,1213.92 1677.41,1213.92 1677.99,1213.92 1678.58,1213.92 1679.17,1213.92 1679.75,1213.92 1680.34,1213.92 1680.92,1213.92 1681.51,1213.92 1682.1,1213.92 1682.68,1213.92 1683.27,1213.92 1683.86,1213.92 1684.44,1213.92 1685.03,1213.92 1685.62,1213.92 1686.2,1213.92 1686.79,1213.92 1687.37,1213.92 1687.96,1213.92 1688.55,1213.92 1689.13,1213.92 1689.72,1213.92 1690.31,1213.92 1690.89,1213.92 1691.48,1213.92 1692.07,1213.92 1692.65,1213.92 1693.24,1213.92 1693.83,1213.92 1694.41,1213.92 1695,1213.92 1695.58,1213.92 1696.17,1213.92 1696.76,1213.92 1697.34,1213.92 1697.93,1213.92 1698.52,1213.92 1699.1,1213.92 1699.69,1213.92 1700.28,1213.92 1700.86,1213.92 1701.45,1213.92 1702.04,1213.92 1702.62,1213.92 1703.21,1213.92 1703.79,1213.92 1704.38,1213.92 1704.97,1213.92 1705.55,1213.92 1706.14,1213.92 1706.73,1213.92 1707.31,1213.92 1707.9,1213.92 1708.49,1213.92 1709.07,1213.92 1709.66,1213.92 1710.24,1213.92 1710.83,1213.92 1711.42,1213.92 1712,1213.92 1712.59,1213.92 1713.18,1213.92 1713.76,1213.92 1714.35,1213.92 1714.94,1213.92 1715.52,1213.92 1716.11,1213.92 1716.7,1213.92 1717.28,1213.92 1717.87,1213.92 1718.45,1213.92 1719.04,1213.92 1719.63,1213.92 1720.21,1213.92 1720.8,1213.92 1721.39,1213.92 1721.97,1213.92 1722.56,1213.92 1723.15,1213.92 1723.73,1213.92 1724.32,1213.92 1724.91,1213.92 1725.49,1213.92 1726.08,1213.92 1726.66,1213.92 1727.25,1213.92 1727.84,1213.92 1728.42,1213.92 1729.01,1213.92 1729.6,1213.92 1730.18,1213.92 1730.77,1213.92 1731.36,1213.92 1731.94,1213.92 1732.53,1213.92 1733.11,1213.92 1733.7,1213.92 1734.29,1213.92 1734.87,1213.92 1735.46,1213.92 1736.05,1213.92 1736.63,1213.92 1737.22,1213.92 1737.81,1213.92 1738.39,1213.92 1738.98,1213.92 1739.57,1213.92 1740.15,1213.92 1740.74,1213.92 1741.32,1213.92 1741.91,1213.92 1742.5,1213.92 1743.08,1213.92 1743.67,1213.92 1744.26,1213.92 1744.84,1213.92 1745.43,1213.92 1746.02,1213.92 1746.6,1213.92 1747.19,1213.92 1747.78,1213.92 1748.36,1213.92 1748.95,1213.92 1749.53,1213.92 1750.12,1213.92 1750.71,1213.92 1751.29,1213.92 1751.88,1213.92 1752.47,1213.92 1753.05,1213.92 1753.64,1213.92 1754.23,1213.92 1754.81,1213.92 1755.4,1213.92 1755.99,1213.92 1756.57,1213.92 1757.16,1213.92 1757.74,1213.92 1758.33,1213.92 1758.92,1213.92 1759.5,1213.92 1760.09,1213.92 1760.68,1213.92 1761.26,1213.92 1761.85,1213.92 1762.44,1213.92 1763.02,1213.92 1763.61,1213.92 1764.19,1213.92 1764.78,1213.92 1765.37,1213.92 1765.95,1213.92 1766.54,1213.92 1767.13,1213.92 1767.71,1213.92 1768.3,1213.92 1768.89,1213.92 1769.47,1213.92 1770.06,1213.92 1770.65,1213.92 1771.23,1213.92 1771.82,1213.92 1772.4,1213.92 1772.99,1213.92 1773.58,1213.92 1774.16,1213.92 1774.75,1213.92 1775.34,1213.92 1775.92,1213.92 1776.51,1213.92 1777.1,1213.92 1777.68,1213.92 1778.27,1213.92 1778.86,1213.92 1779.44,1213.92 1780.03,1213.92 1780.61,1213.92 1781.2,1213.92 1781.79,1213.92 1782.37,1213.92 1782.96,1213.92 1783.55,1213.92 1784.13,1213.92 1784.72,1213.92 1785.31,1213.92 1785.89,1213.92 1786.48,1213.92 1787.06,1213.92 1787.65,1213.92 1788.24,1213.92 1788.82,1213.92 1789.41,1213.92 1790,1213.92 1790.58,1213.92 1791.17,1213.92 1791.76,1213.92 1792.34,1213.92 1792.93,1213.92 1793.52,1213.92 1794.1,1213.92 1794.69,1213.92 1795.27,1213.92 1795.86,1213.92 1796.45,1213.92 1797.03,1213.92 1797.62,1213.92 1798.21,1213.92 1798.79,1213.92 1799.38,1213.92 1799.97,1213.92 1800.55,1213.92 1801.14,1213.92 1801.73,1213.92 1802.31,1213.92 1802.9,1213.92 1803.48,1213.92 1804.07,1213.92 1804.66,1213.92 1805.24,1213.92 1805.83,1213.92 1806.42,1213.92 1807,1213.92 1807.59,1213.92 1808.18,1213.92 1808.76,1213.92 1809.35,1213.92 1809.94,1213.92 1810.52,1213.92 1811.11,1213.92 1811.69,1213.92 1812.28,1213.92 1812.87,1213.92 1813.45,1213.92 1814.04,1213.92 1814.63,1213.92 1815.21,1213.92 1815.8,1213.92 1816.39,1213.92 1816.97,1213.92 1817.56,1213.92 1818.14,1213.92 1818.73,1213.92 1819.32,1213.92 1819.9,1213.92 1820.49,1213.92 1821.08,1213.92 1821.66,1213.92 1822.25,1213.92 1822.84,1213.92 1823.42,1213.92 1824.01,1213.92 1824.6,1213.92 1825.18,1213.92 1825.77,1213.92 1826.35,1213.92 1826.94,1213.92 1827.53,1213.92 1828.11,1213.92 1828.7,1213.92 1829.29,1213.92 1829.87,1213.92 1830.46,1213.92 1831.05,1213.92 1831.63,1213.92 1832.22,1213.92 1832.81,1213.92 1833.39,1213.92 1833.98,1213.92 1834.56,1213.92 1835.15,1213.92 1835.74,1213.92 1836.32,1213.92 1836.91,1213.92 1837.5,1213.92 1838.08,1213.92 1838.67,1213.92 1839.26,1213.92 1839.84,1213.92 1840.43,1213.92 1841.01,1213.92 1841.6,1213.92 1842.19,1213.92 1842.77,1213.92 1843.36,1213.92 1843.95,1213.92 1844.53,1213.92 1845.12,1213.92 1845.71,1213.92 1846.29,1213.92 1846.88,1213.92 1847.47,1213.92 1848.05,1213.92 1848.64,1213.92 1849.22,1213.92 1849.81,1213.92 1850.4,1213.92 1850.98,1213.92 1851.57,1213.92 1852.16,1213.92 1852.74,1213.92 1853.33,1213.92 1853.92,1213.92 1854.5,1213.92 1855.09,1213.92 1855.68,1213.92 1856.26,1213.92 1856.85,1213.92 1857.43,1213.92 1858.02,1213.92 1858.61,1213.92 1859.19,1213.92 1859.78,1213.92 1860.37,1213.92 1860.95,1213.92 1861.54,1213.92 1862.13,1213.92 1862.71,1213.92 1863.3,1213.92 1863.88,1213.92 1864.47,1213.92 1865.06,1213.92 1865.64,1213.92 1866.23,1213.92 1866.82,1213.92 1867.4,1213.92 1867.99,1213.92 1868.58,1213.92 1869.16,1213.92 1869.75,1213.92 1870.34,1213.92 1870.92,1213.92 1871.51,1213.92 1872.09,1213.92 1872.68,1213.92 1873.27,1213.92 1873.85,1213.92 1874.44,1213.92 1875.03,1213.92 1875.61,1213.92 1876.2,1213.92 1876.79,1213.92 1877.37,1213.92 1877.96,1213.92 1878.55,1213.92 1879.13,1213.92 1879.72,1213.92 1880.3,1213.92 1880.89,1213.92 1881.48,1213.92 1882.06,1213.92 1882.65,1213.92 1883.24,1213.92 1883.82,1213.92 1884.41,1213.92 1885,1213.92 1885.58,1213.92 1886.17,1213.92 1886.76,1213.92 1887.34,1213.92 1887.93,1213.92 1888.51,1213.92 1889.1,1213.92 1889.69,1213.92 1890.27,1213.92 1890.86,1213.92 1891.45,1213.92 1892.03,1213.92 1892.62,1213.92 1893.21,1213.92 1893.79,1213.92 1894.38,1213.92 1894.96,1213.92 1895.55,1213.92 1896.14,1213.92 1896.72,1213.92 1897.31,1213.92 1897.9,1213.92 1898.48,1213.92 1899.07,1213.92 1899.66,1213.92 1900.24,1213.92 1900.83,1213.92 1901.42,1213.92 1902,1213.92 1902.59,1213.92 1903.17,1213.92 1903.76,1213.92 1904.35,1213.92 1904.93,1213.92 1905.52,1213.92 1906.11,1213.92 1906.69,1213.92 1907.28,1213.92 1907.87,1213.92 1908.45,1213.92 1909.04,1213.92 1909.63,1213.92 1910.21,1213.92 1910.8,1213.92 1911.38,1213.92 1911.97,1213.92 1912.56,1213.92 1913.14,1213.92 1913.73,1213.92 1914.32,1213.92 1914.9,1213.92 1915.49,1213.92 1916.08,1213.92 1916.66,1213.92 1917.25,1213.92 1917.83,1213.92 1918.42,1213.92 1919.01,1213.92 1919.59,1213.92 1920.18,1213.92 1920.77,1213.92 1921.35,1213.92 1921.94,1213.92 1922.53,1213.92 1923.11,1213.92 1923.7,1213.92 1924.29,1213.92 1924.87,1213.92 1925.46,1213.92 1926.04,1213.92 1926.63,1213.92 1927.22,1213.92 1927.8,1213.92 1928.39,1213.92 1928.98,1213.92 1929.56,1213.92 1930.15,1213.92 1930.74,1213.92 1931.32,1213.92 1931.91,1213.92 1932.5,1213.92 1933.08,1213.92 1933.67,1213.92 1934.25,1213.92 1934.84,1213.92 1935.43,1213.92 1936.01,1213.92 1936.6,1213.92 1937.19,1213.92 1937.77,1213.92 1938.36,1213.92 1938.95,1213.92 1939.53,1213.92 1940.12,1213.92 1940.71,1213.92 1941.29,1213.92 1941.88,1213.92 1942.46,1213.92 1943.05,1213.92 1943.64,1213.92 1944.22,1213.92 1944.81,1213.92 1945.4,1213.92 1945.98,1213.92 1946.57,1213.92 1947.16,1213.92 1947.74,1213.92 1948.33,1213.92 1948.91,1213.92 1949.5,1213.92 1950.09,1213.92 1950.67,1213.92 1951.26,1213.92 1951.85,1213.92 1952.43,1213.92 1953.02,1213.92 1953.61,1213.92 1954.19,1213.92 1954.78,1213.92 1955.37,1213.92 1955.95,1213.92 1956.54,1213.92 1957.12,1213.92 1957.71,1213.92 1958.3,1213.92 1958.88,1213.92 1959.47,1213.92 1960.06,1213.92 1960.64,1213.92 1961.23,1213.92 1961.82,1213.92 1962.4,1213.92 1962.99,1213.92 1963.58,1213.92 1964.16,1213.92 1964.75,1213.92 1965.33,1213.92 1965.92,1213.92 1966.51,1213.92 1967.09,1213.92 1967.68,1213.92 1968.27,1213.92 1968.85,1213.92 1969.44,1213.92 1970.03,1213.92 1970.61,1213.92 1971.2,1213.92 1971.78,1213.92 1972.37,1213.92 1972.96,1213.92 1973.54,1213.92 1974.13,1213.92 1974.72,1213.92 1975.3,1213.92 1975.89,1213.92 1976.48,1213.92 1977.06,1213.92 1977.65,1213.92 1978.24,1213.92 1978.82,1213.92 1979.41,1213.92 1979.99,1213.92 1980.58,1213.92 1981.17,1213.92 1981.75,1213.92 1982.34,1213.92 1982.93,1213.92 1983.51,1213.92 1984.1,1213.92 1984.69,1213.92 1985.27,1213.92 1985.86,1213.92 1986.45,1213.92 1987.03,1213.92 1987.62,1213.92 1988.2,1213.92 1988.79,1213.92 1989.38,1213.92 1989.96,1213.92 1990.55,1213.92 1991.14,1213.92 1991.72,1213.92 1992.31,1213.92 1992.9,1213.92 1993.48,1213.92 1994.07,1213.92 1994.65,1213.92 1995.24,1213.92 1995.83,1213.92 1996.41,1213.92 1997,1213.92 1997.59,1213.92 1998.17,1213.92 1998.76,1213.92 1999.35,1213.92 1999.93,1213.92 2000.52,1213.92 2001.11,1213.92 2001.69,1213.92 2002.28,1213.92 2002.86,1213.92 2003.45,1213.92 2004.04,1213.92 2004.62,1213.92 2005.21,1213.92 2005.8,1213.92 2006.38,1213.92 2006.97,1213.92 2007.56,1213.92 2008.14,1213.92 2008.73,1213.92 2009.32,1213.92 2009.9,1213.92 2010.49,1213.92 2011.07,1213.92 2011.66,1213.92 2012.25,1213.92 2012.83,1213.92 2013.42,1213.92 2014.01,1213.92 2014.59,1213.92 2015.18,1213.92 2015.77,1213.92 2016.35,1213.92 2016.94,1213.92 2017.53,1213.92 2018.11,1213.92 2018.7,1213.92 2019.28,1213.92 2019.87,1213.92 2020.46,1213.92 2021.04,1213.92 2021.63,1213.92 2022.22,1213.92 2022.8,1213.92 2023.39,1213.92 2023.98,1213.92 2024.56,1213.92 2025.15,1213.92 2025.73,1213.92 2026.32,1213.92 2026.91,1213.92 2027.49,1213.92 2028.08,1213.92 2028.67,1213.92 2029.25,1213.92 2029.84,1213.92 2030.43,1213.92 2031.01,1213.92 2031.6,1213.92 2032.19,1213.92 2032.77,1213.92 2033.36,1213.92 2033.94,1213.92 2034.53,1213.92 2035.12,1213.92 2035.7,1213.92 2036.29,1213.92 2036.88,1213.92 2037.46,1213.92 2038.05,1213.92 2038.64,1213.92 2039.22,1213.92 2039.81,1213.92 2040.4,1213.92 2040.98,1213.92 2041.57,1213.92 2042.15,1213.92 2042.74,1213.92 2043.33,1213.92 2043.91,1213.92 2044.5,1213.92 2045.09,1213.92 2045.67,1213.92 2046.26,1213.92 2046.85,1213.92 2047.43,1213.92 2048.02,1213.92 2048.6,1213.92 2049.19,1213.92 2049.78,1213.92 2050.36,1213.92 2050.95,1213.92 2051.54,1213.92 2052.12,1213.92 2052.71,1213.92 2053.3,1213.92 2053.88,1213.92 2054.47,1213.92 2055.06,1213.92 2055.64,1213.92 2056.23,1213.92 2056.81,1213.92 2057.4,1213.92 2057.99,1213.92 2058.57,1213.92 2059.16,1213.92 2059.75,1213.92 2060.33,1213.92 2060.92,1213.92 2061.51,1213.92 2062.09,1213.92 2062.68,1213.92 2063.27,1213.92 2063.85,1213.92 2064.44,1213.92 2065.02,1213.92 2065.61,1213.92 2066.2,1213.92 2066.78,1213.92 2067.37,1213.92 2067.96,1213.92 2068.54,1213.92 2069.13,1213.92 2069.72,1213.92 2070.3,1213.92 2070.89,1213.92 2071.48,1213.92 2072.06,1213.92 2072.65,1213.92 2073.23,1213.92 2073.82,1213.92 2074.41,1213.92 2074.99,1213.92 2075.58,1213.92 2076.17,1213.92 2076.75,1213.92 2077.34,1213.92 2077.93,1213.92 2078.51,1213.92 2079.1,1213.92 2079.68,1213.92 2080.27,1213.92 2080.86,1213.92 2081.44,1213.92 2082.03,1213.92 2082.62,1213.92 2083.2,1213.92 2083.79,1213.92 2084.38,1213.92 2084.96,1213.92 2085.55,1213.92 2086.14,1213.92 2086.72,1213.92 2087.31,1213.92 2087.89,1213.92 2088.48,1213.92 2089.07,1213.92 2089.65,1213.92 2090.24,1213.92 2090.83,1213.92 2091.41,1213.92 2092,1213.92 2092.59,1213.92 2093.17,1213.92 2093.76,1213.92 2094.35,1213.92 2094.93,1213.92 2095.52,1213.92 2096.1,1213.92 2096.69,1213.92 2097.28,1213.92 2097.86,1213.92 2098.45,1213.92 2099.04,1213.92 2099.62,1213.92 2100.21,1213.92 2100.8,1213.92 2101.38,1213.92 2101.97,1213.92 2102.55,1213.92 2103.14,1213.92 2103.73,1213.92 2104.31,1213.92 2104.9,1213.92 2105.49,1213.92 2106.07,1213.92 2106.66,1213.92 2107.25,1213.92 2107.83,1213.92 2108.42,1213.92 2109.01,1213.92 2109.59,1213.92 2110.18,1213.92 2110.76,1213.92 2111.35,1213.92 2111.94,1213.92 2112.52,1213.92 2113.11,1213.92 2113.7,1213.92 2114.28,1213.92 2114.87,1213.92 2115.46,1213.92 2116.04,1213.92 2116.63,1213.92 2117.22,1213.92 2117.8,1213.92 2118.39,1213.92 2118.97,1213.92 2119.56,1213.92 2120.15,1213.92 2120.73,1213.92 2121.32,1213.92 2121.91,1213.92 2122.49,1213.92 2123.08,1213.92 2123.67,1213.92 2124.25,1213.92 2124.84,1213.92 2125.42,1213.92 2126.01,1213.92 2126.6,1213.92 2127.18,1213.92 2127.77,1213.92 2128.36,1213.92 2128.94,1213.92 2129.53,1213.92 2130.12,1213.92 2130.7,1213.92 2131.29,1213.92 2131.88,1213.92 2132.46,1213.92 2133.05,1213.92 2133.63,1213.92 2134.22,1213.92 2134.81,1213.92 2135.39,1213.92 2135.98,1213.92 2136.57,1213.92 2137.15,1213.92 2137.74,1213.92 2138.33,1213.92 2138.91,1213.92 2139.5,1213.92 2140.09,1213.92 2140.67,1213.92 2141.26,1213.92 2141.84,1213.92 2142.43,1213.92 2143.02,1213.92 2143.6,1213.92 2144.19,1213.92 2144.78,1213.92 2145.36,1213.92 2145.95,1213.92 2146.54,1213.92 2147.12,1213.92 2147.71,1213.92 2148.3,1213.92 2148.88,1213.92 2149.47,1213.92 2150.05,1213.92 2150.64,1213.92 2151.23,1213.92 2151.81,1213.92 2152.4,1213.92 2152.99,1213.92 2153.57,1213.92 2154.16,1213.92 2154.75,1213.92 2155.33,1213.92 2155.92,1213.92 2156.5,1213.92 2157.09,1213.92 2157.68,1213.92 2158.26,1213.92 \"/>\n<path clip-path=\"url(#clip012)\" d=\"M986.025 1213.73 L986.612 1213.73 L987.198 1213.73 L987.785 1213.73 L988.371 1213.73 L988.957 1213.73 L989.544 1213.73 L990.13 1213.73 L990.717 1213.73 L991.303 1213.73 L991.889 1213.73 L992.476 1213.73 L993.062 1213.73 L993.649 1213.73 L994.235 1213.73 L994.822 1213.73 L995.408 1213.73 L995.994 1213.73 L996.581 1213.73 L997.167 1213.73 L997.754 1213.73 L998.34 1213.73 L998.926 1213.73 L999.513 1213.73 L1000.1 1213.73 L1000.69 1213.73 L1001.27 1213.73 L1001.86 1213.73 L1002.44 1213.73 L1003.03 1213.73 L1003.62 1213.73 L1004.2 1213.73 L1004.79 1213.73 L1005.38 1213.73 L1005.96 1213.73 L1006.55 1213.73 L1007.14 1213.73 L1007.72 1213.73 L1008.31 1213.73 L1008.9 1213.73 L1009.48 1213.73 L1010.07 1213.73 L1010.65 1213.73 L1011.24 1213.73 L1011.83 1213.73 L1012.41 1213.73 L1013 1213.73 L1013.59 1213.73 L1014.17 1213.73 L1014.76 1213.73 L1015.35 1213.73 L1015.93 1213.73 L1016.52 1213.73 L1017.11 1213.73 L1017.69 1213.73 L1018.28 1213.73 L1018.86 1213.73 L1019.45 1213.73 L1020.04 1213.73 L1020.62 1213.73 L1021.21 1213.73 L1021.8 1213.73 L1022.38 1213.73 L1022.97 1213.73 L1023.56 1213.73 L1024.14 1213.73 L1024.73 1213.73 L1025.32 1213.73 L1025.9 1213.73 L1026.49 1213.73 L1027.07 1213.73 L1027.66 1213.73 L1028.25 1213.73 L1028.83 1213.73 L1029.42 1213.73 L1030.01 1213.73 L1030.59 1213.73 L1031.18 1213.73 L1031.77 1213.73 L1032.35 1213.73 L1032.94 1213.73 L1033.52 1213.73 L1034.11 1213.73 L1034.7 1213.73 L1035.28 1213.73 L1035.87 1213.73 L1036.46 1213.73 L1037.04 1213.73 L1037.63 1213.73 L1038.22 1213.73 L1038.8 1213.73 L1039.39 1213.73 L1039.98 1213.73 L1040.56 1213.73 L1041.15 1213.73 L1041.73 1213.73 L1042.32 1213.73 L1042.91 1213.73 L1043.49 1213.73 L1044.08 1213.73 L1044.67 1213.73 L1045.25 1213.73 L1045.84 1213.73 L1046.43 1213.73 L1047.01 1213.73 L1047.6 1213.73 L1048.19 1213.73 L1048.77 1213.73 L1049.36 1213.73 L1049.94 1213.73 L1050.53 1213.73 L1051.12 1213.73 L1051.7 1213.73 L1052.29 1213.73 L1052.88 1213.73 L1053.46 1213.73 L1054.05 1213.73 L1054.64 1213.73 L1055.22 1213.73 L1055.81 1213.73 L1056.39 1213.73 L1056.98 1213.73 L1057.57 1213.73 L1058.15 1213.73 L1058.74 1213.73 L1059.33 1213.73 L1059.91 1213.73 L1060.5 1213.73 L1061.09 1213.73 L1061.67 1213.73 L1062.26 1213.73 L1062.85 1213.73 L1063.43 1213.73 L1064.02 1213.73 L1064.6 1213.73 L1065.19 1213.73 L1065.78 1213.73 L1066.36 1213.73 L1066.95 1213.73 L1067.54 1213.73 L1068.12 1213.73 L1068.71 1213.73 L1069.3 1213.73 L1069.88 1213.73 L1070.47 1213.73 L1071.06 1213.73 L1071.64 1213.73 L1072.23 1213.73 L1072.81 1213.73 L1073.4 1213.73 L1073.99 1213.73 L1074.57 1213.73 L1075.16 1213.73 L1075.75 1213.73 L1076.33 1213.73 L1076.92 1213.73 L1077.51 1213.73 L1078.09 1213.73 L1078.68 1213.73 L1079.26 1213.73 L1079.85 1213.73 L1080.44 1213.73 L1081.02 1213.73 L1081.61 1213.73 L1082.2 1213.73 L1082.78 1213.73 L1083.37 1213.73 L1083.96 1213.73 L1084.54 1213.73 L1085.13 1213.73 L1085.72 1213.73 L1086.3 1213.73 L1086.89 1213.73 L1087.47 1213.73 L1088.06 1213.73 L1088.65 1213.73 L1089.23 1213.73 L1089.82 1213.73 L1090.41 1213.73 L1090.99 1213.73 L1091.58 1213.73 L1092.17 1213.73 L1092.75 1213.73 L1093.34 1213.73 L1093.93 1213.73 L1094.51 1213.73 L1095.1 1213.73 L1095.68 1213.73 L1096.27 1213.73 L1096.86 1213.73 L1097.44 1213.73 L1098.03 1213.73 L1098.62 1213.73 L1099.2 1213.73 L1099.79 1213.73 L1100.38 1213.73 L1100.96 1213.73 L1101.55 1213.73 L1102.14 1213.73 L1102.72 1213.73 L1103.31 1213.73 L1103.89 1213.73 L1104.48 1213.73 L1105.07 1213.73 L1105.65 1213.73 L1106.24 1213.73 L1106.83 1213.73 L1107.41 1213.73 L1108 1213.73 L1108.59 1213.73 L1109.17 1213.73 L1109.76 1213.73 L1110.34 1213.73 L1110.93 1213.73 L1111.52 1213.73 L1112.1 1213.73 L1112.69 1213.73 L1113.28 1213.73 L1113.86 1213.73 L1114.45 1213.73 L1115.04 1213.73 L1115.62 1213.73 L1116.21 1213.73 L1116.8 1213.73 L1117.38 1213.73 L1117.97 1213.73 L1118.55 1213.73 L1119.14 1213.73 L1119.73 1213.73 L1120.31 1213.73 L1120.9 1213.73 L1121.49 1213.73 L1122.07 1213.73 L1122.66 1213.73 L1123.25 1213.73 L1123.83 1213.73 L1124.42 1213.73 L1125.01 1213.73 L1125.59 1213.73 L1126.18 1213.73 L1126.76 1213.73 L1127.35 1213.73 L1127.94 1213.73 L1128.52 1213.73 L1129.11 1213.73 L1129.7 1213.73 L1130.28 1213.73 L1130.87 1213.73 L1131.46 1213.73 L1132.04 1213.73 L1132.63 1213.73 L1133.21 1213.73 L1133.8 1213.73 L1134.39 1213.73 L1134.97 1213.73 L1135.56 1213.73 L1136.15 1213.73 L1136.73 1213.73 L1137.32 1213.73 L1137.91 1213.73 L1138.49 1213.73 L1139.08 1213.73 L1139.67 1213.73 L1140.25 1213.73 L1140.84 1213.73 L1141.42 1213.73 L1142.01 1213.73 L1142.6 1213.73 L1143.18 1213.73 L1143.77 1213.73 L1144.36 1213.73 L1144.94 1213.73 L1145.53 1213.73 L1146.12 1213.73 L1146.7 1213.73 L1147.29 1213.73 L1147.88 1213.73 L1148.46 1213.73 L1149.05 1213.73 L1149.63 1213.73 L1150.22 1213.73 L1150.81 1213.73 L1151.39 1213.73 L1151.98 1213.73 L1152.57 1213.73 L1153.15 1213.73 L1153.74 1213.73 L1154.33 1213.73 L1154.91 1213.73 L1155.5 1213.73 L1156.09 1213.73 L1156.67 1213.73 L1157.26 1213.73 L1157.84 1213.73 L1158.43 1213.73 L1159.02 1213.73 L1159.6 1213.73 L1160.19 1213.73 L1160.78 1213.73 L1161.36 1213.73 L1161.95 1213.73 L1162.54 1213.73 L1163.12 1213.73 L1163.71 1213.73 L1164.29 1213.73 L1164.88 1213.73 L1165.47 1213.73 L1166.05 1213.73 L1166.64 1213.73 L1167.23 1213.73 L1167.81 1213.73 L1168.4 1213.73 L1168.99 1213.73 L1169.57 1213.73 L1170.16 1213.73 L1170.75 1213.73 L1171.33 1213.73 L1171.92 1213.73 L1172.5 1213.73 L1173.09 1213.73 L1173.68 1213.73 L1174.26 1213.73 L1174.85 1213.73 L1175.44 1213.73 L1176.02 1213.73 L1176.61 1213.73 L1177.2 1213.73 L1177.78 1213.73 L1178.37 1213.73 L1178.96 1213.73 L1179.54 1213.73 L1180.13 1213.73 L1180.71 1213.73 L1181.3 1213.73 L1181.89 1213.73 L1182.47 1213.73 L1183.06 1213.73 L1183.65 1213.73 L1184.23 1213.73 L1184.82 1213.73 L1185.41 1213.73 L1185.99 1213.73 L1186.58 1213.73 L1187.16 1213.73 L1187.75 1213.73 L1188.34 1213.73 L1188.92 1213.73 L1189.51 1213.73 L1190.1 1213.73 L1190.68 1213.73 L1191.27 1213.73 L1191.86 1213.73 L1192.44 1213.73 L1193.03 1213.73 L1193.62 1213.73 L1194.2 1213.73 L1194.79 1213.73 L1195.37 1213.73 L1195.96 1213.73 L1196.55 1213.73 L1197.13 1213.73 L1197.72 1213.73 L1198.31 1213.73 L1198.89 1213.73 L1199.48 1213.73 L1200.07 1213.73 L1200.65 1213.73 L1201.24 1213.73 L1201.83 1213.73 L1202.41 1213.73 L1203 1213.73 L1203.58 1213.73 L1204.17 1213.73 L1204.76 1213.73 L1205.34 1213.73 L1205.93 1213.73 L1206.52 1213.73 L1207.1 1213.73 L1207.69 1213.73 L1208.28 1213.73 L1208.86 1213.73 L1209.45 1213.73 L1210.03 1213.73 L1210.62 1213.73 L1211.21 1213.73 L1211.79 1213.73 L1212.38 1213.73 L1212.97 1213.73 L1213.55 1213.73 L1214.14 1213.73 L1214.73 1213.73 L1215.31 1213.73 L1215.9 1213.73 L1216.49 1213.73 L1217.07 1213.73 L1217.66 1213.73 L1218.24 1213.73 L1218.83 1213.73 L1219.42 1213.73 L1220 1213.73 L1220.59 1213.73 L1221.18 1213.73 L1221.76 1213.73 L1222.35 1213.73 L1222.94 1213.73 L1223.52 1213.73 L1224.11 1213.73 L1224.7 1213.73 L1225.28 1213.73 L1225.87 1213.73 L1226.45 1213.73 L1227.04 1213.73 L1227.63 1213.73 L1228.21 1213.73 L1228.8 1213.73 L1229.39 1213.73 L1229.97 1213.73 L1230.56 1213.73 L1231.15 1213.73 L1231.73 1213.73 L1232.32 1213.73 L1232.91 1213.73 L1233.49 1213.73 L1234.08 1213.73 L1234.66 1213.73 L1235.25 1213.73 L1235.84 1213.73 L1236.42 1213.73 L1237.01 1213.73 L1237.6 1213.73 L1238.18 1213.73 L1238.77 1213.73 L1239.36 1213.73 L1239.94 1213.73 L1240.53 1213.73 L1241.11 1213.73 L1241.7 1213.73 L1242.29 1213.73 L1242.87 1213.73 L1243.46 1213.73 L1244.05 1213.73 L1244.63 1213.73 L1245.22 1213.73 L1245.81 1213.73 L1246.39 1213.73 L1246.98 1213.73 L1247.57 1213.73 L1248.15 1213.73 L1248.74 1213.73 L1249.32 1213.73 L1249.91 1213.73 L1250.5 1213.73 L1251.08 1213.73 L1251.67 1213.73 L1252.26 1213.73 L1252.84 1213.73 L1253.43 1213.73 L1254.02 1213.73 L1254.6 1213.73 L1255.19 1213.73 L1255.78 1213.73 L1256.36 1213.73 L1256.95 1213.73 L1257.53 1213.73 L1258.12 1213.73 L1258.71 1213.73 L1259.29 1213.73 L1259.88 1213.73 L1260.47 1213.73 L1261.05 1213.73 L1261.64 1213.73 L1262.23 1213.73 L1262.81 1213.73 L1263.4 1213.73 L1263.98 1213.73 L1264.57 1213.73 L1265.16 1213.73 L1265.74 1213.73 L1266.33 1213.73 L1266.92 1213.73 L1267.5 1213.73 L1268.09 1213.73 L1268.68 1213.73 L1269.26 1213.73 L1269.85 1213.73 L1270.44 1213.73 L1271.02 1213.73 L1271.61 1213.73 L1272.19 1213.73 L1272.78 1213.73 L1273.37 1213.73 L1273.95 1213.73 L1274.54 1213.73 L1275.13 1213.73 L1275.71 1213.73 L1276.3 1213.73 L1276.89 1213.73 L1277.47 1213.73 L1278.06 1213.73 L1278.65 1213.73 L1279.23 1213.73 L1279.82 1213.73 L1280.4 1213.73 L1280.99 1213.73 L1281.58 1213.73 L1282.16 1213.73 L1282.75 1213.73 L1283.34 1213.73 L1283.92 1213.73 L1284.51 1213.73 L1285.1 1213.73 L1285.68 1213.73 L1286.27 1213.73 L1286.86 1213.73 L1287.44 1213.73 L1288.03 1213.73 L1288.61 1213.73 L1289.2 1213.73 L1289.79 1213.73 L1290.37 1213.73 L1290.96 1213.73 L1291.55 1213.73 L1292.13 1213.73 L1292.72 1213.73 L1293.31 1213.73 L1293.89 1213.73 L1294.48 1213.73 L1295.06 1213.73 L1295.65 1213.73 L1296.24 1213.73 L1296.82 1213.73 L1297.41 1213.73 L1298 1213.73 L1298.58 1213.73 L1299.17 1213.73 L1299.76 1213.73 L1300.34 1213.73 L1300.93 1213.73 L1301.52 1213.73 L1302.1 1213.73 L1302.69 1213.73 L1303.27 1213.73 L1303.86 1213.73 L1304.45 1213.73 L1305.03 1213.73 L1305.62 1213.73 L1306.21 1213.73 L1306.79 1213.73 L1307.38 1213.73 L1307.97 1213.73 L1308.55 1213.73 L1309.14 1213.73 L1309.73 1213.73 L1310.31 1213.73 L1310.9 1213.73 L1311.48 1213.73 L1312.07 1213.73 L1312.66 1213.73 L1313.24 1213.73 L1313.83 1213.73 L1314.42 1213.73 L1315 1213.73 L1315.59 1213.73 L1316.18 1213.73 L1316.76 1213.73 L1317.35 1213.73 L1317.93 1213.73 L1318.52 1213.73 L1319.11 1213.73 L1319.69 1213.73 L1320.28 1213.73 L1320.87 1213.73 L1321.45 1213.73 L1322.04 1213.73 L1322.63 1213.73 L1323.21 1213.73 L1323.8 1213.73 L1324.39 1213.73 L1324.97 1213.73 L1325.56 1213.73 L1326.14 1213.73 L1326.73 1213.73 L1327.32 1213.73 L1327.9 1213.73 L1328.49 1213.73 L1329.08 1213.73 L1329.66 1213.73 L1330.25 1213.73 L1330.84 1213.73 L1331.42 1213.73 L1332.01 1213.73 L1332.6 1213.73 L1333.18 1213.73 L1333.77 1213.73 L1334.35 1213.73 L1334.94 1213.73 L1335.53 1213.73 L1336.11 1213.73 L1336.7 1213.73 L1337.29 1213.73 L1337.87 1213.73 L1338.46 1213.73 L1339.05 1213.73 L1339.63 1213.73 L1340.22 1213.73 L1340.8 1213.73 L1341.39 1213.73 L1341.98 1213.73 L1342.56 1213.73 L1343.15 1213.73 L1343.74 1213.73 L1344.32 1213.73 L1344.91 1213.73 L1345.5 1213.73 L1346.08 1213.73 L1346.67 1213.73 L1347.26 1213.73 L1347.84 1213.73 L1348.43 1213.73 L1349.01 1213.73 L1349.6 1213.73 L1350.19 1213.73 L1350.77 1213.73 L1351.36 1213.73 L1351.95 1213.73 L1352.53 1213.73 L1353.12 1213.73 L1353.71 1213.73 L1354.29 1213.73 L1354.88 1213.73 L1355.47 1213.73 L1356.05 1213.73 L1356.64 1213.73 L1357.22 1213.73 L1357.81 1213.73 L1358.4 1213.73 L1358.98 1213.73 L1359.57 1213.73 L1360.16 1213.73 L1360.74 1213.73 L1361.33 1213.73 L1361.92 1213.73 L1362.5 1213.73 L1363.09 1213.73 L1363.68 1213.73 L1364.26 1213.73 L1364.85 1213.73 L1365.43 1213.73 L1366.02 1213.73 L1366.61 1213.73 L1367.19 1213.73 L1367.78 1213.73 L1368.37 1213.73 L1368.95 1213.73 L1369.54 1213.73 L1370.13 1213.73 L1370.71 1213.73 L1371.3 1213.73 L1371.88 1213.73 L1372.47 1213.73 L1373.06 1213.73 L1373.64 1213.73 L1374.23 1213.73 L1374.82 1213.73 L1375.4 1213.73 L1375.99 1213.73 L1376.58 1213.73 L1377.16 1213.73 L1377.75 1213.73 L1378.34 1213.73 L1378.92 1213.73 L1379.51 1213.73 L1380.09 1213.73 L1380.68 1213.73 L1381.27 1213.73 L1381.85 1213.73 L1382.44 1213.73 L1383.03 1213.73 L1383.61 1213.73 L1384.2 1213.73 L1384.79 1213.73 L1385.37 1213.73 L1385.96 1213.73 L1386.55 1213.73 L1387.13 1213.73 L1387.72 1213.73 L1388.3 1213.73 L1388.89 1213.73 L1389.48 1213.73 L1390.06 1213.73 L1390.65 1213.73 L1391.24 1213.73 L1391.82 1213.73 L1392.41 1213.73 L1393 1213.73 L1393.58 1213.73 L1394.17 1213.73 L1394.75 1213.73 L1395.34 1213.73 L1395.93 1213.73 L1396.51 1213.73 L1397.1 1213.73 L1397.69 1213.73 L1398.27 1213.73 L1398.86 1213.73 L1399.45 1213.73 L1400.03 1213.73 L1400.62 1213.73 L1401.21 1213.73 L1401.79 1213.73 L1402.38 1213.73 L1402.96 1213.73 L1403.55 1213.73 L1404.14 1213.73 L1404.72 1213.73 L1405.31 1213.73 L1405.9 1213.73 L1406.48 1213.73 L1407.07 1213.73 L1407.66 1213.73 L1408.24 1213.73 L1408.83 1213.73 L1409.42 1213.73 L1410 1213.73 L1410.59 1213.73 L1411.17 1213.73 L1411.76 1213.73 L1412.35 1213.73 L1412.93 1213.73 L1413.52 1213.73 L1414.11 1213.73 L1414.69 1213.73 L1415.28 1213.73 L1415.87 1213.73 L1416.45 1213.73 L1417.04 1213.73 L1417.63 1213.73 L1418.21 1213.73 L1418.8 1213.73 L1419.38 1213.73 L1419.97 1213.73 L1420.56 1213.73 L1421.14 1213.73 L1421.73 1213.73 L1422.32 1213.73 L1422.9 1213.73 L1423.49 1213.73 L1424.08 1213.73 L1424.66 1213.73 L1425.25 1213.73 L1425.83 1213.73 L1426.42 1213.73 L1427.01 1213.73 L1427.59 1213.73 L1428.18 1213.73 L1428.77 1213.73 L1429.35 1213.73 L1429.94 1213.73 L1430.53 1213.73 L1431.11 1213.73 L1431.7 1213.73 L1432.29 1213.73 L1432.87 1213.73 L1433.46 1213.73 L1434.04 1213.73 L1434.63 1213.73 L1435.22 1213.73 L1435.8 1213.73 L1436.39 1213.73 L1436.98 1213.73 L1437.56 1213.73 L1438.15 1213.73 L1438.74 1213.73 L1439.32 1213.73 L1439.91 1213.73 L1440.5 1213.73 L1441.08 1213.73 L1441.67 1213.73 L1442.25 1213.73 L1442.84 1213.73 L1443.43 1213.73 L1444.01 1213.73 L1444.6 1213.73 L1445.19 1213.73 L1445.77 1213.73 L1446.36 1213.73 L1446.95 1213.73 L1447.53 1213.73 L1448.12 1213.73 L1448.7 1213.73 L1449.29 1213.73 L1449.88 1213.73 L1450.46 1213.73 L1451.05 1213.73 L1451.64 1213.73 L1452.22 1213.73 L1452.81 1213.73 L1453.4 1213.73 L1453.98 1213.73 L1454.57 1213.73 L1455.16 1213.73 L1455.74 1213.73 L1456.33 1213.73 L1456.91 1213.73 L1457.5 1213.73 L1458.09 1213.73 L1458.67 1213.73 L1459.26 1213.73 L1459.85 1213.73 L1460.43 1213.73 L1461.02 1213.73 L1461.61 1213.73 L1462.19 1213.73 L1462.78 1213.73 L1463.37 1213.73 L1463.95 1213.73 L1464.54 1213.73 L1465.12 1213.73 L1465.71 1213.73 L1466.3 1213.73 L1466.88 1213.73 L1467.47 1213.73 L1468.06 1213.73 L1468.64 1213.73 L1469.23 1213.73 L1469.82 1213.73 L1470.4 1213.73 L1470.99 1213.73 L1471.57 1213.73 L1472.16 1213.73 L1472.75 1213.73 L1473.33 1213.73 L1473.92 1213.73 L1474.51 1213.73 L1475.09 1213.73 L1475.68 1213.73 L1476.27 1213.73 L1476.85 1213.73 L1477.44 1213.73 L1478.03 1213.73 L1478.61 1213.73 L1479.2 1213.73 L1479.78 1213.73 L1480.37 1213.73 L1480.96 1213.73 L1481.54 1213.73 L1482.13 1213.73 L1482.72 1213.73 L1483.3 1213.73 L1483.89 1213.73 L1484.48 1213.73 L1485.06 1213.73 L1485.65 1213.73 L1486.24 1213.73 L1486.82 1213.73 L1487.41 1213.73 L1487.99 1213.73 L1488.58 1213.73 L1489.17 1213.73 L1489.75 1213.73 L1490.34 1213.73 L1490.93 1213.73 L1491.51 1213.73 L1492.1 1213.73 L1492.69 1213.73 L1493.27 1213.73 L1493.86 1213.73 L1494.45 1213.73 L1495.03 1213.73 L1495.62 1213.73 L1496.2 1213.73 L1496.79 1213.73 L1497.38 1213.73 L1497.96 1213.73 L1498.55 1213.73 L1499.14 1213.73 L1499.72 1213.73 L1500.31 1213.73 L1500.9 1213.73 L1501.48 1213.73 L1502.07 1213.73 L1502.65 1213.73 L1503.24 1213.73 L1503.83 1213.73 L1504.41 1213.73 L1505 1213.73 L1505.59 1213.73 L1506.17 1213.73 L1506.76 1213.73 L1507.35 1213.73 L1507.93 1213.73 L1508.52 1213.73 L1509.11 1213.73 L1509.69 1213.73 L1510.28 1213.73 L1510.86 1213.73 L1511.45 1213.73 L1512.04 1213.73 L1512.62 1213.73 L1513.21 1213.73 L1513.8 1213.73 L1514.38 1213.73 L1514.97 1213.73 L1515.56 1213.73 L1516.14 1213.73 L1516.73 1213.73 L1517.32 1213.73 L1517.9 1213.73 L1518.49 1213.73 L1519.07 1213.73 L1519.66 1213.73 L1520.25 1213.73 L1520.83 1213.73 L1521.42 1213.73 L1522.01 1213.73 L1522.59 1213.73 L1523.18 1213.73 L1523.77 1213.73 L1524.35 1213.73 L1524.94 1213.73 L1525.52 1213.73 L1526.11 1213.73 L1526.7 1213.73 L1527.28 1213.73 L1527.87 1213.73 L1528.46 1213.73 L1529.04 1213.73 L1529.63 1213.73 L1530.22 1213.73 L1530.8 1213.73 L1531.39 1213.73 L1531.98 1213.73 L1532.56 1213.73 L1533.15 1213.73 L1533.73 1213.73 L1534.32 1213.73 L1534.91 1213.73 L1535.49 1213.73 L1536.08 1213.73 L1536.67 1213.73 L1537.25 1213.73 L1537.84 1213.73 L1538.43 1213.73 L1539.01 1213.73 L1539.6 1213.73 L1540.19 1213.73 L1540.77 1213.73 L1541.36 1213.73 L1541.94 1213.73 L1542.53 1213.73 L1543.12 1213.73 L1543.7 1213.73 L1544.29 1213.73 L1544.88 1213.73 L1545.46 1213.73 L1546.05 1213.73 L1546.64 1213.73 L1547.22 1213.73 L1547.81 1213.73 L1548.4 1213.73 L1548.98 1213.73 L1549.57 1213.73 L1550.15 1213.73 L1550.74 1213.73 L1551.33 1213.73 L1551.91 1213.73 L1552.5 1213.73 L1553.09 1213.73 L1553.67 1213.73 L1554.26 1213.73 L1554.85 1213.73 L1555.43 1213.73 L1556.02 1213.73 L1556.6 1213.73 L1557.19 1213.73 L1557.78 1213.73 L1558.36 1213.73 L1558.95 1213.73 L1559.54 1213.73 L1560.12 1213.73 L1560.71 1213.73 L1561.3 1213.73 L1561.88 1213.73 L1562.47 1213.73 L1563.06 1213.73 L1563.64 1213.73 L1564.23 1213.73 L1564.81 1213.73 L1565.4 1213.73 L1565.99 1213.73 L1566.57 1213.73 L1567.16 1213.73 L1567.75 1213.73 L1568.33 1213.73 L1568.92 1213.73 L1569.51 1213.73 L1570.09 1213.73 L1570.68 1213.73 L1571.27 1213.73 L1571.85 1213.73 L1572.44 1213.73 L1573.02 1213.73 L1573.61 1213.73 L1574.2 1213.73 L1574.78 1213.73 L1575.37 1213.73 L1575.96 1213.73 L1576.54 1213.73 L1577.13 1213.73 L1577.72 1213.73 L1578.3 1213.73 L1578.89 1213.73 L1579.47 1213.73 L1580.06 1213.73 L1580.65 1213.73 L1581.23 1213.73 L1581.82 1213.73 L1582.41 1213.73 L1582.99 1213.73 L1583.58 1213.73 L1584.17 1213.73 L1584.75 1213.73 L1585.34 1213.73 L1585.93 1213.73 L1586.51 1213.73 L1587.1 1213.73 L1587.68 1213.73 L1588.27 1213.73 L1588.86 1213.73 L1589.44 1213.73 L1590.03 1213.73 L1590.62 1213.73 L1591.2 1213.73 L1591.79 1213.73 L1592.38 1213.73 L1592.96 1213.73 L1593.55 1213.73 L1594.14 1213.73 L1594.72 1213.73 L1595.31 1213.73 L1595.89 1213.73 L1596.48 1213.73 L1597.07 1213.73 L1597.65 1213.73 L1598.24 1213.73 L1598.83 1213.73 L1599.41 1213.73 L1600 1213.73 L1600.59 1213.73 L1601.17 1213.73 L1601.76 1213.73 L1602.34 1213.73 L1602.93 1213.73 L1603.52 1213.73 L1604.1 1213.73 L1604.69 1213.73 L1605.28 1213.73 L1605.86 1213.73 L1606.45 1213.73 L1607.04 1213.73 L1607.62 1213.73 L1608.21 1213.73 L1608.8 1213.73 L1609.38 1213.73 L1609.97 1213.73 L1610.55 1213.73 L1611.14 1213.73 L1611.73 1213.73 L1612.31 1213.73 L1612.9 1213.73 L1613.49 1213.73 L1614.07 1213.73 L1614.66 1213.73 L1615.25 1213.73 L1615.83 1213.73 L1616.42 1213.73 L1617.01 1213.73 L1617.59 1213.73 L1618.18 1213.73 L1618.76 1213.73 L1619.35 1213.73 L1619.94 1213.73 L1620.52 1213.73 L1621.11 1213.73 L1621.7 1213.73 L1622.28 1213.73 L1622.87 1213.73 L1623.46 1213.73 L1624.04 1213.73 L1624.63 1213.73 L1625.22 1213.73 L1625.8 1213.73 L1626.39 1213.73 L1626.97 1213.73 L1627.56 1213.73 L1628.15 1213.73 L1628.73 1213.73 L1629.32 1213.73 L1629.91 1213.73 L1630.49 1213.73 L1631.08 1213.73 L1631.67 1213.73 L1632.25 1213.73 L1632.84 1213.73 L1633.42 1213.73 L1634.01 1213.73 L1634.6 1213.73 L1635.18 1213.73 L1635.77 1213.73 L1636.36 1213.73 L1636.94 1213.73 L1637.53 1213.73 L1638.12 1213.73 L1638.7 1213.73 L1639.29 1213.73 L1639.88 1213.73 L1640.46 1213.73 L1641.05 1213.73 L1641.63 1213.73 L1642.22 1213.73 L1642.81 1213.73 L1643.39 1213.73 L1643.98 1213.73 L1644.57 1213.73 L1645.15 1213.73 L1645.74 1213.73 L1646.33 1213.73 L1646.91 1213.73 L1647.5 1213.73 L1648.09 1213.73 L1648.67 1213.73 L1649.26 1213.73 L1649.84 1213.73 L1650.43 1213.73 L1651.02 1213.73 L1651.6 1213.73 L1652.19 1213.73 L1652.78 1213.73 L1653.36 1213.73 L1653.95 1213.73 L1654.54 1213.73 L1655.12 1213.73 L1655.71 1213.73 L1656.29 1213.73 L1656.88 1213.73 L1657.47 1213.73 L1658.05 1213.73 L1658.64 1213.73 L1659.23 1213.73 L1659.81 1213.73 L1660.4 1213.73 L1660.99 1213.73 L1661.57 1213.73 L1662.16 1213.73 L1662.75 1213.73 L1663.33 1213.73 L1663.92 1213.73 L1664.5 1213.73 L1665.09 1213.73 L1665.68 1213.73 L1666.26 1213.73 L1666.85 1213.73 L1667.44 1213.73 L1668.02 1213.73 L1668.61 1213.73 L1669.2 1213.73 L1669.78 1213.73 L1670.37 1213.73 L1670.96 1213.73 L1671.54 1213.73 L1672.13 1213.73 L1672.71 1213.73 L1673.3 1213.73 L1673.89 1213.73 L1674.47 1213.73 L1675.06 1213.73 L1675.65 1213.73 L1676.23 1213.73 L1676.82 1213.73 L1677.41 1213.73 L1677.99 1213.73 L1678.58 1213.73 L1679.17 1213.73 L1679.75 1213.73 L1680.34 1213.73 L1680.92 1213.73 L1681.51 1213.73 L1682.1 1213.73 L1682.68 1213.73 L1683.27 1213.73 L1683.86 1213.73 L1684.44 1213.73 L1685.03 1213.73 L1685.62 1213.73 L1686.2 1213.73 L1686.79 1213.73 L1687.37 1213.73 L1687.96 1213.73 L1688.55 1213.73 L1689.13 1213.73 L1689.72 1213.73 L1690.31 1213.73 L1690.89 1213.73 L1691.48 1213.73 L1692.07 1213.73 L1692.65 1213.73 L1693.24 1213.73 L1693.83 1213.73 L1694.41 1213.73 L1695 1213.73 L1695.58 1213.73 L1696.17 1213.73 L1696.76 1213.73 L1697.34 1213.73 L1697.93 1213.73 L1698.52 1213.73 L1699.1 1213.73 L1699.69 1213.73 L1700.28 1213.73 L1700.86 1213.73 L1701.45 1213.73 L1702.04 1213.73 L1702.62 1213.73 L1703.21 1213.73 L1703.79 1213.73 L1704.38 1213.73 L1704.97 1213.73 L1705.55 1213.73 L1706.14 1213.73 L1706.73 1213.73 L1707.31 1213.73 L1707.9 1213.73 L1708.49 1213.73 L1709.07 1213.73 L1709.66 1213.73 L1710.24 1213.73 L1710.83 1213.73 L1711.42 1213.73 L1712 1213.73 L1712.59 1213.73 L1713.18 1213.73 L1713.76 1213.73 L1714.35 1213.73 L1714.94 1213.73 L1715.52 1213.73 L1716.11 1213.73 L1716.7 1213.73 L1717.28 1213.73 L1717.87 1213.73 L1718.45 1213.73 L1719.04 1213.73 L1719.63 1213.73 L1720.21 1213.73 L1720.8 1213.73 L1721.39 1213.73 L1721.97 1213.73 L1722.56 1213.73 L1723.15 1213.73 L1723.73 1213.73 L1724.32 1213.73 L1724.91 1213.73 L1725.49 1213.73 L1726.08 1213.73 L1726.66 1213.73 L1727.25 1213.73 L1727.84 1213.73 L1728.42 1213.73 L1729.01 1213.73 L1729.6 1213.73 L1730.18 1213.73 L1730.77 1213.73 L1731.36 1213.73 L1731.94 1213.73 L1732.53 1213.73 L1733.11 1213.73 L1733.7 1213.73 L1734.29 1213.73 L1734.87 1213.73 L1735.46 1213.73 L1736.05 1213.73 L1736.63 1213.73 L1737.22 1213.73 L1737.81 1213.73 L1738.39 1213.73 L1738.98 1213.73 L1739.57 1213.73 L1740.15 1213.73 L1740.74 1213.73 L1741.32 1213.73 L1741.91 1213.73 L1742.5 1213.73 L1743.08 1213.73 L1743.67 1213.73 L1744.26 1213.73 L1744.84 1213.73 L1745.43 1213.73 L1746.02 1213.73 L1746.6 1213.73 L1747.19 1213.73 L1747.78 1213.73 L1748.36 1213.73 L1748.95 1213.73 L1749.53 1213.73 L1750.12 1213.73 L1750.71 1213.73 L1751.29 1213.73 L1751.88 1213.73 L1752.47 1213.73 L1753.05 1213.73 L1753.64 1213.73 L1754.23 1213.73 L1754.81 1213.73 L1755.4 1213.73 L1755.99 1213.73 L1756.57 1213.73 L1757.16 1213.73 L1757.74 1213.73 L1758.33 1213.73 L1758.92 1213.73 L1759.5 1213.73 L1760.09 1213.73 L1760.68 1213.73 L1761.26 1213.73 L1761.85 1213.73 L1762.44 1213.73 L1763.02 1213.73 L1763.61 1213.73 L1764.19 1213.73 L1764.78 1213.73 L1765.37 1213.73 L1765.95 1213.73 L1766.54 1213.73 L1767.13 1213.73 L1767.71 1213.73 L1768.3 1213.73 L1768.89 1213.73 L1769.47 1213.73 L1770.06 1213.73 L1770.65 1213.73 L1771.23 1213.73 L1771.82 1213.73 L1772.4 1213.73 L1772.99 1213.73 L1773.58 1213.73 L1774.16 1213.73 L1774.75 1213.73 L1775.34 1213.73 L1775.92 1213.73 L1776.51 1213.73 L1777.1 1213.73 L1777.68 1213.73 L1778.27 1213.73 L1778.86 1213.73 L1779.44 1213.73 L1780.03 1213.73 L1780.61 1213.73 L1781.2 1213.73 L1781.79 1213.73 L1782.37 1213.73 L1782.96 1213.73 L1783.55 1213.73 L1784.13 1213.73 L1784.72 1213.73 L1785.31 1213.73 L1785.89 1213.73 L1786.48 1213.73 L1787.06 1213.73 L1787.65 1213.73 L1788.24 1213.73 L1788.82 1213.73 L1789.41 1213.73 L1790 1213.73 L1790.58 1213.73 L1791.17 1213.73 L1791.76 1213.73 L1792.34 1213.73 L1792.93 1213.73 L1793.52 1213.73 L1794.1 1213.73 L1794.69 1213.73 L1795.27 1213.73 L1795.86 1213.73 L1796.45 1213.73 L1797.03 1213.73 L1797.62 1213.73 L1798.21 1213.73 L1798.79 1213.73 L1799.38 1213.73 L1799.97 1213.73 L1800.55 1213.73 L1801.14 1213.73 L1801.73 1213.73 L1802.31 1213.73 L1802.9 1213.73 L1803.48 1213.73 L1804.07 1213.73 L1804.66 1213.73 L1805.24 1213.73 L1805.83 1213.73 L1806.42 1213.73 L1807 1213.73 L1807.59 1213.73 L1808.18 1213.73 L1808.76 1213.73 L1809.35 1213.73 L1809.94 1213.73 L1810.52 1213.73 L1811.11 1213.73 L1811.69 1213.73 L1812.28 1213.73 L1812.87 1213.73 L1813.45 1213.73 L1814.04 1213.73 L1814.63 1213.73 L1815.21 1213.73 L1815.8 1213.73 L1816.39 1213.73 L1816.97 1213.73 L1817.56 1213.73 L1818.14 1213.73 L1818.73 1213.73 L1819.32 1213.73 L1819.9 1213.73 L1820.49 1213.73 L1821.08 1213.73 L1821.66 1213.73 L1822.25 1213.73 L1822.84 1213.73 L1823.42 1213.73 L1824.01 1213.73 L1824.6 1213.73 L1825.18 1213.73 L1825.77 1213.73 L1826.35 1213.73 L1826.94 1213.73 L1827.53 1213.73 L1828.11 1213.73 L1828.7 1213.73 L1829.29 1213.73 L1829.87 1213.73 L1830.46 1213.73 L1831.05 1213.73 L1831.63 1213.73 L1832.22 1213.73 L1832.81 1213.73 L1833.39 1213.73 L1833.98 1213.73 L1834.56 1213.73 L1835.15 1213.73 L1835.74 1213.73 L1836.32 1213.73 L1836.91 1213.73 L1837.5 1213.73 L1838.08 1213.73 L1838.67 1213.73 L1839.26 1213.73 L1839.84 1213.73 L1840.43 1213.73 L1841.01 1213.73 L1841.6 1213.73 L1842.19 1213.73 L1842.77 1213.73 L1843.36 1213.73 L1843.95 1213.73 L1844.53 1213.73 L1845.12 1213.73 L1845.71 1213.73 L1846.29 1213.73 L1846.88 1213.73 L1847.47 1213.73 L1848.05 1213.73 L1848.64 1213.73 L1849.22 1213.73 L1849.81 1213.73 L1850.4 1213.73 L1850.98 1213.73 L1851.57 1213.73 L1852.16 1213.73 L1852.74 1213.73 L1853.33 1213.73 L1853.92 1213.73 L1854.5 1213.73 L1855.09 1213.73 L1855.68 1213.73 L1856.26 1213.73 L1856.85 1213.73 L1857.43 1213.73 L1858.02 1213.73 L1858.61 1213.73 L1859.19 1213.73 L1859.78 1213.73 L1860.37 1213.73 L1860.95 1213.73 L1861.54 1213.73 L1862.13 1213.73 L1862.71 1213.73 L1863.3 1213.73 L1863.88 1213.73 L1864.47 1213.73 L1865.06 1213.73 L1865.64 1213.73 L1866.23 1213.73 L1866.82 1213.73 L1867.4 1213.73 L1867.99 1213.73 L1868.58 1213.73 L1869.16 1213.73 L1869.75 1213.73 L1870.34 1213.73 L1870.92 1213.73 L1871.51 1213.73 L1872.09 1213.73 L1872.68 1213.73 L1873.27 1213.73 L1873.85 1213.73 L1874.44 1213.73 L1875.03 1213.73 L1875.61 1213.73 L1876.2 1213.73 L1876.79 1213.73 L1877.37 1213.73 L1877.96 1213.73 L1878.55 1213.73 L1879.13 1213.73 L1879.72 1213.73 L1880.3 1213.73 L1880.89 1213.73 L1881.48 1213.73 L1882.06 1213.73 L1882.65 1213.73 L1883.24 1213.73 L1883.82 1213.73 L1884.41 1213.73 L1885 1213.73 L1885.58 1213.73 L1886.17 1213.73 L1886.76 1213.73 L1887.34 1213.73 L1887.93 1213.73 L1888.51 1213.73 L1889.1 1213.73 L1889.69 1213.73 L1890.27 1213.73 L1890.86 1213.73 L1891.45 1213.73 L1892.03 1213.73 L1892.62 1213.73 L1893.21 1213.73 L1893.79 1213.73 L1894.38 1213.73 L1894.96 1213.73 L1895.55 1213.73 L1896.14 1213.73 L1896.72 1213.73 L1897.31 1213.73 L1897.9 1213.73 L1898.48 1213.73 L1899.07 1213.73 L1899.66 1213.73 L1900.24 1213.73 L1900.83 1213.73 L1901.42 1213.73 L1902 1213.73 L1902.59 1213.73 L1903.17 1213.73 L1903.76 1213.73 L1904.35 1213.73 L1904.93 1213.73 L1905.52 1213.73 L1906.11 1213.73 L1906.69 1213.73 L1907.28 1213.73 L1907.87 1213.73 L1908.45 1213.73 L1909.04 1213.73 L1909.63 1213.73 L1910.21 1213.73 L1910.8 1213.73 L1911.38 1213.73 L1911.97 1213.73 L1912.56 1213.73 L1913.14 1213.73 L1913.73 1213.73 L1914.32 1213.73 L1914.9 1213.73 L1915.49 1213.73 L1916.08 1213.73 L1916.66 1213.73 L1917.25 1213.73 L1917.83 1213.73 L1918.42 1213.73 L1919.01 1213.73 L1919.59 1213.73 L1920.18 1213.73 L1920.77 1213.73 L1921.35 1213.73 L1921.94 1213.73 L1922.53 1213.73 L1923.11 1213.73 L1923.7 1213.73 L1924.29 1213.73 L1924.87 1213.73 L1925.46 1213.73 L1926.04 1213.73 L1926.63 1213.73 L1927.22 1213.73 L1927.8 1213.73 L1928.39 1213.73 L1928.98 1213.73 L1929.56 1213.73 L1930.15 1213.73 L1930.74 1213.73 L1931.32 1213.73 L1931.91 1213.73 L1932.5 1213.73 L1933.08 1213.73 L1933.67 1213.73 L1934.25 1213.73 L1934.84 1213.73 L1935.43 1213.73 L1936.01 1213.73 L1936.6 1213.73 L1937.19 1213.73 L1937.77 1213.73 L1938.36 1213.73 L1938.95 1213.73 L1939.53 1213.73 L1940.12 1213.73 L1940.71 1213.73 L1941.29 1213.73 L1941.88 1213.73 L1942.46 1213.73 L1943.05 1213.73 L1943.64 1213.73 L1944.22 1213.73 L1944.81 1213.73 L1945.4 1213.73 L1945.98 1213.73 L1946.57 1213.73 L1947.16 1213.73 L1947.74 1213.73 L1948.33 1213.73 L1948.91 1213.73 L1949.5 1213.73 L1950.09 1213.73 L1950.67 1213.73 L1951.26 1213.73 L1951.85 1213.73 L1952.43 1213.73 L1953.02 1213.73 L1953.61 1213.73 L1954.19 1213.73 L1954.78 1213.73 L1955.37 1213.73 L1955.95 1213.73 L1956.54 1213.73 L1957.12 1213.73 L1957.71 1213.73 L1958.3 1213.73 L1958.88 1213.73 L1959.47 1213.73 L1960.06 1213.73 L1960.64 1213.73 L1961.23 1213.73 L1961.82 1213.73 L1962.4 1213.73 L1962.99 1213.73 L1963.58 1213.73 L1964.16 1213.73 L1964.75 1213.73 L1965.33 1213.73 L1965.92 1213.73 L1966.51 1213.73 L1967.09 1213.73 L1967.68 1213.73 L1968.27 1213.73 L1968.85 1213.73 L1969.44 1213.73 L1970.03 1213.73 L1970.61 1213.73 L1971.2 1213.73 L1971.78 1213.73 L1972.37 1213.73 L1972.96 1213.73 L1973.54 1213.73 L1974.13 1213.73 L1974.72 1213.73 L1975.3 1213.73 L1975.89 1213.73 L1976.48 1213.73 L1977.06 1213.73 L1977.65 1213.73 L1978.24 1213.73 L1978.82 1213.73 L1979.41 1213.73 L1979.99 1213.73 L1980.58 1213.73 L1981.17 1213.73 L1981.75 1213.73 L1982.34 1213.73 L1982.93 1213.73 L1983.51 1213.73 L1984.1 1213.73 L1984.69 1213.73 L1985.27 1213.73 L1985.86 1213.73 L1986.45 1213.73 L1987.03 1213.73 L1987.62 1213.73 L1988.2 1213.73 L1988.79 1213.73 L1989.38 1213.73 L1989.96 1213.73 L1990.55 1213.73 L1991.14 1213.73 L1991.72 1213.73 L1992.31 1213.73 L1992.9 1213.73 L1993.48 1213.73 L1994.07 1213.73 L1994.65 1213.73 L1995.24 1213.73 L1995.83 1213.73 L1996.41 1213.73 L1997 1213.73 L1997.59 1213.73 L1998.17 1213.73 L1998.76 1213.73 L1999.35 1213.73 L1999.93 1213.73 L2000.52 1213.73 L2001.11 1213.73 L2001.69 1213.73 L2002.28 1213.73 L2002.86 1213.73 L2003.45 1213.73 L2004.04 1213.73 L2004.62 1213.73 L2005.21 1213.73 L2005.8 1213.73 L2006.38 1213.73 L2006.97 1213.73 L2007.56 1213.73 L2008.14 1213.73 L2008.73 1213.73 L2009.32 1213.73 L2009.9 1213.73 L2010.49 1213.73 L2011.07 1213.73 L2011.66 1213.73 L2012.25 1213.73 L2012.83 1213.73 L2013.42 1213.73 L2014.01 1213.73 L2014.59 1213.73 L2015.18 1213.73 L2015.77 1213.73 L2016.35 1213.73 L2016.94 1213.73 L2017.53 1213.73 L2018.11 1213.73 L2018.7 1213.73 L2019.28 1213.73 L2019.87 1213.73 L2020.46 1213.73 L2021.04 1213.73 L2021.63 1213.73 L2022.22 1213.73 L2022.8 1213.73 L2023.39 1213.73 L2023.98 1213.73 L2024.56 1213.73 L2025.15 1213.73 L2025.73 1213.73 L2026.32 1213.73 L2026.91 1213.73 L2027.49 1213.73 L2028.08 1213.73 L2028.67 1213.73 L2029.25 1213.73 L2029.84 1213.73 L2030.43 1213.73 L2031.01 1213.73 L2031.6 1213.73 L2032.19 1213.73 L2032.77 1213.73 L2033.36 1213.73 L2033.94 1213.73 L2034.53 1213.73 L2035.12 1213.73 L2035.7 1213.73 L2036.29 1213.73 L2036.88 1213.73 L2037.46 1213.73 L2038.05 1213.73 L2038.64 1213.73 L2039.22 1213.73 L2039.81 1213.73 L2040.4 1213.73 L2040.98 1213.73 L2041.57 1213.73 L2042.15 1213.73 L2042.74 1213.73 L2043.33 1213.73 L2043.91 1213.73 L2044.5 1213.73 L2045.09 1213.73 L2045.67 1213.73 L2046.26 1213.73 L2046.85 1213.73 L2047.43 1213.73 L2048.02 1213.73 L2048.6 1213.73 L2049.19 1213.73 L2049.78 1213.73 L2050.36 1213.73 L2050.95 1213.73 L2051.54 1213.73 L2052.12 1213.73 L2052.71 1213.73 L2053.3 1213.73 L2053.88 1213.73 L2054.47 1213.73 L2055.06 1213.73 L2055.64 1213.73 L2056.23 1213.73 L2056.81 1213.73 L2057.4 1213.73 L2057.99 1213.73 L2058.57 1213.73 L2059.16 1213.73 L2059.75 1213.73 L2060.33 1213.73 L2060.92 1213.73 L2061.51 1213.73 L2062.09 1213.73 L2062.68 1213.73 L2063.27 1213.73 L2063.85 1213.73 L2064.44 1213.73 L2065.02 1213.73 L2065.61 1213.73 L2066.2 1213.73 L2066.78 1213.73 L2067.37 1213.73 L2067.96 1213.73 L2068.54 1213.73 L2069.13 1213.73 L2069.72 1213.73 L2070.3 1213.73 L2070.89 1213.73 L2071.48 1213.73 L2072.06 1213.73 L2072.65 1213.73 L2073.23 1213.73 L2073.82 1213.73 L2074.41 1213.73 L2074.99 1213.73 L2075.58 1213.73 L2076.17 1213.73 L2076.75 1213.73 L2077.34 1213.73 L2077.93 1213.73 L2078.51 1213.73 L2079.1 1213.73 L2079.68 1213.73 L2080.27 1213.73 L2080.86 1213.73 L2081.44 1213.73 L2082.03 1213.73 L2082.62 1213.73 L2083.2 1213.73 L2083.79 1213.73 L2084.38 1213.73 L2084.96 1213.73 L2085.55 1213.73 L2086.14 1213.73 L2086.72 1213.73 L2087.31 1213.73 L2087.89 1213.73 L2088.48 1213.73 L2089.07 1213.73 L2089.65 1213.73 L2090.24 1213.73 L2090.83 1213.73 L2091.41 1213.73 L2092 1213.73 L2092.59 1213.73 L2093.17 1213.73 L2093.76 1213.73 L2094.35 1213.73 L2094.93 1213.73 L2095.52 1213.73 L2096.1 1213.73 L2096.69 1213.73 L2097.28 1213.73 L2097.86 1213.73 L2098.45 1213.73 L2099.04 1213.73 L2099.62 1213.73 L2100.21 1213.73 L2100.8 1213.73 L2101.38 1213.73 L2101.97 1213.73 L2102.55 1213.73 L2103.14 1213.73 L2103.73 1213.73 L2104.31 1213.73 L2104.9 1213.73 L2105.49 1213.73 L2106.07 1213.73 L2106.66 1213.73 L2107.25 1213.73 L2107.83 1213.73 L2108.42 1213.73 L2109.01 1213.73 L2109.59 1213.73 L2110.18 1213.73 L2110.76 1213.73 L2111.35 1213.73 L2111.94 1213.73 L2112.52 1213.73 L2113.11 1213.73 L2113.7 1213.73 L2114.28 1213.73 L2114.87 1213.73 L2115.46 1213.73 L2116.04 1213.73 L2116.63 1213.73 L2117.22 1213.73 L2117.8 1213.73 L2118.39 1213.73 L2118.97 1213.73 L2119.56 1213.73 L2120.15 1213.73 L2120.73 1213.73 L2121.32 1213.73 L2121.91 1213.73 L2122.49 1213.73 L2123.08 1213.73 L2123.67 1213.73 L2124.25 1213.73 L2124.84 1213.73 L2125.42 1213.73 L2126.01 1213.73 L2126.6 1213.73 L2127.18 1213.73 L2127.77 1213.73 L2128.36 1213.73 L2128.94 1213.73 L2129.53 1213.73 L2130.12 1213.73 L2130.7 1213.73 L2131.29 1213.73 L2131.88 1213.73 L2132.46 1213.73 L2133.05 1213.73 L2133.63 1213.73 L2134.22 1213.73 L2134.81 1213.73 L2135.39 1213.73 L2135.98 1213.73 L2136.57 1213.73 L2137.15 1213.73 L2137.74 1213.73 L2138.33 1213.73 L2138.91 1213.73 L2139.5 1213.73 L2140.09 1213.73 L2140.67 1213.73 L2141.26 1213.73 L2141.84 1213.73 L2142.43 1213.73 L2143.02 1213.73 L2143.6 1213.73 L2144.19 1213.73 L2144.78 1213.73 L2145.36 1213.73 L2145.95 1213.73 L2146.54 1213.73 L2147.12 1213.73 L2147.71 1213.73 L2148.3 1213.73 L2148.88 1213.73 L2149.47 1213.73 L2150.05 1213.73 L2150.64 1213.73 L2151.23 1213.73 L2151.81 1213.73 L2152.4 1213.73 L2152.99 1213.73 L2153.57 1213.73 L2154.16 1213.73 L2154.75 1213.73 L2155.33 1213.73 L2155.92 1213.73 L2156.5 1213.73 L2157.09 1213.73 L2157.68 1213.73 L2158.26 1213.73 L2158.26 1213.59 L2157.68 1213.59 L2157.09 1213.59 L2156.5 1213.59 L2155.92 1213.59 L2155.33 1213.59 L2154.75 1213.59 L2154.16 1213.59 L2153.57 1213.59 L2152.99 1213.59 L2152.4 1213.59 L2151.81 1213.59 L2151.23 1213.59 L2150.64 1213.59 L2150.05 1213.59 L2149.47 1213.59 L2148.88 1213.59 L2148.3 1213.59 L2147.71 1213.59 L2147.12 1213.59 L2146.54 1213.59 L2145.95 1213.59 L2145.36 1213.59 L2144.78 1213.59 L2144.19 1213.59 L2143.6 1213.59 L2143.02 1213.59 L2142.43 1213.59 L2141.84 1213.59 L2141.26 1213.59 L2140.67 1213.59 L2140.09 1213.59 L2139.5 1213.59 L2138.91 1213.59 L2138.33 1213.59 L2137.74 1213.59 L2137.15 1213.59 L2136.57 1213.59 L2135.98 1213.59 L2135.39 1213.59 L2134.81 1213.59 L2134.22 1213.59 L2133.63 1213.59 L2133.05 1213.59 L2132.46 1213.59 L2131.88 1213.59 L2131.29 1213.59 L2130.7 1213.59 L2130.12 1213.59 L2129.53 1213.59 L2128.94 1213.59 L2128.36 1213.59 L2127.77 1213.59 L2127.18 1213.59 L2126.6 1213.59 L2126.01 1213.59 L2125.42 1213.59 L2124.84 1213.59 L2124.25 1213.59 L2123.67 1213.59 L2123.08 1213.59 L2122.49 1213.59 L2121.91 1213.59 L2121.32 1213.59 L2120.73 1213.59 L2120.15 1213.59 L2119.56 1213.59 L2118.97 1213.59 L2118.39 1213.59 L2117.8 1213.59 L2117.22 1213.59 L2116.63 1213.59 L2116.04 1213.59 L2115.46 1213.59 L2114.87 1213.59 L2114.28 1213.59 L2113.7 1213.59 L2113.11 1213.59 L2112.52 1213.59 L2111.94 1213.59 L2111.35 1213.59 L2110.76 1213.59 L2110.18 1213.59 L2109.59 1213.59 L2109.01 1213.59 L2108.42 1213.59 L2107.83 1213.59 L2107.25 1213.59 L2106.66 1213.59 L2106.07 1213.59 L2105.49 1213.59 L2104.9 1213.59 L2104.31 1213.59 L2103.73 1213.59 L2103.14 1213.59 L2102.55 1213.59 L2101.97 1213.59 L2101.38 1213.59 L2100.8 1213.59 L2100.21 1213.59 L2099.62 1213.59 L2099.04 1213.59 L2098.45 1213.59 L2097.86 1213.59 L2097.28 1213.59 L2096.69 1213.59 L2096.1 1213.59 L2095.52 1213.59 L2094.93 1213.59 L2094.35 1213.59 L2093.76 1213.59 L2093.17 1213.59 L2092.59 1213.59 L2092 1213.59 L2091.41 1213.59 L2090.83 1213.59 L2090.24 1213.59 L2089.65 1213.59 L2089.07 1213.59 L2088.48 1213.59 L2087.89 1213.59 L2087.31 1213.59 L2086.72 1213.59 L2086.14 1213.59 L2085.55 1213.59 L2084.96 1213.59 L2084.38 1213.59 L2083.79 1213.59 L2083.2 1213.59 L2082.62 1213.59 L2082.03 1213.59 L2081.44 1213.59 L2080.86 1213.59 L2080.27 1213.59 L2079.68 1213.59 L2079.1 1213.59 L2078.51 1213.59 L2077.93 1213.59 L2077.34 1213.59 L2076.75 1213.59 L2076.17 1213.59 L2075.58 1213.59 L2074.99 1213.59 L2074.41 1213.59 L2073.82 1213.59 L2073.23 1213.59 L2072.65 1213.59 L2072.06 1213.59 L2071.48 1213.59 L2070.89 1213.59 L2070.3 1213.59 L2069.72 1213.59 L2069.13 1213.59 L2068.54 1213.59 L2067.96 1213.59 L2067.37 1213.59 L2066.78 1213.59 L2066.2 1213.59 L2065.61 1213.59 L2065.02 1213.59 L2064.44 1213.59 L2063.85 1213.59 L2063.27 1213.59 L2062.68 1213.59 L2062.09 1213.59 L2061.51 1213.59 L2060.92 1213.59 L2060.33 1213.59 L2059.75 1213.59 L2059.16 1213.59 L2058.57 1213.59 L2057.99 1213.59 L2057.4 1213.59 L2056.81 1213.59 L2056.23 1213.59 L2055.64 1213.59 L2055.06 1213.59 L2054.47 1213.59 L2053.88 1213.59 L2053.3 1213.59 L2052.71 1213.59 L2052.12 1213.59 L2051.54 1213.59 L2050.95 1213.59 L2050.36 1213.59 L2049.78 1213.59 L2049.19 1213.59 L2048.6 1213.59 L2048.02 1213.59 L2047.43 1213.59 L2046.85 1213.59 L2046.26 1213.59 L2045.67 1213.59 L2045.09 1213.59 L2044.5 1213.59 L2043.91 1213.59 L2043.33 1213.59 L2042.74 1213.59 L2042.15 1213.59 L2041.57 1213.59 L2040.98 1213.59 L2040.4 1213.59 L2039.81 1213.59 L2039.22 1213.59 L2038.64 1213.59 L2038.05 1213.59 L2037.46 1213.59 L2036.88 1213.59 L2036.29 1213.59 L2035.7 1213.59 L2035.12 1213.59 L2034.53 1213.59 L2033.94 1213.59 L2033.36 1213.59 L2032.77 1213.59 L2032.19 1213.59 L2031.6 1213.59 L2031.01 1213.59 L2030.43 1213.59 L2029.84 1213.59 L2029.25 1213.59 L2028.67 1213.59 L2028.08 1213.59 L2027.49 1213.59 L2026.91 1213.59 L2026.32 1213.59 L2025.73 1213.59 L2025.15 1213.59 L2024.56 1213.59 L2023.98 1213.59 L2023.39 1213.59 L2022.8 1213.59 L2022.22 1213.59 L2021.63 1213.59 L2021.04 1213.59 L2020.46 1213.59 L2019.87 1213.59 L2019.28 1213.59 L2018.7 1213.59 L2018.11 1213.59 L2017.53 1213.59 L2016.94 1213.59 L2016.35 1213.59 L2015.77 1213.59 L2015.18 1213.59 L2014.59 1213.59 L2014.01 1213.59 L2013.42 1213.59 L2012.83 1213.59 L2012.25 1213.59 L2011.66 1213.59 L2011.07 1213.59 L2010.49 1213.59 L2009.9 1213.59 L2009.32 1213.59 L2008.73 1213.59 L2008.14 1213.59 L2007.56 1213.59 L2006.97 1213.59 L2006.38 1213.59 L2005.8 1213.59 L2005.21 1213.59 L2004.62 1213.59 L2004.04 1213.59 L2003.45 1213.59 L2002.86 1213.59 L2002.28 1213.59 L2001.69 1213.59 L2001.11 1213.59 L2000.52 1213.59 L1999.93 1213.59 L1999.35 1213.59 L1998.76 1213.59 L1998.17 1213.59 L1997.59 1213.59 L1997 1213.59 L1996.41 1213.59 L1995.83 1213.59 L1995.24 1213.59 L1994.65 1213.59 L1994.07 1213.59 L1993.48 1213.59 L1992.9 1213.59 L1992.31 1213.59 L1991.72 1213.59 L1991.14 1213.59 L1990.55 1213.59 L1989.96 1213.59 L1989.38 1213.59 L1988.79 1213.59 L1988.2 1213.59 L1987.62 1213.59 L1987.03 1213.59 L1986.45 1213.59 L1985.86 1213.59 L1985.27 1213.59 L1984.69 1213.59 L1984.1 1213.59 L1983.51 1213.59 L1982.93 1213.59 L1982.34 1213.59 L1981.75 1213.59 L1981.17 1213.59 L1980.58 1213.59 L1979.99 1213.59 L1979.41 1213.59 L1978.82 1213.59 L1978.24 1213.59 L1977.65 1213.59 L1977.06 1213.59 L1976.48 1213.59 L1975.89 1213.59 L1975.3 1213.59 L1974.72 1213.59 L1974.13 1213.59 L1973.54 1213.59 L1972.96 1213.59 L1972.37 1213.59 L1971.78 1213.59 L1971.2 1213.59 L1970.61 1213.59 L1970.03 1213.59 L1969.44 1213.59 L1968.85 1213.59 L1968.27 1213.59 L1967.68 1213.59 L1967.09 1213.59 L1966.51 1213.59 L1965.92 1213.59 L1965.33 1213.59 L1964.75 1213.59 L1964.16 1213.59 L1963.58 1213.59 L1962.99 1213.59 L1962.4 1213.59 L1961.82 1213.59 L1961.23 1213.59 L1960.64 1213.59 L1960.06 1213.59 L1959.47 1213.59 L1958.88 1213.59 L1958.3 1213.59 L1957.71 1213.59 L1957.12 1213.59 L1956.54 1213.59 L1955.95 1213.59 L1955.37 1213.59 L1954.78 1213.59 L1954.19 1213.59 L1953.61 1213.59 L1953.02 1213.59 L1952.43 1213.59 L1951.85 1213.59 L1951.26 1213.59 L1950.67 1213.59 L1950.09 1213.59 L1949.5 1213.59 L1948.91 1213.59 L1948.33 1213.59 L1947.74 1213.59 L1947.16 1213.59 L1946.57 1213.59 L1945.98 1213.59 L1945.4 1213.59 L1944.81 1213.59 L1944.22 1213.59 L1943.64 1213.59 L1943.05 1213.59 L1942.46 1213.59 L1941.88 1213.59 L1941.29 1213.59 L1940.71 1213.59 L1940.12 1213.59 L1939.53 1213.59 L1938.95 1213.59 L1938.36 1213.59 L1937.77 1213.59 L1937.19 1213.59 L1936.6 1213.59 L1936.01 1213.59 L1935.43 1213.59 L1934.84 1213.59 L1934.25 1213.59 L1933.67 1213.59 L1933.08 1213.59 L1932.5 1213.59 L1931.91 1213.59 L1931.32 1213.59 L1930.74 1213.59 L1930.15 1213.59 L1929.56 1213.59 L1928.98 1213.59 L1928.39 1213.59 L1927.8 1213.59 L1927.22 1213.59 L1926.63 1213.59 L1926.04 1213.59 L1925.46 1213.59 L1924.87 1213.59 L1924.29 1213.59 L1923.7 1213.59 L1923.11 1213.59 L1922.53 1213.59 L1921.94 1213.59 L1921.35 1213.59 L1920.77 1213.59 L1920.18 1213.59 L1919.59 1213.59 L1919.01 1213.59 L1918.42 1213.59 L1917.83 1213.59 L1917.25 1213.59 L1916.66 1213.59 L1916.08 1213.59 L1915.49 1213.59 L1914.9 1213.59 L1914.32 1213.59 L1913.73 1213.59 L1913.14 1213.59 L1912.56 1213.59 L1911.97 1213.59 L1911.38 1213.59 L1910.8 1213.59 L1910.21 1213.59 L1909.63 1213.59 L1909.04 1213.59 L1908.45 1213.59 L1907.87 1213.59 L1907.28 1213.59 L1906.69 1213.59 L1906.11 1213.59 L1905.52 1213.59 L1904.93 1213.59 L1904.35 1213.59 L1903.76 1213.59 L1903.17 1213.59 L1902.59 1213.59 L1902 1213.59 L1901.42 1213.59 L1900.83 1213.59 L1900.24 1213.59 L1899.66 1213.59 L1899.07 1213.59 L1898.48 1213.59 L1897.9 1213.59 L1897.31 1213.59 L1896.72 1213.59 L1896.14 1213.59 L1895.55 1213.59 L1894.96 1213.59 L1894.38 1213.59 L1893.79 1213.59 L1893.21 1213.59 L1892.62 1213.59 L1892.03 1213.59 L1891.45 1213.59 L1890.86 1213.59 L1890.27 1213.59 L1889.69 1213.59 L1889.1 1213.59 L1888.51 1213.59 L1887.93 1213.59 L1887.34 1213.59 L1886.76 1213.59 L1886.17 1213.59 L1885.58 1213.59 L1885 1213.59 L1884.41 1213.59 L1883.82 1213.59 L1883.24 1213.59 L1882.65 1213.59 L1882.06 1213.59 L1881.48 1213.59 L1880.89 1213.59 L1880.3 1213.59 L1879.72 1213.59 L1879.13 1213.59 L1878.55 1213.59 L1877.96 1213.59 L1877.37 1213.59 L1876.79 1213.59 L1876.2 1213.59 L1875.61 1213.59 L1875.03 1213.59 L1874.44 1213.59 L1873.85 1213.59 L1873.27 1213.59 L1872.68 1213.59 L1872.09 1213.59 L1871.51 1213.59 L1870.92 1213.59 L1870.34 1213.59 L1869.75 1213.59 L1869.16 1213.59 L1868.58 1213.59 L1867.99 1213.59 L1867.4 1213.59 L1866.82 1213.59 L1866.23 1213.59 L1865.64 1213.59 L1865.06 1213.59 L1864.47 1213.59 L1863.88 1213.59 L1863.3 1213.59 L1862.71 1213.59 L1862.13 1213.59 L1861.54 1213.59 L1860.95 1213.59 L1860.37 1213.59 L1859.78 1213.59 L1859.19 1213.59 L1858.61 1213.59 L1858.02 1213.59 L1857.43 1213.59 L1856.85 1213.59 L1856.26 1213.59 L1855.68 1213.59 L1855.09 1213.59 L1854.5 1213.59 L1853.92 1213.59 L1853.33 1213.59 L1852.74 1213.59 L1852.16 1213.59 L1851.57 1213.59 L1850.98 1213.59 L1850.4 1213.59 L1849.81 1213.59 L1849.22 1213.59 L1848.64 1213.59 L1848.05 1213.59 L1847.47 1213.59 L1846.88 1213.59 L1846.29 1213.59 L1845.71 1213.59 L1845.12 1213.59 L1844.53 1213.59 L1843.95 1213.59 L1843.36 1213.59 L1842.77 1213.59 L1842.19 1213.59 L1841.6 1213.59 L1841.01 1213.59 L1840.43 1213.59 L1839.84 1213.59 L1839.26 1213.59 L1838.67 1213.59 L1838.08 1213.59 L1837.5 1213.59 L1836.91 1213.59 L1836.32 1213.59 L1835.74 1213.59 L1835.15 1213.59 L1834.56 1213.59 L1833.98 1213.59 L1833.39 1213.59 L1832.81 1213.59 L1832.22 1213.59 L1831.63 1213.59 L1831.05 1213.59 L1830.46 1213.59 L1829.87 1213.59 L1829.29 1213.59 L1828.7 1213.59 L1828.11 1213.59 L1827.53 1213.59 L1826.94 1213.59 L1826.35 1213.59 L1825.77 1213.59 L1825.18 1213.59 L1824.6 1213.59 L1824.01 1213.59 L1823.42 1213.59 L1822.84 1213.59 L1822.25 1213.59 L1821.66 1213.59 L1821.08 1213.59 L1820.49 1213.59 L1819.9 1213.59 L1819.32 1213.59 L1818.73 1213.59 L1818.14 1213.59 L1817.56 1213.59 L1816.97 1213.59 L1816.39 1213.59 L1815.8 1213.59 L1815.21 1213.59 L1814.63 1213.59 L1814.04 1213.59 L1813.45 1213.59 L1812.87 1213.59 L1812.28 1213.59 L1811.69 1213.59 L1811.11 1213.59 L1810.52 1213.59 L1809.94 1213.59 L1809.35 1213.59 L1808.76 1213.59 L1808.18 1213.59 L1807.59 1213.59 L1807 1213.59 L1806.42 1213.59 L1805.83 1213.59 L1805.24 1213.59 L1804.66 1213.59 L1804.07 1213.59 L1803.48 1213.59 L1802.9 1213.59 L1802.31 1213.59 L1801.73 1213.59 L1801.14 1213.59 L1800.55 1213.59 L1799.97 1213.59 L1799.38 1213.59 L1798.79 1213.59 L1798.21 1213.59 L1797.62 1213.59 L1797.03 1213.59 L1796.45 1213.59 L1795.86 1213.59 L1795.27 1213.59 L1794.69 1213.59 L1794.1 1213.59 L1793.52 1213.59 L1792.93 1213.59 L1792.34 1213.59 L1791.76 1213.59 L1791.17 1213.59 L1790.58 1213.59 L1790 1213.59 L1789.41 1213.59 L1788.82 1213.59 L1788.24 1213.59 L1787.65 1213.59 L1787.06 1213.59 L1786.48 1213.59 L1785.89 1213.59 L1785.31 1213.59 L1784.72 1213.59 L1784.13 1213.59 L1783.55 1213.59 L1782.96 1213.59 L1782.37 1213.59 L1781.79 1213.59 L1781.2 1213.59 L1780.61 1213.59 L1780.03 1213.59 L1779.44 1213.59 L1778.86 1213.59 L1778.27 1213.59 L1777.68 1213.59 L1777.1 1213.59 L1776.51 1213.59 L1775.92 1213.59 L1775.34 1213.59 L1774.75 1213.59 L1774.16 1213.59 L1773.58 1213.59 L1772.99 1213.59 L1772.4 1213.59 L1771.82 1213.59 L1771.23 1213.59 L1770.65 1213.59 L1770.06 1213.59 L1769.47 1213.59 L1768.89 1213.59 L1768.3 1213.59 L1767.71 1213.59 L1767.13 1213.59 L1766.54 1213.59 L1765.95 1213.59 L1765.37 1213.59 L1764.78 1213.59 L1764.19 1213.59 L1763.61 1213.59 L1763.02 1213.59 L1762.44 1213.59 L1761.85 1213.59 L1761.26 1213.59 L1760.68 1213.59 L1760.09 1213.59 L1759.5 1213.59 L1758.92 1213.59 L1758.33 1213.59 L1757.74 1213.59 L1757.16 1213.59 L1756.57 1213.59 L1755.99 1213.59 L1755.4 1213.59 L1754.81 1213.59 L1754.23 1213.59 L1753.64 1213.59 L1753.05 1213.59 L1752.47 1213.59 L1751.88 1213.59 L1751.29 1213.59 L1750.71 1213.59 L1750.12 1213.59 L1749.53 1213.59 L1748.95 1213.59 L1748.36 1213.59 L1747.78 1213.59 L1747.19 1213.59 L1746.6 1213.59 L1746.02 1213.59 L1745.43 1213.59 L1744.84 1213.59 L1744.26 1213.59 L1743.67 1213.59 L1743.08 1213.59 L1742.5 1213.59 L1741.91 1213.59 L1741.32 1213.59 L1740.74 1213.59 L1740.15 1213.59 L1739.57 1213.59 L1738.98 1213.59 L1738.39 1213.59 L1737.81 1213.59 L1737.22 1213.59 L1736.63 1213.59 L1736.05 1213.59 L1735.46 1213.59 L1734.87 1213.59 L1734.29 1213.59 L1733.7 1213.59 L1733.11 1213.59 L1732.53 1213.59 L1731.94 1213.59 L1731.36 1213.59 L1730.77 1213.59 L1730.18 1213.59 L1729.6 1213.59 L1729.01 1213.59 L1728.42 1213.59 L1727.84 1213.59 L1727.25 1213.59 L1726.66 1213.59 L1726.08 1213.59 L1725.49 1213.59 L1724.91 1213.59 L1724.32 1213.59 L1723.73 1213.59 L1723.15 1213.59 L1722.56 1213.59 L1721.97 1213.59 L1721.39 1213.59 L1720.8 1213.59 L1720.21 1213.59 L1719.63 1213.59 L1719.04 1213.59 L1718.45 1213.59 L1717.87 1213.59 L1717.28 1213.59 L1716.7 1213.59 L1716.11 1213.59 L1715.52 1213.59 L1714.94 1213.59 L1714.35 1213.59 L1713.76 1213.59 L1713.18 1213.59 L1712.59 1213.59 L1712 1213.59 L1711.42 1213.59 L1710.83 1213.59 L1710.24 1213.59 L1709.66 1213.59 L1709.07 1213.59 L1708.49 1213.59 L1707.9 1213.59 L1707.31 1213.59 L1706.73 1213.59 L1706.14 1213.59 L1705.55 1213.59 L1704.97 1213.59 L1704.38 1213.59 L1703.79 1213.59 L1703.21 1213.59 L1702.62 1213.59 L1702.04 1213.59 L1701.45 1213.59 L1700.86 1213.59 L1700.28 1213.59 L1699.69 1213.59 L1699.1 1213.59 L1698.52 1213.59 L1697.93 1213.59 L1697.34 1213.59 L1696.76 1213.59 L1696.17 1213.59 L1695.58 1213.59 L1695 1213.59 L1694.41 1213.59 L1693.83 1213.59 L1693.24 1213.59 L1692.65 1213.59 L1692.07 1213.59 L1691.48 1213.59 L1690.89 1213.59 L1690.31 1213.59 L1689.72 1213.59 L1689.13 1213.59 L1688.55 1213.59 L1687.96 1213.59 L1687.37 1213.59 L1686.79 1213.59 L1686.2 1213.59 L1685.62 1213.59 L1685.03 1213.59 L1684.44 1213.59 L1683.86 1213.59 L1683.27 1213.59 L1682.68 1213.59 L1682.1 1213.59 L1681.51 1213.59 L1680.92 1213.59 L1680.34 1213.59 L1679.75 1213.59 L1679.17 1213.59 L1678.58 1213.59 L1677.99 1213.59 L1677.41 1213.59 L1676.82 1213.59 L1676.23 1213.59 L1675.65 1213.59 L1675.06 1213.59 L1674.47 1213.59 L1673.89 1213.59 L1673.3 1213.59 L1672.71 1213.59 L1672.13 1213.59 L1671.54 1213.59 L1670.96 1213.59 L1670.37 1213.59 L1669.78 1213.59 L1669.2 1213.59 L1668.61 1213.59 L1668.02 1213.59 L1667.44 1213.59 L1666.85 1213.59 L1666.26 1213.59 L1665.68 1213.59 L1665.09 1213.59 L1664.5 1213.59 L1663.92 1213.59 L1663.33 1213.59 L1662.75 1213.59 L1662.16 1213.59 L1661.57 1213.59 L1660.99 1213.59 L1660.4 1213.59 L1659.81 1213.59 L1659.23 1213.59 L1658.64 1213.59 L1658.05 1213.59 L1657.47 1213.59 L1656.88 1213.59 L1656.29 1213.59 L1655.71 1213.59 L1655.12 1213.59 L1654.54 1213.59 L1653.95 1213.59 L1653.36 1213.59 L1652.78 1213.59 L1652.19 1213.59 L1651.6 1213.59 L1651.02 1213.59 L1650.43 1213.59 L1649.84 1213.59 L1649.26 1213.59 L1648.67 1213.59 L1648.09 1213.59 L1647.5 1213.59 L1646.91 1213.59 L1646.33 1213.59 L1645.74 1213.59 L1645.15 1213.59 L1644.57 1213.59 L1643.98 1213.59 L1643.39 1213.59 L1642.81 1213.59 L1642.22 1213.59 L1641.63 1213.59 L1641.05 1213.59 L1640.46 1213.59 L1639.88 1213.59 L1639.29 1213.59 L1638.7 1213.59 L1638.12 1213.59 L1637.53 1213.59 L1636.94 1213.59 L1636.36 1213.59 L1635.77 1213.59 L1635.18 1213.59 L1634.6 1213.59 L1634.01 1213.59 L1633.42 1213.59 L1632.84 1213.59 L1632.25 1213.59 L1631.67 1213.59 L1631.08 1213.59 L1630.49 1213.59 L1629.91 1213.59 L1629.32 1213.59 L1628.73 1213.59 L1628.15 1213.59 L1627.56 1213.59 L1626.97 1213.59 L1626.39 1213.59 L1625.8 1213.59 L1625.22 1213.59 L1624.63 1213.59 L1624.04 1213.59 L1623.46 1213.59 L1622.87 1213.59 L1622.28 1213.59 L1621.7 1213.59 L1621.11 1213.59 L1620.52 1213.59 L1619.94 1213.59 L1619.35 1213.59 L1618.76 1213.59 L1618.18 1213.59 L1617.59 1213.59 L1617.01 1213.59 L1616.42 1213.59 L1615.83 1213.59 L1615.25 1213.59 L1614.66 1213.59 L1614.07 1213.59 L1613.49 1213.59 L1612.9 1213.59 L1612.31 1213.59 L1611.73 1213.59 L1611.14 1213.59 L1610.55 1213.59 L1609.97 1213.59 L1609.38 1213.59 L1608.8 1213.59 L1608.21 1213.59 L1607.62 1213.59 L1607.04 1213.59 L1606.45 1213.59 L1605.86 1213.59 L1605.28 1213.59 L1604.69 1213.59 L1604.1 1213.59 L1603.52 1213.59 L1602.93 1213.59 L1602.34 1213.59 L1601.76 1213.59 L1601.17 1213.59 L1600.59 1213.59 L1600 1213.59 L1599.41 1213.59 L1598.83 1213.59 L1598.24 1213.59 L1597.65 1213.59 L1597.07 1213.59 L1596.48 1213.59 L1595.89 1213.59 L1595.31 1213.59 L1594.72 1213.59 L1594.14 1213.59 L1593.55 1213.59 L1592.96 1213.59 L1592.38 1213.59 L1591.79 1213.59 L1591.2 1213.59 L1590.62 1213.59 L1590.03 1213.59 L1589.44 1213.59 L1588.86 1213.59 L1588.27 1213.59 L1587.68 1213.59 L1587.1 1213.59 L1586.51 1213.59 L1585.93 1213.59 L1585.34 1213.59 L1584.75 1213.59 L1584.17 1213.59 L1583.58 1213.59 L1582.99 1213.59 L1582.41 1213.59 L1581.82 1213.59 L1581.23 1213.59 L1580.65 1213.59 L1580.06 1213.59 L1579.47 1213.59 L1578.89 1213.59 L1578.3 1213.59 L1577.72 1213.59 L1577.13 1213.59 L1576.54 1213.59 L1575.96 1213.59 L1575.37 1213.59 L1574.78 1213.59 L1574.2 1213.59 L1573.61 1213.59 L1573.02 1213.59 L1572.44 1213.59 L1571.85 1213.59 L1571.27 1213.59 L1570.68 1213.59 L1570.09 1213.59 L1569.51 1213.59 L1568.92 1213.59 L1568.33 1213.59 L1567.75 1213.59 L1567.16 1213.59 L1566.57 1213.59 L1565.99 1213.59 L1565.4 1213.59 L1564.81 1213.59 L1564.23 1213.59 L1563.64 1213.59 L1563.06 1213.59 L1562.47 1213.59 L1561.88 1213.59 L1561.3 1213.59 L1560.71 1213.59 L1560.12 1213.59 L1559.54 1213.59 L1558.95 1213.59 L1558.36 1213.59 L1557.78 1213.59 L1557.19 1213.59 L1556.6 1213.59 L1556.02 1213.59 L1555.43 1213.59 L1554.85 1213.59 L1554.26 1213.59 L1553.67 1213.59 L1553.09 1213.59 L1552.5 1213.59 L1551.91 1213.59 L1551.33 1213.59 L1550.74 1213.59 L1550.15 1213.59 L1549.57 1213.59 L1548.98 1213.59 L1548.4 1213.59 L1547.81 1213.59 L1547.22 1213.59 L1546.64 1213.59 L1546.05 1213.59 L1545.46 1213.59 L1544.88 1213.59 L1544.29 1213.59 L1543.7 1213.59 L1543.12 1213.59 L1542.53 1213.59 L1541.94 1213.59 L1541.36 1213.59 L1540.77 1213.59 L1540.19 1213.59 L1539.6 1213.59 L1539.01 1213.59 L1538.43 1213.59 L1537.84 1213.59 L1537.25 1213.59 L1536.67 1213.59 L1536.08 1213.59 L1535.49 1213.59 L1534.91 1213.59 L1534.32 1213.59 L1533.73 1213.59 L1533.15 1213.59 L1532.56 1213.59 L1531.98 1213.59 L1531.39 1213.59 L1530.8 1213.59 L1530.22 1213.59 L1529.63 1213.59 L1529.04 1213.59 L1528.46 1213.59 L1527.87 1213.59 L1527.28 1213.59 L1526.7 1213.59 L1526.11 1213.59 L1525.52 1213.59 L1524.94 1213.59 L1524.35 1213.59 L1523.77 1213.59 L1523.18 1213.59 L1522.59 1213.59 L1522.01 1213.59 L1521.42 1213.59 L1520.83 1213.59 L1520.25 1213.59 L1519.66 1213.59 L1519.07 1213.59 L1518.49 1213.59 L1517.9 1213.59 L1517.32 1213.59 L1516.73 1213.59 L1516.14 1213.59 L1515.56 1213.59 L1514.97 1213.59 L1514.38 1213.59 L1513.8 1213.59 L1513.21 1213.59 L1512.62 1213.59 L1512.04 1213.59 L1511.45 1213.59 L1510.86 1213.59 L1510.28 1213.59 L1509.69 1213.59 L1509.11 1213.59 L1508.52 1213.59 L1507.93 1213.59 L1507.35 1213.59 L1506.76 1213.59 L1506.17 1213.59 L1505.59 1213.59 L1505 1213.59 L1504.41 1213.59 L1503.83 1213.59 L1503.24 1213.59 L1502.65 1213.59 L1502.07 1213.59 L1501.48 1213.59 L1500.9 1213.59 L1500.31 1213.59 L1499.72 1213.59 L1499.14 1213.59 L1498.55 1213.59 L1497.96 1213.59 L1497.38 1213.59 L1496.79 1213.59 L1496.2 1213.59 L1495.62 1213.59 L1495.03 1213.59 L1494.45 1213.59 L1493.86 1213.59 L1493.27 1213.59 L1492.69 1213.59 L1492.1 1213.59 L1491.51 1213.59 L1490.93 1213.59 L1490.34 1213.59 L1489.75 1213.59 L1489.17 1213.59 L1488.58 1213.59 L1487.99 1213.59 L1487.41 1213.59 L1486.82 1213.59 L1486.24 1213.59 L1485.65 1213.59 L1485.06 1213.59 L1484.48 1213.59 L1483.89 1213.59 L1483.3 1213.59 L1482.72 1213.59 L1482.13 1213.59 L1481.54 1213.59 L1480.96 1213.59 L1480.37 1213.59 L1479.78 1213.59 L1479.2 1213.59 L1478.61 1213.59 L1478.03 1213.59 L1477.44 1213.59 L1476.85 1213.59 L1476.27 1213.59 L1475.68 1213.59 L1475.09 1213.59 L1474.51 1213.59 L1473.92 1213.59 L1473.33 1213.59 L1472.75 1213.59 L1472.16 1213.59 L1471.57 1213.59 L1470.99 1213.59 L1470.4 1213.59 L1469.82 1213.59 L1469.23 1213.59 L1468.64 1213.59 L1468.06 1213.59 L1467.47 1213.59 L1466.88 1213.59 L1466.3 1213.59 L1465.71 1213.59 L1465.12 1213.59 L1464.54 1213.59 L1463.95 1213.59 L1463.37 1213.59 L1462.78 1213.59 L1462.19 1213.59 L1461.61 1213.59 L1461.02 1213.59 L1460.43 1213.59 L1459.85 1213.59 L1459.26 1213.59 L1458.67 1213.59 L1458.09 1213.59 L1457.5 1213.59 L1456.91 1213.59 L1456.33 1213.59 L1455.74 1213.59 L1455.16 1213.59 L1454.57 1213.59 L1453.98 1213.59 L1453.4 1213.59 L1452.81 1213.59 L1452.22 1213.59 L1451.64 1213.59 L1451.05 1213.59 L1450.46 1213.59 L1449.88 1213.59 L1449.29 1213.59 L1448.7 1213.59 L1448.12 1213.59 L1447.53 1213.59 L1446.95 1213.59 L1446.36 1213.59 L1445.77 1213.59 L1445.19 1213.59 L1444.6 1213.59 L1444.01 1213.59 L1443.43 1213.59 L1442.84 1213.59 L1442.25 1213.59 L1441.67 1213.59 L1441.08 1213.59 L1440.5 1213.59 L1439.91 1213.59 L1439.32 1213.59 L1438.74 1213.59 L1438.15 1213.59 L1437.56 1213.59 L1436.98 1213.59 L1436.39 1213.59 L1435.8 1213.59 L1435.22 1213.59 L1434.63 1213.59 L1434.04 1213.59 L1433.46 1213.59 L1432.87 1213.59 L1432.29 1213.59 L1431.7 1213.59 L1431.11 1213.59 L1430.53 1213.59 L1429.94 1213.59 L1429.35 1213.59 L1428.77 1213.59 L1428.18 1213.59 L1427.59 1213.59 L1427.01 1213.59 L1426.42 1213.59 L1425.83 1213.59 L1425.25 1213.59 L1424.66 1213.59 L1424.08 1213.59 L1423.49 1213.59 L1422.9 1213.59 L1422.32 1213.59 L1421.73 1213.59 L1421.14 1213.59 L1420.56 1213.59 L1419.97 1213.59 L1419.38 1213.59 L1418.8 1213.59 L1418.21 1213.59 L1417.63 1213.59 L1417.04 1213.59 L1416.45 1213.59 L1415.87 1213.59 L1415.28 1213.59 L1414.69 1213.59 L1414.11 1213.59 L1413.52 1213.59 L1412.93 1213.59 L1412.35 1213.59 L1411.76 1213.59 L1411.17 1213.59 L1410.59 1213.59 L1410 1213.59 L1409.42 1213.59 L1408.83 1213.59 L1408.24 1213.59 L1407.66 1213.59 L1407.07 1213.59 L1406.48 1213.59 L1405.9 1213.59 L1405.31 1213.59 L1404.72 1213.59 L1404.14 1213.59 L1403.55 1213.59 L1402.96 1213.59 L1402.38 1213.59 L1401.79 1213.59 L1401.21 1213.59 L1400.62 1213.59 L1400.03 1213.59 L1399.45 1213.59 L1398.86 1213.59 L1398.27 1213.59 L1397.69 1213.59 L1397.1 1213.59 L1396.51 1213.59 L1395.93 1213.59 L1395.34 1213.59 L1394.75 1213.59 L1394.17 1213.59 L1393.58 1213.59 L1393 1213.59 L1392.41 1213.59 L1391.82 1213.59 L1391.24 1213.59 L1390.65 1213.59 L1390.06 1213.59 L1389.48 1213.59 L1388.89 1213.59 L1388.3 1213.59 L1387.72 1213.59 L1387.13 1213.59 L1386.55 1213.59 L1385.96 1213.59 L1385.37 1213.59 L1384.79 1213.59 L1384.2 1213.59 L1383.61 1213.59 L1383.03 1213.59 L1382.44 1213.59 L1381.85 1213.59 L1381.27 1213.59 L1380.68 1213.59 L1380.09 1213.59 L1379.51 1213.59 L1378.92 1213.59 L1378.34 1213.59 L1377.75 1213.59 L1377.16 1213.59 L1376.58 1213.59 L1375.99 1213.59 L1375.4 1213.59 L1374.82 1213.59 L1374.23 1213.59 L1373.64 1213.59 L1373.06 1213.59 L1372.47 1213.59 L1371.88 1213.59 L1371.3 1213.59 L1370.71 1213.59 L1370.13 1213.59 L1369.54 1213.59 L1368.95 1213.59 L1368.37 1213.59 L1367.78 1213.59 L1367.19 1213.59 L1366.61 1213.59 L1366.02 1213.59 L1365.43 1213.59 L1364.85 1213.59 L1364.26 1213.59 L1363.68 1213.59 L1363.09 1213.59 L1362.5 1213.59 L1361.92 1213.59 L1361.33 1213.59 L1360.74 1213.59 L1360.16 1213.59 L1359.57 1213.59 L1358.98 1213.59 L1358.4 1213.59 L1357.81 1213.59 L1357.22 1213.59 L1356.64 1213.59 L1356.05 1213.59 L1355.47 1213.59 L1354.88 1213.59 L1354.29 1213.59 L1353.71 1213.59 L1353.12 1213.59 L1352.53 1213.59 L1351.95 1213.59 L1351.36 1213.59 L1350.77 1213.59 L1350.19 1213.59 L1349.6 1213.59 L1349.01 1213.59 L1348.43 1213.59 L1347.84 1213.59 L1347.26 1213.59 L1346.67 1213.59 L1346.08 1213.59 L1345.5 1213.59 L1344.91 1213.59 L1344.32 1213.59 L1343.74 1213.59 L1343.15 1213.59 L1342.56 1213.59 L1341.98 1213.59 L1341.39 1213.59 L1340.8 1213.59 L1340.22 1213.59 L1339.63 1213.59 L1339.05 1213.59 L1338.46 1213.59 L1337.87 1213.59 L1337.29 1213.59 L1336.7 1213.59 L1336.11 1213.59 L1335.53 1213.59 L1334.94 1213.59 L1334.35 1213.59 L1333.77 1213.59 L1333.18 1213.59 L1332.6 1213.59 L1332.01 1213.59 L1331.42 1213.59 L1330.84 1213.59 L1330.25 1213.59 L1329.66 1213.59 L1329.08 1213.59 L1328.49 1213.59 L1327.9 1213.59 L1327.32 1213.59 L1326.73 1213.59 L1326.14 1213.59 L1325.56 1213.59 L1324.97 1213.59 L1324.39 1213.59 L1323.8 1213.59 L1323.21 1213.59 L1322.63 1213.59 L1322.04 1213.59 L1321.45 1213.59 L1320.87 1213.59 L1320.28 1213.59 L1319.69 1213.59 L1319.11 1213.59 L1318.52 1213.59 L1317.93 1213.59 L1317.35 1213.59 L1316.76 1213.59 L1316.18 1213.59 L1315.59 1213.59 L1315 1213.59 L1314.42 1213.59 L1313.83 1213.59 L1313.24 1213.59 L1312.66 1213.59 L1312.07 1213.59 L1311.48 1213.59 L1310.9 1213.59 L1310.31 1213.59 L1309.73 1213.59 L1309.14 1213.59 L1308.55 1213.59 L1307.97 1213.59 L1307.38 1213.59 L1306.79 1213.59 L1306.21 1213.59 L1305.62 1213.59 L1305.03 1213.59 L1304.45 1213.59 L1303.86 1213.59 L1303.27 1213.59 L1302.69 1213.59 L1302.1 1213.59 L1301.52 1213.59 L1300.93 1213.59 L1300.34 1213.59 L1299.76 1213.59 L1299.17 1213.59 L1298.58 1213.59 L1298 1213.59 L1297.41 1213.59 L1296.82 1213.59 L1296.24 1213.59 L1295.65 1213.59 L1295.06 1213.59 L1294.48 1213.59 L1293.89 1213.59 L1293.31 1213.59 L1292.72 1213.59 L1292.13 1213.59 L1291.55 1213.59 L1290.96 1213.59 L1290.37 1213.59 L1289.79 1213.59 L1289.2 1213.59 L1288.61 1213.59 L1288.03 1213.59 L1287.44 1213.59 L1286.86 1213.59 L1286.27 1213.59 L1285.68 1213.59 L1285.1 1213.59 L1284.51 1213.59 L1283.92 1213.59 L1283.34 1213.59 L1282.75 1213.59 L1282.16 1213.59 L1281.58 1213.59 L1280.99 1213.59 L1280.4 1213.59 L1279.82 1213.59 L1279.23 1213.59 L1278.65 1213.59 L1278.06 1213.59 L1277.47 1213.59 L1276.89 1213.59 L1276.3 1213.59 L1275.71 1213.59 L1275.13 1213.59 L1274.54 1213.59 L1273.95 1213.59 L1273.37 1213.59 L1272.78 1213.59 L1272.19 1213.59 L1271.61 1213.59 L1271.02 1213.59 L1270.44 1213.59 L1269.85 1213.59 L1269.26 1213.59 L1268.68 1213.59 L1268.09 1213.59 L1267.5 1213.59 L1266.92 1213.59 L1266.33 1213.59 L1265.74 1213.59 L1265.16 1213.59 L1264.57 1213.59 L1263.98 1213.59 L1263.4 1213.59 L1262.81 1213.59 L1262.23 1213.59 L1261.64 1213.59 L1261.05 1213.59 L1260.47 1213.59 L1259.88 1213.59 L1259.29 1213.59 L1258.71 1213.59 L1258.12 1213.59 L1257.53 1213.59 L1256.95 1213.59 L1256.36 1213.59 L1255.78 1213.59 L1255.19 1213.59 L1254.6 1213.59 L1254.02 1213.59 L1253.43 1213.59 L1252.84 1213.59 L1252.26 1213.59 L1251.67 1213.59 L1251.08 1213.59 L1250.5 1213.59 L1249.91 1213.59 L1249.32 1213.59 L1248.74 1213.59 L1248.15 1213.59 L1247.57 1213.59 L1246.98 1213.59 L1246.39 1213.59 L1245.81 1213.59 L1245.22 1213.59 L1244.63 1213.59 L1244.05 1213.59 L1243.46 1213.59 L1242.87 1213.59 L1242.29 1213.59 L1241.7 1213.59 L1241.11 1213.59 L1240.53 1213.59 L1239.94 1213.59 L1239.36 1213.59 L1238.77 1213.59 L1238.18 1213.59 L1237.6 1213.59 L1237.01 1213.59 L1236.42 1213.59 L1235.84 1213.59 L1235.25 1213.59 L1234.66 1213.59 L1234.08 1213.59 L1233.49 1213.59 L1232.91 1213.59 L1232.32 1213.59 L1231.73 1213.59 L1231.15 1213.59 L1230.56 1213.59 L1229.97 1213.59 L1229.39 1213.59 L1228.8 1213.59 L1228.21 1213.59 L1227.63 1213.59 L1227.04 1213.59 L1226.45 1213.59 L1225.87 1213.59 L1225.28 1213.59 L1224.7 1213.59 L1224.11 1213.59 L1223.52 1213.59 L1222.94 1213.59 L1222.35 1213.59 L1221.76 1213.59 L1221.18 1213.59 L1220.59 1213.59 L1220 1213.59 L1219.42 1213.59 L1218.83 1213.59 L1218.24 1213.59 L1217.66 1213.59 L1217.07 1213.59 L1216.49 1213.59 L1215.9 1213.59 L1215.31 1213.59 L1214.73 1213.59 L1214.14 1213.59 L1213.55 1213.59 L1212.97 1213.59 L1212.38 1213.59 L1211.79 1213.59 L1211.21 1213.59 L1210.62 1213.59 L1210.03 1213.59 L1209.45 1213.59 L1208.86 1213.59 L1208.28 1213.59 L1207.69 1213.59 L1207.1 1213.59 L1206.52 1213.59 L1205.93 1213.59 L1205.34 1213.59 L1204.76 1213.59 L1204.17 1213.59 L1203.58 1213.59 L1203 1213.59 L1202.41 1213.59 L1201.83 1213.59 L1201.24 1213.59 L1200.65 1213.59 L1200.07 1213.59 L1199.48 1213.59 L1198.89 1213.59 L1198.31 1213.59 L1197.72 1213.59 L1197.13 1213.59 L1196.55 1213.59 L1195.96 1213.59 L1195.37 1213.59 L1194.79 1213.59 L1194.2 1213.59 L1193.62 1213.59 L1193.03 1213.59 L1192.44 1213.59 L1191.86 1213.59 L1191.27 1213.59 L1190.68 1213.59 L1190.1 1213.59 L1189.51 1213.59 L1188.92 1213.59 L1188.34 1213.59 L1187.75 1213.59 L1187.16 1213.59 L1186.58 1213.59 L1185.99 1213.59 L1185.41 1213.59 L1184.82 1213.59 L1184.23 1213.59 L1183.65 1213.59 L1183.06 1213.59 L1182.47 1213.59 L1181.89 1213.59 L1181.3 1213.59 L1180.71 1213.59 L1180.13 1213.59 L1179.54 1213.59 L1178.96 1213.59 L1178.37 1213.59 L1177.78 1213.59 L1177.2 1213.59 L1176.61 1213.59 L1176.02 1213.59 L1175.44 1213.59 L1174.85 1213.59 L1174.26 1213.59 L1173.68 1213.59 L1173.09 1213.59 L1172.5 1213.59 L1171.92 1213.59 L1171.33 1213.59 L1170.75 1213.59 L1170.16 1213.59 L1169.57 1213.59 L1168.99 1213.59 L1168.4 1213.59 L1167.81 1213.59 L1167.23 1213.59 L1166.64 1213.59 L1166.05 1213.59 L1165.47 1213.59 L1164.88 1213.59 L1164.29 1213.59 L1163.71 1213.59 L1163.12 1213.59 L1162.54 1213.59 L1161.95 1213.59 L1161.36 1213.59 L1160.78 1213.59 L1160.19 1213.59 L1159.6 1213.59 L1159.02 1213.59 L1158.43 1213.59 L1157.84 1213.59 L1157.26 1213.59 L1156.67 1213.59 L1156.09 1213.59 L1155.5 1213.59 L1154.91 1213.59 L1154.33 1213.59 L1153.74 1213.59 L1153.15 1213.59 L1152.57 1213.59 L1151.98 1213.59 L1151.39 1213.59 L1150.81 1213.59 L1150.22 1213.59 L1149.63 1213.59 L1149.05 1213.59 L1148.46 1213.59 L1147.88 1213.59 L1147.29 1213.59 L1146.7 1213.59 L1146.12 1213.59 L1145.53 1213.59 L1144.94 1213.59 L1144.36 1213.59 L1143.77 1213.59 L1143.18 1213.59 L1142.6 1213.59 L1142.01 1213.59 L1141.42 1213.59 L1140.84 1213.59 L1140.25 1213.59 L1139.67 1213.59 L1139.08 1213.59 L1138.49 1213.59 L1137.91 1213.59 L1137.32 1213.59 L1136.73 1213.59 L1136.15 1213.59 L1135.56 1213.59 L1134.97 1213.59 L1134.39 1213.59 L1133.8 1213.59 L1133.21 1213.59 L1132.63 1213.59 L1132.04 1213.59 L1131.46 1213.59 L1130.87 1213.59 L1130.28 1213.59 L1129.7 1213.59 L1129.11 1213.59 L1128.52 1213.59 L1127.94 1213.59 L1127.35 1213.59 L1126.76 1213.59 L1126.18 1213.59 L1125.59 1213.59 L1125.01 1213.59 L1124.42 1213.59 L1123.83 1213.59 L1123.25 1213.59 L1122.66 1213.59 L1122.07 1213.59 L1121.49 1213.59 L1120.9 1213.59 L1120.31 1213.59 L1119.73 1213.59 L1119.14 1213.59 L1118.55 1213.59 L1117.97 1213.59 L1117.38 1213.59 L1116.8 1213.59 L1116.21 1213.59 L1115.62 1213.59 L1115.04 1213.59 L1114.45 1213.59 L1113.86 1213.59 L1113.28 1213.59 L1112.69 1213.59 L1112.1 1213.59 L1111.52 1213.59 L1110.93 1213.59 L1110.34 1213.59 L1109.76 1213.59 L1109.17 1213.59 L1108.59 1213.59 L1108 1213.59 L1107.41 1213.59 L1106.83 1213.59 L1106.24 1213.59 L1105.65 1213.59 L1105.07 1213.59 L1104.48 1213.59 L1103.89 1213.59 L1103.31 1213.59 L1102.72 1213.59 L1102.14 1213.59 L1101.55 1213.59 L1100.96 1213.59 L1100.38 1213.59 L1099.79 1213.59 L1099.2 1213.59 L1098.62 1213.59 L1098.03 1213.59 L1097.44 1213.59 L1096.86 1213.59 L1096.27 1213.59 L1095.68 1213.59 L1095.1 1213.59 L1094.51 1213.59 L1093.93 1213.59 L1093.34 1213.59 L1092.75 1213.59 L1092.17 1213.59 L1091.58 1213.59 L1090.99 1213.59 L1090.41 1213.59 L1089.82 1213.59 L1089.23 1213.59 L1088.65 1213.59 L1088.06 1213.59 L1087.47 1213.59 L1086.89 1213.59 L1086.3 1213.59 L1085.72 1213.59 L1085.13 1213.59 L1084.54 1213.59 L1083.96 1213.59 L1083.37 1213.59 L1082.78 1213.59 L1082.2 1213.59 L1081.61 1213.59 L1081.02 1213.59 L1080.44 1213.59 L1079.85 1213.59 L1079.26 1213.59 L1078.68 1213.59 L1078.09 1213.59 L1077.51 1213.59 L1076.92 1213.59 L1076.33 1213.59 L1075.75 1213.59 L1075.16 1213.59 L1074.57 1213.59 L1073.99 1213.59 L1073.4 1213.59 L1072.81 1213.59 L1072.23 1213.59 L1071.64 1213.59 L1071.06 1213.59 L1070.47 1213.59 L1069.88 1213.59 L1069.3 1213.59 L1068.71 1213.59 L1068.12 1213.59 L1067.54 1213.59 L1066.95 1213.59 L1066.36 1213.59 L1065.78 1213.59 L1065.19 1213.59 L1064.6 1213.59 L1064.02 1213.59 L1063.43 1213.59 L1062.85 1213.59 L1062.26 1213.59 L1061.67 1213.59 L1061.09 1213.59 L1060.5 1213.59 L1059.91 1213.59 L1059.33 1213.59 L1058.74 1213.59 L1058.15 1213.59 L1057.57 1213.59 L1056.98 1213.59 L1056.39 1213.59 L1055.81 1213.59 L1055.22 1213.59 L1054.64 1213.59 L1054.05 1213.59 L1053.46 1213.59 L1052.88 1213.59 L1052.29 1213.59 L1051.7 1213.59 L1051.12 1213.59 L1050.53 1213.59 L1049.94 1213.59 L1049.36 1213.59 L1048.77 1213.59 L1048.19 1213.59 L1047.6 1213.59 L1047.01 1213.59 L1046.43 1213.59 L1045.84 1213.59 L1045.25 1213.59 L1044.67 1213.59 L1044.08 1213.59 L1043.49 1213.59 L1042.91 1213.59 L1042.32 1213.59 L1041.73 1213.59 L1041.15 1213.59 L1040.56 1213.59 L1039.98 1213.59 L1039.39 1213.59 L1038.8 1213.59 L1038.22 1213.59 L1037.63 1213.59 L1037.04 1213.59 L1036.46 1213.59 L1035.87 1213.59 L1035.28 1213.59 L1034.7 1213.59 L1034.11 1213.59 L1033.52 1213.59 L1032.94 1213.59 L1032.35 1213.59 L1031.77 1213.59 L1031.18 1213.59 L1030.59 1213.59 L1030.01 1213.59 L1029.42 1213.59 L1028.83 1213.59 L1028.25 1213.59 L1027.66 1213.59 L1027.07 1213.59 L1026.49 1213.59 L1025.9 1213.59 L1025.32 1213.59 L1024.73 1213.59 L1024.14 1213.59 L1023.56 1213.59 L1022.97 1213.59 L1022.38 1213.59 L1021.8 1213.59 L1021.21 1213.59 L1020.62 1213.59 L1020.04 1213.59 L1019.45 1213.59 L1018.86 1213.59 L1018.28 1213.59 L1017.69 1213.59 L1017.11 1213.59 L1016.52 1213.59 L1015.93 1213.59 L1015.35 1213.59 L1014.76 1213.59 L1014.17 1213.59 L1013.59 1213.59 L1013 1213.59 L1012.41 1213.59 L1011.83 1213.59 L1011.24 1213.59 L1010.65 1213.59 L1010.07 1213.59 L1009.48 1213.59 L1008.9 1213.59 L1008.31 1213.59 L1007.72 1213.59 L1007.14 1213.59 L1006.55 1213.59 L1005.96 1213.59 L1005.38 1213.59 L1004.79 1213.59 L1004.2 1213.59 L1003.62 1213.59 L1003.03 1213.59 L1002.44 1213.59 L1001.86 1213.59 L1001.27 1213.59 L1000.69 1213.59 L1000.1 1213.59 L999.513 1213.59 L998.926 1213.59 L998.34 1213.59 L997.754 1213.59 L997.167 1213.59 L996.581 1213.59 L995.994 1213.59 L995.408 1213.59 L994.822 1213.59 L994.235 1213.59 L993.649 1213.59 L993.062 1213.59 L992.476 1213.59 L991.889 1213.59 L991.303 1213.59 L990.717 1213.59 L990.13 1213.59 L989.544 1213.59 L988.957 1213.59 L988.371 1213.59 L987.785 1213.59 L987.198 1213.59 L986.612 1213.59 L986.025 1213.59  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip012)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.66 986.612,1213.66 987.198,1213.66 987.785,1213.66 988.371,1213.66 988.957,1213.66 989.544,1213.66 990.13,1213.66 990.717,1213.66 991.303,1213.66 991.889,1213.66 992.476,1213.66 993.062,1213.66 993.649,1213.66 994.235,1213.66 994.822,1213.66 995.408,1213.66 995.994,1213.66 996.581,1213.66 997.167,1213.66 997.754,1213.66 998.34,1213.66 998.926,1213.66 999.513,1213.66 1000.1,1213.66 1000.69,1213.66 1001.27,1213.66 1001.86,1213.66 1002.44,1213.66 1003.03,1213.66 1003.62,1213.66 1004.2,1213.66 1004.79,1213.66 1005.38,1213.66 1005.96,1213.66 1006.55,1213.66 1007.14,1213.66 1007.72,1213.66 1008.31,1213.66 1008.9,1213.66 1009.48,1213.66 1010.07,1213.66 1010.65,1213.66 1011.24,1213.66 1011.83,1213.66 1012.41,1213.66 1013,1213.66 1013.59,1213.66 1014.17,1213.66 1014.76,1213.66 1015.35,1213.66 1015.93,1213.66 1016.52,1213.66 1017.11,1213.66 1017.69,1213.66 1018.28,1213.66 1018.86,1213.66 1019.45,1213.66 1020.04,1213.66 1020.62,1213.66 1021.21,1213.66 1021.8,1213.66 1022.38,1213.66 1022.97,1213.66 1023.56,1213.66 1024.14,1213.66 1024.73,1213.66 1025.32,1213.66 1025.9,1213.66 1026.49,1213.66 1027.07,1213.66 1027.66,1213.66 1028.25,1213.66 1028.83,1213.66 1029.42,1213.66 1030.01,1213.66 1030.59,1213.66 1031.18,1213.66 1031.77,1213.66 1032.35,1213.66 1032.94,1213.66 1033.52,1213.66 1034.11,1213.66 1034.7,1213.66 1035.28,1213.66 1035.87,1213.66 1036.46,1213.66 1037.04,1213.66 1037.63,1213.66 1038.22,1213.66 1038.8,1213.66 1039.39,1213.66 1039.98,1213.66 1040.56,1213.66 1041.15,1213.66 1041.73,1213.66 1042.32,1213.66 1042.91,1213.66 1043.49,1213.66 1044.08,1213.66 1044.67,1213.66 1045.25,1213.66 1045.84,1213.66 1046.43,1213.66 1047.01,1213.66 1047.6,1213.66 1048.19,1213.66 1048.77,1213.66 1049.36,1213.66 1049.94,1213.66 1050.53,1213.66 1051.12,1213.66 1051.7,1213.66 1052.29,1213.66 1052.88,1213.66 1053.46,1213.66 1054.05,1213.66 1054.64,1213.66 1055.22,1213.66 1055.81,1213.66 1056.39,1213.66 1056.98,1213.66 1057.57,1213.66 1058.15,1213.66 1058.74,1213.66 1059.33,1213.66 1059.91,1213.66 1060.5,1213.66 1061.09,1213.66 1061.67,1213.66 1062.26,1213.66 1062.85,1213.66 1063.43,1213.66 1064.02,1213.66 1064.6,1213.66 1065.19,1213.66 1065.78,1213.66 1066.36,1213.66 1066.95,1213.66 1067.54,1213.66 1068.12,1213.66 1068.71,1213.66 1069.3,1213.66 1069.88,1213.66 1070.47,1213.66 1071.06,1213.66 1071.64,1213.66 1072.23,1213.66 1072.81,1213.66 1073.4,1213.66 1073.99,1213.66 1074.57,1213.66 1075.16,1213.66 1075.75,1213.66 1076.33,1213.66 1076.92,1213.66 1077.51,1213.66 1078.09,1213.66 1078.68,1213.66 1079.26,1213.66 1079.85,1213.66 1080.44,1213.66 1081.02,1213.66 1081.61,1213.66 1082.2,1213.66 1082.78,1213.66 1083.37,1213.66 1083.96,1213.66 1084.54,1213.66 1085.13,1213.66 1085.72,1213.66 1086.3,1213.66 1086.89,1213.66 1087.47,1213.66 1088.06,1213.66 1088.65,1213.66 1089.23,1213.66 1089.82,1213.66 1090.41,1213.66 1090.99,1213.66 1091.58,1213.66 1092.17,1213.66 1092.75,1213.66 1093.34,1213.66 1093.93,1213.66 1094.51,1213.66 1095.1,1213.66 1095.68,1213.66 1096.27,1213.66 1096.86,1213.66 1097.44,1213.66 1098.03,1213.66 1098.62,1213.66 1099.2,1213.66 1099.79,1213.66 1100.38,1213.66 1100.96,1213.66 1101.55,1213.66 1102.14,1213.66 1102.72,1213.66 1103.31,1213.66 1103.89,1213.66 1104.48,1213.66 1105.07,1213.66 1105.65,1213.66 1106.24,1213.66 1106.83,1213.66 1107.41,1213.66 1108,1213.66 1108.59,1213.66 1109.17,1213.66 1109.76,1213.66 1110.34,1213.66 1110.93,1213.66 1111.52,1213.66 1112.1,1213.66 1112.69,1213.66 1113.28,1213.66 1113.86,1213.66 1114.45,1213.66 1115.04,1213.66 1115.62,1213.66 1116.21,1213.66 1116.8,1213.66 1117.38,1213.66 1117.97,1213.66 1118.55,1213.66 1119.14,1213.66 1119.73,1213.66 1120.31,1213.66 1120.9,1213.66 1121.49,1213.66 1122.07,1213.66 1122.66,1213.66 1123.25,1213.66 1123.83,1213.66 1124.42,1213.66 1125.01,1213.66 1125.59,1213.66 1126.18,1213.66 1126.76,1213.66 1127.35,1213.66 1127.94,1213.66 1128.52,1213.66 1129.11,1213.66 1129.7,1213.66 1130.28,1213.66 1130.87,1213.66 1131.46,1213.66 1132.04,1213.66 1132.63,1213.66 1133.21,1213.66 1133.8,1213.66 1134.39,1213.66 1134.97,1213.66 1135.56,1213.66 1136.15,1213.66 1136.73,1213.66 1137.32,1213.66 1137.91,1213.66 1138.49,1213.66 1139.08,1213.66 1139.67,1213.66 1140.25,1213.66 1140.84,1213.66 1141.42,1213.66 1142.01,1213.66 1142.6,1213.66 1143.18,1213.66 1143.77,1213.66 1144.36,1213.66 1144.94,1213.66 1145.53,1213.66 1146.12,1213.66 1146.7,1213.66 1147.29,1213.66 1147.88,1213.66 1148.46,1213.66 1149.05,1213.66 1149.63,1213.66 1150.22,1213.66 1150.81,1213.66 1151.39,1213.66 1151.98,1213.66 1152.57,1213.66 1153.15,1213.66 1153.74,1213.66 1154.33,1213.66 1154.91,1213.66 1155.5,1213.66 1156.09,1213.66 1156.67,1213.66 1157.26,1213.66 1157.84,1213.66 1158.43,1213.66 1159.02,1213.66 1159.6,1213.66 1160.19,1213.66 1160.78,1213.66 1161.36,1213.66 1161.95,1213.66 1162.54,1213.66 1163.12,1213.66 1163.71,1213.66 1164.29,1213.66 1164.88,1213.66 1165.47,1213.66 1166.05,1213.66 1166.64,1213.66 1167.23,1213.66 1167.81,1213.66 1168.4,1213.66 1168.99,1213.66 1169.57,1213.66 1170.16,1213.66 1170.75,1213.66 1171.33,1213.66 1171.92,1213.66 1172.5,1213.66 1173.09,1213.66 1173.68,1213.66 1174.26,1213.66 1174.85,1213.66 1175.44,1213.66 1176.02,1213.66 1176.61,1213.66 1177.2,1213.66 1177.78,1213.66 1178.37,1213.66 1178.96,1213.66 1179.54,1213.66 1180.13,1213.66 1180.71,1213.66 1181.3,1213.66 1181.89,1213.66 1182.47,1213.66 1183.06,1213.66 1183.65,1213.66 1184.23,1213.66 1184.82,1213.66 1185.41,1213.66 1185.99,1213.66 1186.58,1213.66 1187.16,1213.66 1187.75,1213.66 1188.34,1213.66 1188.92,1213.66 1189.51,1213.66 1190.1,1213.66 1190.68,1213.66 1191.27,1213.66 1191.86,1213.66 1192.44,1213.66 1193.03,1213.66 1193.62,1213.66 1194.2,1213.66 1194.79,1213.66 1195.37,1213.66 1195.96,1213.66 1196.55,1213.66 1197.13,1213.66 1197.72,1213.66 1198.31,1213.66 1198.89,1213.66 1199.48,1213.66 1200.07,1213.66 1200.65,1213.66 1201.24,1213.66 1201.83,1213.66 1202.41,1213.66 1203,1213.66 1203.58,1213.66 1204.17,1213.66 1204.76,1213.66 1205.34,1213.66 1205.93,1213.66 1206.52,1213.66 1207.1,1213.66 1207.69,1213.66 1208.28,1213.66 1208.86,1213.66 1209.45,1213.66 1210.03,1213.66 1210.62,1213.66 1211.21,1213.66 1211.79,1213.66 1212.38,1213.66 1212.97,1213.66 1213.55,1213.66 1214.14,1213.66 1214.73,1213.66 1215.31,1213.66 1215.9,1213.66 1216.49,1213.66 1217.07,1213.66 1217.66,1213.66 1218.24,1213.66 1218.83,1213.66 1219.42,1213.66 1220,1213.66 1220.59,1213.66 1221.18,1213.66 1221.76,1213.66 1222.35,1213.66 1222.94,1213.66 1223.52,1213.66 1224.11,1213.66 1224.7,1213.66 1225.28,1213.66 1225.87,1213.66 1226.45,1213.66 1227.04,1213.66 1227.63,1213.66 1228.21,1213.66 1228.8,1213.66 1229.39,1213.66 1229.97,1213.66 1230.56,1213.66 1231.15,1213.66 1231.73,1213.66 1232.32,1213.66 1232.91,1213.66 1233.49,1213.66 1234.08,1213.66 1234.66,1213.66 1235.25,1213.66 1235.84,1213.66 1236.42,1213.66 1237.01,1213.66 1237.6,1213.66 1238.18,1213.66 1238.77,1213.66 1239.36,1213.66 1239.94,1213.66 1240.53,1213.66 1241.11,1213.66 1241.7,1213.66 1242.29,1213.66 1242.87,1213.66 1243.46,1213.66 1244.05,1213.66 1244.63,1213.66 1245.22,1213.66 1245.81,1213.66 1246.39,1213.66 1246.98,1213.66 1247.57,1213.66 1248.15,1213.66 1248.74,1213.66 1249.32,1213.66 1249.91,1213.66 1250.5,1213.66 1251.08,1213.66 1251.67,1213.66 1252.26,1213.66 1252.84,1213.66 1253.43,1213.66 1254.02,1213.66 1254.6,1213.66 1255.19,1213.66 1255.78,1213.66 1256.36,1213.66 1256.95,1213.66 1257.53,1213.66 1258.12,1213.66 1258.71,1213.66 1259.29,1213.66 1259.88,1213.66 1260.47,1213.66 1261.05,1213.66 1261.64,1213.66 1262.23,1213.66 1262.81,1213.66 1263.4,1213.66 1263.98,1213.66 1264.57,1213.66 1265.16,1213.66 1265.74,1213.66 1266.33,1213.66 1266.92,1213.66 1267.5,1213.66 1268.09,1213.66 1268.68,1213.66 1269.26,1213.66 1269.85,1213.66 1270.44,1213.66 1271.02,1213.66 1271.61,1213.66 1272.19,1213.66 1272.78,1213.66 1273.37,1213.66 1273.95,1213.66 1274.54,1213.66 1275.13,1213.66 1275.71,1213.66 1276.3,1213.66 1276.89,1213.66 1277.47,1213.66 1278.06,1213.66 1278.65,1213.66 1279.23,1213.66 1279.82,1213.66 1280.4,1213.66 1280.99,1213.66 1281.58,1213.66 1282.16,1213.66 1282.75,1213.66 1283.34,1213.66 1283.92,1213.66 1284.51,1213.66 1285.1,1213.66 1285.68,1213.66 1286.27,1213.66 1286.86,1213.66 1287.44,1213.66 1288.03,1213.66 1288.61,1213.66 1289.2,1213.66 1289.79,1213.66 1290.37,1213.66 1290.96,1213.66 1291.55,1213.66 1292.13,1213.66 1292.72,1213.66 1293.31,1213.66 1293.89,1213.66 1294.48,1213.66 1295.06,1213.66 1295.65,1213.66 1296.24,1213.66 1296.82,1213.66 1297.41,1213.66 1298,1213.66 1298.58,1213.66 1299.17,1213.66 1299.76,1213.66 1300.34,1213.66 1300.93,1213.66 1301.52,1213.66 1302.1,1213.66 1302.69,1213.66 1303.27,1213.66 1303.86,1213.66 1304.45,1213.66 1305.03,1213.66 1305.62,1213.66 1306.21,1213.66 1306.79,1213.66 1307.38,1213.66 1307.97,1213.66 1308.55,1213.66 1309.14,1213.66 1309.73,1213.66 1310.31,1213.66 1310.9,1213.66 1311.48,1213.66 1312.07,1213.66 1312.66,1213.66 1313.24,1213.66 1313.83,1213.66 1314.42,1213.66 1315,1213.66 1315.59,1213.66 1316.18,1213.66 1316.76,1213.66 1317.35,1213.66 1317.93,1213.66 1318.52,1213.66 1319.11,1213.66 1319.69,1213.66 1320.28,1213.66 1320.87,1213.66 1321.45,1213.66 1322.04,1213.66 1322.63,1213.66 1323.21,1213.66 1323.8,1213.66 1324.39,1213.66 1324.97,1213.66 1325.56,1213.66 1326.14,1213.66 1326.73,1213.66 1327.32,1213.66 1327.9,1213.66 1328.49,1213.66 1329.08,1213.66 1329.66,1213.66 1330.25,1213.66 1330.84,1213.66 1331.42,1213.66 1332.01,1213.66 1332.6,1213.66 1333.18,1213.66 1333.77,1213.66 1334.35,1213.66 1334.94,1213.66 1335.53,1213.66 1336.11,1213.66 1336.7,1213.66 1337.29,1213.66 1337.87,1213.66 1338.46,1213.66 1339.05,1213.66 1339.63,1213.66 1340.22,1213.66 1340.8,1213.66 1341.39,1213.66 1341.98,1213.66 1342.56,1213.66 1343.15,1213.66 1343.74,1213.66 1344.32,1213.66 1344.91,1213.66 1345.5,1213.66 1346.08,1213.66 1346.67,1213.66 1347.26,1213.66 1347.84,1213.66 1348.43,1213.66 1349.01,1213.66 1349.6,1213.66 1350.19,1213.66 1350.77,1213.66 1351.36,1213.66 1351.95,1213.66 1352.53,1213.66 1353.12,1213.66 1353.71,1213.66 1354.29,1213.66 1354.88,1213.66 1355.47,1213.66 1356.05,1213.66 1356.64,1213.66 1357.22,1213.66 1357.81,1213.66 1358.4,1213.66 1358.98,1213.66 1359.57,1213.66 1360.16,1213.66 1360.74,1213.66 1361.33,1213.66 1361.92,1213.66 1362.5,1213.66 1363.09,1213.66 1363.68,1213.66 1364.26,1213.66 1364.85,1213.66 1365.43,1213.66 1366.02,1213.66 1366.61,1213.66 1367.19,1213.66 1367.78,1213.66 1368.37,1213.66 1368.95,1213.66 1369.54,1213.66 1370.13,1213.66 1370.71,1213.66 1371.3,1213.66 1371.88,1213.66 1372.47,1213.66 1373.06,1213.66 1373.64,1213.66 1374.23,1213.66 1374.82,1213.66 1375.4,1213.66 1375.99,1213.66 1376.58,1213.66 1377.16,1213.66 1377.75,1213.66 1378.34,1213.66 1378.92,1213.66 1379.51,1213.66 1380.09,1213.66 1380.68,1213.66 1381.27,1213.66 1381.85,1213.66 1382.44,1213.66 1383.03,1213.66 1383.61,1213.66 1384.2,1213.66 1384.79,1213.66 1385.37,1213.66 1385.96,1213.66 1386.55,1213.66 1387.13,1213.66 1387.72,1213.66 1388.3,1213.66 1388.89,1213.66 1389.48,1213.66 1390.06,1213.66 1390.65,1213.66 1391.24,1213.66 1391.82,1213.66 1392.41,1213.66 1393,1213.66 1393.58,1213.66 1394.17,1213.66 1394.75,1213.66 1395.34,1213.66 1395.93,1213.66 1396.51,1213.66 1397.1,1213.66 1397.69,1213.66 1398.27,1213.66 1398.86,1213.66 1399.45,1213.66 1400.03,1213.66 1400.62,1213.66 1401.21,1213.66 1401.79,1213.66 1402.38,1213.66 1402.96,1213.66 1403.55,1213.66 1404.14,1213.66 1404.72,1213.66 1405.31,1213.66 1405.9,1213.66 1406.48,1213.66 1407.07,1213.66 1407.66,1213.66 1408.24,1213.66 1408.83,1213.66 1409.42,1213.66 1410,1213.66 1410.59,1213.66 1411.17,1213.66 1411.76,1213.66 1412.35,1213.66 1412.93,1213.66 1413.52,1213.66 1414.11,1213.66 1414.69,1213.66 1415.28,1213.66 1415.87,1213.66 1416.45,1213.66 1417.04,1213.66 1417.63,1213.66 1418.21,1213.66 1418.8,1213.66 1419.38,1213.66 1419.97,1213.66 1420.56,1213.66 1421.14,1213.66 1421.73,1213.66 1422.32,1213.66 1422.9,1213.66 1423.49,1213.66 1424.08,1213.66 1424.66,1213.66 1425.25,1213.66 1425.83,1213.66 1426.42,1213.66 1427.01,1213.66 1427.59,1213.66 1428.18,1213.66 1428.77,1213.66 1429.35,1213.66 1429.94,1213.66 1430.53,1213.66 1431.11,1213.66 1431.7,1213.66 1432.29,1213.66 1432.87,1213.66 1433.46,1213.66 1434.04,1213.66 1434.63,1213.66 1435.22,1213.66 1435.8,1213.66 1436.39,1213.66 1436.98,1213.66 1437.56,1213.66 1438.15,1213.66 1438.74,1213.66 1439.32,1213.66 1439.91,1213.66 1440.5,1213.66 1441.08,1213.66 1441.67,1213.66 1442.25,1213.66 1442.84,1213.66 1443.43,1213.66 1444.01,1213.66 1444.6,1213.66 1445.19,1213.66 1445.77,1213.66 1446.36,1213.66 1446.95,1213.66 1447.53,1213.66 1448.12,1213.66 1448.7,1213.66 1449.29,1213.66 1449.88,1213.66 1450.46,1213.66 1451.05,1213.66 1451.64,1213.66 1452.22,1213.66 1452.81,1213.66 1453.4,1213.66 1453.98,1213.66 1454.57,1213.66 1455.16,1213.66 1455.74,1213.66 1456.33,1213.66 1456.91,1213.66 1457.5,1213.66 1458.09,1213.66 1458.67,1213.66 1459.26,1213.66 1459.85,1213.66 1460.43,1213.66 1461.02,1213.66 1461.61,1213.66 1462.19,1213.66 1462.78,1213.66 1463.37,1213.66 1463.95,1213.66 1464.54,1213.66 1465.12,1213.66 1465.71,1213.66 1466.3,1213.66 1466.88,1213.66 1467.47,1213.66 1468.06,1213.66 1468.64,1213.66 1469.23,1213.66 1469.82,1213.66 1470.4,1213.66 1470.99,1213.66 1471.57,1213.66 1472.16,1213.66 1472.75,1213.66 1473.33,1213.66 1473.92,1213.66 1474.51,1213.66 1475.09,1213.66 1475.68,1213.66 1476.27,1213.66 1476.85,1213.66 1477.44,1213.66 1478.03,1213.66 1478.61,1213.66 1479.2,1213.66 1479.78,1213.66 1480.37,1213.66 1480.96,1213.66 1481.54,1213.66 1482.13,1213.66 1482.72,1213.66 1483.3,1213.66 1483.89,1213.66 1484.48,1213.66 1485.06,1213.66 1485.65,1213.66 1486.24,1213.66 1486.82,1213.66 1487.41,1213.66 1487.99,1213.66 1488.58,1213.66 1489.17,1213.66 1489.75,1213.66 1490.34,1213.66 1490.93,1213.66 1491.51,1213.66 1492.1,1213.66 1492.69,1213.66 1493.27,1213.66 1493.86,1213.66 1494.45,1213.66 1495.03,1213.66 1495.62,1213.66 1496.2,1213.66 1496.79,1213.66 1497.38,1213.66 1497.96,1213.66 1498.55,1213.66 1499.14,1213.66 1499.72,1213.66 1500.31,1213.66 1500.9,1213.66 1501.48,1213.66 1502.07,1213.66 1502.65,1213.66 1503.24,1213.66 1503.83,1213.66 1504.41,1213.66 1505,1213.66 1505.59,1213.66 1506.17,1213.66 1506.76,1213.66 1507.35,1213.66 1507.93,1213.66 1508.52,1213.66 1509.11,1213.66 1509.69,1213.66 1510.28,1213.66 1510.86,1213.66 1511.45,1213.66 1512.04,1213.66 1512.62,1213.66 1513.21,1213.66 1513.8,1213.66 1514.38,1213.66 1514.97,1213.66 1515.56,1213.66 1516.14,1213.66 1516.73,1213.66 1517.32,1213.66 1517.9,1213.66 1518.49,1213.66 1519.07,1213.66 1519.66,1213.66 1520.25,1213.66 1520.83,1213.66 1521.42,1213.66 1522.01,1213.66 1522.59,1213.66 1523.18,1213.66 1523.77,1213.66 1524.35,1213.66 1524.94,1213.66 1525.52,1213.66 1526.11,1213.66 1526.7,1213.66 1527.28,1213.66 1527.87,1213.66 1528.46,1213.66 1529.04,1213.66 1529.63,1213.66 1530.22,1213.66 1530.8,1213.66 1531.39,1213.66 1531.98,1213.66 1532.56,1213.66 1533.15,1213.66 1533.73,1213.66 1534.32,1213.66 1534.91,1213.66 1535.49,1213.66 1536.08,1213.66 1536.67,1213.66 1537.25,1213.66 1537.84,1213.66 1538.43,1213.66 1539.01,1213.66 1539.6,1213.66 1540.19,1213.66 1540.77,1213.66 1541.36,1213.66 1541.94,1213.66 1542.53,1213.66 1543.12,1213.66 1543.7,1213.66 1544.29,1213.66 1544.88,1213.66 1545.46,1213.66 1546.05,1213.66 1546.64,1213.66 1547.22,1213.66 1547.81,1213.66 1548.4,1213.66 1548.98,1213.66 1549.57,1213.66 1550.15,1213.66 1550.74,1213.66 1551.33,1213.66 1551.91,1213.66 1552.5,1213.66 1553.09,1213.66 1553.67,1213.66 1554.26,1213.66 1554.85,1213.66 1555.43,1213.66 1556.02,1213.66 1556.6,1213.66 1557.19,1213.66 1557.78,1213.66 1558.36,1213.66 1558.95,1213.66 1559.54,1213.66 1560.12,1213.66 1560.71,1213.66 1561.3,1213.66 1561.88,1213.66 1562.47,1213.66 1563.06,1213.66 1563.64,1213.66 1564.23,1213.66 1564.81,1213.66 1565.4,1213.66 1565.99,1213.66 1566.57,1213.66 1567.16,1213.66 1567.75,1213.66 1568.33,1213.66 1568.92,1213.66 1569.51,1213.66 1570.09,1213.66 1570.68,1213.66 1571.27,1213.66 1571.85,1213.66 1572.44,1213.66 1573.02,1213.66 1573.61,1213.66 1574.2,1213.66 1574.78,1213.66 1575.37,1213.66 1575.96,1213.66 1576.54,1213.66 1577.13,1213.66 1577.72,1213.66 1578.3,1213.66 1578.89,1213.66 1579.47,1213.66 1580.06,1213.66 1580.65,1213.66 1581.23,1213.66 1581.82,1213.66 1582.41,1213.66 1582.99,1213.66 1583.58,1213.66 1584.17,1213.66 1584.75,1213.66 1585.34,1213.66 1585.93,1213.66 1586.51,1213.66 1587.1,1213.66 1587.68,1213.66 1588.27,1213.66 1588.86,1213.66 1589.44,1213.66 1590.03,1213.66 1590.62,1213.66 1591.2,1213.66 1591.79,1213.66 1592.38,1213.66 1592.96,1213.66 1593.55,1213.66 1594.14,1213.66 1594.72,1213.66 1595.31,1213.66 1595.89,1213.66 1596.48,1213.66 1597.07,1213.66 1597.65,1213.66 1598.24,1213.66 1598.83,1213.66 1599.41,1213.66 1600,1213.66 1600.59,1213.66 1601.17,1213.66 1601.76,1213.66 1602.34,1213.66 1602.93,1213.66 1603.52,1213.66 1604.1,1213.66 1604.69,1213.66 1605.28,1213.66 1605.86,1213.66 1606.45,1213.66 1607.04,1213.66 1607.62,1213.66 1608.21,1213.66 1608.8,1213.66 1609.38,1213.66 1609.97,1213.66 1610.55,1213.66 1611.14,1213.66 1611.73,1213.66 1612.31,1213.66 1612.9,1213.66 1613.49,1213.66 1614.07,1213.66 1614.66,1213.66 1615.25,1213.66 1615.83,1213.66 1616.42,1213.66 1617.01,1213.66 1617.59,1213.66 1618.18,1213.66 1618.76,1213.66 1619.35,1213.66 1619.94,1213.66 1620.52,1213.66 1621.11,1213.66 1621.7,1213.66 1622.28,1213.66 1622.87,1213.66 1623.46,1213.66 1624.04,1213.66 1624.63,1213.66 1625.22,1213.66 1625.8,1213.66 1626.39,1213.66 1626.97,1213.66 1627.56,1213.66 1628.15,1213.66 1628.73,1213.66 1629.32,1213.66 1629.91,1213.66 1630.49,1213.66 1631.08,1213.66 1631.67,1213.66 1632.25,1213.66 1632.84,1213.66 1633.42,1213.66 1634.01,1213.66 1634.6,1213.66 1635.18,1213.66 1635.77,1213.66 1636.36,1213.66 1636.94,1213.66 1637.53,1213.66 1638.12,1213.66 1638.7,1213.66 1639.29,1213.66 1639.88,1213.66 1640.46,1213.66 1641.05,1213.66 1641.63,1213.66 1642.22,1213.66 1642.81,1213.66 1643.39,1213.66 1643.98,1213.66 1644.57,1213.66 1645.15,1213.66 1645.74,1213.66 1646.33,1213.66 1646.91,1213.66 1647.5,1213.66 1648.09,1213.66 1648.67,1213.66 1649.26,1213.66 1649.84,1213.66 1650.43,1213.66 1651.02,1213.66 1651.6,1213.66 1652.19,1213.66 1652.78,1213.66 1653.36,1213.66 1653.95,1213.66 1654.54,1213.66 1655.12,1213.66 1655.71,1213.66 1656.29,1213.66 1656.88,1213.66 1657.47,1213.66 1658.05,1213.66 1658.64,1213.66 1659.23,1213.66 1659.81,1213.66 1660.4,1213.66 1660.99,1213.66 1661.57,1213.66 1662.16,1213.66 1662.75,1213.66 1663.33,1213.66 1663.92,1213.66 1664.5,1213.66 1665.09,1213.66 1665.68,1213.66 1666.26,1213.66 1666.85,1213.66 1667.44,1213.66 1668.02,1213.66 1668.61,1213.66 1669.2,1213.66 1669.78,1213.66 1670.37,1213.66 1670.96,1213.66 1671.54,1213.66 1672.13,1213.66 1672.71,1213.66 1673.3,1213.66 1673.89,1213.66 1674.47,1213.66 1675.06,1213.66 1675.65,1213.66 1676.23,1213.66 1676.82,1213.66 1677.41,1213.66 1677.99,1213.66 1678.58,1213.66 1679.17,1213.66 1679.75,1213.66 1680.34,1213.66 1680.92,1213.66 1681.51,1213.66 1682.1,1213.66 1682.68,1213.66 1683.27,1213.66 1683.86,1213.66 1684.44,1213.66 1685.03,1213.66 1685.62,1213.66 1686.2,1213.66 1686.79,1213.66 1687.37,1213.66 1687.96,1213.66 1688.55,1213.66 1689.13,1213.66 1689.72,1213.66 1690.31,1213.66 1690.89,1213.66 1691.48,1213.66 1692.07,1213.66 1692.65,1213.66 1693.24,1213.66 1693.83,1213.66 1694.41,1213.66 1695,1213.66 1695.58,1213.66 1696.17,1213.66 1696.76,1213.66 1697.34,1213.66 1697.93,1213.66 1698.52,1213.66 1699.1,1213.66 1699.69,1213.66 1700.28,1213.66 1700.86,1213.66 1701.45,1213.66 1702.04,1213.66 1702.62,1213.66 1703.21,1213.66 1703.79,1213.66 1704.38,1213.66 1704.97,1213.66 1705.55,1213.66 1706.14,1213.66 1706.73,1213.66 1707.31,1213.66 1707.9,1213.66 1708.49,1213.66 1709.07,1213.66 1709.66,1213.66 1710.24,1213.66 1710.83,1213.66 1711.42,1213.66 1712,1213.66 1712.59,1213.66 1713.18,1213.66 1713.76,1213.66 1714.35,1213.66 1714.94,1213.66 1715.52,1213.66 1716.11,1213.66 1716.7,1213.66 1717.28,1213.66 1717.87,1213.66 1718.45,1213.66 1719.04,1213.66 1719.63,1213.66 1720.21,1213.66 1720.8,1213.66 1721.39,1213.66 1721.97,1213.66 1722.56,1213.66 1723.15,1213.66 1723.73,1213.66 1724.32,1213.66 1724.91,1213.66 1725.49,1213.66 1726.08,1213.66 1726.66,1213.66 1727.25,1213.66 1727.84,1213.66 1728.42,1213.66 1729.01,1213.66 1729.6,1213.66 1730.18,1213.66 1730.77,1213.66 1731.36,1213.66 1731.94,1213.66 1732.53,1213.66 1733.11,1213.66 1733.7,1213.66 1734.29,1213.66 1734.87,1213.66 1735.46,1213.66 1736.05,1213.66 1736.63,1213.66 1737.22,1213.66 1737.81,1213.66 1738.39,1213.66 1738.98,1213.66 1739.57,1213.66 1740.15,1213.66 1740.74,1213.66 1741.32,1213.66 1741.91,1213.66 1742.5,1213.66 1743.08,1213.66 1743.67,1213.66 1744.26,1213.66 1744.84,1213.66 1745.43,1213.66 1746.02,1213.66 1746.6,1213.66 1747.19,1213.66 1747.78,1213.66 1748.36,1213.66 1748.95,1213.66 1749.53,1213.66 1750.12,1213.66 1750.71,1213.66 1751.29,1213.66 1751.88,1213.66 1752.47,1213.66 1753.05,1213.66 1753.64,1213.66 1754.23,1213.66 1754.81,1213.66 1755.4,1213.66 1755.99,1213.66 1756.57,1213.66 1757.16,1213.66 1757.74,1213.66 1758.33,1213.66 1758.92,1213.66 1759.5,1213.66 1760.09,1213.66 1760.68,1213.66 1761.26,1213.66 1761.85,1213.66 1762.44,1213.66 1763.02,1213.66 1763.61,1213.66 1764.19,1213.66 1764.78,1213.66 1765.37,1213.66 1765.95,1213.66 1766.54,1213.66 1767.13,1213.66 1767.71,1213.66 1768.3,1213.66 1768.89,1213.66 1769.47,1213.66 1770.06,1213.66 1770.65,1213.66 1771.23,1213.66 1771.82,1213.66 1772.4,1213.66 1772.99,1213.66 1773.58,1213.66 1774.16,1213.66 1774.75,1213.66 1775.34,1213.66 1775.92,1213.66 1776.51,1213.66 1777.1,1213.66 1777.68,1213.66 1778.27,1213.66 1778.86,1213.66 1779.44,1213.66 1780.03,1213.66 1780.61,1213.66 1781.2,1213.66 1781.79,1213.66 1782.37,1213.66 1782.96,1213.66 1783.55,1213.66 1784.13,1213.66 1784.72,1213.66 1785.31,1213.66 1785.89,1213.66 1786.48,1213.66 1787.06,1213.66 1787.65,1213.66 1788.24,1213.66 1788.82,1213.66 1789.41,1213.66 1790,1213.66 1790.58,1213.66 1791.17,1213.66 1791.76,1213.66 1792.34,1213.66 1792.93,1213.66 1793.52,1213.66 1794.1,1213.66 1794.69,1213.66 1795.27,1213.66 1795.86,1213.66 1796.45,1213.66 1797.03,1213.66 1797.62,1213.66 1798.21,1213.66 1798.79,1213.66 1799.38,1213.66 1799.97,1213.66 1800.55,1213.66 1801.14,1213.66 1801.73,1213.66 1802.31,1213.66 1802.9,1213.66 1803.48,1213.66 1804.07,1213.66 1804.66,1213.66 1805.24,1213.66 1805.83,1213.66 1806.42,1213.66 1807,1213.66 1807.59,1213.66 1808.18,1213.66 1808.76,1213.66 1809.35,1213.66 1809.94,1213.66 1810.52,1213.66 1811.11,1213.66 1811.69,1213.66 1812.28,1213.66 1812.87,1213.66 1813.45,1213.66 1814.04,1213.66 1814.63,1213.66 1815.21,1213.66 1815.8,1213.66 1816.39,1213.66 1816.97,1213.66 1817.56,1213.66 1818.14,1213.66 1818.73,1213.66 1819.32,1213.66 1819.9,1213.66 1820.49,1213.66 1821.08,1213.66 1821.66,1213.66 1822.25,1213.66 1822.84,1213.66 1823.42,1213.66 1824.01,1213.66 1824.6,1213.66 1825.18,1213.66 1825.77,1213.66 1826.35,1213.66 1826.94,1213.66 1827.53,1213.66 1828.11,1213.66 1828.7,1213.66 1829.29,1213.66 1829.87,1213.66 1830.46,1213.66 1831.05,1213.66 1831.63,1213.66 1832.22,1213.66 1832.81,1213.66 1833.39,1213.66 1833.98,1213.66 1834.56,1213.66 1835.15,1213.66 1835.74,1213.66 1836.32,1213.66 1836.91,1213.66 1837.5,1213.66 1838.08,1213.66 1838.67,1213.66 1839.26,1213.66 1839.84,1213.66 1840.43,1213.66 1841.01,1213.66 1841.6,1213.66 1842.19,1213.66 1842.77,1213.66 1843.36,1213.66 1843.95,1213.66 1844.53,1213.66 1845.12,1213.66 1845.71,1213.66 1846.29,1213.66 1846.88,1213.66 1847.47,1213.66 1848.05,1213.66 1848.64,1213.66 1849.22,1213.66 1849.81,1213.66 1850.4,1213.66 1850.98,1213.66 1851.57,1213.66 1852.16,1213.66 1852.74,1213.66 1853.33,1213.66 1853.92,1213.66 1854.5,1213.66 1855.09,1213.66 1855.68,1213.66 1856.26,1213.66 1856.85,1213.66 1857.43,1213.66 1858.02,1213.66 1858.61,1213.66 1859.19,1213.66 1859.78,1213.66 1860.37,1213.66 1860.95,1213.66 1861.54,1213.66 1862.13,1213.66 1862.71,1213.66 1863.3,1213.66 1863.88,1213.66 1864.47,1213.66 1865.06,1213.66 1865.64,1213.66 1866.23,1213.66 1866.82,1213.66 1867.4,1213.66 1867.99,1213.66 1868.58,1213.66 1869.16,1213.66 1869.75,1213.66 1870.34,1213.66 1870.92,1213.66 1871.51,1213.66 1872.09,1213.66 1872.68,1213.66 1873.27,1213.66 1873.85,1213.66 1874.44,1213.66 1875.03,1213.66 1875.61,1213.66 1876.2,1213.66 1876.79,1213.66 1877.37,1213.66 1877.96,1213.66 1878.55,1213.66 1879.13,1213.66 1879.72,1213.66 1880.3,1213.66 1880.89,1213.66 1881.48,1213.66 1882.06,1213.66 1882.65,1213.66 1883.24,1213.66 1883.82,1213.66 1884.41,1213.66 1885,1213.66 1885.58,1213.66 1886.17,1213.66 1886.76,1213.66 1887.34,1213.66 1887.93,1213.66 1888.51,1213.66 1889.1,1213.66 1889.69,1213.66 1890.27,1213.66 1890.86,1213.66 1891.45,1213.66 1892.03,1213.66 1892.62,1213.66 1893.21,1213.66 1893.79,1213.66 1894.38,1213.66 1894.96,1213.66 1895.55,1213.66 1896.14,1213.66 1896.72,1213.66 1897.31,1213.66 1897.9,1213.66 1898.48,1213.66 1899.07,1213.66 1899.66,1213.66 1900.24,1213.66 1900.83,1213.66 1901.42,1213.66 1902,1213.66 1902.59,1213.66 1903.17,1213.66 1903.76,1213.66 1904.35,1213.66 1904.93,1213.66 1905.52,1213.66 1906.11,1213.66 1906.69,1213.66 1907.28,1213.66 1907.87,1213.66 1908.45,1213.66 1909.04,1213.66 1909.63,1213.66 1910.21,1213.66 1910.8,1213.66 1911.38,1213.66 1911.97,1213.66 1912.56,1213.66 1913.14,1213.66 1913.73,1213.66 1914.32,1213.66 1914.9,1213.66 1915.49,1213.66 1916.08,1213.66 1916.66,1213.66 1917.25,1213.66 1917.83,1213.66 1918.42,1213.66 1919.01,1213.66 1919.59,1213.66 1920.18,1213.66 1920.77,1213.66 1921.35,1213.66 1921.94,1213.66 1922.53,1213.66 1923.11,1213.66 1923.7,1213.66 1924.29,1213.66 1924.87,1213.66 1925.46,1213.66 1926.04,1213.66 1926.63,1213.66 1927.22,1213.66 1927.8,1213.66 1928.39,1213.66 1928.98,1213.66 1929.56,1213.66 1930.15,1213.66 1930.74,1213.66 1931.32,1213.66 1931.91,1213.66 1932.5,1213.66 1933.08,1213.66 1933.67,1213.66 1934.25,1213.66 1934.84,1213.66 1935.43,1213.66 1936.01,1213.66 1936.6,1213.66 1937.19,1213.66 1937.77,1213.66 1938.36,1213.66 1938.95,1213.66 1939.53,1213.66 1940.12,1213.66 1940.71,1213.66 1941.29,1213.66 1941.88,1213.66 1942.46,1213.66 1943.05,1213.66 1943.64,1213.66 1944.22,1213.66 1944.81,1213.66 1945.4,1213.66 1945.98,1213.66 1946.57,1213.66 1947.16,1213.66 1947.74,1213.66 1948.33,1213.66 1948.91,1213.66 1949.5,1213.66 1950.09,1213.66 1950.67,1213.66 1951.26,1213.66 1951.85,1213.66 1952.43,1213.66 1953.02,1213.66 1953.61,1213.66 1954.19,1213.66 1954.78,1213.66 1955.37,1213.66 1955.95,1213.66 1956.54,1213.66 1957.12,1213.66 1957.71,1213.66 1958.3,1213.66 1958.88,1213.66 1959.47,1213.66 1960.06,1213.66 1960.64,1213.66 1961.23,1213.66 1961.82,1213.66 1962.4,1213.66 1962.99,1213.66 1963.58,1213.66 1964.16,1213.66 1964.75,1213.66 1965.33,1213.66 1965.92,1213.66 1966.51,1213.66 1967.09,1213.66 1967.68,1213.66 1968.27,1213.66 1968.85,1213.66 1969.44,1213.66 1970.03,1213.66 1970.61,1213.66 1971.2,1213.66 1971.78,1213.66 1972.37,1213.66 1972.96,1213.66 1973.54,1213.66 1974.13,1213.66 1974.72,1213.66 1975.3,1213.66 1975.89,1213.66 1976.48,1213.66 1977.06,1213.66 1977.65,1213.66 1978.24,1213.66 1978.82,1213.66 1979.41,1213.66 1979.99,1213.66 1980.58,1213.66 1981.17,1213.66 1981.75,1213.66 1982.34,1213.66 1982.93,1213.66 1983.51,1213.66 1984.1,1213.66 1984.69,1213.66 1985.27,1213.66 1985.86,1213.66 1986.45,1213.66 1987.03,1213.66 1987.62,1213.66 1988.2,1213.66 1988.79,1213.66 1989.38,1213.66 1989.96,1213.66 1990.55,1213.66 1991.14,1213.66 1991.72,1213.66 1992.31,1213.66 1992.9,1213.66 1993.48,1213.66 1994.07,1213.66 1994.65,1213.66 1995.24,1213.66 1995.83,1213.66 1996.41,1213.66 1997,1213.66 1997.59,1213.66 1998.17,1213.66 1998.76,1213.66 1999.35,1213.66 1999.93,1213.66 2000.52,1213.66 2001.11,1213.66 2001.69,1213.66 2002.28,1213.66 2002.86,1213.66 2003.45,1213.66 2004.04,1213.66 2004.62,1213.66 2005.21,1213.66 2005.8,1213.66 2006.38,1213.66 2006.97,1213.66 2007.56,1213.66 2008.14,1213.66 2008.73,1213.66 2009.32,1213.66 2009.9,1213.66 2010.49,1213.66 2011.07,1213.66 2011.66,1213.66 2012.25,1213.66 2012.83,1213.66 2013.42,1213.66 2014.01,1213.66 2014.59,1213.66 2015.18,1213.66 2015.77,1213.66 2016.35,1213.66 2016.94,1213.66 2017.53,1213.66 2018.11,1213.66 2018.7,1213.66 2019.28,1213.66 2019.87,1213.66 2020.46,1213.66 2021.04,1213.66 2021.63,1213.66 2022.22,1213.66 2022.8,1213.66 2023.39,1213.66 2023.98,1213.66 2024.56,1213.66 2025.15,1213.66 2025.73,1213.66 2026.32,1213.66 2026.91,1213.66 2027.49,1213.66 2028.08,1213.66 2028.67,1213.66 2029.25,1213.66 2029.84,1213.66 2030.43,1213.66 2031.01,1213.66 2031.6,1213.66 2032.19,1213.66 2032.77,1213.66 2033.36,1213.66 2033.94,1213.66 2034.53,1213.66 2035.12,1213.66 2035.7,1213.66 2036.29,1213.66 2036.88,1213.66 2037.46,1213.66 2038.05,1213.66 2038.64,1213.66 2039.22,1213.66 2039.81,1213.66 2040.4,1213.66 2040.98,1213.66 2041.57,1213.66 2042.15,1213.66 2042.74,1213.66 2043.33,1213.66 2043.91,1213.66 2044.5,1213.66 2045.09,1213.66 2045.67,1213.66 2046.26,1213.66 2046.85,1213.66 2047.43,1213.66 2048.02,1213.66 2048.6,1213.66 2049.19,1213.66 2049.78,1213.66 2050.36,1213.66 2050.95,1213.66 2051.54,1213.66 2052.12,1213.66 2052.71,1213.66 2053.3,1213.66 2053.88,1213.66 2054.47,1213.66 2055.06,1213.66 2055.64,1213.66 2056.23,1213.66 2056.81,1213.66 2057.4,1213.66 2057.99,1213.66 2058.57,1213.66 2059.16,1213.66 2059.75,1213.66 2060.33,1213.66 2060.92,1213.66 2061.51,1213.66 2062.09,1213.66 2062.68,1213.66 2063.27,1213.66 2063.85,1213.66 2064.44,1213.66 2065.02,1213.66 2065.61,1213.66 2066.2,1213.66 2066.78,1213.66 2067.37,1213.66 2067.96,1213.66 2068.54,1213.66 2069.13,1213.66 2069.72,1213.66 2070.3,1213.66 2070.89,1213.66 2071.48,1213.66 2072.06,1213.66 2072.65,1213.66 2073.23,1213.66 2073.82,1213.66 2074.41,1213.66 2074.99,1213.66 2075.58,1213.66 2076.17,1213.66 2076.75,1213.66 2077.34,1213.66 2077.93,1213.66 2078.51,1213.66 2079.1,1213.66 2079.68,1213.66 2080.27,1213.66 2080.86,1213.66 2081.44,1213.66 2082.03,1213.66 2082.62,1213.66 2083.2,1213.66 2083.79,1213.66 2084.38,1213.66 2084.96,1213.66 2085.55,1213.66 2086.14,1213.66 2086.72,1213.66 2087.31,1213.66 2087.89,1213.66 2088.48,1213.66 2089.07,1213.66 2089.65,1213.66 2090.24,1213.66 2090.83,1213.66 2091.41,1213.66 2092,1213.66 2092.59,1213.66 2093.17,1213.66 2093.76,1213.66 2094.35,1213.66 2094.93,1213.66 2095.52,1213.66 2096.1,1213.66 2096.69,1213.66 2097.28,1213.66 2097.86,1213.66 2098.45,1213.66 2099.04,1213.66 2099.62,1213.66 2100.21,1213.66 2100.8,1213.66 2101.38,1213.66 2101.97,1213.66 2102.55,1213.66 2103.14,1213.66 2103.73,1213.66 2104.31,1213.66 2104.9,1213.66 2105.49,1213.66 2106.07,1213.66 2106.66,1213.66 2107.25,1213.66 2107.83,1213.66 2108.42,1213.66 2109.01,1213.66 2109.59,1213.66 2110.18,1213.66 2110.76,1213.66 2111.35,1213.66 2111.94,1213.66 2112.52,1213.66 2113.11,1213.66 2113.7,1213.66 2114.28,1213.66 2114.87,1213.66 2115.46,1213.66 2116.04,1213.66 2116.63,1213.66 2117.22,1213.66 2117.8,1213.66 2118.39,1213.66 2118.97,1213.66 2119.56,1213.66 2120.15,1213.66 2120.73,1213.66 2121.32,1213.66 2121.91,1213.66 2122.49,1213.66 2123.08,1213.66 2123.67,1213.66 2124.25,1213.66 2124.84,1213.66 2125.42,1213.66 2126.01,1213.66 2126.6,1213.66 2127.18,1213.66 2127.77,1213.66 2128.36,1213.66 2128.94,1213.66 2129.53,1213.66 2130.12,1213.66 2130.7,1213.66 2131.29,1213.66 2131.88,1213.66 2132.46,1213.66 2133.05,1213.66 2133.63,1213.66 2134.22,1213.66 2134.81,1213.66 2135.39,1213.66 2135.98,1213.66 2136.57,1213.66 2137.15,1213.66 2137.74,1213.66 2138.33,1213.66 2138.91,1213.66 2139.5,1213.66 2140.09,1213.66 2140.67,1213.66 2141.26,1213.66 2141.84,1213.66 2142.43,1213.66 2143.02,1213.66 2143.6,1213.66 2144.19,1213.66 2144.78,1213.66 2145.36,1213.66 2145.95,1213.66 2146.54,1213.66 2147.12,1213.66 2147.71,1213.66 2148.3,1213.66 2148.88,1213.66 2149.47,1213.66 2150.05,1213.66 2150.64,1213.66 2151.23,1213.66 2151.81,1213.66 2152.4,1213.66 2152.99,1213.66 2153.57,1213.66 2154.16,1213.66 2154.75,1213.66 2155.33,1213.66 2155.92,1213.66 2156.5,1213.66 2157.09,1213.66 2157.68,1213.66 2158.26,1213.66 \"/>\n<polyline clip-path=\"url(#clip012)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1563.34,1197.97 1399.04,899.083 \"/>\n<polyline clip-path=\"url(#clip012)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1228.94 985.439,1197.97 2158.26,1197.97 2158.26,1228.94 985.439,1228.94 \"/>\n<path clip-path=\"url(#clip010)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip010)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip010)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip010)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip010)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip010)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip013\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip013)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip013)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip013)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip013)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip013)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip010)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip013)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip013)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip013)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip013)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip013)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip010)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip013)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-2642.16 162.673,-3872.82 163.232,-4951.51 163.792,-5962.22 164.351,-6884.84 164.91,-7749.27 165.469,-8491.38 166.029,-9206.44 166.588,-9832.71 167.147,-10395.9 167.706,-10899.9 168.266,-11348.8 168.825,-11746.1 169.384,-12095.1 169.943,-12398.9 170.503,-12660.7 171.062,-12883.2 171.621,-13069 172.18,-13220.7 172.74,-13340.5 173.299,-12861.4 173.858,-12443.7 174.417,-12043.9 174.977,-12093.2 175.536,-11735.2 176.095,-11773.7 176.655,-11790.6 177.214,-11780.5 177.773,-11440.4 178.332,-11136.3 178.892,-10816.6 179.451,-10523.8 180.01,-10467.4 180.569,-10404.4 181.129,-9735.12 181.688,-9641.46 182.247,-9351.94 182.806,-9076.97 183.366,-8816.71 183.925,-8704.8 184.484,-8455.79 185.043,-8223.62 185.603,-8117.18 186.162,-7891.96 186.721,-7668.42 187.28,-7564.88 187.84,-7348.08 188.399,-7235.32 188.958,-7112.92 189.517,-6824.5 190.077,-6693.21 190.636,-6571.92 191.195,-6293.06 191.754,-6164.47 192.314,-6041.5 192.873,-5920.75 193.432,-5799.29 193.991,-5607.94 194.551,-5360.76 195.11,-5185.09 195.669,-5076.98 196.228,-4905.14 196.788,-4796.29 197.347,-4532.12 197.906,-4383.92 198.465,-4188.6 199.025,-3943.58 199.584,-3798.56 200.143,-3659.25 200.702,-3481.68 201.262,-3388.47 201.821,-3301.78 202.38,-3211.66 202.939,-3001.08 203.499,-2916.79 204.058,-2797.12 204.617,-2641.74 205.176,-2532.04 205.736,-2456.55 206.295,-2389.26 206.854,-2316.8 207.413,-2180.74 207.973,-2080.69 208.532,-1950.26 209.091,-1825.19 209.65,-1672.33 210.21,-1615.78 210.769,-1502 211.328,-1448.48 211.887,-1336.54 212.447,-1229.25 213.006,-1126.38 213.565,-999.682 214.124,-955.226 214.684,-830.149 215.243,-739.147 215.802,-675.666 216.361,-541.491 216.921,-506.417 217.48,-401.933 218.039,-393.306 218.598,-335.964 219.158,-302.768 219.717,-225.943 220.276,-128.599 220.835,-84.311 221.395,-22.552 221.954,64.8172 222.513,80.3385 223.072,140.742 223.632,200.035 224.191,237.994 224.75,314.069 225.309,342.264 225.869,434.101 226.428,457.753 226.987,461.863 227.546,483.987 228.106,607.385 228.665,606.703 229.224,610.205 229.783,591.553 230.343,615.323 230.902,637.697 231.461,658.004 232.02,676.764 232.58,679.257 233.139,681.435 233.698,742.502 234.257,764.914 234.817,802.335 235.376,800.814 235.935,836.321 236.494,832.142 237.054,849.361 237.613,864.034 238.172,847.056 238.731,862.148 239.291,877.264 239.85,876.363 240.409,875.546 240.968,966.232 241.528,942.747 242.087,939.473 242.646,934.084 243.205,948.172 243.765,946.126 244.324,998.844 244.883,1011.09 245.442,1039.83 246.002,1074.36 246.561,1064.13 247.12,1056 247.679,1065.2 248.239,1057.84 248.798,1053.07 249.357,1043.66 249.916,1051.8 250.476,1046.47 251.035,1060.01 251.594,1088.78 252.153,1098.92 252.713,1087.35 253.272,1062.17 253.831,1020.43 254.39,1032.53 254.95,1046.21 255.509,1061.86 256.068,1073.92 256.627,1101.75 257.187,1095.85 257.746,1088.93 258.305,1077.72 258.864,1103.22 259.424,1096.44 259.983,1122.77 260.542,1164.21 261.101,1152.12 261.661,1158.11 262.22,1164.07 262.779,1152.99 263.338,1123.18 263.898,1147.66 264.457,1203.74 265.016,1174.26 265.575,1180.77 266.135,1152.04 266.694,1173.32 267.253,1177.16 267.812,1130.25 268.372,1116.79 268.931,1124.94 269.49,1096.26 270.049,1105.39 270.609,1116.54 271.168,1109.25 271.727,1118.87 272.286,1094.32 272.846,1106.92 273.405,1102.43 273.964,1116.57 274.523,1108.26 275.083,1113.48 275.642,1106.32 276.201,1096.55 276.76,1085.92 277.32,1112.59 277.879,1106.62 278.438,1082.56 278.997,1077.98 279.557,1071.43 280.116,1047.32 280.675,1040.8 281.234,1055.45 281.794,1065.38 282.353,1037.95 282.912,1083.53 283.471,1073.57 284.031,1065.67 284.59,1126.95 285.149,1131.12 285.708,1122.19 286.268,1128.48 286.827,1135.89 287.386,1129.88 287.945,1119.08 288.505,1025.12 289.064,1069.23 289.623,1093.35 290.182,1083.46 290.742,1077 291.301,1067.66 291.86,1060.01 292.419,1035.12 292.979,1044.44 293.538,1051.93 294.097,1045.41 294.656,1057.23 295.216,1082.47 295.775,1075.43 296.334,1064.42 296.893,1090.31 297.453,1114.63 298.012,1053.14 298.571,1047.8 299.13,1023.51 299.69,1032.12 300.249,1026.21 300.808,1002.82 301.368,1016.48 301.927,1008.38 302.486,986.186 303.045,995.541 303.605,1026.9 304.164,1019.83 304.723,1032.14 305.282,1026.02 305.842,1003.39 306.401,1018.34 306.96,1014.24 307.519,1007.98 308.079,986.437 308.638,983.639 309.197,964.488 309.756,946.246 310.316,962.08 310.875,928.083 311.434,925.443 311.993,928.842 312.553,943.557 313.112,925.531 313.671,957.036 314.23,986.352 314.79,1005.15 315.349,983.696 315.908,980.717 316.467,976.11 317.027,988.516 317.586,996.496 318.145,993.626 318.704,972.658 319.264,953.421 319.823,959.393 320.382,957.432 320.941,955.113 321.501,951.105 322.06,943.851 322.619,923.768 323.178,918.805 323.738,935.285 324.297,948.122 324.856,943.939 325.415,940.101 325.975,969.492 326.534,963.773 327.093,973.267 327.652,982.746 328.212,981.75 328.771,975.865 329.33,989.543 329.889,998.836 330.449,1011.44 331.008,1034.5 331.567,1026.04 332.126,1052.69 332.686,1043.08 333.245,1029.53 333.804,1035.88 334.363,1025.4 334.923,1011.17 335.482,1020.55 336.041,996.981 336.6,1005.52 337.16,1030.75 337.719,1036.01 338.278,1026.75 338.837,1017.05 339.397,1009.72 339.956,1015.71 340.515,972.559 341.074,980.721 341.634,958.589 342.193,1002.39 342.752,1024.73 343.311,1038.52 343.871,1026.62 344.43,1002.44 344.989,977.202 345.548,1020.06 346.108,990.283 346.667,981.142 347.226,954.632 347.785,950.282 348.345,944.395 348.904,957.494 349.463,932.931 350.022,928.095 350.582,905.603 351.141,901.471 351.7,896.834 352.259,896.478 352.819,880.144 353.378,861.902 353.937,913.305 354.496,894.109 355.056,891.103 355.615,888.623 356.174,847.216 356.733,863.591 357.293,862.336 357.852,894.194 358.411,893.032 358.97,890.286 359.53,869.624 360.089,883.713 360.648,850.605 361.207,883.951 361.767,916.568 362.326,925.771 362.885,935.791 363.444,927.904 364.004,890.632 364.563,869.762 365.122,899.411 365.681,909.477 366.241,922.702 366.8,932.889 367.359,877.14 367.918,904.184 368.478,897.548 369.037,890.353 369.596,889.833 370.155,882.988 370.715,844.601 371.274,810.447 371.833,811.759 372.392,797.288 372.952,814.043 373.511,828.693 374.07,825.419 374.629,840.466 375.189,821.868 375.748,837.544 376.307,882.422 376.866,880.141 377.426,875.539 377.985,871.312 378.544,885.464 379.103,880.412 379.663,876.699 380.222,869.54 380.781,882.328 381.34,861.226 381.9,938.877 382.459,919.647 383.018,914.987 383.577,894.739 384.137,889.267 384.696,869.073 385.255,869.025 385.814,863.381 386.374,843.208 386.933,872.932 387.492,868.774 388.051,896.597 388.611,889.476 389.17,917.729 389.729,845.809 390.288,810.853 390.848,824.224 391.407,852.541 391.966,866.138 392.525,860.257 393.085,826.195 393.644,803.196 394.203,816.535 394.762,847.345 395.322,827.649 395.881,807.909 396.44,840.684 396.999,889.098 397.559,884.316 398.118,894.798 398.677,825.032 399.236,855.837 399.796,871.323 400.355,868.403 400.914,880.636 401.473,860.836 402.033,891.491 402.592,836.753 403.151,877.858 403.71,903.787 404.27,912.867 404.829,892.548 405.388,887.439 405.947,884.502 406.507,847.392 407.066,811.354 407.625,811.098 408.184,827.155 408.744,807.058 409.303,807.716 409.862,840.864 410.421,835.28 410.981,879.31 411.54,823.139 412.099,816.476 412.658,831.598 413.218,846.138 413.777,841.371 414.336,835.509 414.895,811.436 415.455,789.356 416.014,768.714 416.573,769.639 417.132,782.445 417.692,812.904 418.251,827.535 418.81,808.434 419.369,788.653 419.929,771.213 420.488,789.881 421.047,791.317 421.606,792.26 422.166,760.623 422.725,744.871 423.284,728.161 423.843,680.974 424.403,687.889 424.962,644.574 425.521,717.48 426.08,736.344 426.64,753.502 427.199,754.482 427.758,787.702 428.318,753.26 428.877,720.327 429.436,690.136 429.995,693.296 430.555,716.249 431.114,690.413 431.673,710.453 432.232,694.917 432.792,714.001 433.351,682.886 433.91,672.19 434.469,664.392 435.029,671.514 435.588,693.493 436.147,714.107 436.706,719.045 437.266,721.816 437.825,727.48 438.384,714.087 438.943,713.035 439.503,697.576 440.062,702.931 440.621,707.341 441.18,740.591 441.74,711.253 442.299,711.798 442.858,745.03 443.417,761.753 443.977,760.946 444.536,760.466 445.095,759.409 445.654,777.462 446.214,809.442 446.773,822.941 447.332,819.465 447.891,848.66 448.451,798.419 449.01,810.463 449.569,824.163 450.128,834.471 450.688,813.058 451.247,794.74 451.806,794.489 452.365,788.861 452.925,803.051 453.484,799.907 454.043,797.568 454.602,762.188 455.162,780.217 455.721,761.626 456.28,762.6 456.839,761.7 457.399,775.771 457.958,805.58 458.517,802.268 459.076,749.98 459.636,752.436 460.195,784.788 460.754,767.108 461.313,765.258 461.873,782.825 462.432,796.703 462.991,813.5 463.55,793.11 464.11,790.444 464.669,770.437 465.228,767.862 465.787,738.124 466.347,772.686 466.906,804.637 467.465,785.156 468.024,753.644 468.584,785.75 469.143,784.504 469.702,766.048 470.261,748.638 470.821,699.713 471.38,734.645 471.939,737.079 472.498,738.776 473.058,772.436 473.617,773.359 474.176,790.167 474.735,774.76 475.295,773.948 475.854,772.542 476.413,771.532 476.972,734.635 477.532,768.333 478.091,803.056 478.65,817.69 479.209,814.238 479.769,826.879 480.328,821.591 480.887,798.936 481.446,798.234 482.006,806.847 482.565,817.711 483.124,829.814 483.683,839.477 484.243,864.676 484.802,859.903 485.361,852.126 485.92,860.824 486.48,852.979 487.039,829.193 487.598,871.077 488.157,864.901 488.717,844.264 489.276,850.935 489.835,846.386 490.394,826.766 490.954,839.096 491.513,832.194 492.072,811.553 492.631,778.707 493.191,714.343 493.75,715.341 494.309,699.385 494.868,668.459 495.428,689.039 495.987,676.367 496.546,681.808 497.105,685.945 497.665,671.861 498.224,676.985 498.783,696.44 499.342,733.456 499.902,714.984 500.461,733.968 501.02,731.629 501.579,716.193 502.139,717.287 502.698,718.188 503.257,702.795 503.816,703.463 504.376,655.283 504.935,676.275 505.494,650.891 506.053,655.162 506.613,670.539 507.172,676.233 507.731,646.924 508.29,638.182 508.85,640.907 509.409,627.893 509.968,631.095 510.527,621.658 511.087,627.391 511.646,650.553 512.205,700.115 512.764,699.94 513.324,736.323 513.883,735.376 514.442,748.846 515.001,698.859 515.561,701.692 516.12,717.574 516.679,732.925 517.238,732.132 517.798,699.274 518.357,719.883 518.916,720.364 519.475,772.742 520.035,768.223 520.594,779.773 521.153,760.116 521.712,752.123 522.272,782.835 522.831,746.095 523.39,743.825 523.949,759.376 524.509,753.841 525.068,752.896 525.627,753.05 526.186,786.005 526.746,814.46 527.305,842.063 527.864,837.441 528.423,818.864 528.983,811.722 529.542,808.5 530.101,802.966 530.66,813.771 531.22,809.29 531.779,801.152 532.338,812.228 532.897,806.858 533.457,769.518 534.016,844.914 534.575,805.992 535.134,800.254 535.694,813.631 536.253,822.138 536.812,832 537.371,825.675 537.931,805.12 538.49,813.859 539.049,872.787 539.608,847.856 540.168,872.96 540.727,897.85 541.286,908.637 541.845,885.487 542.405,876.728 542.964,885.249 543.523,875.694 544.082,834.894 544.642,844.929 545.201,825.425 545.76,852.111 546.319,844.575 546.879,824.587 547.438,818.323 547.997,845.43 548.556,820.94 549.116,811.367 549.675,819.463 550.234,779.309 550.793,776.976 551.353,768.666 551.912,766.631 552.471,765.375 553.031,746.418 553.59,758.634 554.149,754.138 554.708,750.468 555.268,761.902 555.827,759.655 556.386,785.286 556.945,812.284 557.505,822.947 558.064,817.876 558.623,814.006 559.182,809.799 559.742,772.668 560.301,735.831 560.86,718.167 561.419,718.898 561.979,685.073 562.538,685.518 563.097,637.288 563.656,596.512 564.216,636.788 564.775,604.963 565.334,625.941 565.893,632.024 566.453,621.179 567.012,643.969 567.571,697.352 568.13,697.678 568.69,716.572 569.249,719.243 569.808,705.546 570.367,689.495 570.927,688.939 571.486,692.196 572.045,676.524 572.604,694.772 573.164,646.624 573.723,636.224 574.282,673.189 574.841,658.798 575.401,664.146 575.96,654.929 576.519,673.532 577.078,693.586 577.638,678.107 578.197,661.998 578.756,664.019 579.315,670.191 579.875,669.537 580.434,672.927 580.993,694.432 581.552,678.613 582.112,679.398 582.671,666.473 583.23,670.819 583.789,704.709 584.349,720.993 584.908,752.256 585.467,765.398 586.026,747.113 586.586,729.052 587.145,699.216 587.704,697.187 588.263,665.122 588.823,666.085 589.382,670.015 589.941,691.689 590.5,678.33 591.06,664.595 591.619,650.016 592.178,666.337 592.737,669.631 593.297,674.207 593.856,657.554 594.415,660.842 594.974,682.305 595.534,701.479 596.093,688.29 596.652,657.518 597.211,628.548 597.771,616.649 598.33,624.889 598.889,632.575 599.448,620.644 600.008,628.481 600.567,680.686 601.126,702.055 601.685,687.16 602.245,671.249 602.804,655.93 603.363,658.987 603.922,663.483 604.482,663.803 605.041,662.972 605.6,681.763 606.159,730.137 606.719,679.92 607.278,663.245 607.837,663.359 608.396,698.349 608.956,696.54 609.515,662.771 610.074,650.842 610.633,685.807 611.193,701.22 611.752,684.831 612.311,672.88 612.87,688.834 613.43,672.432 613.989,688.075 614.548,694.021 615.107,693.304 615.667,694.297 616.226,714.725 616.785,681.228 617.344,683.551 617.904,687.761 618.463,673.033 619.022,673.182 619.581,706.109 620.141,686.559 620.7,672.753 621.259,646.623 621.818,648.644 622.378,664.885 622.937,683.463 623.496,687.992 624.055,657.661 624.615,677.625 625.174,712.317 625.733,711.193 626.292,693.087 626.852,694.207 627.411,693.129 627.97,737.541 628.529,769.414 629.089,751.503 629.648,763.285 630.207,808.76 630.766,819.083 631.326,812.677 631.885,823.101 632.444,804.286 633.003,815.759 633.563,795.262 634.122,790.625 634.681,783.649 635.24,830.336 635.8,840.168 636.359,813.792 636.918,855.833 637.477,833.012 638.037,825.658 638.596,850.819 639.155,825.191 639.714,803.356 640.274,734.896 640.833,765.163 641.392,712.922 641.951,726.036 642.511,705.907 643.07,717.011 643.629,718.775 644.188,652.384 644.748,673.12 645.307,657.498 645.866,642.418 646.425,642.552 646.985,646.22 647.544,631.121 648.103,634.827 648.662,624.63 649.222,645.186 649.781,601.188 650.34,593.333 650.899,616.379 651.459,638.62 652.018,657.942 652.577,640.774 653.136,661.046 653.696,693.799 654.255,692.649 654.814,678.765 655.373,693.505 655.933,712.163 656.492,760.437 657.051,760.38 657.61,740.945 658.17,721.288 658.729,699.822 659.288,683.687 659.847,718.07 660.407,736.831 660.966,765.727 661.525,729.951 662.084,696.122 662.644,716.236 663.203,733.192 663.762,701.383 664.321,688.959 664.881,703.602 665.44,706.288 665.999,740.814 666.558,771.091 667.118,701.203 667.677,751.723 668.236,747.439 668.795,748.158 669.355,728.437 669.914,727.488 670.473,726.351 671.032,724.813 671.592,724.571 672.151,721.808 672.71,717.283 673.269,716.72 673.829,713.944 674.388,727.068 674.947,744.078 675.506,742.848 676.066,690.6 676.625,687.11 677.184,687.877 677.743,703.193 678.303,717.767 678.862,718.327 679.421,669.67 679.981,670.588 680.54,674.411 681.099,678.359 681.658,682.651 682.218,647.665 682.777,649.452 683.336,669.335 683.895,701.842 684.455,714.813 685.014,746.155 685.573,774.507 686.132,772.205 686.692,732.224 687.251,760.223 687.81,725.999 688.369,677.218 688.929,647.168 689.488,619.745 690.047,635.55 690.606,639.211 691.166,627.501 691.725,628.899 692.284,618.08 692.843,640.127 693.403,643.756 693.962,677.278 694.521,678.273 695.08,665.519 695.64,684.866 696.199,702.771 696.758,719.63 697.317,705.184 697.877,703.118 698.436,702.747 698.995,735.442 699.554,751.259 700.114,716.09 700.673,716.679 701.232,715.168 701.791,714.199 702.351,742.297 702.91,756.193 703.469,800.003 704.028,793.639 704.588,789.266 705.147,768.978 705.706,765.998 706.265,744.187 706.825,729.599 707.384,731.066 707.943,712.083 708.502,741.339 709.062,722.066 709.621,723.288 710.18,726.524 710.739,756.512 711.299,753.286 711.858,751.358 712.417,751.388 712.976,765.234 713.536,747.72 714.095,728.141 714.654,711.995 715.213,694.56 715.773,676.461 716.332,675.232 716.891,645.128 717.45,644.023 718.01,659.695 718.569,665.373 719.128,668.231 719.687,669.764 720.247,654.362 720.806,640.725 721.365,675.637 721.924,661.906 722.484,662.769 723.043,697.776 723.602,696.827 724.161,699.184 724.721,666.77 725.28,687.31 725.839,685.064 726.398,687.359 726.958,701.305 727.517,716.394 728.076,697.401 728.635,714.117 729.195,710.604 729.754,696.203 730.313,712.822 730.872,730.993 731.432,762.871 731.991,759.587 732.55,757.728 733.109,756.486 733.669,771.571 734.228,732.903 734.787,744.142 735.346,722.617 735.906,719.991 736.465,718.836 737.024,700.895 737.583,733.71 738.143,765.455 738.702,761.348 739.261,745.053 739.82,758.942 740.38,772.511 740.939,768.833 741.498,750.573 742.057,746.738 742.617,759.266 743.176,753.666 743.735,752.865 744.294,716.818 744.854,712.892 745.413,693.601 745.972,661.082 746.531,679.76 747.091,679.754 747.65,695.745 748.209,697.2 748.768,699.061 749.328,697.578 749.887,667.403 750.446,718.531 751.005,714.542 751.565,732.25 752.124,714.834 752.683,696.177 753.242,682.006 753.802,664.32 754.361,665.594 754.92,685.845 755.479,689.232 756.039,642.94 756.598,662.48 757.157,631.791 757.716,618.505 758.276,606.129 758.835,627.28 759.394,631.248 759.953,634.772 760.513,635.602 761.072,634.729 761.631,637.595 762.19,650.672 762.75,651.348 763.309,669.706 763.868,638.835 764.427,591.212 764.987,561.47 765.546,549.085 766.105,572.733 766.664,594.714 767.224,597.989 767.783,619.241 768.342,625.817 768.901,646.962 769.461,635.611 770.02,610.156 770.579,632.185 771.138,617.312 771.698,622.067 772.257,628.066 772.816,647.512 773.375,633.515 773.935,650.366 774.494,619.278 775.053,625.361 775.612,661.776 776.172,663.859 776.731,665.723 777.29,665.949 777.849,652.197 778.409,670.344 778.968,670.957 779.527,703.553 780.086,706.213 780.646,706.955 781.205,706.088 781.764,752.305 782.323,747.051 782.883,759.271 783.442,771.2 784.001,749.889 784.56,748.087 785.12,794.457 785.679,852.996 786.238,813.76 786.797,791.195 787.357,734.553 787.916,718.396 788.475,734.637 789.034,718.664 789.594,732.992 790.153,714.871 790.712,713.767 791.271,697.888 791.831,699.771 792.39,684.151 792.949,668.458 793.508,687.45 794.068,639.888 794.627,657.404 795.186,662.712 795.745,665.324 796.305,665.423 796.864,730.956 797.423,697.512 797.982,715.297 798.542,714.527 799.101,683.197 799.66,666.671 800.219,665.182 800.779,664.351 801.338,697.049 801.897,678.827 802.456,646.424 803.016,636.613 803.575,653.599 804.134,640.349 804.693,643.687 805.253,614.466 805.812,602.085 806.371,609.062 806.931,612.131 807.49,645.866 808.049,646.93 808.608,650.747 809.168,652.882 809.727,667.679 810.286,671.03 810.845,705.725 811.405,724.595 811.964,721.415 812.523,719.457 813.082,731.042 813.642,728.646 814.201,725.376 814.76,760.452 815.319,773.156 815.879,785.799 816.438,781.544 816.997,806.209 817.556,799.172 818.116,779.177 818.675,793.655 819.234,763.706 819.793,758.238 820.353,771.312 820.912,785.137 821.471,796.925 822.03,808.703 822.59,805.009 823.149,797.649 823.708,841.198 824.267,849.809 824.827,852.116 825.386,841.936 825.945,815.671 826.504,789.368 827.064,816.441 827.623,839.502 828.182,781.878 828.741,777.856 829.301,739.724 829.86,721.261 830.419,720.235 830.978,719.534 831.538,700.664 832.097,714.431 832.656,695.207 833.215,679.803 833.775,677.883 834.334,675.914 834.893,656.56 835.452,675.778 836.012,660.795 836.571,663.109 837.13,668.374 837.689,650.892 838.249,668.142 838.808,669.296 839.367,701.869 839.926,715.773 840.486,731.705 841.045,761.669 841.604,724.971 842.163,690.355 842.723,655.743 843.282,639.102 843.841,629.01 844.4,651.378 844.96,685.694 845.519,684.437 846.078,698.616 846.637,729.127 847.197,762.148 847.756,740.325 848.315,752.109 848.874,782.434 849.434,760.395 849.993,724.763 850.552,736.71 851.111,764.014 851.671,744.627 852.23,727.47 852.789,692.37 853.348,664.571 853.908,662.823 854.467,698.203 855.026,683.989 855.585,668.529 856.145,652.847 856.704,621.039 857.263,622.764 857.822,625.952 858.382,647.454 858.941,666.094 859.5,651.075 860.059,717.948 860.619,696.881 861.178,680.226 861.737,677.75 862.296,693.57 862.856,676.628 863.415,658.543 863.974,676.916 864.533,645.117 865.093,660.474 865.652,680.331 866.211,662.237 866.77,676.099 867.33,676.873 867.889,680.952 868.448,683.876 869.007,684.746 869.567,720.807 870.126,732.208 870.685,746.179 871.244,710.324 871.804,677.428 872.363,645.381 872.922,614.221 873.481,652.495 874.041,697.044 874.6,712.161 875.159,728.65 875.718,710.308 876.278,709.143 876.837,707.493 877.396,660.317 877.955,708.745 878.515,690.474 879.074,690.066 879.633,654.694 880.192,643.14 880.752,630.145 881.311,649.502 881.87,615.622 882.429,601.646 882.989,574.693 883.548,598.845 884.107,621.64 884.666,610.455 885.226,613.1 885.785,616.385 886.344,617.724 886.903,607.186 887.463,613.401 888.022,598.994 888.581,607.317 889.14,630.197 889.7,632.296 890.259,631.167 890.818,651.02 891.377,587.705 891.937,606.118 892.496,629.279 893.055,647.738 893.614,667.132 894.174,669.406 894.733,686.134 895.292,702.469 895.851,687.529 896.411,670.365 896.97,643.384 897.529,618.21 898.088,620.085 898.648,644.835 899.207,646.834 899.766,630.458 900.325,634.375 900.885,654.739 901.444,654.334 902.003,656.185 902.562,677.967 903.122,676.707 903.681,680.539 904.24,683.319 904.799,668.82 905.359,703.168 905.918,702.365 906.477,669.42 907.036,669.662 907.596,655.482 908.155,657.294 908.714,676.124 909.273,644.371 909.833,647.361 910.392,681.618 910.951,669.646 911.51,701.719 912.07,681.125 912.629,681.211 913.188,714.682 913.747,697.862 914.307,699.19 914.866,698.887 915.425,714.088 915.984,694.549 916.544,758.201 917.103,754.666 917.662,719.646 918.221,713.499 918.781,710.876 919.34,693.776 919.899,722.123 920.458,707.641 921.018,689.779 921.577,657.067 922.136,676.249 922.695,692.354 923.255,658.531 923.814,663.741 924.373,680.83 924.932,667.927 925.492,703.357 926.051,700.421 926.61,715.214 927.169,728.149 927.729,709.162 928.288,708.78 928.847,720.798 929.406,718.054 929.966,747.982 930.525,697.124 931.084,715.308 931.644,712.646 932.203,730.623 932.762,761.084 933.321,775.247 933.881,780.981 934.44,760.327 934.999,757.517 935.558,799.972 936.118,794.969 936.677,792.045 937.236,804.194 937.795,796.915 938.355,739.053 938.914,750.33 939.473,745.294 940.032,712.047 940.592,676.231 941.151,677.691 941.71,677.234 942.269,660.924 942.829,646.537 943.388,654.174 943.947,689.191 944.506,708.575 945.066,740.735 945.625,769.525 946.184,777.563 946.743,754.58 947.303,764.831 947.862,760.882 948.421,788.048 948.98,801.357 949.54,810.496 950.099,838.06 950.658,781.342 951.217,792.793 951.777,785.286 952.336,777.105 952.895,754.772 953.454,749.608 954.014,763.496 954.573,758.757 955.132,758.673 955.691,768.311 956.251,763.182 956.81,759.313 957.369,753.341 957.928,716.246 958.488,715.406 959.047,713.61 959.606,728.597 960.165,661.508 960.725,631.356 961.284,649.191 961.843,650.53 962.402,635.702 962.962,654.036 963.521,655.197 964.08,671.964 964.639,704.334 965.199,670.56 965.758,672.17 966.317,706.901 966.876,688.954 967.436,690.405 967.995,705.987 968.554,702.852 969.113,686.899 969.673,715.327 970.232,730.738 970.791,681.074 971.35,683.84 971.91,700.307 972.469,682.57 973.028,647.921 973.587,654.174 974.147,669.057 974.706,686.747 975.265,704.606 975.824,706.44 976.384,692.662 976.943,662.056 977.502,711.235 978.061,721.638 978.621,700.908 979.18,699.741 979.739,698.379 980.298,713.364 980.858,696.931 981.417,715.803 981.976,715.592 982.535,713.057 983.095,710.328 983.654,707.637 984.213,705.531 984.772,674.794 985.332,709.075 985.891,709.543 986.45,679.156 987.009,682.012 987.569,712.785 988.128,693.125 988.687,707.677 989.246,705.654 989.806,688.515 990.365,669.988 990.924,650.967 991.483,651.588 992.043,636.408 992.602,667.819 993.161,652.884 993.72,653.367 994.28,653.906 994.839,642.254 995.398,641.287 995.957,644.152 996.517,616.131 997.076,622.198 997.635,639.966 998.194,625.725 998.754,630.023 999.313,651.789 999.872,671.777 1000.43,673.861 1000.99,690.708 1001.55,658.489 1002.11,707.138 1002.67,690.642 1003.23,707.394 1003.79,704.266 1004.35,703.124 1004.91,721.53 1005.46,672.079 1006.02,708.529 1006.58,690.046 1007.14,704.496 1007.7,673.378 1008.26,672.357 1008.82,657.892 1009.38,673.857 1009.94,641.125 1010.5,628.026 1011.06,632.403 1011.62,651.995 1012.18,667.388 1012.73,670.562 1013.29,652.556 1013.85,653.509 1014.41,619.189 1014.97,635.056 1015.53,638.303 1016.09,638.256 1016.65,642.825 1017.21,613.716 1017.77,586.461 1018.33,592.751 1018.89,611.148 1019.45,646.769 1020.01,646.795 1020.56,646.953 1021.12,649.336 1021.68,622.84 1022.24,710.096 1022.8,695.759 1023.36,730.011 1023.92,747.273 1024.48,727.462 1025.04,722.599 1025.6,720.29 1026.16,716.057 1026.72,764.042 1027.28,760.129 1027.83,743.451 1028.39,724.705 1028.95,708.022 1029.51,722.711 1030.07,704.578 1030.63,719.426 1031.19,733.792 1031.75,687.049 1032.31,685.841 1032.87,698.217 1033.43,698.119 1033.99,728.638 1034.55,727.035 1035.1,708.789 1035.66,720.876 1036.22,733.785 1036.78,748.443 1037.34,764.782 1037.9,778.031 1038.46,769.067 1039.02,732.526 1039.58,731.311 1040.14,775.332 1040.7,770.216 1041.26,765.691 1041.82,794.172 1042.38,772.766 1042.93,758.467 1043.49,753.403 1044.05,765.74 1044.61,774.677 1045.17,769.826 1045.73,761.512 1046.29,773.223 1046.85,817.171 1047.41,791.418 1047.97,797.745 1048.53,791.717 1049.09,785.253 1049.65,780.148 1050.2,759.609 1050.76,788.123 1051.32,800.235 1051.88,775.946 1052.44,754.888 1053,750.308 1053.56,744.975 1054.12,739.134 1054.68,736.017 1055.24,717.754 1055.8,701.687 1056.36,698.813 1056.92,695.58 1057.48,664.069 1058.03,680.231 1058.59,645.89 1059.15,618.305 1059.71,637.96 1060.27,654.887 1060.83,686.982 1061.39,686.45 1061.95,640.158 1062.51,660.557 1063.07,658.791 1063.63,658.73 1064.19,657.656 1064.75,659.196 1065.3,661.334 1065.86,629.252 1066.42,631.341 1066.98,651.126 1067.54,652.791 1068.1,625.251 1068.66,627.729 1069.22,646.556 1069.78,646.2 1070.34,633.905 1070.9,654.775 1071.46,642.008 1072.02,658.359 1072.57,626.608 1073.13,646.672 1073.69,646.982 1074.25,695.374 1074.81,679.167 1075.37,649.437 1075.93,621.109 1076.49,625.767 1077.05,644.605 1077.61,616.361 1078.17,589.423 1078.73,580.944 1079.29,586.282 1079.85,590.871 1080.4,642.888 1080.96,611.747 1081.52,588.212 1082.08,579.813 1082.64,585.475 1083.2,576.418 1083.76,600.786 1084.32,604.357 1084.88,641.192 1085.44,692.118 1086,709.38 1086.56,691.572 1087.12,709.191 1087.67,695.898 1088.23,696.064 1088.79,680.123 1089.35,696.182 1089.91,727.643 1090.47,723.037 1091.03,703.416 1091.59,717.331 1092.15,747.624 1092.71,743.675 1093.27,743.623 1093.83,725.924 1094.39,704.419 1094.94,704.385 1095.5,705.777 1096.06,686.517 1096.62,685.023 1097.18,686.267 1097.74,688.042 1098.3,685.451 1098.86,664.502 1099.42,664.57 1099.98,650.66 1100.54,670.608 1101.1,637.383 1101.66,608.295 1102.22,598.042 1102.77,568.28 1103.33,541.054 1103.89,565.284 1104.45,603.369 1105.01,612.537 1105.57,600.804 1106.13,589.773 1106.69,578.852 1107.25,567.134 1107.81,572.937 1108.37,596.115 1108.93,566.828 1109.49,577.064 1110.04,584.661 1110.6,608.195 1111.16,628.389 1111.72,629.336 1112.28,632.361 1112.84,635.019 1113.4,624.869 1113.96,625.789 1114.52,643.83 1115.08,695.519 1115.64,711.669 1116.2,725.29 1116.76,740.628 1117.31,722.798 1117.87,769.109 1118.43,767.459 1118.99,733.799 1119.55,762.701 1120.11,754.734 1120.67,719.38 1121.23,702.5 1121.79,703.011 1122.35,701.847 1122.91,700.811 1123.47,682.166 1124.03,681.413 1124.59,681.187 1125.14,678.789 1125.7,663.114 1126.26,678.865 1126.82,680.572 1127.38,714.436 1127.94,710.308 1128.5,719.68 1129.06,700.609 1129.62,700.194 1130.18,700.514 1130.74,701.332 1131.3,665.45 1131.86,649.594 1132.41,667.392 1132.97,667.859 1133.53,652.752 1134.09,638.311 1134.65,624.014 1135.21,658.987 1135.77,657.335 1136.33,660.951 1136.89,676.207 1137.45,691.853 1138.01,718.636 1138.57,684.21 1139.13,668.359 1139.68,670.428 1140.24,635.255 1140.8,684.294 1141.36,700.382 1141.92,713.658 1142.48,726.479 1143.04,674.115 1143.6,656.663 1144.16,627.499 1144.72,661.139 1145.28,661.469 1145.84,648.827 1146.4,667.796 1146.96,684.003 1147.51,685.808 1148.07,701.381 1148.63,700.784 1149.19,748.713 1149.75,746.13 1150.31,728.069 1150.87,708.783 1151.43,672.963 1151.99,717.988 1152.55,748.917 1153.11,698.791 1153.67,699.216 1154.23,669.252 1154.78,653.547 1155.34,621.377 1155.9,625.178 1156.46,594.559 1157.02,631.498 1157.58,618.924 1158.14,639.097 1158.7,623.373 1159.26,614.695 1159.82,617.785 1160.38,622.24 1160.94,655.746 1161.5,690.813 1162.05,672.825 1162.61,688.699 1163.17,672.787 1163.73,737.44 1164.29,702.165 1164.85,699.005 1165.41,683.226 1165.97,683.124 1166.53,682.416 1167.09,665.341 1167.65,669.148 1168.21,621.201 1168.77,656.308 1169.33,640.804 1169.88,643.463 1170.44,645.934 1171,611.843 1171.56,603.082 1172.12,604.974 1172.68,609.511 1173.24,628.295 1173.8,632.072 1174.36,654.004 1174.92,655.308 1175.48,624.16 1176.04,594.446 1176.6,599.911 1177.15,603.301 1177.71,623.391 1178.27,642.404 1178.83,644.784 1179.39,632.39 1179.95,653.031 1180.51,638.396 1181.07,623.856 1181.63,611.647 1182.19,614.059 1182.75,650.724 1183.31,652.463 1183.87,641.025 1184.43,644.597 1184.98,663.356 1185.54,683.841 1186.1,638.717 1186.66,642.212 1187.22,645.112 1187.78,634.203 1188.34,635.03 1188.9,621.3 1189.46,641.983 1190.02,626.738 1190.58,631.135 1191.14,652.941 1191.7,654.956 1192.25,657.701 1192.81,657.897 1193.37,660.567 1193.93,675.034 1194.49,676.405 1195.05,657.279 1195.61,658.952 1196.17,675.008 1196.73,691.842 1197.29,692.922 1197.85,695.58 1198.41,678.166 1198.97,648.755 1199.52,653.288 1200.08,672.664 1200.64,687.737 1201.2,687.76 1201.76,673.923 1202.32,719.543 1202.88,702.816 1203.44,750.415 1204,715.843 1204.56,717.08 1205.12,733.614 1205.68,750.225 1206.24,746.217 1206.8,758.415 1207.35,752.068 1207.91,781.82 1208.47,746.94 1209.03,742.638 1209.59,740.701 1210.15,753.662 1210.71,750.766 1211.27,748.539 1211.83,757.833 1212.39,718.887 1212.95,717.119 1213.51,731.378 1214.07,730.929 1214.62,746.405 1215.18,741.231 1215.74,706.591 1216.3,720.644 1216.86,686.732 1217.42,701.311 1217.98,715.967 1218.54,681.571 1219.1,726.67 1219.66,726.321 1220.22,710.223 1220.78,676.858 1221.34,711.254 1221.89,728.607 1222.45,773.439 1223.01,782.787 1223.57,810.342 1224.13,802.189 1224.69,796.198 1225.25,759.611 1225.81,702.896 1226.37,747.875 1226.93,727.52 1227.49,739.728 1228.05,756.436 1228.61,770.724 1229.17,749.102 1229.72,731.478 1230.28,708.523 1230.84,706.605 1231.4,690.55 1231.96,673.724 1232.52,674.017 1233.08,639.984 1233.64,658.43 1234.2,677.086 1234.76,660.592 1235.32,743.214 1235.88,756.61 1236.44,750.624 1236.99,747.689 1237.55,715.99 1238.11,681.202 1238.67,680.821 1239.23,615.493 1239.79,649.321 1240.35,652.346 1240.91,626.081 1241.47,611.384 1242.03,601.51 1242.59,666.617 1243.15,651.539 1243.71,669.293 1244.26,669.629 1244.82,635.159 1245.38,667.054 1245.94,700.681 1246.5,702.641 1247.06,700.56 1247.62,684.581 1248.18,701.277 1248.74,715.218 1249.3,715.796 1249.86,714.816 1250.42,713.508 1250.98,759.483 1251.54,720.802 1252.09,739.206 1252.65,753.948 1253.21,751.039 1253.77,762.868 1254.33,742.084 1254.89,752.625 1255.45,764.527 1256.01,793.398 1256.57,837.687 1257.13,800.515 1257.69,794.66 1258.25,791.071 1258.81,785.172 1259.36,793.99 1259.92,820.197 1260.48,793.134 1261.04,791.744 1261.6,783.388 1262.16,796.458 1262.72,774.764 1263.28,786.465 1263.84,779.289 1264.4,741.846 1264.96,707.476 1265.52,703.209 1266.08,650.357 1266.63,637.673 1267.19,608.699 1267.75,614.178 1268.31,619.383 1268.87,637.2 1269.43,637.172 1269.99,637.8 1270.55,671.105 1271.11,624.583 1271.67,626.892 1272.23,662.381 1272.79,680.365 1273.35,664.348 1273.91,667.465 1274.46,717.777 1275.02,712.144 1275.58,709.853 1276.14,677.128 1276.7,674.856 1277.26,629.478 1277.82,637.189 1278.38,640.878 1278.94,659.334 1279.5,644.898 1280.06,630.821 1280.62,646.047 1281.18,665.699 1281.73,665.956 1282.29,615.304 1282.85,618.86 1283.41,624.285 1283.97,611.699 1284.53,598.494 1285.09,618.746 1285.65,650.599 1286.21,652.233 1286.77,634.39 1287.33,652.255 1287.89,641.621 1288.45,676.229 1289,694.164 1289.56,690.485 1290.12,690.446 1290.68,707.796 1291.24,703.523 1291.8,716.487 1292.36,716.432 1292.92,682.288 1293.48,680.973 1294.04,695.481 1294.6,721.089 1295.16,655.326 1295.72,688.052 1296.28,688.515 1296.83,672.159 1297.39,655.708 1297.95,644.936 1298.51,647.206 1299.07,634.643 1299.63,636.06 1300.19,656.973 1300.75,640.788 1301.31,613.106 1301.87,634.403 1302.43,638.38 1302.99,641.86 1303.55,613.152 1304.1,618.907 1304.66,640.788 1305.22,658.361 1305.78,691.182 1306.34,674.374 1306.9,694.924 1307.46,696.266 1308.02,697.562 1308.58,727.723 1309.14,710.261 1309.7,722.484 1310.26,687.427 1310.82,685.515 1311.38,719.194 1311.93,748.76 1312.49,731.378 1313.05,713.361 1313.61,727.934 1314.17,726.869 1314.73,725.711 1315.29,704.857 1315.85,703.449 1316.41,718.704 1316.97,700.886 1317.53,712.518 1318.09,675.934 1318.65,681.674 1319.2,701.409 1319.76,698.738 1320.32,718.116 1320.88,719.107 1321.44,716.392 1322,711.932 1322.56,691.087 1323.12,707.293 1323.68,657.292 1324.24,707.219 1324.8,684.538 1325.36,668.327 1325.92,667.2 1326.47,648.722 1327.03,648.659 1327.59,665.921 1328.15,682.488 1328.71,682.527 1329.27,714.486 1329.83,731.637 1330.39,715.012 1330.95,730.936 1331.51,727.515 1332.07,741.302 1332.63,721.93 1333.19,722.116 1333.75,737.675 1334.3,736.319 1334.86,736.876 1335.42,749.892 1335.98,727.066 1336.54,724.462 1337.1,722.667 1337.66,719.766 1338.22,718.314 1338.78,686.262 1339.34,671.979 1339.9,670.751 1340.46,702.752 1341.02,718.108 1341.57,715.998 1342.13,728.126 1342.69,710.978 1343.25,708.607 1343.81,726.9 1344.37,725.592 1344.93,736.901 1345.49,734.765 1346.05,733.827 1346.61,732.461 1347.17,746.314 1347.73,774.462 1348.29,798.258 1348.84,742.063 1349.4,723.142 1349.96,722.92 1350.52,686.676 1351.08,672.905 1351.64,657.367 1352.2,662.954 1352.76,682.223 1353.32,684.419 1353.88,685.576 1354.44,684.596 1355,684.671 1355.56,716.107 1356.12,711.143 1356.67,757.694 1357.23,734.715 1357.79,749.266 1358.35,747.3 1358.91,744.6 1359.47,711.195 1360.03,726.863 1360.59,724.065 1361.15,723.404 1361.71,702.881 1362.27,684.72 1362.83,667.2 1363.39,635.946 1363.94,640.832 1364.5,627.426 1365.06,629.243 1365.62,618.199 1366.18,605.081 1366.74,607.65 1367.3,626.832 1367.86,609.687 1368.42,597.256 1368.98,618.042 1369.54,619.894 1370.1,621.39 1370.66,595.631 1371.21,599.124 1371.77,601.585 1372.33,572.98 1372.89,579.776 1373.45,615.27 1374.01,635.074 1374.57,652.785 1375.13,671.284 1375.69,687.052 1376.25,722.513 1376.81,755.268 1377.37,751.55 1377.93,747.148 1378.49,760.922 1379.04,771.89 1379.6,767.741 1380.16,747.33 1380.72,732.565 1381.28,679.075 1381.84,729.059 1382.4,712.864 1382.96,681.026 1383.52,710.607 1384.08,710.622 1384.64,710.137 1385.2,708.16 1385.76,709.904 1386.31,646.362 1386.87,663.678 1387.43,649.69 1387.99,670.313 1388.55,704.573 1389.11,672.032 1389.67,671.269 1390.23,653.338 1390.79,623.282 1391.35,642.019 1391.91,600.436 1392.47,607.542 1393.03,612.719 1393.58,620.169 1394.14,625.677 1394.7,628.903 1395.26,614.467 1395.82,651.098 1396.38,668.574 1396.94,635.782 1397.5,640.242 1398.06,642.769 1398.62,660.268 1399.18,663.145 1399.74,613.536 1400.3,584.733 1400.86,573.326 1401.41,597.501 1401.97,587.448 1402.53,540.597 1403.09,551.75 1403.65,545.747 1404.21,549.786 1404.77,538.238 1405.33,546.655 1405.89,553.034 1406.45,576.968 1407.01,597.883 1407.57,604.942 1408.13,580.11 1408.68,585.264 1409.24,586.535 1409.8,608.55 1410.36,648.796 1410.92,636.328 1411.48,623.125 1412.04,577.323 1412.6,585.508 1413.16,593.649 1413.72,601.834 1414.28,588.742 1414.84,592.251 1415.4,596.385 1415.95,588.899 1416.51,547.238 1417.07,574.277 1417.63,580.732 1418.19,638.84 1418.75,654.995 1419.31,723.537 1419.87,705.623 1420.43,671.013 1420.99,653.491 1421.55,671.259 1422.11,656.705 1422.67,675.999 1423.23,673.842 1423.78,661.497 1424.34,666.346 1424.9,703.019 1425.46,736.863 1426.02,770.008 1426.58,779.42 1427.14,775.028 1427.7,768.362 1428.26,744.168 1428.82,724.602 1429.38,707.066 1429.94,702.305 1430.5,701.728 1431.05,682.255 1431.61,711.976 1432.17,724.183 1432.73,708.917 1433.29,689.159 1433.85,689.769 1434.41,704.622 1434.97,740.367 1435.53,750.076 1436.09,731.106 1436.65,726.453 1437.21,740.896 1437.77,771.137 1438.33,785.495 1438.88,762.173 1439.44,740.234 1440,735.857 1440.56,751.119 1441.12,766.964 1441.68,681.321 1442.24,665.8 1442.8,668.345 1443.36,667.729 1443.92,685.874 1444.48,667.845 1445.04,667.255 1445.6,669.976 1446.15,721.948 1446.71,737.893 1447.27,749.64 1447.83,746.162 1448.39,742.77 1448.95,734.509 1449.51,711.762 1450.07,690.649 1450.63,689.711 1451.19,672.305 1451.75,721.881 1452.31,687.235 1452.87,684.317 1453.42,668.661 1453.98,684.064 1454.54,701.682 1455.1,704.945 1455.66,705.374 1456.22,717.431 1456.78,710.741 1457.34,690.323 1457.9,679.292 1458.46,677.639 1459.02,680.531 1459.58,629.555 1460.14,632.284 1460.7,632.34 1461.25,630.905 1461.81,633.947 1462.37,684.456 1462.93,682.127 1463.49,680.459 1464.05,679.261 1464.61,680.34 1465.17,663.01 1465.73,634.061 1466.29,622.851 1466.85,628.749 1467.41,614.975 1467.97,649.518 1468.52,651.227 1469.08,685.588 1469.64,700.817 1470.2,701.324 1470.76,685.692 1471.32,682.059 1471.88,695.699 1472.44,694.576 1473,709.429 1473.56,724.018 1474.12,739.633 1474.68,755.562 1475.24,768.565 1475.79,759.15 1476.35,740.722 1476.91,704.265 1477.47,668.204 1478.03,687.252 1478.59,668.685 1479.15,665.426 1479.71,631.497 1480.27,650.514 1480.83,671.047 1481.39,704.455 1481.95,734.368 1482.51,732.098 1483.07,745.687 1483.62,759.121 1484.18,772.235 1484.74,785.431 1485.3,766.261 1485.86,761.196 1486.42,740.331 1486.98,702.313 1487.54,719.676 1488.1,683.63 1488.66,636.239 1489.22,656.935 1489.78,675.926 1490.34,676.066 1490.89,676.286 1491.45,706.454 1492.01,741.756 1492.57,725.907 1493.13,710.077 1493.69,706.776 1494.25,704.151 1494.81,689.679 1495.37,669.405 1495.93,668.037 1496.49,686.286 1497.05,686.338 1497.61,703.53 1498.16,703.955 1498.72,717.731 1499.28,685.317 1499.84,703.505 1500.4,688.095 1500.96,706.084 1501.52,720.355 1502.08,719.521 1502.64,699.173 1503.2,717.771 1503.76,697.885 1504.32,651.72 1504.88,671.345 1505.44,671.95 1505.99,625.136 1506.55,627.677 1507.11,615.771 1507.67,585.67 1508.23,590.534 1508.79,607.691 1509.35,626.628 1509.91,630.862 1510.47,634.72 1511.03,655.159 1511.59,641.996 1512.15,642.93 1512.71,631.345 1513.26,615.945 1513.82,587.796 1514.38,591.467 1514.94,579.747 1515.5,587.342 1516.06,594.364 1516.62,597.134 1517.18,569.614 1517.74,623.236 1518.3,609.51 1518.86,632.589 1519.42,650.189 1519.98,683.356 1520.53,684.281 1521.09,667.921 1521.65,682.013 1522.21,700.084 1522.77,682.706 1523.33,666.144 1523.89,717.189 1524.45,743.959 1525.01,790.47 1525.57,768.936 1526.13,765.247 1526.69,776.757 1527.25,756.917 1527.81,836.794 1528.36,795.228 1528.92,805.896 1529.48,753.123 1530.04,751.384 1530.6,717.772 1531.16,699.96 1531.72,699.372 1532.28,715.998 1532.84,714.103 1533.4,713.949 1533.96,746.34 1534.52,709.212 1535.08,679.323 1535.63,648.84 1536.19,654.694 1536.75,703.911 1537.31,686.439 1537.87,654.814 1538.43,640.48 1538.99,644.54 1539.55,627.579 1540.11,631.186 1540.67,646.915 1541.23,633.544 1541.79,636.078 1542.35,638.295 1542.9,606.061 1543.46,611.235 1544.02,616.917 1544.58,605.451 1545.14,612.354 1545.7,614.244 1546.26,613.838 1546.82,632.443 1547.38,634.794 1547.94,641.44 1548.5,624.994 1549.06,627.926 1549.62,595.934 1550.18,633.185 1550.73,669.633 1551.29,651.687 1551.85,669.789 1552.41,652.576 1552.97,688.611 1553.53,721.241 1554.09,721.937 1554.65,702.241 1555.21,700.74 1555.77,715.599 1556.33,761.7 1556.89,803.84 1557.45,798.121 1558,806.682 1558.56,767.535 1559.12,746.984 1559.68,740.836 1560.24,771.471 1560.8,780.122 1561.36,740.775 1561.92,722.082 1562.48,751.712 1563.04,764.147 1563.6,756.954 1564.16,751.757 1564.72,785.464 1565.28,768.169 1565.83,747.017 1566.39,723.913 1566.95,741.088 1567.51,724.298 1568.07,739.527 1568.63,720.548 1569.19,719.836 1569.75,734.335 1570.31,745.305 1570.87,699.248 1571.43,696.379 1571.99,650.737 1572.55,636.262 1573.1,621.765 1573.66,656.045 1574.22,675.353 1574.78,679.377 1575.34,712.069 1575.9,708.336 1576.46,690.573 1577.02,674.551 1577.58,658.952 1578.14,626.373 1578.7,646.668 1579.26,615.378 1579.82,618.045 1580.37,624.303 1580.93,630.344 1581.49,616.251 1582.05,651 1582.61,652.861 1583.17,670.004 1583.73,654.941 1584.29,651.712 1584.85,636.973 1585.41,645.979 1585.97,651.308 1586.53,667.854 1587.09,698.977 1587.65,699.24 1588.2,681.145 1588.76,666.936 1589.32,636.576 1589.88,657.127 1590.44,644.143 1591,631.72 1591.56,616.55 1592.12,605.276 1592.68,608.264 1593.24,612.583 1593.8,598.457 1594.36,637.949 1594.92,637.866 1595.47,624.879 1596.03,645.182 1596.59,616.802 1597.15,619.603 1597.71,622.583 1598.27,642.723 1598.83,658.868 1599.39,676.044 1599.95,662.913 1600.51,679.19 1601.07,682.067 1601.63,711.682 1602.19,726.457 1602.74,758.279 1603.3,753.795 1603.86,783.522 1604.42,744.709 1604.98,740.945 1605.54,754.444 1606.1,749.693 1606.66,762.242 1607.22,756.23 1607.78,749.285 1608.34,745.793 1608.9,728.484 1609.46,724.994 1610.02,721.452 1610.57,719.818 1611.13,715.179 1611.69,698.217 1612.25,678.59 1612.81,664.114 1613.37,679.879 1613.93,696.437 1614.49,663.604 1615.05,665.707 1615.61,632.525 1616.17,618.944 1616.73,620.635 1617.29,623.157 1617.84,624.565 1618.4,644.331 1618.96,660.459 1619.52,675.514 1620.08,690.958 1620.64,688.47 1621.2,702.794 1621.76,702.692 1622.32,699.476 1622.88,694.761 1623.44,675.923 1624,663.561 1624.56,666.248 1625.11,633.586 1625.67,638.384 1626.23,655.933 1626.79,655.389 1627.35,657.724 1627.91,677.909 1628.47,678.366 1629.03,678.636 1629.59,692.862 1630.15,657.137 1630.71,643.226 1631.27,677.25 1631.83,645.315 1632.39,633.127 1632.94,620.237 1633.5,642.209 1634.06,624.607 1634.62,628.465 1635.18,647.721 1635.74,649.891 1636.3,616.413 1636.86,619.708 1637.42,638.087 1637.98,645.275 1638.54,629.668 1639.1,616.499 1639.66,634.303 1640.21,639.149 1640.77,638.934 1641.33,656.917 1641.89,641.086 1642.45,661.684 1643.01,696.197 1643.57,696.506 1644.13,681.07 1644.69,716.711 1645.25,731.691 1645.81,727.087 1646.37,704.325 1646.93,721.98 1647.48,736.224 1648.04,732.088 1648.6,761.826 1649.16,757.855 1649.72,734.109 1650.28,729.04 1650.84,741.227 1651.4,737.3 1651.96,736.808 1652.52,721.082 1653.08,704.713 1653.64,716.631 1654.2,696.929 1654.76,713.115 1655.31,699.866 1655.87,665.303 1656.43,669.977 1656.99,702.877 1657.55,700.745 1658.11,700.867 1658.67,686.444 1659.23,701.6 1659.79,712.15 1660.35,712.902 1660.91,660.734 1661.47,663.599 1662.03,667.601 1662.58,636.83 1663.14,655.477 1663.7,686.023 1664.26,669.823 1664.82,672.68 1665.38,624.132 1665.94,614.252 1666.5,621.06 1667.06,594.936 1667.62,651.765 1668.18,654.004 1668.74,659.527 1669.3,645.592 1669.85,645.694 1670.41,648.151 1670.97,652.609 1671.53,671.119 1672.09,652.445 1672.65,634.099 1673.21,686.806 1673.77,650.545 1674.33,652.365 1674.89,633.017 1675.45,683.273 1676.01,682.364 1676.57,701.447 1677.13,715.245 1677.68,695.907 1678.24,708.638 1678.8,691.961 1679.36,690.128 1679.92,671.82 1680.48,674.405 1681.04,671.527 1681.6,668.579 1682.16,667.465 1682.72,668.303 1683.28,656.516 1683.84,606.879 1684.4,611.135 1684.95,613.846 1685.51,618.974 1686.07,607.316 1686.63,609.878 1687.19,610.985 1687.75,580.671 1688.31,620.574 1688.87,639.021 1689.43,640.577 1689.99,646.107 1690.55,646.681 1691.11,631.809 1691.67,618.118 1692.23,604.611 1692.78,608.99 1693.34,577.87 1693.9,601.947 1694.46,642.115 1695.02,675.785 1695.58,658.525 1696.14,711.399 1696.7,742.636 1697.26,760.667 1697.82,774.795 1698.38,737.084 1698.94,721.274 1699.5,720.036 1700.05,738.119 1700.61,734.527 1701.17,762.137 1701.73,743.292 1702.29,754.735 1702.85,751.564 1703.41,778.904 1703.97,802.664 1704.53,811.155 1705.09,790.124 1705.65,802.723 1706.21,797.85 1706.77,806.244 1707.32,814.442 1707.88,789.351 1708.44,788.057 1709,812.36 1709.56,787.595 1710.12,765.856 1710.68,790.49 1711.24,800.799 1711.8,777.323 1712.36,773.017 1712.92,781.885 1713.48,764.014 1714.04,741.336 1714.6,726.044 1715.15,724.917 1715.71,724.226 1716.27,722.36 1716.83,732.027 1717.39,711.162 1717.95,742.733 1718.51,724.675 1719.07,672.527 1719.63,706.805 1720.19,725.986 1720.75,739.144 1721.31,787.518 1721.87,783.224 1722.42,792.641 1722.98,751.52 1723.54,764.16 1724.1,758.985 1724.66,735.441 1725.22,714.279 1725.78,716.272 1726.34,729.415 1726.9,726.163 1727.46,720.737 1728.02,719.265 1728.58,734.637 1729.14,730.691 1729.69,727.969 1730.25,742.078 1730.81,752.065 1731.37,732.606 1731.93,733.062 1732.49,748.66 1733.05,747.998 1733.61,759.916 1734.17,722.093 1734.73,719.873 1735.29,746.834 1735.85,744.238 1736.41,707.483 1736.97,709.085 1737.52,726.157 1738.08,741.042 1738.64,737.48 1739.2,733.482 1739.76,760.622 1740.32,722.252 1740.88,702.055 1741.44,687.646 1742,701.154 1742.56,684.78 1743.12,734.083 1743.68,731.618 1744.24,711.984 1744.79,695.236 1745.35,696.765 1745.91,694.931 1746.47,692.478 1747.03,706.839 1747.59,704.428 1748.15,672.558 1748.71,676.826 1749.27,675.955 1749.83,721.36 1750.39,718.1 1750.95,716.486 1751.51,746.253 1752.06,760.423 1752.62,739.974 1753.18,738.221 1753.74,706.614 1754.3,709.703 1754.86,707.607 1755.42,686.714 1755.98,721.326 1756.54,746.074 1757.1,740.07 1757.66,737.265 1758.22,750.452 1758.78,746.714 1759.34,742.417 1759.89,722.942 1760.45,719.789 1761.01,684.938 1761.57,653.574 1762.13,654.423 1762.69,655.652 1763.25,673.011 1763.81,674.399 1764.37,693.052 1764.93,663.634 1765.49,614.183 1766.05,572.404 1766.61,579.666 1767.16,585.007 1767.72,627.691 1768.28,662.366 1768.84,645.994 1769.4,653.517 1769.96,670.374 1770.52,652.378 1771.08,660.278 1771.64,661.119 1772.2,663.888 1772.76,646.035 1773.32,681.734 1773.88,678.426 1774.43,666.211 1774.99,668.769 1775.55,671.415 1776.11,670.286 1776.67,650.126 1777.23,666.415 1777.79,651.045 1778.35,637.302 1778.91,621.846 1779.47,640.522 1780.03,690.864 1780.59,690.838 1781.15,626.104 1781.71,628.46 1782.26,631.01 1782.82,635.948 1783.38,620.787 1783.94,608.415 1784.5,625.173 1785.06,613.159 1785.62,601.926 1786.18,606.572 1786.74,611.693 1787.3,567.609 1787.86,589.922 1788.42,580.469 1788.98,619.49 1789.53,623.978 1790.09,596.124 1790.65,604.356 1791.21,627.245 1791.77,646.933 1792.33,711.132 1792.89,723.007 1793.45,738.899 1794.01,736.552 1794.57,748.827 1795.13,780.376 1795.69,726.203 1796.25,705.896 1796.8,704.759 1797.36,689.515 1797.92,708.442 1798.48,707.068 1799.04,743.032 1799.6,742.255 1800.16,756.962 1800.72,717.811 1801.28,700.797 1801.84,698.019 1802.4,696.138 1802.96,678.028 1803.52,739.264 1804.08,720.781 1804.63,738.525 1805.19,721.175 1805.75,735.889 1806.31,735.736 1806.87,733.275 1807.43,718.614 1807.99,684.953 1808.55,652.448 1809.11,636.759 1809.67,640.16 1810.23,673.238 1810.79,659.915 1811.35,663.012 1811.9,681.524 1812.46,732.266 1813.02,762.741 1813.58,739.107 1814.14,733.676 1814.7,717.263 1815.26,734.388 1815.82,732.862 1816.38,663.664 1816.94,663.617 1817.5,631.257 1818.06,633.575 1818.62,602.332 1819.18,591.53 1819.73,562.601 1820.29,585.425 1820.85,589.143 1821.41,598.197 1821.97,601.209 1822.53,588.706 1823.09,577.851 1823.65,581.573 1824.21,604.555 1824.77,627.229 1825.33,644.586 1825.89,646.81 1826.45,678.609 1827,713.16 1827.56,724.371 1828.12,725.297 1828.68,706.567 1829.24,688.67 1829.8,690.936 1830.36,689.735 1830.92,673.59 1831.48,705.504 1832.04,721.28 1832.6,735.587 1833.16,752.61 1833.72,731.072 1834.27,775.439 1834.83,787.917 1835.39,782.886 1835.95,791.484 1836.51,787.338 1837.07,733.527 1837.63,763.825 1838.19,775.34 \"/>\n<path clip-path=\"url(#clip013)\" d=\"M720.247 691.848 L720.806 691.848 L721.365 691.848 L721.924 691.848 L722.484 691.848 L723.043 691.848 L723.602 691.848 L724.161 691.848 L724.721 691.848 L725.28 691.848 L725.839 691.848 L726.398 691.848 L726.958 691.848 L727.517 691.848 L728.076 691.848 L728.635 691.848 L729.195 691.848 L729.754 691.848 L730.313 691.848 L730.872 691.848 L731.432 691.848 L731.991 691.848 L732.55 691.848 L733.109 691.848 L733.669 691.848 L734.228 691.848 L734.787 691.848 L735.346 691.848 L735.906 691.848 L736.465 691.848 L737.024 691.848 L737.583 691.848 L738.143 691.848 L738.702 691.848 L739.261 691.848 L739.82 691.848 L740.38 691.848 L740.939 691.848 L741.498 691.848 L742.057 691.848 L742.617 691.848 L743.176 691.848 L743.735 691.848 L744.294 691.848 L744.854 691.848 L745.413 691.848 L745.972 691.848 L746.531 691.848 L747.091 691.848 L747.65 691.848 L748.209 691.848 L748.768 691.848 L749.328 691.848 L749.887 691.848 L750.446 691.848 L751.005 691.848 L751.565 691.848 L752.124 691.848 L752.683 691.848 L753.242 691.848 L753.802 691.848 L754.361 691.848 L754.92 691.848 L755.479 691.848 L756.039 691.848 L756.598 691.848 L757.157 691.848 L757.716 691.848 L758.276 691.848 L758.835 691.848 L759.394 691.848 L759.953 691.848 L760.513 691.848 L761.072 691.848 L761.631 691.848 L762.19 691.848 L762.75 691.848 L763.309 691.848 L763.868 691.848 L764.427 691.848 L764.987 691.848 L765.546 691.848 L766.105 691.848 L766.664 691.848 L767.224 691.848 L767.783 691.848 L768.342 691.848 L768.901 691.848 L769.461 691.848 L770.02 691.848 L770.579 691.848 L771.138 691.848 L771.698 691.848 L772.257 691.848 L772.816 691.848 L773.375 691.848 L773.935 691.848 L774.494 691.848 L775.053 691.848 L775.612 691.848 L776.172 691.848 L776.731 691.848 L777.29 691.848 L777.849 691.848 L778.409 691.848 L778.968 691.848 L779.527 691.848 L780.086 691.848 L780.646 691.848 L781.205 691.848 L781.764 691.848 L782.323 691.848 L782.883 691.848 L783.442 691.848 L784.001 691.848 L784.56 691.848 L785.12 691.848 L785.679 691.848 L786.238 691.848 L786.797 691.848 L787.357 691.848 L787.916 691.848 L788.475 691.848 L789.034 691.848 L789.594 691.848 L790.153 691.848 L790.712 691.848 L791.271 691.848 L791.831 691.848 L792.39 691.848 L792.949 691.848 L793.508 691.848 L794.068 691.848 L794.627 691.848 L795.186 691.848 L795.745 691.848 L796.305 691.848 L796.864 691.848 L797.423 691.848 L797.982 691.848 L798.542 691.848 L799.101 691.848 L799.66 691.848 L800.219 691.848 L800.779 691.848 L801.338 691.848 L801.897 691.848 L802.456 691.848 L803.016 691.848 L803.575 691.848 L804.134 691.848 L804.693 691.848 L805.253 691.848 L805.812 691.848 L806.371 691.848 L806.931 691.848 L807.49 691.848 L808.049 691.848 L808.608 691.848 L809.168 691.848 L809.727 691.848 L810.286 691.848 L810.845 691.848 L811.405 691.848 L811.964 691.848 L812.523 691.848 L813.082 691.848 L813.642 691.848 L814.201 691.848 L814.76 691.848 L815.319 691.848 L815.879 691.848 L816.438 691.848 L816.997 691.848 L817.556 691.848 L818.116 691.848 L818.675 691.848 L819.234 691.848 L819.793 691.848 L820.353 691.848 L820.912 691.848 L821.471 691.848 L822.03 691.848 L822.59 691.848 L823.149 691.848 L823.708 691.848 L824.267 691.848 L824.827 691.848 L825.386 691.848 L825.945 691.848 L826.504 691.848 L827.064 691.848 L827.623 691.848 L828.182 691.848 L828.741 691.848 L829.301 691.848 L829.86 691.848 L830.419 691.848 L830.978 691.848 L831.538 691.848 L832.097 691.848 L832.656 691.848 L833.215 691.848 L833.775 691.848 L834.334 691.848 L834.893 691.848 L835.452 691.848 L836.012 691.848 L836.571 691.848 L837.13 691.848 L837.689 691.848 L838.249 691.848 L838.808 691.848 L839.367 691.848 L839.926 691.848 L840.486 691.848 L841.045 691.848 L841.604 691.848 L842.163 691.848 L842.723 691.848 L843.282 691.848 L843.841 691.848 L844.4 691.848 L844.96 691.848 L845.519 691.848 L846.078 691.848 L846.637 691.848 L847.197 691.848 L847.756 691.848 L848.315 691.848 L848.874 691.848 L849.434 691.848 L849.993 691.848 L850.552 691.848 L851.111 691.848 L851.671 691.848 L852.23 691.848 L852.789 691.848 L853.348 691.848 L853.908 691.848 L854.467 691.848 L855.026 691.848 L855.585 691.848 L856.145 691.848 L856.704 691.848 L857.263 691.848 L857.822 691.848 L858.382 691.848 L858.941 691.848 L859.5 691.848 L860.059 691.848 L860.619 691.848 L861.178 691.848 L861.737 691.848 L862.296 691.848 L862.856 691.848 L863.415 691.848 L863.974 691.848 L864.533 691.848 L865.093 691.848 L865.652 691.848 L866.211 691.848 L866.77 691.848 L867.33 691.848 L867.889 691.848 L868.448 691.848 L869.007 691.848 L869.567 691.848 L870.126 691.848 L870.685 691.848 L871.244 691.848 L871.804 691.848 L872.363 691.848 L872.922 691.848 L873.481 691.848 L874.041 691.848 L874.6 691.848 L875.159 691.848 L875.718 691.848 L876.278 691.848 L876.837 691.848 L877.396 691.848 L877.955 691.848 L878.515 691.848 L879.074 691.848 L879.633 691.848 L880.192 691.848 L880.752 691.848 L881.311 691.848 L881.87 691.848 L882.429 691.848 L882.989 691.848 L883.548 691.848 L884.107 691.848 L884.666 691.848 L885.226 691.848 L885.785 691.848 L886.344 691.848 L886.903 691.848 L887.463 691.848 L888.022 691.848 L888.581 691.848 L889.14 691.848 L889.7 691.848 L890.259 691.848 L890.818 691.848 L891.377 691.848 L891.937 691.848 L892.496 691.848 L893.055 691.848 L893.614 691.848 L894.174 691.848 L894.733 691.848 L895.292 691.848 L895.851 691.848 L896.411 691.848 L896.97 691.848 L897.529 691.848 L898.088 691.848 L898.648 691.848 L899.207 691.848 L899.766 691.848 L900.325 691.848 L900.885 691.848 L901.444 691.848 L902.003 691.848 L902.562 691.848 L903.122 691.848 L903.681 691.848 L904.24 691.848 L904.799 691.848 L905.359 691.848 L905.918 691.848 L906.477 691.848 L907.036 691.848 L907.596 691.848 L908.155 691.848 L908.714 691.848 L909.273 691.848 L909.833 691.848 L910.392 691.848 L910.951 691.848 L911.51 691.848 L912.07 691.848 L912.629 691.848 L913.188 691.848 L913.747 691.848 L914.307 691.848 L914.866 691.848 L915.425 691.848 L915.984 691.848 L916.544 691.848 L917.103 691.848 L917.662 691.848 L918.221 691.848 L918.781 691.848 L919.34 691.848 L919.899 691.848 L920.458 691.848 L921.018 691.848 L921.577 691.848 L922.136 691.848 L922.695 691.848 L923.255 691.848 L923.814 691.848 L924.373 691.848 L924.932 691.848 L925.492 691.848 L926.051 691.848 L926.61 691.848 L927.169 691.848 L927.729 691.848 L928.288 691.848 L928.847 691.848 L929.406 691.848 L929.966 691.848 L930.525 691.848 L931.084 691.848 L931.644 691.848 L932.203 691.848 L932.762 691.848 L933.321 691.848 L933.881 691.848 L934.44 691.848 L934.999 691.848 L935.558 691.848 L936.118 691.848 L936.677 691.848 L937.236 691.848 L937.795 691.848 L938.355 691.848 L938.914 691.848 L939.473 691.848 L940.032 691.848 L940.592 691.848 L941.151 691.848 L941.71 691.848 L942.269 691.848 L942.829 691.848 L943.388 691.848 L943.947 691.848 L944.506 691.848 L945.066 691.848 L945.625 691.848 L946.184 691.848 L946.743 691.848 L947.303 691.848 L947.862 691.848 L948.421 691.848 L948.98 691.848 L949.54 691.848 L950.099 691.848 L950.658 691.848 L951.217 691.848 L951.777 691.848 L952.336 691.848 L952.895 691.848 L953.454 691.848 L954.014 691.848 L954.573 691.848 L955.132 691.848 L955.691 691.848 L956.251 691.848 L956.81 691.848 L957.369 691.848 L957.928 691.848 L958.488 691.848 L959.047 691.848 L959.606 691.848 L960.165 691.848 L960.725 691.848 L961.284 691.848 L961.843 691.848 L962.402 691.848 L962.962 691.848 L963.521 691.848 L964.08 691.848 L964.639 691.848 L965.199 691.848 L965.758 691.848 L966.317 691.848 L966.876 691.848 L967.436 691.848 L967.995 691.848 L968.554 691.848 L969.113 691.848 L969.673 691.848 L970.232 691.848 L970.791 691.848 L971.35 691.848 L971.91 691.848 L972.469 691.848 L973.028 691.848 L973.587 691.848 L974.147 691.848 L974.706 691.848 L975.265 691.848 L975.824 691.848 L976.384 691.848 L976.943 691.848 L977.502 691.848 L978.061 691.848 L978.621 691.848 L979.18 691.848 L979.739 691.848 L980.298 691.848 L980.858 691.848 L981.417 691.848 L981.976 691.848 L982.535 691.848 L983.095 691.848 L983.654 691.848 L984.213 691.848 L984.772 691.848 L985.332 691.848 L985.891 691.848 L986.45 691.848 L987.009 691.848 L987.569 691.848 L988.128 691.848 L988.687 691.848 L989.246 691.848 L989.806 691.848 L990.365 691.848 L990.924 691.848 L991.483 691.848 L992.043 691.848 L992.602 691.848 L993.161 691.848 L993.72 691.848 L994.28 691.848 L994.839 691.848 L995.398 691.848 L995.957 691.848 L996.517 691.848 L997.076 691.848 L997.635 691.848 L998.194 691.848 L998.754 691.848 L999.313 691.848 L999.872 691.848 L1000.43 691.848 L1000.99 691.848 L1001.55 691.848 L1002.11 691.848 L1002.67 691.848 L1003.23 691.848 L1003.79 691.848 L1004.35 691.848 L1004.91 691.848 L1005.46 691.848 L1006.02 691.848 L1006.58 691.848 L1007.14 691.848 L1007.7 691.848 L1008.26 691.848 L1008.82 691.848 L1009.38 691.848 L1009.94 691.848 L1010.5 691.848 L1011.06 691.848 L1011.62 691.848 L1012.18 691.848 L1012.73 691.848 L1013.29 691.848 L1013.85 691.848 L1014.41 691.848 L1014.97 691.848 L1015.53 691.848 L1016.09 691.848 L1016.65 691.848 L1017.21 691.848 L1017.77 691.848 L1018.33 691.848 L1018.89 691.848 L1019.45 691.848 L1020.01 691.848 L1020.56 691.848 L1021.12 691.848 L1021.68 691.848 L1022.24 691.848 L1022.8 691.848 L1023.36 691.848 L1023.92 691.848 L1024.48 691.848 L1025.04 691.848 L1025.6 691.848 L1026.16 691.848 L1026.72 691.848 L1027.28 691.848 L1027.83 691.848 L1028.39 691.848 L1028.95 691.848 L1029.51 691.848 L1030.07 691.848 L1030.63 691.848 L1031.19 691.848 L1031.75 691.848 L1032.31 691.848 L1032.87 691.848 L1033.43 691.848 L1033.99 691.848 L1034.55 691.848 L1035.1 691.848 L1035.66 691.848 L1036.22 691.848 L1036.78 691.848 L1037.34 691.848 L1037.9 691.848 L1038.46 691.848 L1039.02 691.848 L1039.58 691.848 L1040.14 691.848 L1040.7 691.848 L1041.26 691.848 L1041.82 691.848 L1042.38 691.848 L1042.93 691.848 L1043.49 691.848 L1044.05 691.848 L1044.61 691.848 L1045.17 691.848 L1045.73 691.848 L1046.29 691.848 L1046.85 691.848 L1047.41 691.848 L1047.97 691.848 L1048.53 691.848 L1049.09 691.848 L1049.65 691.848 L1050.2 691.848 L1050.76 691.848 L1051.32 691.848 L1051.88 691.848 L1052.44 691.848 L1053 691.848 L1053.56 691.848 L1054.12 691.848 L1054.68 691.848 L1055.24 691.848 L1055.8 691.848 L1056.36 691.848 L1056.92 691.848 L1057.48 691.848 L1058.03 691.848 L1058.59 691.848 L1059.15 691.848 L1059.71 691.848 L1060.27 691.848 L1060.83 691.848 L1061.39 691.848 L1061.95 691.848 L1062.51 691.848 L1063.07 691.848 L1063.63 691.848 L1064.19 691.848 L1064.75 691.848 L1065.3 691.848 L1065.86 691.848 L1066.42 691.848 L1066.98 691.848 L1067.54 691.848 L1068.1 691.848 L1068.66 691.848 L1069.22 691.848 L1069.78 691.848 L1070.34 691.848 L1070.9 691.848 L1071.46 691.848 L1072.02 691.848 L1072.57 691.848 L1073.13 691.848 L1073.69 691.848 L1074.25 691.848 L1074.81 691.848 L1075.37 691.848 L1075.93 691.848 L1076.49 691.848 L1077.05 691.848 L1077.61 691.848 L1078.17 691.848 L1078.73 691.848 L1079.29 691.848 L1079.85 691.848 L1080.4 691.848 L1080.96 691.848 L1081.52 691.848 L1082.08 691.848 L1082.64 691.848 L1083.2 691.848 L1083.76 691.848 L1084.32 691.848 L1084.88 691.848 L1085.44 691.848 L1086 691.848 L1086.56 691.848 L1087.12 691.848 L1087.67 691.848 L1088.23 691.848 L1088.79 691.848 L1089.35 691.848 L1089.91 691.848 L1090.47 691.848 L1091.03 691.848 L1091.59 691.848 L1092.15 691.848 L1092.71 691.848 L1093.27 691.848 L1093.83 691.848 L1094.39 691.848 L1094.94 691.848 L1095.5 691.848 L1096.06 691.848 L1096.62 691.848 L1097.18 691.848 L1097.74 691.848 L1098.3 691.848 L1098.86 691.848 L1099.42 691.848 L1099.98 691.848 L1100.54 691.848 L1101.1 691.848 L1101.66 691.848 L1102.22 691.848 L1102.77 691.848 L1103.33 691.848 L1103.89 691.848 L1104.45 691.848 L1105.01 691.848 L1105.57 691.848 L1106.13 691.848 L1106.69 691.848 L1107.25 691.848 L1107.81 691.848 L1108.37 691.848 L1108.93 691.848 L1109.49 691.848 L1110.04 691.848 L1110.6 691.848 L1111.16 691.848 L1111.72 691.848 L1112.28 691.848 L1112.84 691.848 L1113.4 691.848 L1113.96 691.848 L1114.52 691.848 L1115.08 691.848 L1115.64 691.848 L1116.2 691.848 L1116.76 691.848 L1117.31 691.848 L1117.87 691.848 L1118.43 691.848 L1118.99 691.848 L1119.55 691.848 L1120.11 691.848 L1120.67 691.848 L1121.23 691.848 L1121.79 691.848 L1122.35 691.848 L1122.91 691.848 L1123.47 691.848 L1124.03 691.848 L1124.59 691.848 L1125.14 691.848 L1125.7 691.848 L1126.26 691.848 L1126.82 691.848 L1127.38 691.848 L1127.94 691.848 L1128.5 691.848 L1129.06 691.848 L1129.62 691.848 L1130.18 691.848 L1130.74 691.848 L1131.3 691.848 L1131.86 691.848 L1132.41 691.848 L1132.97 691.848 L1133.53 691.848 L1134.09 691.848 L1134.65 691.848 L1135.21 691.848 L1135.77 691.848 L1136.33 691.848 L1136.89 691.848 L1137.45 691.848 L1138.01 691.848 L1138.57 691.848 L1139.13 691.848 L1139.68 691.848 L1140.24 691.848 L1140.8 691.848 L1141.36 691.848 L1141.92 691.848 L1142.48 691.848 L1143.04 691.848 L1143.6 691.848 L1144.16 691.848 L1144.72 691.848 L1145.28 691.848 L1145.84 691.848 L1146.4 691.848 L1146.96 691.848 L1147.51 691.848 L1148.07 691.848 L1148.63 691.848 L1149.19 691.848 L1149.75 691.848 L1150.31 691.848 L1150.87 691.848 L1151.43 691.848 L1151.99 691.848 L1152.55 691.848 L1153.11 691.848 L1153.67 691.848 L1154.23 691.848 L1154.78 691.848 L1155.34 691.848 L1155.9 691.848 L1156.46 691.848 L1157.02 691.848 L1157.58 691.848 L1158.14 691.848 L1158.7 691.848 L1159.26 691.848 L1159.82 691.848 L1160.38 691.848 L1160.94 691.848 L1161.5 691.848 L1162.05 691.848 L1162.61 691.848 L1163.17 691.848 L1163.73 691.848 L1164.29 691.848 L1164.85 691.848 L1165.41 691.848 L1165.97 691.848 L1166.53 691.848 L1167.09 691.848 L1167.65 691.848 L1168.21 691.848 L1168.77 691.848 L1169.33 691.848 L1169.88 691.848 L1170.44 691.848 L1171 691.848 L1171.56 691.848 L1172.12 691.848 L1172.68 691.848 L1173.24 691.848 L1173.8 691.848 L1174.36 691.848 L1174.92 691.848 L1175.48 691.848 L1176.04 691.848 L1176.6 691.848 L1177.15 691.848 L1177.71 691.848 L1178.27 691.848 L1178.83 691.848 L1179.39 691.848 L1179.95 691.848 L1180.51 691.848 L1181.07 691.848 L1181.63 691.848 L1182.19 691.848 L1182.75 691.848 L1183.31 691.848 L1183.87 691.848 L1184.43 691.848 L1184.98 691.848 L1185.54 691.848 L1186.1 691.848 L1186.66 691.848 L1187.22 691.848 L1187.78 691.848 L1188.34 691.848 L1188.9 691.848 L1189.46 691.848 L1190.02 691.848 L1190.58 691.848 L1191.14 691.848 L1191.7 691.848 L1192.25 691.848 L1192.81 691.848 L1193.37 691.848 L1193.93 691.848 L1194.49 691.848 L1195.05 691.848 L1195.61 691.848 L1196.17 691.848 L1196.73 691.848 L1197.29 691.848 L1197.85 691.848 L1198.41 691.848 L1198.97 691.848 L1199.52 691.848 L1200.08 691.848 L1200.64 691.848 L1201.2 691.848 L1201.76 691.848 L1202.32 691.848 L1202.88 691.848 L1203.44 691.848 L1204 691.848 L1204.56 691.848 L1205.12 691.848 L1205.68 691.848 L1206.24 691.848 L1206.8 691.848 L1207.35 691.848 L1207.91 691.848 L1208.47 691.848 L1209.03 691.848 L1209.59 691.848 L1210.15 691.848 L1210.71 691.848 L1211.27 691.848 L1211.83 691.848 L1212.39 691.848 L1212.95 691.848 L1213.51 691.848 L1214.07 691.848 L1214.62 691.848 L1215.18 691.848 L1215.74 691.848 L1216.3 691.848 L1216.86 691.848 L1217.42 691.848 L1217.98 691.848 L1218.54 691.848 L1219.1 691.848 L1219.66 691.848 L1220.22 691.848 L1220.78 691.848 L1221.34 691.848 L1221.89 691.848 L1222.45 691.848 L1223.01 691.848 L1223.57 691.848 L1224.13 691.848 L1224.69 691.848 L1225.25 691.848 L1225.81 691.848 L1226.37 691.848 L1226.93 691.848 L1227.49 691.848 L1228.05 691.848 L1228.61 691.848 L1229.17 691.848 L1229.72 691.848 L1230.28 691.848 L1230.84 691.848 L1231.4 691.848 L1231.96 691.848 L1232.52 691.848 L1233.08 691.848 L1233.64 691.848 L1234.2 691.848 L1234.76 691.848 L1235.32 691.848 L1235.88 691.848 L1236.44 691.848 L1236.99 691.848 L1237.55 691.848 L1238.11 691.848 L1238.67 691.848 L1239.23 691.848 L1239.79 691.848 L1240.35 691.848 L1240.91 691.848 L1241.47 691.848 L1242.03 691.848 L1242.59 691.848 L1243.15 691.848 L1243.71 691.848 L1244.26 691.848 L1244.82 691.848 L1245.38 691.848 L1245.94 691.848 L1246.5 691.848 L1247.06 691.848 L1247.62 691.848 L1248.18 691.848 L1248.74 691.848 L1249.3 691.848 L1249.86 691.848 L1250.42 691.848 L1250.98 691.848 L1251.54 691.848 L1252.09 691.848 L1252.65 691.848 L1253.21 691.848 L1253.77 691.848 L1254.33 691.848 L1254.89 691.848 L1255.45 691.848 L1256.01 691.848 L1256.57 691.848 L1257.13 691.848 L1257.69 691.848 L1258.25 691.848 L1258.81 691.848 L1259.36 691.848 L1259.92 691.848 L1260.48 691.848 L1261.04 691.848 L1261.6 691.848 L1262.16 691.848 L1262.72 691.848 L1263.28 691.848 L1263.84 691.848 L1264.4 691.848 L1264.96 691.848 L1265.52 691.848 L1266.08 691.848 L1266.63 691.848 L1267.19 691.848 L1267.75 691.848 L1268.31 691.848 L1268.87 691.848 L1269.43 691.848 L1269.99 691.848 L1270.55 691.848 L1271.11 691.848 L1271.67 691.848 L1272.23 691.848 L1272.79 691.848 L1273.35 691.848 L1273.91 691.848 L1274.46 691.848 L1275.02 691.848 L1275.58 691.848 L1276.14 691.848 L1276.7 691.848 L1277.26 691.848 L1277.82 691.848 L1278.38 691.848 L1278.94 691.848 L1279.5 691.848 L1280.06 691.848 L1280.62 691.848 L1281.18 691.848 L1281.73 691.848 L1282.29 691.848 L1282.85 691.848 L1283.41 691.848 L1283.97 691.848 L1284.53 691.848 L1285.09 691.848 L1285.65 691.848 L1286.21 691.848 L1286.77 691.848 L1287.33 691.848 L1287.89 691.848 L1288.45 691.848 L1289 691.848 L1289.56 691.848 L1290.12 691.848 L1290.68 691.848 L1291.24 691.848 L1291.8 691.848 L1292.36 691.848 L1292.92 691.848 L1293.48 691.848 L1294.04 691.848 L1294.6 691.848 L1295.16 691.848 L1295.72 691.848 L1296.28 691.848 L1296.83 691.848 L1297.39 691.848 L1297.95 691.848 L1298.51 691.848 L1299.07 691.848 L1299.63 691.848 L1300.19 691.848 L1300.75 691.848 L1301.31 691.848 L1301.87 691.848 L1302.43 691.848 L1302.99 691.848 L1303.55 691.848 L1304.1 691.848 L1304.66 691.848 L1305.22 691.848 L1305.78 691.848 L1306.34 691.848 L1306.9 691.848 L1307.46 691.848 L1308.02 691.848 L1308.58 691.848 L1309.14 691.848 L1309.7 691.848 L1310.26 691.848 L1310.82 691.848 L1311.38 691.848 L1311.93 691.848 L1312.49 691.848 L1313.05 691.848 L1313.61 691.848 L1314.17 691.848 L1314.73 691.848 L1315.29 691.848 L1315.85 691.848 L1316.41 691.848 L1316.97 691.848 L1317.53 691.848 L1318.09 691.848 L1318.65 691.848 L1319.2 691.848 L1319.76 691.848 L1320.32 691.848 L1320.88 691.848 L1321.44 691.848 L1322 691.848 L1322.56 691.848 L1323.12 691.848 L1323.68 691.848 L1324.24 691.848 L1324.8 691.848 L1325.36 691.848 L1325.92 691.848 L1326.47 691.848 L1327.03 691.848 L1327.59 691.848 L1328.15 691.848 L1328.71 691.848 L1329.27 691.848 L1329.83 691.848 L1330.39 691.848 L1330.95 691.848 L1331.51 691.848 L1332.07 691.848 L1332.63 691.848 L1333.19 691.848 L1333.75 691.848 L1334.3 691.848 L1334.86 691.848 L1335.42 691.848 L1335.98 691.848 L1336.54 691.848 L1337.1 691.848 L1337.66 691.848 L1338.22 691.848 L1338.78 691.848 L1339.34 691.848 L1339.9 691.848 L1340.46 691.848 L1341.02 691.848 L1341.57 691.848 L1342.13 691.848 L1342.69 691.848 L1343.25 691.848 L1343.81 691.848 L1344.37 691.848 L1344.93 691.848 L1345.49 691.848 L1346.05 691.848 L1346.61 691.848 L1347.17 691.848 L1347.73 691.848 L1348.29 691.848 L1348.84 691.848 L1349.4 691.848 L1349.96 691.848 L1350.52 691.848 L1351.08 691.848 L1351.64 691.848 L1352.2 691.848 L1352.76 691.848 L1353.32 691.848 L1353.88 691.848 L1354.44 691.848 L1355 691.848 L1355.56 691.848 L1356.12 691.848 L1356.67 691.848 L1357.23 691.848 L1357.79 691.848 L1358.35 691.848 L1358.91 691.848 L1359.47 691.848 L1360.03 691.848 L1360.59 691.848 L1361.15 691.848 L1361.71 691.848 L1362.27 691.848 L1362.83 691.848 L1363.39 691.848 L1363.94 691.848 L1364.5 691.848 L1365.06 691.848 L1365.62 691.848 L1366.18 691.848 L1366.74 691.848 L1367.3 691.848 L1367.86 691.848 L1368.42 691.848 L1368.98 691.848 L1369.54 691.848 L1370.1 691.848 L1370.66 691.848 L1371.21 691.848 L1371.77 691.848 L1372.33 691.848 L1372.89 691.848 L1373.45 691.848 L1374.01 691.848 L1374.57 691.848 L1375.13 691.848 L1375.69 691.848 L1376.25 691.848 L1376.81 691.848 L1377.37 691.848 L1377.93 691.848 L1378.49 691.848 L1379.04 691.848 L1379.6 691.848 L1380.16 691.848 L1380.72 691.848 L1381.28 691.848 L1381.84 691.848 L1382.4 691.848 L1382.96 691.848 L1383.52 691.848 L1384.08 691.848 L1384.64 691.848 L1385.2 691.848 L1385.76 691.848 L1386.31 691.848 L1386.87 691.848 L1387.43 691.848 L1387.99 691.848 L1388.55 691.848 L1389.11 691.848 L1389.67 691.848 L1390.23 691.848 L1390.79 691.848 L1391.35 691.848 L1391.91 691.848 L1392.47 691.848 L1393.03 691.848 L1393.58 691.848 L1394.14 691.848 L1394.7 691.848 L1395.26 691.848 L1395.82 691.848 L1396.38 691.848 L1396.94 691.848 L1397.5 691.848 L1398.06 691.848 L1398.62 691.848 L1399.18 691.848 L1399.74 691.848 L1400.3 691.848 L1400.86 691.848 L1401.41 691.848 L1401.97 691.848 L1402.53 691.848 L1403.09 691.848 L1403.65 691.848 L1404.21 691.848 L1404.77 691.848 L1405.33 691.848 L1405.89 691.848 L1406.45 691.848 L1407.01 691.848 L1407.57 691.848 L1408.13 691.848 L1408.68 691.848 L1409.24 691.848 L1409.8 691.848 L1410.36 691.848 L1410.92 691.848 L1411.48 691.848 L1412.04 691.848 L1412.6 691.848 L1413.16 691.848 L1413.72 691.848 L1414.28 691.848 L1414.84 691.848 L1415.4 691.848 L1415.95 691.848 L1416.51 691.848 L1417.07 691.848 L1417.63 691.848 L1418.19 691.848 L1418.75 691.848 L1419.31 691.848 L1419.87 691.848 L1420.43 691.848 L1420.99 691.848 L1421.55 691.848 L1422.11 691.848 L1422.67 691.848 L1423.23 691.848 L1423.78 691.848 L1424.34 691.848 L1424.9 691.848 L1425.46 691.848 L1426.02 691.848 L1426.58 691.848 L1427.14 691.848 L1427.7 691.848 L1428.26 691.848 L1428.82 691.848 L1429.38 691.848 L1429.94 691.848 L1430.5 691.848 L1431.05 691.848 L1431.61 691.848 L1432.17 691.848 L1432.73 691.848 L1433.29 691.848 L1433.85 691.848 L1434.41 691.848 L1434.97 691.848 L1435.53 691.848 L1436.09 691.848 L1436.65 691.848 L1437.21 691.848 L1437.77 691.848 L1438.33 691.848 L1438.88 691.848 L1439.44 691.848 L1440 691.848 L1440.56 691.848 L1441.12 691.848 L1441.68 691.848 L1442.24 691.848 L1442.8 691.848 L1443.36 691.848 L1443.92 691.848 L1444.48 691.848 L1445.04 691.848 L1445.6 691.848 L1446.15 691.848 L1446.71 691.848 L1447.27 691.848 L1447.83 691.848 L1448.39 691.848 L1448.95 691.848 L1449.51 691.848 L1450.07 691.848 L1450.63 691.848 L1451.19 691.848 L1451.75 691.848 L1452.31 691.848 L1452.87 691.848 L1453.42 691.848 L1453.98 691.848 L1454.54 691.848 L1455.1 691.848 L1455.66 691.848 L1456.22 691.848 L1456.78 691.848 L1457.34 691.848 L1457.9 691.848 L1458.46 691.848 L1459.02 691.848 L1459.58 691.848 L1460.14 691.848 L1460.7 691.848 L1461.25 691.848 L1461.81 691.848 L1462.37 691.848 L1462.93 691.848 L1463.49 691.848 L1464.05 691.848 L1464.61 691.848 L1465.17 691.848 L1465.73 691.848 L1466.29 691.848 L1466.85 691.848 L1467.41 691.848 L1467.97 691.848 L1468.52 691.848 L1469.08 691.848 L1469.64 691.848 L1470.2 691.848 L1470.76 691.848 L1471.32 691.848 L1471.88 691.848 L1472.44 691.848 L1473 691.848 L1473.56 691.848 L1474.12 691.848 L1474.68 691.848 L1475.24 691.848 L1475.79 691.848 L1476.35 691.848 L1476.91 691.848 L1477.47 691.848 L1478.03 691.848 L1478.59 691.848 L1479.15 691.848 L1479.71 691.848 L1480.27 691.848 L1480.83 691.848 L1481.39 691.848 L1481.95 691.848 L1482.51 691.848 L1483.07 691.848 L1483.62 691.848 L1484.18 691.848 L1484.74 691.848 L1485.3 691.848 L1485.86 691.848 L1486.42 691.848 L1486.98 691.848 L1487.54 691.848 L1488.1 691.848 L1488.66 691.848 L1489.22 691.848 L1489.78 691.848 L1490.34 691.848 L1490.89 691.848 L1491.45 691.848 L1492.01 691.848 L1492.57 691.848 L1493.13 691.848 L1493.69 691.848 L1494.25 691.848 L1494.81 691.848 L1495.37 691.848 L1495.93 691.848 L1496.49 691.848 L1497.05 691.848 L1497.61 691.848 L1498.16 691.848 L1498.72 691.848 L1499.28 691.848 L1499.84 691.848 L1500.4 691.848 L1500.96 691.848 L1501.52 691.848 L1502.08 691.848 L1502.64 691.848 L1503.2 691.848 L1503.76 691.848 L1504.32 691.848 L1504.88 691.848 L1505.44 691.848 L1505.99 691.848 L1506.55 691.848 L1507.11 691.848 L1507.67 691.848 L1508.23 691.848 L1508.79 691.848 L1509.35 691.848 L1509.91 691.848 L1510.47 691.848 L1511.03 691.848 L1511.59 691.848 L1512.15 691.848 L1512.71 691.848 L1513.26 691.848 L1513.82 691.848 L1514.38 691.848 L1514.94 691.848 L1515.5 691.848 L1516.06 691.848 L1516.62 691.848 L1517.18 691.848 L1517.74 691.848 L1518.3 691.848 L1518.86 691.848 L1519.42 691.848 L1519.98 691.848 L1520.53 691.848 L1521.09 691.848 L1521.65 691.848 L1522.21 691.848 L1522.77 691.848 L1523.33 691.848 L1523.89 691.848 L1524.45 691.848 L1525.01 691.848 L1525.57 691.848 L1526.13 691.848 L1526.69 691.848 L1527.25 691.848 L1527.81 691.848 L1528.36 691.848 L1528.92 691.848 L1529.48 691.848 L1530.04 691.848 L1530.6 691.848 L1531.16 691.848 L1531.72 691.848 L1532.28 691.848 L1532.84 691.848 L1533.4 691.848 L1533.96 691.848 L1534.52 691.848 L1535.08 691.848 L1535.63 691.848 L1536.19 691.848 L1536.75 691.848 L1537.31 691.848 L1537.87 691.848 L1538.43 691.848 L1538.99 691.848 L1539.55 691.848 L1540.11 691.848 L1540.67 691.848 L1541.23 691.848 L1541.79 691.848 L1542.35 691.848 L1542.9 691.848 L1543.46 691.848 L1544.02 691.848 L1544.58 691.848 L1545.14 691.848 L1545.7 691.848 L1546.26 691.848 L1546.82 691.848 L1547.38 691.848 L1547.94 691.848 L1548.5 691.848 L1549.06 691.848 L1549.62 691.848 L1550.18 691.848 L1550.73 691.848 L1551.29 691.848 L1551.85 691.848 L1552.41 691.848 L1552.97 691.848 L1553.53 691.848 L1554.09 691.848 L1554.65 691.848 L1555.21 691.848 L1555.77 691.848 L1556.33 691.848 L1556.89 691.848 L1557.45 691.848 L1558 691.848 L1558.56 691.848 L1559.12 691.848 L1559.68 691.848 L1560.24 691.848 L1560.8 691.848 L1561.36 691.848 L1561.92 691.848 L1562.48 691.848 L1563.04 691.848 L1563.6 691.848 L1564.16 691.848 L1564.72 691.848 L1565.28 691.848 L1565.83 691.848 L1566.39 691.848 L1566.95 691.848 L1567.51 691.848 L1568.07 691.848 L1568.63 691.848 L1569.19 691.848 L1569.75 691.848 L1570.31 691.848 L1570.87 691.848 L1571.43 691.848 L1571.99 691.848 L1572.55 691.848 L1573.1 691.848 L1573.66 691.848 L1574.22 691.848 L1574.78 691.848 L1575.34 691.848 L1575.9 691.848 L1576.46 691.848 L1577.02 691.848 L1577.58 691.848 L1578.14 691.848 L1578.7 691.848 L1579.26 691.848 L1579.82 691.848 L1580.37 691.848 L1580.93 691.848 L1581.49 691.848 L1582.05 691.848 L1582.61 691.848 L1583.17 691.848 L1583.73 691.848 L1584.29 691.848 L1584.85 691.848 L1585.41 691.848 L1585.97 691.848 L1586.53 691.848 L1587.09 691.848 L1587.65 691.848 L1588.2 691.848 L1588.76 691.848 L1589.32 691.848 L1589.88 691.848 L1590.44 691.848 L1591 691.848 L1591.56 691.848 L1592.12 691.848 L1592.68 691.848 L1593.24 691.848 L1593.8 691.848 L1594.36 691.848 L1594.92 691.848 L1595.47 691.848 L1596.03 691.848 L1596.59 691.848 L1597.15 691.848 L1597.71 691.848 L1598.27 691.848 L1598.83 691.848 L1599.39 691.848 L1599.95 691.848 L1600.51 691.848 L1601.07 691.848 L1601.63 691.848 L1602.19 691.848 L1602.74 691.848 L1603.3 691.848 L1603.86 691.848 L1604.42 691.848 L1604.98 691.848 L1605.54 691.848 L1606.1 691.848 L1606.66 691.848 L1607.22 691.848 L1607.78 691.848 L1608.34 691.848 L1608.9 691.848 L1609.46 691.848 L1610.02 691.848 L1610.57 691.848 L1611.13 691.848 L1611.69 691.848 L1612.25 691.848 L1612.81 691.848 L1613.37 691.848 L1613.93 691.848 L1614.49 691.848 L1615.05 691.848 L1615.61 691.848 L1616.17 691.848 L1616.73 691.848 L1617.29 691.848 L1617.84 691.848 L1618.4 691.848 L1618.96 691.848 L1619.52 691.848 L1620.08 691.848 L1620.64 691.848 L1621.2 691.848 L1621.76 691.848 L1622.32 691.848 L1622.88 691.848 L1623.44 691.848 L1624 691.848 L1624.56 691.848 L1625.11 691.848 L1625.67 691.848 L1626.23 691.848 L1626.79 691.848 L1627.35 691.848 L1627.91 691.848 L1628.47 691.848 L1629.03 691.848 L1629.59 691.848 L1630.15 691.848 L1630.71 691.848 L1631.27 691.848 L1631.83 691.848 L1632.39 691.848 L1632.94 691.848 L1633.5 691.848 L1634.06 691.848 L1634.62 691.848 L1635.18 691.848 L1635.74 691.848 L1636.3 691.848 L1636.86 691.848 L1637.42 691.848 L1637.98 691.848 L1638.54 691.848 L1639.1 691.848 L1639.66 691.848 L1640.21 691.848 L1640.77 691.848 L1641.33 691.848 L1641.89 691.848 L1642.45 691.848 L1643.01 691.848 L1643.57 691.848 L1644.13 691.848 L1644.69 691.848 L1645.25 691.848 L1645.81 691.848 L1646.37 691.848 L1646.93 691.848 L1647.48 691.848 L1648.04 691.848 L1648.6 691.848 L1649.16 691.848 L1649.72 691.848 L1650.28 691.848 L1650.84 691.848 L1651.4 691.848 L1651.96 691.848 L1652.52 691.848 L1653.08 691.848 L1653.64 691.848 L1654.2 691.848 L1654.76 691.848 L1655.31 691.848 L1655.87 691.848 L1656.43 691.848 L1656.99 691.848 L1657.55 691.848 L1658.11 691.848 L1658.67 691.848 L1659.23 691.848 L1659.79 691.848 L1660.35 691.848 L1660.91 691.848 L1661.47 691.848 L1662.03 691.848 L1662.58 691.848 L1663.14 691.848 L1663.7 691.848 L1664.26 691.848 L1664.82 691.848 L1665.38 691.848 L1665.94 691.848 L1666.5 691.848 L1667.06 691.848 L1667.62 691.848 L1668.18 691.848 L1668.74 691.848 L1669.3 691.848 L1669.85 691.848 L1670.41 691.848 L1670.97 691.848 L1671.53 691.848 L1672.09 691.848 L1672.65 691.848 L1673.21 691.848 L1673.77 691.848 L1674.33 691.848 L1674.89 691.848 L1675.45 691.848 L1676.01 691.848 L1676.57 691.848 L1677.13 691.848 L1677.68 691.848 L1678.24 691.848 L1678.8 691.848 L1679.36 691.848 L1679.92 691.848 L1680.48 691.848 L1681.04 691.848 L1681.6 691.848 L1682.16 691.848 L1682.72 691.848 L1683.28 691.848 L1683.84 691.848 L1684.4 691.848 L1684.95 691.848 L1685.51 691.848 L1686.07 691.848 L1686.63 691.848 L1687.19 691.848 L1687.75 691.848 L1688.31 691.848 L1688.87 691.848 L1689.43 691.848 L1689.99 691.848 L1690.55 691.848 L1691.11 691.848 L1691.67 691.848 L1692.23 691.848 L1692.78 691.848 L1693.34 691.848 L1693.9 691.848 L1694.46 691.848 L1695.02 691.848 L1695.58 691.848 L1696.14 691.848 L1696.7 691.848 L1697.26 691.848 L1697.82 691.848 L1698.38 691.848 L1698.94 691.848 L1699.5 691.848 L1700.05 691.848 L1700.61 691.848 L1701.17 691.848 L1701.73 691.848 L1702.29 691.848 L1702.85 691.848 L1703.41 691.848 L1703.97 691.848 L1704.53 691.848 L1705.09 691.848 L1705.65 691.848 L1706.21 691.848 L1706.77 691.848 L1707.32 691.848 L1707.88 691.848 L1708.44 691.848 L1709 691.848 L1709.56 691.848 L1710.12 691.848 L1710.68 691.848 L1711.24 691.848 L1711.8 691.848 L1712.36 691.848 L1712.92 691.848 L1713.48 691.848 L1714.04 691.848 L1714.6 691.848 L1715.15 691.848 L1715.71 691.848 L1716.27 691.848 L1716.83 691.848 L1717.39 691.848 L1717.95 691.848 L1718.51 691.848 L1719.07 691.848 L1719.63 691.848 L1720.19 691.848 L1720.75 691.848 L1721.31 691.848 L1721.87 691.848 L1722.42 691.848 L1722.98 691.848 L1723.54 691.848 L1724.1 691.848 L1724.66 691.848 L1725.22 691.848 L1725.78 691.848 L1726.34 691.848 L1726.9 691.848 L1727.46 691.848 L1728.02 691.848 L1728.58 691.848 L1729.14 691.848 L1729.69 691.848 L1730.25 691.848 L1730.81 691.848 L1731.37 691.848 L1731.93 691.848 L1732.49 691.848 L1733.05 691.848 L1733.61 691.848 L1734.17 691.848 L1734.73 691.848 L1735.29 691.848 L1735.85 691.848 L1736.41 691.848 L1736.97 691.848 L1737.52 691.848 L1738.08 691.848 L1738.64 691.848 L1739.2 691.848 L1739.76 691.848 L1740.32 691.848 L1740.88 691.848 L1741.44 691.848 L1742 691.848 L1742.56 691.848 L1743.12 691.848 L1743.68 691.848 L1744.24 691.848 L1744.79 691.848 L1745.35 691.848 L1745.91 691.848 L1746.47 691.848 L1747.03 691.848 L1747.59 691.848 L1748.15 691.848 L1748.71 691.848 L1749.27 691.848 L1749.83 691.848 L1750.39 691.848 L1750.95 691.848 L1751.51 691.848 L1752.06 691.848 L1752.62 691.848 L1753.18 691.848 L1753.74 691.848 L1754.3 691.848 L1754.86 691.848 L1755.42 691.848 L1755.98 691.848 L1756.54 691.848 L1757.1 691.848 L1757.66 691.848 L1758.22 691.848 L1758.78 691.848 L1759.34 691.848 L1759.89 691.848 L1760.45 691.848 L1761.01 691.848 L1761.57 691.848 L1762.13 691.848 L1762.69 691.848 L1763.25 691.848 L1763.81 691.848 L1764.37 691.848 L1764.93 691.848 L1765.49 691.848 L1766.05 691.848 L1766.61 691.848 L1767.16 691.848 L1767.72 691.848 L1768.28 691.848 L1768.84 691.848 L1769.4 691.848 L1769.96 691.848 L1770.52 691.848 L1771.08 691.848 L1771.64 691.848 L1772.2 691.848 L1772.76 691.848 L1773.32 691.848 L1773.88 691.848 L1774.43 691.848 L1774.99 691.848 L1775.55 691.848 L1776.11 691.848 L1776.67 691.848 L1777.23 691.848 L1777.79 691.848 L1778.35 691.848 L1778.91 691.848 L1779.47 691.848 L1780.03 691.848 L1780.59 691.848 L1781.15 691.848 L1781.71 691.848 L1782.26 691.848 L1782.82 691.848 L1783.38 691.848 L1783.94 691.848 L1784.5 691.848 L1785.06 691.848 L1785.62 691.848 L1786.18 691.848 L1786.74 691.848 L1787.3 691.848 L1787.86 691.848 L1788.42 691.848 L1788.98 691.848 L1789.53 691.848 L1790.09 691.848 L1790.65 691.848 L1791.21 691.848 L1791.77 691.848 L1792.33 691.848 L1792.89 691.848 L1793.45 691.848 L1794.01 691.848 L1794.57 691.848 L1795.13 691.848 L1795.69 691.848 L1796.25 691.848 L1796.8 691.848 L1797.36 691.848 L1797.92 691.848 L1798.48 691.848 L1799.04 691.848 L1799.6 691.848 L1800.16 691.848 L1800.72 691.848 L1801.28 691.848 L1801.84 691.848 L1802.4 691.848 L1802.96 691.848 L1803.52 691.848 L1804.08 691.848 L1804.63 691.848 L1805.19 691.848 L1805.75 691.848 L1806.31 691.848 L1806.87 691.848 L1807.43 691.848 L1807.99 691.848 L1808.55 691.848 L1809.11 691.848 L1809.67 691.848 L1810.23 691.848 L1810.79 691.848 L1811.35 691.848 L1811.9 691.848 L1812.46 691.848 L1813.02 691.848 L1813.58 691.848 L1814.14 691.848 L1814.7 691.848 L1815.26 691.848 L1815.82 691.848 L1816.38 691.848 L1816.94 691.848 L1817.5 691.848 L1818.06 691.848 L1818.62 691.848 L1819.18 691.848 L1819.73 691.848 L1820.29 691.848 L1820.85 691.848 L1821.41 691.848 L1821.97 691.848 L1822.53 691.848 L1823.09 691.848 L1823.65 691.848 L1824.21 691.848 L1824.77 691.848 L1825.33 691.848 L1825.89 691.848 L1826.45 691.848 L1827 691.848 L1827.56 691.848 L1828.12 691.848 L1828.68 691.848 L1829.24 691.848 L1829.8 691.848 L1830.36 691.848 L1830.92 691.848 L1831.48 691.848 L1832.04 691.848 L1832.6 691.848 L1833.16 691.848 L1833.72 691.848 L1834.27 691.848 L1834.83 691.848 L1835.39 691.848 L1835.95 691.848 L1836.51 691.848 L1837.07 691.848 L1837.63 691.848 L1838.19 691.848 L1838.19 682.501 L1837.63 682.501 L1837.07 682.501 L1836.51 682.501 L1835.95 682.501 L1835.39 682.501 L1834.83 682.501 L1834.27 682.501 L1833.72 682.501 L1833.16 682.501 L1832.6 682.501 L1832.04 682.501 L1831.48 682.501 L1830.92 682.501 L1830.36 682.501 L1829.8 682.501 L1829.24 682.501 L1828.68 682.501 L1828.12 682.501 L1827.56 682.501 L1827 682.501 L1826.45 682.501 L1825.89 682.501 L1825.33 682.501 L1824.77 682.501 L1824.21 682.501 L1823.65 682.501 L1823.09 682.501 L1822.53 682.501 L1821.97 682.501 L1821.41 682.501 L1820.85 682.501 L1820.29 682.501 L1819.73 682.501 L1819.18 682.501 L1818.62 682.501 L1818.06 682.501 L1817.5 682.501 L1816.94 682.501 L1816.38 682.501 L1815.82 682.501 L1815.26 682.501 L1814.7 682.501 L1814.14 682.501 L1813.58 682.501 L1813.02 682.501 L1812.46 682.501 L1811.9 682.501 L1811.35 682.501 L1810.79 682.501 L1810.23 682.501 L1809.67 682.501 L1809.11 682.501 L1808.55 682.501 L1807.99 682.501 L1807.43 682.501 L1806.87 682.501 L1806.31 682.501 L1805.75 682.501 L1805.19 682.501 L1804.63 682.501 L1804.08 682.501 L1803.52 682.501 L1802.96 682.501 L1802.4 682.501 L1801.84 682.501 L1801.28 682.501 L1800.72 682.501 L1800.16 682.501 L1799.6 682.501 L1799.04 682.501 L1798.48 682.501 L1797.92 682.501 L1797.36 682.501 L1796.8 682.501 L1796.25 682.501 L1795.69 682.501 L1795.13 682.501 L1794.57 682.501 L1794.01 682.501 L1793.45 682.501 L1792.89 682.501 L1792.33 682.501 L1791.77 682.501 L1791.21 682.501 L1790.65 682.501 L1790.09 682.501 L1789.53 682.501 L1788.98 682.501 L1788.42 682.501 L1787.86 682.501 L1787.3 682.501 L1786.74 682.501 L1786.18 682.501 L1785.62 682.501 L1785.06 682.501 L1784.5 682.501 L1783.94 682.501 L1783.38 682.501 L1782.82 682.501 L1782.26 682.501 L1781.71 682.501 L1781.15 682.501 L1780.59 682.501 L1780.03 682.501 L1779.47 682.501 L1778.91 682.501 L1778.35 682.501 L1777.79 682.501 L1777.23 682.501 L1776.67 682.501 L1776.11 682.501 L1775.55 682.501 L1774.99 682.501 L1774.43 682.501 L1773.88 682.501 L1773.32 682.501 L1772.76 682.501 L1772.2 682.501 L1771.64 682.501 L1771.08 682.501 L1770.52 682.501 L1769.96 682.501 L1769.4 682.501 L1768.84 682.501 L1768.28 682.501 L1767.72 682.501 L1767.16 682.501 L1766.61 682.501 L1766.05 682.501 L1765.49 682.501 L1764.93 682.501 L1764.37 682.501 L1763.81 682.501 L1763.25 682.501 L1762.69 682.501 L1762.13 682.501 L1761.57 682.501 L1761.01 682.501 L1760.45 682.501 L1759.89 682.501 L1759.34 682.501 L1758.78 682.501 L1758.22 682.501 L1757.66 682.501 L1757.1 682.501 L1756.54 682.501 L1755.98 682.501 L1755.42 682.501 L1754.86 682.501 L1754.3 682.501 L1753.74 682.501 L1753.18 682.501 L1752.62 682.501 L1752.06 682.501 L1751.51 682.501 L1750.95 682.501 L1750.39 682.501 L1749.83 682.501 L1749.27 682.501 L1748.71 682.501 L1748.15 682.501 L1747.59 682.501 L1747.03 682.501 L1746.47 682.501 L1745.91 682.501 L1745.35 682.501 L1744.79 682.501 L1744.24 682.501 L1743.68 682.501 L1743.12 682.501 L1742.56 682.501 L1742 682.501 L1741.44 682.501 L1740.88 682.501 L1740.32 682.501 L1739.76 682.501 L1739.2 682.501 L1738.64 682.501 L1738.08 682.501 L1737.52 682.501 L1736.97 682.501 L1736.41 682.501 L1735.85 682.501 L1735.29 682.501 L1734.73 682.501 L1734.17 682.501 L1733.61 682.501 L1733.05 682.501 L1732.49 682.501 L1731.93 682.501 L1731.37 682.501 L1730.81 682.501 L1730.25 682.501 L1729.69 682.501 L1729.14 682.501 L1728.58 682.501 L1728.02 682.501 L1727.46 682.501 L1726.9 682.501 L1726.34 682.501 L1725.78 682.501 L1725.22 682.501 L1724.66 682.501 L1724.1 682.501 L1723.54 682.501 L1722.98 682.501 L1722.42 682.501 L1721.87 682.501 L1721.31 682.501 L1720.75 682.501 L1720.19 682.501 L1719.63 682.501 L1719.07 682.501 L1718.51 682.501 L1717.95 682.501 L1717.39 682.501 L1716.83 682.501 L1716.27 682.501 L1715.71 682.501 L1715.15 682.501 L1714.6 682.501 L1714.04 682.501 L1713.48 682.501 L1712.92 682.501 L1712.36 682.501 L1711.8 682.501 L1711.24 682.501 L1710.68 682.501 L1710.12 682.501 L1709.56 682.501 L1709 682.501 L1708.44 682.501 L1707.88 682.501 L1707.32 682.501 L1706.77 682.501 L1706.21 682.501 L1705.65 682.501 L1705.09 682.501 L1704.53 682.501 L1703.97 682.501 L1703.41 682.501 L1702.85 682.501 L1702.29 682.501 L1701.73 682.501 L1701.17 682.501 L1700.61 682.501 L1700.05 682.501 L1699.5 682.501 L1698.94 682.501 L1698.38 682.501 L1697.82 682.501 L1697.26 682.501 L1696.7 682.501 L1696.14 682.501 L1695.58 682.501 L1695.02 682.501 L1694.46 682.501 L1693.9 682.501 L1693.34 682.501 L1692.78 682.501 L1692.23 682.501 L1691.67 682.501 L1691.11 682.501 L1690.55 682.501 L1689.99 682.501 L1689.43 682.501 L1688.87 682.501 L1688.31 682.501 L1687.75 682.501 L1687.19 682.501 L1686.63 682.501 L1686.07 682.501 L1685.51 682.501 L1684.95 682.501 L1684.4 682.501 L1683.84 682.501 L1683.28 682.501 L1682.72 682.501 L1682.16 682.501 L1681.6 682.501 L1681.04 682.501 L1680.48 682.501 L1679.92 682.501 L1679.36 682.501 L1678.8 682.501 L1678.24 682.501 L1677.68 682.501 L1677.13 682.501 L1676.57 682.501 L1676.01 682.501 L1675.45 682.501 L1674.89 682.501 L1674.33 682.501 L1673.77 682.501 L1673.21 682.501 L1672.65 682.501 L1672.09 682.501 L1671.53 682.501 L1670.97 682.501 L1670.41 682.501 L1669.85 682.501 L1669.3 682.501 L1668.74 682.501 L1668.18 682.501 L1667.62 682.501 L1667.06 682.501 L1666.5 682.501 L1665.94 682.501 L1665.38 682.501 L1664.82 682.501 L1664.26 682.501 L1663.7 682.501 L1663.14 682.501 L1662.58 682.501 L1662.03 682.501 L1661.47 682.501 L1660.91 682.501 L1660.35 682.501 L1659.79 682.501 L1659.23 682.501 L1658.67 682.501 L1658.11 682.501 L1657.55 682.501 L1656.99 682.501 L1656.43 682.501 L1655.87 682.501 L1655.31 682.501 L1654.76 682.501 L1654.2 682.501 L1653.64 682.501 L1653.08 682.501 L1652.52 682.501 L1651.96 682.501 L1651.4 682.501 L1650.84 682.501 L1650.28 682.501 L1649.72 682.501 L1649.16 682.501 L1648.6 682.501 L1648.04 682.501 L1647.48 682.501 L1646.93 682.501 L1646.37 682.501 L1645.81 682.501 L1645.25 682.501 L1644.69 682.501 L1644.13 682.501 L1643.57 682.501 L1643.01 682.501 L1642.45 682.501 L1641.89 682.501 L1641.33 682.501 L1640.77 682.501 L1640.21 682.501 L1639.66 682.501 L1639.1 682.501 L1638.54 682.501 L1637.98 682.501 L1637.42 682.501 L1636.86 682.501 L1636.3 682.501 L1635.74 682.501 L1635.18 682.501 L1634.62 682.501 L1634.06 682.501 L1633.5 682.501 L1632.94 682.501 L1632.39 682.501 L1631.83 682.501 L1631.27 682.501 L1630.71 682.501 L1630.15 682.501 L1629.59 682.501 L1629.03 682.501 L1628.47 682.501 L1627.91 682.501 L1627.35 682.501 L1626.79 682.501 L1626.23 682.501 L1625.67 682.501 L1625.11 682.501 L1624.56 682.501 L1624 682.501 L1623.44 682.501 L1622.88 682.501 L1622.32 682.501 L1621.76 682.501 L1621.2 682.501 L1620.64 682.501 L1620.08 682.501 L1619.52 682.501 L1618.96 682.501 L1618.4 682.501 L1617.84 682.501 L1617.29 682.501 L1616.73 682.501 L1616.17 682.501 L1615.61 682.501 L1615.05 682.501 L1614.49 682.501 L1613.93 682.501 L1613.37 682.501 L1612.81 682.501 L1612.25 682.501 L1611.69 682.501 L1611.13 682.501 L1610.57 682.501 L1610.02 682.501 L1609.46 682.501 L1608.9 682.501 L1608.34 682.501 L1607.78 682.501 L1607.22 682.501 L1606.66 682.501 L1606.1 682.501 L1605.54 682.501 L1604.98 682.501 L1604.42 682.501 L1603.86 682.501 L1603.3 682.501 L1602.74 682.501 L1602.19 682.501 L1601.63 682.501 L1601.07 682.501 L1600.51 682.501 L1599.95 682.501 L1599.39 682.501 L1598.83 682.501 L1598.27 682.501 L1597.71 682.501 L1597.15 682.501 L1596.59 682.501 L1596.03 682.501 L1595.47 682.501 L1594.92 682.501 L1594.36 682.501 L1593.8 682.501 L1593.24 682.501 L1592.68 682.501 L1592.12 682.501 L1591.56 682.501 L1591 682.501 L1590.44 682.501 L1589.88 682.501 L1589.32 682.501 L1588.76 682.501 L1588.2 682.501 L1587.65 682.501 L1587.09 682.501 L1586.53 682.501 L1585.97 682.501 L1585.41 682.501 L1584.85 682.501 L1584.29 682.501 L1583.73 682.501 L1583.17 682.501 L1582.61 682.501 L1582.05 682.501 L1581.49 682.501 L1580.93 682.501 L1580.37 682.501 L1579.82 682.501 L1579.26 682.501 L1578.7 682.501 L1578.14 682.501 L1577.58 682.501 L1577.02 682.501 L1576.46 682.501 L1575.9 682.501 L1575.34 682.501 L1574.78 682.501 L1574.22 682.501 L1573.66 682.501 L1573.1 682.501 L1572.55 682.501 L1571.99 682.501 L1571.43 682.501 L1570.87 682.501 L1570.31 682.501 L1569.75 682.501 L1569.19 682.501 L1568.63 682.501 L1568.07 682.501 L1567.51 682.501 L1566.95 682.501 L1566.39 682.501 L1565.83 682.501 L1565.28 682.501 L1564.72 682.501 L1564.16 682.501 L1563.6 682.501 L1563.04 682.501 L1562.48 682.501 L1561.92 682.501 L1561.36 682.501 L1560.8 682.501 L1560.24 682.501 L1559.68 682.501 L1559.12 682.501 L1558.56 682.501 L1558 682.501 L1557.45 682.501 L1556.89 682.501 L1556.33 682.501 L1555.77 682.501 L1555.21 682.501 L1554.65 682.501 L1554.09 682.501 L1553.53 682.501 L1552.97 682.501 L1552.41 682.501 L1551.85 682.501 L1551.29 682.501 L1550.73 682.501 L1550.18 682.501 L1549.62 682.501 L1549.06 682.501 L1548.5 682.501 L1547.94 682.501 L1547.38 682.501 L1546.82 682.501 L1546.26 682.501 L1545.7 682.501 L1545.14 682.501 L1544.58 682.501 L1544.02 682.501 L1543.46 682.501 L1542.9 682.501 L1542.35 682.501 L1541.79 682.501 L1541.23 682.501 L1540.67 682.501 L1540.11 682.501 L1539.55 682.501 L1538.99 682.501 L1538.43 682.501 L1537.87 682.501 L1537.31 682.501 L1536.75 682.501 L1536.19 682.501 L1535.63 682.501 L1535.08 682.501 L1534.52 682.501 L1533.96 682.501 L1533.4 682.501 L1532.84 682.501 L1532.28 682.501 L1531.72 682.501 L1531.16 682.501 L1530.6 682.501 L1530.04 682.501 L1529.48 682.501 L1528.92 682.501 L1528.36 682.501 L1527.81 682.501 L1527.25 682.501 L1526.69 682.501 L1526.13 682.501 L1525.57 682.501 L1525.01 682.501 L1524.45 682.501 L1523.89 682.501 L1523.33 682.501 L1522.77 682.501 L1522.21 682.501 L1521.65 682.501 L1521.09 682.501 L1520.53 682.501 L1519.98 682.501 L1519.42 682.501 L1518.86 682.501 L1518.3 682.501 L1517.74 682.501 L1517.18 682.501 L1516.62 682.501 L1516.06 682.501 L1515.5 682.501 L1514.94 682.501 L1514.38 682.501 L1513.82 682.501 L1513.26 682.501 L1512.71 682.501 L1512.15 682.501 L1511.59 682.501 L1511.03 682.501 L1510.47 682.501 L1509.91 682.501 L1509.35 682.501 L1508.79 682.501 L1508.23 682.501 L1507.67 682.501 L1507.11 682.501 L1506.55 682.501 L1505.99 682.501 L1505.44 682.501 L1504.88 682.501 L1504.32 682.501 L1503.76 682.501 L1503.2 682.501 L1502.64 682.501 L1502.08 682.501 L1501.52 682.501 L1500.96 682.501 L1500.4 682.501 L1499.84 682.501 L1499.28 682.501 L1498.72 682.501 L1498.16 682.501 L1497.61 682.501 L1497.05 682.501 L1496.49 682.501 L1495.93 682.501 L1495.37 682.501 L1494.81 682.501 L1494.25 682.501 L1493.69 682.501 L1493.13 682.501 L1492.57 682.501 L1492.01 682.501 L1491.45 682.501 L1490.89 682.501 L1490.34 682.501 L1489.78 682.501 L1489.22 682.501 L1488.66 682.501 L1488.1 682.501 L1487.54 682.501 L1486.98 682.501 L1486.42 682.501 L1485.86 682.501 L1485.3 682.501 L1484.74 682.501 L1484.18 682.501 L1483.62 682.501 L1483.07 682.501 L1482.51 682.501 L1481.95 682.501 L1481.39 682.501 L1480.83 682.501 L1480.27 682.501 L1479.71 682.501 L1479.15 682.501 L1478.59 682.501 L1478.03 682.501 L1477.47 682.501 L1476.91 682.501 L1476.35 682.501 L1475.79 682.501 L1475.24 682.501 L1474.68 682.501 L1474.12 682.501 L1473.56 682.501 L1473 682.501 L1472.44 682.501 L1471.88 682.501 L1471.32 682.501 L1470.76 682.501 L1470.2 682.501 L1469.64 682.501 L1469.08 682.501 L1468.52 682.501 L1467.97 682.501 L1467.41 682.501 L1466.85 682.501 L1466.29 682.501 L1465.73 682.501 L1465.17 682.501 L1464.61 682.501 L1464.05 682.501 L1463.49 682.501 L1462.93 682.501 L1462.37 682.501 L1461.81 682.501 L1461.25 682.501 L1460.7 682.501 L1460.14 682.501 L1459.58 682.501 L1459.02 682.501 L1458.46 682.501 L1457.9 682.501 L1457.34 682.501 L1456.78 682.501 L1456.22 682.501 L1455.66 682.501 L1455.1 682.501 L1454.54 682.501 L1453.98 682.501 L1453.42 682.501 L1452.87 682.501 L1452.31 682.501 L1451.75 682.501 L1451.19 682.501 L1450.63 682.501 L1450.07 682.501 L1449.51 682.501 L1448.95 682.501 L1448.39 682.501 L1447.83 682.501 L1447.27 682.501 L1446.71 682.501 L1446.15 682.501 L1445.6 682.501 L1445.04 682.501 L1444.48 682.501 L1443.92 682.501 L1443.36 682.501 L1442.8 682.501 L1442.24 682.501 L1441.68 682.501 L1441.12 682.501 L1440.56 682.501 L1440 682.501 L1439.44 682.501 L1438.88 682.501 L1438.33 682.501 L1437.77 682.501 L1437.21 682.501 L1436.65 682.501 L1436.09 682.501 L1435.53 682.501 L1434.97 682.501 L1434.41 682.501 L1433.85 682.501 L1433.29 682.501 L1432.73 682.501 L1432.17 682.501 L1431.61 682.501 L1431.05 682.501 L1430.5 682.501 L1429.94 682.501 L1429.38 682.501 L1428.82 682.501 L1428.26 682.501 L1427.7 682.501 L1427.14 682.501 L1426.58 682.501 L1426.02 682.501 L1425.46 682.501 L1424.9 682.501 L1424.34 682.501 L1423.78 682.501 L1423.23 682.501 L1422.67 682.501 L1422.11 682.501 L1421.55 682.501 L1420.99 682.501 L1420.43 682.501 L1419.87 682.501 L1419.31 682.501 L1418.75 682.501 L1418.19 682.501 L1417.63 682.501 L1417.07 682.501 L1416.51 682.501 L1415.95 682.501 L1415.4 682.501 L1414.84 682.501 L1414.28 682.501 L1413.72 682.501 L1413.16 682.501 L1412.6 682.501 L1412.04 682.501 L1411.48 682.501 L1410.92 682.501 L1410.36 682.501 L1409.8 682.501 L1409.24 682.501 L1408.68 682.501 L1408.13 682.501 L1407.57 682.501 L1407.01 682.501 L1406.45 682.501 L1405.89 682.501 L1405.33 682.501 L1404.77 682.501 L1404.21 682.501 L1403.65 682.501 L1403.09 682.501 L1402.53 682.501 L1401.97 682.501 L1401.41 682.501 L1400.86 682.501 L1400.3 682.501 L1399.74 682.501 L1399.18 682.501 L1398.62 682.501 L1398.06 682.501 L1397.5 682.501 L1396.94 682.501 L1396.38 682.501 L1395.82 682.501 L1395.26 682.501 L1394.7 682.501 L1394.14 682.501 L1393.58 682.501 L1393.03 682.501 L1392.47 682.501 L1391.91 682.501 L1391.35 682.501 L1390.79 682.501 L1390.23 682.501 L1389.67 682.501 L1389.11 682.501 L1388.55 682.501 L1387.99 682.501 L1387.43 682.501 L1386.87 682.501 L1386.31 682.501 L1385.76 682.501 L1385.2 682.501 L1384.64 682.501 L1384.08 682.501 L1383.52 682.501 L1382.96 682.501 L1382.4 682.501 L1381.84 682.501 L1381.28 682.501 L1380.72 682.501 L1380.16 682.501 L1379.6 682.501 L1379.04 682.501 L1378.49 682.501 L1377.93 682.501 L1377.37 682.501 L1376.81 682.501 L1376.25 682.501 L1375.69 682.501 L1375.13 682.501 L1374.57 682.501 L1374.01 682.501 L1373.45 682.501 L1372.89 682.501 L1372.33 682.501 L1371.77 682.501 L1371.21 682.501 L1370.66 682.501 L1370.1 682.501 L1369.54 682.501 L1368.98 682.501 L1368.42 682.501 L1367.86 682.501 L1367.3 682.501 L1366.74 682.501 L1366.18 682.501 L1365.62 682.501 L1365.06 682.501 L1364.5 682.501 L1363.94 682.501 L1363.39 682.501 L1362.83 682.501 L1362.27 682.501 L1361.71 682.501 L1361.15 682.501 L1360.59 682.501 L1360.03 682.501 L1359.47 682.501 L1358.91 682.501 L1358.35 682.501 L1357.79 682.501 L1357.23 682.501 L1356.67 682.501 L1356.12 682.501 L1355.56 682.501 L1355 682.501 L1354.44 682.501 L1353.88 682.501 L1353.32 682.501 L1352.76 682.501 L1352.2 682.501 L1351.64 682.501 L1351.08 682.501 L1350.52 682.501 L1349.96 682.501 L1349.4 682.501 L1348.84 682.501 L1348.29 682.501 L1347.73 682.501 L1347.17 682.501 L1346.61 682.501 L1346.05 682.501 L1345.49 682.501 L1344.93 682.501 L1344.37 682.501 L1343.81 682.501 L1343.25 682.501 L1342.69 682.501 L1342.13 682.501 L1341.57 682.501 L1341.02 682.501 L1340.46 682.501 L1339.9 682.501 L1339.34 682.501 L1338.78 682.501 L1338.22 682.501 L1337.66 682.501 L1337.1 682.501 L1336.54 682.501 L1335.98 682.501 L1335.42 682.501 L1334.86 682.501 L1334.3 682.501 L1333.75 682.501 L1333.19 682.501 L1332.63 682.501 L1332.07 682.501 L1331.51 682.501 L1330.95 682.501 L1330.39 682.501 L1329.83 682.501 L1329.27 682.501 L1328.71 682.501 L1328.15 682.501 L1327.59 682.501 L1327.03 682.501 L1326.47 682.501 L1325.92 682.501 L1325.36 682.501 L1324.8 682.501 L1324.24 682.501 L1323.68 682.501 L1323.12 682.501 L1322.56 682.501 L1322 682.501 L1321.44 682.501 L1320.88 682.501 L1320.32 682.501 L1319.76 682.501 L1319.2 682.501 L1318.65 682.501 L1318.09 682.501 L1317.53 682.501 L1316.97 682.501 L1316.41 682.501 L1315.85 682.501 L1315.29 682.501 L1314.73 682.501 L1314.17 682.501 L1313.61 682.501 L1313.05 682.501 L1312.49 682.501 L1311.93 682.501 L1311.38 682.501 L1310.82 682.501 L1310.26 682.501 L1309.7 682.501 L1309.14 682.501 L1308.58 682.501 L1308.02 682.501 L1307.46 682.501 L1306.9 682.501 L1306.34 682.501 L1305.78 682.501 L1305.22 682.501 L1304.66 682.501 L1304.1 682.501 L1303.55 682.501 L1302.99 682.501 L1302.43 682.501 L1301.87 682.501 L1301.31 682.501 L1300.75 682.501 L1300.19 682.501 L1299.63 682.501 L1299.07 682.501 L1298.51 682.501 L1297.95 682.501 L1297.39 682.501 L1296.83 682.501 L1296.28 682.501 L1295.72 682.501 L1295.16 682.501 L1294.6 682.501 L1294.04 682.501 L1293.48 682.501 L1292.92 682.501 L1292.36 682.501 L1291.8 682.501 L1291.24 682.501 L1290.68 682.501 L1290.12 682.501 L1289.56 682.501 L1289 682.501 L1288.45 682.501 L1287.89 682.501 L1287.33 682.501 L1286.77 682.501 L1286.21 682.501 L1285.65 682.501 L1285.09 682.501 L1284.53 682.501 L1283.97 682.501 L1283.41 682.501 L1282.85 682.501 L1282.29 682.501 L1281.73 682.501 L1281.18 682.501 L1280.62 682.501 L1280.06 682.501 L1279.5 682.501 L1278.94 682.501 L1278.38 682.501 L1277.82 682.501 L1277.26 682.501 L1276.7 682.501 L1276.14 682.501 L1275.58 682.501 L1275.02 682.501 L1274.46 682.501 L1273.91 682.501 L1273.35 682.501 L1272.79 682.501 L1272.23 682.501 L1271.67 682.501 L1271.11 682.501 L1270.55 682.501 L1269.99 682.501 L1269.43 682.501 L1268.87 682.501 L1268.31 682.501 L1267.75 682.501 L1267.19 682.501 L1266.63 682.501 L1266.08 682.501 L1265.52 682.501 L1264.96 682.501 L1264.4 682.501 L1263.84 682.501 L1263.28 682.501 L1262.72 682.501 L1262.16 682.501 L1261.6 682.501 L1261.04 682.501 L1260.48 682.501 L1259.92 682.501 L1259.36 682.501 L1258.81 682.501 L1258.25 682.501 L1257.69 682.501 L1257.13 682.501 L1256.57 682.501 L1256.01 682.501 L1255.45 682.501 L1254.89 682.501 L1254.33 682.501 L1253.77 682.501 L1253.21 682.501 L1252.65 682.501 L1252.09 682.501 L1251.54 682.501 L1250.98 682.501 L1250.42 682.501 L1249.86 682.501 L1249.3 682.501 L1248.74 682.501 L1248.18 682.501 L1247.62 682.501 L1247.06 682.501 L1246.5 682.501 L1245.94 682.501 L1245.38 682.501 L1244.82 682.501 L1244.26 682.501 L1243.71 682.501 L1243.15 682.501 L1242.59 682.501 L1242.03 682.501 L1241.47 682.501 L1240.91 682.501 L1240.35 682.501 L1239.79 682.501 L1239.23 682.501 L1238.67 682.501 L1238.11 682.501 L1237.55 682.501 L1236.99 682.501 L1236.44 682.501 L1235.88 682.501 L1235.32 682.501 L1234.76 682.501 L1234.2 682.501 L1233.64 682.501 L1233.08 682.501 L1232.52 682.501 L1231.96 682.501 L1231.4 682.501 L1230.84 682.501 L1230.28 682.501 L1229.72 682.501 L1229.17 682.501 L1228.61 682.501 L1228.05 682.501 L1227.49 682.501 L1226.93 682.501 L1226.37 682.501 L1225.81 682.501 L1225.25 682.501 L1224.69 682.501 L1224.13 682.501 L1223.57 682.501 L1223.01 682.501 L1222.45 682.501 L1221.89 682.501 L1221.34 682.501 L1220.78 682.501 L1220.22 682.501 L1219.66 682.501 L1219.1 682.501 L1218.54 682.501 L1217.98 682.501 L1217.42 682.501 L1216.86 682.501 L1216.3 682.501 L1215.74 682.501 L1215.18 682.501 L1214.62 682.501 L1214.07 682.501 L1213.51 682.501 L1212.95 682.501 L1212.39 682.501 L1211.83 682.501 L1211.27 682.501 L1210.71 682.501 L1210.15 682.501 L1209.59 682.501 L1209.03 682.501 L1208.47 682.501 L1207.91 682.501 L1207.35 682.501 L1206.8 682.501 L1206.24 682.501 L1205.68 682.501 L1205.12 682.501 L1204.56 682.501 L1204 682.501 L1203.44 682.501 L1202.88 682.501 L1202.32 682.501 L1201.76 682.501 L1201.2 682.501 L1200.64 682.501 L1200.08 682.501 L1199.52 682.501 L1198.97 682.501 L1198.41 682.501 L1197.85 682.501 L1197.29 682.501 L1196.73 682.501 L1196.17 682.501 L1195.61 682.501 L1195.05 682.501 L1194.49 682.501 L1193.93 682.501 L1193.37 682.501 L1192.81 682.501 L1192.25 682.501 L1191.7 682.501 L1191.14 682.501 L1190.58 682.501 L1190.02 682.501 L1189.46 682.501 L1188.9 682.501 L1188.34 682.501 L1187.78 682.501 L1187.22 682.501 L1186.66 682.501 L1186.1 682.501 L1185.54 682.501 L1184.98 682.501 L1184.43 682.501 L1183.87 682.501 L1183.31 682.501 L1182.75 682.501 L1182.19 682.501 L1181.63 682.501 L1181.07 682.501 L1180.51 682.501 L1179.95 682.501 L1179.39 682.501 L1178.83 682.501 L1178.27 682.501 L1177.71 682.501 L1177.15 682.501 L1176.6 682.501 L1176.04 682.501 L1175.48 682.501 L1174.92 682.501 L1174.36 682.501 L1173.8 682.501 L1173.24 682.501 L1172.68 682.501 L1172.12 682.501 L1171.56 682.501 L1171 682.501 L1170.44 682.501 L1169.88 682.501 L1169.33 682.501 L1168.77 682.501 L1168.21 682.501 L1167.65 682.501 L1167.09 682.501 L1166.53 682.501 L1165.97 682.501 L1165.41 682.501 L1164.85 682.501 L1164.29 682.501 L1163.73 682.501 L1163.17 682.501 L1162.61 682.501 L1162.05 682.501 L1161.5 682.501 L1160.94 682.501 L1160.38 682.501 L1159.82 682.501 L1159.26 682.501 L1158.7 682.501 L1158.14 682.501 L1157.58 682.501 L1157.02 682.501 L1156.46 682.501 L1155.9 682.501 L1155.34 682.501 L1154.78 682.501 L1154.23 682.501 L1153.67 682.501 L1153.11 682.501 L1152.55 682.501 L1151.99 682.501 L1151.43 682.501 L1150.87 682.501 L1150.31 682.501 L1149.75 682.501 L1149.19 682.501 L1148.63 682.501 L1148.07 682.501 L1147.51 682.501 L1146.96 682.501 L1146.4 682.501 L1145.84 682.501 L1145.28 682.501 L1144.72 682.501 L1144.16 682.501 L1143.6 682.501 L1143.04 682.501 L1142.48 682.501 L1141.92 682.501 L1141.36 682.501 L1140.8 682.501 L1140.24 682.501 L1139.68 682.501 L1139.13 682.501 L1138.57 682.501 L1138.01 682.501 L1137.45 682.501 L1136.89 682.501 L1136.33 682.501 L1135.77 682.501 L1135.21 682.501 L1134.65 682.501 L1134.09 682.501 L1133.53 682.501 L1132.97 682.501 L1132.41 682.501 L1131.86 682.501 L1131.3 682.501 L1130.74 682.501 L1130.18 682.501 L1129.62 682.501 L1129.06 682.501 L1128.5 682.501 L1127.94 682.501 L1127.38 682.501 L1126.82 682.501 L1126.26 682.501 L1125.7 682.501 L1125.14 682.501 L1124.59 682.501 L1124.03 682.501 L1123.47 682.501 L1122.91 682.501 L1122.35 682.501 L1121.79 682.501 L1121.23 682.501 L1120.67 682.501 L1120.11 682.501 L1119.55 682.501 L1118.99 682.501 L1118.43 682.501 L1117.87 682.501 L1117.31 682.501 L1116.76 682.501 L1116.2 682.501 L1115.64 682.501 L1115.08 682.501 L1114.52 682.501 L1113.96 682.501 L1113.4 682.501 L1112.84 682.501 L1112.28 682.501 L1111.72 682.501 L1111.16 682.501 L1110.6 682.501 L1110.04 682.501 L1109.49 682.501 L1108.93 682.501 L1108.37 682.501 L1107.81 682.501 L1107.25 682.501 L1106.69 682.501 L1106.13 682.501 L1105.57 682.501 L1105.01 682.501 L1104.45 682.501 L1103.89 682.501 L1103.33 682.501 L1102.77 682.501 L1102.22 682.501 L1101.66 682.501 L1101.1 682.501 L1100.54 682.501 L1099.98 682.501 L1099.42 682.501 L1098.86 682.501 L1098.3 682.501 L1097.74 682.501 L1097.18 682.501 L1096.62 682.501 L1096.06 682.501 L1095.5 682.501 L1094.94 682.501 L1094.39 682.501 L1093.83 682.501 L1093.27 682.501 L1092.71 682.501 L1092.15 682.501 L1091.59 682.501 L1091.03 682.501 L1090.47 682.501 L1089.91 682.501 L1089.35 682.501 L1088.79 682.501 L1088.23 682.501 L1087.67 682.501 L1087.12 682.501 L1086.56 682.501 L1086 682.501 L1085.44 682.501 L1084.88 682.501 L1084.32 682.501 L1083.76 682.501 L1083.2 682.501 L1082.64 682.501 L1082.08 682.501 L1081.52 682.501 L1080.96 682.501 L1080.4 682.501 L1079.85 682.501 L1079.29 682.501 L1078.73 682.501 L1078.17 682.501 L1077.61 682.501 L1077.05 682.501 L1076.49 682.501 L1075.93 682.501 L1075.37 682.501 L1074.81 682.501 L1074.25 682.501 L1073.69 682.501 L1073.13 682.501 L1072.57 682.501 L1072.02 682.501 L1071.46 682.501 L1070.9 682.501 L1070.34 682.501 L1069.78 682.501 L1069.22 682.501 L1068.66 682.501 L1068.1 682.501 L1067.54 682.501 L1066.98 682.501 L1066.42 682.501 L1065.86 682.501 L1065.3 682.501 L1064.75 682.501 L1064.19 682.501 L1063.63 682.501 L1063.07 682.501 L1062.51 682.501 L1061.95 682.501 L1061.39 682.501 L1060.83 682.501 L1060.27 682.501 L1059.71 682.501 L1059.15 682.501 L1058.59 682.501 L1058.03 682.501 L1057.48 682.501 L1056.92 682.501 L1056.36 682.501 L1055.8 682.501 L1055.24 682.501 L1054.68 682.501 L1054.12 682.501 L1053.56 682.501 L1053 682.501 L1052.44 682.501 L1051.88 682.501 L1051.32 682.501 L1050.76 682.501 L1050.2 682.501 L1049.65 682.501 L1049.09 682.501 L1048.53 682.501 L1047.97 682.501 L1047.41 682.501 L1046.85 682.501 L1046.29 682.501 L1045.73 682.501 L1045.17 682.501 L1044.61 682.501 L1044.05 682.501 L1043.49 682.501 L1042.93 682.501 L1042.38 682.501 L1041.82 682.501 L1041.26 682.501 L1040.7 682.501 L1040.14 682.501 L1039.58 682.501 L1039.02 682.501 L1038.46 682.501 L1037.9 682.501 L1037.34 682.501 L1036.78 682.501 L1036.22 682.501 L1035.66 682.501 L1035.1 682.501 L1034.55 682.501 L1033.99 682.501 L1033.43 682.501 L1032.87 682.501 L1032.31 682.501 L1031.75 682.501 L1031.19 682.501 L1030.63 682.501 L1030.07 682.501 L1029.51 682.501 L1028.95 682.501 L1028.39 682.501 L1027.83 682.501 L1027.28 682.501 L1026.72 682.501 L1026.16 682.501 L1025.6 682.501 L1025.04 682.501 L1024.48 682.501 L1023.92 682.501 L1023.36 682.501 L1022.8 682.501 L1022.24 682.501 L1021.68 682.501 L1021.12 682.501 L1020.56 682.501 L1020.01 682.501 L1019.45 682.501 L1018.89 682.501 L1018.33 682.501 L1017.77 682.501 L1017.21 682.501 L1016.65 682.501 L1016.09 682.501 L1015.53 682.501 L1014.97 682.501 L1014.41 682.501 L1013.85 682.501 L1013.29 682.501 L1012.73 682.501 L1012.18 682.501 L1011.62 682.501 L1011.06 682.501 L1010.5 682.501 L1009.94 682.501 L1009.38 682.501 L1008.82 682.501 L1008.26 682.501 L1007.7 682.501 L1007.14 682.501 L1006.58 682.501 L1006.02 682.501 L1005.46 682.501 L1004.91 682.501 L1004.35 682.501 L1003.79 682.501 L1003.23 682.501 L1002.67 682.501 L1002.11 682.501 L1001.55 682.501 L1000.99 682.501 L1000.43 682.501 L999.872 682.501 L999.313 682.501 L998.754 682.501 L998.194 682.501 L997.635 682.501 L997.076 682.501 L996.517 682.501 L995.957 682.501 L995.398 682.501 L994.839 682.501 L994.28 682.501 L993.72 682.501 L993.161 682.501 L992.602 682.501 L992.043 682.501 L991.483 682.501 L990.924 682.501 L990.365 682.501 L989.806 682.501 L989.246 682.501 L988.687 682.501 L988.128 682.501 L987.569 682.501 L987.009 682.501 L986.45 682.501 L985.891 682.501 L985.332 682.501 L984.772 682.501 L984.213 682.501 L983.654 682.501 L983.095 682.501 L982.535 682.501 L981.976 682.501 L981.417 682.501 L980.858 682.501 L980.298 682.501 L979.739 682.501 L979.18 682.501 L978.621 682.501 L978.061 682.501 L977.502 682.501 L976.943 682.501 L976.384 682.501 L975.824 682.501 L975.265 682.501 L974.706 682.501 L974.147 682.501 L973.587 682.501 L973.028 682.501 L972.469 682.501 L971.91 682.501 L971.35 682.501 L970.791 682.501 L970.232 682.501 L969.673 682.501 L969.113 682.501 L968.554 682.501 L967.995 682.501 L967.436 682.501 L966.876 682.501 L966.317 682.501 L965.758 682.501 L965.199 682.501 L964.639 682.501 L964.08 682.501 L963.521 682.501 L962.962 682.501 L962.402 682.501 L961.843 682.501 L961.284 682.501 L960.725 682.501 L960.165 682.501 L959.606 682.501 L959.047 682.501 L958.488 682.501 L957.928 682.501 L957.369 682.501 L956.81 682.501 L956.251 682.501 L955.691 682.501 L955.132 682.501 L954.573 682.501 L954.014 682.501 L953.454 682.501 L952.895 682.501 L952.336 682.501 L951.777 682.501 L951.217 682.501 L950.658 682.501 L950.099 682.501 L949.54 682.501 L948.98 682.501 L948.421 682.501 L947.862 682.501 L947.303 682.501 L946.743 682.501 L946.184 682.501 L945.625 682.501 L945.066 682.501 L944.506 682.501 L943.947 682.501 L943.388 682.501 L942.829 682.501 L942.269 682.501 L941.71 682.501 L941.151 682.501 L940.592 682.501 L940.032 682.501 L939.473 682.501 L938.914 682.501 L938.355 682.501 L937.795 682.501 L937.236 682.501 L936.677 682.501 L936.118 682.501 L935.558 682.501 L934.999 682.501 L934.44 682.501 L933.881 682.501 L933.321 682.501 L932.762 682.501 L932.203 682.501 L931.644 682.501 L931.084 682.501 L930.525 682.501 L929.966 682.501 L929.406 682.501 L928.847 682.501 L928.288 682.501 L927.729 682.501 L927.169 682.501 L926.61 682.501 L926.051 682.501 L925.492 682.501 L924.932 682.501 L924.373 682.501 L923.814 682.501 L923.255 682.501 L922.695 682.501 L922.136 682.501 L921.577 682.501 L921.018 682.501 L920.458 682.501 L919.899 682.501 L919.34 682.501 L918.781 682.501 L918.221 682.501 L917.662 682.501 L917.103 682.501 L916.544 682.501 L915.984 682.501 L915.425 682.501 L914.866 682.501 L914.307 682.501 L913.747 682.501 L913.188 682.501 L912.629 682.501 L912.07 682.501 L911.51 682.501 L910.951 682.501 L910.392 682.501 L909.833 682.501 L909.273 682.501 L908.714 682.501 L908.155 682.501 L907.596 682.501 L907.036 682.501 L906.477 682.501 L905.918 682.501 L905.359 682.501 L904.799 682.501 L904.24 682.501 L903.681 682.501 L903.122 682.501 L902.562 682.501 L902.003 682.501 L901.444 682.501 L900.885 682.501 L900.325 682.501 L899.766 682.501 L899.207 682.501 L898.648 682.501 L898.088 682.501 L897.529 682.501 L896.97 682.501 L896.411 682.501 L895.851 682.501 L895.292 682.501 L894.733 682.501 L894.174 682.501 L893.614 682.501 L893.055 682.501 L892.496 682.501 L891.937 682.501 L891.377 682.501 L890.818 682.501 L890.259 682.501 L889.7 682.501 L889.14 682.501 L888.581 682.501 L888.022 682.501 L887.463 682.501 L886.903 682.501 L886.344 682.501 L885.785 682.501 L885.226 682.501 L884.666 682.501 L884.107 682.501 L883.548 682.501 L882.989 682.501 L882.429 682.501 L881.87 682.501 L881.311 682.501 L880.752 682.501 L880.192 682.501 L879.633 682.501 L879.074 682.501 L878.515 682.501 L877.955 682.501 L877.396 682.501 L876.837 682.501 L876.278 682.501 L875.718 682.501 L875.159 682.501 L874.6 682.501 L874.041 682.501 L873.481 682.501 L872.922 682.501 L872.363 682.501 L871.804 682.501 L871.244 682.501 L870.685 682.501 L870.126 682.501 L869.567 682.501 L869.007 682.501 L868.448 682.501 L867.889 682.501 L867.33 682.501 L866.77 682.501 L866.211 682.501 L865.652 682.501 L865.093 682.501 L864.533 682.501 L863.974 682.501 L863.415 682.501 L862.856 682.501 L862.296 682.501 L861.737 682.501 L861.178 682.501 L860.619 682.501 L860.059 682.501 L859.5 682.501 L858.941 682.501 L858.382 682.501 L857.822 682.501 L857.263 682.501 L856.704 682.501 L856.145 682.501 L855.585 682.501 L855.026 682.501 L854.467 682.501 L853.908 682.501 L853.348 682.501 L852.789 682.501 L852.23 682.501 L851.671 682.501 L851.111 682.501 L850.552 682.501 L849.993 682.501 L849.434 682.501 L848.874 682.501 L848.315 682.501 L847.756 682.501 L847.197 682.501 L846.637 682.501 L846.078 682.501 L845.519 682.501 L844.96 682.501 L844.4 682.501 L843.841 682.501 L843.282 682.501 L842.723 682.501 L842.163 682.501 L841.604 682.501 L841.045 682.501 L840.486 682.501 L839.926 682.501 L839.367 682.501 L838.808 682.501 L838.249 682.501 L837.689 682.501 L837.13 682.501 L836.571 682.501 L836.012 682.501 L835.452 682.501 L834.893 682.501 L834.334 682.501 L833.775 682.501 L833.215 682.501 L832.656 682.501 L832.097 682.501 L831.538 682.501 L830.978 682.501 L830.419 682.501 L829.86 682.501 L829.301 682.501 L828.741 682.501 L828.182 682.501 L827.623 682.501 L827.064 682.501 L826.504 682.501 L825.945 682.501 L825.386 682.501 L824.827 682.501 L824.267 682.501 L823.708 682.501 L823.149 682.501 L822.59 682.501 L822.03 682.501 L821.471 682.501 L820.912 682.501 L820.353 682.501 L819.793 682.501 L819.234 682.501 L818.675 682.501 L818.116 682.501 L817.556 682.501 L816.997 682.501 L816.438 682.501 L815.879 682.501 L815.319 682.501 L814.76 682.501 L814.201 682.501 L813.642 682.501 L813.082 682.501 L812.523 682.501 L811.964 682.501 L811.405 682.501 L810.845 682.501 L810.286 682.501 L809.727 682.501 L809.168 682.501 L808.608 682.501 L808.049 682.501 L807.49 682.501 L806.931 682.501 L806.371 682.501 L805.812 682.501 L805.253 682.501 L804.693 682.501 L804.134 682.501 L803.575 682.501 L803.016 682.501 L802.456 682.501 L801.897 682.501 L801.338 682.501 L800.779 682.501 L800.219 682.501 L799.66 682.501 L799.101 682.501 L798.542 682.501 L797.982 682.501 L797.423 682.501 L796.864 682.501 L796.305 682.501 L795.745 682.501 L795.186 682.501 L794.627 682.501 L794.068 682.501 L793.508 682.501 L792.949 682.501 L792.39 682.501 L791.831 682.501 L791.271 682.501 L790.712 682.501 L790.153 682.501 L789.594 682.501 L789.034 682.501 L788.475 682.501 L787.916 682.501 L787.357 682.501 L786.797 682.501 L786.238 682.501 L785.679 682.501 L785.12 682.501 L784.56 682.501 L784.001 682.501 L783.442 682.501 L782.883 682.501 L782.323 682.501 L781.764 682.501 L781.205 682.501 L780.646 682.501 L780.086 682.501 L779.527 682.501 L778.968 682.501 L778.409 682.501 L777.849 682.501 L777.29 682.501 L776.731 682.501 L776.172 682.501 L775.612 682.501 L775.053 682.501 L774.494 682.501 L773.935 682.501 L773.375 682.501 L772.816 682.501 L772.257 682.501 L771.698 682.501 L771.138 682.501 L770.579 682.501 L770.02 682.501 L769.461 682.501 L768.901 682.501 L768.342 682.501 L767.783 682.501 L767.224 682.501 L766.664 682.501 L766.105 682.501 L765.546 682.501 L764.987 682.501 L764.427 682.501 L763.868 682.501 L763.309 682.501 L762.75 682.501 L762.19 682.501 L761.631 682.501 L761.072 682.501 L760.513 682.501 L759.953 682.501 L759.394 682.501 L758.835 682.501 L758.276 682.501 L757.716 682.501 L757.157 682.501 L756.598 682.501 L756.039 682.501 L755.479 682.501 L754.92 682.501 L754.361 682.501 L753.802 682.501 L753.242 682.501 L752.683 682.501 L752.124 682.501 L751.565 682.501 L751.005 682.501 L750.446 682.501 L749.887 682.501 L749.328 682.501 L748.768 682.501 L748.209 682.501 L747.65 682.501 L747.091 682.501 L746.531 682.501 L745.972 682.501 L745.413 682.501 L744.854 682.501 L744.294 682.501 L743.735 682.501 L743.176 682.501 L742.617 682.501 L742.057 682.501 L741.498 682.501 L740.939 682.501 L740.38 682.501 L739.82 682.501 L739.261 682.501 L738.702 682.501 L738.143 682.501 L737.583 682.501 L737.024 682.501 L736.465 682.501 L735.906 682.501 L735.346 682.501 L734.787 682.501 L734.228 682.501 L733.669 682.501 L733.109 682.501 L732.55 682.501 L731.991 682.501 L731.432 682.501 L730.872 682.501 L730.313 682.501 L729.754 682.501 L729.195 682.501 L728.635 682.501 L728.076 682.501 L727.517 682.501 L726.958 682.501 L726.398 682.501 L725.839 682.501 L725.28 682.501 L724.721 682.501 L724.161 682.501 L723.602 682.501 L723.043 682.501 L722.484 682.501 L721.924 682.501 L721.365 682.501 L720.806 682.501 L720.247 682.501  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip013)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.174 720.806,687.174 721.365,687.174 721.924,687.174 722.484,687.174 723.043,687.174 723.602,687.174 724.161,687.174 724.721,687.174 725.28,687.174 725.839,687.174 726.398,687.174 726.958,687.174 727.517,687.174 728.076,687.174 728.635,687.174 729.195,687.174 729.754,687.174 730.313,687.174 730.872,687.174 731.432,687.174 731.991,687.174 732.55,687.174 733.109,687.174 733.669,687.174 734.228,687.174 734.787,687.174 735.346,687.174 735.906,687.174 736.465,687.174 737.024,687.174 737.583,687.174 738.143,687.174 738.702,687.174 739.261,687.174 739.82,687.174 740.38,687.174 740.939,687.174 741.498,687.174 742.057,687.174 742.617,687.174 743.176,687.174 743.735,687.174 744.294,687.174 744.854,687.174 745.413,687.174 745.972,687.174 746.531,687.174 747.091,687.174 747.65,687.174 748.209,687.174 748.768,687.174 749.328,687.174 749.887,687.174 750.446,687.174 751.005,687.174 751.565,687.174 752.124,687.174 752.683,687.174 753.242,687.174 753.802,687.174 754.361,687.174 754.92,687.174 755.479,687.174 756.039,687.174 756.598,687.174 757.157,687.174 757.716,687.174 758.276,687.174 758.835,687.174 759.394,687.174 759.953,687.174 760.513,687.174 761.072,687.174 761.631,687.174 762.19,687.174 762.75,687.174 763.309,687.174 763.868,687.174 764.427,687.174 764.987,687.174 765.546,687.174 766.105,687.174 766.664,687.174 767.224,687.174 767.783,687.174 768.342,687.174 768.901,687.174 769.461,687.174 770.02,687.174 770.579,687.174 771.138,687.174 771.698,687.174 772.257,687.174 772.816,687.174 773.375,687.174 773.935,687.174 774.494,687.174 775.053,687.174 775.612,687.174 776.172,687.174 776.731,687.174 777.29,687.174 777.849,687.174 778.409,687.174 778.968,687.174 779.527,687.174 780.086,687.174 780.646,687.174 781.205,687.174 781.764,687.174 782.323,687.174 782.883,687.174 783.442,687.174 784.001,687.174 784.56,687.174 785.12,687.174 785.679,687.174 786.238,687.174 786.797,687.174 787.357,687.174 787.916,687.174 788.475,687.174 789.034,687.174 789.594,687.174 790.153,687.174 790.712,687.174 791.271,687.174 791.831,687.174 792.39,687.174 792.949,687.174 793.508,687.174 794.068,687.174 794.627,687.174 795.186,687.174 795.745,687.174 796.305,687.174 796.864,687.174 797.423,687.174 797.982,687.174 798.542,687.174 799.101,687.174 799.66,687.174 800.219,687.174 800.779,687.174 801.338,687.174 801.897,687.174 802.456,687.174 803.016,687.174 803.575,687.174 804.134,687.174 804.693,687.174 805.253,687.174 805.812,687.174 806.371,687.174 806.931,687.174 807.49,687.174 808.049,687.174 808.608,687.174 809.168,687.174 809.727,687.174 810.286,687.174 810.845,687.174 811.405,687.174 811.964,687.174 812.523,687.174 813.082,687.174 813.642,687.174 814.201,687.174 814.76,687.174 815.319,687.174 815.879,687.174 816.438,687.174 816.997,687.174 817.556,687.174 818.116,687.174 818.675,687.174 819.234,687.174 819.793,687.174 820.353,687.174 820.912,687.174 821.471,687.174 822.03,687.174 822.59,687.174 823.149,687.174 823.708,687.174 824.267,687.174 824.827,687.174 825.386,687.174 825.945,687.174 826.504,687.174 827.064,687.174 827.623,687.174 828.182,687.174 828.741,687.174 829.301,687.174 829.86,687.174 830.419,687.174 830.978,687.174 831.538,687.174 832.097,687.174 832.656,687.174 833.215,687.174 833.775,687.174 834.334,687.174 834.893,687.174 835.452,687.174 836.012,687.174 836.571,687.174 837.13,687.174 837.689,687.174 838.249,687.174 838.808,687.174 839.367,687.174 839.926,687.174 840.486,687.174 841.045,687.174 841.604,687.174 842.163,687.174 842.723,687.174 843.282,687.174 843.841,687.174 844.4,687.174 844.96,687.174 845.519,687.174 846.078,687.174 846.637,687.174 847.197,687.174 847.756,687.174 848.315,687.174 848.874,687.174 849.434,687.174 849.993,687.174 850.552,687.174 851.111,687.174 851.671,687.174 852.23,687.174 852.789,687.174 853.348,687.174 853.908,687.174 854.467,687.174 855.026,687.174 855.585,687.174 856.145,687.174 856.704,687.174 857.263,687.174 857.822,687.174 858.382,687.174 858.941,687.174 859.5,687.174 860.059,687.174 860.619,687.174 861.178,687.174 861.737,687.174 862.296,687.174 862.856,687.174 863.415,687.174 863.974,687.174 864.533,687.174 865.093,687.174 865.652,687.174 866.211,687.174 866.77,687.174 867.33,687.174 867.889,687.174 868.448,687.174 869.007,687.174 869.567,687.174 870.126,687.174 870.685,687.174 871.244,687.174 871.804,687.174 872.363,687.174 872.922,687.174 873.481,687.174 874.041,687.174 874.6,687.174 875.159,687.174 875.718,687.174 876.278,687.174 876.837,687.174 877.396,687.174 877.955,687.174 878.515,687.174 879.074,687.174 879.633,687.174 880.192,687.174 880.752,687.174 881.311,687.174 881.87,687.174 882.429,687.174 882.989,687.174 883.548,687.174 884.107,687.174 884.666,687.174 885.226,687.174 885.785,687.174 886.344,687.174 886.903,687.174 887.463,687.174 888.022,687.174 888.581,687.174 889.14,687.174 889.7,687.174 890.259,687.174 890.818,687.174 891.377,687.174 891.937,687.174 892.496,687.174 893.055,687.174 893.614,687.174 894.174,687.174 894.733,687.174 895.292,687.174 895.851,687.174 896.411,687.174 896.97,687.174 897.529,687.174 898.088,687.174 898.648,687.174 899.207,687.174 899.766,687.174 900.325,687.174 900.885,687.174 901.444,687.174 902.003,687.174 902.562,687.174 903.122,687.174 903.681,687.174 904.24,687.174 904.799,687.174 905.359,687.174 905.918,687.174 906.477,687.174 907.036,687.174 907.596,687.174 908.155,687.174 908.714,687.174 909.273,687.174 909.833,687.174 910.392,687.174 910.951,687.174 911.51,687.174 912.07,687.174 912.629,687.174 913.188,687.174 913.747,687.174 914.307,687.174 914.866,687.174 915.425,687.174 915.984,687.174 916.544,687.174 917.103,687.174 917.662,687.174 918.221,687.174 918.781,687.174 919.34,687.174 919.899,687.174 920.458,687.174 921.018,687.174 921.577,687.174 922.136,687.174 922.695,687.174 923.255,687.174 923.814,687.174 924.373,687.174 924.932,687.174 925.492,687.174 926.051,687.174 926.61,687.174 927.169,687.174 927.729,687.174 928.288,687.174 928.847,687.174 929.406,687.174 929.966,687.174 930.525,687.174 931.084,687.174 931.644,687.174 932.203,687.174 932.762,687.174 933.321,687.174 933.881,687.174 934.44,687.174 934.999,687.174 935.558,687.174 936.118,687.174 936.677,687.174 937.236,687.174 937.795,687.174 938.355,687.174 938.914,687.174 939.473,687.174 940.032,687.174 940.592,687.174 941.151,687.174 941.71,687.174 942.269,687.174 942.829,687.174 943.388,687.174 943.947,687.174 944.506,687.174 945.066,687.174 945.625,687.174 946.184,687.174 946.743,687.174 947.303,687.174 947.862,687.174 948.421,687.174 948.98,687.174 949.54,687.174 950.099,687.174 950.658,687.174 951.217,687.174 951.777,687.174 952.336,687.174 952.895,687.174 953.454,687.174 954.014,687.174 954.573,687.174 955.132,687.174 955.691,687.174 956.251,687.174 956.81,687.174 957.369,687.174 957.928,687.174 958.488,687.174 959.047,687.174 959.606,687.174 960.165,687.174 960.725,687.174 961.284,687.174 961.843,687.174 962.402,687.174 962.962,687.174 963.521,687.174 964.08,687.174 964.639,687.174 965.199,687.174 965.758,687.174 966.317,687.174 966.876,687.174 967.436,687.174 967.995,687.174 968.554,687.174 969.113,687.174 969.673,687.174 970.232,687.174 970.791,687.174 971.35,687.174 971.91,687.174 972.469,687.174 973.028,687.174 973.587,687.174 974.147,687.174 974.706,687.174 975.265,687.174 975.824,687.174 976.384,687.174 976.943,687.174 977.502,687.174 978.061,687.174 978.621,687.174 979.18,687.174 979.739,687.174 980.298,687.174 980.858,687.174 981.417,687.174 981.976,687.174 982.535,687.174 983.095,687.174 983.654,687.174 984.213,687.174 984.772,687.174 985.332,687.174 985.891,687.174 986.45,687.174 987.009,687.174 987.569,687.174 988.128,687.174 988.687,687.174 989.246,687.174 989.806,687.174 990.365,687.174 990.924,687.174 991.483,687.174 992.043,687.174 992.602,687.174 993.161,687.174 993.72,687.174 994.28,687.174 994.839,687.174 995.398,687.174 995.957,687.174 996.517,687.174 997.076,687.174 997.635,687.174 998.194,687.174 998.754,687.174 999.313,687.174 999.872,687.174 1000.43,687.174 1000.99,687.174 1001.55,687.174 1002.11,687.174 1002.67,687.174 1003.23,687.174 1003.79,687.174 1004.35,687.174 1004.91,687.174 1005.46,687.174 1006.02,687.174 1006.58,687.174 1007.14,687.174 1007.7,687.174 1008.26,687.174 1008.82,687.174 1009.38,687.174 1009.94,687.174 1010.5,687.174 1011.06,687.174 1011.62,687.174 1012.18,687.174 1012.73,687.174 1013.29,687.174 1013.85,687.174 1014.41,687.174 1014.97,687.174 1015.53,687.174 1016.09,687.174 1016.65,687.174 1017.21,687.174 1017.77,687.174 1018.33,687.174 1018.89,687.174 1019.45,687.174 1020.01,687.174 1020.56,687.174 1021.12,687.174 1021.68,687.174 1022.24,687.174 1022.8,687.174 1023.36,687.174 1023.92,687.174 1024.48,687.174 1025.04,687.174 1025.6,687.174 1026.16,687.174 1026.72,687.174 1027.28,687.174 1027.83,687.174 1028.39,687.174 1028.95,687.174 1029.51,687.174 1030.07,687.174 1030.63,687.174 1031.19,687.174 1031.75,687.174 1032.31,687.174 1032.87,687.174 1033.43,687.174 1033.99,687.174 1034.55,687.174 1035.1,687.174 1035.66,687.174 1036.22,687.174 1036.78,687.174 1037.34,687.174 1037.9,687.174 1038.46,687.174 1039.02,687.174 1039.58,687.174 1040.14,687.174 1040.7,687.174 1041.26,687.174 1041.82,687.174 1042.38,687.174 1042.93,687.174 1043.49,687.174 1044.05,687.174 1044.61,687.174 1045.17,687.174 1045.73,687.174 1046.29,687.174 1046.85,687.174 1047.41,687.174 1047.97,687.174 1048.53,687.174 1049.09,687.174 1049.65,687.174 1050.2,687.174 1050.76,687.174 1051.32,687.174 1051.88,687.174 1052.44,687.174 1053,687.174 1053.56,687.174 1054.12,687.174 1054.68,687.174 1055.24,687.174 1055.8,687.174 1056.36,687.174 1056.92,687.174 1057.48,687.174 1058.03,687.174 1058.59,687.174 1059.15,687.174 1059.71,687.174 1060.27,687.174 1060.83,687.174 1061.39,687.174 1061.95,687.174 1062.51,687.174 1063.07,687.174 1063.63,687.174 1064.19,687.174 1064.75,687.174 1065.3,687.174 1065.86,687.174 1066.42,687.174 1066.98,687.174 1067.54,687.174 1068.1,687.174 1068.66,687.174 1069.22,687.174 1069.78,687.174 1070.34,687.174 1070.9,687.174 1071.46,687.174 1072.02,687.174 1072.57,687.174 1073.13,687.174 1073.69,687.174 1074.25,687.174 1074.81,687.174 1075.37,687.174 1075.93,687.174 1076.49,687.174 1077.05,687.174 1077.61,687.174 1078.17,687.174 1078.73,687.174 1079.29,687.174 1079.85,687.174 1080.4,687.174 1080.96,687.174 1081.52,687.174 1082.08,687.174 1082.64,687.174 1083.2,687.174 1083.76,687.174 1084.32,687.174 1084.88,687.174 1085.44,687.174 1086,687.174 1086.56,687.174 1087.12,687.174 1087.67,687.174 1088.23,687.174 1088.79,687.174 1089.35,687.174 1089.91,687.174 1090.47,687.174 1091.03,687.174 1091.59,687.174 1092.15,687.174 1092.71,687.174 1093.27,687.174 1093.83,687.174 1094.39,687.174 1094.94,687.174 1095.5,687.174 1096.06,687.174 1096.62,687.174 1097.18,687.174 1097.74,687.174 1098.3,687.174 1098.86,687.174 1099.42,687.174 1099.98,687.174 1100.54,687.174 1101.1,687.174 1101.66,687.174 1102.22,687.174 1102.77,687.174 1103.33,687.174 1103.89,687.174 1104.45,687.174 1105.01,687.174 1105.57,687.174 1106.13,687.174 1106.69,687.174 1107.25,687.174 1107.81,687.174 1108.37,687.174 1108.93,687.174 1109.49,687.174 1110.04,687.174 1110.6,687.174 1111.16,687.174 1111.72,687.174 1112.28,687.174 1112.84,687.174 1113.4,687.174 1113.96,687.174 1114.52,687.174 1115.08,687.174 1115.64,687.174 1116.2,687.174 1116.76,687.174 1117.31,687.174 1117.87,687.174 1118.43,687.174 1118.99,687.174 1119.55,687.174 1120.11,687.174 1120.67,687.174 1121.23,687.174 1121.79,687.174 1122.35,687.174 1122.91,687.174 1123.47,687.174 1124.03,687.174 1124.59,687.174 1125.14,687.174 1125.7,687.174 1126.26,687.174 1126.82,687.174 1127.38,687.174 1127.94,687.174 1128.5,687.174 1129.06,687.174 1129.62,687.174 1130.18,687.174 1130.74,687.174 1131.3,687.174 1131.86,687.174 1132.41,687.174 1132.97,687.174 1133.53,687.174 1134.09,687.174 1134.65,687.174 1135.21,687.174 1135.77,687.174 1136.33,687.174 1136.89,687.174 1137.45,687.174 1138.01,687.174 1138.57,687.174 1139.13,687.174 1139.68,687.174 1140.24,687.174 1140.8,687.174 1141.36,687.174 1141.92,687.174 1142.48,687.174 1143.04,687.174 1143.6,687.174 1144.16,687.174 1144.72,687.174 1145.28,687.174 1145.84,687.174 1146.4,687.174 1146.96,687.174 1147.51,687.174 1148.07,687.174 1148.63,687.174 1149.19,687.174 1149.75,687.174 1150.31,687.174 1150.87,687.174 1151.43,687.174 1151.99,687.174 1152.55,687.174 1153.11,687.174 1153.67,687.174 1154.23,687.174 1154.78,687.174 1155.34,687.174 1155.9,687.174 1156.46,687.174 1157.02,687.174 1157.58,687.174 1158.14,687.174 1158.7,687.174 1159.26,687.174 1159.82,687.174 1160.38,687.174 1160.94,687.174 1161.5,687.174 1162.05,687.174 1162.61,687.174 1163.17,687.174 1163.73,687.174 1164.29,687.174 1164.85,687.174 1165.41,687.174 1165.97,687.174 1166.53,687.174 1167.09,687.174 1167.65,687.174 1168.21,687.174 1168.77,687.174 1169.33,687.174 1169.88,687.174 1170.44,687.174 1171,687.174 1171.56,687.174 1172.12,687.174 1172.68,687.174 1173.24,687.174 1173.8,687.174 1174.36,687.174 1174.92,687.174 1175.48,687.174 1176.04,687.174 1176.6,687.174 1177.15,687.174 1177.71,687.174 1178.27,687.174 1178.83,687.174 1179.39,687.174 1179.95,687.174 1180.51,687.174 1181.07,687.174 1181.63,687.174 1182.19,687.174 1182.75,687.174 1183.31,687.174 1183.87,687.174 1184.43,687.174 1184.98,687.174 1185.54,687.174 1186.1,687.174 1186.66,687.174 1187.22,687.174 1187.78,687.174 1188.34,687.174 1188.9,687.174 1189.46,687.174 1190.02,687.174 1190.58,687.174 1191.14,687.174 1191.7,687.174 1192.25,687.174 1192.81,687.174 1193.37,687.174 1193.93,687.174 1194.49,687.174 1195.05,687.174 1195.61,687.174 1196.17,687.174 1196.73,687.174 1197.29,687.174 1197.85,687.174 1198.41,687.174 1198.97,687.174 1199.52,687.174 1200.08,687.174 1200.64,687.174 1201.2,687.174 1201.76,687.174 1202.32,687.174 1202.88,687.174 1203.44,687.174 1204,687.174 1204.56,687.174 1205.12,687.174 1205.68,687.174 1206.24,687.174 1206.8,687.174 1207.35,687.174 1207.91,687.174 1208.47,687.174 1209.03,687.174 1209.59,687.174 1210.15,687.174 1210.71,687.174 1211.27,687.174 1211.83,687.174 1212.39,687.174 1212.95,687.174 1213.51,687.174 1214.07,687.174 1214.62,687.174 1215.18,687.174 1215.74,687.174 1216.3,687.174 1216.86,687.174 1217.42,687.174 1217.98,687.174 1218.54,687.174 1219.1,687.174 1219.66,687.174 1220.22,687.174 1220.78,687.174 1221.34,687.174 1221.89,687.174 1222.45,687.174 1223.01,687.174 1223.57,687.174 1224.13,687.174 1224.69,687.174 1225.25,687.174 1225.81,687.174 1226.37,687.174 1226.93,687.174 1227.49,687.174 1228.05,687.174 1228.61,687.174 1229.17,687.174 1229.72,687.174 1230.28,687.174 1230.84,687.174 1231.4,687.174 1231.96,687.174 1232.52,687.174 1233.08,687.174 1233.64,687.174 1234.2,687.174 1234.76,687.174 1235.32,687.174 1235.88,687.174 1236.44,687.174 1236.99,687.174 1237.55,687.174 1238.11,687.174 1238.67,687.174 1239.23,687.174 1239.79,687.174 1240.35,687.174 1240.91,687.174 1241.47,687.174 1242.03,687.174 1242.59,687.174 1243.15,687.174 1243.71,687.174 1244.26,687.174 1244.82,687.174 1245.38,687.174 1245.94,687.174 1246.5,687.174 1247.06,687.174 1247.62,687.174 1248.18,687.174 1248.74,687.174 1249.3,687.174 1249.86,687.174 1250.42,687.174 1250.98,687.174 1251.54,687.174 1252.09,687.174 1252.65,687.174 1253.21,687.174 1253.77,687.174 1254.33,687.174 1254.89,687.174 1255.45,687.174 1256.01,687.174 1256.57,687.174 1257.13,687.174 1257.69,687.174 1258.25,687.174 1258.81,687.174 1259.36,687.174 1259.92,687.174 1260.48,687.174 1261.04,687.174 1261.6,687.174 1262.16,687.174 1262.72,687.174 1263.28,687.174 1263.84,687.174 1264.4,687.174 1264.96,687.174 1265.52,687.174 1266.08,687.174 1266.63,687.174 1267.19,687.174 1267.75,687.174 1268.31,687.174 1268.87,687.174 1269.43,687.174 1269.99,687.174 1270.55,687.174 1271.11,687.174 1271.67,687.174 1272.23,687.174 1272.79,687.174 1273.35,687.174 1273.91,687.174 1274.46,687.174 1275.02,687.174 1275.58,687.174 1276.14,687.174 1276.7,687.174 1277.26,687.174 1277.82,687.174 1278.38,687.174 1278.94,687.174 1279.5,687.174 1280.06,687.174 1280.62,687.174 1281.18,687.174 1281.73,687.174 1282.29,687.174 1282.85,687.174 1283.41,687.174 1283.97,687.174 1284.53,687.174 1285.09,687.174 1285.65,687.174 1286.21,687.174 1286.77,687.174 1287.33,687.174 1287.89,687.174 1288.45,687.174 1289,687.174 1289.56,687.174 1290.12,687.174 1290.68,687.174 1291.24,687.174 1291.8,687.174 1292.36,687.174 1292.92,687.174 1293.48,687.174 1294.04,687.174 1294.6,687.174 1295.16,687.174 1295.72,687.174 1296.28,687.174 1296.83,687.174 1297.39,687.174 1297.95,687.174 1298.51,687.174 1299.07,687.174 1299.63,687.174 1300.19,687.174 1300.75,687.174 1301.31,687.174 1301.87,687.174 1302.43,687.174 1302.99,687.174 1303.55,687.174 1304.1,687.174 1304.66,687.174 1305.22,687.174 1305.78,687.174 1306.34,687.174 1306.9,687.174 1307.46,687.174 1308.02,687.174 1308.58,687.174 1309.14,687.174 1309.7,687.174 1310.26,687.174 1310.82,687.174 1311.38,687.174 1311.93,687.174 1312.49,687.174 1313.05,687.174 1313.61,687.174 1314.17,687.174 1314.73,687.174 1315.29,687.174 1315.85,687.174 1316.41,687.174 1316.97,687.174 1317.53,687.174 1318.09,687.174 1318.65,687.174 1319.2,687.174 1319.76,687.174 1320.32,687.174 1320.88,687.174 1321.44,687.174 1322,687.174 1322.56,687.174 1323.12,687.174 1323.68,687.174 1324.24,687.174 1324.8,687.174 1325.36,687.174 1325.92,687.174 1326.47,687.174 1327.03,687.174 1327.59,687.174 1328.15,687.174 1328.71,687.174 1329.27,687.174 1329.83,687.174 1330.39,687.174 1330.95,687.174 1331.51,687.174 1332.07,687.174 1332.63,687.174 1333.19,687.174 1333.75,687.174 1334.3,687.174 1334.86,687.174 1335.42,687.174 1335.98,687.174 1336.54,687.174 1337.1,687.174 1337.66,687.174 1338.22,687.174 1338.78,687.174 1339.34,687.174 1339.9,687.174 1340.46,687.174 1341.02,687.174 1341.57,687.174 1342.13,687.174 1342.69,687.174 1343.25,687.174 1343.81,687.174 1344.37,687.174 1344.93,687.174 1345.49,687.174 1346.05,687.174 1346.61,687.174 1347.17,687.174 1347.73,687.174 1348.29,687.174 1348.84,687.174 1349.4,687.174 1349.96,687.174 1350.52,687.174 1351.08,687.174 1351.64,687.174 1352.2,687.174 1352.76,687.174 1353.32,687.174 1353.88,687.174 1354.44,687.174 1355,687.174 1355.56,687.174 1356.12,687.174 1356.67,687.174 1357.23,687.174 1357.79,687.174 1358.35,687.174 1358.91,687.174 1359.47,687.174 1360.03,687.174 1360.59,687.174 1361.15,687.174 1361.71,687.174 1362.27,687.174 1362.83,687.174 1363.39,687.174 1363.94,687.174 1364.5,687.174 1365.06,687.174 1365.62,687.174 1366.18,687.174 1366.74,687.174 1367.3,687.174 1367.86,687.174 1368.42,687.174 1368.98,687.174 1369.54,687.174 1370.1,687.174 1370.66,687.174 1371.21,687.174 1371.77,687.174 1372.33,687.174 1372.89,687.174 1373.45,687.174 1374.01,687.174 1374.57,687.174 1375.13,687.174 1375.69,687.174 1376.25,687.174 1376.81,687.174 1377.37,687.174 1377.93,687.174 1378.49,687.174 1379.04,687.174 1379.6,687.174 1380.16,687.174 1380.72,687.174 1381.28,687.174 1381.84,687.174 1382.4,687.174 1382.96,687.174 1383.52,687.174 1384.08,687.174 1384.64,687.174 1385.2,687.174 1385.76,687.174 1386.31,687.174 1386.87,687.174 1387.43,687.174 1387.99,687.174 1388.55,687.174 1389.11,687.174 1389.67,687.174 1390.23,687.174 1390.79,687.174 1391.35,687.174 1391.91,687.174 1392.47,687.174 1393.03,687.174 1393.58,687.174 1394.14,687.174 1394.7,687.174 1395.26,687.174 1395.82,687.174 1396.38,687.174 1396.94,687.174 1397.5,687.174 1398.06,687.174 1398.62,687.174 1399.18,687.174 1399.74,687.174 1400.3,687.174 1400.86,687.174 1401.41,687.174 1401.97,687.174 1402.53,687.174 1403.09,687.174 1403.65,687.174 1404.21,687.174 1404.77,687.174 1405.33,687.174 1405.89,687.174 1406.45,687.174 1407.01,687.174 1407.57,687.174 1408.13,687.174 1408.68,687.174 1409.24,687.174 1409.8,687.174 1410.36,687.174 1410.92,687.174 1411.48,687.174 1412.04,687.174 1412.6,687.174 1413.16,687.174 1413.72,687.174 1414.28,687.174 1414.84,687.174 1415.4,687.174 1415.95,687.174 1416.51,687.174 1417.07,687.174 1417.63,687.174 1418.19,687.174 1418.75,687.174 1419.31,687.174 1419.87,687.174 1420.43,687.174 1420.99,687.174 1421.55,687.174 1422.11,687.174 1422.67,687.174 1423.23,687.174 1423.78,687.174 1424.34,687.174 1424.9,687.174 1425.46,687.174 1426.02,687.174 1426.58,687.174 1427.14,687.174 1427.7,687.174 1428.26,687.174 1428.82,687.174 1429.38,687.174 1429.94,687.174 1430.5,687.174 1431.05,687.174 1431.61,687.174 1432.17,687.174 1432.73,687.174 1433.29,687.174 1433.85,687.174 1434.41,687.174 1434.97,687.174 1435.53,687.174 1436.09,687.174 1436.65,687.174 1437.21,687.174 1437.77,687.174 1438.33,687.174 1438.88,687.174 1439.44,687.174 1440,687.174 1440.56,687.174 1441.12,687.174 1441.68,687.174 1442.24,687.174 1442.8,687.174 1443.36,687.174 1443.92,687.174 1444.48,687.174 1445.04,687.174 1445.6,687.174 1446.15,687.174 1446.71,687.174 1447.27,687.174 1447.83,687.174 1448.39,687.174 1448.95,687.174 1449.51,687.174 1450.07,687.174 1450.63,687.174 1451.19,687.174 1451.75,687.174 1452.31,687.174 1452.87,687.174 1453.42,687.174 1453.98,687.174 1454.54,687.174 1455.1,687.174 1455.66,687.174 1456.22,687.174 1456.78,687.174 1457.34,687.174 1457.9,687.174 1458.46,687.174 1459.02,687.174 1459.58,687.174 1460.14,687.174 1460.7,687.174 1461.25,687.174 1461.81,687.174 1462.37,687.174 1462.93,687.174 1463.49,687.174 1464.05,687.174 1464.61,687.174 1465.17,687.174 1465.73,687.174 1466.29,687.174 1466.85,687.174 1467.41,687.174 1467.97,687.174 1468.52,687.174 1469.08,687.174 1469.64,687.174 1470.2,687.174 1470.76,687.174 1471.32,687.174 1471.88,687.174 1472.44,687.174 1473,687.174 1473.56,687.174 1474.12,687.174 1474.68,687.174 1475.24,687.174 1475.79,687.174 1476.35,687.174 1476.91,687.174 1477.47,687.174 1478.03,687.174 1478.59,687.174 1479.15,687.174 1479.71,687.174 1480.27,687.174 1480.83,687.174 1481.39,687.174 1481.95,687.174 1482.51,687.174 1483.07,687.174 1483.62,687.174 1484.18,687.174 1484.74,687.174 1485.3,687.174 1485.86,687.174 1486.42,687.174 1486.98,687.174 1487.54,687.174 1488.1,687.174 1488.66,687.174 1489.22,687.174 1489.78,687.174 1490.34,687.174 1490.89,687.174 1491.45,687.174 1492.01,687.174 1492.57,687.174 1493.13,687.174 1493.69,687.174 1494.25,687.174 1494.81,687.174 1495.37,687.174 1495.93,687.174 1496.49,687.174 1497.05,687.174 1497.61,687.174 1498.16,687.174 1498.72,687.174 1499.28,687.174 1499.84,687.174 1500.4,687.174 1500.96,687.174 1501.52,687.174 1502.08,687.174 1502.64,687.174 1503.2,687.174 1503.76,687.174 1504.32,687.174 1504.88,687.174 1505.44,687.174 1505.99,687.174 1506.55,687.174 1507.11,687.174 1507.67,687.174 1508.23,687.174 1508.79,687.174 1509.35,687.174 1509.91,687.174 1510.47,687.174 1511.03,687.174 1511.59,687.174 1512.15,687.174 1512.71,687.174 1513.26,687.174 1513.82,687.174 1514.38,687.174 1514.94,687.174 1515.5,687.174 1516.06,687.174 1516.62,687.174 1517.18,687.174 1517.74,687.174 1518.3,687.174 1518.86,687.174 1519.42,687.174 1519.98,687.174 1520.53,687.174 1521.09,687.174 1521.65,687.174 1522.21,687.174 1522.77,687.174 1523.33,687.174 1523.89,687.174 1524.45,687.174 1525.01,687.174 1525.57,687.174 1526.13,687.174 1526.69,687.174 1527.25,687.174 1527.81,687.174 1528.36,687.174 1528.92,687.174 1529.48,687.174 1530.04,687.174 1530.6,687.174 1531.16,687.174 1531.72,687.174 1532.28,687.174 1532.84,687.174 1533.4,687.174 1533.96,687.174 1534.52,687.174 1535.08,687.174 1535.63,687.174 1536.19,687.174 1536.75,687.174 1537.31,687.174 1537.87,687.174 1538.43,687.174 1538.99,687.174 1539.55,687.174 1540.11,687.174 1540.67,687.174 1541.23,687.174 1541.79,687.174 1542.35,687.174 1542.9,687.174 1543.46,687.174 1544.02,687.174 1544.58,687.174 1545.14,687.174 1545.7,687.174 1546.26,687.174 1546.82,687.174 1547.38,687.174 1547.94,687.174 1548.5,687.174 1549.06,687.174 1549.62,687.174 1550.18,687.174 1550.73,687.174 1551.29,687.174 1551.85,687.174 1552.41,687.174 1552.97,687.174 1553.53,687.174 1554.09,687.174 1554.65,687.174 1555.21,687.174 1555.77,687.174 1556.33,687.174 1556.89,687.174 1557.45,687.174 1558,687.174 1558.56,687.174 1559.12,687.174 1559.68,687.174 1560.24,687.174 1560.8,687.174 1561.36,687.174 1561.92,687.174 1562.48,687.174 1563.04,687.174 1563.6,687.174 1564.16,687.174 1564.72,687.174 1565.28,687.174 1565.83,687.174 1566.39,687.174 1566.95,687.174 1567.51,687.174 1568.07,687.174 1568.63,687.174 1569.19,687.174 1569.75,687.174 1570.31,687.174 1570.87,687.174 1571.43,687.174 1571.99,687.174 1572.55,687.174 1573.1,687.174 1573.66,687.174 1574.22,687.174 1574.78,687.174 1575.34,687.174 1575.9,687.174 1576.46,687.174 1577.02,687.174 1577.58,687.174 1578.14,687.174 1578.7,687.174 1579.26,687.174 1579.82,687.174 1580.37,687.174 1580.93,687.174 1581.49,687.174 1582.05,687.174 1582.61,687.174 1583.17,687.174 1583.73,687.174 1584.29,687.174 1584.85,687.174 1585.41,687.174 1585.97,687.174 1586.53,687.174 1587.09,687.174 1587.65,687.174 1588.2,687.174 1588.76,687.174 1589.32,687.174 1589.88,687.174 1590.44,687.174 1591,687.174 1591.56,687.174 1592.12,687.174 1592.68,687.174 1593.24,687.174 1593.8,687.174 1594.36,687.174 1594.92,687.174 1595.47,687.174 1596.03,687.174 1596.59,687.174 1597.15,687.174 1597.71,687.174 1598.27,687.174 1598.83,687.174 1599.39,687.174 1599.95,687.174 1600.51,687.174 1601.07,687.174 1601.63,687.174 1602.19,687.174 1602.74,687.174 1603.3,687.174 1603.86,687.174 1604.42,687.174 1604.98,687.174 1605.54,687.174 1606.1,687.174 1606.66,687.174 1607.22,687.174 1607.78,687.174 1608.34,687.174 1608.9,687.174 1609.46,687.174 1610.02,687.174 1610.57,687.174 1611.13,687.174 1611.69,687.174 1612.25,687.174 1612.81,687.174 1613.37,687.174 1613.93,687.174 1614.49,687.174 1615.05,687.174 1615.61,687.174 1616.17,687.174 1616.73,687.174 1617.29,687.174 1617.84,687.174 1618.4,687.174 1618.96,687.174 1619.52,687.174 1620.08,687.174 1620.64,687.174 1621.2,687.174 1621.76,687.174 1622.32,687.174 1622.88,687.174 1623.44,687.174 1624,687.174 1624.56,687.174 1625.11,687.174 1625.67,687.174 1626.23,687.174 1626.79,687.174 1627.35,687.174 1627.91,687.174 1628.47,687.174 1629.03,687.174 1629.59,687.174 1630.15,687.174 1630.71,687.174 1631.27,687.174 1631.83,687.174 1632.39,687.174 1632.94,687.174 1633.5,687.174 1634.06,687.174 1634.62,687.174 1635.18,687.174 1635.74,687.174 1636.3,687.174 1636.86,687.174 1637.42,687.174 1637.98,687.174 1638.54,687.174 1639.1,687.174 1639.66,687.174 1640.21,687.174 1640.77,687.174 1641.33,687.174 1641.89,687.174 1642.45,687.174 1643.01,687.174 1643.57,687.174 1644.13,687.174 1644.69,687.174 1645.25,687.174 1645.81,687.174 1646.37,687.174 1646.93,687.174 1647.48,687.174 1648.04,687.174 1648.6,687.174 1649.16,687.174 1649.72,687.174 1650.28,687.174 1650.84,687.174 1651.4,687.174 1651.96,687.174 1652.52,687.174 1653.08,687.174 1653.64,687.174 1654.2,687.174 1654.76,687.174 1655.31,687.174 1655.87,687.174 1656.43,687.174 1656.99,687.174 1657.55,687.174 1658.11,687.174 1658.67,687.174 1659.23,687.174 1659.79,687.174 1660.35,687.174 1660.91,687.174 1661.47,687.174 1662.03,687.174 1662.58,687.174 1663.14,687.174 1663.7,687.174 1664.26,687.174 1664.82,687.174 1665.38,687.174 1665.94,687.174 1666.5,687.174 1667.06,687.174 1667.62,687.174 1668.18,687.174 1668.74,687.174 1669.3,687.174 1669.85,687.174 1670.41,687.174 1670.97,687.174 1671.53,687.174 1672.09,687.174 1672.65,687.174 1673.21,687.174 1673.77,687.174 1674.33,687.174 1674.89,687.174 1675.45,687.174 1676.01,687.174 1676.57,687.174 1677.13,687.174 1677.68,687.174 1678.24,687.174 1678.8,687.174 1679.36,687.174 1679.92,687.174 1680.48,687.174 1681.04,687.174 1681.6,687.174 1682.16,687.174 1682.72,687.174 1683.28,687.174 1683.84,687.174 1684.4,687.174 1684.95,687.174 1685.51,687.174 1686.07,687.174 1686.63,687.174 1687.19,687.174 1687.75,687.174 1688.31,687.174 1688.87,687.174 1689.43,687.174 1689.99,687.174 1690.55,687.174 1691.11,687.174 1691.67,687.174 1692.23,687.174 1692.78,687.174 1693.34,687.174 1693.9,687.174 1694.46,687.174 1695.02,687.174 1695.58,687.174 1696.14,687.174 1696.7,687.174 1697.26,687.174 1697.82,687.174 1698.38,687.174 1698.94,687.174 1699.5,687.174 1700.05,687.174 1700.61,687.174 1701.17,687.174 1701.73,687.174 1702.29,687.174 1702.85,687.174 1703.41,687.174 1703.97,687.174 1704.53,687.174 1705.09,687.174 1705.65,687.174 1706.21,687.174 1706.77,687.174 1707.32,687.174 1707.88,687.174 1708.44,687.174 1709,687.174 1709.56,687.174 1710.12,687.174 1710.68,687.174 1711.24,687.174 1711.8,687.174 1712.36,687.174 1712.92,687.174 1713.48,687.174 1714.04,687.174 1714.6,687.174 1715.15,687.174 1715.71,687.174 1716.27,687.174 1716.83,687.174 1717.39,687.174 1717.95,687.174 1718.51,687.174 1719.07,687.174 1719.63,687.174 1720.19,687.174 1720.75,687.174 1721.31,687.174 1721.87,687.174 1722.42,687.174 1722.98,687.174 1723.54,687.174 1724.1,687.174 1724.66,687.174 1725.22,687.174 1725.78,687.174 1726.34,687.174 1726.9,687.174 1727.46,687.174 1728.02,687.174 1728.58,687.174 1729.14,687.174 1729.69,687.174 1730.25,687.174 1730.81,687.174 1731.37,687.174 1731.93,687.174 1732.49,687.174 1733.05,687.174 1733.61,687.174 1734.17,687.174 1734.73,687.174 1735.29,687.174 1735.85,687.174 1736.41,687.174 1736.97,687.174 1737.52,687.174 1738.08,687.174 1738.64,687.174 1739.2,687.174 1739.76,687.174 1740.32,687.174 1740.88,687.174 1741.44,687.174 1742,687.174 1742.56,687.174 1743.12,687.174 1743.68,687.174 1744.24,687.174 1744.79,687.174 1745.35,687.174 1745.91,687.174 1746.47,687.174 1747.03,687.174 1747.59,687.174 1748.15,687.174 1748.71,687.174 1749.27,687.174 1749.83,687.174 1750.39,687.174 1750.95,687.174 1751.51,687.174 1752.06,687.174 1752.62,687.174 1753.18,687.174 1753.74,687.174 1754.3,687.174 1754.86,687.174 1755.42,687.174 1755.98,687.174 1756.54,687.174 1757.1,687.174 1757.66,687.174 1758.22,687.174 1758.78,687.174 1759.34,687.174 1759.89,687.174 1760.45,687.174 1761.01,687.174 1761.57,687.174 1762.13,687.174 1762.69,687.174 1763.25,687.174 1763.81,687.174 1764.37,687.174 1764.93,687.174 1765.49,687.174 1766.05,687.174 1766.61,687.174 1767.16,687.174 1767.72,687.174 1768.28,687.174 1768.84,687.174 1769.4,687.174 1769.96,687.174 1770.52,687.174 1771.08,687.174 1771.64,687.174 1772.2,687.174 1772.76,687.174 1773.32,687.174 1773.88,687.174 1774.43,687.174 1774.99,687.174 1775.55,687.174 1776.11,687.174 1776.67,687.174 1777.23,687.174 1777.79,687.174 1778.35,687.174 1778.91,687.174 1779.47,687.174 1780.03,687.174 1780.59,687.174 1781.15,687.174 1781.71,687.174 1782.26,687.174 1782.82,687.174 1783.38,687.174 1783.94,687.174 1784.5,687.174 1785.06,687.174 1785.62,687.174 1786.18,687.174 1786.74,687.174 1787.3,687.174 1787.86,687.174 1788.42,687.174 1788.98,687.174 1789.53,687.174 1790.09,687.174 1790.65,687.174 1791.21,687.174 1791.77,687.174 1792.33,687.174 1792.89,687.174 1793.45,687.174 1794.01,687.174 1794.57,687.174 1795.13,687.174 1795.69,687.174 1796.25,687.174 1796.8,687.174 1797.36,687.174 1797.92,687.174 1798.48,687.174 1799.04,687.174 1799.6,687.174 1800.16,687.174 1800.72,687.174 1801.28,687.174 1801.84,687.174 1802.4,687.174 1802.96,687.174 1803.52,687.174 1804.08,687.174 1804.63,687.174 1805.19,687.174 1805.75,687.174 1806.31,687.174 1806.87,687.174 1807.43,687.174 1807.99,687.174 1808.55,687.174 1809.11,687.174 1809.67,687.174 1810.23,687.174 1810.79,687.174 1811.35,687.174 1811.9,687.174 1812.46,687.174 1813.02,687.174 1813.58,687.174 1814.14,687.174 1814.7,687.174 1815.26,687.174 1815.82,687.174 1816.38,687.174 1816.94,687.174 1817.5,687.174 1818.06,687.174 1818.62,687.174 1819.18,687.174 1819.73,687.174 1820.29,687.174 1820.85,687.174 1821.41,687.174 1821.97,687.174 1822.53,687.174 1823.09,687.174 1823.65,687.174 1824.21,687.174 1824.77,687.174 1825.33,687.174 1825.89,687.174 1826.45,687.174 1827,687.174 1827.56,687.174 1828.12,687.174 1828.68,687.174 1829.24,687.174 1829.8,687.174 1830.36,687.174 1830.92,687.174 1831.48,687.174 1832.04,687.174 1832.6,687.174 1833.16,687.174 1833.72,687.174 1834.27,687.174 1834.83,687.174 1835.39,687.174 1835.95,687.174 1836.51,687.174 1837.07,687.174 1837.63,687.174 1838.19,687.174 \"/>\n<path clip-path=\"url(#clip013)\" d=\"M720.247 684.443 L720.806 684.443 L721.365 684.443 L721.924 684.443 L722.484 684.443 L723.043 684.443 L723.602 684.443 L724.161 684.443 L724.721 684.443 L725.28 684.443 L725.839 684.443 L726.398 684.443 L726.958 684.443 L727.517 684.443 L728.076 684.443 L728.635 684.443 L729.195 684.443 L729.754 684.443 L730.313 684.443 L730.872 684.443 L731.432 684.443 L731.991 684.443 L732.55 684.443 L733.109 684.443 L733.669 684.443 L734.228 684.443 L734.787 684.443 L735.346 684.443 L735.906 684.443 L736.465 684.443 L737.024 684.443 L737.583 684.443 L738.143 684.443 L738.702 684.443 L739.261 684.443 L739.82 684.443 L740.38 684.443 L740.939 684.443 L741.498 684.443 L742.057 684.443 L742.617 684.443 L743.176 684.443 L743.735 684.443 L744.294 684.443 L744.854 684.443 L745.413 684.443 L745.972 684.443 L746.531 684.443 L747.091 684.443 L747.65 684.443 L748.209 684.443 L748.768 684.443 L749.328 684.443 L749.887 684.443 L750.446 684.443 L751.005 684.443 L751.565 684.443 L752.124 684.443 L752.683 684.443 L753.242 684.443 L753.802 684.443 L754.361 684.443 L754.92 684.443 L755.479 684.443 L756.039 684.443 L756.598 684.443 L757.157 684.443 L757.716 684.443 L758.276 684.443 L758.835 684.443 L759.394 684.443 L759.953 684.443 L760.513 684.443 L761.072 684.443 L761.631 684.443 L762.19 684.443 L762.75 684.443 L763.309 684.443 L763.868 684.443 L764.427 684.443 L764.987 684.443 L765.546 684.443 L766.105 684.443 L766.664 684.443 L767.224 684.443 L767.783 684.443 L768.342 684.443 L768.901 684.443 L769.461 684.443 L770.02 684.443 L770.579 684.443 L771.138 684.443 L771.698 684.443 L772.257 684.443 L772.816 684.443 L773.375 684.443 L773.935 684.443 L774.494 684.443 L775.053 684.443 L775.612 684.443 L776.172 684.443 L776.731 684.443 L777.29 684.443 L777.849 684.443 L778.409 684.443 L778.968 684.443 L779.527 684.443 L780.086 684.443 L780.646 684.443 L781.205 684.443 L781.764 684.443 L782.323 684.443 L782.883 684.443 L783.442 684.443 L784.001 684.443 L784.56 684.443 L785.12 684.443 L785.679 684.443 L786.238 684.443 L786.797 684.443 L787.357 684.443 L787.916 684.443 L788.475 684.443 L789.034 684.443 L789.594 684.443 L790.153 684.443 L790.712 684.443 L791.271 684.443 L791.831 684.443 L792.39 684.443 L792.949 684.443 L793.508 684.443 L794.068 684.443 L794.627 684.443 L795.186 684.443 L795.745 684.443 L796.305 684.443 L796.864 684.443 L797.423 684.443 L797.982 684.443 L798.542 684.443 L799.101 684.443 L799.66 684.443 L800.219 684.443 L800.779 684.443 L801.338 684.443 L801.897 684.443 L802.456 684.443 L803.016 684.443 L803.575 684.443 L804.134 684.443 L804.693 684.443 L805.253 684.443 L805.812 684.443 L806.371 684.443 L806.931 684.443 L807.49 684.443 L808.049 684.443 L808.608 684.443 L809.168 684.443 L809.727 684.443 L810.286 684.443 L810.845 684.443 L811.405 684.443 L811.964 684.443 L812.523 684.443 L813.082 684.443 L813.642 684.443 L814.201 684.443 L814.76 684.443 L815.319 684.443 L815.879 684.443 L816.438 684.443 L816.997 684.443 L817.556 684.443 L818.116 684.443 L818.675 684.443 L819.234 684.443 L819.793 684.443 L820.353 684.443 L820.912 684.443 L821.471 684.443 L822.03 684.443 L822.59 684.443 L823.149 684.443 L823.708 684.443 L824.267 684.443 L824.827 684.443 L825.386 684.443 L825.945 684.443 L826.504 684.443 L827.064 684.443 L827.623 684.443 L828.182 684.443 L828.741 684.443 L829.301 684.443 L829.86 684.443 L830.419 684.443 L830.978 684.443 L831.538 684.443 L832.097 684.443 L832.656 684.443 L833.215 684.443 L833.775 684.443 L834.334 684.443 L834.893 684.443 L835.452 684.443 L836.012 684.443 L836.571 684.443 L837.13 684.443 L837.689 684.443 L838.249 684.443 L838.808 684.443 L839.367 684.443 L839.926 684.443 L840.486 684.443 L841.045 684.443 L841.604 684.443 L842.163 684.443 L842.723 684.443 L843.282 684.443 L843.841 684.443 L844.4 684.443 L844.96 684.443 L845.519 684.443 L846.078 684.443 L846.637 684.443 L847.197 684.443 L847.756 684.443 L848.315 684.443 L848.874 684.443 L849.434 684.443 L849.993 684.443 L850.552 684.443 L851.111 684.443 L851.671 684.443 L852.23 684.443 L852.789 684.443 L853.348 684.443 L853.908 684.443 L854.467 684.443 L855.026 684.443 L855.585 684.443 L856.145 684.443 L856.704 684.443 L857.263 684.443 L857.822 684.443 L858.382 684.443 L858.941 684.443 L859.5 684.443 L860.059 684.443 L860.619 684.443 L861.178 684.443 L861.737 684.443 L862.296 684.443 L862.856 684.443 L863.415 684.443 L863.974 684.443 L864.533 684.443 L865.093 684.443 L865.652 684.443 L866.211 684.443 L866.77 684.443 L867.33 684.443 L867.889 684.443 L868.448 684.443 L869.007 684.443 L869.567 684.443 L870.126 684.443 L870.685 684.443 L871.244 684.443 L871.804 684.443 L872.363 684.443 L872.922 684.443 L873.481 684.443 L874.041 684.443 L874.6 684.443 L875.159 684.443 L875.718 684.443 L876.278 684.443 L876.837 684.443 L877.396 684.443 L877.955 684.443 L878.515 684.443 L879.074 684.443 L879.633 684.443 L880.192 684.443 L880.752 684.443 L881.311 684.443 L881.87 684.443 L882.429 684.443 L882.989 684.443 L883.548 684.443 L884.107 684.443 L884.666 684.443 L885.226 684.443 L885.785 684.443 L886.344 684.443 L886.903 684.443 L887.463 684.443 L888.022 684.443 L888.581 684.443 L889.14 684.443 L889.7 684.443 L890.259 684.443 L890.818 684.443 L891.377 684.443 L891.937 684.443 L892.496 684.443 L893.055 684.443 L893.614 684.443 L894.174 684.443 L894.733 684.443 L895.292 684.443 L895.851 684.443 L896.411 684.443 L896.97 684.443 L897.529 684.443 L898.088 684.443 L898.648 684.443 L899.207 684.443 L899.766 684.443 L900.325 684.443 L900.885 684.443 L901.444 684.443 L902.003 684.443 L902.562 684.443 L903.122 684.443 L903.681 684.443 L904.24 684.443 L904.799 684.443 L905.359 684.443 L905.918 684.443 L906.477 684.443 L907.036 684.443 L907.596 684.443 L908.155 684.443 L908.714 684.443 L909.273 684.443 L909.833 684.443 L910.392 684.443 L910.951 684.443 L911.51 684.443 L912.07 684.443 L912.629 684.443 L913.188 684.443 L913.747 684.443 L914.307 684.443 L914.866 684.443 L915.425 684.443 L915.984 684.443 L916.544 684.443 L917.103 684.443 L917.662 684.443 L918.221 684.443 L918.781 684.443 L919.34 684.443 L919.899 684.443 L920.458 684.443 L921.018 684.443 L921.577 684.443 L922.136 684.443 L922.695 684.443 L923.255 684.443 L923.814 684.443 L924.373 684.443 L924.932 684.443 L925.492 684.443 L926.051 684.443 L926.61 684.443 L927.169 684.443 L927.729 684.443 L928.288 684.443 L928.847 684.443 L929.406 684.443 L929.966 684.443 L930.525 684.443 L931.084 684.443 L931.644 684.443 L932.203 684.443 L932.762 684.443 L933.321 684.443 L933.881 684.443 L934.44 684.443 L934.999 684.443 L935.558 684.443 L936.118 684.443 L936.677 684.443 L937.236 684.443 L937.795 684.443 L938.355 684.443 L938.914 684.443 L939.473 684.443 L940.032 684.443 L940.592 684.443 L941.151 684.443 L941.71 684.443 L942.269 684.443 L942.829 684.443 L943.388 684.443 L943.947 684.443 L944.506 684.443 L945.066 684.443 L945.625 684.443 L946.184 684.443 L946.743 684.443 L947.303 684.443 L947.862 684.443 L948.421 684.443 L948.98 684.443 L949.54 684.443 L950.099 684.443 L950.658 684.443 L951.217 684.443 L951.777 684.443 L952.336 684.443 L952.895 684.443 L953.454 684.443 L954.014 684.443 L954.573 684.443 L955.132 684.443 L955.691 684.443 L956.251 684.443 L956.81 684.443 L957.369 684.443 L957.928 684.443 L958.488 684.443 L959.047 684.443 L959.606 684.443 L960.165 684.443 L960.725 684.443 L961.284 684.443 L961.843 684.443 L962.402 684.443 L962.962 684.443 L963.521 684.443 L964.08 684.443 L964.639 684.443 L965.199 684.443 L965.758 684.443 L966.317 684.443 L966.876 684.443 L967.436 684.443 L967.995 684.443 L968.554 684.443 L969.113 684.443 L969.673 684.443 L970.232 684.443 L970.791 684.443 L971.35 684.443 L971.91 684.443 L972.469 684.443 L973.028 684.443 L973.587 684.443 L974.147 684.443 L974.706 684.443 L975.265 684.443 L975.824 684.443 L976.384 684.443 L976.943 684.443 L977.502 684.443 L978.061 684.443 L978.621 684.443 L979.18 684.443 L979.739 684.443 L980.298 684.443 L980.858 684.443 L981.417 684.443 L981.976 684.443 L982.535 684.443 L983.095 684.443 L983.654 684.443 L984.213 684.443 L984.772 684.443 L985.332 684.443 L985.891 684.443 L986.45 684.443 L987.009 684.443 L987.569 684.443 L988.128 684.443 L988.687 684.443 L989.246 684.443 L989.806 684.443 L990.365 684.443 L990.924 684.443 L991.483 684.443 L992.043 684.443 L992.602 684.443 L993.161 684.443 L993.72 684.443 L994.28 684.443 L994.839 684.443 L995.398 684.443 L995.957 684.443 L996.517 684.443 L997.076 684.443 L997.635 684.443 L998.194 684.443 L998.754 684.443 L999.313 684.443 L999.872 684.443 L1000.43 684.443 L1000.99 684.443 L1001.55 684.443 L1002.11 684.443 L1002.67 684.443 L1003.23 684.443 L1003.79 684.443 L1004.35 684.443 L1004.91 684.443 L1005.46 684.443 L1006.02 684.443 L1006.58 684.443 L1007.14 684.443 L1007.7 684.443 L1008.26 684.443 L1008.82 684.443 L1009.38 684.443 L1009.94 684.443 L1010.5 684.443 L1011.06 684.443 L1011.62 684.443 L1012.18 684.443 L1012.73 684.443 L1013.29 684.443 L1013.85 684.443 L1014.41 684.443 L1014.97 684.443 L1015.53 684.443 L1016.09 684.443 L1016.65 684.443 L1017.21 684.443 L1017.77 684.443 L1018.33 684.443 L1018.89 684.443 L1019.45 684.443 L1020.01 684.443 L1020.56 684.443 L1021.12 684.443 L1021.68 684.443 L1022.24 684.443 L1022.8 684.443 L1023.36 684.443 L1023.92 684.443 L1024.48 684.443 L1025.04 684.443 L1025.6 684.443 L1026.16 684.443 L1026.72 684.443 L1027.28 684.443 L1027.83 684.443 L1028.39 684.443 L1028.95 684.443 L1029.51 684.443 L1030.07 684.443 L1030.63 684.443 L1031.19 684.443 L1031.75 684.443 L1032.31 684.443 L1032.87 684.443 L1033.43 684.443 L1033.99 684.443 L1034.55 684.443 L1035.1 684.443 L1035.66 684.443 L1036.22 684.443 L1036.78 684.443 L1037.34 684.443 L1037.9 684.443 L1038.46 684.443 L1039.02 684.443 L1039.58 684.443 L1040.14 684.443 L1040.7 684.443 L1041.26 684.443 L1041.82 684.443 L1042.38 684.443 L1042.93 684.443 L1043.49 684.443 L1044.05 684.443 L1044.61 684.443 L1045.17 684.443 L1045.73 684.443 L1046.29 684.443 L1046.85 684.443 L1047.41 684.443 L1047.97 684.443 L1048.53 684.443 L1049.09 684.443 L1049.65 684.443 L1050.2 684.443 L1050.76 684.443 L1051.32 684.443 L1051.88 684.443 L1052.44 684.443 L1053 684.443 L1053.56 684.443 L1054.12 684.443 L1054.68 684.443 L1055.24 684.443 L1055.8 684.443 L1056.36 684.443 L1056.92 684.443 L1057.48 684.443 L1058.03 684.443 L1058.59 684.443 L1059.15 684.443 L1059.71 684.443 L1060.27 684.443 L1060.83 684.443 L1061.39 684.443 L1061.95 684.443 L1062.51 684.443 L1063.07 684.443 L1063.63 684.443 L1064.19 684.443 L1064.75 684.443 L1065.3 684.443 L1065.86 684.443 L1066.42 684.443 L1066.98 684.443 L1067.54 684.443 L1068.1 684.443 L1068.66 684.443 L1069.22 684.443 L1069.78 684.443 L1070.34 684.443 L1070.9 684.443 L1071.46 684.443 L1072.02 684.443 L1072.57 684.443 L1073.13 684.443 L1073.69 684.443 L1074.25 684.443 L1074.81 684.443 L1075.37 684.443 L1075.93 684.443 L1076.49 684.443 L1077.05 684.443 L1077.61 684.443 L1078.17 684.443 L1078.73 684.443 L1079.29 684.443 L1079.85 684.443 L1080.4 684.443 L1080.96 684.443 L1081.52 684.443 L1082.08 684.443 L1082.64 684.443 L1083.2 684.443 L1083.76 684.443 L1084.32 684.443 L1084.88 684.443 L1085.44 684.443 L1086 684.443 L1086.56 684.443 L1087.12 684.443 L1087.67 684.443 L1088.23 684.443 L1088.79 684.443 L1089.35 684.443 L1089.91 684.443 L1090.47 684.443 L1091.03 684.443 L1091.59 684.443 L1092.15 684.443 L1092.71 684.443 L1093.27 684.443 L1093.83 684.443 L1094.39 684.443 L1094.94 684.443 L1095.5 684.443 L1096.06 684.443 L1096.62 684.443 L1097.18 684.443 L1097.74 684.443 L1098.3 684.443 L1098.86 684.443 L1099.42 684.443 L1099.98 684.443 L1100.54 684.443 L1101.1 684.443 L1101.66 684.443 L1102.22 684.443 L1102.77 684.443 L1103.33 684.443 L1103.89 684.443 L1104.45 684.443 L1105.01 684.443 L1105.57 684.443 L1106.13 684.443 L1106.69 684.443 L1107.25 684.443 L1107.81 684.443 L1108.37 684.443 L1108.93 684.443 L1109.49 684.443 L1110.04 684.443 L1110.6 684.443 L1111.16 684.443 L1111.72 684.443 L1112.28 684.443 L1112.84 684.443 L1113.4 684.443 L1113.96 684.443 L1114.52 684.443 L1115.08 684.443 L1115.64 684.443 L1116.2 684.443 L1116.76 684.443 L1117.31 684.443 L1117.87 684.443 L1118.43 684.443 L1118.99 684.443 L1119.55 684.443 L1120.11 684.443 L1120.67 684.443 L1121.23 684.443 L1121.79 684.443 L1122.35 684.443 L1122.91 684.443 L1123.47 684.443 L1124.03 684.443 L1124.59 684.443 L1125.14 684.443 L1125.7 684.443 L1126.26 684.443 L1126.82 684.443 L1127.38 684.443 L1127.94 684.443 L1128.5 684.443 L1129.06 684.443 L1129.62 684.443 L1130.18 684.443 L1130.74 684.443 L1131.3 684.443 L1131.86 684.443 L1132.41 684.443 L1132.97 684.443 L1133.53 684.443 L1134.09 684.443 L1134.65 684.443 L1135.21 684.443 L1135.77 684.443 L1136.33 684.443 L1136.89 684.443 L1137.45 684.443 L1138.01 684.443 L1138.57 684.443 L1139.13 684.443 L1139.68 684.443 L1140.24 684.443 L1140.8 684.443 L1141.36 684.443 L1141.92 684.443 L1142.48 684.443 L1143.04 684.443 L1143.6 684.443 L1144.16 684.443 L1144.72 684.443 L1145.28 684.443 L1145.84 684.443 L1146.4 684.443 L1146.96 684.443 L1147.51 684.443 L1148.07 684.443 L1148.63 684.443 L1149.19 684.443 L1149.75 684.443 L1150.31 684.443 L1150.87 684.443 L1151.43 684.443 L1151.99 684.443 L1152.55 684.443 L1153.11 684.443 L1153.67 684.443 L1154.23 684.443 L1154.78 684.443 L1155.34 684.443 L1155.9 684.443 L1156.46 684.443 L1157.02 684.443 L1157.58 684.443 L1158.14 684.443 L1158.7 684.443 L1159.26 684.443 L1159.82 684.443 L1160.38 684.443 L1160.94 684.443 L1161.5 684.443 L1162.05 684.443 L1162.61 684.443 L1163.17 684.443 L1163.73 684.443 L1164.29 684.443 L1164.85 684.443 L1165.41 684.443 L1165.97 684.443 L1166.53 684.443 L1167.09 684.443 L1167.65 684.443 L1168.21 684.443 L1168.77 684.443 L1169.33 684.443 L1169.88 684.443 L1170.44 684.443 L1171 684.443 L1171.56 684.443 L1172.12 684.443 L1172.68 684.443 L1173.24 684.443 L1173.8 684.443 L1174.36 684.443 L1174.92 684.443 L1175.48 684.443 L1176.04 684.443 L1176.6 684.443 L1177.15 684.443 L1177.71 684.443 L1178.27 684.443 L1178.83 684.443 L1179.39 684.443 L1179.95 684.443 L1180.51 684.443 L1181.07 684.443 L1181.63 684.443 L1182.19 684.443 L1182.75 684.443 L1183.31 684.443 L1183.87 684.443 L1184.43 684.443 L1184.98 684.443 L1185.54 684.443 L1186.1 684.443 L1186.66 684.443 L1187.22 684.443 L1187.78 684.443 L1188.34 684.443 L1188.9 684.443 L1189.46 684.443 L1190.02 684.443 L1190.58 684.443 L1191.14 684.443 L1191.7 684.443 L1192.25 684.443 L1192.81 684.443 L1193.37 684.443 L1193.93 684.443 L1194.49 684.443 L1195.05 684.443 L1195.61 684.443 L1196.17 684.443 L1196.73 684.443 L1197.29 684.443 L1197.85 684.443 L1198.41 684.443 L1198.97 684.443 L1199.52 684.443 L1200.08 684.443 L1200.64 684.443 L1201.2 684.443 L1201.76 684.443 L1202.32 684.443 L1202.88 684.443 L1203.44 684.443 L1204 684.443 L1204.56 684.443 L1205.12 684.443 L1205.68 684.443 L1206.24 684.443 L1206.8 684.443 L1207.35 684.443 L1207.91 684.443 L1208.47 684.443 L1209.03 684.443 L1209.59 684.443 L1210.15 684.443 L1210.71 684.443 L1211.27 684.443 L1211.83 684.443 L1212.39 684.443 L1212.95 684.443 L1213.51 684.443 L1214.07 684.443 L1214.62 684.443 L1215.18 684.443 L1215.74 684.443 L1216.3 684.443 L1216.86 684.443 L1217.42 684.443 L1217.98 684.443 L1218.54 684.443 L1219.1 684.443 L1219.66 684.443 L1220.22 684.443 L1220.78 684.443 L1221.34 684.443 L1221.89 684.443 L1222.45 684.443 L1223.01 684.443 L1223.57 684.443 L1224.13 684.443 L1224.69 684.443 L1225.25 684.443 L1225.81 684.443 L1226.37 684.443 L1226.93 684.443 L1227.49 684.443 L1228.05 684.443 L1228.61 684.443 L1229.17 684.443 L1229.72 684.443 L1230.28 684.443 L1230.84 684.443 L1231.4 684.443 L1231.96 684.443 L1232.52 684.443 L1233.08 684.443 L1233.64 684.443 L1234.2 684.443 L1234.76 684.443 L1235.32 684.443 L1235.88 684.443 L1236.44 684.443 L1236.99 684.443 L1237.55 684.443 L1238.11 684.443 L1238.67 684.443 L1239.23 684.443 L1239.79 684.443 L1240.35 684.443 L1240.91 684.443 L1241.47 684.443 L1242.03 684.443 L1242.59 684.443 L1243.15 684.443 L1243.71 684.443 L1244.26 684.443 L1244.82 684.443 L1245.38 684.443 L1245.94 684.443 L1246.5 684.443 L1247.06 684.443 L1247.62 684.443 L1248.18 684.443 L1248.74 684.443 L1249.3 684.443 L1249.86 684.443 L1250.42 684.443 L1250.98 684.443 L1251.54 684.443 L1252.09 684.443 L1252.65 684.443 L1253.21 684.443 L1253.77 684.443 L1254.33 684.443 L1254.89 684.443 L1255.45 684.443 L1256.01 684.443 L1256.57 684.443 L1257.13 684.443 L1257.69 684.443 L1258.25 684.443 L1258.81 684.443 L1259.36 684.443 L1259.92 684.443 L1260.48 684.443 L1261.04 684.443 L1261.6 684.443 L1262.16 684.443 L1262.72 684.443 L1263.28 684.443 L1263.84 684.443 L1264.4 684.443 L1264.96 684.443 L1265.52 684.443 L1266.08 684.443 L1266.63 684.443 L1267.19 684.443 L1267.75 684.443 L1268.31 684.443 L1268.87 684.443 L1269.43 684.443 L1269.99 684.443 L1270.55 684.443 L1271.11 684.443 L1271.67 684.443 L1272.23 684.443 L1272.79 684.443 L1273.35 684.443 L1273.91 684.443 L1274.46 684.443 L1275.02 684.443 L1275.58 684.443 L1276.14 684.443 L1276.7 684.443 L1277.26 684.443 L1277.82 684.443 L1278.38 684.443 L1278.94 684.443 L1279.5 684.443 L1280.06 684.443 L1280.62 684.443 L1281.18 684.443 L1281.73 684.443 L1282.29 684.443 L1282.85 684.443 L1283.41 684.443 L1283.97 684.443 L1284.53 684.443 L1285.09 684.443 L1285.65 684.443 L1286.21 684.443 L1286.77 684.443 L1287.33 684.443 L1287.89 684.443 L1288.45 684.443 L1289 684.443 L1289.56 684.443 L1290.12 684.443 L1290.68 684.443 L1291.24 684.443 L1291.8 684.443 L1292.36 684.443 L1292.92 684.443 L1293.48 684.443 L1294.04 684.443 L1294.6 684.443 L1295.16 684.443 L1295.72 684.443 L1296.28 684.443 L1296.83 684.443 L1297.39 684.443 L1297.95 684.443 L1298.51 684.443 L1299.07 684.443 L1299.63 684.443 L1300.19 684.443 L1300.75 684.443 L1301.31 684.443 L1301.87 684.443 L1302.43 684.443 L1302.99 684.443 L1303.55 684.443 L1304.1 684.443 L1304.66 684.443 L1305.22 684.443 L1305.78 684.443 L1306.34 684.443 L1306.9 684.443 L1307.46 684.443 L1308.02 684.443 L1308.58 684.443 L1309.14 684.443 L1309.7 684.443 L1310.26 684.443 L1310.82 684.443 L1311.38 684.443 L1311.93 684.443 L1312.49 684.443 L1313.05 684.443 L1313.61 684.443 L1314.17 684.443 L1314.73 684.443 L1315.29 684.443 L1315.85 684.443 L1316.41 684.443 L1316.97 684.443 L1317.53 684.443 L1318.09 684.443 L1318.65 684.443 L1319.2 684.443 L1319.76 684.443 L1320.32 684.443 L1320.88 684.443 L1321.44 684.443 L1322 684.443 L1322.56 684.443 L1323.12 684.443 L1323.68 684.443 L1324.24 684.443 L1324.8 684.443 L1325.36 684.443 L1325.92 684.443 L1326.47 684.443 L1327.03 684.443 L1327.59 684.443 L1328.15 684.443 L1328.71 684.443 L1329.27 684.443 L1329.83 684.443 L1330.39 684.443 L1330.95 684.443 L1331.51 684.443 L1332.07 684.443 L1332.63 684.443 L1333.19 684.443 L1333.75 684.443 L1334.3 684.443 L1334.86 684.443 L1335.42 684.443 L1335.98 684.443 L1336.54 684.443 L1337.1 684.443 L1337.66 684.443 L1338.22 684.443 L1338.78 684.443 L1339.34 684.443 L1339.9 684.443 L1340.46 684.443 L1341.02 684.443 L1341.57 684.443 L1342.13 684.443 L1342.69 684.443 L1343.25 684.443 L1343.81 684.443 L1344.37 684.443 L1344.93 684.443 L1345.49 684.443 L1346.05 684.443 L1346.61 684.443 L1347.17 684.443 L1347.73 684.443 L1348.29 684.443 L1348.84 684.443 L1349.4 684.443 L1349.96 684.443 L1350.52 684.443 L1351.08 684.443 L1351.64 684.443 L1352.2 684.443 L1352.76 684.443 L1353.32 684.443 L1353.88 684.443 L1354.44 684.443 L1355 684.443 L1355.56 684.443 L1356.12 684.443 L1356.67 684.443 L1357.23 684.443 L1357.79 684.443 L1358.35 684.443 L1358.91 684.443 L1359.47 684.443 L1360.03 684.443 L1360.59 684.443 L1361.15 684.443 L1361.71 684.443 L1362.27 684.443 L1362.83 684.443 L1363.39 684.443 L1363.94 684.443 L1364.5 684.443 L1365.06 684.443 L1365.62 684.443 L1366.18 684.443 L1366.74 684.443 L1367.3 684.443 L1367.86 684.443 L1368.42 684.443 L1368.98 684.443 L1369.54 684.443 L1370.1 684.443 L1370.66 684.443 L1371.21 684.443 L1371.77 684.443 L1372.33 684.443 L1372.89 684.443 L1373.45 684.443 L1374.01 684.443 L1374.57 684.443 L1375.13 684.443 L1375.69 684.443 L1376.25 684.443 L1376.81 684.443 L1377.37 684.443 L1377.93 684.443 L1378.49 684.443 L1379.04 684.443 L1379.6 684.443 L1380.16 684.443 L1380.72 684.443 L1381.28 684.443 L1381.84 684.443 L1382.4 684.443 L1382.96 684.443 L1383.52 684.443 L1384.08 684.443 L1384.64 684.443 L1385.2 684.443 L1385.76 684.443 L1386.31 684.443 L1386.87 684.443 L1387.43 684.443 L1387.99 684.443 L1388.55 684.443 L1389.11 684.443 L1389.67 684.443 L1390.23 684.443 L1390.79 684.443 L1391.35 684.443 L1391.91 684.443 L1392.47 684.443 L1393.03 684.443 L1393.58 684.443 L1394.14 684.443 L1394.7 684.443 L1395.26 684.443 L1395.82 684.443 L1396.38 684.443 L1396.94 684.443 L1397.5 684.443 L1398.06 684.443 L1398.62 684.443 L1399.18 684.443 L1399.74 684.443 L1400.3 684.443 L1400.86 684.443 L1401.41 684.443 L1401.97 684.443 L1402.53 684.443 L1403.09 684.443 L1403.65 684.443 L1404.21 684.443 L1404.77 684.443 L1405.33 684.443 L1405.89 684.443 L1406.45 684.443 L1407.01 684.443 L1407.57 684.443 L1408.13 684.443 L1408.68 684.443 L1409.24 684.443 L1409.8 684.443 L1410.36 684.443 L1410.92 684.443 L1411.48 684.443 L1412.04 684.443 L1412.6 684.443 L1413.16 684.443 L1413.72 684.443 L1414.28 684.443 L1414.84 684.443 L1415.4 684.443 L1415.95 684.443 L1416.51 684.443 L1417.07 684.443 L1417.63 684.443 L1418.19 684.443 L1418.75 684.443 L1419.31 684.443 L1419.87 684.443 L1420.43 684.443 L1420.99 684.443 L1421.55 684.443 L1422.11 684.443 L1422.67 684.443 L1423.23 684.443 L1423.78 684.443 L1424.34 684.443 L1424.9 684.443 L1425.46 684.443 L1426.02 684.443 L1426.58 684.443 L1427.14 684.443 L1427.7 684.443 L1428.26 684.443 L1428.82 684.443 L1429.38 684.443 L1429.94 684.443 L1430.5 684.443 L1431.05 684.443 L1431.61 684.443 L1432.17 684.443 L1432.73 684.443 L1433.29 684.443 L1433.85 684.443 L1434.41 684.443 L1434.97 684.443 L1435.53 684.443 L1436.09 684.443 L1436.65 684.443 L1437.21 684.443 L1437.77 684.443 L1438.33 684.443 L1438.88 684.443 L1439.44 684.443 L1440 684.443 L1440.56 684.443 L1441.12 684.443 L1441.68 684.443 L1442.24 684.443 L1442.8 684.443 L1443.36 684.443 L1443.92 684.443 L1444.48 684.443 L1445.04 684.443 L1445.6 684.443 L1446.15 684.443 L1446.71 684.443 L1447.27 684.443 L1447.83 684.443 L1448.39 684.443 L1448.95 684.443 L1449.51 684.443 L1450.07 684.443 L1450.63 684.443 L1451.19 684.443 L1451.75 684.443 L1452.31 684.443 L1452.87 684.443 L1453.42 684.443 L1453.98 684.443 L1454.54 684.443 L1455.1 684.443 L1455.66 684.443 L1456.22 684.443 L1456.78 684.443 L1457.34 684.443 L1457.9 684.443 L1458.46 684.443 L1459.02 684.443 L1459.58 684.443 L1460.14 684.443 L1460.7 684.443 L1461.25 684.443 L1461.81 684.443 L1462.37 684.443 L1462.93 684.443 L1463.49 684.443 L1464.05 684.443 L1464.61 684.443 L1465.17 684.443 L1465.73 684.443 L1466.29 684.443 L1466.85 684.443 L1467.41 684.443 L1467.97 684.443 L1468.52 684.443 L1469.08 684.443 L1469.64 684.443 L1470.2 684.443 L1470.76 684.443 L1471.32 684.443 L1471.88 684.443 L1472.44 684.443 L1473 684.443 L1473.56 684.443 L1474.12 684.443 L1474.68 684.443 L1475.24 684.443 L1475.79 684.443 L1476.35 684.443 L1476.91 684.443 L1477.47 684.443 L1478.03 684.443 L1478.59 684.443 L1479.15 684.443 L1479.71 684.443 L1480.27 684.443 L1480.83 684.443 L1481.39 684.443 L1481.95 684.443 L1482.51 684.443 L1483.07 684.443 L1483.62 684.443 L1484.18 684.443 L1484.74 684.443 L1485.3 684.443 L1485.86 684.443 L1486.42 684.443 L1486.98 684.443 L1487.54 684.443 L1488.1 684.443 L1488.66 684.443 L1489.22 684.443 L1489.78 684.443 L1490.34 684.443 L1490.89 684.443 L1491.45 684.443 L1492.01 684.443 L1492.57 684.443 L1493.13 684.443 L1493.69 684.443 L1494.25 684.443 L1494.81 684.443 L1495.37 684.443 L1495.93 684.443 L1496.49 684.443 L1497.05 684.443 L1497.61 684.443 L1498.16 684.443 L1498.72 684.443 L1499.28 684.443 L1499.84 684.443 L1500.4 684.443 L1500.96 684.443 L1501.52 684.443 L1502.08 684.443 L1502.64 684.443 L1503.2 684.443 L1503.76 684.443 L1504.32 684.443 L1504.88 684.443 L1505.44 684.443 L1505.99 684.443 L1506.55 684.443 L1507.11 684.443 L1507.67 684.443 L1508.23 684.443 L1508.79 684.443 L1509.35 684.443 L1509.91 684.443 L1510.47 684.443 L1511.03 684.443 L1511.59 684.443 L1512.15 684.443 L1512.71 684.443 L1513.26 684.443 L1513.82 684.443 L1514.38 684.443 L1514.94 684.443 L1515.5 684.443 L1516.06 684.443 L1516.62 684.443 L1517.18 684.443 L1517.74 684.443 L1518.3 684.443 L1518.86 684.443 L1519.42 684.443 L1519.98 684.443 L1520.53 684.443 L1521.09 684.443 L1521.65 684.443 L1522.21 684.443 L1522.77 684.443 L1523.33 684.443 L1523.89 684.443 L1524.45 684.443 L1525.01 684.443 L1525.57 684.443 L1526.13 684.443 L1526.69 684.443 L1527.25 684.443 L1527.81 684.443 L1528.36 684.443 L1528.92 684.443 L1529.48 684.443 L1530.04 684.443 L1530.6 684.443 L1531.16 684.443 L1531.72 684.443 L1532.28 684.443 L1532.84 684.443 L1533.4 684.443 L1533.96 684.443 L1534.52 684.443 L1535.08 684.443 L1535.63 684.443 L1536.19 684.443 L1536.75 684.443 L1537.31 684.443 L1537.87 684.443 L1538.43 684.443 L1538.99 684.443 L1539.55 684.443 L1540.11 684.443 L1540.67 684.443 L1541.23 684.443 L1541.79 684.443 L1542.35 684.443 L1542.9 684.443 L1543.46 684.443 L1544.02 684.443 L1544.58 684.443 L1545.14 684.443 L1545.7 684.443 L1546.26 684.443 L1546.82 684.443 L1547.38 684.443 L1547.94 684.443 L1548.5 684.443 L1549.06 684.443 L1549.62 684.443 L1550.18 684.443 L1550.73 684.443 L1551.29 684.443 L1551.85 684.443 L1552.41 684.443 L1552.97 684.443 L1553.53 684.443 L1554.09 684.443 L1554.65 684.443 L1555.21 684.443 L1555.77 684.443 L1556.33 684.443 L1556.89 684.443 L1557.45 684.443 L1558 684.443 L1558.56 684.443 L1559.12 684.443 L1559.68 684.443 L1560.24 684.443 L1560.8 684.443 L1561.36 684.443 L1561.92 684.443 L1562.48 684.443 L1563.04 684.443 L1563.6 684.443 L1564.16 684.443 L1564.72 684.443 L1565.28 684.443 L1565.83 684.443 L1566.39 684.443 L1566.95 684.443 L1567.51 684.443 L1568.07 684.443 L1568.63 684.443 L1569.19 684.443 L1569.75 684.443 L1570.31 684.443 L1570.87 684.443 L1571.43 684.443 L1571.99 684.443 L1572.55 684.443 L1573.1 684.443 L1573.66 684.443 L1574.22 684.443 L1574.78 684.443 L1575.34 684.443 L1575.9 684.443 L1576.46 684.443 L1577.02 684.443 L1577.58 684.443 L1578.14 684.443 L1578.7 684.443 L1579.26 684.443 L1579.82 684.443 L1580.37 684.443 L1580.93 684.443 L1581.49 684.443 L1582.05 684.443 L1582.61 684.443 L1583.17 684.443 L1583.73 684.443 L1584.29 684.443 L1584.85 684.443 L1585.41 684.443 L1585.97 684.443 L1586.53 684.443 L1587.09 684.443 L1587.65 684.443 L1588.2 684.443 L1588.76 684.443 L1589.32 684.443 L1589.88 684.443 L1590.44 684.443 L1591 684.443 L1591.56 684.443 L1592.12 684.443 L1592.68 684.443 L1593.24 684.443 L1593.8 684.443 L1594.36 684.443 L1594.92 684.443 L1595.47 684.443 L1596.03 684.443 L1596.59 684.443 L1597.15 684.443 L1597.71 684.443 L1598.27 684.443 L1598.83 684.443 L1599.39 684.443 L1599.95 684.443 L1600.51 684.443 L1601.07 684.443 L1601.63 684.443 L1602.19 684.443 L1602.74 684.443 L1603.3 684.443 L1603.86 684.443 L1604.42 684.443 L1604.98 684.443 L1605.54 684.443 L1606.1 684.443 L1606.66 684.443 L1607.22 684.443 L1607.78 684.443 L1608.34 684.443 L1608.9 684.443 L1609.46 684.443 L1610.02 684.443 L1610.57 684.443 L1611.13 684.443 L1611.69 684.443 L1612.25 684.443 L1612.81 684.443 L1613.37 684.443 L1613.93 684.443 L1614.49 684.443 L1615.05 684.443 L1615.61 684.443 L1616.17 684.443 L1616.73 684.443 L1617.29 684.443 L1617.84 684.443 L1618.4 684.443 L1618.96 684.443 L1619.52 684.443 L1620.08 684.443 L1620.64 684.443 L1621.2 684.443 L1621.76 684.443 L1622.32 684.443 L1622.88 684.443 L1623.44 684.443 L1624 684.443 L1624.56 684.443 L1625.11 684.443 L1625.67 684.443 L1626.23 684.443 L1626.79 684.443 L1627.35 684.443 L1627.91 684.443 L1628.47 684.443 L1629.03 684.443 L1629.59 684.443 L1630.15 684.443 L1630.71 684.443 L1631.27 684.443 L1631.83 684.443 L1632.39 684.443 L1632.94 684.443 L1633.5 684.443 L1634.06 684.443 L1634.62 684.443 L1635.18 684.443 L1635.74 684.443 L1636.3 684.443 L1636.86 684.443 L1637.42 684.443 L1637.98 684.443 L1638.54 684.443 L1639.1 684.443 L1639.66 684.443 L1640.21 684.443 L1640.77 684.443 L1641.33 684.443 L1641.89 684.443 L1642.45 684.443 L1643.01 684.443 L1643.57 684.443 L1644.13 684.443 L1644.69 684.443 L1645.25 684.443 L1645.81 684.443 L1646.37 684.443 L1646.93 684.443 L1647.48 684.443 L1648.04 684.443 L1648.6 684.443 L1649.16 684.443 L1649.72 684.443 L1650.28 684.443 L1650.84 684.443 L1651.4 684.443 L1651.96 684.443 L1652.52 684.443 L1653.08 684.443 L1653.64 684.443 L1654.2 684.443 L1654.76 684.443 L1655.31 684.443 L1655.87 684.443 L1656.43 684.443 L1656.99 684.443 L1657.55 684.443 L1658.11 684.443 L1658.67 684.443 L1659.23 684.443 L1659.79 684.443 L1660.35 684.443 L1660.91 684.443 L1661.47 684.443 L1662.03 684.443 L1662.58 684.443 L1663.14 684.443 L1663.7 684.443 L1664.26 684.443 L1664.82 684.443 L1665.38 684.443 L1665.94 684.443 L1666.5 684.443 L1667.06 684.443 L1667.62 684.443 L1668.18 684.443 L1668.74 684.443 L1669.3 684.443 L1669.85 684.443 L1670.41 684.443 L1670.97 684.443 L1671.53 684.443 L1672.09 684.443 L1672.65 684.443 L1673.21 684.443 L1673.77 684.443 L1674.33 684.443 L1674.89 684.443 L1675.45 684.443 L1676.01 684.443 L1676.57 684.443 L1677.13 684.443 L1677.68 684.443 L1678.24 684.443 L1678.8 684.443 L1679.36 684.443 L1679.92 684.443 L1680.48 684.443 L1681.04 684.443 L1681.6 684.443 L1682.16 684.443 L1682.72 684.443 L1683.28 684.443 L1683.84 684.443 L1684.4 684.443 L1684.95 684.443 L1685.51 684.443 L1686.07 684.443 L1686.63 684.443 L1687.19 684.443 L1687.75 684.443 L1688.31 684.443 L1688.87 684.443 L1689.43 684.443 L1689.99 684.443 L1690.55 684.443 L1691.11 684.443 L1691.67 684.443 L1692.23 684.443 L1692.78 684.443 L1693.34 684.443 L1693.9 684.443 L1694.46 684.443 L1695.02 684.443 L1695.58 684.443 L1696.14 684.443 L1696.7 684.443 L1697.26 684.443 L1697.82 684.443 L1698.38 684.443 L1698.94 684.443 L1699.5 684.443 L1700.05 684.443 L1700.61 684.443 L1701.17 684.443 L1701.73 684.443 L1702.29 684.443 L1702.85 684.443 L1703.41 684.443 L1703.97 684.443 L1704.53 684.443 L1705.09 684.443 L1705.65 684.443 L1706.21 684.443 L1706.77 684.443 L1707.32 684.443 L1707.88 684.443 L1708.44 684.443 L1709 684.443 L1709.56 684.443 L1710.12 684.443 L1710.68 684.443 L1711.24 684.443 L1711.8 684.443 L1712.36 684.443 L1712.92 684.443 L1713.48 684.443 L1714.04 684.443 L1714.6 684.443 L1715.15 684.443 L1715.71 684.443 L1716.27 684.443 L1716.83 684.443 L1717.39 684.443 L1717.95 684.443 L1718.51 684.443 L1719.07 684.443 L1719.63 684.443 L1720.19 684.443 L1720.75 684.443 L1721.31 684.443 L1721.87 684.443 L1722.42 684.443 L1722.98 684.443 L1723.54 684.443 L1724.1 684.443 L1724.66 684.443 L1725.22 684.443 L1725.78 684.443 L1726.34 684.443 L1726.9 684.443 L1727.46 684.443 L1728.02 684.443 L1728.58 684.443 L1729.14 684.443 L1729.69 684.443 L1730.25 684.443 L1730.81 684.443 L1731.37 684.443 L1731.93 684.443 L1732.49 684.443 L1733.05 684.443 L1733.61 684.443 L1734.17 684.443 L1734.73 684.443 L1735.29 684.443 L1735.85 684.443 L1736.41 684.443 L1736.97 684.443 L1737.52 684.443 L1738.08 684.443 L1738.64 684.443 L1739.2 684.443 L1739.76 684.443 L1740.32 684.443 L1740.88 684.443 L1741.44 684.443 L1742 684.443 L1742.56 684.443 L1743.12 684.443 L1743.68 684.443 L1744.24 684.443 L1744.79 684.443 L1745.35 684.443 L1745.91 684.443 L1746.47 684.443 L1747.03 684.443 L1747.59 684.443 L1748.15 684.443 L1748.71 684.443 L1749.27 684.443 L1749.83 684.443 L1750.39 684.443 L1750.95 684.443 L1751.51 684.443 L1752.06 684.443 L1752.62 684.443 L1753.18 684.443 L1753.74 684.443 L1754.3 684.443 L1754.86 684.443 L1755.42 684.443 L1755.98 684.443 L1756.54 684.443 L1757.1 684.443 L1757.66 684.443 L1758.22 684.443 L1758.78 684.443 L1759.34 684.443 L1759.89 684.443 L1760.45 684.443 L1761.01 684.443 L1761.57 684.443 L1762.13 684.443 L1762.69 684.443 L1763.25 684.443 L1763.81 684.443 L1764.37 684.443 L1764.93 684.443 L1765.49 684.443 L1766.05 684.443 L1766.61 684.443 L1767.16 684.443 L1767.72 684.443 L1768.28 684.443 L1768.84 684.443 L1769.4 684.443 L1769.96 684.443 L1770.52 684.443 L1771.08 684.443 L1771.64 684.443 L1772.2 684.443 L1772.76 684.443 L1773.32 684.443 L1773.88 684.443 L1774.43 684.443 L1774.99 684.443 L1775.55 684.443 L1776.11 684.443 L1776.67 684.443 L1777.23 684.443 L1777.79 684.443 L1778.35 684.443 L1778.91 684.443 L1779.47 684.443 L1780.03 684.443 L1780.59 684.443 L1781.15 684.443 L1781.71 684.443 L1782.26 684.443 L1782.82 684.443 L1783.38 684.443 L1783.94 684.443 L1784.5 684.443 L1785.06 684.443 L1785.62 684.443 L1786.18 684.443 L1786.74 684.443 L1787.3 684.443 L1787.86 684.443 L1788.42 684.443 L1788.98 684.443 L1789.53 684.443 L1790.09 684.443 L1790.65 684.443 L1791.21 684.443 L1791.77 684.443 L1792.33 684.443 L1792.89 684.443 L1793.45 684.443 L1794.01 684.443 L1794.57 684.443 L1795.13 684.443 L1795.69 684.443 L1796.25 684.443 L1796.8 684.443 L1797.36 684.443 L1797.92 684.443 L1798.48 684.443 L1799.04 684.443 L1799.6 684.443 L1800.16 684.443 L1800.72 684.443 L1801.28 684.443 L1801.84 684.443 L1802.4 684.443 L1802.96 684.443 L1803.52 684.443 L1804.08 684.443 L1804.63 684.443 L1805.19 684.443 L1805.75 684.443 L1806.31 684.443 L1806.87 684.443 L1807.43 684.443 L1807.99 684.443 L1808.55 684.443 L1809.11 684.443 L1809.67 684.443 L1810.23 684.443 L1810.79 684.443 L1811.35 684.443 L1811.9 684.443 L1812.46 684.443 L1813.02 684.443 L1813.58 684.443 L1814.14 684.443 L1814.7 684.443 L1815.26 684.443 L1815.82 684.443 L1816.38 684.443 L1816.94 684.443 L1817.5 684.443 L1818.06 684.443 L1818.62 684.443 L1819.18 684.443 L1819.73 684.443 L1820.29 684.443 L1820.85 684.443 L1821.41 684.443 L1821.97 684.443 L1822.53 684.443 L1823.09 684.443 L1823.65 684.443 L1824.21 684.443 L1824.77 684.443 L1825.33 684.443 L1825.89 684.443 L1826.45 684.443 L1827 684.443 L1827.56 684.443 L1828.12 684.443 L1828.68 684.443 L1829.24 684.443 L1829.8 684.443 L1830.36 684.443 L1830.92 684.443 L1831.48 684.443 L1832.04 684.443 L1832.6 684.443 L1833.16 684.443 L1833.72 684.443 L1834.27 684.443 L1834.83 684.443 L1835.39 684.443 L1835.95 684.443 L1836.51 684.443 L1837.07 684.443 L1837.63 684.443 L1838.19 684.443 L1838.19 682.442 L1837.63 682.442 L1837.07 682.442 L1836.51 682.442 L1835.95 682.442 L1835.39 682.442 L1834.83 682.442 L1834.27 682.442 L1833.72 682.442 L1833.16 682.442 L1832.6 682.442 L1832.04 682.442 L1831.48 682.442 L1830.92 682.442 L1830.36 682.442 L1829.8 682.442 L1829.24 682.442 L1828.68 682.442 L1828.12 682.442 L1827.56 682.442 L1827 682.442 L1826.45 682.442 L1825.89 682.442 L1825.33 682.442 L1824.77 682.442 L1824.21 682.442 L1823.65 682.442 L1823.09 682.442 L1822.53 682.442 L1821.97 682.442 L1821.41 682.442 L1820.85 682.442 L1820.29 682.442 L1819.73 682.442 L1819.18 682.442 L1818.62 682.442 L1818.06 682.442 L1817.5 682.442 L1816.94 682.442 L1816.38 682.442 L1815.82 682.442 L1815.26 682.442 L1814.7 682.442 L1814.14 682.442 L1813.58 682.442 L1813.02 682.442 L1812.46 682.442 L1811.9 682.442 L1811.35 682.442 L1810.79 682.442 L1810.23 682.442 L1809.67 682.442 L1809.11 682.442 L1808.55 682.442 L1807.99 682.442 L1807.43 682.442 L1806.87 682.442 L1806.31 682.442 L1805.75 682.442 L1805.19 682.442 L1804.63 682.442 L1804.08 682.442 L1803.52 682.442 L1802.96 682.442 L1802.4 682.442 L1801.84 682.442 L1801.28 682.442 L1800.72 682.442 L1800.16 682.442 L1799.6 682.442 L1799.04 682.442 L1798.48 682.442 L1797.92 682.442 L1797.36 682.442 L1796.8 682.442 L1796.25 682.442 L1795.69 682.442 L1795.13 682.442 L1794.57 682.442 L1794.01 682.442 L1793.45 682.442 L1792.89 682.442 L1792.33 682.442 L1791.77 682.442 L1791.21 682.442 L1790.65 682.442 L1790.09 682.442 L1789.53 682.442 L1788.98 682.442 L1788.42 682.442 L1787.86 682.442 L1787.3 682.442 L1786.74 682.442 L1786.18 682.442 L1785.62 682.442 L1785.06 682.442 L1784.5 682.442 L1783.94 682.442 L1783.38 682.442 L1782.82 682.442 L1782.26 682.442 L1781.71 682.442 L1781.15 682.442 L1780.59 682.442 L1780.03 682.442 L1779.47 682.442 L1778.91 682.442 L1778.35 682.442 L1777.79 682.442 L1777.23 682.442 L1776.67 682.442 L1776.11 682.442 L1775.55 682.442 L1774.99 682.442 L1774.43 682.442 L1773.88 682.442 L1773.32 682.442 L1772.76 682.442 L1772.2 682.442 L1771.64 682.442 L1771.08 682.442 L1770.52 682.442 L1769.96 682.442 L1769.4 682.442 L1768.84 682.442 L1768.28 682.442 L1767.72 682.442 L1767.16 682.442 L1766.61 682.442 L1766.05 682.442 L1765.49 682.442 L1764.93 682.442 L1764.37 682.442 L1763.81 682.442 L1763.25 682.442 L1762.69 682.442 L1762.13 682.442 L1761.57 682.442 L1761.01 682.442 L1760.45 682.442 L1759.89 682.442 L1759.34 682.442 L1758.78 682.442 L1758.22 682.442 L1757.66 682.442 L1757.1 682.442 L1756.54 682.442 L1755.98 682.442 L1755.42 682.442 L1754.86 682.442 L1754.3 682.442 L1753.74 682.442 L1753.18 682.442 L1752.62 682.442 L1752.06 682.442 L1751.51 682.442 L1750.95 682.442 L1750.39 682.442 L1749.83 682.442 L1749.27 682.442 L1748.71 682.442 L1748.15 682.442 L1747.59 682.442 L1747.03 682.442 L1746.47 682.442 L1745.91 682.442 L1745.35 682.442 L1744.79 682.442 L1744.24 682.442 L1743.68 682.442 L1743.12 682.442 L1742.56 682.442 L1742 682.442 L1741.44 682.442 L1740.88 682.442 L1740.32 682.442 L1739.76 682.442 L1739.2 682.442 L1738.64 682.442 L1738.08 682.442 L1737.52 682.442 L1736.97 682.442 L1736.41 682.442 L1735.85 682.442 L1735.29 682.442 L1734.73 682.442 L1734.17 682.442 L1733.61 682.442 L1733.05 682.442 L1732.49 682.442 L1731.93 682.442 L1731.37 682.442 L1730.81 682.442 L1730.25 682.442 L1729.69 682.442 L1729.14 682.442 L1728.58 682.442 L1728.02 682.442 L1727.46 682.442 L1726.9 682.442 L1726.34 682.442 L1725.78 682.442 L1725.22 682.442 L1724.66 682.442 L1724.1 682.442 L1723.54 682.442 L1722.98 682.442 L1722.42 682.442 L1721.87 682.442 L1721.31 682.442 L1720.75 682.442 L1720.19 682.442 L1719.63 682.442 L1719.07 682.442 L1718.51 682.442 L1717.95 682.442 L1717.39 682.442 L1716.83 682.442 L1716.27 682.442 L1715.71 682.442 L1715.15 682.442 L1714.6 682.442 L1714.04 682.442 L1713.48 682.442 L1712.92 682.442 L1712.36 682.442 L1711.8 682.442 L1711.24 682.442 L1710.68 682.442 L1710.12 682.442 L1709.56 682.442 L1709 682.442 L1708.44 682.442 L1707.88 682.442 L1707.32 682.442 L1706.77 682.442 L1706.21 682.442 L1705.65 682.442 L1705.09 682.442 L1704.53 682.442 L1703.97 682.442 L1703.41 682.442 L1702.85 682.442 L1702.29 682.442 L1701.73 682.442 L1701.17 682.442 L1700.61 682.442 L1700.05 682.442 L1699.5 682.442 L1698.94 682.442 L1698.38 682.442 L1697.82 682.442 L1697.26 682.442 L1696.7 682.442 L1696.14 682.442 L1695.58 682.442 L1695.02 682.442 L1694.46 682.442 L1693.9 682.442 L1693.34 682.442 L1692.78 682.442 L1692.23 682.442 L1691.67 682.442 L1691.11 682.442 L1690.55 682.442 L1689.99 682.442 L1689.43 682.442 L1688.87 682.442 L1688.31 682.442 L1687.75 682.442 L1687.19 682.442 L1686.63 682.442 L1686.07 682.442 L1685.51 682.442 L1684.95 682.442 L1684.4 682.442 L1683.84 682.442 L1683.28 682.442 L1682.72 682.442 L1682.16 682.442 L1681.6 682.442 L1681.04 682.442 L1680.48 682.442 L1679.92 682.442 L1679.36 682.442 L1678.8 682.442 L1678.24 682.442 L1677.68 682.442 L1677.13 682.442 L1676.57 682.442 L1676.01 682.442 L1675.45 682.442 L1674.89 682.442 L1674.33 682.442 L1673.77 682.442 L1673.21 682.442 L1672.65 682.442 L1672.09 682.442 L1671.53 682.442 L1670.97 682.442 L1670.41 682.442 L1669.85 682.442 L1669.3 682.442 L1668.74 682.442 L1668.18 682.442 L1667.62 682.442 L1667.06 682.442 L1666.5 682.442 L1665.94 682.442 L1665.38 682.442 L1664.82 682.442 L1664.26 682.442 L1663.7 682.442 L1663.14 682.442 L1662.58 682.442 L1662.03 682.442 L1661.47 682.442 L1660.91 682.442 L1660.35 682.442 L1659.79 682.442 L1659.23 682.442 L1658.67 682.442 L1658.11 682.442 L1657.55 682.442 L1656.99 682.442 L1656.43 682.442 L1655.87 682.442 L1655.31 682.442 L1654.76 682.442 L1654.2 682.442 L1653.64 682.442 L1653.08 682.442 L1652.52 682.442 L1651.96 682.442 L1651.4 682.442 L1650.84 682.442 L1650.28 682.442 L1649.72 682.442 L1649.16 682.442 L1648.6 682.442 L1648.04 682.442 L1647.48 682.442 L1646.93 682.442 L1646.37 682.442 L1645.81 682.442 L1645.25 682.442 L1644.69 682.442 L1644.13 682.442 L1643.57 682.442 L1643.01 682.442 L1642.45 682.442 L1641.89 682.442 L1641.33 682.442 L1640.77 682.442 L1640.21 682.442 L1639.66 682.442 L1639.1 682.442 L1638.54 682.442 L1637.98 682.442 L1637.42 682.442 L1636.86 682.442 L1636.3 682.442 L1635.74 682.442 L1635.18 682.442 L1634.62 682.442 L1634.06 682.442 L1633.5 682.442 L1632.94 682.442 L1632.39 682.442 L1631.83 682.442 L1631.27 682.442 L1630.71 682.442 L1630.15 682.442 L1629.59 682.442 L1629.03 682.442 L1628.47 682.442 L1627.91 682.442 L1627.35 682.442 L1626.79 682.442 L1626.23 682.442 L1625.67 682.442 L1625.11 682.442 L1624.56 682.442 L1624 682.442 L1623.44 682.442 L1622.88 682.442 L1622.32 682.442 L1621.76 682.442 L1621.2 682.442 L1620.64 682.442 L1620.08 682.442 L1619.52 682.442 L1618.96 682.442 L1618.4 682.442 L1617.84 682.442 L1617.29 682.442 L1616.73 682.442 L1616.17 682.442 L1615.61 682.442 L1615.05 682.442 L1614.49 682.442 L1613.93 682.442 L1613.37 682.442 L1612.81 682.442 L1612.25 682.442 L1611.69 682.442 L1611.13 682.442 L1610.57 682.442 L1610.02 682.442 L1609.46 682.442 L1608.9 682.442 L1608.34 682.442 L1607.78 682.442 L1607.22 682.442 L1606.66 682.442 L1606.1 682.442 L1605.54 682.442 L1604.98 682.442 L1604.42 682.442 L1603.86 682.442 L1603.3 682.442 L1602.74 682.442 L1602.19 682.442 L1601.63 682.442 L1601.07 682.442 L1600.51 682.442 L1599.95 682.442 L1599.39 682.442 L1598.83 682.442 L1598.27 682.442 L1597.71 682.442 L1597.15 682.442 L1596.59 682.442 L1596.03 682.442 L1595.47 682.442 L1594.92 682.442 L1594.36 682.442 L1593.8 682.442 L1593.24 682.442 L1592.68 682.442 L1592.12 682.442 L1591.56 682.442 L1591 682.442 L1590.44 682.442 L1589.88 682.442 L1589.32 682.442 L1588.76 682.442 L1588.2 682.442 L1587.65 682.442 L1587.09 682.442 L1586.53 682.442 L1585.97 682.442 L1585.41 682.442 L1584.85 682.442 L1584.29 682.442 L1583.73 682.442 L1583.17 682.442 L1582.61 682.442 L1582.05 682.442 L1581.49 682.442 L1580.93 682.442 L1580.37 682.442 L1579.82 682.442 L1579.26 682.442 L1578.7 682.442 L1578.14 682.442 L1577.58 682.442 L1577.02 682.442 L1576.46 682.442 L1575.9 682.442 L1575.34 682.442 L1574.78 682.442 L1574.22 682.442 L1573.66 682.442 L1573.1 682.442 L1572.55 682.442 L1571.99 682.442 L1571.43 682.442 L1570.87 682.442 L1570.31 682.442 L1569.75 682.442 L1569.19 682.442 L1568.63 682.442 L1568.07 682.442 L1567.51 682.442 L1566.95 682.442 L1566.39 682.442 L1565.83 682.442 L1565.28 682.442 L1564.72 682.442 L1564.16 682.442 L1563.6 682.442 L1563.04 682.442 L1562.48 682.442 L1561.92 682.442 L1561.36 682.442 L1560.8 682.442 L1560.24 682.442 L1559.68 682.442 L1559.12 682.442 L1558.56 682.442 L1558 682.442 L1557.45 682.442 L1556.89 682.442 L1556.33 682.442 L1555.77 682.442 L1555.21 682.442 L1554.65 682.442 L1554.09 682.442 L1553.53 682.442 L1552.97 682.442 L1552.41 682.442 L1551.85 682.442 L1551.29 682.442 L1550.73 682.442 L1550.18 682.442 L1549.62 682.442 L1549.06 682.442 L1548.5 682.442 L1547.94 682.442 L1547.38 682.442 L1546.82 682.442 L1546.26 682.442 L1545.7 682.442 L1545.14 682.442 L1544.58 682.442 L1544.02 682.442 L1543.46 682.442 L1542.9 682.442 L1542.35 682.442 L1541.79 682.442 L1541.23 682.442 L1540.67 682.442 L1540.11 682.442 L1539.55 682.442 L1538.99 682.442 L1538.43 682.442 L1537.87 682.442 L1537.31 682.442 L1536.75 682.442 L1536.19 682.442 L1535.63 682.442 L1535.08 682.442 L1534.52 682.442 L1533.96 682.442 L1533.4 682.442 L1532.84 682.442 L1532.28 682.442 L1531.72 682.442 L1531.16 682.442 L1530.6 682.442 L1530.04 682.442 L1529.48 682.442 L1528.92 682.442 L1528.36 682.442 L1527.81 682.442 L1527.25 682.442 L1526.69 682.442 L1526.13 682.442 L1525.57 682.442 L1525.01 682.442 L1524.45 682.442 L1523.89 682.442 L1523.33 682.442 L1522.77 682.442 L1522.21 682.442 L1521.65 682.442 L1521.09 682.442 L1520.53 682.442 L1519.98 682.442 L1519.42 682.442 L1518.86 682.442 L1518.3 682.442 L1517.74 682.442 L1517.18 682.442 L1516.62 682.442 L1516.06 682.442 L1515.5 682.442 L1514.94 682.442 L1514.38 682.442 L1513.82 682.442 L1513.26 682.442 L1512.71 682.442 L1512.15 682.442 L1511.59 682.442 L1511.03 682.442 L1510.47 682.442 L1509.91 682.442 L1509.35 682.442 L1508.79 682.442 L1508.23 682.442 L1507.67 682.442 L1507.11 682.442 L1506.55 682.442 L1505.99 682.442 L1505.44 682.442 L1504.88 682.442 L1504.32 682.442 L1503.76 682.442 L1503.2 682.442 L1502.64 682.442 L1502.08 682.442 L1501.52 682.442 L1500.96 682.442 L1500.4 682.442 L1499.84 682.442 L1499.28 682.442 L1498.72 682.442 L1498.16 682.442 L1497.61 682.442 L1497.05 682.442 L1496.49 682.442 L1495.93 682.442 L1495.37 682.442 L1494.81 682.442 L1494.25 682.442 L1493.69 682.442 L1493.13 682.442 L1492.57 682.442 L1492.01 682.442 L1491.45 682.442 L1490.89 682.442 L1490.34 682.442 L1489.78 682.442 L1489.22 682.442 L1488.66 682.442 L1488.1 682.442 L1487.54 682.442 L1486.98 682.442 L1486.42 682.442 L1485.86 682.442 L1485.3 682.442 L1484.74 682.442 L1484.18 682.442 L1483.62 682.442 L1483.07 682.442 L1482.51 682.442 L1481.95 682.442 L1481.39 682.442 L1480.83 682.442 L1480.27 682.442 L1479.71 682.442 L1479.15 682.442 L1478.59 682.442 L1478.03 682.442 L1477.47 682.442 L1476.91 682.442 L1476.35 682.442 L1475.79 682.442 L1475.24 682.442 L1474.68 682.442 L1474.12 682.442 L1473.56 682.442 L1473 682.442 L1472.44 682.442 L1471.88 682.442 L1471.32 682.442 L1470.76 682.442 L1470.2 682.442 L1469.64 682.442 L1469.08 682.442 L1468.52 682.442 L1467.97 682.442 L1467.41 682.442 L1466.85 682.442 L1466.29 682.442 L1465.73 682.442 L1465.17 682.442 L1464.61 682.442 L1464.05 682.442 L1463.49 682.442 L1462.93 682.442 L1462.37 682.442 L1461.81 682.442 L1461.25 682.442 L1460.7 682.442 L1460.14 682.442 L1459.58 682.442 L1459.02 682.442 L1458.46 682.442 L1457.9 682.442 L1457.34 682.442 L1456.78 682.442 L1456.22 682.442 L1455.66 682.442 L1455.1 682.442 L1454.54 682.442 L1453.98 682.442 L1453.42 682.442 L1452.87 682.442 L1452.31 682.442 L1451.75 682.442 L1451.19 682.442 L1450.63 682.442 L1450.07 682.442 L1449.51 682.442 L1448.95 682.442 L1448.39 682.442 L1447.83 682.442 L1447.27 682.442 L1446.71 682.442 L1446.15 682.442 L1445.6 682.442 L1445.04 682.442 L1444.48 682.442 L1443.92 682.442 L1443.36 682.442 L1442.8 682.442 L1442.24 682.442 L1441.68 682.442 L1441.12 682.442 L1440.56 682.442 L1440 682.442 L1439.44 682.442 L1438.88 682.442 L1438.33 682.442 L1437.77 682.442 L1437.21 682.442 L1436.65 682.442 L1436.09 682.442 L1435.53 682.442 L1434.97 682.442 L1434.41 682.442 L1433.85 682.442 L1433.29 682.442 L1432.73 682.442 L1432.17 682.442 L1431.61 682.442 L1431.05 682.442 L1430.5 682.442 L1429.94 682.442 L1429.38 682.442 L1428.82 682.442 L1428.26 682.442 L1427.7 682.442 L1427.14 682.442 L1426.58 682.442 L1426.02 682.442 L1425.46 682.442 L1424.9 682.442 L1424.34 682.442 L1423.78 682.442 L1423.23 682.442 L1422.67 682.442 L1422.11 682.442 L1421.55 682.442 L1420.99 682.442 L1420.43 682.442 L1419.87 682.442 L1419.31 682.442 L1418.75 682.442 L1418.19 682.442 L1417.63 682.442 L1417.07 682.442 L1416.51 682.442 L1415.95 682.442 L1415.4 682.442 L1414.84 682.442 L1414.28 682.442 L1413.72 682.442 L1413.16 682.442 L1412.6 682.442 L1412.04 682.442 L1411.48 682.442 L1410.92 682.442 L1410.36 682.442 L1409.8 682.442 L1409.24 682.442 L1408.68 682.442 L1408.13 682.442 L1407.57 682.442 L1407.01 682.442 L1406.45 682.442 L1405.89 682.442 L1405.33 682.442 L1404.77 682.442 L1404.21 682.442 L1403.65 682.442 L1403.09 682.442 L1402.53 682.442 L1401.97 682.442 L1401.41 682.442 L1400.86 682.442 L1400.3 682.442 L1399.74 682.442 L1399.18 682.442 L1398.62 682.442 L1398.06 682.442 L1397.5 682.442 L1396.94 682.442 L1396.38 682.442 L1395.82 682.442 L1395.26 682.442 L1394.7 682.442 L1394.14 682.442 L1393.58 682.442 L1393.03 682.442 L1392.47 682.442 L1391.91 682.442 L1391.35 682.442 L1390.79 682.442 L1390.23 682.442 L1389.67 682.442 L1389.11 682.442 L1388.55 682.442 L1387.99 682.442 L1387.43 682.442 L1386.87 682.442 L1386.31 682.442 L1385.76 682.442 L1385.2 682.442 L1384.64 682.442 L1384.08 682.442 L1383.52 682.442 L1382.96 682.442 L1382.4 682.442 L1381.84 682.442 L1381.28 682.442 L1380.72 682.442 L1380.16 682.442 L1379.6 682.442 L1379.04 682.442 L1378.49 682.442 L1377.93 682.442 L1377.37 682.442 L1376.81 682.442 L1376.25 682.442 L1375.69 682.442 L1375.13 682.442 L1374.57 682.442 L1374.01 682.442 L1373.45 682.442 L1372.89 682.442 L1372.33 682.442 L1371.77 682.442 L1371.21 682.442 L1370.66 682.442 L1370.1 682.442 L1369.54 682.442 L1368.98 682.442 L1368.42 682.442 L1367.86 682.442 L1367.3 682.442 L1366.74 682.442 L1366.18 682.442 L1365.62 682.442 L1365.06 682.442 L1364.5 682.442 L1363.94 682.442 L1363.39 682.442 L1362.83 682.442 L1362.27 682.442 L1361.71 682.442 L1361.15 682.442 L1360.59 682.442 L1360.03 682.442 L1359.47 682.442 L1358.91 682.442 L1358.35 682.442 L1357.79 682.442 L1357.23 682.442 L1356.67 682.442 L1356.12 682.442 L1355.56 682.442 L1355 682.442 L1354.44 682.442 L1353.88 682.442 L1353.32 682.442 L1352.76 682.442 L1352.2 682.442 L1351.64 682.442 L1351.08 682.442 L1350.52 682.442 L1349.96 682.442 L1349.4 682.442 L1348.84 682.442 L1348.29 682.442 L1347.73 682.442 L1347.17 682.442 L1346.61 682.442 L1346.05 682.442 L1345.49 682.442 L1344.93 682.442 L1344.37 682.442 L1343.81 682.442 L1343.25 682.442 L1342.69 682.442 L1342.13 682.442 L1341.57 682.442 L1341.02 682.442 L1340.46 682.442 L1339.9 682.442 L1339.34 682.442 L1338.78 682.442 L1338.22 682.442 L1337.66 682.442 L1337.1 682.442 L1336.54 682.442 L1335.98 682.442 L1335.42 682.442 L1334.86 682.442 L1334.3 682.442 L1333.75 682.442 L1333.19 682.442 L1332.63 682.442 L1332.07 682.442 L1331.51 682.442 L1330.95 682.442 L1330.39 682.442 L1329.83 682.442 L1329.27 682.442 L1328.71 682.442 L1328.15 682.442 L1327.59 682.442 L1327.03 682.442 L1326.47 682.442 L1325.92 682.442 L1325.36 682.442 L1324.8 682.442 L1324.24 682.442 L1323.68 682.442 L1323.12 682.442 L1322.56 682.442 L1322 682.442 L1321.44 682.442 L1320.88 682.442 L1320.32 682.442 L1319.76 682.442 L1319.2 682.442 L1318.65 682.442 L1318.09 682.442 L1317.53 682.442 L1316.97 682.442 L1316.41 682.442 L1315.85 682.442 L1315.29 682.442 L1314.73 682.442 L1314.17 682.442 L1313.61 682.442 L1313.05 682.442 L1312.49 682.442 L1311.93 682.442 L1311.38 682.442 L1310.82 682.442 L1310.26 682.442 L1309.7 682.442 L1309.14 682.442 L1308.58 682.442 L1308.02 682.442 L1307.46 682.442 L1306.9 682.442 L1306.34 682.442 L1305.78 682.442 L1305.22 682.442 L1304.66 682.442 L1304.1 682.442 L1303.55 682.442 L1302.99 682.442 L1302.43 682.442 L1301.87 682.442 L1301.31 682.442 L1300.75 682.442 L1300.19 682.442 L1299.63 682.442 L1299.07 682.442 L1298.51 682.442 L1297.95 682.442 L1297.39 682.442 L1296.83 682.442 L1296.28 682.442 L1295.72 682.442 L1295.16 682.442 L1294.6 682.442 L1294.04 682.442 L1293.48 682.442 L1292.92 682.442 L1292.36 682.442 L1291.8 682.442 L1291.24 682.442 L1290.68 682.442 L1290.12 682.442 L1289.56 682.442 L1289 682.442 L1288.45 682.442 L1287.89 682.442 L1287.33 682.442 L1286.77 682.442 L1286.21 682.442 L1285.65 682.442 L1285.09 682.442 L1284.53 682.442 L1283.97 682.442 L1283.41 682.442 L1282.85 682.442 L1282.29 682.442 L1281.73 682.442 L1281.18 682.442 L1280.62 682.442 L1280.06 682.442 L1279.5 682.442 L1278.94 682.442 L1278.38 682.442 L1277.82 682.442 L1277.26 682.442 L1276.7 682.442 L1276.14 682.442 L1275.58 682.442 L1275.02 682.442 L1274.46 682.442 L1273.91 682.442 L1273.35 682.442 L1272.79 682.442 L1272.23 682.442 L1271.67 682.442 L1271.11 682.442 L1270.55 682.442 L1269.99 682.442 L1269.43 682.442 L1268.87 682.442 L1268.31 682.442 L1267.75 682.442 L1267.19 682.442 L1266.63 682.442 L1266.08 682.442 L1265.52 682.442 L1264.96 682.442 L1264.4 682.442 L1263.84 682.442 L1263.28 682.442 L1262.72 682.442 L1262.16 682.442 L1261.6 682.442 L1261.04 682.442 L1260.48 682.442 L1259.92 682.442 L1259.36 682.442 L1258.81 682.442 L1258.25 682.442 L1257.69 682.442 L1257.13 682.442 L1256.57 682.442 L1256.01 682.442 L1255.45 682.442 L1254.89 682.442 L1254.33 682.442 L1253.77 682.442 L1253.21 682.442 L1252.65 682.442 L1252.09 682.442 L1251.54 682.442 L1250.98 682.442 L1250.42 682.442 L1249.86 682.442 L1249.3 682.442 L1248.74 682.442 L1248.18 682.442 L1247.62 682.442 L1247.06 682.442 L1246.5 682.442 L1245.94 682.442 L1245.38 682.442 L1244.82 682.442 L1244.26 682.442 L1243.71 682.442 L1243.15 682.442 L1242.59 682.442 L1242.03 682.442 L1241.47 682.442 L1240.91 682.442 L1240.35 682.442 L1239.79 682.442 L1239.23 682.442 L1238.67 682.442 L1238.11 682.442 L1237.55 682.442 L1236.99 682.442 L1236.44 682.442 L1235.88 682.442 L1235.32 682.442 L1234.76 682.442 L1234.2 682.442 L1233.64 682.442 L1233.08 682.442 L1232.52 682.442 L1231.96 682.442 L1231.4 682.442 L1230.84 682.442 L1230.28 682.442 L1229.72 682.442 L1229.17 682.442 L1228.61 682.442 L1228.05 682.442 L1227.49 682.442 L1226.93 682.442 L1226.37 682.442 L1225.81 682.442 L1225.25 682.442 L1224.69 682.442 L1224.13 682.442 L1223.57 682.442 L1223.01 682.442 L1222.45 682.442 L1221.89 682.442 L1221.34 682.442 L1220.78 682.442 L1220.22 682.442 L1219.66 682.442 L1219.1 682.442 L1218.54 682.442 L1217.98 682.442 L1217.42 682.442 L1216.86 682.442 L1216.3 682.442 L1215.74 682.442 L1215.18 682.442 L1214.62 682.442 L1214.07 682.442 L1213.51 682.442 L1212.95 682.442 L1212.39 682.442 L1211.83 682.442 L1211.27 682.442 L1210.71 682.442 L1210.15 682.442 L1209.59 682.442 L1209.03 682.442 L1208.47 682.442 L1207.91 682.442 L1207.35 682.442 L1206.8 682.442 L1206.24 682.442 L1205.68 682.442 L1205.12 682.442 L1204.56 682.442 L1204 682.442 L1203.44 682.442 L1202.88 682.442 L1202.32 682.442 L1201.76 682.442 L1201.2 682.442 L1200.64 682.442 L1200.08 682.442 L1199.52 682.442 L1198.97 682.442 L1198.41 682.442 L1197.85 682.442 L1197.29 682.442 L1196.73 682.442 L1196.17 682.442 L1195.61 682.442 L1195.05 682.442 L1194.49 682.442 L1193.93 682.442 L1193.37 682.442 L1192.81 682.442 L1192.25 682.442 L1191.7 682.442 L1191.14 682.442 L1190.58 682.442 L1190.02 682.442 L1189.46 682.442 L1188.9 682.442 L1188.34 682.442 L1187.78 682.442 L1187.22 682.442 L1186.66 682.442 L1186.1 682.442 L1185.54 682.442 L1184.98 682.442 L1184.43 682.442 L1183.87 682.442 L1183.31 682.442 L1182.75 682.442 L1182.19 682.442 L1181.63 682.442 L1181.07 682.442 L1180.51 682.442 L1179.95 682.442 L1179.39 682.442 L1178.83 682.442 L1178.27 682.442 L1177.71 682.442 L1177.15 682.442 L1176.6 682.442 L1176.04 682.442 L1175.48 682.442 L1174.92 682.442 L1174.36 682.442 L1173.8 682.442 L1173.24 682.442 L1172.68 682.442 L1172.12 682.442 L1171.56 682.442 L1171 682.442 L1170.44 682.442 L1169.88 682.442 L1169.33 682.442 L1168.77 682.442 L1168.21 682.442 L1167.65 682.442 L1167.09 682.442 L1166.53 682.442 L1165.97 682.442 L1165.41 682.442 L1164.85 682.442 L1164.29 682.442 L1163.73 682.442 L1163.17 682.442 L1162.61 682.442 L1162.05 682.442 L1161.5 682.442 L1160.94 682.442 L1160.38 682.442 L1159.82 682.442 L1159.26 682.442 L1158.7 682.442 L1158.14 682.442 L1157.58 682.442 L1157.02 682.442 L1156.46 682.442 L1155.9 682.442 L1155.34 682.442 L1154.78 682.442 L1154.23 682.442 L1153.67 682.442 L1153.11 682.442 L1152.55 682.442 L1151.99 682.442 L1151.43 682.442 L1150.87 682.442 L1150.31 682.442 L1149.75 682.442 L1149.19 682.442 L1148.63 682.442 L1148.07 682.442 L1147.51 682.442 L1146.96 682.442 L1146.4 682.442 L1145.84 682.442 L1145.28 682.442 L1144.72 682.442 L1144.16 682.442 L1143.6 682.442 L1143.04 682.442 L1142.48 682.442 L1141.92 682.442 L1141.36 682.442 L1140.8 682.442 L1140.24 682.442 L1139.68 682.442 L1139.13 682.442 L1138.57 682.442 L1138.01 682.442 L1137.45 682.442 L1136.89 682.442 L1136.33 682.442 L1135.77 682.442 L1135.21 682.442 L1134.65 682.442 L1134.09 682.442 L1133.53 682.442 L1132.97 682.442 L1132.41 682.442 L1131.86 682.442 L1131.3 682.442 L1130.74 682.442 L1130.18 682.442 L1129.62 682.442 L1129.06 682.442 L1128.5 682.442 L1127.94 682.442 L1127.38 682.442 L1126.82 682.442 L1126.26 682.442 L1125.7 682.442 L1125.14 682.442 L1124.59 682.442 L1124.03 682.442 L1123.47 682.442 L1122.91 682.442 L1122.35 682.442 L1121.79 682.442 L1121.23 682.442 L1120.67 682.442 L1120.11 682.442 L1119.55 682.442 L1118.99 682.442 L1118.43 682.442 L1117.87 682.442 L1117.31 682.442 L1116.76 682.442 L1116.2 682.442 L1115.64 682.442 L1115.08 682.442 L1114.52 682.442 L1113.96 682.442 L1113.4 682.442 L1112.84 682.442 L1112.28 682.442 L1111.72 682.442 L1111.16 682.442 L1110.6 682.442 L1110.04 682.442 L1109.49 682.442 L1108.93 682.442 L1108.37 682.442 L1107.81 682.442 L1107.25 682.442 L1106.69 682.442 L1106.13 682.442 L1105.57 682.442 L1105.01 682.442 L1104.45 682.442 L1103.89 682.442 L1103.33 682.442 L1102.77 682.442 L1102.22 682.442 L1101.66 682.442 L1101.1 682.442 L1100.54 682.442 L1099.98 682.442 L1099.42 682.442 L1098.86 682.442 L1098.3 682.442 L1097.74 682.442 L1097.18 682.442 L1096.62 682.442 L1096.06 682.442 L1095.5 682.442 L1094.94 682.442 L1094.39 682.442 L1093.83 682.442 L1093.27 682.442 L1092.71 682.442 L1092.15 682.442 L1091.59 682.442 L1091.03 682.442 L1090.47 682.442 L1089.91 682.442 L1089.35 682.442 L1088.79 682.442 L1088.23 682.442 L1087.67 682.442 L1087.12 682.442 L1086.56 682.442 L1086 682.442 L1085.44 682.442 L1084.88 682.442 L1084.32 682.442 L1083.76 682.442 L1083.2 682.442 L1082.64 682.442 L1082.08 682.442 L1081.52 682.442 L1080.96 682.442 L1080.4 682.442 L1079.85 682.442 L1079.29 682.442 L1078.73 682.442 L1078.17 682.442 L1077.61 682.442 L1077.05 682.442 L1076.49 682.442 L1075.93 682.442 L1075.37 682.442 L1074.81 682.442 L1074.25 682.442 L1073.69 682.442 L1073.13 682.442 L1072.57 682.442 L1072.02 682.442 L1071.46 682.442 L1070.9 682.442 L1070.34 682.442 L1069.78 682.442 L1069.22 682.442 L1068.66 682.442 L1068.1 682.442 L1067.54 682.442 L1066.98 682.442 L1066.42 682.442 L1065.86 682.442 L1065.3 682.442 L1064.75 682.442 L1064.19 682.442 L1063.63 682.442 L1063.07 682.442 L1062.51 682.442 L1061.95 682.442 L1061.39 682.442 L1060.83 682.442 L1060.27 682.442 L1059.71 682.442 L1059.15 682.442 L1058.59 682.442 L1058.03 682.442 L1057.48 682.442 L1056.92 682.442 L1056.36 682.442 L1055.8 682.442 L1055.24 682.442 L1054.68 682.442 L1054.12 682.442 L1053.56 682.442 L1053 682.442 L1052.44 682.442 L1051.88 682.442 L1051.32 682.442 L1050.76 682.442 L1050.2 682.442 L1049.65 682.442 L1049.09 682.442 L1048.53 682.442 L1047.97 682.442 L1047.41 682.442 L1046.85 682.442 L1046.29 682.442 L1045.73 682.442 L1045.17 682.442 L1044.61 682.442 L1044.05 682.442 L1043.49 682.442 L1042.93 682.442 L1042.38 682.442 L1041.82 682.442 L1041.26 682.442 L1040.7 682.442 L1040.14 682.442 L1039.58 682.442 L1039.02 682.442 L1038.46 682.442 L1037.9 682.442 L1037.34 682.442 L1036.78 682.442 L1036.22 682.442 L1035.66 682.442 L1035.1 682.442 L1034.55 682.442 L1033.99 682.442 L1033.43 682.442 L1032.87 682.442 L1032.31 682.442 L1031.75 682.442 L1031.19 682.442 L1030.63 682.442 L1030.07 682.442 L1029.51 682.442 L1028.95 682.442 L1028.39 682.442 L1027.83 682.442 L1027.28 682.442 L1026.72 682.442 L1026.16 682.442 L1025.6 682.442 L1025.04 682.442 L1024.48 682.442 L1023.92 682.442 L1023.36 682.442 L1022.8 682.442 L1022.24 682.442 L1021.68 682.442 L1021.12 682.442 L1020.56 682.442 L1020.01 682.442 L1019.45 682.442 L1018.89 682.442 L1018.33 682.442 L1017.77 682.442 L1017.21 682.442 L1016.65 682.442 L1016.09 682.442 L1015.53 682.442 L1014.97 682.442 L1014.41 682.442 L1013.85 682.442 L1013.29 682.442 L1012.73 682.442 L1012.18 682.442 L1011.62 682.442 L1011.06 682.442 L1010.5 682.442 L1009.94 682.442 L1009.38 682.442 L1008.82 682.442 L1008.26 682.442 L1007.7 682.442 L1007.14 682.442 L1006.58 682.442 L1006.02 682.442 L1005.46 682.442 L1004.91 682.442 L1004.35 682.442 L1003.79 682.442 L1003.23 682.442 L1002.67 682.442 L1002.11 682.442 L1001.55 682.442 L1000.99 682.442 L1000.43 682.442 L999.872 682.442 L999.313 682.442 L998.754 682.442 L998.194 682.442 L997.635 682.442 L997.076 682.442 L996.517 682.442 L995.957 682.442 L995.398 682.442 L994.839 682.442 L994.28 682.442 L993.72 682.442 L993.161 682.442 L992.602 682.442 L992.043 682.442 L991.483 682.442 L990.924 682.442 L990.365 682.442 L989.806 682.442 L989.246 682.442 L988.687 682.442 L988.128 682.442 L987.569 682.442 L987.009 682.442 L986.45 682.442 L985.891 682.442 L985.332 682.442 L984.772 682.442 L984.213 682.442 L983.654 682.442 L983.095 682.442 L982.535 682.442 L981.976 682.442 L981.417 682.442 L980.858 682.442 L980.298 682.442 L979.739 682.442 L979.18 682.442 L978.621 682.442 L978.061 682.442 L977.502 682.442 L976.943 682.442 L976.384 682.442 L975.824 682.442 L975.265 682.442 L974.706 682.442 L974.147 682.442 L973.587 682.442 L973.028 682.442 L972.469 682.442 L971.91 682.442 L971.35 682.442 L970.791 682.442 L970.232 682.442 L969.673 682.442 L969.113 682.442 L968.554 682.442 L967.995 682.442 L967.436 682.442 L966.876 682.442 L966.317 682.442 L965.758 682.442 L965.199 682.442 L964.639 682.442 L964.08 682.442 L963.521 682.442 L962.962 682.442 L962.402 682.442 L961.843 682.442 L961.284 682.442 L960.725 682.442 L960.165 682.442 L959.606 682.442 L959.047 682.442 L958.488 682.442 L957.928 682.442 L957.369 682.442 L956.81 682.442 L956.251 682.442 L955.691 682.442 L955.132 682.442 L954.573 682.442 L954.014 682.442 L953.454 682.442 L952.895 682.442 L952.336 682.442 L951.777 682.442 L951.217 682.442 L950.658 682.442 L950.099 682.442 L949.54 682.442 L948.98 682.442 L948.421 682.442 L947.862 682.442 L947.303 682.442 L946.743 682.442 L946.184 682.442 L945.625 682.442 L945.066 682.442 L944.506 682.442 L943.947 682.442 L943.388 682.442 L942.829 682.442 L942.269 682.442 L941.71 682.442 L941.151 682.442 L940.592 682.442 L940.032 682.442 L939.473 682.442 L938.914 682.442 L938.355 682.442 L937.795 682.442 L937.236 682.442 L936.677 682.442 L936.118 682.442 L935.558 682.442 L934.999 682.442 L934.44 682.442 L933.881 682.442 L933.321 682.442 L932.762 682.442 L932.203 682.442 L931.644 682.442 L931.084 682.442 L930.525 682.442 L929.966 682.442 L929.406 682.442 L928.847 682.442 L928.288 682.442 L927.729 682.442 L927.169 682.442 L926.61 682.442 L926.051 682.442 L925.492 682.442 L924.932 682.442 L924.373 682.442 L923.814 682.442 L923.255 682.442 L922.695 682.442 L922.136 682.442 L921.577 682.442 L921.018 682.442 L920.458 682.442 L919.899 682.442 L919.34 682.442 L918.781 682.442 L918.221 682.442 L917.662 682.442 L917.103 682.442 L916.544 682.442 L915.984 682.442 L915.425 682.442 L914.866 682.442 L914.307 682.442 L913.747 682.442 L913.188 682.442 L912.629 682.442 L912.07 682.442 L911.51 682.442 L910.951 682.442 L910.392 682.442 L909.833 682.442 L909.273 682.442 L908.714 682.442 L908.155 682.442 L907.596 682.442 L907.036 682.442 L906.477 682.442 L905.918 682.442 L905.359 682.442 L904.799 682.442 L904.24 682.442 L903.681 682.442 L903.122 682.442 L902.562 682.442 L902.003 682.442 L901.444 682.442 L900.885 682.442 L900.325 682.442 L899.766 682.442 L899.207 682.442 L898.648 682.442 L898.088 682.442 L897.529 682.442 L896.97 682.442 L896.411 682.442 L895.851 682.442 L895.292 682.442 L894.733 682.442 L894.174 682.442 L893.614 682.442 L893.055 682.442 L892.496 682.442 L891.937 682.442 L891.377 682.442 L890.818 682.442 L890.259 682.442 L889.7 682.442 L889.14 682.442 L888.581 682.442 L888.022 682.442 L887.463 682.442 L886.903 682.442 L886.344 682.442 L885.785 682.442 L885.226 682.442 L884.666 682.442 L884.107 682.442 L883.548 682.442 L882.989 682.442 L882.429 682.442 L881.87 682.442 L881.311 682.442 L880.752 682.442 L880.192 682.442 L879.633 682.442 L879.074 682.442 L878.515 682.442 L877.955 682.442 L877.396 682.442 L876.837 682.442 L876.278 682.442 L875.718 682.442 L875.159 682.442 L874.6 682.442 L874.041 682.442 L873.481 682.442 L872.922 682.442 L872.363 682.442 L871.804 682.442 L871.244 682.442 L870.685 682.442 L870.126 682.442 L869.567 682.442 L869.007 682.442 L868.448 682.442 L867.889 682.442 L867.33 682.442 L866.77 682.442 L866.211 682.442 L865.652 682.442 L865.093 682.442 L864.533 682.442 L863.974 682.442 L863.415 682.442 L862.856 682.442 L862.296 682.442 L861.737 682.442 L861.178 682.442 L860.619 682.442 L860.059 682.442 L859.5 682.442 L858.941 682.442 L858.382 682.442 L857.822 682.442 L857.263 682.442 L856.704 682.442 L856.145 682.442 L855.585 682.442 L855.026 682.442 L854.467 682.442 L853.908 682.442 L853.348 682.442 L852.789 682.442 L852.23 682.442 L851.671 682.442 L851.111 682.442 L850.552 682.442 L849.993 682.442 L849.434 682.442 L848.874 682.442 L848.315 682.442 L847.756 682.442 L847.197 682.442 L846.637 682.442 L846.078 682.442 L845.519 682.442 L844.96 682.442 L844.4 682.442 L843.841 682.442 L843.282 682.442 L842.723 682.442 L842.163 682.442 L841.604 682.442 L841.045 682.442 L840.486 682.442 L839.926 682.442 L839.367 682.442 L838.808 682.442 L838.249 682.442 L837.689 682.442 L837.13 682.442 L836.571 682.442 L836.012 682.442 L835.452 682.442 L834.893 682.442 L834.334 682.442 L833.775 682.442 L833.215 682.442 L832.656 682.442 L832.097 682.442 L831.538 682.442 L830.978 682.442 L830.419 682.442 L829.86 682.442 L829.301 682.442 L828.741 682.442 L828.182 682.442 L827.623 682.442 L827.064 682.442 L826.504 682.442 L825.945 682.442 L825.386 682.442 L824.827 682.442 L824.267 682.442 L823.708 682.442 L823.149 682.442 L822.59 682.442 L822.03 682.442 L821.471 682.442 L820.912 682.442 L820.353 682.442 L819.793 682.442 L819.234 682.442 L818.675 682.442 L818.116 682.442 L817.556 682.442 L816.997 682.442 L816.438 682.442 L815.879 682.442 L815.319 682.442 L814.76 682.442 L814.201 682.442 L813.642 682.442 L813.082 682.442 L812.523 682.442 L811.964 682.442 L811.405 682.442 L810.845 682.442 L810.286 682.442 L809.727 682.442 L809.168 682.442 L808.608 682.442 L808.049 682.442 L807.49 682.442 L806.931 682.442 L806.371 682.442 L805.812 682.442 L805.253 682.442 L804.693 682.442 L804.134 682.442 L803.575 682.442 L803.016 682.442 L802.456 682.442 L801.897 682.442 L801.338 682.442 L800.779 682.442 L800.219 682.442 L799.66 682.442 L799.101 682.442 L798.542 682.442 L797.982 682.442 L797.423 682.442 L796.864 682.442 L796.305 682.442 L795.745 682.442 L795.186 682.442 L794.627 682.442 L794.068 682.442 L793.508 682.442 L792.949 682.442 L792.39 682.442 L791.831 682.442 L791.271 682.442 L790.712 682.442 L790.153 682.442 L789.594 682.442 L789.034 682.442 L788.475 682.442 L787.916 682.442 L787.357 682.442 L786.797 682.442 L786.238 682.442 L785.679 682.442 L785.12 682.442 L784.56 682.442 L784.001 682.442 L783.442 682.442 L782.883 682.442 L782.323 682.442 L781.764 682.442 L781.205 682.442 L780.646 682.442 L780.086 682.442 L779.527 682.442 L778.968 682.442 L778.409 682.442 L777.849 682.442 L777.29 682.442 L776.731 682.442 L776.172 682.442 L775.612 682.442 L775.053 682.442 L774.494 682.442 L773.935 682.442 L773.375 682.442 L772.816 682.442 L772.257 682.442 L771.698 682.442 L771.138 682.442 L770.579 682.442 L770.02 682.442 L769.461 682.442 L768.901 682.442 L768.342 682.442 L767.783 682.442 L767.224 682.442 L766.664 682.442 L766.105 682.442 L765.546 682.442 L764.987 682.442 L764.427 682.442 L763.868 682.442 L763.309 682.442 L762.75 682.442 L762.19 682.442 L761.631 682.442 L761.072 682.442 L760.513 682.442 L759.953 682.442 L759.394 682.442 L758.835 682.442 L758.276 682.442 L757.716 682.442 L757.157 682.442 L756.598 682.442 L756.039 682.442 L755.479 682.442 L754.92 682.442 L754.361 682.442 L753.802 682.442 L753.242 682.442 L752.683 682.442 L752.124 682.442 L751.565 682.442 L751.005 682.442 L750.446 682.442 L749.887 682.442 L749.328 682.442 L748.768 682.442 L748.209 682.442 L747.65 682.442 L747.091 682.442 L746.531 682.442 L745.972 682.442 L745.413 682.442 L744.854 682.442 L744.294 682.442 L743.735 682.442 L743.176 682.442 L742.617 682.442 L742.057 682.442 L741.498 682.442 L740.939 682.442 L740.38 682.442 L739.82 682.442 L739.261 682.442 L738.702 682.442 L738.143 682.442 L737.583 682.442 L737.024 682.442 L736.465 682.442 L735.906 682.442 L735.346 682.442 L734.787 682.442 L734.228 682.442 L733.669 682.442 L733.109 682.442 L732.55 682.442 L731.991 682.442 L731.432 682.442 L730.872 682.442 L730.313 682.442 L729.754 682.442 L729.195 682.442 L728.635 682.442 L728.076 682.442 L727.517 682.442 L726.958 682.442 L726.398 682.442 L725.839 682.442 L725.28 682.442 L724.721 682.442 L724.161 682.442 L723.602 682.442 L723.043 682.442 L722.484 682.442 L721.924 682.442 L721.365 682.442 L720.806 682.442 L720.247 682.442  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip013)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.441 720.806,683.441 721.365,683.441 721.924,683.441 722.484,683.441 723.043,683.441 723.602,683.441 724.161,683.441 724.721,683.441 725.28,683.441 725.839,683.441 726.398,683.441 726.958,683.441 727.517,683.441 728.076,683.441 728.635,683.441 729.195,683.441 729.754,683.441 730.313,683.441 730.872,683.441 731.432,683.441 731.991,683.441 732.55,683.441 733.109,683.441 733.669,683.441 734.228,683.441 734.787,683.441 735.346,683.441 735.906,683.441 736.465,683.441 737.024,683.441 737.583,683.441 738.143,683.441 738.702,683.441 739.261,683.441 739.82,683.441 740.38,683.441 740.939,683.441 741.498,683.441 742.057,683.441 742.617,683.441 743.176,683.441 743.735,683.441 744.294,683.441 744.854,683.441 745.413,683.441 745.972,683.441 746.531,683.441 747.091,683.441 747.65,683.441 748.209,683.441 748.768,683.441 749.328,683.441 749.887,683.441 750.446,683.441 751.005,683.441 751.565,683.441 752.124,683.441 752.683,683.441 753.242,683.441 753.802,683.441 754.361,683.441 754.92,683.441 755.479,683.441 756.039,683.441 756.598,683.441 757.157,683.441 757.716,683.441 758.276,683.441 758.835,683.441 759.394,683.441 759.953,683.441 760.513,683.441 761.072,683.441 761.631,683.441 762.19,683.441 762.75,683.441 763.309,683.441 763.868,683.441 764.427,683.441 764.987,683.441 765.546,683.441 766.105,683.441 766.664,683.441 767.224,683.441 767.783,683.441 768.342,683.441 768.901,683.441 769.461,683.441 770.02,683.441 770.579,683.441 771.138,683.441 771.698,683.441 772.257,683.441 772.816,683.441 773.375,683.441 773.935,683.441 774.494,683.441 775.053,683.441 775.612,683.441 776.172,683.441 776.731,683.441 777.29,683.441 777.849,683.441 778.409,683.441 778.968,683.441 779.527,683.441 780.086,683.441 780.646,683.441 781.205,683.441 781.764,683.441 782.323,683.441 782.883,683.441 783.442,683.441 784.001,683.441 784.56,683.441 785.12,683.441 785.679,683.441 786.238,683.441 786.797,683.441 787.357,683.441 787.916,683.441 788.475,683.441 789.034,683.441 789.594,683.441 790.153,683.441 790.712,683.441 791.271,683.441 791.831,683.441 792.39,683.441 792.949,683.441 793.508,683.441 794.068,683.441 794.627,683.441 795.186,683.441 795.745,683.441 796.305,683.441 796.864,683.441 797.423,683.441 797.982,683.441 798.542,683.441 799.101,683.441 799.66,683.441 800.219,683.441 800.779,683.441 801.338,683.441 801.897,683.441 802.456,683.441 803.016,683.441 803.575,683.441 804.134,683.441 804.693,683.441 805.253,683.441 805.812,683.441 806.371,683.441 806.931,683.441 807.49,683.441 808.049,683.441 808.608,683.441 809.168,683.441 809.727,683.441 810.286,683.441 810.845,683.441 811.405,683.441 811.964,683.441 812.523,683.441 813.082,683.441 813.642,683.441 814.201,683.441 814.76,683.441 815.319,683.441 815.879,683.441 816.438,683.441 816.997,683.441 817.556,683.441 818.116,683.441 818.675,683.441 819.234,683.441 819.793,683.441 820.353,683.441 820.912,683.441 821.471,683.441 822.03,683.441 822.59,683.441 823.149,683.441 823.708,683.441 824.267,683.441 824.827,683.441 825.386,683.441 825.945,683.441 826.504,683.441 827.064,683.441 827.623,683.441 828.182,683.441 828.741,683.441 829.301,683.441 829.86,683.441 830.419,683.441 830.978,683.441 831.538,683.441 832.097,683.441 832.656,683.441 833.215,683.441 833.775,683.441 834.334,683.441 834.893,683.441 835.452,683.441 836.012,683.441 836.571,683.441 837.13,683.441 837.689,683.441 838.249,683.441 838.808,683.441 839.367,683.441 839.926,683.441 840.486,683.441 841.045,683.441 841.604,683.441 842.163,683.441 842.723,683.441 843.282,683.441 843.841,683.441 844.4,683.441 844.96,683.441 845.519,683.441 846.078,683.441 846.637,683.441 847.197,683.441 847.756,683.441 848.315,683.441 848.874,683.441 849.434,683.441 849.993,683.441 850.552,683.441 851.111,683.441 851.671,683.441 852.23,683.441 852.789,683.441 853.348,683.441 853.908,683.441 854.467,683.441 855.026,683.441 855.585,683.441 856.145,683.441 856.704,683.441 857.263,683.441 857.822,683.441 858.382,683.441 858.941,683.441 859.5,683.441 860.059,683.441 860.619,683.441 861.178,683.441 861.737,683.441 862.296,683.441 862.856,683.441 863.415,683.441 863.974,683.441 864.533,683.441 865.093,683.441 865.652,683.441 866.211,683.441 866.77,683.441 867.33,683.441 867.889,683.441 868.448,683.441 869.007,683.441 869.567,683.441 870.126,683.441 870.685,683.441 871.244,683.441 871.804,683.441 872.363,683.441 872.922,683.441 873.481,683.441 874.041,683.441 874.6,683.441 875.159,683.441 875.718,683.441 876.278,683.441 876.837,683.441 877.396,683.441 877.955,683.441 878.515,683.441 879.074,683.441 879.633,683.441 880.192,683.441 880.752,683.441 881.311,683.441 881.87,683.441 882.429,683.441 882.989,683.441 883.548,683.441 884.107,683.441 884.666,683.441 885.226,683.441 885.785,683.441 886.344,683.441 886.903,683.441 887.463,683.441 888.022,683.441 888.581,683.441 889.14,683.441 889.7,683.441 890.259,683.441 890.818,683.441 891.377,683.441 891.937,683.441 892.496,683.441 893.055,683.441 893.614,683.441 894.174,683.441 894.733,683.441 895.292,683.441 895.851,683.441 896.411,683.441 896.97,683.441 897.529,683.441 898.088,683.441 898.648,683.441 899.207,683.441 899.766,683.441 900.325,683.441 900.885,683.441 901.444,683.441 902.003,683.441 902.562,683.441 903.122,683.441 903.681,683.441 904.24,683.441 904.799,683.441 905.359,683.441 905.918,683.441 906.477,683.441 907.036,683.441 907.596,683.441 908.155,683.441 908.714,683.441 909.273,683.441 909.833,683.441 910.392,683.441 910.951,683.441 911.51,683.441 912.07,683.441 912.629,683.441 913.188,683.441 913.747,683.441 914.307,683.441 914.866,683.441 915.425,683.441 915.984,683.441 916.544,683.441 917.103,683.441 917.662,683.441 918.221,683.441 918.781,683.441 919.34,683.441 919.899,683.441 920.458,683.441 921.018,683.441 921.577,683.441 922.136,683.441 922.695,683.441 923.255,683.441 923.814,683.441 924.373,683.441 924.932,683.441 925.492,683.441 926.051,683.441 926.61,683.441 927.169,683.441 927.729,683.441 928.288,683.441 928.847,683.441 929.406,683.441 929.966,683.441 930.525,683.441 931.084,683.441 931.644,683.441 932.203,683.441 932.762,683.441 933.321,683.441 933.881,683.441 934.44,683.441 934.999,683.441 935.558,683.441 936.118,683.441 936.677,683.441 937.236,683.441 937.795,683.441 938.355,683.441 938.914,683.441 939.473,683.441 940.032,683.441 940.592,683.441 941.151,683.441 941.71,683.441 942.269,683.441 942.829,683.441 943.388,683.441 943.947,683.441 944.506,683.441 945.066,683.441 945.625,683.441 946.184,683.441 946.743,683.441 947.303,683.441 947.862,683.441 948.421,683.441 948.98,683.441 949.54,683.441 950.099,683.441 950.658,683.441 951.217,683.441 951.777,683.441 952.336,683.441 952.895,683.441 953.454,683.441 954.014,683.441 954.573,683.441 955.132,683.441 955.691,683.441 956.251,683.441 956.81,683.441 957.369,683.441 957.928,683.441 958.488,683.441 959.047,683.441 959.606,683.441 960.165,683.441 960.725,683.441 961.284,683.441 961.843,683.441 962.402,683.441 962.962,683.441 963.521,683.441 964.08,683.441 964.639,683.441 965.199,683.441 965.758,683.441 966.317,683.441 966.876,683.441 967.436,683.441 967.995,683.441 968.554,683.441 969.113,683.441 969.673,683.441 970.232,683.441 970.791,683.441 971.35,683.441 971.91,683.441 972.469,683.441 973.028,683.441 973.587,683.441 974.147,683.441 974.706,683.441 975.265,683.441 975.824,683.441 976.384,683.441 976.943,683.441 977.502,683.441 978.061,683.441 978.621,683.441 979.18,683.441 979.739,683.441 980.298,683.441 980.858,683.441 981.417,683.441 981.976,683.441 982.535,683.441 983.095,683.441 983.654,683.441 984.213,683.441 984.772,683.441 985.332,683.441 985.891,683.441 986.45,683.441 987.009,683.441 987.569,683.441 988.128,683.441 988.687,683.441 989.246,683.441 989.806,683.441 990.365,683.441 990.924,683.441 991.483,683.441 992.043,683.441 992.602,683.441 993.161,683.441 993.72,683.441 994.28,683.441 994.839,683.441 995.398,683.441 995.957,683.441 996.517,683.441 997.076,683.441 997.635,683.441 998.194,683.441 998.754,683.441 999.313,683.441 999.872,683.441 1000.43,683.441 1000.99,683.441 1001.55,683.441 1002.11,683.441 1002.67,683.441 1003.23,683.441 1003.79,683.441 1004.35,683.441 1004.91,683.441 1005.46,683.441 1006.02,683.441 1006.58,683.441 1007.14,683.441 1007.7,683.441 1008.26,683.441 1008.82,683.441 1009.38,683.441 1009.94,683.441 1010.5,683.441 1011.06,683.441 1011.62,683.441 1012.18,683.441 1012.73,683.441 1013.29,683.441 1013.85,683.441 1014.41,683.441 1014.97,683.441 1015.53,683.441 1016.09,683.441 1016.65,683.441 1017.21,683.441 1017.77,683.441 1018.33,683.441 1018.89,683.441 1019.45,683.441 1020.01,683.441 1020.56,683.441 1021.12,683.441 1021.68,683.441 1022.24,683.441 1022.8,683.441 1023.36,683.441 1023.92,683.441 1024.48,683.441 1025.04,683.441 1025.6,683.441 1026.16,683.441 1026.72,683.441 1027.28,683.441 1027.83,683.441 1028.39,683.441 1028.95,683.441 1029.51,683.441 1030.07,683.441 1030.63,683.441 1031.19,683.441 1031.75,683.441 1032.31,683.441 1032.87,683.441 1033.43,683.441 1033.99,683.441 1034.55,683.441 1035.1,683.441 1035.66,683.441 1036.22,683.441 1036.78,683.441 1037.34,683.441 1037.9,683.441 1038.46,683.441 1039.02,683.441 1039.58,683.441 1040.14,683.441 1040.7,683.441 1041.26,683.441 1041.82,683.441 1042.38,683.441 1042.93,683.441 1043.49,683.441 1044.05,683.441 1044.61,683.441 1045.17,683.441 1045.73,683.441 1046.29,683.441 1046.85,683.441 1047.41,683.441 1047.97,683.441 1048.53,683.441 1049.09,683.441 1049.65,683.441 1050.2,683.441 1050.76,683.441 1051.32,683.441 1051.88,683.441 1052.44,683.441 1053,683.441 1053.56,683.441 1054.12,683.441 1054.68,683.441 1055.24,683.441 1055.8,683.441 1056.36,683.441 1056.92,683.441 1057.48,683.441 1058.03,683.441 1058.59,683.441 1059.15,683.441 1059.71,683.441 1060.27,683.441 1060.83,683.441 1061.39,683.441 1061.95,683.441 1062.51,683.441 1063.07,683.441 1063.63,683.441 1064.19,683.441 1064.75,683.441 1065.3,683.441 1065.86,683.441 1066.42,683.441 1066.98,683.441 1067.54,683.441 1068.1,683.441 1068.66,683.441 1069.22,683.441 1069.78,683.441 1070.34,683.441 1070.9,683.441 1071.46,683.441 1072.02,683.441 1072.57,683.441 1073.13,683.441 1073.69,683.441 1074.25,683.441 1074.81,683.441 1075.37,683.441 1075.93,683.441 1076.49,683.441 1077.05,683.441 1077.61,683.441 1078.17,683.441 1078.73,683.441 1079.29,683.441 1079.85,683.441 1080.4,683.441 1080.96,683.441 1081.52,683.441 1082.08,683.441 1082.64,683.441 1083.2,683.441 1083.76,683.441 1084.32,683.441 1084.88,683.441 1085.44,683.441 1086,683.441 1086.56,683.441 1087.12,683.441 1087.67,683.441 1088.23,683.441 1088.79,683.441 1089.35,683.441 1089.91,683.441 1090.47,683.441 1091.03,683.441 1091.59,683.441 1092.15,683.441 1092.71,683.441 1093.27,683.441 1093.83,683.441 1094.39,683.441 1094.94,683.441 1095.5,683.441 1096.06,683.441 1096.62,683.441 1097.18,683.441 1097.74,683.441 1098.3,683.441 1098.86,683.441 1099.42,683.441 1099.98,683.441 1100.54,683.441 1101.1,683.441 1101.66,683.441 1102.22,683.441 1102.77,683.441 1103.33,683.441 1103.89,683.441 1104.45,683.441 1105.01,683.441 1105.57,683.441 1106.13,683.441 1106.69,683.441 1107.25,683.441 1107.81,683.441 1108.37,683.441 1108.93,683.441 1109.49,683.441 1110.04,683.441 1110.6,683.441 1111.16,683.441 1111.72,683.441 1112.28,683.441 1112.84,683.441 1113.4,683.441 1113.96,683.441 1114.52,683.441 1115.08,683.441 1115.64,683.441 1116.2,683.441 1116.76,683.441 1117.31,683.441 1117.87,683.441 1118.43,683.441 1118.99,683.441 1119.55,683.441 1120.11,683.441 1120.67,683.441 1121.23,683.441 1121.79,683.441 1122.35,683.441 1122.91,683.441 1123.47,683.441 1124.03,683.441 1124.59,683.441 1125.14,683.441 1125.7,683.441 1126.26,683.441 1126.82,683.441 1127.38,683.441 1127.94,683.441 1128.5,683.441 1129.06,683.441 1129.62,683.441 1130.18,683.441 1130.74,683.441 1131.3,683.441 1131.86,683.441 1132.41,683.441 1132.97,683.441 1133.53,683.441 1134.09,683.441 1134.65,683.441 1135.21,683.441 1135.77,683.441 1136.33,683.441 1136.89,683.441 1137.45,683.441 1138.01,683.441 1138.57,683.441 1139.13,683.441 1139.68,683.441 1140.24,683.441 1140.8,683.441 1141.36,683.441 1141.92,683.441 1142.48,683.441 1143.04,683.441 1143.6,683.441 1144.16,683.441 1144.72,683.441 1145.28,683.441 1145.84,683.441 1146.4,683.441 1146.96,683.441 1147.51,683.441 1148.07,683.441 1148.63,683.441 1149.19,683.441 1149.75,683.441 1150.31,683.441 1150.87,683.441 1151.43,683.441 1151.99,683.441 1152.55,683.441 1153.11,683.441 1153.67,683.441 1154.23,683.441 1154.78,683.441 1155.34,683.441 1155.9,683.441 1156.46,683.441 1157.02,683.441 1157.58,683.441 1158.14,683.441 1158.7,683.441 1159.26,683.441 1159.82,683.441 1160.38,683.441 1160.94,683.441 1161.5,683.441 1162.05,683.441 1162.61,683.441 1163.17,683.441 1163.73,683.441 1164.29,683.441 1164.85,683.441 1165.41,683.441 1165.97,683.441 1166.53,683.441 1167.09,683.441 1167.65,683.441 1168.21,683.441 1168.77,683.441 1169.33,683.441 1169.88,683.441 1170.44,683.441 1171,683.441 1171.56,683.441 1172.12,683.441 1172.68,683.441 1173.24,683.441 1173.8,683.441 1174.36,683.441 1174.92,683.441 1175.48,683.441 1176.04,683.441 1176.6,683.441 1177.15,683.441 1177.71,683.441 1178.27,683.441 1178.83,683.441 1179.39,683.441 1179.95,683.441 1180.51,683.441 1181.07,683.441 1181.63,683.441 1182.19,683.441 1182.75,683.441 1183.31,683.441 1183.87,683.441 1184.43,683.441 1184.98,683.441 1185.54,683.441 1186.1,683.441 1186.66,683.441 1187.22,683.441 1187.78,683.441 1188.34,683.441 1188.9,683.441 1189.46,683.441 1190.02,683.441 1190.58,683.441 1191.14,683.441 1191.7,683.441 1192.25,683.441 1192.81,683.441 1193.37,683.441 1193.93,683.441 1194.49,683.441 1195.05,683.441 1195.61,683.441 1196.17,683.441 1196.73,683.441 1197.29,683.441 1197.85,683.441 1198.41,683.441 1198.97,683.441 1199.52,683.441 1200.08,683.441 1200.64,683.441 1201.2,683.441 1201.76,683.441 1202.32,683.441 1202.88,683.441 1203.44,683.441 1204,683.441 1204.56,683.441 1205.12,683.441 1205.68,683.441 1206.24,683.441 1206.8,683.441 1207.35,683.441 1207.91,683.441 1208.47,683.441 1209.03,683.441 1209.59,683.441 1210.15,683.441 1210.71,683.441 1211.27,683.441 1211.83,683.441 1212.39,683.441 1212.95,683.441 1213.51,683.441 1214.07,683.441 1214.62,683.441 1215.18,683.441 1215.74,683.441 1216.3,683.441 1216.86,683.441 1217.42,683.441 1217.98,683.441 1218.54,683.441 1219.1,683.441 1219.66,683.441 1220.22,683.441 1220.78,683.441 1221.34,683.441 1221.89,683.441 1222.45,683.441 1223.01,683.441 1223.57,683.441 1224.13,683.441 1224.69,683.441 1225.25,683.441 1225.81,683.441 1226.37,683.441 1226.93,683.441 1227.49,683.441 1228.05,683.441 1228.61,683.441 1229.17,683.441 1229.72,683.441 1230.28,683.441 1230.84,683.441 1231.4,683.441 1231.96,683.441 1232.52,683.441 1233.08,683.441 1233.64,683.441 1234.2,683.441 1234.76,683.441 1235.32,683.441 1235.88,683.441 1236.44,683.441 1236.99,683.441 1237.55,683.441 1238.11,683.441 1238.67,683.441 1239.23,683.441 1239.79,683.441 1240.35,683.441 1240.91,683.441 1241.47,683.441 1242.03,683.441 1242.59,683.441 1243.15,683.441 1243.71,683.441 1244.26,683.441 1244.82,683.441 1245.38,683.441 1245.94,683.441 1246.5,683.441 1247.06,683.441 1247.62,683.441 1248.18,683.441 1248.74,683.441 1249.3,683.441 1249.86,683.441 1250.42,683.441 1250.98,683.441 1251.54,683.441 1252.09,683.441 1252.65,683.441 1253.21,683.441 1253.77,683.441 1254.33,683.441 1254.89,683.441 1255.45,683.441 1256.01,683.441 1256.57,683.441 1257.13,683.441 1257.69,683.441 1258.25,683.441 1258.81,683.441 1259.36,683.441 1259.92,683.441 1260.48,683.441 1261.04,683.441 1261.6,683.441 1262.16,683.441 1262.72,683.441 1263.28,683.441 1263.84,683.441 1264.4,683.441 1264.96,683.441 1265.52,683.441 1266.08,683.441 1266.63,683.441 1267.19,683.441 1267.75,683.441 1268.31,683.441 1268.87,683.441 1269.43,683.441 1269.99,683.441 1270.55,683.441 1271.11,683.441 1271.67,683.441 1272.23,683.441 1272.79,683.441 1273.35,683.441 1273.91,683.441 1274.46,683.441 1275.02,683.441 1275.58,683.441 1276.14,683.441 1276.7,683.441 1277.26,683.441 1277.82,683.441 1278.38,683.441 1278.94,683.441 1279.5,683.441 1280.06,683.441 1280.62,683.441 1281.18,683.441 1281.73,683.441 1282.29,683.441 1282.85,683.441 1283.41,683.441 1283.97,683.441 1284.53,683.441 1285.09,683.441 1285.65,683.441 1286.21,683.441 1286.77,683.441 1287.33,683.441 1287.89,683.441 1288.45,683.441 1289,683.441 1289.56,683.441 1290.12,683.441 1290.68,683.441 1291.24,683.441 1291.8,683.441 1292.36,683.441 1292.92,683.441 1293.48,683.441 1294.04,683.441 1294.6,683.441 1295.16,683.441 1295.72,683.441 1296.28,683.441 1296.83,683.441 1297.39,683.441 1297.95,683.441 1298.51,683.441 1299.07,683.441 1299.63,683.441 1300.19,683.441 1300.75,683.441 1301.31,683.441 1301.87,683.441 1302.43,683.441 1302.99,683.441 1303.55,683.441 1304.1,683.441 1304.66,683.441 1305.22,683.441 1305.78,683.441 1306.34,683.441 1306.9,683.441 1307.46,683.441 1308.02,683.441 1308.58,683.441 1309.14,683.441 1309.7,683.441 1310.26,683.441 1310.82,683.441 1311.38,683.441 1311.93,683.441 1312.49,683.441 1313.05,683.441 1313.61,683.441 1314.17,683.441 1314.73,683.441 1315.29,683.441 1315.85,683.441 1316.41,683.441 1316.97,683.441 1317.53,683.441 1318.09,683.441 1318.65,683.441 1319.2,683.441 1319.76,683.441 1320.32,683.441 1320.88,683.441 1321.44,683.441 1322,683.441 1322.56,683.441 1323.12,683.441 1323.68,683.441 1324.24,683.441 1324.8,683.441 1325.36,683.441 1325.92,683.441 1326.47,683.441 1327.03,683.441 1327.59,683.441 1328.15,683.441 1328.71,683.441 1329.27,683.441 1329.83,683.441 1330.39,683.441 1330.95,683.441 1331.51,683.441 1332.07,683.441 1332.63,683.441 1333.19,683.441 1333.75,683.441 1334.3,683.441 1334.86,683.441 1335.42,683.441 1335.98,683.441 1336.54,683.441 1337.1,683.441 1337.66,683.441 1338.22,683.441 1338.78,683.441 1339.34,683.441 1339.9,683.441 1340.46,683.441 1341.02,683.441 1341.57,683.441 1342.13,683.441 1342.69,683.441 1343.25,683.441 1343.81,683.441 1344.37,683.441 1344.93,683.441 1345.49,683.441 1346.05,683.441 1346.61,683.441 1347.17,683.441 1347.73,683.441 1348.29,683.441 1348.84,683.441 1349.4,683.441 1349.96,683.441 1350.52,683.441 1351.08,683.441 1351.64,683.441 1352.2,683.441 1352.76,683.441 1353.32,683.441 1353.88,683.441 1354.44,683.441 1355,683.441 1355.56,683.441 1356.12,683.441 1356.67,683.441 1357.23,683.441 1357.79,683.441 1358.35,683.441 1358.91,683.441 1359.47,683.441 1360.03,683.441 1360.59,683.441 1361.15,683.441 1361.71,683.441 1362.27,683.441 1362.83,683.441 1363.39,683.441 1363.94,683.441 1364.5,683.441 1365.06,683.441 1365.62,683.441 1366.18,683.441 1366.74,683.441 1367.3,683.441 1367.86,683.441 1368.42,683.441 1368.98,683.441 1369.54,683.441 1370.1,683.441 1370.66,683.441 1371.21,683.441 1371.77,683.441 1372.33,683.441 1372.89,683.441 1373.45,683.441 1374.01,683.441 1374.57,683.441 1375.13,683.441 1375.69,683.441 1376.25,683.441 1376.81,683.441 1377.37,683.441 1377.93,683.441 1378.49,683.441 1379.04,683.441 1379.6,683.441 1380.16,683.441 1380.72,683.441 1381.28,683.441 1381.84,683.441 1382.4,683.441 1382.96,683.441 1383.52,683.441 1384.08,683.441 1384.64,683.441 1385.2,683.441 1385.76,683.441 1386.31,683.441 1386.87,683.441 1387.43,683.441 1387.99,683.441 1388.55,683.441 1389.11,683.441 1389.67,683.441 1390.23,683.441 1390.79,683.441 1391.35,683.441 1391.91,683.441 1392.47,683.441 1393.03,683.441 1393.58,683.441 1394.14,683.441 1394.7,683.441 1395.26,683.441 1395.82,683.441 1396.38,683.441 1396.94,683.441 1397.5,683.441 1398.06,683.441 1398.62,683.441 1399.18,683.441 1399.74,683.441 1400.3,683.441 1400.86,683.441 1401.41,683.441 1401.97,683.441 1402.53,683.441 1403.09,683.441 1403.65,683.441 1404.21,683.441 1404.77,683.441 1405.33,683.441 1405.89,683.441 1406.45,683.441 1407.01,683.441 1407.57,683.441 1408.13,683.441 1408.68,683.441 1409.24,683.441 1409.8,683.441 1410.36,683.441 1410.92,683.441 1411.48,683.441 1412.04,683.441 1412.6,683.441 1413.16,683.441 1413.72,683.441 1414.28,683.441 1414.84,683.441 1415.4,683.441 1415.95,683.441 1416.51,683.441 1417.07,683.441 1417.63,683.441 1418.19,683.441 1418.75,683.441 1419.31,683.441 1419.87,683.441 1420.43,683.441 1420.99,683.441 1421.55,683.441 1422.11,683.441 1422.67,683.441 1423.23,683.441 1423.78,683.441 1424.34,683.441 1424.9,683.441 1425.46,683.441 1426.02,683.441 1426.58,683.441 1427.14,683.441 1427.7,683.441 1428.26,683.441 1428.82,683.441 1429.38,683.441 1429.94,683.441 1430.5,683.441 1431.05,683.441 1431.61,683.441 1432.17,683.441 1432.73,683.441 1433.29,683.441 1433.85,683.441 1434.41,683.441 1434.97,683.441 1435.53,683.441 1436.09,683.441 1436.65,683.441 1437.21,683.441 1437.77,683.441 1438.33,683.441 1438.88,683.441 1439.44,683.441 1440,683.441 1440.56,683.441 1441.12,683.441 1441.68,683.441 1442.24,683.441 1442.8,683.441 1443.36,683.441 1443.92,683.441 1444.48,683.441 1445.04,683.441 1445.6,683.441 1446.15,683.441 1446.71,683.441 1447.27,683.441 1447.83,683.441 1448.39,683.441 1448.95,683.441 1449.51,683.441 1450.07,683.441 1450.63,683.441 1451.19,683.441 1451.75,683.441 1452.31,683.441 1452.87,683.441 1453.42,683.441 1453.98,683.441 1454.54,683.441 1455.1,683.441 1455.66,683.441 1456.22,683.441 1456.78,683.441 1457.34,683.441 1457.9,683.441 1458.46,683.441 1459.02,683.441 1459.58,683.441 1460.14,683.441 1460.7,683.441 1461.25,683.441 1461.81,683.441 1462.37,683.441 1462.93,683.441 1463.49,683.441 1464.05,683.441 1464.61,683.441 1465.17,683.441 1465.73,683.441 1466.29,683.441 1466.85,683.441 1467.41,683.441 1467.97,683.441 1468.52,683.441 1469.08,683.441 1469.64,683.441 1470.2,683.441 1470.76,683.441 1471.32,683.441 1471.88,683.441 1472.44,683.441 1473,683.441 1473.56,683.441 1474.12,683.441 1474.68,683.441 1475.24,683.441 1475.79,683.441 1476.35,683.441 1476.91,683.441 1477.47,683.441 1478.03,683.441 1478.59,683.441 1479.15,683.441 1479.71,683.441 1480.27,683.441 1480.83,683.441 1481.39,683.441 1481.95,683.441 1482.51,683.441 1483.07,683.441 1483.62,683.441 1484.18,683.441 1484.74,683.441 1485.3,683.441 1485.86,683.441 1486.42,683.441 1486.98,683.441 1487.54,683.441 1488.1,683.441 1488.66,683.441 1489.22,683.441 1489.78,683.441 1490.34,683.441 1490.89,683.441 1491.45,683.441 1492.01,683.441 1492.57,683.441 1493.13,683.441 1493.69,683.441 1494.25,683.441 1494.81,683.441 1495.37,683.441 1495.93,683.441 1496.49,683.441 1497.05,683.441 1497.61,683.441 1498.16,683.441 1498.72,683.441 1499.28,683.441 1499.84,683.441 1500.4,683.441 1500.96,683.441 1501.52,683.441 1502.08,683.441 1502.64,683.441 1503.2,683.441 1503.76,683.441 1504.32,683.441 1504.88,683.441 1505.44,683.441 1505.99,683.441 1506.55,683.441 1507.11,683.441 1507.67,683.441 1508.23,683.441 1508.79,683.441 1509.35,683.441 1509.91,683.441 1510.47,683.441 1511.03,683.441 1511.59,683.441 1512.15,683.441 1512.71,683.441 1513.26,683.441 1513.82,683.441 1514.38,683.441 1514.94,683.441 1515.5,683.441 1516.06,683.441 1516.62,683.441 1517.18,683.441 1517.74,683.441 1518.3,683.441 1518.86,683.441 1519.42,683.441 1519.98,683.441 1520.53,683.441 1521.09,683.441 1521.65,683.441 1522.21,683.441 1522.77,683.441 1523.33,683.441 1523.89,683.441 1524.45,683.441 1525.01,683.441 1525.57,683.441 1526.13,683.441 1526.69,683.441 1527.25,683.441 1527.81,683.441 1528.36,683.441 1528.92,683.441 1529.48,683.441 1530.04,683.441 1530.6,683.441 1531.16,683.441 1531.72,683.441 1532.28,683.441 1532.84,683.441 1533.4,683.441 1533.96,683.441 1534.52,683.441 1535.08,683.441 1535.63,683.441 1536.19,683.441 1536.75,683.441 1537.31,683.441 1537.87,683.441 1538.43,683.441 1538.99,683.441 1539.55,683.441 1540.11,683.441 1540.67,683.441 1541.23,683.441 1541.79,683.441 1542.35,683.441 1542.9,683.441 1543.46,683.441 1544.02,683.441 1544.58,683.441 1545.14,683.441 1545.7,683.441 1546.26,683.441 1546.82,683.441 1547.38,683.441 1547.94,683.441 1548.5,683.441 1549.06,683.441 1549.62,683.441 1550.18,683.441 1550.73,683.441 1551.29,683.441 1551.85,683.441 1552.41,683.441 1552.97,683.441 1553.53,683.441 1554.09,683.441 1554.65,683.441 1555.21,683.441 1555.77,683.441 1556.33,683.441 1556.89,683.441 1557.45,683.441 1558,683.441 1558.56,683.441 1559.12,683.441 1559.68,683.441 1560.24,683.441 1560.8,683.441 1561.36,683.441 1561.92,683.441 1562.48,683.441 1563.04,683.441 1563.6,683.441 1564.16,683.441 1564.72,683.441 1565.28,683.441 1565.83,683.441 1566.39,683.441 1566.95,683.441 1567.51,683.441 1568.07,683.441 1568.63,683.441 1569.19,683.441 1569.75,683.441 1570.31,683.441 1570.87,683.441 1571.43,683.441 1571.99,683.441 1572.55,683.441 1573.1,683.441 1573.66,683.441 1574.22,683.441 1574.78,683.441 1575.34,683.441 1575.9,683.441 1576.46,683.441 1577.02,683.441 1577.58,683.441 1578.14,683.441 1578.7,683.441 1579.26,683.441 1579.82,683.441 1580.37,683.441 1580.93,683.441 1581.49,683.441 1582.05,683.441 1582.61,683.441 1583.17,683.441 1583.73,683.441 1584.29,683.441 1584.85,683.441 1585.41,683.441 1585.97,683.441 1586.53,683.441 1587.09,683.441 1587.65,683.441 1588.2,683.441 1588.76,683.441 1589.32,683.441 1589.88,683.441 1590.44,683.441 1591,683.441 1591.56,683.441 1592.12,683.441 1592.68,683.441 1593.24,683.441 1593.8,683.441 1594.36,683.441 1594.92,683.441 1595.47,683.441 1596.03,683.441 1596.59,683.441 1597.15,683.441 1597.71,683.441 1598.27,683.441 1598.83,683.441 1599.39,683.441 1599.95,683.441 1600.51,683.441 1601.07,683.441 1601.63,683.441 1602.19,683.441 1602.74,683.441 1603.3,683.441 1603.86,683.441 1604.42,683.441 1604.98,683.441 1605.54,683.441 1606.1,683.441 1606.66,683.441 1607.22,683.441 1607.78,683.441 1608.34,683.441 1608.9,683.441 1609.46,683.441 1610.02,683.441 1610.57,683.441 1611.13,683.441 1611.69,683.441 1612.25,683.441 1612.81,683.441 1613.37,683.441 1613.93,683.441 1614.49,683.441 1615.05,683.441 1615.61,683.441 1616.17,683.441 1616.73,683.441 1617.29,683.441 1617.84,683.441 1618.4,683.441 1618.96,683.441 1619.52,683.441 1620.08,683.441 1620.64,683.441 1621.2,683.441 1621.76,683.441 1622.32,683.441 1622.88,683.441 1623.44,683.441 1624,683.441 1624.56,683.441 1625.11,683.441 1625.67,683.441 1626.23,683.441 1626.79,683.441 1627.35,683.441 1627.91,683.441 1628.47,683.441 1629.03,683.441 1629.59,683.441 1630.15,683.441 1630.71,683.441 1631.27,683.441 1631.83,683.441 1632.39,683.441 1632.94,683.441 1633.5,683.441 1634.06,683.441 1634.62,683.441 1635.18,683.441 1635.74,683.441 1636.3,683.441 1636.86,683.441 1637.42,683.441 1637.98,683.441 1638.54,683.441 1639.1,683.441 1639.66,683.441 1640.21,683.441 1640.77,683.441 1641.33,683.441 1641.89,683.441 1642.45,683.441 1643.01,683.441 1643.57,683.441 1644.13,683.441 1644.69,683.441 1645.25,683.441 1645.81,683.441 1646.37,683.441 1646.93,683.441 1647.48,683.441 1648.04,683.441 1648.6,683.441 1649.16,683.441 1649.72,683.441 1650.28,683.441 1650.84,683.441 1651.4,683.441 1651.96,683.441 1652.52,683.441 1653.08,683.441 1653.64,683.441 1654.2,683.441 1654.76,683.441 1655.31,683.441 1655.87,683.441 1656.43,683.441 1656.99,683.441 1657.55,683.441 1658.11,683.441 1658.67,683.441 1659.23,683.441 1659.79,683.441 1660.35,683.441 1660.91,683.441 1661.47,683.441 1662.03,683.441 1662.58,683.441 1663.14,683.441 1663.7,683.441 1664.26,683.441 1664.82,683.441 1665.38,683.441 1665.94,683.441 1666.5,683.441 1667.06,683.441 1667.62,683.441 1668.18,683.441 1668.74,683.441 1669.3,683.441 1669.85,683.441 1670.41,683.441 1670.97,683.441 1671.53,683.441 1672.09,683.441 1672.65,683.441 1673.21,683.441 1673.77,683.441 1674.33,683.441 1674.89,683.441 1675.45,683.441 1676.01,683.441 1676.57,683.441 1677.13,683.441 1677.68,683.441 1678.24,683.441 1678.8,683.441 1679.36,683.441 1679.92,683.441 1680.48,683.441 1681.04,683.441 1681.6,683.441 1682.16,683.441 1682.72,683.441 1683.28,683.441 1683.84,683.441 1684.4,683.441 1684.95,683.441 1685.51,683.441 1686.07,683.441 1686.63,683.441 1687.19,683.441 1687.75,683.441 1688.31,683.441 1688.87,683.441 1689.43,683.441 1689.99,683.441 1690.55,683.441 1691.11,683.441 1691.67,683.441 1692.23,683.441 1692.78,683.441 1693.34,683.441 1693.9,683.441 1694.46,683.441 1695.02,683.441 1695.58,683.441 1696.14,683.441 1696.7,683.441 1697.26,683.441 1697.82,683.441 1698.38,683.441 1698.94,683.441 1699.5,683.441 1700.05,683.441 1700.61,683.441 1701.17,683.441 1701.73,683.441 1702.29,683.441 1702.85,683.441 1703.41,683.441 1703.97,683.441 1704.53,683.441 1705.09,683.441 1705.65,683.441 1706.21,683.441 1706.77,683.441 1707.32,683.441 1707.88,683.441 1708.44,683.441 1709,683.441 1709.56,683.441 1710.12,683.441 1710.68,683.441 1711.24,683.441 1711.8,683.441 1712.36,683.441 1712.92,683.441 1713.48,683.441 1714.04,683.441 1714.6,683.441 1715.15,683.441 1715.71,683.441 1716.27,683.441 1716.83,683.441 1717.39,683.441 1717.95,683.441 1718.51,683.441 1719.07,683.441 1719.63,683.441 1720.19,683.441 1720.75,683.441 1721.31,683.441 1721.87,683.441 1722.42,683.441 1722.98,683.441 1723.54,683.441 1724.1,683.441 1724.66,683.441 1725.22,683.441 1725.78,683.441 1726.34,683.441 1726.9,683.441 1727.46,683.441 1728.02,683.441 1728.58,683.441 1729.14,683.441 1729.69,683.441 1730.25,683.441 1730.81,683.441 1731.37,683.441 1731.93,683.441 1732.49,683.441 1733.05,683.441 1733.61,683.441 1734.17,683.441 1734.73,683.441 1735.29,683.441 1735.85,683.441 1736.41,683.441 1736.97,683.441 1737.52,683.441 1738.08,683.441 1738.64,683.441 1739.2,683.441 1739.76,683.441 1740.32,683.441 1740.88,683.441 1741.44,683.441 1742,683.441 1742.56,683.441 1743.12,683.441 1743.68,683.441 1744.24,683.441 1744.79,683.441 1745.35,683.441 1745.91,683.441 1746.47,683.441 1747.03,683.441 1747.59,683.441 1748.15,683.441 1748.71,683.441 1749.27,683.441 1749.83,683.441 1750.39,683.441 1750.95,683.441 1751.51,683.441 1752.06,683.441 1752.62,683.441 1753.18,683.441 1753.74,683.441 1754.3,683.441 1754.86,683.441 1755.42,683.441 1755.98,683.441 1756.54,683.441 1757.1,683.441 1757.66,683.441 1758.22,683.441 1758.78,683.441 1759.34,683.441 1759.89,683.441 1760.45,683.441 1761.01,683.441 1761.57,683.441 1762.13,683.441 1762.69,683.441 1763.25,683.441 1763.81,683.441 1764.37,683.441 1764.93,683.441 1765.49,683.441 1766.05,683.441 1766.61,683.441 1767.16,683.441 1767.72,683.441 1768.28,683.441 1768.84,683.441 1769.4,683.441 1769.96,683.441 1770.52,683.441 1771.08,683.441 1771.64,683.441 1772.2,683.441 1772.76,683.441 1773.32,683.441 1773.88,683.441 1774.43,683.441 1774.99,683.441 1775.55,683.441 1776.11,683.441 1776.67,683.441 1777.23,683.441 1777.79,683.441 1778.35,683.441 1778.91,683.441 1779.47,683.441 1780.03,683.441 1780.59,683.441 1781.15,683.441 1781.71,683.441 1782.26,683.441 1782.82,683.441 1783.38,683.441 1783.94,683.441 1784.5,683.441 1785.06,683.441 1785.62,683.441 1786.18,683.441 1786.74,683.441 1787.3,683.441 1787.86,683.441 1788.42,683.441 1788.98,683.441 1789.53,683.441 1790.09,683.441 1790.65,683.441 1791.21,683.441 1791.77,683.441 1792.33,683.441 1792.89,683.441 1793.45,683.441 1794.01,683.441 1794.57,683.441 1795.13,683.441 1795.69,683.441 1796.25,683.441 1796.8,683.441 1797.36,683.441 1797.92,683.441 1798.48,683.441 1799.04,683.441 1799.6,683.441 1800.16,683.441 1800.72,683.441 1801.28,683.441 1801.84,683.441 1802.4,683.441 1802.96,683.441 1803.52,683.441 1804.08,683.441 1804.63,683.441 1805.19,683.441 1805.75,683.441 1806.31,683.441 1806.87,683.441 1807.43,683.441 1807.99,683.441 1808.55,683.441 1809.11,683.441 1809.67,683.441 1810.23,683.441 1810.79,683.441 1811.35,683.441 1811.9,683.441 1812.46,683.441 1813.02,683.441 1813.58,683.441 1814.14,683.441 1814.7,683.441 1815.26,683.441 1815.82,683.441 1816.38,683.441 1816.94,683.441 1817.5,683.441 1818.06,683.441 1818.62,683.441 1819.18,683.441 1819.73,683.441 1820.29,683.441 1820.85,683.441 1821.41,683.441 1821.97,683.441 1822.53,683.441 1823.09,683.441 1823.65,683.441 1824.21,683.441 1824.77,683.441 1825.33,683.441 1825.89,683.441 1826.45,683.441 1827,683.441 1827.56,683.441 1828.12,683.441 1828.68,683.441 1829.24,683.441 1829.8,683.441 1830.36,683.441 1830.92,683.441 1831.48,683.441 1832.04,683.441 1832.6,683.441 1833.16,683.441 1833.72,683.441 1834.27,683.441 1834.83,683.441 1835.39,683.441 1835.95,683.441 1836.51,683.441 1837.07,683.441 1837.63,683.441 1838.19,683.441 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.033156906620561 ± 0.02353014828969901\nProjected Energy: -4.014359074781899 ± (0.005048644999630092, 0.005029542242195539)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.475702</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3325e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.1422e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.967e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.393e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.585e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.215e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321623\n -3.36312429161336\n -0.7590191922770799\n  0.1358418221962321\n  0.15789998694609153\n  0.8767114411781254\n  1.530592997097333\n  1.5835732611867472\n  3.072870330325858\n  3.1256726539518382\n  4.862107221562171\n  6.26069485038059\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.1. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
