var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2096359494989564 ± 0.0014104740060245965\n   G2(1) = 0.9175033076124673 ± 0.0006359961885615161\n   G2(2) = 0.9830228151268028 ± 0.0006078773780972603\n   G2(3) = 0.9893118050225044 ± 0.0007610655384010886\n   G2(4) = 0.9830228151268028 ± 0.0006078773780972603\n   G2(5) = 0.9175033076124673 ± 0.0006359961885615161\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.023203287854336 ± 0.129525324305931\n   Replica 2: -4.069936040936378 ± 0.12830341867979966\n   Replica 3: -3.941918622616255 ± 0.13563415612016283\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip430\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip430)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip431\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip430)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip432\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1002.99 2211.02,1002.99 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.132 2211.02,745.132 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.277 2211.02,487.277 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.421 2211.02,229.421 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1002.99 423.181,1002.99 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.132 423.181,745.132 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.277 423.181,487.277 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.421 423.181,229.421 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.21 Q349.094 1253.75 349.094 1260.88 Q349.094 1267.98 350.899 1271.55 Q352.728 1275.09 356.339 1275.09 Q359.973 1275.09 361.779 1271.55 Q363.608 1267.98 363.608 1260.88 Q363.608 1253.75 361.779 1250.21 Q359.973 1246.64 356.339 1246.64 M356.339 1242.94 Q362.149 1242.94 365.205 1247.54 Q368.284 1252.13 368.284 1260.88 Q368.284 1269.6 365.205 1274.21 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.21 Q344.395 1269.6 344.395 1260.88 Q344.395 1252.13 347.45 1247.54 Q350.529 1242.94 356.339 1242.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M290.043 1016.33 L306.363 1016.33 L306.363 1020.27 L284.418 1020.27 L284.418 1016.33 Q287.08 1013.58 291.664 1008.95 Q296.27 1004.3 297.451 1002.95 Q299.696 1000.43 300.576 998.693 Q301.478 996.934 301.478 995.244 Q301.478 992.49 299.534 990.754 Q297.613 989.018 294.511 989.018 Q292.312 989.018 289.858 989.781 Q287.427 990.545 284.65 992.096 L284.65 987.374 Q287.474 986.24 289.927 985.661 Q292.381 985.082 294.418 985.082 Q299.789 985.082 302.983 987.768 Q306.177 990.453 306.177 994.943 Q306.177 997.073 305.367 998.994 Q304.58 1000.89 302.474 1003.49 Q301.895 1004.16 298.793 1007.37 Q295.691 1010.57 290.043 1016.33 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M316.224 985.707 L334.58 985.707 L334.58 989.643 L320.506 989.643 L320.506 998.115 Q321.524 997.767 322.543 997.605 Q323.562 997.42 324.58 997.42 Q330.367 997.42 333.747 1000.59 Q337.126 1003.76 337.126 1009.18 Q337.126 1014.76 333.654 1017.86 Q330.182 1020.94 323.862 1020.94 Q321.687 1020.94 319.418 1020.57 Q317.173 1020.2 314.765 1019.46 L314.765 1014.76 Q316.849 1015.89 319.071 1016.45 Q321.293 1017 323.77 1017 Q327.774 1017 330.112 1014.9 Q332.45 1012.79 332.45 1009.18 Q332.45 1005.57 330.112 1003.46 Q327.774 1001.36 323.77 1001.36 Q321.895 1001.36 320.02 1001.77 Q318.168 1002.19 316.224 1003.07 L316.224 985.707 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M356.339 988.786 Q352.728 988.786 350.899 992.351 Q349.094 995.892 349.094 1003.02 Q349.094 1010.13 350.899 1013.69 Q352.728 1017.23 356.339 1017.23 Q359.973 1017.23 361.779 1013.69 Q363.608 1010.13 363.608 1003.02 Q363.608 995.892 361.779 992.351 Q359.973 988.786 356.339 988.786 M356.339 985.082 Q362.149 985.082 365.205 989.689 Q368.284 994.272 368.284 1003.02 Q368.284 1011.75 365.205 1016.36 Q362.149 1020.94 356.339 1020.94 Q350.529 1020.94 347.45 1016.36 Q344.395 1011.75 344.395 1003.02 Q344.395 994.272 347.45 989.689 Q350.529 985.082 356.339 985.082 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M286.062 727.852 L304.418 727.852 L304.418 731.787 L290.344 731.787 L290.344 740.259 Q291.363 739.912 292.381 739.75 Q293.4 739.565 294.418 739.565 Q300.205 739.565 303.585 742.736 Q306.964 745.907 306.964 751.324 Q306.964 756.903 303.492 760.005 Q300.02 763.083 293.701 763.083 Q291.525 763.083 289.256 762.713 Q287.011 762.343 284.603 761.602 L284.603 756.903 Q286.687 758.037 288.909 758.593 Q291.131 759.148 293.608 759.148 Q297.613 759.148 299.951 757.042 Q302.288 754.935 302.288 751.324 Q302.288 747.713 299.951 745.606 Q297.613 743.5 293.608 743.5 Q291.733 743.5 289.858 743.917 Q288.006 744.333 286.062 745.213 L286.062 727.852 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M326.177 730.931 Q322.566 730.931 320.737 734.495 Q318.932 738.037 318.932 745.167 Q318.932 752.273 320.737 755.838 Q322.566 759.38 326.177 759.38 Q329.811 759.38 331.617 755.838 Q333.446 752.273 333.446 745.167 Q333.446 738.037 331.617 734.495 Q329.811 730.931 326.177 730.931 M326.177 727.227 Q331.987 727.227 335.043 731.833 Q338.122 736.417 338.122 745.167 Q338.122 753.893 335.043 758.5 Q331.987 763.083 326.177 763.083 Q320.367 763.083 317.288 758.5 Q314.233 753.893 314.233 745.167 Q314.233 736.417 317.288 731.833 Q320.367 727.227 326.177 727.227 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M356.339 730.931 Q352.728 730.931 350.899 734.495 Q349.094 738.037 349.094 745.167 Q349.094 752.273 350.899 755.838 Q352.728 759.38 356.339 759.38 Q359.973 759.38 361.779 755.838 Q363.608 752.273 363.608 745.167 Q363.608 738.037 361.779 734.495 Q359.973 730.931 356.339 730.931 M356.339 727.227 Q362.149 727.227 365.205 731.833 Q368.284 736.417 368.284 745.167 Q368.284 753.893 365.205 758.5 Q362.149 763.083 356.339 763.083 Q350.529 763.083 347.45 758.5 Q344.395 753.893 344.395 745.167 Q344.395 736.417 347.45 731.833 Q350.529 727.227 356.339 727.227 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M284.835 469.997 L307.057 469.997 L307.057 471.987 L294.511 504.557 L289.627 504.557 L301.432 473.932 L284.835 473.932 L284.835 469.997 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M316.224 469.997 L334.58 469.997 L334.58 473.932 L320.506 473.932 L320.506 482.404 Q321.524 482.057 322.543 481.895 Q323.562 481.709 324.58 481.709 Q330.367 481.709 333.747 484.881 Q337.126 488.052 337.126 493.469 Q337.126 499.047 333.654 502.149 Q330.182 505.228 323.862 505.228 Q321.687 505.228 319.418 504.857 Q317.173 504.487 314.765 503.746 L314.765 499.047 Q316.849 500.182 319.071 500.737 Q321.293 501.293 323.77 501.293 Q327.774 501.293 330.112 499.186 Q332.45 497.08 332.45 493.469 Q332.45 489.858 330.112 487.751 Q327.774 485.645 323.77 485.645 Q321.895 485.645 320.02 486.061 Q318.168 486.478 316.224 487.358 L316.224 469.997 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M356.339 473.075 Q352.728 473.075 350.899 476.64 Q349.094 480.182 349.094 487.311 Q349.094 494.418 350.899 497.983 Q352.728 501.524 356.339 501.524 Q359.973 501.524 361.779 497.983 Q363.608 494.418 363.608 487.311 Q363.608 480.182 361.779 476.64 Q359.973 473.075 356.339 473.075 M356.339 469.372 Q362.149 469.372 365.205 473.978 Q368.284 478.561 368.284 487.311 Q368.284 496.038 365.205 500.645 Q362.149 505.228 356.339 505.228 Q350.529 505.228 347.45 500.645 Q344.395 496.038 344.395 487.311 Q344.395 478.561 347.45 473.978 Q350.529 469.372 356.339 469.372 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M256.664 242.766 L264.303 242.766 L264.303 216.4 L255.992 218.067 L255.992 213.808 L264.256 212.141 L268.932 212.141 L268.932 242.766 L276.571 242.766 L276.571 246.701 L256.664 246.701 L256.664 242.766 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M296.015 215.22 Q292.404 215.22 290.576 218.785 Q288.77 222.326 288.77 229.456 Q288.77 236.562 290.576 240.127 Q292.404 243.669 296.015 243.669 Q299.65 243.669 301.455 240.127 Q303.284 236.562 303.284 229.456 Q303.284 222.326 301.455 218.785 Q299.65 215.22 296.015 215.22 M296.015 211.516 Q301.826 211.516 304.881 216.123 Q307.96 220.706 307.96 229.456 Q307.96 238.183 304.881 242.789 Q301.826 247.372 296.015 247.372 Q290.205 247.372 287.127 242.789 Q284.071 238.183 284.071 229.456 Q284.071 220.706 287.127 216.123 Q290.205 211.516 296.015 211.516 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M326.177 215.22 Q322.566 215.22 320.737 218.785 Q318.932 222.326 318.932 229.456 Q318.932 236.562 320.737 240.127 Q322.566 243.669 326.177 243.669 Q329.811 243.669 331.617 240.127 Q333.446 236.562 333.446 229.456 Q333.446 222.326 331.617 218.785 Q329.811 215.22 326.177 215.22 M326.177 211.516 Q331.987 211.516 335.043 216.123 Q338.122 220.706 338.122 229.456 Q338.122 238.183 335.043 242.789 Q331.987 247.372 326.177 247.372 Q320.367 247.372 317.288 242.789 Q314.233 238.183 314.233 229.456 Q314.233 220.706 317.288 216.123 Q320.367 211.516 326.177 211.516 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M356.339 215.22 Q352.728 215.22 350.899 218.785 Q349.094 222.326 349.094 229.456 Q349.094 236.562 350.899 240.127 Q352.728 243.669 356.339 243.669 Q359.973 243.669 361.779 240.127 Q363.608 236.562 363.608 229.456 Q363.608 222.326 361.779 218.785 Q359.973 215.22 356.339 215.22 M356.339 211.516 Q362.149 211.516 365.205 216.123 Q368.284 220.706 368.284 229.456 Q368.284 238.183 365.205 242.789 Q362.149 247.372 356.339 247.372 Q350.529 247.372 347.45 242.789 Q344.395 238.183 344.395 229.456 Q344.395 220.706 347.45 216.123 Q350.529 211.516 356.339 211.516 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip432)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.421 4017.76,229.421 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1249.06 457.691,1248.83 458.259,1248.53 458.828,1248.18 459.396,1247.73 459.964,1247.18 460.533,1245.57 461.101,1244.93 461.669,1244.22 462.238,1242.38 462.806,1241.52 463.375,1240.57 463.943,1238.48 464.511,1236.35 465.08,1235.13 465.648,1233.81 466.216,1232.38 466.785,1227.75 467.353,1226.15 467.921,1224.36 468.49,1222.49 469.058,1220.46 469.626,1218.26 470.195,1215.92 470.763,1212.37 471.331,1208.75 471.9,1205.88 472.468,1201.87 473.036,1197.74 473.605,1194.39 474.173,1190.91 474.741,1187.26 475.31,1183.35 475.878,1178.14 476.446,1173.81 477.015,1168.26 477.583,1163.49 478.152,1157.46 478.72,1151.19 479.288,1145.82 479.857,1138.23 480.425,1129.46 480.993,1120.5 481.562,1111.37 482.13,1104.2 482.698,1097.77 483.267,1091.19 483.835,1083.28 484.403,1075.24 484.972,1066.11 485.54,1056.7 486.108,1048.33 486.677,1039.86 487.245,1032.13 487.813,1022.16 488.382,1012.23 488.95,1004.17 489.518,992.953 490.087,983.765 490.655,974.372 491.224,963.665 491.792,953.011 492.36,942.237 492.929,933.439 493.497,923.651 494.065,912.654 494.634,901.574 495.202,891.698 495.77,880.611 496.339,870.516 496.907,860.27 497.475,850.2 498.044,837.944 498.612,828.833 499.18,818.627 499.749,806.509 500.317,796.671 500.885,786.712 501.454,777.927 502.022,765.946 502.59,756.177 503.159,747.574 503.727,737.873 504.295,725.116 504.864,714.54 505.432,705.078 506.001,693.713 506.569,686.449 507.137,675.29 507.706,666.286 508.274,656.49 508.842,648.89 509.411,640.036 509.979,629.376 510.547,620.877 511.116,613.365 511.684,604.092 512.252,594.708 512.821,584.602 513.389,576.751 513.957,568.905 514.526,560.188 515.094,553.838 515.662,547.423 516.231,537.74 516.799,531.494 517.367,524.248 517.936,518.275 518.504,511.16 519.072,502.309 519.641,495.865 520.209,488.58 520.778,480.254 521.346,475.221 521.914,468.306 522.483,463.345 523.051,457.689 523.619,452.136 524.188,446.669 524.756,442.255 525.324,436.662 525.893,431.124 526.461,426.966 527.029,421.948 527.598,416.938 528.166,409.795 528.734,407.247 529.303,403.464 529.871,397.741 530.439,393.459 531.008,390.079 531.576,386.891 532.144,382.554 532.713,378.12 533.281,375.014 533.85,371.904 534.418,368.705 534.986,363.53 535.555,357.582 536.123,355.035 536.691,351.464 537.26,346.198 537.828,342.014 538.396,341.267 538.965,339.047 539.533,338.045 540.101,333.673 540.67,329.757 541.238,329.081 541.806,327.19 542.375,324.382 542.943,321.755 543.511,320.331 544.08,316.601 544.648,314.134 545.216,309.867 545.785,309.766 546.353,307.67 546.921,304.366 547.49,304.403 548.058,305.273 548.627,303.261 549.195,301.022 549.763,299.868 550.332,297.575 550.9,294.348 551.468,292.288 552.037,290.356 552.605,289.503 553.173,287.778 553.742,286.027 554.31,284.398 554.878,281.601 555.447,280.032 556.015,279.73 556.583,276.202 557.152,274.742 557.72,277.573 558.288,277.85 558.857,276.112 559.425,276.543 559.993,278.856 560.562,276.993 561.13,275.211 561.698,273.427 562.267,271.851 562.835,271.354 563.404,269.823 563.972,269.308 564.54,268.792 565.109,269.425 565.677,265.838 566.245,263.506 566.814,264.199 567.382,264.642 567.95,264.379 568.519,261.966 569.087,257.316 569.655,257.219 570.224,257.004 570.792,257.828 571.36,256.551 571.929,256.417 572.497,257.45 573.065,258.215 573.634,257.992 574.202,258.785 574.77,259.606 575.339,259.191 575.907,255.722 576.476,254.186 577.044,254.822 577.612,253.608 578.181,253.616 578.749,250.375 579.317,249.39 579.886,247.494 580.454,247.423 581.022,243.402 581.591,242.886 582.159,244.582 582.727,245.992 583.296,242.227 583.864,243.755 584.432,244.35 585.001,244.746 585.569,246.185 586.137,246.564 586.706,246.575 587.274,244.482 587.842,241.715 588.411,240.182 588.979,240.708 589.547,241.09 590.116,242.728 590.684,240.014 591.253,240.506 591.821,240.76 592.389,243.237 592.958,242.35 593.526,243.609 594.094,242.681 594.663,243.816 595.231,242.887 595.799,243.049 596.368,244.51 596.936,244.451 597.504,243.414 598.073,243.439 598.641,242.658 599.209,244.641 599.778,243.68 600.346,246.959 600.914,247.712 601.483,247.412 602.051,247.174 602.619,245.791 603.188,245.718 603.756,243.497 604.325,242.477 604.893,242.332 605.461,242.197 606.03,241.205 606.598,243.415 607.166,242.417 607.735,242.372 608.303,243.182 608.871,245.308 609.44,247.114 610.008,246.805 610.576,246.172 611.145,245.861 611.713,244.481 612.281,242.224 612.85,241.002 613.418,239.952 613.986,241.95 614.555,243.945 615.123,241.354 615.691,239.164 616.26,239.161 616.828,240.115 617.396,239.001 617.965,239.792 618.533,236.61 619.102,236.995 619.67,239.26 620.238,235.187 620.807,237.537 621.375,234.606 621.943,235.67 622.512,233.996 623.08,233.226 623.648,233.632 624.217,236.059 624.785,237.31 625.353,234.347 625.922,233.697 626.49,233.737 627.058,234.979 627.627,233.037 628.195,234.385 628.763,232.553 629.332,231.027 629.9,229.455 630.468,229.024 631.037,230.827 631.605,232.65 632.173,232.123 632.742,233.7 633.31,235.185 633.879,235.299 634.447,234.544 635.015,233.638 635.584,235.053 636.152,234.203 636.72,235.381 637.289,233.626 637.857,230.979 638.425,231.45 638.994,232.013 639.562,233.478 640.13,232.605 640.699,234.958 641.267,236.221 641.835,235.158 642.404,233.462 642.972,233.89 643.54,234.077 644.109,234.429 644.677,234.654 645.245,235.34 645.814,235.602 646.382,234.691 646.951,234.688 647.519,233.837 648.087,234.034 648.656,233.397 649.224,234.759 649.792,235.942 650.361,235.983 650.929,234.062 651.497,231.053 652.066,232.501 652.634,233.584 653.202,234.801 653.771,236.139 654.339,235.254 654.907,234.508 655.476,233.837 656.044,233.96 656.612,235.363 657.181,233.422 657.749,234.662 658.317,234.968 658.886,238.005 659.454,237.771 660.022,236.435 660.591,237.716 661.159,237.465 661.728,237.302 662.296,236.043 662.864,237.096 663.433,235.069 664.001,236.109 664.569,235.093 665.138,235.096 665.706,237.314 666.274,237.041 666.843,237.851 667.411,236.671 667.979,236.407 668.548,232.444 669.116,230.607 669.684,230.001 670.253,229.084 670.821,229.541 671.389,228.907 671.958,228.139 672.526,229.619 673.094,230.098 673.663,229.564 674.231,228.036 674.799,228.611 675.368,228.002 675.936,227.503 676.505,228.077 677.073,228.748 677.641,228.339 678.21,227.821 678.778,230.478 679.346,229.701 679.915,229.2 680.483,229.58 681.051,230.914 681.62,231.378 682.188,230.492 682.756,230.892 683.325,230.179 683.893,233.681 684.461,233.829 685.03,232.731 685.598,234.177 686.166,234.269 686.735,233.414 687.303,234.526 687.871,232.461 688.44,232.761 689.008,231.593 689.577,230.654 690.145,229.941 690.713,230.431 691.282,228.819 691.85,229.293 692.418,230.611 692.987,230.706 693.555,232.22 694.123,232.67 694.692,231.937 695.26,232.259 695.828,233.342 696.397,233.628 696.965,233.885 697.533,233.04 698.102,234.335 698.67,234.591 699.238,233.549 699.807,233.87 700.375,233.111 700.943,234.606 701.512,233.627 702.08,233.632 702.648,233.71 703.217,236.789 703.785,236.668 704.354,236.409 704.922,236.528 705.49,236.642 706.059,236.712 706.627,235.543 707.195,236.327 707.764,237.096 708.332,234.942 708.9,235.904 709.469,233.823 710.037,234.82 710.605,233.627 711.174,234.611 711.742,234.66 712.31,234.769 712.879,235.77 713.447,235.44 714.015,234.257 714.584,234.046 715.152,235.081 715.72,234.952 716.289,234.034 716.857,233.812 717.425,234.98 717.994,234.029 718.562,234.053 719.131,230.066 719.699,229.326 720.267,229.614 720.836,229.918 721.404,230.264 721.972,230.586 722.541,234.769 723.109,234.631 723.677,234.694 724.246,233.578 724.814,233.571 725.382,232.753 725.951,232.776 726.519,232.7 727.087,232.808 727.656,231.657 728.224,232.749 728.792,233.786 729.361,233.809 729.929,233.56 730.497,232.429 731.066,235.709 731.634,233.432 732.203,234.353 732.771,232.24 733.339,230.301 733.908,232.673 734.476,231.596 735.044,234.732 735.613,234.477 736.181,235.34 736.749,233.915 737.318,233.586 737.886,235.323 738.454,236.015 739.023,236.469 739.591,236.108 740.159,235.726 740.728,235.323 741.296,234.094 741.864,233.75 742.433,234.627 743.001,234.584 743.569,235.484 744.138,234.083 744.706,236.148 745.274,235.866 745.843,235.551 746.411,234.208 746.98,233.839 747.548,231.339 748.116,229.144 748.685,228.316 749.253,229.621 749.821,227.563 750.39,229.86 750.958,229.882 751.526,232.069 752.095,233.052 752.663,233.87 753.231,233.728 753.8,231.705 754.368,231.63 754.936,231.338 755.505,232.446 756.073,231.358 756.641,231.278 757.21,231.132 757.778,230.312 758.346,229.248 758.915,229.314 759.483,230.466 760.052,232.719 760.62,232.595 761.188,233.49 761.757,232.249 762.325,232.021 762.893,232.029 763.462,235.967 764.03,235.559 764.598,234.217 765.167,234.06 765.735,234.771 766.303,234.438 766.872,233.017 767.44,232.717 768.008,231.463 768.577,231.313 769.145,231.283 769.713,232.164 770.282,230.056 770.85,228.849 771.418,228.869 771.987,229.925 772.555,229.838 773.123,229.812 773.692,229.851 774.26,226.906 774.829,225.925 775.397,225.109 775.965,227.658 776.534,226.751 777.102,227.975 777.67,226.151 778.239,225.067 778.807,224.439 779.375,225.01 779.944,231.639 780.512,232.755 781.08,232.622 781.649,232.286 782.217,230.955 782.785,230.006 783.354,227.709 783.922,228.857 784.49,230.884 785.059,229.962 785.627,230.075 786.195,231.228 786.764,233.09 787.332,229.743 787.9,228.997 788.469,227.918 789.037,227.072 789.606,228.309 790.174,227.392 790.742,226.618 791.311,228.97 791.879,228.786 792.447,229.831 793.016,229.592 793.584,229.807 794.152,229.977 794.721,227.826 795.289,225.155 795.857,226.56 796.426,228.031 796.994,230.347 797.562,228.243 798.131,228.255 798.699,226.343 799.267,226.643 799.836,227.939 800.404,227.98 800.972,229.297 801.541,231.335 802.109,229.215 802.678,230.51 803.246,231.864 803.814,233.861 804.383,233.676 804.951,231.526 805.519,231.341 806.088,232.402 806.656,232.138 807.224,234.286 807.793,236.05 808.361,235.799 808.929,235.33 809.498,233.949 810.066,234.679 810.634,232.267 811.203,230.972 811.771,231.691 812.339,231.529 812.908,233.576 813.476,232.313 814.044,233.894 814.613,233.626 815.181,233.486 815.749,231.888 816.318,230.914 816.886,230.974 817.455,230.884 818.023,229.982 818.591,228.85 819.16,227.793 819.728,227.915 820.296,225.958 820.865,227.215 821.433,228.387 822.001,228.433 822.57,226.35 823.138,227.568 823.706,226.711 824.275,228.132 824.843,225.403 825.411,225.992 825.98,227.27 826.548,229.514 827.116,231.828 827.685,232.891 828.253,233.677 828.821,232.296 829.39,231.083 829.958,231.069 830.526,231.01 831.095,230.937 831.663,230.871 832.232,234.077 832.8,234.553 833.368,235.453 833.937,233.226 834.505,230.816 835.073,230.699 835.642,229.722 836.21,230.778 836.778,231.817 837.347,231.708 837.915,231.745 838.483,230.426 839.052,231.675 839.62,228.644 840.188,228.695 840.757,228.769 841.325,226.91 841.893,227.078 842.462,225.221 843.03,224.493 843.598,223.959 844.167,225.535 844.735,225.901 845.304,227.498 845.872,229.819 846.44,229.83 847.009,228.659 847.577,228.929 848.145,230.104 848.714,228.969 849.282,231.097 849.85,230.91 850.419,231.974 850.987,232.006 851.555,232.874 852.124,231.677 852.692,230.44 853.26,229.219 853.829,231.19 854.397,231.143 854.965,232.058 855.534,230.852 856.102,230.852 856.67,230.858 857.239,228.597 857.807,227.557 858.375,227.682 858.944,226.779 859.512,226.838 860.081,228.316 860.649,228.645 861.217,228.811 861.786,229.866 862.354,231.866 862.922,231.462 863.491,229.198 864.059,228.23 864.627,229.447 865.196,228.409 865.764,229.614 866.332,227.567 866.901,227.674 867.469,227.82 868.037,227.079 868.606,226.37 869.174,225.581 869.742,225.037 870.311,226.455 870.879,227.732 871.447,228.981 872.016,230.166 872.584,231.31 873.152,231.27 873.721,232.334 874.289,234.431 874.858,234.005 875.426,233.706 875.994,232.398 876.563,232.128 877.131,231.846 877.699,232.673 878.268,232.445 878.836,232.123 879.404,233.953 879.973,230.817 880.541,230.506 881.109,231.462 881.678,229.328 882.246,231.46 882.814,232.567 883.383,232.487 883.951,231.202 884.519,231.065 885.088,229.958 885.656,228.889 886.224,229.022 886.793,230.118 887.361,229.271 887.93,229.098 888.498,231.096 889.066,228.985 889.635,230.966 890.203,230.753 890.771,231.669 891.34,231.519 891.908,231.379 892.476,229.313 893.045,228.982 893.613,227.84 894.181,226.871 894.75,228.089 895.318,229.275 895.886,227.226 896.455,226.36 897.023,227.312 897.591,227.367 898.16,227.511 898.728,226.409 899.296,227.633 899.865,228.863 900.433,226.057 901.001,226.714 901.57,224.934 902.138,225.371 902.707,226.728 903.275,226.106 903.843,226.493 904.412,226.931 904.98,229.284 905.548,230.332 906.117,230.396 906.685,231.375 907.253,232.24 907.822,233.087 908.39,233.878 908.958,234.642 909.527,235.339 910.095,234.983 910.663,234.538 911.232,232.069 911.8,230.774 912.368,230.823 912.937,230.825 913.505,229.958 914.073,228.92 914.642,227.048 915.21,227.38 915.779,228.529 916.347,227.668 916.915,227.652 917.484,224.901 918.052,225.22 918.62,226.78 919.189,227.831 919.757,229.14 920.325,232.386 920.894,232.261 921.462,233.081 922.03,233.9 922.599,232.668 923.167,232.411 923.735,234.493 924.304,234.176 924.872,232.926 925.44,230.613 926.009,230.518 926.577,229.491 927.145,229.667 927.714,230.847 928.282,229.846 928.85,229.95 929.419,231.102 929.987,231.174 930.556,233.195 931.124,233.83 931.692,234.657 932.261,232.304 932.829,231.06 933.397,230.835 933.966,227.914 934.534,227.035 935.102,227.407 935.671,227.826 936.239,229.148 936.807,231.268 937.376,229.153 937.944,230.166 938.512,230.213 939.081,231.271 939.649,230.2 940.217,230.081 940.786,229.754 941.354,230.908 941.922,228.59 942.491,229.817 943.059,228.862 943.627,227.884 944.196,228.072 944.764,227.215 945.333,225.207 945.901,225.274 946.469,223.589 947.038,223.1 947.606,222.549 948.174,224.919 948.743,226.423 949.311,228.884 949.879,227.812 950.448,231.096 951.016,232.36 951.584,232.133 952.153,234.213 952.721,233.08 953.289,231.793 953.858,231.571 954.426,231.353 954.994,232.61 955.563,230.372 956.131,230.387 956.699,231.468 957.268,232.554 957.836,230.314 958.405,233.311 958.973,232.08 959.541,233.074 960.11,232.905 960.678,231.521 961.246,231.415 961.815,234.397 962.383,233.094 962.951,230.672 963.52,232.675 964.088,231.349 964.656,232.227 965.225,232.259 965.793,233.918 966.361,233.646 966.93,234.549 967.498,233.046 968.066,234.715 968.635,231.418 969.203,231.426 969.771,232.957 970.34,232.559 970.908,232.614 971.476,232.247 972.045,231.862 972.613,229.59 973.182,229.737 973.75,230.783 974.318,229.724 974.887,228.399 975.455,228.304 976.023,229.284 976.592,226.481 977.16,224.502 977.728,225.785 978.297,223.041 978.865,221.379 979.433,222.066 980.002,221.663 980.57,222.287 981.138,222.764 981.707,225.37 982.275,224.683 982.843,225.085 983.412,224.678 983.98,225.918 984.548,227.242 985.117,227.407 985.685,226.717 986.253,228.979 986.822,229.047 987.39,231.283 987.959,233.09 988.527,234.85 989.095,232.339 989.664,230.35 990.232,229.354 990.8,229.263 991.369,229.367 991.937,227.55 992.505,227.535 993.074,226.487 993.642,227.785 994.21,224.854 994.779,228.52 995.347,228.478 995.915,230.741 996.484,230.712 997.052,230.504 997.62,229.23 998.189,229.257 998.757,226.908 999.325,227.18 999.894,227.245 1000.46,226.214 1001.03,226.438 1001.6,225.796 1002.17,227.067 1002.74,225.326 1003.3,225.553 1003.87,225.974 1004.44,226.519 1005.01,227.836 1005.58,227.016 1006.15,228.122 1006.71,228.362 1007.28,228.637 1007.85,227.548 1008.42,226.812 1008.99,227.913 1009.56,227.288 1010.12,227.75 1010.69,227.833 1011.26,227.982 1011.83,227.145 1012.4,227.446 1012.97,230.793 1013.53,228.997 1014.1,229.105 1014.67,230.134 1015.24,232.203 1015.81,230.18 1016.38,229.055 1016.94,230.37 1017.51,229.428 1018.08,228.741 1018.65,227.959 1019.22,231.207 1019.79,231.266 1020.35,230.34 1020.92,230.618 1021.49,229.599 1022.06,228.861 1022.63,230.168 1023.2,232.325 1023.76,231.185 1024.33,231.946 1024.9,232.94 1025.47,233.966 1026.04,234.826 1026.61,238.845 1027.17,239.385 1027.74,237.796 1028.31,237.332 1028.88,238.958 1029.45,236.164 1030.02,234.747 1030.58,234.316 1031.15,234.805 1031.72,232.263 1032.29,230.866 1032.86,230.783 1033.43,230.677 1033.99,230.429 1034.56,231.354 1035.13,230.144 1035.7,229.378 1036.27,230.371 1036.84,230.251 1037.4,231.335 1037.97,230.959 1038.54,229.769 1039.11,229.85 1039.68,229.81 1040.25,228.989 1040.81,229.036 1041.38,231.12 1041.95,230.019 1042.52,230.017 1043.09,228.907 1043.66,231.011 1044.22,231.973 1044.79,230.658 1045.36,230.494 1045.93,228.509 1046.5,226.294 1047.07,226.361 1047.63,227.495 1048.2,228.353 1048.77,228.428 1049.34,228.544 1049.91,228.681 1050.48,229.937 1051.05,230.965 1051.61,228.986 1052.18,227.871 1052.75,226.851 1053.32,226.998 1053.89,227.171 1054.46,227.405 1055.02,229.776 1055.59,229.592 1056.16,228.536 1056.73,226.583 1057.3,224.838 1057.87,223.024 1058.43,224.399 1059,225.792 1059.57,225.947 1060.14,223.122 1060.71,223.624 1061.28,224.091 1061.84,224.725 1062.41,225.886 1062.98,227.121 1063.55,226.245 1064.12,227.593 1064.69,230.004 1065.25,231.051 1065.82,234.078 1066.39,233.822 1066.96,230.355 1067.53,230.563 1068.1,229.778 1068.66,227.622 1069.23,227.04 1069.8,226.311 1070.37,227.505 1070.94,227.622 1071.51,227.804 1072.07,225.967 1072.64,228.248 1073.21,230.494 1073.78,230.408 1074.35,231.355 1074.92,231.31 1075.48,230.424 1076.05,231.49 1076.62,232.532 1077.19,232.372 1077.76,231.197 1078.33,230.106 1078.89,228.001 1079.46,228.201 1080.03,229.546 1080.6,231.6 1081.17,232.61 1081.74,230.429 1082.3,232.475 1082.87,234.471 1083.44,237.281 1084.01,238.017 1084.58,238.347 1085.15,240.754 1085.71,238.158 1086.28,240.437 1086.85,239.783 1087.42,237.795 1087.99,235.245 1088.56,235.91 1089.12,233.196 1089.69,231.725 1090.26,232.804 1090.83,232.255 1091.4,230.043 1091.97,229.984 1092.53,232.15 1093.1,227.632 1093.67,228.74 1094.24,228.733 1094.81,227.936 1095.38,228.988 1095.94,229.061 1096.51,228.278 1097.08,227.084 1097.65,227.093 1098.22,227.228 1098.79,226.141 1099.35,226.157 1099.92,226.194 1100.49,225.353 1101.06,225.577 1101.63,225.807 1102.2,224.039 1102.76,223.592 1103.33,223.776 1103.9,225.101 1104.47,223.497 1105.04,224.927 1105.61,223.858 1106.17,226.516 1106.74,228.937 1107.31,229.113 1107.88,230.351 1108.45,231.194 1109.02,234.054 1109.58,235.938 1110.15,235.495 1110.72,235.021 1111.29,233.744 1111.86,234.406 1112.43,232.067 1112.99,231.756 1113.56,231.658 1114.13,231.518 1114.7,230.567 1115.27,232.546 1115.84,231.2 1116.4,232.127 1116.97,230.784 1117.54,229.753 1118.11,229.53 1118.68,228.311 1119.25,227.285 1119.81,225.387 1120.38,225.624 1120.95,227.74 1121.52,229.093 1122.09,227.865 1122.66,227.908 1123.23,226.763 1123.79,225.981 1124.36,226.068 1124.93,227.272 1125.5,226.454 1126.07,227.872 1126.64,228.104 1127.2,229.147 1127.77,228.223 1128.34,227.255 1128.91,226.572 1129.48,230.107 1130.05,231.982 1130.61,232.872 1131.18,232.597 1131.75,231.19 1132.32,231.075 1132.89,231.02 1133.46,230.661 1134.02,231.416 1134.59,230.359 1135.16,230.411 1135.73,228.296 1136.3,230.25 1136.87,232.15 1137.43,232.026 1138,231.699 1138.57,231.585 1139.14,231.273 1139.71,232.326 1140.28,232.006 1140.84,233.808 1141.41,230.282 1141.98,230.152 1142.55,231.132 1143.12,229.999 1143.69,228.957 1144.25,228.912 1144.82,227.993 1145.39,229.2 1145.96,229.251 1146.53,229.231 1147.1,231.119 1147.66,233.107 1148.23,231.724 1148.8,230.566 1149.37,230.617 1149.94,230.549 1150.51,229.276 1151.07,227.224 1151.64,226.468 1152.21,226.584 1152.78,227.86 1153.35,225.846 1153.92,224.904 1154.48,225.376 1155.05,226.452 1155.62,225.57 1156.19,225.797 1156.76,223.79 1157.33,226.142 1157.89,226.252 1158.46,227.241 1159.03,227.451 1159.6,228.652 1160.17,227.352 1160.74,227.35 1161.3,226.312 1161.87,226.382 1162.44,227.539 1163.01,226.506 1163.58,226.784 1164.15,227.777 1164.71,228.084 1165.28,228.354 1165.85,229.409 1166.42,227.494 1166.99,228.676 1167.56,228.534 1168.12,229.557 1168.69,229.648 1169.26,228.561 1169.83,227.656 1170.4,227.842 1170.97,228.95 1171.53,229.236 1172.1,228.475 1172.67,228.683 1173.24,228.769 1173.81,228.071 1174.38,228.067 1174.94,229.058 1175.51,229.972 1176.08,228.666 1176.65,227.671 1177.22,228.016 1177.79,226.027 1178.35,225.385 1178.92,223.783 1179.49,224.088 1180.06,225.615 1180.63,226.811 1181.2,226.122 1181.76,227.597 1182.33,228.827 1182.9,226.88 1183.47,228.486 1184.04,230.78 1184.61,228.702 1185.17,228.888 1185.74,227.975 1186.31,233.169 1186.88,232.815 1187.45,232.599 1188.02,232.439 1188.58,231.276 1189.15,232.182 1189.72,230.801 1190.29,231.693 1190.86,230.784 1191.43,232.73 1192,232.327 1192.56,230.241 1193.13,230.45 1193.7,229.501 1194.27,229.491 1194.84,229.681 1195.41,228.795 1195.97,230.978 1196.54,229.945 1197.11,231.26 1197.68,230.346 1198.25,229.316 1198.82,229.489 1199.38,230.783 1199.95,230.774 1200.52,231.744 1201.09,230.659 1201.66,229.465 1202.23,229.601 1202.79,228.49 1203.36,227.706 1203.93,228.213 1204.5,229.498 1205.07,230.839 1205.64,232.84 1206.2,233.897 1206.77,233.529 1207.34,230.213 1207.91,230.258 1208.48,229.131 1209.05,227.003 1209.61,227.342 1210.18,227.664 1210.75,225.814 1211.32,227.392 1211.89,227.853 1212.46,231.079 1213.02,230.982 1213.59,231.877 1214.16,230.537 1214.73,230.421 1215.3,230.198 1215.87,230.178 1216.43,232.164 1217,232.028 1217.57,230.99 1218.14,232.903 1218.71,233.859 1219.28,233.565 1219.84,233.151 1220.41,232.935 1220.98,230.558 1221.55,230.496 1222.12,229.508 1222.69,229.495 1223.25,229.341 1223.82,229.016 1224.39,227.111 1224.96,227.317 1225.53,227.501 1226.1,227.681 1226.66,226.949 1227.23,225.076 1227.8,226.51 1228.37,226.635 1228.94,226.775 1229.51,227.108 1230.07,227.347 1230.64,227.361 1231.21,229.602 1231.78,229.901 1232.35,229.84 1232.92,230.207 1233.48,227.097 1234.05,230.307 1234.62,229.191 1235.19,230.196 1235.76,232.056 1236.33,232.831 1236.89,232.593 1237.46,232.421 1238.03,232.114 1238.6,231.757 1239.17,231.677 1239.74,230.677 1240.3,232.628 1240.87,230.34 1241.44,230.389 1242.01,229.347 1242.58,230.522 1243.15,233.473 1243.71,234.143 1244.28,231.774 1244.85,230.614 1245.42,229.629 1245.99,229.661 1246.56,230.717 1247.12,231.462 1247.69,234.467 1248.26,233.142 1248.83,233.582 1249.4,232.126 1249.97,232.949 1250.53,232.742 1251.1,230.197 1251.67,229.965 1252.24,230.89 1252.81,230.682 1253.38,232.643 1253.94,232.306 1254.51,231.043 1255.08,229.767 1255.65,229.766 1256.22,229.594 1256.79,229.482 1257.35,230.466 1257.92,230.158 1258.49,228.003 1259.06,227.993 1259.63,227.885 1260.2,228.854 1260.76,226.794 1261.33,231.082 1261.9,228.859 1262.47,226.753 1263.04,227.026 1263.61,228.237 1264.18,229.272 1264.74,230.446 1265.31,230.134 1265.88,229.983 1266.45,230.97 1267.02,230.616 1267.59,235.499 1268.15,236.989 1268.72,237.366 1269.29,237.948 1269.86,236.354 1270.43,237.841 1271,237.048 1271.56,235.131 1272.13,235.793 1272.7,236.57 1273.27,235.692 1273.84,234.034 1274.41,233.541 1274.97,235.146 1275.54,234.506 1276.11,234.944 1276.68,235.512 1277.25,234.843 1277.82,234.303 1278.38,232.873 1278.95,231.331 1279.52,232.333 1280.09,232.085 1280.66,231.806 1281.23,229.322 1281.79,229.088 1282.36,227.721 1282.93,226.443 1283.5,228.675 1284.07,228.61 1284.64,228.564 1285.2,229.669 1285.77,229.288 1286.34,229.128 1286.91,227.802 1287.48,227.621 1288.05,229.805 1288.61,230.651 1289.18,231.166 1289.75,230.681 1290.32,229.381 1290.89,229.159 1291.46,229.056 1292.02,227.786 1292.59,227.759 1293.16,226.564 1293.73,228.891 1294.3,226.629 1294.87,225.484 1295.43,225.741 1296,225.746 1296.57,227.881 1297.14,227.657 1297.71,227.66 1298.28,227.732 1298.84,225.714 1299.41,225.842 1299.98,227.039 1300.55,227.162 1301.12,227.088 1301.69,227.997 1302.25,226.867 1302.82,226.983 1303.39,224.982 1303.96,225.218 1304.53,225.101 1305.1,226.455 1305.66,226.538 1306.23,226.773 1306.8,228.838 1307.37,228.748 1307.94,228.828 1308.51,226.727 1309.07,226.8 1309.64,226.884 1310.21,224.736 1310.78,225.048 1311.35,224.22 1311.92,225.576 1312.48,224.792 1313.05,228.225 1313.62,228.347 1314.19,228.414 1314.76,228.366 1315.33,231.519 1315.89,227.146 1316.46,229.556 1317.03,228.347 1317.6,227.421 1318.17,225.376 1318.74,225.277 1319.3,224.41 1319.87,222.605 1320.44,222.116 1321.01,220.804 1321.58,221.449 1322.15,219.989 1322.71,221.734 1323.28,221.388 1323.85,220.972 1324.42,221.879 1324.99,223.463 1325.56,224.903 1326.12,226.506 1326.69,226.753 1327.26,227.005 1327.83,230.292 1328.4,231.381 1328.97,232.316 1329.53,232.048 1330.1,230.922 1330.67,231.847 1331.24,231.92 1331.81,233.986 1332.38,233.78 1332.94,233.501 1333.51,233.171 1334.08,231.928 1334.65,231.874 1335.22,230.717 1335.79,230.674 1336.36,230.597 1336.92,231.499 1337.49,232.395 1338.06,232.063 1338.63,231.021 1339.2,231.005 1339.77,230.763 1340.33,232.747 1340.9,232.61 1341.47,233.259 1342.04,232.007 1342.61,232.82 1343.18,231.748 1343.74,230.634 1344.31,230.627 1344.88,229.375 1345.45,231.482 1346.02,229.293 1346.59,230.631 1347.15,230.544 1347.72,230.457 1348.29,229.328 1348.86,227.312 1349.43,225.171 1350,225.33 1350.56,224.908 1351.13,225.159 1351.7,227.297 1352.27,228.344 1352.84,231.468 1353.41,230.25 1353.97,228.386 1354.54,227.512 1355.11,228.964 1355.68,230.078 1356.25,228.186 1356.82,228.436 1357.38,229.359 1357.95,229.485 1358.52,229.476 1359.09,228.485 1359.66,229.666 1360.23,228.657 1360.79,228.947 1361.36,230.085 1361.93,231.328 1362.5,229.918 1363.07,228.948 1363.64,228.893 1364.2,229.002 1364.77,227.006 1365.34,226.98 1365.91,227.085 1366.48,227.254 1367.05,228.496 1367.61,227.418 1368.18,224.339 1368.75,224.703 1369.32,224.003 1369.89,223.497 1370.46,225.083 1371.02,226.715 1371.59,226.23 1372.16,225.54 1372.73,226.074 1373.3,225.409 1373.87,225.755 1374.43,227.099 1375,225.238 1375.57,228.694 1376.14,230.906 1376.71,231.008 1377.28,228.782 1377.84,230.071 1378.41,232.142 1378.98,233.067 1379.55,232.884 1380.12,231.772 1380.69,230.856 1381.25,230.872 1381.82,230.924 1382.39,231.965 1382.96,230.757 1383.53,229.977 1384.1,232.209 1384.66,234.147 1385.23,234.926 1385.8,236.739 1386.37,236.447 1386.94,236.13 1387.51,233.425 1388.07,232.197 1388.64,234.037 1389.21,234.202 1389.78,236.221 1390.35,233.58 1390.92,231.954 1391.48,232.511 1392.05,230.108 1392.62,231.25 1393.19,231.14 1393.76,231.2 1394.33,232.17 1394.89,230.882 1395.46,229.806 1396.03,231.766 1396.6,231.522 1397.17,232.384 1397.74,232.111 1398.3,229.796 1398.87,226.71 1399.44,227.915 1400.01,226.933 1400.58,223.909 1401.15,222.813 1401.71,224.38 1402.28,225.73 1402.85,227.021 1403.42,229.218 1403.99,228.302 1404.56,227.37 1405.13,228.602 1405.69,226.495 1406.26,227.771 1406.83,228.877 1407.4,228.926 1407.97,228.794 1408.54,228.755 1409.1,225.873 1409.67,224.252 1410.24,224.758 1410.81,225.035 1411.38,227.254 1411.95,225.278 1412.51,224.712 1413.08,224.206 1413.65,225.681 1414.22,224.898 1414.79,227.252 1415.36,227.397 1415.92,229.734 1416.49,228.919 1417.06,227.855 1417.63,227.047 1418.2,227.329 1418.77,227.532 1419.33,229.754 1419.9,229.863 1420.47,226.845 1421.04,227.046 1421.61,226.457 1422.18,225.773 1422.74,228.042 1423.31,229.073 1423.88,228.144 1424.45,228.39 1425.02,228.488 1425.59,228.692 1426.15,228.787 1426.72,227.744 1427.29,229.043 1427.86,231.069 1428.43,230.783 1429,231.705 1429.56,231.533 1430.13,230.363 1430.7,229.461 1431.27,229.567 1431.84,232.659 1432.41,233.491 1432.97,236.245 1433.54,236.966 1434.11,237.585 1434.68,236.006 1435.25,235.829 1435.82,236.374 1436.38,234.947 1436.95,233.479 1437.52,233.493 1438.09,234.206 1438.66,232.956 1439.23,233.955 1439.79,233.54 1440.36,235.343 1440.93,233.808 1441.5,234.45 1442.07,235.057 1442.64,233.495 1443.2,233.211 1443.77,233.737 1444.34,233.485 1444.91,233.082 1445.48,232.861 1446.05,230.596 1446.61,226.628 1447.18,229.597 1447.75,229.597 1448.32,228.243 1448.89,229.412 1449.46,229.292 1450.02,229.298 1450.59,230.153 1451.16,228.857 1451.73,228.498 1452.3,224.339 1452.87,223.522 1453.43,227.13 1454,226.098 1454.57,226.512 1455.14,226.565 1455.71,226.96 1456.28,227.077 1456.84,227.331 1457.41,226.711 1457.98,226.963 1458.55,230.909 1459.12,230.654 1459.69,228.678 1460.25,229.724 1460.82,228.67 1461.39,231.83 1461.96,228.394 1462.53,229.391 1463.1,229.29 1463.66,230.206 1464.23,228.918 1464.8,231.038 1465.37,230.849 1465.94,230.634 1466.51,229.322 1467.07,227.307 1467.64,227.252 1468.21,226.259 1468.78,225.576 1469.35,224.687 1469.92,225.103 1470.48,224.284 1471.05,223.434 1471.62,224.897 1472.19,227.195 1472.76,227.413 1473.33,227.526 1473.89,229.608 1474.46,230.696 1475.03,231.771 1475.6,231.615 1476.17,229.284 1476.74,227.358 1477.31,227.422 1477.87,226.754 1478.44,228.141 1479.01,227.225 1479.58,226.395 1480.15,227.754 1480.72,229.145 1481.28,230.296 1481.85,232.333 1482.42,231.912 1482.99,234.642 1483.56,234.355 1484.13,233.707 1484.69,233.503 1485.26,233.259 1485.83,231.683 1486.4,231.488 1486.97,232.366 1487.54,232.249 1488.1,232.171 1488.67,231.839 1489.24,232.851 1489.81,231.539 1490.38,230.409 1490.95,228.231 1491.51,227.248 1492.08,227.401 1492.65,227.526 1493.22,229.769 1493.79,229.808 1494.36,230.784 1494.92,230.557 1495.49,230.643 1496.06,230.54 1496.63,228.356 1497.2,228.307 1497.77,228.268 1498.33,230.503 1498.9,229.251 1499.47,229.101 1500.04,229.036 1500.61,228.933 1501.18,227.997 1501.74,227.164 1502.31,228.275 1502.88,226.324 1503.45,228.349 1504.02,227.202 1504.59,225.202 1505.15,224.526 1505.72,224.957 1506.29,228.498 1506.86,229.571 1507.43,228.6 1508,228.269 1508.56,230.429 1509.13,229.499 1509.7,228.622 1510.27,229.741 1510.84,230.535 1511.41,227.592 1511.97,228.741 1512.54,229.999 1513.11,229.748 1513.68,228.845 1514.25,227.659 1514.82,226.851 1515.38,223.82 1515.95,223.198 1516.52,223.488 1517.09,229.247 1517.66,229.336 1518.23,230.468 1518.79,230.263 1519.36,231.404 1519.93,231.285 1520.5,229.202 1521.07,229.321 1521.64,228.279 1522.2,230.41 1522.77,228.35 1523.34,228.505 1523.91,229.454 1524.48,229.441 1525.05,231.755 1525.61,229.566 1526.18,230.516 1526.75,230.385 1527.32,228.333 1527.89,232.501 1528.46,233.485 1529.02,230.169 1529.59,230.031 1530.16,230.147 1530.73,230.16 1531.3,230.308 1531.87,230.193 1532.43,231.39 1533,231.496 1533.57,233.297 1534.14,232.725 1534.71,231.43 1535.28,233.316 1535.84,231.885 1536.41,230.711 1536.98,230.422 1537.55,232.592 1538.12,233.054 1538.69,232.976 1539.25,231.781 1539.82,232.537 1540.39,230.244 1540.96,230.997 1541.53,229.948 1542.1,228.922 1542.66,230.044 1543.23,229.909 1543.8,227.762 1544.37,229.832 1544.94,227.738 1545.51,224.822 1546.08,223.036 1546.64,223.246 1547.21,224.723 1547.78,224.026 1548.35,222.555 1548.92,225.065 1549.49,225.365 1550.05,225.77 1550.62,224.941 1551.19,225.46 1551.76,226.725 1552.33,226.854 1552.9,226.95 1553.46,226.091 1554.03,226.285 1554.6,228.737 1555.17,229.7 1555.74,228.665 1556.31,230.929 1556.87,232.03 1557.44,231.009 1558.01,232.934 1558.58,231.616 1559.15,230.341 1559.72,233.397 1560.28,229.04 1560.85,229.981 1561.42,229.91 1561.99,229.065 1562.56,229.252 1563.13,232.766 1563.69,230.612 1564.26,232.661 1564.83,231.51 1565.4,231.31 1565.97,233.37 1566.54,232.222 1567.1,230.077 1567.67,231.118 1568.24,229.99 1568.81,230.804 1569.38,228.74 1569.95,230.031 1570.51,230.969 1571.08,232.064 1571.65,231.702 1572.22,230.65 1572.79,230.8 1573.36,230.931 1573.92,230.769 1574.49,231.837 1575.06,230.751 1575.63,230.559 1576.2,229.681 1576.77,230.626 1577.33,228.4 1577.9,228.309 1578.47,228.257 1579.04,229.14 1579.61,230.159 1580.18,231.039 1580.74,230.795 1581.31,228.621 1581.88,229.74 1582.45,231.834 1583.02,232.535 1583.59,229.258 1584.15,232.357 1584.72,232.086 1585.29,228.696 1585.86,229.859 1586.43,230.675 1587,229.521 1587.56,229.535 1588.13,231.601 1588.7,233.45 1589.27,235.145 1589.84,230.608 1590.41,230.443 1590.97,232.359 1591.54,233.074 1592.11,234.843 1592.68,234.28 1593.25,234.954 1593.82,234.361 1594.38,232.923 1594.95,233.299 1595.52,232.828 1596.09,232.495 1596.66,232.355 1597.23,232.14 1597.79,231.587 1598.36,230.199 1598.93,229.961 1599.5,229.846 1600.07,227.818 1600.64,228.883 1601.2,227.806 1601.77,228.767 1602.34,229.722 1602.91,230.732 1603.48,228.492 1604.05,227.377 1604.61,226.218 1605.18,226.314 1605.75,228.268 1606.32,227.095 1606.89,227.085 1607.46,227.284 1608.02,228.352 1608.59,227.197 1609.16,226.336 1609.73,225.554 1610.3,225.768 1610.87,226.029 1611.43,225.375 1612,225.556 1612.57,224.78 1613.14,226.042 1613.71,229.092 1614.28,228.095 1614.84,229.053 1615.41,230.048 1615.98,229.874 1616.55,228.859 1617.12,228.848 1617.69,228.777 1618.26,228.806 1618.82,229.773 1619.39,229.647 1619.96,229.576 1620.53,230.291 1621.1,228.051 1621.67,228.038 1622.23,229.113 1622.8,226.147 1623.37,226.245 1623.94,226.453 1624.51,226.632 1625.08,225.689 1625.64,225.026 1626.21,227.281 1626.78,227.49 1627.35,227.968 1627.92,227.962 1628.49,228.11 1629.05,225.133 1629.62,224.423 1630.19,225.713 1630.76,224.822 1631.33,226.185 1631.9,224.436 1632.46,224.687 1633.03,221.798 1633.6,220.165 1634.17,221.806 1634.74,221.601 1635.31,222.163 1635.87,220.699 1636.44,222.478 1637.01,224.045 1637.58,225.765 1638.15,226.219 1638.72,226.761 1639.28,227.053 1639.85,226.374 1640.42,226.749 1640.99,224.947 1641.56,225.352 1642.13,225.664 1642.69,227.244 1643.26,224.558 1643.83,226.126 1644.4,226.702 1644.97,227.941 1645.54,228.367 1646.1,229.609 1646.67,230.639 1647.24,231.606 1647.81,231.393 1648.38,231.331 1648.95,229.398 1649.51,228.666 1650.08,228.995 1650.65,229.111 1651.22,233.266 1651.79,232.28 1652.36,233.28 1652.92,234.234 1653.49,232.999 1654.06,232.861 1654.63,233.76 1655.2,232.634 1655.77,234.854 1656.33,236.623 1656.9,236.463 1657.47,235.045 1658.04,236.153 1658.61,235.756 1659.18,236.442 1659.74,235.862 1660.31,237.245 1660.88,237.864 1661.45,239.188 1662.02,238.364 1662.59,234.531 1663.15,235.199 1663.72,233.954 1664.29,234.591 1664.86,234.283 1665.43,234.135 1666,233.947 1666.56,232.71 1667.13,232.651 1667.7,233.49 1668.27,232.193 1668.84,231.82 1669.41,231.599 1669.97,231.401 1670.54,230.475 1671.11,229.31 1671.68,229.13 1672.25,228.963 1672.82,230.986 1673.38,232.882 1673.95,233.643 1674.52,231.916 1675.09,231.306 1675.66,228.992 1676.23,230.055 1676.79,229.934 1677.36,231.759 1677.93,228.678 1678.5,228.61 1679.07,227.65 1679.64,227.823 1680.2,225.763 1680.77,227.746 1681.34,227.996 1681.91,229.065 1682.48,228.128 1683.05,228.168 1683.61,227.444 1684.18,228.496 1684.75,228.613 1685.32,229.672 1685.89,229.677 1686.46,229.749 1687.02,229.795 1687.59,229.776 1688.16,227.424 1688.73,228.571 1689.3,227.542 1689.87,228.822 1690.44,231.104 1691,230.704 1691.57,229.564 1692.14,229.44 1692.71,229.322 1693.28,229.376 1693.85,227.273 1694.41,227.554 1694.98,228.709 1695.55,228.71 1696.12,228.647 1696.69,228.942 1697.26,229.991 1697.82,228.811 1698.39,229.772 1698.96,226.762 1699.53,225.923 1700.1,226.195 1700.67,226.501 1701.23,224.703 1701.8,226.128 1702.37,225.571 1702.94,228.046 1703.51,227.023 1704.08,225.112 1704.64,224.579 1705.21,224.94 1705.78,222.445 1706.35,222.783 1706.92,222.482 1707.49,222.885 1708.05,224.548 1708.62,223.104 1709.19,222.713 1709.76,226.162 1710.33,229.632 1710.9,229.472 1711.46,229.605 1712.03,231.892 1712.6,226.681 1713.17,226.914 1713.74,228.175 1714.31,228.1 1714.87,228.243 1715.44,229.342 1716.01,228.237 1716.58,228.396 1717.15,229.411 1717.72,228.272 1718.28,227.534 1718.85,226.766 1719.42,230.267 1719.99,230.191 1720.56,230.07 1721.13,231.187 1721.69,231.292 1722.26,231.148 1722.83,231.3 1723.4,232.05 1723.97,232.987 1724.54,232.548 1725.1,232.475 1725.67,232.281 1726.24,232.287 1726.81,231.184 1727.38,232.174 1727.95,231.112 1728.51,231.964 1729.08,231.93 1729.65,232.946 1730.22,232.577 1730.79,232.485 1731.36,232.256 1731.92,231.059 1732.49,230.158 1733.06,228.88 1733.63,227.985 1734.2,228.16 1734.77,227.189 1735.33,226.306 1735.9,230.654 1736.47,230.584 1737.04,229.747 1737.61,229.78 1738.18,229.856 1738.74,229.717 1739.31,230.784 1739.88,229.89 1740.45,228.839 1741.02,229.866 1741.59,229.777 1742.15,230.743 1742.72,232.706 1743.29,233.658 1743.86,235.372 1744.43,234.969 1745,234.585 1745.56,234.104 1746.13,234.949 1746.7,234.565 1747.27,233.993 1747.84,235.729 1748.41,232.054 1748.97,230.639 1749.54,232.606 1750.11,231.42 1750.68,231.055 1751.25,229.909 1751.82,230.992 1752.38,231.095 1752.95,227.862 1753.52,226.863 1754.09,227.201 1754.66,227.533 1755.23,228.88 1755.79,229.099 1756.36,228.86 1756.93,228.745 1757.5,227.635 1758.07,227.553 1758.64,227.675 1759.21,228.987 1759.77,229.093 1760.34,229.033 1760.91,228.966 1761.48,233.091 1762.05,229.834 1762.62,228.764 1763.18,229.654 1763.75,229.619 1764.32,229.638 1764.89,229.762 1765.46,229.922 1766.03,228.778 1766.59,227.499 1767.16,225.268 1767.73,224.461 1768.3,224.86 1768.87,227.341 1769.44,227.556 1770,227.661 1770.57,231.936 1771.14,232.679 1771.71,232.302 1772.28,234.267 1772.85,234.95 1773.41,232.516 1773.98,232.056 1774.55,232.783 1775.12,232.571 1775.69,233.433 1776.26,235.329 1776.82,232.577 1777.39,233.226 1777.96,231.772 1778.53,231.638 1779.1,231.395 1779.67,231.105 1780.23,229.784 1780.8,229.633 1781.37,230.356 1781.94,229.347 1782.51,228.417 1783.08,229.446 1783.64,228.639 1784.21,227.739 1784.78,227.698 1785.35,225.795 1785.92,225.911 1786.49,224.054 1787.05,224.234 1787.62,222.394 1788.19,223.732 1788.76,226.105 1789.33,227.363 1789.9,228.485 1790.46,228.5 1791.03,229.608 1791.6,227.588 1792.17,229.697 1792.74,229.781 1793.31,228.761 1793.87,228.808 1794.44,227.709 1795.01,227.882 1795.58,226.078 1796.15,226.224 1796.72,226.459 1797.28,228.784 1797.85,227.799 1798.42,229.918 1798.99,229.717 1799.56,229.651 1800.13,227.642 1800.69,228.565 1801.26,227.461 1801.83,225.504 1802.4,225.752 1802.97,225.933 1803.54,227.05 1804.1,226.274 1804.67,227.418 1805.24,228.641 1805.81,228.806 1806.38,227.76 1806.95,227.668 1807.51,226.821 1808.08,228.165 1808.65,228.441 1809.22,228.565 1809.79,227.693 1810.36,227.904 1810.92,227.159 1811.49,225.253 1812.06,223.702 1812.63,222.033 1813.2,223.578 1813.77,222.968 1814.33,222.433 1814.9,223.036 1815.47,222.506 1816.04,224.195 1816.61,225.613 1817.18,227.094 1817.74,229.378 1818.31,232.675 1818.88,233.537 1819.45,229.28 1820.02,230.447 1820.59,232.451 1821.15,232.525 1821.72,232.393 1822.29,230.187 1822.86,229.245 1823.43,230.558 1824,231.431 1824.56,231.354 1825.13,231.163 1825.7,229.908 1826.27,229.212 1826.84,230.613 1827.41,230.668 1827.97,230.645 1828.54,230.705 1829.11,230.796 1829.68,228.839 1830.25,226.968 1830.82,229.054 1831.39,229.985 1831.95,230.094 1832.52,231.188 1833.09,231.112 1833.66,230.928 1834.23,229.079 1834.8,226.968 1835.36,227.091 1835.93,230.45 1836.5,232.241 1837.07,232.929 1837.64,234.631 1838.21,232.495 1838.77,234.524 1839.34,234.294 1839.91,237.169 1840.48,236.847 1841.05,236.591 1841.62,236.146 1842.18,236.581 1842.75,233.985 1843.32,231.433 1843.89,231.257 1844.46,234.112 1845.03,233.848 1845.59,234.582 1846.16,231.89 1846.73,231.849 1847.3,230.79 1847.87,228.671 1848.44,227.58 1849,228.698 1849.57,228.828 1850.14,228.807 1850.71,227.887 1851.28,226.894 1851.85,225.994 1852.41,223.284 1852.98,223.554 1853.55,222.022 1854.12,221.522 1854.69,223.265 1855.26,222.858 1855.82,224.424 1856.39,224.905 1856.96,224.3 1857.53,221.618 1858.1,222.324 1858.67,221.682 1859.23,225.159 1859.8,227.381 1860.37,228.732 1860.94,229.79 1861.51,233.783 1862.08,230.625 1862.64,231.566 1863.21,232.482 1863.78,231.559 1864.35,231.32 1864.92,232.04 1865.49,231.852 1866.05,231.584 1866.62,232.377 1867.19,231.366 1867.76,232.636 1868.33,231.254 1868.9,231.192 1869.46,234.345 1870.03,233.976 1870.6,234.598 1871.17,234.297 1871.74,229.925 1872.31,230.03 1872.87,232.156 1873.44,230.922 1874.01,231.876 1874.58,232.7 1875.15,231.351 1875.72,232.27 1876.28,232.893 1876.85,234.705 1877.42,234.316 1877.99,229.931 1878.56,229.726 1879.13,229.655 1879.69,230.626 1880.26,229.561 1880.83,228.606 1881.4,226.272 1881.97,227.452 1882.54,230.482 1883.1,231.257 1883.67,232.274 1884.24,232.136 1884.81,231.803 1885.38,232.762 1885.95,233.259 1886.51,232.877 1887.08,233.713 1887.65,234.327 1888.22,235 1888.79,233.57 1889.36,234.388 1889.92,233.795 1890.49,232.324 1891.06,232.006 1891.63,230.562 1892.2,232.574 1892.77,232.121 1893.33,232.892 1893.9,231.532 1894.47,230.341 1895.04,232.166 1895.61,229.548 1896.18,231.325 1896.74,231.091 1897.31,233.85 1897.88,232.535 1898.45,230.218 1899.02,231.841 1899.59,229.486 1900.16,227.072 1900.72,227.835 1901.29,226.642 1901.86,226.658 1902.43,228.805 1903,228.498 1903.57,231.43 1904.13,232.297 1904.7,227.973 1905.27,227.913 1905.84,231.018 1906.41,228.819 1906.98,228.954 1907.54,225.637 1908.11,225.771 1908.68,225.067 1909.25,226.429 1909.82,224.638 1910.39,222.757 1910.95,219.895 1911.52,221.506 1912.09,222.046 1912.66,223.287 1913.23,224.557 1913.8,223.867 1914.36,224.336 1914.93,226.654 1915.5,224.767 1916.07,226.364 1916.64,228.707 1917.21,229.879 1917.77,229.889 1918.34,230.06 1918.91,230.234 1919.48,230.144 1920.05,229.945 1920.62,228.953 1921.18,227.937 1921.75,227.288 1922.32,229.655 1922.89,230.635 1923.46,232.621 1924.03,230.154 1924.59,228.177 1925.16,230.189 1925.73,232.063 1926.3,230.587 1926.87,229.616 1927.44,229.36 1928,228.203 1928.57,229.406 1929.14,228.315 1929.71,226.317 1930.28,226.459 1930.85,225.526 1931.41,226.919 1931.98,227.398 1932.55,228.506 1933.12,230.617 1933.69,227.489 1934.26,228.73 1934.82,229.733 1935.39,228.858 1935.96,228.625 1936.53,228.542 1937.1,229.601 1937.67,228.647 1938.23,229.888 1938.8,229.909 1939.37,231.982 1939.94,230.666 1940.51,231.509 1941.08,230.226 1941.64,229.446 1942.21,229.305 1942.78,227.252 1943.35,228.443 1943.92,227.779 1944.49,227.921 1945.05,228.077 1945.62,228.162 1946.19,228.317 1946.76,229.391 1947.33,231.447 1947.9,234.32 1948.46,232.999 1949.03,230.953 1949.6,230.788 1950.17,229.676 1950.74,227.376 1951.31,227.439 1951.87,228.798 1952.44,226.931 1953.01,228.385 1953.58,228.468 1954.15,229.682 1954.72,229.639 1955.28,229.686 1955.85,227.716 1956.42,224.924 1956.99,227.102 1957.56,227.398 1958.13,228.467 1958.69,228.512 1959.26,227.519 1959.83,227.5 1960.4,227.622 1960.97,226.99 1961.54,227.271 1962.1,226.564 1962.67,226.495 1963.24,226.702 1963.81,228.022 1964.38,229.863 1964.95,227.855 1965.51,228.169 1966.08,229.173 1966.65,230.537 1967.22,230.301 1967.79,229.083 1968.36,228.975 1968.92,230.886 1969.49,229.76 1970.06,231.878 1970.63,230.797 1971.2,229.807 1971.77,228.828 1972.34,228.948 1972.9,228.969 1973.47,228.178 1974.04,229.331 1974.61,229.133 1975.18,228.936 1975.75,229.126 1976.31,229.286 1976.88,230.392 1977.45,230.424 1978.02,230.238 1978.59,230.134 1979.16,232.151 1979.72,229.948 1980.29,231.367 1980.86,233.184 1981.43,231.976 1982,231.895 1982.57,232.675 1983.13,231.443 1983.7,232.408 1984.27,230.295 1984.84,231.401 1985.41,233.23 1985.98,235.117 1986.54,235.499 1987.11,235.912 1987.68,235.487 1988.25,231.24 1988.82,230.85 1989.39,229.829 1989.95,229.657 1990.52,229.626 1991.09,230.955 1991.66,230.79 1992.23,230.822 1992.8,233.708 1993.36,235.367 1993.93,235.896 1994.5,234.426 1995.07,232.977 1995.64,233.789 1996.21,234.245 1996.77,232.635 1997.34,232.153 1997.91,230.941 1998.48,230.689 1999.05,230.426 1999.62,229.214 2000.18,229.06 2000.75,228.39 2001.32,227.388 2001.89,228.439 2002.46,228.254 2003.03,232.343 2003.59,232.898 2004.16,231.486 2004.73,231.198 2005.3,231.146 2005.87,232.156 2006.44,235.864 2007,235.348 2007.57,233.663 2008.14,233.331 2008.71,232.91 2009.28,232.543 2009.85,230.074 2010.41,228.836 2010.98,228.508 2011.55,228.389 2012.12,227.376 2012.69,225.308 2013.26,224.502 2013.82,226.73 2014.39,228.797 2014.96,228.687 2015.53,228.612 2016.1,228.351 2016.67,229.094 2017.23,228.269 2017.8,230.369 2018.37,231.184 2018.94,230.859 2019.51,231.667 2020.08,230.373 2020.64,229.196 2021.21,227.029 2021.78,227.064 2022.35,226.004 2022.92,226.034 2023.49,227.078 2024.05,226.071 2024.62,224.202 2025.19,225.478 2025.76,225.8 2026.33,229.1 2026.9,229.083 2027.46,227.893 2028.03,228.037 2028.6,229.121 2029.17,227.039 2029.74,224.141 2030.31,225.452 2030.87,223.647 2031.44,222.89 2032.01,225.275 2032.58,225.796 2033.15,226.15 2033.72,226.404 2034.28,230.563 2034.85,229.607 2035.42,229.98 2035.99,230.775 2036.56,231.642 2037.13,232.365 2037.69,230.895 2038.26,229.874 2038.83,228.71 2039.4,229.782 2039.97,230.99 2040.54,230.913 2041.11,229.803 2041.67,229.82 2042.24,230.822 2042.81,230.715 2043.38,230.565 2043.95,229.359 2044.52,232.172 2045.08,233.162 2045.65,232.755 2046.22,231.457 2046.79,228.041 2047.36,225.047 2047.93,224.379 2048.49,224.745 2049.06,221.857 2049.63,224.434 2050.2,224.835 2050.77,224.351 2051.34,225.819 2051.9,226.047 2052.47,225.289 2053.04,225.66 2053.61,227.265 2054.18,226.436 2054.75,228.617 2055.31,228.764 2055.88,227.782 2056.45,228.809 2057.02,229.208 2057.59,229.214 2058.16,229.335 2058.72,229.393 2059.29,229.294 2059.86,228.332 2060.43,229.497 2061,230.339 2061.57,229.328 2062.13,227.396 2062.7,227.691 2063.27,228.62 2063.84,228.759 2064.41,228.693 2064.98,228.694 2065.54,230.739 2066.11,229.586 2066.68,228.481 2067.25,229.572 2067.82,229.602 2068.39,227.521 2068.95,227.563 2069.52,229.685 2070.09,232.635 2070.66,233.647 2071.23,234.318 2071.8,234.056 2072.36,234.532 2072.93,234.072 2073.5,233.846 2074.07,235.606 2074.64,231.285 2075.21,228.309 2075.77,226.327 2076.34,226.715 2076.91,228.007 2077.48,229.162 2078.05,230.283 2078.62,230.337 2079.18,231.329 2079.75,230.235 2080.32,231.258 2080.89,228.871 2081.46,230.247 2082.03,228.792 2082.59,228.582 2083.16,229.63 2083.73,228.76 2084.3,228.831 2084.87,231.064 2085.44,230.074 2086,230.055 2086.57,229.955 2087.14,229.785 2087.71,229.758 2088.28,230.683 2088.85,228.518 2089.41,227.469 2089.98,229.594 2090.55,231.46 2091.12,230.212 2091.69,230.113 2092.26,225.866 2092.82,226.21 2093.39,227.561 2093.96,227.795 2094.53,225.649 2095.1,226.81 2095.67,227.095 2096.23,228.078 2096.8,229.279 2097.37,230.053 2097.94,230.091 2098.51,229.956 2099.08,228.803 2099.64,225.585 2100.21,224.79 2100.78,226.425 2101.35,227.381 2101.92,228.681 2102.49,226.847 2103.05,228.153 2103.62,230.357 2104.19,232.359 2104.76,233.33 2105.33,227.973 2105.9,227.146 2106.46,228.422 2107.03,228.433 2107.6,227.563 2108.17,225.874 2108.74,227.266 2109.31,227.309 2109.87,226.311 2110.44,226.523 2111.01,228.593 2111.58,229.741 2112.15,229.724 2112.72,228.626 2113.29,227.838 2113.85,229.309 2114.42,230.52 2114.99,231.486 2115.56,231.326 2116.13,231.222 2116.7,231.237 2117.26,229.959 2117.83,230.027 2118.4,230.149 2118.97,230.019 2119.54,230.944 2120.11,231.781 2120.67,231.692 2121.24,224.201 2121.81,223.577 2122.38,225.879 2122.95,225.054 2123.52,224.612 2124.08,223.99 2124.65,222.129 2125.22,222.766 2125.79,223.298 2126.36,223.735 2126.93,225.386 2127.49,225.823 2128.06,224.152 2128.63,223.825 2129.2,222.144 2129.77,222.978 2130.34,225.535 2130.9,226.038 2131.47,228.469 2132.04,228.596 2132.61,228.745 2133.18,229.049 2133.75,229.285 2134.31,230.291 2134.88,230.189 2135.45,228.051 2136.02,230.291 2136.59,229.362 2137.16,229.444 2137.72,229.493 2138.29,227.558 2138.86,226.72 2139.43,226.102 2140,229.295 2140.57,229.559 2141.13,228.587 2141.7,229.618 2142.27,231.799 2142.84,231.543 2143.41,230.699 2143.98,228.731 2144.54,227.722 2145.11,229.013 2145.68,229.381 2146.25,230.433 2146.82,231.451 2147.39,230.442 2147.95,226.33 2148.52,226.534 2149.09,224.749 2149.66,226.428 2150.23,226.761 2150.8,227.118 2151.36,227.479 2151.93,225.791 2152.5,224.33 2153.07,226.117 2153.64,227.734 2154.21,228.06 2154.77,228.401 2155.34,226.425 2155.91,228.811 2156.48,232.131 2157.05,232.174 2157.62,234.257 2158.18,234.243 2158.75,234.042 2159.32,233.908 2159.89,234.881 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip430)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.029 ± 0.02\n  with uncertainty of ± 0.001813231963215395\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01558 ± (0.0017422, 0.00164098) (MC)\n  95% confidence interval: [-4.01874, -4.01219]) (MC)\n  linear error propagation: -4.01564 ± 0.0016809\n  |δ_y| = |0.00105622| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.015578283402595, val_l = 0.0031568853380852246, val_u = 0.003384168946351629)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip460\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip460)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip461\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip460)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip462\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip460)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1139.21 2211.02,1139.21 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,963.102 2211.02,963.102 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,786.994 2211.02,786.994 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,610.887 2211.02,610.887 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,434.779 2211.02,434.779 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,258.671 2211.02,258.671 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1139.21 365.751,1139.21 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,963.102 365.751,963.102 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,786.994 365.751,786.994 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,610.887 365.751,610.887 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,434.779 365.751,434.779 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,258.671 365.751,258.671 \"/>\n<path clip-path=\"url(#clip460)\" d=\"M298.909 1125.01 Q295.298 1125.01 293.469 1128.57 Q291.664 1132.11 291.664 1139.24 Q291.664 1146.35 293.469 1149.92 Q295.298 1153.46 298.909 1153.46 Q302.543 1153.46 304.349 1149.92 Q306.177 1146.35 306.177 1139.24 Q306.177 1132.11 304.349 1128.57 Q302.543 1125.01 298.909 1125.01 M298.909 1121.3 Q304.719 1121.3 307.775 1125.91 Q310.853 1130.49 310.853 1139.24 Q310.853 1147.97 307.775 1152.58 Q304.719 1157.16 298.909 1157.16 Q293.099 1157.16 290.02 1152.58 Q286.964 1147.97 286.964 1139.24 Q286.964 1130.49 290.02 1125.91 Q293.099 1121.3 298.909 1121.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M259.557 976.447 L267.196 976.447 L267.196 950.081 L258.886 951.748 L258.886 947.489 L267.15 945.822 L271.826 945.822 L271.826 976.447 L279.465 976.447 L279.465 980.382 L259.557 980.382 L259.557 976.447 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M298.909 948.901 Q295.298 948.901 293.469 952.465 Q291.664 956.007 291.664 963.137 Q291.664 970.243 293.469 973.808 Q295.298 977.35 298.909 977.35 Q302.543 977.35 304.349 973.808 Q306.177 970.243 306.177 963.137 Q306.177 956.007 304.349 952.465 Q302.543 948.901 298.909 948.901 M298.909 945.197 Q304.719 945.197 307.775 949.803 Q310.853 954.387 310.853 963.137 Q310.853 971.864 307.775 976.47 Q304.719 981.053 298.909 981.053 Q293.099 981.053 290.02 976.47 Q286.964 971.864 286.964 963.137 Q286.964 954.387 290.02 949.803 Q293.099 945.197 298.909 945.197 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M262.775 800.339 L279.094 800.339 L279.094 804.274 L257.15 804.274 L257.15 800.339 Q259.812 797.585 264.395 792.955 Q269.002 788.302 270.182 786.96 Q272.428 784.436 273.307 782.7 Q274.21 780.941 274.21 779.251 Q274.21 776.497 272.266 774.761 Q270.344 773.024 267.242 773.024 Q265.043 773.024 262.59 773.788 Q260.159 774.552 257.381 776.103 L257.381 771.381 Q260.205 770.247 262.659 769.668 Q265.113 769.089 267.15 769.089 Q272.52 769.089 275.715 771.774 Q278.909 774.46 278.909 778.95 Q278.909 781.08 278.099 783.001 Q277.312 784.899 275.205 787.492 Q274.627 788.163 271.525 791.381 Q268.423 794.575 262.775 800.339 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M298.909 772.793 Q295.298 772.793 293.469 776.358 Q291.664 779.899 291.664 787.029 Q291.664 794.135 293.469 797.7 Q295.298 801.242 298.909 801.242 Q302.543 801.242 304.349 797.7 Q306.177 794.135 306.177 787.029 Q306.177 779.899 304.349 776.358 Q302.543 772.793 298.909 772.793 M298.909 769.089 Q304.719 769.089 307.775 773.696 Q310.853 778.279 310.853 787.029 Q310.853 795.756 307.775 800.362 Q304.719 804.946 298.909 804.946 Q293.099 804.946 290.02 800.362 Q286.964 795.756 286.964 787.029 Q286.964 778.279 290.02 773.696 Q293.099 769.089 298.909 769.089 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M272.914 609.532 Q276.27 610.25 278.145 612.519 Q280.043 614.787 280.043 618.12 Q280.043 623.236 276.525 626.037 Q273.006 628.838 266.525 628.838 Q264.349 628.838 262.034 628.398 Q259.742 627.981 257.289 627.125 L257.289 622.611 Q259.233 623.745 261.548 624.324 Q263.863 624.903 266.386 624.903 Q270.784 624.903 273.076 623.167 Q275.39 621.431 275.39 618.12 Q275.39 615.065 273.238 613.352 Q271.108 611.616 267.289 611.616 L263.261 611.616 L263.261 607.773 L267.474 607.773 Q270.923 607.773 272.752 606.407 Q274.58 605.019 274.58 602.426 Q274.58 599.764 272.682 598.352 Q270.807 596.917 267.289 596.917 Q265.367 596.917 263.168 597.333 Q260.969 597.75 258.33 598.63 L258.33 594.463 Q260.992 593.722 263.307 593.352 Q265.645 592.982 267.705 592.982 Q273.029 592.982 276.131 595.412 Q279.233 597.82 279.233 601.94 Q279.233 604.81 277.59 606.801 Q275.946 608.769 272.914 609.532 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M298.909 596.685 Q295.298 596.685 293.469 600.25 Q291.664 603.792 291.664 610.921 Q291.664 618.028 293.469 621.593 Q295.298 625.134 298.909 625.134 Q302.543 625.134 304.349 621.593 Q306.177 618.028 306.177 610.921 Q306.177 603.792 304.349 600.25 Q302.543 596.685 298.909 596.685 M298.909 592.982 Q304.719 592.982 307.775 597.588 Q310.853 602.171 310.853 610.921 Q310.853 619.648 307.775 624.255 Q304.719 628.838 298.909 628.838 Q293.099 628.838 290.02 624.255 Q286.964 619.648 286.964 610.921 Q286.964 602.171 290.02 597.588 Q293.099 592.982 298.909 592.982 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M271.594 421.573 L259.789 440.022 L271.594 440.022 L271.594 421.573 M270.367 417.499 L276.247 417.499 L276.247 440.022 L281.177 440.022 L281.177 443.911 L276.247 443.911 L276.247 452.059 L271.594 452.059 L271.594 443.911 L255.992 443.911 L255.992 439.397 L270.367 417.499 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M298.909 420.578 Q295.298 420.578 293.469 424.142 Q291.664 427.684 291.664 434.814 Q291.664 441.92 293.469 445.485 Q295.298 449.027 298.909 449.027 Q302.543 449.027 304.349 445.485 Q306.177 441.92 306.177 434.814 Q306.177 427.684 304.349 424.142 Q302.543 420.578 298.909 420.578 M298.909 416.874 Q304.719 416.874 307.775 421.48 Q310.853 426.064 310.853 434.814 Q310.853 443.54 307.775 448.147 Q304.719 452.73 298.909 452.73 Q293.099 452.73 290.02 448.147 Q286.964 443.54 286.964 434.814 Q286.964 426.064 290.02 421.48 Q293.099 416.874 298.909 416.874 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M258.793 241.391 L277.15 241.391 L277.15 245.326 L263.076 245.326 L263.076 253.799 Q264.094 253.451 265.113 253.289 Q266.131 253.104 267.15 253.104 Q272.937 253.104 276.316 256.275 Q279.696 259.447 279.696 264.863 Q279.696 270.442 276.224 273.544 Q272.752 276.623 266.432 276.623 Q264.256 276.623 261.988 276.252 Q259.742 275.882 257.335 275.141 L257.335 270.442 Q259.418 271.576 261.641 272.132 Q263.863 272.687 266.34 272.687 Q270.344 272.687 272.682 270.581 Q275.02 268.474 275.02 264.863 Q275.02 261.252 272.682 259.146 Q270.344 257.039 266.34 257.039 Q264.465 257.039 262.59 257.456 Q260.738 257.873 258.793 258.752 L258.793 241.391 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M298.909 244.47 Q295.298 244.47 293.469 248.035 Q291.664 251.576 291.664 258.706 Q291.664 265.812 293.469 269.377 Q295.298 272.919 298.909 272.919 Q302.543 272.919 304.349 269.377 Q306.177 265.812 306.177 258.706 Q306.177 251.576 304.349 248.035 Q302.543 244.47 298.909 244.47 M298.909 240.766 Q304.719 240.766 307.775 245.373 Q310.853 249.956 310.853 258.706 Q310.853 267.433 307.775 272.039 Q304.719 276.623 298.909 276.623 Q293.099 276.623 290.02 272.039 Q286.964 267.433 286.964 258.706 Q286.964 249.956 290.02 245.373 Q293.099 240.766 298.909 240.766 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip462)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1009.45 400.199,890.237 400.786,780.857 401.372,812.288 401.958,714.153 402.545,623.973 403.131,539.905 403.718,465.249 404.304,401.311 404.891,439.949 405.477,380.558 406.063,325.646 406.65,360.168 407.236,311.982 407.823,268.804 408.409,299.27 408.995,322.092 409.582,286.685 410.168,254.354 410.755,225.844 411.341,341.295 411.927,312.157 412.514,289.011 413.1,266.642 413.687,248.024 414.273,232.959 414.86,219.895 415.446,240.936 416.032,258.444 416.619,251.343 417.205,269.986 417.792,286.573 418.378,282.157 418.964,278.169 419.551,275.536 420.137,275.455 420.724,296.092 421.31,298.304 421.896,317.445 422.483,321.761 423.069,341.593 423.656,361.377 424.242,366.912 424.829,396.957 425.415,436.218 426.001,472.963 426.588,507.381 427.174,520.213 427.761,524.99 428.347,529.809 428.933,544.428 429.52,558.537 430.106,579.218 430.693,600.031 431.279,612.11 431.865,623.792 432.452,629.809 433.038,648.695 433.625,666 434.211,671.779 434.798,694.037 435.384,704.511 435.97,715.383 436.557,732.02 437.143,747.573 437.73,762.939 438.316,768.982 438.902,778.981 439.489,793.595 440.075,808.013 440.662,817.267 441.248,830.841 441.835,840.378 442.421,850.23 443.007,859.261 443.594,875.574 444.18,881.083 444.767,890.116 445.353,905.101 445.939,912.786 446.526,920.794 447.112,925.276 447.699,939.111 448.285,946.509 448.871,950.66 449.458,957.903 450.044,973.399 450.631,983.033 451.217,989.803 451.804,1001.47 452.39,1002.91 452.976,1014.06 453.563,1020.04 454.149,1028 454.736,1030.9 455.322,1036.83 455.908,1046.99 456.495,1052.38 457.081,1055.7 457.668,1063.02 458.254,1070.69 458.84,1080 459.427,1084.69 460.013,1089.51 460.6,1096.26 461.186,1098.33 461.773,1100.66 462.359,1109.65 462.945,1112 463.532,1116.45 464.118,1118.56 464.705,1123.01 465.291,1130.89 465.877,1134.39 466.464,1139.58 467.05,1146.84 467.637,1148.23 468.223,1153.15 468.809,1154.69 469.396,1157.6 469.982,1160.45 470.569,1163.28 471.155,1164.39 471.742,1167.66 472.328,1170.96 472.914,1172.01 473.501,1174.65 474.087,1177.38 474.674,1183.84 475.26,1182.72 475.846,1183.74 476.433,1188.1 477.019,1190.19 477.606,1190.89 478.192,1191.38 478.778,1193.82 479.365,1196.53 479.951,1197.19 480.538,1197.94 481.124,1198.91 481.711,1203.14 482.297,1208.7 482.883,1209.01 483.47,1211.01 484.056,1215.76 484.643,1218.93 485.229,1216.84 485.815,1217.07 486.402,1215.47 486.988,1219.12 487.575,1222.18 488.161,1220.34 488.748,1220.39 489.334,1221.9 489.92,1223.2 490.507,1222.74 491.093,1225.82 491.68,1227.08 492.266,1231.13 492.852,1229 493.439,1229.88 494.025,1232.62 494.612,1230.44 495.198,1227.01 495.784,1227.88 496.371,1229.14 496.957,1228.84 497.544,1230.27 498.13,1233.15 498.717,1234.38 499.303,1235.47 499.889,1235.02 500.476,1235.88 501.062,1236.82 501.649,1237.63 502.235,1240.2 502.821,1241.03 503.408,1240.06 503.994,1243.81 504.581,1244.63 505.167,1239.23 505.753,1237.48 506.34,1238.66 506.926,1236.73 507.513,1232.03 508.099,1233.37 508.686,1234.64 509.272,1235.96 509.858,1237.02 510.445,1236.56 511.031,1237.61 511.618,1237.23 512.204,1236.87 512.79,1234.86 513.377,1238.93 513.963,1241.28 514.55,1239.34 515.136,1237.73 515.722,1237.13 516.309,1239.64 516.895,1245.41 517.482,1244.77 518.068,1244.31 518.655,1242.37 519.241,1243.41 519.827,1242.85 520.414,1240.62 521,1238.75 521.587,1238.27 522.173,1236.34 522.759,1234.35 523.346,1234.11 523.932,1238.25 524.519,1239.72 525.105,1238.13 525.691,1239.16 526.278,1238.48 526.864,1242.43 527.451,1243.25 528.037,1245.39 528.624,1244.99 529.21,1250.18 529.796,1250.53 530.383,1247.76 530.969,1245.35 531.556,1250.21 532.142,1247.71 532.728,1246.47 533.315,1245.5 533.901,1243.04 534.488,1242.04 535.074,1241.55 535.661,1244.04 536.247,1247.54 536.833,1249.36 537.42,1248.32 538.006,1247.47 538.593,1244.84 539.179,1248.3 539.765,1247.32 540.352,1246.66 540.938,1242.85 541.525,1243.73 542.111,1241.59 542.697,1242.51 543.284,1240.54 543.87,1241.46 544.457,1240.86 545.043,1238.42 545.63,1238.09 546.216,1239.14 546.802,1238.72 547.389,1239.44 547.975,1236.27 548.562,1237.21 549.148,1232.18 549.734,1230.63 550.321,1230.55 550.907,1230.39 551.494,1231.86 552.08,1231.52 552.666,1234.21 553.253,1235.26 553.839,1235.11 554.426,1234.94 555.012,1235.99 555.599,1232.55 556.185,1233.57 556.771,1233.28 557.358,1231.78 557.944,1228.39 558.531,1225.4 559.117,1225.35 559.703,1225.77 560.29,1225.75 560.876,1227.25 561.463,1230.02 562.049,1231.39 562.635,1232.55 563.222,1229.45 563.808,1226.29 564.395,1229.54 564.981,1232.3 565.568,1232.04 566.154,1230.43 566.74,1231.7 567.327,1230.32 567.913,1234.51 568.5,1233.77 569.086,1230.38 569.672,1235.83 570.259,1232.38 570.845,1236.26 571.432,1234.63 572.018,1236.8 572.605,1237.76 573.191,1237.08 573.777,1233.57 574.364,1231.63 574.95,1235.57 575.537,1236.35 576.123,1236.17 576.709,1234.32 577.296,1236.88 577.882,1234.9 578.469,1237.32 579.055,1239.37 579.641,1241.52 580.228,1242.12 580.814,1239.61 581.401,1237.03 581.987,1237.68 582.574,1235.4 583.16,1233.2 583.746,1232.88 584.333,1233.78 584.919,1234.91 585.506,1232.81 586.092,1233.85 586.678,1232.07 587.265,1234.36 587.851,1237.94 588.438,1237.24 589.024,1236.4 589.61,1234.28 590.197,1235.39 590.783,1232.01 591.37,1230.09 591.956,1231.4 592.543,1233.61 593.129,1232.9 593.715,1232.52 594.302,1231.9 594.888,1231.45 595.475,1230.34 596.061,1229.81 596.647,1230.92 597.234,1230.78 597.82,1231.83 598.407,1231.43 598.993,1232.2 599.579,1230.18 600.166,1228.38 600.752,1228.14 601.339,1230.65 601.925,1234.73 602.512,1232.66 603.098,1231.07 603.684,1229.25 604.271,1227.23 604.857,1228.28 605.444,1229.17 606.03,1229.97 606.616,1229.67 607.203,1227.59 607.789,1230.14 608.376,1228.29 608.962,1227.72 609.548,1223.31 610.135,1223.4 610.721,1225.05 611.308,1223.06 611.894,1223.18 612.481,1223.19 613.067,1224.74 613.653,1223.08 614.24,1225.72 614.826,1224.1 615.413,1225.34 615.999,1225.18 616.585,1221.92 617.172,1222.08 617.758,1220.74 618.345,1222.16 618.931,1222.34 619.518,1227.69 620.104,1230.18 620.69,1230.99 621.277,1232.25 621.863,1231.62 622.45,1232.5 623.036,1233.58 623.622,1231.56 624.209,1230.89 624.795,1231.61 625.382,1233.74 625.968,1232.97 626.554,1233.84 627.141,1234.58 627.727,1233.83 628.314,1232.93 628.9,1233.52 629.487,1234.27 630.073,1230.61 630.659,1231.67 631.246,1232.36 631.832,1231.83 632.419,1229.97 633.005,1229.28 633.591,1230.46 634.178,1229.88 634.764,1230.83 635.351,1225.92 635.937,1225.6 636.523,1227.01 637.11,1224.9 637.696,1224.64 638.283,1225.7 638.869,1224.04 639.456,1226.79 640.042,1226.28 640.628,1227.82 641.215,1229.07 641.801,1230.03 642.388,1229.34 642.974,1231.56 643.56,1230.91 644.147,1229.08 644.733,1228.91 645.32,1226.76 645.906,1226.06 646.492,1227 647.079,1226.48 647.665,1224.88 648.252,1224.38 648.838,1223.9 649.425,1224.96 650.011,1223.05 650.597,1222.56 651.184,1223.87 651.77,1223.31 652.357,1224.25 652.943,1222.06 653.529,1223.29 654.116,1223.17 654.702,1222.94 655.289,1218.51 655.875,1218.48 656.462,1218.64 657.048,1218.28 657.634,1217.93 658.221,1217.63 658.807,1219.07 659.394,1217.81 659.98,1216.54 660.566,1219.35 661.153,1217.85 661.739,1220.59 662.326,1219.07 662.912,1220.59 663.498,1219.1 664.085,1218.89 664.671,1218.59 665.258,1217.04 665.844,1217.33 666.431,1218.82 667.017,1218.99 667.603,1217.41 668.19,1217.44 668.776,1218.57 669.363,1218.75 669.949,1217 670.535,1218.18 671.122,1218.02 671.708,1223.46 672.295,1224.47 672.881,1224.08 673.467,1223.65 674.054,1223.15 674.64,1222.68 675.227,1216.8 675.813,1216.85 676.4,1216.62 676.986,1218.03 677.572,1217.93 678.159,1218.96 678.745,1218.84 679.332,1218.85 679.918,1218.61 680.504,1220.13 681.091,1218.54 681.677,1217 682.264,1216.85 682.85,1217.07 683.436,1218.54 684.023,1213.87 684.609,1216.89 685.196,1215.49 685.782,1218.31 686.369,1220.94 686.955,1217.6 687.541,1219.02 688.128,1214.57 688.714,1214.78 689.301,1213.44 689.887,1215.27 690.473,1215.61 691.06,1213.06 691.646,1211.93 692.233,1211.11 692.819,1211.42 693.405,1211.78 693.992,1212.17 694.578,1213.73 695.165,1214.08 695.751,1212.74 696.338,1212.65 696.924,1211.25 697.51,1213.05 698.097,1210.03 698.683,1210.24 699.27,1210.5 699.856,1212.22 700.442,1212.6 701.029,1215.97 701.615,1218.98 702.202,1220.14 702.788,1218.36 703.375,1221.21 703.961,1218.07 704.547,1218.02 705.134,1214.96 705.72,1213.51 706.307,1212.27 706.893,1212.35 707.479,1215.06 708.066,1215.1 708.652,1215.45 709.239,1213.85 709.825,1215.28 710.411,1215.34 710.998,1215.5 711.584,1216.59 712.171,1218.05 712.757,1217.96 713.344,1216.36 713.93,1213.19 714.516,1213.27 715.103,1211.93 715.689,1213.56 716.276,1213.8 716.862,1213.71 717.448,1208.13 718.035,1208.52 718.621,1210.24 719.208,1210.32 719.794,1209.2 720.38,1209.52 720.967,1211.37 721.553,1211.69 722.14,1213.36 722.726,1213.51 723.313,1213.5 723.899,1212.22 724.485,1215.08 725.072,1216.75 725.658,1216.74 726.245,1215.28 726.831,1215.39 727.417,1215.41 728.004,1215.35 728.59,1219.43 729.177,1220.87 729.763,1222.09 730.349,1218.67 730.936,1219.98 731.522,1218.35 732.109,1220.92 732.695,1222.52 733.282,1223.51 733.868,1222.85 734.454,1213.75 735.041,1212.13 735.627,1212.22 736.214,1212.6 736.8,1214.38 737.386,1215.67 737.973,1218.85 738.559,1217.3 739.146,1214.49 739.732,1215.73 740.318,1215.56 740.905,1213.93 741.491,1211.28 742.078,1215.86 742.664,1216.89 743.251,1218.4 743.837,1219.62 744.423,1217.96 745.01,1219.27 745.596,1220.4 746.183,1217.2 746.769,1217.47 747.355,1216.03 747.942,1216.36 748.528,1216.05 749.115,1215.8 749.701,1218.78 750.288,1222.54 750.874,1220.7 751.46,1218.74 752.047,1215.55 752.633,1218.45 753.22,1218.47 753.806,1221.16 754.392,1220.83 754.979,1219.1 755.565,1219.08 756.152,1217.29 756.738,1214.45 757.324,1217.36 757.911,1215.55 758.497,1213.64 759.084,1210.78 759.67,1210.91 760.257,1213.8 760.843,1214 761.429,1212.47 762.016,1212.76 762.602,1209.68 763.189,1207.07 763.775,1207.24 764.361,1207.73 764.948,1209.5 765.534,1208.35 766.121,1211.58 766.707,1213.31 767.293,1212.27 767.88,1212.43 768.466,1209.51 769.053,1211.16 769.639,1208.88 770.226,1209.13 770.812,1209.21 771.398,1211.33 771.985,1212.62 772.571,1212.5 773.158,1212.58 773.744,1213.8 774.33,1215.36 774.917,1216.85 775.503,1216.72 776.09,1219.48 776.676,1217.83 777.262,1216.26 777.849,1216.23 778.435,1219.15 779.022,1217.54 779.608,1218.78 780.195,1216.88 780.781,1220.71 781.367,1220 781.954,1218.32 782.54,1215.25 783.127,1212.02 783.713,1210.47 784.299,1209.28 784.886,1211.09 785.472,1212.71 786.059,1212.68 786.645,1212.72 787.232,1212.78 787.818,1212.83 788.404,1208.31 788.991,1207.51 789.577,1206.11 790.164,1209.06 790.75,1212.33 791.336,1212.45 791.923,1213.78 792.509,1212.3 793.096,1210.81 793.682,1210.9 794.268,1210.78 794.855,1212.56 795.441,1210.79 796.028,1214.95 796.614,1214.9 797.201,1214.82 797.787,1217.43 798.373,1217.26 798.96,1219.9 799.546,1221.03 800.133,1221.9 800.719,1219.87 801.305,1219.46 801.892,1217.34 802.478,1214.16 803.065,1214.14 803.651,1215.75 804.237,1215.4 804.824,1213.78 805.41,1215.34 805.997,1212.38 806.583,1212.6 807.17,1211.07 807.756,1210.96 808.342,1209.68 808.929,1211.25 809.515,1212.92 810.102,1214.59 810.688,1211.85 811.274,1211.87 811.861,1210.54 812.447,1212.15 813.034,1212.11 813.62,1212.07 814.206,1215.18 814.793,1216.65 815.379,1216.52 815.966,1217.83 816.552,1217.82 817.139,1215.83 817.725,1215.41 818.311,1215.19 818.898,1213.74 819.484,1210.94 820.071,1211.44 820.657,1214.54 821.243,1215.89 821.83,1214.23 822.416,1215.68 823.003,1214.02 823.589,1216.87 824.175,1216.77 824.762,1216.61 825.348,1217.69 825.935,1218.74 826.521,1219.92 827.108,1220.78 827.694,1218.93 828.28,1217.23 828.867,1215.54 829.453,1213.9 830.04,1212.28 830.626,1212.29 831.212,1210.75 831.799,1207.74 832.385,1208.2 832.972,1208.49 833.558,1210.2 834.145,1210.5 834.731,1210.82 835.317,1209.6 835.904,1209.83 836.49,1210.19 837.077,1207.56 837.663,1211.82 838.249,1212.22 838.836,1210.85 839.422,1213.77 840.009,1210.8 840.595,1209.2 841.181,1209.23 841.768,1210.94 842.354,1211.08 842.941,1212.58 843.527,1214.05 844.114,1213.88 844.7,1212.37 845.286,1213.53 845.873,1213.77 846.459,1210.99 847.046,1213.89 847.632,1211.14 848.218,1211.4 848.805,1210.08 849.391,1210.23 849.978,1210.37 850.564,1213.2 851.15,1213.66 851.737,1215.26 852.323,1216.65 852.91,1215.03 853.496,1213.41 854.083,1216.27 854.669,1217.53 855.255,1216.29 855.842,1216.27 856.428,1216.13 857.015,1217.71 857.601,1216.09 858.187,1214.43 858.774,1218.35 859.36,1217.53 859.947,1220.07 860.533,1219.59 861.119,1217.81 861.706,1218.75 862.292,1218.3 862.879,1217.78 863.465,1214.57 864.052,1213.11 864.638,1213 865.224,1211.61 865.811,1210.35 866.397,1209.08 866.984,1207.88 867.57,1206.69 868.156,1205.57 868.743,1205.9 869.329,1206.37 869.916,1209.69 870.502,1211.42 871.089,1211.32 871.675,1211.28 872.261,1212.45 872.848,1213.88 873.434,1216.5 874.021,1216.1 874.607,1214.56 875.193,1215.78 875.78,1215.85 876.366,1219.72 876.953,1219.4 877.539,1217.35 878.125,1215.96 878.712,1214.18 879.298,1209.66 879.885,1209.75 880.471,1208.53 881.058,1207.28 881.644,1208.88 882.23,1209.15 882.817,1206.16 883.403,1206.46 883.99,1208.08 884.576,1211.22 885.162,1211.32 885.749,1212.72 886.335,1212.47 886.922,1210.82 887.508,1212.18 888.094,1212.02 888.681,1210.4 889.267,1210.25 889.854,1207.38 890.44,1206.39 891.027,1205.11 891.613,1208.26 892.199,1209.92 892.786,1210.19 893.372,1214.22 893.959,1215.48 894.545,1215.03 895.131,1214.5 895.718,1212.7 896.304,1209.76 896.891,1212.65 897.477,1211.25 898.063,1211.16 898.65,1209.67 899.236,1211.11 899.823,1211.25 900.409,1211.69 900.996,1210.07 901.582,1213.26 902.168,1211.58 902.755,1212.9 903.341,1214.27 903.928,1214.05 904.514,1215.28 905.1,1218.13 905.687,1218.15 906.273,1220.6 906.86,1221.44 907.446,1222.37 908.032,1219.28 908.619,1217.31 909.205,1213.97 909.792,1215.48 910.378,1210.95 910.965,1209.13 911.551,1209.37 912.137,1206.39 912.724,1207.84 913.31,1209.54 913.897,1209.79 914.483,1210.03 915.069,1208.22 915.656,1211.26 916.242,1211.21 916.829,1209.68 917.415,1208.11 918.002,1211.15 918.588,1206.94 919.174,1208.55 919.761,1207.09 920.347,1207.23 920.934,1209.06 921.52,1209.16 922.106,1204.93 922.693,1206.62 923.279,1209.9 923.866,1207.07 924.452,1208.83 925.038,1207.55 925.625,1207.43 926.211,1205.04 926.798,1205.29 927.384,1203.91 927.971,1205.88 928.557,1203.44 929.143,1207.91 929.73,1207.84 930.316,1205.65 930.903,1206.11 931.489,1205.94 932.075,1206.37 932.662,1206.83 933.248,1209.93 933.835,1209.72 934.421,1208.25 935.007,1209.69 935.594,1211.53 936.18,1211.69 936.767,1210.36 937.353,1214.26 937.94,1217.09 938.526,1215.44 939.112,1219.35 939.699,1221.82 940.285,1221.09 940.872,1221.85 941.458,1221.19 942.044,1220.73 942.631,1217.3 943.217,1218.36 943.804,1217.93 944.39,1218.61 944.976,1217.02 945.563,1215.28 946.149,1215.11 946.736,1216.12 947.322,1213.05 947.909,1212.97 948.495,1209.86 949.081,1207.28 949.668,1204.72 950.254,1208.08 950.841,1210.78 951.427,1212.14 952.013,1212.27 952.6,1212.13 953.186,1214.66 953.773,1214.74 954.359,1216.24 954.945,1214.52 955.532,1218.63 956.118,1213.67 956.705,1213.75 957.291,1210.62 957.878,1210.63 958.464,1210.88 959.05,1212.63 959.637,1212.59 960.223,1215.87 960.81,1215.56 961.396,1215.53 961.982,1217.02 962.569,1216.8 963.155,1217.77 963.742,1216.1 964.328,1218.59 964.915,1218.38 965.501,1217.9 966.087,1217.24 966.674,1215.49 967.26,1216.67 967.847,1215.2 968.433,1214.9 969.019,1214.55 969.606,1216.08 970.192,1217.16 970.779,1215.7 971.365,1216.61 971.951,1216.02 972.538,1215.95 973.124,1215.79 973.711,1216.99 974.297,1216.64 974.884,1212.03 975.47,1214.5 976.056,1214.36 976.643,1212.93 977.229,1210.02 977.816,1212.77 978.402,1214.32 978.988,1212.49 979.575,1213.78 980.161,1214.74 980.748,1215.85 981.334,1211.36 981.92,1211.23 982.507,1212.47 983.093,1212.06 983.68,1213.45 984.266,1214.47 984.853,1212.66 985.439,1209.63 986.025,1211.14 986.612,1210.03 987.198,1208.58 987.785,1207.04 988.371,1205.72 988.957,1199.93 989.544,1198.91 990.13,1200.87 990.717,1201.29 991.303,1198.79 991.889,1202.45 992.476,1204.25 993.062,1204.71 993.649,1203.89 994.235,1207.3 994.822,1209.17 995.408,1209.25 995.994,1209.36 996.581,1209.67 997.167,1208.35 997.754,1209.99 998.34,1211.04 998.926,1209.65 999.513,1209.79 1000.1,1208.26 1000.69,1208.73 1001.27,1210.35 1001.86,1210.23 1002.44,1210.27 1003.03,1211.4 1003.62,1211.35 1004.2,1208.46 1004.79,1209.94 1005.38,1209.93 1005.96,1211.46 1006.55,1208.54 1007.14,1207.16 1007.72,1208.92 1008.31,1209.12 1008.9,1211.85 1009.48,1214.96 1010.07,1214.95 1010.65,1213.46 1011.24,1212.32 1011.83,1212.24 1012.41,1212.11 1013,1211.94 1013.59,1210.21 1014.17,1208.76 1014.76,1211.48 1015.35,1213.04 1015.93,1214.5 1016.52,1214.37 1017.11,1214.2 1017.69,1213.93 1018.28,1210.69 1018.86,1210.93 1019.45,1212.4 1020.04,1215.14 1020.62,1217.64 1021.21,1220.28 1021.8,1218.55 1022.38,1216.75 1022.97,1216.64 1023.56,1220.65 1024.14,1220.12 1024.73,1219.63 1025.32,1218.9 1025.9,1217.42 1026.49,1215.8 1027.07,1217.08 1027.66,1215.29 1028.25,1211.98 1028.83,1210.51 1029.42,1206.23 1030.01,1206.46 1030.59,1211.19 1031.18,1210.87 1031.77,1211.93 1032.35,1214.93 1032.94,1215.78 1033.52,1216.86 1034.11,1215.29 1034.7,1215.18 1035.28,1214.97 1035.87,1217.57 1036.46,1214.49 1037.04,1211.4 1037.63,1211.49 1038.22,1210.14 1038.8,1210.15 1039.39,1211.33 1039.98,1209.82 1040.56,1208.31 1041.15,1208.45 1041.73,1210 1042.32,1211.48 1042.91,1214.39 1043.49,1214.15 1044.08,1212.31 1044.67,1209.44 1045.25,1207.97 1045.84,1210.93 1046.43,1208.05 1047.01,1205.17 1047.6,1201.09 1048.19,1199.84 1048.77,1199.14 1049.36,1195.51 1049.94,1198.85 1050.53,1195.41 1051.12,1196.03 1051.7,1198.54 1052.29,1201.88 1052.88,1200.79 1053.46,1204.42 1054.05,1206.37 1054.64,1204.8 1055.22,1205.47 1055.81,1208.48 1056.39,1208.55 1056.98,1205.51 1057.57,1211.73 1058.15,1210.24 1058.74,1210.27 1059.33,1211.39 1059.91,1209.97 1060.5,1209.88 1061.09,1210.98 1061.67,1212.67 1062.26,1212.72 1062.85,1212.6 1063.43,1214.17 1064.02,1214.24 1064.6,1214.28 1065.19,1215.53 1065.78,1215.33 1066.36,1215.12 1066.95,1217.67 1067.54,1218.43 1068.12,1218.34 1068.71,1216.65 1069.3,1219 1069.88,1217.18 1070.47,1218.78 1071.06,1215.24 1071.64,1211.95 1072.23,1211.72 1072.81,1210.01 1073.4,1208.8 1073.99,1204.76 1074.57,1201.99 1075.16,1202.43 1075.75,1202.93 1076.33,1204.57 1076.92,1203.52 1077.51,1206.66 1078.09,1207.02 1078.68,1207.09 1079.26,1207.23 1079.85,1208.5 1080.44,1205.7 1081.02,1207.5 1081.61,1206.15 1082.2,1207.95 1082.78,1209.35 1083.37,1209.66 1083.96,1211.35 1084.54,1212.81 1085.13,1215.5 1085.72,1215.28 1086.3,1212.45 1086.89,1210.61 1087.47,1212.33 1088.06,1212.31 1088.65,1213.94 1089.23,1215.1 1089.82,1215.08 1090.41,1213.49 1090.99,1214.69 1091.58,1212.8 1092.17,1212.52 1092.75,1211.1 1093.34,1212.4 1093.93,1213.78 1094.51,1214.79 1095.1,1209.94 1095.68,1207.31 1096.27,1205.99 1096.86,1206.28 1097.44,1208.16 1098.03,1208.27 1098.62,1208.3 1099.2,1208.76 1099.79,1207.67 1100.38,1209.09 1100.96,1209 1101.55,1211.92 1102.14,1209.22 1102.72,1206.55 1103.31,1206.65 1103.89,1207.03 1104.48,1207.13 1105.07,1207.51 1105.65,1205.99 1106.24,1206.35 1106.83,1203.76 1107.41,1208.57 1108,1208.73 1108.59,1207.34 1109.17,1208.87 1109.76,1210.31 1110.34,1210.39 1110.93,1211.68 1111.52,1210.04 1112.1,1209.97 1112.69,1210 1113.28,1207.38 1113.86,1204.55 1114.45,1206.38 1115.04,1207.94 1115.62,1207.84 1116.21,1207.9 1116.8,1209.64 1117.38,1212.5 1117.97,1213.61 1118.55,1213.53 1119.14,1211.83 1119.73,1214.68 1120.31,1216.08 1120.9,1215.55 1121.49,1214.17 1122.07,1215.47 1122.66,1215.26 1123.25,1218.14 1123.83,1215.03 1124.42,1214.97 1125.01,1213.68 1125.59,1213.45 1126.18,1211.83 1126.76,1213.66 1127.35,1213.72 1127.94,1215.22 1128.52,1215.21 1129.11,1213.68 1129.7,1215.17 1130.28,1214.87 1130.87,1213.56 1131.46,1213.17 1132.04,1212.83 1132.63,1211.4 1133.21,1214.06 1133.8,1212.47 1134.39,1212.69 1134.97,1211.29 1135.56,1211.15 1136.15,1212.66 1136.73,1213.95 1137.32,1213.74 1137.91,1212.24 1138.49,1211.85 1139.08,1212.92 1139.67,1212.65 1140.25,1212.55 1140.84,1213.54 1141.42,1213.58 1142.01,1212.24 1142.6,1210.98 1143.18,1212.78 1143.77,1214.19 1144.36,1213.75 1144.94,1216.56 1145.53,1217.54 1146.12,1219.87 1146.7,1219.6 1147.29,1217.63 1147.88,1216.08 1148.46,1217.1 1149.05,1215.14 1149.63,1213.48 1150.22,1216.21 1150.81,1214.04 1151.39,1210.87 1151.98,1213.73 1152.57,1213.49 1153.15,1214.78 1153.74,1207.57 1154.33,1207.96 1154.91,1208.17 1155.5,1208.31 1156.09,1209.85 1156.67,1208.53 1157.26,1210.39 1157.84,1209.1 1158.43,1210.31 1159.02,1207.56 1159.6,1208.03 1160.19,1210.86 1160.78,1210.55 1161.36,1211.84 1161.95,1211.85 1162.54,1211.59 1163.12,1212.81 1163.71,1209.79 1164.29,1211.19 1164.88,1209.34 1165.47,1210.56 1166.05,1211.97 1166.64,1211.73 1167.23,1209.93 1167.81,1209.9 1168.4,1208.51 1168.99,1209.96 1169.57,1211.59 1170.16,1211.4 1170.75,1212.95 1171.33,1214.06 1171.92,1213.4 1172.5,1211.65 1173.09,1209.78 1173.68,1206.94 1174.26,1205.37 1174.85,1205.76 1175.44,1210.28 1176.02,1210.2 1176.61,1211.74 1177.2,1214.71 1177.78,1214.31 1178.37,1213.92 1178.96,1216.54 1179.54,1214.44 1180.13,1213.86 1180.71,1209.4 1181.3,1209.49 1181.89,1208.2 1182.47,1210 1183.06,1210.14 1183.65,1210.42 1184.23,1210.43 1184.82,1207.63 1185.41,1207.75 1185.99,1209.13 1186.58,1206.41 1187.16,1204.98 1187.75,1205.27 1188.34,1205.74 1188.92,1205.94 1189.51,1209.16 1190.1,1209.21 1190.68,1210.56 1191.27,1210.58 1191.86,1210.79 1192.44,1211.24 1193.03,1213.91 1193.62,1213.68 1194.2,1213.49 1194.79,1213.29 1195.37,1214.35 1195.96,1217.02 1196.55,1215.15 1197.13,1215.05 1197.72,1214.94 1198.31,1214.54 1198.89,1214.28 1199.48,1214.31 1200.07,1211.25 1200.65,1210.83 1201.24,1210.9 1201.83,1210.38 1202.41,1214.68 1203,1210.28 1203.58,1211.81 1204.17,1210.42 1204.76,1207.8 1205.34,1206.64 1205.93,1206.88 1206.52,1207.04 1207.1,1207.38 1207.69,1207.81 1208.28,1207.86 1208.86,1209.19 1209.45,1206.43 1210.03,1209.54 1210.62,1209.45 1211.21,1210.87 1211.79,1209.24 1212.38,1205.08 1212.97,1204.03 1213.55,1207.22 1214.14,1208.77 1214.73,1210.11 1215.31,1210.06 1215.9,1208.58 1216.49,1207.51 1217.07,1203.25 1217.66,1204.97 1218.24,1204.25 1218.83,1206.17 1219.42,1204.95 1220,1205.14 1220.59,1208.6 1221.18,1208.9 1221.76,1207.6 1222.35,1207.85 1222.94,1205.08 1223.52,1205.46 1224.11,1207.14 1224.7,1208.88 1225.28,1208.87 1225.87,1209.1 1226.45,1209.25 1227.04,1207.88 1227.63,1208.28 1228.21,1211.26 1228.8,1211.32 1229.39,1211.5 1229.97,1210.2 1230.56,1213.08 1231.15,1207.18 1231.73,1210.23 1232.32,1213.18 1232.91,1212.87 1233.49,1211.25 1234.08,1209.84 1234.66,1208.21 1235.25,1208.62 1235.84,1208.81 1236.42,1207.42 1237.01,1207.87 1237.6,1201.01 1238.18,1198.75 1238.77,1198.02 1239.36,1196.98 1239.94,1198.98 1240.53,1196.71 1241.11,1197.59 1241.7,1200.07 1242.29,1198.98 1242.87,1197.72 1243.46,1198.75 1244.05,1200.9 1244.63,1201.47 1245.22,1199.11 1245.81,1199.85 1246.39,1199.1 1246.98,1198.15 1247.57,1198.92 1248.15,1199.53 1248.74,1201.39 1249.32,1203.45 1249.91,1202 1250.5,1202.27 1251.08,1202.59 1251.67,1205.98 1252.26,1206.31 1252.84,1208.22 1253.43,1210.05 1254.02,1207.02 1254.6,1207.14 1255.19,1207.22 1255.78,1205.71 1256.36,1206.23 1256.95,1206.46 1257.53,1208.31 1258.12,1208.61 1258.71,1205.61 1259.29,1204.42 1259.88,1203.67 1260.47,1204.3 1261.05,1206.08 1261.64,1206.39 1262.23,1206.54 1262.81,1208.32 1263.4,1208.4 1263.98,1210.11 1264.57,1206.95 1265.16,1210.11 1265.74,1211.77 1266.33,1211.53 1266.92,1211.62 1267.5,1208.75 1268.09,1209.11 1268.68,1209.15 1269.26,1209.1 1269.85,1211.95 1270.44,1211.87 1271.02,1210.31 1271.61,1210.2 1272.19,1210.37 1272.78,1209.16 1273.37,1210.78 1273.95,1210.68 1274.54,1213.53 1275.13,1213.32 1275.71,1213.6 1276.3,1211.84 1276.89,1211.8 1277.47,1211.55 1278.06,1208.75 1278.65,1208.89 1279.23,1208.8 1279.82,1211.74 1280.4,1211.71 1280.99,1211.67 1281.58,1214.72 1282.16,1214.41 1282.75,1215.68 1283.34,1213.94 1283.92,1215.14 1284.51,1210.49 1285.1,1210.35 1285.68,1210.29 1286.27,1210.38 1286.86,1206.02 1287.44,1212.05 1288.03,1208.76 1288.61,1210.44 1289.2,1211.76 1289.79,1214.65 1290.37,1214.9 1290.96,1216.22 1291.55,1218.86 1292.13,1219.72 1292.72,1221.73 1293.31,1221.07 1293.89,1223.31 1294.48,1221.15 1295.06,1221.84 1295.65,1222.63 1296.24,1221.61 1296.82,1219.62 1297.41,1217.79 1298,1215.69 1298.58,1215.42 1299.17,1215.14 1299.76,1210.64 1300.34,1209.09 1300.93,1207.73 1301.52,1208.03 1302.1,1209.53 1302.69,1208.2 1303.27,1208.03 1303.86,1205.07 1304.45,1205.23 1305.03,1205.5 1305.62,1205.85 1306.21,1207.49 1306.79,1207.5 1307.38,1209.04 1307.97,1209.07 1308.55,1209.14 1309.14,1207.85 1309.73,1206.54 1310.31,1206.92 1310.9,1208.31 1311.48,1208.29 1312.07,1208.58 1312.66,1205.77 1313.24,1205.87 1313.83,1204.88 1314.42,1206.52 1315,1205.32 1315.59,1206.72 1316.18,1208.21 1316.76,1208.19 1317.35,1209.9 1317.93,1206.96 1318.52,1209.96 1319.11,1208.1 1319.69,1208.19 1320.28,1208.28 1320.87,1209.82 1321.45,1212.63 1322.04,1215.66 1322.63,1215.56 1323.21,1216.26 1323.8,1216.03 1324.39,1213.18 1324.97,1211.78 1325.56,1207.45 1326.14,1209.1 1326.73,1211.67 1327.32,1212.91 1327.9,1210.95 1328.49,1209.41 1329.08,1212.02 1329.66,1211.71 1330.25,1210.45 1330.84,1210.28 1331.42,1210.29 1332.01,1211.67 1332.6,1210.05 1333.18,1211.45 1333.77,1211.06 1334.35,1209.49 1334.94,1207.74 1335.53,1209.65 1336.11,1210.99 1336.7,1211.08 1337.29,1210.94 1337.87,1213.73 1338.46,1213.83 1339.05,1213.75 1339.63,1213.58 1340.22,1211.91 1340.8,1213.44 1341.39,1217.77 1341.98,1217.4 1342.56,1218.5 1343.15,1219.35 1343.74,1217.31 1344.32,1215.17 1344.91,1215.91 1345.5,1216.96 1346.08,1216.32 1346.67,1217.34 1347.26,1216.97 1347.84,1215.2 1348.43,1217.85 1349.01,1213.16 1349.6,1210.1 1350.19,1209.91 1350.77,1212.97 1351.36,1211.19 1351.95,1208.28 1352.53,1206.92 1353.12,1207.07 1353.71,1208.53 1354.29,1209.75 1354.88,1209.69 1355.47,1209.57 1356.05,1208.08 1356.64,1209.7 1357.22,1210.75 1357.81,1207.62 1358.4,1204.83 1358.98,1203.61 1359.57,1200.92 1360.16,1201.13 1360.74,1201.38 1361.33,1204.98 1361.92,1206.59 1362.5,1203.94 1363.09,1203.58 1363.68,1200.62 1364.26,1204.14 1364.85,1206.3 1365.43,1205.45 1366.02,1208.72 1366.61,1207.11 1367.19,1207.21 1367.78,1207.08 1368.37,1205.68 1368.95,1207.4 1369.54,1208.86 1370.13,1206.11 1370.71,1206.39 1371.3,1205.13 1371.88,1205.43 1372.47,1208.59 1373.06,1212.87 1373.64,1211.27 1374.23,1212.68 1374.82,1216.94 1375.4,1218.61 1375.99,1216.62 1376.58,1214.88 1377.16,1213.19 1377.75,1210.2 1378.34,1211.48 1378.92,1212.81 1379.51,1211.15 1380.09,1214.1 1380.68,1212.41 1381.27,1210.91 1381.85,1210.86 1382.44,1211.06 1383.03,1211.13 1383.61,1215.15 1384.2,1217.5 1384.79,1216.94 1385.37,1216.68 1385.96,1213.72 1386.55,1216.52 1387.13,1217.42 1387.72,1218.25 1388.3,1216.35 1388.89,1217.54 1389.48,1214.39 1390.06,1214.25 1390.65,1211.05 1391.24,1212.18 1391.82,1213.67 1392.41,1214.84 1393,1214.51 1393.58,1214.29 1394.17,1211.24 1394.75,1211.08 1395.34,1215.27 1395.93,1215.06 1396.51,1215.94 1397.1,1216.98 1397.69,1213.92 1398.27,1212.52 1398.86,1213.83 1399.45,1213.52 1400.03,1213.41 1400.62,1213.15 1401.21,1213.04 1401.79,1214.51 1402.38,1212.75 1402.96,1209.93 1403.55,1210.29 1404.14,1208.96 1404.72,1209.14 1405.31,1210.71 1405.9,1211.95 1406.48,1211.8 1407.07,1207.48 1407.66,1206.23 1408.24,1202.26 1408.83,1201.06 1409.42,1199.98 1410,1201.98 1410.59,1202.04 1411.17,1201.1 1411.76,1202.91 1412.35,1204.82 1412.93,1204.69 1413.52,1203.58 1414.11,1205.19 1414.69,1203.7 1415.28,1204.16 1415.87,1201.52 1416.45,1203.51 1417.04,1202.49 1417.63,1201.5 1418.21,1203.53 1418.8,1203.82 1419.38,1202.98 1419.97,1203.21 1420.56,1203.67 1421.14,1203.87 1421.73,1206.94 1422.32,1212.43 1422.9,1208.38 1423.49,1208.37 1424.08,1210.26 1424.66,1208.66 1425.25,1208.83 1425.83,1208.82 1426.42,1207.63 1427.01,1209.42 1427.59,1209.94 1428.18,1215.74 1428.77,1217.01 1429.35,1212.16 1429.94,1213.66 1430.53,1213.17 1431.11,1213.18 1431.7,1212.71 1432.29,1212.61 1432.87,1212.32 1433.46,1213.24 1434.04,1212.97 1434.63,1207.54 1435.22,1207.85 1435.8,1210.57 1436.39,1209.14 1436.98,1210.6 1437.56,1206.21 1438.15,1210.94 1438.74,1209.58 1439.32,1209.72 1439.91,1208.44 1440.5,1210.22 1441.08,1207.28 1441.67,1207.5 1442.25,1207.76 1442.84,1209.55 1443.43,1212.36 1444.01,1212.49 1444.6,1213.93 1445.19,1214.97 1445.77,1216.31 1446.36,1215.86 1446.95,1217.11 1447.53,1218.43 1448.12,1216.56 1448.7,1213.5 1449.29,1213.25 1449.88,1213.15 1450.46,1210.3 1451.05,1208.78 1451.64,1207.25 1452.22,1207.4 1452.81,1210.59 1453.4,1213.28 1453.98,1213.24 1454.57,1214.23 1455.16,1212.37 1455.74,1213.68 1456.33,1214.89 1456.91,1213.09 1457.5,1211.2 1458.09,1209.6 1458.67,1206.73 1459.26,1207.24 1459.85,1203.35 1460.43,1203.61 1461.02,1204.38 1461.61,1204.55 1462.19,1204.78 1462.78,1206.88 1463.37,1207.09 1463.95,1205.81 1464.54,1205.89 1465.12,1205.92 1465.71,1206.31 1466.3,1204.83 1466.88,1206.57 1467.47,1208.09 1468.06,1211.1 1468.64,1212.5 1469.23,1212.34 1469.82,1212.22 1470.4,1209.15 1470.99,1209.09 1471.57,1207.72 1472.16,1208 1472.75,1207.85 1473.33,1207.96 1473.92,1210.97 1474.51,1211.07 1475.09,1211.15 1475.68,1208.07 1476.27,1209.78 1476.85,1210 1477.44,1210.1 1478.03,1210.25 1478.61,1211.57 1479.2,1212.76 1479.78,1211.28 1480.37,1214.02 1480.96,1211.29 1481.54,1212.92 1482.13,1215.76 1482.72,1216.81 1483.3,1216.34 1483.89,1211.55 1484.48,1210.08 1485.06,1211.42 1485.65,1211.91 1486.24,1208.93 1486.82,1210.2 1487.41,1211.42 1487.99,1209.88 1488.58,1208.76 1489.17,1212.83 1489.75,1211.29 1490.34,1209.55 1490.93,1209.88 1491.51,1211.13 1492.1,1212.8 1492.69,1213.97 1493.27,1218.25 1493.86,1219.26 1494.45,1219.03 1495.03,1211.19 1495.62,1211.07 1496.2,1209.5 1496.79,1209.75 1497.38,1208.14 1497.96,1208.25 1498.55,1211.1 1499.14,1210.94 1499.72,1212.4 1500.31,1209.46 1500.9,1212.3 1501.48,1212.12 1502.07,1210.82 1502.65,1210.84 1503.24,1207.61 1503.83,1210.6 1504.41,1209.27 1505,1209.42 1505.59,1212.26 1506.17,1206.47 1506.76,1205.01 1507.35,1209.53 1507.93,1209.71 1508.52,1209.53 1509.11,1209.49 1509.69,1209.26 1510.28,1209.4 1510.86,1207.71 1511.45,1207.51 1512.04,1204.93 1512.62,1205.63 1513.21,1207.34 1513.8,1204.65 1514.38,1206.55 1514.97,1208.12 1515.56,1208.49 1516.14,1205.43 1516.73,1204.7 1517.32,1204.71 1517.9,1206.28 1518.49,1205.16 1519.07,1208.27 1519.66,1207.2 1520.25,1208.62 1520.83,1210.04 1521.42,1208.49 1522.01,1208.66 1522.59,1211.63 1523.18,1208.8 1523.77,1211.7 1524.35,1215.8 1524.94,1218.4 1525.52,1218.28 1526.11,1216.4 1526.7,1217.5 1527.28,1219.68 1527.87,1216.39 1528.46,1216.09 1529.04,1215.64 1529.63,1216.89 1530.22,1216.29 1530.8,1214.64 1531.39,1214.54 1531.98,1214.48 1532.56,1215.74 1533.15,1215.56 1533.73,1212.23 1534.32,1210.91 1534.91,1212.34 1535.49,1209.21 1536.08,1207.63 1536.67,1208.99 1537.25,1206.25 1537.84,1208 1538.43,1209.72 1539.01,1205.42 1539.6,1211.4 1540.19,1210.1 1540.77,1210.18 1541.36,1211.34 1541.94,1211.09 1542.53,1206.19 1543.12,1209.11 1543.7,1206.22 1544.29,1207.74 1544.88,1207.96 1545.46,1205.03 1546.05,1206.53 1546.64,1209.44 1547.22,1207.97 1547.81,1209.5 1548.4,1208.35 1548.98,1211.19 1549.57,1209.41 1550.15,1208.08 1550.74,1206.51 1551.33,1206.94 1551.91,1208.35 1552.5,1208.11 1553.09,1207.89 1553.67,1208.07 1554.26,1206.54 1554.85,1207.99 1555.43,1208.22 1556.02,1209.42 1556.6,1208.09 1557.19,1211.16 1557.78,1211.32 1558.36,1211.42 1558.95,1210.22 1559.54,1208.81 1560.12,1207.56 1560.71,1207.86 1561.3,1210.85 1561.88,1209.31 1562.47,1206.38 1563.06,1205.34 1563.64,1209.82 1564.23,1205.51 1564.81,1205.8 1565.4,1210.46 1565.99,1208.86 1566.57,1207.71 1567.16,1209.28 1567.75,1209.26 1568.33,1206.38 1568.92,1203.73 1569.51,1201.25 1570.09,1207.43 1570.68,1207.63 1571.27,1204.93 1571.85,1203.85 1572.44,1201.27 1573.02,1201.91 1573.61,1200.84 1574.2,1201.52 1574.78,1203.39 1575.37,1202.77 1575.96,1203.32 1576.54,1203.7 1577.13,1203.81 1577.72,1204.03 1578.3,1204.73 1578.89,1206.6 1579.47,1206.91 1580.06,1207.06 1580.65,1209.87 1581.23,1208.43 1581.82,1209.95 1582.41,1208.65 1582.99,1207.34 1583.58,1205.92 1584.17,1209.01 1584.75,1210.59 1585.34,1212.25 1585.93,1212.21 1586.51,1209.58 1587.1,1211.24 1587.68,1211.32 1588.27,1211.1 1588.86,1209.68 1589.44,1211.31 1590.03,1212.57 1590.62,1213.74 1591.2,1213.55 1591.79,1213.28 1592.38,1214.28 1592.96,1214.14 1593.55,1215.33 1594.14,1213.7 1594.72,1209.55 1595.31,1210.95 1595.89,1209.65 1596.48,1208.27 1597.07,1208.5 1597.65,1209.9 1598.24,1209.93 1598.83,1210.05 1599.41,1210.02 1600,1208.69 1600.59,1208.86 1601.17,1208.95 1601.76,1207.95 1602.34,1211.05 1602.93,1211.1 1603.52,1209.64 1604.1,1213.78 1604.69,1213.73 1605.28,1213.53 1605.86,1213.36 1606.45,1214.75 1607.04,1215.77 1607.62,1212.76 1608.21,1212.52 1608.8,1211.91 1609.38,1211.96 1609.97,1211.79 1610.55,1215.97 1611.14,1217.07 1611.73,1215.42 1612.31,1216.75 1612.9,1214.99 1613.49,1217.5 1614.07,1217.29 1614.66,1221.42 1615.25,1223.88 1615.83,1221.87 1616.42,1222.36 1617.01,1221.79 1617.59,1224.01 1618.18,1221.79 1618.76,1219.81 1619.35,1217.57 1619.94,1217.04 1620.52,1216.38 1621.11,1216.04 1621.7,1217.05 1622.28,1216.61 1622.87,1219.19 1623.46,1218.75 1624.04,1218.43 1624.63,1216.33 1625.22,1220.12 1625.8,1218.08 1626.39,1217.37 1626.97,1215.72 1627.56,1215.17 1628.15,1213.47 1628.73,1212.03 1629.32,1210.64 1629.91,1210.88 1630.49,1210.91 1631.08,1213.56 1631.67,1214.58 1632.25,1214.14 1632.84,1213.99 1633.42,1208.2 1634.01,1209.47 1634.6,1208 1635.18,1206.56 1635.77,1208.15 1636.36,1208.25 1636.94,1206.89 1637.53,1208.35 1638.12,1205.16 1638.7,1202.53 1639.29,1202.55 1639.88,1204.35 1640.46,1202.64 1641.05,1203.01 1641.63,1201.88 1642.22,1202.5 1642.81,1200.38 1643.39,1199.3 1643.98,1197.21 1644.57,1198.1 1645.15,1203.23 1645.74,1202.15 1646.33,1203.74 1646.91,1202.72 1647.5,1203.01 1648.09,1203.09 1648.67,1203.22 1649.26,1204.83 1649.84,1204.82 1650.43,1203.56 1651.02,1205.26 1651.6,1205.7 1652.19,1205.95 1652.78,1206.16 1653.36,1207.4 1653.95,1209 1654.54,1209.25 1655.12,1209.49 1655.71,1206.68 1656.29,1203.99 1656.88,1202.83 1657.47,1205.13 1658.05,1205.92 1658.64,1209.09 1659.23,1207.62 1659.81,1207.77 1660.4,1205.21 1660.99,1209.44 1661.57,1209.56 1662.16,1210.92 1662.75,1210.72 1663.33,1213.63 1663.92,1210.97 1664.5,1210.67 1665.09,1209.22 1665.68,1210.54 1666.26,1210.52 1666.85,1211.56 1667.44,1210.15 1668.02,1210.01 1668.61,1208.56 1669.2,1208.54 1669.78,1208.44 1670.37,1208.36 1670.96,1208.38 1671.54,1211.64 1672.13,1210.1 1672.71,1211.56 1673.3,1209.83 1673.89,1206.66 1674.47,1207.18 1675.06,1208.73 1675.65,1208.9 1676.23,1209.06 1676.82,1208.99 1677.41,1211.92 1677.99,1211.59 1678.58,1210.03 1679.17,1210.05 1679.75,1210.16 1680.34,1209.77 1680.92,1208.32 1681.51,1209.95 1682.1,1208.62 1682.68,1212.8 1683.27,1214.04 1683.86,1213.76 1684.44,1213.42 1685.03,1216 1685.62,1214.15 1686.2,1215.01 1686.79,1211.68 1687.37,1213.14 1687.96,1215.86 1688.55,1216.71 1689.13,1216.34 1689.72,1219.92 1690.31,1219.65 1690.89,1220.24 1691.48,1219.87 1692.07,1217.75 1692.65,1219.88 1693.24,1220.6 1693.83,1216 1694.41,1211.26 1695,1211.47 1695.58,1211.29 1696.17,1208.09 1696.76,1215.28 1697.34,1215.03 1697.93,1213.35 1698.52,1213.49 1699.1,1213.32 1699.69,1211.83 1700.28,1213.37 1700.86,1213.18 1701.45,1211.79 1702.04,1213.38 1702.62,1214.44 1703.21,1215.56 1703.79,1210.76 1704.38,1210.84 1704.97,1210.99 1705.55,1209.41 1706.14,1209.22 1706.73,1209.37 1707.31,1209.11 1707.9,1208.01 1708.49,1206.63 1709.07,1207.14 1709.66,1207.16 1710.24,1207.35 1710.83,1207.26 1711.42,1208.72 1712,1207.29 1712.59,1208.7 1713.18,1207.46 1713.76,1207.44 1714.35,1205.95 1714.94,1206.37 1715.52,1206.41 1716.11,1206.65 1716.7,1208.24 1717.28,1209.46 1717.87,1211.22 1718.45,1212.48 1719.04,1212.27 1719.63,1213.66 1720.21,1214.95 1720.8,1208.98 1721.39,1209.04 1721.97,1210.18 1722.56,1210.12 1723.15,1210.01 1723.73,1210.19 1724.32,1208.69 1724.91,1209.9 1725.49,1211.35 1726.08,1209.94 1726.66,1210.05 1727.25,1208.69 1727.84,1205.92 1728.42,1204.5 1729.01,1201.98 1729.6,1202.38 1730.18,1202.77 1730.77,1203.3 1731.36,1201.99 1731.94,1202.37 1732.53,1203.03 1733.11,1200.48 1733.7,1205.45 1734.29,1207.35 1734.87,1204.57 1735.46,1206.14 1736.05,1206.59 1736.63,1208.15 1737.22,1206.62 1737.81,1206.44 1738.39,1210.9 1738.98,1212.33 1739.57,1211.93 1740.15,1211.53 1740.74,1209.7 1741.32,1209.41 1741.91,1209.76 1742.5,1209.93 1743.08,1211.49 1743.67,1211.66 1744.26,1211.54 1744.84,1209.76 1745.43,1209.62 1746.02,1209.72 1746.6,1209.82 1747.19,1204.08 1747.78,1208.52 1748.36,1210 1748.95,1208.78 1749.53,1208.82 1750.12,1208.79 1750.71,1208.61 1751.29,1208.38 1751.88,1209.96 1752.47,1211.76 1753.05,1214.91 1753.64,1216.14 1754.23,1215.72 1754.81,1212.4 1755.4,1212.16 1755.99,1212.06 1756.57,1206.16 1757.16,1205.05 1757.74,1205.49 1758.33,1202.66 1758.92,1201.57 1759.5,1204.82 1760.09,1205.38 1760.68,1204.29 1761.26,1204.5 1761.85,1203.21 1762.44,1200.44 1763.02,1204.13 1763.61,1203.14 1764.19,1205.07 1764.78,1205.19 1765.37,1205.47 1765.95,1205.82 1766.54,1207.61 1767.13,1207.82 1767.71,1206.8 1768.3,1208.18 1768.89,1209.48 1769.47,1208.07 1770.06,1209.2 1770.65,1210.47 1771.23,1210.57 1771.82,1213.27 1772.4,1213.2 1772.99,1215.87 1773.58,1215.77 1774.16,1218.46 1774.75,1216.8 1775.34,1213.66 1775.92,1212.01 1776.51,1210.5 1777.1,1210.51 1777.68,1208.99 1778.27,1211.79 1778.86,1208.91 1779.44,1208.78 1780.03,1210.2 1780.61,1210.15 1781.2,1211.69 1781.79,1211.5 1782.37,1214.05 1782.96,1213.94 1783.55,1213.7 1784.13,1210.55 1784.72,1211.93 1785.31,1209.03 1785.89,1209.29 1786.48,1209.38 1787.06,1212.17 1787.65,1210.93 1788.24,1212.49 1788.82,1215.26 1789.41,1215.03 1790,1214.88 1790.58,1213.42 1791.17,1214.56 1791.76,1213.06 1792.34,1211.41 1792.93,1211.2 1793.52,1212.67 1794.1,1212.85 1794.69,1214.07 1795.27,1212.28 1795.86,1211.93 1796.45,1211.78 1797.03,1213.02 1797.62,1212.77 1798.21,1213.85 1798.79,1216.56 1799.38,1218.82 1799.97,1221.29 1800.55,1219.35 1801.14,1220.35 1801.73,1221.27 1802.31,1220.63 1802.9,1221.53 1803.48,1219.38 1804.07,1217.56 1804.66,1215.6 1805.24,1212.49 1805.83,1207.89 1806.42,1206.6 1807,1212.43 1807.59,1210.8 1808.18,1207.98 1808.76,1207.79 1809.35,1207.89 1809.94,1210.89 1810.52,1212.18 1811.11,1210.35 1811.69,1209.11 1812.28,1209.16 1812.87,1209.37 1813.45,1211.07 1814.04,1212.03 1814.63,1210.08 1815.21,1209.97 1815.8,1209.97 1816.39,1209.86 1816.97,1209.69 1817.56,1212.38 1818.14,1215 1818.73,1212.17 1819.32,1210.88 1819.9,1210.71 1820.49,1209.17 1821.08,1209.23 1821.66,1209.44 1822.25,1211.97 1822.84,1214.92 1823.42,1214.81 1824.01,1210.2 1824.6,1207.67 1825.18,1206.63 1825.77,1204.16 1826.35,1207 1826.94,1204.08 1827.53,1204.26 1828.11,1200.1 1828.7,1200.34 1829.29,1200.49 1829.87,1200.92 1830.46,1200.13 1831.05,1203.57 1831.63,1207.01 1832.22,1207.2 1832.81,1203.16 1833.39,1203.4 1833.98,1202.25 1834.56,1205.88 1835.15,1205.87 1835.74,1207.28 1836.32,1210.19 1836.91,1211.73 1837.5,1210.23 1838.08,1210.07 1838.67,1210.11 1839.26,1211.41 1839.84,1212.83 1840.43,1214.15 1841.01,1218 1841.6,1217.79 1842.19,1220.08 1842.77,1220.97 1843.36,1218.77 1843.95,1219.5 1844.53,1217.51 1845.12,1216.98 1845.71,1217.94 1846.29,1221.8 1846.88,1221.03 1847.47,1222.11 1848.05,1217.51 1848.64,1214.54 1849.22,1212.71 1849.81,1211.26 1850.4,1205.67 1850.98,1209.96 1851.57,1208.62 1852.16,1207.28 1852.74,1208.49 1853.33,1208.76 1853.92,1207.7 1854.5,1207.89 1855.09,1208.2 1855.68,1207.03 1856.26,1208.37 1856.85,1206.54 1857.43,1208.38 1858.02,1208.42 1858.61,1203.96 1859.19,1204.34 1859.78,1203.35 1860.37,1203.63 1860.95,1209.6 1861.54,1209.44 1862.13,1206.46 1862.71,1208.11 1863.3,1206.73 1863.88,1205.51 1864.47,1207.31 1865.06,1205.97 1865.64,1205.02 1866.23,1202.39 1866.82,1202.79 1867.4,1208.79 1867.99,1209.06 1868.58,1209.15 1869.16,1207.79 1869.75,1209.24 1870.34,1210.57 1870.92,1213.83 1871.51,1212.28 1872.09,1208.11 1872.68,1207 1873.27,1205.53 1873.85,1205.65 1874.44,1206.04 1875.03,1204.63 1875.61,1203.85 1876.2,1204.28 1876.79,1203.01 1877.37,1202.04 1877.96,1200.96 1878.55,1202.81 1879.13,1201.55 1879.72,1202.24 1880.3,1204.18 1880.89,1204.55 1881.48,1206.49 1882.06,1203.65 1882.65,1204.2 1883.24,1203.05 1883.82,1204.85 1884.41,1206.45 1885,1203.88 1885.58,1207.46 1886.17,1204.98 1886.76,1205.25 1887.34,1201.35 1887.93,1203.07 1888.51,1206.22 1889.1,1203.93 1889.69,1207.15 1890.27,1210.51 1890.86,1209.51 1891.45,1211.21 1892.03,1211.27 1892.62,1208.36 1893.21,1208.8 1893.79,1204.74 1894.38,1203.47 1894.96,1209.42 1895.55,1209.55 1896.14,1205.26 1896.72,1208.28 1897.31,1208.11 1897.9,1212.74 1898.48,1212.65 1899.07,1213.73 1899.66,1211.96 1900.24,1214.52 1900.83,1217.26 1901.42,1221.4 1902,1219.43 1902.59,1218.9 1903.17,1217.38 1903.76,1215.79 1904.35,1216.88 1904.93,1216.38 1905.52,1213.3 1906.11,1216 1906.69,1213.91 1907.28,1210.73 1907.87,1209.12 1908.45,1209.09 1909.04,1208.84 1909.63,1208.58 1910.21,1208.68 1910.8,1208.94 1911.38,1210.31 1911.97,1211.74 1912.56,1212.68 1913.14,1209.44 1913.73,1208.07 1914.32,1205.26 1914.9,1208.62 1915.49,1211.36 1916.08,1208.59 1916.66,1205.95 1917.25,1207.94 1917.83,1209.26 1918.42,1209.61 1919.01,1211.22 1919.59,1209.58 1920.18,1211.1 1920.77,1213.91 1921.35,1213.8 1921.94,1215.17 1922.53,1213.35 1923.11,1212.75 1923.7,1211.26 1924.29,1208.34 1924.87,1212.67 1925.46,1210.99 1926.04,1209.62 1926.63,1210.83 1927.22,1211.17 1927.8,1211.3 1928.39,1209.85 1928.98,1211.18 1929.56,1209.47 1930.15,1209.43 1930.74,1206.52 1931.32,1208.29 1931.91,1207.08 1932.5,1208.81 1933.08,1209.88 1933.67,1210.07 1934.25,1212.93 1934.84,1211.33 1935.43,1212.28 1936.01,1212.13 1936.6,1211.96 1937.19,1211.87 1937.77,1211.69 1938.36,1210.23 1938.95,1207.36 1939.53,1203.29 1940.12,1205 1940.71,1207.76 1941.29,1207.95 1941.88,1209.47 1942.46,1212.66 1943.05,1212.63 1943.64,1210.79 1944.22,1213.41 1944.81,1211.45 1945.4,1211.36 1945.98,1209.7 1946.57,1209.75 1947.16,1209.68 1947.74,1212.42 1948.33,1216.34 1948.91,1213.44 1949.5,1213.09 1950.09,1211.66 1950.67,1211.62 1951.26,1213.03 1951.85,1213.11 1952.43,1212.99 1953.02,1213.92 1953.61,1213.59 1954.19,1214.63 1954.78,1214.81 1955.37,1214.6 1955.95,1212.84 1956.54,1210.31 1957.12,1213.1 1957.71,1212.7 1958.3,1211.34 1958.88,1209.45 1959.47,1209.74 1960.06,1211.42 1960.64,1211.58 1961.23,1208.93 1961.82,1210.46 1962.4,1207.49 1962.99,1208.93 1963.58,1210.28 1964.16,1211.63 1964.75,1211.48 1965.33,1211.46 1965.92,1212.58 1966.51,1211 1967.09,1211.28 1967.68,1211.56 1968.27,1211.31 1968.85,1211.1 1969.44,1209.56 1970.03,1209.49 1970.61,1209.72 1971.2,1209.84 1971.78,1207.01 1972.37,1210.01 1972.96,1208.01 1973.54,1205.42 1974.13,1207.01 1974.72,1207.05 1975.3,1205.89 1975.89,1207.53 1976.48,1206.12 1977.06,1208.99 1977.65,1207.42 1978.24,1204.82 1978.82,1202.07 1979.41,1201.38 1979.99,1200.63 1980.58,1201.05 1981.17,1206.82 1981.75,1207.32 1982.34,1208.7 1982.93,1208.93 1983.51,1208.97 1984.1,1207.11 1984.69,1207.3 1985.27,1207.22 1985.86,1203.15 1986.45,1200.7 1987.03,1199.8 1987.62,1201.68 1988.2,1203.57 1988.79,1202.34 1989.38,1201.58 1989.96,1203.7 1990.55,1204.29 1991.14,1205.91 1991.72,1206.22 1992.31,1206.55 1992.9,1208.21 1993.48,1208.43 1994.07,1209.37 1994.65,1210.79 1995.24,1209.39 1995.83,1209.67 1996.41,1204 1997,1203.15 1997.59,1205.02 1998.17,1205.37 1998.76,1205.39 1999.35,1203.94 1999.93,1198.67 2000.52,1199.22 2001.11,1201.41 2001.69,1201.76 2002.28,1202.25 2002.86,1202.66 2003.45,1206.02 2004.04,1207.73 2004.62,1208.2 2005.21,1208.39 2005.8,1209.83 2006.38,1212.76 2006.97,1213.99 2007.56,1211.03 2008.14,1208.23 2008.73,1208.4 2009.32,1208.52 2009.9,1208.91 2010.49,1207.9 2011.07,1209.06 2011.66,1206.17 2012.25,1205.01 2012.83,1205.41 2013.42,1204.24 2014.01,1205.99 2014.59,1207.6 2015.18,1210.62 2015.77,1210.64 2016.35,1212.18 2016.94,1212.23 2017.53,1210.87 2018.11,1212.33 2018.7,1215.02 2019.28,1213.39 2019.87,1213.05 2020.46,1208.56 2021.04,1208.59 2021.63,1210.26 2022.22,1210.1 2022.8,1208.63 2023.39,1211.53 2023.98,1215.62 2024.56,1213.95 2025.15,1216.56 2025.73,1217.76 2026.32,1214.64 2026.91,1214.03 2027.49,1213.63 2028.08,1213.37 2028.67,1207.66 2029.25,1208.96 2029.84,1208.44 2030.43,1207.32 2031.01,1206.07 2031.6,1205 2032.19,1206.97 2032.77,1208.35 2033.36,1209.96 2033.94,1208.49 2034.53,1206.79 2035.12,1206.86 2035.7,1208.37 2036.29,1208.33 2036.88,1206.92 2037.46,1207.04 2038.05,1207.21 2038.64,1208.86 2039.22,1204.94 2039.81,1203.48 2040.4,1203.94 2040.98,1205.67 2041.57,1210.37 2042.15,1214.57 2042.74,1215.61 2043.33,1215.24 2043.91,1219.37 2044.5,1216.01 2045.09,1215.59 2045.67,1216.38 2046.26,1214.49 2046.85,1214.27 2047.43,1215.41 2048.02,1215.01 2048.6,1212.88 2049.19,1214.09 2049.78,1211.14 2050.36,1210.96 2050.95,1212.34 2051.54,1210.96 2052.12,1210.42 2052.71,1210.42 2053.3,1210.25 2053.88,1210.18 2054.47,1210.31 2055.06,1211.66 2055.64,1210.06 2056.23,1208.89 2056.81,1210.27 2057.4,1212.97 2057.99,1212.61 2058.57,1211.36 2059.16,1211.19 2059.75,1211.3 2060.33,1211.32 2060.92,1208.49 2061.51,1210.06 2062.09,1211.6 2062.68,1210.1 2063.27,1210.06 2063.85,1212.95 2064.44,1212.94 2065.02,1210.04 2065.61,1205.91 2066.2,1204.41 2066.78,1203.36 2067.37,1203.59 2067.96,1202.8 2068.54,1203.3 2069.13,1203.49 2069.72,1200.9 2070.3,1206.78 2070.89,1210.87 2071.48,1213.66 2072.06,1213.21 2072.65,1211.48 2073.23,1209.91 2073.82,1208.36 2074.41,1208.26 2074.99,1206.85 2075.58,1208.33 2076.17,1206.88 2076.75,1210.15 2077.34,1208.25 2077.93,1210.26 2078.51,1210.57 2079.1,1209.13 2079.68,1210.34 2080.27,1210.25 2080.86,1207.16 2081.44,1208.49 2082.03,1208.5 2082.62,1208.62 2083.2,1208.85 2083.79,1208.87 2084.38,1207.57 2084.96,1210.56 2085.55,1212.04 2086.14,1209.14 2086.72,1206.53 2087.31,1208.22 2087.89,1208.33 2088.48,1214.22 2089.07,1213.84 2089.65,1212.05 2090.24,1211.78 2090.83,1214.8 2091.41,1213.29 2092,1212.97 2092.59,1211.66 2093.17,1210.03 2093.76,1208.95 2094.35,1208.88 2094.93,1209.05 2095.52,1210.65 2096.1,1215.14 2096.69,1216.34 2097.28,1214.2 2097.86,1212.95 2098.45,1211.2 2099.04,1213.77 2099.62,1212.03 2100.21,1208.99 2100.8,1206.17 2101.38,1204.73 2101.97,1212.1 2102.55,1213.29 2103.14,1211.57 2103.73,1211.59 2104.31,1212.82 2104.9,1215.22 2105.49,1213.38 2106.07,1213.38 2106.66,1214.83 2107.25,1214.62 2107.83,1211.82 2108.42,1210.24 2109.01,1210.26 2109.59,1211.78 2110.18,1212.9 2110.76,1210.89 2111.35,1209.21 2111.94,1207.83 2112.52,1208 2113.11,1208.09 2113.7,1208.02 2114.28,1209.75 2114.87,1209.64 2115.46,1209.46 2116.04,1209.62 2116.63,1208.31 2117.22,1207.1 2117.8,1207.16 2118.39,1217.52 2118.97,1218.53 2119.56,1215.49 2120.15,1216.74 2120.73,1217.47 2121.32,1218.46 2121.91,1221.19 2122.49,1220.5 2123.08,1219.95 2123.67,1219.51 2124.25,1217.37 2124.84,1216.88 2125.42,1219.29 2126.01,1219.89 2126.6,1222.37 2127.18,1221.42 2127.77,1218.05 2128.36,1217.45 2128.94,1214.17 2129.53,1214.01 2130.12,1213.83 2130.7,1213.42 2131.29,1213.11 2131.88,1211.71 2132.46,1211.83 2133.05,1214.78 2133.63,1211.7 2134.22,1212.97 2134.81,1212.86 2135.39,1212.79 2135.98,1215.48 2136.57,1216.7 2137.15,1217.63 2137.74,1213.28 2138.33,1212.92 2138.91,1214.26 2139.5,1212.85 2140.09,1209.8 2140.67,1210.1 2141.26,1211.22 2141.84,1213.92 2142.43,1215.35 2143.02,1213.6 2143.6,1213.09 2144.19,1211.63 2144.78,1210.18 2145.36,1211.53 2145.95,1217.23 2146.54,1217.03 2147.12,1219.59 2147.71,1217.38 2148.3,1217 2148.88,1216.58 2149.47,1216.14 2150.05,1218.54 2150.64,1220.66 2151.23,1218.32 2151.81,1216.17 2152.4,1215.76 2152.99,1215.32 2153.57,1218.1 2154.16,1214.86 2154.75,1210.25 2155.33,1210.11 2155.92,1207.12 2156.5,1207.01 2157.09,1207.16 2157.68,1207.22 2158.26,1205.74 \"/>\n<path clip-path=\"url(#clip462)\" d=\"M986.025 1210.51 L986.612 1210.51 L987.198 1210.51 L987.785 1210.51 L988.371 1210.51 L988.957 1210.51 L989.544 1210.51 L990.13 1210.51 L990.717 1210.51 L991.303 1210.51 L991.889 1210.51 L992.476 1210.51 L993.062 1210.51 L993.649 1210.51 L994.235 1210.51 L994.822 1210.51 L995.408 1210.51 L995.994 1210.51 L996.581 1210.51 L997.167 1210.51 L997.754 1210.51 L998.34 1210.51 L998.926 1210.51 L999.513 1210.51 L1000.1 1210.51 L1000.69 1210.51 L1001.27 1210.51 L1001.86 1210.51 L1002.44 1210.51 L1003.03 1210.51 L1003.62 1210.51 L1004.2 1210.51 L1004.79 1210.51 L1005.38 1210.51 L1005.96 1210.51 L1006.55 1210.51 L1007.14 1210.51 L1007.72 1210.51 L1008.31 1210.51 L1008.9 1210.51 L1009.48 1210.51 L1010.07 1210.51 L1010.65 1210.51 L1011.24 1210.51 L1011.83 1210.51 L1012.41 1210.51 L1013 1210.51 L1013.59 1210.51 L1014.17 1210.51 L1014.76 1210.51 L1015.35 1210.51 L1015.93 1210.51 L1016.52 1210.51 L1017.11 1210.51 L1017.69 1210.51 L1018.28 1210.51 L1018.86 1210.51 L1019.45 1210.51 L1020.04 1210.51 L1020.62 1210.51 L1021.21 1210.51 L1021.8 1210.51 L1022.38 1210.51 L1022.97 1210.51 L1023.56 1210.51 L1024.14 1210.51 L1024.73 1210.51 L1025.32 1210.51 L1025.9 1210.51 L1026.49 1210.51 L1027.07 1210.51 L1027.66 1210.51 L1028.25 1210.51 L1028.83 1210.51 L1029.42 1210.51 L1030.01 1210.51 L1030.59 1210.51 L1031.18 1210.51 L1031.77 1210.51 L1032.35 1210.51 L1032.94 1210.51 L1033.52 1210.51 L1034.11 1210.51 L1034.7 1210.51 L1035.28 1210.51 L1035.87 1210.51 L1036.46 1210.51 L1037.04 1210.51 L1037.63 1210.51 L1038.22 1210.51 L1038.8 1210.51 L1039.39 1210.51 L1039.98 1210.51 L1040.56 1210.51 L1041.15 1210.51 L1041.73 1210.51 L1042.32 1210.51 L1042.91 1210.51 L1043.49 1210.51 L1044.08 1210.51 L1044.67 1210.51 L1045.25 1210.51 L1045.84 1210.51 L1046.43 1210.51 L1047.01 1210.51 L1047.6 1210.51 L1048.19 1210.51 L1048.77 1210.51 L1049.36 1210.51 L1049.94 1210.51 L1050.53 1210.51 L1051.12 1210.51 L1051.7 1210.51 L1052.29 1210.51 L1052.88 1210.51 L1053.46 1210.51 L1054.05 1210.51 L1054.64 1210.51 L1055.22 1210.51 L1055.81 1210.51 L1056.39 1210.51 L1056.98 1210.51 L1057.57 1210.51 L1058.15 1210.51 L1058.74 1210.51 L1059.33 1210.51 L1059.91 1210.51 L1060.5 1210.51 L1061.09 1210.51 L1061.67 1210.51 L1062.26 1210.51 L1062.85 1210.51 L1063.43 1210.51 L1064.02 1210.51 L1064.6 1210.51 L1065.19 1210.51 L1065.78 1210.51 L1066.36 1210.51 L1066.95 1210.51 L1067.54 1210.51 L1068.12 1210.51 L1068.71 1210.51 L1069.3 1210.51 L1069.88 1210.51 L1070.47 1210.51 L1071.06 1210.51 L1071.64 1210.51 L1072.23 1210.51 L1072.81 1210.51 L1073.4 1210.51 L1073.99 1210.51 L1074.57 1210.51 L1075.16 1210.51 L1075.75 1210.51 L1076.33 1210.51 L1076.92 1210.51 L1077.51 1210.51 L1078.09 1210.51 L1078.68 1210.51 L1079.26 1210.51 L1079.85 1210.51 L1080.44 1210.51 L1081.02 1210.51 L1081.61 1210.51 L1082.2 1210.51 L1082.78 1210.51 L1083.37 1210.51 L1083.96 1210.51 L1084.54 1210.51 L1085.13 1210.51 L1085.72 1210.51 L1086.3 1210.51 L1086.89 1210.51 L1087.47 1210.51 L1088.06 1210.51 L1088.65 1210.51 L1089.23 1210.51 L1089.82 1210.51 L1090.41 1210.51 L1090.99 1210.51 L1091.58 1210.51 L1092.17 1210.51 L1092.75 1210.51 L1093.34 1210.51 L1093.93 1210.51 L1094.51 1210.51 L1095.1 1210.51 L1095.68 1210.51 L1096.27 1210.51 L1096.86 1210.51 L1097.44 1210.51 L1098.03 1210.51 L1098.62 1210.51 L1099.2 1210.51 L1099.79 1210.51 L1100.38 1210.51 L1100.96 1210.51 L1101.55 1210.51 L1102.14 1210.51 L1102.72 1210.51 L1103.31 1210.51 L1103.89 1210.51 L1104.48 1210.51 L1105.07 1210.51 L1105.65 1210.51 L1106.24 1210.51 L1106.83 1210.51 L1107.41 1210.51 L1108 1210.51 L1108.59 1210.51 L1109.17 1210.51 L1109.76 1210.51 L1110.34 1210.51 L1110.93 1210.51 L1111.52 1210.51 L1112.1 1210.51 L1112.69 1210.51 L1113.28 1210.51 L1113.86 1210.51 L1114.45 1210.51 L1115.04 1210.51 L1115.62 1210.51 L1116.21 1210.51 L1116.8 1210.51 L1117.38 1210.51 L1117.97 1210.51 L1118.55 1210.51 L1119.14 1210.51 L1119.73 1210.51 L1120.31 1210.51 L1120.9 1210.51 L1121.49 1210.51 L1122.07 1210.51 L1122.66 1210.51 L1123.25 1210.51 L1123.83 1210.51 L1124.42 1210.51 L1125.01 1210.51 L1125.59 1210.51 L1126.18 1210.51 L1126.76 1210.51 L1127.35 1210.51 L1127.94 1210.51 L1128.52 1210.51 L1129.11 1210.51 L1129.7 1210.51 L1130.28 1210.51 L1130.87 1210.51 L1131.46 1210.51 L1132.04 1210.51 L1132.63 1210.51 L1133.21 1210.51 L1133.8 1210.51 L1134.39 1210.51 L1134.97 1210.51 L1135.56 1210.51 L1136.15 1210.51 L1136.73 1210.51 L1137.32 1210.51 L1137.91 1210.51 L1138.49 1210.51 L1139.08 1210.51 L1139.67 1210.51 L1140.25 1210.51 L1140.84 1210.51 L1141.42 1210.51 L1142.01 1210.51 L1142.6 1210.51 L1143.18 1210.51 L1143.77 1210.51 L1144.36 1210.51 L1144.94 1210.51 L1145.53 1210.51 L1146.12 1210.51 L1146.7 1210.51 L1147.29 1210.51 L1147.88 1210.51 L1148.46 1210.51 L1149.05 1210.51 L1149.63 1210.51 L1150.22 1210.51 L1150.81 1210.51 L1151.39 1210.51 L1151.98 1210.51 L1152.57 1210.51 L1153.15 1210.51 L1153.74 1210.51 L1154.33 1210.51 L1154.91 1210.51 L1155.5 1210.51 L1156.09 1210.51 L1156.67 1210.51 L1157.26 1210.51 L1157.84 1210.51 L1158.43 1210.51 L1159.02 1210.51 L1159.6 1210.51 L1160.19 1210.51 L1160.78 1210.51 L1161.36 1210.51 L1161.95 1210.51 L1162.54 1210.51 L1163.12 1210.51 L1163.71 1210.51 L1164.29 1210.51 L1164.88 1210.51 L1165.47 1210.51 L1166.05 1210.51 L1166.64 1210.51 L1167.23 1210.51 L1167.81 1210.51 L1168.4 1210.51 L1168.99 1210.51 L1169.57 1210.51 L1170.16 1210.51 L1170.75 1210.51 L1171.33 1210.51 L1171.92 1210.51 L1172.5 1210.51 L1173.09 1210.51 L1173.68 1210.51 L1174.26 1210.51 L1174.85 1210.51 L1175.44 1210.51 L1176.02 1210.51 L1176.61 1210.51 L1177.2 1210.51 L1177.78 1210.51 L1178.37 1210.51 L1178.96 1210.51 L1179.54 1210.51 L1180.13 1210.51 L1180.71 1210.51 L1181.3 1210.51 L1181.89 1210.51 L1182.47 1210.51 L1183.06 1210.51 L1183.65 1210.51 L1184.23 1210.51 L1184.82 1210.51 L1185.41 1210.51 L1185.99 1210.51 L1186.58 1210.51 L1187.16 1210.51 L1187.75 1210.51 L1188.34 1210.51 L1188.92 1210.51 L1189.51 1210.51 L1190.1 1210.51 L1190.68 1210.51 L1191.27 1210.51 L1191.86 1210.51 L1192.44 1210.51 L1193.03 1210.51 L1193.62 1210.51 L1194.2 1210.51 L1194.79 1210.51 L1195.37 1210.51 L1195.96 1210.51 L1196.55 1210.51 L1197.13 1210.51 L1197.72 1210.51 L1198.31 1210.51 L1198.89 1210.51 L1199.48 1210.51 L1200.07 1210.51 L1200.65 1210.51 L1201.24 1210.51 L1201.83 1210.51 L1202.41 1210.51 L1203 1210.51 L1203.58 1210.51 L1204.17 1210.51 L1204.76 1210.51 L1205.34 1210.51 L1205.93 1210.51 L1206.52 1210.51 L1207.1 1210.51 L1207.69 1210.51 L1208.28 1210.51 L1208.86 1210.51 L1209.45 1210.51 L1210.03 1210.51 L1210.62 1210.51 L1211.21 1210.51 L1211.79 1210.51 L1212.38 1210.51 L1212.97 1210.51 L1213.55 1210.51 L1214.14 1210.51 L1214.73 1210.51 L1215.31 1210.51 L1215.9 1210.51 L1216.49 1210.51 L1217.07 1210.51 L1217.66 1210.51 L1218.24 1210.51 L1218.83 1210.51 L1219.42 1210.51 L1220 1210.51 L1220.59 1210.51 L1221.18 1210.51 L1221.76 1210.51 L1222.35 1210.51 L1222.94 1210.51 L1223.52 1210.51 L1224.11 1210.51 L1224.7 1210.51 L1225.28 1210.51 L1225.87 1210.51 L1226.45 1210.51 L1227.04 1210.51 L1227.63 1210.51 L1228.21 1210.51 L1228.8 1210.51 L1229.39 1210.51 L1229.97 1210.51 L1230.56 1210.51 L1231.15 1210.51 L1231.73 1210.51 L1232.32 1210.51 L1232.91 1210.51 L1233.49 1210.51 L1234.08 1210.51 L1234.66 1210.51 L1235.25 1210.51 L1235.84 1210.51 L1236.42 1210.51 L1237.01 1210.51 L1237.6 1210.51 L1238.18 1210.51 L1238.77 1210.51 L1239.36 1210.51 L1239.94 1210.51 L1240.53 1210.51 L1241.11 1210.51 L1241.7 1210.51 L1242.29 1210.51 L1242.87 1210.51 L1243.46 1210.51 L1244.05 1210.51 L1244.63 1210.51 L1245.22 1210.51 L1245.81 1210.51 L1246.39 1210.51 L1246.98 1210.51 L1247.57 1210.51 L1248.15 1210.51 L1248.74 1210.51 L1249.32 1210.51 L1249.91 1210.51 L1250.5 1210.51 L1251.08 1210.51 L1251.67 1210.51 L1252.26 1210.51 L1252.84 1210.51 L1253.43 1210.51 L1254.02 1210.51 L1254.6 1210.51 L1255.19 1210.51 L1255.78 1210.51 L1256.36 1210.51 L1256.95 1210.51 L1257.53 1210.51 L1258.12 1210.51 L1258.71 1210.51 L1259.29 1210.51 L1259.88 1210.51 L1260.47 1210.51 L1261.05 1210.51 L1261.64 1210.51 L1262.23 1210.51 L1262.81 1210.51 L1263.4 1210.51 L1263.98 1210.51 L1264.57 1210.51 L1265.16 1210.51 L1265.74 1210.51 L1266.33 1210.51 L1266.92 1210.51 L1267.5 1210.51 L1268.09 1210.51 L1268.68 1210.51 L1269.26 1210.51 L1269.85 1210.51 L1270.44 1210.51 L1271.02 1210.51 L1271.61 1210.51 L1272.19 1210.51 L1272.78 1210.51 L1273.37 1210.51 L1273.95 1210.51 L1274.54 1210.51 L1275.13 1210.51 L1275.71 1210.51 L1276.3 1210.51 L1276.89 1210.51 L1277.47 1210.51 L1278.06 1210.51 L1278.65 1210.51 L1279.23 1210.51 L1279.82 1210.51 L1280.4 1210.51 L1280.99 1210.51 L1281.58 1210.51 L1282.16 1210.51 L1282.75 1210.51 L1283.34 1210.51 L1283.92 1210.51 L1284.51 1210.51 L1285.1 1210.51 L1285.68 1210.51 L1286.27 1210.51 L1286.86 1210.51 L1287.44 1210.51 L1288.03 1210.51 L1288.61 1210.51 L1289.2 1210.51 L1289.79 1210.51 L1290.37 1210.51 L1290.96 1210.51 L1291.55 1210.51 L1292.13 1210.51 L1292.72 1210.51 L1293.31 1210.51 L1293.89 1210.51 L1294.48 1210.51 L1295.06 1210.51 L1295.65 1210.51 L1296.24 1210.51 L1296.82 1210.51 L1297.41 1210.51 L1298 1210.51 L1298.58 1210.51 L1299.17 1210.51 L1299.76 1210.51 L1300.34 1210.51 L1300.93 1210.51 L1301.52 1210.51 L1302.1 1210.51 L1302.69 1210.51 L1303.27 1210.51 L1303.86 1210.51 L1304.45 1210.51 L1305.03 1210.51 L1305.62 1210.51 L1306.21 1210.51 L1306.79 1210.51 L1307.38 1210.51 L1307.97 1210.51 L1308.55 1210.51 L1309.14 1210.51 L1309.73 1210.51 L1310.31 1210.51 L1310.9 1210.51 L1311.48 1210.51 L1312.07 1210.51 L1312.66 1210.51 L1313.24 1210.51 L1313.83 1210.51 L1314.42 1210.51 L1315 1210.51 L1315.59 1210.51 L1316.18 1210.51 L1316.76 1210.51 L1317.35 1210.51 L1317.93 1210.51 L1318.52 1210.51 L1319.11 1210.51 L1319.69 1210.51 L1320.28 1210.51 L1320.87 1210.51 L1321.45 1210.51 L1322.04 1210.51 L1322.63 1210.51 L1323.21 1210.51 L1323.8 1210.51 L1324.39 1210.51 L1324.97 1210.51 L1325.56 1210.51 L1326.14 1210.51 L1326.73 1210.51 L1327.32 1210.51 L1327.9 1210.51 L1328.49 1210.51 L1329.08 1210.51 L1329.66 1210.51 L1330.25 1210.51 L1330.84 1210.51 L1331.42 1210.51 L1332.01 1210.51 L1332.6 1210.51 L1333.18 1210.51 L1333.77 1210.51 L1334.35 1210.51 L1334.94 1210.51 L1335.53 1210.51 L1336.11 1210.51 L1336.7 1210.51 L1337.29 1210.51 L1337.87 1210.51 L1338.46 1210.51 L1339.05 1210.51 L1339.63 1210.51 L1340.22 1210.51 L1340.8 1210.51 L1341.39 1210.51 L1341.98 1210.51 L1342.56 1210.51 L1343.15 1210.51 L1343.74 1210.51 L1344.32 1210.51 L1344.91 1210.51 L1345.5 1210.51 L1346.08 1210.51 L1346.67 1210.51 L1347.26 1210.51 L1347.84 1210.51 L1348.43 1210.51 L1349.01 1210.51 L1349.6 1210.51 L1350.19 1210.51 L1350.77 1210.51 L1351.36 1210.51 L1351.95 1210.51 L1352.53 1210.51 L1353.12 1210.51 L1353.71 1210.51 L1354.29 1210.51 L1354.88 1210.51 L1355.47 1210.51 L1356.05 1210.51 L1356.64 1210.51 L1357.22 1210.51 L1357.81 1210.51 L1358.4 1210.51 L1358.98 1210.51 L1359.57 1210.51 L1360.16 1210.51 L1360.74 1210.51 L1361.33 1210.51 L1361.92 1210.51 L1362.5 1210.51 L1363.09 1210.51 L1363.68 1210.51 L1364.26 1210.51 L1364.85 1210.51 L1365.43 1210.51 L1366.02 1210.51 L1366.61 1210.51 L1367.19 1210.51 L1367.78 1210.51 L1368.37 1210.51 L1368.95 1210.51 L1369.54 1210.51 L1370.13 1210.51 L1370.71 1210.51 L1371.3 1210.51 L1371.88 1210.51 L1372.47 1210.51 L1373.06 1210.51 L1373.64 1210.51 L1374.23 1210.51 L1374.82 1210.51 L1375.4 1210.51 L1375.99 1210.51 L1376.58 1210.51 L1377.16 1210.51 L1377.75 1210.51 L1378.34 1210.51 L1378.92 1210.51 L1379.51 1210.51 L1380.09 1210.51 L1380.68 1210.51 L1381.27 1210.51 L1381.85 1210.51 L1382.44 1210.51 L1383.03 1210.51 L1383.61 1210.51 L1384.2 1210.51 L1384.79 1210.51 L1385.37 1210.51 L1385.96 1210.51 L1386.55 1210.51 L1387.13 1210.51 L1387.72 1210.51 L1388.3 1210.51 L1388.89 1210.51 L1389.48 1210.51 L1390.06 1210.51 L1390.65 1210.51 L1391.24 1210.51 L1391.82 1210.51 L1392.41 1210.51 L1393 1210.51 L1393.58 1210.51 L1394.17 1210.51 L1394.75 1210.51 L1395.34 1210.51 L1395.93 1210.51 L1396.51 1210.51 L1397.1 1210.51 L1397.69 1210.51 L1398.27 1210.51 L1398.86 1210.51 L1399.45 1210.51 L1400.03 1210.51 L1400.62 1210.51 L1401.21 1210.51 L1401.79 1210.51 L1402.38 1210.51 L1402.96 1210.51 L1403.55 1210.51 L1404.14 1210.51 L1404.72 1210.51 L1405.31 1210.51 L1405.9 1210.51 L1406.48 1210.51 L1407.07 1210.51 L1407.66 1210.51 L1408.24 1210.51 L1408.83 1210.51 L1409.42 1210.51 L1410 1210.51 L1410.59 1210.51 L1411.17 1210.51 L1411.76 1210.51 L1412.35 1210.51 L1412.93 1210.51 L1413.52 1210.51 L1414.11 1210.51 L1414.69 1210.51 L1415.28 1210.51 L1415.87 1210.51 L1416.45 1210.51 L1417.04 1210.51 L1417.63 1210.51 L1418.21 1210.51 L1418.8 1210.51 L1419.38 1210.51 L1419.97 1210.51 L1420.56 1210.51 L1421.14 1210.51 L1421.73 1210.51 L1422.32 1210.51 L1422.9 1210.51 L1423.49 1210.51 L1424.08 1210.51 L1424.66 1210.51 L1425.25 1210.51 L1425.83 1210.51 L1426.42 1210.51 L1427.01 1210.51 L1427.59 1210.51 L1428.18 1210.51 L1428.77 1210.51 L1429.35 1210.51 L1429.94 1210.51 L1430.53 1210.51 L1431.11 1210.51 L1431.7 1210.51 L1432.29 1210.51 L1432.87 1210.51 L1433.46 1210.51 L1434.04 1210.51 L1434.63 1210.51 L1435.22 1210.51 L1435.8 1210.51 L1436.39 1210.51 L1436.98 1210.51 L1437.56 1210.51 L1438.15 1210.51 L1438.74 1210.51 L1439.32 1210.51 L1439.91 1210.51 L1440.5 1210.51 L1441.08 1210.51 L1441.67 1210.51 L1442.25 1210.51 L1442.84 1210.51 L1443.43 1210.51 L1444.01 1210.51 L1444.6 1210.51 L1445.19 1210.51 L1445.77 1210.51 L1446.36 1210.51 L1446.95 1210.51 L1447.53 1210.51 L1448.12 1210.51 L1448.7 1210.51 L1449.29 1210.51 L1449.88 1210.51 L1450.46 1210.51 L1451.05 1210.51 L1451.64 1210.51 L1452.22 1210.51 L1452.81 1210.51 L1453.4 1210.51 L1453.98 1210.51 L1454.57 1210.51 L1455.16 1210.51 L1455.74 1210.51 L1456.33 1210.51 L1456.91 1210.51 L1457.5 1210.51 L1458.09 1210.51 L1458.67 1210.51 L1459.26 1210.51 L1459.85 1210.51 L1460.43 1210.51 L1461.02 1210.51 L1461.61 1210.51 L1462.19 1210.51 L1462.78 1210.51 L1463.37 1210.51 L1463.95 1210.51 L1464.54 1210.51 L1465.12 1210.51 L1465.71 1210.51 L1466.3 1210.51 L1466.88 1210.51 L1467.47 1210.51 L1468.06 1210.51 L1468.64 1210.51 L1469.23 1210.51 L1469.82 1210.51 L1470.4 1210.51 L1470.99 1210.51 L1471.57 1210.51 L1472.16 1210.51 L1472.75 1210.51 L1473.33 1210.51 L1473.92 1210.51 L1474.51 1210.51 L1475.09 1210.51 L1475.68 1210.51 L1476.27 1210.51 L1476.85 1210.51 L1477.44 1210.51 L1478.03 1210.51 L1478.61 1210.51 L1479.2 1210.51 L1479.78 1210.51 L1480.37 1210.51 L1480.96 1210.51 L1481.54 1210.51 L1482.13 1210.51 L1482.72 1210.51 L1483.3 1210.51 L1483.89 1210.51 L1484.48 1210.51 L1485.06 1210.51 L1485.65 1210.51 L1486.24 1210.51 L1486.82 1210.51 L1487.41 1210.51 L1487.99 1210.51 L1488.58 1210.51 L1489.17 1210.51 L1489.75 1210.51 L1490.34 1210.51 L1490.93 1210.51 L1491.51 1210.51 L1492.1 1210.51 L1492.69 1210.51 L1493.27 1210.51 L1493.86 1210.51 L1494.45 1210.51 L1495.03 1210.51 L1495.62 1210.51 L1496.2 1210.51 L1496.79 1210.51 L1497.38 1210.51 L1497.96 1210.51 L1498.55 1210.51 L1499.14 1210.51 L1499.72 1210.51 L1500.31 1210.51 L1500.9 1210.51 L1501.48 1210.51 L1502.07 1210.51 L1502.65 1210.51 L1503.24 1210.51 L1503.83 1210.51 L1504.41 1210.51 L1505 1210.51 L1505.59 1210.51 L1506.17 1210.51 L1506.76 1210.51 L1507.35 1210.51 L1507.93 1210.51 L1508.52 1210.51 L1509.11 1210.51 L1509.69 1210.51 L1510.28 1210.51 L1510.86 1210.51 L1511.45 1210.51 L1512.04 1210.51 L1512.62 1210.51 L1513.21 1210.51 L1513.8 1210.51 L1514.38 1210.51 L1514.97 1210.51 L1515.56 1210.51 L1516.14 1210.51 L1516.73 1210.51 L1517.32 1210.51 L1517.9 1210.51 L1518.49 1210.51 L1519.07 1210.51 L1519.66 1210.51 L1520.25 1210.51 L1520.83 1210.51 L1521.42 1210.51 L1522.01 1210.51 L1522.59 1210.51 L1523.18 1210.51 L1523.77 1210.51 L1524.35 1210.51 L1524.94 1210.51 L1525.52 1210.51 L1526.11 1210.51 L1526.7 1210.51 L1527.28 1210.51 L1527.87 1210.51 L1528.46 1210.51 L1529.04 1210.51 L1529.63 1210.51 L1530.22 1210.51 L1530.8 1210.51 L1531.39 1210.51 L1531.98 1210.51 L1532.56 1210.51 L1533.15 1210.51 L1533.73 1210.51 L1534.32 1210.51 L1534.91 1210.51 L1535.49 1210.51 L1536.08 1210.51 L1536.67 1210.51 L1537.25 1210.51 L1537.84 1210.51 L1538.43 1210.51 L1539.01 1210.51 L1539.6 1210.51 L1540.19 1210.51 L1540.77 1210.51 L1541.36 1210.51 L1541.94 1210.51 L1542.53 1210.51 L1543.12 1210.51 L1543.7 1210.51 L1544.29 1210.51 L1544.88 1210.51 L1545.46 1210.51 L1546.05 1210.51 L1546.64 1210.51 L1547.22 1210.51 L1547.81 1210.51 L1548.4 1210.51 L1548.98 1210.51 L1549.57 1210.51 L1550.15 1210.51 L1550.74 1210.51 L1551.33 1210.51 L1551.91 1210.51 L1552.5 1210.51 L1553.09 1210.51 L1553.67 1210.51 L1554.26 1210.51 L1554.85 1210.51 L1555.43 1210.51 L1556.02 1210.51 L1556.6 1210.51 L1557.19 1210.51 L1557.78 1210.51 L1558.36 1210.51 L1558.95 1210.51 L1559.54 1210.51 L1560.12 1210.51 L1560.71 1210.51 L1561.3 1210.51 L1561.88 1210.51 L1562.47 1210.51 L1563.06 1210.51 L1563.64 1210.51 L1564.23 1210.51 L1564.81 1210.51 L1565.4 1210.51 L1565.99 1210.51 L1566.57 1210.51 L1567.16 1210.51 L1567.75 1210.51 L1568.33 1210.51 L1568.92 1210.51 L1569.51 1210.51 L1570.09 1210.51 L1570.68 1210.51 L1571.27 1210.51 L1571.85 1210.51 L1572.44 1210.51 L1573.02 1210.51 L1573.61 1210.51 L1574.2 1210.51 L1574.78 1210.51 L1575.37 1210.51 L1575.96 1210.51 L1576.54 1210.51 L1577.13 1210.51 L1577.72 1210.51 L1578.3 1210.51 L1578.89 1210.51 L1579.47 1210.51 L1580.06 1210.51 L1580.65 1210.51 L1581.23 1210.51 L1581.82 1210.51 L1582.41 1210.51 L1582.99 1210.51 L1583.58 1210.51 L1584.17 1210.51 L1584.75 1210.51 L1585.34 1210.51 L1585.93 1210.51 L1586.51 1210.51 L1587.1 1210.51 L1587.68 1210.51 L1588.27 1210.51 L1588.86 1210.51 L1589.44 1210.51 L1590.03 1210.51 L1590.62 1210.51 L1591.2 1210.51 L1591.79 1210.51 L1592.38 1210.51 L1592.96 1210.51 L1593.55 1210.51 L1594.14 1210.51 L1594.72 1210.51 L1595.31 1210.51 L1595.89 1210.51 L1596.48 1210.51 L1597.07 1210.51 L1597.65 1210.51 L1598.24 1210.51 L1598.83 1210.51 L1599.41 1210.51 L1600 1210.51 L1600.59 1210.51 L1601.17 1210.51 L1601.76 1210.51 L1602.34 1210.51 L1602.93 1210.51 L1603.52 1210.51 L1604.1 1210.51 L1604.69 1210.51 L1605.28 1210.51 L1605.86 1210.51 L1606.45 1210.51 L1607.04 1210.51 L1607.62 1210.51 L1608.21 1210.51 L1608.8 1210.51 L1609.38 1210.51 L1609.97 1210.51 L1610.55 1210.51 L1611.14 1210.51 L1611.73 1210.51 L1612.31 1210.51 L1612.9 1210.51 L1613.49 1210.51 L1614.07 1210.51 L1614.66 1210.51 L1615.25 1210.51 L1615.83 1210.51 L1616.42 1210.51 L1617.01 1210.51 L1617.59 1210.51 L1618.18 1210.51 L1618.76 1210.51 L1619.35 1210.51 L1619.94 1210.51 L1620.52 1210.51 L1621.11 1210.51 L1621.7 1210.51 L1622.28 1210.51 L1622.87 1210.51 L1623.46 1210.51 L1624.04 1210.51 L1624.63 1210.51 L1625.22 1210.51 L1625.8 1210.51 L1626.39 1210.51 L1626.97 1210.51 L1627.56 1210.51 L1628.15 1210.51 L1628.73 1210.51 L1629.32 1210.51 L1629.91 1210.51 L1630.49 1210.51 L1631.08 1210.51 L1631.67 1210.51 L1632.25 1210.51 L1632.84 1210.51 L1633.42 1210.51 L1634.01 1210.51 L1634.6 1210.51 L1635.18 1210.51 L1635.77 1210.51 L1636.36 1210.51 L1636.94 1210.51 L1637.53 1210.51 L1638.12 1210.51 L1638.7 1210.51 L1639.29 1210.51 L1639.88 1210.51 L1640.46 1210.51 L1641.05 1210.51 L1641.63 1210.51 L1642.22 1210.51 L1642.81 1210.51 L1643.39 1210.51 L1643.98 1210.51 L1644.57 1210.51 L1645.15 1210.51 L1645.74 1210.51 L1646.33 1210.51 L1646.91 1210.51 L1647.5 1210.51 L1648.09 1210.51 L1648.67 1210.51 L1649.26 1210.51 L1649.84 1210.51 L1650.43 1210.51 L1651.02 1210.51 L1651.6 1210.51 L1652.19 1210.51 L1652.78 1210.51 L1653.36 1210.51 L1653.95 1210.51 L1654.54 1210.51 L1655.12 1210.51 L1655.71 1210.51 L1656.29 1210.51 L1656.88 1210.51 L1657.47 1210.51 L1658.05 1210.51 L1658.64 1210.51 L1659.23 1210.51 L1659.81 1210.51 L1660.4 1210.51 L1660.99 1210.51 L1661.57 1210.51 L1662.16 1210.51 L1662.75 1210.51 L1663.33 1210.51 L1663.92 1210.51 L1664.5 1210.51 L1665.09 1210.51 L1665.68 1210.51 L1666.26 1210.51 L1666.85 1210.51 L1667.44 1210.51 L1668.02 1210.51 L1668.61 1210.51 L1669.2 1210.51 L1669.78 1210.51 L1670.37 1210.51 L1670.96 1210.51 L1671.54 1210.51 L1672.13 1210.51 L1672.71 1210.51 L1673.3 1210.51 L1673.89 1210.51 L1674.47 1210.51 L1675.06 1210.51 L1675.65 1210.51 L1676.23 1210.51 L1676.82 1210.51 L1677.41 1210.51 L1677.99 1210.51 L1678.58 1210.51 L1679.17 1210.51 L1679.75 1210.51 L1680.34 1210.51 L1680.92 1210.51 L1681.51 1210.51 L1682.1 1210.51 L1682.68 1210.51 L1683.27 1210.51 L1683.86 1210.51 L1684.44 1210.51 L1685.03 1210.51 L1685.62 1210.51 L1686.2 1210.51 L1686.79 1210.51 L1687.37 1210.51 L1687.96 1210.51 L1688.55 1210.51 L1689.13 1210.51 L1689.72 1210.51 L1690.31 1210.51 L1690.89 1210.51 L1691.48 1210.51 L1692.07 1210.51 L1692.65 1210.51 L1693.24 1210.51 L1693.83 1210.51 L1694.41 1210.51 L1695 1210.51 L1695.58 1210.51 L1696.17 1210.51 L1696.76 1210.51 L1697.34 1210.51 L1697.93 1210.51 L1698.52 1210.51 L1699.1 1210.51 L1699.69 1210.51 L1700.28 1210.51 L1700.86 1210.51 L1701.45 1210.51 L1702.04 1210.51 L1702.62 1210.51 L1703.21 1210.51 L1703.79 1210.51 L1704.38 1210.51 L1704.97 1210.51 L1705.55 1210.51 L1706.14 1210.51 L1706.73 1210.51 L1707.31 1210.51 L1707.9 1210.51 L1708.49 1210.51 L1709.07 1210.51 L1709.66 1210.51 L1710.24 1210.51 L1710.83 1210.51 L1711.42 1210.51 L1712 1210.51 L1712.59 1210.51 L1713.18 1210.51 L1713.76 1210.51 L1714.35 1210.51 L1714.94 1210.51 L1715.52 1210.51 L1716.11 1210.51 L1716.7 1210.51 L1717.28 1210.51 L1717.87 1210.51 L1718.45 1210.51 L1719.04 1210.51 L1719.63 1210.51 L1720.21 1210.51 L1720.8 1210.51 L1721.39 1210.51 L1721.97 1210.51 L1722.56 1210.51 L1723.15 1210.51 L1723.73 1210.51 L1724.32 1210.51 L1724.91 1210.51 L1725.49 1210.51 L1726.08 1210.51 L1726.66 1210.51 L1727.25 1210.51 L1727.84 1210.51 L1728.42 1210.51 L1729.01 1210.51 L1729.6 1210.51 L1730.18 1210.51 L1730.77 1210.51 L1731.36 1210.51 L1731.94 1210.51 L1732.53 1210.51 L1733.11 1210.51 L1733.7 1210.51 L1734.29 1210.51 L1734.87 1210.51 L1735.46 1210.51 L1736.05 1210.51 L1736.63 1210.51 L1737.22 1210.51 L1737.81 1210.51 L1738.39 1210.51 L1738.98 1210.51 L1739.57 1210.51 L1740.15 1210.51 L1740.74 1210.51 L1741.32 1210.51 L1741.91 1210.51 L1742.5 1210.51 L1743.08 1210.51 L1743.67 1210.51 L1744.26 1210.51 L1744.84 1210.51 L1745.43 1210.51 L1746.02 1210.51 L1746.6 1210.51 L1747.19 1210.51 L1747.78 1210.51 L1748.36 1210.51 L1748.95 1210.51 L1749.53 1210.51 L1750.12 1210.51 L1750.71 1210.51 L1751.29 1210.51 L1751.88 1210.51 L1752.47 1210.51 L1753.05 1210.51 L1753.64 1210.51 L1754.23 1210.51 L1754.81 1210.51 L1755.4 1210.51 L1755.99 1210.51 L1756.57 1210.51 L1757.16 1210.51 L1757.74 1210.51 L1758.33 1210.51 L1758.92 1210.51 L1759.5 1210.51 L1760.09 1210.51 L1760.68 1210.51 L1761.26 1210.51 L1761.85 1210.51 L1762.44 1210.51 L1763.02 1210.51 L1763.61 1210.51 L1764.19 1210.51 L1764.78 1210.51 L1765.37 1210.51 L1765.95 1210.51 L1766.54 1210.51 L1767.13 1210.51 L1767.71 1210.51 L1768.3 1210.51 L1768.89 1210.51 L1769.47 1210.51 L1770.06 1210.51 L1770.65 1210.51 L1771.23 1210.51 L1771.82 1210.51 L1772.4 1210.51 L1772.99 1210.51 L1773.58 1210.51 L1774.16 1210.51 L1774.75 1210.51 L1775.34 1210.51 L1775.92 1210.51 L1776.51 1210.51 L1777.1 1210.51 L1777.68 1210.51 L1778.27 1210.51 L1778.86 1210.51 L1779.44 1210.51 L1780.03 1210.51 L1780.61 1210.51 L1781.2 1210.51 L1781.79 1210.51 L1782.37 1210.51 L1782.96 1210.51 L1783.55 1210.51 L1784.13 1210.51 L1784.72 1210.51 L1785.31 1210.51 L1785.89 1210.51 L1786.48 1210.51 L1787.06 1210.51 L1787.65 1210.51 L1788.24 1210.51 L1788.82 1210.51 L1789.41 1210.51 L1790 1210.51 L1790.58 1210.51 L1791.17 1210.51 L1791.76 1210.51 L1792.34 1210.51 L1792.93 1210.51 L1793.52 1210.51 L1794.1 1210.51 L1794.69 1210.51 L1795.27 1210.51 L1795.86 1210.51 L1796.45 1210.51 L1797.03 1210.51 L1797.62 1210.51 L1798.21 1210.51 L1798.79 1210.51 L1799.38 1210.51 L1799.97 1210.51 L1800.55 1210.51 L1801.14 1210.51 L1801.73 1210.51 L1802.31 1210.51 L1802.9 1210.51 L1803.48 1210.51 L1804.07 1210.51 L1804.66 1210.51 L1805.24 1210.51 L1805.83 1210.51 L1806.42 1210.51 L1807 1210.51 L1807.59 1210.51 L1808.18 1210.51 L1808.76 1210.51 L1809.35 1210.51 L1809.94 1210.51 L1810.52 1210.51 L1811.11 1210.51 L1811.69 1210.51 L1812.28 1210.51 L1812.87 1210.51 L1813.45 1210.51 L1814.04 1210.51 L1814.63 1210.51 L1815.21 1210.51 L1815.8 1210.51 L1816.39 1210.51 L1816.97 1210.51 L1817.56 1210.51 L1818.14 1210.51 L1818.73 1210.51 L1819.32 1210.51 L1819.9 1210.51 L1820.49 1210.51 L1821.08 1210.51 L1821.66 1210.51 L1822.25 1210.51 L1822.84 1210.51 L1823.42 1210.51 L1824.01 1210.51 L1824.6 1210.51 L1825.18 1210.51 L1825.77 1210.51 L1826.35 1210.51 L1826.94 1210.51 L1827.53 1210.51 L1828.11 1210.51 L1828.7 1210.51 L1829.29 1210.51 L1829.87 1210.51 L1830.46 1210.51 L1831.05 1210.51 L1831.63 1210.51 L1832.22 1210.51 L1832.81 1210.51 L1833.39 1210.51 L1833.98 1210.51 L1834.56 1210.51 L1835.15 1210.51 L1835.74 1210.51 L1836.32 1210.51 L1836.91 1210.51 L1837.5 1210.51 L1838.08 1210.51 L1838.67 1210.51 L1839.26 1210.51 L1839.84 1210.51 L1840.43 1210.51 L1841.01 1210.51 L1841.6 1210.51 L1842.19 1210.51 L1842.77 1210.51 L1843.36 1210.51 L1843.95 1210.51 L1844.53 1210.51 L1845.12 1210.51 L1845.71 1210.51 L1846.29 1210.51 L1846.88 1210.51 L1847.47 1210.51 L1848.05 1210.51 L1848.64 1210.51 L1849.22 1210.51 L1849.81 1210.51 L1850.4 1210.51 L1850.98 1210.51 L1851.57 1210.51 L1852.16 1210.51 L1852.74 1210.51 L1853.33 1210.51 L1853.92 1210.51 L1854.5 1210.51 L1855.09 1210.51 L1855.68 1210.51 L1856.26 1210.51 L1856.85 1210.51 L1857.43 1210.51 L1858.02 1210.51 L1858.61 1210.51 L1859.19 1210.51 L1859.78 1210.51 L1860.37 1210.51 L1860.95 1210.51 L1861.54 1210.51 L1862.13 1210.51 L1862.71 1210.51 L1863.3 1210.51 L1863.88 1210.51 L1864.47 1210.51 L1865.06 1210.51 L1865.64 1210.51 L1866.23 1210.51 L1866.82 1210.51 L1867.4 1210.51 L1867.99 1210.51 L1868.58 1210.51 L1869.16 1210.51 L1869.75 1210.51 L1870.34 1210.51 L1870.92 1210.51 L1871.51 1210.51 L1872.09 1210.51 L1872.68 1210.51 L1873.27 1210.51 L1873.85 1210.51 L1874.44 1210.51 L1875.03 1210.51 L1875.61 1210.51 L1876.2 1210.51 L1876.79 1210.51 L1877.37 1210.51 L1877.96 1210.51 L1878.55 1210.51 L1879.13 1210.51 L1879.72 1210.51 L1880.3 1210.51 L1880.89 1210.51 L1881.48 1210.51 L1882.06 1210.51 L1882.65 1210.51 L1883.24 1210.51 L1883.82 1210.51 L1884.41 1210.51 L1885 1210.51 L1885.58 1210.51 L1886.17 1210.51 L1886.76 1210.51 L1887.34 1210.51 L1887.93 1210.51 L1888.51 1210.51 L1889.1 1210.51 L1889.69 1210.51 L1890.27 1210.51 L1890.86 1210.51 L1891.45 1210.51 L1892.03 1210.51 L1892.62 1210.51 L1893.21 1210.51 L1893.79 1210.51 L1894.38 1210.51 L1894.96 1210.51 L1895.55 1210.51 L1896.14 1210.51 L1896.72 1210.51 L1897.31 1210.51 L1897.9 1210.51 L1898.48 1210.51 L1899.07 1210.51 L1899.66 1210.51 L1900.24 1210.51 L1900.83 1210.51 L1901.42 1210.51 L1902 1210.51 L1902.59 1210.51 L1903.17 1210.51 L1903.76 1210.51 L1904.35 1210.51 L1904.93 1210.51 L1905.52 1210.51 L1906.11 1210.51 L1906.69 1210.51 L1907.28 1210.51 L1907.87 1210.51 L1908.45 1210.51 L1909.04 1210.51 L1909.63 1210.51 L1910.21 1210.51 L1910.8 1210.51 L1911.38 1210.51 L1911.97 1210.51 L1912.56 1210.51 L1913.14 1210.51 L1913.73 1210.51 L1914.32 1210.51 L1914.9 1210.51 L1915.49 1210.51 L1916.08 1210.51 L1916.66 1210.51 L1917.25 1210.51 L1917.83 1210.51 L1918.42 1210.51 L1919.01 1210.51 L1919.59 1210.51 L1920.18 1210.51 L1920.77 1210.51 L1921.35 1210.51 L1921.94 1210.51 L1922.53 1210.51 L1923.11 1210.51 L1923.7 1210.51 L1924.29 1210.51 L1924.87 1210.51 L1925.46 1210.51 L1926.04 1210.51 L1926.63 1210.51 L1927.22 1210.51 L1927.8 1210.51 L1928.39 1210.51 L1928.98 1210.51 L1929.56 1210.51 L1930.15 1210.51 L1930.74 1210.51 L1931.32 1210.51 L1931.91 1210.51 L1932.5 1210.51 L1933.08 1210.51 L1933.67 1210.51 L1934.25 1210.51 L1934.84 1210.51 L1935.43 1210.51 L1936.01 1210.51 L1936.6 1210.51 L1937.19 1210.51 L1937.77 1210.51 L1938.36 1210.51 L1938.95 1210.51 L1939.53 1210.51 L1940.12 1210.51 L1940.71 1210.51 L1941.29 1210.51 L1941.88 1210.51 L1942.46 1210.51 L1943.05 1210.51 L1943.64 1210.51 L1944.22 1210.51 L1944.81 1210.51 L1945.4 1210.51 L1945.98 1210.51 L1946.57 1210.51 L1947.16 1210.51 L1947.74 1210.51 L1948.33 1210.51 L1948.91 1210.51 L1949.5 1210.51 L1950.09 1210.51 L1950.67 1210.51 L1951.26 1210.51 L1951.85 1210.51 L1952.43 1210.51 L1953.02 1210.51 L1953.61 1210.51 L1954.19 1210.51 L1954.78 1210.51 L1955.37 1210.51 L1955.95 1210.51 L1956.54 1210.51 L1957.12 1210.51 L1957.71 1210.51 L1958.3 1210.51 L1958.88 1210.51 L1959.47 1210.51 L1960.06 1210.51 L1960.64 1210.51 L1961.23 1210.51 L1961.82 1210.51 L1962.4 1210.51 L1962.99 1210.51 L1963.58 1210.51 L1964.16 1210.51 L1964.75 1210.51 L1965.33 1210.51 L1965.92 1210.51 L1966.51 1210.51 L1967.09 1210.51 L1967.68 1210.51 L1968.27 1210.51 L1968.85 1210.51 L1969.44 1210.51 L1970.03 1210.51 L1970.61 1210.51 L1971.2 1210.51 L1971.78 1210.51 L1972.37 1210.51 L1972.96 1210.51 L1973.54 1210.51 L1974.13 1210.51 L1974.72 1210.51 L1975.3 1210.51 L1975.89 1210.51 L1976.48 1210.51 L1977.06 1210.51 L1977.65 1210.51 L1978.24 1210.51 L1978.82 1210.51 L1979.41 1210.51 L1979.99 1210.51 L1980.58 1210.51 L1981.17 1210.51 L1981.75 1210.51 L1982.34 1210.51 L1982.93 1210.51 L1983.51 1210.51 L1984.1 1210.51 L1984.69 1210.51 L1985.27 1210.51 L1985.86 1210.51 L1986.45 1210.51 L1987.03 1210.51 L1987.62 1210.51 L1988.2 1210.51 L1988.79 1210.51 L1989.38 1210.51 L1989.96 1210.51 L1990.55 1210.51 L1991.14 1210.51 L1991.72 1210.51 L1992.31 1210.51 L1992.9 1210.51 L1993.48 1210.51 L1994.07 1210.51 L1994.65 1210.51 L1995.24 1210.51 L1995.83 1210.51 L1996.41 1210.51 L1997 1210.51 L1997.59 1210.51 L1998.17 1210.51 L1998.76 1210.51 L1999.35 1210.51 L1999.93 1210.51 L2000.52 1210.51 L2001.11 1210.51 L2001.69 1210.51 L2002.28 1210.51 L2002.86 1210.51 L2003.45 1210.51 L2004.04 1210.51 L2004.62 1210.51 L2005.21 1210.51 L2005.8 1210.51 L2006.38 1210.51 L2006.97 1210.51 L2007.56 1210.51 L2008.14 1210.51 L2008.73 1210.51 L2009.32 1210.51 L2009.9 1210.51 L2010.49 1210.51 L2011.07 1210.51 L2011.66 1210.51 L2012.25 1210.51 L2012.83 1210.51 L2013.42 1210.51 L2014.01 1210.51 L2014.59 1210.51 L2015.18 1210.51 L2015.77 1210.51 L2016.35 1210.51 L2016.94 1210.51 L2017.53 1210.51 L2018.11 1210.51 L2018.7 1210.51 L2019.28 1210.51 L2019.87 1210.51 L2020.46 1210.51 L2021.04 1210.51 L2021.63 1210.51 L2022.22 1210.51 L2022.8 1210.51 L2023.39 1210.51 L2023.98 1210.51 L2024.56 1210.51 L2025.15 1210.51 L2025.73 1210.51 L2026.32 1210.51 L2026.91 1210.51 L2027.49 1210.51 L2028.08 1210.51 L2028.67 1210.51 L2029.25 1210.51 L2029.84 1210.51 L2030.43 1210.51 L2031.01 1210.51 L2031.6 1210.51 L2032.19 1210.51 L2032.77 1210.51 L2033.36 1210.51 L2033.94 1210.51 L2034.53 1210.51 L2035.12 1210.51 L2035.7 1210.51 L2036.29 1210.51 L2036.88 1210.51 L2037.46 1210.51 L2038.05 1210.51 L2038.64 1210.51 L2039.22 1210.51 L2039.81 1210.51 L2040.4 1210.51 L2040.98 1210.51 L2041.57 1210.51 L2042.15 1210.51 L2042.74 1210.51 L2043.33 1210.51 L2043.91 1210.51 L2044.5 1210.51 L2045.09 1210.51 L2045.67 1210.51 L2046.26 1210.51 L2046.85 1210.51 L2047.43 1210.51 L2048.02 1210.51 L2048.6 1210.51 L2049.19 1210.51 L2049.78 1210.51 L2050.36 1210.51 L2050.95 1210.51 L2051.54 1210.51 L2052.12 1210.51 L2052.71 1210.51 L2053.3 1210.51 L2053.88 1210.51 L2054.47 1210.51 L2055.06 1210.51 L2055.64 1210.51 L2056.23 1210.51 L2056.81 1210.51 L2057.4 1210.51 L2057.99 1210.51 L2058.57 1210.51 L2059.16 1210.51 L2059.75 1210.51 L2060.33 1210.51 L2060.92 1210.51 L2061.51 1210.51 L2062.09 1210.51 L2062.68 1210.51 L2063.27 1210.51 L2063.85 1210.51 L2064.44 1210.51 L2065.02 1210.51 L2065.61 1210.51 L2066.2 1210.51 L2066.78 1210.51 L2067.37 1210.51 L2067.96 1210.51 L2068.54 1210.51 L2069.13 1210.51 L2069.72 1210.51 L2070.3 1210.51 L2070.89 1210.51 L2071.48 1210.51 L2072.06 1210.51 L2072.65 1210.51 L2073.23 1210.51 L2073.82 1210.51 L2074.41 1210.51 L2074.99 1210.51 L2075.58 1210.51 L2076.17 1210.51 L2076.75 1210.51 L2077.34 1210.51 L2077.93 1210.51 L2078.51 1210.51 L2079.1 1210.51 L2079.68 1210.51 L2080.27 1210.51 L2080.86 1210.51 L2081.44 1210.51 L2082.03 1210.51 L2082.62 1210.51 L2083.2 1210.51 L2083.79 1210.51 L2084.38 1210.51 L2084.96 1210.51 L2085.55 1210.51 L2086.14 1210.51 L2086.72 1210.51 L2087.31 1210.51 L2087.89 1210.51 L2088.48 1210.51 L2089.07 1210.51 L2089.65 1210.51 L2090.24 1210.51 L2090.83 1210.51 L2091.41 1210.51 L2092 1210.51 L2092.59 1210.51 L2093.17 1210.51 L2093.76 1210.51 L2094.35 1210.51 L2094.93 1210.51 L2095.52 1210.51 L2096.1 1210.51 L2096.69 1210.51 L2097.28 1210.51 L2097.86 1210.51 L2098.45 1210.51 L2099.04 1210.51 L2099.62 1210.51 L2100.21 1210.51 L2100.8 1210.51 L2101.38 1210.51 L2101.97 1210.51 L2102.55 1210.51 L2103.14 1210.51 L2103.73 1210.51 L2104.31 1210.51 L2104.9 1210.51 L2105.49 1210.51 L2106.07 1210.51 L2106.66 1210.51 L2107.25 1210.51 L2107.83 1210.51 L2108.42 1210.51 L2109.01 1210.51 L2109.59 1210.51 L2110.18 1210.51 L2110.76 1210.51 L2111.35 1210.51 L2111.94 1210.51 L2112.52 1210.51 L2113.11 1210.51 L2113.7 1210.51 L2114.28 1210.51 L2114.87 1210.51 L2115.46 1210.51 L2116.04 1210.51 L2116.63 1210.51 L2117.22 1210.51 L2117.8 1210.51 L2118.39 1210.51 L2118.97 1210.51 L2119.56 1210.51 L2120.15 1210.51 L2120.73 1210.51 L2121.32 1210.51 L2121.91 1210.51 L2122.49 1210.51 L2123.08 1210.51 L2123.67 1210.51 L2124.25 1210.51 L2124.84 1210.51 L2125.42 1210.51 L2126.01 1210.51 L2126.6 1210.51 L2127.18 1210.51 L2127.77 1210.51 L2128.36 1210.51 L2128.94 1210.51 L2129.53 1210.51 L2130.12 1210.51 L2130.7 1210.51 L2131.29 1210.51 L2131.88 1210.51 L2132.46 1210.51 L2133.05 1210.51 L2133.63 1210.51 L2134.22 1210.51 L2134.81 1210.51 L2135.39 1210.51 L2135.98 1210.51 L2136.57 1210.51 L2137.15 1210.51 L2137.74 1210.51 L2138.33 1210.51 L2138.91 1210.51 L2139.5 1210.51 L2140.09 1210.51 L2140.67 1210.51 L2141.26 1210.51 L2141.84 1210.51 L2142.43 1210.51 L2143.02 1210.51 L2143.6 1210.51 L2144.19 1210.51 L2144.78 1210.51 L2145.36 1210.51 L2145.95 1210.51 L2146.54 1210.51 L2147.12 1210.51 L2147.71 1210.51 L2148.3 1210.51 L2148.88 1210.51 L2149.47 1210.51 L2150.05 1210.51 L2150.64 1210.51 L2151.23 1210.51 L2151.81 1210.51 L2152.4 1210.51 L2152.99 1210.51 L2153.57 1210.51 L2154.16 1210.51 L2154.75 1210.51 L2155.33 1210.51 L2155.92 1210.51 L2156.5 1210.51 L2157.09 1210.51 L2157.68 1210.51 L2158.26 1210.51 L2158.26 1209.8 L2157.68 1209.8 L2157.09 1209.8 L2156.5 1209.8 L2155.92 1209.8 L2155.33 1209.8 L2154.75 1209.8 L2154.16 1209.8 L2153.57 1209.8 L2152.99 1209.8 L2152.4 1209.8 L2151.81 1209.8 L2151.23 1209.8 L2150.64 1209.8 L2150.05 1209.8 L2149.47 1209.8 L2148.88 1209.8 L2148.3 1209.8 L2147.71 1209.8 L2147.12 1209.8 L2146.54 1209.8 L2145.95 1209.8 L2145.36 1209.8 L2144.78 1209.8 L2144.19 1209.8 L2143.6 1209.8 L2143.02 1209.8 L2142.43 1209.8 L2141.84 1209.8 L2141.26 1209.8 L2140.67 1209.8 L2140.09 1209.8 L2139.5 1209.8 L2138.91 1209.8 L2138.33 1209.8 L2137.74 1209.8 L2137.15 1209.8 L2136.57 1209.8 L2135.98 1209.8 L2135.39 1209.8 L2134.81 1209.8 L2134.22 1209.8 L2133.63 1209.8 L2133.05 1209.8 L2132.46 1209.8 L2131.88 1209.8 L2131.29 1209.8 L2130.7 1209.8 L2130.12 1209.8 L2129.53 1209.8 L2128.94 1209.8 L2128.36 1209.8 L2127.77 1209.8 L2127.18 1209.8 L2126.6 1209.8 L2126.01 1209.8 L2125.42 1209.8 L2124.84 1209.8 L2124.25 1209.8 L2123.67 1209.8 L2123.08 1209.8 L2122.49 1209.8 L2121.91 1209.8 L2121.32 1209.8 L2120.73 1209.8 L2120.15 1209.8 L2119.56 1209.8 L2118.97 1209.8 L2118.39 1209.8 L2117.8 1209.8 L2117.22 1209.8 L2116.63 1209.8 L2116.04 1209.8 L2115.46 1209.8 L2114.87 1209.8 L2114.28 1209.8 L2113.7 1209.8 L2113.11 1209.8 L2112.52 1209.8 L2111.94 1209.8 L2111.35 1209.8 L2110.76 1209.8 L2110.18 1209.8 L2109.59 1209.8 L2109.01 1209.8 L2108.42 1209.8 L2107.83 1209.8 L2107.25 1209.8 L2106.66 1209.8 L2106.07 1209.8 L2105.49 1209.8 L2104.9 1209.8 L2104.31 1209.8 L2103.73 1209.8 L2103.14 1209.8 L2102.55 1209.8 L2101.97 1209.8 L2101.38 1209.8 L2100.8 1209.8 L2100.21 1209.8 L2099.62 1209.8 L2099.04 1209.8 L2098.45 1209.8 L2097.86 1209.8 L2097.28 1209.8 L2096.69 1209.8 L2096.1 1209.8 L2095.52 1209.8 L2094.93 1209.8 L2094.35 1209.8 L2093.76 1209.8 L2093.17 1209.8 L2092.59 1209.8 L2092 1209.8 L2091.41 1209.8 L2090.83 1209.8 L2090.24 1209.8 L2089.65 1209.8 L2089.07 1209.8 L2088.48 1209.8 L2087.89 1209.8 L2087.31 1209.8 L2086.72 1209.8 L2086.14 1209.8 L2085.55 1209.8 L2084.96 1209.8 L2084.38 1209.8 L2083.79 1209.8 L2083.2 1209.8 L2082.62 1209.8 L2082.03 1209.8 L2081.44 1209.8 L2080.86 1209.8 L2080.27 1209.8 L2079.68 1209.8 L2079.1 1209.8 L2078.51 1209.8 L2077.93 1209.8 L2077.34 1209.8 L2076.75 1209.8 L2076.17 1209.8 L2075.58 1209.8 L2074.99 1209.8 L2074.41 1209.8 L2073.82 1209.8 L2073.23 1209.8 L2072.65 1209.8 L2072.06 1209.8 L2071.48 1209.8 L2070.89 1209.8 L2070.3 1209.8 L2069.72 1209.8 L2069.13 1209.8 L2068.54 1209.8 L2067.96 1209.8 L2067.37 1209.8 L2066.78 1209.8 L2066.2 1209.8 L2065.61 1209.8 L2065.02 1209.8 L2064.44 1209.8 L2063.85 1209.8 L2063.27 1209.8 L2062.68 1209.8 L2062.09 1209.8 L2061.51 1209.8 L2060.92 1209.8 L2060.33 1209.8 L2059.75 1209.8 L2059.16 1209.8 L2058.57 1209.8 L2057.99 1209.8 L2057.4 1209.8 L2056.81 1209.8 L2056.23 1209.8 L2055.64 1209.8 L2055.06 1209.8 L2054.47 1209.8 L2053.88 1209.8 L2053.3 1209.8 L2052.71 1209.8 L2052.12 1209.8 L2051.54 1209.8 L2050.95 1209.8 L2050.36 1209.8 L2049.78 1209.8 L2049.19 1209.8 L2048.6 1209.8 L2048.02 1209.8 L2047.43 1209.8 L2046.85 1209.8 L2046.26 1209.8 L2045.67 1209.8 L2045.09 1209.8 L2044.5 1209.8 L2043.91 1209.8 L2043.33 1209.8 L2042.74 1209.8 L2042.15 1209.8 L2041.57 1209.8 L2040.98 1209.8 L2040.4 1209.8 L2039.81 1209.8 L2039.22 1209.8 L2038.64 1209.8 L2038.05 1209.8 L2037.46 1209.8 L2036.88 1209.8 L2036.29 1209.8 L2035.7 1209.8 L2035.12 1209.8 L2034.53 1209.8 L2033.94 1209.8 L2033.36 1209.8 L2032.77 1209.8 L2032.19 1209.8 L2031.6 1209.8 L2031.01 1209.8 L2030.43 1209.8 L2029.84 1209.8 L2029.25 1209.8 L2028.67 1209.8 L2028.08 1209.8 L2027.49 1209.8 L2026.91 1209.8 L2026.32 1209.8 L2025.73 1209.8 L2025.15 1209.8 L2024.56 1209.8 L2023.98 1209.8 L2023.39 1209.8 L2022.8 1209.8 L2022.22 1209.8 L2021.63 1209.8 L2021.04 1209.8 L2020.46 1209.8 L2019.87 1209.8 L2019.28 1209.8 L2018.7 1209.8 L2018.11 1209.8 L2017.53 1209.8 L2016.94 1209.8 L2016.35 1209.8 L2015.77 1209.8 L2015.18 1209.8 L2014.59 1209.8 L2014.01 1209.8 L2013.42 1209.8 L2012.83 1209.8 L2012.25 1209.8 L2011.66 1209.8 L2011.07 1209.8 L2010.49 1209.8 L2009.9 1209.8 L2009.32 1209.8 L2008.73 1209.8 L2008.14 1209.8 L2007.56 1209.8 L2006.97 1209.8 L2006.38 1209.8 L2005.8 1209.8 L2005.21 1209.8 L2004.62 1209.8 L2004.04 1209.8 L2003.45 1209.8 L2002.86 1209.8 L2002.28 1209.8 L2001.69 1209.8 L2001.11 1209.8 L2000.52 1209.8 L1999.93 1209.8 L1999.35 1209.8 L1998.76 1209.8 L1998.17 1209.8 L1997.59 1209.8 L1997 1209.8 L1996.41 1209.8 L1995.83 1209.8 L1995.24 1209.8 L1994.65 1209.8 L1994.07 1209.8 L1993.48 1209.8 L1992.9 1209.8 L1992.31 1209.8 L1991.72 1209.8 L1991.14 1209.8 L1990.55 1209.8 L1989.96 1209.8 L1989.38 1209.8 L1988.79 1209.8 L1988.2 1209.8 L1987.62 1209.8 L1987.03 1209.8 L1986.45 1209.8 L1985.86 1209.8 L1985.27 1209.8 L1984.69 1209.8 L1984.1 1209.8 L1983.51 1209.8 L1982.93 1209.8 L1982.34 1209.8 L1981.75 1209.8 L1981.17 1209.8 L1980.58 1209.8 L1979.99 1209.8 L1979.41 1209.8 L1978.82 1209.8 L1978.24 1209.8 L1977.65 1209.8 L1977.06 1209.8 L1976.48 1209.8 L1975.89 1209.8 L1975.3 1209.8 L1974.72 1209.8 L1974.13 1209.8 L1973.54 1209.8 L1972.96 1209.8 L1972.37 1209.8 L1971.78 1209.8 L1971.2 1209.8 L1970.61 1209.8 L1970.03 1209.8 L1969.44 1209.8 L1968.85 1209.8 L1968.27 1209.8 L1967.68 1209.8 L1967.09 1209.8 L1966.51 1209.8 L1965.92 1209.8 L1965.33 1209.8 L1964.75 1209.8 L1964.16 1209.8 L1963.58 1209.8 L1962.99 1209.8 L1962.4 1209.8 L1961.82 1209.8 L1961.23 1209.8 L1960.64 1209.8 L1960.06 1209.8 L1959.47 1209.8 L1958.88 1209.8 L1958.3 1209.8 L1957.71 1209.8 L1957.12 1209.8 L1956.54 1209.8 L1955.95 1209.8 L1955.37 1209.8 L1954.78 1209.8 L1954.19 1209.8 L1953.61 1209.8 L1953.02 1209.8 L1952.43 1209.8 L1951.85 1209.8 L1951.26 1209.8 L1950.67 1209.8 L1950.09 1209.8 L1949.5 1209.8 L1948.91 1209.8 L1948.33 1209.8 L1947.74 1209.8 L1947.16 1209.8 L1946.57 1209.8 L1945.98 1209.8 L1945.4 1209.8 L1944.81 1209.8 L1944.22 1209.8 L1943.64 1209.8 L1943.05 1209.8 L1942.46 1209.8 L1941.88 1209.8 L1941.29 1209.8 L1940.71 1209.8 L1940.12 1209.8 L1939.53 1209.8 L1938.95 1209.8 L1938.36 1209.8 L1937.77 1209.8 L1937.19 1209.8 L1936.6 1209.8 L1936.01 1209.8 L1935.43 1209.8 L1934.84 1209.8 L1934.25 1209.8 L1933.67 1209.8 L1933.08 1209.8 L1932.5 1209.8 L1931.91 1209.8 L1931.32 1209.8 L1930.74 1209.8 L1930.15 1209.8 L1929.56 1209.8 L1928.98 1209.8 L1928.39 1209.8 L1927.8 1209.8 L1927.22 1209.8 L1926.63 1209.8 L1926.04 1209.8 L1925.46 1209.8 L1924.87 1209.8 L1924.29 1209.8 L1923.7 1209.8 L1923.11 1209.8 L1922.53 1209.8 L1921.94 1209.8 L1921.35 1209.8 L1920.77 1209.8 L1920.18 1209.8 L1919.59 1209.8 L1919.01 1209.8 L1918.42 1209.8 L1917.83 1209.8 L1917.25 1209.8 L1916.66 1209.8 L1916.08 1209.8 L1915.49 1209.8 L1914.9 1209.8 L1914.32 1209.8 L1913.73 1209.8 L1913.14 1209.8 L1912.56 1209.8 L1911.97 1209.8 L1911.38 1209.8 L1910.8 1209.8 L1910.21 1209.8 L1909.63 1209.8 L1909.04 1209.8 L1908.45 1209.8 L1907.87 1209.8 L1907.28 1209.8 L1906.69 1209.8 L1906.11 1209.8 L1905.52 1209.8 L1904.93 1209.8 L1904.35 1209.8 L1903.76 1209.8 L1903.17 1209.8 L1902.59 1209.8 L1902 1209.8 L1901.42 1209.8 L1900.83 1209.8 L1900.24 1209.8 L1899.66 1209.8 L1899.07 1209.8 L1898.48 1209.8 L1897.9 1209.8 L1897.31 1209.8 L1896.72 1209.8 L1896.14 1209.8 L1895.55 1209.8 L1894.96 1209.8 L1894.38 1209.8 L1893.79 1209.8 L1893.21 1209.8 L1892.62 1209.8 L1892.03 1209.8 L1891.45 1209.8 L1890.86 1209.8 L1890.27 1209.8 L1889.69 1209.8 L1889.1 1209.8 L1888.51 1209.8 L1887.93 1209.8 L1887.34 1209.8 L1886.76 1209.8 L1886.17 1209.8 L1885.58 1209.8 L1885 1209.8 L1884.41 1209.8 L1883.82 1209.8 L1883.24 1209.8 L1882.65 1209.8 L1882.06 1209.8 L1881.48 1209.8 L1880.89 1209.8 L1880.3 1209.8 L1879.72 1209.8 L1879.13 1209.8 L1878.55 1209.8 L1877.96 1209.8 L1877.37 1209.8 L1876.79 1209.8 L1876.2 1209.8 L1875.61 1209.8 L1875.03 1209.8 L1874.44 1209.8 L1873.85 1209.8 L1873.27 1209.8 L1872.68 1209.8 L1872.09 1209.8 L1871.51 1209.8 L1870.92 1209.8 L1870.34 1209.8 L1869.75 1209.8 L1869.16 1209.8 L1868.58 1209.8 L1867.99 1209.8 L1867.4 1209.8 L1866.82 1209.8 L1866.23 1209.8 L1865.64 1209.8 L1865.06 1209.8 L1864.47 1209.8 L1863.88 1209.8 L1863.3 1209.8 L1862.71 1209.8 L1862.13 1209.8 L1861.54 1209.8 L1860.95 1209.8 L1860.37 1209.8 L1859.78 1209.8 L1859.19 1209.8 L1858.61 1209.8 L1858.02 1209.8 L1857.43 1209.8 L1856.85 1209.8 L1856.26 1209.8 L1855.68 1209.8 L1855.09 1209.8 L1854.5 1209.8 L1853.92 1209.8 L1853.33 1209.8 L1852.74 1209.8 L1852.16 1209.8 L1851.57 1209.8 L1850.98 1209.8 L1850.4 1209.8 L1849.81 1209.8 L1849.22 1209.8 L1848.64 1209.8 L1848.05 1209.8 L1847.47 1209.8 L1846.88 1209.8 L1846.29 1209.8 L1845.71 1209.8 L1845.12 1209.8 L1844.53 1209.8 L1843.95 1209.8 L1843.36 1209.8 L1842.77 1209.8 L1842.19 1209.8 L1841.6 1209.8 L1841.01 1209.8 L1840.43 1209.8 L1839.84 1209.8 L1839.26 1209.8 L1838.67 1209.8 L1838.08 1209.8 L1837.5 1209.8 L1836.91 1209.8 L1836.32 1209.8 L1835.74 1209.8 L1835.15 1209.8 L1834.56 1209.8 L1833.98 1209.8 L1833.39 1209.8 L1832.81 1209.8 L1832.22 1209.8 L1831.63 1209.8 L1831.05 1209.8 L1830.46 1209.8 L1829.87 1209.8 L1829.29 1209.8 L1828.7 1209.8 L1828.11 1209.8 L1827.53 1209.8 L1826.94 1209.8 L1826.35 1209.8 L1825.77 1209.8 L1825.18 1209.8 L1824.6 1209.8 L1824.01 1209.8 L1823.42 1209.8 L1822.84 1209.8 L1822.25 1209.8 L1821.66 1209.8 L1821.08 1209.8 L1820.49 1209.8 L1819.9 1209.8 L1819.32 1209.8 L1818.73 1209.8 L1818.14 1209.8 L1817.56 1209.8 L1816.97 1209.8 L1816.39 1209.8 L1815.8 1209.8 L1815.21 1209.8 L1814.63 1209.8 L1814.04 1209.8 L1813.45 1209.8 L1812.87 1209.8 L1812.28 1209.8 L1811.69 1209.8 L1811.11 1209.8 L1810.52 1209.8 L1809.94 1209.8 L1809.35 1209.8 L1808.76 1209.8 L1808.18 1209.8 L1807.59 1209.8 L1807 1209.8 L1806.42 1209.8 L1805.83 1209.8 L1805.24 1209.8 L1804.66 1209.8 L1804.07 1209.8 L1803.48 1209.8 L1802.9 1209.8 L1802.31 1209.8 L1801.73 1209.8 L1801.14 1209.8 L1800.55 1209.8 L1799.97 1209.8 L1799.38 1209.8 L1798.79 1209.8 L1798.21 1209.8 L1797.62 1209.8 L1797.03 1209.8 L1796.45 1209.8 L1795.86 1209.8 L1795.27 1209.8 L1794.69 1209.8 L1794.1 1209.8 L1793.52 1209.8 L1792.93 1209.8 L1792.34 1209.8 L1791.76 1209.8 L1791.17 1209.8 L1790.58 1209.8 L1790 1209.8 L1789.41 1209.8 L1788.82 1209.8 L1788.24 1209.8 L1787.65 1209.8 L1787.06 1209.8 L1786.48 1209.8 L1785.89 1209.8 L1785.31 1209.8 L1784.72 1209.8 L1784.13 1209.8 L1783.55 1209.8 L1782.96 1209.8 L1782.37 1209.8 L1781.79 1209.8 L1781.2 1209.8 L1780.61 1209.8 L1780.03 1209.8 L1779.44 1209.8 L1778.86 1209.8 L1778.27 1209.8 L1777.68 1209.8 L1777.1 1209.8 L1776.51 1209.8 L1775.92 1209.8 L1775.34 1209.8 L1774.75 1209.8 L1774.16 1209.8 L1773.58 1209.8 L1772.99 1209.8 L1772.4 1209.8 L1771.82 1209.8 L1771.23 1209.8 L1770.65 1209.8 L1770.06 1209.8 L1769.47 1209.8 L1768.89 1209.8 L1768.3 1209.8 L1767.71 1209.8 L1767.13 1209.8 L1766.54 1209.8 L1765.95 1209.8 L1765.37 1209.8 L1764.78 1209.8 L1764.19 1209.8 L1763.61 1209.8 L1763.02 1209.8 L1762.44 1209.8 L1761.85 1209.8 L1761.26 1209.8 L1760.68 1209.8 L1760.09 1209.8 L1759.5 1209.8 L1758.92 1209.8 L1758.33 1209.8 L1757.74 1209.8 L1757.16 1209.8 L1756.57 1209.8 L1755.99 1209.8 L1755.4 1209.8 L1754.81 1209.8 L1754.23 1209.8 L1753.64 1209.8 L1753.05 1209.8 L1752.47 1209.8 L1751.88 1209.8 L1751.29 1209.8 L1750.71 1209.8 L1750.12 1209.8 L1749.53 1209.8 L1748.95 1209.8 L1748.36 1209.8 L1747.78 1209.8 L1747.19 1209.8 L1746.6 1209.8 L1746.02 1209.8 L1745.43 1209.8 L1744.84 1209.8 L1744.26 1209.8 L1743.67 1209.8 L1743.08 1209.8 L1742.5 1209.8 L1741.91 1209.8 L1741.32 1209.8 L1740.74 1209.8 L1740.15 1209.8 L1739.57 1209.8 L1738.98 1209.8 L1738.39 1209.8 L1737.81 1209.8 L1737.22 1209.8 L1736.63 1209.8 L1736.05 1209.8 L1735.46 1209.8 L1734.87 1209.8 L1734.29 1209.8 L1733.7 1209.8 L1733.11 1209.8 L1732.53 1209.8 L1731.94 1209.8 L1731.36 1209.8 L1730.77 1209.8 L1730.18 1209.8 L1729.6 1209.8 L1729.01 1209.8 L1728.42 1209.8 L1727.84 1209.8 L1727.25 1209.8 L1726.66 1209.8 L1726.08 1209.8 L1725.49 1209.8 L1724.91 1209.8 L1724.32 1209.8 L1723.73 1209.8 L1723.15 1209.8 L1722.56 1209.8 L1721.97 1209.8 L1721.39 1209.8 L1720.8 1209.8 L1720.21 1209.8 L1719.63 1209.8 L1719.04 1209.8 L1718.45 1209.8 L1717.87 1209.8 L1717.28 1209.8 L1716.7 1209.8 L1716.11 1209.8 L1715.52 1209.8 L1714.94 1209.8 L1714.35 1209.8 L1713.76 1209.8 L1713.18 1209.8 L1712.59 1209.8 L1712 1209.8 L1711.42 1209.8 L1710.83 1209.8 L1710.24 1209.8 L1709.66 1209.8 L1709.07 1209.8 L1708.49 1209.8 L1707.9 1209.8 L1707.31 1209.8 L1706.73 1209.8 L1706.14 1209.8 L1705.55 1209.8 L1704.97 1209.8 L1704.38 1209.8 L1703.79 1209.8 L1703.21 1209.8 L1702.62 1209.8 L1702.04 1209.8 L1701.45 1209.8 L1700.86 1209.8 L1700.28 1209.8 L1699.69 1209.8 L1699.1 1209.8 L1698.52 1209.8 L1697.93 1209.8 L1697.34 1209.8 L1696.76 1209.8 L1696.17 1209.8 L1695.58 1209.8 L1695 1209.8 L1694.41 1209.8 L1693.83 1209.8 L1693.24 1209.8 L1692.65 1209.8 L1692.07 1209.8 L1691.48 1209.8 L1690.89 1209.8 L1690.31 1209.8 L1689.72 1209.8 L1689.13 1209.8 L1688.55 1209.8 L1687.96 1209.8 L1687.37 1209.8 L1686.79 1209.8 L1686.2 1209.8 L1685.62 1209.8 L1685.03 1209.8 L1684.44 1209.8 L1683.86 1209.8 L1683.27 1209.8 L1682.68 1209.8 L1682.1 1209.8 L1681.51 1209.8 L1680.92 1209.8 L1680.34 1209.8 L1679.75 1209.8 L1679.17 1209.8 L1678.58 1209.8 L1677.99 1209.8 L1677.41 1209.8 L1676.82 1209.8 L1676.23 1209.8 L1675.65 1209.8 L1675.06 1209.8 L1674.47 1209.8 L1673.89 1209.8 L1673.3 1209.8 L1672.71 1209.8 L1672.13 1209.8 L1671.54 1209.8 L1670.96 1209.8 L1670.37 1209.8 L1669.78 1209.8 L1669.2 1209.8 L1668.61 1209.8 L1668.02 1209.8 L1667.44 1209.8 L1666.85 1209.8 L1666.26 1209.8 L1665.68 1209.8 L1665.09 1209.8 L1664.5 1209.8 L1663.92 1209.8 L1663.33 1209.8 L1662.75 1209.8 L1662.16 1209.8 L1661.57 1209.8 L1660.99 1209.8 L1660.4 1209.8 L1659.81 1209.8 L1659.23 1209.8 L1658.64 1209.8 L1658.05 1209.8 L1657.47 1209.8 L1656.88 1209.8 L1656.29 1209.8 L1655.71 1209.8 L1655.12 1209.8 L1654.54 1209.8 L1653.95 1209.8 L1653.36 1209.8 L1652.78 1209.8 L1652.19 1209.8 L1651.6 1209.8 L1651.02 1209.8 L1650.43 1209.8 L1649.84 1209.8 L1649.26 1209.8 L1648.67 1209.8 L1648.09 1209.8 L1647.5 1209.8 L1646.91 1209.8 L1646.33 1209.8 L1645.74 1209.8 L1645.15 1209.8 L1644.57 1209.8 L1643.98 1209.8 L1643.39 1209.8 L1642.81 1209.8 L1642.22 1209.8 L1641.63 1209.8 L1641.05 1209.8 L1640.46 1209.8 L1639.88 1209.8 L1639.29 1209.8 L1638.7 1209.8 L1638.12 1209.8 L1637.53 1209.8 L1636.94 1209.8 L1636.36 1209.8 L1635.77 1209.8 L1635.18 1209.8 L1634.6 1209.8 L1634.01 1209.8 L1633.42 1209.8 L1632.84 1209.8 L1632.25 1209.8 L1631.67 1209.8 L1631.08 1209.8 L1630.49 1209.8 L1629.91 1209.8 L1629.32 1209.8 L1628.73 1209.8 L1628.15 1209.8 L1627.56 1209.8 L1626.97 1209.8 L1626.39 1209.8 L1625.8 1209.8 L1625.22 1209.8 L1624.63 1209.8 L1624.04 1209.8 L1623.46 1209.8 L1622.87 1209.8 L1622.28 1209.8 L1621.7 1209.8 L1621.11 1209.8 L1620.52 1209.8 L1619.94 1209.8 L1619.35 1209.8 L1618.76 1209.8 L1618.18 1209.8 L1617.59 1209.8 L1617.01 1209.8 L1616.42 1209.8 L1615.83 1209.8 L1615.25 1209.8 L1614.66 1209.8 L1614.07 1209.8 L1613.49 1209.8 L1612.9 1209.8 L1612.31 1209.8 L1611.73 1209.8 L1611.14 1209.8 L1610.55 1209.8 L1609.97 1209.8 L1609.38 1209.8 L1608.8 1209.8 L1608.21 1209.8 L1607.62 1209.8 L1607.04 1209.8 L1606.45 1209.8 L1605.86 1209.8 L1605.28 1209.8 L1604.69 1209.8 L1604.1 1209.8 L1603.52 1209.8 L1602.93 1209.8 L1602.34 1209.8 L1601.76 1209.8 L1601.17 1209.8 L1600.59 1209.8 L1600 1209.8 L1599.41 1209.8 L1598.83 1209.8 L1598.24 1209.8 L1597.65 1209.8 L1597.07 1209.8 L1596.48 1209.8 L1595.89 1209.8 L1595.31 1209.8 L1594.72 1209.8 L1594.14 1209.8 L1593.55 1209.8 L1592.96 1209.8 L1592.38 1209.8 L1591.79 1209.8 L1591.2 1209.8 L1590.62 1209.8 L1590.03 1209.8 L1589.44 1209.8 L1588.86 1209.8 L1588.27 1209.8 L1587.68 1209.8 L1587.1 1209.8 L1586.51 1209.8 L1585.93 1209.8 L1585.34 1209.8 L1584.75 1209.8 L1584.17 1209.8 L1583.58 1209.8 L1582.99 1209.8 L1582.41 1209.8 L1581.82 1209.8 L1581.23 1209.8 L1580.65 1209.8 L1580.06 1209.8 L1579.47 1209.8 L1578.89 1209.8 L1578.3 1209.8 L1577.72 1209.8 L1577.13 1209.8 L1576.54 1209.8 L1575.96 1209.8 L1575.37 1209.8 L1574.78 1209.8 L1574.2 1209.8 L1573.61 1209.8 L1573.02 1209.8 L1572.44 1209.8 L1571.85 1209.8 L1571.27 1209.8 L1570.68 1209.8 L1570.09 1209.8 L1569.51 1209.8 L1568.92 1209.8 L1568.33 1209.8 L1567.75 1209.8 L1567.16 1209.8 L1566.57 1209.8 L1565.99 1209.8 L1565.4 1209.8 L1564.81 1209.8 L1564.23 1209.8 L1563.64 1209.8 L1563.06 1209.8 L1562.47 1209.8 L1561.88 1209.8 L1561.3 1209.8 L1560.71 1209.8 L1560.12 1209.8 L1559.54 1209.8 L1558.95 1209.8 L1558.36 1209.8 L1557.78 1209.8 L1557.19 1209.8 L1556.6 1209.8 L1556.02 1209.8 L1555.43 1209.8 L1554.85 1209.8 L1554.26 1209.8 L1553.67 1209.8 L1553.09 1209.8 L1552.5 1209.8 L1551.91 1209.8 L1551.33 1209.8 L1550.74 1209.8 L1550.15 1209.8 L1549.57 1209.8 L1548.98 1209.8 L1548.4 1209.8 L1547.81 1209.8 L1547.22 1209.8 L1546.64 1209.8 L1546.05 1209.8 L1545.46 1209.8 L1544.88 1209.8 L1544.29 1209.8 L1543.7 1209.8 L1543.12 1209.8 L1542.53 1209.8 L1541.94 1209.8 L1541.36 1209.8 L1540.77 1209.8 L1540.19 1209.8 L1539.6 1209.8 L1539.01 1209.8 L1538.43 1209.8 L1537.84 1209.8 L1537.25 1209.8 L1536.67 1209.8 L1536.08 1209.8 L1535.49 1209.8 L1534.91 1209.8 L1534.32 1209.8 L1533.73 1209.8 L1533.15 1209.8 L1532.56 1209.8 L1531.98 1209.8 L1531.39 1209.8 L1530.8 1209.8 L1530.22 1209.8 L1529.63 1209.8 L1529.04 1209.8 L1528.46 1209.8 L1527.87 1209.8 L1527.28 1209.8 L1526.7 1209.8 L1526.11 1209.8 L1525.52 1209.8 L1524.94 1209.8 L1524.35 1209.8 L1523.77 1209.8 L1523.18 1209.8 L1522.59 1209.8 L1522.01 1209.8 L1521.42 1209.8 L1520.83 1209.8 L1520.25 1209.8 L1519.66 1209.8 L1519.07 1209.8 L1518.49 1209.8 L1517.9 1209.8 L1517.32 1209.8 L1516.73 1209.8 L1516.14 1209.8 L1515.56 1209.8 L1514.97 1209.8 L1514.38 1209.8 L1513.8 1209.8 L1513.21 1209.8 L1512.62 1209.8 L1512.04 1209.8 L1511.45 1209.8 L1510.86 1209.8 L1510.28 1209.8 L1509.69 1209.8 L1509.11 1209.8 L1508.52 1209.8 L1507.93 1209.8 L1507.35 1209.8 L1506.76 1209.8 L1506.17 1209.8 L1505.59 1209.8 L1505 1209.8 L1504.41 1209.8 L1503.83 1209.8 L1503.24 1209.8 L1502.65 1209.8 L1502.07 1209.8 L1501.48 1209.8 L1500.9 1209.8 L1500.31 1209.8 L1499.72 1209.8 L1499.14 1209.8 L1498.55 1209.8 L1497.96 1209.8 L1497.38 1209.8 L1496.79 1209.8 L1496.2 1209.8 L1495.62 1209.8 L1495.03 1209.8 L1494.45 1209.8 L1493.86 1209.8 L1493.27 1209.8 L1492.69 1209.8 L1492.1 1209.8 L1491.51 1209.8 L1490.93 1209.8 L1490.34 1209.8 L1489.75 1209.8 L1489.17 1209.8 L1488.58 1209.8 L1487.99 1209.8 L1487.41 1209.8 L1486.82 1209.8 L1486.24 1209.8 L1485.65 1209.8 L1485.06 1209.8 L1484.48 1209.8 L1483.89 1209.8 L1483.3 1209.8 L1482.72 1209.8 L1482.13 1209.8 L1481.54 1209.8 L1480.96 1209.8 L1480.37 1209.8 L1479.78 1209.8 L1479.2 1209.8 L1478.61 1209.8 L1478.03 1209.8 L1477.44 1209.8 L1476.85 1209.8 L1476.27 1209.8 L1475.68 1209.8 L1475.09 1209.8 L1474.51 1209.8 L1473.92 1209.8 L1473.33 1209.8 L1472.75 1209.8 L1472.16 1209.8 L1471.57 1209.8 L1470.99 1209.8 L1470.4 1209.8 L1469.82 1209.8 L1469.23 1209.8 L1468.64 1209.8 L1468.06 1209.8 L1467.47 1209.8 L1466.88 1209.8 L1466.3 1209.8 L1465.71 1209.8 L1465.12 1209.8 L1464.54 1209.8 L1463.95 1209.8 L1463.37 1209.8 L1462.78 1209.8 L1462.19 1209.8 L1461.61 1209.8 L1461.02 1209.8 L1460.43 1209.8 L1459.85 1209.8 L1459.26 1209.8 L1458.67 1209.8 L1458.09 1209.8 L1457.5 1209.8 L1456.91 1209.8 L1456.33 1209.8 L1455.74 1209.8 L1455.16 1209.8 L1454.57 1209.8 L1453.98 1209.8 L1453.4 1209.8 L1452.81 1209.8 L1452.22 1209.8 L1451.64 1209.8 L1451.05 1209.8 L1450.46 1209.8 L1449.88 1209.8 L1449.29 1209.8 L1448.7 1209.8 L1448.12 1209.8 L1447.53 1209.8 L1446.95 1209.8 L1446.36 1209.8 L1445.77 1209.8 L1445.19 1209.8 L1444.6 1209.8 L1444.01 1209.8 L1443.43 1209.8 L1442.84 1209.8 L1442.25 1209.8 L1441.67 1209.8 L1441.08 1209.8 L1440.5 1209.8 L1439.91 1209.8 L1439.32 1209.8 L1438.74 1209.8 L1438.15 1209.8 L1437.56 1209.8 L1436.98 1209.8 L1436.39 1209.8 L1435.8 1209.8 L1435.22 1209.8 L1434.63 1209.8 L1434.04 1209.8 L1433.46 1209.8 L1432.87 1209.8 L1432.29 1209.8 L1431.7 1209.8 L1431.11 1209.8 L1430.53 1209.8 L1429.94 1209.8 L1429.35 1209.8 L1428.77 1209.8 L1428.18 1209.8 L1427.59 1209.8 L1427.01 1209.8 L1426.42 1209.8 L1425.83 1209.8 L1425.25 1209.8 L1424.66 1209.8 L1424.08 1209.8 L1423.49 1209.8 L1422.9 1209.8 L1422.32 1209.8 L1421.73 1209.8 L1421.14 1209.8 L1420.56 1209.8 L1419.97 1209.8 L1419.38 1209.8 L1418.8 1209.8 L1418.21 1209.8 L1417.63 1209.8 L1417.04 1209.8 L1416.45 1209.8 L1415.87 1209.8 L1415.28 1209.8 L1414.69 1209.8 L1414.11 1209.8 L1413.52 1209.8 L1412.93 1209.8 L1412.35 1209.8 L1411.76 1209.8 L1411.17 1209.8 L1410.59 1209.8 L1410 1209.8 L1409.42 1209.8 L1408.83 1209.8 L1408.24 1209.8 L1407.66 1209.8 L1407.07 1209.8 L1406.48 1209.8 L1405.9 1209.8 L1405.31 1209.8 L1404.72 1209.8 L1404.14 1209.8 L1403.55 1209.8 L1402.96 1209.8 L1402.38 1209.8 L1401.79 1209.8 L1401.21 1209.8 L1400.62 1209.8 L1400.03 1209.8 L1399.45 1209.8 L1398.86 1209.8 L1398.27 1209.8 L1397.69 1209.8 L1397.1 1209.8 L1396.51 1209.8 L1395.93 1209.8 L1395.34 1209.8 L1394.75 1209.8 L1394.17 1209.8 L1393.58 1209.8 L1393 1209.8 L1392.41 1209.8 L1391.82 1209.8 L1391.24 1209.8 L1390.65 1209.8 L1390.06 1209.8 L1389.48 1209.8 L1388.89 1209.8 L1388.3 1209.8 L1387.72 1209.8 L1387.13 1209.8 L1386.55 1209.8 L1385.96 1209.8 L1385.37 1209.8 L1384.79 1209.8 L1384.2 1209.8 L1383.61 1209.8 L1383.03 1209.8 L1382.44 1209.8 L1381.85 1209.8 L1381.27 1209.8 L1380.68 1209.8 L1380.09 1209.8 L1379.51 1209.8 L1378.92 1209.8 L1378.34 1209.8 L1377.75 1209.8 L1377.16 1209.8 L1376.58 1209.8 L1375.99 1209.8 L1375.4 1209.8 L1374.82 1209.8 L1374.23 1209.8 L1373.64 1209.8 L1373.06 1209.8 L1372.47 1209.8 L1371.88 1209.8 L1371.3 1209.8 L1370.71 1209.8 L1370.13 1209.8 L1369.54 1209.8 L1368.95 1209.8 L1368.37 1209.8 L1367.78 1209.8 L1367.19 1209.8 L1366.61 1209.8 L1366.02 1209.8 L1365.43 1209.8 L1364.85 1209.8 L1364.26 1209.8 L1363.68 1209.8 L1363.09 1209.8 L1362.5 1209.8 L1361.92 1209.8 L1361.33 1209.8 L1360.74 1209.8 L1360.16 1209.8 L1359.57 1209.8 L1358.98 1209.8 L1358.4 1209.8 L1357.81 1209.8 L1357.22 1209.8 L1356.64 1209.8 L1356.05 1209.8 L1355.47 1209.8 L1354.88 1209.8 L1354.29 1209.8 L1353.71 1209.8 L1353.12 1209.8 L1352.53 1209.8 L1351.95 1209.8 L1351.36 1209.8 L1350.77 1209.8 L1350.19 1209.8 L1349.6 1209.8 L1349.01 1209.8 L1348.43 1209.8 L1347.84 1209.8 L1347.26 1209.8 L1346.67 1209.8 L1346.08 1209.8 L1345.5 1209.8 L1344.91 1209.8 L1344.32 1209.8 L1343.74 1209.8 L1343.15 1209.8 L1342.56 1209.8 L1341.98 1209.8 L1341.39 1209.8 L1340.8 1209.8 L1340.22 1209.8 L1339.63 1209.8 L1339.05 1209.8 L1338.46 1209.8 L1337.87 1209.8 L1337.29 1209.8 L1336.7 1209.8 L1336.11 1209.8 L1335.53 1209.8 L1334.94 1209.8 L1334.35 1209.8 L1333.77 1209.8 L1333.18 1209.8 L1332.6 1209.8 L1332.01 1209.8 L1331.42 1209.8 L1330.84 1209.8 L1330.25 1209.8 L1329.66 1209.8 L1329.08 1209.8 L1328.49 1209.8 L1327.9 1209.8 L1327.32 1209.8 L1326.73 1209.8 L1326.14 1209.8 L1325.56 1209.8 L1324.97 1209.8 L1324.39 1209.8 L1323.8 1209.8 L1323.21 1209.8 L1322.63 1209.8 L1322.04 1209.8 L1321.45 1209.8 L1320.87 1209.8 L1320.28 1209.8 L1319.69 1209.8 L1319.11 1209.8 L1318.52 1209.8 L1317.93 1209.8 L1317.35 1209.8 L1316.76 1209.8 L1316.18 1209.8 L1315.59 1209.8 L1315 1209.8 L1314.42 1209.8 L1313.83 1209.8 L1313.24 1209.8 L1312.66 1209.8 L1312.07 1209.8 L1311.48 1209.8 L1310.9 1209.8 L1310.31 1209.8 L1309.73 1209.8 L1309.14 1209.8 L1308.55 1209.8 L1307.97 1209.8 L1307.38 1209.8 L1306.79 1209.8 L1306.21 1209.8 L1305.62 1209.8 L1305.03 1209.8 L1304.45 1209.8 L1303.86 1209.8 L1303.27 1209.8 L1302.69 1209.8 L1302.1 1209.8 L1301.52 1209.8 L1300.93 1209.8 L1300.34 1209.8 L1299.76 1209.8 L1299.17 1209.8 L1298.58 1209.8 L1298 1209.8 L1297.41 1209.8 L1296.82 1209.8 L1296.24 1209.8 L1295.65 1209.8 L1295.06 1209.8 L1294.48 1209.8 L1293.89 1209.8 L1293.31 1209.8 L1292.72 1209.8 L1292.13 1209.8 L1291.55 1209.8 L1290.96 1209.8 L1290.37 1209.8 L1289.79 1209.8 L1289.2 1209.8 L1288.61 1209.8 L1288.03 1209.8 L1287.44 1209.8 L1286.86 1209.8 L1286.27 1209.8 L1285.68 1209.8 L1285.1 1209.8 L1284.51 1209.8 L1283.92 1209.8 L1283.34 1209.8 L1282.75 1209.8 L1282.16 1209.8 L1281.58 1209.8 L1280.99 1209.8 L1280.4 1209.8 L1279.82 1209.8 L1279.23 1209.8 L1278.65 1209.8 L1278.06 1209.8 L1277.47 1209.8 L1276.89 1209.8 L1276.3 1209.8 L1275.71 1209.8 L1275.13 1209.8 L1274.54 1209.8 L1273.95 1209.8 L1273.37 1209.8 L1272.78 1209.8 L1272.19 1209.8 L1271.61 1209.8 L1271.02 1209.8 L1270.44 1209.8 L1269.85 1209.8 L1269.26 1209.8 L1268.68 1209.8 L1268.09 1209.8 L1267.5 1209.8 L1266.92 1209.8 L1266.33 1209.8 L1265.74 1209.8 L1265.16 1209.8 L1264.57 1209.8 L1263.98 1209.8 L1263.4 1209.8 L1262.81 1209.8 L1262.23 1209.8 L1261.64 1209.8 L1261.05 1209.8 L1260.47 1209.8 L1259.88 1209.8 L1259.29 1209.8 L1258.71 1209.8 L1258.12 1209.8 L1257.53 1209.8 L1256.95 1209.8 L1256.36 1209.8 L1255.78 1209.8 L1255.19 1209.8 L1254.6 1209.8 L1254.02 1209.8 L1253.43 1209.8 L1252.84 1209.8 L1252.26 1209.8 L1251.67 1209.8 L1251.08 1209.8 L1250.5 1209.8 L1249.91 1209.8 L1249.32 1209.8 L1248.74 1209.8 L1248.15 1209.8 L1247.57 1209.8 L1246.98 1209.8 L1246.39 1209.8 L1245.81 1209.8 L1245.22 1209.8 L1244.63 1209.8 L1244.05 1209.8 L1243.46 1209.8 L1242.87 1209.8 L1242.29 1209.8 L1241.7 1209.8 L1241.11 1209.8 L1240.53 1209.8 L1239.94 1209.8 L1239.36 1209.8 L1238.77 1209.8 L1238.18 1209.8 L1237.6 1209.8 L1237.01 1209.8 L1236.42 1209.8 L1235.84 1209.8 L1235.25 1209.8 L1234.66 1209.8 L1234.08 1209.8 L1233.49 1209.8 L1232.91 1209.8 L1232.32 1209.8 L1231.73 1209.8 L1231.15 1209.8 L1230.56 1209.8 L1229.97 1209.8 L1229.39 1209.8 L1228.8 1209.8 L1228.21 1209.8 L1227.63 1209.8 L1227.04 1209.8 L1226.45 1209.8 L1225.87 1209.8 L1225.28 1209.8 L1224.7 1209.8 L1224.11 1209.8 L1223.52 1209.8 L1222.94 1209.8 L1222.35 1209.8 L1221.76 1209.8 L1221.18 1209.8 L1220.59 1209.8 L1220 1209.8 L1219.42 1209.8 L1218.83 1209.8 L1218.24 1209.8 L1217.66 1209.8 L1217.07 1209.8 L1216.49 1209.8 L1215.9 1209.8 L1215.31 1209.8 L1214.73 1209.8 L1214.14 1209.8 L1213.55 1209.8 L1212.97 1209.8 L1212.38 1209.8 L1211.79 1209.8 L1211.21 1209.8 L1210.62 1209.8 L1210.03 1209.8 L1209.45 1209.8 L1208.86 1209.8 L1208.28 1209.8 L1207.69 1209.8 L1207.1 1209.8 L1206.52 1209.8 L1205.93 1209.8 L1205.34 1209.8 L1204.76 1209.8 L1204.17 1209.8 L1203.58 1209.8 L1203 1209.8 L1202.41 1209.8 L1201.83 1209.8 L1201.24 1209.8 L1200.65 1209.8 L1200.07 1209.8 L1199.48 1209.8 L1198.89 1209.8 L1198.31 1209.8 L1197.72 1209.8 L1197.13 1209.8 L1196.55 1209.8 L1195.96 1209.8 L1195.37 1209.8 L1194.79 1209.8 L1194.2 1209.8 L1193.62 1209.8 L1193.03 1209.8 L1192.44 1209.8 L1191.86 1209.8 L1191.27 1209.8 L1190.68 1209.8 L1190.1 1209.8 L1189.51 1209.8 L1188.92 1209.8 L1188.34 1209.8 L1187.75 1209.8 L1187.16 1209.8 L1186.58 1209.8 L1185.99 1209.8 L1185.41 1209.8 L1184.82 1209.8 L1184.23 1209.8 L1183.65 1209.8 L1183.06 1209.8 L1182.47 1209.8 L1181.89 1209.8 L1181.3 1209.8 L1180.71 1209.8 L1180.13 1209.8 L1179.54 1209.8 L1178.96 1209.8 L1178.37 1209.8 L1177.78 1209.8 L1177.2 1209.8 L1176.61 1209.8 L1176.02 1209.8 L1175.44 1209.8 L1174.85 1209.8 L1174.26 1209.8 L1173.68 1209.8 L1173.09 1209.8 L1172.5 1209.8 L1171.92 1209.8 L1171.33 1209.8 L1170.75 1209.8 L1170.16 1209.8 L1169.57 1209.8 L1168.99 1209.8 L1168.4 1209.8 L1167.81 1209.8 L1167.23 1209.8 L1166.64 1209.8 L1166.05 1209.8 L1165.47 1209.8 L1164.88 1209.8 L1164.29 1209.8 L1163.71 1209.8 L1163.12 1209.8 L1162.54 1209.8 L1161.95 1209.8 L1161.36 1209.8 L1160.78 1209.8 L1160.19 1209.8 L1159.6 1209.8 L1159.02 1209.8 L1158.43 1209.8 L1157.84 1209.8 L1157.26 1209.8 L1156.67 1209.8 L1156.09 1209.8 L1155.5 1209.8 L1154.91 1209.8 L1154.33 1209.8 L1153.74 1209.8 L1153.15 1209.8 L1152.57 1209.8 L1151.98 1209.8 L1151.39 1209.8 L1150.81 1209.8 L1150.22 1209.8 L1149.63 1209.8 L1149.05 1209.8 L1148.46 1209.8 L1147.88 1209.8 L1147.29 1209.8 L1146.7 1209.8 L1146.12 1209.8 L1145.53 1209.8 L1144.94 1209.8 L1144.36 1209.8 L1143.77 1209.8 L1143.18 1209.8 L1142.6 1209.8 L1142.01 1209.8 L1141.42 1209.8 L1140.84 1209.8 L1140.25 1209.8 L1139.67 1209.8 L1139.08 1209.8 L1138.49 1209.8 L1137.91 1209.8 L1137.32 1209.8 L1136.73 1209.8 L1136.15 1209.8 L1135.56 1209.8 L1134.97 1209.8 L1134.39 1209.8 L1133.8 1209.8 L1133.21 1209.8 L1132.63 1209.8 L1132.04 1209.8 L1131.46 1209.8 L1130.87 1209.8 L1130.28 1209.8 L1129.7 1209.8 L1129.11 1209.8 L1128.52 1209.8 L1127.94 1209.8 L1127.35 1209.8 L1126.76 1209.8 L1126.18 1209.8 L1125.59 1209.8 L1125.01 1209.8 L1124.42 1209.8 L1123.83 1209.8 L1123.25 1209.8 L1122.66 1209.8 L1122.07 1209.8 L1121.49 1209.8 L1120.9 1209.8 L1120.31 1209.8 L1119.73 1209.8 L1119.14 1209.8 L1118.55 1209.8 L1117.97 1209.8 L1117.38 1209.8 L1116.8 1209.8 L1116.21 1209.8 L1115.62 1209.8 L1115.04 1209.8 L1114.45 1209.8 L1113.86 1209.8 L1113.28 1209.8 L1112.69 1209.8 L1112.1 1209.8 L1111.52 1209.8 L1110.93 1209.8 L1110.34 1209.8 L1109.76 1209.8 L1109.17 1209.8 L1108.59 1209.8 L1108 1209.8 L1107.41 1209.8 L1106.83 1209.8 L1106.24 1209.8 L1105.65 1209.8 L1105.07 1209.8 L1104.48 1209.8 L1103.89 1209.8 L1103.31 1209.8 L1102.72 1209.8 L1102.14 1209.8 L1101.55 1209.8 L1100.96 1209.8 L1100.38 1209.8 L1099.79 1209.8 L1099.2 1209.8 L1098.62 1209.8 L1098.03 1209.8 L1097.44 1209.8 L1096.86 1209.8 L1096.27 1209.8 L1095.68 1209.8 L1095.1 1209.8 L1094.51 1209.8 L1093.93 1209.8 L1093.34 1209.8 L1092.75 1209.8 L1092.17 1209.8 L1091.58 1209.8 L1090.99 1209.8 L1090.41 1209.8 L1089.82 1209.8 L1089.23 1209.8 L1088.65 1209.8 L1088.06 1209.8 L1087.47 1209.8 L1086.89 1209.8 L1086.3 1209.8 L1085.72 1209.8 L1085.13 1209.8 L1084.54 1209.8 L1083.96 1209.8 L1083.37 1209.8 L1082.78 1209.8 L1082.2 1209.8 L1081.61 1209.8 L1081.02 1209.8 L1080.44 1209.8 L1079.85 1209.8 L1079.26 1209.8 L1078.68 1209.8 L1078.09 1209.8 L1077.51 1209.8 L1076.92 1209.8 L1076.33 1209.8 L1075.75 1209.8 L1075.16 1209.8 L1074.57 1209.8 L1073.99 1209.8 L1073.4 1209.8 L1072.81 1209.8 L1072.23 1209.8 L1071.64 1209.8 L1071.06 1209.8 L1070.47 1209.8 L1069.88 1209.8 L1069.3 1209.8 L1068.71 1209.8 L1068.12 1209.8 L1067.54 1209.8 L1066.95 1209.8 L1066.36 1209.8 L1065.78 1209.8 L1065.19 1209.8 L1064.6 1209.8 L1064.02 1209.8 L1063.43 1209.8 L1062.85 1209.8 L1062.26 1209.8 L1061.67 1209.8 L1061.09 1209.8 L1060.5 1209.8 L1059.91 1209.8 L1059.33 1209.8 L1058.74 1209.8 L1058.15 1209.8 L1057.57 1209.8 L1056.98 1209.8 L1056.39 1209.8 L1055.81 1209.8 L1055.22 1209.8 L1054.64 1209.8 L1054.05 1209.8 L1053.46 1209.8 L1052.88 1209.8 L1052.29 1209.8 L1051.7 1209.8 L1051.12 1209.8 L1050.53 1209.8 L1049.94 1209.8 L1049.36 1209.8 L1048.77 1209.8 L1048.19 1209.8 L1047.6 1209.8 L1047.01 1209.8 L1046.43 1209.8 L1045.84 1209.8 L1045.25 1209.8 L1044.67 1209.8 L1044.08 1209.8 L1043.49 1209.8 L1042.91 1209.8 L1042.32 1209.8 L1041.73 1209.8 L1041.15 1209.8 L1040.56 1209.8 L1039.98 1209.8 L1039.39 1209.8 L1038.8 1209.8 L1038.22 1209.8 L1037.63 1209.8 L1037.04 1209.8 L1036.46 1209.8 L1035.87 1209.8 L1035.28 1209.8 L1034.7 1209.8 L1034.11 1209.8 L1033.52 1209.8 L1032.94 1209.8 L1032.35 1209.8 L1031.77 1209.8 L1031.18 1209.8 L1030.59 1209.8 L1030.01 1209.8 L1029.42 1209.8 L1028.83 1209.8 L1028.25 1209.8 L1027.66 1209.8 L1027.07 1209.8 L1026.49 1209.8 L1025.9 1209.8 L1025.32 1209.8 L1024.73 1209.8 L1024.14 1209.8 L1023.56 1209.8 L1022.97 1209.8 L1022.38 1209.8 L1021.8 1209.8 L1021.21 1209.8 L1020.62 1209.8 L1020.04 1209.8 L1019.45 1209.8 L1018.86 1209.8 L1018.28 1209.8 L1017.69 1209.8 L1017.11 1209.8 L1016.52 1209.8 L1015.93 1209.8 L1015.35 1209.8 L1014.76 1209.8 L1014.17 1209.8 L1013.59 1209.8 L1013 1209.8 L1012.41 1209.8 L1011.83 1209.8 L1011.24 1209.8 L1010.65 1209.8 L1010.07 1209.8 L1009.48 1209.8 L1008.9 1209.8 L1008.31 1209.8 L1007.72 1209.8 L1007.14 1209.8 L1006.55 1209.8 L1005.96 1209.8 L1005.38 1209.8 L1004.79 1209.8 L1004.2 1209.8 L1003.62 1209.8 L1003.03 1209.8 L1002.44 1209.8 L1001.86 1209.8 L1001.27 1209.8 L1000.69 1209.8 L1000.1 1209.8 L999.513 1209.8 L998.926 1209.8 L998.34 1209.8 L997.754 1209.8 L997.167 1209.8 L996.581 1209.8 L995.994 1209.8 L995.408 1209.8 L994.822 1209.8 L994.235 1209.8 L993.649 1209.8 L993.062 1209.8 L992.476 1209.8 L991.889 1209.8 L991.303 1209.8 L990.717 1209.8 L990.13 1209.8 L989.544 1209.8 L988.957 1209.8 L988.371 1209.8 L987.785 1209.8 L987.198 1209.8 L986.612 1209.8 L986.025 1209.8  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1210.16 986.612,1210.16 987.198,1210.16 987.785,1210.16 988.371,1210.16 988.957,1210.16 989.544,1210.16 990.13,1210.16 990.717,1210.16 991.303,1210.16 991.889,1210.16 992.476,1210.16 993.062,1210.16 993.649,1210.16 994.235,1210.16 994.822,1210.16 995.408,1210.16 995.994,1210.16 996.581,1210.16 997.167,1210.16 997.754,1210.16 998.34,1210.16 998.926,1210.16 999.513,1210.16 1000.1,1210.16 1000.69,1210.16 1001.27,1210.16 1001.86,1210.16 1002.44,1210.16 1003.03,1210.16 1003.62,1210.16 1004.2,1210.16 1004.79,1210.16 1005.38,1210.16 1005.96,1210.16 1006.55,1210.16 1007.14,1210.16 1007.72,1210.16 1008.31,1210.16 1008.9,1210.16 1009.48,1210.16 1010.07,1210.16 1010.65,1210.16 1011.24,1210.16 1011.83,1210.16 1012.41,1210.16 1013,1210.16 1013.59,1210.16 1014.17,1210.16 1014.76,1210.16 1015.35,1210.16 1015.93,1210.16 1016.52,1210.16 1017.11,1210.16 1017.69,1210.16 1018.28,1210.16 1018.86,1210.16 1019.45,1210.16 1020.04,1210.16 1020.62,1210.16 1021.21,1210.16 1021.8,1210.16 1022.38,1210.16 1022.97,1210.16 1023.56,1210.16 1024.14,1210.16 1024.73,1210.16 1025.32,1210.16 1025.9,1210.16 1026.49,1210.16 1027.07,1210.16 1027.66,1210.16 1028.25,1210.16 1028.83,1210.16 1029.42,1210.16 1030.01,1210.16 1030.59,1210.16 1031.18,1210.16 1031.77,1210.16 1032.35,1210.16 1032.94,1210.16 1033.52,1210.16 1034.11,1210.16 1034.7,1210.16 1035.28,1210.16 1035.87,1210.16 1036.46,1210.16 1037.04,1210.16 1037.63,1210.16 1038.22,1210.16 1038.8,1210.16 1039.39,1210.16 1039.98,1210.16 1040.56,1210.16 1041.15,1210.16 1041.73,1210.16 1042.32,1210.16 1042.91,1210.16 1043.49,1210.16 1044.08,1210.16 1044.67,1210.16 1045.25,1210.16 1045.84,1210.16 1046.43,1210.16 1047.01,1210.16 1047.6,1210.16 1048.19,1210.16 1048.77,1210.16 1049.36,1210.16 1049.94,1210.16 1050.53,1210.16 1051.12,1210.16 1051.7,1210.16 1052.29,1210.16 1052.88,1210.16 1053.46,1210.16 1054.05,1210.16 1054.64,1210.16 1055.22,1210.16 1055.81,1210.16 1056.39,1210.16 1056.98,1210.16 1057.57,1210.16 1058.15,1210.16 1058.74,1210.16 1059.33,1210.16 1059.91,1210.16 1060.5,1210.16 1061.09,1210.16 1061.67,1210.16 1062.26,1210.16 1062.85,1210.16 1063.43,1210.16 1064.02,1210.16 1064.6,1210.16 1065.19,1210.16 1065.78,1210.16 1066.36,1210.16 1066.95,1210.16 1067.54,1210.16 1068.12,1210.16 1068.71,1210.16 1069.3,1210.16 1069.88,1210.16 1070.47,1210.16 1071.06,1210.16 1071.64,1210.16 1072.23,1210.16 1072.81,1210.16 1073.4,1210.16 1073.99,1210.16 1074.57,1210.16 1075.16,1210.16 1075.75,1210.16 1076.33,1210.16 1076.92,1210.16 1077.51,1210.16 1078.09,1210.16 1078.68,1210.16 1079.26,1210.16 1079.85,1210.16 1080.44,1210.16 1081.02,1210.16 1081.61,1210.16 1082.2,1210.16 1082.78,1210.16 1083.37,1210.16 1083.96,1210.16 1084.54,1210.16 1085.13,1210.16 1085.72,1210.16 1086.3,1210.16 1086.89,1210.16 1087.47,1210.16 1088.06,1210.16 1088.65,1210.16 1089.23,1210.16 1089.82,1210.16 1090.41,1210.16 1090.99,1210.16 1091.58,1210.16 1092.17,1210.16 1092.75,1210.16 1093.34,1210.16 1093.93,1210.16 1094.51,1210.16 1095.1,1210.16 1095.68,1210.16 1096.27,1210.16 1096.86,1210.16 1097.44,1210.16 1098.03,1210.16 1098.62,1210.16 1099.2,1210.16 1099.79,1210.16 1100.38,1210.16 1100.96,1210.16 1101.55,1210.16 1102.14,1210.16 1102.72,1210.16 1103.31,1210.16 1103.89,1210.16 1104.48,1210.16 1105.07,1210.16 1105.65,1210.16 1106.24,1210.16 1106.83,1210.16 1107.41,1210.16 1108,1210.16 1108.59,1210.16 1109.17,1210.16 1109.76,1210.16 1110.34,1210.16 1110.93,1210.16 1111.52,1210.16 1112.1,1210.16 1112.69,1210.16 1113.28,1210.16 1113.86,1210.16 1114.45,1210.16 1115.04,1210.16 1115.62,1210.16 1116.21,1210.16 1116.8,1210.16 1117.38,1210.16 1117.97,1210.16 1118.55,1210.16 1119.14,1210.16 1119.73,1210.16 1120.31,1210.16 1120.9,1210.16 1121.49,1210.16 1122.07,1210.16 1122.66,1210.16 1123.25,1210.16 1123.83,1210.16 1124.42,1210.16 1125.01,1210.16 1125.59,1210.16 1126.18,1210.16 1126.76,1210.16 1127.35,1210.16 1127.94,1210.16 1128.52,1210.16 1129.11,1210.16 1129.7,1210.16 1130.28,1210.16 1130.87,1210.16 1131.46,1210.16 1132.04,1210.16 1132.63,1210.16 1133.21,1210.16 1133.8,1210.16 1134.39,1210.16 1134.97,1210.16 1135.56,1210.16 1136.15,1210.16 1136.73,1210.16 1137.32,1210.16 1137.91,1210.16 1138.49,1210.16 1139.08,1210.16 1139.67,1210.16 1140.25,1210.16 1140.84,1210.16 1141.42,1210.16 1142.01,1210.16 1142.6,1210.16 1143.18,1210.16 1143.77,1210.16 1144.36,1210.16 1144.94,1210.16 1145.53,1210.16 1146.12,1210.16 1146.7,1210.16 1147.29,1210.16 1147.88,1210.16 1148.46,1210.16 1149.05,1210.16 1149.63,1210.16 1150.22,1210.16 1150.81,1210.16 1151.39,1210.16 1151.98,1210.16 1152.57,1210.16 1153.15,1210.16 1153.74,1210.16 1154.33,1210.16 1154.91,1210.16 1155.5,1210.16 1156.09,1210.16 1156.67,1210.16 1157.26,1210.16 1157.84,1210.16 1158.43,1210.16 1159.02,1210.16 1159.6,1210.16 1160.19,1210.16 1160.78,1210.16 1161.36,1210.16 1161.95,1210.16 1162.54,1210.16 1163.12,1210.16 1163.71,1210.16 1164.29,1210.16 1164.88,1210.16 1165.47,1210.16 1166.05,1210.16 1166.64,1210.16 1167.23,1210.16 1167.81,1210.16 1168.4,1210.16 1168.99,1210.16 1169.57,1210.16 1170.16,1210.16 1170.75,1210.16 1171.33,1210.16 1171.92,1210.16 1172.5,1210.16 1173.09,1210.16 1173.68,1210.16 1174.26,1210.16 1174.85,1210.16 1175.44,1210.16 1176.02,1210.16 1176.61,1210.16 1177.2,1210.16 1177.78,1210.16 1178.37,1210.16 1178.96,1210.16 1179.54,1210.16 1180.13,1210.16 1180.71,1210.16 1181.3,1210.16 1181.89,1210.16 1182.47,1210.16 1183.06,1210.16 1183.65,1210.16 1184.23,1210.16 1184.82,1210.16 1185.41,1210.16 1185.99,1210.16 1186.58,1210.16 1187.16,1210.16 1187.75,1210.16 1188.34,1210.16 1188.92,1210.16 1189.51,1210.16 1190.1,1210.16 1190.68,1210.16 1191.27,1210.16 1191.86,1210.16 1192.44,1210.16 1193.03,1210.16 1193.62,1210.16 1194.2,1210.16 1194.79,1210.16 1195.37,1210.16 1195.96,1210.16 1196.55,1210.16 1197.13,1210.16 1197.72,1210.16 1198.31,1210.16 1198.89,1210.16 1199.48,1210.16 1200.07,1210.16 1200.65,1210.16 1201.24,1210.16 1201.83,1210.16 1202.41,1210.16 1203,1210.16 1203.58,1210.16 1204.17,1210.16 1204.76,1210.16 1205.34,1210.16 1205.93,1210.16 1206.52,1210.16 1207.1,1210.16 1207.69,1210.16 1208.28,1210.16 1208.86,1210.16 1209.45,1210.16 1210.03,1210.16 1210.62,1210.16 1211.21,1210.16 1211.79,1210.16 1212.38,1210.16 1212.97,1210.16 1213.55,1210.16 1214.14,1210.16 1214.73,1210.16 1215.31,1210.16 1215.9,1210.16 1216.49,1210.16 1217.07,1210.16 1217.66,1210.16 1218.24,1210.16 1218.83,1210.16 1219.42,1210.16 1220,1210.16 1220.59,1210.16 1221.18,1210.16 1221.76,1210.16 1222.35,1210.16 1222.94,1210.16 1223.52,1210.16 1224.11,1210.16 1224.7,1210.16 1225.28,1210.16 1225.87,1210.16 1226.45,1210.16 1227.04,1210.16 1227.63,1210.16 1228.21,1210.16 1228.8,1210.16 1229.39,1210.16 1229.97,1210.16 1230.56,1210.16 1231.15,1210.16 1231.73,1210.16 1232.32,1210.16 1232.91,1210.16 1233.49,1210.16 1234.08,1210.16 1234.66,1210.16 1235.25,1210.16 1235.84,1210.16 1236.42,1210.16 1237.01,1210.16 1237.6,1210.16 1238.18,1210.16 1238.77,1210.16 1239.36,1210.16 1239.94,1210.16 1240.53,1210.16 1241.11,1210.16 1241.7,1210.16 1242.29,1210.16 1242.87,1210.16 1243.46,1210.16 1244.05,1210.16 1244.63,1210.16 1245.22,1210.16 1245.81,1210.16 1246.39,1210.16 1246.98,1210.16 1247.57,1210.16 1248.15,1210.16 1248.74,1210.16 1249.32,1210.16 1249.91,1210.16 1250.5,1210.16 1251.08,1210.16 1251.67,1210.16 1252.26,1210.16 1252.84,1210.16 1253.43,1210.16 1254.02,1210.16 1254.6,1210.16 1255.19,1210.16 1255.78,1210.16 1256.36,1210.16 1256.95,1210.16 1257.53,1210.16 1258.12,1210.16 1258.71,1210.16 1259.29,1210.16 1259.88,1210.16 1260.47,1210.16 1261.05,1210.16 1261.64,1210.16 1262.23,1210.16 1262.81,1210.16 1263.4,1210.16 1263.98,1210.16 1264.57,1210.16 1265.16,1210.16 1265.74,1210.16 1266.33,1210.16 1266.92,1210.16 1267.5,1210.16 1268.09,1210.16 1268.68,1210.16 1269.26,1210.16 1269.85,1210.16 1270.44,1210.16 1271.02,1210.16 1271.61,1210.16 1272.19,1210.16 1272.78,1210.16 1273.37,1210.16 1273.95,1210.16 1274.54,1210.16 1275.13,1210.16 1275.71,1210.16 1276.3,1210.16 1276.89,1210.16 1277.47,1210.16 1278.06,1210.16 1278.65,1210.16 1279.23,1210.16 1279.82,1210.16 1280.4,1210.16 1280.99,1210.16 1281.58,1210.16 1282.16,1210.16 1282.75,1210.16 1283.34,1210.16 1283.92,1210.16 1284.51,1210.16 1285.1,1210.16 1285.68,1210.16 1286.27,1210.16 1286.86,1210.16 1287.44,1210.16 1288.03,1210.16 1288.61,1210.16 1289.2,1210.16 1289.79,1210.16 1290.37,1210.16 1290.96,1210.16 1291.55,1210.16 1292.13,1210.16 1292.72,1210.16 1293.31,1210.16 1293.89,1210.16 1294.48,1210.16 1295.06,1210.16 1295.65,1210.16 1296.24,1210.16 1296.82,1210.16 1297.41,1210.16 1298,1210.16 1298.58,1210.16 1299.17,1210.16 1299.76,1210.16 1300.34,1210.16 1300.93,1210.16 1301.52,1210.16 1302.1,1210.16 1302.69,1210.16 1303.27,1210.16 1303.86,1210.16 1304.45,1210.16 1305.03,1210.16 1305.62,1210.16 1306.21,1210.16 1306.79,1210.16 1307.38,1210.16 1307.97,1210.16 1308.55,1210.16 1309.14,1210.16 1309.73,1210.16 1310.31,1210.16 1310.9,1210.16 1311.48,1210.16 1312.07,1210.16 1312.66,1210.16 1313.24,1210.16 1313.83,1210.16 1314.42,1210.16 1315,1210.16 1315.59,1210.16 1316.18,1210.16 1316.76,1210.16 1317.35,1210.16 1317.93,1210.16 1318.52,1210.16 1319.11,1210.16 1319.69,1210.16 1320.28,1210.16 1320.87,1210.16 1321.45,1210.16 1322.04,1210.16 1322.63,1210.16 1323.21,1210.16 1323.8,1210.16 1324.39,1210.16 1324.97,1210.16 1325.56,1210.16 1326.14,1210.16 1326.73,1210.16 1327.32,1210.16 1327.9,1210.16 1328.49,1210.16 1329.08,1210.16 1329.66,1210.16 1330.25,1210.16 1330.84,1210.16 1331.42,1210.16 1332.01,1210.16 1332.6,1210.16 1333.18,1210.16 1333.77,1210.16 1334.35,1210.16 1334.94,1210.16 1335.53,1210.16 1336.11,1210.16 1336.7,1210.16 1337.29,1210.16 1337.87,1210.16 1338.46,1210.16 1339.05,1210.16 1339.63,1210.16 1340.22,1210.16 1340.8,1210.16 1341.39,1210.16 1341.98,1210.16 1342.56,1210.16 1343.15,1210.16 1343.74,1210.16 1344.32,1210.16 1344.91,1210.16 1345.5,1210.16 1346.08,1210.16 1346.67,1210.16 1347.26,1210.16 1347.84,1210.16 1348.43,1210.16 1349.01,1210.16 1349.6,1210.16 1350.19,1210.16 1350.77,1210.16 1351.36,1210.16 1351.95,1210.16 1352.53,1210.16 1353.12,1210.16 1353.71,1210.16 1354.29,1210.16 1354.88,1210.16 1355.47,1210.16 1356.05,1210.16 1356.64,1210.16 1357.22,1210.16 1357.81,1210.16 1358.4,1210.16 1358.98,1210.16 1359.57,1210.16 1360.16,1210.16 1360.74,1210.16 1361.33,1210.16 1361.92,1210.16 1362.5,1210.16 1363.09,1210.16 1363.68,1210.16 1364.26,1210.16 1364.85,1210.16 1365.43,1210.16 1366.02,1210.16 1366.61,1210.16 1367.19,1210.16 1367.78,1210.16 1368.37,1210.16 1368.95,1210.16 1369.54,1210.16 1370.13,1210.16 1370.71,1210.16 1371.3,1210.16 1371.88,1210.16 1372.47,1210.16 1373.06,1210.16 1373.64,1210.16 1374.23,1210.16 1374.82,1210.16 1375.4,1210.16 1375.99,1210.16 1376.58,1210.16 1377.16,1210.16 1377.75,1210.16 1378.34,1210.16 1378.92,1210.16 1379.51,1210.16 1380.09,1210.16 1380.68,1210.16 1381.27,1210.16 1381.85,1210.16 1382.44,1210.16 1383.03,1210.16 1383.61,1210.16 1384.2,1210.16 1384.79,1210.16 1385.37,1210.16 1385.96,1210.16 1386.55,1210.16 1387.13,1210.16 1387.72,1210.16 1388.3,1210.16 1388.89,1210.16 1389.48,1210.16 1390.06,1210.16 1390.65,1210.16 1391.24,1210.16 1391.82,1210.16 1392.41,1210.16 1393,1210.16 1393.58,1210.16 1394.17,1210.16 1394.75,1210.16 1395.34,1210.16 1395.93,1210.16 1396.51,1210.16 1397.1,1210.16 1397.69,1210.16 1398.27,1210.16 1398.86,1210.16 1399.45,1210.16 1400.03,1210.16 1400.62,1210.16 1401.21,1210.16 1401.79,1210.16 1402.38,1210.16 1402.96,1210.16 1403.55,1210.16 1404.14,1210.16 1404.72,1210.16 1405.31,1210.16 1405.9,1210.16 1406.48,1210.16 1407.07,1210.16 1407.66,1210.16 1408.24,1210.16 1408.83,1210.16 1409.42,1210.16 1410,1210.16 1410.59,1210.16 1411.17,1210.16 1411.76,1210.16 1412.35,1210.16 1412.93,1210.16 1413.52,1210.16 1414.11,1210.16 1414.69,1210.16 1415.28,1210.16 1415.87,1210.16 1416.45,1210.16 1417.04,1210.16 1417.63,1210.16 1418.21,1210.16 1418.8,1210.16 1419.38,1210.16 1419.97,1210.16 1420.56,1210.16 1421.14,1210.16 1421.73,1210.16 1422.32,1210.16 1422.9,1210.16 1423.49,1210.16 1424.08,1210.16 1424.66,1210.16 1425.25,1210.16 1425.83,1210.16 1426.42,1210.16 1427.01,1210.16 1427.59,1210.16 1428.18,1210.16 1428.77,1210.16 1429.35,1210.16 1429.94,1210.16 1430.53,1210.16 1431.11,1210.16 1431.7,1210.16 1432.29,1210.16 1432.87,1210.16 1433.46,1210.16 1434.04,1210.16 1434.63,1210.16 1435.22,1210.16 1435.8,1210.16 1436.39,1210.16 1436.98,1210.16 1437.56,1210.16 1438.15,1210.16 1438.74,1210.16 1439.32,1210.16 1439.91,1210.16 1440.5,1210.16 1441.08,1210.16 1441.67,1210.16 1442.25,1210.16 1442.84,1210.16 1443.43,1210.16 1444.01,1210.16 1444.6,1210.16 1445.19,1210.16 1445.77,1210.16 1446.36,1210.16 1446.95,1210.16 1447.53,1210.16 1448.12,1210.16 1448.7,1210.16 1449.29,1210.16 1449.88,1210.16 1450.46,1210.16 1451.05,1210.16 1451.64,1210.16 1452.22,1210.16 1452.81,1210.16 1453.4,1210.16 1453.98,1210.16 1454.57,1210.16 1455.16,1210.16 1455.74,1210.16 1456.33,1210.16 1456.91,1210.16 1457.5,1210.16 1458.09,1210.16 1458.67,1210.16 1459.26,1210.16 1459.85,1210.16 1460.43,1210.16 1461.02,1210.16 1461.61,1210.16 1462.19,1210.16 1462.78,1210.16 1463.37,1210.16 1463.95,1210.16 1464.54,1210.16 1465.12,1210.16 1465.71,1210.16 1466.3,1210.16 1466.88,1210.16 1467.47,1210.16 1468.06,1210.16 1468.64,1210.16 1469.23,1210.16 1469.82,1210.16 1470.4,1210.16 1470.99,1210.16 1471.57,1210.16 1472.16,1210.16 1472.75,1210.16 1473.33,1210.16 1473.92,1210.16 1474.51,1210.16 1475.09,1210.16 1475.68,1210.16 1476.27,1210.16 1476.85,1210.16 1477.44,1210.16 1478.03,1210.16 1478.61,1210.16 1479.2,1210.16 1479.78,1210.16 1480.37,1210.16 1480.96,1210.16 1481.54,1210.16 1482.13,1210.16 1482.72,1210.16 1483.3,1210.16 1483.89,1210.16 1484.48,1210.16 1485.06,1210.16 1485.65,1210.16 1486.24,1210.16 1486.82,1210.16 1487.41,1210.16 1487.99,1210.16 1488.58,1210.16 1489.17,1210.16 1489.75,1210.16 1490.34,1210.16 1490.93,1210.16 1491.51,1210.16 1492.1,1210.16 1492.69,1210.16 1493.27,1210.16 1493.86,1210.16 1494.45,1210.16 1495.03,1210.16 1495.62,1210.16 1496.2,1210.16 1496.79,1210.16 1497.38,1210.16 1497.96,1210.16 1498.55,1210.16 1499.14,1210.16 1499.72,1210.16 1500.31,1210.16 1500.9,1210.16 1501.48,1210.16 1502.07,1210.16 1502.65,1210.16 1503.24,1210.16 1503.83,1210.16 1504.41,1210.16 1505,1210.16 1505.59,1210.16 1506.17,1210.16 1506.76,1210.16 1507.35,1210.16 1507.93,1210.16 1508.52,1210.16 1509.11,1210.16 1509.69,1210.16 1510.28,1210.16 1510.86,1210.16 1511.45,1210.16 1512.04,1210.16 1512.62,1210.16 1513.21,1210.16 1513.8,1210.16 1514.38,1210.16 1514.97,1210.16 1515.56,1210.16 1516.14,1210.16 1516.73,1210.16 1517.32,1210.16 1517.9,1210.16 1518.49,1210.16 1519.07,1210.16 1519.66,1210.16 1520.25,1210.16 1520.83,1210.16 1521.42,1210.16 1522.01,1210.16 1522.59,1210.16 1523.18,1210.16 1523.77,1210.16 1524.35,1210.16 1524.94,1210.16 1525.52,1210.16 1526.11,1210.16 1526.7,1210.16 1527.28,1210.16 1527.87,1210.16 1528.46,1210.16 1529.04,1210.16 1529.63,1210.16 1530.22,1210.16 1530.8,1210.16 1531.39,1210.16 1531.98,1210.16 1532.56,1210.16 1533.15,1210.16 1533.73,1210.16 1534.32,1210.16 1534.91,1210.16 1535.49,1210.16 1536.08,1210.16 1536.67,1210.16 1537.25,1210.16 1537.84,1210.16 1538.43,1210.16 1539.01,1210.16 1539.6,1210.16 1540.19,1210.16 1540.77,1210.16 1541.36,1210.16 1541.94,1210.16 1542.53,1210.16 1543.12,1210.16 1543.7,1210.16 1544.29,1210.16 1544.88,1210.16 1545.46,1210.16 1546.05,1210.16 1546.64,1210.16 1547.22,1210.16 1547.81,1210.16 1548.4,1210.16 1548.98,1210.16 1549.57,1210.16 1550.15,1210.16 1550.74,1210.16 1551.33,1210.16 1551.91,1210.16 1552.5,1210.16 1553.09,1210.16 1553.67,1210.16 1554.26,1210.16 1554.85,1210.16 1555.43,1210.16 1556.02,1210.16 1556.6,1210.16 1557.19,1210.16 1557.78,1210.16 1558.36,1210.16 1558.95,1210.16 1559.54,1210.16 1560.12,1210.16 1560.71,1210.16 1561.3,1210.16 1561.88,1210.16 1562.47,1210.16 1563.06,1210.16 1563.64,1210.16 1564.23,1210.16 1564.81,1210.16 1565.4,1210.16 1565.99,1210.16 1566.57,1210.16 1567.16,1210.16 1567.75,1210.16 1568.33,1210.16 1568.92,1210.16 1569.51,1210.16 1570.09,1210.16 1570.68,1210.16 1571.27,1210.16 1571.85,1210.16 1572.44,1210.16 1573.02,1210.16 1573.61,1210.16 1574.2,1210.16 1574.78,1210.16 1575.37,1210.16 1575.96,1210.16 1576.54,1210.16 1577.13,1210.16 1577.72,1210.16 1578.3,1210.16 1578.89,1210.16 1579.47,1210.16 1580.06,1210.16 1580.65,1210.16 1581.23,1210.16 1581.82,1210.16 1582.41,1210.16 1582.99,1210.16 1583.58,1210.16 1584.17,1210.16 1584.75,1210.16 1585.34,1210.16 1585.93,1210.16 1586.51,1210.16 1587.1,1210.16 1587.68,1210.16 1588.27,1210.16 1588.86,1210.16 1589.44,1210.16 1590.03,1210.16 1590.62,1210.16 1591.2,1210.16 1591.79,1210.16 1592.38,1210.16 1592.96,1210.16 1593.55,1210.16 1594.14,1210.16 1594.72,1210.16 1595.31,1210.16 1595.89,1210.16 1596.48,1210.16 1597.07,1210.16 1597.65,1210.16 1598.24,1210.16 1598.83,1210.16 1599.41,1210.16 1600,1210.16 1600.59,1210.16 1601.17,1210.16 1601.76,1210.16 1602.34,1210.16 1602.93,1210.16 1603.52,1210.16 1604.1,1210.16 1604.69,1210.16 1605.28,1210.16 1605.86,1210.16 1606.45,1210.16 1607.04,1210.16 1607.62,1210.16 1608.21,1210.16 1608.8,1210.16 1609.38,1210.16 1609.97,1210.16 1610.55,1210.16 1611.14,1210.16 1611.73,1210.16 1612.31,1210.16 1612.9,1210.16 1613.49,1210.16 1614.07,1210.16 1614.66,1210.16 1615.25,1210.16 1615.83,1210.16 1616.42,1210.16 1617.01,1210.16 1617.59,1210.16 1618.18,1210.16 1618.76,1210.16 1619.35,1210.16 1619.94,1210.16 1620.52,1210.16 1621.11,1210.16 1621.7,1210.16 1622.28,1210.16 1622.87,1210.16 1623.46,1210.16 1624.04,1210.16 1624.63,1210.16 1625.22,1210.16 1625.8,1210.16 1626.39,1210.16 1626.97,1210.16 1627.56,1210.16 1628.15,1210.16 1628.73,1210.16 1629.32,1210.16 1629.91,1210.16 1630.49,1210.16 1631.08,1210.16 1631.67,1210.16 1632.25,1210.16 1632.84,1210.16 1633.42,1210.16 1634.01,1210.16 1634.6,1210.16 1635.18,1210.16 1635.77,1210.16 1636.36,1210.16 1636.94,1210.16 1637.53,1210.16 1638.12,1210.16 1638.7,1210.16 1639.29,1210.16 1639.88,1210.16 1640.46,1210.16 1641.05,1210.16 1641.63,1210.16 1642.22,1210.16 1642.81,1210.16 1643.39,1210.16 1643.98,1210.16 1644.57,1210.16 1645.15,1210.16 1645.74,1210.16 1646.33,1210.16 1646.91,1210.16 1647.5,1210.16 1648.09,1210.16 1648.67,1210.16 1649.26,1210.16 1649.84,1210.16 1650.43,1210.16 1651.02,1210.16 1651.6,1210.16 1652.19,1210.16 1652.78,1210.16 1653.36,1210.16 1653.95,1210.16 1654.54,1210.16 1655.12,1210.16 1655.71,1210.16 1656.29,1210.16 1656.88,1210.16 1657.47,1210.16 1658.05,1210.16 1658.64,1210.16 1659.23,1210.16 1659.81,1210.16 1660.4,1210.16 1660.99,1210.16 1661.57,1210.16 1662.16,1210.16 1662.75,1210.16 1663.33,1210.16 1663.92,1210.16 1664.5,1210.16 1665.09,1210.16 1665.68,1210.16 1666.26,1210.16 1666.85,1210.16 1667.44,1210.16 1668.02,1210.16 1668.61,1210.16 1669.2,1210.16 1669.78,1210.16 1670.37,1210.16 1670.96,1210.16 1671.54,1210.16 1672.13,1210.16 1672.71,1210.16 1673.3,1210.16 1673.89,1210.16 1674.47,1210.16 1675.06,1210.16 1675.65,1210.16 1676.23,1210.16 1676.82,1210.16 1677.41,1210.16 1677.99,1210.16 1678.58,1210.16 1679.17,1210.16 1679.75,1210.16 1680.34,1210.16 1680.92,1210.16 1681.51,1210.16 1682.1,1210.16 1682.68,1210.16 1683.27,1210.16 1683.86,1210.16 1684.44,1210.16 1685.03,1210.16 1685.62,1210.16 1686.2,1210.16 1686.79,1210.16 1687.37,1210.16 1687.96,1210.16 1688.55,1210.16 1689.13,1210.16 1689.72,1210.16 1690.31,1210.16 1690.89,1210.16 1691.48,1210.16 1692.07,1210.16 1692.65,1210.16 1693.24,1210.16 1693.83,1210.16 1694.41,1210.16 1695,1210.16 1695.58,1210.16 1696.17,1210.16 1696.76,1210.16 1697.34,1210.16 1697.93,1210.16 1698.52,1210.16 1699.1,1210.16 1699.69,1210.16 1700.28,1210.16 1700.86,1210.16 1701.45,1210.16 1702.04,1210.16 1702.62,1210.16 1703.21,1210.16 1703.79,1210.16 1704.38,1210.16 1704.97,1210.16 1705.55,1210.16 1706.14,1210.16 1706.73,1210.16 1707.31,1210.16 1707.9,1210.16 1708.49,1210.16 1709.07,1210.16 1709.66,1210.16 1710.24,1210.16 1710.83,1210.16 1711.42,1210.16 1712,1210.16 1712.59,1210.16 1713.18,1210.16 1713.76,1210.16 1714.35,1210.16 1714.94,1210.16 1715.52,1210.16 1716.11,1210.16 1716.7,1210.16 1717.28,1210.16 1717.87,1210.16 1718.45,1210.16 1719.04,1210.16 1719.63,1210.16 1720.21,1210.16 1720.8,1210.16 1721.39,1210.16 1721.97,1210.16 1722.56,1210.16 1723.15,1210.16 1723.73,1210.16 1724.32,1210.16 1724.91,1210.16 1725.49,1210.16 1726.08,1210.16 1726.66,1210.16 1727.25,1210.16 1727.84,1210.16 1728.42,1210.16 1729.01,1210.16 1729.6,1210.16 1730.18,1210.16 1730.77,1210.16 1731.36,1210.16 1731.94,1210.16 1732.53,1210.16 1733.11,1210.16 1733.7,1210.16 1734.29,1210.16 1734.87,1210.16 1735.46,1210.16 1736.05,1210.16 1736.63,1210.16 1737.22,1210.16 1737.81,1210.16 1738.39,1210.16 1738.98,1210.16 1739.57,1210.16 1740.15,1210.16 1740.74,1210.16 1741.32,1210.16 1741.91,1210.16 1742.5,1210.16 1743.08,1210.16 1743.67,1210.16 1744.26,1210.16 1744.84,1210.16 1745.43,1210.16 1746.02,1210.16 1746.6,1210.16 1747.19,1210.16 1747.78,1210.16 1748.36,1210.16 1748.95,1210.16 1749.53,1210.16 1750.12,1210.16 1750.71,1210.16 1751.29,1210.16 1751.88,1210.16 1752.47,1210.16 1753.05,1210.16 1753.64,1210.16 1754.23,1210.16 1754.81,1210.16 1755.4,1210.16 1755.99,1210.16 1756.57,1210.16 1757.16,1210.16 1757.74,1210.16 1758.33,1210.16 1758.92,1210.16 1759.5,1210.16 1760.09,1210.16 1760.68,1210.16 1761.26,1210.16 1761.85,1210.16 1762.44,1210.16 1763.02,1210.16 1763.61,1210.16 1764.19,1210.16 1764.78,1210.16 1765.37,1210.16 1765.95,1210.16 1766.54,1210.16 1767.13,1210.16 1767.71,1210.16 1768.3,1210.16 1768.89,1210.16 1769.47,1210.16 1770.06,1210.16 1770.65,1210.16 1771.23,1210.16 1771.82,1210.16 1772.4,1210.16 1772.99,1210.16 1773.58,1210.16 1774.16,1210.16 1774.75,1210.16 1775.34,1210.16 1775.92,1210.16 1776.51,1210.16 1777.1,1210.16 1777.68,1210.16 1778.27,1210.16 1778.86,1210.16 1779.44,1210.16 1780.03,1210.16 1780.61,1210.16 1781.2,1210.16 1781.79,1210.16 1782.37,1210.16 1782.96,1210.16 1783.55,1210.16 1784.13,1210.16 1784.72,1210.16 1785.31,1210.16 1785.89,1210.16 1786.48,1210.16 1787.06,1210.16 1787.65,1210.16 1788.24,1210.16 1788.82,1210.16 1789.41,1210.16 1790,1210.16 1790.58,1210.16 1791.17,1210.16 1791.76,1210.16 1792.34,1210.16 1792.93,1210.16 1793.52,1210.16 1794.1,1210.16 1794.69,1210.16 1795.27,1210.16 1795.86,1210.16 1796.45,1210.16 1797.03,1210.16 1797.62,1210.16 1798.21,1210.16 1798.79,1210.16 1799.38,1210.16 1799.97,1210.16 1800.55,1210.16 1801.14,1210.16 1801.73,1210.16 1802.31,1210.16 1802.9,1210.16 1803.48,1210.16 1804.07,1210.16 1804.66,1210.16 1805.24,1210.16 1805.83,1210.16 1806.42,1210.16 1807,1210.16 1807.59,1210.16 1808.18,1210.16 1808.76,1210.16 1809.35,1210.16 1809.94,1210.16 1810.52,1210.16 1811.11,1210.16 1811.69,1210.16 1812.28,1210.16 1812.87,1210.16 1813.45,1210.16 1814.04,1210.16 1814.63,1210.16 1815.21,1210.16 1815.8,1210.16 1816.39,1210.16 1816.97,1210.16 1817.56,1210.16 1818.14,1210.16 1818.73,1210.16 1819.32,1210.16 1819.9,1210.16 1820.49,1210.16 1821.08,1210.16 1821.66,1210.16 1822.25,1210.16 1822.84,1210.16 1823.42,1210.16 1824.01,1210.16 1824.6,1210.16 1825.18,1210.16 1825.77,1210.16 1826.35,1210.16 1826.94,1210.16 1827.53,1210.16 1828.11,1210.16 1828.7,1210.16 1829.29,1210.16 1829.87,1210.16 1830.46,1210.16 1831.05,1210.16 1831.63,1210.16 1832.22,1210.16 1832.81,1210.16 1833.39,1210.16 1833.98,1210.16 1834.56,1210.16 1835.15,1210.16 1835.74,1210.16 1836.32,1210.16 1836.91,1210.16 1837.5,1210.16 1838.08,1210.16 1838.67,1210.16 1839.26,1210.16 1839.84,1210.16 1840.43,1210.16 1841.01,1210.16 1841.6,1210.16 1842.19,1210.16 1842.77,1210.16 1843.36,1210.16 1843.95,1210.16 1844.53,1210.16 1845.12,1210.16 1845.71,1210.16 1846.29,1210.16 1846.88,1210.16 1847.47,1210.16 1848.05,1210.16 1848.64,1210.16 1849.22,1210.16 1849.81,1210.16 1850.4,1210.16 1850.98,1210.16 1851.57,1210.16 1852.16,1210.16 1852.74,1210.16 1853.33,1210.16 1853.92,1210.16 1854.5,1210.16 1855.09,1210.16 1855.68,1210.16 1856.26,1210.16 1856.85,1210.16 1857.43,1210.16 1858.02,1210.16 1858.61,1210.16 1859.19,1210.16 1859.78,1210.16 1860.37,1210.16 1860.95,1210.16 1861.54,1210.16 1862.13,1210.16 1862.71,1210.16 1863.3,1210.16 1863.88,1210.16 1864.47,1210.16 1865.06,1210.16 1865.64,1210.16 1866.23,1210.16 1866.82,1210.16 1867.4,1210.16 1867.99,1210.16 1868.58,1210.16 1869.16,1210.16 1869.75,1210.16 1870.34,1210.16 1870.92,1210.16 1871.51,1210.16 1872.09,1210.16 1872.68,1210.16 1873.27,1210.16 1873.85,1210.16 1874.44,1210.16 1875.03,1210.16 1875.61,1210.16 1876.2,1210.16 1876.79,1210.16 1877.37,1210.16 1877.96,1210.16 1878.55,1210.16 1879.13,1210.16 1879.72,1210.16 1880.3,1210.16 1880.89,1210.16 1881.48,1210.16 1882.06,1210.16 1882.65,1210.16 1883.24,1210.16 1883.82,1210.16 1884.41,1210.16 1885,1210.16 1885.58,1210.16 1886.17,1210.16 1886.76,1210.16 1887.34,1210.16 1887.93,1210.16 1888.51,1210.16 1889.1,1210.16 1889.69,1210.16 1890.27,1210.16 1890.86,1210.16 1891.45,1210.16 1892.03,1210.16 1892.62,1210.16 1893.21,1210.16 1893.79,1210.16 1894.38,1210.16 1894.96,1210.16 1895.55,1210.16 1896.14,1210.16 1896.72,1210.16 1897.31,1210.16 1897.9,1210.16 1898.48,1210.16 1899.07,1210.16 1899.66,1210.16 1900.24,1210.16 1900.83,1210.16 1901.42,1210.16 1902,1210.16 1902.59,1210.16 1903.17,1210.16 1903.76,1210.16 1904.35,1210.16 1904.93,1210.16 1905.52,1210.16 1906.11,1210.16 1906.69,1210.16 1907.28,1210.16 1907.87,1210.16 1908.45,1210.16 1909.04,1210.16 1909.63,1210.16 1910.21,1210.16 1910.8,1210.16 1911.38,1210.16 1911.97,1210.16 1912.56,1210.16 1913.14,1210.16 1913.73,1210.16 1914.32,1210.16 1914.9,1210.16 1915.49,1210.16 1916.08,1210.16 1916.66,1210.16 1917.25,1210.16 1917.83,1210.16 1918.42,1210.16 1919.01,1210.16 1919.59,1210.16 1920.18,1210.16 1920.77,1210.16 1921.35,1210.16 1921.94,1210.16 1922.53,1210.16 1923.11,1210.16 1923.7,1210.16 1924.29,1210.16 1924.87,1210.16 1925.46,1210.16 1926.04,1210.16 1926.63,1210.16 1927.22,1210.16 1927.8,1210.16 1928.39,1210.16 1928.98,1210.16 1929.56,1210.16 1930.15,1210.16 1930.74,1210.16 1931.32,1210.16 1931.91,1210.16 1932.5,1210.16 1933.08,1210.16 1933.67,1210.16 1934.25,1210.16 1934.84,1210.16 1935.43,1210.16 1936.01,1210.16 1936.6,1210.16 1937.19,1210.16 1937.77,1210.16 1938.36,1210.16 1938.95,1210.16 1939.53,1210.16 1940.12,1210.16 1940.71,1210.16 1941.29,1210.16 1941.88,1210.16 1942.46,1210.16 1943.05,1210.16 1943.64,1210.16 1944.22,1210.16 1944.81,1210.16 1945.4,1210.16 1945.98,1210.16 1946.57,1210.16 1947.16,1210.16 1947.74,1210.16 1948.33,1210.16 1948.91,1210.16 1949.5,1210.16 1950.09,1210.16 1950.67,1210.16 1951.26,1210.16 1951.85,1210.16 1952.43,1210.16 1953.02,1210.16 1953.61,1210.16 1954.19,1210.16 1954.78,1210.16 1955.37,1210.16 1955.95,1210.16 1956.54,1210.16 1957.12,1210.16 1957.71,1210.16 1958.3,1210.16 1958.88,1210.16 1959.47,1210.16 1960.06,1210.16 1960.64,1210.16 1961.23,1210.16 1961.82,1210.16 1962.4,1210.16 1962.99,1210.16 1963.58,1210.16 1964.16,1210.16 1964.75,1210.16 1965.33,1210.16 1965.92,1210.16 1966.51,1210.16 1967.09,1210.16 1967.68,1210.16 1968.27,1210.16 1968.85,1210.16 1969.44,1210.16 1970.03,1210.16 1970.61,1210.16 1971.2,1210.16 1971.78,1210.16 1972.37,1210.16 1972.96,1210.16 1973.54,1210.16 1974.13,1210.16 1974.72,1210.16 1975.3,1210.16 1975.89,1210.16 1976.48,1210.16 1977.06,1210.16 1977.65,1210.16 1978.24,1210.16 1978.82,1210.16 1979.41,1210.16 1979.99,1210.16 1980.58,1210.16 1981.17,1210.16 1981.75,1210.16 1982.34,1210.16 1982.93,1210.16 1983.51,1210.16 1984.1,1210.16 1984.69,1210.16 1985.27,1210.16 1985.86,1210.16 1986.45,1210.16 1987.03,1210.16 1987.62,1210.16 1988.2,1210.16 1988.79,1210.16 1989.38,1210.16 1989.96,1210.16 1990.55,1210.16 1991.14,1210.16 1991.72,1210.16 1992.31,1210.16 1992.9,1210.16 1993.48,1210.16 1994.07,1210.16 1994.65,1210.16 1995.24,1210.16 1995.83,1210.16 1996.41,1210.16 1997,1210.16 1997.59,1210.16 1998.17,1210.16 1998.76,1210.16 1999.35,1210.16 1999.93,1210.16 2000.52,1210.16 2001.11,1210.16 2001.69,1210.16 2002.28,1210.16 2002.86,1210.16 2003.45,1210.16 2004.04,1210.16 2004.62,1210.16 2005.21,1210.16 2005.8,1210.16 2006.38,1210.16 2006.97,1210.16 2007.56,1210.16 2008.14,1210.16 2008.73,1210.16 2009.32,1210.16 2009.9,1210.16 2010.49,1210.16 2011.07,1210.16 2011.66,1210.16 2012.25,1210.16 2012.83,1210.16 2013.42,1210.16 2014.01,1210.16 2014.59,1210.16 2015.18,1210.16 2015.77,1210.16 2016.35,1210.16 2016.94,1210.16 2017.53,1210.16 2018.11,1210.16 2018.7,1210.16 2019.28,1210.16 2019.87,1210.16 2020.46,1210.16 2021.04,1210.16 2021.63,1210.16 2022.22,1210.16 2022.8,1210.16 2023.39,1210.16 2023.98,1210.16 2024.56,1210.16 2025.15,1210.16 2025.73,1210.16 2026.32,1210.16 2026.91,1210.16 2027.49,1210.16 2028.08,1210.16 2028.67,1210.16 2029.25,1210.16 2029.84,1210.16 2030.43,1210.16 2031.01,1210.16 2031.6,1210.16 2032.19,1210.16 2032.77,1210.16 2033.36,1210.16 2033.94,1210.16 2034.53,1210.16 2035.12,1210.16 2035.7,1210.16 2036.29,1210.16 2036.88,1210.16 2037.46,1210.16 2038.05,1210.16 2038.64,1210.16 2039.22,1210.16 2039.81,1210.16 2040.4,1210.16 2040.98,1210.16 2041.57,1210.16 2042.15,1210.16 2042.74,1210.16 2043.33,1210.16 2043.91,1210.16 2044.5,1210.16 2045.09,1210.16 2045.67,1210.16 2046.26,1210.16 2046.85,1210.16 2047.43,1210.16 2048.02,1210.16 2048.6,1210.16 2049.19,1210.16 2049.78,1210.16 2050.36,1210.16 2050.95,1210.16 2051.54,1210.16 2052.12,1210.16 2052.71,1210.16 2053.3,1210.16 2053.88,1210.16 2054.47,1210.16 2055.06,1210.16 2055.64,1210.16 2056.23,1210.16 2056.81,1210.16 2057.4,1210.16 2057.99,1210.16 2058.57,1210.16 2059.16,1210.16 2059.75,1210.16 2060.33,1210.16 2060.92,1210.16 2061.51,1210.16 2062.09,1210.16 2062.68,1210.16 2063.27,1210.16 2063.85,1210.16 2064.44,1210.16 2065.02,1210.16 2065.61,1210.16 2066.2,1210.16 2066.78,1210.16 2067.37,1210.16 2067.96,1210.16 2068.54,1210.16 2069.13,1210.16 2069.72,1210.16 2070.3,1210.16 2070.89,1210.16 2071.48,1210.16 2072.06,1210.16 2072.65,1210.16 2073.23,1210.16 2073.82,1210.16 2074.41,1210.16 2074.99,1210.16 2075.58,1210.16 2076.17,1210.16 2076.75,1210.16 2077.34,1210.16 2077.93,1210.16 2078.51,1210.16 2079.1,1210.16 2079.68,1210.16 2080.27,1210.16 2080.86,1210.16 2081.44,1210.16 2082.03,1210.16 2082.62,1210.16 2083.2,1210.16 2083.79,1210.16 2084.38,1210.16 2084.96,1210.16 2085.55,1210.16 2086.14,1210.16 2086.72,1210.16 2087.31,1210.16 2087.89,1210.16 2088.48,1210.16 2089.07,1210.16 2089.65,1210.16 2090.24,1210.16 2090.83,1210.16 2091.41,1210.16 2092,1210.16 2092.59,1210.16 2093.17,1210.16 2093.76,1210.16 2094.35,1210.16 2094.93,1210.16 2095.52,1210.16 2096.1,1210.16 2096.69,1210.16 2097.28,1210.16 2097.86,1210.16 2098.45,1210.16 2099.04,1210.16 2099.62,1210.16 2100.21,1210.16 2100.8,1210.16 2101.38,1210.16 2101.97,1210.16 2102.55,1210.16 2103.14,1210.16 2103.73,1210.16 2104.31,1210.16 2104.9,1210.16 2105.49,1210.16 2106.07,1210.16 2106.66,1210.16 2107.25,1210.16 2107.83,1210.16 2108.42,1210.16 2109.01,1210.16 2109.59,1210.16 2110.18,1210.16 2110.76,1210.16 2111.35,1210.16 2111.94,1210.16 2112.52,1210.16 2113.11,1210.16 2113.7,1210.16 2114.28,1210.16 2114.87,1210.16 2115.46,1210.16 2116.04,1210.16 2116.63,1210.16 2117.22,1210.16 2117.8,1210.16 2118.39,1210.16 2118.97,1210.16 2119.56,1210.16 2120.15,1210.16 2120.73,1210.16 2121.32,1210.16 2121.91,1210.16 2122.49,1210.16 2123.08,1210.16 2123.67,1210.16 2124.25,1210.16 2124.84,1210.16 2125.42,1210.16 2126.01,1210.16 2126.6,1210.16 2127.18,1210.16 2127.77,1210.16 2128.36,1210.16 2128.94,1210.16 2129.53,1210.16 2130.12,1210.16 2130.7,1210.16 2131.29,1210.16 2131.88,1210.16 2132.46,1210.16 2133.05,1210.16 2133.63,1210.16 2134.22,1210.16 2134.81,1210.16 2135.39,1210.16 2135.98,1210.16 2136.57,1210.16 2137.15,1210.16 2137.74,1210.16 2138.33,1210.16 2138.91,1210.16 2139.5,1210.16 2140.09,1210.16 2140.67,1210.16 2141.26,1210.16 2141.84,1210.16 2142.43,1210.16 2143.02,1210.16 2143.6,1210.16 2144.19,1210.16 2144.78,1210.16 2145.36,1210.16 2145.95,1210.16 2146.54,1210.16 2147.12,1210.16 2147.71,1210.16 2148.3,1210.16 2148.88,1210.16 2149.47,1210.16 2150.05,1210.16 2150.64,1210.16 2151.23,1210.16 2151.81,1210.16 2152.4,1210.16 2152.99,1210.16 2153.57,1210.16 2154.16,1210.16 2154.75,1210.16 2155.33,1210.16 2155.92,1210.16 2156.5,1210.16 2157.09,1210.16 2157.68,1210.16 2158.26,1210.16 \"/>\n<path clip-path=\"url(#clip462)\" d=\"M986.025 1209.98 L986.612 1209.98 L987.198 1209.98 L987.785 1209.98 L988.371 1209.98 L988.957 1209.98 L989.544 1209.98 L990.13 1209.98 L990.717 1209.98 L991.303 1209.98 L991.889 1209.98 L992.476 1209.98 L993.062 1209.98 L993.649 1209.98 L994.235 1209.98 L994.822 1209.98 L995.408 1209.98 L995.994 1209.98 L996.581 1209.98 L997.167 1209.98 L997.754 1209.98 L998.34 1209.98 L998.926 1209.98 L999.513 1209.98 L1000.1 1209.98 L1000.69 1209.98 L1001.27 1209.98 L1001.86 1209.98 L1002.44 1209.98 L1003.03 1209.98 L1003.62 1209.98 L1004.2 1209.98 L1004.79 1209.98 L1005.38 1209.98 L1005.96 1209.98 L1006.55 1209.98 L1007.14 1209.98 L1007.72 1209.98 L1008.31 1209.98 L1008.9 1209.98 L1009.48 1209.98 L1010.07 1209.98 L1010.65 1209.98 L1011.24 1209.98 L1011.83 1209.98 L1012.41 1209.98 L1013 1209.98 L1013.59 1209.98 L1014.17 1209.98 L1014.76 1209.98 L1015.35 1209.98 L1015.93 1209.98 L1016.52 1209.98 L1017.11 1209.98 L1017.69 1209.98 L1018.28 1209.98 L1018.86 1209.98 L1019.45 1209.98 L1020.04 1209.98 L1020.62 1209.98 L1021.21 1209.98 L1021.8 1209.98 L1022.38 1209.98 L1022.97 1209.98 L1023.56 1209.98 L1024.14 1209.98 L1024.73 1209.98 L1025.32 1209.98 L1025.9 1209.98 L1026.49 1209.98 L1027.07 1209.98 L1027.66 1209.98 L1028.25 1209.98 L1028.83 1209.98 L1029.42 1209.98 L1030.01 1209.98 L1030.59 1209.98 L1031.18 1209.98 L1031.77 1209.98 L1032.35 1209.98 L1032.94 1209.98 L1033.52 1209.98 L1034.11 1209.98 L1034.7 1209.98 L1035.28 1209.98 L1035.87 1209.98 L1036.46 1209.98 L1037.04 1209.98 L1037.63 1209.98 L1038.22 1209.98 L1038.8 1209.98 L1039.39 1209.98 L1039.98 1209.98 L1040.56 1209.98 L1041.15 1209.98 L1041.73 1209.98 L1042.32 1209.98 L1042.91 1209.98 L1043.49 1209.98 L1044.08 1209.98 L1044.67 1209.98 L1045.25 1209.98 L1045.84 1209.98 L1046.43 1209.98 L1047.01 1209.98 L1047.6 1209.98 L1048.19 1209.98 L1048.77 1209.98 L1049.36 1209.98 L1049.94 1209.98 L1050.53 1209.98 L1051.12 1209.98 L1051.7 1209.98 L1052.29 1209.98 L1052.88 1209.98 L1053.46 1209.98 L1054.05 1209.98 L1054.64 1209.98 L1055.22 1209.98 L1055.81 1209.98 L1056.39 1209.98 L1056.98 1209.98 L1057.57 1209.98 L1058.15 1209.98 L1058.74 1209.98 L1059.33 1209.98 L1059.91 1209.98 L1060.5 1209.98 L1061.09 1209.98 L1061.67 1209.98 L1062.26 1209.98 L1062.85 1209.98 L1063.43 1209.98 L1064.02 1209.98 L1064.6 1209.98 L1065.19 1209.98 L1065.78 1209.98 L1066.36 1209.98 L1066.95 1209.98 L1067.54 1209.98 L1068.12 1209.98 L1068.71 1209.98 L1069.3 1209.98 L1069.88 1209.98 L1070.47 1209.98 L1071.06 1209.98 L1071.64 1209.98 L1072.23 1209.98 L1072.81 1209.98 L1073.4 1209.98 L1073.99 1209.98 L1074.57 1209.98 L1075.16 1209.98 L1075.75 1209.98 L1076.33 1209.98 L1076.92 1209.98 L1077.51 1209.98 L1078.09 1209.98 L1078.68 1209.98 L1079.26 1209.98 L1079.85 1209.98 L1080.44 1209.98 L1081.02 1209.98 L1081.61 1209.98 L1082.2 1209.98 L1082.78 1209.98 L1083.37 1209.98 L1083.96 1209.98 L1084.54 1209.98 L1085.13 1209.98 L1085.72 1209.98 L1086.3 1209.98 L1086.89 1209.98 L1087.47 1209.98 L1088.06 1209.98 L1088.65 1209.98 L1089.23 1209.98 L1089.82 1209.98 L1090.41 1209.98 L1090.99 1209.98 L1091.58 1209.98 L1092.17 1209.98 L1092.75 1209.98 L1093.34 1209.98 L1093.93 1209.98 L1094.51 1209.98 L1095.1 1209.98 L1095.68 1209.98 L1096.27 1209.98 L1096.86 1209.98 L1097.44 1209.98 L1098.03 1209.98 L1098.62 1209.98 L1099.2 1209.98 L1099.79 1209.98 L1100.38 1209.98 L1100.96 1209.98 L1101.55 1209.98 L1102.14 1209.98 L1102.72 1209.98 L1103.31 1209.98 L1103.89 1209.98 L1104.48 1209.98 L1105.07 1209.98 L1105.65 1209.98 L1106.24 1209.98 L1106.83 1209.98 L1107.41 1209.98 L1108 1209.98 L1108.59 1209.98 L1109.17 1209.98 L1109.76 1209.98 L1110.34 1209.98 L1110.93 1209.98 L1111.52 1209.98 L1112.1 1209.98 L1112.69 1209.98 L1113.28 1209.98 L1113.86 1209.98 L1114.45 1209.98 L1115.04 1209.98 L1115.62 1209.98 L1116.21 1209.98 L1116.8 1209.98 L1117.38 1209.98 L1117.97 1209.98 L1118.55 1209.98 L1119.14 1209.98 L1119.73 1209.98 L1120.31 1209.98 L1120.9 1209.98 L1121.49 1209.98 L1122.07 1209.98 L1122.66 1209.98 L1123.25 1209.98 L1123.83 1209.98 L1124.42 1209.98 L1125.01 1209.98 L1125.59 1209.98 L1126.18 1209.98 L1126.76 1209.98 L1127.35 1209.98 L1127.94 1209.98 L1128.52 1209.98 L1129.11 1209.98 L1129.7 1209.98 L1130.28 1209.98 L1130.87 1209.98 L1131.46 1209.98 L1132.04 1209.98 L1132.63 1209.98 L1133.21 1209.98 L1133.8 1209.98 L1134.39 1209.98 L1134.97 1209.98 L1135.56 1209.98 L1136.15 1209.98 L1136.73 1209.98 L1137.32 1209.98 L1137.91 1209.98 L1138.49 1209.98 L1139.08 1209.98 L1139.67 1209.98 L1140.25 1209.98 L1140.84 1209.98 L1141.42 1209.98 L1142.01 1209.98 L1142.6 1209.98 L1143.18 1209.98 L1143.77 1209.98 L1144.36 1209.98 L1144.94 1209.98 L1145.53 1209.98 L1146.12 1209.98 L1146.7 1209.98 L1147.29 1209.98 L1147.88 1209.98 L1148.46 1209.98 L1149.05 1209.98 L1149.63 1209.98 L1150.22 1209.98 L1150.81 1209.98 L1151.39 1209.98 L1151.98 1209.98 L1152.57 1209.98 L1153.15 1209.98 L1153.74 1209.98 L1154.33 1209.98 L1154.91 1209.98 L1155.5 1209.98 L1156.09 1209.98 L1156.67 1209.98 L1157.26 1209.98 L1157.84 1209.98 L1158.43 1209.98 L1159.02 1209.98 L1159.6 1209.98 L1160.19 1209.98 L1160.78 1209.98 L1161.36 1209.98 L1161.95 1209.98 L1162.54 1209.98 L1163.12 1209.98 L1163.71 1209.98 L1164.29 1209.98 L1164.88 1209.98 L1165.47 1209.98 L1166.05 1209.98 L1166.64 1209.98 L1167.23 1209.98 L1167.81 1209.98 L1168.4 1209.98 L1168.99 1209.98 L1169.57 1209.98 L1170.16 1209.98 L1170.75 1209.98 L1171.33 1209.98 L1171.92 1209.98 L1172.5 1209.98 L1173.09 1209.98 L1173.68 1209.98 L1174.26 1209.98 L1174.85 1209.98 L1175.44 1209.98 L1176.02 1209.98 L1176.61 1209.98 L1177.2 1209.98 L1177.78 1209.98 L1178.37 1209.98 L1178.96 1209.98 L1179.54 1209.98 L1180.13 1209.98 L1180.71 1209.98 L1181.3 1209.98 L1181.89 1209.98 L1182.47 1209.98 L1183.06 1209.98 L1183.65 1209.98 L1184.23 1209.98 L1184.82 1209.98 L1185.41 1209.98 L1185.99 1209.98 L1186.58 1209.98 L1187.16 1209.98 L1187.75 1209.98 L1188.34 1209.98 L1188.92 1209.98 L1189.51 1209.98 L1190.1 1209.98 L1190.68 1209.98 L1191.27 1209.98 L1191.86 1209.98 L1192.44 1209.98 L1193.03 1209.98 L1193.62 1209.98 L1194.2 1209.98 L1194.79 1209.98 L1195.37 1209.98 L1195.96 1209.98 L1196.55 1209.98 L1197.13 1209.98 L1197.72 1209.98 L1198.31 1209.98 L1198.89 1209.98 L1199.48 1209.98 L1200.07 1209.98 L1200.65 1209.98 L1201.24 1209.98 L1201.83 1209.98 L1202.41 1209.98 L1203 1209.98 L1203.58 1209.98 L1204.17 1209.98 L1204.76 1209.98 L1205.34 1209.98 L1205.93 1209.98 L1206.52 1209.98 L1207.1 1209.98 L1207.69 1209.98 L1208.28 1209.98 L1208.86 1209.98 L1209.45 1209.98 L1210.03 1209.98 L1210.62 1209.98 L1211.21 1209.98 L1211.79 1209.98 L1212.38 1209.98 L1212.97 1209.98 L1213.55 1209.98 L1214.14 1209.98 L1214.73 1209.98 L1215.31 1209.98 L1215.9 1209.98 L1216.49 1209.98 L1217.07 1209.98 L1217.66 1209.98 L1218.24 1209.98 L1218.83 1209.98 L1219.42 1209.98 L1220 1209.98 L1220.59 1209.98 L1221.18 1209.98 L1221.76 1209.98 L1222.35 1209.98 L1222.94 1209.98 L1223.52 1209.98 L1224.11 1209.98 L1224.7 1209.98 L1225.28 1209.98 L1225.87 1209.98 L1226.45 1209.98 L1227.04 1209.98 L1227.63 1209.98 L1228.21 1209.98 L1228.8 1209.98 L1229.39 1209.98 L1229.97 1209.98 L1230.56 1209.98 L1231.15 1209.98 L1231.73 1209.98 L1232.32 1209.98 L1232.91 1209.98 L1233.49 1209.98 L1234.08 1209.98 L1234.66 1209.98 L1235.25 1209.98 L1235.84 1209.98 L1236.42 1209.98 L1237.01 1209.98 L1237.6 1209.98 L1238.18 1209.98 L1238.77 1209.98 L1239.36 1209.98 L1239.94 1209.98 L1240.53 1209.98 L1241.11 1209.98 L1241.7 1209.98 L1242.29 1209.98 L1242.87 1209.98 L1243.46 1209.98 L1244.05 1209.98 L1244.63 1209.98 L1245.22 1209.98 L1245.81 1209.98 L1246.39 1209.98 L1246.98 1209.98 L1247.57 1209.98 L1248.15 1209.98 L1248.74 1209.98 L1249.32 1209.98 L1249.91 1209.98 L1250.5 1209.98 L1251.08 1209.98 L1251.67 1209.98 L1252.26 1209.98 L1252.84 1209.98 L1253.43 1209.98 L1254.02 1209.98 L1254.6 1209.98 L1255.19 1209.98 L1255.78 1209.98 L1256.36 1209.98 L1256.95 1209.98 L1257.53 1209.98 L1258.12 1209.98 L1258.71 1209.98 L1259.29 1209.98 L1259.88 1209.98 L1260.47 1209.98 L1261.05 1209.98 L1261.64 1209.98 L1262.23 1209.98 L1262.81 1209.98 L1263.4 1209.98 L1263.98 1209.98 L1264.57 1209.98 L1265.16 1209.98 L1265.74 1209.98 L1266.33 1209.98 L1266.92 1209.98 L1267.5 1209.98 L1268.09 1209.98 L1268.68 1209.98 L1269.26 1209.98 L1269.85 1209.98 L1270.44 1209.98 L1271.02 1209.98 L1271.61 1209.98 L1272.19 1209.98 L1272.78 1209.98 L1273.37 1209.98 L1273.95 1209.98 L1274.54 1209.98 L1275.13 1209.98 L1275.71 1209.98 L1276.3 1209.98 L1276.89 1209.98 L1277.47 1209.98 L1278.06 1209.98 L1278.65 1209.98 L1279.23 1209.98 L1279.82 1209.98 L1280.4 1209.98 L1280.99 1209.98 L1281.58 1209.98 L1282.16 1209.98 L1282.75 1209.98 L1283.34 1209.98 L1283.92 1209.98 L1284.51 1209.98 L1285.1 1209.98 L1285.68 1209.98 L1286.27 1209.98 L1286.86 1209.98 L1287.44 1209.98 L1288.03 1209.98 L1288.61 1209.98 L1289.2 1209.98 L1289.79 1209.98 L1290.37 1209.98 L1290.96 1209.98 L1291.55 1209.98 L1292.13 1209.98 L1292.72 1209.98 L1293.31 1209.98 L1293.89 1209.98 L1294.48 1209.98 L1295.06 1209.98 L1295.65 1209.98 L1296.24 1209.98 L1296.82 1209.98 L1297.41 1209.98 L1298 1209.98 L1298.58 1209.98 L1299.17 1209.98 L1299.76 1209.98 L1300.34 1209.98 L1300.93 1209.98 L1301.52 1209.98 L1302.1 1209.98 L1302.69 1209.98 L1303.27 1209.98 L1303.86 1209.98 L1304.45 1209.98 L1305.03 1209.98 L1305.62 1209.98 L1306.21 1209.98 L1306.79 1209.98 L1307.38 1209.98 L1307.97 1209.98 L1308.55 1209.98 L1309.14 1209.98 L1309.73 1209.98 L1310.31 1209.98 L1310.9 1209.98 L1311.48 1209.98 L1312.07 1209.98 L1312.66 1209.98 L1313.24 1209.98 L1313.83 1209.98 L1314.42 1209.98 L1315 1209.98 L1315.59 1209.98 L1316.18 1209.98 L1316.76 1209.98 L1317.35 1209.98 L1317.93 1209.98 L1318.52 1209.98 L1319.11 1209.98 L1319.69 1209.98 L1320.28 1209.98 L1320.87 1209.98 L1321.45 1209.98 L1322.04 1209.98 L1322.63 1209.98 L1323.21 1209.98 L1323.8 1209.98 L1324.39 1209.98 L1324.97 1209.98 L1325.56 1209.98 L1326.14 1209.98 L1326.73 1209.98 L1327.32 1209.98 L1327.9 1209.98 L1328.49 1209.98 L1329.08 1209.98 L1329.66 1209.98 L1330.25 1209.98 L1330.84 1209.98 L1331.42 1209.98 L1332.01 1209.98 L1332.6 1209.98 L1333.18 1209.98 L1333.77 1209.98 L1334.35 1209.98 L1334.94 1209.98 L1335.53 1209.98 L1336.11 1209.98 L1336.7 1209.98 L1337.29 1209.98 L1337.87 1209.98 L1338.46 1209.98 L1339.05 1209.98 L1339.63 1209.98 L1340.22 1209.98 L1340.8 1209.98 L1341.39 1209.98 L1341.98 1209.98 L1342.56 1209.98 L1343.15 1209.98 L1343.74 1209.98 L1344.32 1209.98 L1344.91 1209.98 L1345.5 1209.98 L1346.08 1209.98 L1346.67 1209.98 L1347.26 1209.98 L1347.84 1209.98 L1348.43 1209.98 L1349.01 1209.98 L1349.6 1209.98 L1350.19 1209.98 L1350.77 1209.98 L1351.36 1209.98 L1351.95 1209.98 L1352.53 1209.98 L1353.12 1209.98 L1353.71 1209.98 L1354.29 1209.98 L1354.88 1209.98 L1355.47 1209.98 L1356.05 1209.98 L1356.64 1209.98 L1357.22 1209.98 L1357.81 1209.98 L1358.4 1209.98 L1358.98 1209.98 L1359.57 1209.98 L1360.16 1209.98 L1360.74 1209.98 L1361.33 1209.98 L1361.92 1209.98 L1362.5 1209.98 L1363.09 1209.98 L1363.68 1209.98 L1364.26 1209.98 L1364.85 1209.98 L1365.43 1209.98 L1366.02 1209.98 L1366.61 1209.98 L1367.19 1209.98 L1367.78 1209.98 L1368.37 1209.98 L1368.95 1209.98 L1369.54 1209.98 L1370.13 1209.98 L1370.71 1209.98 L1371.3 1209.98 L1371.88 1209.98 L1372.47 1209.98 L1373.06 1209.98 L1373.64 1209.98 L1374.23 1209.98 L1374.82 1209.98 L1375.4 1209.98 L1375.99 1209.98 L1376.58 1209.98 L1377.16 1209.98 L1377.75 1209.98 L1378.34 1209.98 L1378.92 1209.98 L1379.51 1209.98 L1380.09 1209.98 L1380.68 1209.98 L1381.27 1209.98 L1381.85 1209.98 L1382.44 1209.98 L1383.03 1209.98 L1383.61 1209.98 L1384.2 1209.98 L1384.79 1209.98 L1385.37 1209.98 L1385.96 1209.98 L1386.55 1209.98 L1387.13 1209.98 L1387.72 1209.98 L1388.3 1209.98 L1388.89 1209.98 L1389.48 1209.98 L1390.06 1209.98 L1390.65 1209.98 L1391.24 1209.98 L1391.82 1209.98 L1392.41 1209.98 L1393 1209.98 L1393.58 1209.98 L1394.17 1209.98 L1394.75 1209.98 L1395.34 1209.98 L1395.93 1209.98 L1396.51 1209.98 L1397.1 1209.98 L1397.69 1209.98 L1398.27 1209.98 L1398.86 1209.98 L1399.45 1209.98 L1400.03 1209.98 L1400.62 1209.98 L1401.21 1209.98 L1401.79 1209.98 L1402.38 1209.98 L1402.96 1209.98 L1403.55 1209.98 L1404.14 1209.98 L1404.72 1209.98 L1405.31 1209.98 L1405.9 1209.98 L1406.48 1209.98 L1407.07 1209.98 L1407.66 1209.98 L1408.24 1209.98 L1408.83 1209.98 L1409.42 1209.98 L1410 1209.98 L1410.59 1209.98 L1411.17 1209.98 L1411.76 1209.98 L1412.35 1209.98 L1412.93 1209.98 L1413.52 1209.98 L1414.11 1209.98 L1414.69 1209.98 L1415.28 1209.98 L1415.87 1209.98 L1416.45 1209.98 L1417.04 1209.98 L1417.63 1209.98 L1418.21 1209.98 L1418.8 1209.98 L1419.38 1209.98 L1419.97 1209.98 L1420.56 1209.98 L1421.14 1209.98 L1421.73 1209.98 L1422.32 1209.98 L1422.9 1209.98 L1423.49 1209.98 L1424.08 1209.98 L1424.66 1209.98 L1425.25 1209.98 L1425.83 1209.98 L1426.42 1209.98 L1427.01 1209.98 L1427.59 1209.98 L1428.18 1209.98 L1428.77 1209.98 L1429.35 1209.98 L1429.94 1209.98 L1430.53 1209.98 L1431.11 1209.98 L1431.7 1209.98 L1432.29 1209.98 L1432.87 1209.98 L1433.46 1209.98 L1434.04 1209.98 L1434.63 1209.98 L1435.22 1209.98 L1435.8 1209.98 L1436.39 1209.98 L1436.98 1209.98 L1437.56 1209.98 L1438.15 1209.98 L1438.74 1209.98 L1439.32 1209.98 L1439.91 1209.98 L1440.5 1209.98 L1441.08 1209.98 L1441.67 1209.98 L1442.25 1209.98 L1442.84 1209.98 L1443.43 1209.98 L1444.01 1209.98 L1444.6 1209.98 L1445.19 1209.98 L1445.77 1209.98 L1446.36 1209.98 L1446.95 1209.98 L1447.53 1209.98 L1448.12 1209.98 L1448.7 1209.98 L1449.29 1209.98 L1449.88 1209.98 L1450.46 1209.98 L1451.05 1209.98 L1451.64 1209.98 L1452.22 1209.98 L1452.81 1209.98 L1453.4 1209.98 L1453.98 1209.98 L1454.57 1209.98 L1455.16 1209.98 L1455.74 1209.98 L1456.33 1209.98 L1456.91 1209.98 L1457.5 1209.98 L1458.09 1209.98 L1458.67 1209.98 L1459.26 1209.98 L1459.85 1209.98 L1460.43 1209.98 L1461.02 1209.98 L1461.61 1209.98 L1462.19 1209.98 L1462.78 1209.98 L1463.37 1209.98 L1463.95 1209.98 L1464.54 1209.98 L1465.12 1209.98 L1465.71 1209.98 L1466.3 1209.98 L1466.88 1209.98 L1467.47 1209.98 L1468.06 1209.98 L1468.64 1209.98 L1469.23 1209.98 L1469.82 1209.98 L1470.4 1209.98 L1470.99 1209.98 L1471.57 1209.98 L1472.16 1209.98 L1472.75 1209.98 L1473.33 1209.98 L1473.92 1209.98 L1474.51 1209.98 L1475.09 1209.98 L1475.68 1209.98 L1476.27 1209.98 L1476.85 1209.98 L1477.44 1209.98 L1478.03 1209.98 L1478.61 1209.98 L1479.2 1209.98 L1479.78 1209.98 L1480.37 1209.98 L1480.96 1209.98 L1481.54 1209.98 L1482.13 1209.98 L1482.72 1209.98 L1483.3 1209.98 L1483.89 1209.98 L1484.48 1209.98 L1485.06 1209.98 L1485.65 1209.98 L1486.24 1209.98 L1486.82 1209.98 L1487.41 1209.98 L1487.99 1209.98 L1488.58 1209.98 L1489.17 1209.98 L1489.75 1209.98 L1490.34 1209.98 L1490.93 1209.98 L1491.51 1209.98 L1492.1 1209.98 L1492.69 1209.98 L1493.27 1209.98 L1493.86 1209.98 L1494.45 1209.98 L1495.03 1209.98 L1495.62 1209.98 L1496.2 1209.98 L1496.79 1209.98 L1497.38 1209.98 L1497.96 1209.98 L1498.55 1209.98 L1499.14 1209.98 L1499.72 1209.98 L1500.31 1209.98 L1500.9 1209.98 L1501.48 1209.98 L1502.07 1209.98 L1502.65 1209.98 L1503.24 1209.98 L1503.83 1209.98 L1504.41 1209.98 L1505 1209.98 L1505.59 1209.98 L1506.17 1209.98 L1506.76 1209.98 L1507.35 1209.98 L1507.93 1209.98 L1508.52 1209.98 L1509.11 1209.98 L1509.69 1209.98 L1510.28 1209.98 L1510.86 1209.98 L1511.45 1209.98 L1512.04 1209.98 L1512.62 1209.98 L1513.21 1209.98 L1513.8 1209.98 L1514.38 1209.98 L1514.97 1209.98 L1515.56 1209.98 L1516.14 1209.98 L1516.73 1209.98 L1517.32 1209.98 L1517.9 1209.98 L1518.49 1209.98 L1519.07 1209.98 L1519.66 1209.98 L1520.25 1209.98 L1520.83 1209.98 L1521.42 1209.98 L1522.01 1209.98 L1522.59 1209.98 L1523.18 1209.98 L1523.77 1209.98 L1524.35 1209.98 L1524.94 1209.98 L1525.52 1209.98 L1526.11 1209.98 L1526.7 1209.98 L1527.28 1209.98 L1527.87 1209.98 L1528.46 1209.98 L1529.04 1209.98 L1529.63 1209.98 L1530.22 1209.98 L1530.8 1209.98 L1531.39 1209.98 L1531.98 1209.98 L1532.56 1209.98 L1533.15 1209.98 L1533.73 1209.98 L1534.32 1209.98 L1534.91 1209.98 L1535.49 1209.98 L1536.08 1209.98 L1536.67 1209.98 L1537.25 1209.98 L1537.84 1209.98 L1538.43 1209.98 L1539.01 1209.98 L1539.6 1209.98 L1540.19 1209.98 L1540.77 1209.98 L1541.36 1209.98 L1541.94 1209.98 L1542.53 1209.98 L1543.12 1209.98 L1543.7 1209.98 L1544.29 1209.98 L1544.88 1209.98 L1545.46 1209.98 L1546.05 1209.98 L1546.64 1209.98 L1547.22 1209.98 L1547.81 1209.98 L1548.4 1209.98 L1548.98 1209.98 L1549.57 1209.98 L1550.15 1209.98 L1550.74 1209.98 L1551.33 1209.98 L1551.91 1209.98 L1552.5 1209.98 L1553.09 1209.98 L1553.67 1209.98 L1554.26 1209.98 L1554.85 1209.98 L1555.43 1209.98 L1556.02 1209.98 L1556.6 1209.98 L1557.19 1209.98 L1557.78 1209.98 L1558.36 1209.98 L1558.95 1209.98 L1559.54 1209.98 L1560.12 1209.98 L1560.71 1209.98 L1561.3 1209.98 L1561.88 1209.98 L1562.47 1209.98 L1563.06 1209.98 L1563.64 1209.98 L1564.23 1209.98 L1564.81 1209.98 L1565.4 1209.98 L1565.99 1209.98 L1566.57 1209.98 L1567.16 1209.98 L1567.75 1209.98 L1568.33 1209.98 L1568.92 1209.98 L1569.51 1209.98 L1570.09 1209.98 L1570.68 1209.98 L1571.27 1209.98 L1571.85 1209.98 L1572.44 1209.98 L1573.02 1209.98 L1573.61 1209.98 L1574.2 1209.98 L1574.78 1209.98 L1575.37 1209.98 L1575.96 1209.98 L1576.54 1209.98 L1577.13 1209.98 L1577.72 1209.98 L1578.3 1209.98 L1578.89 1209.98 L1579.47 1209.98 L1580.06 1209.98 L1580.65 1209.98 L1581.23 1209.98 L1581.82 1209.98 L1582.41 1209.98 L1582.99 1209.98 L1583.58 1209.98 L1584.17 1209.98 L1584.75 1209.98 L1585.34 1209.98 L1585.93 1209.98 L1586.51 1209.98 L1587.1 1209.98 L1587.68 1209.98 L1588.27 1209.98 L1588.86 1209.98 L1589.44 1209.98 L1590.03 1209.98 L1590.62 1209.98 L1591.2 1209.98 L1591.79 1209.98 L1592.38 1209.98 L1592.96 1209.98 L1593.55 1209.98 L1594.14 1209.98 L1594.72 1209.98 L1595.31 1209.98 L1595.89 1209.98 L1596.48 1209.98 L1597.07 1209.98 L1597.65 1209.98 L1598.24 1209.98 L1598.83 1209.98 L1599.41 1209.98 L1600 1209.98 L1600.59 1209.98 L1601.17 1209.98 L1601.76 1209.98 L1602.34 1209.98 L1602.93 1209.98 L1603.52 1209.98 L1604.1 1209.98 L1604.69 1209.98 L1605.28 1209.98 L1605.86 1209.98 L1606.45 1209.98 L1607.04 1209.98 L1607.62 1209.98 L1608.21 1209.98 L1608.8 1209.98 L1609.38 1209.98 L1609.97 1209.98 L1610.55 1209.98 L1611.14 1209.98 L1611.73 1209.98 L1612.31 1209.98 L1612.9 1209.98 L1613.49 1209.98 L1614.07 1209.98 L1614.66 1209.98 L1615.25 1209.98 L1615.83 1209.98 L1616.42 1209.98 L1617.01 1209.98 L1617.59 1209.98 L1618.18 1209.98 L1618.76 1209.98 L1619.35 1209.98 L1619.94 1209.98 L1620.52 1209.98 L1621.11 1209.98 L1621.7 1209.98 L1622.28 1209.98 L1622.87 1209.98 L1623.46 1209.98 L1624.04 1209.98 L1624.63 1209.98 L1625.22 1209.98 L1625.8 1209.98 L1626.39 1209.98 L1626.97 1209.98 L1627.56 1209.98 L1628.15 1209.98 L1628.73 1209.98 L1629.32 1209.98 L1629.91 1209.98 L1630.49 1209.98 L1631.08 1209.98 L1631.67 1209.98 L1632.25 1209.98 L1632.84 1209.98 L1633.42 1209.98 L1634.01 1209.98 L1634.6 1209.98 L1635.18 1209.98 L1635.77 1209.98 L1636.36 1209.98 L1636.94 1209.98 L1637.53 1209.98 L1638.12 1209.98 L1638.7 1209.98 L1639.29 1209.98 L1639.88 1209.98 L1640.46 1209.98 L1641.05 1209.98 L1641.63 1209.98 L1642.22 1209.98 L1642.81 1209.98 L1643.39 1209.98 L1643.98 1209.98 L1644.57 1209.98 L1645.15 1209.98 L1645.74 1209.98 L1646.33 1209.98 L1646.91 1209.98 L1647.5 1209.98 L1648.09 1209.98 L1648.67 1209.98 L1649.26 1209.98 L1649.84 1209.98 L1650.43 1209.98 L1651.02 1209.98 L1651.6 1209.98 L1652.19 1209.98 L1652.78 1209.98 L1653.36 1209.98 L1653.95 1209.98 L1654.54 1209.98 L1655.12 1209.98 L1655.71 1209.98 L1656.29 1209.98 L1656.88 1209.98 L1657.47 1209.98 L1658.05 1209.98 L1658.64 1209.98 L1659.23 1209.98 L1659.81 1209.98 L1660.4 1209.98 L1660.99 1209.98 L1661.57 1209.98 L1662.16 1209.98 L1662.75 1209.98 L1663.33 1209.98 L1663.92 1209.98 L1664.5 1209.98 L1665.09 1209.98 L1665.68 1209.98 L1666.26 1209.98 L1666.85 1209.98 L1667.44 1209.98 L1668.02 1209.98 L1668.61 1209.98 L1669.2 1209.98 L1669.78 1209.98 L1670.37 1209.98 L1670.96 1209.98 L1671.54 1209.98 L1672.13 1209.98 L1672.71 1209.98 L1673.3 1209.98 L1673.89 1209.98 L1674.47 1209.98 L1675.06 1209.98 L1675.65 1209.98 L1676.23 1209.98 L1676.82 1209.98 L1677.41 1209.98 L1677.99 1209.98 L1678.58 1209.98 L1679.17 1209.98 L1679.75 1209.98 L1680.34 1209.98 L1680.92 1209.98 L1681.51 1209.98 L1682.1 1209.98 L1682.68 1209.98 L1683.27 1209.98 L1683.86 1209.98 L1684.44 1209.98 L1685.03 1209.98 L1685.62 1209.98 L1686.2 1209.98 L1686.79 1209.98 L1687.37 1209.98 L1687.96 1209.98 L1688.55 1209.98 L1689.13 1209.98 L1689.72 1209.98 L1690.31 1209.98 L1690.89 1209.98 L1691.48 1209.98 L1692.07 1209.98 L1692.65 1209.98 L1693.24 1209.98 L1693.83 1209.98 L1694.41 1209.98 L1695 1209.98 L1695.58 1209.98 L1696.17 1209.98 L1696.76 1209.98 L1697.34 1209.98 L1697.93 1209.98 L1698.52 1209.98 L1699.1 1209.98 L1699.69 1209.98 L1700.28 1209.98 L1700.86 1209.98 L1701.45 1209.98 L1702.04 1209.98 L1702.62 1209.98 L1703.21 1209.98 L1703.79 1209.98 L1704.38 1209.98 L1704.97 1209.98 L1705.55 1209.98 L1706.14 1209.98 L1706.73 1209.98 L1707.31 1209.98 L1707.9 1209.98 L1708.49 1209.98 L1709.07 1209.98 L1709.66 1209.98 L1710.24 1209.98 L1710.83 1209.98 L1711.42 1209.98 L1712 1209.98 L1712.59 1209.98 L1713.18 1209.98 L1713.76 1209.98 L1714.35 1209.98 L1714.94 1209.98 L1715.52 1209.98 L1716.11 1209.98 L1716.7 1209.98 L1717.28 1209.98 L1717.87 1209.98 L1718.45 1209.98 L1719.04 1209.98 L1719.63 1209.98 L1720.21 1209.98 L1720.8 1209.98 L1721.39 1209.98 L1721.97 1209.98 L1722.56 1209.98 L1723.15 1209.98 L1723.73 1209.98 L1724.32 1209.98 L1724.91 1209.98 L1725.49 1209.98 L1726.08 1209.98 L1726.66 1209.98 L1727.25 1209.98 L1727.84 1209.98 L1728.42 1209.98 L1729.01 1209.98 L1729.6 1209.98 L1730.18 1209.98 L1730.77 1209.98 L1731.36 1209.98 L1731.94 1209.98 L1732.53 1209.98 L1733.11 1209.98 L1733.7 1209.98 L1734.29 1209.98 L1734.87 1209.98 L1735.46 1209.98 L1736.05 1209.98 L1736.63 1209.98 L1737.22 1209.98 L1737.81 1209.98 L1738.39 1209.98 L1738.98 1209.98 L1739.57 1209.98 L1740.15 1209.98 L1740.74 1209.98 L1741.32 1209.98 L1741.91 1209.98 L1742.5 1209.98 L1743.08 1209.98 L1743.67 1209.98 L1744.26 1209.98 L1744.84 1209.98 L1745.43 1209.98 L1746.02 1209.98 L1746.6 1209.98 L1747.19 1209.98 L1747.78 1209.98 L1748.36 1209.98 L1748.95 1209.98 L1749.53 1209.98 L1750.12 1209.98 L1750.71 1209.98 L1751.29 1209.98 L1751.88 1209.98 L1752.47 1209.98 L1753.05 1209.98 L1753.64 1209.98 L1754.23 1209.98 L1754.81 1209.98 L1755.4 1209.98 L1755.99 1209.98 L1756.57 1209.98 L1757.16 1209.98 L1757.74 1209.98 L1758.33 1209.98 L1758.92 1209.98 L1759.5 1209.98 L1760.09 1209.98 L1760.68 1209.98 L1761.26 1209.98 L1761.85 1209.98 L1762.44 1209.98 L1763.02 1209.98 L1763.61 1209.98 L1764.19 1209.98 L1764.78 1209.98 L1765.37 1209.98 L1765.95 1209.98 L1766.54 1209.98 L1767.13 1209.98 L1767.71 1209.98 L1768.3 1209.98 L1768.89 1209.98 L1769.47 1209.98 L1770.06 1209.98 L1770.65 1209.98 L1771.23 1209.98 L1771.82 1209.98 L1772.4 1209.98 L1772.99 1209.98 L1773.58 1209.98 L1774.16 1209.98 L1774.75 1209.98 L1775.34 1209.98 L1775.92 1209.98 L1776.51 1209.98 L1777.1 1209.98 L1777.68 1209.98 L1778.27 1209.98 L1778.86 1209.98 L1779.44 1209.98 L1780.03 1209.98 L1780.61 1209.98 L1781.2 1209.98 L1781.79 1209.98 L1782.37 1209.98 L1782.96 1209.98 L1783.55 1209.98 L1784.13 1209.98 L1784.72 1209.98 L1785.31 1209.98 L1785.89 1209.98 L1786.48 1209.98 L1787.06 1209.98 L1787.65 1209.98 L1788.24 1209.98 L1788.82 1209.98 L1789.41 1209.98 L1790 1209.98 L1790.58 1209.98 L1791.17 1209.98 L1791.76 1209.98 L1792.34 1209.98 L1792.93 1209.98 L1793.52 1209.98 L1794.1 1209.98 L1794.69 1209.98 L1795.27 1209.98 L1795.86 1209.98 L1796.45 1209.98 L1797.03 1209.98 L1797.62 1209.98 L1798.21 1209.98 L1798.79 1209.98 L1799.38 1209.98 L1799.97 1209.98 L1800.55 1209.98 L1801.14 1209.98 L1801.73 1209.98 L1802.31 1209.98 L1802.9 1209.98 L1803.48 1209.98 L1804.07 1209.98 L1804.66 1209.98 L1805.24 1209.98 L1805.83 1209.98 L1806.42 1209.98 L1807 1209.98 L1807.59 1209.98 L1808.18 1209.98 L1808.76 1209.98 L1809.35 1209.98 L1809.94 1209.98 L1810.52 1209.98 L1811.11 1209.98 L1811.69 1209.98 L1812.28 1209.98 L1812.87 1209.98 L1813.45 1209.98 L1814.04 1209.98 L1814.63 1209.98 L1815.21 1209.98 L1815.8 1209.98 L1816.39 1209.98 L1816.97 1209.98 L1817.56 1209.98 L1818.14 1209.98 L1818.73 1209.98 L1819.32 1209.98 L1819.9 1209.98 L1820.49 1209.98 L1821.08 1209.98 L1821.66 1209.98 L1822.25 1209.98 L1822.84 1209.98 L1823.42 1209.98 L1824.01 1209.98 L1824.6 1209.98 L1825.18 1209.98 L1825.77 1209.98 L1826.35 1209.98 L1826.94 1209.98 L1827.53 1209.98 L1828.11 1209.98 L1828.7 1209.98 L1829.29 1209.98 L1829.87 1209.98 L1830.46 1209.98 L1831.05 1209.98 L1831.63 1209.98 L1832.22 1209.98 L1832.81 1209.98 L1833.39 1209.98 L1833.98 1209.98 L1834.56 1209.98 L1835.15 1209.98 L1835.74 1209.98 L1836.32 1209.98 L1836.91 1209.98 L1837.5 1209.98 L1838.08 1209.98 L1838.67 1209.98 L1839.26 1209.98 L1839.84 1209.98 L1840.43 1209.98 L1841.01 1209.98 L1841.6 1209.98 L1842.19 1209.98 L1842.77 1209.98 L1843.36 1209.98 L1843.95 1209.98 L1844.53 1209.98 L1845.12 1209.98 L1845.71 1209.98 L1846.29 1209.98 L1846.88 1209.98 L1847.47 1209.98 L1848.05 1209.98 L1848.64 1209.98 L1849.22 1209.98 L1849.81 1209.98 L1850.4 1209.98 L1850.98 1209.98 L1851.57 1209.98 L1852.16 1209.98 L1852.74 1209.98 L1853.33 1209.98 L1853.92 1209.98 L1854.5 1209.98 L1855.09 1209.98 L1855.68 1209.98 L1856.26 1209.98 L1856.85 1209.98 L1857.43 1209.98 L1858.02 1209.98 L1858.61 1209.98 L1859.19 1209.98 L1859.78 1209.98 L1860.37 1209.98 L1860.95 1209.98 L1861.54 1209.98 L1862.13 1209.98 L1862.71 1209.98 L1863.3 1209.98 L1863.88 1209.98 L1864.47 1209.98 L1865.06 1209.98 L1865.64 1209.98 L1866.23 1209.98 L1866.82 1209.98 L1867.4 1209.98 L1867.99 1209.98 L1868.58 1209.98 L1869.16 1209.98 L1869.75 1209.98 L1870.34 1209.98 L1870.92 1209.98 L1871.51 1209.98 L1872.09 1209.98 L1872.68 1209.98 L1873.27 1209.98 L1873.85 1209.98 L1874.44 1209.98 L1875.03 1209.98 L1875.61 1209.98 L1876.2 1209.98 L1876.79 1209.98 L1877.37 1209.98 L1877.96 1209.98 L1878.55 1209.98 L1879.13 1209.98 L1879.72 1209.98 L1880.3 1209.98 L1880.89 1209.98 L1881.48 1209.98 L1882.06 1209.98 L1882.65 1209.98 L1883.24 1209.98 L1883.82 1209.98 L1884.41 1209.98 L1885 1209.98 L1885.58 1209.98 L1886.17 1209.98 L1886.76 1209.98 L1887.34 1209.98 L1887.93 1209.98 L1888.51 1209.98 L1889.1 1209.98 L1889.69 1209.98 L1890.27 1209.98 L1890.86 1209.98 L1891.45 1209.98 L1892.03 1209.98 L1892.62 1209.98 L1893.21 1209.98 L1893.79 1209.98 L1894.38 1209.98 L1894.96 1209.98 L1895.55 1209.98 L1896.14 1209.98 L1896.72 1209.98 L1897.31 1209.98 L1897.9 1209.98 L1898.48 1209.98 L1899.07 1209.98 L1899.66 1209.98 L1900.24 1209.98 L1900.83 1209.98 L1901.42 1209.98 L1902 1209.98 L1902.59 1209.98 L1903.17 1209.98 L1903.76 1209.98 L1904.35 1209.98 L1904.93 1209.98 L1905.52 1209.98 L1906.11 1209.98 L1906.69 1209.98 L1907.28 1209.98 L1907.87 1209.98 L1908.45 1209.98 L1909.04 1209.98 L1909.63 1209.98 L1910.21 1209.98 L1910.8 1209.98 L1911.38 1209.98 L1911.97 1209.98 L1912.56 1209.98 L1913.14 1209.98 L1913.73 1209.98 L1914.32 1209.98 L1914.9 1209.98 L1915.49 1209.98 L1916.08 1209.98 L1916.66 1209.98 L1917.25 1209.98 L1917.83 1209.98 L1918.42 1209.98 L1919.01 1209.98 L1919.59 1209.98 L1920.18 1209.98 L1920.77 1209.98 L1921.35 1209.98 L1921.94 1209.98 L1922.53 1209.98 L1923.11 1209.98 L1923.7 1209.98 L1924.29 1209.98 L1924.87 1209.98 L1925.46 1209.98 L1926.04 1209.98 L1926.63 1209.98 L1927.22 1209.98 L1927.8 1209.98 L1928.39 1209.98 L1928.98 1209.98 L1929.56 1209.98 L1930.15 1209.98 L1930.74 1209.98 L1931.32 1209.98 L1931.91 1209.98 L1932.5 1209.98 L1933.08 1209.98 L1933.67 1209.98 L1934.25 1209.98 L1934.84 1209.98 L1935.43 1209.98 L1936.01 1209.98 L1936.6 1209.98 L1937.19 1209.98 L1937.77 1209.98 L1938.36 1209.98 L1938.95 1209.98 L1939.53 1209.98 L1940.12 1209.98 L1940.71 1209.98 L1941.29 1209.98 L1941.88 1209.98 L1942.46 1209.98 L1943.05 1209.98 L1943.64 1209.98 L1944.22 1209.98 L1944.81 1209.98 L1945.4 1209.98 L1945.98 1209.98 L1946.57 1209.98 L1947.16 1209.98 L1947.74 1209.98 L1948.33 1209.98 L1948.91 1209.98 L1949.5 1209.98 L1950.09 1209.98 L1950.67 1209.98 L1951.26 1209.98 L1951.85 1209.98 L1952.43 1209.98 L1953.02 1209.98 L1953.61 1209.98 L1954.19 1209.98 L1954.78 1209.98 L1955.37 1209.98 L1955.95 1209.98 L1956.54 1209.98 L1957.12 1209.98 L1957.71 1209.98 L1958.3 1209.98 L1958.88 1209.98 L1959.47 1209.98 L1960.06 1209.98 L1960.64 1209.98 L1961.23 1209.98 L1961.82 1209.98 L1962.4 1209.98 L1962.99 1209.98 L1963.58 1209.98 L1964.16 1209.98 L1964.75 1209.98 L1965.33 1209.98 L1965.92 1209.98 L1966.51 1209.98 L1967.09 1209.98 L1967.68 1209.98 L1968.27 1209.98 L1968.85 1209.98 L1969.44 1209.98 L1970.03 1209.98 L1970.61 1209.98 L1971.2 1209.98 L1971.78 1209.98 L1972.37 1209.98 L1972.96 1209.98 L1973.54 1209.98 L1974.13 1209.98 L1974.72 1209.98 L1975.3 1209.98 L1975.89 1209.98 L1976.48 1209.98 L1977.06 1209.98 L1977.65 1209.98 L1978.24 1209.98 L1978.82 1209.98 L1979.41 1209.98 L1979.99 1209.98 L1980.58 1209.98 L1981.17 1209.98 L1981.75 1209.98 L1982.34 1209.98 L1982.93 1209.98 L1983.51 1209.98 L1984.1 1209.98 L1984.69 1209.98 L1985.27 1209.98 L1985.86 1209.98 L1986.45 1209.98 L1987.03 1209.98 L1987.62 1209.98 L1988.2 1209.98 L1988.79 1209.98 L1989.38 1209.98 L1989.96 1209.98 L1990.55 1209.98 L1991.14 1209.98 L1991.72 1209.98 L1992.31 1209.98 L1992.9 1209.98 L1993.48 1209.98 L1994.07 1209.98 L1994.65 1209.98 L1995.24 1209.98 L1995.83 1209.98 L1996.41 1209.98 L1997 1209.98 L1997.59 1209.98 L1998.17 1209.98 L1998.76 1209.98 L1999.35 1209.98 L1999.93 1209.98 L2000.52 1209.98 L2001.11 1209.98 L2001.69 1209.98 L2002.28 1209.98 L2002.86 1209.98 L2003.45 1209.98 L2004.04 1209.98 L2004.62 1209.98 L2005.21 1209.98 L2005.8 1209.98 L2006.38 1209.98 L2006.97 1209.98 L2007.56 1209.98 L2008.14 1209.98 L2008.73 1209.98 L2009.32 1209.98 L2009.9 1209.98 L2010.49 1209.98 L2011.07 1209.98 L2011.66 1209.98 L2012.25 1209.98 L2012.83 1209.98 L2013.42 1209.98 L2014.01 1209.98 L2014.59 1209.98 L2015.18 1209.98 L2015.77 1209.98 L2016.35 1209.98 L2016.94 1209.98 L2017.53 1209.98 L2018.11 1209.98 L2018.7 1209.98 L2019.28 1209.98 L2019.87 1209.98 L2020.46 1209.98 L2021.04 1209.98 L2021.63 1209.98 L2022.22 1209.98 L2022.8 1209.98 L2023.39 1209.98 L2023.98 1209.98 L2024.56 1209.98 L2025.15 1209.98 L2025.73 1209.98 L2026.32 1209.98 L2026.91 1209.98 L2027.49 1209.98 L2028.08 1209.98 L2028.67 1209.98 L2029.25 1209.98 L2029.84 1209.98 L2030.43 1209.98 L2031.01 1209.98 L2031.6 1209.98 L2032.19 1209.98 L2032.77 1209.98 L2033.36 1209.98 L2033.94 1209.98 L2034.53 1209.98 L2035.12 1209.98 L2035.7 1209.98 L2036.29 1209.98 L2036.88 1209.98 L2037.46 1209.98 L2038.05 1209.98 L2038.64 1209.98 L2039.22 1209.98 L2039.81 1209.98 L2040.4 1209.98 L2040.98 1209.98 L2041.57 1209.98 L2042.15 1209.98 L2042.74 1209.98 L2043.33 1209.98 L2043.91 1209.98 L2044.5 1209.98 L2045.09 1209.98 L2045.67 1209.98 L2046.26 1209.98 L2046.85 1209.98 L2047.43 1209.98 L2048.02 1209.98 L2048.6 1209.98 L2049.19 1209.98 L2049.78 1209.98 L2050.36 1209.98 L2050.95 1209.98 L2051.54 1209.98 L2052.12 1209.98 L2052.71 1209.98 L2053.3 1209.98 L2053.88 1209.98 L2054.47 1209.98 L2055.06 1209.98 L2055.64 1209.98 L2056.23 1209.98 L2056.81 1209.98 L2057.4 1209.98 L2057.99 1209.98 L2058.57 1209.98 L2059.16 1209.98 L2059.75 1209.98 L2060.33 1209.98 L2060.92 1209.98 L2061.51 1209.98 L2062.09 1209.98 L2062.68 1209.98 L2063.27 1209.98 L2063.85 1209.98 L2064.44 1209.98 L2065.02 1209.98 L2065.61 1209.98 L2066.2 1209.98 L2066.78 1209.98 L2067.37 1209.98 L2067.96 1209.98 L2068.54 1209.98 L2069.13 1209.98 L2069.72 1209.98 L2070.3 1209.98 L2070.89 1209.98 L2071.48 1209.98 L2072.06 1209.98 L2072.65 1209.98 L2073.23 1209.98 L2073.82 1209.98 L2074.41 1209.98 L2074.99 1209.98 L2075.58 1209.98 L2076.17 1209.98 L2076.75 1209.98 L2077.34 1209.98 L2077.93 1209.98 L2078.51 1209.98 L2079.1 1209.98 L2079.68 1209.98 L2080.27 1209.98 L2080.86 1209.98 L2081.44 1209.98 L2082.03 1209.98 L2082.62 1209.98 L2083.2 1209.98 L2083.79 1209.98 L2084.38 1209.98 L2084.96 1209.98 L2085.55 1209.98 L2086.14 1209.98 L2086.72 1209.98 L2087.31 1209.98 L2087.89 1209.98 L2088.48 1209.98 L2089.07 1209.98 L2089.65 1209.98 L2090.24 1209.98 L2090.83 1209.98 L2091.41 1209.98 L2092 1209.98 L2092.59 1209.98 L2093.17 1209.98 L2093.76 1209.98 L2094.35 1209.98 L2094.93 1209.98 L2095.52 1209.98 L2096.1 1209.98 L2096.69 1209.98 L2097.28 1209.98 L2097.86 1209.98 L2098.45 1209.98 L2099.04 1209.98 L2099.62 1209.98 L2100.21 1209.98 L2100.8 1209.98 L2101.38 1209.98 L2101.97 1209.98 L2102.55 1209.98 L2103.14 1209.98 L2103.73 1209.98 L2104.31 1209.98 L2104.9 1209.98 L2105.49 1209.98 L2106.07 1209.98 L2106.66 1209.98 L2107.25 1209.98 L2107.83 1209.98 L2108.42 1209.98 L2109.01 1209.98 L2109.59 1209.98 L2110.18 1209.98 L2110.76 1209.98 L2111.35 1209.98 L2111.94 1209.98 L2112.52 1209.98 L2113.11 1209.98 L2113.7 1209.98 L2114.28 1209.98 L2114.87 1209.98 L2115.46 1209.98 L2116.04 1209.98 L2116.63 1209.98 L2117.22 1209.98 L2117.8 1209.98 L2118.39 1209.98 L2118.97 1209.98 L2119.56 1209.98 L2120.15 1209.98 L2120.73 1209.98 L2121.32 1209.98 L2121.91 1209.98 L2122.49 1209.98 L2123.08 1209.98 L2123.67 1209.98 L2124.25 1209.98 L2124.84 1209.98 L2125.42 1209.98 L2126.01 1209.98 L2126.6 1209.98 L2127.18 1209.98 L2127.77 1209.98 L2128.36 1209.98 L2128.94 1209.98 L2129.53 1209.98 L2130.12 1209.98 L2130.7 1209.98 L2131.29 1209.98 L2131.88 1209.98 L2132.46 1209.98 L2133.05 1209.98 L2133.63 1209.98 L2134.22 1209.98 L2134.81 1209.98 L2135.39 1209.98 L2135.98 1209.98 L2136.57 1209.98 L2137.15 1209.98 L2137.74 1209.98 L2138.33 1209.98 L2138.91 1209.98 L2139.5 1209.98 L2140.09 1209.98 L2140.67 1209.98 L2141.26 1209.98 L2141.84 1209.98 L2142.43 1209.98 L2143.02 1209.98 L2143.6 1209.98 L2144.19 1209.98 L2144.78 1209.98 L2145.36 1209.98 L2145.95 1209.98 L2146.54 1209.98 L2147.12 1209.98 L2147.71 1209.98 L2148.3 1209.98 L2148.88 1209.98 L2149.47 1209.98 L2150.05 1209.98 L2150.64 1209.98 L2151.23 1209.98 L2151.81 1209.98 L2152.4 1209.98 L2152.99 1209.98 L2153.57 1209.98 L2154.16 1209.98 L2154.75 1209.98 L2155.33 1209.98 L2155.92 1209.98 L2156.5 1209.98 L2157.09 1209.98 L2157.68 1209.98 L2158.26 1209.98 L2158.26 1209.87 L2157.68 1209.87 L2157.09 1209.87 L2156.5 1209.87 L2155.92 1209.87 L2155.33 1209.87 L2154.75 1209.87 L2154.16 1209.87 L2153.57 1209.87 L2152.99 1209.87 L2152.4 1209.87 L2151.81 1209.87 L2151.23 1209.87 L2150.64 1209.87 L2150.05 1209.87 L2149.47 1209.87 L2148.88 1209.87 L2148.3 1209.87 L2147.71 1209.87 L2147.12 1209.87 L2146.54 1209.87 L2145.95 1209.87 L2145.36 1209.87 L2144.78 1209.87 L2144.19 1209.87 L2143.6 1209.87 L2143.02 1209.87 L2142.43 1209.87 L2141.84 1209.87 L2141.26 1209.87 L2140.67 1209.87 L2140.09 1209.87 L2139.5 1209.87 L2138.91 1209.87 L2138.33 1209.87 L2137.74 1209.87 L2137.15 1209.87 L2136.57 1209.87 L2135.98 1209.87 L2135.39 1209.87 L2134.81 1209.87 L2134.22 1209.87 L2133.63 1209.87 L2133.05 1209.87 L2132.46 1209.87 L2131.88 1209.87 L2131.29 1209.87 L2130.7 1209.87 L2130.12 1209.87 L2129.53 1209.87 L2128.94 1209.87 L2128.36 1209.87 L2127.77 1209.87 L2127.18 1209.87 L2126.6 1209.87 L2126.01 1209.87 L2125.42 1209.87 L2124.84 1209.87 L2124.25 1209.87 L2123.67 1209.87 L2123.08 1209.87 L2122.49 1209.87 L2121.91 1209.87 L2121.32 1209.87 L2120.73 1209.87 L2120.15 1209.87 L2119.56 1209.87 L2118.97 1209.87 L2118.39 1209.87 L2117.8 1209.87 L2117.22 1209.87 L2116.63 1209.87 L2116.04 1209.87 L2115.46 1209.87 L2114.87 1209.87 L2114.28 1209.87 L2113.7 1209.87 L2113.11 1209.87 L2112.52 1209.87 L2111.94 1209.87 L2111.35 1209.87 L2110.76 1209.87 L2110.18 1209.87 L2109.59 1209.87 L2109.01 1209.87 L2108.42 1209.87 L2107.83 1209.87 L2107.25 1209.87 L2106.66 1209.87 L2106.07 1209.87 L2105.49 1209.87 L2104.9 1209.87 L2104.31 1209.87 L2103.73 1209.87 L2103.14 1209.87 L2102.55 1209.87 L2101.97 1209.87 L2101.38 1209.87 L2100.8 1209.87 L2100.21 1209.87 L2099.62 1209.87 L2099.04 1209.87 L2098.45 1209.87 L2097.86 1209.87 L2097.28 1209.87 L2096.69 1209.87 L2096.1 1209.87 L2095.52 1209.87 L2094.93 1209.87 L2094.35 1209.87 L2093.76 1209.87 L2093.17 1209.87 L2092.59 1209.87 L2092 1209.87 L2091.41 1209.87 L2090.83 1209.87 L2090.24 1209.87 L2089.65 1209.87 L2089.07 1209.87 L2088.48 1209.87 L2087.89 1209.87 L2087.31 1209.87 L2086.72 1209.87 L2086.14 1209.87 L2085.55 1209.87 L2084.96 1209.87 L2084.38 1209.87 L2083.79 1209.87 L2083.2 1209.87 L2082.62 1209.87 L2082.03 1209.87 L2081.44 1209.87 L2080.86 1209.87 L2080.27 1209.87 L2079.68 1209.87 L2079.1 1209.87 L2078.51 1209.87 L2077.93 1209.87 L2077.34 1209.87 L2076.75 1209.87 L2076.17 1209.87 L2075.58 1209.87 L2074.99 1209.87 L2074.41 1209.87 L2073.82 1209.87 L2073.23 1209.87 L2072.65 1209.87 L2072.06 1209.87 L2071.48 1209.87 L2070.89 1209.87 L2070.3 1209.87 L2069.72 1209.87 L2069.13 1209.87 L2068.54 1209.87 L2067.96 1209.87 L2067.37 1209.87 L2066.78 1209.87 L2066.2 1209.87 L2065.61 1209.87 L2065.02 1209.87 L2064.44 1209.87 L2063.85 1209.87 L2063.27 1209.87 L2062.68 1209.87 L2062.09 1209.87 L2061.51 1209.87 L2060.92 1209.87 L2060.33 1209.87 L2059.75 1209.87 L2059.16 1209.87 L2058.57 1209.87 L2057.99 1209.87 L2057.4 1209.87 L2056.81 1209.87 L2056.23 1209.87 L2055.64 1209.87 L2055.06 1209.87 L2054.47 1209.87 L2053.88 1209.87 L2053.3 1209.87 L2052.71 1209.87 L2052.12 1209.87 L2051.54 1209.87 L2050.95 1209.87 L2050.36 1209.87 L2049.78 1209.87 L2049.19 1209.87 L2048.6 1209.87 L2048.02 1209.87 L2047.43 1209.87 L2046.85 1209.87 L2046.26 1209.87 L2045.67 1209.87 L2045.09 1209.87 L2044.5 1209.87 L2043.91 1209.87 L2043.33 1209.87 L2042.74 1209.87 L2042.15 1209.87 L2041.57 1209.87 L2040.98 1209.87 L2040.4 1209.87 L2039.81 1209.87 L2039.22 1209.87 L2038.64 1209.87 L2038.05 1209.87 L2037.46 1209.87 L2036.88 1209.87 L2036.29 1209.87 L2035.7 1209.87 L2035.12 1209.87 L2034.53 1209.87 L2033.94 1209.87 L2033.36 1209.87 L2032.77 1209.87 L2032.19 1209.87 L2031.6 1209.87 L2031.01 1209.87 L2030.43 1209.87 L2029.84 1209.87 L2029.25 1209.87 L2028.67 1209.87 L2028.08 1209.87 L2027.49 1209.87 L2026.91 1209.87 L2026.32 1209.87 L2025.73 1209.87 L2025.15 1209.87 L2024.56 1209.87 L2023.98 1209.87 L2023.39 1209.87 L2022.8 1209.87 L2022.22 1209.87 L2021.63 1209.87 L2021.04 1209.87 L2020.46 1209.87 L2019.87 1209.87 L2019.28 1209.87 L2018.7 1209.87 L2018.11 1209.87 L2017.53 1209.87 L2016.94 1209.87 L2016.35 1209.87 L2015.77 1209.87 L2015.18 1209.87 L2014.59 1209.87 L2014.01 1209.87 L2013.42 1209.87 L2012.83 1209.87 L2012.25 1209.87 L2011.66 1209.87 L2011.07 1209.87 L2010.49 1209.87 L2009.9 1209.87 L2009.32 1209.87 L2008.73 1209.87 L2008.14 1209.87 L2007.56 1209.87 L2006.97 1209.87 L2006.38 1209.87 L2005.8 1209.87 L2005.21 1209.87 L2004.62 1209.87 L2004.04 1209.87 L2003.45 1209.87 L2002.86 1209.87 L2002.28 1209.87 L2001.69 1209.87 L2001.11 1209.87 L2000.52 1209.87 L1999.93 1209.87 L1999.35 1209.87 L1998.76 1209.87 L1998.17 1209.87 L1997.59 1209.87 L1997 1209.87 L1996.41 1209.87 L1995.83 1209.87 L1995.24 1209.87 L1994.65 1209.87 L1994.07 1209.87 L1993.48 1209.87 L1992.9 1209.87 L1992.31 1209.87 L1991.72 1209.87 L1991.14 1209.87 L1990.55 1209.87 L1989.96 1209.87 L1989.38 1209.87 L1988.79 1209.87 L1988.2 1209.87 L1987.62 1209.87 L1987.03 1209.87 L1986.45 1209.87 L1985.86 1209.87 L1985.27 1209.87 L1984.69 1209.87 L1984.1 1209.87 L1983.51 1209.87 L1982.93 1209.87 L1982.34 1209.87 L1981.75 1209.87 L1981.17 1209.87 L1980.58 1209.87 L1979.99 1209.87 L1979.41 1209.87 L1978.82 1209.87 L1978.24 1209.87 L1977.65 1209.87 L1977.06 1209.87 L1976.48 1209.87 L1975.89 1209.87 L1975.3 1209.87 L1974.72 1209.87 L1974.13 1209.87 L1973.54 1209.87 L1972.96 1209.87 L1972.37 1209.87 L1971.78 1209.87 L1971.2 1209.87 L1970.61 1209.87 L1970.03 1209.87 L1969.44 1209.87 L1968.85 1209.87 L1968.27 1209.87 L1967.68 1209.87 L1967.09 1209.87 L1966.51 1209.87 L1965.92 1209.87 L1965.33 1209.87 L1964.75 1209.87 L1964.16 1209.87 L1963.58 1209.87 L1962.99 1209.87 L1962.4 1209.87 L1961.82 1209.87 L1961.23 1209.87 L1960.64 1209.87 L1960.06 1209.87 L1959.47 1209.87 L1958.88 1209.87 L1958.3 1209.87 L1957.71 1209.87 L1957.12 1209.87 L1956.54 1209.87 L1955.95 1209.87 L1955.37 1209.87 L1954.78 1209.87 L1954.19 1209.87 L1953.61 1209.87 L1953.02 1209.87 L1952.43 1209.87 L1951.85 1209.87 L1951.26 1209.87 L1950.67 1209.87 L1950.09 1209.87 L1949.5 1209.87 L1948.91 1209.87 L1948.33 1209.87 L1947.74 1209.87 L1947.16 1209.87 L1946.57 1209.87 L1945.98 1209.87 L1945.4 1209.87 L1944.81 1209.87 L1944.22 1209.87 L1943.64 1209.87 L1943.05 1209.87 L1942.46 1209.87 L1941.88 1209.87 L1941.29 1209.87 L1940.71 1209.87 L1940.12 1209.87 L1939.53 1209.87 L1938.95 1209.87 L1938.36 1209.87 L1937.77 1209.87 L1937.19 1209.87 L1936.6 1209.87 L1936.01 1209.87 L1935.43 1209.87 L1934.84 1209.87 L1934.25 1209.87 L1933.67 1209.87 L1933.08 1209.87 L1932.5 1209.87 L1931.91 1209.87 L1931.32 1209.87 L1930.74 1209.87 L1930.15 1209.87 L1929.56 1209.87 L1928.98 1209.87 L1928.39 1209.87 L1927.8 1209.87 L1927.22 1209.87 L1926.63 1209.87 L1926.04 1209.87 L1925.46 1209.87 L1924.87 1209.87 L1924.29 1209.87 L1923.7 1209.87 L1923.11 1209.87 L1922.53 1209.87 L1921.94 1209.87 L1921.35 1209.87 L1920.77 1209.87 L1920.18 1209.87 L1919.59 1209.87 L1919.01 1209.87 L1918.42 1209.87 L1917.83 1209.87 L1917.25 1209.87 L1916.66 1209.87 L1916.08 1209.87 L1915.49 1209.87 L1914.9 1209.87 L1914.32 1209.87 L1913.73 1209.87 L1913.14 1209.87 L1912.56 1209.87 L1911.97 1209.87 L1911.38 1209.87 L1910.8 1209.87 L1910.21 1209.87 L1909.63 1209.87 L1909.04 1209.87 L1908.45 1209.87 L1907.87 1209.87 L1907.28 1209.87 L1906.69 1209.87 L1906.11 1209.87 L1905.52 1209.87 L1904.93 1209.87 L1904.35 1209.87 L1903.76 1209.87 L1903.17 1209.87 L1902.59 1209.87 L1902 1209.87 L1901.42 1209.87 L1900.83 1209.87 L1900.24 1209.87 L1899.66 1209.87 L1899.07 1209.87 L1898.48 1209.87 L1897.9 1209.87 L1897.31 1209.87 L1896.72 1209.87 L1896.14 1209.87 L1895.55 1209.87 L1894.96 1209.87 L1894.38 1209.87 L1893.79 1209.87 L1893.21 1209.87 L1892.62 1209.87 L1892.03 1209.87 L1891.45 1209.87 L1890.86 1209.87 L1890.27 1209.87 L1889.69 1209.87 L1889.1 1209.87 L1888.51 1209.87 L1887.93 1209.87 L1887.34 1209.87 L1886.76 1209.87 L1886.17 1209.87 L1885.58 1209.87 L1885 1209.87 L1884.41 1209.87 L1883.82 1209.87 L1883.24 1209.87 L1882.65 1209.87 L1882.06 1209.87 L1881.48 1209.87 L1880.89 1209.87 L1880.3 1209.87 L1879.72 1209.87 L1879.13 1209.87 L1878.55 1209.87 L1877.96 1209.87 L1877.37 1209.87 L1876.79 1209.87 L1876.2 1209.87 L1875.61 1209.87 L1875.03 1209.87 L1874.44 1209.87 L1873.85 1209.87 L1873.27 1209.87 L1872.68 1209.87 L1872.09 1209.87 L1871.51 1209.87 L1870.92 1209.87 L1870.34 1209.87 L1869.75 1209.87 L1869.16 1209.87 L1868.58 1209.87 L1867.99 1209.87 L1867.4 1209.87 L1866.82 1209.87 L1866.23 1209.87 L1865.64 1209.87 L1865.06 1209.87 L1864.47 1209.87 L1863.88 1209.87 L1863.3 1209.87 L1862.71 1209.87 L1862.13 1209.87 L1861.54 1209.87 L1860.95 1209.87 L1860.37 1209.87 L1859.78 1209.87 L1859.19 1209.87 L1858.61 1209.87 L1858.02 1209.87 L1857.43 1209.87 L1856.85 1209.87 L1856.26 1209.87 L1855.68 1209.87 L1855.09 1209.87 L1854.5 1209.87 L1853.92 1209.87 L1853.33 1209.87 L1852.74 1209.87 L1852.16 1209.87 L1851.57 1209.87 L1850.98 1209.87 L1850.4 1209.87 L1849.81 1209.87 L1849.22 1209.87 L1848.64 1209.87 L1848.05 1209.87 L1847.47 1209.87 L1846.88 1209.87 L1846.29 1209.87 L1845.71 1209.87 L1845.12 1209.87 L1844.53 1209.87 L1843.95 1209.87 L1843.36 1209.87 L1842.77 1209.87 L1842.19 1209.87 L1841.6 1209.87 L1841.01 1209.87 L1840.43 1209.87 L1839.84 1209.87 L1839.26 1209.87 L1838.67 1209.87 L1838.08 1209.87 L1837.5 1209.87 L1836.91 1209.87 L1836.32 1209.87 L1835.74 1209.87 L1835.15 1209.87 L1834.56 1209.87 L1833.98 1209.87 L1833.39 1209.87 L1832.81 1209.87 L1832.22 1209.87 L1831.63 1209.87 L1831.05 1209.87 L1830.46 1209.87 L1829.87 1209.87 L1829.29 1209.87 L1828.7 1209.87 L1828.11 1209.87 L1827.53 1209.87 L1826.94 1209.87 L1826.35 1209.87 L1825.77 1209.87 L1825.18 1209.87 L1824.6 1209.87 L1824.01 1209.87 L1823.42 1209.87 L1822.84 1209.87 L1822.25 1209.87 L1821.66 1209.87 L1821.08 1209.87 L1820.49 1209.87 L1819.9 1209.87 L1819.32 1209.87 L1818.73 1209.87 L1818.14 1209.87 L1817.56 1209.87 L1816.97 1209.87 L1816.39 1209.87 L1815.8 1209.87 L1815.21 1209.87 L1814.63 1209.87 L1814.04 1209.87 L1813.45 1209.87 L1812.87 1209.87 L1812.28 1209.87 L1811.69 1209.87 L1811.11 1209.87 L1810.52 1209.87 L1809.94 1209.87 L1809.35 1209.87 L1808.76 1209.87 L1808.18 1209.87 L1807.59 1209.87 L1807 1209.87 L1806.42 1209.87 L1805.83 1209.87 L1805.24 1209.87 L1804.66 1209.87 L1804.07 1209.87 L1803.48 1209.87 L1802.9 1209.87 L1802.31 1209.87 L1801.73 1209.87 L1801.14 1209.87 L1800.55 1209.87 L1799.97 1209.87 L1799.38 1209.87 L1798.79 1209.87 L1798.21 1209.87 L1797.62 1209.87 L1797.03 1209.87 L1796.45 1209.87 L1795.86 1209.87 L1795.27 1209.87 L1794.69 1209.87 L1794.1 1209.87 L1793.52 1209.87 L1792.93 1209.87 L1792.34 1209.87 L1791.76 1209.87 L1791.17 1209.87 L1790.58 1209.87 L1790 1209.87 L1789.41 1209.87 L1788.82 1209.87 L1788.24 1209.87 L1787.65 1209.87 L1787.06 1209.87 L1786.48 1209.87 L1785.89 1209.87 L1785.31 1209.87 L1784.72 1209.87 L1784.13 1209.87 L1783.55 1209.87 L1782.96 1209.87 L1782.37 1209.87 L1781.79 1209.87 L1781.2 1209.87 L1780.61 1209.87 L1780.03 1209.87 L1779.44 1209.87 L1778.86 1209.87 L1778.27 1209.87 L1777.68 1209.87 L1777.1 1209.87 L1776.51 1209.87 L1775.92 1209.87 L1775.34 1209.87 L1774.75 1209.87 L1774.16 1209.87 L1773.58 1209.87 L1772.99 1209.87 L1772.4 1209.87 L1771.82 1209.87 L1771.23 1209.87 L1770.65 1209.87 L1770.06 1209.87 L1769.47 1209.87 L1768.89 1209.87 L1768.3 1209.87 L1767.71 1209.87 L1767.13 1209.87 L1766.54 1209.87 L1765.95 1209.87 L1765.37 1209.87 L1764.78 1209.87 L1764.19 1209.87 L1763.61 1209.87 L1763.02 1209.87 L1762.44 1209.87 L1761.85 1209.87 L1761.26 1209.87 L1760.68 1209.87 L1760.09 1209.87 L1759.5 1209.87 L1758.92 1209.87 L1758.33 1209.87 L1757.74 1209.87 L1757.16 1209.87 L1756.57 1209.87 L1755.99 1209.87 L1755.4 1209.87 L1754.81 1209.87 L1754.23 1209.87 L1753.64 1209.87 L1753.05 1209.87 L1752.47 1209.87 L1751.88 1209.87 L1751.29 1209.87 L1750.71 1209.87 L1750.12 1209.87 L1749.53 1209.87 L1748.95 1209.87 L1748.36 1209.87 L1747.78 1209.87 L1747.19 1209.87 L1746.6 1209.87 L1746.02 1209.87 L1745.43 1209.87 L1744.84 1209.87 L1744.26 1209.87 L1743.67 1209.87 L1743.08 1209.87 L1742.5 1209.87 L1741.91 1209.87 L1741.32 1209.87 L1740.74 1209.87 L1740.15 1209.87 L1739.57 1209.87 L1738.98 1209.87 L1738.39 1209.87 L1737.81 1209.87 L1737.22 1209.87 L1736.63 1209.87 L1736.05 1209.87 L1735.46 1209.87 L1734.87 1209.87 L1734.29 1209.87 L1733.7 1209.87 L1733.11 1209.87 L1732.53 1209.87 L1731.94 1209.87 L1731.36 1209.87 L1730.77 1209.87 L1730.18 1209.87 L1729.6 1209.87 L1729.01 1209.87 L1728.42 1209.87 L1727.84 1209.87 L1727.25 1209.87 L1726.66 1209.87 L1726.08 1209.87 L1725.49 1209.87 L1724.91 1209.87 L1724.32 1209.87 L1723.73 1209.87 L1723.15 1209.87 L1722.56 1209.87 L1721.97 1209.87 L1721.39 1209.87 L1720.8 1209.87 L1720.21 1209.87 L1719.63 1209.87 L1719.04 1209.87 L1718.45 1209.87 L1717.87 1209.87 L1717.28 1209.87 L1716.7 1209.87 L1716.11 1209.87 L1715.52 1209.87 L1714.94 1209.87 L1714.35 1209.87 L1713.76 1209.87 L1713.18 1209.87 L1712.59 1209.87 L1712 1209.87 L1711.42 1209.87 L1710.83 1209.87 L1710.24 1209.87 L1709.66 1209.87 L1709.07 1209.87 L1708.49 1209.87 L1707.9 1209.87 L1707.31 1209.87 L1706.73 1209.87 L1706.14 1209.87 L1705.55 1209.87 L1704.97 1209.87 L1704.38 1209.87 L1703.79 1209.87 L1703.21 1209.87 L1702.62 1209.87 L1702.04 1209.87 L1701.45 1209.87 L1700.86 1209.87 L1700.28 1209.87 L1699.69 1209.87 L1699.1 1209.87 L1698.52 1209.87 L1697.93 1209.87 L1697.34 1209.87 L1696.76 1209.87 L1696.17 1209.87 L1695.58 1209.87 L1695 1209.87 L1694.41 1209.87 L1693.83 1209.87 L1693.24 1209.87 L1692.65 1209.87 L1692.07 1209.87 L1691.48 1209.87 L1690.89 1209.87 L1690.31 1209.87 L1689.72 1209.87 L1689.13 1209.87 L1688.55 1209.87 L1687.96 1209.87 L1687.37 1209.87 L1686.79 1209.87 L1686.2 1209.87 L1685.62 1209.87 L1685.03 1209.87 L1684.44 1209.87 L1683.86 1209.87 L1683.27 1209.87 L1682.68 1209.87 L1682.1 1209.87 L1681.51 1209.87 L1680.92 1209.87 L1680.34 1209.87 L1679.75 1209.87 L1679.17 1209.87 L1678.58 1209.87 L1677.99 1209.87 L1677.41 1209.87 L1676.82 1209.87 L1676.23 1209.87 L1675.65 1209.87 L1675.06 1209.87 L1674.47 1209.87 L1673.89 1209.87 L1673.3 1209.87 L1672.71 1209.87 L1672.13 1209.87 L1671.54 1209.87 L1670.96 1209.87 L1670.37 1209.87 L1669.78 1209.87 L1669.2 1209.87 L1668.61 1209.87 L1668.02 1209.87 L1667.44 1209.87 L1666.85 1209.87 L1666.26 1209.87 L1665.68 1209.87 L1665.09 1209.87 L1664.5 1209.87 L1663.92 1209.87 L1663.33 1209.87 L1662.75 1209.87 L1662.16 1209.87 L1661.57 1209.87 L1660.99 1209.87 L1660.4 1209.87 L1659.81 1209.87 L1659.23 1209.87 L1658.64 1209.87 L1658.05 1209.87 L1657.47 1209.87 L1656.88 1209.87 L1656.29 1209.87 L1655.71 1209.87 L1655.12 1209.87 L1654.54 1209.87 L1653.95 1209.87 L1653.36 1209.87 L1652.78 1209.87 L1652.19 1209.87 L1651.6 1209.87 L1651.02 1209.87 L1650.43 1209.87 L1649.84 1209.87 L1649.26 1209.87 L1648.67 1209.87 L1648.09 1209.87 L1647.5 1209.87 L1646.91 1209.87 L1646.33 1209.87 L1645.74 1209.87 L1645.15 1209.87 L1644.57 1209.87 L1643.98 1209.87 L1643.39 1209.87 L1642.81 1209.87 L1642.22 1209.87 L1641.63 1209.87 L1641.05 1209.87 L1640.46 1209.87 L1639.88 1209.87 L1639.29 1209.87 L1638.7 1209.87 L1638.12 1209.87 L1637.53 1209.87 L1636.94 1209.87 L1636.36 1209.87 L1635.77 1209.87 L1635.18 1209.87 L1634.6 1209.87 L1634.01 1209.87 L1633.42 1209.87 L1632.84 1209.87 L1632.25 1209.87 L1631.67 1209.87 L1631.08 1209.87 L1630.49 1209.87 L1629.91 1209.87 L1629.32 1209.87 L1628.73 1209.87 L1628.15 1209.87 L1627.56 1209.87 L1626.97 1209.87 L1626.39 1209.87 L1625.8 1209.87 L1625.22 1209.87 L1624.63 1209.87 L1624.04 1209.87 L1623.46 1209.87 L1622.87 1209.87 L1622.28 1209.87 L1621.7 1209.87 L1621.11 1209.87 L1620.52 1209.87 L1619.94 1209.87 L1619.35 1209.87 L1618.76 1209.87 L1618.18 1209.87 L1617.59 1209.87 L1617.01 1209.87 L1616.42 1209.87 L1615.83 1209.87 L1615.25 1209.87 L1614.66 1209.87 L1614.07 1209.87 L1613.49 1209.87 L1612.9 1209.87 L1612.31 1209.87 L1611.73 1209.87 L1611.14 1209.87 L1610.55 1209.87 L1609.97 1209.87 L1609.38 1209.87 L1608.8 1209.87 L1608.21 1209.87 L1607.62 1209.87 L1607.04 1209.87 L1606.45 1209.87 L1605.86 1209.87 L1605.28 1209.87 L1604.69 1209.87 L1604.1 1209.87 L1603.52 1209.87 L1602.93 1209.87 L1602.34 1209.87 L1601.76 1209.87 L1601.17 1209.87 L1600.59 1209.87 L1600 1209.87 L1599.41 1209.87 L1598.83 1209.87 L1598.24 1209.87 L1597.65 1209.87 L1597.07 1209.87 L1596.48 1209.87 L1595.89 1209.87 L1595.31 1209.87 L1594.72 1209.87 L1594.14 1209.87 L1593.55 1209.87 L1592.96 1209.87 L1592.38 1209.87 L1591.79 1209.87 L1591.2 1209.87 L1590.62 1209.87 L1590.03 1209.87 L1589.44 1209.87 L1588.86 1209.87 L1588.27 1209.87 L1587.68 1209.87 L1587.1 1209.87 L1586.51 1209.87 L1585.93 1209.87 L1585.34 1209.87 L1584.75 1209.87 L1584.17 1209.87 L1583.58 1209.87 L1582.99 1209.87 L1582.41 1209.87 L1581.82 1209.87 L1581.23 1209.87 L1580.65 1209.87 L1580.06 1209.87 L1579.47 1209.87 L1578.89 1209.87 L1578.3 1209.87 L1577.72 1209.87 L1577.13 1209.87 L1576.54 1209.87 L1575.96 1209.87 L1575.37 1209.87 L1574.78 1209.87 L1574.2 1209.87 L1573.61 1209.87 L1573.02 1209.87 L1572.44 1209.87 L1571.85 1209.87 L1571.27 1209.87 L1570.68 1209.87 L1570.09 1209.87 L1569.51 1209.87 L1568.92 1209.87 L1568.33 1209.87 L1567.75 1209.87 L1567.16 1209.87 L1566.57 1209.87 L1565.99 1209.87 L1565.4 1209.87 L1564.81 1209.87 L1564.23 1209.87 L1563.64 1209.87 L1563.06 1209.87 L1562.47 1209.87 L1561.88 1209.87 L1561.3 1209.87 L1560.71 1209.87 L1560.12 1209.87 L1559.54 1209.87 L1558.95 1209.87 L1558.36 1209.87 L1557.78 1209.87 L1557.19 1209.87 L1556.6 1209.87 L1556.02 1209.87 L1555.43 1209.87 L1554.85 1209.87 L1554.26 1209.87 L1553.67 1209.87 L1553.09 1209.87 L1552.5 1209.87 L1551.91 1209.87 L1551.33 1209.87 L1550.74 1209.87 L1550.15 1209.87 L1549.57 1209.87 L1548.98 1209.87 L1548.4 1209.87 L1547.81 1209.87 L1547.22 1209.87 L1546.64 1209.87 L1546.05 1209.87 L1545.46 1209.87 L1544.88 1209.87 L1544.29 1209.87 L1543.7 1209.87 L1543.12 1209.87 L1542.53 1209.87 L1541.94 1209.87 L1541.36 1209.87 L1540.77 1209.87 L1540.19 1209.87 L1539.6 1209.87 L1539.01 1209.87 L1538.43 1209.87 L1537.84 1209.87 L1537.25 1209.87 L1536.67 1209.87 L1536.08 1209.87 L1535.49 1209.87 L1534.91 1209.87 L1534.32 1209.87 L1533.73 1209.87 L1533.15 1209.87 L1532.56 1209.87 L1531.98 1209.87 L1531.39 1209.87 L1530.8 1209.87 L1530.22 1209.87 L1529.63 1209.87 L1529.04 1209.87 L1528.46 1209.87 L1527.87 1209.87 L1527.28 1209.87 L1526.7 1209.87 L1526.11 1209.87 L1525.52 1209.87 L1524.94 1209.87 L1524.35 1209.87 L1523.77 1209.87 L1523.18 1209.87 L1522.59 1209.87 L1522.01 1209.87 L1521.42 1209.87 L1520.83 1209.87 L1520.25 1209.87 L1519.66 1209.87 L1519.07 1209.87 L1518.49 1209.87 L1517.9 1209.87 L1517.32 1209.87 L1516.73 1209.87 L1516.14 1209.87 L1515.56 1209.87 L1514.97 1209.87 L1514.38 1209.87 L1513.8 1209.87 L1513.21 1209.87 L1512.62 1209.87 L1512.04 1209.87 L1511.45 1209.87 L1510.86 1209.87 L1510.28 1209.87 L1509.69 1209.87 L1509.11 1209.87 L1508.52 1209.87 L1507.93 1209.87 L1507.35 1209.87 L1506.76 1209.87 L1506.17 1209.87 L1505.59 1209.87 L1505 1209.87 L1504.41 1209.87 L1503.83 1209.87 L1503.24 1209.87 L1502.65 1209.87 L1502.07 1209.87 L1501.48 1209.87 L1500.9 1209.87 L1500.31 1209.87 L1499.72 1209.87 L1499.14 1209.87 L1498.55 1209.87 L1497.96 1209.87 L1497.38 1209.87 L1496.79 1209.87 L1496.2 1209.87 L1495.62 1209.87 L1495.03 1209.87 L1494.45 1209.87 L1493.86 1209.87 L1493.27 1209.87 L1492.69 1209.87 L1492.1 1209.87 L1491.51 1209.87 L1490.93 1209.87 L1490.34 1209.87 L1489.75 1209.87 L1489.17 1209.87 L1488.58 1209.87 L1487.99 1209.87 L1487.41 1209.87 L1486.82 1209.87 L1486.24 1209.87 L1485.65 1209.87 L1485.06 1209.87 L1484.48 1209.87 L1483.89 1209.87 L1483.3 1209.87 L1482.72 1209.87 L1482.13 1209.87 L1481.54 1209.87 L1480.96 1209.87 L1480.37 1209.87 L1479.78 1209.87 L1479.2 1209.87 L1478.61 1209.87 L1478.03 1209.87 L1477.44 1209.87 L1476.85 1209.87 L1476.27 1209.87 L1475.68 1209.87 L1475.09 1209.87 L1474.51 1209.87 L1473.92 1209.87 L1473.33 1209.87 L1472.75 1209.87 L1472.16 1209.87 L1471.57 1209.87 L1470.99 1209.87 L1470.4 1209.87 L1469.82 1209.87 L1469.23 1209.87 L1468.64 1209.87 L1468.06 1209.87 L1467.47 1209.87 L1466.88 1209.87 L1466.3 1209.87 L1465.71 1209.87 L1465.12 1209.87 L1464.54 1209.87 L1463.95 1209.87 L1463.37 1209.87 L1462.78 1209.87 L1462.19 1209.87 L1461.61 1209.87 L1461.02 1209.87 L1460.43 1209.87 L1459.85 1209.87 L1459.26 1209.87 L1458.67 1209.87 L1458.09 1209.87 L1457.5 1209.87 L1456.91 1209.87 L1456.33 1209.87 L1455.74 1209.87 L1455.16 1209.87 L1454.57 1209.87 L1453.98 1209.87 L1453.4 1209.87 L1452.81 1209.87 L1452.22 1209.87 L1451.64 1209.87 L1451.05 1209.87 L1450.46 1209.87 L1449.88 1209.87 L1449.29 1209.87 L1448.7 1209.87 L1448.12 1209.87 L1447.53 1209.87 L1446.95 1209.87 L1446.36 1209.87 L1445.77 1209.87 L1445.19 1209.87 L1444.6 1209.87 L1444.01 1209.87 L1443.43 1209.87 L1442.84 1209.87 L1442.25 1209.87 L1441.67 1209.87 L1441.08 1209.87 L1440.5 1209.87 L1439.91 1209.87 L1439.32 1209.87 L1438.74 1209.87 L1438.15 1209.87 L1437.56 1209.87 L1436.98 1209.87 L1436.39 1209.87 L1435.8 1209.87 L1435.22 1209.87 L1434.63 1209.87 L1434.04 1209.87 L1433.46 1209.87 L1432.87 1209.87 L1432.29 1209.87 L1431.7 1209.87 L1431.11 1209.87 L1430.53 1209.87 L1429.94 1209.87 L1429.35 1209.87 L1428.77 1209.87 L1428.18 1209.87 L1427.59 1209.87 L1427.01 1209.87 L1426.42 1209.87 L1425.83 1209.87 L1425.25 1209.87 L1424.66 1209.87 L1424.08 1209.87 L1423.49 1209.87 L1422.9 1209.87 L1422.32 1209.87 L1421.73 1209.87 L1421.14 1209.87 L1420.56 1209.87 L1419.97 1209.87 L1419.38 1209.87 L1418.8 1209.87 L1418.21 1209.87 L1417.63 1209.87 L1417.04 1209.87 L1416.45 1209.87 L1415.87 1209.87 L1415.28 1209.87 L1414.69 1209.87 L1414.11 1209.87 L1413.52 1209.87 L1412.93 1209.87 L1412.35 1209.87 L1411.76 1209.87 L1411.17 1209.87 L1410.59 1209.87 L1410 1209.87 L1409.42 1209.87 L1408.83 1209.87 L1408.24 1209.87 L1407.66 1209.87 L1407.07 1209.87 L1406.48 1209.87 L1405.9 1209.87 L1405.31 1209.87 L1404.72 1209.87 L1404.14 1209.87 L1403.55 1209.87 L1402.96 1209.87 L1402.38 1209.87 L1401.79 1209.87 L1401.21 1209.87 L1400.62 1209.87 L1400.03 1209.87 L1399.45 1209.87 L1398.86 1209.87 L1398.27 1209.87 L1397.69 1209.87 L1397.1 1209.87 L1396.51 1209.87 L1395.93 1209.87 L1395.34 1209.87 L1394.75 1209.87 L1394.17 1209.87 L1393.58 1209.87 L1393 1209.87 L1392.41 1209.87 L1391.82 1209.87 L1391.24 1209.87 L1390.65 1209.87 L1390.06 1209.87 L1389.48 1209.87 L1388.89 1209.87 L1388.3 1209.87 L1387.72 1209.87 L1387.13 1209.87 L1386.55 1209.87 L1385.96 1209.87 L1385.37 1209.87 L1384.79 1209.87 L1384.2 1209.87 L1383.61 1209.87 L1383.03 1209.87 L1382.44 1209.87 L1381.85 1209.87 L1381.27 1209.87 L1380.68 1209.87 L1380.09 1209.87 L1379.51 1209.87 L1378.92 1209.87 L1378.34 1209.87 L1377.75 1209.87 L1377.16 1209.87 L1376.58 1209.87 L1375.99 1209.87 L1375.4 1209.87 L1374.82 1209.87 L1374.23 1209.87 L1373.64 1209.87 L1373.06 1209.87 L1372.47 1209.87 L1371.88 1209.87 L1371.3 1209.87 L1370.71 1209.87 L1370.13 1209.87 L1369.54 1209.87 L1368.95 1209.87 L1368.37 1209.87 L1367.78 1209.87 L1367.19 1209.87 L1366.61 1209.87 L1366.02 1209.87 L1365.43 1209.87 L1364.85 1209.87 L1364.26 1209.87 L1363.68 1209.87 L1363.09 1209.87 L1362.5 1209.87 L1361.92 1209.87 L1361.33 1209.87 L1360.74 1209.87 L1360.16 1209.87 L1359.57 1209.87 L1358.98 1209.87 L1358.4 1209.87 L1357.81 1209.87 L1357.22 1209.87 L1356.64 1209.87 L1356.05 1209.87 L1355.47 1209.87 L1354.88 1209.87 L1354.29 1209.87 L1353.71 1209.87 L1353.12 1209.87 L1352.53 1209.87 L1351.95 1209.87 L1351.36 1209.87 L1350.77 1209.87 L1350.19 1209.87 L1349.6 1209.87 L1349.01 1209.87 L1348.43 1209.87 L1347.84 1209.87 L1347.26 1209.87 L1346.67 1209.87 L1346.08 1209.87 L1345.5 1209.87 L1344.91 1209.87 L1344.32 1209.87 L1343.74 1209.87 L1343.15 1209.87 L1342.56 1209.87 L1341.98 1209.87 L1341.39 1209.87 L1340.8 1209.87 L1340.22 1209.87 L1339.63 1209.87 L1339.05 1209.87 L1338.46 1209.87 L1337.87 1209.87 L1337.29 1209.87 L1336.7 1209.87 L1336.11 1209.87 L1335.53 1209.87 L1334.94 1209.87 L1334.35 1209.87 L1333.77 1209.87 L1333.18 1209.87 L1332.6 1209.87 L1332.01 1209.87 L1331.42 1209.87 L1330.84 1209.87 L1330.25 1209.87 L1329.66 1209.87 L1329.08 1209.87 L1328.49 1209.87 L1327.9 1209.87 L1327.32 1209.87 L1326.73 1209.87 L1326.14 1209.87 L1325.56 1209.87 L1324.97 1209.87 L1324.39 1209.87 L1323.8 1209.87 L1323.21 1209.87 L1322.63 1209.87 L1322.04 1209.87 L1321.45 1209.87 L1320.87 1209.87 L1320.28 1209.87 L1319.69 1209.87 L1319.11 1209.87 L1318.52 1209.87 L1317.93 1209.87 L1317.35 1209.87 L1316.76 1209.87 L1316.18 1209.87 L1315.59 1209.87 L1315 1209.87 L1314.42 1209.87 L1313.83 1209.87 L1313.24 1209.87 L1312.66 1209.87 L1312.07 1209.87 L1311.48 1209.87 L1310.9 1209.87 L1310.31 1209.87 L1309.73 1209.87 L1309.14 1209.87 L1308.55 1209.87 L1307.97 1209.87 L1307.38 1209.87 L1306.79 1209.87 L1306.21 1209.87 L1305.62 1209.87 L1305.03 1209.87 L1304.45 1209.87 L1303.86 1209.87 L1303.27 1209.87 L1302.69 1209.87 L1302.1 1209.87 L1301.52 1209.87 L1300.93 1209.87 L1300.34 1209.87 L1299.76 1209.87 L1299.17 1209.87 L1298.58 1209.87 L1298 1209.87 L1297.41 1209.87 L1296.82 1209.87 L1296.24 1209.87 L1295.65 1209.87 L1295.06 1209.87 L1294.48 1209.87 L1293.89 1209.87 L1293.31 1209.87 L1292.72 1209.87 L1292.13 1209.87 L1291.55 1209.87 L1290.96 1209.87 L1290.37 1209.87 L1289.79 1209.87 L1289.2 1209.87 L1288.61 1209.87 L1288.03 1209.87 L1287.44 1209.87 L1286.86 1209.87 L1286.27 1209.87 L1285.68 1209.87 L1285.1 1209.87 L1284.51 1209.87 L1283.92 1209.87 L1283.34 1209.87 L1282.75 1209.87 L1282.16 1209.87 L1281.58 1209.87 L1280.99 1209.87 L1280.4 1209.87 L1279.82 1209.87 L1279.23 1209.87 L1278.65 1209.87 L1278.06 1209.87 L1277.47 1209.87 L1276.89 1209.87 L1276.3 1209.87 L1275.71 1209.87 L1275.13 1209.87 L1274.54 1209.87 L1273.95 1209.87 L1273.37 1209.87 L1272.78 1209.87 L1272.19 1209.87 L1271.61 1209.87 L1271.02 1209.87 L1270.44 1209.87 L1269.85 1209.87 L1269.26 1209.87 L1268.68 1209.87 L1268.09 1209.87 L1267.5 1209.87 L1266.92 1209.87 L1266.33 1209.87 L1265.74 1209.87 L1265.16 1209.87 L1264.57 1209.87 L1263.98 1209.87 L1263.4 1209.87 L1262.81 1209.87 L1262.23 1209.87 L1261.64 1209.87 L1261.05 1209.87 L1260.47 1209.87 L1259.88 1209.87 L1259.29 1209.87 L1258.71 1209.87 L1258.12 1209.87 L1257.53 1209.87 L1256.95 1209.87 L1256.36 1209.87 L1255.78 1209.87 L1255.19 1209.87 L1254.6 1209.87 L1254.02 1209.87 L1253.43 1209.87 L1252.84 1209.87 L1252.26 1209.87 L1251.67 1209.87 L1251.08 1209.87 L1250.5 1209.87 L1249.91 1209.87 L1249.32 1209.87 L1248.74 1209.87 L1248.15 1209.87 L1247.57 1209.87 L1246.98 1209.87 L1246.39 1209.87 L1245.81 1209.87 L1245.22 1209.87 L1244.63 1209.87 L1244.05 1209.87 L1243.46 1209.87 L1242.87 1209.87 L1242.29 1209.87 L1241.7 1209.87 L1241.11 1209.87 L1240.53 1209.87 L1239.94 1209.87 L1239.36 1209.87 L1238.77 1209.87 L1238.18 1209.87 L1237.6 1209.87 L1237.01 1209.87 L1236.42 1209.87 L1235.84 1209.87 L1235.25 1209.87 L1234.66 1209.87 L1234.08 1209.87 L1233.49 1209.87 L1232.91 1209.87 L1232.32 1209.87 L1231.73 1209.87 L1231.15 1209.87 L1230.56 1209.87 L1229.97 1209.87 L1229.39 1209.87 L1228.8 1209.87 L1228.21 1209.87 L1227.63 1209.87 L1227.04 1209.87 L1226.45 1209.87 L1225.87 1209.87 L1225.28 1209.87 L1224.7 1209.87 L1224.11 1209.87 L1223.52 1209.87 L1222.94 1209.87 L1222.35 1209.87 L1221.76 1209.87 L1221.18 1209.87 L1220.59 1209.87 L1220 1209.87 L1219.42 1209.87 L1218.83 1209.87 L1218.24 1209.87 L1217.66 1209.87 L1217.07 1209.87 L1216.49 1209.87 L1215.9 1209.87 L1215.31 1209.87 L1214.73 1209.87 L1214.14 1209.87 L1213.55 1209.87 L1212.97 1209.87 L1212.38 1209.87 L1211.79 1209.87 L1211.21 1209.87 L1210.62 1209.87 L1210.03 1209.87 L1209.45 1209.87 L1208.86 1209.87 L1208.28 1209.87 L1207.69 1209.87 L1207.1 1209.87 L1206.52 1209.87 L1205.93 1209.87 L1205.34 1209.87 L1204.76 1209.87 L1204.17 1209.87 L1203.58 1209.87 L1203 1209.87 L1202.41 1209.87 L1201.83 1209.87 L1201.24 1209.87 L1200.65 1209.87 L1200.07 1209.87 L1199.48 1209.87 L1198.89 1209.87 L1198.31 1209.87 L1197.72 1209.87 L1197.13 1209.87 L1196.55 1209.87 L1195.96 1209.87 L1195.37 1209.87 L1194.79 1209.87 L1194.2 1209.87 L1193.62 1209.87 L1193.03 1209.87 L1192.44 1209.87 L1191.86 1209.87 L1191.27 1209.87 L1190.68 1209.87 L1190.1 1209.87 L1189.51 1209.87 L1188.92 1209.87 L1188.34 1209.87 L1187.75 1209.87 L1187.16 1209.87 L1186.58 1209.87 L1185.99 1209.87 L1185.41 1209.87 L1184.82 1209.87 L1184.23 1209.87 L1183.65 1209.87 L1183.06 1209.87 L1182.47 1209.87 L1181.89 1209.87 L1181.3 1209.87 L1180.71 1209.87 L1180.13 1209.87 L1179.54 1209.87 L1178.96 1209.87 L1178.37 1209.87 L1177.78 1209.87 L1177.2 1209.87 L1176.61 1209.87 L1176.02 1209.87 L1175.44 1209.87 L1174.85 1209.87 L1174.26 1209.87 L1173.68 1209.87 L1173.09 1209.87 L1172.5 1209.87 L1171.92 1209.87 L1171.33 1209.87 L1170.75 1209.87 L1170.16 1209.87 L1169.57 1209.87 L1168.99 1209.87 L1168.4 1209.87 L1167.81 1209.87 L1167.23 1209.87 L1166.64 1209.87 L1166.05 1209.87 L1165.47 1209.87 L1164.88 1209.87 L1164.29 1209.87 L1163.71 1209.87 L1163.12 1209.87 L1162.54 1209.87 L1161.95 1209.87 L1161.36 1209.87 L1160.78 1209.87 L1160.19 1209.87 L1159.6 1209.87 L1159.02 1209.87 L1158.43 1209.87 L1157.84 1209.87 L1157.26 1209.87 L1156.67 1209.87 L1156.09 1209.87 L1155.5 1209.87 L1154.91 1209.87 L1154.33 1209.87 L1153.74 1209.87 L1153.15 1209.87 L1152.57 1209.87 L1151.98 1209.87 L1151.39 1209.87 L1150.81 1209.87 L1150.22 1209.87 L1149.63 1209.87 L1149.05 1209.87 L1148.46 1209.87 L1147.88 1209.87 L1147.29 1209.87 L1146.7 1209.87 L1146.12 1209.87 L1145.53 1209.87 L1144.94 1209.87 L1144.36 1209.87 L1143.77 1209.87 L1143.18 1209.87 L1142.6 1209.87 L1142.01 1209.87 L1141.42 1209.87 L1140.84 1209.87 L1140.25 1209.87 L1139.67 1209.87 L1139.08 1209.87 L1138.49 1209.87 L1137.91 1209.87 L1137.32 1209.87 L1136.73 1209.87 L1136.15 1209.87 L1135.56 1209.87 L1134.97 1209.87 L1134.39 1209.87 L1133.8 1209.87 L1133.21 1209.87 L1132.63 1209.87 L1132.04 1209.87 L1131.46 1209.87 L1130.87 1209.87 L1130.28 1209.87 L1129.7 1209.87 L1129.11 1209.87 L1128.52 1209.87 L1127.94 1209.87 L1127.35 1209.87 L1126.76 1209.87 L1126.18 1209.87 L1125.59 1209.87 L1125.01 1209.87 L1124.42 1209.87 L1123.83 1209.87 L1123.25 1209.87 L1122.66 1209.87 L1122.07 1209.87 L1121.49 1209.87 L1120.9 1209.87 L1120.31 1209.87 L1119.73 1209.87 L1119.14 1209.87 L1118.55 1209.87 L1117.97 1209.87 L1117.38 1209.87 L1116.8 1209.87 L1116.21 1209.87 L1115.62 1209.87 L1115.04 1209.87 L1114.45 1209.87 L1113.86 1209.87 L1113.28 1209.87 L1112.69 1209.87 L1112.1 1209.87 L1111.52 1209.87 L1110.93 1209.87 L1110.34 1209.87 L1109.76 1209.87 L1109.17 1209.87 L1108.59 1209.87 L1108 1209.87 L1107.41 1209.87 L1106.83 1209.87 L1106.24 1209.87 L1105.65 1209.87 L1105.07 1209.87 L1104.48 1209.87 L1103.89 1209.87 L1103.31 1209.87 L1102.72 1209.87 L1102.14 1209.87 L1101.55 1209.87 L1100.96 1209.87 L1100.38 1209.87 L1099.79 1209.87 L1099.2 1209.87 L1098.62 1209.87 L1098.03 1209.87 L1097.44 1209.87 L1096.86 1209.87 L1096.27 1209.87 L1095.68 1209.87 L1095.1 1209.87 L1094.51 1209.87 L1093.93 1209.87 L1093.34 1209.87 L1092.75 1209.87 L1092.17 1209.87 L1091.58 1209.87 L1090.99 1209.87 L1090.41 1209.87 L1089.82 1209.87 L1089.23 1209.87 L1088.65 1209.87 L1088.06 1209.87 L1087.47 1209.87 L1086.89 1209.87 L1086.3 1209.87 L1085.72 1209.87 L1085.13 1209.87 L1084.54 1209.87 L1083.96 1209.87 L1083.37 1209.87 L1082.78 1209.87 L1082.2 1209.87 L1081.61 1209.87 L1081.02 1209.87 L1080.44 1209.87 L1079.85 1209.87 L1079.26 1209.87 L1078.68 1209.87 L1078.09 1209.87 L1077.51 1209.87 L1076.92 1209.87 L1076.33 1209.87 L1075.75 1209.87 L1075.16 1209.87 L1074.57 1209.87 L1073.99 1209.87 L1073.4 1209.87 L1072.81 1209.87 L1072.23 1209.87 L1071.64 1209.87 L1071.06 1209.87 L1070.47 1209.87 L1069.88 1209.87 L1069.3 1209.87 L1068.71 1209.87 L1068.12 1209.87 L1067.54 1209.87 L1066.95 1209.87 L1066.36 1209.87 L1065.78 1209.87 L1065.19 1209.87 L1064.6 1209.87 L1064.02 1209.87 L1063.43 1209.87 L1062.85 1209.87 L1062.26 1209.87 L1061.67 1209.87 L1061.09 1209.87 L1060.5 1209.87 L1059.91 1209.87 L1059.33 1209.87 L1058.74 1209.87 L1058.15 1209.87 L1057.57 1209.87 L1056.98 1209.87 L1056.39 1209.87 L1055.81 1209.87 L1055.22 1209.87 L1054.64 1209.87 L1054.05 1209.87 L1053.46 1209.87 L1052.88 1209.87 L1052.29 1209.87 L1051.7 1209.87 L1051.12 1209.87 L1050.53 1209.87 L1049.94 1209.87 L1049.36 1209.87 L1048.77 1209.87 L1048.19 1209.87 L1047.6 1209.87 L1047.01 1209.87 L1046.43 1209.87 L1045.84 1209.87 L1045.25 1209.87 L1044.67 1209.87 L1044.08 1209.87 L1043.49 1209.87 L1042.91 1209.87 L1042.32 1209.87 L1041.73 1209.87 L1041.15 1209.87 L1040.56 1209.87 L1039.98 1209.87 L1039.39 1209.87 L1038.8 1209.87 L1038.22 1209.87 L1037.63 1209.87 L1037.04 1209.87 L1036.46 1209.87 L1035.87 1209.87 L1035.28 1209.87 L1034.7 1209.87 L1034.11 1209.87 L1033.52 1209.87 L1032.94 1209.87 L1032.35 1209.87 L1031.77 1209.87 L1031.18 1209.87 L1030.59 1209.87 L1030.01 1209.87 L1029.42 1209.87 L1028.83 1209.87 L1028.25 1209.87 L1027.66 1209.87 L1027.07 1209.87 L1026.49 1209.87 L1025.9 1209.87 L1025.32 1209.87 L1024.73 1209.87 L1024.14 1209.87 L1023.56 1209.87 L1022.97 1209.87 L1022.38 1209.87 L1021.8 1209.87 L1021.21 1209.87 L1020.62 1209.87 L1020.04 1209.87 L1019.45 1209.87 L1018.86 1209.87 L1018.28 1209.87 L1017.69 1209.87 L1017.11 1209.87 L1016.52 1209.87 L1015.93 1209.87 L1015.35 1209.87 L1014.76 1209.87 L1014.17 1209.87 L1013.59 1209.87 L1013 1209.87 L1012.41 1209.87 L1011.83 1209.87 L1011.24 1209.87 L1010.65 1209.87 L1010.07 1209.87 L1009.48 1209.87 L1008.9 1209.87 L1008.31 1209.87 L1007.72 1209.87 L1007.14 1209.87 L1006.55 1209.87 L1005.96 1209.87 L1005.38 1209.87 L1004.79 1209.87 L1004.2 1209.87 L1003.62 1209.87 L1003.03 1209.87 L1002.44 1209.87 L1001.86 1209.87 L1001.27 1209.87 L1000.69 1209.87 L1000.1 1209.87 L999.513 1209.87 L998.926 1209.87 L998.34 1209.87 L997.754 1209.87 L997.167 1209.87 L996.581 1209.87 L995.994 1209.87 L995.408 1209.87 L994.822 1209.87 L994.235 1209.87 L993.649 1209.87 L993.062 1209.87 L992.476 1209.87 L991.889 1209.87 L991.303 1209.87 L990.717 1209.87 L990.13 1209.87 L989.544 1209.87 L988.957 1209.87 L988.371 1209.87 L987.785 1209.87 L987.198 1209.87 L986.612 1209.87 L986.025 1209.87  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.93 986.612,1209.93 987.198,1209.93 987.785,1209.93 988.371,1209.93 988.957,1209.93 989.544,1209.93 990.13,1209.93 990.717,1209.93 991.303,1209.93 991.889,1209.93 992.476,1209.93 993.062,1209.93 993.649,1209.93 994.235,1209.93 994.822,1209.93 995.408,1209.93 995.994,1209.93 996.581,1209.93 997.167,1209.93 997.754,1209.93 998.34,1209.93 998.926,1209.93 999.513,1209.93 1000.1,1209.93 1000.69,1209.93 1001.27,1209.93 1001.86,1209.93 1002.44,1209.93 1003.03,1209.93 1003.62,1209.93 1004.2,1209.93 1004.79,1209.93 1005.38,1209.93 1005.96,1209.93 1006.55,1209.93 1007.14,1209.93 1007.72,1209.93 1008.31,1209.93 1008.9,1209.93 1009.48,1209.93 1010.07,1209.93 1010.65,1209.93 1011.24,1209.93 1011.83,1209.93 1012.41,1209.93 1013,1209.93 1013.59,1209.93 1014.17,1209.93 1014.76,1209.93 1015.35,1209.93 1015.93,1209.93 1016.52,1209.93 1017.11,1209.93 1017.69,1209.93 1018.28,1209.93 1018.86,1209.93 1019.45,1209.93 1020.04,1209.93 1020.62,1209.93 1021.21,1209.93 1021.8,1209.93 1022.38,1209.93 1022.97,1209.93 1023.56,1209.93 1024.14,1209.93 1024.73,1209.93 1025.32,1209.93 1025.9,1209.93 1026.49,1209.93 1027.07,1209.93 1027.66,1209.93 1028.25,1209.93 1028.83,1209.93 1029.42,1209.93 1030.01,1209.93 1030.59,1209.93 1031.18,1209.93 1031.77,1209.93 1032.35,1209.93 1032.94,1209.93 1033.52,1209.93 1034.11,1209.93 1034.7,1209.93 1035.28,1209.93 1035.87,1209.93 1036.46,1209.93 1037.04,1209.93 1037.63,1209.93 1038.22,1209.93 1038.8,1209.93 1039.39,1209.93 1039.98,1209.93 1040.56,1209.93 1041.15,1209.93 1041.73,1209.93 1042.32,1209.93 1042.91,1209.93 1043.49,1209.93 1044.08,1209.93 1044.67,1209.93 1045.25,1209.93 1045.84,1209.93 1046.43,1209.93 1047.01,1209.93 1047.6,1209.93 1048.19,1209.93 1048.77,1209.93 1049.36,1209.93 1049.94,1209.93 1050.53,1209.93 1051.12,1209.93 1051.7,1209.93 1052.29,1209.93 1052.88,1209.93 1053.46,1209.93 1054.05,1209.93 1054.64,1209.93 1055.22,1209.93 1055.81,1209.93 1056.39,1209.93 1056.98,1209.93 1057.57,1209.93 1058.15,1209.93 1058.74,1209.93 1059.33,1209.93 1059.91,1209.93 1060.5,1209.93 1061.09,1209.93 1061.67,1209.93 1062.26,1209.93 1062.85,1209.93 1063.43,1209.93 1064.02,1209.93 1064.6,1209.93 1065.19,1209.93 1065.78,1209.93 1066.36,1209.93 1066.95,1209.93 1067.54,1209.93 1068.12,1209.93 1068.71,1209.93 1069.3,1209.93 1069.88,1209.93 1070.47,1209.93 1071.06,1209.93 1071.64,1209.93 1072.23,1209.93 1072.81,1209.93 1073.4,1209.93 1073.99,1209.93 1074.57,1209.93 1075.16,1209.93 1075.75,1209.93 1076.33,1209.93 1076.92,1209.93 1077.51,1209.93 1078.09,1209.93 1078.68,1209.93 1079.26,1209.93 1079.85,1209.93 1080.44,1209.93 1081.02,1209.93 1081.61,1209.93 1082.2,1209.93 1082.78,1209.93 1083.37,1209.93 1083.96,1209.93 1084.54,1209.93 1085.13,1209.93 1085.72,1209.93 1086.3,1209.93 1086.89,1209.93 1087.47,1209.93 1088.06,1209.93 1088.65,1209.93 1089.23,1209.93 1089.82,1209.93 1090.41,1209.93 1090.99,1209.93 1091.58,1209.93 1092.17,1209.93 1092.75,1209.93 1093.34,1209.93 1093.93,1209.93 1094.51,1209.93 1095.1,1209.93 1095.68,1209.93 1096.27,1209.93 1096.86,1209.93 1097.44,1209.93 1098.03,1209.93 1098.62,1209.93 1099.2,1209.93 1099.79,1209.93 1100.38,1209.93 1100.96,1209.93 1101.55,1209.93 1102.14,1209.93 1102.72,1209.93 1103.31,1209.93 1103.89,1209.93 1104.48,1209.93 1105.07,1209.93 1105.65,1209.93 1106.24,1209.93 1106.83,1209.93 1107.41,1209.93 1108,1209.93 1108.59,1209.93 1109.17,1209.93 1109.76,1209.93 1110.34,1209.93 1110.93,1209.93 1111.52,1209.93 1112.1,1209.93 1112.69,1209.93 1113.28,1209.93 1113.86,1209.93 1114.45,1209.93 1115.04,1209.93 1115.62,1209.93 1116.21,1209.93 1116.8,1209.93 1117.38,1209.93 1117.97,1209.93 1118.55,1209.93 1119.14,1209.93 1119.73,1209.93 1120.31,1209.93 1120.9,1209.93 1121.49,1209.93 1122.07,1209.93 1122.66,1209.93 1123.25,1209.93 1123.83,1209.93 1124.42,1209.93 1125.01,1209.93 1125.59,1209.93 1126.18,1209.93 1126.76,1209.93 1127.35,1209.93 1127.94,1209.93 1128.52,1209.93 1129.11,1209.93 1129.7,1209.93 1130.28,1209.93 1130.87,1209.93 1131.46,1209.93 1132.04,1209.93 1132.63,1209.93 1133.21,1209.93 1133.8,1209.93 1134.39,1209.93 1134.97,1209.93 1135.56,1209.93 1136.15,1209.93 1136.73,1209.93 1137.32,1209.93 1137.91,1209.93 1138.49,1209.93 1139.08,1209.93 1139.67,1209.93 1140.25,1209.93 1140.84,1209.93 1141.42,1209.93 1142.01,1209.93 1142.6,1209.93 1143.18,1209.93 1143.77,1209.93 1144.36,1209.93 1144.94,1209.93 1145.53,1209.93 1146.12,1209.93 1146.7,1209.93 1147.29,1209.93 1147.88,1209.93 1148.46,1209.93 1149.05,1209.93 1149.63,1209.93 1150.22,1209.93 1150.81,1209.93 1151.39,1209.93 1151.98,1209.93 1152.57,1209.93 1153.15,1209.93 1153.74,1209.93 1154.33,1209.93 1154.91,1209.93 1155.5,1209.93 1156.09,1209.93 1156.67,1209.93 1157.26,1209.93 1157.84,1209.93 1158.43,1209.93 1159.02,1209.93 1159.6,1209.93 1160.19,1209.93 1160.78,1209.93 1161.36,1209.93 1161.95,1209.93 1162.54,1209.93 1163.12,1209.93 1163.71,1209.93 1164.29,1209.93 1164.88,1209.93 1165.47,1209.93 1166.05,1209.93 1166.64,1209.93 1167.23,1209.93 1167.81,1209.93 1168.4,1209.93 1168.99,1209.93 1169.57,1209.93 1170.16,1209.93 1170.75,1209.93 1171.33,1209.93 1171.92,1209.93 1172.5,1209.93 1173.09,1209.93 1173.68,1209.93 1174.26,1209.93 1174.85,1209.93 1175.44,1209.93 1176.02,1209.93 1176.61,1209.93 1177.2,1209.93 1177.78,1209.93 1178.37,1209.93 1178.96,1209.93 1179.54,1209.93 1180.13,1209.93 1180.71,1209.93 1181.3,1209.93 1181.89,1209.93 1182.47,1209.93 1183.06,1209.93 1183.65,1209.93 1184.23,1209.93 1184.82,1209.93 1185.41,1209.93 1185.99,1209.93 1186.58,1209.93 1187.16,1209.93 1187.75,1209.93 1188.34,1209.93 1188.92,1209.93 1189.51,1209.93 1190.1,1209.93 1190.68,1209.93 1191.27,1209.93 1191.86,1209.93 1192.44,1209.93 1193.03,1209.93 1193.62,1209.93 1194.2,1209.93 1194.79,1209.93 1195.37,1209.93 1195.96,1209.93 1196.55,1209.93 1197.13,1209.93 1197.72,1209.93 1198.31,1209.93 1198.89,1209.93 1199.48,1209.93 1200.07,1209.93 1200.65,1209.93 1201.24,1209.93 1201.83,1209.93 1202.41,1209.93 1203,1209.93 1203.58,1209.93 1204.17,1209.93 1204.76,1209.93 1205.34,1209.93 1205.93,1209.93 1206.52,1209.93 1207.1,1209.93 1207.69,1209.93 1208.28,1209.93 1208.86,1209.93 1209.45,1209.93 1210.03,1209.93 1210.62,1209.93 1211.21,1209.93 1211.79,1209.93 1212.38,1209.93 1212.97,1209.93 1213.55,1209.93 1214.14,1209.93 1214.73,1209.93 1215.31,1209.93 1215.9,1209.93 1216.49,1209.93 1217.07,1209.93 1217.66,1209.93 1218.24,1209.93 1218.83,1209.93 1219.42,1209.93 1220,1209.93 1220.59,1209.93 1221.18,1209.93 1221.76,1209.93 1222.35,1209.93 1222.94,1209.93 1223.52,1209.93 1224.11,1209.93 1224.7,1209.93 1225.28,1209.93 1225.87,1209.93 1226.45,1209.93 1227.04,1209.93 1227.63,1209.93 1228.21,1209.93 1228.8,1209.93 1229.39,1209.93 1229.97,1209.93 1230.56,1209.93 1231.15,1209.93 1231.73,1209.93 1232.32,1209.93 1232.91,1209.93 1233.49,1209.93 1234.08,1209.93 1234.66,1209.93 1235.25,1209.93 1235.84,1209.93 1236.42,1209.93 1237.01,1209.93 1237.6,1209.93 1238.18,1209.93 1238.77,1209.93 1239.36,1209.93 1239.94,1209.93 1240.53,1209.93 1241.11,1209.93 1241.7,1209.93 1242.29,1209.93 1242.87,1209.93 1243.46,1209.93 1244.05,1209.93 1244.63,1209.93 1245.22,1209.93 1245.81,1209.93 1246.39,1209.93 1246.98,1209.93 1247.57,1209.93 1248.15,1209.93 1248.74,1209.93 1249.32,1209.93 1249.91,1209.93 1250.5,1209.93 1251.08,1209.93 1251.67,1209.93 1252.26,1209.93 1252.84,1209.93 1253.43,1209.93 1254.02,1209.93 1254.6,1209.93 1255.19,1209.93 1255.78,1209.93 1256.36,1209.93 1256.95,1209.93 1257.53,1209.93 1258.12,1209.93 1258.71,1209.93 1259.29,1209.93 1259.88,1209.93 1260.47,1209.93 1261.05,1209.93 1261.64,1209.93 1262.23,1209.93 1262.81,1209.93 1263.4,1209.93 1263.98,1209.93 1264.57,1209.93 1265.16,1209.93 1265.74,1209.93 1266.33,1209.93 1266.92,1209.93 1267.5,1209.93 1268.09,1209.93 1268.68,1209.93 1269.26,1209.93 1269.85,1209.93 1270.44,1209.93 1271.02,1209.93 1271.61,1209.93 1272.19,1209.93 1272.78,1209.93 1273.37,1209.93 1273.95,1209.93 1274.54,1209.93 1275.13,1209.93 1275.71,1209.93 1276.3,1209.93 1276.89,1209.93 1277.47,1209.93 1278.06,1209.93 1278.65,1209.93 1279.23,1209.93 1279.82,1209.93 1280.4,1209.93 1280.99,1209.93 1281.58,1209.93 1282.16,1209.93 1282.75,1209.93 1283.34,1209.93 1283.92,1209.93 1284.51,1209.93 1285.1,1209.93 1285.68,1209.93 1286.27,1209.93 1286.86,1209.93 1287.44,1209.93 1288.03,1209.93 1288.61,1209.93 1289.2,1209.93 1289.79,1209.93 1290.37,1209.93 1290.96,1209.93 1291.55,1209.93 1292.13,1209.93 1292.72,1209.93 1293.31,1209.93 1293.89,1209.93 1294.48,1209.93 1295.06,1209.93 1295.65,1209.93 1296.24,1209.93 1296.82,1209.93 1297.41,1209.93 1298,1209.93 1298.58,1209.93 1299.17,1209.93 1299.76,1209.93 1300.34,1209.93 1300.93,1209.93 1301.52,1209.93 1302.1,1209.93 1302.69,1209.93 1303.27,1209.93 1303.86,1209.93 1304.45,1209.93 1305.03,1209.93 1305.62,1209.93 1306.21,1209.93 1306.79,1209.93 1307.38,1209.93 1307.97,1209.93 1308.55,1209.93 1309.14,1209.93 1309.73,1209.93 1310.31,1209.93 1310.9,1209.93 1311.48,1209.93 1312.07,1209.93 1312.66,1209.93 1313.24,1209.93 1313.83,1209.93 1314.42,1209.93 1315,1209.93 1315.59,1209.93 1316.18,1209.93 1316.76,1209.93 1317.35,1209.93 1317.93,1209.93 1318.52,1209.93 1319.11,1209.93 1319.69,1209.93 1320.28,1209.93 1320.87,1209.93 1321.45,1209.93 1322.04,1209.93 1322.63,1209.93 1323.21,1209.93 1323.8,1209.93 1324.39,1209.93 1324.97,1209.93 1325.56,1209.93 1326.14,1209.93 1326.73,1209.93 1327.32,1209.93 1327.9,1209.93 1328.49,1209.93 1329.08,1209.93 1329.66,1209.93 1330.25,1209.93 1330.84,1209.93 1331.42,1209.93 1332.01,1209.93 1332.6,1209.93 1333.18,1209.93 1333.77,1209.93 1334.35,1209.93 1334.94,1209.93 1335.53,1209.93 1336.11,1209.93 1336.7,1209.93 1337.29,1209.93 1337.87,1209.93 1338.46,1209.93 1339.05,1209.93 1339.63,1209.93 1340.22,1209.93 1340.8,1209.93 1341.39,1209.93 1341.98,1209.93 1342.56,1209.93 1343.15,1209.93 1343.74,1209.93 1344.32,1209.93 1344.91,1209.93 1345.5,1209.93 1346.08,1209.93 1346.67,1209.93 1347.26,1209.93 1347.84,1209.93 1348.43,1209.93 1349.01,1209.93 1349.6,1209.93 1350.19,1209.93 1350.77,1209.93 1351.36,1209.93 1351.95,1209.93 1352.53,1209.93 1353.12,1209.93 1353.71,1209.93 1354.29,1209.93 1354.88,1209.93 1355.47,1209.93 1356.05,1209.93 1356.64,1209.93 1357.22,1209.93 1357.81,1209.93 1358.4,1209.93 1358.98,1209.93 1359.57,1209.93 1360.16,1209.93 1360.74,1209.93 1361.33,1209.93 1361.92,1209.93 1362.5,1209.93 1363.09,1209.93 1363.68,1209.93 1364.26,1209.93 1364.85,1209.93 1365.43,1209.93 1366.02,1209.93 1366.61,1209.93 1367.19,1209.93 1367.78,1209.93 1368.37,1209.93 1368.95,1209.93 1369.54,1209.93 1370.13,1209.93 1370.71,1209.93 1371.3,1209.93 1371.88,1209.93 1372.47,1209.93 1373.06,1209.93 1373.64,1209.93 1374.23,1209.93 1374.82,1209.93 1375.4,1209.93 1375.99,1209.93 1376.58,1209.93 1377.16,1209.93 1377.75,1209.93 1378.34,1209.93 1378.92,1209.93 1379.51,1209.93 1380.09,1209.93 1380.68,1209.93 1381.27,1209.93 1381.85,1209.93 1382.44,1209.93 1383.03,1209.93 1383.61,1209.93 1384.2,1209.93 1384.79,1209.93 1385.37,1209.93 1385.96,1209.93 1386.55,1209.93 1387.13,1209.93 1387.72,1209.93 1388.3,1209.93 1388.89,1209.93 1389.48,1209.93 1390.06,1209.93 1390.65,1209.93 1391.24,1209.93 1391.82,1209.93 1392.41,1209.93 1393,1209.93 1393.58,1209.93 1394.17,1209.93 1394.75,1209.93 1395.34,1209.93 1395.93,1209.93 1396.51,1209.93 1397.1,1209.93 1397.69,1209.93 1398.27,1209.93 1398.86,1209.93 1399.45,1209.93 1400.03,1209.93 1400.62,1209.93 1401.21,1209.93 1401.79,1209.93 1402.38,1209.93 1402.96,1209.93 1403.55,1209.93 1404.14,1209.93 1404.72,1209.93 1405.31,1209.93 1405.9,1209.93 1406.48,1209.93 1407.07,1209.93 1407.66,1209.93 1408.24,1209.93 1408.83,1209.93 1409.42,1209.93 1410,1209.93 1410.59,1209.93 1411.17,1209.93 1411.76,1209.93 1412.35,1209.93 1412.93,1209.93 1413.52,1209.93 1414.11,1209.93 1414.69,1209.93 1415.28,1209.93 1415.87,1209.93 1416.45,1209.93 1417.04,1209.93 1417.63,1209.93 1418.21,1209.93 1418.8,1209.93 1419.38,1209.93 1419.97,1209.93 1420.56,1209.93 1421.14,1209.93 1421.73,1209.93 1422.32,1209.93 1422.9,1209.93 1423.49,1209.93 1424.08,1209.93 1424.66,1209.93 1425.25,1209.93 1425.83,1209.93 1426.42,1209.93 1427.01,1209.93 1427.59,1209.93 1428.18,1209.93 1428.77,1209.93 1429.35,1209.93 1429.94,1209.93 1430.53,1209.93 1431.11,1209.93 1431.7,1209.93 1432.29,1209.93 1432.87,1209.93 1433.46,1209.93 1434.04,1209.93 1434.63,1209.93 1435.22,1209.93 1435.8,1209.93 1436.39,1209.93 1436.98,1209.93 1437.56,1209.93 1438.15,1209.93 1438.74,1209.93 1439.32,1209.93 1439.91,1209.93 1440.5,1209.93 1441.08,1209.93 1441.67,1209.93 1442.25,1209.93 1442.84,1209.93 1443.43,1209.93 1444.01,1209.93 1444.6,1209.93 1445.19,1209.93 1445.77,1209.93 1446.36,1209.93 1446.95,1209.93 1447.53,1209.93 1448.12,1209.93 1448.7,1209.93 1449.29,1209.93 1449.88,1209.93 1450.46,1209.93 1451.05,1209.93 1451.64,1209.93 1452.22,1209.93 1452.81,1209.93 1453.4,1209.93 1453.98,1209.93 1454.57,1209.93 1455.16,1209.93 1455.74,1209.93 1456.33,1209.93 1456.91,1209.93 1457.5,1209.93 1458.09,1209.93 1458.67,1209.93 1459.26,1209.93 1459.85,1209.93 1460.43,1209.93 1461.02,1209.93 1461.61,1209.93 1462.19,1209.93 1462.78,1209.93 1463.37,1209.93 1463.95,1209.93 1464.54,1209.93 1465.12,1209.93 1465.71,1209.93 1466.3,1209.93 1466.88,1209.93 1467.47,1209.93 1468.06,1209.93 1468.64,1209.93 1469.23,1209.93 1469.82,1209.93 1470.4,1209.93 1470.99,1209.93 1471.57,1209.93 1472.16,1209.93 1472.75,1209.93 1473.33,1209.93 1473.92,1209.93 1474.51,1209.93 1475.09,1209.93 1475.68,1209.93 1476.27,1209.93 1476.85,1209.93 1477.44,1209.93 1478.03,1209.93 1478.61,1209.93 1479.2,1209.93 1479.78,1209.93 1480.37,1209.93 1480.96,1209.93 1481.54,1209.93 1482.13,1209.93 1482.72,1209.93 1483.3,1209.93 1483.89,1209.93 1484.48,1209.93 1485.06,1209.93 1485.65,1209.93 1486.24,1209.93 1486.82,1209.93 1487.41,1209.93 1487.99,1209.93 1488.58,1209.93 1489.17,1209.93 1489.75,1209.93 1490.34,1209.93 1490.93,1209.93 1491.51,1209.93 1492.1,1209.93 1492.69,1209.93 1493.27,1209.93 1493.86,1209.93 1494.45,1209.93 1495.03,1209.93 1495.62,1209.93 1496.2,1209.93 1496.79,1209.93 1497.38,1209.93 1497.96,1209.93 1498.55,1209.93 1499.14,1209.93 1499.72,1209.93 1500.31,1209.93 1500.9,1209.93 1501.48,1209.93 1502.07,1209.93 1502.65,1209.93 1503.24,1209.93 1503.83,1209.93 1504.41,1209.93 1505,1209.93 1505.59,1209.93 1506.17,1209.93 1506.76,1209.93 1507.35,1209.93 1507.93,1209.93 1508.52,1209.93 1509.11,1209.93 1509.69,1209.93 1510.28,1209.93 1510.86,1209.93 1511.45,1209.93 1512.04,1209.93 1512.62,1209.93 1513.21,1209.93 1513.8,1209.93 1514.38,1209.93 1514.97,1209.93 1515.56,1209.93 1516.14,1209.93 1516.73,1209.93 1517.32,1209.93 1517.9,1209.93 1518.49,1209.93 1519.07,1209.93 1519.66,1209.93 1520.25,1209.93 1520.83,1209.93 1521.42,1209.93 1522.01,1209.93 1522.59,1209.93 1523.18,1209.93 1523.77,1209.93 1524.35,1209.93 1524.94,1209.93 1525.52,1209.93 1526.11,1209.93 1526.7,1209.93 1527.28,1209.93 1527.87,1209.93 1528.46,1209.93 1529.04,1209.93 1529.63,1209.93 1530.22,1209.93 1530.8,1209.93 1531.39,1209.93 1531.98,1209.93 1532.56,1209.93 1533.15,1209.93 1533.73,1209.93 1534.32,1209.93 1534.91,1209.93 1535.49,1209.93 1536.08,1209.93 1536.67,1209.93 1537.25,1209.93 1537.84,1209.93 1538.43,1209.93 1539.01,1209.93 1539.6,1209.93 1540.19,1209.93 1540.77,1209.93 1541.36,1209.93 1541.94,1209.93 1542.53,1209.93 1543.12,1209.93 1543.7,1209.93 1544.29,1209.93 1544.88,1209.93 1545.46,1209.93 1546.05,1209.93 1546.64,1209.93 1547.22,1209.93 1547.81,1209.93 1548.4,1209.93 1548.98,1209.93 1549.57,1209.93 1550.15,1209.93 1550.74,1209.93 1551.33,1209.93 1551.91,1209.93 1552.5,1209.93 1553.09,1209.93 1553.67,1209.93 1554.26,1209.93 1554.85,1209.93 1555.43,1209.93 1556.02,1209.93 1556.6,1209.93 1557.19,1209.93 1557.78,1209.93 1558.36,1209.93 1558.95,1209.93 1559.54,1209.93 1560.12,1209.93 1560.71,1209.93 1561.3,1209.93 1561.88,1209.93 1562.47,1209.93 1563.06,1209.93 1563.64,1209.93 1564.23,1209.93 1564.81,1209.93 1565.4,1209.93 1565.99,1209.93 1566.57,1209.93 1567.16,1209.93 1567.75,1209.93 1568.33,1209.93 1568.92,1209.93 1569.51,1209.93 1570.09,1209.93 1570.68,1209.93 1571.27,1209.93 1571.85,1209.93 1572.44,1209.93 1573.02,1209.93 1573.61,1209.93 1574.2,1209.93 1574.78,1209.93 1575.37,1209.93 1575.96,1209.93 1576.54,1209.93 1577.13,1209.93 1577.72,1209.93 1578.3,1209.93 1578.89,1209.93 1579.47,1209.93 1580.06,1209.93 1580.65,1209.93 1581.23,1209.93 1581.82,1209.93 1582.41,1209.93 1582.99,1209.93 1583.58,1209.93 1584.17,1209.93 1584.75,1209.93 1585.34,1209.93 1585.93,1209.93 1586.51,1209.93 1587.1,1209.93 1587.68,1209.93 1588.27,1209.93 1588.86,1209.93 1589.44,1209.93 1590.03,1209.93 1590.62,1209.93 1591.2,1209.93 1591.79,1209.93 1592.38,1209.93 1592.96,1209.93 1593.55,1209.93 1594.14,1209.93 1594.72,1209.93 1595.31,1209.93 1595.89,1209.93 1596.48,1209.93 1597.07,1209.93 1597.65,1209.93 1598.24,1209.93 1598.83,1209.93 1599.41,1209.93 1600,1209.93 1600.59,1209.93 1601.17,1209.93 1601.76,1209.93 1602.34,1209.93 1602.93,1209.93 1603.52,1209.93 1604.1,1209.93 1604.69,1209.93 1605.28,1209.93 1605.86,1209.93 1606.45,1209.93 1607.04,1209.93 1607.62,1209.93 1608.21,1209.93 1608.8,1209.93 1609.38,1209.93 1609.97,1209.93 1610.55,1209.93 1611.14,1209.93 1611.73,1209.93 1612.31,1209.93 1612.9,1209.93 1613.49,1209.93 1614.07,1209.93 1614.66,1209.93 1615.25,1209.93 1615.83,1209.93 1616.42,1209.93 1617.01,1209.93 1617.59,1209.93 1618.18,1209.93 1618.76,1209.93 1619.35,1209.93 1619.94,1209.93 1620.52,1209.93 1621.11,1209.93 1621.7,1209.93 1622.28,1209.93 1622.87,1209.93 1623.46,1209.93 1624.04,1209.93 1624.63,1209.93 1625.22,1209.93 1625.8,1209.93 1626.39,1209.93 1626.97,1209.93 1627.56,1209.93 1628.15,1209.93 1628.73,1209.93 1629.32,1209.93 1629.91,1209.93 1630.49,1209.93 1631.08,1209.93 1631.67,1209.93 1632.25,1209.93 1632.84,1209.93 1633.42,1209.93 1634.01,1209.93 1634.6,1209.93 1635.18,1209.93 1635.77,1209.93 1636.36,1209.93 1636.94,1209.93 1637.53,1209.93 1638.12,1209.93 1638.7,1209.93 1639.29,1209.93 1639.88,1209.93 1640.46,1209.93 1641.05,1209.93 1641.63,1209.93 1642.22,1209.93 1642.81,1209.93 1643.39,1209.93 1643.98,1209.93 1644.57,1209.93 1645.15,1209.93 1645.74,1209.93 1646.33,1209.93 1646.91,1209.93 1647.5,1209.93 1648.09,1209.93 1648.67,1209.93 1649.26,1209.93 1649.84,1209.93 1650.43,1209.93 1651.02,1209.93 1651.6,1209.93 1652.19,1209.93 1652.78,1209.93 1653.36,1209.93 1653.95,1209.93 1654.54,1209.93 1655.12,1209.93 1655.71,1209.93 1656.29,1209.93 1656.88,1209.93 1657.47,1209.93 1658.05,1209.93 1658.64,1209.93 1659.23,1209.93 1659.81,1209.93 1660.4,1209.93 1660.99,1209.93 1661.57,1209.93 1662.16,1209.93 1662.75,1209.93 1663.33,1209.93 1663.92,1209.93 1664.5,1209.93 1665.09,1209.93 1665.68,1209.93 1666.26,1209.93 1666.85,1209.93 1667.44,1209.93 1668.02,1209.93 1668.61,1209.93 1669.2,1209.93 1669.78,1209.93 1670.37,1209.93 1670.96,1209.93 1671.54,1209.93 1672.13,1209.93 1672.71,1209.93 1673.3,1209.93 1673.89,1209.93 1674.47,1209.93 1675.06,1209.93 1675.65,1209.93 1676.23,1209.93 1676.82,1209.93 1677.41,1209.93 1677.99,1209.93 1678.58,1209.93 1679.17,1209.93 1679.75,1209.93 1680.34,1209.93 1680.92,1209.93 1681.51,1209.93 1682.1,1209.93 1682.68,1209.93 1683.27,1209.93 1683.86,1209.93 1684.44,1209.93 1685.03,1209.93 1685.62,1209.93 1686.2,1209.93 1686.79,1209.93 1687.37,1209.93 1687.96,1209.93 1688.55,1209.93 1689.13,1209.93 1689.72,1209.93 1690.31,1209.93 1690.89,1209.93 1691.48,1209.93 1692.07,1209.93 1692.65,1209.93 1693.24,1209.93 1693.83,1209.93 1694.41,1209.93 1695,1209.93 1695.58,1209.93 1696.17,1209.93 1696.76,1209.93 1697.34,1209.93 1697.93,1209.93 1698.52,1209.93 1699.1,1209.93 1699.69,1209.93 1700.28,1209.93 1700.86,1209.93 1701.45,1209.93 1702.04,1209.93 1702.62,1209.93 1703.21,1209.93 1703.79,1209.93 1704.38,1209.93 1704.97,1209.93 1705.55,1209.93 1706.14,1209.93 1706.73,1209.93 1707.31,1209.93 1707.9,1209.93 1708.49,1209.93 1709.07,1209.93 1709.66,1209.93 1710.24,1209.93 1710.83,1209.93 1711.42,1209.93 1712,1209.93 1712.59,1209.93 1713.18,1209.93 1713.76,1209.93 1714.35,1209.93 1714.94,1209.93 1715.52,1209.93 1716.11,1209.93 1716.7,1209.93 1717.28,1209.93 1717.87,1209.93 1718.45,1209.93 1719.04,1209.93 1719.63,1209.93 1720.21,1209.93 1720.8,1209.93 1721.39,1209.93 1721.97,1209.93 1722.56,1209.93 1723.15,1209.93 1723.73,1209.93 1724.32,1209.93 1724.91,1209.93 1725.49,1209.93 1726.08,1209.93 1726.66,1209.93 1727.25,1209.93 1727.84,1209.93 1728.42,1209.93 1729.01,1209.93 1729.6,1209.93 1730.18,1209.93 1730.77,1209.93 1731.36,1209.93 1731.94,1209.93 1732.53,1209.93 1733.11,1209.93 1733.7,1209.93 1734.29,1209.93 1734.87,1209.93 1735.46,1209.93 1736.05,1209.93 1736.63,1209.93 1737.22,1209.93 1737.81,1209.93 1738.39,1209.93 1738.98,1209.93 1739.57,1209.93 1740.15,1209.93 1740.74,1209.93 1741.32,1209.93 1741.91,1209.93 1742.5,1209.93 1743.08,1209.93 1743.67,1209.93 1744.26,1209.93 1744.84,1209.93 1745.43,1209.93 1746.02,1209.93 1746.6,1209.93 1747.19,1209.93 1747.78,1209.93 1748.36,1209.93 1748.95,1209.93 1749.53,1209.93 1750.12,1209.93 1750.71,1209.93 1751.29,1209.93 1751.88,1209.93 1752.47,1209.93 1753.05,1209.93 1753.64,1209.93 1754.23,1209.93 1754.81,1209.93 1755.4,1209.93 1755.99,1209.93 1756.57,1209.93 1757.16,1209.93 1757.74,1209.93 1758.33,1209.93 1758.92,1209.93 1759.5,1209.93 1760.09,1209.93 1760.68,1209.93 1761.26,1209.93 1761.85,1209.93 1762.44,1209.93 1763.02,1209.93 1763.61,1209.93 1764.19,1209.93 1764.78,1209.93 1765.37,1209.93 1765.95,1209.93 1766.54,1209.93 1767.13,1209.93 1767.71,1209.93 1768.3,1209.93 1768.89,1209.93 1769.47,1209.93 1770.06,1209.93 1770.65,1209.93 1771.23,1209.93 1771.82,1209.93 1772.4,1209.93 1772.99,1209.93 1773.58,1209.93 1774.16,1209.93 1774.75,1209.93 1775.34,1209.93 1775.92,1209.93 1776.51,1209.93 1777.1,1209.93 1777.68,1209.93 1778.27,1209.93 1778.86,1209.93 1779.44,1209.93 1780.03,1209.93 1780.61,1209.93 1781.2,1209.93 1781.79,1209.93 1782.37,1209.93 1782.96,1209.93 1783.55,1209.93 1784.13,1209.93 1784.72,1209.93 1785.31,1209.93 1785.89,1209.93 1786.48,1209.93 1787.06,1209.93 1787.65,1209.93 1788.24,1209.93 1788.82,1209.93 1789.41,1209.93 1790,1209.93 1790.58,1209.93 1791.17,1209.93 1791.76,1209.93 1792.34,1209.93 1792.93,1209.93 1793.52,1209.93 1794.1,1209.93 1794.69,1209.93 1795.27,1209.93 1795.86,1209.93 1796.45,1209.93 1797.03,1209.93 1797.62,1209.93 1798.21,1209.93 1798.79,1209.93 1799.38,1209.93 1799.97,1209.93 1800.55,1209.93 1801.14,1209.93 1801.73,1209.93 1802.31,1209.93 1802.9,1209.93 1803.48,1209.93 1804.07,1209.93 1804.66,1209.93 1805.24,1209.93 1805.83,1209.93 1806.42,1209.93 1807,1209.93 1807.59,1209.93 1808.18,1209.93 1808.76,1209.93 1809.35,1209.93 1809.94,1209.93 1810.52,1209.93 1811.11,1209.93 1811.69,1209.93 1812.28,1209.93 1812.87,1209.93 1813.45,1209.93 1814.04,1209.93 1814.63,1209.93 1815.21,1209.93 1815.8,1209.93 1816.39,1209.93 1816.97,1209.93 1817.56,1209.93 1818.14,1209.93 1818.73,1209.93 1819.32,1209.93 1819.9,1209.93 1820.49,1209.93 1821.08,1209.93 1821.66,1209.93 1822.25,1209.93 1822.84,1209.93 1823.42,1209.93 1824.01,1209.93 1824.6,1209.93 1825.18,1209.93 1825.77,1209.93 1826.35,1209.93 1826.94,1209.93 1827.53,1209.93 1828.11,1209.93 1828.7,1209.93 1829.29,1209.93 1829.87,1209.93 1830.46,1209.93 1831.05,1209.93 1831.63,1209.93 1832.22,1209.93 1832.81,1209.93 1833.39,1209.93 1833.98,1209.93 1834.56,1209.93 1835.15,1209.93 1835.74,1209.93 1836.32,1209.93 1836.91,1209.93 1837.5,1209.93 1838.08,1209.93 1838.67,1209.93 1839.26,1209.93 1839.84,1209.93 1840.43,1209.93 1841.01,1209.93 1841.6,1209.93 1842.19,1209.93 1842.77,1209.93 1843.36,1209.93 1843.95,1209.93 1844.53,1209.93 1845.12,1209.93 1845.71,1209.93 1846.29,1209.93 1846.88,1209.93 1847.47,1209.93 1848.05,1209.93 1848.64,1209.93 1849.22,1209.93 1849.81,1209.93 1850.4,1209.93 1850.98,1209.93 1851.57,1209.93 1852.16,1209.93 1852.74,1209.93 1853.33,1209.93 1853.92,1209.93 1854.5,1209.93 1855.09,1209.93 1855.68,1209.93 1856.26,1209.93 1856.85,1209.93 1857.43,1209.93 1858.02,1209.93 1858.61,1209.93 1859.19,1209.93 1859.78,1209.93 1860.37,1209.93 1860.95,1209.93 1861.54,1209.93 1862.13,1209.93 1862.71,1209.93 1863.3,1209.93 1863.88,1209.93 1864.47,1209.93 1865.06,1209.93 1865.64,1209.93 1866.23,1209.93 1866.82,1209.93 1867.4,1209.93 1867.99,1209.93 1868.58,1209.93 1869.16,1209.93 1869.75,1209.93 1870.34,1209.93 1870.92,1209.93 1871.51,1209.93 1872.09,1209.93 1872.68,1209.93 1873.27,1209.93 1873.85,1209.93 1874.44,1209.93 1875.03,1209.93 1875.61,1209.93 1876.2,1209.93 1876.79,1209.93 1877.37,1209.93 1877.96,1209.93 1878.55,1209.93 1879.13,1209.93 1879.72,1209.93 1880.3,1209.93 1880.89,1209.93 1881.48,1209.93 1882.06,1209.93 1882.65,1209.93 1883.24,1209.93 1883.82,1209.93 1884.41,1209.93 1885,1209.93 1885.58,1209.93 1886.17,1209.93 1886.76,1209.93 1887.34,1209.93 1887.93,1209.93 1888.51,1209.93 1889.1,1209.93 1889.69,1209.93 1890.27,1209.93 1890.86,1209.93 1891.45,1209.93 1892.03,1209.93 1892.62,1209.93 1893.21,1209.93 1893.79,1209.93 1894.38,1209.93 1894.96,1209.93 1895.55,1209.93 1896.14,1209.93 1896.72,1209.93 1897.31,1209.93 1897.9,1209.93 1898.48,1209.93 1899.07,1209.93 1899.66,1209.93 1900.24,1209.93 1900.83,1209.93 1901.42,1209.93 1902,1209.93 1902.59,1209.93 1903.17,1209.93 1903.76,1209.93 1904.35,1209.93 1904.93,1209.93 1905.52,1209.93 1906.11,1209.93 1906.69,1209.93 1907.28,1209.93 1907.87,1209.93 1908.45,1209.93 1909.04,1209.93 1909.63,1209.93 1910.21,1209.93 1910.8,1209.93 1911.38,1209.93 1911.97,1209.93 1912.56,1209.93 1913.14,1209.93 1913.73,1209.93 1914.32,1209.93 1914.9,1209.93 1915.49,1209.93 1916.08,1209.93 1916.66,1209.93 1917.25,1209.93 1917.83,1209.93 1918.42,1209.93 1919.01,1209.93 1919.59,1209.93 1920.18,1209.93 1920.77,1209.93 1921.35,1209.93 1921.94,1209.93 1922.53,1209.93 1923.11,1209.93 1923.7,1209.93 1924.29,1209.93 1924.87,1209.93 1925.46,1209.93 1926.04,1209.93 1926.63,1209.93 1927.22,1209.93 1927.8,1209.93 1928.39,1209.93 1928.98,1209.93 1929.56,1209.93 1930.15,1209.93 1930.74,1209.93 1931.32,1209.93 1931.91,1209.93 1932.5,1209.93 1933.08,1209.93 1933.67,1209.93 1934.25,1209.93 1934.84,1209.93 1935.43,1209.93 1936.01,1209.93 1936.6,1209.93 1937.19,1209.93 1937.77,1209.93 1938.36,1209.93 1938.95,1209.93 1939.53,1209.93 1940.12,1209.93 1940.71,1209.93 1941.29,1209.93 1941.88,1209.93 1942.46,1209.93 1943.05,1209.93 1943.64,1209.93 1944.22,1209.93 1944.81,1209.93 1945.4,1209.93 1945.98,1209.93 1946.57,1209.93 1947.16,1209.93 1947.74,1209.93 1948.33,1209.93 1948.91,1209.93 1949.5,1209.93 1950.09,1209.93 1950.67,1209.93 1951.26,1209.93 1951.85,1209.93 1952.43,1209.93 1953.02,1209.93 1953.61,1209.93 1954.19,1209.93 1954.78,1209.93 1955.37,1209.93 1955.95,1209.93 1956.54,1209.93 1957.12,1209.93 1957.71,1209.93 1958.3,1209.93 1958.88,1209.93 1959.47,1209.93 1960.06,1209.93 1960.64,1209.93 1961.23,1209.93 1961.82,1209.93 1962.4,1209.93 1962.99,1209.93 1963.58,1209.93 1964.16,1209.93 1964.75,1209.93 1965.33,1209.93 1965.92,1209.93 1966.51,1209.93 1967.09,1209.93 1967.68,1209.93 1968.27,1209.93 1968.85,1209.93 1969.44,1209.93 1970.03,1209.93 1970.61,1209.93 1971.2,1209.93 1971.78,1209.93 1972.37,1209.93 1972.96,1209.93 1973.54,1209.93 1974.13,1209.93 1974.72,1209.93 1975.3,1209.93 1975.89,1209.93 1976.48,1209.93 1977.06,1209.93 1977.65,1209.93 1978.24,1209.93 1978.82,1209.93 1979.41,1209.93 1979.99,1209.93 1980.58,1209.93 1981.17,1209.93 1981.75,1209.93 1982.34,1209.93 1982.93,1209.93 1983.51,1209.93 1984.1,1209.93 1984.69,1209.93 1985.27,1209.93 1985.86,1209.93 1986.45,1209.93 1987.03,1209.93 1987.62,1209.93 1988.2,1209.93 1988.79,1209.93 1989.38,1209.93 1989.96,1209.93 1990.55,1209.93 1991.14,1209.93 1991.72,1209.93 1992.31,1209.93 1992.9,1209.93 1993.48,1209.93 1994.07,1209.93 1994.65,1209.93 1995.24,1209.93 1995.83,1209.93 1996.41,1209.93 1997,1209.93 1997.59,1209.93 1998.17,1209.93 1998.76,1209.93 1999.35,1209.93 1999.93,1209.93 2000.52,1209.93 2001.11,1209.93 2001.69,1209.93 2002.28,1209.93 2002.86,1209.93 2003.45,1209.93 2004.04,1209.93 2004.62,1209.93 2005.21,1209.93 2005.8,1209.93 2006.38,1209.93 2006.97,1209.93 2007.56,1209.93 2008.14,1209.93 2008.73,1209.93 2009.32,1209.93 2009.9,1209.93 2010.49,1209.93 2011.07,1209.93 2011.66,1209.93 2012.25,1209.93 2012.83,1209.93 2013.42,1209.93 2014.01,1209.93 2014.59,1209.93 2015.18,1209.93 2015.77,1209.93 2016.35,1209.93 2016.94,1209.93 2017.53,1209.93 2018.11,1209.93 2018.7,1209.93 2019.28,1209.93 2019.87,1209.93 2020.46,1209.93 2021.04,1209.93 2021.63,1209.93 2022.22,1209.93 2022.8,1209.93 2023.39,1209.93 2023.98,1209.93 2024.56,1209.93 2025.15,1209.93 2025.73,1209.93 2026.32,1209.93 2026.91,1209.93 2027.49,1209.93 2028.08,1209.93 2028.67,1209.93 2029.25,1209.93 2029.84,1209.93 2030.43,1209.93 2031.01,1209.93 2031.6,1209.93 2032.19,1209.93 2032.77,1209.93 2033.36,1209.93 2033.94,1209.93 2034.53,1209.93 2035.12,1209.93 2035.7,1209.93 2036.29,1209.93 2036.88,1209.93 2037.46,1209.93 2038.05,1209.93 2038.64,1209.93 2039.22,1209.93 2039.81,1209.93 2040.4,1209.93 2040.98,1209.93 2041.57,1209.93 2042.15,1209.93 2042.74,1209.93 2043.33,1209.93 2043.91,1209.93 2044.5,1209.93 2045.09,1209.93 2045.67,1209.93 2046.26,1209.93 2046.85,1209.93 2047.43,1209.93 2048.02,1209.93 2048.6,1209.93 2049.19,1209.93 2049.78,1209.93 2050.36,1209.93 2050.95,1209.93 2051.54,1209.93 2052.12,1209.93 2052.71,1209.93 2053.3,1209.93 2053.88,1209.93 2054.47,1209.93 2055.06,1209.93 2055.64,1209.93 2056.23,1209.93 2056.81,1209.93 2057.4,1209.93 2057.99,1209.93 2058.57,1209.93 2059.16,1209.93 2059.75,1209.93 2060.33,1209.93 2060.92,1209.93 2061.51,1209.93 2062.09,1209.93 2062.68,1209.93 2063.27,1209.93 2063.85,1209.93 2064.44,1209.93 2065.02,1209.93 2065.61,1209.93 2066.2,1209.93 2066.78,1209.93 2067.37,1209.93 2067.96,1209.93 2068.54,1209.93 2069.13,1209.93 2069.72,1209.93 2070.3,1209.93 2070.89,1209.93 2071.48,1209.93 2072.06,1209.93 2072.65,1209.93 2073.23,1209.93 2073.82,1209.93 2074.41,1209.93 2074.99,1209.93 2075.58,1209.93 2076.17,1209.93 2076.75,1209.93 2077.34,1209.93 2077.93,1209.93 2078.51,1209.93 2079.1,1209.93 2079.68,1209.93 2080.27,1209.93 2080.86,1209.93 2081.44,1209.93 2082.03,1209.93 2082.62,1209.93 2083.2,1209.93 2083.79,1209.93 2084.38,1209.93 2084.96,1209.93 2085.55,1209.93 2086.14,1209.93 2086.72,1209.93 2087.31,1209.93 2087.89,1209.93 2088.48,1209.93 2089.07,1209.93 2089.65,1209.93 2090.24,1209.93 2090.83,1209.93 2091.41,1209.93 2092,1209.93 2092.59,1209.93 2093.17,1209.93 2093.76,1209.93 2094.35,1209.93 2094.93,1209.93 2095.52,1209.93 2096.1,1209.93 2096.69,1209.93 2097.28,1209.93 2097.86,1209.93 2098.45,1209.93 2099.04,1209.93 2099.62,1209.93 2100.21,1209.93 2100.8,1209.93 2101.38,1209.93 2101.97,1209.93 2102.55,1209.93 2103.14,1209.93 2103.73,1209.93 2104.31,1209.93 2104.9,1209.93 2105.49,1209.93 2106.07,1209.93 2106.66,1209.93 2107.25,1209.93 2107.83,1209.93 2108.42,1209.93 2109.01,1209.93 2109.59,1209.93 2110.18,1209.93 2110.76,1209.93 2111.35,1209.93 2111.94,1209.93 2112.52,1209.93 2113.11,1209.93 2113.7,1209.93 2114.28,1209.93 2114.87,1209.93 2115.46,1209.93 2116.04,1209.93 2116.63,1209.93 2117.22,1209.93 2117.8,1209.93 2118.39,1209.93 2118.97,1209.93 2119.56,1209.93 2120.15,1209.93 2120.73,1209.93 2121.32,1209.93 2121.91,1209.93 2122.49,1209.93 2123.08,1209.93 2123.67,1209.93 2124.25,1209.93 2124.84,1209.93 2125.42,1209.93 2126.01,1209.93 2126.6,1209.93 2127.18,1209.93 2127.77,1209.93 2128.36,1209.93 2128.94,1209.93 2129.53,1209.93 2130.12,1209.93 2130.7,1209.93 2131.29,1209.93 2131.88,1209.93 2132.46,1209.93 2133.05,1209.93 2133.63,1209.93 2134.22,1209.93 2134.81,1209.93 2135.39,1209.93 2135.98,1209.93 2136.57,1209.93 2137.15,1209.93 2137.74,1209.93 2138.33,1209.93 2138.91,1209.93 2139.5,1209.93 2140.09,1209.93 2140.67,1209.93 2141.26,1209.93 2141.84,1209.93 2142.43,1209.93 2143.02,1209.93 2143.6,1209.93 2144.19,1209.93 2144.78,1209.93 2145.36,1209.93 2145.95,1209.93 2146.54,1209.93 2147.12,1209.93 2147.71,1209.93 2148.3,1209.93 2148.88,1209.93 2149.47,1209.93 2150.05,1209.93 2150.64,1209.93 2151.23,1209.93 2151.81,1209.93 2152.4,1209.93 2152.99,1209.93 2153.57,1209.93 2154.16,1209.93 2154.75,1209.93 2155.33,1209.93 2155.92,1209.93 2156.5,1209.93 2157.09,1209.93 2157.68,1209.93 2158.26,1209.93 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.13,1190.28 1399.91,899.083 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1229.02 985.439,1190.28 2158.26,1190.28 2158.26,1229.02 985.439,1229.02 \"/>\n<path clip-path=\"url(#clip460)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip460)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip460)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip460)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip460)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip460)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip463\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip463)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip463)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip463)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip463)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip463)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip460)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip463)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip463)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip463)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip463)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip463)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip460)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip463)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-3801.28 163.232,-4908.13 163.792,-5925.27 164.351,-6873.46 164.91,-7715.51 165.469,-8436.66 166.029,-8000.87 166.588,-8670.74 167.147,-9290.09 167.706,-8900.72 168.266,-9444.2 168.825,-9931.2 169.384,-9587.58 169.943,-9330.17 170.503,-9729.52 171.062,-10094.2 171.621,-10415.8 172.18,-9113.58 172.74,-9442.23 173.299,-9703.29 173.858,-9955.59 174.417,-10165.6 174.977,-10335.5 175.536,-10482.8 176.095,-10245.5 176.655,-10048.1 177.214,-10128.1 177.773,-9917.87 178.332,-9730.79 178.892,-9780.6 179.451,-9825.58 180.01,-9855.28 180.569,-9856.19 181.129,-9623.42 181.688,-9598.48 182.247,-9382.58 182.806,-9333.9 183.366,-9110.22 183.925,-8887.08 184.484,-8824.65 185.043,-8485.78 185.603,-8042.95 186.162,-7628.5 186.721,-7240.31 187.28,-7095.57 187.84,-7041.69 188.399,-6987.34 188.958,-6822.46 189.517,-6663.32 190.077,-6430.06 190.636,-6195.31 191.195,-6059.07 191.754,-5927.31 192.314,-5859.45 192.873,-5646.43 193.432,-5451.25 193.991,-5386.07 194.551,-5135.02 195.11,-5016.89 195.669,-4894.26 196.228,-4706.61 196.788,-4531.19 197.347,-4357.88 197.906,-4289.72 198.465,-4176.94 199.025,-4012.1 199.584,-3849.48 200.143,-3745.11 200.702,-3592.02 201.262,-3484.44 201.821,-3373.32 202.38,-3271.47 202.939,-3087.47 203.499,-3025.34 204.058,-2923.45 204.617,-2754.44 205.176,-2667.76 205.736,-2577.43 206.295,-2526.88 206.854,-2370.84 207.413,-2287.4 207.973,-2240.58 208.532,-2158.89 209.091,-1984.11 209.65,-1875.45 210.21,-1799.09 210.769,-1667.5 211.328,-1651.3 211.887,-1525.49 212.447,-1458.06 213.006,-1368.28 213.565,-1335.58 214.124,-1268.67 214.684,-1154.07 215.243,-1093.3 215.802,-1055.83 216.361,-973.329 216.921,-886.823 217.48,-781.728 218.039,-728.806 218.598,-674.46 219.158,-598.407 219.717,-575.06 220.276,-548.691 220.835,-447.33 221.395,-420.785 221.954,-370.681 222.513,-346.791 223.072,-296.642 223.632,-207.789 224.191,-168.344 224.75,-109.711 225.309,-27.8559 225.869,-12.244 226.428,43.2859 226.987,60.6966 227.546,93.5026 228.106,125.688 228.665,157.576 229.224,170.036 229.783,206.961 230.343,244.223 230.902,256.072 231.461,285.764 232.02,316.61 232.58,389.451 233.139,376.804 233.698,388.338 234.257,437.446 234.817,461.04 235.376,469.014 235.935,474.438 236.494,502.02 237.054,532.577 237.613,540.027 238.172,548.473 238.731,559.447 239.291,607.079 239.85,669.899 240.409,673.367 240.968,695.879 241.528,749.434 242.087,785.231 242.646,761.672 243.205,764.26 243.765,746.156 244.324,787.4 244.883,821.854 245.442,801.087 246.002,801.653 246.561,818.677 247.12,833.392 247.679,828.15 248.239,862.97 248.798,877.205 249.357,922.855 249.916,898.773 250.476,908.676 251.035,939.682 251.594,915.092 252.153,876.341 252.713,886.164 253.272,900.408 253.831,897.027 254.39,913.157 254.95,945.653 255.509,959.498 256.068,971.807 256.627,966.7 257.187,976.376 257.746,987.003 258.305,996.126 258.864,1025.09 259.424,1034.53 259.983,1023.53 260.542,1065.82 261.101,1075.08 261.661,1014.21 262.22,994.438 262.779,1007.8 263.338,985.98 263.898,932.975 264.457,948.084 265.016,962.409 265.575,977.29 266.135,989.284 266.694,984.077 267.253,995.948 267.812,991.66 268.372,987.57 268.931,964.848 269.49,1010.83 270.049,1037.33 270.609,1015.38 271.168,997.289 271.727,990.512 272.286,1018.77 272.846,1083.84 273.405,1076.71 273.964,1071.5 274.523,1049.56 275.083,1061.31 275.642,1055.01 276.201,1029.9 276.76,1008.79 277.32,1003.38 277.879,981.633 278.438,959.175 278.997,956.447 279.557,1003.17 280.116,1019.71 280.675,1001.75 281.234,1013.37 281.794,1005.71 282.353,1050.23 282.912,1059.51 283.471,1083.64 284.031,1079.16 284.59,1137.75 285.149,1141.62 285.708,1110.42 286.268,1083.21 286.827,1138.08 287.386,1109.78 287.945,1095.86 288.505,1084.9 289.064,1057.18 289.623,1045.91 290.182,1040.41 290.742,1068.49 291.301,1107.88 291.86,1128.43 292.419,1116.75 292.979,1107.18 293.538,1077.51 294.097,1116.53 294.656,1105.44 295.216,1097.97 295.775,1055.05 296.334,1064.89 296.893,1040.82 297.453,1051.2 298.012,1029.02 298.571,1039.34 299.13,1032.58 299.69,1005.08 300.249,1001.33 300.808,1013.2 301.368,1008.46 301.927,1016.55 302.486,980.849 303.045,991.437 303.605,934.679 304.164,917.198 304.723,916.305 305.282,914.524 305.842,931.104 306.401,927.175 306.96,957.541 307.519,969.419 308.079,967.67 308.638,965.825 309.197,977.64 309.756,938.81 310.316,950.359 310.875,947.055 311.434,930.132 311.993,891.971 312.553,858.198 313.112,857.626 313.671,862.344 314.23,862.116 314.79,879.021 315.349,910.307 315.908,925.762 316.467,938.859 317.027,903.844 317.586,868.196 318.145,904.935 318.704,936.013 319.264,933.04 319.823,914.881 320.382,929.255 320.941,913.739 321.501,960.951 322.06,952.642 322.619,914.402 323.178,975.849 323.738,936.89 324.297,980.739 324.856,962.313 325.415,986.829 325.975,997.573 326.534,989.988 327.093,950.358 327.652,928.497 328.212,972.921 328.771,981.651 329.33,979.695 329.889,958.756 330.449,987.688 331.008,965.307 331.567,992.67 332.126,1015.74 332.686,1039.97 333.245,1046.73 333.804,1018.51 334.363,989.365 334.923,996.677 335.482,970.964 336.041,946.207 336.6,942.62 337.16,952.722 337.719,965.446 338.278,941.803 338.837,953.485 339.397,933.401 339.956,959.274 340.515,999.694 341.074,991.798 341.634,982.307 342.193,958.414 342.752,970.92 343.311,932.802 343.871,911.124 344.43,925.833 344.989,950.848 345.548,942.843 346.108,938.513 346.667,931.505 347.226,926.413 347.785,913.958 348.345,907.979 348.904,920.477 349.463,918.898 350.022,930.698 350.582,926.228 351.141,934.856 351.7,912.134 352.259,891.781 352.819,889.11 353.378,917.436 353.937,963.429 354.496,940.128 355.056,922.105 355.615,901.593 356.174,878.794 356.733,890.702 357.293,900.679 357.852,909.7 358.411,906.399 358.97,882.845 359.53,911.651 360.089,890.85 360.648,884.389 361.207,834.627 361.767,835.672 362.326,854.246 362.885,831.8 363.444,833.21 364.004,833.306 364.563,850.783 365.122,832.075 365.681,861.769 366.241,843.58 366.8,857.565 367.359,855.775 367.918,818.927 368.478,820.808 369.037,805.631 369.596,821.712 370.155,823.641 370.715,884.067 371.274,912.061 371.833,921.223 372.392,935.457 372.952,928.382 373.511,938.297 374.07,950.513 374.629,927.66 375.189,920.083 375.748,928.26 376.307,952.216 376.866,943.618 377.426,953.433 377.985,961.69 378.544,953.272 379.103,943.159 379.663,949.792 380.222,958.255 380.781,917.003 381.34,928.891 381.9,936.678 382.459,930.778 383.018,909.75 383.577,901.977 384.137,915.32 384.696,908.69 385.255,919.458 385.814,864.054 386.374,860.415 386.933,876.374 387.492,852.541 388.051,849.611 388.611,861.609 389.17,842.827 389.729,873.833 390.288,868.16 390.848,885.536 391.407,899.649 391.966,910.47 392.525,902.609 393.085,927.631 393.644,920.371 394.203,899.689 394.762,897.838 395.322,873.594 395.881,865.643 396.44,876.196 396.999,870.338 397.559,852.386 398.118,846.663 398.677,841.305 399.236,853.26 399.796,831.707 400.355,826.156 400.914,840.997 401.473,834.66 402.033,845.272 402.592,820.526 403.151,834.381 403.71,833.007 404.27,830.473 404.829,780.49 405.388,780.121 405.947,781.979 406.507,777.936 407.066,773.938 407.625,770.592 408.184,786.827 408.744,772.547 409.303,758.236 409.862,789.932 410.421,773.013 410.981,803.899 411.54,786.788 412.099,803.956 412.658,787.12 413.218,784.749 413.777,781.413 414.336,763.939 414.895,767.186 415.455,784.015 416.014,785.858 416.573,768.084 417.132,768.38 417.692,781.161 418.251,783.244 418.81,763.435 419.369,776.749 419.929,774.934 420.488,836.317 421.047,847.753 421.606,843.258 422.166,838.425 422.725,832.824 423.284,827.504 423.843,761.199 424.403,761.731 424.962,759.124 425.521,775.121 426.08,773.943 426.64,785.556 427.199,784.174 427.758,784.34 428.318,781.617 428.877,798.714 429.436,780.811 429.995,763.425 430.555,761.72 431.114,764.291 431.673,780.85 432.232,728.145 432.792,762.166 433.351,746.387 433.91,778.191 434.469,807.849 435.029,770.237 435.588,786.19 436.147,736.069 436.706,738.459 437.266,723.262 437.825,743.934 438.384,747.736 438.943,719.018 439.503,706.258 440.062,697.034 440.621,700.568 441.18,704.544 441.74,708.957 442.299,726.546 442.858,730.532 443.417,715.357 443.977,714.43 444.536,698.618 445.095,718.87 445.654,684.801 446.214,687.188 446.773,690.167 447.332,709.499 447.891,713.836 448.451,751.887 449.01,785.813 449.569,798.904 450.128,778.741 450.688,810.987 451.247,775.488 451.806,775.01 452.365,740.451 452.925,724.142 453.484,710.113 454.043,710.976 454.602,741.545 455.162,742.025 455.721,745.931 456.28,727.899 456.839,744.091 457.399,744.765 457.958,746.484 458.517,758.857 459.076,775.312 459.636,774.326 460.195,756.253 460.754,720.45 461.313,721.384 461.873,706.298 462.432,724.606 462.991,727.315 463.55,726.4 464.11,663.43 464.669,667.853 465.228,687.168 465.787,688.159 466.347,675.505 466.906,679.104 467.465,699.973 468.024,703.596 468.584,722.347 469.143,724.075 469.702,723.954 470.261,709.509 470.821,741.84 471.38,760.61 471.939,760.472 472.498,744.061 473.058,745.26 473.617,745.545 474.176,744.816 474.735,790.919 475.295,807.066 475.854,820.915 476.413,782.296 476.972,797.07 477.532,778.684 478.091,807.726 478.65,825.707 479.209,836.879 479.769,829.475 480.328,726.764 480.887,708.493 481.446,709.57 482.006,713.877 482.565,733.944 483.124,748.412 483.683,784.299 484.243,766.802 484.802,735.113 485.361,749.173 485.92,747.222 486.48,728.885 487.039,698.987 487.598,750.546 488.157,762.169 488.717,779.251 489.276,792.971 489.835,774.295 490.394,789.021 490.954,801.779 491.513,765.744 492.072,768.776 492.631,752.549 493.191,756.186 493.75,752.751 494.309,749.962 494.868,783.57 495.428,825.923 495.987,805.227 496.546,783.033 497.105,747.073 497.665,779.858 498.224,780.033 498.783,810.371 499.342,806.611 499.902,787.144 500.461,786.962 501.02,766.728 501.579,734.706 502.139,767.464 502.698,747.159 503.257,725.509 503.816,693.272 504.376,694.825 504.935,727.398 505.494,729.659 506.053,712.358 506.613,715.596 507.172,680.874 507.731,651.497 508.29,653.424 508.85,658.873 509.409,678.855 509.968,665.935 510.527,702.35 511.087,721.879 511.646,710.078 512.205,711.923 512.764,679.011 513.324,697.639 513.883,671.82 514.442,674.667 515.001,675.58 515.561,699.512 516.12,714.089 516.679,712.68 517.238,713.613 517.798,727.352 518.357,744.979 518.916,761.738 519.475,760.333 520.035,791.472 520.594,772.84 521.153,755.133 521.712,754.729 522.272,787.699 522.831,769.552 523.39,783.555 523.949,762.103 524.509,805.278 525.068,797.286 525.627,778.316 526.186,743.746 526.746,707.311 527.305,689.816 527.864,676.353 528.423,696.813 528.983,715.034 529.542,714.74 530.101,715.151 530.66,715.811 531.22,716.386 531.779,665.401 532.338,656.46 532.897,640.643 533.457,673.956 534.016,710.741 534.575,712.15 535.134,727.125 535.694,710.425 536.253,693.646 536.812,694.631 537.371,693.338 537.931,713.376 538.49,693.413 539.049,740.388 539.608,739.815 540.168,738.887 540.727,768.257 541.286,766.398 541.845,796.202 542.405,808.89 542.964,818.745 543.523,795.777 544.082,791.239 544.642,767.292 545.201,731.436 545.76,731.147 546.319,749.414 546.879,745.412 547.438,727.091 547.997,744.717 548.556,711.398 549.116,713.82 549.675,696.618 550.234,695.316 550.793,680.839 551.353,698.635 551.912,717.421 552.471,736.294 553.031,705.354 553.59,705.555 554.149,690.617 554.708,708.795 555.268,708.353 555.827,707.819 556.386,742.909 556.945,759.485 557.505,758.098 558.064,772.796 558.623,772.688 559.182,750.299 559.742,745.471 560.301,743.096 560.86,726.709 561.419,695.108 561.979,700.711 562.538,735.684 563.097,750.961 563.656,732.205 564.216,748.514 564.775,729.888 565.334,761.977 565.893,760.862 566.453,759.115 567.012,771.232 567.571,783.066 568.13,796.366 568.69,806.052 569.249,785.206 569.808,766.084 570.367,746.994 570.927,728.509 571.486,710.276 572.045,710.328 572.604,693.002 573.164,659.021 573.723,664.203 574.282,667.508 574.841,686.799 575.401,690.143 575.96,693.757 576.519,679.965 577.078,682.557 577.638,686.695 578.197,657.01 578.756,705.035 579.315,709.502 579.875,694.117 580.434,727.048 580.993,693.542 581.552,675.476 582.112,675.766 582.671,695.062 583.23,696.671 583.789,713.577 584.349,730.208 584.908,728.284 585.467,711.186 586.026,724.285 586.586,727.045 587.145,695.723 587.704,728.409 588.263,697.398 588.823,700.265 589.382,685.442 589.941,687.109 590.5,688.656 591.06,720.559 591.619,725.783 592.178,743.853 592.737,759.537 593.297,741.22 593.856,723.004 594.415,755.207 594.974,769.461 595.534,755.476 596.093,755.263 596.652,753.638 597.211,771.507 597.771,753.241 598.33,734.479 598.889,778.673 599.448,769.413 600.008,798.111 600.567,792.648 601.126,772.641 601.685,783.223 602.245,778.175 602.804,772.218 603.363,736.052 603.922,719.624 604.482,718.331 605.041,702.629 605.6,688.403 606.159,674.175 606.719,660.568 607.278,647.132 607.837,634.492 608.396,638.291 608.956,643.605 609.515,680.967 610.074,700.551 610.633,699.359 611.193,698.896 611.752,712.104 612.311,728.241 612.87,757.784 613.43,753.296 613.989,735.9 614.548,749.686 615.107,750.474 615.667,794.114 616.226,790.511 616.785,767.371 617.344,751.701 617.904,731.645 618.463,680.653 619.022,681.705 619.581,667.901 620.141,653.857 620.7,671.914 621.259,674.956 621.818,641.186 622.378,644.633 622.937,662.881 623.496,698.224 624.055,699.347 624.615,715.163 625.174,712.372 625.733,693.746 626.292,709.053 626.852,707.277 627.411,688.996 627.97,687.339 628.529,654.966 629.089,643.776 629.648,629.36 630.207,664.866 630.766,683.57 631.326,686.596 631.885,732.073 632.444,746.317 633.003,741.224 633.563,735.268 634.122,715.001 634.681,681.751 635.24,714.436 635.8,698.602 636.359,697.623 636.918,680.732 637.477,697.018 638.037,698.641 638.596,703.587 639.155,685.339 639.714,721.306 640.274,702.292 640.833,717.181 641.392,732.705 641.951,730.225 642.511,744.09 643.07,776.214 643.629,776.471 644.188,804.097 644.748,813.52 645.307,824.078 645.866,789.147 646.425,766.971 646.985,729.29 647.544,746.288 648.103,695.181 648.662,674.745 649.222,677.426 649.781,643.773 650.34,660.171 650.899,679.33 651.459,682.096 652.018,684.867 652.577,664.467 653.136,698.727 653.696,698.189 654.255,680.875 654.814,663.139 655.373,697.439 655.933,649.963 656.492,668.17 657.051,651.684 657.61,653.22 658.17,673.949 658.729,674.975 659.288,627.342 659.847,646.368 660.407,683.378 660.966,651.45 661.525,671.335 662.084,656.905 662.644,655.541 663.203,628.509 663.762,631.405 664.321,615.841 664.881,637.984 665.44,610.519 665.999,660.882 666.558,660.142 667.118,635.394 667.677,640.588 668.236,638.749 668.795,643.546 669.355,648.739 669.914,683.732 670.473,681.367 671.032,664.816 671.592,681.055 672.151,701.781 672.71,703.591 673.269,688.541 673.829,732.558 674.388,764.452 674.947,745.877 675.506,789.917 676.066,817.816 676.625,809.563 677.184,818.107 677.743,810.749 678.303,805.493 678.862,766.809 679.421,778.794 679.981,773.963 680.54,781.66 681.099,763.708 681.658,744.044 682.218,742.119 682.777,753.571 683.336,718.912 683.895,717.978 684.455,682.927 685.014,653.872 685.573,624.966 686.132,662.903 686.692,693.317 687.251,708.689 687.81,710.142 688.369,708.558 688.929,737.102 689.488,737.919 690.047,754.924 690.606,735.482 691.166,781.895 691.725,725.853 692.284,726.789 692.843,691.503 693.403,691.559 693.962,694.431 694.521,714.129 695.08,713.759 695.64,750.683 696.199,747.18 696.758,746.854 697.317,763.689 697.877,761.159 698.436,772.144 698.995,753.336 699.554,781.336 700.114,779.033 700.673,773.634 701.232,766.166 701.791,746.407 702.351,759.756 702.91,743.135 703.469,739.778 704.028,735.777 704.588,753.122 705.147,765.236 705.706,748.77 706.265,759.03 706.825,752.449 707.384,751.667 707.943,749.808 708.502,763.377 709.062,759.366 709.621,707.392 710.18,735.206 710.739,733.642 711.299,717.563 711.858,684.77 712.417,715.761 712.976,733.204 713.536,712.645 714.095,727.172 714.654,737.964 715.213,750.439 715.773,699.839 716.332,698.362 716.891,712.375 717.45,707.719 718.01,723.361 718.569,734.901 719.128,714.539 719.687,680.344 720.247,697.405 720.806,684.879 721.365,668.434 721.924,651.162 722.484,636.185 723.043,570.891 723.602,559.417 724.161,581.518 724.721,586.283 725.28,558.071 725.839,599.363 726.398,619.687 726.958,624.845 727.517,615.616 728.076,654.052 728.635,675.182 729.195,676.043 729.754,677.276 730.313,680.792 730.872,665.928 731.432,684.378 731.991,696.199 732.55,680.6 733.109,682.182 733.669,664.881 734.228,670.196 734.787,688.452 735.346,687.064 735.906,687.556 736.465,700.339 737.024,699.742 737.583,667.094 738.143,683.879 738.702,683.734 739.261,700.999 739.82,668.066 740.38,652.432 740.939,672.352 741.498,674.547 742.057,705.412 742.617,740.433 743.176,740.349 743.735,723.507 744.294,710.632 744.854,709.786 745.413,708.277 745.972,706.389 746.531,686.879 747.091,670.561 747.65,701.191 748.209,718.831 748.768,735.31 749.328,733.8 749.887,731.829 750.446,728.853 751.005,692.249 751.565,695.031 752.124,711.556 752.683,742.47 753.242,770.668 753.802,800.423 754.361,780.908 754.92,760.656 755.479,759.348 756.039,804.592 756.598,798.683 757.157,793.174 757.716,784.887 758.276,768.168 758.835,749.894 759.394,764.34 759.953,744.182 760.513,706.872 761.072,690.23 761.631,642.01 762.19,644.621 762.75,697.877 763.309,694.317 763.868,706.314 764.427,740.055 764.987,749.744 765.546,761.902 766.105,744.135 766.664,742.895 767.224,740.599 767.783,769.884 768.342,735.18 768.901,700.248 769.461,701.275 770.02,686.067 770.579,686.172 771.138,699.544 771.698,682.448 772.257,665.394 772.816,666.967 773.375,684.552 773.935,701.179 774.494,734.031 775.053,731.323 775.612,710.574 776.172,678.225 776.731,661.647 777.29,694.997 777.849,662.48 778.409,630.043 778.968,584.048 779.527,569.954 780.086,562.066 780.646,521.106 781.205,558.792 781.764,519.93 782.323,526.902 782.883,555.217 783.442,592.972 784.001,580.657 784.56,621.527 785.12,643.545 785.679,625.83 786.238,633.435 786.797,667.386 787.357,668.12 787.916,633.843 788.475,704.044 789.034,687.203 789.594,687.519 790.153,700.237 790.712,684.178 791.271,683.175 791.831,695.575 792.39,714.655 792.949,715.233 793.508,713.834 794.068,731.55 794.627,732.311 795.186,732.728 795.745,746.901 796.305,744.631 796.864,742.216 797.423,771.001 797.982,779.631 798.542,778.549 799.101,759.564 799.66,785.971 800.219,765.438 800.779,783.539 801.338,743.64 801.897,706.548 802.456,703.934 803.016,684.575 803.575,671.016 804.134,625.399 804.693,594.203 805.253,599.179 805.812,604.792 806.371,623.235 806.931,611.452 807.49,646.794 808.049,650.878 808.608,651.709 809.168,653.216 809.727,667.539 810.286,636.025 810.845,656.271 811.405,641.117 811.964,661.42 812.523,677.227 813.082,680.623 813.642,699.736 814.201,716.173 814.76,746.58 815.319,744.104 815.879,712.111 816.438,691.388 816.997,710.769 817.556,710.563 818.116,728.993 818.675,742.066 819.234,741.754 819.793,723.915 820.353,737.408 820.912,716.09 821.471,712.919 822.03,696.948 822.59,711.534 823.149,727.097 823.708,738.478 824.267,683.857 824.827,654.135 825.386,639.307 825.945,642.593 826.504,663.767 827.064,665.036 827.623,665.384 828.182,670.552 828.741,658.276 829.301,674.291 829.86,673.186 830.419,706.122 830.978,675.76 831.538,645.603 832.097,646.706 832.656,651.062 833.215,652.145 833.775,656.399 834.334,639.243 834.893,643.38 835.452,614.176 836.012,668.377 836.571,670.144 837.13,654.502 837.689,671.806 838.249,688.006 838.808,688.854 839.367,703.433 839.926,684.927 840.486,684.193 841.045,684.55 841.604,654.926 842.163,623.072 842.723,643.731 843.282,661.26 843.841,660.1 844.4,660.798 844.96,680.465 845.519,712.72 846.078,725.251 846.637,724.331 847.197,705.196 847.756,737.248 848.315,753.098 848.874,747.096 849.434,731.49 849.993,746.224 850.552,743.849 851.111,776.365 851.671,741.293 852.23,740.579 852.789,726.053 853.348,723.434 853.908,705.188 854.467,725.824 855.026,726.493 855.585,743.409 856.145,743.265 856.704,726.052 857.263,742.841 857.822,739.381 858.382,724.611 858.941,720.305 859.5,716.479 860.059,700.24 860.619,730.308 861.178,712.346 861.737,714.799 862.296,699.012 862.856,697.532 863.415,714.55 863.974,729.016 864.533,726.644 865.093,709.732 865.652,705.387 866.211,717.393 866.77,714.422 867.33,713.286 867.889,724.458 868.448,724.926 869.007,709.788 869.567,695.53 870.126,715.883 870.685,731.741 871.244,726.855 871.804,758.484 872.363,769.577 872.922,795.869 873.481,792.834 874.041,770.587 874.6,753.026 875.159,764.625 875.718,742.518 876.278,723.761 876.837,754.509 877.396,730.092 877.955,694.324 878.515,726.572 879.074,723.865 879.633,738.362 880.192,657.101 880.752,661.516 881.311,663.883 881.87,665.418 882.429,682.815 882.989,667.961 883.548,688.854 884.107,674.395 884.666,688.01 885.226,656.93 885.785,662.26 886.344,694.211 886.903,690.673 887.463,705.268 888.022,705.399 888.581,702.392 889.14,716.234 889.7,682.108 890.259,697.882 890.818,677.036 891.377,690.847 891.937,706.75 892.496,704.065 893.055,683.701 893.614,683.421 894.174,667.737 894.733,684.099 895.292,702.488 895.851,700.341 896.411,717.731 896.97,730.317 897.529,722.888 898.088,703.079 898.648,681.967 899.207,650.014 899.766,632.29 900.325,636.714 900.885,687.683 901.444,686.72 902.003,704.186 902.562,737.671 903.122,733.101 903.681,728.683 904.24,758.228 904.799,734.61 905.359,728.004 905.918,677.79 906.477,678.794 907.036,664.23 907.596,684.556 908.155,686.037 908.714,689.239 909.273,689.32 909.833,657.816 910.392,659.112 910.951,674.658 911.51,644.033 912.07,627.887 912.629,631.155 913.188,636.408 913.747,638.663 914.307,675.01 914.866,675.637 915.425,690.832 915.984,691.021 916.544,693.408 917.103,698.545 917.662,728.561 918.221,726.053 918.781,723.816 919.34,721.573 919.899,733.586 920.458,763.694 921.018,742.577 921.577,741.5 922.136,740.176 922.695,735.757 923.255,732.731 923.814,733.151 924.373,698.591 924.932,693.833 925.492,694.645 926.051,688.757 926.61,737.346 927.169,687.656 927.729,704.923 928.288,689.203 928.847,659.678 929.406,646.647 929.966,649.35 930.525,651.079 931.084,654.99 931.644,659.782 932.203,660.333 932.762,675.367 933.321,644.255 933.881,679.302 934.44,678.247 934.999,694.333 935.558,675.881 936.118,629.041 936.677,617.22 937.236,653.124 937.795,670.658 938.355,685.771 938.914,685.215 939.473,668.522 940.032,656.407 940.592,608.383 941.151,627.745 941.71,619.643 942.269,641.324 942.829,627.514 943.388,629.693 943.947,668.741 944.506,672.148 945.066,657.434 945.625,660.249 946.184,628.979 946.743,633.293 947.303,652.293 947.862,671.863 948.421,671.775 948.98,674.371 949.54,676.076 950.099,660.591 950.658,665.114 951.217,698.744 951.777,699.338 952.336,701.469 952.895,686.721 953.454,719.223 954.014,652.682 954.573,687.122 955.132,720.342 955.691,716.879 956.251,698.615 956.81,682.735 957.369,664.316 957.928,668.917 958.488,671.066 959.047,655.364 959.606,660.451 960.165,583.082 960.725,557.637 961.284,549.331 961.843,537.646 962.402,560.241 962.962,534.555 963.521,544.516 964.08,572.473 964.639,560.25 965.199,545.986 965.758,557.666 966.317,581.919 966.876,588.273 967.436,561.657 967.995,570 968.554,561.51 969.113,550.831 969.673,559.527 970.232,566.378 970.791,587.422 971.35,610.659 971.91,594.291 972.469,597.304 973.028,600.875 973.587,639.212 974.147,642.926 974.706,664.484 975.265,685.045 975.824,650.949 976.384,652.203 976.943,653.166 977.502,636.074 978.061,641.979 978.621,644.535 979.18,665.448 979.739,668.783 980.298,635.039 980.858,621.624 981.417,613.139 981.976,620.23 982.535,640.277 983.095,643.792 983.654,645.49 984.213,665.535 984.772,666.464 985.332,685.718 985.891,650.077 986.45,685.739 987.009,704.525 987.569,701.722 988.128,702.767 988.687,670.429 989.246,674.421 989.806,674.913 990.365,674.332 990.924,706.48 991.483,705.613 992.043,687.965 992.602,686.759 993.161,688.628 993.72,675.085 994.28,693.247 994.839,692.216 995.398,724.293 995.957,721.966 996.517,725.097 997.076,705.226 997.635,704.839 998.194,702.031 998.754,670.453 999.313,672.041 999.872,670.995 1000.43,704.148 1000.99,703.824 1001.55,703.322 1002.11,737.735 1002.67,734.293 1003.23,748.589 1003.79,728.981 1004.35,742.433 1004.91,690.054 1005.46,688.503 1006.02,687.787 1006.58,688.846 1007.14,639.609 1007.7,707.669 1008.26,670.529 1008.82,689.48 1009.38,704.346 1009.94,737.007 1010.5,739.803 1011.06,754.635 1011.62,784.38 1012.18,794.111 1012.73,816.813 1013.29,809.396 1013.85,834.597 1014.41,810.298 1014.97,818.042 1015.53,826.994 1016.09,815.453 1016.65,793.035 1017.21,772.345 1017.77,748.646 1018.33,745.663 1018.89,742.534 1019.45,691.667 1020.01,674.261 1020.56,658.919 1021.12,662.263 1021.68,679.174 1022.24,664.148 1022.8,662.258 1023.36,628.905 1023.92,630.749 1024.48,633.794 1025.04,637.74 1025.6,656.178 1026.16,656.251 1026.72,673.717 1027.28,673.994 1027.83,674.818 1028.39,660.253 1028.95,645.509 1029.51,649.82 1030.07,665.409 1030.63,665.165 1031.19,668.485 1031.75,636.821 1032.31,637.957 1032.87,626.737 1033.43,645.293 1033.99,631.685 1034.55,647.52 1035.1,664.345 1035.66,664.085 1036.22,683.399 1036.78,650.263 1037.34,684.057 1037.9,663.066 1038.46,664.053 1039.02,665.088 1039.58,682.519 1040.14,714.183 1040.7,748.385 1041.26,747.196 1041.82,755.062 1042.38,752.516 1042.93,720.333 1043.49,704.559 1044.05,655.771 1044.61,674.309 1045.17,703.343 1045.73,717.373 1046.29,695.17 1046.85,677.804 1047.41,707.329 1047.97,703.79 1048.53,689.599 1049.09,687.629 1049.65,687.757 1050.2,703.302 1050.76,685.042 1051.32,700.809 1051.88,696.491 1052.44,678.762 1053,659.002 1053.56,680.583 1054.12,695.679 1054.68,696.683 1055.24,695.138 1055.8,726.599 1056.36,727.742 1056.92,726.851 1057.48,724.911 1058.03,706.096 1058.59,723.292 1059.15,772.132 1059.71,768.003 1060.27,780.407 1060.83,789.973 1061.39,766.993 1061.95,742.764 1062.51,751.205 1063.07,762.982 1063.63,755.826 1064.19,767.269 1064.75,763.085 1065.3,743.149 1065.86,773.018 1066.42,720.129 1066.98,685.578 1067.54,683.507 1068.1,718.017 1068.66,697.962 1069.22,665.16 1069.78,649.733 1070.34,651.506 1070.9,667.958 1071.46,681.651 1072.02,680.963 1072.57,679.69 1073.13,662.836 1073.69,681.065 1074.25,692.932 1074.81,657.62 1075.37,626.198 1075.93,612.431 1076.49,582.066 1077.05,584.424 1077.61,587.272 1078.17,627.917 1078.73,646.043 1079.29,616.166 1079.85,612.134 1080.4,578.759 1080.96,618.374 1081.52,642.729 1082.08,633.177 1082.64,670.044 1083.2,651.875 1083.76,653.039 1084.32,651.565 1084.88,635.744 1085.44,655.171 1086,671.641 1086.56,640.678 1087.12,643.809 1087.67,629.572 1088.23,632.968 1088.79,668.574 1089.35,716.895 1089.91,698.836 1090.47,714.703 1091.03,762.805 1091.59,781.619 1092.15,759.155 1092.71,739.576 1093.27,720.486 1093.83,686.75 1094.39,701.19 1094.94,716.163 1095.5,697.468 1096.06,730.764 1096.62,711.66 1097.18,694.801 1097.74,694.194 1098.3,696.42 1098.86,697.239 1099.42,742.636 1099.98,769.098 1100.54,762.775 1101.1,759.866 1101.66,726.464 1102.22,758.078 1102.77,768.214 1103.33,777.577 1103.89,756.097 1104.45,769.499 1105.01,734.016 1105.57,732.416 1106.13,696.337 1106.69,709.059 1107.25,725.918 1107.81,739.066 1108.37,735.379 1108.93,732.841 1109.49,698.52 1110.04,696.702 1110.6,743.954 1111.16,741.597 1111.72,751.551 1112.28,763.189 1112.84,728.728 1113.4,712.964 1113.96,727.667 1114.52,724.192 1115.08,722.97 1115.64,720.063 1116.2,718.789 1116.76,735.367 1117.31,715.487 1117.87,683.735 1118.43,687.73 1118.99,672.803 1119.55,674.798 1120.11,692.56 1120.67,706.452 1121.23,704.779 1121.79,656.072 1122.35,641.949 1122.91,597.179 1123.47,583.66 1124.03,571.524 1124.59,593.994 1125.14,594.75 1125.7,584.16 1126.26,604.57 1126.82,626.037 1127.38,624.558 1127.94,612.046 1128.5,630.3 1129.06,613.445 1129.62,618.596 1130.18,588.852 1130.74,611.26 1131.3,599.77 1131.86,588.634 1132.41,611.55 1132.97,614.781 1133.53,605.313 1134.09,607.945 1134.65,613.054 1135.21,615.41 1135.77,650.015 1136.33,711.961 1136.89,666.224 1137.45,666.168 1138.01,687.381 1138.57,669.382 1139.13,671.273 1139.68,671.216 1140.24,657.819 1140.8,677.965 1141.36,683.773 1141.92,749.223 1142.48,763.55 1143.04,708.903 1143.6,725.776 1144.16,720.315 1144.72,720.375 1145.28,715.064 1145.84,713.984 1146.4,710.724 1146.96,721.094 1147.51,717.975 1148.07,656.747 1148.63,660.296 1149.19,690.981 1149.75,674.77 1150.31,691.243 1150.87,641.781 1151.43,695.06 1151.99,679.719 1152.55,681.316 1153.11,666.952 1153.67,686.957 1154.23,653.786 1154.78,656.262 1155.34,659.195 1155.9,679.452 1156.46,711.109 1157.02,712.635 1157.58,728.869 1158.14,740.524 1158.7,755.622 1159.26,750.566 1159.82,764.711 1160.38,779.571 1160.94,758.537 1161.5,723.937 1162.05,721.203 1162.61,720.043 1163.17,687.938 1163.73,670.774 1164.29,653.467 1164.85,655.187 1165.41,691.179 1165.97,721.465 1166.53,721.084 1167.09,732.179 1167.65,711.25 1168.21,726.004 1168.77,739.689 1169.33,719.322 1169.88,697.992 1170.44,679.992 1171,647.65 1171.56,653.381 1172.12,609.549 1172.68,612.476 1173.24,621.172 1173.8,623.07 1174.36,625.667 1174.92,649.318 1175.48,651.682 1176.04,637.214 1176.6,638.155 1177.15,638.514 1177.71,642.886 1178.27,626.203 1178.83,645.812 1179.39,662.94 1179.95,696.863 1180.51,712.648 1181.07,710.924 1181.63,709.58 1182.19,674.938 1182.75,674.221 1183.31,658.748 1183.87,661.91 1184.43,660.204 1184.98,661.451 1185.54,695.422 1186.1,696.522 1186.66,697.481 1187.22,662.707 1187.78,682.063 1188.34,684.473 1188.9,685.595 1189.46,687.317 1190.02,702.176 1190.58,715.675 1191.14,698.946 1191.7,729.886 1192.25,699.08 1192.81,717.414 1193.37,749.426 1193.93,761.302 1194.49,756.066 1195.05,701.938 1195.61,685.365 1196.17,700.565 1196.73,706.012 1197.29,672.428 1197.85,686.748 1198.41,700.502 1198.97,683.164 1199.52,670.572 1200.08,716.467 1200.64,699.003 1201.2,679.445 1201.76,683.206 1202.32,697.297 1202.88,716.083 1203.44,729.295 1204,777.542 1204.56,788.977 1205.12,786.358 1205.68,697.948 1206.24,696.607 1206.8,678.834 1207.35,681.739 1207.91,663.52 1208.47,664.772 1209.03,696.961 1209.59,695.162 1210.15,711.563 1210.71,678.423 1211.27,710.492 1211.83,708.386 1212.39,693.756 1212.95,693.956 1213.51,657.55 1214.07,691.262 1214.62,676.282 1215.18,677.999 1215.74,709.961 1216.3,644.729 1216.86,628.26 1217.42,679.237 1217.98,681.182 1218.54,679.166 1219.1,678.731 1219.66,676.18 1220.22,677.714 1220.78,658.641 1221.34,656.371 1221.89,627.344 1222.45,635.165 1223.01,654.549 1223.57,624.208 1224.13,645.556 1224.69,663.281 1225.25,667.433 1225.81,632.959 1226.37,624.685 1226.93,624.799 1227.49,642.534 1228.05,629.895 1228.61,665.044 1229.17,652.932 1229.72,668.954 1230.28,684.912 1230.84,667.429 1231.4,669.365 1231.96,702.93 1232.52,670.929 1233.08,703.69 1233.64,749.896 1234.2,779.226 1234.76,777.905 1235.32,756.723 1235.88,769.069 1236.44,793.706 1236.99,756.579 1237.55,753.225 1238.11,748.135 1238.67,762.236 1239.23,755.476 1239.79,736.884 1240.35,735.694 1240.91,734.98 1241.47,749.201 1242.03,747.181 1242.59,709.692 1243.15,694.769 1243.71,710.946 1244.26,675.592 1244.82,657.786 1245.38,673.061 1245.94,642.243 1246.5,661.93 1247.06,681.313 1247.62,632.89 1248.18,700.249 1248.74,685.584 1249.3,686.531 1249.86,699.664 1250.42,696.827 1250.98,641.572 1251.54,674.474 1252.09,641.825 1252.65,658.962 1253.21,661.477 1253.77,628.418 1254.33,645.313 1254.89,678.209 1255.45,661.633 1256.01,678.851 1256.57,665.865 1257.13,697.894 1257.69,677.805 1258.25,662.867 1258.81,645.151 1259.36,650.043 1259.92,665.893 1260.48,663.149 1261.04,660.664 1261.6,662.748 1262.16,645.516 1262.72,661.871 1263.28,664.48 1263.84,677.933 1264.4,662.991 1264.96,697.611 1265.52,699.347 1266.08,700.503 1266.63,687 1267.19,671.071 1267.75,657.001 1268.31,660.336 1268.87,694.086 1269.43,676.761 1269.99,643.703 1270.55,631.917 1271.11,682.522 1271.67,633.809 1272.23,637.17 1272.79,689.678 1273.35,671.628 1273.91,658.666 1274.46,676.412 1275.02,676.172 1275.58,643.624 1276.14,613.812 1276.7,585.815 1277.26,655.569 1277.82,657.808 1278.38,627.329 1278.94,615.142 1279.5,586.095 1280.06,593.308 1280.62,581.162 1281.18,588.824 1281.73,609.994 1282.29,602.982 1282.85,609.21 1283.41,613.402 1283.97,614.664 1284.53,617.152 1285.09,625.013 1285.65,646.191 1286.21,649.689 1286.77,651.342 1287.33,683.057 1287.89,666.834 1288.45,683.902 1289,669.319 1289.56,654.52 1290.12,638.539 1290.68,673.336 1291.24,691.123 1291.8,709.916 1292.36,709.404 1292.92,679.717 1293.48,698.463 1294.04,699.338 1294.6,696.935 1295.16,680.85 1295.72,699.292 1296.28,713.47 1296.83,726.666 1297.39,724.513 1297.95,721.551 1298.51,732.824 1299.07,731.241 1299.63,744.567 1300.19,726.24 1300.75,679.434 1301.31,695.19 1301.87,680.561 1302.43,665.042 1302.99,667.585 1303.55,683.394 1304.1,683.741 1304.66,685.031 1305.22,684.775 1305.78,669.771 1306.34,671.638 1306.9,672.679 1307.46,661.403 1308.02,696.319 1308.58,696.94 1309.14,680.487 1309.7,727.121 1310.26,726.586 1310.82,724.306 1311.38,722.422 1311.93,738.046 1312.49,749.571 1313.05,715.605 1313.61,712.972 1314.17,706.07 1314.73,706.622 1315.29,704.748 1315.85,751.809 1316.41,764.232 1316.97,745.584 1317.53,760.669 1318.09,740.738 1318.65,769.111 1319.2,766.718 1319.76,813.298 1320.32,841.091 1320.88,818.36 1321.44,823.892 1322,817.517 1322.56,842.579 1323.12,817.512 1323.68,795.166 1324.24,769.915 1324.8,763.922 1325.36,756.419 1325.92,752.663 1326.47,764.019 1327.03,759.081 1327.59,788.137 1328.15,783.168 1328.71,779.531 1329.27,755.93 1329.83,798.669 1330.39,775.621 1330.95,767.613 1331.51,749.011 1332.07,742.781 1332.63,723.593 1333.19,707.349 1333.75,691.748 1334.3,694.431 1334.86,694.803 1335.42,724.604 1335.98,736.122 1336.54,731.188 1337.1,729.496 1337.66,664.181 1338.22,678.539 1338.78,661.896 1339.34,645.652 1339.9,663.649 1340.46,664.712 1341.02,649.466 1341.57,665.899 1342.13,629.873 1342.69,600.215 1343.25,600.521 1343.81,620.767 1344.37,601.517 1344.93,605.717 1345.49,592.905 1346.05,599.911 1346.61,576.039 1347.17,563.805 1347.73,540.196 1348.29,550.253 1348.84,608.132 1349.4,596.001 1349.96,613.874 1350.52,602.42 1351.08,605.677 1351.64,606.517 1352.2,608.026 1352.76,626.137 1353.32,626.054 1353.88,611.834 1354.44,631.021 1355,636.048 1355.56,638.781 1356.12,641.237 1356.67,655.2 1357.23,673.193 1357.79,676.05 1358.35,678.769 1358.91,647.095 1359.47,616.752 1360.03,603.666 1360.59,629.592 1361.15,638.441 1361.71,674.238 1362.27,657.667 1362.83,659.374 1363.39,630.502 1363.94,678.234 1364.5,679.531 1365.06,694.846 1365.62,692.68 1366.18,725.463 1366.74,695.499 1367.3,692.099 1367.86,675.749 1368.42,690.57 1368.98,690.344 1369.54,702.085 1370.1,686.19 1370.66,684.63 1371.21,668.239 1371.77,668.089 1372.33,666.874 1372.89,666.062 1373.45,666.233 1374.01,703.056 1374.57,685.672 1375.13,702.079 1375.69,682.581 1376.25,646.876 1376.81,652.66 1377.37,670.184 1377.93,672.091 1378.49,673.948 1379.04,673.128 1379.6,706.154 1380.16,702.396 1380.72,684.849 1381.28,685.047 1381.84,686.261 1382.4,681.871 1382.96,665.522 1383.52,683.901 1384.08,668.986 1384.64,716.122 1385.2,730.088 1385.76,726.906 1386.31,723.103 1386.87,752.151 1387.43,731.291 1387.99,741.038 1388.55,703.418 1389.11,719.89 1389.67,750.564 1390.23,760.217 1390.79,756.061 1391.35,796.436 1391.91,793.303 1392.47,800.032 1393.03,795.875 1393.58,771.893 1394.14,795.958 1394.7,804.013 1395.26,752.137 1395.82,698.68 1396.38,701.131 1396.94,699.025 1397.5,662.982 1398.06,744.094 1398.62,741.29 1399.18,722.283 1399.74,723.843 1400.3,722.002 1400.86,705.107 1401.41,722.493 1401.97,720.349 1402.53,704.728 1403.09,722.616 1403.65,734.559 1404.21,747.175 1404.77,693.028 1405.33,693.958 1405.89,695.632 1406.45,677.86 1407.01,675.664 1407.57,677.353 1408.13,674.428 1408.68,662.025 1409.24,646.45 1409.8,652.278 1410.36,652.453 1410.92,654.579 1411.48,653.591 1412.04,670.08 1412.6,653.95 1413.16,669.827 1413.72,655.88 1414.28,655.63 1414.84,638.845 1415.4,643.582 1415.95,644.054 1416.51,646.718 1417.07,664.693 1417.63,678.37 1418.19,698.218 1418.75,712.44 1419.31,710.135 1419.87,725.755 1420.43,740.291 1420.99,672.971 1421.55,673.707 1422.11,686.499 1422.67,685.884 1423.23,684.584 1423.78,686.626 1424.34,669.76 1424.9,683.395 1425.46,699.764 1426.02,683.817 1426.58,685.08 1427.14,669.776 1427.7,638.44 1428.26,622.418 1428.82,594.043 1429.38,598.574 1429.94,602.915 1430.5,608.921 1431.05,594.13 1431.61,598.494 1432.17,605.937 1432.73,577.099 1433.29,633.15 1433.85,654.606 1434.41,623.267 1434.97,640.97 1435.53,646.087 1436.09,663.61 1436.65,646.435 1437.21,644.319 1437.77,694.621 1438.33,710.766 1438.88,706.249 1439.44,701.722 1440,681.169 1440.56,677.886 1441.12,681.747 1441.68,683.724 1442.24,701.348 1442.8,703.188 1443.36,701.848 1443.92,681.793 1444.48,680.271 1445.04,681.305 1445.6,682.484 1446.15,617.696 1446.71,667.843 1447.27,684.53 1447.83,670.745 1448.39,671.23 1448.95,670.866 1449.51,668.853 1450.07,666.226 1450.63,684.054 1451.19,704.32 1451.75,739.877 1452.31,753.774 1452.87,749.055 1453.42,711.598 1453.98,708.871 1454.54,707.789 1455.1,641.139 1455.66,628.643 1456.22,633.581 1456.78,601.709 1457.34,589.424 1457.9,626.12 1458.46,632.413 1459.02,620.15 1459.58,622.453 1460.14,607.884 1460.7,576.713 1461.25,618.322 1461.81,607.11 1462.37,628.849 1462.93,630.245 1463.49,633.387 1464.05,637.34 1464.61,657.603 1465.17,659.865 1465.73,648.427 1466.29,663.993 1466.85,678.633 1467.41,662.774 1467.97,675.451 1468.52,689.818 1469.08,690.978 1469.64,721.335 1470.2,720.634 1470.76,750.761 1471.32,749.606 1471.88,779.942 1472.44,761.205 1473,725.822 1473.56,707.121 1474.12,690.16 1474.68,690.203 1475.24,673.085 1475.79,704.744 1476.35,672.189 1476.91,670.791 1477.47,686.706 1478.03,686.17 1478.59,703.614 1479.15,701.416 1479.71,730.171 1480.27,728.915 1480.83,726.223 1481.39,690.659 1481.95,706.308 1482.51,673.531 1483.07,676.537 1483.62,677.489 1484.18,708.958 1484.74,695.026 1485.3,712.616 1485.86,743.881 1486.42,741.196 1486.98,739.493 1487.54,723.07 1488.1,735.959 1488.66,718.997 1489.22,700.415 1489.78,698.071 1490.34,714.669 1490.89,716.631 1491.45,730.452 1492.01,710.176 1492.57,706.225 1493.13,704.587 1493.69,718.537 1494.25,715.758 1494.81,727.903 1495.37,758.463 1495.93,784.004 1496.49,811.824 1497.05,789.956 1497.61,801.285 1498.16,811.62 1498.72,804.358 1499.28,814.595 1499.84,790.334 1500.4,769.746 1500.96,747.713 1501.52,712.582 1502.08,660.697 1502.64,646.106 1503.2,711.859 1503.76,693.557 1504.32,661.678 1504.88,659.583 1505.44,660.7 1505.99,694.521 1506.55,709.096 1507.11,688.499 1507.67,674.413 1508.23,675.005 1508.79,677.411 1509.35,696.616 1509.91,707.408 1510.47,685.45 1511.03,684.214 1511.59,684.194 1512.15,682.872 1512.71,681.045 1513.26,711.379 1513.82,740.926 1514.38,708.94 1514.94,694.415 1515.5,692.527 1516.06,675.119 1516.62,675.773 1517.18,678.143 1517.74,706.747 1518.3,739.989 1518.86,738.802 1519.42,686.778 1519.98,658.254 1520.53,646.547 1521.09,618.61 1521.65,650.697 1522.21,617.728 1522.77,619.792 1523.33,572.825 1523.89,575.532 1524.45,577.286 1525.01,582.104 1525.57,573.149 1526.13,611.967 1526.69,650.784 1527.25,652.933 1527.81,607.358 1528.36,610.079 1528.92,597.118 1529.48,637.983 1530.04,637.868 1530.6,653.802 1531.16,686.684 1531.72,704.034 1532.28,687.052 1532.84,685.244 1533.4,685.757 1533.96,700.381 1534.52,716.422 1535.08,731.305 1535.63,774.748 1536.19,772.417 1536.75,798.144 1537.31,808.214 1537.87,783.439 1538.43,791.685 1538.99,769.229 1539.55,763.237 1540.11,774.095 1540.67,817.554 1541.23,808.933 1541.79,821.123 1542.35,769.18 1542.9,735.673 1543.46,715.099 1544.02,698.684 1544.58,635.686 1545.14,684.098 1545.7,668.917 1546.26,653.819 1546.82,667.425 1547.38,670.53 1547.94,658.595 1548.5,660.747 1549.06,664.221 1549.62,651.061 1550.18,666.082 1550.73,645.468 1551.29,666.249 1551.85,666.66 1552.41,616.409 1552.97,620.705 1553.53,609.478 1554.09,612.633 1554.65,680.008 1555.21,678.203 1555.77,644.553 1556.33,663.145 1556.89,647.652 1557.45,633.911 1558,654.157 1558.56,639.085 1559.12,628.392 1559.68,598.725 1560.24,603.231 1560.8,670.812 1561.36,673.868 1561.92,674.898 1562.48,659.562 1563.04,675.929 1563.6,690.892 1564.16,727.745 1564.72,710.22 1565.28,663.234 1565.83,650.705 1566.39,634.126 1566.95,635.414 1567.51,639.829 1568.07,623.975 1568.63,615.11 1569.19,619.944 1569.75,605.703 1570.31,594.677 1570.87,582.532 1571.43,603.392 1571.99,589.201 1572.55,597.024 1573.1,618.876 1573.66,622.981 1574.22,644.921 1574.78,612.891 1575.34,619.054 1575.9,606.069 1576.46,626.429 1577.02,644.515 1577.58,615.509 1578.14,655.862 1578.7,627.871 1579.26,630.966 1579.82,586.965 1580.37,606.332 1580.93,641.853 1581.49,616.06 1582.05,652.365 1582.61,690.247 1583.17,679.004 1583.73,698.198 1584.29,698.794 1584.85,665.961 1585.41,670.969 1585.97,625.155 1586.53,610.882 1587.09,677.997 1587.65,679.374 1588.2,631.055 1588.76,665.135 1589.32,663.202 1589.88,715.361 1590.44,714.425 1591,726.567 1591.56,706.579 1592.12,735.529 1592.68,766.395 1593.24,813.068 1593.8,790.892 1594.36,784.892 1594.92,767.789 1595.47,749.818 1596.03,762.099 1596.59,756.471 1597.15,721.752 1597.71,752.146 1598.27,728.577 1598.83,692.768 1599.39,674.57 1599.95,674.28 1600.51,671.443 1601.07,668.504 1601.63,669.668 1602.19,672.576 1602.74,688.011 1603.3,704.102 1603.86,714.738 1604.42,678.232 1604.98,662.747 1605.54,631.097 1606.1,668.96 1606.66,699.793 1607.22,668.568 1607.78,638.822 1608.34,661.248 1608.9,676.167 1609.46,680.121 1610.02,698.314 1610.57,679.791 1611.13,696.939 1611.69,728.61 1612.25,727.345 1612.81,742.86 1613.37,722.24 1613.93,715.496 1614.49,698.729 1615.05,665.834 1615.61,714.608 1616.17,695.72 1616.73,680.181 1617.29,693.825 1617.84,697.67 1618.4,699.219 1618.96,682.848 1619.52,697.776 1620.08,678.523 1620.64,678.043 1621.2,645.274 1621.76,665.192 1622.32,651.553 1622.88,671.087 1623.44,683.108 1624,685.311 1624.56,717.578 1625.11,699.558 1625.67,710.272 1626.23,708.559 1626.79,706.572 1627.35,705.65 1627.91,703.597 1628.47,687.068 1629.03,654.746 1629.59,608.82 1630.15,628.147 1630.71,659.285 1631.27,661.403 1631.83,678.471 1632.39,714.511 1632.94,714.142 1633.5,693.425 1634.06,722.912 1634.62,700.867 1635.18,699.885 1635.74,681.105 1636.3,681.708 1636.86,680.89 1637.42,711.75 1637.98,756.019 1638.54,723.287 1639.1,719.367 1639.66,703.213 1640.21,702.801 1640.77,718.667 1641.33,719.545 1641.89,718.22 1642.45,728.687 1643.01,725.032 1643.57,736.766 1644.13,738.736 1644.69,736.395 1645.25,716.533 1645.81,688.036 1646.37,719.44 1646.93,715 1647.48,699.618 1648.04,678.256 1648.6,681.61 1649.16,700.495 1649.72,702.295 1650.28,672.386 1650.84,689.648 1651.4,656.209 1651.96,672.472 1652.52,687.618 1653.08,702.877 1653.64,701.181 1654.2,701.001 1654.76,713.555 1655.31,695.829 1655.87,698.973 1656.43,702.148 1656.99,699.312 1657.55,696.888 1658.11,679.55 1658.67,678.753 1659.23,681.355 1659.79,682.751 1660.35,650.773 1660.91,684.614 1661.47,662.115 1662.03,632.884 1662.58,650.76 1663.14,651.259 1663.7,638.205 1664.26,656.602 1664.82,640.78 1665.38,673.134 1665.94,655.453 1666.5,626.027 1667.06,595.058 1667.62,587.262 1668.18,578.855 1668.74,583.56 1669.3,648.677 1669.85,654.252 1670.41,669.877 1670.97,672.455 1671.53,672.868 1672.09,651.908 1672.65,654.026 1673.21,653.102 1673.77,607.197 1674.33,579.663 1674.89,569.471 1675.45,590.703 1676.01,612.018 1676.57,598.116 1677.13,589.566 1677.68,613.474 1678.24,620.076 1678.8,638.325 1679.36,641.82 1679.92,645.559 1680.48,664.303 1681.04,666.79 1681.6,677.427 1682.16,693.456 1682.72,677.589 1683.28,680.807 1683.84,616.858 1684.4,607.197 1684.95,628.376 1685.51,632.269 1686.07,632.552 1686.63,616.106 1687.19,556.728 1687.75,562.904 1688.31,587.672 1688.87,591.598 1689.43,597.039 1689.99,601.745 1690.55,639.654 1691.11,658.91 1691.67,664.236 1692.23,666.392 1692.78,682.596 1693.34,715.637 1693.9,729.508 1694.46,696.138 1695.02,664.538 1695.58,666.453 1696.14,667.858 1696.7,672.197 1697.26,660.859 1697.82,673.93 1698.38,641.283 1698.94,628.171 1699.5,632.74 1700.05,619.574 1700.61,639.241 1701.17,657.452 1701.73,691.538 1702.29,691.724 1702.85,709.054 1703.41,709.645 1703.97,694.316 1704.53,710.829 1705.09,741.095 1705.65,722.746 1706.21,718.912 1706.77,668.267 1707.32,668.64 1707.88,687.423 1708.44,685.631 1709,669.032 1709.56,701.807 1710.12,747.913 1710.68,729.023 1711.24,758.478 1711.8,772.069 1712.36,736.793 1712.92,729.922 1713.48,725.479 1714.04,722.509 1714.6,658.147 1715.15,672.826 1715.71,666.905 1716.27,654.224 1716.83,640.167 1717.39,628.087 1717.95,650.33 1718.51,665.927 1719.07,684.075 1719.63,667.454 1720.19,648.351 1720.75,649.067 1721.31,666.071 1721.87,665.686 1722.42,649.803 1722.98,651.063 1723.54,653.021 1724.1,671.627 1724.66,627.379 1725.22,610.927 1725.78,616.189 1726.34,635.617 1726.9,688.688 1727.46,736.02 1728.02,747.82 1728.58,743.651 1729.14,790.207 1729.69,752.268 1730.25,747.539 1730.81,756.51 1731.37,735.095 1731.93,732.634 1732.49,745.546 1733.05,741.01 1733.61,717.006 1734.17,730.663 1734.73,697.383 1735.29,695.313 1735.85,710.94 1736.41,695.318 1736.97,689.236 1737.52,689.209 1738.08,687.37 1738.64,686.481 1739.2,688.045 1739.76,703.199 1740.32,685.231 1740.88,671.979 1741.44,687.589 1742,717.951 1742.56,713.939 1743.12,699.885 1743.68,697.954 1744.24,699.202 1744.79,699.407 1745.35,667.486 1745.91,685.216 1746.47,702.523 1747.03,685.665 1747.59,685.151 1748.15,717.764 1748.71,717.691 1749.27,684.949 1749.83,638.423 1750.39,621.47 1750.95,609.576 1751.51,612.204 1752.06,603.255 1752.62,608.945 1753.18,611.073 1753.74,581.906 1754.3,648.17 1754.86,694.371 1755.42,725.795 1755.98,720.667 1756.54,701.243 1757.1,683.542 1757.66,665.994 1758.22,664.879 1758.78,648.985 1759.34,665.621 1759.89,649.27 1760.45,686.229 1761.01,664.779 1761.57,687.388 1762.13,690.882 1762.69,674.673 1763.25,688.285 1763.81,687.365 1764.37,652.446 1764.93,667.512 1765.49,667.61 1766.05,668.991 1766.61,671.495 1767.16,671.809 1767.72,657.153 1768.28,690.788 1768.84,707.539 1769.4,674.776 1769.96,645.369 1770.52,664.377 1771.08,665.683 1771.64,732.123 1772.2,727.832 1772.76,707.639 1773.32,704.539 1773.88,738.676 1774.43,721.648 1774.99,717.983 1775.55,703.282 1776.11,684.83 1776.67,672.711 1777.23,671.91 1777.79,673.827 1778.35,691.781 1778.91,742.443 1779.47,756.054 1780.03,731.878 1780.59,717.825 1781.15,698.049 1781.71,727.045 1782.26,707.355 1782.82,673.113 1783.38,641.301 1783.94,625.089 1784.5,708.175 1785.06,721.583 1785.62,702.267 1786.18,702.404 1786.74,716.361 1787.3,743.411 1787.86,722.678 1788.42,722.665 1788.98,738.965 1789.53,736.604 1790.09,705.019 1790.65,687.239 1791.21,687.414 1791.77,704.563 1792.33,717.176 1792.89,694.563 1793.45,675.561 1794.01,660.023 1794.57,661.911 1795.13,662.948 1795.69,662.156 1796.25,681.701 1796.8,680.475 1797.36,678.368 1797.92,680.191 1798.48,665.45 1799.04,651.798 1799.6,652.485 1800.16,769.33 1800.72,780.684 1801.28,746.464 1801.84,760.469 1802.4,768.737 1802.96,779.937 1803.52,810.678 1804.08,802.961 1804.63,796.704 1805.19,791.752 1805.75,767.68 1806.31,762.083 1806.87,789.327 1807.43,796.066 1807.99,824.03 1808.55,813.256 1809.11,775.256 1809.67,768.574 1810.23,731.487 1810.79,729.783 1811.35,727.702 1811.9,723.135 1812.46,719.543 1813.02,703.768 1813.58,705.105 1814.14,738.46 1814.7,703.692 1815.26,718.028 1815.82,716.749 1816.38,715.968 1816.94,746.326 1817.5,760.04 1818.06,770.561 1818.62,721.481 1819.18,717.385 1819.73,732.6 1820.29,716.666 1820.85,682.283 1821.41,685.583 1821.97,698.213 1822.53,728.765 1823.09,744.814 1823.65,725.065 1824.21,719.403 1824.77,702.878 1825.33,686.555 1825.89,701.796 1826.45,766.044 1827,763.799 1827.56,792.635 1828.12,767.783 1828.68,763.484 1829.24,758.711 1829.8,753.758 1830.36,780.804 1830.92,804.779 1831.48,778.383 1832.04,754.056 1832.6,749.455 1833.16,744.523 1833.72,775.818 1834.27,739.316 1834.83,687.273 1835.39,685.774 1835.95,652.066 1836.51,650.79 1837.07,652.48 1837.63,653.163 1838.19,636.421 \"/>\n<path clip-path=\"url(#clip463)\" d=\"M720.247 690.251 L720.806 690.251 L721.365 690.251 L721.924 690.251 L722.484 690.251 L723.043 690.251 L723.602 690.251 L724.161 690.251 L724.721 690.251 L725.28 690.251 L725.839 690.251 L726.398 690.251 L726.958 690.251 L727.517 690.251 L728.076 690.251 L728.635 690.251 L729.195 690.251 L729.754 690.251 L730.313 690.251 L730.872 690.251 L731.432 690.251 L731.991 690.251 L732.55 690.251 L733.109 690.251 L733.669 690.251 L734.228 690.251 L734.787 690.251 L735.346 690.251 L735.906 690.251 L736.465 690.251 L737.024 690.251 L737.583 690.251 L738.143 690.251 L738.702 690.251 L739.261 690.251 L739.82 690.251 L740.38 690.251 L740.939 690.251 L741.498 690.251 L742.057 690.251 L742.617 690.251 L743.176 690.251 L743.735 690.251 L744.294 690.251 L744.854 690.251 L745.413 690.251 L745.972 690.251 L746.531 690.251 L747.091 690.251 L747.65 690.251 L748.209 690.251 L748.768 690.251 L749.328 690.251 L749.887 690.251 L750.446 690.251 L751.005 690.251 L751.565 690.251 L752.124 690.251 L752.683 690.251 L753.242 690.251 L753.802 690.251 L754.361 690.251 L754.92 690.251 L755.479 690.251 L756.039 690.251 L756.598 690.251 L757.157 690.251 L757.716 690.251 L758.276 690.251 L758.835 690.251 L759.394 690.251 L759.953 690.251 L760.513 690.251 L761.072 690.251 L761.631 690.251 L762.19 690.251 L762.75 690.251 L763.309 690.251 L763.868 690.251 L764.427 690.251 L764.987 690.251 L765.546 690.251 L766.105 690.251 L766.664 690.251 L767.224 690.251 L767.783 690.251 L768.342 690.251 L768.901 690.251 L769.461 690.251 L770.02 690.251 L770.579 690.251 L771.138 690.251 L771.698 690.251 L772.257 690.251 L772.816 690.251 L773.375 690.251 L773.935 690.251 L774.494 690.251 L775.053 690.251 L775.612 690.251 L776.172 690.251 L776.731 690.251 L777.29 690.251 L777.849 690.251 L778.409 690.251 L778.968 690.251 L779.527 690.251 L780.086 690.251 L780.646 690.251 L781.205 690.251 L781.764 690.251 L782.323 690.251 L782.883 690.251 L783.442 690.251 L784.001 690.251 L784.56 690.251 L785.12 690.251 L785.679 690.251 L786.238 690.251 L786.797 690.251 L787.357 690.251 L787.916 690.251 L788.475 690.251 L789.034 690.251 L789.594 690.251 L790.153 690.251 L790.712 690.251 L791.271 690.251 L791.831 690.251 L792.39 690.251 L792.949 690.251 L793.508 690.251 L794.068 690.251 L794.627 690.251 L795.186 690.251 L795.745 690.251 L796.305 690.251 L796.864 690.251 L797.423 690.251 L797.982 690.251 L798.542 690.251 L799.101 690.251 L799.66 690.251 L800.219 690.251 L800.779 690.251 L801.338 690.251 L801.897 690.251 L802.456 690.251 L803.016 690.251 L803.575 690.251 L804.134 690.251 L804.693 690.251 L805.253 690.251 L805.812 690.251 L806.371 690.251 L806.931 690.251 L807.49 690.251 L808.049 690.251 L808.608 690.251 L809.168 690.251 L809.727 690.251 L810.286 690.251 L810.845 690.251 L811.405 690.251 L811.964 690.251 L812.523 690.251 L813.082 690.251 L813.642 690.251 L814.201 690.251 L814.76 690.251 L815.319 690.251 L815.879 690.251 L816.438 690.251 L816.997 690.251 L817.556 690.251 L818.116 690.251 L818.675 690.251 L819.234 690.251 L819.793 690.251 L820.353 690.251 L820.912 690.251 L821.471 690.251 L822.03 690.251 L822.59 690.251 L823.149 690.251 L823.708 690.251 L824.267 690.251 L824.827 690.251 L825.386 690.251 L825.945 690.251 L826.504 690.251 L827.064 690.251 L827.623 690.251 L828.182 690.251 L828.741 690.251 L829.301 690.251 L829.86 690.251 L830.419 690.251 L830.978 690.251 L831.538 690.251 L832.097 690.251 L832.656 690.251 L833.215 690.251 L833.775 690.251 L834.334 690.251 L834.893 690.251 L835.452 690.251 L836.012 690.251 L836.571 690.251 L837.13 690.251 L837.689 690.251 L838.249 690.251 L838.808 690.251 L839.367 690.251 L839.926 690.251 L840.486 690.251 L841.045 690.251 L841.604 690.251 L842.163 690.251 L842.723 690.251 L843.282 690.251 L843.841 690.251 L844.4 690.251 L844.96 690.251 L845.519 690.251 L846.078 690.251 L846.637 690.251 L847.197 690.251 L847.756 690.251 L848.315 690.251 L848.874 690.251 L849.434 690.251 L849.993 690.251 L850.552 690.251 L851.111 690.251 L851.671 690.251 L852.23 690.251 L852.789 690.251 L853.348 690.251 L853.908 690.251 L854.467 690.251 L855.026 690.251 L855.585 690.251 L856.145 690.251 L856.704 690.251 L857.263 690.251 L857.822 690.251 L858.382 690.251 L858.941 690.251 L859.5 690.251 L860.059 690.251 L860.619 690.251 L861.178 690.251 L861.737 690.251 L862.296 690.251 L862.856 690.251 L863.415 690.251 L863.974 690.251 L864.533 690.251 L865.093 690.251 L865.652 690.251 L866.211 690.251 L866.77 690.251 L867.33 690.251 L867.889 690.251 L868.448 690.251 L869.007 690.251 L869.567 690.251 L870.126 690.251 L870.685 690.251 L871.244 690.251 L871.804 690.251 L872.363 690.251 L872.922 690.251 L873.481 690.251 L874.041 690.251 L874.6 690.251 L875.159 690.251 L875.718 690.251 L876.278 690.251 L876.837 690.251 L877.396 690.251 L877.955 690.251 L878.515 690.251 L879.074 690.251 L879.633 690.251 L880.192 690.251 L880.752 690.251 L881.311 690.251 L881.87 690.251 L882.429 690.251 L882.989 690.251 L883.548 690.251 L884.107 690.251 L884.666 690.251 L885.226 690.251 L885.785 690.251 L886.344 690.251 L886.903 690.251 L887.463 690.251 L888.022 690.251 L888.581 690.251 L889.14 690.251 L889.7 690.251 L890.259 690.251 L890.818 690.251 L891.377 690.251 L891.937 690.251 L892.496 690.251 L893.055 690.251 L893.614 690.251 L894.174 690.251 L894.733 690.251 L895.292 690.251 L895.851 690.251 L896.411 690.251 L896.97 690.251 L897.529 690.251 L898.088 690.251 L898.648 690.251 L899.207 690.251 L899.766 690.251 L900.325 690.251 L900.885 690.251 L901.444 690.251 L902.003 690.251 L902.562 690.251 L903.122 690.251 L903.681 690.251 L904.24 690.251 L904.799 690.251 L905.359 690.251 L905.918 690.251 L906.477 690.251 L907.036 690.251 L907.596 690.251 L908.155 690.251 L908.714 690.251 L909.273 690.251 L909.833 690.251 L910.392 690.251 L910.951 690.251 L911.51 690.251 L912.07 690.251 L912.629 690.251 L913.188 690.251 L913.747 690.251 L914.307 690.251 L914.866 690.251 L915.425 690.251 L915.984 690.251 L916.544 690.251 L917.103 690.251 L917.662 690.251 L918.221 690.251 L918.781 690.251 L919.34 690.251 L919.899 690.251 L920.458 690.251 L921.018 690.251 L921.577 690.251 L922.136 690.251 L922.695 690.251 L923.255 690.251 L923.814 690.251 L924.373 690.251 L924.932 690.251 L925.492 690.251 L926.051 690.251 L926.61 690.251 L927.169 690.251 L927.729 690.251 L928.288 690.251 L928.847 690.251 L929.406 690.251 L929.966 690.251 L930.525 690.251 L931.084 690.251 L931.644 690.251 L932.203 690.251 L932.762 690.251 L933.321 690.251 L933.881 690.251 L934.44 690.251 L934.999 690.251 L935.558 690.251 L936.118 690.251 L936.677 690.251 L937.236 690.251 L937.795 690.251 L938.355 690.251 L938.914 690.251 L939.473 690.251 L940.032 690.251 L940.592 690.251 L941.151 690.251 L941.71 690.251 L942.269 690.251 L942.829 690.251 L943.388 690.251 L943.947 690.251 L944.506 690.251 L945.066 690.251 L945.625 690.251 L946.184 690.251 L946.743 690.251 L947.303 690.251 L947.862 690.251 L948.421 690.251 L948.98 690.251 L949.54 690.251 L950.099 690.251 L950.658 690.251 L951.217 690.251 L951.777 690.251 L952.336 690.251 L952.895 690.251 L953.454 690.251 L954.014 690.251 L954.573 690.251 L955.132 690.251 L955.691 690.251 L956.251 690.251 L956.81 690.251 L957.369 690.251 L957.928 690.251 L958.488 690.251 L959.047 690.251 L959.606 690.251 L960.165 690.251 L960.725 690.251 L961.284 690.251 L961.843 690.251 L962.402 690.251 L962.962 690.251 L963.521 690.251 L964.08 690.251 L964.639 690.251 L965.199 690.251 L965.758 690.251 L966.317 690.251 L966.876 690.251 L967.436 690.251 L967.995 690.251 L968.554 690.251 L969.113 690.251 L969.673 690.251 L970.232 690.251 L970.791 690.251 L971.35 690.251 L971.91 690.251 L972.469 690.251 L973.028 690.251 L973.587 690.251 L974.147 690.251 L974.706 690.251 L975.265 690.251 L975.824 690.251 L976.384 690.251 L976.943 690.251 L977.502 690.251 L978.061 690.251 L978.621 690.251 L979.18 690.251 L979.739 690.251 L980.298 690.251 L980.858 690.251 L981.417 690.251 L981.976 690.251 L982.535 690.251 L983.095 690.251 L983.654 690.251 L984.213 690.251 L984.772 690.251 L985.332 690.251 L985.891 690.251 L986.45 690.251 L987.009 690.251 L987.569 690.251 L988.128 690.251 L988.687 690.251 L989.246 690.251 L989.806 690.251 L990.365 690.251 L990.924 690.251 L991.483 690.251 L992.043 690.251 L992.602 690.251 L993.161 690.251 L993.72 690.251 L994.28 690.251 L994.839 690.251 L995.398 690.251 L995.957 690.251 L996.517 690.251 L997.076 690.251 L997.635 690.251 L998.194 690.251 L998.754 690.251 L999.313 690.251 L999.872 690.251 L1000.43 690.251 L1000.99 690.251 L1001.55 690.251 L1002.11 690.251 L1002.67 690.251 L1003.23 690.251 L1003.79 690.251 L1004.35 690.251 L1004.91 690.251 L1005.46 690.251 L1006.02 690.251 L1006.58 690.251 L1007.14 690.251 L1007.7 690.251 L1008.26 690.251 L1008.82 690.251 L1009.38 690.251 L1009.94 690.251 L1010.5 690.251 L1011.06 690.251 L1011.62 690.251 L1012.18 690.251 L1012.73 690.251 L1013.29 690.251 L1013.85 690.251 L1014.41 690.251 L1014.97 690.251 L1015.53 690.251 L1016.09 690.251 L1016.65 690.251 L1017.21 690.251 L1017.77 690.251 L1018.33 690.251 L1018.89 690.251 L1019.45 690.251 L1020.01 690.251 L1020.56 690.251 L1021.12 690.251 L1021.68 690.251 L1022.24 690.251 L1022.8 690.251 L1023.36 690.251 L1023.92 690.251 L1024.48 690.251 L1025.04 690.251 L1025.6 690.251 L1026.16 690.251 L1026.72 690.251 L1027.28 690.251 L1027.83 690.251 L1028.39 690.251 L1028.95 690.251 L1029.51 690.251 L1030.07 690.251 L1030.63 690.251 L1031.19 690.251 L1031.75 690.251 L1032.31 690.251 L1032.87 690.251 L1033.43 690.251 L1033.99 690.251 L1034.55 690.251 L1035.1 690.251 L1035.66 690.251 L1036.22 690.251 L1036.78 690.251 L1037.34 690.251 L1037.9 690.251 L1038.46 690.251 L1039.02 690.251 L1039.58 690.251 L1040.14 690.251 L1040.7 690.251 L1041.26 690.251 L1041.82 690.251 L1042.38 690.251 L1042.93 690.251 L1043.49 690.251 L1044.05 690.251 L1044.61 690.251 L1045.17 690.251 L1045.73 690.251 L1046.29 690.251 L1046.85 690.251 L1047.41 690.251 L1047.97 690.251 L1048.53 690.251 L1049.09 690.251 L1049.65 690.251 L1050.2 690.251 L1050.76 690.251 L1051.32 690.251 L1051.88 690.251 L1052.44 690.251 L1053 690.251 L1053.56 690.251 L1054.12 690.251 L1054.68 690.251 L1055.24 690.251 L1055.8 690.251 L1056.36 690.251 L1056.92 690.251 L1057.48 690.251 L1058.03 690.251 L1058.59 690.251 L1059.15 690.251 L1059.71 690.251 L1060.27 690.251 L1060.83 690.251 L1061.39 690.251 L1061.95 690.251 L1062.51 690.251 L1063.07 690.251 L1063.63 690.251 L1064.19 690.251 L1064.75 690.251 L1065.3 690.251 L1065.86 690.251 L1066.42 690.251 L1066.98 690.251 L1067.54 690.251 L1068.1 690.251 L1068.66 690.251 L1069.22 690.251 L1069.78 690.251 L1070.34 690.251 L1070.9 690.251 L1071.46 690.251 L1072.02 690.251 L1072.57 690.251 L1073.13 690.251 L1073.69 690.251 L1074.25 690.251 L1074.81 690.251 L1075.37 690.251 L1075.93 690.251 L1076.49 690.251 L1077.05 690.251 L1077.61 690.251 L1078.17 690.251 L1078.73 690.251 L1079.29 690.251 L1079.85 690.251 L1080.4 690.251 L1080.96 690.251 L1081.52 690.251 L1082.08 690.251 L1082.64 690.251 L1083.2 690.251 L1083.76 690.251 L1084.32 690.251 L1084.88 690.251 L1085.44 690.251 L1086 690.251 L1086.56 690.251 L1087.12 690.251 L1087.67 690.251 L1088.23 690.251 L1088.79 690.251 L1089.35 690.251 L1089.91 690.251 L1090.47 690.251 L1091.03 690.251 L1091.59 690.251 L1092.15 690.251 L1092.71 690.251 L1093.27 690.251 L1093.83 690.251 L1094.39 690.251 L1094.94 690.251 L1095.5 690.251 L1096.06 690.251 L1096.62 690.251 L1097.18 690.251 L1097.74 690.251 L1098.3 690.251 L1098.86 690.251 L1099.42 690.251 L1099.98 690.251 L1100.54 690.251 L1101.1 690.251 L1101.66 690.251 L1102.22 690.251 L1102.77 690.251 L1103.33 690.251 L1103.89 690.251 L1104.45 690.251 L1105.01 690.251 L1105.57 690.251 L1106.13 690.251 L1106.69 690.251 L1107.25 690.251 L1107.81 690.251 L1108.37 690.251 L1108.93 690.251 L1109.49 690.251 L1110.04 690.251 L1110.6 690.251 L1111.16 690.251 L1111.72 690.251 L1112.28 690.251 L1112.84 690.251 L1113.4 690.251 L1113.96 690.251 L1114.52 690.251 L1115.08 690.251 L1115.64 690.251 L1116.2 690.251 L1116.76 690.251 L1117.31 690.251 L1117.87 690.251 L1118.43 690.251 L1118.99 690.251 L1119.55 690.251 L1120.11 690.251 L1120.67 690.251 L1121.23 690.251 L1121.79 690.251 L1122.35 690.251 L1122.91 690.251 L1123.47 690.251 L1124.03 690.251 L1124.59 690.251 L1125.14 690.251 L1125.7 690.251 L1126.26 690.251 L1126.82 690.251 L1127.38 690.251 L1127.94 690.251 L1128.5 690.251 L1129.06 690.251 L1129.62 690.251 L1130.18 690.251 L1130.74 690.251 L1131.3 690.251 L1131.86 690.251 L1132.41 690.251 L1132.97 690.251 L1133.53 690.251 L1134.09 690.251 L1134.65 690.251 L1135.21 690.251 L1135.77 690.251 L1136.33 690.251 L1136.89 690.251 L1137.45 690.251 L1138.01 690.251 L1138.57 690.251 L1139.13 690.251 L1139.68 690.251 L1140.24 690.251 L1140.8 690.251 L1141.36 690.251 L1141.92 690.251 L1142.48 690.251 L1143.04 690.251 L1143.6 690.251 L1144.16 690.251 L1144.72 690.251 L1145.28 690.251 L1145.84 690.251 L1146.4 690.251 L1146.96 690.251 L1147.51 690.251 L1148.07 690.251 L1148.63 690.251 L1149.19 690.251 L1149.75 690.251 L1150.31 690.251 L1150.87 690.251 L1151.43 690.251 L1151.99 690.251 L1152.55 690.251 L1153.11 690.251 L1153.67 690.251 L1154.23 690.251 L1154.78 690.251 L1155.34 690.251 L1155.9 690.251 L1156.46 690.251 L1157.02 690.251 L1157.58 690.251 L1158.14 690.251 L1158.7 690.251 L1159.26 690.251 L1159.82 690.251 L1160.38 690.251 L1160.94 690.251 L1161.5 690.251 L1162.05 690.251 L1162.61 690.251 L1163.17 690.251 L1163.73 690.251 L1164.29 690.251 L1164.85 690.251 L1165.41 690.251 L1165.97 690.251 L1166.53 690.251 L1167.09 690.251 L1167.65 690.251 L1168.21 690.251 L1168.77 690.251 L1169.33 690.251 L1169.88 690.251 L1170.44 690.251 L1171 690.251 L1171.56 690.251 L1172.12 690.251 L1172.68 690.251 L1173.24 690.251 L1173.8 690.251 L1174.36 690.251 L1174.92 690.251 L1175.48 690.251 L1176.04 690.251 L1176.6 690.251 L1177.15 690.251 L1177.71 690.251 L1178.27 690.251 L1178.83 690.251 L1179.39 690.251 L1179.95 690.251 L1180.51 690.251 L1181.07 690.251 L1181.63 690.251 L1182.19 690.251 L1182.75 690.251 L1183.31 690.251 L1183.87 690.251 L1184.43 690.251 L1184.98 690.251 L1185.54 690.251 L1186.1 690.251 L1186.66 690.251 L1187.22 690.251 L1187.78 690.251 L1188.34 690.251 L1188.9 690.251 L1189.46 690.251 L1190.02 690.251 L1190.58 690.251 L1191.14 690.251 L1191.7 690.251 L1192.25 690.251 L1192.81 690.251 L1193.37 690.251 L1193.93 690.251 L1194.49 690.251 L1195.05 690.251 L1195.61 690.251 L1196.17 690.251 L1196.73 690.251 L1197.29 690.251 L1197.85 690.251 L1198.41 690.251 L1198.97 690.251 L1199.52 690.251 L1200.08 690.251 L1200.64 690.251 L1201.2 690.251 L1201.76 690.251 L1202.32 690.251 L1202.88 690.251 L1203.44 690.251 L1204 690.251 L1204.56 690.251 L1205.12 690.251 L1205.68 690.251 L1206.24 690.251 L1206.8 690.251 L1207.35 690.251 L1207.91 690.251 L1208.47 690.251 L1209.03 690.251 L1209.59 690.251 L1210.15 690.251 L1210.71 690.251 L1211.27 690.251 L1211.83 690.251 L1212.39 690.251 L1212.95 690.251 L1213.51 690.251 L1214.07 690.251 L1214.62 690.251 L1215.18 690.251 L1215.74 690.251 L1216.3 690.251 L1216.86 690.251 L1217.42 690.251 L1217.98 690.251 L1218.54 690.251 L1219.1 690.251 L1219.66 690.251 L1220.22 690.251 L1220.78 690.251 L1221.34 690.251 L1221.89 690.251 L1222.45 690.251 L1223.01 690.251 L1223.57 690.251 L1224.13 690.251 L1224.69 690.251 L1225.25 690.251 L1225.81 690.251 L1226.37 690.251 L1226.93 690.251 L1227.49 690.251 L1228.05 690.251 L1228.61 690.251 L1229.17 690.251 L1229.72 690.251 L1230.28 690.251 L1230.84 690.251 L1231.4 690.251 L1231.96 690.251 L1232.52 690.251 L1233.08 690.251 L1233.64 690.251 L1234.2 690.251 L1234.76 690.251 L1235.32 690.251 L1235.88 690.251 L1236.44 690.251 L1236.99 690.251 L1237.55 690.251 L1238.11 690.251 L1238.67 690.251 L1239.23 690.251 L1239.79 690.251 L1240.35 690.251 L1240.91 690.251 L1241.47 690.251 L1242.03 690.251 L1242.59 690.251 L1243.15 690.251 L1243.71 690.251 L1244.26 690.251 L1244.82 690.251 L1245.38 690.251 L1245.94 690.251 L1246.5 690.251 L1247.06 690.251 L1247.62 690.251 L1248.18 690.251 L1248.74 690.251 L1249.3 690.251 L1249.86 690.251 L1250.42 690.251 L1250.98 690.251 L1251.54 690.251 L1252.09 690.251 L1252.65 690.251 L1253.21 690.251 L1253.77 690.251 L1254.33 690.251 L1254.89 690.251 L1255.45 690.251 L1256.01 690.251 L1256.57 690.251 L1257.13 690.251 L1257.69 690.251 L1258.25 690.251 L1258.81 690.251 L1259.36 690.251 L1259.92 690.251 L1260.48 690.251 L1261.04 690.251 L1261.6 690.251 L1262.16 690.251 L1262.72 690.251 L1263.28 690.251 L1263.84 690.251 L1264.4 690.251 L1264.96 690.251 L1265.52 690.251 L1266.08 690.251 L1266.63 690.251 L1267.19 690.251 L1267.75 690.251 L1268.31 690.251 L1268.87 690.251 L1269.43 690.251 L1269.99 690.251 L1270.55 690.251 L1271.11 690.251 L1271.67 690.251 L1272.23 690.251 L1272.79 690.251 L1273.35 690.251 L1273.91 690.251 L1274.46 690.251 L1275.02 690.251 L1275.58 690.251 L1276.14 690.251 L1276.7 690.251 L1277.26 690.251 L1277.82 690.251 L1278.38 690.251 L1278.94 690.251 L1279.5 690.251 L1280.06 690.251 L1280.62 690.251 L1281.18 690.251 L1281.73 690.251 L1282.29 690.251 L1282.85 690.251 L1283.41 690.251 L1283.97 690.251 L1284.53 690.251 L1285.09 690.251 L1285.65 690.251 L1286.21 690.251 L1286.77 690.251 L1287.33 690.251 L1287.89 690.251 L1288.45 690.251 L1289 690.251 L1289.56 690.251 L1290.12 690.251 L1290.68 690.251 L1291.24 690.251 L1291.8 690.251 L1292.36 690.251 L1292.92 690.251 L1293.48 690.251 L1294.04 690.251 L1294.6 690.251 L1295.16 690.251 L1295.72 690.251 L1296.28 690.251 L1296.83 690.251 L1297.39 690.251 L1297.95 690.251 L1298.51 690.251 L1299.07 690.251 L1299.63 690.251 L1300.19 690.251 L1300.75 690.251 L1301.31 690.251 L1301.87 690.251 L1302.43 690.251 L1302.99 690.251 L1303.55 690.251 L1304.1 690.251 L1304.66 690.251 L1305.22 690.251 L1305.78 690.251 L1306.34 690.251 L1306.9 690.251 L1307.46 690.251 L1308.02 690.251 L1308.58 690.251 L1309.14 690.251 L1309.7 690.251 L1310.26 690.251 L1310.82 690.251 L1311.38 690.251 L1311.93 690.251 L1312.49 690.251 L1313.05 690.251 L1313.61 690.251 L1314.17 690.251 L1314.73 690.251 L1315.29 690.251 L1315.85 690.251 L1316.41 690.251 L1316.97 690.251 L1317.53 690.251 L1318.09 690.251 L1318.65 690.251 L1319.2 690.251 L1319.76 690.251 L1320.32 690.251 L1320.88 690.251 L1321.44 690.251 L1322 690.251 L1322.56 690.251 L1323.12 690.251 L1323.68 690.251 L1324.24 690.251 L1324.8 690.251 L1325.36 690.251 L1325.92 690.251 L1326.47 690.251 L1327.03 690.251 L1327.59 690.251 L1328.15 690.251 L1328.71 690.251 L1329.27 690.251 L1329.83 690.251 L1330.39 690.251 L1330.95 690.251 L1331.51 690.251 L1332.07 690.251 L1332.63 690.251 L1333.19 690.251 L1333.75 690.251 L1334.3 690.251 L1334.86 690.251 L1335.42 690.251 L1335.98 690.251 L1336.54 690.251 L1337.1 690.251 L1337.66 690.251 L1338.22 690.251 L1338.78 690.251 L1339.34 690.251 L1339.9 690.251 L1340.46 690.251 L1341.02 690.251 L1341.57 690.251 L1342.13 690.251 L1342.69 690.251 L1343.25 690.251 L1343.81 690.251 L1344.37 690.251 L1344.93 690.251 L1345.49 690.251 L1346.05 690.251 L1346.61 690.251 L1347.17 690.251 L1347.73 690.251 L1348.29 690.251 L1348.84 690.251 L1349.4 690.251 L1349.96 690.251 L1350.52 690.251 L1351.08 690.251 L1351.64 690.251 L1352.2 690.251 L1352.76 690.251 L1353.32 690.251 L1353.88 690.251 L1354.44 690.251 L1355 690.251 L1355.56 690.251 L1356.12 690.251 L1356.67 690.251 L1357.23 690.251 L1357.79 690.251 L1358.35 690.251 L1358.91 690.251 L1359.47 690.251 L1360.03 690.251 L1360.59 690.251 L1361.15 690.251 L1361.71 690.251 L1362.27 690.251 L1362.83 690.251 L1363.39 690.251 L1363.94 690.251 L1364.5 690.251 L1365.06 690.251 L1365.62 690.251 L1366.18 690.251 L1366.74 690.251 L1367.3 690.251 L1367.86 690.251 L1368.42 690.251 L1368.98 690.251 L1369.54 690.251 L1370.1 690.251 L1370.66 690.251 L1371.21 690.251 L1371.77 690.251 L1372.33 690.251 L1372.89 690.251 L1373.45 690.251 L1374.01 690.251 L1374.57 690.251 L1375.13 690.251 L1375.69 690.251 L1376.25 690.251 L1376.81 690.251 L1377.37 690.251 L1377.93 690.251 L1378.49 690.251 L1379.04 690.251 L1379.6 690.251 L1380.16 690.251 L1380.72 690.251 L1381.28 690.251 L1381.84 690.251 L1382.4 690.251 L1382.96 690.251 L1383.52 690.251 L1384.08 690.251 L1384.64 690.251 L1385.2 690.251 L1385.76 690.251 L1386.31 690.251 L1386.87 690.251 L1387.43 690.251 L1387.99 690.251 L1388.55 690.251 L1389.11 690.251 L1389.67 690.251 L1390.23 690.251 L1390.79 690.251 L1391.35 690.251 L1391.91 690.251 L1392.47 690.251 L1393.03 690.251 L1393.58 690.251 L1394.14 690.251 L1394.7 690.251 L1395.26 690.251 L1395.82 690.251 L1396.38 690.251 L1396.94 690.251 L1397.5 690.251 L1398.06 690.251 L1398.62 690.251 L1399.18 690.251 L1399.74 690.251 L1400.3 690.251 L1400.86 690.251 L1401.41 690.251 L1401.97 690.251 L1402.53 690.251 L1403.09 690.251 L1403.65 690.251 L1404.21 690.251 L1404.77 690.251 L1405.33 690.251 L1405.89 690.251 L1406.45 690.251 L1407.01 690.251 L1407.57 690.251 L1408.13 690.251 L1408.68 690.251 L1409.24 690.251 L1409.8 690.251 L1410.36 690.251 L1410.92 690.251 L1411.48 690.251 L1412.04 690.251 L1412.6 690.251 L1413.16 690.251 L1413.72 690.251 L1414.28 690.251 L1414.84 690.251 L1415.4 690.251 L1415.95 690.251 L1416.51 690.251 L1417.07 690.251 L1417.63 690.251 L1418.19 690.251 L1418.75 690.251 L1419.31 690.251 L1419.87 690.251 L1420.43 690.251 L1420.99 690.251 L1421.55 690.251 L1422.11 690.251 L1422.67 690.251 L1423.23 690.251 L1423.78 690.251 L1424.34 690.251 L1424.9 690.251 L1425.46 690.251 L1426.02 690.251 L1426.58 690.251 L1427.14 690.251 L1427.7 690.251 L1428.26 690.251 L1428.82 690.251 L1429.38 690.251 L1429.94 690.251 L1430.5 690.251 L1431.05 690.251 L1431.61 690.251 L1432.17 690.251 L1432.73 690.251 L1433.29 690.251 L1433.85 690.251 L1434.41 690.251 L1434.97 690.251 L1435.53 690.251 L1436.09 690.251 L1436.65 690.251 L1437.21 690.251 L1437.77 690.251 L1438.33 690.251 L1438.88 690.251 L1439.44 690.251 L1440 690.251 L1440.56 690.251 L1441.12 690.251 L1441.68 690.251 L1442.24 690.251 L1442.8 690.251 L1443.36 690.251 L1443.92 690.251 L1444.48 690.251 L1445.04 690.251 L1445.6 690.251 L1446.15 690.251 L1446.71 690.251 L1447.27 690.251 L1447.83 690.251 L1448.39 690.251 L1448.95 690.251 L1449.51 690.251 L1450.07 690.251 L1450.63 690.251 L1451.19 690.251 L1451.75 690.251 L1452.31 690.251 L1452.87 690.251 L1453.42 690.251 L1453.98 690.251 L1454.54 690.251 L1455.1 690.251 L1455.66 690.251 L1456.22 690.251 L1456.78 690.251 L1457.34 690.251 L1457.9 690.251 L1458.46 690.251 L1459.02 690.251 L1459.58 690.251 L1460.14 690.251 L1460.7 690.251 L1461.25 690.251 L1461.81 690.251 L1462.37 690.251 L1462.93 690.251 L1463.49 690.251 L1464.05 690.251 L1464.61 690.251 L1465.17 690.251 L1465.73 690.251 L1466.29 690.251 L1466.85 690.251 L1467.41 690.251 L1467.97 690.251 L1468.52 690.251 L1469.08 690.251 L1469.64 690.251 L1470.2 690.251 L1470.76 690.251 L1471.32 690.251 L1471.88 690.251 L1472.44 690.251 L1473 690.251 L1473.56 690.251 L1474.12 690.251 L1474.68 690.251 L1475.24 690.251 L1475.79 690.251 L1476.35 690.251 L1476.91 690.251 L1477.47 690.251 L1478.03 690.251 L1478.59 690.251 L1479.15 690.251 L1479.71 690.251 L1480.27 690.251 L1480.83 690.251 L1481.39 690.251 L1481.95 690.251 L1482.51 690.251 L1483.07 690.251 L1483.62 690.251 L1484.18 690.251 L1484.74 690.251 L1485.3 690.251 L1485.86 690.251 L1486.42 690.251 L1486.98 690.251 L1487.54 690.251 L1488.1 690.251 L1488.66 690.251 L1489.22 690.251 L1489.78 690.251 L1490.34 690.251 L1490.89 690.251 L1491.45 690.251 L1492.01 690.251 L1492.57 690.251 L1493.13 690.251 L1493.69 690.251 L1494.25 690.251 L1494.81 690.251 L1495.37 690.251 L1495.93 690.251 L1496.49 690.251 L1497.05 690.251 L1497.61 690.251 L1498.16 690.251 L1498.72 690.251 L1499.28 690.251 L1499.84 690.251 L1500.4 690.251 L1500.96 690.251 L1501.52 690.251 L1502.08 690.251 L1502.64 690.251 L1503.2 690.251 L1503.76 690.251 L1504.32 690.251 L1504.88 690.251 L1505.44 690.251 L1505.99 690.251 L1506.55 690.251 L1507.11 690.251 L1507.67 690.251 L1508.23 690.251 L1508.79 690.251 L1509.35 690.251 L1509.91 690.251 L1510.47 690.251 L1511.03 690.251 L1511.59 690.251 L1512.15 690.251 L1512.71 690.251 L1513.26 690.251 L1513.82 690.251 L1514.38 690.251 L1514.94 690.251 L1515.5 690.251 L1516.06 690.251 L1516.62 690.251 L1517.18 690.251 L1517.74 690.251 L1518.3 690.251 L1518.86 690.251 L1519.42 690.251 L1519.98 690.251 L1520.53 690.251 L1521.09 690.251 L1521.65 690.251 L1522.21 690.251 L1522.77 690.251 L1523.33 690.251 L1523.89 690.251 L1524.45 690.251 L1525.01 690.251 L1525.57 690.251 L1526.13 690.251 L1526.69 690.251 L1527.25 690.251 L1527.81 690.251 L1528.36 690.251 L1528.92 690.251 L1529.48 690.251 L1530.04 690.251 L1530.6 690.251 L1531.16 690.251 L1531.72 690.251 L1532.28 690.251 L1532.84 690.251 L1533.4 690.251 L1533.96 690.251 L1534.52 690.251 L1535.08 690.251 L1535.63 690.251 L1536.19 690.251 L1536.75 690.251 L1537.31 690.251 L1537.87 690.251 L1538.43 690.251 L1538.99 690.251 L1539.55 690.251 L1540.11 690.251 L1540.67 690.251 L1541.23 690.251 L1541.79 690.251 L1542.35 690.251 L1542.9 690.251 L1543.46 690.251 L1544.02 690.251 L1544.58 690.251 L1545.14 690.251 L1545.7 690.251 L1546.26 690.251 L1546.82 690.251 L1547.38 690.251 L1547.94 690.251 L1548.5 690.251 L1549.06 690.251 L1549.62 690.251 L1550.18 690.251 L1550.73 690.251 L1551.29 690.251 L1551.85 690.251 L1552.41 690.251 L1552.97 690.251 L1553.53 690.251 L1554.09 690.251 L1554.65 690.251 L1555.21 690.251 L1555.77 690.251 L1556.33 690.251 L1556.89 690.251 L1557.45 690.251 L1558 690.251 L1558.56 690.251 L1559.12 690.251 L1559.68 690.251 L1560.24 690.251 L1560.8 690.251 L1561.36 690.251 L1561.92 690.251 L1562.48 690.251 L1563.04 690.251 L1563.6 690.251 L1564.16 690.251 L1564.72 690.251 L1565.28 690.251 L1565.83 690.251 L1566.39 690.251 L1566.95 690.251 L1567.51 690.251 L1568.07 690.251 L1568.63 690.251 L1569.19 690.251 L1569.75 690.251 L1570.31 690.251 L1570.87 690.251 L1571.43 690.251 L1571.99 690.251 L1572.55 690.251 L1573.1 690.251 L1573.66 690.251 L1574.22 690.251 L1574.78 690.251 L1575.34 690.251 L1575.9 690.251 L1576.46 690.251 L1577.02 690.251 L1577.58 690.251 L1578.14 690.251 L1578.7 690.251 L1579.26 690.251 L1579.82 690.251 L1580.37 690.251 L1580.93 690.251 L1581.49 690.251 L1582.05 690.251 L1582.61 690.251 L1583.17 690.251 L1583.73 690.251 L1584.29 690.251 L1584.85 690.251 L1585.41 690.251 L1585.97 690.251 L1586.53 690.251 L1587.09 690.251 L1587.65 690.251 L1588.2 690.251 L1588.76 690.251 L1589.32 690.251 L1589.88 690.251 L1590.44 690.251 L1591 690.251 L1591.56 690.251 L1592.12 690.251 L1592.68 690.251 L1593.24 690.251 L1593.8 690.251 L1594.36 690.251 L1594.92 690.251 L1595.47 690.251 L1596.03 690.251 L1596.59 690.251 L1597.15 690.251 L1597.71 690.251 L1598.27 690.251 L1598.83 690.251 L1599.39 690.251 L1599.95 690.251 L1600.51 690.251 L1601.07 690.251 L1601.63 690.251 L1602.19 690.251 L1602.74 690.251 L1603.3 690.251 L1603.86 690.251 L1604.42 690.251 L1604.98 690.251 L1605.54 690.251 L1606.1 690.251 L1606.66 690.251 L1607.22 690.251 L1607.78 690.251 L1608.34 690.251 L1608.9 690.251 L1609.46 690.251 L1610.02 690.251 L1610.57 690.251 L1611.13 690.251 L1611.69 690.251 L1612.25 690.251 L1612.81 690.251 L1613.37 690.251 L1613.93 690.251 L1614.49 690.251 L1615.05 690.251 L1615.61 690.251 L1616.17 690.251 L1616.73 690.251 L1617.29 690.251 L1617.84 690.251 L1618.4 690.251 L1618.96 690.251 L1619.52 690.251 L1620.08 690.251 L1620.64 690.251 L1621.2 690.251 L1621.76 690.251 L1622.32 690.251 L1622.88 690.251 L1623.44 690.251 L1624 690.251 L1624.56 690.251 L1625.11 690.251 L1625.67 690.251 L1626.23 690.251 L1626.79 690.251 L1627.35 690.251 L1627.91 690.251 L1628.47 690.251 L1629.03 690.251 L1629.59 690.251 L1630.15 690.251 L1630.71 690.251 L1631.27 690.251 L1631.83 690.251 L1632.39 690.251 L1632.94 690.251 L1633.5 690.251 L1634.06 690.251 L1634.62 690.251 L1635.18 690.251 L1635.74 690.251 L1636.3 690.251 L1636.86 690.251 L1637.42 690.251 L1637.98 690.251 L1638.54 690.251 L1639.1 690.251 L1639.66 690.251 L1640.21 690.251 L1640.77 690.251 L1641.33 690.251 L1641.89 690.251 L1642.45 690.251 L1643.01 690.251 L1643.57 690.251 L1644.13 690.251 L1644.69 690.251 L1645.25 690.251 L1645.81 690.251 L1646.37 690.251 L1646.93 690.251 L1647.48 690.251 L1648.04 690.251 L1648.6 690.251 L1649.16 690.251 L1649.72 690.251 L1650.28 690.251 L1650.84 690.251 L1651.4 690.251 L1651.96 690.251 L1652.52 690.251 L1653.08 690.251 L1653.64 690.251 L1654.2 690.251 L1654.76 690.251 L1655.31 690.251 L1655.87 690.251 L1656.43 690.251 L1656.99 690.251 L1657.55 690.251 L1658.11 690.251 L1658.67 690.251 L1659.23 690.251 L1659.79 690.251 L1660.35 690.251 L1660.91 690.251 L1661.47 690.251 L1662.03 690.251 L1662.58 690.251 L1663.14 690.251 L1663.7 690.251 L1664.26 690.251 L1664.82 690.251 L1665.38 690.251 L1665.94 690.251 L1666.5 690.251 L1667.06 690.251 L1667.62 690.251 L1668.18 690.251 L1668.74 690.251 L1669.3 690.251 L1669.85 690.251 L1670.41 690.251 L1670.97 690.251 L1671.53 690.251 L1672.09 690.251 L1672.65 690.251 L1673.21 690.251 L1673.77 690.251 L1674.33 690.251 L1674.89 690.251 L1675.45 690.251 L1676.01 690.251 L1676.57 690.251 L1677.13 690.251 L1677.68 690.251 L1678.24 690.251 L1678.8 690.251 L1679.36 690.251 L1679.92 690.251 L1680.48 690.251 L1681.04 690.251 L1681.6 690.251 L1682.16 690.251 L1682.72 690.251 L1683.28 690.251 L1683.84 690.251 L1684.4 690.251 L1684.95 690.251 L1685.51 690.251 L1686.07 690.251 L1686.63 690.251 L1687.19 690.251 L1687.75 690.251 L1688.31 690.251 L1688.87 690.251 L1689.43 690.251 L1689.99 690.251 L1690.55 690.251 L1691.11 690.251 L1691.67 690.251 L1692.23 690.251 L1692.78 690.251 L1693.34 690.251 L1693.9 690.251 L1694.46 690.251 L1695.02 690.251 L1695.58 690.251 L1696.14 690.251 L1696.7 690.251 L1697.26 690.251 L1697.82 690.251 L1698.38 690.251 L1698.94 690.251 L1699.5 690.251 L1700.05 690.251 L1700.61 690.251 L1701.17 690.251 L1701.73 690.251 L1702.29 690.251 L1702.85 690.251 L1703.41 690.251 L1703.97 690.251 L1704.53 690.251 L1705.09 690.251 L1705.65 690.251 L1706.21 690.251 L1706.77 690.251 L1707.32 690.251 L1707.88 690.251 L1708.44 690.251 L1709 690.251 L1709.56 690.251 L1710.12 690.251 L1710.68 690.251 L1711.24 690.251 L1711.8 690.251 L1712.36 690.251 L1712.92 690.251 L1713.48 690.251 L1714.04 690.251 L1714.6 690.251 L1715.15 690.251 L1715.71 690.251 L1716.27 690.251 L1716.83 690.251 L1717.39 690.251 L1717.95 690.251 L1718.51 690.251 L1719.07 690.251 L1719.63 690.251 L1720.19 690.251 L1720.75 690.251 L1721.31 690.251 L1721.87 690.251 L1722.42 690.251 L1722.98 690.251 L1723.54 690.251 L1724.1 690.251 L1724.66 690.251 L1725.22 690.251 L1725.78 690.251 L1726.34 690.251 L1726.9 690.251 L1727.46 690.251 L1728.02 690.251 L1728.58 690.251 L1729.14 690.251 L1729.69 690.251 L1730.25 690.251 L1730.81 690.251 L1731.37 690.251 L1731.93 690.251 L1732.49 690.251 L1733.05 690.251 L1733.61 690.251 L1734.17 690.251 L1734.73 690.251 L1735.29 690.251 L1735.85 690.251 L1736.41 690.251 L1736.97 690.251 L1737.52 690.251 L1738.08 690.251 L1738.64 690.251 L1739.2 690.251 L1739.76 690.251 L1740.32 690.251 L1740.88 690.251 L1741.44 690.251 L1742 690.251 L1742.56 690.251 L1743.12 690.251 L1743.68 690.251 L1744.24 690.251 L1744.79 690.251 L1745.35 690.251 L1745.91 690.251 L1746.47 690.251 L1747.03 690.251 L1747.59 690.251 L1748.15 690.251 L1748.71 690.251 L1749.27 690.251 L1749.83 690.251 L1750.39 690.251 L1750.95 690.251 L1751.51 690.251 L1752.06 690.251 L1752.62 690.251 L1753.18 690.251 L1753.74 690.251 L1754.3 690.251 L1754.86 690.251 L1755.42 690.251 L1755.98 690.251 L1756.54 690.251 L1757.1 690.251 L1757.66 690.251 L1758.22 690.251 L1758.78 690.251 L1759.34 690.251 L1759.89 690.251 L1760.45 690.251 L1761.01 690.251 L1761.57 690.251 L1762.13 690.251 L1762.69 690.251 L1763.25 690.251 L1763.81 690.251 L1764.37 690.251 L1764.93 690.251 L1765.49 690.251 L1766.05 690.251 L1766.61 690.251 L1767.16 690.251 L1767.72 690.251 L1768.28 690.251 L1768.84 690.251 L1769.4 690.251 L1769.96 690.251 L1770.52 690.251 L1771.08 690.251 L1771.64 690.251 L1772.2 690.251 L1772.76 690.251 L1773.32 690.251 L1773.88 690.251 L1774.43 690.251 L1774.99 690.251 L1775.55 690.251 L1776.11 690.251 L1776.67 690.251 L1777.23 690.251 L1777.79 690.251 L1778.35 690.251 L1778.91 690.251 L1779.47 690.251 L1780.03 690.251 L1780.59 690.251 L1781.15 690.251 L1781.71 690.251 L1782.26 690.251 L1782.82 690.251 L1783.38 690.251 L1783.94 690.251 L1784.5 690.251 L1785.06 690.251 L1785.62 690.251 L1786.18 690.251 L1786.74 690.251 L1787.3 690.251 L1787.86 690.251 L1788.42 690.251 L1788.98 690.251 L1789.53 690.251 L1790.09 690.251 L1790.65 690.251 L1791.21 690.251 L1791.77 690.251 L1792.33 690.251 L1792.89 690.251 L1793.45 690.251 L1794.01 690.251 L1794.57 690.251 L1795.13 690.251 L1795.69 690.251 L1796.25 690.251 L1796.8 690.251 L1797.36 690.251 L1797.92 690.251 L1798.48 690.251 L1799.04 690.251 L1799.6 690.251 L1800.16 690.251 L1800.72 690.251 L1801.28 690.251 L1801.84 690.251 L1802.4 690.251 L1802.96 690.251 L1803.52 690.251 L1804.08 690.251 L1804.63 690.251 L1805.19 690.251 L1805.75 690.251 L1806.31 690.251 L1806.87 690.251 L1807.43 690.251 L1807.99 690.251 L1808.55 690.251 L1809.11 690.251 L1809.67 690.251 L1810.23 690.251 L1810.79 690.251 L1811.35 690.251 L1811.9 690.251 L1812.46 690.251 L1813.02 690.251 L1813.58 690.251 L1814.14 690.251 L1814.7 690.251 L1815.26 690.251 L1815.82 690.251 L1816.38 690.251 L1816.94 690.251 L1817.5 690.251 L1818.06 690.251 L1818.62 690.251 L1819.18 690.251 L1819.73 690.251 L1820.29 690.251 L1820.85 690.251 L1821.41 690.251 L1821.97 690.251 L1822.53 690.251 L1823.09 690.251 L1823.65 690.251 L1824.21 690.251 L1824.77 690.251 L1825.33 690.251 L1825.89 690.251 L1826.45 690.251 L1827 690.251 L1827.56 690.251 L1828.12 690.251 L1828.68 690.251 L1829.24 690.251 L1829.8 690.251 L1830.36 690.251 L1830.92 690.251 L1831.48 690.251 L1832.04 690.251 L1832.6 690.251 L1833.16 690.251 L1833.72 690.251 L1834.27 690.251 L1834.83 690.251 L1835.39 690.251 L1835.95 690.251 L1836.51 690.251 L1837.07 690.251 L1837.63 690.251 L1838.19 690.251 L1838.19 682.295 L1837.63 682.295 L1837.07 682.295 L1836.51 682.295 L1835.95 682.295 L1835.39 682.295 L1834.83 682.295 L1834.27 682.295 L1833.72 682.295 L1833.16 682.295 L1832.6 682.295 L1832.04 682.295 L1831.48 682.295 L1830.92 682.295 L1830.36 682.295 L1829.8 682.295 L1829.24 682.295 L1828.68 682.295 L1828.12 682.295 L1827.56 682.295 L1827 682.295 L1826.45 682.295 L1825.89 682.295 L1825.33 682.295 L1824.77 682.295 L1824.21 682.295 L1823.65 682.295 L1823.09 682.295 L1822.53 682.295 L1821.97 682.295 L1821.41 682.295 L1820.85 682.295 L1820.29 682.295 L1819.73 682.295 L1819.18 682.295 L1818.62 682.295 L1818.06 682.295 L1817.5 682.295 L1816.94 682.295 L1816.38 682.295 L1815.82 682.295 L1815.26 682.295 L1814.7 682.295 L1814.14 682.295 L1813.58 682.295 L1813.02 682.295 L1812.46 682.295 L1811.9 682.295 L1811.35 682.295 L1810.79 682.295 L1810.23 682.295 L1809.67 682.295 L1809.11 682.295 L1808.55 682.295 L1807.99 682.295 L1807.43 682.295 L1806.87 682.295 L1806.31 682.295 L1805.75 682.295 L1805.19 682.295 L1804.63 682.295 L1804.08 682.295 L1803.52 682.295 L1802.96 682.295 L1802.4 682.295 L1801.84 682.295 L1801.28 682.295 L1800.72 682.295 L1800.16 682.295 L1799.6 682.295 L1799.04 682.295 L1798.48 682.295 L1797.92 682.295 L1797.36 682.295 L1796.8 682.295 L1796.25 682.295 L1795.69 682.295 L1795.13 682.295 L1794.57 682.295 L1794.01 682.295 L1793.45 682.295 L1792.89 682.295 L1792.33 682.295 L1791.77 682.295 L1791.21 682.295 L1790.65 682.295 L1790.09 682.295 L1789.53 682.295 L1788.98 682.295 L1788.42 682.295 L1787.86 682.295 L1787.3 682.295 L1786.74 682.295 L1786.18 682.295 L1785.62 682.295 L1785.06 682.295 L1784.5 682.295 L1783.94 682.295 L1783.38 682.295 L1782.82 682.295 L1782.26 682.295 L1781.71 682.295 L1781.15 682.295 L1780.59 682.295 L1780.03 682.295 L1779.47 682.295 L1778.91 682.295 L1778.35 682.295 L1777.79 682.295 L1777.23 682.295 L1776.67 682.295 L1776.11 682.295 L1775.55 682.295 L1774.99 682.295 L1774.43 682.295 L1773.88 682.295 L1773.32 682.295 L1772.76 682.295 L1772.2 682.295 L1771.64 682.295 L1771.08 682.295 L1770.52 682.295 L1769.96 682.295 L1769.4 682.295 L1768.84 682.295 L1768.28 682.295 L1767.72 682.295 L1767.16 682.295 L1766.61 682.295 L1766.05 682.295 L1765.49 682.295 L1764.93 682.295 L1764.37 682.295 L1763.81 682.295 L1763.25 682.295 L1762.69 682.295 L1762.13 682.295 L1761.57 682.295 L1761.01 682.295 L1760.45 682.295 L1759.89 682.295 L1759.34 682.295 L1758.78 682.295 L1758.22 682.295 L1757.66 682.295 L1757.1 682.295 L1756.54 682.295 L1755.98 682.295 L1755.42 682.295 L1754.86 682.295 L1754.3 682.295 L1753.74 682.295 L1753.18 682.295 L1752.62 682.295 L1752.06 682.295 L1751.51 682.295 L1750.95 682.295 L1750.39 682.295 L1749.83 682.295 L1749.27 682.295 L1748.71 682.295 L1748.15 682.295 L1747.59 682.295 L1747.03 682.295 L1746.47 682.295 L1745.91 682.295 L1745.35 682.295 L1744.79 682.295 L1744.24 682.295 L1743.68 682.295 L1743.12 682.295 L1742.56 682.295 L1742 682.295 L1741.44 682.295 L1740.88 682.295 L1740.32 682.295 L1739.76 682.295 L1739.2 682.295 L1738.64 682.295 L1738.08 682.295 L1737.52 682.295 L1736.97 682.295 L1736.41 682.295 L1735.85 682.295 L1735.29 682.295 L1734.73 682.295 L1734.17 682.295 L1733.61 682.295 L1733.05 682.295 L1732.49 682.295 L1731.93 682.295 L1731.37 682.295 L1730.81 682.295 L1730.25 682.295 L1729.69 682.295 L1729.14 682.295 L1728.58 682.295 L1728.02 682.295 L1727.46 682.295 L1726.9 682.295 L1726.34 682.295 L1725.78 682.295 L1725.22 682.295 L1724.66 682.295 L1724.1 682.295 L1723.54 682.295 L1722.98 682.295 L1722.42 682.295 L1721.87 682.295 L1721.31 682.295 L1720.75 682.295 L1720.19 682.295 L1719.63 682.295 L1719.07 682.295 L1718.51 682.295 L1717.95 682.295 L1717.39 682.295 L1716.83 682.295 L1716.27 682.295 L1715.71 682.295 L1715.15 682.295 L1714.6 682.295 L1714.04 682.295 L1713.48 682.295 L1712.92 682.295 L1712.36 682.295 L1711.8 682.295 L1711.24 682.295 L1710.68 682.295 L1710.12 682.295 L1709.56 682.295 L1709 682.295 L1708.44 682.295 L1707.88 682.295 L1707.32 682.295 L1706.77 682.295 L1706.21 682.295 L1705.65 682.295 L1705.09 682.295 L1704.53 682.295 L1703.97 682.295 L1703.41 682.295 L1702.85 682.295 L1702.29 682.295 L1701.73 682.295 L1701.17 682.295 L1700.61 682.295 L1700.05 682.295 L1699.5 682.295 L1698.94 682.295 L1698.38 682.295 L1697.82 682.295 L1697.26 682.295 L1696.7 682.295 L1696.14 682.295 L1695.58 682.295 L1695.02 682.295 L1694.46 682.295 L1693.9 682.295 L1693.34 682.295 L1692.78 682.295 L1692.23 682.295 L1691.67 682.295 L1691.11 682.295 L1690.55 682.295 L1689.99 682.295 L1689.43 682.295 L1688.87 682.295 L1688.31 682.295 L1687.75 682.295 L1687.19 682.295 L1686.63 682.295 L1686.07 682.295 L1685.51 682.295 L1684.95 682.295 L1684.4 682.295 L1683.84 682.295 L1683.28 682.295 L1682.72 682.295 L1682.16 682.295 L1681.6 682.295 L1681.04 682.295 L1680.48 682.295 L1679.92 682.295 L1679.36 682.295 L1678.8 682.295 L1678.24 682.295 L1677.68 682.295 L1677.13 682.295 L1676.57 682.295 L1676.01 682.295 L1675.45 682.295 L1674.89 682.295 L1674.33 682.295 L1673.77 682.295 L1673.21 682.295 L1672.65 682.295 L1672.09 682.295 L1671.53 682.295 L1670.97 682.295 L1670.41 682.295 L1669.85 682.295 L1669.3 682.295 L1668.74 682.295 L1668.18 682.295 L1667.62 682.295 L1667.06 682.295 L1666.5 682.295 L1665.94 682.295 L1665.38 682.295 L1664.82 682.295 L1664.26 682.295 L1663.7 682.295 L1663.14 682.295 L1662.58 682.295 L1662.03 682.295 L1661.47 682.295 L1660.91 682.295 L1660.35 682.295 L1659.79 682.295 L1659.23 682.295 L1658.67 682.295 L1658.11 682.295 L1657.55 682.295 L1656.99 682.295 L1656.43 682.295 L1655.87 682.295 L1655.31 682.295 L1654.76 682.295 L1654.2 682.295 L1653.64 682.295 L1653.08 682.295 L1652.52 682.295 L1651.96 682.295 L1651.4 682.295 L1650.84 682.295 L1650.28 682.295 L1649.72 682.295 L1649.16 682.295 L1648.6 682.295 L1648.04 682.295 L1647.48 682.295 L1646.93 682.295 L1646.37 682.295 L1645.81 682.295 L1645.25 682.295 L1644.69 682.295 L1644.13 682.295 L1643.57 682.295 L1643.01 682.295 L1642.45 682.295 L1641.89 682.295 L1641.33 682.295 L1640.77 682.295 L1640.21 682.295 L1639.66 682.295 L1639.1 682.295 L1638.54 682.295 L1637.98 682.295 L1637.42 682.295 L1636.86 682.295 L1636.3 682.295 L1635.74 682.295 L1635.18 682.295 L1634.62 682.295 L1634.06 682.295 L1633.5 682.295 L1632.94 682.295 L1632.39 682.295 L1631.83 682.295 L1631.27 682.295 L1630.71 682.295 L1630.15 682.295 L1629.59 682.295 L1629.03 682.295 L1628.47 682.295 L1627.91 682.295 L1627.35 682.295 L1626.79 682.295 L1626.23 682.295 L1625.67 682.295 L1625.11 682.295 L1624.56 682.295 L1624 682.295 L1623.44 682.295 L1622.88 682.295 L1622.32 682.295 L1621.76 682.295 L1621.2 682.295 L1620.64 682.295 L1620.08 682.295 L1619.52 682.295 L1618.96 682.295 L1618.4 682.295 L1617.84 682.295 L1617.29 682.295 L1616.73 682.295 L1616.17 682.295 L1615.61 682.295 L1615.05 682.295 L1614.49 682.295 L1613.93 682.295 L1613.37 682.295 L1612.81 682.295 L1612.25 682.295 L1611.69 682.295 L1611.13 682.295 L1610.57 682.295 L1610.02 682.295 L1609.46 682.295 L1608.9 682.295 L1608.34 682.295 L1607.78 682.295 L1607.22 682.295 L1606.66 682.295 L1606.1 682.295 L1605.54 682.295 L1604.98 682.295 L1604.42 682.295 L1603.86 682.295 L1603.3 682.295 L1602.74 682.295 L1602.19 682.295 L1601.63 682.295 L1601.07 682.295 L1600.51 682.295 L1599.95 682.295 L1599.39 682.295 L1598.83 682.295 L1598.27 682.295 L1597.71 682.295 L1597.15 682.295 L1596.59 682.295 L1596.03 682.295 L1595.47 682.295 L1594.92 682.295 L1594.36 682.295 L1593.8 682.295 L1593.24 682.295 L1592.68 682.295 L1592.12 682.295 L1591.56 682.295 L1591 682.295 L1590.44 682.295 L1589.88 682.295 L1589.32 682.295 L1588.76 682.295 L1588.2 682.295 L1587.65 682.295 L1587.09 682.295 L1586.53 682.295 L1585.97 682.295 L1585.41 682.295 L1584.85 682.295 L1584.29 682.295 L1583.73 682.295 L1583.17 682.295 L1582.61 682.295 L1582.05 682.295 L1581.49 682.295 L1580.93 682.295 L1580.37 682.295 L1579.82 682.295 L1579.26 682.295 L1578.7 682.295 L1578.14 682.295 L1577.58 682.295 L1577.02 682.295 L1576.46 682.295 L1575.9 682.295 L1575.34 682.295 L1574.78 682.295 L1574.22 682.295 L1573.66 682.295 L1573.1 682.295 L1572.55 682.295 L1571.99 682.295 L1571.43 682.295 L1570.87 682.295 L1570.31 682.295 L1569.75 682.295 L1569.19 682.295 L1568.63 682.295 L1568.07 682.295 L1567.51 682.295 L1566.95 682.295 L1566.39 682.295 L1565.83 682.295 L1565.28 682.295 L1564.72 682.295 L1564.16 682.295 L1563.6 682.295 L1563.04 682.295 L1562.48 682.295 L1561.92 682.295 L1561.36 682.295 L1560.8 682.295 L1560.24 682.295 L1559.68 682.295 L1559.12 682.295 L1558.56 682.295 L1558 682.295 L1557.45 682.295 L1556.89 682.295 L1556.33 682.295 L1555.77 682.295 L1555.21 682.295 L1554.65 682.295 L1554.09 682.295 L1553.53 682.295 L1552.97 682.295 L1552.41 682.295 L1551.85 682.295 L1551.29 682.295 L1550.73 682.295 L1550.18 682.295 L1549.62 682.295 L1549.06 682.295 L1548.5 682.295 L1547.94 682.295 L1547.38 682.295 L1546.82 682.295 L1546.26 682.295 L1545.7 682.295 L1545.14 682.295 L1544.58 682.295 L1544.02 682.295 L1543.46 682.295 L1542.9 682.295 L1542.35 682.295 L1541.79 682.295 L1541.23 682.295 L1540.67 682.295 L1540.11 682.295 L1539.55 682.295 L1538.99 682.295 L1538.43 682.295 L1537.87 682.295 L1537.31 682.295 L1536.75 682.295 L1536.19 682.295 L1535.63 682.295 L1535.08 682.295 L1534.52 682.295 L1533.96 682.295 L1533.4 682.295 L1532.84 682.295 L1532.28 682.295 L1531.72 682.295 L1531.16 682.295 L1530.6 682.295 L1530.04 682.295 L1529.48 682.295 L1528.92 682.295 L1528.36 682.295 L1527.81 682.295 L1527.25 682.295 L1526.69 682.295 L1526.13 682.295 L1525.57 682.295 L1525.01 682.295 L1524.45 682.295 L1523.89 682.295 L1523.33 682.295 L1522.77 682.295 L1522.21 682.295 L1521.65 682.295 L1521.09 682.295 L1520.53 682.295 L1519.98 682.295 L1519.42 682.295 L1518.86 682.295 L1518.3 682.295 L1517.74 682.295 L1517.18 682.295 L1516.62 682.295 L1516.06 682.295 L1515.5 682.295 L1514.94 682.295 L1514.38 682.295 L1513.82 682.295 L1513.26 682.295 L1512.71 682.295 L1512.15 682.295 L1511.59 682.295 L1511.03 682.295 L1510.47 682.295 L1509.91 682.295 L1509.35 682.295 L1508.79 682.295 L1508.23 682.295 L1507.67 682.295 L1507.11 682.295 L1506.55 682.295 L1505.99 682.295 L1505.44 682.295 L1504.88 682.295 L1504.32 682.295 L1503.76 682.295 L1503.2 682.295 L1502.64 682.295 L1502.08 682.295 L1501.52 682.295 L1500.96 682.295 L1500.4 682.295 L1499.84 682.295 L1499.28 682.295 L1498.72 682.295 L1498.16 682.295 L1497.61 682.295 L1497.05 682.295 L1496.49 682.295 L1495.93 682.295 L1495.37 682.295 L1494.81 682.295 L1494.25 682.295 L1493.69 682.295 L1493.13 682.295 L1492.57 682.295 L1492.01 682.295 L1491.45 682.295 L1490.89 682.295 L1490.34 682.295 L1489.78 682.295 L1489.22 682.295 L1488.66 682.295 L1488.1 682.295 L1487.54 682.295 L1486.98 682.295 L1486.42 682.295 L1485.86 682.295 L1485.3 682.295 L1484.74 682.295 L1484.18 682.295 L1483.62 682.295 L1483.07 682.295 L1482.51 682.295 L1481.95 682.295 L1481.39 682.295 L1480.83 682.295 L1480.27 682.295 L1479.71 682.295 L1479.15 682.295 L1478.59 682.295 L1478.03 682.295 L1477.47 682.295 L1476.91 682.295 L1476.35 682.295 L1475.79 682.295 L1475.24 682.295 L1474.68 682.295 L1474.12 682.295 L1473.56 682.295 L1473 682.295 L1472.44 682.295 L1471.88 682.295 L1471.32 682.295 L1470.76 682.295 L1470.2 682.295 L1469.64 682.295 L1469.08 682.295 L1468.52 682.295 L1467.97 682.295 L1467.41 682.295 L1466.85 682.295 L1466.29 682.295 L1465.73 682.295 L1465.17 682.295 L1464.61 682.295 L1464.05 682.295 L1463.49 682.295 L1462.93 682.295 L1462.37 682.295 L1461.81 682.295 L1461.25 682.295 L1460.7 682.295 L1460.14 682.295 L1459.58 682.295 L1459.02 682.295 L1458.46 682.295 L1457.9 682.295 L1457.34 682.295 L1456.78 682.295 L1456.22 682.295 L1455.66 682.295 L1455.1 682.295 L1454.54 682.295 L1453.98 682.295 L1453.42 682.295 L1452.87 682.295 L1452.31 682.295 L1451.75 682.295 L1451.19 682.295 L1450.63 682.295 L1450.07 682.295 L1449.51 682.295 L1448.95 682.295 L1448.39 682.295 L1447.83 682.295 L1447.27 682.295 L1446.71 682.295 L1446.15 682.295 L1445.6 682.295 L1445.04 682.295 L1444.48 682.295 L1443.92 682.295 L1443.36 682.295 L1442.8 682.295 L1442.24 682.295 L1441.68 682.295 L1441.12 682.295 L1440.56 682.295 L1440 682.295 L1439.44 682.295 L1438.88 682.295 L1438.33 682.295 L1437.77 682.295 L1437.21 682.295 L1436.65 682.295 L1436.09 682.295 L1435.53 682.295 L1434.97 682.295 L1434.41 682.295 L1433.85 682.295 L1433.29 682.295 L1432.73 682.295 L1432.17 682.295 L1431.61 682.295 L1431.05 682.295 L1430.5 682.295 L1429.94 682.295 L1429.38 682.295 L1428.82 682.295 L1428.26 682.295 L1427.7 682.295 L1427.14 682.295 L1426.58 682.295 L1426.02 682.295 L1425.46 682.295 L1424.9 682.295 L1424.34 682.295 L1423.78 682.295 L1423.23 682.295 L1422.67 682.295 L1422.11 682.295 L1421.55 682.295 L1420.99 682.295 L1420.43 682.295 L1419.87 682.295 L1419.31 682.295 L1418.75 682.295 L1418.19 682.295 L1417.63 682.295 L1417.07 682.295 L1416.51 682.295 L1415.95 682.295 L1415.4 682.295 L1414.84 682.295 L1414.28 682.295 L1413.72 682.295 L1413.16 682.295 L1412.6 682.295 L1412.04 682.295 L1411.48 682.295 L1410.92 682.295 L1410.36 682.295 L1409.8 682.295 L1409.24 682.295 L1408.68 682.295 L1408.13 682.295 L1407.57 682.295 L1407.01 682.295 L1406.45 682.295 L1405.89 682.295 L1405.33 682.295 L1404.77 682.295 L1404.21 682.295 L1403.65 682.295 L1403.09 682.295 L1402.53 682.295 L1401.97 682.295 L1401.41 682.295 L1400.86 682.295 L1400.3 682.295 L1399.74 682.295 L1399.18 682.295 L1398.62 682.295 L1398.06 682.295 L1397.5 682.295 L1396.94 682.295 L1396.38 682.295 L1395.82 682.295 L1395.26 682.295 L1394.7 682.295 L1394.14 682.295 L1393.58 682.295 L1393.03 682.295 L1392.47 682.295 L1391.91 682.295 L1391.35 682.295 L1390.79 682.295 L1390.23 682.295 L1389.67 682.295 L1389.11 682.295 L1388.55 682.295 L1387.99 682.295 L1387.43 682.295 L1386.87 682.295 L1386.31 682.295 L1385.76 682.295 L1385.2 682.295 L1384.64 682.295 L1384.08 682.295 L1383.52 682.295 L1382.96 682.295 L1382.4 682.295 L1381.84 682.295 L1381.28 682.295 L1380.72 682.295 L1380.16 682.295 L1379.6 682.295 L1379.04 682.295 L1378.49 682.295 L1377.93 682.295 L1377.37 682.295 L1376.81 682.295 L1376.25 682.295 L1375.69 682.295 L1375.13 682.295 L1374.57 682.295 L1374.01 682.295 L1373.45 682.295 L1372.89 682.295 L1372.33 682.295 L1371.77 682.295 L1371.21 682.295 L1370.66 682.295 L1370.1 682.295 L1369.54 682.295 L1368.98 682.295 L1368.42 682.295 L1367.86 682.295 L1367.3 682.295 L1366.74 682.295 L1366.18 682.295 L1365.62 682.295 L1365.06 682.295 L1364.5 682.295 L1363.94 682.295 L1363.39 682.295 L1362.83 682.295 L1362.27 682.295 L1361.71 682.295 L1361.15 682.295 L1360.59 682.295 L1360.03 682.295 L1359.47 682.295 L1358.91 682.295 L1358.35 682.295 L1357.79 682.295 L1357.23 682.295 L1356.67 682.295 L1356.12 682.295 L1355.56 682.295 L1355 682.295 L1354.44 682.295 L1353.88 682.295 L1353.32 682.295 L1352.76 682.295 L1352.2 682.295 L1351.64 682.295 L1351.08 682.295 L1350.52 682.295 L1349.96 682.295 L1349.4 682.295 L1348.84 682.295 L1348.29 682.295 L1347.73 682.295 L1347.17 682.295 L1346.61 682.295 L1346.05 682.295 L1345.49 682.295 L1344.93 682.295 L1344.37 682.295 L1343.81 682.295 L1343.25 682.295 L1342.69 682.295 L1342.13 682.295 L1341.57 682.295 L1341.02 682.295 L1340.46 682.295 L1339.9 682.295 L1339.34 682.295 L1338.78 682.295 L1338.22 682.295 L1337.66 682.295 L1337.1 682.295 L1336.54 682.295 L1335.98 682.295 L1335.42 682.295 L1334.86 682.295 L1334.3 682.295 L1333.75 682.295 L1333.19 682.295 L1332.63 682.295 L1332.07 682.295 L1331.51 682.295 L1330.95 682.295 L1330.39 682.295 L1329.83 682.295 L1329.27 682.295 L1328.71 682.295 L1328.15 682.295 L1327.59 682.295 L1327.03 682.295 L1326.47 682.295 L1325.92 682.295 L1325.36 682.295 L1324.8 682.295 L1324.24 682.295 L1323.68 682.295 L1323.12 682.295 L1322.56 682.295 L1322 682.295 L1321.44 682.295 L1320.88 682.295 L1320.32 682.295 L1319.76 682.295 L1319.2 682.295 L1318.65 682.295 L1318.09 682.295 L1317.53 682.295 L1316.97 682.295 L1316.41 682.295 L1315.85 682.295 L1315.29 682.295 L1314.73 682.295 L1314.17 682.295 L1313.61 682.295 L1313.05 682.295 L1312.49 682.295 L1311.93 682.295 L1311.38 682.295 L1310.82 682.295 L1310.26 682.295 L1309.7 682.295 L1309.14 682.295 L1308.58 682.295 L1308.02 682.295 L1307.46 682.295 L1306.9 682.295 L1306.34 682.295 L1305.78 682.295 L1305.22 682.295 L1304.66 682.295 L1304.1 682.295 L1303.55 682.295 L1302.99 682.295 L1302.43 682.295 L1301.87 682.295 L1301.31 682.295 L1300.75 682.295 L1300.19 682.295 L1299.63 682.295 L1299.07 682.295 L1298.51 682.295 L1297.95 682.295 L1297.39 682.295 L1296.83 682.295 L1296.28 682.295 L1295.72 682.295 L1295.16 682.295 L1294.6 682.295 L1294.04 682.295 L1293.48 682.295 L1292.92 682.295 L1292.36 682.295 L1291.8 682.295 L1291.24 682.295 L1290.68 682.295 L1290.12 682.295 L1289.56 682.295 L1289 682.295 L1288.45 682.295 L1287.89 682.295 L1287.33 682.295 L1286.77 682.295 L1286.21 682.295 L1285.65 682.295 L1285.09 682.295 L1284.53 682.295 L1283.97 682.295 L1283.41 682.295 L1282.85 682.295 L1282.29 682.295 L1281.73 682.295 L1281.18 682.295 L1280.62 682.295 L1280.06 682.295 L1279.5 682.295 L1278.94 682.295 L1278.38 682.295 L1277.82 682.295 L1277.26 682.295 L1276.7 682.295 L1276.14 682.295 L1275.58 682.295 L1275.02 682.295 L1274.46 682.295 L1273.91 682.295 L1273.35 682.295 L1272.79 682.295 L1272.23 682.295 L1271.67 682.295 L1271.11 682.295 L1270.55 682.295 L1269.99 682.295 L1269.43 682.295 L1268.87 682.295 L1268.31 682.295 L1267.75 682.295 L1267.19 682.295 L1266.63 682.295 L1266.08 682.295 L1265.52 682.295 L1264.96 682.295 L1264.4 682.295 L1263.84 682.295 L1263.28 682.295 L1262.72 682.295 L1262.16 682.295 L1261.6 682.295 L1261.04 682.295 L1260.48 682.295 L1259.92 682.295 L1259.36 682.295 L1258.81 682.295 L1258.25 682.295 L1257.69 682.295 L1257.13 682.295 L1256.57 682.295 L1256.01 682.295 L1255.45 682.295 L1254.89 682.295 L1254.33 682.295 L1253.77 682.295 L1253.21 682.295 L1252.65 682.295 L1252.09 682.295 L1251.54 682.295 L1250.98 682.295 L1250.42 682.295 L1249.86 682.295 L1249.3 682.295 L1248.74 682.295 L1248.18 682.295 L1247.62 682.295 L1247.06 682.295 L1246.5 682.295 L1245.94 682.295 L1245.38 682.295 L1244.82 682.295 L1244.26 682.295 L1243.71 682.295 L1243.15 682.295 L1242.59 682.295 L1242.03 682.295 L1241.47 682.295 L1240.91 682.295 L1240.35 682.295 L1239.79 682.295 L1239.23 682.295 L1238.67 682.295 L1238.11 682.295 L1237.55 682.295 L1236.99 682.295 L1236.44 682.295 L1235.88 682.295 L1235.32 682.295 L1234.76 682.295 L1234.2 682.295 L1233.64 682.295 L1233.08 682.295 L1232.52 682.295 L1231.96 682.295 L1231.4 682.295 L1230.84 682.295 L1230.28 682.295 L1229.72 682.295 L1229.17 682.295 L1228.61 682.295 L1228.05 682.295 L1227.49 682.295 L1226.93 682.295 L1226.37 682.295 L1225.81 682.295 L1225.25 682.295 L1224.69 682.295 L1224.13 682.295 L1223.57 682.295 L1223.01 682.295 L1222.45 682.295 L1221.89 682.295 L1221.34 682.295 L1220.78 682.295 L1220.22 682.295 L1219.66 682.295 L1219.1 682.295 L1218.54 682.295 L1217.98 682.295 L1217.42 682.295 L1216.86 682.295 L1216.3 682.295 L1215.74 682.295 L1215.18 682.295 L1214.62 682.295 L1214.07 682.295 L1213.51 682.295 L1212.95 682.295 L1212.39 682.295 L1211.83 682.295 L1211.27 682.295 L1210.71 682.295 L1210.15 682.295 L1209.59 682.295 L1209.03 682.295 L1208.47 682.295 L1207.91 682.295 L1207.35 682.295 L1206.8 682.295 L1206.24 682.295 L1205.68 682.295 L1205.12 682.295 L1204.56 682.295 L1204 682.295 L1203.44 682.295 L1202.88 682.295 L1202.32 682.295 L1201.76 682.295 L1201.2 682.295 L1200.64 682.295 L1200.08 682.295 L1199.52 682.295 L1198.97 682.295 L1198.41 682.295 L1197.85 682.295 L1197.29 682.295 L1196.73 682.295 L1196.17 682.295 L1195.61 682.295 L1195.05 682.295 L1194.49 682.295 L1193.93 682.295 L1193.37 682.295 L1192.81 682.295 L1192.25 682.295 L1191.7 682.295 L1191.14 682.295 L1190.58 682.295 L1190.02 682.295 L1189.46 682.295 L1188.9 682.295 L1188.34 682.295 L1187.78 682.295 L1187.22 682.295 L1186.66 682.295 L1186.1 682.295 L1185.54 682.295 L1184.98 682.295 L1184.43 682.295 L1183.87 682.295 L1183.31 682.295 L1182.75 682.295 L1182.19 682.295 L1181.63 682.295 L1181.07 682.295 L1180.51 682.295 L1179.95 682.295 L1179.39 682.295 L1178.83 682.295 L1178.27 682.295 L1177.71 682.295 L1177.15 682.295 L1176.6 682.295 L1176.04 682.295 L1175.48 682.295 L1174.92 682.295 L1174.36 682.295 L1173.8 682.295 L1173.24 682.295 L1172.68 682.295 L1172.12 682.295 L1171.56 682.295 L1171 682.295 L1170.44 682.295 L1169.88 682.295 L1169.33 682.295 L1168.77 682.295 L1168.21 682.295 L1167.65 682.295 L1167.09 682.295 L1166.53 682.295 L1165.97 682.295 L1165.41 682.295 L1164.85 682.295 L1164.29 682.295 L1163.73 682.295 L1163.17 682.295 L1162.61 682.295 L1162.05 682.295 L1161.5 682.295 L1160.94 682.295 L1160.38 682.295 L1159.82 682.295 L1159.26 682.295 L1158.7 682.295 L1158.14 682.295 L1157.58 682.295 L1157.02 682.295 L1156.46 682.295 L1155.9 682.295 L1155.34 682.295 L1154.78 682.295 L1154.23 682.295 L1153.67 682.295 L1153.11 682.295 L1152.55 682.295 L1151.99 682.295 L1151.43 682.295 L1150.87 682.295 L1150.31 682.295 L1149.75 682.295 L1149.19 682.295 L1148.63 682.295 L1148.07 682.295 L1147.51 682.295 L1146.96 682.295 L1146.4 682.295 L1145.84 682.295 L1145.28 682.295 L1144.72 682.295 L1144.16 682.295 L1143.6 682.295 L1143.04 682.295 L1142.48 682.295 L1141.92 682.295 L1141.36 682.295 L1140.8 682.295 L1140.24 682.295 L1139.68 682.295 L1139.13 682.295 L1138.57 682.295 L1138.01 682.295 L1137.45 682.295 L1136.89 682.295 L1136.33 682.295 L1135.77 682.295 L1135.21 682.295 L1134.65 682.295 L1134.09 682.295 L1133.53 682.295 L1132.97 682.295 L1132.41 682.295 L1131.86 682.295 L1131.3 682.295 L1130.74 682.295 L1130.18 682.295 L1129.62 682.295 L1129.06 682.295 L1128.5 682.295 L1127.94 682.295 L1127.38 682.295 L1126.82 682.295 L1126.26 682.295 L1125.7 682.295 L1125.14 682.295 L1124.59 682.295 L1124.03 682.295 L1123.47 682.295 L1122.91 682.295 L1122.35 682.295 L1121.79 682.295 L1121.23 682.295 L1120.67 682.295 L1120.11 682.295 L1119.55 682.295 L1118.99 682.295 L1118.43 682.295 L1117.87 682.295 L1117.31 682.295 L1116.76 682.295 L1116.2 682.295 L1115.64 682.295 L1115.08 682.295 L1114.52 682.295 L1113.96 682.295 L1113.4 682.295 L1112.84 682.295 L1112.28 682.295 L1111.72 682.295 L1111.16 682.295 L1110.6 682.295 L1110.04 682.295 L1109.49 682.295 L1108.93 682.295 L1108.37 682.295 L1107.81 682.295 L1107.25 682.295 L1106.69 682.295 L1106.13 682.295 L1105.57 682.295 L1105.01 682.295 L1104.45 682.295 L1103.89 682.295 L1103.33 682.295 L1102.77 682.295 L1102.22 682.295 L1101.66 682.295 L1101.1 682.295 L1100.54 682.295 L1099.98 682.295 L1099.42 682.295 L1098.86 682.295 L1098.3 682.295 L1097.74 682.295 L1097.18 682.295 L1096.62 682.295 L1096.06 682.295 L1095.5 682.295 L1094.94 682.295 L1094.39 682.295 L1093.83 682.295 L1093.27 682.295 L1092.71 682.295 L1092.15 682.295 L1091.59 682.295 L1091.03 682.295 L1090.47 682.295 L1089.91 682.295 L1089.35 682.295 L1088.79 682.295 L1088.23 682.295 L1087.67 682.295 L1087.12 682.295 L1086.56 682.295 L1086 682.295 L1085.44 682.295 L1084.88 682.295 L1084.32 682.295 L1083.76 682.295 L1083.2 682.295 L1082.64 682.295 L1082.08 682.295 L1081.52 682.295 L1080.96 682.295 L1080.4 682.295 L1079.85 682.295 L1079.29 682.295 L1078.73 682.295 L1078.17 682.295 L1077.61 682.295 L1077.05 682.295 L1076.49 682.295 L1075.93 682.295 L1075.37 682.295 L1074.81 682.295 L1074.25 682.295 L1073.69 682.295 L1073.13 682.295 L1072.57 682.295 L1072.02 682.295 L1071.46 682.295 L1070.9 682.295 L1070.34 682.295 L1069.78 682.295 L1069.22 682.295 L1068.66 682.295 L1068.1 682.295 L1067.54 682.295 L1066.98 682.295 L1066.42 682.295 L1065.86 682.295 L1065.3 682.295 L1064.75 682.295 L1064.19 682.295 L1063.63 682.295 L1063.07 682.295 L1062.51 682.295 L1061.95 682.295 L1061.39 682.295 L1060.83 682.295 L1060.27 682.295 L1059.71 682.295 L1059.15 682.295 L1058.59 682.295 L1058.03 682.295 L1057.48 682.295 L1056.92 682.295 L1056.36 682.295 L1055.8 682.295 L1055.24 682.295 L1054.68 682.295 L1054.12 682.295 L1053.56 682.295 L1053 682.295 L1052.44 682.295 L1051.88 682.295 L1051.32 682.295 L1050.76 682.295 L1050.2 682.295 L1049.65 682.295 L1049.09 682.295 L1048.53 682.295 L1047.97 682.295 L1047.41 682.295 L1046.85 682.295 L1046.29 682.295 L1045.73 682.295 L1045.17 682.295 L1044.61 682.295 L1044.05 682.295 L1043.49 682.295 L1042.93 682.295 L1042.38 682.295 L1041.82 682.295 L1041.26 682.295 L1040.7 682.295 L1040.14 682.295 L1039.58 682.295 L1039.02 682.295 L1038.46 682.295 L1037.9 682.295 L1037.34 682.295 L1036.78 682.295 L1036.22 682.295 L1035.66 682.295 L1035.1 682.295 L1034.55 682.295 L1033.99 682.295 L1033.43 682.295 L1032.87 682.295 L1032.31 682.295 L1031.75 682.295 L1031.19 682.295 L1030.63 682.295 L1030.07 682.295 L1029.51 682.295 L1028.95 682.295 L1028.39 682.295 L1027.83 682.295 L1027.28 682.295 L1026.72 682.295 L1026.16 682.295 L1025.6 682.295 L1025.04 682.295 L1024.48 682.295 L1023.92 682.295 L1023.36 682.295 L1022.8 682.295 L1022.24 682.295 L1021.68 682.295 L1021.12 682.295 L1020.56 682.295 L1020.01 682.295 L1019.45 682.295 L1018.89 682.295 L1018.33 682.295 L1017.77 682.295 L1017.21 682.295 L1016.65 682.295 L1016.09 682.295 L1015.53 682.295 L1014.97 682.295 L1014.41 682.295 L1013.85 682.295 L1013.29 682.295 L1012.73 682.295 L1012.18 682.295 L1011.62 682.295 L1011.06 682.295 L1010.5 682.295 L1009.94 682.295 L1009.38 682.295 L1008.82 682.295 L1008.26 682.295 L1007.7 682.295 L1007.14 682.295 L1006.58 682.295 L1006.02 682.295 L1005.46 682.295 L1004.91 682.295 L1004.35 682.295 L1003.79 682.295 L1003.23 682.295 L1002.67 682.295 L1002.11 682.295 L1001.55 682.295 L1000.99 682.295 L1000.43 682.295 L999.872 682.295 L999.313 682.295 L998.754 682.295 L998.194 682.295 L997.635 682.295 L997.076 682.295 L996.517 682.295 L995.957 682.295 L995.398 682.295 L994.839 682.295 L994.28 682.295 L993.72 682.295 L993.161 682.295 L992.602 682.295 L992.043 682.295 L991.483 682.295 L990.924 682.295 L990.365 682.295 L989.806 682.295 L989.246 682.295 L988.687 682.295 L988.128 682.295 L987.569 682.295 L987.009 682.295 L986.45 682.295 L985.891 682.295 L985.332 682.295 L984.772 682.295 L984.213 682.295 L983.654 682.295 L983.095 682.295 L982.535 682.295 L981.976 682.295 L981.417 682.295 L980.858 682.295 L980.298 682.295 L979.739 682.295 L979.18 682.295 L978.621 682.295 L978.061 682.295 L977.502 682.295 L976.943 682.295 L976.384 682.295 L975.824 682.295 L975.265 682.295 L974.706 682.295 L974.147 682.295 L973.587 682.295 L973.028 682.295 L972.469 682.295 L971.91 682.295 L971.35 682.295 L970.791 682.295 L970.232 682.295 L969.673 682.295 L969.113 682.295 L968.554 682.295 L967.995 682.295 L967.436 682.295 L966.876 682.295 L966.317 682.295 L965.758 682.295 L965.199 682.295 L964.639 682.295 L964.08 682.295 L963.521 682.295 L962.962 682.295 L962.402 682.295 L961.843 682.295 L961.284 682.295 L960.725 682.295 L960.165 682.295 L959.606 682.295 L959.047 682.295 L958.488 682.295 L957.928 682.295 L957.369 682.295 L956.81 682.295 L956.251 682.295 L955.691 682.295 L955.132 682.295 L954.573 682.295 L954.014 682.295 L953.454 682.295 L952.895 682.295 L952.336 682.295 L951.777 682.295 L951.217 682.295 L950.658 682.295 L950.099 682.295 L949.54 682.295 L948.98 682.295 L948.421 682.295 L947.862 682.295 L947.303 682.295 L946.743 682.295 L946.184 682.295 L945.625 682.295 L945.066 682.295 L944.506 682.295 L943.947 682.295 L943.388 682.295 L942.829 682.295 L942.269 682.295 L941.71 682.295 L941.151 682.295 L940.592 682.295 L940.032 682.295 L939.473 682.295 L938.914 682.295 L938.355 682.295 L937.795 682.295 L937.236 682.295 L936.677 682.295 L936.118 682.295 L935.558 682.295 L934.999 682.295 L934.44 682.295 L933.881 682.295 L933.321 682.295 L932.762 682.295 L932.203 682.295 L931.644 682.295 L931.084 682.295 L930.525 682.295 L929.966 682.295 L929.406 682.295 L928.847 682.295 L928.288 682.295 L927.729 682.295 L927.169 682.295 L926.61 682.295 L926.051 682.295 L925.492 682.295 L924.932 682.295 L924.373 682.295 L923.814 682.295 L923.255 682.295 L922.695 682.295 L922.136 682.295 L921.577 682.295 L921.018 682.295 L920.458 682.295 L919.899 682.295 L919.34 682.295 L918.781 682.295 L918.221 682.295 L917.662 682.295 L917.103 682.295 L916.544 682.295 L915.984 682.295 L915.425 682.295 L914.866 682.295 L914.307 682.295 L913.747 682.295 L913.188 682.295 L912.629 682.295 L912.07 682.295 L911.51 682.295 L910.951 682.295 L910.392 682.295 L909.833 682.295 L909.273 682.295 L908.714 682.295 L908.155 682.295 L907.596 682.295 L907.036 682.295 L906.477 682.295 L905.918 682.295 L905.359 682.295 L904.799 682.295 L904.24 682.295 L903.681 682.295 L903.122 682.295 L902.562 682.295 L902.003 682.295 L901.444 682.295 L900.885 682.295 L900.325 682.295 L899.766 682.295 L899.207 682.295 L898.648 682.295 L898.088 682.295 L897.529 682.295 L896.97 682.295 L896.411 682.295 L895.851 682.295 L895.292 682.295 L894.733 682.295 L894.174 682.295 L893.614 682.295 L893.055 682.295 L892.496 682.295 L891.937 682.295 L891.377 682.295 L890.818 682.295 L890.259 682.295 L889.7 682.295 L889.14 682.295 L888.581 682.295 L888.022 682.295 L887.463 682.295 L886.903 682.295 L886.344 682.295 L885.785 682.295 L885.226 682.295 L884.666 682.295 L884.107 682.295 L883.548 682.295 L882.989 682.295 L882.429 682.295 L881.87 682.295 L881.311 682.295 L880.752 682.295 L880.192 682.295 L879.633 682.295 L879.074 682.295 L878.515 682.295 L877.955 682.295 L877.396 682.295 L876.837 682.295 L876.278 682.295 L875.718 682.295 L875.159 682.295 L874.6 682.295 L874.041 682.295 L873.481 682.295 L872.922 682.295 L872.363 682.295 L871.804 682.295 L871.244 682.295 L870.685 682.295 L870.126 682.295 L869.567 682.295 L869.007 682.295 L868.448 682.295 L867.889 682.295 L867.33 682.295 L866.77 682.295 L866.211 682.295 L865.652 682.295 L865.093 682.295 L864.533 682.295 L863.974 682.295 L863.415 682.295 L862.856 682.295 L862.296 682.295 L861.737 682.295 L861.178 682.295 L860.619 682.295 L860.059 682.295 L859.5 682.295 L858.941 682.295 L858.382 682.295 L857.822 682.295 L857.263 682.295 L856.704 682.295 L856.145 682.295 L855.585 682.295 L855.026 682.295 L854.467 682.295 L853.908 682.295 L853.348 682.295 L852.789 682.295 L852.23 682.295 L851.671 682.295 L851.111 682.295 L850.552 682.295 L849.993 682.295 L849.434 682.295 L848.874 682.295 L848.315 682.295 L847.756 682.295 L847.197 682.295 L846.637 682.295 L846.078 682.295 L845.519 682.295 L844.96 682.295 L844.4 682.295 L843.841 682.295 L843.282 682.295 L842.723 682.295 L842.163 682.295 L841.604 682.295 L841.045 682.295 L840.486 682.295 L839.926 682.295 L839.367 682.295 L838.808 682.295 L838.249 682.295 L837.689 682.295 L837.13 682.295 L836.571 682.295 L836.012 682.295 L835.452 682.295 L834.893 682.295 L834.334 682.295 L833.775 682.295 L833.215 682.295 L832.656 682.295 L832.097 682.295 L831.538 682.295 L830.978 682.295 L830.419 682.295 L829.86 682.295 L829.301 682.295 L828.741 682.295 L828.182 682.295 L827.623 682.295 L827.064 682.295 L826.504 682.295 L825.945 682.295 L825.386 682.295 L824.827 682.295 L824.267 682.295 L823.708 682.295 L823.149 682.295 L822.59 682.295 L822.03 682.295 L821.471 682.295 L820.912 682.295 L820.353 682.295 L819.793 682.295 L819.234 682.295 L818.675 682.295 L818.116 682.295 L817.556 682.295 L816.997 682.295 L816.438 682.295 L815.879 682.295 L815.319 682.295 L814.76 682.295 L814.201 682.295 L813.642 682.295 L813.082 682.295 L812.523 682.295 L811.964 682.295 L811.405 682.295 L810.845 682.295 L810.286 682.295 L809.727 682.295 L809.168 682.295 L808.608 682.295 L808.049 682.295 L807.49 682.295 L806.931 682.295 L806.371 682.295 L805.812 682.295 L805.253 682.295 L804.693 682.295 L804.134 682.295 L803.575 682.295 L803.016 682.295 L802.456 682.295 L801.897 682.295 L801.338 682.295 L800.779 682.295 L800.219 682.295 L799.66 682.295 L799.101 682.295 L798.542 682.295 L797.982 682.295 L797.423 682.295 L796.864 682.295 L796.305 682.295 L795.745 682.295 L795.186 682.295 L794.627 682.295 L794.068 682.295 L793.508 682.295 L792.949 682.295 L792.39 682.295 L791.831 682.295 L791.271 682.295 L790.712 682.295 L790.153 682.295 L789.594 682.295 L789.034 682.295 L788.475 682.295 L787.916 682.295 L787.357 682.295 L786.797 682.295 L786.238 682.295 L785.679 682.295 L785.12 682.295 L784.56 682.295 L784.001 682.295 L783.442 682.295 L782.883 682.295 L782.323 682.295 L781.764 682.295 L781.205 682.295 L780.646 682.295 L780.086 682.295 L779.527 682.295 L778.968 682.295 L778.409 682.295 L777.849 682.295 L777.29 682.295 L776.731 682.295 L776.172 682.295 L775.612 682.295 L775.053 682.295 L774.494 682.295 L773.935 682.295 L773.375 682.295 L772.816 682.295 L772.257 682.295 L771.698 682.295 L771.138 682.295 L770.579 682.295 L770.02 682.295 L769.461 682.295 L768.901 682.295 L768.342 682.295 L767.783 682.295 L767.224 682.295 L766.664 682.295 L766.105 682.295 L765.546 682.295 L764.987 682.295 L764.427 682.295 L763.868 682.295 L763.309 682.295 L762.75 682.295 L762.19 682.295 L761.631 682.295 L761.072 682.295 L760.513 682.295 L759.953 682.295 L759.394 682.295 L758.835 682.295 L758.276 682.295 L757.716 682.295 L757.157 682.295 L756.598 682.295 L756.039 682.295 L755.479 682.295 L754.92 682.295 L754.361 682.295 L753.802 682.295 L753.242 682.295 L752.683 682.295 L752.124 682.295 L751.565 682.295 L751.005 682.295 L750.446 682.295 L749.887 682.295 L749.328 682.295 L748.768 682.295 L748.209 682.295 L747.65 682.295 L747.091 682.295 L746.531 682.295 L745.972 682.295 L745.413 682.295 L744.854 682.295 L744.294 682.295 L743.735 682.295 L743.176 682.295 L742.617 682.295 L742.057 682.295 L741.498 682.295 L740.939 682.295 L740.38 682.295 L739.82 682.295 L739.261 682.295 L738.702 682.295 L738.143 682.295 L737.583 682.295 L737.024 682.295 L736.465 682.295 L735.906 682.295 L735.346 682.295 L734.787 682.295 L734.228 682.295 L733.669 682.295 L733.109 682.295 L732.55 682.295 L731.991 682.295 L731.432 682.295 L730.872 682.295 L730.313 682.295 L729.754 682.295 L729.195 682.295 L728.635 682.295 L728.076 682.295 L727.517 682.295 L726.958 682.295 L726.398 682.295 L725.839 682.295 L725.28 682.295 L724.721 682.295 L724.161 682.295 L723.602 682.295 L723.043 682.295 L722.484 682.295 L721.924 682.295 L721.365 682.295 L720.806 682.295 L720.247 682.295  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip463)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.273 720.806,686.273 721.365,686.273 721.924,686.273 722.484,686.273 723.043,686.273 723.602,686.273 724.161,686.273 724.721,686.273 725.28,686.273 725.839,686.273 726.398,686.273 726.958,686.273 727.517,686.273 728.076,686.273 728.635,686.273 729.195,686.273 729.754,686.273 730.313,686.273 730.872,686.273 731.432,686.273 731.991,686.273 732.55,686.273 733.109,686.273 733.669,686.273 734.228,686.273 734.787,686.273 735.346,686.273 735.906,686.273 736.465,686.273 737.024,686.273 737.583,686.273 738.143,686.273 738.702,686.273 739.261,686.273 739.82,686.273 740.38,686.273 740.939,686.273 741.498,686.273 742.057,686.273 742.617,686.273 743.176,686.273 743.735,686.273 744.294,686.273 744.854,686.273 745.413,686.273 745.972,686.273 746.531,686.273 747.091,686.273 747.65,686.273 748.209,686.273 748.768,686.273 749.328,686.273 749.887,686.273 750.446,686.273 751.005,686.273 751.565,686.273 752.124,686.273 752.683,686.273 753.242,686.273 753.802,686.273 754.361,686.273 754.92,686.273 755.479,686.273 756.039,686.273 756.598,686.273 757.157,686.273 757.716,686.273 758.276,686.273 758.835,686.273 759.394,686.273 759.953,686.273 760.513,686.273 761.072,686.273 761.631,686.273 762.19,686.273 762.75,686.273 763.309,686.273 763.868,686.273 764.427,686.273 764.987,686.273 765.546,686.273 766.105,686.273 766.664,686.273 767.224,686.273 767.783,686.273 768.342,686.273 768.901,686.273 769.461,686.273 770.02,686.273 770.579,686.273 771.138,686.273 771.698,686.273 772.257,686.273 772.816,686.273 773.375,686.273 773.935,686.273 774.494,686.273 775.053,686.273 775.612,686.273 776.172,686.273 776.731,686.273 777.29,686.273 777.849,686.273 778.409,686.273 778.968,686.273 779.527,686.273 780.086,686.273 780.646,686.273 781.205,686.273 781.764,686.273 782.323,686.273 782.883,686.273 783.442,686.273 784.001,686.273 784.56,686.273 785.12,686.273 785.679,686.273 786.238,686.273 786.797,686.273 787.357,686.273 787.916,686.273 788.475,686.273 789.034,686.273 789.594,686.273 790.153,686.273 790.712,686.273 791.271,686.273 791.831,686.273 792.39,686.273 792.949,686.273 793.508,686.273 794.068,686.273 794.627,686.273 795.186,686.273 795.745,686.273 796.305,686.273 796.864,686.273 797.423,686.273 797.982,686.273 798.542,686.273 799.101,686.273 799.66,686.273 800.219,686.273 800.779,686.273 801.338,686.273 801.897,686.273 802.456,686.273 803.016,686.273 803.575,686.273 804.134,686.273 804.693,686.273 805.253,686.273 805.812,686.273 806.371,686.273 806.931,686.273 807.49,686.273 808.049,686.273 808.608,686.273 809.168,686.273 809.727,686.273 810.286,686.273 810.845,686.273 811.405,686.273 811.964,686.273 812.523,686.273 813.082,686.273 813.642,686.273 814.201,686.273 814.76,686.273 815.319,686.273 815.879,686.273 816.438,686.273 816.997,686.273 817.556,686.273 818.116,686.273 818.675,686.273 819.234,686.273 819.793,686.273 820.353,686.273 820.912,686.273 821.471,686.273 822.03,686.273 822.59,686.273 823.149,686.273 823.708,686.273 824.267,686.273 824.827,686.273 825.386,686.273 825.945,686.273 826.504,686.273 827.064,686.273 827.623,686.273 828.182,686.273 828.741,686.273 829.301,686.273 829.86,686.273 830.419,686.273 830.978,686.273 831.538,686.273 832.097,686.273 832.656,686.273 833.215,686.273 833.775,686.273 834.334,686.273 834.893,686.273 835.452,686.273 836.012,686.273 836.571,686.273 837.13,686.273 837.689,686.273 838.249,686.273 838.808,686.273 839.367,686.273 839.926,686.273 840.486,686.273 841.045,686.273 841.604,686.273 842.163,686.273 842.723,686.273 843.282,686.273 843.841,686.273 844.4,686.273 844.96,686.273 845.519,686.273 846.078,686.273 846.637,686.273 847.197,686.273 847.756,686.273 848.315,686.273 848.874,686.273 849.434,686.273 849.993,686.273 850.552,686.273 851.111,686.273 851.671,686.273 852.23,686.273 852.789,686.273 853.348,686.273 853.908,686.273 854.467,686.273 855.026,686.273 855.585,686.273 856.145,686.273 856.704,686.273 857.263,686.273 857.822,686.273 858.382,686.273 858.941,686.273 859.5,686.273 860.059,686.273 860.619,686.273 861.178,686.273 861.737,686.273 862.296,686.273 862.856,686.273 863.415,686.273 863.974,686.273 864.533,686.273 865.093,686.273 865.652,686.273 866.211,686.273 866.77,686.273 867.33,686.273 867.889,686.273 868.448,686.273 869.007,686.273 869.567,686.273 870.126,686.273 870.685,686.273 871.244,686.273 871.804,686.273 872.363,686.273 872.922,686.273 873.481,686.273 874.041,686.273 874.6,686.273 875.159,686.273 875.718,686.273 876.278,686.273 876.837,686.273 877.396,686.273 877.955,686.273 878.515,686.273 879.074,686.273 879.633,686.273 880.192,686.273 880.752,686.273 881.311,686.273 881.87,686.273 882.429,686.273 882.989,686.273 883.548,686.273 884.107,686.273 884.666,686.273 885.226,686.273 885.785,686.273 886.344,686.273 886.903,686.273 887.463,686.273 888.022,686.273 888.581,686.273 889.14,686.273 889.7,686.273 890.259,686.273 890.818,686.273 891.377,686.273 891.937,686.273 892.496,686.273 893.055,686.273 893.614,686.273 894.174,686.273 894.733,686.273 895.292,686.273 895.851,686.273 896.411,686.273 896.97,686.273 897.529,686.273 898.088,686.273 898.648,686.273 899.207,686.273 899.766,686.273 900.325,686.273 900.885,686.273 901.444,686.273 902.003,686.273 902.562,686.273 903.122,686.273 903.681,686.273 904.24,686.273 904.799,686.273 905.359,686.273 905.918,686.273 906.477,686.273 907.036,686.273 907.596,686.273 908.155,686.273 908.714,686.273 909.273,686.273 909.833,686.273 910.392,686.273 910.951,686.273 911.51,686.273 912.07,686.273 912.629,686.273 913.188,686.273 913.747,686.273 914.307,686.273 914.866,686.273 915.425,686.273 915.984,686.273 916.544,686.273 917.103,686.273 917.662,686.273 918.221,686.273 918.781,686.273 919.34,686.273 919.899,686.273 920.458,686.273 921.018,686.273 921.577,686.273 922.136,686.273 922.695,686.273 923.255,686.273 923.814,686.273 924.373,686.273 924.932,686.273 925.492,686.273 926.051,686.273 926.61,686.273 927.169,686.273 927.729,686.273 928.288,686.273 928.847,686.273 929.406,686.273 929.966,686.273 930.525,686.273 931.084,686.273 931.644,686.273 932.203,686.273 932.762,686.273 933.321,686.273 933.881,686.273 934.44,686.273 934.999,686.273 935.558,686.273 936.118,686.273 936.677,686.273 937.236,686.273 937.795,686.273 938.355,686.273 938.914,686.273 939.473,686.273 940.032,686.273 940.592,686.273 941.151,686.273 941.71,686.273 942.269,686.273 942.829,686.273 943.388,686.273 943.947,686.273 944.506,686.273 945.066,686.273 945.625,686.273 946.184,686.273 946.743,686.273 947.303,686.273 947.862,686.273 948.421,686.273 948.98,686.273 949.54,686.273 950.099,686.273 950.658,686.273 951.217,686.273 951.777,686.273 952.336,686.273 952.895,686.273 953.454,686.273 954.014,686.273 954.573,686.273 955.132,686.273 955.691,686.273 956.251,686.273 956.81,686.273 957.369,686.273 957.928,686.273 958.488,686.273 959.047,686.273 959.606,686.273 960.165,686.273 960.725,686.273 961.284,686.273 961.843,686.273 962.402,686.273 962.962,686.273 963.521,686.273 964.08,686.273 964.639,686.273 965.199,686.273 965.758,686.273 966.317,686.273 966.876,686.273 967.436,686.273 967.995,686.273 968.554,686.273 969.113,686.273 969.673,686.273 970.232,686.273 970.791,686.273 971.35,686.273 971.91,686.273 972.469,686.273 973.028,686.273 973.587,686.273 974.147,686.273 974.706,686.273 975.265,686.273 975.824,686.273 976.384,686.273 976.943,686.273 977.502,686.273 978.061,686.273 978.621,686.273 979.18,686.273 979.739,686.273 980.298,686.273 980.858,686.273 981.417,686.273 981.976,686.273 982.535,686.273 983.095,686.273 983.654,686.273 984.213,686.273 984.772,686.273 985.332,686.273 985.891,686.273 986.45,686.273 987.009,686.273 987.569,686.273 988.128,686.273 988.687,686.273 989.246,686.273 989.806,686.273 990.365,686.273 990.924,686.273 991.483,686.273 992.043,686.273 992.602,686.273 993.161,686.273 993.72,686.273 994.28,686.273 994.839,686.273 995.398,686.273 995.957,686.273 996.517,686.273 997.076,686.273 997.635,686.273 998.194,686.273 998.754,686.273 999.313,686.273 999.872,686.273 1000.43,686.273 1000.99,686.273 1001.55,686.273 1002.11,686.273 1002.67,686.273 1003.23,686.273 1003.79,686.273 1004.35,686.273 1004.91,686.273 1005.46,686.273 1006.02,686.273 1006.58,686.273 1007.14,686.273 1007.7,686.273 1008.26,686.273 1008.82,686.273 1009.38,686.273 1009.94,686.273 1010.5,686.273 1011.06,686.273 1011.62,686.273 1012.18,686.273 1012.73,686.273 1013.29,686.273 1013.85,686.273 1014.41,686.273 1014.97,686.273 1015.53,686.273 1016.09,686.273 1016.65,686.273 1017.21,686.273 1017.77,686.273 1018.33,686.273 1018.89,686.273 1019.45,686.273 1020.01,686.273 1020.56,686.273 1021.12,686.273 1021.68,686.273 1022.24,686.273 1022.8,686.273 1023.36,686.273 1023.92,686.273 1024.48,686.273 1025.04,686.273 1025.6,686.273 1026.16,686.273 1026.72,686.273 1027.28,686.273 1027.83,686.273 1028.39,686.273 1028.95,686.273 1029.51,686.273 1030.07,686.273 1030.63,686.273 1031.19,686.273 1031.75,686.273 1032.31,686.273 1032.87,686.273 1033.43,686.273 1033.99,686.273 1034.55,686.273 1035.1,686.273 1035.66,686.273 1036.22,686.273 1036.78,686.273 1037.34,686.273 1037.9,686.273 1038.46,686.273 1039.02,686.273 1039.58,686.273 1040.14,686.273 1040.7,686.273 1041.26,686.273 1041.82,686.273 1042.38,686.273 1042.93,686.273 1043.49,686.273 1044.05,686.273 1044.61,686.273 1045.17,686.273 1045.73,686.273 1046.29,686.273 1046.85,686.273 1047.41,686.273 1047.97,686.273 1048.53,686.273 1049.09,686.273 1049.65,686.273 1050.2,686.273 1050.76,686.273 1051.32,686.273 1051.88,686.273 1052.44,686.273 1053,686.273 1053.56,686.273 1054.12,686.273 1054.68,686.273 1055.24,686.273 1055.8,686.273 1056.36,686.273 1056.92,686.273 1057.48,686.273 1058.03,686.273 1058.59,686.273 1059.15,686.273 1059.71,686.273 1060.27,686.273 1060.83,686.273 1061.39,686.273 1061.95,686.273 1062.51,686.273 1063.07,686.273 1063.63,686.273 1064.19,686.273 1064.75,686.273 1065.3,686.273 1065.86,686.273 1066.42,686.273 1066.98,686.273 1067.54,686.273 1068.1,686.273 1068.66,686.273 1069.22,686.273 1069.78,686.273 1070.34,686.273 1070.9,686.273 1071.46,686.273 1072.02,686.273 1072.57,686.273 1073.13,686.273 1073.69,686.273 1074.25,686.273 1074.81,686.273 1075.37,686.273 1075.93,686.273 1076.49,686.273 1077.05,686.273 1077.61,686.273 1078.17,686.273 1078.73,686.273 1079.29,686.273 1079.85,686.273 1080.4,686.273 1080.96,686.273 1081.52,686.273 1082.08,686.273 1082.64,686.273 1083.2,686.273 1083.76,686.273 1084.32,686.273 1084.88,686.273 1085.44,686.273 1086,686.273 1086.56,686.273 1087.12,686.273 1087.67,686.273 1088.23,686.273 1088.79,686.273 1089.35,686.273 1089.91,686.273 1090.47,686.273 1091.03,686.273 1091.59,686.273 1092.15,686.273 1092.71,686.273 1093.27,686.273 1093.83,686.273 1094.39,686.273 1094.94,686.273 1095.5,686.273 1096.06,686.273 1096.62,686.273 1097.18,686.273 1097.74,686.273 1098.3,686.273 1098.86,686.273 1099.42,686.273 1099.98,686.273 1100.54,686.273 1101.1,686.273 1101.66,686.273 1102.22,686.273 1102.77,686.273 1103.33,686.273 1103.89,686.273 1104.45,686.273 1105.01,686.273 1105.57,686.273 1106.13,686.273 1106.69,686.273 1107.25,686.273 1107.81,686.273 1108.37,686.273 1108.93,686.273 1109.49,686.273 1110.04,686.273 1110.6,686.273 1111.16,686.273 1111.72,686.273 1112.28,686.273 1112.84,686.273 1113.4,686.273 1113.96,686.273 1114.52,686.273 1115.08,686.273 1115.64,686.273 1116.2,686.273 1116.76,686.273 1117.31,686.273 1117.87,686.273 1118.43,686.273 1118.99,686.273 1119.55,686.273 1120.11,686.273 1120.67,686.273 1121.23,686.273 1121.79,686.273 1122.35,686.273 1122.91,686.273 1123.47,686.273 1124.03,686.273 1124.59,686.273 1125.14,686.273 1125.7,686.273 1126.26,686.273 1126.82,686.273 1127.38,686.273 1127.94,686.273 1128.5,686.273 1129.06,686.273 1129.62,686.273 1130.18,686.273 1130.74,686.273 1131.3,686.273 1131.86,686.273 1132.41,686.273 1132.97,686.273 1133.53,686.273 1134.09,686.273 1134.65,686.273 1135.21,686.273 1135.77,686.273 1136.33,686.273 1136.89,686.273 1137.45,686.273 1138.01,686.273 1138.57,686.273 1139.13,686.273 1139.68,686.273 1140.24,686.273 1140.8,686.273 1141.36,686.273 1141.92,686.273 1142.48,686.273 1143.04,686.273 1143.6,686.273 1144.16,686.273 1144.72,686.273 1145.28,686.273 1145.84,686.273 1146.4,686.273 1146.96,686.273 1147.51,686.273 1148.07,686.273 1148.63,686.273 1149.19,686.273 1149.75,686.273 1150.31,686.273 1150.87,686.273 1151.43,686.273 1151.99,686.273 1152.55,686.273 1153.11,686.273 1153.67,686.273 1154.23,686.273 1154.78,686.273 1155.34,686.273 1155.9,686.273 1156.46,686.273 1157.02,686.273 1157.58,686.273 1158.14,686.273 1158.7,686.273 1159.26,686.273 1159.82,686.273 1160.38,686.273 1160.94,686.273 1161.5,686.273 1162.05,686.273 1162.61,686.273 1163.17,686.273 1163.73,686.273 1164.29,686.273 1164.85,686.273 1165.41,686.273 1165.97,686.273 1166.53,686.273 1167.09,686.273 1167.65,686.273 1168.21,686.273 1168.77,686.273 1169.33,686.273 1169.88,686.273 1170.44,686.273 1171,686.273 1171.56,686.273 1172.12,686.273 1172.68,686.273 1173.24,686.273 1173.8,686.273 1174.36,686.273 1174.92,686.273 1175.48,686.273 1176.04,686.273 1176.6,686.273 1177.15,686.273 1177.71,686.273 1178.27,686.273 1178.83,686.273 1179.39,686.273 1179.95,686.273 1180.51,686.273 1181.07,686.273 1181.63,686.273 1182.19,686.273 1182.75,686.273 1183.31,686.273 1183.87,686.273 1184.43,686.273 1184.98,686.273 1185.54,686.273 1186.1,686.273 1186.66,686.273 1187.22,686.273 1187.78,686.273 1188.34,686.273 1188.9,686.273 1189.46,686.273 1190.02,686.273 1190.58,686.273 1191.14,686.273 1191.7,686.273 1192.25,686.273 1192.81,686.273 1193.37,686.273 1193.93,686.273 1194.49,686.273 1195.05,686.273 1195.61,686.273 1196.17,686.273 1196.73,686.273 1197.29,686.273 1197.85,686.273 1198.41,686.273 1198.97,686.273 1199.52,686.273 1200.08,686.273 1200.64,686.273 1201.2,686.273 1201.76,686.273 1202.32,686.273 1202.88,686.273 1203.44,686.273 1204,686.273 1204.56,686.273 1205.12,686.273 1205.68,686.273 1206.24,686.273 1206.8,686.273 1207.35,686.273 1207.91,686.273 1208.47,686.273 1209.03,686.273 1209.59,686.273 1210.15,686.273 1210.71,686.273 1211.27,686.273 1211.83,686.273 1212.39,686.273 1212.95,686.273 1213.51,686.273 1214.07,686.273 1214.62,686.273 1215.18,686.273 1215.74,686.273 1216.3,686.273 1216.86,686.273 1217.42,686.273 1217.98,686.273 1218.54,686.273 1219.1,686.273 1219.66,686.273 1220.22,686.273 1220.78,686.273 1221.34,686.273 1221.89,686.273 1222.45,686.273 1223.01,686.273 1223.57,686.273 1224.13,686.273 1224.69,686.273 1225.25,686.273 1225.81,686.273 1226.37,686.273 1226.93,686.273 1227.49,686.273 1228.05,686.273 1228.61,686.273 1229.17,686.273 1229.72,686.273 1230.28,686.273 1230.84,686.273 1231.4,686.273 1231.96,686.273 1232.52,686.273 1233.08,686.273 1233.64,686.273 1234.2,686.273 1234.76,686.273 1235.32,686.273 1235.88,686.273 1236.44,686.273 1236.99,686.273 1237.55,686.273 1238.11,686.273 1238.67,686.273 1239.23,686.273 1239.79,686.273 1240.35,686.273 1240.91,686.273 1241.47,686.273 1242.03,686.273 1242.59,686.273 1243.15,686.273 1243.71,686.273 1244.26,686.273 1244.82,686.273 1245.38,686.273 1245.94,686.273 1246.5,686.273 1247.06,686.273 1247.62,686.273 1248.18,686.273 1248.74,686.273 1249.3,686.273 1249.86,686.273 1250.42,686.273 1250.98,686.273 1251.54,686.273 1252.09,686.273 1252.65,686.273 1253.21,686.273 1253.77,686.273 1254.33,686.273 1254.89,686.273 1255.45,686.273 1256.01,686.273 1256.57,686.273 1257.13,686.273 1257.69,686.273 1258.25,686.273 1258.81,686.273 1259.36,686.273 1259.92,686.273 1260.48,686.273 1261.04,686.273 1261.6,686.273 1262.16,686.273 1262.72,686.273 1263.28,686.273 1263.84,686.273 1264.4,686.273 1264.96,686.273 1265.52,686.273 1266.08,686.273 1266.63,686.273 1267.19,686.273 1267.75,686.273 1268.31,686.273 1268.87,686.273 1269.43,686.273 1269.99,686.273 1270.55,686.273 1271.11,686.273 1271.67,686.273 1272.23,686.273 1272.79,686.273 1273.35,686.273 1273.91,686.273 1274.46,686.273 1275.02,686.273 1275.58,686.273 1276.14,686.273 1276.7,686.273 1277.26,686.273 1277.82,686.273 1278.38,686.273 1278.94,686.273 1279.5,686.273 1280.06,686.273 1280.62,686.273 1281.18,686.273 1281.73,686.273 1282.29,686.273 1282.85,686.273 1283.41,686.273 1283.97,686.273 1284.53,686.273 1285.09,686.273 1285.65,686.273 1286.21,686.273 1286.77,686.273 1287.33,686.273 1287.89,686.273 1288.45,686.273 1289,686.273 1289.56,686.273 1290.12,686.273 1290.68,686.273 1291.24,686.273 1291.8,686.273 1292.36,686.273 1292.92,686.273 1293.48,686.273 1294.04,686.273 1294.6,686.273 1295.16,686.273 1295.72,686.273 1296.28,686.273 1296.83,686.273 1297.39,686.273 1297.95,686.273 1298.51,686.273 1299.07,686.273 1299.63,686.273 1300.19,686.273 1300.75,686.273 1301.31,686.273 1301.87,686.273 1302.43,686.273 1302.99,686.273 1303.55,686.273 1304.1,686.273 1304.66,686.273 1305.22,686.273 1305.78,686.273 1306.34,686.273 1306.9,686.273 1307.46,686.273 1308.02,686.273 1308.58,686.273 1309.14,686.273 1309.7,686.273 1310.26,686.273 1310.82,686.273 1311.38,686.273 1311.93,686.273 1312.49,686.273 1313.05,686.273 1313.61,686.273 1314.17,686.273 1314.73,686.273 1315.29,686.273 1315.85,686.273 1316.41,686.273 1316.97,686.273 1317.53,686.273 1318.09,686.273 1318.65,686.273 1319.2,686.273 1319.76,686.273 1320.32,686.273 1320.88,686.273 1321.44,686.273 1322,686.273 1322.56,686.273 1323.12,686.273 1323.68,686.273 1324.24,686.273 1324.8,686.273 1325.36,686.273 1325.92,686.273 1326.47,686.273 1327.03,686.273 1327.59,686.273 1328.15,686.273 1328.71,686.273 1329.27,686.273 1329.83,686.273 1330.39,686.273 1330.95,686.273 1331.51,686.273 1332.07,686.273 1332.63,686.273 1333.19,686.273 1333.75,686.273 1334.3,686.273 1334.86,686.273 1335.42,686.273 1335.98,686.273 1336.54,686.273 1337.1,686.273 1337.66,686.273 1338.22,686.273 1338.78,686.273 1339.34,686.273 1339.9,686.273 1340.46,686.273 1341.02,686.273 1341.57,686.273 1342.13,686.273 1342.69,686.273 1343.25,686.273 1343.81,686.273 1344.37,686.273 1344.93,686.273 1345.49,686.273 1346.05,686.273 1346.61,686.273 1347.17,686.273 1347.73,686.273 1348.29,686.273 1348.84,686.273 1349.4,686.273 1349.96,686.273 1350.52,686.273 1351.08,686.273 1351.64,686.273 1352.2,686.273 1352.76,686.273 1353.32,686.273 1353.88,686.273 1354.44,686.273 1355,686.273 1355.56,686.273 1356.12,686.273 1356.67,686.273 1357.23,686.273 1357.79,686.273 1358.35,686.273 1358.91,686.273 1359.47,686.273 1360.03,686.273 1360.59,686.273 1361.15,686.273 1361.71,686.273 1362.27,686.273 1362.83,686.273 1363.39,686.273 1363.94,686.273 1364.5,686.273 1365.06,686.273 1365.62,686.273 1366.18,686.273 1366.74,686.273 1367.3,686.273 1367.86,686.273 1368.42,686.273 1368.98,686.273 1369.54,686.273 1370.1,686.273 1370.66,686.273 1371.21,686.273 1371.77,686.273 1372.33,686.273 1372.89,686.273 1373.45,686.273 1374.01,686.273 1374.57,686.273 1375.13,686.273 1375.69,686.273 1376.25,686.273 1376.81,686.273 1377.37,686.273 1377.93,686.273 1378.49,686.273 1379.04,686.273 1379.6,686.273 1380.16,686.273 1380.72,686.273 1381.28,686.273 1381.84,686.273 1382.4,686.273 1382.96,686.273 1383.52,686.273 1384.08,686.273 1384.64,686.273 1385.2,686.273 1385.76,686.273 1386.31,686.273 1386.87,686.273 1387.43,686.273 1387.99,686.273 1388.55,686.273 1389.11,686.273 1389.67,686.273 1390.23,686.273 1390.79,686.273 1391.35,686.273 1391.91,686.273 1392.47,686.273 1393.03,686.273 1393.58,686.273 1394.14,686.273 1394.7,686.273 1395.26,686.273 1395.82,686.273 1396.38,686.273 1396.94,686.273 1397.5,686.273 1398.06,686.273 1398.62,686.273 1399.18,686.273 1399.74,686.273 1400.3,686.273 1400.86,686.273 1401.41,686.273 1401.97,686.273 1402.53,686.273 1403.09,686.273 1403.65,686.273 1404.21,686.273 1404.77,686.273 1405.33,686.273 1405.89,686.273 1406.45,686.273 1407.01,686.273 1407.57,686.273 1408.13,686.273 1408.68,686.273 1409.24,686.273 1409.8,686.273 1410.36,686.273 1410.92,686.273 1411.48,686.273 1412.04,686.273 1412.6,686.273 1413.16,686.273 1413.72,686.273 1414.28,686.273 1414.84,686.273 1415.4,686.273 1415.95,686.273 1416.51,686.273 1417.07,686.273 1417.63,686.273 1418.19,686.273 1418.75,686.273 1419.31,686.273 1419.87,686.273 1420.43,686.273 1420.99,686.273 1421.55,686.273 1422.11,686.273 1422.67,686.273 1423.23,686.273 1423.78,686.273 1424.34,686.273 1424.9,686.273 1425.46,686.273 1426.02,686.273 1426.58,686.273 1427.14,686.273 1427.7,686.273 1428.26,686.273 1428.82,686.273 1429.38,686.273 1429.94,686.273 1430.5,686.273 1431.05,686.273 1431.61,686.273 1432.17,686.273 1432.73,686.273 1433.29,686.273 1433.85,686.273 1434.41,686.273 1434.97,686.273 1435.53,686.273 1436.09,686.273 1436.65,686.273 1437.21,686.273 1437.77,686.273 1438.33,686.273 1438.88,686.273 1439.44,686.273 1440,686.273 1440.56,686.273 1441.12,686.273 1441.68,686.273 1442.24,686.273 1442.8,686.273 1443.36,686.273 1443.92,686.273 1444.48,686.273 1445.04,686.273 1445.6,686.273 1446.15,686.273 1446.71,686.273 1447.27,686.273 1447.83,686.273 1448.39,686.273 1448.95,686.273 1449.51,686.273 1450.07,686.273 1450.63,686.273 1451.19,686.273 1451.75,686.273 1452.31,686.273 1452.87,686.273 1453.42,686.273 1453.98,686.273 1454.54,686.273 1455.1,686.273 1455.66,686.273 1456.22,686.273 1456.78,686.273 1457.34,686.273 1457.9,686.273 1458.46,686.273 1459.02,686.273 1459.58,686.273 1460.14,686.273 1460.7,686.273 1461.25,686.273 1461.81,686.273 1462.37,686.273 1462.93,686.273 1463.49,686.273 1464.05,686.273 1464.61,686.273 1465.17,686.273 1465.73,686.273 1466.29,686.273 1466.85,686.273 1467.41,686.273 1467.97,686.273 1468.52,686.273 1469.08,686.273 1469.64,686.273 1470.2,686.273 1470.76,686.273 1471.32,686.273 1471.88,686.273 1472.44,686.273 1473,686.273 1473.56,686.273 1474.12,686.273 1474.68,686.273 1475.24,686.273 1475.79,686.273 1476.35,686.273 1476.91,686.273 1477.47,686.273 1478.03,686.273 1478.59,686.273 1479.15,686.273 1479.71,686.273 1480.27,686.273 1480.83,686.273 1481.39,686.273 1481.95,686.273 1482.51,686.273 1483.07,686.273 1483.62,686.273 1484.18,686.273 1484.74,686.273 1485.3,686.273 1485.86,686.273 1486.42,686.273 1486.98,686.273 1487.54,686.273 1488.1,686.273 1488.66,686.273 1489.22,686.273 1489.78,686.273 1490.34,686.273 1490.89,686.273 1491.45,686.273 1492.01,686.273 1492.57,686.273 1493.13,686.273 1493.69,686.273 1494.25,686.273 1494.81,686.273 1495.37,686.273 1495.93,686.273 1496.49,686.273 1497.05,686.273 1497.61,686.273 1498.16,686.273 1498.72,686.273 1499.28,686.273 1499.84,686.273 1500.4,686.273 1500.96,686.273 1501.52,686.273 1502.08,686.273 1502.64,686.273 1503.2,686.273 1503.76,686.273 1504.32,686.273 1504.88,686.273 1505.44,686.273 1505.99,686.273 1506.55,686.273 1507.11,686.273 1507.67,686.273 1508.23,686.273 1508.79,686.273 1509.35,686.273 1509.91,686.273 1510.47,686.273 1511.03,686.273 1511.59,686.273 1512.15,686.273 1512.71,686.273 1513.26,686.273 1513.82,686.273 1514.38,686.273 1514.94,686.273 1515.5,686.273 1516.06,686.273 1516.62,686.273 1517.18,686.273 1517.74,686.273 1518.3,686.273 1518.86,686.273 1519.42,686.273 1519.98,686.273 1520.53,686.273 1521.09,686.273 1521.65,686.273 1522.21,686.273 1522.77,686.273 1523.33,686.273 1523.89,686.273 1524.45,686.273 1525.01,686.273 1525.57,686.273 1526.13,686.273 1526.69,686.273 1527.25,686.273 1527.81,686.273 1528.36,686.273 1528.92,686.273 1529.48,686.273 1530.04,686.273 1530.6,686.273 1531.16,686.273 1531.72,686.273 1532.28,686.273 1532.84,686.273 1533.4,686.273 1533.96,686.273 1534.52,686.273 1535.08,686.273 1535.63,686.273 1536.19,686.273 1536.75,686.273 1537.31,686.273 1537.87,686.273 1538.43,686.273 1538.99,686.273 1539.55,686.273 1540.11,686.273 1540.67,686.273 1541.23,686.273 1541.79,686.273 1542.35,686.273 1542.9,686.273 1543.46,686.273 1544.02,686.273 1544.58,686.273 1545.14,686.273 1545.7,686.273 1546.26,686.273 1546.82,686.273 1547.38,686.273 1547.94,686.273 1548.5,686.273 1549.06,686.273 1549.62,686.273 1550.18,686.273 1550.73,686.273 1551.29,686.273 1551.85,686.273 1552.41,686.273 1552.97,686.273 1553.53,686.273 1554.09,686.273 1554.65,686.273 1555.21,686.273 1555.77,686.273 1556.33,686.273 1556.89,686.273 1557.45,686.273 1558,686.273 1558.56,686.273 1559.12,686.273 1559.68,686.273 1560.24,686.273 1560.8,686.273 1561.36,686.273 1561.92,686.273 1562.48,686.273 1563.04,686.273 1563.6,686.273 1564.16,686.273 1564.72,686.273 1565.28,686.273 1565.83,686.273 1566.39,686.273 1566.95,686.273 1567.51,686.273 1568.07,686.273 1568.63,686.273 1569.19,686.273 1569.75,686.273 1570.31,686.273 1570.87,686.273 1571.43,686.273 1571.99,686.273 1572.55,686.273 1573.1,686.273 1573.66,686.273 1574.22,686.273 1574.78,686.273 1575.34,686.273 1575.9,686.273 1576.46,686.273 1577.02,686.273 1577.58,686.273 1578.14,686.273 1578.7,686.273 1579.26,686.273 1579.82,686.273 1580.37,686.273 1580.93,686.273 1581.49,686.273 1582.05,686.273 1582.61,686.273 1583.17,686.273 1583.73,686.273 1584.29,686.273 1584.85,686.273 1585.41,686.273 1585.97,686.273 1586.53,686.273 1587.09,686.273 1587.65,686.273 1588.2,686.273 1588.76,686.273 1589.32,686.273 1589.88,686.273 1590.44,686.273 1591,686.273 1591.56,686.273 1592.12,686.273 1592.68,686.273 1593.24,686.273 1593.8,686.273 1594.36,686.273 1594.92,686.273 1595.47,686.273 1596.03,686.273 1596.59,686.273 1597.15,686.273 1597.71,686.273 1598.27,686.273 1598.83,686.273 1599.39,686.273 1599.95,686.273 1600.51,686.273 1601.07,686.273 1601.63,686.273 1602.19,686.273 1602.74,686.273 1603.3,686.273 1603.86,686.273 1604.42,686.273 1604.98,686.273 1605.54,686.273 1606.1,686.273 1606.66,686.273 1607.22,686.273 1607.78,686.273 1608.34,686.273 1608.9,686.273 1609.46,686.273 1610.02,686.273 1610.57,686.273 1611.13,686.273 1611.69,686.273 1612.25,686.273 1612.81,686.273 1613.37,686.273 1613.93,686.273 1614.49,686.273 1615.05,686.273 1615.61,686.273 1616.17,686.273 1616.73,686.273 1617.29,686.273 1617.84,686.273 1618.4,686.273 1618.96,686.273 1619.52,686.273 1620.08,686.273 1620.64,686.273 1621.2,686.273 1621.76,686.273 1622.32,686.273 1622.88,686.273 1623.44,686.273 1624,686.273 1624.56,686.273 1625.11,686.273 1625.67,686.273 1626.23,686.273 1626.79,686.273 1627.35,686.273 1627.91,686.273 1628.47,686.273 1629.03,686.273 1629.59,686.273 1630.15,686.273 1630.71,686.273 1631.27,686.273 1631.83,686.273 1632.39,686.273 1632.94,686.273 1633.5,686.273 1634.06,686.273 1634.62,686.273 1635.18,686.273 1635.74,686.273 1636.3,686.273 1636.86,686.273 1637.42,686.273 1637.98,686.273 1638.54,686.273 1639.1,686.273 1639.66,686.273 1640.21,686.273 1640.77,686.273 1641.33,686.273 1641.89,686.273 1642.45,686.273 1643.01,686.273 1643.57,686.273 1644.13,686.273 1644.69,686.273 1645.25,686.273 1645.81,686.273 1646.37,686.273 1646.93,686.273 1647.48,686.273 1648.04,686.273 1648.6,686.273 1649.16,686.273 1649.72,686.273 1650.28,686.273 1650.84,686.273 1651.4,686.273 1651.96,686.273 1652.52,686.273 1653.08,686.273 1653.64,686.273 1654.2,686.273 1654.76,686.273 1655.31,686.273 1655.87,686.273 1656.43,686.273 1656.99,686.273 1657.55,686.273 1658.11,686.273 1658.67,686.273 1659.23,686.273 1659.79,686.273 1660.35,686.273 1660.91,686.273 1661.47,686.273 1662.03,686.273 1662.58,686.273 1663.14,686.273 1663.7,686.273 1664.26,686.273 1664.82,686.273 1665.38,686.273 1665.94,686.273 1666.5,686.273 1667.06,686.273 1667.62,686.273 1668.18,686.273 1668.74,686.273 1669.3,686.273 1669.85,686.273 1670.41,686.273 1670.97,686.273 1671.53,686.273 1672.09,686.273 1672.65,686.273 1673.21,686.273 1673.77,686.273 1674.33,686.273 1674.89,686.273 1675.45,686.273 1676.01,686.273 1676.57,686.273 1677.13,686.273 1677.68,686.273 1678.24,686.273 1678.8,686.273 1679.36,686.273 1679.92,686.273 1680.48,686.273 1681.04,686.273 1681.6,686.273 1682.16,686.273 1682.72,686.273 1683.28,686.273 1683.84,686.273 1684.4,686.273 1684.95,686.273 1685.51,686.273 1686.07,686.273 1686.63,686.273 1687.19,686.273 1687.75,686.273 1688.31,686.273 1688.87,686.273 1689.43,686.273 1689.99,686.273 1690.55,686.273 1691.11,686.273 1691.67,686.273 1692.23,686.273 1692.78,686.273 1693.34,686.273 1693.9,686.273 1694.46,686.273 1695.02,686.273 1695.58,686.273 1696.14,686.273 1696.7,686.273 1697.26,686.273 1697.82,686.273 1698.38,686.273 1698.94,686.273 1699.5,686.273 1700.05,686.273 1700.61,686.273 1701.17,686.273 1701.73,686.273 1702.29,686.273 1702.85,686.273 1703.41,686.273 1703.97,686.273 1704.53,686.273 1705.09,686.273 1705.65,686.273 1706.21,686.273 1706.77,686.273 1707.32,686.273 1707.88,686.273 1708.44,686.273 1709,686.273 1709.56,686.273 1710.12,686.273 1710.68,686.273 1711.24,686.273 1711.8,686.273 1712.36,686.273 1712.92,686.273 1713.48,686.273 1714.04,686.273 1714.6,686.273 1715.15,686.273 1715.71,686.273 1716.27,686.273 1716.83,686.273 1717.39,686.273 1717.95,686.273 1718.51,686.273 1719.07,686.273 1719.63,686.273 1720.19,686.273 1720.75,686.273 1721.31,686.273 1721.87,686.273 1722.42,686.273 1722.98,686.273 1723.54,686.273 1724.1,686.273 1724.66,686.273 1725.22,686.273 1725.78,686.273 1726.34,686.273 1726.9,686.273 1727.46,686.273 1728.02,686.273 1728.58,686.273 1729.14,686.273 1729.69,686.273 1730.25,686.273 1730.81,686.273 1731.37,686.273 1731.93,686.273 1732.49,686.273 1733.05,686.273 1733.61,686.273 1734.17,686.273 1734.73,686.273 1735.29,686.273 1735.85,686.273 1736.41,686.273 1736.97,686.273 1737.52,686.273 1738.08,686.273 1738.64,686.273 1739.2,686.273 1739.76,686.273 1740.32,686.273 1740.88,686.273 1741.44,686.273 1742,686.273 1742.56,686.273 1743.12,686.273 1743.68,686.273 1744.24,686.273 1744.79,686.273 1745.35,686.273 1745.91,686.273 1746.47,686.273 1747.03,686.273 1747.59,686.273 1748.15,686.273 1748.71,686.273 1749.27,686.273 1749.83,686.273 1750.39,686.273 1750.95,686.273 1751.51,686.273 1752.06,686.273 1752.62,686.273 1753.18,686.273 1753.74,686.273 1754.3,686.273 1754.86,686.273 1755.42,686.273 1755.98,686.273 1756.54,686.273 1757.1,686.273 1757.66,686.273 1758.22,686.273 1758.78,686.273 1759.34,686.273 1759.89,686.273 1760.45,686.273 1761.01,686.273 1761.57,686.273 1762.13,686.273 1762.69,686.273 1763.25,686.273 1763.81,686.273 1764.37,686.273 1764.93,686.273 1765.49,686.273 1766.05,686.273 1766.61,686.273 1767.16,686.273 1767.72,686.273 1768.28,686.273 1768.84,686.273 1769.4,686.273 1769.96,686.273 1770.52,686.273 1771.08,686.273 1771.64,686.273 1772.2,686.273 1772.76,686.273 1773.32,686.273 1773.88,686.273 1774.43,686.273 1774.99,686.273 1775.55,686.273 1776.11,686.273 1776.67,686.273 1777.23,686.273 1777.79,686.273 1778.35,686.273 1778.91,686.273 1779.47,686.273 1780.03,686.273 1780.59,686.273 1781.15,686.273 1781.71,686.273 1782.26,686.273 1782.82,686.273 1783.38,686.273 1783.94,686.273 1784.5,686.273 1785.06,686.273 1785.62,686.273 1786.18,686.273 1786.74,686.273 1787.3,686.273 1787.86,686.273 1788.42,686.273 1788.98,686.273 1789.53,686.273 1790.09,686.273 1790.65,686.273 1791.21,686.273 1791.77,686.273 1792.33,686.273 1792.89,686.273 1793.45,686.273 1794.01,686.273 1794.57,686.273 1795.13,686.273 1795.69,686.273 1796.25,686.273 1796.8,686.273 1797.36,686.273 1797.92,686.273 1798.48,686.273 1799.04,686.273 1799.6,686.273 1800.16,686.273 1800.72,686.273 1801.28,686.273 1801.84,686.273 1802.4,686.273 1802.96,686.273 1803.52,686.273 1804.08,686.273 1804.63,686.273 1805.19,686.273 1805.75,686.273 1806.31,686.273 1806.87,686.273 1807.43,686.273 1807.99,686.273 1808.55,686.273 1809.11,686.273 1809.67,686.273 1810.23,686.273 1810.79,686.273 1811.35,686.273 1811.9,686.273 1812.46,686.273 1813.02,686.273 1813.58,686.273 1814.14,686.273 1814.7,686.273 1815.26,686.273 1815.82,686.273 1816.38,686.273 1816.94,686.273 1817.5,686.273 1818.06,686.273 1818.62,686.273 1819.18,686.273 1819.73,686.273 1820.29,686.273 1820.85,686.273 1821.41,686.273 1821.97,686.273 1822.53,686.273 1823.09,686.273 1823.65,686.273 1824.21,686.273 1824.77,686.273 1825.33,686.273 1825.89,686.273 1826.45,686.273 1827,686.273 1827.56,686.273 1828.12,686.273 1828.68,686.273 1829.24,686.273 1829.8,686.273 1830.36,686.273 1830.92,686.273 1831.48,686.273 1832.04,686.273 1832.6,686.273 1833.16,686.273 1833.72,686.273 1834.27,686.273 1834.83,686.273 1835.39,686.273 1835.95,686.273 1836.51,686.273 1837.07,686.273 1837.63,686.273 1838.19,686.273 \"/>\n<path clip-path=\"url(#clip463)\" d=\"M720.247 684.31 L720.806 684.31 L721.365 684.31 L721.924 684.31 L722.484 684.31 L723.043 684.31 L723.602 684.31 L724.161 684.31 L724.721 684.31 L725.28 684.31 L725.839 684.31 L726.398 684.31 L726.958 684.31 L727.517 684.31 L728.076 684.31 L728.635 684.31 L729.195 684.31 L729.754 684.31 L730.313 684.31 L730.872 684.31 L731.432 684.31 L731.991 684.31 L732.55 684.31 L733.109 684.31 L733.669 684.31 L734.228 684.31 L734.787 684.31 L735.346 684.31 L735.906 684.31 L736.465 684.31 L737.024 684.31 L737.583 684.31 L738.143 684.31 L738.702 684.31 L739.261 684.31 L739.82 684.31 L740.38 684.31 L740.939 684.31 L741.498 684.31 L742.057 684.31 L742.617 684.31 L743.176 684.31 L743.735 684.31 L744.294 684.31 L744.854 684.31 L745.413 684.31 L745.972 684.31 L746.531 684.31 L747.091 684.31 L747.65 684.31 L748.209 684.31 L748.768 684.31 L749.328 684.31 L749.887 684.31 L750.446 684.31 L751.005 684.31 L751.565 684.31 L752.124 684.31 L752.683 684.31 L753.242 684.31 L753.802 684.31 L754.361 684.31 L754.92 684.31 L755.479 684.31 L756.039 684.31 L756.598 684.31 L757.157 684.31 L757.716 684.31 L758.276 684.31 L758.835 684.31 L759.394 684.31 L759.953 684.31 L760.513 684.31 L761.072 684.31 L761.631 684.31 L762.19 684.31 L762.75 684.31 L763.309 684.31 L763.868 684.31 L764.427 684.31 L764.987 684.31 L765.546 684.31 L766.105 684.31 L766.664 684.31 L767.224 684.31 L767.783 684.31 L768.342 684.31 L768.901 684.31 L769.461 684.31 L770.02 684.31 L770.579 684.31 L771.138 684.31 L771.698 684.31 L772.257 684.31 L772.816 684.31 L773.375 684.31 L773.935 684.31 L774.494 684.31 L775.053 684.31 L775.612 684.31 L776.172 684.31 L776.731 684.31 L777.29 684.31 L777.849 684.31 L778.409 684.31 L778.968 684.31 L779.527 684.31 L780.086 684.31 L780.646 684.31 L781.205 684.31 L781.764 684.31 L782.323 684.31 L782.883 684.31 L783.442 684.31 L784.001 684.31 L784.56 684.31 L785.12 684.31 L785.679 684.31 L786.238 684.31 L786.797 684.31 L787.357 684.31 L787.916 684.31 L788.475 684.31 L789.034 684.31 L789.594 684.31 L790.153 684.31 L790.712 684.31 L791.271 684.31 L791.831 684.31 L792.39 684.31 L792.949 684.31 L793.508 684.31 L794.068 684.31 L794.627 684.31 L795.186 684.31 L795.745 684.31 L796.305 684.31 L796.864 684.31 L797.423 684.31 L797.982 684.31 L798.542 684.31 L799.101 684.31 L799.66 684.31 L800.219 684.31 L800.779 684.31 L801.338 684.31 L801.897 684.31 L802.456 684.31 L803.016 684.31 L803.575 684.31 L804.134 684.31 L804.693 684.31 L805.253 684.31 L805.812 684.31 L806.371 684.31 L806.931 684.31 L807.49 684.31 L808.049 684.31 L808.608 684.31 L809.168 684.31 L809.727 684.31 L810.286 684.31 L810.845 684.31 L811.405 684.31 L811.964 684.31 L812.523 684.31 L813.082 684.31 L813.642 684.31 L814.201 684.31 L814.76 684.31 L815.319 684.31 L815.879 684.31 L816.438 684.31 L816.997 684.31 L817.556 684.31 L818.116 684.31 L818.675 684.31 L819.234 684.31 L819.793 684.31 L820.353 684.31 L820.912 684.31 L821.471 684.31 L822.03 684.31 L822.59 684.31 L823.149 684.31 L823.708 684.31 L824.267 684.31 L824.827 684.31 L825.386 684.31 L825.945 684.31 L826.504 684.31 L827.064 684.31 L827.623 684.31 L828.182 684.31 L828.741 684.31 L829.301 684.31 L829.86 684.31 L830.419 684.31 L830.978 684.31 L831.538 684.31 L832.097 684.31 L832.656 684.31 L833.215 684.31 L833.775 684.31 L834.334 684.31 L834.893 684.31 L835.452 684.31 L836.012 684.31 L836.571 684.31 L837.13 684.31 L837.689 684.31 L838.249 684.31 L838.808 684.31 L839.367 684.31 L839.926 684.31 L840.486 684.31 L841.045 684.31 L841.604 684.31 L842.163 684.31 L842.723 684.31 L843.282 684.31 L843.841 684.31 L844.4 684.31 L844.96 684.31 L845.519 684.31 L846.078 684.31 L846.637 684.31 L847.197 684.31 L847.756 684.31 L848.315 684.31 L848.874 684.31 L849.434 684.31 L849.993 684.31 L850.552 684.31 L851.111 684.31 L851.671 684.31 L852.23 684.31 L852.789 684.31 L853.348 684.31 L853.908 684.31 L854.467 684.31 L855.026 684.31 L855.585 684.31 L856.145 684.31 L856.704 684.31 L857.263 684.31 L857.822 684.31 L858.382 684.31 L858.941 684.31 L859.5 684.31 L860.059 684.31 L860.619 684.31 L861.178 684.31 L861.737 684.31 L862.296 684.31 L862.856 684.31 L863.415 684.31 L863.974 684.31 L864.533 684.31 L865.093 684.31 L865.652 684.31 L866.211 684.31 L866.77 684.31 L867.33 684.31 L867.889 684.31 L868.448 684.31 L869.007 684.31 L869.567 684.31 L870.126 684.31 L870.685 684.31 L871.244 684.31 L871.804 684.31 L872.363 684.31 L872.922 684.31 L873.481 684.31 L874.041 684.31 L874.6 684.31 L875.159 684.31 L875.718 684.31 L876.278 684.31 L876.837 684.31 L877.396 684.31 L877.955 684.31 L878.515 684.31 L879.074 684.31 L879.633 684.31 L880.192 684.31 L880.752 684.31 L881.311 684.31 L881.87 684.31 L882.429 684.31 L882.989 684.31 L883.548 684.31 L884.107 684.31 L884.666 684.31 L885.226 684.31 L885.785 684.31 L886.344 684.31 L886.903 684.31 L887.463 684.31 L888.022 684.31 L888.581 684.31 L889.14 684.31 L889.7 684.31 L890.259 684.31 L890.818 684.31 L891.377 684.31 L891.937 684.31 L892.496 684.31 L893.055 684.31 L893.614 684.31 L894.174 684.31 L894.733 684.31 L895.292 684.31 L895.851 684.31 L896.411 684.31 L896.97 684.31 L897.529 684.31 L898.088 684.31 L898.648 684.31 L899.207 684.31 L899.766 684.31 L900.325 684.31 L900.885 684.31 L901.444 684.31 L902.003 684.31 L902.562 684.31 L903.122 684.31 L903.681 684.31 L904.24 684.31 L904.799 684.31 L905.359 684.31 L905.918 684.31 L906.477 684.31 L907.036 684.31 L907.596 684.31 L908.155 684.31 L908.714 684.31 L909.273 684.31 L909.833 684.31 L910.392 684.31 L910.951 684.31 L911.51 684.31 L912.07 684.31 L912.629 684.31 L913.188 684.31 L913.747 684.31 L914.307 684.31 L914.866 684.31 L915.425 684.31 L915.984 684.31 L916.544 684.31 L917.103 684.31 L917.662 684.31 L918.221 684.31 L918.781 684.31 L919.34 684.31 L919.899 684.31 L920.458 684.31 L921.018 684.31 L921.577 684.31 L922.136 684.31 L922.695 684.31 L923.255 684.31 L923.814 684.31 L924.373 684.31 L924.932 684.31 L925.492 684.31 L926.051 684.31 L926.61 684.31 L927.169 684.31 L927.729 684.31 L928.288 684.31 L928.847 684.31 L929.406 684.31 L929.966 684.31 L930.525 684.31 L931.084 684.31 L931.644 684.31 L932.203 684.31 L932.762 684.31 L933.321 684.31 L933.881 684.31 L934.44 684.31 L934.999 684.31 L935.558 684.31 L936.118 684.31 L936.677 684.31 L937.236 684.31 L937.795 684.31 L938.355 684.31 L938.914 684.31 L939.473 684.31 L940.032 684.31 L940.592 684.31 L941.151 684.31 L941.71 684.31 L942.269 684.31 L942.829 684.31 L943.388 684.31 L943.947 684.31 L944.506 684.31 L945.066 684.31 L945.625 684.31 L946.184 684.31 L946.743 684.31 L947.303 684.31 L947.862 684.31 L948.421 684.31 L948.98 684.31 L949.54 684.31 L950.099 684.31 L950.658 684.31 L951.217 684.31 L951.777 684.31 L952.336 684.31 L952.895 684.31 L953.454 684.31 L954.014 684.31 L954.573 684.31 L955.132 684.31 L955.691 684.31 L956.251 684.31 L956.81 684.31 L957.369 684.31 L957.928 684.31 L958.488 684.31 L959.047 684.31 L959.606 684.31 L960.165 684.31 L960.725 684.31 L961.284 684.31 L961.843 684.31 L962.402 684.31 L962.962 684.31 L963.521 684.31 L964.08 684.31 L964.639 684.31 L965.199 684.31 L965.758 684.31 L966.317 684.31 L966.876 684.31 L967.436 684.31 L967.995 684.31 L968.554 684.31 L969.113 684.31 L969.673 684.31 L970.232 684.31 L970.791 684.31 L971.35 684.31 L971.91 684.31 L972.469 684.31 L973.028 684.31 L973.587 684.31 L974.147 684.31 L974.706 684.31 L975.265 684.31 L975.824 684.31 L976.384 684.31 L976.943 684.31 L977.502 684.31 L978.061 684.31 L978.621 684.31 L979.18 684.31 L979.739 684.31 L980.298 684.31 L980.858 684.31 L981.417 684.31 L981.976 684.31 L982.535 684.31 L983.095 684.31 L983.654 684.31 L984.213 684.31 L984.772 684.31 L985.332 684.31 L985.891 684.31 L986.45 684.31 L987.009 684.31 L987.569 684.31 L988.128 684.31 L988.687 684.31 L989.246 684.31 L989.806 684.31 L990.365 684.31 L990.924 684.31 L991.483 684.31 L992.043 684.31 L992.602 684.31 L993.161 684.31 L993.72 684.31 L994.28 684.31 L994.839 684.31 L995.398 684.31 L995.957 684.31 L996.517 684.31 L997.076 684.31 L997.635 684.31 L998.194 684.31 L998.754 684.31 L999.313 684.31 L999.872 684.31 L1000.43 684.31 L1000.99 684.31 L1001.55 684.31 L1002.11 684.31 L1002.67 684.31 L1003.23 684.31 L1003.79 684.31 L1004.35 684.31 L1004.91 684.31 L1005.46 684.31 L1006.02 684.31 L1006.58 684.31 L1007.14 684.31 L1007.7 684.31 L1008.26 684.31 L1008.82 684.31 L1009.38 684.31 L1009.94 684.31 L1010.5 684.31 L1011.06 684.31 L1011.62 684.31 L1012.18 684.31 L1012.73 684.31 L1013.29 684.31 L1013.85 684.31 L1014.41 684.31 L1014.97 684.31 L1015.53 684.31 L1016.09 684.31 L1016.65 684.31 L1017.21 684.31 L1017.77 684.31 L1018.33 684.31 L1018.89 684.31 L1019.45 684.31 L1020.01 684.31 L1020.56 684.31 L1021.12 684.31 L1021.68 684.31 L1022.24 684.31 L1022.8 684.31 L1023.36 684.31 L1023.92 684.31 L1024.48 684.31 L1025.04 684.31 L1025.6 684.31 L1026.16 684.31 L1026.72 684.31 L1027.28 684.31 L1027.83 684.31 L1028.39 684.31 L1028.95 684.31 L1029.51 684.31 L1030.07 684.31 L1030.63 684.31 L1031.19 684.31 L1031.75 684.31 L1032.31 684.31 L1032.87 684.31 L1033.43 684.31 L1033.99 684.31 L1034.55 684.31 L1035.1 684.31 L1035.66 684.31 L1036.22 684.31 L1036.78 684.31 L1037.34 684.31 L1037.9 684.31 L1038.46 684.31 L1039.02 684.31 L1039.58 684.31 L1040.14 684.31 L1040.7 684.31 L1041.26 684.31 L1041.82 684.31 L1042.38 684.31 L1042.93 684.31 L1043.49 684.31 L1044.05 684.31 L1044.61 684.31 L1045.17 684.31 L1045.73 684.31 L1046.29 684.31 L1046.85 684.31 L1047.41 684.31 L1047.97 684.31 L1048.53 684.31 L1049.09 684.31 L1049.65 684.31 L1050.2 684.31 L1050.76 684.31 L1051.32 684.31 L1051.88 684.31 L1052.44 684.31 L1053 684.31 L1053.56 684.31 L1054.12 684.31 L1054.68 684.31 L1055.24 684.31 L1055.8 684.31 L1056.36 684.31 L1056.92 684.31 L1057.48 684.31 L1058.03 684.31 L1058.59 684.31 L1059.15 684.31 L1059.71 684.31 L1060.27 684.31 L1060.83 684.31 L1061.39 684.31 L1061.95 684.31 L1062.51 684.31 L1063.07 684.31 L1063.63 684.31 L1064.19 684.31 L1064.75 684.31 L1065.3 684.31 L1065.86 684.31 L1066.42 684.31 L1066.98 684.31 L1067.54 684.31 L1068.1 684.31 L1068.66 684.31 L1069.22 684.31 L1069.78 684.31 L1070.34 684.31 L1070.9 684.31 L1071.46 684.31 L1072.02 684.31 L1072.57 684.31 L1073.13 684.31 L1073.69 684.31 L1074.25 684.31 L1074.81 684.31 L1075.37 684.31 L1075.93 684.31 L1076.49 684.31 L1077.05 684.31 L1077.61 684.31 L1078.17 684.31 L1078.73 684.31 L1079.29 684.31 L1079.85 684.31 L1080.4 684.31 L1080.96 684.31 L1081.52 684.31 L1082.08 684.31 L1082.64 684.31 L1083.2 684.31 L1083.76 684.31 L1084.32 684.31 L1084.88 684.31 L1085.44 684.31 L1086 684.31 L1086.56 684.31 L1087.12 684.31 L1087.67 684.31 L1088.23 684.31 L1088.79 684.31 L1089.35 684.31 L1089.91 684.31 L1090.47 684.31 L1091.03 684.31 L1091.59 684.31 L1092.15 684.31 L1092.71 684.31 L1093.27 684.31 L1093.83 684.31 L1094.39 684.31 L1094.94 684.31 L1095.5 684.31 L1096.06 684.31 L1096.62 684.31 L1097.18 684.31 L1097.74 684.31 L1098.3 684.31 L1098.86 684.31 L1099.42 684.31 L1099.98 684.31 L1100.54 684.31 L1101.1 684.31 L1101.66 684.31 L1102.22 684.31 L1102.77 684.31 L1103.33 684.31 L1103.89 684.31 L1104.45 684.31 L1105.01 684.31 L1105.57 684.31 L1106.13 684.31 L1106.69 684.31 L1107.25 684.31 L1107.81 684.31 L1108.37 684.31 L1108.93 684.31 L1109.49 684.31 L1110.04 684.31 L1110.6 684.31 L1111.16 684.31 L1111.72 684.31 L1112.28 684.31 L1112.84 684.31 L1113.4 684.31 L1113.96 684.31 L1114.52 684.31 L1115.08 684.31 L1115.64 684.31 L1116.2 684.31 L1116.76 684.31 L1117.31 684.31 L1117.87 684.31 L1118.43 684.31 L1118.99 684.31 L1119.55 684.31 L1120.11 684.31 L1120.67 684.31 L1121.23 684.31 L1121.79 684.31 L1122.35 684.31 L1122.91 684.31 L1123.47 684.31 L1124.03 684.31 L1124.59 684.31 L1125.14 684.31 L1125.7 684.31 L1126.26 684.31 L1126.82 684.31 L1127.38 684.31 L1127.94 684.31 L1128.5 684.31 L1129.06 684.31 L1129.62 684.31 L1130.18 684.31 L1130.74 684.31 L1131.3 684.31 L1131.86 684.31 L1132.41 684.31 L1132.97 684.31 L1133.53 684.31 L1134.09 684.31 L1134.65 684.31 L1135.21 684.31 L1135.77 684.31 L1136.33 684.31 L1136.89 684.31 L1137.45 684.31 L1138.01 684.31 L1138.57 684.31 L1139.13 684.31 L1139.68 684.31 L1140.24 684.31 L1140.8 684.31 L1141.36 684.31 L1141.92 684.31 L1142.48 684.31 L1143.04 684.31 L1143.6 684.31 L1144.16 684.31 L1144.72 684.31 L1145.28 684.31 L1145.84 684.31 L1146.4 684.31 L1146.96 684.31 L1147.51 684.31 L1148.07 684.31 L1148.63 684.31 L1149.19 684.31 L1149.75 684.31 L1150.31 684.31 L1150.87 684.31 L1151.43 684.31 L1151.99 684.31 L1152.55 684.31 L1153.11 684.31 L1153.67 684.31 L1154.23 684.31 L1154.78 684.31 L1155.34 684.31 L1155.9 684.31 L1156.46 684.31 L1157.02 684.31 L1157.58 684.31 L1158.14 684.31 L1158.7 684.31 L1159.26 684.31 L1159.82 684.31 L1160.38 684.31 L1160.94 684.31 L1161.5 684.31 L1162.05 684.31 L1162.61 684.31 L1163.17 684.31 L1163.73 684.31 L1164.29 684.31 L1164.85 684.31 L1165.41 684.31 L1165.97 684.31 L1166.53 684.31 L1167.09 684.31 L1167.65 684.31 L1168.21 684.31 L1168.77 684.31 L1169.33 684.31 L1169.88 684.31 L1170.44 684.31 L1171 684.31 L1171.56 684.31 L1172.12 684.31 L1172.68 684.31 L1173.24 684.31 L1173.8 684.31 L1174.36 684.31 L1174.92 684.31 L1175.48 684.31 L1176.04 684.31 L1176.6 684.31 L1177.15 684.31 L1177.71 684.31 L1178.27 684.31 L1178.83 684.31 L1179.39 684.31 L1179.95 684.31 L1180.51 684.31 L1181.07 684.31 L1181.63 684.31 L1182.19 684.31 L1182.75 684.31 L1183.31 684.31 L1183.87 684.31 L1184.43 684.31 L1184.98 684.31 L1185.54 684.31 L1186.1 684.31 L1186.66 684.31 L1187.22 684.31 L1187.78 684.31 L1188.34 684.31 L1188.9 684.31 L1189.46 684.31 L1190.02 684.31 L1190.58 684.31 L1191.14 684.31 L1191.7 684.31 L1192.25 684.31 L1192.81 684.31 L1193.37 684.31 L1193.93 684.31 L1194.49 684.31 L1195.05 684.31 L1195.61 684.31 L1196.17 684.31 L1196.73 684.31 L1197.29 684.31 L1197.85 684.31 L1198.41 684.31 L1198.97 684.31 L1199.52 684.31 L1200.08 684.31 L1200.64 684.31 L1201.2 684.31 L1201.76 684.31 L1202.32 684.31 L1202.88 684.31 L1203.44 684.31 L1204 684.31 L1204.56 684.31 L1205.12 684.31 L1205.68 684.31 L1206.24 684.31 L1206.8 684.31 L1207.35 684.31 L1207.91 684.31 L1208.47 684.31 L1209.03 684.31 L1209.59 684.31 L1210.15 684.31 L1210.71 684.31 L1211.27 684.31 L1211.83 684.31 L1212.39 684.31 L1212.95 684.31 L1213.51 684.31 L1214.07 684.31 L1214.62 684.31 L1215.18 684.31 L1215.74 684.31 L1216.3 684.31 L1216.86 684.31 L1217.42 684.31 L1217.98 684.31 L1218.54 684.31 L1219.1 684.31 L1219.66 684.31 L1220.22 684.31 L1220.78 684.31 L1221.34 684.31 L1221.89 684.31 L1222.45 684.31 L1223.01 684.31 L1223.57 684.31 L1224.13 684.31 L1224.69 684.31 L1225.25 684.31 L1225.81 684.31 L1226.37 684.31 L1226.93 684.31 L1227.49 684.31 L1228.05 684.31 L1228.61 684.31 L1229.17 684.31 L1229.72 684.31 L1230.28 684.31 L1230.84 684.31 L1231.4 684.31 L1231.96 684.31 L1232.52 684.31 L1233.08 684.31 L1233.64 684.31 L1234.2 684.31 L1234.76 684.31 L1235.32 684.31 L1235.88 684.31 L1236.44 684.31 L1236.99 684.31 L1237.55 684.31 L1238.11 684.31 L1238.67 684.31 L1239.23 684.31 L1239.79 684.31 L1240.35 684.31 L1240.91 684.31 L1241.47 684.31 L1242.03 684.31 L1242.59 684.31 L1243.15 684.31 L1243.71 684.31 L1244.26 684.31 L1244.82 684.31 L1245.38 684.31 L1245.94 684.31 L1246.5 684.31 L1247.06 684.31 L1247.62 684.31 L1248.18 684.31 L1248.74 684.31 L1249.3 684.31 L1249.86 684.31 L1250.42 684.31 L1250.98 684.31 L1251.54 684.31 L1252.09 684.31 L1252.65 684.31 L1253.21 684.31 L1253.77 684.31 L1254.33 684.31 L1254.89 684.31 L1255.45 684.31 L1256.01 684.31 L1256.57 684.31 L1257.13 684.31 L1257.69 684.31 L1258.25 684.31 L1258.81 684.31 L1259.36 684.31 L1259.92 684.31 L1260.48 684.31 L1261.04 684.31 L1261.6 684.31 L1262.16 684.31 L1262.72 684.31 L1263.28 684.31 L1263.84 684.31 L1264.4 684.31 L1264.96 684.31 L1265.52 684.31 L1266.08 684.31 L1266.63 684.31 L1267.19 684.31 L1267.75 684.31 L1268.31 684.31 L1268.87 684.31 L1269.43 684.31 L1269.99 684.31 L1270.55 684.31 L1271.11 684.31 L1271.67 684.31 L1272.23 684.31 L1272.79 684.31 L1273.35 684.31 L1273.91 684.31 L1274.46 684.31 L1275.02 684.31 L1275.58 684.31 L1276.14 684.31 L1276.7 684.31 L1277.26 684.31 L1277.82 684.31 L1278.38 684.31 L1278.94 684.31 L1279.5 684.31 L1280.06 684.31 L1280.62 684.31 L1281.18 684.31 L1281.73 684.31 L1282.29 684.31 L1282.85 684.31 L1283.41 684.31 L1283.97 684.31 L1284.53 684.31 L1285.09 684.31 L1285.65 684.31 L1286.21 684.31 L1286.77 684.31 L1287.33 684.31 L1287.89 684.31 L1288.45 684.31 L1289 684.31 L1289.56 684.31 L1290.12 684.31 L1290.68 684.31 L1291.24 684.31 L1291.8 684.31 L1292.36 684.31 L1292.92 684.31 L1293.48 684.31 L1294.04 684.31 L1294.6 684.31 L1295.16 684.31 L1295.72 684.31 L1296.28 684.31 L1296.83 684.31 L1297.39 684.31 L1297.95 684.31 L1298.51 684.31 L1299.07 684.31 L1299.63 684.31 L1300.19 684.31 L1300.75 684.31 L1301.31 684.31 L1301.87 684.31 L1302.43 684.31 L1302.99 684.31 L1303.55 684.31 L1304.1 684.31 L1304.66 684.31 L1305.22 684.31 L1305.78 684.31 L1306.34 684.31 L1306.9 684.31 L1307.46 684.31 L1308.02 684.31 L1308.58 684.31 L1309.14 684.31 L1309.7 684.31 L1310.26 684.31 L1310.82 684.31 L1311.38 684.31 L1311.93 684.31 L1312.49 684.31 L1313.05 684.31 L1313.61 684.31 L1314.17 684.31 L1314.73 684.31 L1315.29 684.31 L1315.85 684.31 L1316.41 684.31 L1316.97 684.31 L1317.53 684.31 L1318.09 684.31 L1318.65 684.31 L1319.2 684.31 L1319.76 684.31 L1320.32 684.31 L1320.88 684.31 L1321.44 684.31 L1322 684.31 L1322.56 684.31 L1323.12 684.31 L1323.68 684.31 L1324.24 684.31 L1324.8 684.31 L1325.36 684.31 L1325.92 684.31 L1326.47 684.31 L1327.03 684.31 L1327.59 684.31 L1328.15 684.31 L1328.71 684.31 L1329.27 684.31 L1329.83 684.31 L1330.39 684.31 L1330.95 684.31 L1331.51 684.31 L1332.07 684.31 L1332.63 684.31 L1333.19 684.31 L1333.75 684.31 L1334.3 684.31 L1334.86 684.31 L1335.42 684.31 L1335.98 684.31 L1336.54 684.31 L1337.1 684.31 L1337.66 684.31 L1338.22 684.31 L1338.78 684.31 L1339.34 684.31 L1339.9 684.31 L1340.46 684.31 L1341.02 684.31 L1341.57 684.31 L1342.13 684.31 L1342.69 684.31 L1343.25 684.31 L1343.81 684.31 L1344.37 684.31 L1344.93 684.31 L1345.49 684.31 L1346.05 684.31 L1346.61 684.31 L1347.17 684.31 L1347.73 684.31 L1348.29 684.31 L1348.84 684.31 L1349.4 684.31 L1349.96 684.31 L1350.52 684.31 L1351.08 684.31 L1351.64 684.31 L1352.2 684.31 L1352.76 684.31 L1353.32 684.31 L1353.88 684.31 L1354.44 684.31 L1355 684.31 L1355.56 684.31 L1356.12 684.31 L1356.67 684.31 L1357.23 684.31 L1357.79 684.31 L1358.35 684.31 L1358.91 684.31 L1359.47 684.31 L1360.03 684.31 L1360.59 684.31 L1361.15 684.31 L1361.71 684.31 L1362.27 684.31 L1362.83 684.31 L1363.39 684.31 L1363.94 684.31 L1364.5 684.31 L1365.06 684.31 L1365.62 684.31 L1366.18 684.31 L1366.74 684.31 L1367.3 684.31 L1367.86 684.31 L1368.42 684.31 L1368.98 684.31 L1369.54 684.31 L1370.1 684.31 L1370.66 684.31 L1371.21 684.31 L1371.77 684.31 L1372.33 684.31 L1372.89 684.31 L1373.45 684.31 L1374.01 684.31 L1374.57 684.31 L1375.13 684.31 L1375.69 684.31 L1376.25 684.31 L1376.81 684.31 L1377.37 684.31 L1377.93 684.31 L1378.49 684.31 L1379.04 684.31 L1379.6 684.31 L1380.16 684.31 L1380.72 684.31 L1381.28 684.31 L1381.84 684.31 L1382.4 684.31 L1382.96 684.31 L1383.52 684.31 L1384.08 684.31 L1384.64 684.31 L1385.2 684.31 L1385.76 684.31 L1386.31 684.31 L1386.87 684.31 L1387.43 684.31 L1387.99 684.31 L1388.55 684.31 L1389.11 684.31 L1389.67 684.31 L1390.23 684.31 L1390.79 684.31 L1391.35 684.31 L1391.91 684.31 L1392.47 684.31 L1393.03 684.31 L1393.58 684.31 L1394.14 684.31 L1394.7 684.31 L1395.26 684.31 L1395.82 684.31 L1396.38 684.31 L1396.94 684.31 L1397.5 684.31 L1398.06 684.31 L1398.62 684.31 L1399.18 684.31 L1399.74 684.31 L1400.3 684.31 L1400.86 684.31 L1401.41 684.31 L1401.97 684.31 L1402.53 684.31 L1403.09 684.31 L1403.65 684.31 L1404.21 684.31 L1404.77 684.31 L1405.33 684.31 L1405.89 684.31 L1406.45 684.31 L1407.01 684.31 L1407.57 684.31 L1408.13 684.31 L1408.68 684.31 L1409.24 684.31 L1409.8 684.31 L1410.36 684.31 L1410.92 684.31 L1411.48 684.31 L1412.04 684.31 L1412.6 684.31 L1413.16 684.31 L1413.72 684.31 L1414.28 684.31 L1414.84 684.31 L1415.4 684.31 L1415.95 684.31 L1416.51 684.31 L1417.07 684.31 L1417.63 684.31 L1418.19 684.31 L1418.75 684.31 L1419.31 684.31 L1419.87 684.31 L1420.43 684.31 L1420.99 684.31 L1421.55 684.31 L1422.11 684.31 L1422.67 684.31 L1423.23 684.31 L1423.78 684.31 L1424.34 684.31 L1424.9 684.31 L1425.46 684.31 L1426.02 684.31 L1426.58 684.31 L1427.14 684.31 L1427.7 684.31 L1428.26 684.31 L1428.82 684.31 L1429.38 684.31 L1429.94 684.31 L1430.5 684.31 L1431.05 684.31 L1431.61 684.31 L1432.17 684.31 L1432.73 684.31 L1433.29 684.31 L1433.85 684.31 L1434.41 684.31 L1434.97 684.31 L1435.53 684.31 L1436.09 684.31 L1436.65 684.31 L1437.21 684.31 L1437.77 684.31 L1438.33 684.31 L1438.88 684.31 L1439.44 684.31 L1440 684.31 L1440.56 684.31 L1441.12 684.31 L1441.68 684.31 L1442.24 684.31 L1442.8 684.31 L1443.36 684.31 L1443.92 684.31 L1444.48 684.31 L1445.04 684.31 L1445.6 684.31 L1446.15 684.31 L1446.71 684.31 L1447.27 684.31 L1447.83 684.31 L1448.39 684.31 L1448.95 684.31 L1449.51 684.31 L1450.07 684.31 L1450.63 684.31 L1451.19 684.31 L1451.75 684.31 L1452.31 684.31 L1452.87 684.31 L1453.42 684.31 L1453.98 684.31 L1454.54 684.31 L1455.1 684.31 L1455.66 684.31 L1456.22 684.31 L1456.78 684.31 L1457.34 684.31 L1457.9 684.31 L1458.46 684.31 L1459.02 684.31 L1459.58 684.31 L1460.14 684.31 L1460.7 684.31 L1461.25 684.31 L1461.81 684.31 L1462.37 684.31 L1462.93 684.31 L1463.49 684.31 L1464.05 684.31 L1464.61 684.31 L1465.17 684.31 L1465.73 684.31 L1466.29 684.31 L1466.85 684.31 L1467.41 684.31 L1467.97 684.31 L1468.52 684.31 L1469.08 684.31 L1469.64 684.31 L1470.2 684.31 L1470.76 684.31 L1471.32 684.31 L1471.88 684.31 L1472.44 684.31 L1473 684.31 L1473.56 684.31 L1474.12 684.31 L1474.68 684.31 L1475.24 684.31 L1475.79 684.31 L1476.35 684.31 L1476.91 684.31 L1477.47 684.31 L1478.03 684.31 L1478.59 684.31 L1479.15 684.31 L1479.71 684.31 L1480.27 684.31 L1480.83 684.31 L1481.39 684.31 L1481.95 684.31 L1482.51 684.31 L1483.07 684.31 L1483.62 684.31 L1484.18 684.31 L1484.74 684.31 L1485.3 684.31 L1485.86 684.31 L1486.42 684.31 L1486.98 684.31 L1487.54 684.31 L1488.1 684.31 L1488.66 684.31 L1489.22 684.31 L1489.78 684.31 L1490.34 684.31 L1490.89 684.31 L1491.45 684.31 L1492.01 684.31 L1492.57 684.31 L1493.13 684.31 L1493.69 684.31 L1494.25 684.31 L1494.81 684.31 L1495.37 684.31 L1495.93 684.31 L1496.49 684.31 L1497.05 684.31 L1497.61 684.31 L1498.16 684.31 L1498.72 684.31 L1499.28 684.31 L1499.84 684.31 L1500.4 684.31 L1500.96 684.31 L1501.52 684.31 L1502.08 684.31 L1502.64 684.31 L1503.2 684.31 L1503.76 684.31 L1504.32 684.31 L1504.88 684.31 L1505.44 684.31 L1505.99 684.31 L1506.55 684.31 L1507.11 684.31 L1507.67 684.31 L1508.23 684.31 L1508.79 684.31 L1509.35 684.31 L1509.91 684.31 L1510.47 684.31 L1511.03 684.31 L1511.59 684.31 L1512.15 684.31 L1512.71 684.31 L1513.26 684.31 L1513.82 684.31 L1514.38 684.31 L1514.94 684.31 L1515.5 684.31 L1516.06 684.31 L1516.62 684.31 L1517.18 684.31 L1517.74 684.31 L1518.3 684.31 L1518.86 684.31 L1519.42 684.31 L1519.98 684.31 L1520.53 684.31 L1521.09 684.31 L1521.65 684.31 L1522.21 684.31 L1522.77 684.31 L1523.33 684.31 L1523.89 684.31 L1524.45 684.31 L1525.01 684.31 L1525.57 684.31 L1526.13 684.31 L1526.69 684.31 L1527.25 684.31 L1527.81 684.31 L1528.36 684.31 L1528.92 684.31 L1529.48 684.31 L1530.04 684.31 L1530.6 684.31 L1531.16 684.31 L1531.72 684.31 L1532.28 684.31 L1532.84 684.31 L1533.4 684.31 L1533.96 684.31 L1534.52 684.31 L1535.08 684.31 L1535.63 684.31 L1536.19 684.31 L1536.75 684.31 L1537.31 684.31 L1537.87 684.31 L1538.43 684.31 L1538.99 684.31 L1539.55 684.31 L1540.11 684.31 L1540.67 684.31 L1541.23 684.31 L1541.79 684.31 L1542.35 684.31 L1542.9 684.31 L1543.46 684.31 L1544.02 684.31 L1544.58 684.31 L1545.14 684.31 L1545.7 684.31 L1546.26 684.31 L1546.82 684.31 L1547.38 684.31 L1547.94 684.31 L1548.5 684.31 L1549.06 684.31 L1549.62 684.31 L1550.18 684.31 L1550.73 684.31 L1551.29 684.31 L1551.85 684.31 L1552.41 684.31 L1552.97 684.31 L1553.53 684.31 L1554.09 684.31 L1554.65 684.31 L1555.21 684.31 L1555.77 684.31 L1556.33 684.31 L1556.89 684.31 L1557.45 684.31 L1558 684.31 L1558.56 684.31 L1559.12 684.31 L1559.68 684.31 L1560.24 684.31 L1560.8 684.31 L1561.36 684.31 L1561.92 684.31 L1562.48 684.31 L1563.04 684.31 L1563.6 684.31 L1564.16 684.31 L1564.72 684.31 L1565.28 684.31 L1565.83 684.31 L1566.39 684.31 L1566.95 684.31 L1567.51 684.31 L1568.07 684.31 L1568.63 684.31 L1569.19 684.31 L1569.75 684.31 L1570.31 684.31 L1570.87 684.31 L1571.43 684.31 L1571.99 684.31 L1572.55 684.31 L1573.1 684.31 L1573.66 684.31 L1574.22 684.31 L1574.78 684.31 L1575.34 684.31 L1575.9 684.31 L1576.46 684.31 L1577.02 684.31 L1577.58 684.31 L1578.14 684.31 L1578.7 684.31 L1579.26 684.31 L1579.82 684.31 L1580.37 684.31 L1580.93 684.31 L1581.49 684.31 L1582.05 684.31 L1582.61 684.31 L1583.17 684.31 L1583.73 684.31 L1584.29 684.31 L1584.85 684.31 L1585.41 684.31 L1585.97 684.31 L1586.53 684.31 L1587.09 684.31 L1587.65 684.31 L1588.2 684.31 L1588.76 684.31 L1589.32 684.31 L1589.88 684.31 L1590.44 684.31 L1591 684.31 L1591.56 684.31 L1592.12 684.31 L1592.68 684.31 L1593.24 684.31 L1593.8 684.31 L1594.36 684.31 L1594.92 684.31 L1595.47 684.31 L1596.03 684.31 L1596.59 684.31 L1597.15 684.31 L1597.71 684.31 L1598.27 684.31 L1598.83 684.31 L1599.39 684.31 L1599.95 684.31 L1600.51 684.31 L1601.07 684.31 L1601.63 684.31 L1602.19 684.31 L1602.74 684.31 L1603.3 684.31 L1603.86 684.31 L1604.42 684.31 L1604.98 684.31 L1605.54 684.31 L1606.1 684.31 L1606.66 684.31 L1607.22 684.31 L1607.78 684.31 L1608.34 684.31 L1608.9 684.31 L1609.46 684.31 L1610.02 684.31 L1610.57 684.31 L1611.13 684.31 L1611.69 684.31 L1612.25 684.31 L1612.81 684.31 L1613.37 684.31 L1613.93 684.31 L1614.49 684.31 L1615.05 684.31 L1615.61 684.31 L1616.17 684.31 L1616.73 684.31 L1617.29 684.31 L1617.84 684.31 L1618.4 684.31 L1618.96 684.31 L1619.52 684.31 L1620.08 684.31 L1620.64 684.31 L1621.2 684.31 L1621.76 684.31 L1622.32 684.31 L1622.88 684.31 L1623.44 684.31 L1624 684.31 L1624.56 684.31 L1625.11 684.31 L1625.67 684.31 L1626.23 684.31 L1626.79 684.31 L1627.35 684.31 L1627.91 684.31 L1628.47 684.31 L1629.03 684.31 L1629.59 684.31 L1630.15 684.31 L1630.71 684.31 L1631.27 684.31 L1631.83 684.31 L1632.39 684.31 L1632.94 684.31 L1633.5 684.31 L1634.06 684.31 L1634.62 684.31 L1635.18 684.31 L1635.74 684.31 L1636.3 684.31 L1636.86 684.31 L1637.42 684.31 L1637.98 684.31 L1638.54 684.31 L1639.1 684.31 L1639.66 684.31 L1640.21 684.31 L1640.77 684.31 L1641.33 684.31 L1641.89 684.31 L1642.45 684.31 L1643.01 684.31 L1643.57 684.31 L1644.13 684.31 L1644.69 684.31 L1645.25 684.31 L1645.81 684.31 L1646.37 684.31 L1646.93 684.31 L1647.48 684.31 L1648.04 684.31 L1648.6 684.31 L1649.16 684.31 L1649.72 684.31 L1650.28 684.31 L1650.84 684.31 L1651.4 684.31 L1651.96 684.31 L1652.52 684.31 L1653.08 684.31 L1653.64 684.31 L1654.2 684.31 L1654.76 684.31 L1655.31 684.31 L1655.87 684.31 L1656.43 684.31 L1656.99 684.31 L1657.55 684.31 L1658.11 684.31 L1658.67 684.31 L1659.23 684.31 L1659.79 684.31 L1660.35 684.31 L1660.91 684.31 L1661.47 684.31 L1662.03 684.31 L1662.58 684.31 L1663.14 684.31 L1663.7 684.31 L1664.26 684.31 L1664.82 684.31 L1665.38 684.31 L1665.94 684.31 L1666.5 684.31 L1667.06 684.31 L1667.62 684.31 L1668.18 684.31 L1668.74 684.31 L1669.3 684.31 L1669.85 684.31 L1670.41 684.31 L1670.97 684.31 L1671.53 684.31 L1672.09 684.31 L1672.65 684.31 L1673.21 684.31 L1673.77 684.31 L1674.33 684.31 L1674.89 684.31 L1675.45 684.31 L1676.01 684.31 L1676.57 684.31 L1677.13 684.31 L1677.68 684.31 L1678.24 684.31 L1678.8 684.31 L1679.36 684.31 L1679.92 684.31 L1680.48 684.31 L1681.04 684.31 L1681.6 684.31 L1682.16 684.31 L1682.72 684.31 L1683.28 684.31 L1683.84 684.31 L1684.4 684.31 L1684.95 684.31 L1685.51 684.31 L1686.07 684.31 L1686.63 684.31 L1687.19 684.31 L1687.75 684.31 L1688.31 684.31 L1688.87 684.31 L1689.43 684.31 L1689.99 684.31 L1690.55 684.31 L1691.11 684.31 L1691.67 684.31 L1692.23 684.31 L1692.78 684.31 L1693.34 684.31 L1693.9 684.31 L1694.46 684.31 L1695.02 684.31 L1695.58 684.31 L1696.14 684.31 L1696.7 684.31 L1697.26 684.31 L1697.82 684.31 L1698.38 684.31 L1698.94 684.31 L1699.5 684.31 L1700.05 684.31 L1700.61 684.31 L1701.17 684.31 L1701.73 684.31 L1702.29 684.31 L1702.85 684.31 L1703.41 684.31 L1703.97 684.31 L1704.53 684.31 L1705.09 684.31 L1705.65 684.31 L1706.21 684.31 L1706.77 684.31 L1707.32 684.31 L1707.88 684.31 L1708.44 684.31 L1709 684.31 L1709.56 684.31 L1710.12 684.31 L1710.68 684.31 L1711.24 684.31 L1711.8 684.31 L1712.36 684.31 L1712.92 684.31 L1713.48 684.31 L1714.04 684.31 L1714.6 684.31 L1715.15 684.31 L1715.71 684.31 L1716.27 684.31 L1716.83 684.31 L1717.39 684.31 L1717.95 684.31 L1718.51 684.31 L1719.07 684.31 L1719.63 684.31 L1720.19 684.31 L1720.75 684.31 L1721.31 684.31 L1721.87 684.31 L1722.42 684.31 L1722.98 684.31 L1723.54 684.31 L1724.1 684.31 L1724.66 684.31 L1725.22 684.31 L1725.78 684.31 L1726.34 684.31 L1726.9 684.31 L1727.46 684.31 L1728.02 684.31 L1728.58 684.31 L1729.14 684.31 L1729.69 684.31 L1730.25 684.31 L1730.81 684.31 L1731.37 684.31 L1731.93 684.31 L1732.49 684.31 L1733.05 684.31 L1733.61 684.31 L1734.17 684.31 L1734.73 684.31 L1735.29 684.31 L1735.85 684.31 L1736.41 684.31 L1736.97 684.31 L1737.52 684.31 L1738.08 684.31 L1738.64 684.31 L1739.2 684.31 L1739.76 684.31 L1740.32 684.31 L1740.88 684.31 L1741.44 684.31 L1742 684.31 L1742.56 684.31 L1743.12 684.31 L1743.68 684.31 L1744.24 684.31 L1744.79 684.31 L1745.35 684.31 L1745.91 684.31 L1746.47 684.31 L1747.03 684.31 L1747.59 684.31 L1748.15 684.31 L1748.71 684.31 L1749.27 684.31 L1749.83 684.31 L1750.39 684.31 L1750.95 684.31 L1751.51 684.31 L1752.06 684.31 L1752.62 684.31 L1753.18 684.31 L1753.74 684.31 L1754.3 684.31 L1754.86 684.31 L1755.42 684.31 L1755.98 684.31 L1756.54 684.31 L1757.1 684.31 L1757.66 684.31 L1758.22 684.31 L1758.78 684.31 L1759.34 684.31 L1759.89 684.31 L1760.45 684.31 L1761.01 684.31 L1761.57 684.31 L1762.13 684.31 L1762.69 684.31 L1763.25 684.31 L1763.81 684.31 L1764.37 684.31 L1764.93 684.31 L1765.49 684.31 L1766.05 684.31 L1766.61 684.31 L1767.16 684.31 L1767.72 684.31 L1768.28 684.31 L1768.84 684.31 L1769.4 684.31 L1769.96 684.31 L1770.52 684.31 L1771.08 684.31 L1771.64 684.31 L1772.2 684.31 L1772.76 684.31 L1773.32 684.31 L1773.88 684.31 L1774.43 684.31 L1774.99 684.31 L1775.55 684.31 L1776.11 684.31 L1776.67 684.31 L1777.23 684.31 L1777.79 684.31 L1778.35 684.31 L1778.91 684.31 L1779.47 684.31 L1780.03 684.31 L1780.59 684.31 L1781.15 684.31 L1781.71 684.31 L1782.26 684.31 L1782.82 684.31 L1783.38 684.31 L1783.94 684.31 L1784.5 684.31 L1785.06 684.31 L1785.62 684.31 L1786.18 684.31 L1786.74 684.31 L1787.3 684.31 L1787.86 684.31 L1788.42 684.31 L1788.98 684.31 L1789.53 684.31 L1790.09 684.31 L1790.65 684.31 L1791.21 684.31 L1791.77 684.31 L1792.33 684.31 L1792.89 684.31 L1793.45 684.31 L1794.01 684.31 L1794.57 684.31 L1795.13 684.31 L1795.69 684.31 L1796.25 684.31 L1796.8 684.31 L1797.36 684.31 L1797.92 684.31 L1798.48 684.31 L1799.04 684.31 L1799.6 684.31 L1800.16 684.31 L1800.72 684.31 L1801.28 684.31 L1801.84 684.31 L1802.4 684.31 L1802.96 684.31 L1803.52 684.31 L1804.08 684.31 L1804.63 684.31 L1805.19 684.31 L1805.75 684.31 L1806.31 684.31 L1806.87 684.31 L1807.43 684.31 L1807.99 684.31 L1808.55 684.31 L1809.11 684.31 L1809.67 684.31 L1810.23 684.31 L1810.79 684.31 L1811.35 684.31 L1811.9 684.31 L1812.46 684.31 L1813.02 684.31 L1813.58 684.31 L1814.14 684.31 L1814.7 684.31 L1815.26 684.31 L1815.82 684.31 L1816.38 684.31 L1816.94 684.31 L1817.5 684.31 L1818.06 684.31 L1818.62 684.31 L1819.18 684.31 L1819.73 684.31 L1820.29 684.31 L1820.85 684.31 L1821.41 684.31 L1821.97 684.31 L1822.53 684.31 L1823.09 684.31 L1823.65 684.31 L1824.21 684.31 L1824.77 684.31 L1825.33 684.31 L1825.89 684.31 L1826.45 684.31 L1827 684.31 L1827.56 684.31 L1828.12 684.31 L1828.68 684.31 L1829.24 684.31 L1829.8 684.31 L1830.36 684.31 L1830.92 684.31 L1831.48 684.31 L1832.04 684.31 L1832.6 684.31 L1833.16 684.31 L1833.72 684.31 L1834.27 684.31 L1834.83 684.31 L1835.39 684.31 L1835.95 684.31 L1836.51 684.31 L1837.07 684.31 L1837.63 684.31 L1838.19 684.31 L1838.19 683.011 L1837.63 683.011 L1837.07 683.011 L1836.51 683.011 L1835.95 683.011 L1835.39 683.011 L1834.83 683.011 L1834.27 683.011 L1833.72 683.011 L1833.16 683.011 L1832.6 683.011 L1832.04 683.011 L1831.48 683.011 L1830.92 683.011 L1830.36 683.011 L1829.8 683.011 L1829.24 683.011 L1828.68 683.011 L1828.12 683.011 L1827.56 683.011 L1827 683.011 L1826.45 683.011 L1825.89 683.011 L1825.33 683.011 L1824.77 683.011 L1824.21 683.011 L1823.65 683.011 L1823.09 683.011 L1822.53 683.011 L1821.97 683.011 L1821.41 683.011 L1820.85 683.011 L1820.29 683.011 L1819.73 683.011 L1819.18 683.011 L1818.62 683.011 L1818.06 683.011 L1817.5 683.011 L1816.94 683.011 L1816.38 683.011 L1815.82 683.011 L1815.26 683.011 L1814.7 683.011 L1814.14 683.011 L1813.58 683.011 L1813.02 683.011 L1812.46 683.011 L1811.9 683.011 L1811.35 683.011 L1810.79 683.011 L1810.23 683.011 L1809.67 683.011 L1809.11 683.011 L1808.55 683.011 L1807.99 683.011 L1807.43 683.011 L1806.87 683.011 L1806.31 683.011 L1805.75 683.011 L1805.19 683.011 L1804.63 683.011 L1804.08 683.011 L1803.52 683.011 L1802.96 683.011 L1802.4 683.011 L1801.84 683.011 L1801.28 683.011 L1800.72 683.011 L1800.16 683.011 L1799.6 683.011 L1799.04 683.011 L1798.48 683.011 L1797.92 683.011 L1797.36 683.011 L1796.8 683.011 L1796.25 683.011 L1795.69 683.011 L1795.13 683.011 L1794.57 683.011 L1794.01 683.011 L1793.45 683.011 L1792.89 683.011 L1792.33 683.011 L1791.77 683.011 L1791.21 683.011 L1790.65 683.011 L1790.09 683.011 L1789.53 683.011 L1788.98 683.011 L1788.42 683.011 L1787.86 683.011 L1787.3 683.011 L1786.74 683.011 L1786.18 683.011 L1785.62 683.011 L1785.06 683.011 L1784.5 683.011 L1783.94 683.011 L1783.38 683.011 L1782.82 683.011 L1782.26 683.011 L1781.71 683.011 L1781.15 683.011 L1780.59 683.011 L1780.03 683.011 L1779.47 683.011 L1778.91 683.011 L1778.35 683.011 L1777.79 683.011 L1777.23 683.011 L1776.67 683.011 L1776.11 683.011 L1775.55 683.011 L1774.99 683.011 L1774.43 683.011 L1773.88 683.011 L1773.32 683.011 L1772.76 683.011 L1772.2 683.011 L1771.64 683.011 L1771.08 683.011 L1770.52 683.011 L1769.96 683.011 L1769.4 683.011 L1768.84 683.011 L1768.28 683.011 L1767.72 683.011 L1767.16 683.011 L1766.61 683.011 L1766.05 683.011 L1765.49 683.011 L1764.93 683.011 L1764.37 683.011 L1763.81 683.011 L1763.25 683.011 L1762.69 683.011 L1762.13 683.011 L1761.57 683.011 L1761.01 683.011 L1760.45 683.011 L1759.89 683.011 L1759.34 683.011 L1758.78 683.011 L1758.22 683.011 L1757.66 683.011 L1757.1 683.011 L1756.54 683.011 L1755.98 683.011 L1755.42 683.011 L1754.86 683.011 L1754.3 683.011 L1753.74 683.011 L1753.18 683.011 L1752.62 683.011 L1752.06 683.011 L1751.51 683.011 L1750.95 683.011 L1750.39 683.011 L1749.83 683.011 L1749.27 683.011 L1748.71 683.011 L1748.15 683.011 L1747.59 683.011 L1747.03 683.011 L1746.47 683.011 L1745.91 683.011 L1745.35 683.011 L1744.79 683.011 L1744.24 683.011 L1743.68 683.011 L1743.12 683.011 L1742.56 683.011 L1742 683.011 L1741.44 683.011 L1740.88 683.011 L1740.32 683.011 L1739.76 683.011 L1739.2 683.011 L1738.64 683.011 L1738.08 683.011 L1737.52 683.011 L1736.97 683.011 L1736.41 683.011 L1735.85 683.011 L1735.29 683.011 L1734.73 683.011 L1734.17 683.011 L1733.61 683.011 L1733.05 683.011 L1732.49 683.011 L1731.93 683.011 L1731.37 683.011 L1730.81 683.011 L1730.25 683.011 L1729.69 683.011 L1729.14 683.011 L1728.58 683.011 L1728.02 683.011 L1727.46 683.011 L1726.9 683.011 L1726.34 683.011 L1725.78 683.011 L1725.22 683.011 L1724.66 683.011 L1724.1 683.011 L1723.54 683.011 L1722.98 683.011 L1722.42 683.011 L1721.87 683.011 L1721.31 683.011 L1720.75 683.011 L1720.19 683.011 L1719.63 683.011 L1719.07 683.011 L1718.51 683.011 L1717.95 683.011 L1717.39 683.011 L1716.83 683.011 L1716.27 683.011 L1715.71 683.011 L1715.15 683.011 L1714.6 683.011 L1714.04 683.011 L1713.48 683.011 L1712.92 683.011 L1712.36 683.011 L1711.8 683.011 L1711.24 683.011 L1710.68 683.011 L1710.12 683.011 L1709.56 683.011 L1709 683.011 L1708.44 683.011 L1707.88 683.011 L1707.32 683.011 L1706.77 683.011 L1706.21 683.011 L1705.65 683.011 L1705.09 683.011 L1704.53 683.011 L1703.97 683.011 L1703.41 683.011 L1702.85 683.011 L1702.29 683.011 L1701.73 683.011 L1701.17 683.011 L1700.61 683.011 L1700.05 683.011 L1699.5 683.011 L1698.94 683.011 L1698.38 683.011 L1697.82 683.011 L1697.26 683.011 L1696.7 683.011 L1696.14 683.011 L1695.58 683.011 L1695.02 683.011 L1694.46 683.011 L1693.9 683.011 L1693.34 683.011 L1692.78 683.011 L1692.23 683.011 L1691.67 683.011 L1691.11 683.011 L1690.55 683.011 L1689.99 683.011 L1689.43 683.011 L1688.87 683.011 L1688.31 683.011 L1687.75 683.011 L1687.19 683.011 L1686.63 683.011 L1686.07 683.011 L1685.51 683.011 L1684.95 683.011 L1684.4 683.011 L1683.84 683.011 L1683.28 683.011 L1682.72 683.011 L1682.16 683.011 L1681.6 683.011 L1681.04 683.011 L1680.48 683.011 L1679.92 683.011 L1679.36 683.011 L1678.8 683.011 L1678.24 683.011 L1677.68 683.011 L1677.13 683.011 L1676.57 683.011 L1676.01 683.011 L1675.45 683.011 L1674.89 683.011 L1674.33 683.011 L1673.77 683.011 L1673.21 683.011 L1672.65 683.011 L1672.09 683.011 L1671.53 683.011 L1670.97 683.011 L1670.41 683.011 L1669.85 683.011 L1669.3 683.011 L1668.74 683.011 L1668.18 683.011 L1667.62 683.011 L1667.06 683.011 L1666.5 683.011 L1665.94 683.011 L1665.38 683.011 L1664.82 683.011 L1664.26 683.011 L1663.7 683.011 L1663.14 683.011 L1662.58 683.011 L1662.03 683.011 L1661.47 683.011 L1660.91 683.011 L1660.35 683.011 L1659.79 683.011 L1659.23 683.011 L1658.67 683.011 L1658.11 683.011 L1657.55 683.011 L1656.99 683.011 L1656.43 683.011 L1655.87 683.011 L1655.31 683.011 L1654.76 683.011 L1654.2 683.011 L1653.64 683.011 L1653.08 683.011 L1652.52 683.011 L1651.96 683.011 L1651.4 683.011 L1650.84 683.011 L1650.28 683.011 L1649.72 683.011 L1649.16 683.011 L1648.6 683.011 L1648.04 683.011 L1647.48 683.011 L1646.93 683.011 L1646.37 683.011 L1645.81 683.011 L1645.25 683.011 L1644.69 683.011 L1644.13 683.011 L1643.57 683.011 L1643.01 683.011 L1642.45 683.011 L1641.89 683.011 L1641.33 683.011 L1640.77 683.011 L1640.21 683.011 L1639.66 683.011 L1639.1 683.011 L1638.54 683.011 L1637.98 683.011 L1637.42 683.011 L1636.86 683.011 L1636.3 683.011 L1635.74 683.011 L1635.18 683.011 L1634.62 683.011 L1634.06 683.011 L1633.5 683.011 L1632.94 683.011 L1632.39 683.011 L1631.83 683.011 L1631.27 683.011 L1630.71 683.011 L1630.15 683.011 L1629.59 683.011 L1629.03 683.011 L1628.47 683.011 L1627.91 683.011 L1627.35 683.011 L1626.79 683.011 L1626.23 683.011 L1625.67 683.011 L1625.11 683.011 L1624.56 683.011 L1624 683.011 L1623.44 683.011 L1622.88 683.011 L1622.32 683.011 L1621.76 683.011 L1621.2 683.011 L1620.64 683.011 L1620.08 683.011 L1619.52 683.011 L1618.96 683.011 L1618.4 683.011 L1617.84 683.011 L1617.29 683.011 L1616.73 683.011 L1616.17 683.011 L1615.61 683.011 L1615.05 683.011 L1614.49 683.011 L1613.93 683.011 L1613.37 683.011 L1612.81 683.011 L1612.25 683.011 L1611.69 683.011 L1611.13 683.011 L1610.57 683.011 L1610.02 683.011 L1609.46 683.011 L1608.9 683.011 L1608.34 683.011 L1607.78 683.011 L1607.22 683.011 L1606.66 683.011 L1606.1 683.011 L1605.54 683.011 L1604.98 683.011 L1604.42 683.011 L1603.86 683.011 L1603.3 683.011 L1602.74 683.011 L1602.19 683.011 L1601.63 683.011 L1601.07 683.011 L1600.51 683.011 L1599.95 683.011 L1599.39 683.011 L1598.83 683.011 L1598.27 683.011 L1597.71 683.011 L1597.15 683.011 L1596.59 683.011 L1596.03 683.011 L1595.47 683.011 L1594.92 683.011 L1594.36 683.011 L1593.8 683.011 L1593.24 683.011 L1592.68 683.011 L1592.12 683.011 L1591.56 683.011 L1591 683.011 L1590.44 683.011 L1589.88 683.011 L1589.32 683.011 L1588.76 683.011 L1588.2 683.011 L1587.65 683.011 L1587.09 683.011 L1586.53 683.011 L1585.97 683.011 L1585.41 683.011 L1584.85 683.011 L1584.29 683.011 L1583.73 683.011 L1583.17 683.011 L1582.61 683.011 L1582.05 683.011 L1581.49 683.011 L1580.93 683.011 L1580.37 683.011 L1579.82 683.011 L1579.26 683.011 L1578.7 683.011 L1578.14 683.011 L1577.58 683.011 L1577.02 683.011 L1576.46 683.011 L1575.9 683.011 L1575.34 683.011 L1574.78 683.011 L1574.22 683.011 L1573.66 683.011 L1573.1 683.011 L1572.55 683.011 L1571.99 683.011 L1571.43 683.011 L1570.87 683.011 L1570.31 683.011 L1569.75 683.011 L1569.19 683.011 L1568.63 683.011 L1568.07 683.011 L1567.51 683.011 L1566.95 683.011 L1566.39 683.011 L1565.83 683.011 L1565.28 683.011 L1564.72 683.011 L1564.16 683.011 L1563.6 683.011 L1563.04 683.011 L1562.48 683.011 L1561.92 683.011 L1561.36 683.011 L1560.8 683.011 L1560.24 683.011 L1559.68 683.011 L1559.12 683.011 L1558.56 683.011 L1558 683.011 L1557.45 683.011 L1556.89 683.011 L1556.33 683.011 L1555.77 683.011 L1555.21 683.011 L1554.65 683.011 L1554.09 683.011 L1553.53 683.011 L1552.97 683.011 L1552.41 683.011 L1551.85 683.011 L1551.29 683.011 L1550.73 683.011 L1550.18 683.011 L1549.62 683.011 L1549.06 683.011 L1548.5 683.011 L1547.94 683.011 L1547.38 683.011 L1546.82 683.011 L1546.26 683.011 L1545.7 683.011 L1545.14 683.011 L1544.58 683.011 L1544.02 683.011 L1543.46 683.011 L1542.9 683.011 L1542.35 683.011 L1541.79 683.011 L1541.23 683.011 L1540.67 683.011 L1540.11 683.011 L1539.55 683.011 L1538.99 683.011 L1538.43 683.011 L1537.87 683.011 L1537.31 683.011 L1536.75 683.011 L1536.19 683.011 L1535.63 683.011 L1535.08 683.011 L1534.52 683.011 L1533.96 683.011 L1533.4 683.011 L1532.84 683.011 L1532.28 683.011 L1531.72 683.011 L1531.16 683.011 L1530.6 683.011 L1530.04 683.011 L1529.48 683.011 L1528.92 683.011 L1528.36 683.011 L1527.81 683.011 L1527.25 683.011 L1526.69 683.011 L1526.13 683.011 L1525.57 683.011 L1525.01 683.011 L1524.45 683.011 L1523.89 683.011 L1523.33 683.011 L1522.77 683.011 L1522.21 683.011 L1521.65 683.011 L1521.09 683.011 L1520.53 683.011 L1519.98 683.011 L1519.42 683.011 L1518.86 683.011 L1518.3 683.011 L1517.74 683.011 L1517.18 683.011 L1516.62 683.011 L1516.06 683.011 L1515.5 683.011 L1514.94 683.011 L1514.38 683.011 L1513.82 683.011 L1513.26 683.011 L1512.71 683.011 L1512.15 683.011 L1511.59 683.011 L1511.03 683.011 L1510.47 683.011 L1509.91 683.011 L1509.35 683.011 L1508.79 683.011 L1508.23 683.011 L1507.67 683.011 L1507.11 683.011 L1506.55 683.011 L1505.99 683.011 L1505.44 683.011 L1504.88 683.011 L1504.32 683.011 L1503.76 683.011 L1503.2 683.011 L1502.64 683.011 L1502.08 683.011 L1501.52 683.011 L1500.96 683.011 L1500.4 683.011 L1499.84 683.011 L1499.28 683.011 L1498.72 683.011 L1498.16 683.011 L1497.61 683.011 L1497.05 683.011 L1496.49 683.011 L1495.93 683.011 L1495.37 683.011 L1494.81 683.011 L1494.25 683.011 L1493.69 683.011 L1493.13 683.011 L1492.57 683.011 L1492.01 683.011 L1491.45 683.011 L1490.89 683.011 L1490.34 683.011 L1489.78 683.011 L1489.22 683.011 L1488.66 683.011 L1488.1 683.011 L1487.54 683.011 L1486.98 683.011 L1486.42 683.011 L1485.86 683.011 L1485.3 683.011 L1484.74 683.011 L1484.18 683.011 L1483.62 683.011 L1483.07 683.011 L1482.51 683.011 L1481.95 683.011 L1481.39 683.011 L1480.83 683.011 L1480.27 683.011 L1479.71 683.011 L1479.15 683.011 L1478.59 683.011 L1478.03 683.011 L1477.47 683.011 L1476.91 683.011 L1476.35 683.011 L1475.79 683.011 L1475.24 683.011 L1474.68 683.011 L1474.12 683.011 L1473.56 683.011 L1473 683.011 L1472.44 683.011 L1471.88 683.011 L1471.32 683.011 L1470.76 683.011 L1470.2 683.011 L1469.64 683.011 L1469.08 683.011 L1468.52 683.011 L1467.97 683.011 L1467.41 683.011 L1466.85 683.011 L1466.29 683.011 L1465.73 683.011 L1465.17 683.011 L1464.61 683.011 L1464.05 683.011 L1463.49 683.011 L1462.93 683.011 L1462.37 683.011 L1461.81 683.011 L1461.25 683.011 L1460.7 683.011 L1460.14 683.011 L1459.58 683.011 L1459.02 683.011 L1458.46 683.011 L1457.9 683.011 L1457.34 683.011 L1456.78 683.011 L1456.22 683.011 L1455.66 683.011 L1455.1 683.011 L1454.54 683.011 L1453.98 683.011 L1453.42 683.011 L1452.87 683.011 L1452.31 683.011 L1451.75 683.011 L1451.19 683.011 L1450.63 683.011 L1450.07 683.011 L1449.51 683.011 L1448.95 683.011 L1448.39 683.011 L1447.83 683.011 L1447.27 683.011 L1446.71 683.011 L1446.15 683.011 L1445.6 683.011 L1445.04 683.011 L1444.48 683.011 L1443.92 683.011 L1443.36 683.011 L1442.8 683.011 L1442.24 683.011 L1441.68 683.011 L1441.12 683.011 L1440.56 683.011 L1440 683.011 L1439.44 683.011 L1438.88 683.011 L1438.33 683.011 L1437.77 683.011 L1437.21 683.011 L1436.65 683.011 L1436.09 683.011 L1435.53 683.011 L1434.97 683.011 L1434.41 683.011 L1433.85 683.011 L1433.29 683.011 L1432.73 683.011 L1432.17 683.011 L1431.61 683.011 L1431.05 683.011 L1430.5 683.011 L1429.94 683.011 L1429.38 683.011 L1428.82 683.011 L1428.26 683.011 L1427.7 683.011 L1427.14 683.011 L1426.58 683.011 L1426.02 683.011 L1425.46 683.011 L1424.9 683.011 L1424.34 683.011 L1423.78 683.011 L1423.23 683.011 L1422.67 683.011 L1422.11 683.011 L1421.55 683.011 L1420.99 683.011 L1420.43 683.011 L1419.87 683.011 L1419.31 683.011 L1418.75 683.011 L1418.19 683.011 L1417.63 683.011 L1417.07 683.011 L1416.51 683.011 L1415.95 683.011 L1415.4 683.011 L1414.84 683.011 L1414.28 683.011 L1413.72 683.011 L1413.16 683.011 L1412.6 683.011 L1412.04 683.011 L1411.48 683.011 L1410.92 683.011 L1410.36 683.011 L1409.8 683.011 L1409.24 683.011 L1408.68 683.011 L1408.13 683.011 L1407.57 683.011 L1407.01 683.011 L1406.45 683.011 L1405.89 683.011 L1405.33 683.011 L1404.77 683.011 L1404.21 683.011 L1403.65 683.011 L1403.09 683.011 L1402.53 683.011 L1401.97 683.011 L1401.41 683.011 L1400.86 683.011 L1400.3 683.011 L1399.74 683.011 L1399.18 683.011 L1398.62 683.011 L1398.06 683.011 L1397.5 683.011 L1396.94 683.011 L1396.38 683.011 L1395.82 683.011 L1395.26 683.011 L1394.7 683.011 L1394.14 683.011 L1393.58 683.011 L1393.03 683.011 L1392.47 683.011 L1391.91 683.011 L1391.35 683.011 L1390.79 683.011 L1390.23 683.011 L1389.67 683.011 L1389.11 683.011 L1388.55 683.011 L1387.99 683.011 L1387.43 683.011 L1386.87 683.011 L1386.31 683.011 L1385.76 683.011 L1385.2 683.011 L1384.64 683.011 L1384.08 683.011 L1383.52 683.011 L1382.96 683.011 L1382.4 683.011 L1381.84 683.011 L1381.28 683.011 L1380.72 683.011 L1380.16 683.011 L1379.6 683.011 L1379.04 683.011 L1378.49 683.011 L1377.93 683.011 L1377.37 683.011 L1376.81 683.011 L1376.25 683.011 L1375.69 683.011 L1375.13 683.011 L1374.57 683.011 L1374.01 683.011 L1373.45 683.011 L1372.89 683.011 L1372.33 683.011 L1371.77 683.011 L1371.21 683.011 L1370.66 683.011 L1370.1 683.011 L1369.54 683.011 L1368.98 683.011 L1368.42 683.011 L1367.86 683.011 L1367.3 683.011 L1366.74 683.011 L1366.18 683.011 L1365.62 683.011 L1365.06 683.011 L1364.5 683.011 L1363.94 683.011 L1363.39 683.011 L1362.83 683.011 L1362.27 683.011 L1361.71 683.011 L1361.15 683.011 L1360.59 683.011 L1360.03 683.011 L1359.47 683.011 L1358.91 683.011 L1358.35 683.011 L1357.79 683.011 L1357.23 683.011 L1356.67 683.011 L1356.12 683.011 L1355.56 683.011 L1355 683.011 L1354.44 683.011 L1353.88 683.011 L1353.32 683.011 L1352.76 683.011 L1352.2 683.011 L1351.64 683.011 L1351.08 683.011 L1350.52 683.011 L1349.96 683.011 L1349.4 683.011 L1348.84 683.011 L1348.29 683.011 L1347.73 683.011 L1347.17 683.011 L1346.61 683.011 L1346.05 683.011 L1345.49 683.011 L1344.93 683.011 L1344.37 683.011 L1343.81 683.011 L1343.25 683.011 L1342.69 683.011 L1342.13 683.011 L1341.57 683.011 L1341.02 683.011 L1340.46 683.011 L1339.9 683.011 L1339.34 683.011 L1338.78 683.011 L1338.22 683.011 L1337.66 683.011 L1337.1 683.011 L1336.54 683.011 L1335.98 683.011 L1335.42 683.011 L1334.86 683.011 L1334.3 683.011 L1333.75 683.011 L1333.19 683.011 L1332.63 683.011 L1332.07 683.011 L1331.51 683.011 L1330.95 683.011 L1330.39 683.011 L1329.83 683.011 L1329.27 683.011 L1328.71 683.011 L1328.15 683.011 L1327.59 683.011 L1327.03 683.011 L1326.47 683.011 L1325.92 683.011 L1325.36 683.011 L1324.8 683.011 L1324.24 683.011 L1323.68 683.011 L1323.12 683.011 L1322.56 683.011 L1322 683.011 L1321.44 683.011 L1320.88 683.011 L1320.32 683.011 L1319.76 683.011 L1319.2 683.011 L1318.65 683.011 L1318.09 683.011 L1317.53 683.011 L1316.97 683.011 L1316.41 683.011 L1315.85 683.011 L1315.29 683.011 L1314.73 683.011 L1314.17 683.011 L1313.61 683.011 L1313.05 683.011 L1312.49 683.011 L1311.93 683.011 L1311.38 683.011 L1310.82 683.011 L1310.26 683.011 L1309.7 683.011 L1309.14 683.011 L1308.58 683.011 L1308.02 683.011 L1307.46 683.011 L1306.9 683.011 L1306.34 683.011 L1305.78 683.011 L1305.22 683.011 L1304.66 683.011 L1304.1 683.011 L1303.55 683.011 L1302.99 683.011 L1302.43 683.011 L1301.87 683.011 L1301.31 683.011 L1300.75 683.011 L1300.19 683.011 L1299.63 683.011 L1299.07 683.011 L1298.51 683.011 L1297.95 683.011 L1297.39 683.011 L1296.83 683.011 L1296.28 683.011 L1295.72 683.011 L1295.16 683.011 L1294.6 683.011 L1294.04 683.011 L1293.48 683.011 L1292.92 683.011 L1292.36 683.011 L1291.8 683.011 L1291.24 683.011 L1290.68 683.011 L1290.12 683.011 L1289.56 683.011 L1289 683.011 L1288.45 683.011 L1287.89 683.011 L1287.33 683.011 L1286.77 683.011 L1286.21 683.011 L1285.65 683.011 L1285.09 683.011 L1284.53 683.011 L1283.97 683.011 L1283.41 683.011 L1282.85 683.011 L1282.29 683.011 L1281.73 683.011 L1281.18 683.011 L1280.62 683.011 L1280.06 683.011 L1279.5 683.011 L1278.94 683.011 L1278.38 683.011 L1277.82 683.011 L1277.26 683.011 L1276.7 683.011 L1276.14 683.011 L1275.58 683.011 L1275.02 683.011 L1274.46 683.011 L1273.91 683.011 L1273.35 683.011 L1272.79 683.011 L1272.23 683.011 L1271.67 683.011 L1271.11 683.011 L1270.55 683.011 L1269.99 683.011 L1269.43 683.011 L1268.87 683.011 L1268.31 683.011 L1267.75 683.011 L1267.19 683.011 L1266.63 683.011 L1266.08 683.011 L1265.52 683.011 L1264.96 683.011 L1264.4 683.011 L1263.84 683.011 L1263.28 683.011 L1262.72 683.011 L1262.16 683.011 L1261.6 683.011 L1261.04 683.011 L1260.48 683.011 L1259.92 683.011 L1259.36 683.011 L1258.81 683.011 L1258.25 683.011 L1257.69 683.011 L1257.13 683.011 L1256.57 683.011 L1256.01 683.011 L1255.45 683.011 L1254.89 683.011 L1254.33 683.011 L1253.77 683.011 L1253.21 683.011 L1252.65 683.011 L1252.09 683.011 L1251.54 683.011 L1250.98 683.011 L1250.42 683.011 L1249.86 683.011 L1249.3 683.011 L1248.74 683.011 L1248.18 683.011 L1247.62 683.011 L1247.06 683.011 L1246.5 683.011 L1245.94 683.011 L1245.38 683.011 L1244.82 683.011 L1244.26 683.011 L1243.71 683.011 L1243.15 683.011 L1242.59 683.011 L1242.03 683.011 L1241.47 683.011 L1240.91 683.011 L1240.35 683.011 L1239.79 683.011 L1239.23 683.011 L1238.67 683.011 L1238.11 683.011 L1237.55 683.011 L1236.99 683.011 L1236.44 683.011 L1235.88 683.011 L1235.32 683.011 L1234.76 683.011 L1234.2 683.011 L1233.64 683.011 L1233.08 683.011 L1232.52 683.011 L1231.96 683.011 L1231.4 683.011 L1230.84 683.011 L1230.28 683.011 L1229.72 683.011 L1229.17 683.011 L1228.61 683.011 L1228.05 683.011 L1227.49 683.011 L1226.93 683.011 L1226.37 683.011 L1225.81 683.011 L1225.25 683.011 L1224.69 683.011 L1224.13 683.011 L1223.57 683.011 L1223.01 683.011 L1222.45 683.011 L1221.89 683.011 L1221.34 683.011 L1220.78 683.011 L1220.22 683.011 L1219.66 683.011 L1219.1 683.011 L1218.54 683.011 L1217.98 683.011 L1217.42 683.011 L1216.86 683.011 L1216.3 683.011 L1215.74 683.011 L1215.18 683.011 L1214.62 683.011 L1214.07 683.011 L1213.51 683.011 L1212.95 683.011 L1212.39 683.011 L1211.83 683.011 L1211.27 683.011 L1210.71 683.011 L1210.15 683.011 L1209.59 683.011 L1209.03 683.011 L1208.47 683.011 L1207.91 683.011 L1207.35 683.011 L1206.8 683.011 L1206.24 683.011 L1205.68 683.011 L1205.12 683.011 L1204.56 683.011 L1204 683.011 L1203.44 683.011 L1202.88 683.011 L1202.32 683.011 L1201.76 683.011 L1201.2 683.011 L1200.64 683.011 L1200.08 683.011 L1199.52 683.011 L1198.97 683.011 L1198.41 683.011 L1197.85 683.011 L1197.29 683.011 L1196.73 683.011 L1196.17 683.011 L1195.61 683.011 L1195.05 683.011 L1194.49 683.011 L1193.93 683.011 L1193.37 683.011 L1192.81 683.011 L1192.25 683.011 L1191.7 683.011 L1191.14 683.011 L1190.58 683.011 L1190.02 683.011 L1189.46 683.011 L1188.9 683.011 L1188.34 683.011 L1187.78 683.011 L1187.22 683.011 L1186.66 683.011 L1186.1 683.011 L1185.54 683.011 L1184.98 683.011 L1184.43 683.011 L1183.87 683.011 L1183.31 683.011 L1182.75 683.011 L1182.19 683.011 L1181.63 683.011 L1181.07 683.011 L1180.51 683.011 L1179.95 683.011 L1179.39 683.011 L1178.83 683.011 L1178.27 683.011 L1177.71 683.011 L1177.15 683.011 L1176.6 683.011 L1176.04 683.011 L1175.48 683.011 L1174.92 683.011 L1174.36 683.011 L1173.8 683.011 L1173.24 683.011 L1172.68 683.011 L1172.12 683.011 L1171.56 683.011 L1171 683.011 L1170.44 683.011 L1169.88 683.011 L1169.33 683.011 L1168.77 683.011 L1168.21 683.011 L1167.65 683.011 L1167.09 683.011 L1166.53 683.011 L1165.97 683.011 L1165.41 683.011 L1164.85 683.011 L1164.29 683.011 L1163.73 683.011 L1163.17 683.011 L1162.61 683.011 L1162.05 683.011 L1161.5 683.011 L1160.94 683.011 L1160.38 683.011 L1159.82 683.011 L1159.26 683.011 L1158.7 683.011 L1158.14 683.011 L1157.58 683.011 L1157.02 683.011 L1156.46 683.011 L1155.9 683.011 L1155.34 683.011 L1154.78 683.011 L1154.23 683.011 L1153.67 683.011 L1153.11 683.011 L1152.55 683.011 L1151.99 683.011 L1151.43 683.011 L1150.87 683.011 L1150.31 683.011 L1149.75 683.011 L1149.19 683.011 L1148.63 683.011 L1148.07 683.011 L1147.51 683.011 L1146.96 683.011 L1146.4 683.011 L1145.84 683.011 L1145.28 683.011 L1144.72 683.011 L1144.16 683.011 L1143.6 683.011 L1143.04 683.011 L1142.48 683.011 L1141.92 683.011 L1141.36 683.011 L1140.8 683.011 L1140.24 683.011 L1139.68 683.011 L1139.13 683.011 L1138.57 683.011 L1138.01 683.011 L1137.45 683.011 L1136.89 683.011 L1136.33 683.011 L1135.77 683.011 L1135.21 683.011 L1134.65 683.011 L1134.09 683.011 L1133.53 683.011 L1132.97 683.011 L1132.41 683.011 L1131.86 683.011 L1131.3 683.011 L1130.74 683.011 L1130.18 683.011 L1129.62 683.011 L1129.06 683.011 L1128.5 683.011 L1127.94 683.011 L1127.38 683.011 L1126.82 683.011 L1126.26 683.011 L1125.7 683.011 L1125.14 683.011 L1124.59 683.011 L1124.03 683.011 L1123.47 683.011 L1122.91 683.011 L1122.35 683.011 L1121.79 683.011 L1121.23 683.011 L1120.67 683.011 L1120.11 683.011 L1119.55 683.011 L1118.99 683.011 L1118.43 683.011 L1117.87 683.011 L1117.31 683.011 L1116.76 683.011 L1116.2 683.011 L1115.64 683.011 L1115.08 683.011 L1114.52 683.011 L1113.96 683.011 L1113.4 683.011 L1112.84 683.011 L1112.28 683.011 L1111.72 683.011 L1111.16 683.011 L1110.6 683.011 L1110.04 683.011 L1109.49 683.011 L1108.93 683.011 L1108.37 683.011 L1107.81 683.011 L1107.25 683.011 L1106.69 683.011 L1106.13 683.011 L1105.57 683.011 L1105.01 683.011 L1104.45 683.011 L1103.89 683.011 L1103.33 683.011 L1102.77 683.011 L1102.22 683.011 L1101.66 683.011 L1101.1 683.011 L1100.54 683.011 L1099.98 683.011 L1099.42 683.011 L1098.86 683.011 L1098.3 683.011 L1097.74 683.011 L1097.18 683.011 L1096.62 683.011 L1096.06 683.011 L1095.5 683.011 L1094.94 683.011 L1094.39 683.011 L1093.83 683.011 L1093.27 683.011 L1092.71 683.011 L1092.15 683.011 L1091.59 683.011 L1091.03 683.011 L1090.47 683.011 L1089.91 683.011 L1089.35 683.011 L1088.79 683.011 L1088.23 683.011 L1087.67 683.011 L1087.12 683.011 L1086.56 683.011 L1086 683.011 L1085.44 683.011 L1084.88 683.011 L1084.32 683.011 L1083.76 683.011 L1083.2 683.011 L1082.64 683.011 L1082.08 683.011 L1081.52 683.011 L1080.96 683.011 L1080.4 683.011 L1079.85 683.011 L1079.29 683.011 L1078.73 683.011 L1078.17 683.011 L1077.61 683.011 L1077.05 683.011 L1076.49 683.011 L1075.93 683.011 L1075.37 683.011 L1074.81 683.011 L1074.25 683.011 L1073.69 683.011 L1073.13 683.011 L1072.57 683.011 L1072.02 683.011 L1071.46 683.011 L1070.9 683.011 L1070.34 683.011 L1069.78 683.011 L1069.22 683.011 L1068.66 683.011 L1068.1 683.011 L1067.54 683.011 L1066.98 683.011 L1066.42 683.011 L1065.86 683.011 L1065.3 683.011 L1064.75 683.011 L1064.19 683.011 L1063.63 683.011 L1063.07 683.011 L1062.51 683.011 L1061.95 683.011 L1061.39 683.011 L1060.83 683.011 L1060.27 683.011 L1059.71 683.011 L1059.15 683.011 L1058.59 683.011 L1058.03 683.011 L1057.48 683.011 L1056.92 683.011 L1056.36 683.011 L1055.8 683.011 L1055.24 683.011 L1054.68 683.011 L1054.12 683.011 L1053.56 683.011 L1053 683.011 L1052.44 683.011 L1051.88 683.011 L1051.32 683.011 L1050.76 683.011 L1050.2 683.011 L1049.65 683.011 L1049.09 683.011 L1048.53 683.011 L1047.97 683.011 L1047.41 683.011 L1046.85 683.011 L1046.29 683.011 L1045.73 683.011 L1045.17 683.011 L1044.61 683.011 L1044.05 683.011 L1043.49 683.011 L1042.93 683.011 L1042.38 683.011 L1041.82 683.011 L1041.26 683.011 L1040.7 683.011 L1040.14 683.011 L1039.58 683.011 L1039.02 683.011 L1038.46 683.011 L1037.9 683.011 L1037.34 683.011 L1036.78 683.011 L1036.22 683.011 L1035.66 683.011 L1035.1 683.011 L1034.55 683.011 L1033.99 683.011 L1033.43 683.011 L1032.87 683.011 L1032.31 683.011 L1031.75 683.011 L1031.19 683.011 L1030.63 683.011 L1030.07 683.011 L1029.51 683.011 L1028.95 683.011 L1028.39 683.011 L1027.83 683.011 L1027.28 683.011 L1026.72 683.011 L1026.16 683.011 L1025.6 683.011 L1025.04 683.011 L1024.48 683.011 L1023.92 683.011 L1023.36 683.011 L1022.8 683.011 L1022.24 683.011 L1021.68 683.011 L1021.12 683.011 L1020.56 683.011 L1020.01 683.011 L1019.45 683.011 L1018.89 683.011 L1018.33 683.011 L1017.77 683.011 L1017.21 683.011 L1016.65 683.011 L1016.09 683.011 L1015.53 683.011 L1014.97 683.011 L1014.41 683.011 L1013.85 683.011 L1013.29 683.011 L1012.73 683.011 L1012.18 683.011 L1011.62 683.011 L1011.06 683.011 L1010.5 683.011 L1009.94 683.011 L1009.38 683.011 L1008.82 683.011 L1008.26 683.011 L1007.7 683.011 L1007.14 683.011 L1006.58 683.011 L1006.02 683.011 L1005.46 683.011 L1004.91 683.011 L1004.35 683.011 L1003.79 683.011 L1003.23 683.011 L1002.67 683.011 L1002.11 683.011 L1001.55 683.011 L1000.99 683.011 L1000.43 683.011 L999.872 683.011 L999.313 683.011 L998.754 683.011 L998.194 683.011 L997.635 683.011 L997.076 683.011 L996.517 683.011 L995.957 683.011 L995.398 683.011 L994.839 683.011 L994.28 683.011 L993.72 683.011 L993.161 683.011 L992.602 683.011 L992.043 683.011 L991.483 683.011 L990.924 683.011 L990.365 683.011 L989.806 683.011 L989.246 683.011 L988.687 683.011 L988.128 683.011 L987.569 683.011 L987.009 683.011 L986.45 683.011 L985.891 683.011 L985.332 683.011 L984.772 683.011 L984.213 683.011 L983.654 683.011 L983.095 683.011 L982.535 683.011 L981.976 683.011 L981.417 683.011 L980.858 683.011 L980.298 683.011 L979.739 683.011 L979.18 683.011 L978.621 683.011 L978.061 683.011 L977.502 683.011 L976.943 683.011 L976.384 683.011 L975.824 683.011 L975.265 683.011 L974.706 683.011 L974.147 683.011 L973.587 683.011 L973.028 683.011 L972.469 683.011 L971.91 683.011 L971.35 683.011 L970.791 683.011 L970.232 683.011 L969.673 683.011 L969.113 683.011 L968.554 683.011 L967.995 683.011 L967.436 683.011 L966.876 683.011 L966.317 683.011 L965.758 683.011 L965.199 683.011 L964.639 683.011 L964.08 683.011 L963.521 683.011 L962.962 683.011 L962.402 683.011 L961.843 683.011 L961.284 683.011 L960.725 683.011 L960.165 683.011 L959.606 683.011 L959.047 683.011 L958.488 683.011 L957.928 683.011 L957.369 683.011 L956.81 683.011 L956.251 683.011 L955.691 683.011 L955.132 683.011 L954.573 683.011 L954.014 683.011 L953.454 683.011 L952.895 683.011 L952.336 683.011 L951.777 683.011 L951.217 683.011 L950.658 683.011 L950.099 683.011 L949.54 683.011 L948.98 683.011 L948.421 683.011 L947.862 683.011 L947.303 683.011 L946.743 683.011 L946.184 683.011 L945.625 683.011 L945.066 683.011 L944.506 683.011 L943.947 683.011 L943.388 683.011 L942.829 683.011 L942.269 683.011 L941.71 683.011 L941.151 683.011 L940.592 683.011 L940.032 683.011 L939.473 683.011 L938.914 683.011 L938.355 683.011 L937.795 683.011 L937.236 683.011 L936.677 683.011 L936.118 683.011 L935.558 683.011 L934.999 683.011 L934.44 683.011 L933.881 683.011 L933.321 683.011 L932.762 683.011 L932.203 683.011 L931.644 683.011 L931.084 683.011 L930.525 683.011 L929.966 683.011 L929.406 683.011 L928.847 683.011 L928.288 683.011 L927.729 683.011 L927.169 683.011 L926.61 683.011 L926.051 683.011 L925.492 683.011 L924.932 683.011 L924.373 683.011 L923.814 683.011 L923.255 683.011 L922.695 683.011 L922.136 683.011 L921.577 683.011 L921.018 683.011 L920.458 683.011 L919.899 683.011 L919.34 683.011 L918.781 683.011 L918.221 683.011 L917.662 683.011 L917.103 683.011 L916.544 683.011 L915.984 683.011 L915.425 683.011 L914.866 683.011 L914.307 683.011 L913.747 683.011 L913.188 683.011 L912.629 683.011 L912.07 683.011 L911.51 683.011 L910.951 683.011 L910.392 683.011 L909.833 683.011 L909.273 683.011 L908.714 683.011 L908.155 683.011 L907.596 683.011 L907.036 683.011 L906.477 683.011 L905.918 683.011 L905.359 683.011 L904.799 683.011 L904.24 683.011 L903.681 683.011 L903.122 683.011 L902.562 683.011 L902.003 683.011 L901.444 683.011 L900.885 683.011 L900.325 683.011 L899.766 683.011 L899.207 683.011 L898.648 683.011 L898.088 683.011 L897.529 683.011 L896.97 683.011 L896.411 683.011 L895.851 683.011 L895.292 683.011 L894.733 683.011 L894.174 683.011 L893.614 683.011 L893.055 683.011 L892.496 683.011 L891.937 683.011 L891.377 683.011 L890.818 683.011 L890.259 683.011 L889.7 683.011 L889.14 683.011 L888.581 683.011 L888.022 683.011 L887.463 683.011 L886.903 683.011 L886.344 683.011 L885.785 683.011 L885.226 683.011 L884.666 683.011 L884.107 683.011 L883.548 683.011 L882.989 683.011 L882.429 683.011 L881.87 683.011 L881.311 683.011 L880.752 683.011 L880.192 683.011 L879.633 683.011 L879.074 683.011 L878.515 683.011 L877.955 683.011 L877.396 683.011 L876.837 683.011 L876.278 683.011 L875.718 683.011 L875.159 683.011 L874.6 683.011 L874.041 683.011 L873.481 683.011 L872.922 683.011 L872.363 683.011 L871.804 683.011 L871.244 683.011 L870.685 683.011 L870.126 683.011 L869.567 683.011 L869.007 683.011 L868.448 683.011 L867.889 683.011 L867.33 683.011 L866.77 683.011 L866.211 683.011 L865.652 683.011 L865.093 683.011 L864.533 683.011 L863.974 683.011 L863.415 683.011 L862.856 683.011 L862.296 683.011 L861.737 683.011 L861.178 683.011 L860.619 683.011 L860.059 683.011 L859.5 683.011 L858.941 683.011 L858.382 683.011 L857.822 683.011 L857.263 683.011 L856.704 683.011 L856.145 683.011 L855.585 683.011 L855.026 683.011 L854.467 683.011 L853.908 683.011 L853.348 683.011 L852.789 683.011 L852.23 683.011 L851.671 683.011 L851.111 683.011 L850.552 683.011 L849.993 683.011 L849.434 683.011 L848.874 683.011 L848.315 683.011 L847.756 683.011 L847.197 683.011 L846.637 683.011 L846.078 683.011 L845.519 683.011 L844.96 683.011 L844.4 683.011 L843.841 683.011 L843.282 683.011 L842.723 683.011 L842.163 683.011 L841.604 683.011 L841.045 683.011 L840.486 683.011 L839.926 683.011 L839.367 683.011 L838.808 683.011 L838.249 683.011 L837.689 683.011 L837.13 683.011 L836.571 683.011 L836.012 683.011 L835.452 683.011 L834.893 683.011 L834.334 683.011 L833.775 683.011 L833.215 683.011 L832.656 683.011 L832.097 683.011 L831.538 683.011 L830.978 683.011 L830.419 683.011 L829.86 683.011 L829.301 683.011 L828.741 683.011 L828.182 683.011 L827.623 683.011 L827.064 683.011 L826.504 683.011 L825.945 683.011 L825.386 683.011 L824.827 683.011 L824.267 683.011 L823.708 683.011 L823.149 683.011 L822.59 683.011 L822.03 683.011 L821.471 683.011 L820.912 683.011 L820.353 683.011 L819.793 683.011 L819.234 683.011 L818.675 683.011 L818.116 683.011 L817.556 683.011 L816.997 683.011 L816.438 683.011 L815.879 683.011 L815.319 683.011 L814.76 683.011 L814.201 683.011 L813.642 683.011 L813.082 683.011 L812.523 683.011 L811.964 683.011 L811.405 683.011 L810.845 683.011 L810.286 683.011 L809.727 683.011 L809.168 683.011 L808.608 683.011 L808.049 683.011 L807.49 683.011 L806.931 683.011 L806.371 683.011 L805.812 683.011 L805.253 683.011 L804.693 683.011 L804.134 683.011 L803.575 683.011 L803.016 683.011 L802.456 683.011 L801.897 683.011 L801.338 683.011 L800.779 683.011 L800.219 683.011 L799.66 683.011 L799.101 683.011 L798.542 683.011 L797.982 683.011 L797.423 683.011 L796.864 683.011 L796.305 683.011 L795.745 683.011 L795.186 683.011 L794.627 683.011 L794.068 683.011 L793.508 683.011 L792.949 683.011 L792.39 683.011 L791.831 683.011 L791.271 683.011 L790.712 683.011 L790.153 683.011 L789.594 683.011 L789.034 683.011 L788.475 683.011 L787.916 683.011 L787.357 683.011 L786.797 683.011 L786.238 683.011 L785.679 683.011 L785.12 683.011 L784.56 683.011 L784.001 683.011 L783.442 683.011 L782.883 683.011 L782.323 683.011 L781.764 683.011 L781.205 683.011 L780.646 683.011 L780.086 683.011 L779.527 683.011 L778.968 683.011 L778.409 683.011 L777.849 683.011 L777.29 683.011 L776.731 683.011 L776.172 683.011 L775.612 683.011 L775.053 683.011 L774.494 683.011 L773.935 683.011 L773.375 683.011 L772.816 683.011 L772.257 683.011 L771.698 683.011 L771.138 683.011 L770.579 683.011 L770.02 683.011 L769.461 683.011 L768.901 683.011 L768.342 683.011 L767.783 683.011 L767.224 683.011 L766.664 683.011 L766.105 683.011 L765.546 683.011 L764.987 683.011 L764.427 683.011 L763.868 683.011 L763.309 683.011 L762.75 683.011 L762.19 683.011 L761.631 683.011 L761.072 683.011 L760.513 683.011 L759.953 683.011 L759.394 683.011 L758.835 683.011 L758.276 683.011 L757.716 683.011 L757.157 683.011 L756.598 683.011 L756.039 683.011 L755.479 683.011 L754.92 683.011 L754.361 683.011 L753.802 683.011 L753.242 683.011 L752.683 683.011 L752.124 683.011 L751.565 683.011 L751.005 683.011 L750.446 683.011 L749.887 683.011 L749.328 683.011 L748.768 683.011 L748.209 683.011 L747.65 683.011 L747.091 683.011 L746.531 683.011 L745.972 683.011 L745.413 683.011 L744.854 683.011 L744.294 683.011 L743.735 683.011 L743.176 683.011 L742.617 683.011 L742.057 683.011 L741.498 683.011 L740.939 683.011 L740.38 683.011 L739.82 683.011 L739.261 683.011 L738.702 683.011 L738.143 683.011 L737.583 683.011 L737.024 683.011 L736.465 683.011 L735.906 683.011 L735.346 683.011 L734.787 683.011 L734.228 683.011 L733.669 683.011 L733.109 683.011 L732.55 683.011 L731.991 683.011 L731.432 683.011 L730.872 683.011 L730.313 683.011 L729.754 683.011 L729.195 683.011 L728.635 683.011 L728.076 683.011 L727.517 683.011 L726.958 683.011 L726.398 683.011 L725.839 683.011 L725.28 683.011 L724.721 683.011 L724.161 683.011 L723.602 683.011 L723.043 683.011 L722.484 683.011 L721.924 683.011 L721.365 683.011 L720.806 683.011 L720.247 683.011  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip463)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.683 720.806,683.683 721.365,683.683 721.924,683.683 722.484,683.683 723.043,683.683 723.602,683.683 724.161,683.683 724.721,683.683 725.28,683.683 725.839,683.683 726.398,683.683 726.958,683.683 727.517,683.683 728.076,683.683 728.635,683.683 729.195,683.683 729.754,683.683 730.313,683.683 730.872,683.683 731.432,683.683 731.991,683.683 732.55,683.683 733.109,683.683 733.669,683.683 734.228,683.683 734.787,683.683 735.346,683.683 735.906,683.683 736.465,683.683 737.024,683.683 737.583,683.683 738.143,683.683 738.702,683.683 739.261,683.683 739.82,683.683 740.38,683.683 740.939,683.683 741.498,683.683 742.057,683.683 742.617,683.683 743.176,683.683 743.735,683.683 744.294,683.683 744.854,683.683 745.413,683.683 745.972,683.683 746.531,683.683 747.091,683.683 747.65,683.683 748.209,683.683 748.768,683.683 749.328,683.683 749.887,683.683 750.446,683.683 751.005,683.683 751.565,683.683 752.124,683.683 752.683,683.683 753.242,683.683 753.802,683.683 754.361,683.683 754.92,683.683 755.479,683.683 756.039,683.683 756.598,683.683 757.157,683.683 757.716,683.683 758.276,683.683 758.835,683.683 759.394,683.683 759.953,683.683 760.513,683.683 761.072,683.683 761.631,683.683 762.19,683.683 762.75,683.683 763.309,683.683 763.868,683.683 764.427,683.683 764.987,683.683 765.546,683.683 766.105,683.683 766.664,683.683 767.224,683.683 767.783,683.683 768.342,683.683 768.901,683.683 769.461,683.683 770.02,683.683 770.579,683.683 771.138,683.683 771.698,683.683 772.257,683.683 772.816,683.683 773.375,683.683 773.935,683.683 774.494,683.683 775.053,683.683 775.612,683.683 776.172,683.683 776.731,683.683 777.29,683.683 777.849,683.683 778.409,683.683 778.968,683.683 779.527,683.683 780.086,683.683 780.646,683.683 781.205,683.683 781.764,683.683 782.323,683.683 782.883,683.683 783.442,683.683 784.001,683.683 784.56,683.683 785.12,683.683 785.679,683.683 786.238,683.683 786.797,683.683 787.357,683.683 787.916,683.683 788.475,683.683 789.034,683.683 789.594,683.683 790.153,683.683 790.712,683.683 791.271,683.683 791.831,683.683 792.39,683.683 792.949,683.683 793.508,683.683 794.068,683.683 794.627,683.683 795.186,683.683 795.745,683.683 796.305,683.683 796.864,683.683 797.423,683.683 797.982,683.683 798.542,683.683 799.101,683.683 799.66,683.683 800.219,683.683 800.779,683.683 801.338,683.683 801.897,683.683 802.456,683.683 803.016,683.683 803.575,683.683 804.134,683.683 804.693,683.683 805.253,683.683 805.812,683.683 806.371,683.683 806.931,683.683 807.49,683.683 808.049,683.683 808.608,683.683 809.168,683.683 809.727,683.683 810.286,683.683 810.845,683.683 811.405,683.683 811.964,683.683 812.523,683.683 813.082,683.683 813.642,683.683 814.201,683.683 814.76,683.683 815.319,683.683 815.879,683.683 816.438,683.683 816.997,683.683 817.556,683.683 818.116,683.683 818.675,683.683 819.234,683.683 819.793,683.683 820.353,683.683 820.912,683.683 821.471,683.683 822.03,683.683 822.59,683.683 823.149,683.683 823.708,683.683 824.267,683.683 824.827,683.683 825.386,683.683 825.945,683.683 826.504,683.683 827.064,683.683 827.623,683.683 828.182,683.683 828.741,683.683 829.301,683.683 829.86,683.683 830.419,683.683 830.978,683.683 831.538,683.683 832.097,683.683 832.656,683.683 833.215,683.683 833.775,683.683 834.334,683.683 834.893,683.683 835.452,683.683 836.012,683.683 836.571,683.683 837.13,683.683 837.689,683.683 838.249,683.683 838.808,683.683 839.367,683.683 839.926,683.683 840.486,683.683 841.045,683.683 841.604,683.683 842.163,683.683 842.723,683.683 843.282,683.683 843.841,683.683 844.4,683.683 844.96,683.683 845.519,683.683 846.078,683.683 846.637,683.683 847.197,683.683 847.756,683.683 848.315,683.683 848.874,683.683 849.434,683.683 849.993,683.683 850.552,683.683 851.111,683.683 851.671,683.683 852.23,683.683 852.789,683.683 853.348,683.683 853.908,683.683 854.467,683.683 855.026,683.683 855.585,683.683 856.145,683.683 856.704,683.683 857.263,683.683 857.822,683.683 858.382,683.683 858.941,683.683 859.5,683.683 860.059,683.683 860.619,683.683 861.178,683.683 861.737,683.683 862.296,683.683 862.856,683.683 863.415,683.683 863.974,683.683 864.533,683.683 865.093,683.683 865.652,683.683 866.211,683.683 866.77,683.683 867.33,683.683 867.889,683.683 868.448,683.683 869.007,683.683 869.567,683.683 870.126,683.683 870.685,683.683 871.244,683.683 871.804,683.683 872.363,683.683 872.922,683.683 873.481,683.683 874.041,683.683 874.6,683.683 875.159,683.683 875.718,683.683 876.278,683.683 876.837,683.683 877.396,683.683 877.955,683.683 878.515,683.683 879.074,683.683 879.633,683.683 880.192,683.683 880.752,683.683 881.311,683.683 881.87,683.683 882.429,683.683 882.989,683.683 883.548,683.683 884.107,683.683 884.666,683.683 885.226,683.683 885.785,683.683 886.344,683.683 886.903,683.683 887.463,683.683 888.022,683.683 888.581,683.683 889.14,683.683 889.7,683.683 890.259,683.683 890.818,683.683 891.377,683.683 891.937,683.683 892.496,683.683 893.055,683.683 893.614,683.683 894.174,683.683 894.733,683.683 895.292,683.683 895.851,683.683 896.411,683.683 896.97,683.683 897.529,683.683 898.088,683.683 898.648,683.683 899.207,683.683 899.766,683.683 900.325,683.683 900.885,683.683 901.444,683.683 902.003,683.683 902.562,683.683 903.122,683.683 903.681,683.683 904.24,683.683 904.799,683.683 905.359,683.683 905.918,683.683 906.477,683.683 907.036,683.683 907.596,683.683 908.155,683.683 908.714,683.683 909.273,683.683 909.833,683.683 910.392,683.683 910.951,683.683 911.51,683.683 912.07,683.683 912.629,683.683 913.188,683.683 913.747,683.683 914.307,683.683 914.866,683.683 915.425,683.683 915.984,683.683 916.544,683.683 917.103,683.683 917.662,683.683 918.221,683.683 918.781,683.683 919.34,683.683 919.899,683.683 920.458,683.683 921.018,683.683 921.577,683.683 922.136,683.683 922.695,683.683 923.255,683.683 923.814,683.683 924.373,683.683 924.932,683.683 925.492,683.683 926.051,683.683 926.61,683.683 927.169,683.683 927.729,683.683 928.288,683.683 928.847,683.683 929.406,683.683 929.966,683.683 930.525,683.683 931.084,683.683 931.644,683.683 932.203,683.683 932.762,683.683 933.321,683.683 933.881,683.683 934.44,683.683 934.999,683.683 935.558,683.683 936.118,683.683 936.677,683.683 937.236,683.683 937.795,683.683 938.355,683.683 938.914,683.683 939.473,683.683 940.032,683.683 940.592,683.683 941.151,683.683 941.71,683.683 942.269,683.683 942.829,683.683 943.388,683.683 943.947,683.683 944.506,683.683 945.066,683.683 945.625,683.683 946.184,683.683 946.743,683.683 947.303,683.683 947.862,683.683 948.421,683.683 948.98,683.683 949.54,683.683 950.099,683.683 950.658,683.683 951.217,683.683 951.777,683.683 952.336,683.683 952.895,683.683 953.454,683.683 954.014,683.683 954.573,683.683 955.132,683.683 955.691,683.683 956.251,683.683 956.81,683.683 957.369,683.683 957.928,683.683 958.488,683.683 959.047,683.683 959.606,683.683 960.165,683.683 960.725,683.683 961.284,683.683 961.843,683.683 962.402,683.683 962.962,683.683 963.521,683.683 964.08,683.683 964.639,683.683 965.199,683.683 965.758,683.683 966.317,683.683 966.876,683.683 967.436,683.683 967.995,683.683 968.554,683.683 969.113,683.683 969.673,683.683 970.232,683.683 970.791,683.683 971.35,683.683 971.91,683.683 972.469,683.683 973.028,683.683 973.587,683.683 974.147,683.683 974.706,683.683 975.265,683.683 975.824,683.683 976.384,683.683 976.943,683.683 977.502,683.683 978.061,683.683 978.621,683.683 979.18,683.683 979.739,683.683 980.298,683.683 980.858,683.683 981.417,683.683 981.976,683.683 982.535,683.683 983.095,683.683 983.654,683.683 984.213,683.683 984.772,683.683 985.332,683.683 985.891,683.683 986.45,683.683 987.009,683.683 987.569,683.683 988.128,683.683 988.687,683.683 989.246,683.683 989.806,683.683 990.365,683.683 990.924,683.683 991.483,683.683 992.043,683.683 992.602,683.683 993.161,683.683 993.72,683.683 994.28,683.683 994.839,683.683 995.398,683.683 995.957,683.683 996.517,683.683 997.076,683.683 997.635,683.683 998.194,683.683 998.754,683.683 999.313,683.683 999.872,683.683 1000.43,683.683 1000.99,683.683 1001.55,683.683 1002.11,683.683 1002.67,683.683 1003.23,683.683 1003.79,683.683 1004.35,683.683 1004.91,683.683 1005.46,683.683 1006.02,683.683 1006.58,683.683 1007.14,683.683 1007.7,683.683 1008.26,683.683 1008.82,683.683 1009.38,683.683 1009.94,683.683 1010.5,683.683 1011.06,683.683 1011.62,683.683 1012.18,683.683 1012.73,683.683 1013.29,683.683 1013.85,683.683 1014.41,683.683 1014.97,683.683 1015.53,683.683 1016.09,683.683 1016.65,683.683 1017.21,683.683 1017.77,683.683 1018.33,683.683 1018.89,683.683 1019.45,683.683 1020.01,683.683 1020.56,683.683 1021.12,683.683 1021.68,683.683 1022.24,683.683 1022.8,683.683 1023.36,683.683 1023.92,683.683 1024.48,683.683 1025.04,683.683 1025.6,683.683 1026.16,683.683 1026.72,683.683 1027.28,683.683 1027.83,683.683 1028.39,683.683 1028.95,683.683 1029.51,683.683 1030.07,683.683 1030.63,683.683 1031.19,683.683 1031.75,683.683 1032.31,683.683 1032.87,683.683 1033.43,683.683 1033.99,683.683 1034.55,683.683 1035.1,683.683 1035.66,683.683 1036.22,683.683 1036.78,683.683 1037.34,683.683 1037.9,683.683 1038.46,683.683 1039.02,683.683 1039.58,683.683 1040.14,683.683 1040.7,683.683 1041.26,683.683 1041.82,683.683 1042.38,683.683 1042.93,683.683 1043.49,683.683 1044.05,683.683 1044.61,683.683 1045.17,683.683 1045.73,683.683 1046.29,683.683 1046.85,683.683 1047.41,683.683 1047.97,683.683 1048.53,683.683 1049.09,683.683 1049.65,683.683 1050.2,683.683 1050.76,683.683 1051.32,683.683 1051.88,683.683 1052.44,683.683 1053,683.683 1053.56,683.683 1054.12,683.683 1054.68,683.683 1055.24,683.683 1055.8,683.683 1056.36,683.683 1056.92,683.683 1057.48,683.683 1058.03,683.683 1058.59,683.683 1059.15,683.683 1059.71,683.683 1060.27,683.683 1060.83,683.683 1061.39,683.683 1061.95,683.683 1062.51,683.683 1063.07,683.683 1063.63,683.683 1064.19,683.683 1064.75,683.683 1065.3,683.683 1065.86,683.683 1066.42,683.683 1066.98,683.683 1067.54,683.683 1068.1,683.683 1068.66,683.683 1069.22,683.683 1069.78,683.683 1070.34,683.683 1070.9,683.683 1071.46,683.683 1072.02,683.683 1072.57,683.683 1073.13,683.683 1073.69,683.683 1074.25,683.683 1074.81,683.683 1075.37,683.683 1075.93,683.683 1076.49,683.683 1077.05,683.683 1077.61,683.683 1078.17,683.683 1078.73,683.683 1079.29,683.683 1079.85,683.683 1080.4,683.683 1080.96,683.683 1081.52,683.683 1082.08,683.683 1082.64,683.683 1083.2,683.683 1083.76,683.683 1084.32,683.683 1084.88,683.683 1085.44,683.683 1086,683.683 1086.56,683.683 1087.12,683.683 1087.67,683.683 1088.23,683.683 1088.79,683.683 1089.35,683.683 1089.91,683.683 1090.47,683.683 1091.03,683.683 1091.59,683.683 1092.15,683.683 1092.71,683.683 1093.27,683.683 1093.83,683.683 1094.39,683.683 1094.94,683.683 1095.5,683.683 1096.06,683.683 1096.62,683.683 1097.18,683.683 1097.74,683.683 1098.3,683.683 1098.86,683.683 1099.42,683.683 1099.98,683.683 1100.54,683.683 1101.1,683.683 1101.66,683.683 1102.22,683.683 1102.77,683.683 1103.33,683.683 1103.89,683.683 1104.45,683.683 1105.01,683.683 1105.57,683.683 1106.13,683.683 1106.69,683.683 1107.25,683.683 1107.81,683.683 1108.37,683.683 1108.93,683.683 1109.49,683.683 1110.04,683.683 1110.6,683.683 1111.16,683.683 1111.72,683.683 1112.28,683.683 1112.84,683.683 1113.4,683.683 1113.96,683.683 1114.52,683.683 1115.08,683.683 1115.64,683.683 1116.2,683.683 1116.76,683.683 1117.31,683.683 1117.87,683.683 1118.43,683.683 1118.99,683.683 1119.55,683.683 1120.11,683.683 1120.67,683.683 1121.23,683.683 1121.79,683.683 1122.35,683.683 1122.91,683.683 1123.47,683.683 1124.03,683.683 1124.59,683.683 1125.14,683.683 1125.7,683.683 1126.26,683.683 1126.82,683.683 1127.38,683.683 1127.94,683.683 1128.5,683.683 1129.06,683.683 1129.62,683.683 1130.18,683.683 1130.74,683.683 1131.3,683.683 1131.86,683.683 1132.41,683.683 1132.97,683.683 1133.53,683.683 1134.09,683.683 1134.65,683.683 1135.21,683.683 1135.77,683.683 1136.33,683.683 1136.89,683.683 1137.45,683.683 1138.01,683.683 1138.57,683.683 1139.13,683.683 1139.68,683.683 1140.24,683.683 1140.8,683.683 1141.36,683.683 1141.92,683.683 1142.48,683.683 1143.04,683.683 1143.6,683.683 1144.16,683.683 1144.72,683.683 1145.28,683.683 1145.84,683.683 1146.4,683.683 1146.96,683.683 1147.51,683.683 1148.07,683.683 1148.63,683.683 1149.19,683.683 1149.75,683.683 1150.31,683.683 1150.87,683.683 1151.43,683.683 1151.99,683.683 1152.55,683.683 1153.11,683.683 1153.67,683.683 1154.23,683.683 1154.78,683.683 1155.34,683.683 1155.9,683.683 1156.46,683.683 1157.02,683.683 1157.58,683.683 1158.14,683.683 1158.7,683.683 1159.26,683.683 1159.82,683.683 1160.38,683.683 1160.94,683.683 1161.5,683.683 1162.05,683.683 1162.61,683.683 1163.17,683.683 1163.73,683.683 1164.29,683.683 1164.85,683.683 1165.41,683.683 1165.97,683.683 1166.53,683.683 1167.09,683.683 1167.65,683.683 1168.21,683.683 1168.77,683.683 1169.33,683.683 1169.88,683.683 1170.44,683.683 1171,683.683 1171.56,683.683 1172.12,683.683 1172.68,683.683 1173.24,683.683 1173.8,683.683 1174.36,683.683 1174.92,683.683 1175.48,683.683 1176.04,683.683 1176.6,683.683 1177.15,683.683 1177.71,683.683 1178.27,683.683 1178.83,683.683 1179.39,683.683 1179.95,683.683 1180.51,683.683 1181.07,683.683 1181.63,683.683 1182.19,683.683 1182.75,683.683 1183.31,683.683 1183.87,683.683 1184.43,683.683 1184.98,683.683 1185.54,683.683 1186.1,683.683 1186.66,683.683 1187.22,683.683 1187.78,683.683 1188.34,683.683 1188.9,683.683 1189.46,683.683 1190.02,683.683 1190.58,683.683 1191.14,683.683 1191.7,683.683 1192.25,683.683 1192.81,683.683 1193.37,683.683 1193.93,683.683 1194.49,683.683 1195.05,683.683 1195.61,683.683 1196.17,683.683 1196.73,683.683 1197.29,683.683 1197.85,683.683 1198.41,683.683 1198.97,683.683 1199.52,683.683 1200.08,683.683 1200.64,683.683 1201.2,683.683 1201.76,683.683 1202.32,683.683 1202.88,683.683 1203.44,683.683 1204,683.683 1204.56,683.683 1205.12,683.683 1205.68,683.683 1206.24,683.683 1206.8,683.683 1207.35,683.683 1207.91,683.683 1208.47,683.683 1209.03,683.683 1209.59,683.683 1210.15,683.683 1210.71,683.683 1211.27,683.683 1211.83,683.683 1212.39,683.683 1212.95,683.683 1213.51,683.683 1214.07,683.683 1214.62,683.683 1215.18,683.683 1215.74,683.683 1216.3,683.683 1216.86,683.683 1217.42,683.683 1217.98,683.683 1218.54,683.683 1219.1,683.683 1219.66,683.683 1220.22,683.683 1220.78,683.683 1221.34,683.683 1221.89,683.683 1222.45,683.683 1223.01,683.683 1223.57,683.683 1224.13,683.683 1224.69,683.683 1225.25,683.683 1225.81,683.683 1226.37,683.683 1226.93,683.683 1227.49,683.683 1228.05,683.683 1228.61,683.683 1229.17,683.683 1229.72,683.683 1230.28,683.683 1230.84,683.683 1231.4,683.683 1231.96,683.683 1232.52,683.683 1233.08,683.683 1233.64,683.683 1234.2,683.683 1234.76,683.683 1235.32,683.683 1235.88,683.683 1236.44,683.683 1236.99,683.683 1237.55,683.683 1238.11,683.683 1238.67,683.683 1239.23,683.683 1239.79,683.683 1240.35,683.683 1240.91,683.683 1241.47,683.683 1242.03,683.683 1242.59,683.683 1243.15,683.683 1243.71,683.683 1244.26,683.683 1244.82,683.683 1245.38,683.683 1245.94,683.683 1246.5,683.683 1247.06,683.683 1247.62,683.683 1248.18,683.683 1248.74,683.683 1249.3,683.683 1249.86,683.683 1250.42,683.683 1250.98,683.683 1251.54,683.683 1252.09,683.683 1252.65,683.683 1253.21,683.683 1253.77,683.683 1254.33,683.683 1254.89,683.683 1255.45,683.683 1256.01,683.683 1256.57,683.683 1257.13,683.683 1257.69,683.683 1258.25,683.683 1258.81,683.683 1259.36,683.683 1259.92,683.683 1260.48,683.683 1261.04,683.683 1261.6,683.683 1262.16,683.683 1262.72,683.683 1263.28,683.683 1263.84,683.683 1264.4,683.683 1264.96,683.683 1265.52,683.683 1266.08,683.683 1266.63,683.683 1267.19,683.683 1267.75,683.683 1268.31,683.683 1268.87,683.683 1269.43,683.683 1269.99,683.683 1270.55,683.683 1271.11,683.683 1271.67,683.683 1272.23,683.683 1272.79,683.683 1273.35,683.683 1273.91,683.683 1274.46,683.683 1275.02,683.683 1275.58,683.683 1276.14,683.683 1276.7,683.683 1277.26,683.683 1277.82,683.683 1278.38,683.683 1278.94,683.683 1279.5,683.683 1280.06,683.683 1280.62,683.683 1281.18,683.683 1281.73,683.683 1282.29,683.683 1282.85,683.683 1283.41,683.683 1283.97,683.683 1284.53,683.683 1285.09,683.683 1285.65,683.683 1286.21,683.683 1286.77,683.683 1287.33,683.683 1287.89,683.683 1288.45,683.683 1289,683.683 1289.56,683.683 1290.12,683.683 1290.68,683.683 1291.24,683.683 1291.8,683.683 1292.36,683.683 1292.92,683.683 1293.48,683.683 1294.04,683.683 1294.6,683.683 1295.16,683.683 1295.72,683.683 1296.28,683.683 1296.83,683.683 1297.39,683.683 1297.95,683.683 1298.51,683.683 1299.07,683.683 1299.63,683.683 1300.19,683.683 1300.75,683.683 1301.31,683.683 1301.87,683.683 1302.43,683.683 1302.99,683.683 1303.55,683.683 1304.1,683.683 1304.66,683.683 1305.22,683.683 1305.78,683.683 1306.34,683.683 1306.9,683.683 1307.46,683.683 1308.02,683.683 1308.58,683.683 1309.14,683.683 1309.7,683.683 1310.26,683.683 1310.82,683.683 1311.38,683.683 1311.93,683.683 1312.49,683.683 1313.05,683.683 1313.61,683.683 1314.17,683.683 1314.73,683.683 1315.29,683.683 1315.85,683.683 1316.41,683.683 1316.97,683.683 1317.53,683.683 1318.09,683.683 1318.65,683.683 1319.2,683.683 1319.76,683.683 1320.32,683.683 1320.88,683.683 1321.44,683.683 1322,683.683 1322.56,683.683 1323.12,683.683 1323.68,683.683 1324.24,683.683 1324.8,683.683 1325.36,683.683 1325.92,683.683 1326.47,683.683 1327.03,683.683 1327.59,683.683 1328.15,683.683 1328.71,683.683 1329.27,683.683 1329.83,683.683 1330.39,683.683 1330.95,683.683 1331.51,683.683 1332.07,683.683 1332.63,683.683 1333.19,683.683 1333.75,683.683 1334.3,683.683 1334.86,683.683 1335.42,683.683 1335.98,683.683 1336.54,683.683 1337.1,683.683 1337.66,683.683 1338.22,683.683 1338.78,683.683 1339.34,683.683 1339.9,683.683 1340.46,683.683 1341.02,683.683 1341.57,683.683 1342.13,683.683 1342.69,683.683 1343.25,683.683 1343.81,683.683 1344.37,683.683 1344.93,683.683 1345.49,683.683 1346.05,683.683 1346.61,683.683 1347.17,683.683 1347.73,683.683 1348.29,683.683 1348.84,683.683 1349.4,683.683 1349.96,683.683 1350.52,683.683 1351.08,683.683 1351.64,683.683 1352.2,683.683 1352.76,683.683 1353.32,683.683 1353.88,683.683 1354.44,683.683 1355,683.683 1355.56,683.683 1356.12,683.683 1356.67,683.683 1357.23,683.683 1357.79,683.683 1358.35,683.683 1358.91,683.683 1359.47,683.683 1360.03,683.683 1360.59,683.683 1361.15,683.683 1361.71,683.683 1362.27,683.683 1362.83,683.683 1363.39,683.683 1363.94,683.683 1364.5,683.683 1365.06,683.683 1365.62,683.683 1366.18,683.683 1366.74,683.683 1367.3,683.683 1367.86,683.683 1368.42,683.683 1368.98,683.683 1369.54,683.683 1370.1,683.683 1370.66,683.683 1371.21,683.683 1371.77,683.683 1372.33,683.683 1372.89,683.683 1373.45,683.683 1374.01,683.683 1374.57,683.683 1375.13,683.683 1375.69,683.683 1376.25,683.683 1376.81,683.683 1377.37,683.683 1377.93,683.683 1378.49,683.683 1379.04,683.683 1379.6,683.683 1380.16,683.683 1380.72,683.683 1381.28,683.683 1381.84,683.683 1382.4,683.683 1382.96,683.683 1383.52,683.683 1384.08,683.683 1384.64,683.683 1385.2,683.683 1385.76,683.683 1386.31,683.683 1386.87,683.683 1387.43,683.683 1387.99,683.683 1388.55,683.683 1389.11,683.683 1389.67,683.683 1390.23,683.683 1390.79,683.683 1391.35,683.683 1391.91,683.683 1392.47,683.683 1393.03,683.683 1393.58,683.683 1394.14,683.683 1394.7,683.683 1395.26,683.683 1395.82,683.683 1396.38,683.683 1396.94,683.683 1397.5,683.683 1398.06,683.683 1398.62,683.683 1399.18,683.683 1399.74,683.683 1400.3,683.683 1400.86,683.683 1401.41,683.683 1401.97,683.683 1402.53,683.683 1403.09,683.683 1403.65,683.683 1404.21,683.683 1404.77,683.683 1405.33,683.683 1405.89,683.683 1406.45,683.683 1407.01,683.683 1407.57,683.683 1408.13,683.683 1408.68,683.683 1409.24,683.683 1409.8,683.683 1410.36,683.683 1410.92,683.683 1411.48,683.683 1412.04,683.683 1412.6,683.683 1413.16,683.683 1413.72,683.683 1414.28,683.683 1414.84,683.683 1415.4,683.683 1415.95,683.683 1416.51,683.683 1417.07,683.683 1417.63,683.683 1418.19,683.683 1418.75,683.683 1419.31,683.683 1419.87,683.683 1420.43,683.683 1420.99,683.683 1421.55,683.683 1422.11,683.683 1422.67,683.683 1423.23,683.683 1423.78,683.683 1424.34,683.683 1424.9,683.683 1425.46,683.683 1426.02,683.683 1426.58,683.683 1427.14,683.683 1427.7,683.683 1428.26,683.683 1428.82,683.683 1429.38,683.683 1429.94,683.683 1430.5,683.683 1431.05,683.683 1431.61,683.683 1432.17,683.683 1432.73,683.683 1433.29,683.683 1433.85,683.683 1434.41,683.683 1434.97,683.683 1435.53,683.683 1436.09,683.683 1436.65,683.683 1437.21,683.683 1437.77,683.683 1438.33,683.683 1438.88,683.683 1439.44,683.683 1440,683.683 1440.56,683.683 1441.12,683.683 1441.68,683.683 1442.24,683.683 1442.8,683.683 1443.36,683.683 1443.92,683.683 1444.48,683.683 1445.04,683.683 1445.6,683.683 1446.15,683.683 1446.71,683.683 1447.27,683.683 1447.83,683.683 1448.39,683.683 1448.95,683.683 1449.51,683.683 1450.07,683.683 1450.63,683.683 1451.19,683.683 1451.75,683.683 1452.31,683.683 1452.87,683.683 1453.42,683.683 1453.98,683.683 1454.54,683.683 1455.1,683.683 1455.66,683.683 1456.22,683.683 1456.78,683.683 1457.34,683.683 1457.9,683.683 1458.46,683.683 1459.02,683.683 1459.58,683.683 1460.14,683.683 1460.7,683.683 1461.25,683.683 1461.81,683.683 1462.37,683.683 1462.93,683.683 1463.49,683.683 1464.05,683.683 1464.61,683.683 1465.17,683.683 1465.73,683.683 1466.29,683.683 1466.85,683.683 1467.41,683.683 1467.97,683.683 1468.52,683.683 1469.08,683.683 1469.64,683.683 1470.2,683.683 1470.76,683.683 1471.32,683.683 1471.88,683.683 1472.44,683.683 1473,683.683 1473.56,683.683 1474.12,683.683 1474.68,683.683 1475.24,683.683 1475.79,683.683 1476.35,683.683 1476.91,683.683 1477.47,683.683 1478.03,683.683 1478.59,683.683 1479.15,683.683 1479.71,683.683 1480.27,683.683 1480.83,683.683 1481.39,683.683 1481.95,683.683 1482.51,683.683 1483.07,683.683 1483.62,683.683 1484.18,683.683 1484.74,683.683 1485.3,683.683 1485.86,683.683 1486.42,683.683 1486.98,683.683 1487.54,683.683 1488.1,683.683 1488.66,683.683 1489.22,683.683 1489.78,683.683 1490.34,683.683 1490.89,683.683 1491.45,683.683 1492.01,683.683 1492.57,683.683 1493.13,683.683 1493.69,683.683 1494.25,683.683 1494.81,683.683 1495.37,683.683 1495.93,683.683 1496.49,683.683 1497.05,683.683 1497.61,683.683 1498.16,683.683 1498.72,683.683 1499.28,683.683 1499.84,683.683 1500.4,683.683 1500.96,683.683 1501.52,683.683 1502.08,683.683 1502.64,683.683 1503.2,683.683 1503.76,683.683 1504.32,683.683 1504.88,683.683 1505.44,683.683 1505.99,683.683 1506.55,683.683 1507.11,683.683 1507.67,683.683 1508.23,683.683 1508.79,683.683 1509.35,683.683 1509.91,683.683 1510.47,683.683 1511.03,683.683 1511.59,683.683 1512.15,683.683 1512.71,683.683 1513.26,683.683 1513.82,683.683 1514.38,683.683 1514.94,683.683 1515.5,683.683 1516.06,683.683 1516.62,683.683 1517.18,683.683 1517.74,683.683 1518.3,683.683 1518.86,683.683 1519.42,683.683 1519.98,683.683 1520.53,683.683 1521.09,683.683 1521.65,683.683 1522.21,683.683 1522.77,683.683 1523.33,683.683 1523.89,683.683 1524.45,683.683 1525.01,683.683 1525.57,683.683 1526.13,683.683 1526.69,683.683 1527.25,683.683 1527.81,683.683 1528.36,683.683 1528.92,683.683 1529.48,683.683 1530.04,683.683 1530.6,683.683 1531.16,683.683 1531.72,683.683 1532.28,683.683 1532.84,683.683 1533.4,683.683 1533.96,683.683 1534.52,683.683 1535.08,683.683 1535.63,683.683 1536.19,683.683 1536.75,683.683 1537.31,683.683 1537.87,683.683 1538.43,683.683 1538.99,683.683 1539.55,683.683 1540.11,683.683 1540.67,683.683 1541.23,683.683 1541.79,683.683 1542.35,683.683 1542.9,683.683 1543.46,683.683 1544.02,683.683 1544.58,683.683 1545.14,683.683 1545.7,683.683 1546.26,683.683 1546.82,683.683 1547.38,683.683 1547.94,683.683 1548.5,683.683 1549.06,683.683 1549.62,683.683 1550.18,683.683 1550.73,683.683 1551.29,683.683 1551.85,683.683 1552.41,683.683 1552.97,683.683 1553.53,683.683 1554.09,683.683 1554.65,683.683 1555.21,683.683 1555.77,683.683 1556.33,683.683 1556.89,683.683 1557.45,683.683 1558,683.683 1558.56,683.683 1559.12,683.683 1559.68,683.683 1560.24,683.683 1560.8,683.683 1561.36,683.683 1561.92,683.683 1562.48,683.683 1563.04,683.683 1563.6,683.683 1564.16,683.683 1564.72,683.683 1565.28,683.683 1565.83,683.683 1566.39,683.683 1566.95,683.683 1567.51,683.683 1568.07,683.683 1568.63,683.683 1569.19,683.683 1569.75,683.683 1570.31,683.683 1570.87,683.683 1571.43,683.683 1571.99,683.683 1572.55,683.683 1573.1,683.683 1573.66,683.683 1574.22,683.683 1574.78,683.683 1575.34,683.683 1575.9,683.683 1576.46,683.683 1577.02,683.683 1577.58,683.683 1578.14,683.683 1578.7,683.683 1579.26,683.683 1579.82,683.683 1580.37,683.683 1580.93,683.683 1581.49,683.683 1582.05,683.683 1582.61,683.683 1583.17,683.683 1583.73,683.683 1584.29,683.683 1584.85,683.683 1585.41,683.683 1585.97,683.683 1586.53,683.683 1587.09,683.683 1587.65,683.683 1588.2,683.683 1588.76,683.683 1589.32,683.683 1589.88,683.683 1590.44,683.683 1591,683.683 1591.56,683.683 1592.12,683.683 1592.68,683.683 1593.24,683.683 1593.8,683.683 1594.36,683.683 1594.92,683.683 1595.47,683.683 1596.03,683.683 1596.59,683.683 1597.15,683.683 1597.71,683.683 1598.27,683.683 1598.83,683.683 1599.39,683.683 1599.95,683.683 1600.51,683.683 1601.07,683.683 1601.63,683.683 1602.19,683.683 1602.74,683.683 1603.3,683.683 1603.86,683.683 1604.42,683.683 1604.98,683.683 1605.54,683.683 1606.1,683.683 1606.66,683.683 1607.22,683.683 1607.78,683.683 1608.34,683.683 1608.9,683.683 1609.46,683.683 1610.02,683.683 1610.57,683.683 1611.13,683.683 1611.69,683.683 1612.25,683.683 1612.81,683.683 1613.37,683.683 1613.93,683.683 1614.49,683.683 1615.05,683.683 1615.61,683.683 1616.17,683.683 1616.73,683.683 1617.29,683.683 1617.84,683.683 1618.4,683.683 1618.96,683.683 1619.52,683.683 1620.08,683.683 1620.64,683.683 1621.2,683.683 1621.76,683.683 1622.32,683.683 1622.88,683.683 1623.44,683.683 1624,683.683 1624.56,683.683 1625.11,683.683 1625.67,683.683 1626.23,683.683 1626.79,683.683 1627.35,683.683 1627.91,683.683 1628.47,683.683 1629.03,683.683 1629.59,683.683 1630.15,683.683 1630.71,683.683 1631.27,683.683 1631.83,683.683 1632.39,683.683 1632.94,683.683 1633.5,683.683 1634.06,683.683 1634.62,683.683 1635.18,683.683 1635.74,683.683 1636.3,683.683 1636.86,683.683 1637.42,683.683 1637.98,683.683 1638.54,683.683 1639.1,683.683 1639.66,683.683 1640.21,683.683 1640.77,683.683 1641.33,683.683 1641.89,683.683 1642.45,683.683 1643.01,683.683 1643.57,683.683 1644.13,683.683 1644.69,683.683 1645.25,683.683 1645.81,683.683 1646.37,683.683 1646.93,683.683 1647.48,683.683 1648.04,683.683 1648.6,683.683 1649.16,683.683 1649.72,683.683 1650.28,683.683 1650.84,683.683 1651.4,683.683 1651.96,683.683 1652.52,683.683 1653.08,683.683 1653.64,683.683 1654.2,683.683 1654.76,683.683 1655.31,683.683 1655.87,683.683 1656.43,683.683 1656.99,683.683 1657.55,683.683 1658.11,683.683 1658.67,683.683 1659.23,683.683 1659.79,683.683 1660.35,683.683 1660.91,683.683 1661.47,683.683 1662.03,683.683 1662.58,683.683 1663.14,683.683 1663.7,683.683 1664.26,683.683 1664.82,683.683 1665.38,683.683 1665.94,683.683 1666.5,683.683 1667.06,683.683 1667.62,683.683 1668.18,683.683 1668.74,683.683 1669.3,683.683 1669.85,683.683 1670.41,683.683 1670.97,683.683 1671.53,683.683 1672.09,683.683 1672.65,683.683 1673.21,683.683 1673.77,683.683 1674.33,683.683 1674.89,683.683 1675.45,683.683 1676.01,683.683 1676.57,683.683 1677.13,683.683 1677.68,683.683 1678.24,683.683 1678.8,683.683 1679.36,683.683 1679.92,683.683 1680.48,683.683 1681.04,683.683 1681.6,683.683 1682.16,683.683 1682.72,683.683 1683.28,683.683 1683.84,683.683 1684.4,683.683 1684.95,683.683 1685.51,683.683 1686.07,683.683 1686.63,683.683 1687.19,683.683 1687.75,683.683 1688.31,683.683 1688.87,683.683 1689.43,683.683 1689.99,683.683 1690.55,683.683 1691.11,683.683 1691.67,683.683 1692.23,683.683 1692.78,683.683 1693.34,683.683 1693.9,683.683 1694.46,683.683 1695.02,683.683 1695.58,683.683 1696.14,683.683 1696.7,683.683 1697.26,683.683 1697.82,683.683 1698.38,683.683 1698.94,683.683 1699.5,683.683 1700.05,683.683 1700.61,683.683 1701.17,683.683 1701.73,683.683 1702.29,683.683 1702.85,683.683 1703.41,683.683 1703.97,683.683 1704.53,683.683 1705.09,683.683 1705.65,683.683 1706.21,683.683 1706.77,683.683 1707.32,683.683 1707.88,683.683 1708.44,683.683 1709,683.683 1709.56,683.683 1710.12,683.683 1710.68,683.683 1711.24,683.683 1711.8,683.683 1712.36,683.683 1712.92,683.683 1713.48,683.683 1714.04,683.683 1714.6,683.683 1715.15,683.683 1715.71,683.683 1716.27,683.683 1716.83,683.683 1717.39,683.683 1717.95,683.683 1718.51,683.683 1719.07,683.683 1719.63,683.683 1720.19,683.683 1720.75,683.683 1721.31,683.683 1721.87,683.683 1722.42,683.683 1722.98,683.683 1723.54,683.683 1724.1,683.683 1724.66,683.683 1725.22,683.683 1725.78,683.683 1726.34,683.683 1726.9,683.683 1727.46,683.683 1728.02,683.683 1728.58,683.683 1729.14,683.683 1729.69,683.683 1730.25,683.683 1730.81,683.683 1731.37,683.683 1731.93,683.683 1732.49,683.683 1733.05,683.683 1733.61,683.683 1734.17,683.683 1734.73,683.683 1735.29,683.683 1735.85,683.683 1736.41,683.683 1736.97,683.683 1737.52,683.683 1738.08,683.683 1738.64,683.683 1739.2,683.683 1739.76,683.683 1740.32,683.683 1740.88,683.683 1741.44,683.683 1742,683.683 1742.56,683.683 1743.12,683.683 1743.68,683.683 1744.24,683.683 1744.79,683.683 1745.35,683.683 1745.91,683.683 1746.47,683.683 1747.03,683.683 1747.59,683.683 1748.15,683.683 1748.71,683.683 1749.27,683.683 1749.83,683.683 1750.39,683.683 1750.95,683.683 1751.51,683.683 1752.06,683.683 1752.62,683.683 1753.18,683.683 1753.74,683.683 1754.3,683.683 1754.86,683.683 1755.42,683.683 1755.98,683.683 1756.54,683.683 1757.1,683.683 1757.66,683.683 1758.22,683.683 1758.78,683.683 1759.34,683.683 1759.89,683.683 1760.45,683.683 1761.01,683.683 1761.57,683.683 1762.13,683.683 1762.69,683.683 1763.25,683.683 1763.81,683.683 1764.37,683.683 1764.93,683.683 1765.49,683.683 1766.05,683.683 1766.61,683.683 1767.16,683.683 1767.72,683.683 1768.28,683.683 1768.84,683.683 1769.4,683.683 1769.96,683.683 1770.52,683.683 1771.08,683.683 1771.64,683.683 1772.2,683.683 1772.76,683.683 1773.32,683.683 1773.88,683.683 1774.43,683.683 1774.99,683.683 1775.55,683.683 1776.11,683.683 1776.67,683.683 1777.23,683.683 1777.79,683.683 1778.35,683.683 1778.91,683.683 1779.47,683.683 1780.03,683.683 1780.59,683.683 1781.15,683.683 1781.71,683.683 1782.26,683.683 1782.82,683.683 1783.38,683.683 1783.94,683.683 1784.5,683.683 1785.06,683.683 1785.62,683.683 1786.18,683.683 1786.74,683.683 1787.3,683.683 1787.86,683.683 1788.42,683.683 1788.98,683.683 1789.53,683.683 1790.09,683.683 1790.65,683.683 1791.21,683.683 1791.77,683.683 1792.33,683.683 1792.89,683.683 1793.45,683.683 1794.01,683.683 1794.57,683.683 1795.13,683.683 1795.69,683.683 1796.25,683.683 1796.8,683.683 1797.36,683.683 1797.92,683.683 1798.48,683.683 1799.04,683.683 1799.6,683.683 1800.16,683.683 1800.72,683.683 1801.28,683.683 1801.84,683.683 1802.4,683.683 1802.96,683.683 1803.52,683.683 1804.08,683.683 1804.63,683.683 1805.19,683.683 1805.75,683.683 1806.31,683.683 1806.87,683.683 1807.43,683.683 1807.99,683.683 1808.55,683.683 1809.11,683.683 1809.67,683.683 1810.23,683.683 1810.79,683.683 1811.35,683.683 1811.9,683.683 1812.46,683.683 1813.02,683.683 1813.58,683.683 1814.14,683.683 1814.7,683.683 1815.26,683.683 1815.82,683.683 1816.38,683.683 1816.94,683.683 1817.5,683.683 1818.06,683.683 1818.62,683.683 1819.18,683.683 1819.73,683.683 1820.29,683.683 1820.85,683.683 1821.41,683.683 1821.97,683.683 1822.53,683.683 1823.09,683.683 1823.65,683.683 1824.21,683.683 1824.77,683.683 1825.33,683.683 1825.89,683.683 1826.45,683.683 1827,683.683 1827.56,683.683 1828.12,683.683 1828.68,683.683 1829.24,683.683 1829.8,683.683 1830.36,683.683 1830.92,683.683 1831.48,683.683 1832.04,683.683 1832.6,683.683 1833.16,683.683 1833.72,683.683 1834.27,683.683 1834.83,683.683 1835.39,683.683 1835.95,683.683 1836.51,683.683 1837.07,683.683 1837.63,683.683 1838.19,683.683 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.028620140325496 ± 0.02002780164161725\nProjected Energy: -4.015578283402595 ± (0.0031568853380852246, 0.003384168946351629)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.447881</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.5309e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.1512e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.628e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.312e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.655e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.256e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133726\n -0.7590191922770781\n  0.13584182219622853\n  0.15789998694606666\n  0.8767114411781307\n  1.5305929970973313\n  1.5835732611867295\n  3.072870330325868\n  3.1256726539518347\n  4.862107221562173\n  6.260694850380597\n  6.402671211183109\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues\n3-element Vector{Float64}:\n -1.9999999999999996\n  0.9999999999999997\n  1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector\n3-element Vector{Float64}:\n -0.5773502691896257\n -0.5773502691896255\n -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => -0.57735\n  fs\"|0 1 0⟩\" => -0.57735\n  fs\"|1 0 0⟩\" => -0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.1. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
