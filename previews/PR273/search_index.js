var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21316148559313733 ± 0.0025085770088756443\n   G2(1) = 0.916652156571355 ± 0.0007395296243368396\n   G2(2) = 0.9829066746152917 ± 0.0007693755269030212\n   G2(3) = 0.9877208520335683 ± 0.001342054323533189\n   G2(4) = 0.9829066746152917 ± 0.0007693755269030212\n   G2(5) = 0.916652156571355 ± 0.0007395296243368396\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.058223198022465 ± 0.12986013639726174\n   Replica 2: -4.076167291721 ± 0.12522780162420807\n   Replica 3: -4.01044187152581 ± 0.1430732670183099\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip720\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip720)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip721\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip720)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip722\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.81 2211.02,1260.81 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.77 2211.02,1003.77 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.733 2211.02,746.733 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,489.695 2211.02,489.695 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,232.656 2211.02,232.656 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.81 423.181,1260.81 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.77 423.181,1003.77 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.733 423.181,746.733 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,489.695 423.181,489.695 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,232.656 423.181,232.656 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M356.339 1246.61 Q352.728 1246.61 350.899 1250.17 Q349.094 1253.72 349.094 1260.84 Q349.094 1267.95 350.899 1271.52 Q352.728 1275.06 356.339 1275.06 Q359.973 1275.06 361.779 1271.52 Q363.608 1267.95 363.608 1260.84 Q363.608 1253.72 361.779 1250.17 Q359.973 1246.61 356.339 1246.61 M356.339 1242.91 Q362.149 1242.91 365.205 1247.51 Q368.284 1252.09 368.284 1260.84 Q368.284 1269.57 365.205 1274.18 Q362.149 1278.76 356.339 1278.76 Q350.529 1278.76 347.45 1274.18 Q344.395 1269.57 344.395 1260.84 Q344.395 1252.09 347.45 1247.51 Q350.529 1242.91 356.339 1242.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M290.043 1017.12 L306.363 1017.12 L306.363 1021.05 L284.418 1021.05 L284.418 1017.12 Q287.08 1014.36 291.664 1009.73 Q296.27 1005.08 297.451 1003.74 Q299.696 1001.21 300.576 999.478 Q301.478 997.718 301.478 996.029 Q301.478 993.274 299.534 991.538 Q297.613 989.802 294.511 989.802 Q292.312 989.802 289.858 990.566 Q287.427 991.33 284.65 992.88 L284.65 988.158 Q287.474 987.024 289.927 986.445 Q292.381 985.867 294.418 985.867 Q299.789 985.867 302.983 988.552 Q306.177 991.237 306.177 995.728 Q306.177 997.857 305.367 999.779 Q304.58 1001.68 302.474 1004.27 Q301.895 1004.94 298.793 1008.16 Q295.691 1011.35 290.043 1017.12 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M316.224 986.492 L334.58 986.492 L334.58 990.427 L320.506 990.427 L320.506 998.899 Q321.524 998.552 322.543 998.39 Q323.562 998.205 324.58 998.205 Q330.367 998.205 333.747 1001.38 Q337.126 1004.55 337.126 1009.96 Q337.126 1015.54 333.654 1018.64 Q330.182 1021.72 323.862 1021.72 Q321.687 1021.72 319.418 1021.35 Q317.173 1020.98 314.765 1020.24 L314.765 1015.54 Q316.849 1016.68 319.071 1017.23 Q321.293 1017.79 323.77 1017.79 Q327.774 1017.79 330.112 1015.68 Q332.45 1013.57 332.45 1009.96 Q332.45 1006.35 330.112 1004.25 Q327.774 1002.14 323.77 1002.14 Q321.895 1002.14 320.02 1002.56 Q318.168 1002.97 316.224 1003.85 L316.224 986.492 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M356.339 989.57 Q352.728 989.57 350.899 993.135 Q349.094 996.677 349.094 1003.81 Q349.094 1010.91 350.899 1014.48 Q352.728 1018.02 356.339 1018.02 Q359.973 1018.02 361.779 1014.48 Q363.608 1010.91 363.608 1003.81 Q363.608 996.677 361.779 993.135 Q359.973 989.57 356.339 989.57 M356.339 985.867 Q362.149 985.867 365.205 990.473 Q368.284 995.056 368.284 1003.81 Q368.284 1012.53 365.205 1017.14 Q362.149 1021.72 356.339 1021.72 Q350.529 1021.72 347.45 1017.14 Q344.395 1012.53 344.395 1003.81 Q344.395 995.056 347.45 990.473 Q350.529 985.867 356.339 985.867 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M286.062 729.453 L304.418 729.453 L304.418 733.388 L290.344 733.388 L290.344 741.86 Q291.363 741.513 292.381 741.351 Q293.4 741.166 294.418 741.166 Q300.205 741.166 303.585 744.337 Q306.964 747.509 306.964 752.925 Q306.964 758.504 303.492 761.606 Q300.02 764.684 293.701 764.684 Q291.525 764.684 289.256 764.314 Q287.011 763.944 284.603 763.203 L284.603 758.504 Q286.687 759.638 288.909 760.194 Q291.131 760.749 293.608 760.749 Q297.613 760.749 299.951 758.643 Q302.288 756.536 302.288 752.925 Q302.288 749.314 299.951 747.208 Q297.613 745.101 293.608 745.101 Q291.733 745.101 289.858 745.518 Q288.006 745.934 286.062 746.814 L286.062 729.453 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M326.177 732.532 Q322.566 732.532 320.737 736.097 Q318.932 739.638 318.932 746.768 Q318.932 753.874 320.737 757.439 Q322.566 760.981 326.177 760.981 Q329.811 760.981 331.617 757.439 Q333.446 753.874 333.446 746.768 Q333.446 739.638 331.617 736.097 Q329.811 732.532 326.177 732.532 M326.177 728.828 Q331.987 728.828 335.043 733.435 Q338.122 738.018 338.122 746.768 Q338.122 755.495 335.043 760.101 Q331.987 764.684 326.177 764.684 Q320.367 764.684 317.288 760.101 Q314.233 755.495 314.233 746.768 Q314.233 738.018 317.288 733.435 Q320.367 728.828 326.177 728.828 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M356.339 732.532 Q352.728 732.532 350.899 736.097 Q349.094 739.638 349.094 746.768 Q349.094 753.874 350.899 757.439 Q352.728 760.981 356.339 760.981 Q359.973 760.981 361.779 757.439 Q363.608 753.874 363.608 746.768 Q363.608 739.638 361.779 736.097 Q359.973 732.532 356.339 732.532 M356.339 728.828 Q362.149 728.828 365.205 733.435 Q368.284 738.018 368.284 746.768 Q368.284 755.495 365.205 760.101 Q362.149 764.684 356.339 764.684 Q350.529 764.684 347.45 760.101 Q344.395 755.495 344.395 746.768 Q344.395 738.018 347.45 733.435 Q350.529 728.828 356.339 728.828 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M284.835 472.415 L307.057 472.415 L307.057 474.405 L294.511 506.975 L289.627 506.975 L301.432 476.35 L284.835 476.35 L284.835 472.415 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M316.224 472.415 L334.58 472.415 L334.58 476.35 L320.506 476.35 L320.506 484.822 Q321.524 484.475 322.543 484.313 Q323.562 484.127 324.58 484.127 Q330.367 484.127 333.747 487.299 Q337.126 490.47 337.126 495.887 Q337.126 501.465 333.654 504.567 Q330.182 507.646 323.862 507.646 Q321.687 507.646 319.418 507.276 Q317.173 506.905 314.765 506.164 L314.765 501.465 Q316.849 502.6 319.071 503.155 Q321.293 503.711 323.77 503.711 Q327.774 503.711 330.112 501.604 Q332.45 499.498 332.45 495.887 Q332.45 492.276 330.112 490.169 Q327.774 488.063 323.77 488.063 Q321.895 488.063 320.02 488.479 Q318.168 488.896 316.224 489.776 L316.224 472.415 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M356.339 475.493 Q352.728 475.493 350.899 479.058 Q349.094 482.6 349.094 489.729 Q349.094 496.836 350.899 500.401 Q352.728 503.942 356.339 503.942 Q359.973 503.942 361.779 500.401 Q363.608 496.836 363.608 489.729 Q363.608 482.6 361.779 479.058 Q359.973 475.493 356.339 475.493 M356.339 471.79 Q362.149 471.79 365.205 476.396 Q368.284 480.979 368.284 489.729 Q368.284 498.456 365.205 503.063 Q362.149 507.646 356.339 507.646 Q350.529 507.646 347.45 503.063 Q344.395 498.456 344.395 489.729 Q344.395 480.979 347.45 476.396 Q350.529 471.79 356.339 471.79 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M256.664 246.001 L264.303 246.001 L264.303 219.635 L255.992 221.302 L255.992 217.043 L264.256 215.376 L268.932 215.376 L268.932 246.001 L276.571 246.001 L276.571 249.936 L256.664 249.936 L256.664 246.001 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M296.015 218.455 Q292.404 218.455 290.576 222.02 Q288.77 225.561 288.77 232.691 Q288.77 239.797 290.576 243.362 Q292.404 246.904 296.015 246.904 Q299.65 246.904 301.455 243.362 Q303.284 239.797 303.284 232.691 Q303.284 225.561 301.455 222.02 Q299.65 218.455 296.015 218.455 M296.015 214.751 Q301.826 214.751 304.881 219.358 Q307.96 223.941 307.96 232.691 Q307.96 241.418 304.881 246.024 Q301.826 250.607 296.015 250.607 Q290.205 250.607 287.127 246.024 Q284.071 241.418 284.071 232.691 Q284.071 223.941 287.127 219.358 Q290.205 214.751 296.015 214.751 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M326.177 218.455 Q322.566 218.455 320.737 222.02 Q318.932 225.561 318.932 232.691 Q318.932 239.797 320.737 243.362 Q322.566 246.904 326.177 246.904 Q329.811 246.904 331.617 243.362 Q333.446 239.797 333.446 232.691 Q333.446 225.561 331.617 222.02 Q329.811 218.455 326.177 218.455 M326.177 214.751 Q331.987 214.751 335.043 219.358 Q338.122 223.941 338.122 232.691 Q338.122 241.418 335.043 246.024 Q331.987 250.607 326.177 250.607 Q320.367 250.607 317.288 246.024 Q314.233 241.418 314.233 232.691 Q314.233 223.941 317.288 219.358 Q320.367 214.751 326.177 214.751 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M356.339 218.455 Q352.728 218.455 350.899 222.02 Q349.094 225.561 349.094 232.691 Q349.094 239.797 350.899 243.362 Q352.728 246.904 356.339 246.904 Q359.973 246.904 361.779 243.362 Q363.608 239.797 363.608 232.691 Q363.608 225.561 361.779 222.02 Q359.973 218.455 356.339 218.455 M356.339 214.751 Q362.149 214.751 365.205 219.358 Q368.284 223.941 368.284 232.691 Q368.284 241.418 365.205 246.024 Q362.149 250.607 356.339 250.607 Q350.529 250.607 347.45 246.024 Q344.395 241.418 344.395 232.691 Q344.395 223.941 347.45 219.358 Q350.529 214.751 356.339 214.751 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip722)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,232.656 4017.76,232.656 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1248.03 459.396,1247.58 459.964,1247.05 460.533,1246.47 461.101,1245.81 461.669,1245.08 462.238,1244.26 462.806,1243.37 463.375,1241.35 463.943,1240.28 464.511,1238.08 465.08,1236.81 465.648,1235.42 466.216,1233.92 466.785,1231.26 467.353,1229.49 467.921,1226.57 468.49,1224.52 469.058,1222.36 469.626,1220.04 470.195,1217.57 470.763,1214.9 471.331,1212.06 471.9,1209.08 472.468,1205.89 473.036,1201.51 473.605,1197.96 474.173,1192.18 474.741,1186.17 475.31,1182.09 475.878,1177.8 476.446,1172.28 477.015,1166.48 477.583,1160.52 478.152,1154.25 478.72,1148.84 479.288,1142.12 479.857,1136.34 480.425,1130.28 480.993,1123.98 481.562,1117.46 482.13,1108.72 482.698,1099.65 483.267,1090.44 483.835,1083.04 484.403,1073.36 484.972,1064.63 485.54,1056.62 486.108,1048.4 486.677,1040.16 487.245,1031.6 487.813,1020.68 488.382,1008.69 488.95,995.789 489.518,985.724 490.087,975.63 490.655,966.453 491.224,956.082 491.792,944.683 492.36,934.33 492.929,924.746 493.497,912.185 494.065,901.609 494.634,891.084 495.202,881.549 495.77,870.981 496.339,858.382 496.907,846.81 497.475,837.462 498.044,826.997 498.612,816.33 499.18,805.988 499.749,794.461 500.317,784.043 500.885,771.7 501.454,759.489 502.022,749.586 502.59,740.777 503.159,732.065 503.727,721.222 504.295,712.548 504.864,699.755 505.432,688.334 506.001,680.027 506.569,669.664 507.137,661.6 507.706,649.534 508.274,641.987 508.842,632.284 509.411,622.729 509.979,615.357 510.547,608.097 511.116,598.693 511.684,590.734 512.252,581.587 512.821,573.746 513.389,566.966 513.957,560.348 514.526,551.632 515.094,544.164 515.662,536.611 516.231,530.357 516.799,520.18 517.367,513.147 517.936,506.378 518.504,500.739 519.072,493.091 519.641,485.931 520.209,480.713 520.778,476.595 521.346,467.304 521.914,464.467 522.483,458.656 523.051,450.736 523.619,445.236 524.188,437.79 524.756,432.833 525.324,428.764 525.893,423.635 526.461,420.953 527.029,417.17 527.598,413.449 528.166,408.716 528.734,402.824 529.303,399.411 529.871,394.137 530.439,390.092 531.008,384.109 531.576,380.162 532.144,374.497 532.713,370.768 533.281,369.281 533.85,365.662 534.418,361.018 534.986,356.633 535.555,352.476 536.123,348.537 536.691,344.609 537.26,341.657 537.828,337.005 538.396,336.559 538.965,336.247 539.533,334.565 540.101,331.851 540.67,330.306 541.238,327.843 541.806,324.443 542.375,322.016 542.943,320.764 543.511,319.389 544.08,317.014 544.648,317.758 545.216,312.376 545.785,311.298 546.353,311.105 546.921,309.764 547.49,306.516 548.058,304.37 548.627,300.414 549.195,299.667 549.763,296.695 550.332,296.956 550.9,292.105 551.468,291.644 552.037,290.29 552.605,287.69 553.173,286.374 553.742,284.962 554.31,282.712 554.878,281.551 555.447,281.386 556.015,281.232 556.583,279.956 557.152,279.553 557.72,278.368 558.288,277.329 558.857,277.045 559.425,278.921 559.993,276.588 560.562,273.452 561.13,273.295 561.698,272.324 562.267,271.446 562.835,270.633 563.404,271.632 563.972,271.535 564.54,271.342 565.109,271.172 565.677,269.865 566.245,270.709 566.814,268.387 567.382,266.317 567.95,266.1 568.519,261.797 569.087,262.021 569.655,263.288 570.224,264.089 570.792,263.949 571.36,264.961 571.929,264.878 572.497,263.72 573.065,263.385 573.634,263.412 574.202,262.193 574.77,260.007 575.339,258.892 575.907,259.757 576.476,258.735 577.044,257.717 577.612,255.902 578.181,255.048 578.749,253.383 579.317,252.827 579.886,254.024 580.454,254.225 581.022,255.545 581.591,256.833 582.159,256.942 582.727,257.057 583.296,255.949 583.864,256.961 584.432,255.81 585.001,254.488 585.569,254.725 586.137,253.726 586.706,253.94 587.274,254.85 587.842,253.641 588.411,252.448 588.979,250.516 589.547,249.761 590.116,247.871 590.684,247.196 591.253,247.691 591.821,244.023 592.389,244.508 592.958,245.172 593.526,244.676 594.094,245.089 594.663,243.457 595.231,246.017 595.799,245.5 596.368,245.903 596.936,246.383 597.504,246.983 598.073,247.046 598.641,247.215 599.209,251.592 599.778,251.545 600.346,251.281 600.914,250.379 601.483,251.498 602.051,252.494 602.619,253.173 603.188,253.069 603.756,252.719 604.325,252.452 604.893,251.18 605.461,250.775 606.03,248.571 606.598,248.407 607.166,245.351 607.735,246.508 608.303,247.695 608.871,247.67 609.44,245.535 610.008,246.664 610.576,248.806 611.145,247.507 611.713,247.501 612.281,249.483 612.85,247.22 613.418,248.123 613.986,246.965 614.555,247.007 615.123,247.798 615.691,247.624 616.26,247.294 616.828,246.996 617.396,246.839 617.965,245.628 618.533,245.447 619.102,245.473 619.67,244.186 620.238,242.02 620.807,238.958 621.375,240.465 621.943,239.78 622.512,240.199 623.08,240.525 623.648,240.712 624.217,240.755 624.785,239.941 625.353,239.279 625.922,243.572 626.49,242.593 627.058,241.68 627.627,240.784 628.195,239.89 628.763,239.056 629.332,237.355 629.9,238.339 630.468,239.607 631.037,239.705 631.605,237.801 632.173,240.28 632.742,239.302 633.31,238.603 633.879,238.91 634.447,240.28 635.015,241.478 635.584,242.593 636.152,242.582 636.72,241.392 637.289,240.284 637.857,240.482 638.425,241.609 638.994,241.638 639.562,240.473 640.13,242.582 640.699,242.331 641.267,242.127 641.835,241.999 642.404,240.848 642.972,242.707 643.54,242.33 644.109,240.933 644.677,239.854 645.245,237.899 645.814,236.934 646.382,238.162 646.951,236.293 647.519,236.396 648.087,235.559 648.656,236.22 649.224,236.583 649.792,233.762 650.361,234.309 650.929,235.557 651.497,235.928 652.066,234.058 652.634,235.728 653.202,236.213 653.771,237.265 654.339,238.492 654.907,239.595 655.476,239.578 656.044,239.655 656.612,239.669 657.181,238.645 657.749,237.611 658.317,237.789 658.886,237.982 659.454,236.254 660.022,236.258 660.591,236.329 661.159,237.907 661.728,236.892 662.296,238.077 662.864,239.118 663.433,239.156 664.001,240.174 664.569,240.191 665.138,240.977 665.706,239.839 666.274,236.687 666.843,237.896 667.411,236.887 667.979,235.156 668.548,235.189 669.116,236.641 669.684,236.829 670.253,238.145 670.821,236.483 671.389,236.599 671.958,238.719 672.526,237.647 673.094,236.551 673.663,235.716 674.231,235.982 674.799,234.288 675.368,233.434 675.936,234.969 676.505,234.054 677.073,233.261 677.641,233.633 678.21,232.011 678.778,233.565 679.346,236.088 679.915,237.305 680.483,238.678 681.051,238.983 681.62,241.028 682.188,240.747 682.756,238.723 683.325,239.999 683.893,239.824 684.461,238.645 685.03,239.248 685.598,241.098 686.166,240.803 686.735,241.551 687.303,242.431 687.871,242.167 688.44,240.851 689.008,237.533 689.577,236.567 690.145,235.67 690.713,233.753 691.282,233.925 691.85,233.103 692.418,234.339 692.987,234.395 693.555,233.578 694.123,234.616 694.692,235.045 695.26,234.256 695.828,232.312 696.397,232.661 696.965,233.978 697.533,234.44 698.102,234.389 698.67,232.564 699.238,233.883 699.807,233.18 700.375,229.429 700.943,227.985 701.512,228.536 702.08,230.229 702.648,230.574 703.217,231.176 703.785,231.633 704.354,232.039 704.922,232.25 705.49,231.522 706.059,231.719 706.627,230.852 707.195,232.484 707.764,232.944 708.332,232.116 708.9,234.68 709.469,235.912 710.037,236.199 710.605,236.279 711.174,236.353 711.742,236.511 712.31,234.507 712.879,238.875 713.447,238.718 714.015,239.58 714.584,240.608 715.152,243.019 715.72,242.611 716.289,244.265 716.857,243.537 717.425,244.149 717.994,242.74 718.562,242.339 719.131,244.088 719.699,243.559 720.267,240.082 720.836,239.842 721.404,240.729 721.972,239.525 722.541,239.2 723.109,239.044 723.677,238.822 724.246,239.732 724.814,239.328 725.382,237.936 725.951,239.849 726.519,242.559 727.087,243.165 727.656,242.562 728.224,241 728.792,240.467 729.361,238.904 729.929,238.662 730.497,237.329 731.066,237.185 731.634,237.03 732.203,235.682 732.771,235.684 733.339,235.647 733.908,232.34 734.476,232.546 735.044,231.641 735.613,230.875 736.181,231.934 736.749,232.23 737.318,235.473 737.886,234.194 738.454,234.163 739.023,233.217 739.591,232.398 740.159,233.56 740.728,233.626 741.296,233.588 741.864,235.959 742.433,235.839 743.001,233.576 743.569,233.611 744.138,233.745 744.706,233.617 745.274,233.484 745.843,232.434 746.411,231.436 746.98,231.657 747.548,230.855 748.116,231.157 748.685,231.528 749.253,231.729 749.821,233.108 750.39,234.081 750.958,230.79 751.526,230.928 752.095,233.348 752.663,232.578 753.231,226.69 753.8,227.39 754.368,227.854 754.936,225.207 755.505,224.87 756.073,226.878 756.641,226.449 757.21,225.115 757.778,224.826 758.346,227.701 758.915,228.283 759.483,228.64 760.052,227.078 760.62,226.67 761.188,227.182 761.757,227.716 762.325,228.056 762.893,228.709 763.462,227.165 764.03,230.942 764.598,233.415 765.167,233.76 765.735,237.01 766.303,235.916 766.872,239.187 767.44,239.117 768.008,239.842 768.577,240.32 769.145,239.008 769.713,238.875 770.282,237.528 770.85,236.51 771.418,237.51 771.987,236.405 772.555,237.317 773.123,239.411 773.692,239.142 774.26,238.818 774.829,239.665 775.397,234.19 775.965,232.348 776.534,232.556 777.102,231.58 777.67,233.951 778.239,235.21 778.807,235.16 779.375,234.067 779.944,235.422 780.512,237.461 781.08,235.442 781.649,236.479 782.217,237.448 782.785,236.242 783.354,236.033 783.922,237.157 784.49,235.858 785.059,236.874 785.627,236.607 786.195,237.627 786.764,236.559 787.332,235.418 787.9,234.318 788.469,234.335 789.037,232.462 789.606,232.804 790.174,232.724 790.742,232.996 791.311,232.076 791.879,231.343 792.447,231.546 793.016,230.724 793.584,230.957 794.152,231.302 794.721,233.631 795.289,231.522 795.857,230.753 796.426,230.971 796.994,234.381 797.562,235.371 798.131,235.174 798.699,235.325 799.267,235.291 799.836,236.178 800.404,236.023 800.972,236.024 801.541,236.029 802.109,233.944 802.678,235.164 803.246,236.851 803.814,236.668 804.383,236.63 804.951,237.555 805.519,237.335 806.088,237.085 806.656,236.218 807.224,237.219 807.793,235.158 808.361,231.981 808.929,233.377 809.498,232.313 810.066,232.354 810.634,234.47 811.203,232.339 811.771,231.288 812.339,232.518 812.908,233.56 813.476,233.879 814.044,233.791 814.613,232.831 815.181,230.906 815.749,231.252 816.318,232.63 816.886,231.798 817.455,231.93 818.023,234.143 818.591,234.207 819.16,232.085 819.728,230.282 820.296,231.528 820.865,234.666 821.433,236.748 822.001,236.588 822.57,236.335 823.138,236.385 823.706,237.309 824.275,238.148 824.843,236.916 825.411,237.786 825.98,237.413 826.548,238.294 827.116,235.707 827.685,237.602 828.253,238.402 828.821,237.235 829.39,235.979 829.958,234.997 830.526,233.834 831.095,235.684 831.663,235.467 832.232,234.263 832.8,233.292 833.368,232.3 833.937,234.413 834.505,233.281 835.073,234.046 835.642,234.968 836.21,233.832 836.778,234.624 837.347,235.492 837.915,233.316 838.483,236.362 839.052,236.149 839.62,234.719 840.188,235.495 840.757,234.337 841.325,234.379 841.893,235.182 842.462,234.883 843.03,237.906 843.598,236.487 844.167,235.114 844.735,232.894 845.304,233.993 845.872,232.78 846.44,232.766 847.009,231.667 847.577,231.694 848.145,230.745 848.714,230.763 849.282,229.869 849.85,228.803 850.419,228.894 850.987,225.086 851.555,225.479 852.124,225.749 852.692,226.172 853.26,227.803 853.829,232.31 854.397,230.371 854.965,227.63 855.534,226.952 856.102,225.404 856.67,227.17 857.239,228.532 857.807,228.816 858.375,229.383 858.944,227.64 859.512,227.087 860.081,225.599 860.649,227.611 861.217,226.053 861.786,228.494 862.354,227.914 862.922,228.384 863.491,230.814 864.059,233.159 864.627,235.318 865.196,237.4 865.764,237.148 866.332,235.976 866.901,236.975 867.469,238.892 868.037,237.637 868.606,237.521 869.174,235.041 869.742,236.939 870.311,236.809 870.879,237.76 871.447,237.181 872.016,236.12 872.584,237.192 873.152,236.921 873.721,234.568 874.289,235.724 874.858,234.883 875.426,235.871 875.994,234.731 876.563,235.72 877.131,238.694 877.699,238.396 878.268,238.925 878.836,238.341 879.404,238.016 879.973,236.656 880.541,236.654 881.109,237.559 881.678,236.123 882.246,235.927 882.814,234.678 883.383,235.596 883.951,235.429 884.519,237.507 885.088,238.195 885.656,238.855 886.224,240.476 886.793,237.982 887.361,237.445 887.93,236.939 888.498,236.518 889.066,236.184 889.635,236.942 890.203,236.546 890.771,236.359 891.34,237.056 891.908,235.626 892.476,234.268 893.045,233.719 893.613,232.327 894.181,231.546 894.75,233.352 895.318,234.261 895.886,233.986 896.455,232.948 897.023,229.661 897.591,230.684 898.16,232.907 898.728,232.943 899.296,232.9 899.865,232.852 900.433,232.83 901.001,233.046 901.57,233.069 902.138,232.939 902.707,233.823 903.275,231.558 903.843,229.703 904.412,227.799 904.98,227.087 905.548,227.415 906.117,226.9 906.685,225.24 907.253,223.749 907.822,223.646 908.39,221.054 908.958,221.018 909.527,219.895 910.095,222.099 910.663,225.093 911.232,226.784 911.8,223.399 912.368,222.969 912.937,223.705 913.505,224.589 914.073,227.204 914.642,227.795 915.21,229.457 915.779,231.068 916.347,229.241 916.915,231.034 917.484,229.372 918.052,228.916 918.62,229.401 919.189,228.847 919.757,228.249 920.325,228.95 920.894,229.58 921.462,232.03 922.03,232.353 922.599,231.46 923.167,232.698 923.735,233.048 924.304,233.225 924.872,232.221 925.44,232.571 926.009,235.844 926.577,235.542 927.145,235.528 927.714,237.486 928.282,237.326 928.85,234.267 929.419,235.479 929.987,234.426 930.556,234.622 931.124,234.679 931.692,235.71 932.261,235.697 932.829,235.557 933.397,234.627 933.966,234.668 934.534,232.515 935.102,234.66 935.671,234.438 936.239,232.361 936.807,231.413 937.376,233.546 937.944,232.529 938.512,231.734 939.081,231.983 939.649,230.277 940.217,229.417 940.786,227.864 941.354,231.51 941.922,230.801 942.491,230.279 943.059,232.701 943.627,233.729 944.196,232.915 944.764,235.005 945.333,235.014 945.901,235.126 946.469,235.123 947.038,236.168 947.606,235.89 948.174,233.742 948.743,235.71 949.311,234.442 949.879,234.537 950.448,235.631 951.016,237.717 951.584,237.414 952.153,235.1 952.721,235.057 953.289,238.217 953.858,236.669 954.426,235.468 954.994,234.26 955.563,235.5 956.131,233.403 956.699,235.315 957.268,237.236 957.836,237.947 958.405,237.757 958.973,236.269 959.541,235.131 960.11,231.036 960.678,231.619 961.246,233.67 961.815,233.786 962.383,232.836 962.951,235.015 963.52,235.904 964.088,235.73 964.656,233.666 965.225,235.973 965.793,236.81 966.361,235.693 966.93,234.573 967.498,232.425 968.066,231.462 968.635,229.552 969.203,228.946 969.771,229.382 970.34,228.8 970.908,229.889 971.476,231.307 972.045,232.419 972.613,231.482 973.182,231.69 973.75,234.749 974.318,235.59 974.887,235.326 975.455,234.223 976.023,233.035 976.592,232.959 977.16,234.209 977.728,234.305 978.297,236.529 978.865,235.497 979.433,235.325 980.002,236.231 980.57,237.157 981.138,239.956 981.707,239.422 982.275,238.957 982.843,238.62 983.412,238.141 983.98,237.705 984.548,237.387 985.117,237.62 985.685,237.085 986.253,236.831 986.822,238.746 987.39,239.346 987.959,237.805 988.527,235.255 989.095,237.013 989.664,233.502 990.232,233.432 990.8,233.407 991.369,235.318 991.937,235.234 992.505,233.831 993.074,233.336 993.642,233.173 994.21,234.106 994.779,233.887 995.347,235.816 995.915,233.4 996.484,232.319 997.052,233.05 997.62,233.099 998.189,236.092 998.757,235.93 999.325,236.53 999.894,236.91 1000.46,236.62 1001.03,235.13 1001.6,234.978 1002.17,235.618 1002.74,237.075 1003.3,237.522 1003.87,237.094 1004.44,234.702 1005.01,235.404 1005.58,235.205 1006.15,233.854 1006.71,234.843 1007.28,232.772 1007.85,233.87 1008.42,230.665 1008.99,230.579 1009.56,229.669 1010.12,230.712 1010.69,231.952 1011.26,232.89 1011.83,235.875 1012.4,233.538 1012.97,233.058 1013.53,233.907 1014.1,233.72 1014.67,235.6 1015.24,234.229 1015.81,234.103 1016.38,233.896 1016.94,233.711 1017.51,234.341 1018.08,233.913 1018.65,234.57 1019.22,235.47 1019.79,235.271 1020.35,235.09 1020.92,233.907 1021.49,233.57 1022.06,233.29 1022.63,232.251 1023.2,231.973 1023.76,230.61 1024.33,231.637 1024.9,229.666 1025.47,227.615 1026.04,226.844 1026.61,227.261 1027.17,228.575 1027.74,231.824 1028.31,232.923 1028.88,231.828 1029.45,232.923 1030.02,231.749 1030.58,230.582 1031.15,230.763 1031.72,230.79 1032.29,229.88 1032.86,233.273 1033.43,235.179 1033.99,233.148 1034.56,233.966 1035.13,234.938 1035.7,233.691 1036.27,231.306 1036.84,228.319 1037.4,228.577 1037.97,228.863 1038.54,230.123 1039.11,230.368 1039.68,229.442 1040.25,230.512 1040.81,231.577 1041.38,232.534 1041.95,232.485 1042.52,231.486 1043.09,232.483 1043.66,233.525 1044.22,232.356 1044.79,232.427 1045.36,232.511 1045.93,233.33 1046.5,233.269 1047.07,230.244 1047.63,231.394 1048.2,229.593 1048.77,233.733 1049.34,232.588 1049.91,236.753 1050.48,233.405 1051.05,234.4 1051.61,235.109 1052.18,236.864 1052.75,236.422 1053.32,235.086 1053.89,232.863 1054.46,235.879 1055.02,236.9 1055.59,237.311 1056.16,237.059 1056.73,236.609 1057.3,234.057 1057.87,233.69 1058.43,232.577 1059,231.599 1059.57,229.491 1060.14,230.633 1060.71,232.574 1061.28,234.536 1061.84,233.375 1062.41,232.359 1062.98,232.192 1063.55,232.076 1064.12,229.906 1064.69,230.044 1065.25,229.245 1065.82,229.318 1066.39,228.517 1066.96,228.492 1067.53,227.646 1068.1,226.78 1068.66,227.282 1069.23,224.63 1069.8,224.243 1070.37,224.729 1070.94,224.4 1071.51,225.832 1072.07,224.198 1072.64,226.05 1073.21,226.499 1073.78,227.074 1074.35,225.288 1074.92,225.857 1075.48,227.614 1076.05,229.054 1076.62,230.409 1077.19,230.746 1077.76,233.082 1078.33,233.151 1078.89,232.139 1079.46,233.256 1080.03,233.276 1080.6,234.202 1081.17,235.222 1081.74,235.162 1082.3,235.12 1082.87,234.006 1083.44,235.952 1084.01,235.879 1084.58,235.767 1085.15,235.465 1085.71,235.191 1086.28,238.237 1086.85,237.72 1087.42,237.357 1087.99,235.026 1088.56,235.854 1089.12,236.602 1089.69,236.37 1090.26,234.101 1090.83,237.005 1091.4,236.461 1091.97,236.39 1092.53,236.165 1093.1,238.016 1093.67,237.48 1094.24,237.217 1094.81,236.894 1095.38,236.58 1095.94,236.457 1096.51,236.09 1097.08,236.875 1097.65,235.641 1098.22,236.239 1098.79,235.778 1099.35,235.588 1099.92,233.227 1100.49,234.344 1101.06,233.911 1101.63,235.555 1102.2,233.238 1102.76,236.14 1103.33,237.697 1103.9,237.534 1104.47,237.089 1105.04,236.76 1105.61,236.489 1106.17,237.161 1106.74,236.838 1107.31,236.246 1107.88,235.005 1108.45,233.887 1109.02,233.74 1109.58,232.607 1110.15,231.673 1110.72,232.539 1111.29,232.355 1111.86,231.266 1112.43,235.498 1112.99,235.308 1113.56,234.21 1114.13,233.968 1114.7,232.566 1115.27,231.409 1115.84,229.327 1116.4,229.534 1116.97,228.36 1117.54,230.517 1118.11,229.476 1118.68,228.485 1119.25,227.675 1119.81,225.722 1120.38,224.209 1120.95,220.704 1121.52,220.498 1122.09,221.353 1122.66,221.034 1123.23,220.845 1123.79,221.814 1124.36,222.615 1124.93,223.303 1125.5,224.001 1126.07,226.653 1126.64,226.386 1127.2,225.814 1127.77,225.29 1128.34,225.741 1128.91,225.146 1129.48,224.8 1130.05,226.568 1130.61,227.148 1131.18,228.783 1131.75,228.105 1132.32,229.638 1132.89,230.051 1133.46,230.54 1134.02,229.682 1134.59,228.898 1135.16,230.207 1135.73,229.473 1136.3,230.864 1136.87,230.138 1137.43,229.402 1138,229.654 1138.57,231.281 1139.14,229.484 1139.71,228.69 1140.28,229.194 1140.84,229.758 1141.41,230.21 1141.98,231.757 1142.55,233.028 1143.12,235.193 1143.69,237.429 1144.25,236.141 1144.82,236.21 1145.39,235.229 1145.96,235.091 1146.53,235.059 1147.1,233.912 1147.66,234.144 1148.23,234.032 1148.8,234.103 1149.37,234.325 1149.94,235.304 1150.51,233.25 1151.07,233.352 1151.64,233.427 1152.21,234.618 1152.78,235.79 1153.35,237.666 1153.92,237.481 1154.48,239.379 1155.05,237.833 1155.62,239.568 1156.19,239.985 1156.76,238.729 1157.33,238.337 1157.89,237.063 1158.46,237.77 1159.03,240.787 1159.6,239.199 1160.17,238.748 1160.74,236.432 1161.3,236.272 1161.87,234.98 1162.44,236.777 1163.01,236.308 1163.58,240.028 1164.15,238.441 1164.71,238.241 1165.28,237.665 1165.85,237.453 1166.42,236.283 1166.99,237.274 1167.56,236.985 1168.12,236.542 1168.69,236.237 1169.26,234.938 1169.83,234.982 1170.4,234.567 1170.97,233.514 1171.53,234.636 1172.1,231.429 1172.67,234.708 1173.24,234.629 1173.81,234.638 1174.38,233.398 1174.94,233.314 1175.51,231.965 1176.08,233.022 1176.65,231.821 1177.22,230.887 1177.79,232.042 1178.35,231.346 1178.92,231.424 1179.49,231.192 1180.06,230.445 1180.63,229.569 1181.2,229.77 1181.76,228.947 1182.33,227.188 1182.9,228.545 1183.47,229.91 1184.04,231.148 1184.61,229.084 1185.17,229.286 1185.74,227.277 1186.31,228.806 1186.88,229.831 1187.45,228.061 1188.02,228.492 1188.58,227.923 1189.15,229.191 1189.72,232.809 1190.29,235.911 1190.86,235.725 1191.43,236.426 1192,235.315 1192.56,236.321 1193.13,239.277 1193.7,239.759 1194.27,241.253 1194.84,239.663 1195.41,239.215 1195.97,238.812 1196.54,239.436 1197.11,237.971 1197.68,236.461 1198.25,236.328 1198.82,231.827 1199.38,233.027 1199.95,233.98 1200.52,233.826 1201.09,232.847 1201.66,231.599 1202.23,229.423 1202.79,227.517 1203.36,228.652 1203.93,229.749 1204.5,231.938 1205.07,231.858 1205.64,231.892 1206.2,233.009 1206.77,233.005 1207.34,233.867 1207.91,232.693 1208.48,232.538 1209.05,232.567 1209.61,232.643 1210.18,230.513 1210.75,230.627 1211.32,229.74 1211.89,228.895 1212.46,226.992 1213.02,229.219 1213.59,231.195 1214.16,231.317 1214.73,232.273 1215.3,231.244 1215.87,229.379 1216.43,229.819 1217,229.086 1217.57,230.292 1218.14,229.388 1218.71,230.824 1219.28,229.01 1219.84,229.176 1220.41,226.683 1220.98,227.982 1221.55,230.395 1222.12,229.641 1222.69,230.836 1223.25,232.134 1223.82,233.38 1224.39,234.456 1224.96,234.356 1225.53,235.246 1226.1,237.044 1226.66,237.757 1227.23,236.576 1227.8,238.507 1228.37,239.185 1228.94,238.729 1229.51,241.372 1230.07,241.695 1230.64,242.045 1231.21,241.403 1231.78,241.845 1232.35,240.211 1232.92,238.013 1233.48,236.642 1234.05,239.186 1234.62,238.488 1235.19,238.984 1235.76,240.609 1236.33,238.991 1236.89,238.455 1237.46,235.829 1238.03,234.471 1238.6,237.039 1239.17,236.652 1239.74,235.114 1240.3,232.517 1240.87,232.29 1241.44,231.234 1242.01,231.248 1242.58,232.249 1243.15,232.342 1243.71,232.223 1244.28,233.946 1244.85,233.77 1245.42,232.65 1245.99,230.394 1246.56,232.512 1247.12,232.345 1247.69,233.38 1248.26,231.245 1248.83,230.384 1249.4,232.463 1249.97,233.461 1250.53,233.274 1251.1,232.069 1251.67,229.839 1252.24,228.824 1252.81,229.073 1253.38,229.197 1253.94,229.136 1254.51,232.382 1255.08,231.381 1255.65,229.162 1256.22,229.309 1256.79,230.495 1257.35,229.714 1257.92,230.047 1258.49,228.195 1259.06,228.365 1259.63,226.671 1260.2,228.124 1260.76,229.527 1261.33,228.502 1261.9,226.521 1262.47,227.859 1263.04,227.172 1263.61,228.501 1264.18,227.906 1264.74,230.026 1265.31,230.167 1265.88,230.289 1266.45,231.639 1267.02,230.463 1267.59,229.332 1268.15,231.714 1268.72,230.852 1269.29,231.907 1269.86,232.016 1270.43,230.975 1271,231.029 1271.56,228.144 1272.13,228.358 1272.7,228.651 1273.27,228.884 1273.84,229.961 1274.41,228.984 1274.97,229.255 1275.54,226.641 1276.11,227.051 1276.68,227.54 1277.25,227.174 1277.82,225.637 1278.38,227.119 1278.95,225.755 1279.52,227.324 1280.09,231.081 1280.66,232.26 1281.23,231.314 1281.79,232.435 1282.36,232.377 1282.93,231.45 1283.5,234.448 1284.07,235.221 1284.64,235.215 1285.2,234.809 1285.77,235.554 1286.34,235.34 1286.91,236.328 1287.48,238.033 1288.05,237.627 1288.61,236.064 1289.18,234.751 1289.75,234.404 1290.32,235.376 1290.89,235.165 1291.46,236.106 1292.02,235.964 1292.59,238.779 1293.16,239.446 1293.73,240.918 1294.3,241.179 1294.87,239.826 1295.43,238.446 1296,238.112 1296.57,236.811 1297.14,234.639 1297.71,233.43 1298.28,233.34 1298.84,231.383 1299.41,232.326 1299.98,232.517 1300.55,230.22 1301.12,230.214 1301.69,232.445 1302.25,231.614 1302.82,233.85 1303.39,230.816 1303.96,233.071 1304.53,234 1305.1,235.862 1305.66,235.682 1306.23,235.252 1306.8,235.039 1307.37,235.689 1307.94,236.698 1308.51,235.323 1309.07,234.035 1309.64,233.034 1310.21,233.838 1310.78,233.744 1311.35,232.675 1311.92,231.694 1312.48,231.635 1313.05,232.706 1313.62,232.573 1314.19,232.784 1314.76,230.648 1315.33,227.39 1315.89,227.776 1316.46,229.226 1317.03,228.284 1317.6,228.444 1318.17,228.66 1318.74,228.961 1319.3,228.255 1319.87,228.657 1320.44,230.949 1321.01,230.171 1321.58,230.402 1322.15,229.279 1322.71,230.264 1323.28,228.405 1323.85,228.708 1324.42,228.157 1324.99,230.551 1325.56,231.788 1326.12,227.708 1326.69,229.205 1327.26,226.278 1327.83,226.899 1328.4,226.371 1328.97,225.92 1329.53,226.603 1330.1,227.098 1330.67,227.513 1331.24,226.975 1331.81,228.732 1332.38,230.273 1332.94,229.411 1333.51,231.881 1334.08,233.116 1334.65,232.988 1335.22,235.057 1335.79,233.841 1336.36,234.997 1336.92,235.025 1337.49,234.977 1338.06,237.175 1338.63,236.983 1339.2,237.681 1339.77,238.437 1340.33,238.233 1340.9,237.944 1341.47,235.666 1342.04,235.474 1342.61,235.276 1343.18,236.084 1343.74,233.684 1344.31,234.696 1344.88,233.531 1345.45,233.541 1346.02,233.434 1346.59,232.364 1347.15,234.399 1347.72,235.46 1348.29,234.289 1348.86,233.197 1349.43,233.26 1350,235.118 1350.56,234.959 1351.13,233.894 1351.7,232.734 1352.27,231.552 1352.84,230.542 1353.41,231.641 1353.97,233.639 1354.54,233.622 1355.11,233.851 1355.68,234.824 1356.25,234.637 1356.82,234.319 1357.38,234.3 1357.95,233.306 1358.52,233.192 1359.09,232.068 1359.66,233.295 1360.23,232.905 1360.79,232.791 1361.36,233.781 1361.93,234.828 1362.5,234.646 1363.07,233.379 1363.64,231.542 1364.2,233.615 1364.77,232.555 1365.34,233.709 1365.91,234.554 1366.48,234.57 1367.05,232.346 1367.61,231.266 1368.18,231.137 1368.75,231.282 1369.32,232.383 1369.89,233.16 1370.46,232.183 1371.02,232.27 1371.59,232.208 1372.16,235.416 1372.73,234.256 1373.3,232.985 1373.87,232.016 1374.43,235.874 1375,235.599 1375.57,235.148 1376.14,235.984 1376.71,236.642 1377.28,234.258 1377.84,231.99 1378.41,232.192 1378.98,234.256 1379.55,234.908 1380.12,235.816 1380.69,236.418 1381.25,235.137 1381.82,234.014 1382.39,234.682 1382.96,234.363 1383.53,233.18 1384.1,232.883 1384.66,229.692 1385.23,231.943 1385.8,229.857 1386.37,230.022 1386.94,231.147 1387.51,233.326 1388.07,232.15 1388.64,232.2 1389.21,232.212 1389.78,230.119 1390.35,232.286 1390.92,232.209 1391.48,233.044 1392.05,230.985 1392.62,231.08 1393.19,233.217 1393.76,230.23 1394.33,229.487 1394.89,227.773 1395.46,227.304 1396.03,224.683 1396.6,225.232 1397.17,225.8 1397.74,228.438 1398.3,230.644 1398.87,232.874 1399.44,233.969 1400.01,235.078 1400.58,236.959 1401.15,235.771 1401.71,236.55 1402.28,235.37 1402.85,236.134 1403.42,235.914 1403.99,234.694 1404.56,234.735 1405.13,235.503 1405.69,236.33 1406.26,236.096 1406.83,232.748 1407.4,233.659 1407.97,232.322 1408.54,234.582 1409.1,235.255 1409.67,233.882 1410.24,232.599 1410.81,231.458 1411.38,230.557 1411.95,229.784 1412.51,232.092 1413.08,229.994 1413.65,228.21 1414.22,226.531 1414.79,227.997 1415.36,228.454 1415.92,228.624 1416.49,229.141 1417.06,229.524 1417.63,226.018 1418.2,228.401 1418.77,227.817 1419.33,230.253 1419.9,230.29 1420.47,231.343 1421.04,231.474 1421.61,230.511 1422.18,229.679 1422.74,227.978 1423.31,228.2 1423.88,228.803 1424.45,227.214 1425.02,227.548 1425.59,227.776 1426.15,228.067 1426.72,230.506 1427.29,231.731 1427.86,233.04 1428.43,232.078 1429,232.076 1429.56,231.07 1430.13,229.258 1430.7,230.828 1431.27,236.947 1431.84,235.736 1432.41,235.74 1432.97,235.614 1433.54,234.53 1434.11,234.747 1434.68,236.656 1435.25,238.51 1435.82,237.251 1436.38,237.963 1436.95,235.424 1437.52,238.309 1438.09,239.119 1438.66,238.686 1439.23,235.293 1439.79,236.298 1440.36,236.123 1440.93,235.022 1441.5,234.739 1442.07,234.62 1442.64,235.43 1443.2,235.178 1443.77,233.883 1444.34,231.881 1444.91,232.02 1445.48,232.072 1446.05,232.149 1446.61,231.124 1447.18,230.318 1447.75,229.617 1448.32,230.836 1448.89,231.732 1449.46,230.755 1450.02,228.909 1450.59,229.34 1451.16,231.884 1451.73,234.999 1452.3,233.784 1452.87,233.597 1453.43,234.341 1454,234.243 1454.57,235.341 1455.14,235.976 1455.71,233.574 1456.28,233.541 1456.84,234.628 1457.41,236.569 1457.98,234.269 1458.55,235.201 1459.12,236.403 1459.69,237.284 1460.25,235.736 1460.82,235.467 1461.39,233.061 1461.96,233.038 1462.53,231.276 1463.1,231.301 1463.66,233.555 1464.23,232.502 1464.8,233.508 1465.37,233.505 1465.94,233.71 1466.51,233.57 1467.07,237.653 1467.64,237.289 1468.21,236.977 1468.78,236.561 1469.35,236.204 1469.92,235.998 1470.48,233.681 1471.05,235.572 1471.62,234.263 1472.19,233.111 1472.76,234.261 1473.33,234.05 1473.89,234.025 1474.46,235.857 1475.03,235.737 1475.6,235.412 1476.17,233.895 1476.74,235.703 1477.31,235.406 1477.87,235.983 1478.44,233.775 1479.01,234.659 1479.58,233.42 1480.15,234.295 1480.72,234.004 1481.28,232.642 1481.85,231.542 1482.42,231.542 1482.99,233.621 1483.56,236.489 1484.13,234.937 1484.69,235.598 1485.26,233.181 1485.83,231.026 1486.4,231.258 1486.97,231.521 1487.54,230.59 1488.1,227.557 1488.67,230.196 1489.24,230.355 1489.81,229.56 1490.38,232.653 1490.95,230.387 1491.51,229.446 1492.08,230.497 1492.65,230.632 1493.22,229.327 1493.79,229.457 1494.36,229.605 1494.92,229.529 1495.49,231.611 1496.06,230.86 1496.63,230.068 1497.2,231.392 1497.77,228.573 1498.33,229.807 1498.9,229.971 1499.47,231.302 1500.04,229.348 1500.61,227.48 1501.18,228.739 1501.74,229.872 1502.31,231.173 1502.88,234.276 1503.45,233.148 1504.02,231.01 1504.59,229.182 1505.15,230.345 1505.72,231.446 1506.29,230.669 1506.86,230.764 1507.43,233.086 1508,230.147 1508.56,229.209 1509.13,228.605 1509.7,228.011 1510.27,228.417 1510.84,227.715 1511.41,227.222 1511.97,225.694 1512.54,224.329 1513.11,227.108 1513.68,228.669 1514.25,232.146 1514.82,233.173 1515.38,233.128 1515.95,231.954 1516.52,229.929 1517.09,232.303 1517.66,233.242 1518.23,232.277 1518.79,231.568 1519.36,234.037 1519.93,233.804 1520.5,232.699 1521.07,234.839 1521.64,231.968 1522.2,230.119 1522.77,231.283 1523.34,231.369 1523.91,232.705 1524.48,230.619 1525.05,231.766 1525.61,230.812 1526.18,232.133 1526.75,232.21 1527.32,232.058 1527.89,234.093 1528.46,234.906 1529.02,236.851 1529.59,236.769 1530.16,237.529 1530.73,237.041 1531.3,236.586 1531.87,237.523 1532.43,237.474 1533,238.099 1533.57,237.555 1534.14,236.342 1534.71,238.287 1535.28,240.024 1535.84,237.402 1536.41,239.132 1536.98,238.603 1537.55,241.186 1538.12,240.56 1538.69,240.103 1539.25,239.662 1539.82,239.014 1540.39,236.548 1540.96,233.344 1541.53,233.172 1542.1,234.201 1542.66,235.864 1543.23,235.622 1543.8,235.193 1544.37,235.987 1544.94,234.558 1545.51,233.165 1546.08,231.742 1546.64,231.542 1547.21,233.553 1547.78,233.574 1548.35,233.345 1548.92,234.257 1549.49,234.755 1550.05,233.35 1550.62,229.253 1551.19,229.354 1551.76,230.39 1552.33,230.191 1552.9,228.162 1553.46,227.405 1554.03,226.552 1554.6,226.723 1555.17,226.745 1555.74,227.132 1556.31,228.515 1556.87,227.885 1557.44,227.442 1558.01,230.062 1558.58,229.251 1559.15,225.276 1559.72,224.949 1560.28,223.257 1560.85,225.01 1561.42,226.757 1561.99,227.189 1562.56,229.484 1563.13,227.857 1563.69,227.347 1564.26,227.655 1564.83,229.034 1565.4,228.336 1565.97,225.68 1566.54,225.35 1567.1,226.158 1567.67,225.553 1568.24,230.254 1568.81,229.465 1569.38,228.81 1569.95,230.283 1570.51,231.445 1571.08,230.611 1571.65,230.747 1572.22,231.01 1572.79,230.187 1573.36,231.576 1573.92,231.696 1574.49,233.008 1575.06,232.972 1575.63,233.019 1576.2,232.186 1576.77,231.185 1577.33,231.441 1577.9,232.749 1578.47,231.845 1579.04,233.819 1579.61,231.936 1580.18,233.053 1580.74,234.089 1581.31,236.093 1581.88,236.025 1582.45,235.956 1583.02,239.05 1583.59,238.59 1584.15,238.509 1584.72,238.338 1585.29,237.128 1585.86,238.655 1586.43,237.225 1587,237.087 1587.56,236.944 1588.13,234.726 1588.7,234.612 1589.27,235.598 1589.84,234.507 1590.41,236.569 1590.97,235.404 1591.54,237.333 1592.11,235.749 1592.68,235.595 1593.25,234.432 1593.82,235.541 1594.38,234.609 1594.95,236.717 1595.52,237.335 1596.09,237.911 1596.66,237.726 1597.23,239.279 1597.79,237.75 1598.36,237.31 1598.93,237.868 1599.5,235.419 1600.07,235.074 1600.64,232.749 1601.2,230.902 1601.77,229.846 1602.34,230.124 1602.91,230.286 1603.48,230.343 1604.05,232.626 1604.61,233.701 1605.18,231.635 1605.75,232.863 1606.32,233.859 1606.89,233.981 1607.46,232.976 1608.02,231.052 1608.59,231.234 1609.16,229.99 1609.73,233.332 1610.3,233.335 1610.87,231.546 1611.43,232.703 1612,233.829 1612.57,234.847 1613.14,235.807 1613.71,235.732 1614.28,235.637 1614.84,235.415 1615.41,235.999 1615.98,234.821 1616.55,236.456 1617.12,237.067 1617.69,236.671 1618.26,236.473 1618.82,236.08 1619.39,234.63 1619.96,234.495 1620.53,234.183 1621.1,236.231 1621.67,234.908 1622.23,232.56 1622.8,232.445 1623.37,232.533 1623.94,232.189 1624.51,232.158 1625.08,234.471 1625.64,234.019 1626.21,232.864 1626.78,234.845 1627.35,233.637 1627.92,233.305 1628.49,234.144 1629.05,237.919 1629.62,232.369 1630.19,233.2 1630.76,232.297 1631.33,231.183 1631.9,231.214 1632.46,233.516 1633.03,233.557 1633.6,234.733 1634.17,233.459 1634.74,234.305 1635.31,235.097 1635.87,233.847 1636.44,234.496 1637.01,235.25 1637.58,236.054 1638.15,235.62 1638.72,235.193 1639.28,234.745 1639.85,233.421 1640.42,232.277 1640.99,232.112 1641.56,232.799 1642.13,233.673 1642.69,232.381 1643.26,231.104 1643.83,233.155 1644.4,231.774 1644.97,231.909 1645.54,232.674 1646.1,231.754 1646.67,231.492 1647.24,230.331 1647.81,231.387 1648.38,229.387 1648.95,229.448 1649.51,229.585 1650.08,230.707 1650.65,230.628 1651.22,229.885 1651.79,228.996 1652.36,229.289 1652.92,229.406 1653.49,231.637 1654.06,231.908 1654.63,233.162 1655.2,234.23 1655.77,234.233 1656.33,235.104 1656.9,236.792 1657.47,234.361 1658.04,233.257 1658.61,234.247 1659.18,234.874 1659.74,233.522 1660.31,235.328 1660.88,235.185 1661.45,232.645 1662.02,233.666 1662.59,233.479 1663.15,234.283 1663.72,236.035 1664.29,235.574 1664.86,236.26 1665.43,233.705 1666,232.41 1666.56,231.197 1667.13,231.062 1667.7,229.327 1668.27,230.61 1668.84,234.787 1669.41,230.368 1669.97,228.563 1670.54,229.814 1671.11,227.886 1671.68,226.002 1672.25,226.501 1672.82,229.974 1673.38,231.054 1673.95,230.989 1674.52,229.84 1675.09,228.92 1675.66,229.031 1676.23,228.027 1676.79,225.379 1677.36,227.025 1677.93,227.318 1678.5,228.771 1679.07,228.042 1679.64,228.294 1680.2,229.603 1680.77,228.796 1681.34,228.903 1681.91,230.074 1682.48,230.126 1683.05,229.267 1683.61,231.551 1684.18,233.719 1684.75,231.752 1685.32,231.711 1685.89,234.833 1686.46,235.619 1687.02,234.348 1687.59,235.39 1688.16,236.292 1688.73,236.14 1689.3,234.958 1689.87,233.746 1690.44,234.609 1691,235.392 1691.57,234.206 1692.14,232.161 1692.71,232.005 1693.28,229.834 1693.85,228.843 1694.41,226.879 1694.98,224.157 1695.55,222.532 1696.12,225.56 1696.69,228.105 1697.26,229.456 1697.82,230.506 1698.39,230.667 1698.96,230.853 1699.53,233.128 1700.1,231.827 1700.67,231.954 1701.23,232.863 1701.8,230.853 1702.37,231.044 1702.94,232.181 1703.51,232.084 1704.08,232.281 1704.64,230.412 1705.21,230.979 1705.78,230.118 1706.35,231.168 1706.92,232.376 1707.49,233.534 1708.05,233.813 1708.62,234.898 1709.19,233.823 1709.76,233.832 1710.33,231.59 1710.9,232.78 1711.46,231.762 1712.03,232.773 1712.6,231.825 1713.17,231.776 1713.74,230.941 1714.31,229.021 1714.87,230.174 1715.44,228.299 1716.01,228.472 1716.58,229.772 1717.15,231.128 1717.72,228.432 1718.28,230.069 1718.85,232.448 1719.42,231.489 1719.99,229.462 1720.56,228.779 1721.13,227.995 1721.69,228.316 1722.26,226.615 1722.83,228.265 1723.4,231.774 1723.97,234.056 1724.54,233.891 1725.1,234.002 1725.67,232.106 1726.24,232.254 1726.81,233.36 1727.38,235.383 1727.95,235.514 1728.51,233.256 1729.08,234.684 1729.65,233.572 1730.22,232.694 1730.79,231.724 1731.36,231.579 1731.92,229.634 1732.49,230.056 1733.06,230.13 1733.63,230.429 1734.2,230.939 1734.77,231.049 1735.33,230.191 1735.9,229.342 1736.47,228.823 1737.04,228.352 1737.61,228.932 1738.18,229.409 1738.74,231.729 1739.31,232.999 1739.88,235.201 1740.45,235.979 1741.02,233.768 1741.59,235.989 1742.15,237.031 1742.72,235.7 1743.29,234.558 1743.86,234.471 1744.43,234.614 1745,235.619 1745.56,236.776 1746.13,239.649 1746.7,236.4 1747.27,235.169 1747.84,235.034 1748.41,235.808 1748.97,236.726 1749.54,237.551 1750.11,234.307 1750.68,235.458 1751.25,235.072 1751.82,234.729 1752.38,234.769 1752.95,234.679 1753.52,234.598 1754.09,235.267 1754.66,235.012 1755.23,234.171 1755.79,235.967 1756.36,236.677 1756.93,235.121 1757.5,235.083 1758.07,235.944 1758.64,237.823 1759.21,238.332 1759.77,239.104 1760.34,238.224 1760.91,233.632 1761.48,236.67 1762.05,236.685 1762.62,238.598 1763.18,238.97 1763.75,238.563 1764.32,235.331 1764.89,234.07 1765.46,234.962 1766.03,233.569 1766.59,233.506 1767.16,232.551 1767.73,230.527 1768.3,230.324 1768.87,231.742 1769.44,231.792 1770,232.016 1770.57,233.205 1771.14,235.122 1771.71,234.912 1772.28,234.542 1772.85,234.312 1773.41,235.253 1773.98,235.055 1774.55,233.756 1775.12,234.564 1775.69,234.44 1776.26,234.264 1776.82,234.005 1777.39,233.159 1777.96,234.353 1778.53,235.085 1779.1,234.913 1779.67,236.726 1780.23,237.529 1780.8,234.25 1781.37,233.116 1781.94,232.155 1782.51,231.1 1783.08,230.312 1783.64,228.458 1784.21,228.788 1784.78,228.914 1785.35,227.047 1785.92,229.499 1786.49,231.563 1787.05,231.734 1787.62,231.806 1788.19,232.869 1788.76,231.815 1789.33,231.839 1789.9,230.511 1790.46,230.541 1791.03,229.879 1791.6,230.882 1792.17,229.004 1792.74,230.236 1793.31,229.423 1793.87,228.706 1794.44,227.022 1795.01,229.265 1795.58,228.508 1796.15,226.726 1796.72,227.136 1797.28,225.635 1797.85,227.407 1798.42,228.948 1798.99,229.22 1799.56,226.304 1800.13,226.724 1800.69,225.301 1801.26,225.76 1801.83,225.305 1802.4,226.676 1802.97,226.342 1803.54,226.88 1804.1,227.387 1804.67,227.881 1805.24,228.044 1805.81,228.515 1806.38,228.973 1806.95,227.407 1807.51,227.029 1808.08,228.494 1808.65,228.843 1809.22,229.435 1809.79,229.653 1810.36,232.345 1810.92,235.647 1811.49,236.49 1812.06,238.277 1812.63,237.918 1813.2,236.836 1813.77,236.456 1814.33,238.205 1814.9,237.676 1815.47,240.544 1816.04,239.044 1816.61,238.47 1817.18,239.127 1817.74,238.717 1818.31,238.579 1818.88,238.409 1819.45,237.097 1820.02,240.085 1820.59,239.537 1821.15,237.084 1821.72,235.918 1822.29,235.769 1822.86,235.716 1823.43,236.543 1824,236.204 1824.56,238.042 1825.13,239.6 1825.7,238.982 1826.27,237.862 1826.84,236.5 1827.41,235.21 1827.97,232.949 1828.54,235.002 1829.11,234.748 1829.68,236.368 1830.25,238.065 1830.82,236.617 1831.39,234.183 1831.95,232.976 1832.52,230.808 1833.09,230.78 1833.66,231.937 1834.23,233.072 1834.8,230.042 1835.36,232.352 1835.93,233.112 1836.5,234.018 1837.07,235.926 1837.64,236.629 1838.21,234.343 1838.77,235.061 1839.34,236.005 1839.91,234.5 1840.48,234.114 1841.05,233.941 1841.62,234.688 1842.18,234.463 1842.75,234.487 1843.32,233.361 1843.89,233.118 1844.46,232.006 1845.03,232.109 1845.59,233.125 1846.16,235.095 1846.73,235.787 1847.3,235.55 1847.87,234.322 1848.44,235.153 1849,236.087 1849.57,234.468 1850.14,233.209 1850.71,234.26 1851.28,233.97 1851.85,234.804 1852.41,232.346 1852.98,232.258 1853.55,232.166 1854.12,232.119 1854.69,233.373 1855.26,233.345 1855.82,233.3 1856.39,232.115 1856.96,232.804 1857.53,233.73 1858.1,233.503 1858.67,234.247 1859.23,234.171 1859.8,235.093 1860.37,233.618 1860.94,232.521 1861.51,235.15 1862.08,233.626 1862.64,234.315 1863.21,233.168 1863.78,231.902 1864.35,230.691 1864.92,229.916 1865.49,228.047 1866.05,227.273 1866.62,228.587 1867.19,228.902 1867.76,229.108 1868.33,231.437 1868.9,231.484 1869.46,231.257 1870.03,234.398 1870.6,234.47 1871.17,235.092 1871.74,236.998 1872.31,235.393 1872.87,233.094 1873.44,232.167 1874.01,234.088 1874.58,231.917 1875.15,230.616 1875.72,231.527 1876.28,231.602 1876.85,230.314 1877.42,230.404 1877.99,229.18 1878.56,229.422 1879.13,230.705 1879.69,229.733 1880.26,227.997 1880.83,228.299 1881.4,229.513 1881.97,229.459 1882.54,228.524 1883.1,227.777 1883.67,224.045 1884.24,225.896 1884.81,225.586 1885.38,232.195 1885.95,231.323 1886.51,231.488 1887.08,231.727 1887.65,235.13 1888.22,233.853 1888.79,233.538 1889.36,233.403 1889.92,233.349 1890.49,232.138 1891.06,232.469 1891.63,232.59 1892.2,230.657 1892.77,230.706 1893.33,230.773 1893.9,230.785 1894.47,227.769 1895.04,228.923 1895.61,227.179 1896.18,228.747 1896.74,228.977 1897.31,231.568 1897.88,229.815 1898.45,231.203 1899.02,230.178 1899.59,231.131 1900.16,232.292 1900.72,232.489 1901.29,232.723 1901.86,232.606 1902.43,230.441 1903,229.568 1903.57,229.824 1904.13,230.392 1904.7,229.519 1905.27,232.933 1905.84,235.078 1906.41,236.087 1906.98,235.998 1907.54,235.072 1908.11,232.825 1908.68,234.977 1909.25,232.842 1909.82,232.93 1910.39,232.989 1910.95,233.061 1911.52,231.791 1912.09,230.703 1912.66,231.919 1913.23,232.979 1913.8,232.797 1914.36,232.563 1914.93,233.6 1915.5,235.78 1916.07,235.616 1916.64,234.223 1917.21,233.071 1917.77,234.293 1918.34,233.202 1918.91,234.221 1919.48,234.276 1920.05,234.195 1920.62,234.138 1921.18,234.037 1921.75,236.032 1922.32,234.847 1922.89,232.6 1923.46,231.607 1924.03,231.605 1924.59,231.592 1925.16,231.653 1925.73,229.731 1926.3,230.063 1926.87,229.147 1927.44,228.336 1928,231.488 1928.57,233.565 1929.14,233.552 1929.71,232.254 1930.28,230.196 1930.85,227.45 1931.41,228.855 1931.98,229.17 1932.55,228.544 1933.12,230.935 1933.69,233.28 1934.26,233.266 1934.82,231.44 1935.39,231.548 1935.96,230.588 1936.53,230.83 1937.1,228.952 1937.67,226.384 1938.23,226.747 1938.8,227.051 1939.37,227.628 1939.94,232 1940.51,234.048 1941.08,234.938 1941.64,232.695 1942.21,232.837 1942.78,230.963 1943.35,231.224 1943.92,231.248 1944.49,233.529 1945.05,236.767 1945.62,235.576 1946.19,235.312 1946.76,237.284 1947.33,238.812 1947.9,235.344 1948.46,236.19 1949.03,233.827 1949.6,234.126 1950.17,232.161 1950.74,233.274 1951.31,232.448 1951.87,232.433 1952.44,232.684 1953.01,230.83 1953.58,231.22 1954.15,230.28 1954.72,230.363 1955.28,229.522 1955.85,231.906 1956.42,234 1956.99,233.973 1957.56,234.903 1958.13,233.861 1958.69,233.794 1959.26,235.886 1959.83,235.907 1960.4,237.088 1960.97,237.734 1961.54,241.707 1962.1,242.073 1962.67,241.412 1963.24,241.64 1963.81,240.995 1964.38,240.366 1964.95,237.762 1965.51,237.251 1966.08,236.89 1966.65,237.499 1967.22,238.083 1967.79,239.86 1968.36,239.347 1968.92,237.897 1969.49,238.592 1970.06,237.011 1970.63,237.855 1971.2,238.32 1971.77,237.827 1972.34,234.407 1972.9,234.175 1973.47,235.052 1974.04,235.611 1974.61,235.246 1975.18,234.864 1975.75,235.617 1976.31,233.98 1976.88,233.747 1977.45,232.426 1978.02,229.107 1978.59,228.321 1979.16,228.466 1979.72,228.71 1980.29,226.941 1980.86,227.214 1981.43,228.606 1982,232.83 1982.57,232.734 1983.13,231.621 1983.7,231.713 1984.27,231.649 1984.84,231.611 1985.41,231.677 1985.98,231.702 1986.54,231.504 1987.11,231.535 1987.68,230.371 1988.25,231.415 1988.82,233.807 1989.39,233.634 1989.95,231.467 1990.52,234.648 1991.09,235.438 1991.66,234.211 1992.23,233.241 1992.8,232.406 1993.36,229.208 1993.93,228.458 1994.5,228.728 1995.07,230.185 1995.64,231.4 1996.21,230.078 1996.77,230.39 1997.34,228.596 1997.91,226.714 1998.48,225.895 1999.05,227.486 1999.62,226.906 2000.18,230.434 2000.75,229.487 2001.32,230.562 2001.89,230.849 2002.46,233.076 2003.03,235.156 2003.59,235.924 2004.16,232.847 2004.73,232.796 2005.3,230.789 2005.87,230.146 2006.44,227.274 2007,228.759 2007.57,226.961 2008.14,228.479 2008.71,230.82 2009.28,230.856 2009.85,230.742 2010.41,229.874 2010.98,229.854 2011.55,229.017 2012.12,228.125 2012.69,227.528 2013.26,225.88 2013.82,226.336 2014.39,226.84 2014.96,223.027 2015.53,223.42 2016.1,224.013 2016.67,221.689 2017.23,222.635 2017.8,221.25 2018.37,221.252 2018.94,221.137 2019.51,220.054 2020.08,221.205 2020.64,224.317 2021.21,225.223 2021.78,227.022 2022.35,227.398 2022.92,227.974 2023.49,231.46 2024.05,232.894 2024.62,234.948 2025.19,237.133 2025.76,236.124 2026.33,238.029 2026.9,237.925 2027.46,237.928 2028.03,237.883 2028.6,237.587 2029.17,236.418 2029.74,235.5 2030.31,236.562 2030.87,235.512 2031.44,236.414 2032.01,236.265 2032.58,236.353 2033.15,235.247 2033.72,234.372 2034.28,235.411 2034.85,236.382 2035.42,236.217 2035.99,238.082 2036.56,236.862 2037.13,235.651 2037.69,235.664 2038.26,235.596 2038.83,234.398 2039.4,234.56 2039.97,232.354 2040.54,231.222 2041.11,232.435 2041.67,231.229 2042.24,231.507 2042.81,234.632 2043.38,233.591 2043.95,233.625 2044.52,234.576 2045.08,235.523 2045.65,235.549 2046.22,236.516 2046.79,237.399 2047.36,238.183 2047.93,237.637 2048.49,239.354 2049.06,238.916 2049.63,237.541 2050.2,239.331 2050.77,241.141 2051.34,239.429 2051.9,238.028 2052.47,239.028 2053.04,238.623 2053.61,238.116 2054.18,238.064 2054.75,238.745 2055.31,237.152 2055.88,234.614 2056.45,234.56 2057.02,233.255 2057.59,233.289 2058.16,234.032 2058.72,233.913 2059.29,233.779 2059.86,233.583 2060.43,232.387 2061,232.533 2061.57,231.665 2062.13,231.666 2062.7,230.752 2063.27,230.873 2063.84,232.746 2064.41,231.66 2064.98,231.64 2065.54,230.581 2066.11,230.851 2066.68,232.961 2067.25,233.023 2067.82,233.336 2068.39,235.339 2068.95,235.171 2069.52,236.001 2070.09,236.868 2070.66,237.684 2071.23,237.317 2071.8,237.063 2072.36,235.62 2072.93,237.417 2073.5,239.172 2074.07,238.425 2074.64,235.926 2075.21,235.28 2075.77,234.828 2076.34,233.534 2076.91,233.213 2077.48,232.203 2078.05,233.184 2078.62,230.232 2079.18,231.406 2079.75,232.478 2080.32,232.289 2080.89,232.345 2081.46,232.289 2082.03,233.067 2082.59,233.018 2083.16,232.932 2083.73,232.856 2084.3,233.581 2084.87,233.486 2085.44,233.227 2086,231.146 2086.57,233.384 2087.14,232.251 2087.71,231.205 2088.28,229.188 2088.85,228.544 2089.41,229.816 2089.98,230.017 2090.55,230.035 2091.12,231.154 2091.69,233.293 2092.26,234.171 2092.82,234.866 2093.39,233.684 2093.96,234.473 2094.53,233.956 2095.1,234.821 2095.67,233.375 2096.23,232.269 2096.8,231.421 2097.37,230.407 2097.94,229.318 2098.51,229.442 2099.08,228.683 2099.64,228.684 2100.21,227.889 2100.78,225.9 2101.35,227.209 2101.92,227.626 2102.49,227.956 2103.05,227.316 2103.62,227.631 2104.19,227.906 2104.76,226.312 2105.33,225.725 2105.9,226.287 2106.46,226.788 2107.03,230.226 2107.6,229.413 2108.17,230.759 2108.74,230.93 2109.31,232.284 2109.87,231.148 2110.44,230.244 2111.01,230.424 2111.58,230.522 2112.15,231.579 2112.72,231.824 2113.29,230.819 2113.85,230.212 2114.42,230.51 2114.99,230.513 2115.56,229.856 2116.13,229.08 2116.7,226.346 2117.26,227.041 2117.83,229.52 2118.4,231.148 2118.97,230.397 2119.54,230.182 2120.11,232.432 2120.67,234.368 2121.24,235.214 2121.81,237.239 2122.38,236.972 2122.95,238.825 2123.52,237.444 2124.08,237.224 2124.65,237.036 2125.22,237.572 2125.79,237.13 2126.36,238.987 2126.93,240.728 2127.49,240.171 2128.06,237.483 2128.63,236.264 2129.2,234.998 2129.77,234.769 2130.34,232.608 2130.9,232.464 2131.47,234.671 2132.04,236.61 2132.61,235.124 2133.18,234.718 2133.75,233.597 2134.31,232.281 2134.88,232.234 2135.45,232.192 2136.02,233.241 2136.59,235.074 2137.16,233.679 2137.72,232.689 2138.29,232.612 2138.86,232.668 2139.43,232.91 2140,230.829 2140.57,232.004 2141.13,231.988 2141.7,233.265 2142.27,230.958 2142.84,230.079 2143.41,229.391 2143.98,228.912 2144.54,229.126 2145.11,229.36 2145.68,227.489 2146.25,227.705 2146.82,225.975 2147.39,228.29 2147.95,228.658 2148.52,227.891 2149.09,228.125 2149.66,227.615 2150.23,230.129 2150.8,230.237 2151.36,227.665 2151.93,227.163 2152.5,228.566 2153.07,231.868 2153.64,235.214 2154.21,233.952 2154.77,232.966 2155.34,233.028 2155.91,230.978 2156.48,232.047 2157.05,230.058 2157.62,229.305 2158.18,229.625 2158.75,228.904 2159.32,229.276 2159.89,230.469 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.035 ± 0.027\n  with uncertainty of ± 0.0024153137342433997\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01441 ± (0.00238357, 0.00233806) (MC)\n  95% confidence interval: [-4.01899, -4.00972]) (MC)\n  linear error propagation: -4.01458 ± 0.00233942\n  |δ_y| = |0.00152912| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.01440517022608, val_l = 0.0045831242411056294, val_u = 0.0046820151318964776)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip750\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip750)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip751\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip750)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip752\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1144.42 2211.02,1144.42 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,984.206 2211.02,984.206 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,823.987 2211.02,823.987 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,663.769 2211.02,663.769 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,503.551 2211.02,503.551 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,343.332 2211.02,343.332 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1144.42 365.751,1144.42 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,984.206 365.751,984.206 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,823.987 365.751,823.987 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,663.769 365.751,663.769 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,503.551 365.751,503.551 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,343.332 365.751,343.332 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M298.909 1130.22 Q295.298 1130.22 293.469 1133.79 Q291.664 1137.33 291.664 1144.46 Q291.664 1151.57 293.469 1155.13 Q295.298 1158.67 298.909 1158.67 Q302.543 1158.67 304.349 1155.13 Q306.177 1151.57 306.177 1144.46 Q306.177 1137.33 304.349 1133.79 Q302.543 1130.22 298.909 1130.22 M298.909 1126.52 Q304.719 1126.52 307.775 1131.13 Q310.853 1135.71 310.853 1144.46 Q310.853 1153.19 307.775 1157.79 Q304.719 1162.38 298.909 1162.38 Q293.099 1162.38 290.02 1157.79 Q286.964 1153.19 286.964 1144.46 Q286.964 1135.71 290.02 1131.13 Q293.099 1126.52 298.909 1126.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M259.557 997.551 L267.196 997.551 L267.196 971.185 L258.886 972.852 L258.886 968.592 L267.15 966.926 L271.826 966.926 L271.826 997.551 L279.465 997.551 L279.465 1001.49 L259.557 1001.49 L259.557 997.551 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M298.909 970.005 Q295.298 970.005 293.469 973.569 Q291.664 977.111 291.664 984.241 Q291.664 991.347 293.469 994.912 Q295.298 998.453 298.909 998.453 Q302.543 998.453 304.349 994.912 Q306.177 991.347 306.177 984.241 Q306.177 977.111 304.349 973.569 Q302.543 970.005 298.909 970.005 M298.909 966.301 Q304.719 966.301 307.775 970.907 Q310.853 975.491 310.853 984.241 Q310.853 992.967 307.775 997.574 Q304.719 1002.16 298.909 1002.16 Q293.099 1002.16 290.02 997.574 Q286.964 992.967 286.964 984.241 Q286.964 975.491 290.02 970.907 Q293.099 966.301 298.909 966.301 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M262.775 837.332 L279.094 837.332 L279.094 841.267 L257.15 841.267 L257.15 837.332 Q259.812 834.578 264.395 829.948 Q269.002 825.295 270.182 823.953 Q272.428 821.43 273.307 819.694 Q274.21 817.934 274.21 816.244 Q274.21 813.49 272.266 811.754 Q270.344 810.018 267.242 810.018 Q265.043 810.018 262.59 810.782 Q260.159 811.545 257.381 813.096 L257.381 808.374 Q260.205 807.24 262.659 806.661 Q265.113 806.083 267.15 806.083 Q272.52 806.083 275.715 808.768 Q278.909 811.453 278.909 815.944 Q278.909 818.073 278.099 819.994 Q277.312 821.893 275.205 824.485 Q274.627 825.156 271.525 828.374 Q268.423 831.568 262.775 837.332 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M298.909 809.786 Q295.298 809.786 293.469 813.351 Q291.664 816.893 291.664 824.022 Q291.664 831.129 293.469 834.693 Q295.298 838.235 298.909 838.235 Q302.543 838.235 304.349 834.693 Q306.177 831.129 306.177 824.022 Q306.177 816.893 304.349 813.351 Q302.543 809.786 298.909 809.786 M298.909 806.083 Q304.719 806.083 307.775 810.689 Q310.853 815.272 310.853 824.022 Q310.853 832.749 307.775 837.355 Q304.719 841.939 298.909 841.939 Q293.099 841.939 290.02 837.355 Q286.964 832.749 286.964 824.022 Q286.964 815.272 290.02 810.689 Q293.099 806.083 298.909 806.083 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M272.914 662.415 Q276.27 663.133 278.145 665.401 Q280.043 667.67 280.043 671.003 Q280.043 676.119 276.525 678.92 Q273.006 681.72 266.525 681.72 Q264.349 681.72 262.034 681.281 Q259.742 680.864 257.289 680.007 L257.289 675.494 Q259.233 676.628 261.548 677.207 Q263.863 677.785 266.386 677.785 Q270.784 677.785 273.076 676.049 Q275.39 674.313 275.39 671.003 Q275.39 667.947 273.238 666.234 Q271.108 664.498 267.289 664.498 L263.261 664.498 L263.261 660.656 L267.474 660.656 Q270.923 660.656 272.752 659.29 Q274.58 657.901 274.58 655.309 Q274.58 652.647 272.682 651.234 Q270.807 649.799 267.289 649.799 Q265.367 649.799 263.168 650.216 Q260.969 650.633 258.33 651.512 L258.33 647.346 Q260.992 646.605 263.307 646.235 Q265.645 645.864 267.705 645.864 Q273.029 645.864 276.131 648.295 Q279.233 650.702 279.233 654.822 Q279.233 657.693 277.59 659.684 Q275.946 661.651 272.914 662.415 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M298.909 649.568 Q295.298 649.568 293.469 653.133 Q291.664 656.674 291.664 663.804 Q291.664 670.91 293.469 674.475 Q295.298 678.017 298.909 678.017 Q302.543 678.017 304.349 674.475 Q306.177 670.91 306.177 663.804 Q306.177 656.674 304.349 653.133 Q302.543 649.568 298.909 649.568 M298.909 645.864 Q304.719 645.864 307.775 650.471 Q310.853 655.054 310.853 663.804 Q310.853 672.531 307.775 677.137 Q304.719 681.72 298.909 681.72 Q293.099 681.72 290.02 677.137 Q286.964 672.531 286.964 663.804 Q286.964 655.054 290.02 650.471 Q293.099 645.864 298.909 645.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M271.594 490.345 L259.789 508.794 L271.594 508.794 L271.594 490.345 M270.367 486.271 L276.247 486.271 L276.247 508.794 L281.177 508.794 L281.177 512.683 L276.247 512.683 L276.247 520.831 L271.594 520.831 L271.594 512.683 L255.992 512.683 L255.992 508.169 L270.367 486.271 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M298.909 489.349 Q295.298 489.349 293.469 492.914 Q291.664 496.456 291.664 503.586 Q291.664 510.692 293.469 514.257 Q295.298 517.798 298.909 517.798 Q302.543 517.798 304.349 514.257 Q306.177 510.692 306.177 503.586 Q306.177 496.456 304.349 492.914 Q302.543 489.349 298.909 489.349 M298.909 485.646 Q304.719 485.646 307.775 490.252 Q310.853 494.836 310.853 503.586 Q310.853 512.312 307.775 516.919 Q304.719 521.502 298.909 521.502 Q293.099 521.502 290.02 516.919 Q286.964 512.312 286.964 503.586 Q286.964 494.836 290.02 490.252 Q293.099 485.646 298.909 485.646 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M258.793 326.052 L277.15 326.052 L277.15 329.988 L263.076 329.988 L263.076 338.46 Q264.094 338.113 265.113 337.951 Q266.131 337.765 267.15 337.765 Q272.937 337.765 276.316 340.937 Q279.696 344.108 279.696 349.525 Q279.696 355.103 276.224 358.205 Q272.752 361.284 266.432 361.284 Q264.256 361.284 261.988 360.913 Q259.742 360.543 257.335 359.802 L257.335 355.103 Q259.418 356.237 261.641 356.793 Q263.863 357.349 266.34 357.349 Q270.344 357.349 272.682 355.242 Q275.02 353.136 275.02 349.525 Q275.02 345.913 272.682 343.807 Q270.344 341.701 266.34 341.701 Q264.465 341.701 262.59 342.117 Q260.738 342.534 258.793 343.413 L258.793 326.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M298.909 329.131 Q295.298 329.131 293.469 332.696 Q291.664 336.238 291.664 343.367 Q291.664 350.474 293.469 354.038 Q295.298 357.58 298.909 357.58 Q302.543 357.58 304.349 354.038 Q306.177 350.474 306.177 343.367 Q306.177 336.238 304.349 332.696 Q302.543 329.131 298.909 329.131 M298.909 325.427 Q304.719 325.427 307.775 330.034 Q310.853 334.617 310.853 343.367 Q310.853 352.094 307.775 356.7 Q304.719 361.284 298.909 361.284 Q293.099 361.284 290.02 356.7 Q286.964 352.094 286.964 343.367 Q286.964 334.617 290.02 330.034 Q293.099 325.427 298.909 325.427 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip752)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1026.37 400.199,917.916 400.786,818.404 401.372,727.235 401.958,643.853 402.545,567.745 403.131,608.117 403.718,541.655 404.304,481.296 404.891,424.727 405.477,373.633 406.063,327.659 406.65,286.474 407.236,249.768 407.823,288.213 408.409,256.59 408.995,289.283 409.582,262.544 410.168,240.041 410.755,219.895 411.341,249.981 411.927,234.845 412.514,262.09 413.1,250.711 413.687,240.744 414.273,232.984 414.86,227.278 415.446,224.321 416.032,223.145 416.619,222.657 417.205,224.036 417.792,249.317 418.378,252.161 418.964,295.58 419.551,335.887 420.137,338.256 420.724,341.833 421.31,361.521 421.896,381.593 422.483,400.471 423.069,420.024 423.656,426.65 424.242,446.071 424.829,452.854 425.415,460.93 426.001,469.597 426.588,478.755 427.174,505.637 427.761,532.375 428.347,557.516 428.933,567.033 429.52,591.384 430.106,607.244 430.693,617.091 431.279,627.267 431.865,636.613 432.452,646.891 433.038,669.265 433.625,695.695 434.211,724.909 434.798,738.885 435.384,752.203 435.97,760.739 436.557,773.944 437.143,790.784 437.73,802.678 438.316,811.099 438.902,830.408 439.489,841.755 440.075,852.554 440.662,859.625 441.248,869.991 441.835,886.716 442.421,899.734 443.007,905.605 443.594,914.785 444.18,924.421 444.767,932.994 445.353,944.808 445.939,953.425 446.526,967.143 447.112,980.335 447.699,987.496 448.285,991.921 448.871,996.169 449.458,1005.66 450.044,1009.98 450.631,1024.02 451.217,1034.84 451.804,1038.66 452.39,1047.14 452.976,1050.67 453.563,1062.89 454.149,1065.61 454.736,1072.93 455.322,1080.04 455.908,1082.83 456.495,1085.52 457.081,1092.57 457.668,1096.91 458.254,1103.66 458.84,1108.04 459.427,1110.55 460.013,1112.88 460.6,1119.21 461.186,1123.38 461.773,1127.84 462.359,1130.09 462.945,1139.42 463.532,1143.37 464.118,1146.98 464.705,1148.78 465.291,1154.13 465.877,1158.78 466.464,1160.3 467.05,1160.11 467.637,1168.56 468.223,1166.59 468.809,1169.54 469.396,1176.03 469.982,1178.76 470.569,1184.7 471.155,1186.85 471.742,1187.71 472.328,1190.32 472.914,1189.23 473.501,1189.92 474.087,1190.61 474.674,1192.93 475.26,1197.12 475.846,1197.68 476.433,1201.12 477.019,1202.83 477.606,1207.52 478.192,1209.31 478.778,1213.72 479.365,1215.4 479.951,1213.89 480.538,1215.53 481.124,1218.74 481.711,1221.68 482.297,1224.39 482.883,1226.87 483.47,1229.42 484.056,1230.67 484.643,1234.4 485.229,1232.28 485.815,1229.99 486.402,1229.65 486.988,1230.8 487.575,1230.37 488.161,1231.26 488.748,1233.53 489.334,1234.52 489.92,1233.93 490.507,1233.54 491.093,1234.58 491.68,1231.35 492.266,1236.58 492.852,1235.99 493.439,1234.22 494.025,1234.03 494.612,1236.49 495.198,1237.51 495.784,1241.06 496.371,1240.33 496.957,1242.64 497.544,1240.63 498.13,1245.54 498.717,1244.64 499.303,1244.95 499.889,1246.97 500.476,1247.32 501.062,1247.84 501.649,1249.51 502.235,1249.78 502.821,1248.76 503.408,1247.72 503.994,1248.18 504.581,1247.51 505.167,1247.89 505.753,1248.1 506.34,1247.34 506.926,1243.72 507.513,1245.64 508.099,1248.68 508.686,1247.85 509.272,1248.1 509.858,1248.25 510.445,1248.34 511.031,1246.05 511.618,1245.19 512.204,1244.46 512.79,1243.7 513.377,1244.45 513.963,1242.39 514.55,1244.48 515.136,1246.3 515.722,1245.73 516.309,1250.53 516.895,1249.5 517.482,1247.1 518.068,1245.27 518.655,1244.66 519.241,1242.54 519.827,1241.83 520.414,1242.53 521,1242.18 521.587,1241.37 522.173,1242.19 522.759,1244.3 523.346,1245.07 523.932,1243.27 524.519,1243.92 525.105,1244.59 525.691,1246.32 526.278,1246.85 526.864,1248.44 527.451,1248.64 528.037,1246.58 528.624,1245.78 529.21,1243.52 529.796,1241.27 530.383,1240.52 530.969,1239.76 531.556,1240.58 532.142,1238.68 532.728,1239.56 533.315,1240.7 533.901,1239.84 534.488,1240.58 535.074,1239.77 535.661,1238.05 536.247,1239.06 536.833,1240.08 537.42,1242.09 538.006,1242.62 538.593,1244.63 539.179,1245.12 539.765,1244.11 540.352,1248.46 540.938,1247.55 541.525,1246.4 542.111,1246.72 542.697,1245.89 543.284,1247.68 543.87,1244.11 544.457,1244.44 545.043,1243.6 545.63,1242.65 546.216,1241.53 546.802,1241.09 547.389,1240.51 547.975,1234.49 548.562,1234.07 549.148,1233.94 549.734,1234.64 550.321,1232.75 550.907,1230.98 551.494,1229.6 552.08,1229.22 552.666,1229.16 553.253,1229 553.839,1230.15 554.426,1230.21 555.012,1232.6 555.599,1232.41 556.185,1235.96 556.771,1234.15 557.358,1232.27 557.944,1231.92 558.531,1234.3 559.117,1232.52 559.703,1229.41 560.29,1230.68 560.876,1230.31 561.463,1227.38 562.049,1229.88 562.635,1228.35 563.222,1229.45 563.808,1229.04 564.395,1227.66 564.981,1227.5 565.568,1227.55 566.154,1227.57 566.74,1227.41 567.327,1228.62 567.913,1228.52 568.5,1228.17 569.086,1229.5 569.672,1232 570.259,1235.69 570.845,1233.6 571.432,1234.28 572.018,1233.57 572.605,1232.96 573.191,1232.52 573.777,1232.27 574.364,1233.11 574.95,1233.77 575.537,1228.1 576.123,1229.08 576.709,1230.01 577.296,1230.93 577.882,1231.87 578.469,1232.76 579.055,1234.77 579.641,1233.4 580.228,1231.63 580.814,1231.33 581.401,1233.59 581.987,1230.29 582.574,1231.35 583.16,1232.08 583.746,1231.54 584.333,1229.63 584.919,1227.91 585.506,1226.25 586.092,1226.02 586.678,1227.3 587.265,1228.5 587.851,1228.05 588.438,1226.41 589.024,1226.15 589.61,1227.42 590.197,1224.52 590.783,1224.59 591.37,1224.61 591.956,1224.54 592.543,1225.78 593.129,1223.19 593.715,1223.42 594.302,1224.97 594.888,1226.15 595.475,1228.47 596.061,1229.57 596.647,1227.9 597.234,1230.14 597.82,1229.92 598.407,1230.9 598.993,1229.98 599.579,1229.43 600.166,1232.93 600.752,1232.2 601.339,1230.57 601.925,1230.03 602.512,1232.33 603.098,1230.16 603.684,1229.47 604.271,1228.04 604.857,1226.35 605.444,1224.8 606.03,1224.64 606.616,1224.37 607.203,1224.18 607.789,1225.32 608.376,1226.49 608.962,1226.13 609.548,1225.76 610.135,1227.83 610.721,1227.74 611.308,1227.56 611.894,1225.45 612.481,1226.62 613.067,1225 613.653,1223.53 614.24,1223.32 614.826,1221.85 615.413,1221.64 615.999,1220.45 616.585,1221.7 617.172,1225.55 617.758,1223.9 618.345,1225.06 618.931,1227.16 619.518,1227.06 620.104,1225.14 620.69,1224.8 621.277,1223.02 621.863,1225 622.45,1224.76 623.036,1221.95 623.622,1223.17 624.209,1224.45 624.795,1225.42 625.382,1225 625.968,1227.08 626.554,1228.12 627.141,1226.15 627.727,1227.26 628.314,1228.23 628.9,1227.74 629.487,1229.78 630.073,1227.82 630.659,1224.58 631.246,1222.94 631.832,1221.07 632.419,1220.53 633.005,1217.75 633.591,1217.91 634.178,1220.29 634.764,1218.51 635.351,1218.55 635.937,1219.88 636.523,1218.96 637.11,1216.42 637.696,1216.59 638.283,1215.43 638.869,1214.08 639.456,1214.17 640.042,1215.62 640.628,1219.66 641.215,1220.77 641.801,1221.82 642.388,1224.19 642.974,1223.94 643.56,1224.95 644.147,1223.37 644.733,1223.25 645.32,1224.25 645.906,1222.91 646.492,1222.31 647.079,1223.26 647.665,1225.69 648.252,1225.26 648.838,1223.58 649.425,1222.96 650.011,1222.98 650.597,1225.26 651.184,1223.58 651.77,1224.45 652.357,1229.2 652.943,1231.11 653.529,1230.53 654.116,1228.48 654.702,1228.1 655.289,1227.39 655.875,1226.85 656.462,1226.36 657.048,1226.11 657.634,1227.04 658.221,1226.82 658.807,1227.94 659.394,1225.91 659.98,1225.33 660.566,1226.38 661.153,1223.13 661.739,1221.51 662.326,1221.06 662.912,1220.87 663.498,1220.69 664.085,1220.39 664.671,1222.85 665.258,1217.23 665.844,1217.27 666.431,1216.02 667.017,1214.53 667.603,1211.24 668.19,1211.5 668.776,1209.13 669.363,1209.77 669.949,1208.71 670.535,1210.23 671.122,1210.5 671.708,1208.01 672.295,1208.4 672.881,1212.59 673.467,1212.71 674.054,1211.39 674.64,1212.73 675.227,1212.98 675.813,1213.01 676.4,1213.14 676.986,1211.82 677.572,1212.16 678.159,1213.77 678.745,1211.19 679.332,1207.54 679.918,1206.51 680.504,1207.02 681.091,1208.78 681.677,1209.25 682.264,1211.06 682.85,1211.21 683.436,1212.77 684.023,1212.83 684.609,1212.92 685.196,1214.53 685.782,1214.45 686.369,1214.42 686.955,1218.56 687.541,1218.3 688.128,1219.46 688.714,1220.45 689.301,1219.15 689.887,1218.8 690.473,1214.68 691.06,1216.24 691.646,1216.24 692.233,1217.41 692.819,1218.43 693.405,1216.96 693.992,1216.85 694.578,1216.88 695.165,1213.83 695.751,1213.91 696.338,1216.71 696.924,1216.64 697.51,1216.45 698.097,1216.58 698.683,1216.73 699.27,1218.04 699.856,1219.32 700.442,1219.07 701.029,1220.11 701.615,1219.77 702.202,1219.34 702.788,1219.11 703.375,1217.38 703.961,1216.13 704.547,1220.28 705.134,1220.15 705.72,1217.12 706.307,1218.08 706.893,1225.55 707.479,1224.81 708.066,1224.35 708.652,1227.82 709.239,1228.43 709.825,1226.09 710.411,1226.77 710.998,1228.61 711.584,1229.16 712.171,1225.73 712.757,1225.11 713.344,1224.77 713.93,1226.85 714.516,1227.5 715.103,1227 715.689,1226.46 716.276,1226.15 716.862,1225.44 717.448,1227.49 718.035,1222.85 718.621,1219.74 719.208,1219.29 719.794,1215.12 720.38,1216.4 720.967,1212.14 721.553,1212.07 722.14,1210.98 722.726,1210.19 723.313,1211.67 723.899,1211.69 724.485,1213.25 725.072,1214.43 725.658,1213.06 726.245,1214.35 726.831,1213.09 727.417,1210.29 728.004,1210.47 728.59,1210.72 729.177,1209.48 729.763,1216.3 730.349,1218.61 730.936,1218.35 731.522,1219.59 732.109,1216.6 732.695,1214.97 733.282,1214.97 733.868,1216.3 734.454,1214.54 735.041,1211.86 735.627,1214.32 736.214,1212.93 736.8,1211.6 737.386,1213.02 737.973,1213.19 738.559,1211.67 739.146,1213.22 739.732,1211.84 740.318,1212.08 740.905,1210.68 741.491,1211.92 742.078,1213.27 742.664,1214.61 743.251,1214.54 743.837,1216.89 744.423,1216.46 745.01,1216.55 745.596,1216.21 746.183,1217.37 746.769,1218.31 747.355,1218.09 747.942,1219.16 748.528,1218.91 749.115,1218.52 749.701,1215.59 750.288,1218.25 750.874,1219.25 751.46,1219.02 752.047,1214.73 752.633,1213.42 753.22,1213.61 753.806,1213.35 754.392,1213.33 754.979,1212.13 755.565,1212.24 756.152,1212.15 756.738,1212.06 757.324,1214.64 757.911,1213.05 758.497,1210.84 759.084,1210.96 759.67,1210.91 760.257,1209.63 760.843,1209.79 761.429,1209.99 762.016,1210.99 762.602,1209.62 763.189,1212.14 763.775,1216.12 764.361,1214.36 764.948,1215.7 765.534,1215.65 766.121,1212.97 766.707,1215.63 767.293,1216.98 767.88,1215.45 768.466,1214.13 769.053,1213.7 769.639,1213.78 770.226,1214.97 770.812,1217.41 771.398,1217.02 771.985,1215.3 772.571,1216.36 773.158,1216.21 773.744,1213.42 774.33,1213.3 774.917,1215.96 775.503,1218.26 776.09,1216.74 776.676,1212.78 777.262,1210.07 777.849,1210.17 778.435,1210.4 779.022,1210.24 779.608,1208.97 780.195,1207.78 780.781,1209.22 781.367,1208 781.954,1208.35 782.54,1207.1 783.127,1210.27 783.713,1207.77 784.299,1206.62 784.886,1207.97 785.472,1209.46 786.059,1210.63 786.645,1212.05 787.232,1209.67 787.818,1209.87 788.404,1211.33 788.991,1212.53 789.577,1213.77 790.164,1211.09 790.75,1212.49 791.336,1211.5 791.923,1210.29 792.509,1211.68 793.096,1210.64 793.682,1209.49 794.268,1212.19 794.855,1208.29 795.441,1208.47 796.028,1210.21 796.614,1209.17 797.201,1210.57 797.787,1210.47 798.373,1209.41 798.96,1209.73 799.546,1205.81 800.133,1207.49 800.719,1209.15 801.305,1211.92 801.892,1210.51 802.478,1212.02 803.065,1212.04 803.651,1213.43 804.237,1213.42 804.824,1214.65 805.41,1214.67 805.997,1215.86 806.583,1217.28 807.17,1217.26 807.756,1222.17 808.342,1221.86 808.929,1221.69 809.515,1221.33 810.102,1219.43 810.688,1213.84 811.274,1216.31 811.861,1219.84 812.447,1220.82 813.034,1222.92 813.62,1220.87 814.206,1219.28 814.793,1219.02 815.379,1218.4 815.966,1220.69 816.552,1221.51 817.139,1223.53 817.725,1221.16 818.311,1223.26 818.898,1220.33 819.484,1221.17 820.071,1220.69 820.657,1217.72 821.243,1214.79 821.83,1212.02 822.416,1209.3 823.003,1209.5 823.589,1210.89 824.175,1209.53 824.762,1206.97 825.348,1208.42 825.935,1208.44 826.521,1211.49 827.108,1209.01 827.694,1209.07 828.28,1207.75 828.867,1208.36 829.453,1209.6 830.04,1208.14 830.626,1208.38 831.212,1211.27 831.799,1209.75 832.385,1210.75 832.972,1209.43 833.558,1210.8 834.145,1209.49 834.731,1205.62 835.317,1205.85 835.904,1205.03 836.49,1205.62 837.077,1205.89 837.663,1207.49 838.249,1207.4 838.836,1206.14 839.422,1207.85 840.009,1208.01 840.595,1209.53 841.181,1208.3 841.768,1208.44 842.354,1205.72 842.941,1204.72 843.527,1203.74 844.114,1201.51 844.7,1204.51 845.286,1205.06 845.873,1205.59 846.459,1206.02 847.046,1206.35 847.632,1205.29 848.218,1205.69 848.805,1205.83 849.391,1204.85 849.978,1206.56 850.564,1208.22 851.15,1208.88 851.737,1210.62 852.323,1211.62 852.91,1209.35 853.496,1208.18 854.083,1208.49 854.669,1209.78 855.255,1213.94 855.842,1212.72 856.428,1209.95 857.015,1209.89 857.601,1209.94 858.187,1210 858.774,1210.02 859.36,1209.74 859.947,1209.7 860.533,1209.86 861.119,1208.73 861.706,1211.58 862.292,1213.96 862.879,1216.44 863.465,1217.46 864.052,1217.19 864.638,1217.97 865.224,1220.21 865.811,1222.28 866.397,1222.63 866.984,1226.11 867.57,1226.45 868.156,1228.15 868.743,1225.69 869.329,1222.18 869.916,1220.23 870.502,1224.65 871.089,1225.42 871.675,1224.73 872.261,1223.84 872.848,1220.74 873.434,1220.13 874.021,1218.14 874.607,1216.18 875.193,1218.53 875.78,1216.35 876.366,1218.5 876.953,1219.15 877.539,1218.63 878.125,1219.42 878.712,1220.27 879.298,1219.49 879.885,1218.78 880.471,1215.75 881.058,1215.36 881.644,1216.5 882.23,1214.95 882.817,1214.51 883.403,1214.27 883.99,1215.54 884.576,1215.1 885.162,1210.94 885.749,1211.24 886.335,1211.19 886.922,1208.62 887.508,1208.7 888.094,1212.48 888.681,1210.9 889.267,1212.17 889.854,1211.88 890.44,1211.76 891.027,1210.39 891.613,1210.33 892.199,1210.43 892.786,1211.55 893.372,1211.45 893.959,1214.14 894.545,1211.41 895.131,1211.64 895.718,1214.24 896.304,1215.45 896.891,1212.77 897.477,1214.04 898.063,1215.06 898.65,1214.76 899.236,1216.95 899.823,1218.1 900.409,1220.14 900.996,1215.64 901.582,1216.57 902.168,1217.28 902.755,1214.26 903.341,1212.95 903.928,1213.96 904.514,1211.29 905.1,1211.22 905.687,1211.02 906.273,1210.96 906.86,1209.57 907.446,1209.84 908.032,1212.49 908.619,1209.96 909.205,1211.5 909.792,1211.33 910.378,1209.89 910.965,1207.15 911.551,1207.41 912.137,1210.25 912.724,1210.24 913.31,1206.15 913.897,1207.99 914.483,1209.42 915.069,1210.89 915.656,1209.27 916.242,1211.87 916.829,1209.41 917.415,1206.9 918.002,1205.87 918.588,1205.98 919.174,1207.76 919.761,1209.12 920.347,1214.27 920.934,1213.57 921.52,1210.98 922.106,1210.81 922.693,1211.99 923.279,1209.21 923.866,1208.02 924.452,1208.16 925.038,1210.71 925.625,1207.75 926.211,1206.6 926.798,1207.92 927.384,1209.27 927.971,1211.96 928.557,1213.19 929.143,1215.64 929.73,1216.48 930.316,1216.02 930.903,1216.84 931.489,1215.56 932.075,1213.83 932.662,1212.45 933.248,1213.65 933.835,1213.41 934.421,1209.54 935.007,1208.42 935.594,1208.68 936.18,1210.02 936.767,1211.49 937.353,1211.58 937.94,1209.98 938.526,1209.82 939.112,1206.95 939.699,1208.17 940.285,1208.31 940.872,1207.09 941.458,1205.82 942.044,1202.13 942.631,1202.63 943.217,1203.05 943.804,1203.33 944.39,1203.79 944.976,1204.21 945.563,1204.49 946.149,1204.08 946.736,1204.63 947.322,1204.85 947.909,1202.3 948.495,1201.38 949.081,1203.18 949.668,1206.31 950.254,1204 950.841,1208.37 951.427,1208.43 952.013,1208.45 952.6,1205.99 953.186,1206.03 953.773,1207.76 954.359,1208.36 954.945,1208.55 955.532,1207.35 956.118,1207.59 956.705,1205.1 957.291,1208.1 957.878,1209.46 958.464,1208.54 959.05,1208.46 959.637,1204.64 960.223,1204.76 960.81,1203.91 961.396,1203.33 961.982,1203.59 962.569,1205.4 963.155,1205.53 963.742,1204.65 964.328,1202.72 964.915,1202.04 965.501,1202.47 966.087,1205.41 966.674,1204.46 967.26,1204.64 967.847,1206.3 968.433,1205.01 969.019,1207.59 969.606,1206.19 970.192,1210.24 970.779,1210.4 971.365,1211.6 971.951,1210.35 972.538,1208.83 973.124,1207.65 973.711,1203.84 974.297,1206.74 974.884,1207.33 975.47,1206.24 976.056,1206.45 976.643,1204.03 977.229,1205.7 977.816,1205.82 978.402,1206.05 978.988,1206.25 979.575,1205.42 980.161,1205.93 980.748,1205.06 981.334,1203.86 981.92,1204.05 982.507,1204.21 983.093,1205.66 983.68,1206.06 984.266,1206.39 984.853,1207.7 985.439,1208.06 986.025,1209.81 986.612,1208.55 987.198,1211.08 987.785,1213.75 988.371,1214.85 988.957,1214.47 989.544,1212.94 990.13,1208.92 990.717,1207.55 991.303,1208.93 991.889,1207.56 992.476,1209.04 993.062,1210.55 993.649,1210.37 994.235,1210.38 994.822,1211.59 995.408,1207.34 995.994,1204.9 996.581,1207.43 997.167,1206.37 997.754,1205.1 998.34,1206.63 998.926,1209.64 999.513,1213.46 1000.1,1213.24 1000.69,1212.98 1001.27,1211.48 1001.86,1211.23 1002.44,1212.46 1003.03,1211.18 1003.62,1209.89 1004.2,1208.7 1004.79,1208.76 1005.38,1210.04 1005.96,1208.8 1006.55,1207.48 1007.14,1208.94 1007.72,1208.86 1008.31,1208.76 1008.9,1207.72 1009.48,1207.78 1010.07,1211.61 1010.65,1210.21 1011.24,1212.53 1011.83,1207.34 1012.41,1208.77 1013,1203.47 1013.59,1207.63 1014.17,1206.35 1014.76,1205.4 1015.35,1203.1 1015.93,1203.56 1016.52,1205.17 1017.11,1207.94 1017.69,1204.09 1018.28,1202.71 1018.86,1202.08 1019.45,1202.28 1020.04,1202.75 1020.62,1205.9 1021.21,1206.34 1021.8,1207.73 1022.38,1208.97 1022.97,1211.67 1023.56,1210.3 1024.14,1207.89 1024.73,1205.39 1025.32,1206.82 1025.9,1208.1 1026.49,1208.32 1027.07,1208.48 1027.66,1211.24 1028.25,1211.14 1028.83,1212.22 1029.42,1212.21 1030.01,1213.31 1030.59,1213.44 1031.18,1214.62 1031.77,1215.84 1032.35,1215.35 1032.94,1218.83 1033.52,1219.52 1034.11,1219.11 1034.7,1219.73 1035.28,1218.12 1035.87,1220.36 1036.46,1218.23 1037.04,1217.82 1037.63,1217.25 1038.22,1219.65 1038.8,1219.11 1039.39,1217.06 1039.98,1215.36 1040.56,1213.73 1041.15,1213.36 1041.73,1210.44 1042.32,1210.34 1042.91,1211.62 1043.49,1210.21 1044.08,1210.17 1044.67,1208.97 1045.25,1207.64 1045.84,1207.65 1046.43,1207.64 1047.01,1209 1047.6,1206.48 1048.19,1206.49 1048.77,1206.56 1049.36,1206.86 1049.94,1207.14 1050.53,1203.19 1051.12,1203.71 1051.7,1204.05 1052.29,1206.91 1052.88,1205.79 1053.46,1204.76 1054.05,1204.95 1054.64,1207.75 1055.22,1204.01 1055.81,1204.6 1056.39,1204.6 1056.98,1204.79 1057.57,1202.34 1058.15,1202.89 1058.74,1203.11 1059.33,1203.4 1059.91,1203.7 1060.5,1203.76 1061.09,1204.13 1061.67,1203.04 1062.26,1204.51 1062.85,1203.68 1063.43,1204.17 1064.02,1204.34 1064.6,1207.27 1065.19,1205.84 1065.78,1206.35 1066.36,1204.22 1066.95,1207.1 1067.54,1203.39 1068.12,1201.31 1068.71,1201.39 1069.3,1201.84 1069.88,1202.15 1070.47,1202.39 1071.06,1201.44 1071.64,1201.74 1072.23,1202.39 1072.81,1203.88 1073.4,1205.25 1073.99,1205.4 1074.57,1206.82 1075.16,1208.01 1075.75,1206.93 1076.33,1207.17 1076.92,1208.56 1077.51,1203.21 1078.09,1203.38 1078.68,1204.71 1079.26,1204.98 1079.85,1206.73 1080.44,1208.21 1081.02,1210.88 1081.61,1210.7 1082.2,1212.26 1082.78,1209.64 1083.37,1211.01 1083.96,1212.35 1084.54,1213.47 1085.13,1216.07 1085.72,1218.15 1086.3,1222.77 1086.89,1223.33 1087.47,1222.55 1088.06,1223.23 1088.65,1223.76 1089.23,1222.84 1089.82,1222.1 1090.41,1221.48 1090.99,1220.83 1091.58,1217.7 1092.17,1218.18 1092.75,1219.06 1093.34,1219.89 1093.93,1219.51 1094.51,1220.43 1095.1,1221.05 1095.68,1219.02 1096.27,1218.43 1096.86,1216.5 1097.44,1217.46 1098.03,1215.63 1098.62,1215.18 1099.2,1214.62 1099.79,1215.77 1100.38,1216.83 1100.96,1215.27 1101.55,1216.26 1102.14,1214.57 1102.72,1215.54 1103.31,1216.53 1103.89,1216.3 1104.48,1214.31 1105.07,1216.62 1105.65,1217.71 1106.24,1217.17 1106.83,1216.54 1107.41,1216.04 1108,1214.13 1108.59,1212.54 1109.17,1209.77 1109.76,1206.86 1110.34,1208.38 1110.93,1208.21 1111.52,1209.37 1112.1,1209.48 1112.69,1209.46 1113.28,1210.86 1113.86,1210.54 1114.45,1210.64 1115.04,1210.52 1115.62,1210.2 1116.21,1208.91 1116.8,1211.46 1117.38,1211.31 1117.97,1211.2 1118.55,1209.66 1119.14,1208.12 1119.73,1205.65 1120.31,1205.76 1120.9,1203.21 1121.49,1205.02 1122.07,1202.67 1122.66,1201.97 1123.25,1203.39 1123.83,1203.74 1124.42,1205.23 1125.01,1204.21 1125.59,1200.22 1126.18,1202.05 1126.76,1202.47 1127.35,1205.27 1127.94,1205.38 1128.52,1206.94 1129.11,1204.59 1129.7,1205.09 1130.28,1200.24 1130.87,1202.09 1131.46,1202.2 1132.04,1202.79 1132.63,1202.94 1133.21,1204.31 1133.8,1202.96 1134.39,1203.21 1134.97,1203.67 1135.56,1203.96 1136.15,1205.53 1136.73,1205.41 1137.32,1205.89 1137.91,1207.18 1138.49,1205.73 1139.08,1209.76 1139.67,1205.62 1140.25,1205.67 1140.84,1205.61 1141.42,1207.14 1142.01,1207.22 1142.6,1208.92 1143.18,1207.6 1143.77,1209.11 1144.36,1210.32 1144.94,1208.9 1145.53,1209.8 1146.12,1209.73 1146.7,1210.06 1147.29,1211.04 1147.88,1212.21 1148.46,1212.03 1149.05,1213.14 1149.63,1215.46 1150.22,1213.88 1150.81,1212.25 1151.39,1210.75 1151.98,1213.41 1152.57,1213.24 1153.15,1215.87 1153.74,1214.07 1154.33,1212.86 1154.91,1215.18 1155.5,1214.74 1156.09,1215.57 1156.67,1214.08 1157.26,1209.57 1157.84,1205.62 1158.43,1205.77 1159.02,1204.8 1159.6,1206.13 1160.19,1204.78 1160.78,1200.91 1161.36,1200.12 1161.95,1198.03 1162.54,1199.85 1163.12,1200.25 1163.71,1200.6 1164.29,1199.65 1164.88,1201.36 1165.47,1203.15 1166.05,1203.23 1166.64,1208.87 1167.23,1207.36 1167.81,1206.14 1168.4,1206.3 1168.99,1207.52 1169.57,1209.1 1170.16,1211.89 1170.75,1214.38 1171.33,1213.07 1171.92,1211.78 1172.5,1209.08 1173.09,1209.2 1173.68,1209.17 1174.26,1207.77 1174.85,1207.77 1175.44,1206.66 1176.02,1208.13 1176.61,1208.32 1177.2,1208.29 1177.78,1208.19 1178.37,1210.9 1178.96,1210.81 1179.54,1211.98 1180.13,1213.13 1180.71,1215.63 1181.3,1212.95 1181.89,1210.53 1182.47,1210.41 1183.06,1209.23 1183.65,1210.55 1184.23,1212.95 1184.82,1212.47 1185.41,1213.47 1185.99,1212.03 1186.58,1213.24 1187.16,1211.5 1187.75,1213.84 1188.34,1213.72 1188.92,1216.97 1189.51,1215.47 1190.1,1212.53 1190.68,1213.54 1191.27,1212.1 1191.86,1210.5 1192.44,1208.93 1193.03,1207.54 1193.62,1207.62 1194.2,1206.44 1194.79,1204.09 1195.37,1203.07 1195.96,1204.45 1196.55,1201.88 1197.13,1200.87 1197.72,1201.29 1198.31,1197.75 1198.89,1197.12 1199.48,1196.44 1200.07,1197.03 1200.65,1196.24 1201.24,1198.11 1201.83,1200.73 1202.41,1202.35 1203,1199 1203.58,1199.73 1204.17,1198.95 1204.76,1196.71 1205.34,1198.58 1205.93,1199.11 1206.52,1202.32 1207.1,1203.97 1207.69,1200.65 1208.28,1201.03 1208.86,1202.9 1209.45,1206.14 1210.03,1206.43 1210.62,1207.78 1211.21,1207.8 1211.79,1206.56 1212.38,1206.46 1212.97,1206.62 1213.55,1204.43 1214.14,1204.63 1214.73,1206.02 1215.31,1208.89 1215.9,1206.26 1216.49,1206.47 1217.07,1205.16 1217.66,1207.86 1218.24,1208.99 1218.83,1206.4 1219.42,1205.14 1220,1205.36 1220.59,1206.87 1221.18,1209.72 1221.76,1211.08 1222.35,1210.86 1222.94,1210.79 1223.52,1210.95 1224.11,1206.92 1224.7,1208.2 1225.28,1211.04 1225.87,1210.94 1226.45,1209.52 1227.04,1210.57 1227.63,1210.22 1228.21,1212.63 1228.8,1212.53 1229.39,1214.78 1229.97,1213.09 1230.56,1211.42 1231.15,1212.8 1231.73,1215.41 1232.32,1213.87 1232.91,1214.86 1233.49,1213.31 1234.08,1214.17 1234.66,1211.6 1235.25,1211.49 1235.84,1211.39 1236.42,1209.74 1237.01,1211.26 1237.6,1212.75 1238.18,1209.81 1238.77,1210.93 1239.36,1209.63 1239.94,1209.51 1240.53,1210.85 1241.11,1210.82 1241.7,1214.52 1242.29,1214.36 1242.87,1214.1 1243.46,1213.9 1244.05,1212.63 1244.63,1213.94 1245.22,1213.68 1245.81,1217.08 1246.39,1216.71 1246.98,1216.23 1247.57,1216.82 1248.15,1218.9 1248.74,1217.2 1249.32,1219.06 1249.91,1217.25 1250.5,1212.62 1251.08,1211.16 1251.67,1212.37 1252.26,1210.98 1252.84,1211.06 1253.43,1212.25 1254.02,1208.47 1254.6,1207.44 1255.19,1207.38 1255.78,1207.83 1256.36,1206.83 1256.95,1207.03 1257.53,1205.7 1258.12,1203.43 1258.71,1203.82 1259.29,1205.69 1259.88,1207.28 1260.47,1207.67 1261.05,1206.39 1261.64,1206.59 1262.23,1205.32 1262.81,1205.42 1263.4,1201.74 1263.98,1200.73 1264.57,1198.68 1265.16,1198.14 1265.74,1199.66 1266.33,1201.24 1266.92,1201.53 1267.5,1203.05 1268.09,1205.72 1268.68,1207.21 1269.26,1207.3 1269.85,1209.77 1270.44,1208.61 1271.02,1208.37 1271.61,1211.29 1272.19,1211.36 1272.78,1208.59 1273.37,1209.65 1273.95,1206.83 1274.54,1210.66 1275.13,1207.84 1275.71,1206.65 1276.3,1204.24 1276.89,1204.39 1277.47,1204.86 1278.06,1205.07 1278.65,1204.18 1279.23,1202.82 1279.82,1204.47 1280.4,1206.05 1280.99,1207.29 1281.58,1206.25 1282.16,1206.34 1282.75,1207.68 1283.34,1208.92 1283.92,1209.02 1284.51,1207.69 1285.1,1207.85 1285.68,1207.59 1286.27,1210.3 1286.86,1214.48 1287.44,1214.12 1288.03,1212.4 1288.61,1213.68 1289.2,1213.59 1289.79,1213.42 1290.37,1213.14 1290.96,1214.12 1291.55,1213.72 1292.13,1210.92 1292.72,1211.95 1293.31,1211.72 1293.89,1213.2 1294.48,1212.03 1295.06,1214.45 1295.65,1214.17 1296.24,1214.97 1296.82,1212.04 1297.41,1210.52 1298,1215.72 1298.58,1213.95 1299.17,1217.74 1299.76,1217.11 1300.34,1217.92 1300.93,1218.65 1301.52,1217.95 1302.1,1217.48 1302.69,1217.09 1303.27,1217.9 1303.86,1215.81 1304.45,1213.96 1305.03,1215.11 1305.62,1212.06 1306.21,1210.51 1306.79,1210.66 1307.38,1208.02 1307.97,1209.51 1308.55,1208 1309.14,1207.91 1309.73,1207.91 1310.31,1205.05 1310.9,1205.18 1311.48,1204.18 1312.07,1203.09 1312.66,1203.21 1313.24,1203.44 1313.83,1206.21 1314.42,1206.38 1315,1206.56 1315.59,1205.47 1316.18,1208.44 1316.76,1207.13 1317.35,1208.56 1317.93,1208.52 1318.52,1208.64 1319.11,1209.98 1319.69,1207.4 1320.28,1206 1320.87,1207.42 1321.45,1208.77 1322.04,1208.68 1322.63,1206.3 1323.21,1206.44 1323.8,1207.74 1324.39,1209.18 1324.97,1210.68 1325.56,1211.99 1326.14,1210.65 1326.73,1208.14 1327.32,1208.13 1327.9,1207.82 1328.49,1206.55 1329.08,1206.73 1329.66,1207.09 1330.25,1207.07 1330.84,1208.3 1331.42,1208.42 1332.01,1209.84 1332.6,1208.29 1333.18,1208.77 1333.77,1208.91 1334.35,1207.65 1334.94,1206.29 1335.53,1206.47 1336.11,1208.03 1336.7,1210.35 1337.29,1207.74 1337.87,1209.06 1338.46,1207.6 1339.05,1206.5 1339.63,1206.43 1340.22,1209.21 1340.8,1210.59 1341.39,1210.79 1341.98,1210.64 1342.56,1209.28 1343.15,1208.3 1343.74,1209.53 1344.32,1209.43 1344.91,1209.52 1345.5,1205.44 1346.08,1206.85 1346.67,1208.43 1347.26,1209.65 1347.84,1204.76 1348.43,1205.03 1349.01,1205.53 1349.6,1204.4 1350.19,1203.48 1350.77,1206.42 1351.36,1209.26 1351.95,1209.02 1352.53,1206.41 1353.12,1205.54 1353.71,1204.33 1354.29,1203.48 1354.88,1205.02 1355.47,1206.39 1356.05,1205.5 1356.64,1205.86 1357.22,1207.32 1357.81,1207.69 1358.4,1211.73 1358.98,1208.95 1359.57,1211.62 1360.16,1211.48 1360.74,1210.11 1361.33,1207.38 1361.92,1208.86 1362.5,1208.81 1363.09,1208.81 1363.68,1211.47 1364.26,1208.79 1364.85,1208.89 1365.43,1207.84 1366.02,1210.45 1366.61,1210.37 1367.19,1207.69 1367.78,1211.47 1368.37,1212.48 1368.95,1214.73 1369.54,1215.44 1370.13,1218.89 1370.71,1218.39 1371.3,1217.86 1371.88,1214.69 1372.47,1212 1373.06,1209.22 1373.64,1207.82 1374.23,1206.37 1374.82,1203.91 1375.4,1205.32 1375.99,1204.25 1376.58,1205.66 1377.16,1204.62 1377.75,1204.81 1378.34,1206.28 1378.92,1206.18 1379.51,1205.15 1380.09,1204.02 1380.68,1204.23 1381.27,1208.41 1381.85,1207.25 1382.44,1208.92 1383.03,1206.06 1383.61,1205.15 1384.2,1206.83 1384.79,1208.44 1385.37,1209.89 1385.96,1211.06 1386.55,1212.09 1387.13,1209.24 1387.72,1211.91 1388.3,1214.24 1388.89,1216.47 1389.48,1214.77 1390.06,1214.31 1390.65,1214.2 1391.24,1213.64 1391.82,1213.25 1392.41,1217.76 1393,1214.91 1393.58,1215.76 1394.17,1212.79 1394.75,1212.8 1395.34,1211.53 1395.93,1211.39 1396.51,1212.64 1397.1,1213.75 1397.69,1215.98 1398.27,1215.82 1398.86,1215.17 1399.45,1217.27 1400.03,1216.99 1400.62,1216.82 1401.21,1216.58 1401.79,1213.6 1402.38,1212.1 1402.96,1210.46 1403.55,1211.67 1404.14,1211.69 1404.72,1212.98 1405.31,1215.32 1405.9,1213.41 1406.48,1205.67 1407.07,1207.11 1407.66,1207.02 1408.24,1207.11 1408.83,1208.41 1409.42,1208.09 1410,1205.6 1410.59,1203.14 1411.17,1204.6 1411.76,1203.57 1412.35,1206.68 1412.93,1202.93 1413.52,1201.75 1414.11,1202.14 1414.69,1206.33 1415.28,1204.98 1415.87,1205.11 1416.45,1206.43 1417.04,1206.73 1417.63,1206.83 1418.21,1205.75 1418.8,1206 1419.38,1207.59 1419.97,1210.1 1420.56,1209.95 1421.14,1209.89 1421.73,1209.81 1422.32,1211.13 1422.9,1212.19 1423.49,1213.13 1424.08,1211.66 1424.66,1210.57 1425.25,1211.84 1425.83,1214.22 1426.42,1213.77 1427.01,1210.62 1427.59,1206.68 1428.18,1208.17 1428.77,1208.38 1429.35,1207.41 1429.94,1207.49 1430.53,1206.05 1431.11,1205.18 1431.7,1208.15 1432.29,1208.17 1432.87,1206.77 1433.46,1204.24 1434.04,1207.08 1434.63,1205.85 1435.22,1204.25 1435.8,1203.03 1436.39,1204.89 1436.98,1205.16 1437.56,1208.15 1438.15,1208.17 1438.74,1210.4 1439.32,1210.41 1439.91,1207.57 1440.5,1208.89 1441.08,1207.62 1441.67,1207.6 1442.25,1207.32 1442.84,1207.47 1443.43,1202.24 1444.01,1202.58 1444.6,1202.86 1445.19,1203.28 1445.77,1203.64 1446.36,1203.82 1446.95,1206.69 1447.53,1204.25 1448.12,1205.85 1448.7,1207.27 1449.29,1205.8 1449.88,1206.03 1450.46,1206.02 1451.05,1203.65 1451.64,1203.73 1452.22,1204.06 1452.81,1205.93 1453.4,1203.59 1453.98,1203.9 1454.57,1203.09 1455.16,1205.82 1455.74,1204.67 1456.33,1206.2 1456.91,1205.06 1457.5,1205.39 1458.09,1207.09 1458.67,1208.49 1459.26,1208.52 1459.85,1205.9 1460.43,1202.22 1461.02,1204.11 1461.61,1203.21 1462.19,1206.21 1462.78,1208.94 1463.37,1208.68 1463.95,1208.39 1464.54,1209.6 1465.12,1213.49 1465.71,1210.27 1466.3,1210.13 1466.88,1211.2 1467.47,1207.35 1468.06,1210.23 1468.64,1211.48 1469.23,1210.22 1469.82,1210.11 1470.4,1211.81 1470.99,1211.73 1471.57,1211.62 1472.16,1211.79 1472.75,1209.23 1473.33,1210.21 1473.92,1211.26 1474.51,1209.64 1475.09,1213.25 1475.68,1211.79 1476.27,1211.65 1476.85,1210.03 1477.44,1212.54 1478.03,1214.99 1478.61,1213.52 1479.2,1212.19 1479.78,1210.6 1480.37,1206.7 1480.96,1208.09 1481.54,1210.8 1482.13,1213.15 1482.72,1211.77 1483.3,1210.43 1483.89,1211.44 1484.48,1211.37 1485.06,1208.47 1485.65,1212.19 1486.24,1213.44 1486.82,1214.29 1487.41,1215.15 1487.99,1214.75 1488.58,1215.74 1489.17,1216.49 1489.75,1218.56 1490.34,1220.45 1490.93,1217.15 1491.51,1215.31 1492.1,1211 1492.69,1209.7 1493.27,1209.75 1493.86,1211.23 1494.45,1213.82 1495.03,1210.87 1495.62,1209.69 1496.2,1210.9 1496.79,1211.81 1497.38,1208.7 1497.96,1208.96 1498.55,1210.34 1499.14,1207.61 1499.72,1211.21 1500.31,1213.58 1500.9,1212.16 1501.48,1212.09 1502.07,1210.42 1502.65,1213.07 1503.24,1211.66 1503.83,1212.9 1504.41,1211.27 1505,1211.18 1505.59,1211.38 1506.17,1208.81 1506.76,1207.74 1507.35,1205.2 1507.93,1205.2 1508.52,1204.13 1509.11,1204.63 1509.69,1205.1 1510.28,1203.81 1510.86,1203.75 1511.45,1202.83 1512.04,1203.39 1512.62,1204.81 1513.21,1202.24 1513.8,1199.87 1514.38,1203.04 1514.97,1200.71 1515.56,1201.23 1516.14,1197.77 1516.73,1198.36 1517.32,1198.75 1517.9,1199.13 1518.49,1199.78 1519.07,1202.77 1519.66,1206.76 1520.25,1206.96 1520.83,1205.64 1521.42,1203.48 1522.01,1203.71 1522.59,1204.18 1523.18,1203.11 1523.77,1204.84 1524.35,1206.57 1524.94,1208.37 1525.52,1208.64 1526.11,1206.11 1526.7,1206.07 1527.28,1206.33 1527.87,1205.15 1528.46,1204.48 1529.04,1206.22 1529.63,1211.4 1530.22,1211.36 1530.8,1210.13 1531.39,1210.44 1531.98,1213.07 1532.56,1214.14 1533.15,1215.35 1533.73,1215.28 1534.32,1215.4 1534.91,1215.06 1535.49,1213.45 1536.08,1214.35 1536.67,1215.03 1537.25,1211.84 1537.84,1212.93 1538.43,1218.04 1539.01,1218.64 1539.6,1220.97 1540.19,1218.99 1540.77,1216.97 1541.36,1216.57 1541.94,1213.8 1542.53,1215.94 1543.12,1216.71 1543.7,1216.45 1544.29,1214.83 1544.88,1215.8 1545.46,1219.27 1546.05,1219.86 1546.64,1219.02 1547.22,1219.94 1547.81,1214.17 1548.4,1215.23 1548.98,1216.14 1549.57,1214.37 1550.15,1212.95 1550.74,1214.04 1551.33,1213.92 1551.91,1213.63 1552.5,1214.72 1553.09,1213.02 1553.67,1212.89 1554.26,1211.25 1554.85,1211.29 1555.43,1211.22 1556.02,1212.27 1556.6,1213.55 1557.19,1213.26 1557.78,1211.63 1558.36,1212.78 1558.95,1210.29 1559.54,1212.65 1560.12,1211.25 1560.71,1209.92 1561.3,1207.33 1561.88,1207.33 1562.47,1207.34 1563.06,1203.3 1563.64,1203.73 1564.23,1203.69 1564.81,1203.76 1565.4,1205.16 1565.99,1203.1 1566.57,1204.78 1567.16,1204.84 1567.75,1204.91 1568.33,1207.63 1568.92,1207.73 1569.51,1206.42 1570.09,1207.74 1570.68,1205.06 1571.27,1206.45 1571.85,1203.92 1572.44,1205.82 1573.02,1205.94 1573.61,1207.35 1574.2,1205.9 1574.78,1207.01 1575.37,1204.27 1575.96,1203.38 1576.54,1202.53 1577.13,1202.64 1577.72,1200.52 1578.3,1202.31 1578.89,1202.75 1579.47,1201.92 1580.06,1204.91 1580.65,1205.29 1581.23,1208.19 1581.82,1210.53 1582.41,1211.91 1582.99,1211.63 1583.58,1211.49 1584.17,1211.47 1584.75,1208.63 1585.34,1207.27 1585.93,1209.87 1586.51,1208.33 1587.1,1207.06 1587.68,1206.87 1588.27,1208.12 1588.86,1210.56 1589.44,1210.36 1590.03,1211.98 1590.62,1207.8 1591.2,1207.78 1591.79,1210.04 1592.38,1208.59 1592.96,1207.16 1593.55,1205.83 1594.14,1204.56 1594.72,1204.57 1595.31,1204.62 1595.89,1204.83 1596.48,1204.01 1597.07,1205.43 1597.65,1203.29 1598.24,1202.42 1598.83,1202.81 1599.41,1202.96 1600,1203.37 1600.59,1205.13 1601.17,1205.26 1601.76,1205.61 1602.34,1202.96 1602.93,1204.56 1603.52,1207.49 1604.1,1207.64 1604.69,1207.53 1605.28,1207.97 1605.86,1208.02 1606.45,1205.09 1607.04,1205.62 1607.62,1207.06 1608.21,1204.53 1608.8,1206.02 1609.38,1206.41 1609.97,1205.33 1610.55,1200.48 1611.14,1207.42 1611.73,1206.37 1612.31,1207.5 1612.9,1208.93 1613.49,1208.92 1614.07,1206.04 1614.66,1205.96 1615.25,1204.44 1615.83,1206.01 1616.42,1204.91 1617.01,1203.86 1617.59,1205.4 1618.18,1204.54 1618.76,1203.53 1619.35,1202.44 1619.94,1202.91 1620.52,1203.38 1621.11,1203.89 1621.7,1205.52 1622.28,1206.96 1622.87,1207.18 1623.46,1206.32 1624.04,1205.2 1624.63,1206.82 1625.22,1208.45 1625.8,1205.88 1626.39,1207.63 1626.97,1207.48 1627.56,1206.52 1628.15,1207.69 1628.73,1208.05 1629.32,1209.55 1629.91,1208.27 1630.49,1210.84 1631.08,1210.84 1631.67,1210.75 1632.25,1209.4 1632.84,1209.55 1633.42,1210.54 1634.01,1211.74 1634.6,1211.46 1635.18,1211.39 1635.77,1208.64 1636.36,1208.32 1636.94,1206.75 1637.53,1205.38 1638.12,1205.33 1638.7,1204.18 1639.29,1201.97 1639.88,1204.97 1640.46,1206.33 1641.05,1205.05 1641.63,1204.21 1642.22,1205.88 1642.81,1203.56 1643.39,1203.67 1643.98,1206.84 1644.57,1205.55 1645.15,1205.76 1645.74,1204.72 1646.33,1202.44 1646.91,1202.94 1647.5,1202 1648.09,1205.16 1648.67,1206.78 1649.26,1208.33 1649.84,1208.54 1650.43,1210.78 1651.02,1209.24 1651.6,1203.98 1652.19,1209.54 1652.78,1211.89 1653.36,1210.4 1653.95,1212.92 1654.54,1215.42 1655.12,1214.95 1655.71,1210.71 1656.29,1209.4 1656.88,1209.53 1657.47,1211.03 1658.05,1212.26 1658.64,1212.21 1659.23,1213.58 1659.81,1217.04 1660.4,1215.14 1660.99,1214.91 1661.57,1213.2 1662.16,1214.22 1662.75,1214.02 1663.33,1212.47 1663.92,1213.57 1664.5,1213.53 1665.09,1212.14 1665.68,1212.14 1666.26,1213.29 1666.85,1210.47 1667.44,1207.74 1668.02,1210.22 1668.61,1210.29 1669.2,1206.34 1669.78,1205.29 1670.37,1206.83 1670.96,1205.46 1671.54,1204.25 1672.13,1204.35 1672.71,1205.77 1673.3,1207.25 1673.89,1206.13 1674.47,1205.08 1675.06,1206.53 1675.65,1209.09 1676.23,1209.3 1676.82,1212.07 1677.41,1213.4 1677.99,1215.98 1678.58,1219.56 1679.17,1221.82 1679.75,1218.25 1680.34,1215.21 1680.92,1213.61 1681.51,1212.36 1682.1,1212.21 1682.68,1212.02 1683.27,1209.18 1683.86,1210.82 1684.44,1210.68 1685.03,1209.54 1685.62,1212.09 1686.2,1211.89 1686.79,1210.49 1687.37,1210.62 1687.96,1210.38 1688.55,1212.77 1689.13,1212.1 1689.72,1213.24 1690.31,1211.97 1690.89,1210.47 1691.48,1209.01 1692.07,1208.63 1692.65,1207.22 1693.24,1208.53 1693.83,1208.49 1694.41,1211.31 1695,1209.83 1695.58,1211.12 1696.17,1209.85 1696.76,1211.06 1697.34,1211.14 1697.93,1212.22 1698.52,1214.7 1699.1,1213.33 1699.69,1215.77 1700.28,1215.66 1700.86,1214.11 1701.45,1212.46 1702.04,1215.92 1702.62,1213.95 1703.21,1210.99 1703.79,1212.22 1704.38,1214.82 1704.97,1215.76 1705.55,1216.85 1706.14,1216.56 1706.73,1218.82 1707.31,1216.89 1707.9,1212.54 1708.49,1209.66 1709.07,1209.84 1709.66,1209.67 1710.24,1212.05 1710.83,1211.87 1711.42,1210.47 1712,1207.88 1712.59,1207.64 1713.18,1210.45 1713.76,1208.62 1714.35,1209.98 1714.94,1211.08 1715.52,1212.31 1716.11,1212.52 1716.7,1215.01 1717.28,1214.55 1717.87,1214.52 1718.45,1214.21 1719.04,1213.61 1719.63,1213.52 1720.21,1214.65 1720.8,1215.78 1721.39,1216.52 1721.97,1217.22 1722.56,1216.59 1723.15,1216.08 1723.73,1213.21 1724.32,1211.62 1724.91,1208.81 1725.49,1207.75 1726.08,1210.49 1726.66,1207.63 1727.25,1206.22 1727.84,1207.81 1728.42,1209.19 1729.01,1209.25 1729.6,1209.02 1730.18,1207.69 1730.77,1206.14 1731.36,1202.37 1731.94,1206.34 1732.53,1207.82 1733.11,1207.93 1733.7,1206.88 1734.29,1205.63 1734.87,1204.48 1735.46,1208.49 1736.05,1206.99 1736.63,1207.41 1737.22,1207.78 1737.81,1207.68 1738.39,1207.74 1738.98,1207.8 1739.57,1206.9 1740.15,1207.16 1740.74,1208.17 1741.32,1205.84 1741.91,1204.85 1742.5,1206.74 1743.08,1206.72 1743.67,1205.57 1744.26,1203.08 1744.84,1202.3 1745.43,1201.17 1746.02,1202.14 1746.6,1207.86 1747.19,1203.96 1747.78,1203.84 1748.36,1201.3 1748.95,1200.67 1749.53,1201.03 1750.12,1205.01 1750.71,1206.55 1751.29,1205.38 1751.88,1207.1 1752.47,1207.16 1753.05,1208.35 1753.64,1210.92 1754.23,1211.23 1754.81,1209.49 1755.4,1209.45 1755.99,1209.19 1756.57,1207.69 1757.16,1205.24 1757.74,1205.44 1758.33,1205.86 1758.92,1206.1 1759.5,1204.86 1760.09,1205.05 1760.68,1206.65 1761.26,1205.59 1761.85,1205.7 1762.44,1205.88 1763.02,1206.17 1763.61,1207.21 1764.19,1205.68 1764.78,1204.7 1765.37,1204.86 1765.95,1202.49 1766.54,1201.37 1767.13,1205.43 1767.71,1206.83 1768.3,1208.04 1768.89,1209.39 1769.47,1210.43 1770.06,1212.84 1770.65,1212.53 1771.23,1212.47 1771.82,1214.92 1772.4,1211.96 1772.99,1209.42 1773.58,1209.23 1774.16,1209.16 1774.75,1207.83 1775.34,1209.16 1775.92,1209.15 1776.51,1210.86 1777.1,1210.87 1777.68,1211.77 1778.27,1210.56 1778.86,1212.99 1779.44,1211.52 1780.03,1212.61 1780.61,1213.6 1781.2,1215.83 1781.79,1213.13 1782.37,1214.17 1782.96,1216.53 1783.55,1216.16 1784.13,1218.19 1784.72,1216.13 1785.31,1214.31 1785.89,1214.05 1786.48,1217.83 1787.06,1217.46 1787.65,1219.4 1788.24,1219.01 1788.82,1219.75 1789.41,1218.2 1790,1218.77 1790.58,1218.25 1791.17,1217.75 1791.76,1217.26 1792.34,1217.17 1792.93,1216.69 1793.52,1216.21 1794.1,1218.29 1794.69,1218.9 1795.27,1217.18 1795.86,1216.84 1796.45,1216.19 1797.03,1215.99 1797.62,1212.65 1798.21,1208.45 1798.79,1207.3 1799.38,1204.92 1799.97,1205.24 1800.55,1206.49 1801.14,1206.87 1801.73,1204.54 1802.31,1205.08 1802.9,1201.29 1803.48,1203.01 1804.07,1203.58 1804.66,1202.6 1805.24,1202.96 1805.83,1202.99 1806.42,1203.05 1807,1204.59 1807.59,1200.66 1808.18,1201.17 1808.76,1204.14 1809.35,1205.51 1809.94,1205.62 1810.52,1205.61 1811.11,1204.48 1811.69,1204.82 1812.28,1202.38 1812.87,1200.25 1813.45,1200.87 1814.04,1202.14 1814.63,1203.75 1815.21,1205.3 1815.8,1208.12 1816.39,1205.5 1816.97,1205.76 1817.56,1203.64 1818.14,1201.38 1818.73,1203.1 1819.32,1206.1 1819.9,1207.6 1820.49,1210.35 1821.08,1210.43 1821.66,1209.01 1822.25,1207.58 1822.84,1211.42 1823.42,1208.55 1824.01,1207.59 1824.6,1206.43 1825.18,1203.96 1825.77,1202.98 1826.35,1205.8 1826.94,1204.84 1827.53,1203.58 1828.11,1205.41 1828.7,1205.86 1829.29,1206.04 1829.87,1205.06 1830.46,1205.3 1831.05,1205.22 1831.63,1206.61 1832.22,1206.9 1832.81,1208.3 1833.39,1208.19 1833.98,1206.91 1834.56,1204.39 1835.15,1203.44 1835.74,1203.67 1836.32,1205.16 1836.91,1204.06 1837.5,1202.81 1838.08,1204.79 1838.67,1206.34 1839.26,1204.99 1839.84,1205.32 1840.43,1204.23 1841.01,1207.3 1841.6,1207.42 1842.19,1207.55 1842.77,1207.62 1843.36,1206.04 1843.95,1206.06 1844.53,1206.1 1845.12,1207.59 1845.71,1206.72 1846.29,1205.54 1846.88,1205.8 1847.47,1204.84 1848.05,1204.89 1848.64,1203.68 1849.22,1205.5 1849.81,1206.87 1850.4,1203.53 1850.98,1205.41 1851.57,1204.5 1852.16,1205.92 1852.74,1207.52 1853.33,1209.08 1853.92,1210.11 1854.5,1212.54 1855.09,1213.64 1855.68,1212.11 1856.26,1211.81 1856.85,1211.64 1857.43,1208.78 1858.02,1208.75 1858.61,1209.07 1859.19,1205.11 1859.78,1204.97 1860.37,1204.13 1860.95,1201.64 1861.54,1203.58 1862.13,1206.44 1862.71,1207.61 1863.3,1205.18 1863.88,1207.9 1864.47,1209.57 1865.06,1208.47 1865.64,1208.4 1866.23,1210.06 1866.82,1210 1867.4,1211.61 1867.99,1211.39 1868.58,1209.85 1869.16,1211.13 1869.75,1213.4 1870.34,1213.13 1870.92,1211.7 1871.51,1211.85 1872.09,1213.11 1872.68,1214.16 1873.27,1219 1873.85,1216.88 1874.44,1217.44 1875.03,1209.24 1875.61,1210.36 1876.2,1210.18 1876.79,1209.91 1877.37,1205.6 1877.96,1207.17 1878.55,1207.54 1879.13,1207.68 1879.72,1207.74 1880.3,1209.26 1880.89,1208.85 1881.48,1208.7 1882.06,1211.16 1882.65,1211.15 1883.24,1211.11 1883.82,1211.14 1884.41,1215.01 1885,1213.67 1885.58,1215.97 1886.17,1214.12 1886.76,1213.93 1887.34,1210.73 1887.93,1212.98 1888.51,1211.29 1889.1,1212.63 1889.69,1211.48 1890.27,1210.05 1890.86,1209.81 1891.45,1209.51 1892.03,1209.66 1892.62,1212.41 1893.21,1213.57 1893.79,1213.33 1894.38,1212.68 1894.96,1213.84 1895.55,1209.58 1896.14,1206.84 1896.72,1205.5 1897.31,1205.53 1897.9,1206.62 1898.48,1209.42 1899.07,1206.68 1899.66,1209.34 1900.24,1209.22 1900.83,1209.14 1901.42,1209.04 1902,1210.64 1902.59,1212.05 1903.17,1210.55 1903.76,1209.22 1904.35,1209.45 1904.93,1209.74 1905.52,1208.42 1906.11,1205.62 1906.69,1205.75 1907.28,1207.45 1907.87,1208.88 1908.45,1207.32 1909.04,1208.66 1909.63,1207.35 1910.21,1207.24 1910.8,1207.31 1911.38,1207.34 1911.97,1207.43 1912.56,1204.86 1913.14,1206.28 1913.73,1209.09 1914.32,1210.35 1914.9,1210.38 1915.49,1210.42 1916.08,1210.37 1916.66,1212.84 1917.25,1212.49 1917.83,1213.71 1918.42,1214.83 1919.01,1210.94 1919.59,1208.33 1920.18,1208.32 1920.77,1209.95 1921.35,1212.57 1921.94,1216.11 1922.53,1214.46 1923.11,1214.16 1923.7,1215.04 1924.29,1212.11 1924.87,1209.17 1925.46,1209.17 1926.04,1211.48 1926.63,1211.37 1927.22,1212.62 1927.8,1212.36 1928.39,1214.79 1928.98,1218.13 1929.56,1217.83 1930.15,1217.59 1930.74,1217 1931.32,1211.58 1931.91,1208.99 1932.5,1207.83 1933.08,1210.62 1933.67,1210.44 1934.25,1212.82 1934.84,1212.53 1935.43,1212.54 1936.01,1209.67 1936.6,1205.52 1937.19,1206.94 1937.77,1207.2 1938.36,1204.62 1938.95,1202.55 1939.53,1206.83 1940.12,1205.68 1940.71,1208.6 1941.29,1208.19 1941.88,1210.66 1942.46,1209.25 1943.05,1210.29 1943.64,1210.31 1944.22,1210 1944.81,1212.35 1945.4,1211.9 1945.98,1213.13 1946.57,1213.09 1947.16,1214.21 1947.74,1211.26 1948.33,1208.62 1948.91,1208.62 1949.5,1207.4 1950.09,1208.67 1950.67,1208.73 1951.26,1206.03 1951.85,1205.93 1952.43,1204.34 1953.02,1203.4 1953.61,1198.19 1954.19,1197.49 1954.78,1198.1 1955.37,1197.59 1955.95,1198.19 1956.54,1198.79 1957.12,1201.93 1957.71,1202.46 1958.3,1202.8 1958.88,1201.92 1959.47,1201.05 1960.06,1198.64 1960.64,1199.12 1961.23,1200.81 1961.82,1199.79 1962.4,1201.66 1962.99,1200.47 1963.58,1199.75 1964.16,1200.23 1964.75,1204.47 1965.33,1204.72 1965.92,1203.57 1966.51,1202.79 1967.09,1203.18 1967.68,1203.61 1968.27,1202.59 1968.85,1204.6 1969.44,1204.87 1970.03,1206.52 1970.61,1210.74 1971.2,1211.82 1971.78,1211.75 1972.37,1211.54 1972.96,1213.88 1973.54,1213.68 1974.13,1212.05 1974.72,1206.79 1975.3,1206.91 1975.89,1208.32 1976.48,1208.23 1977.06,1208.33 1977.65,1208.41 1978.24,1208.35 1978.82,1208.34 1979.41,1208.62 1979.99,1208.61 1980.58,1210.11 1981.17,1208.84 1981.75,1205.83 1982.34,1206.03 1982.93,1208.76 1983.51,1204.74 1984.1,1203.68 1984.69,1205.18 1985.27,1206.37 1985.86,1207.42 1986.45,1211.49 1987.03,1212.52 1987.62,1212.28 1988.2,1210.53 1988.79,1209.05 1989.38,1210.76 1989.96,1210.43 1990.55,1212.76 1991.14,1215.24 1991.72,1216.43 1992.31,1214.58 1992.9,1215.45 1993.48,1211.12 1994.07,1212.38 1994.65,1211.09 1995.24,1210.78 1995.83,1208 1996.41,1205.34 1997,1204.3 1997.59,1208.13 1998.17,1208.19 1998.76,1210.74 1999.35,1211.6 1999.93,1215.3 2000.52,1213.56 2001.11,1215.93 2001.69,1214.15 2002.28,1211.29 2002.86,1211.28 2003.45,1211.47 2004.04,1212.62 2004.62,1212.72 2005.21,1213.85 2005.8,1215.07 2006.38,1215.94 2006.97,1218.15 2007.56,1217.74 2008.14,1217.26 2008.73,1222.22 2009.32,1221.96 2009.9,1221.44 2010.49,1224.59 2011.07,1223.67 2011.66,1225.66 2012.25,1225.94 2012.83,1226.37 2013.42,1228.01 2014.01,1226.88 2014.59,1223.24 2015.18,1222.31 2015.77,1220.22 2016.35,1219.88 2016.94,1219.28 2017.53,1214.98 2018.11,1213.19 2018.7,1210.57 2019.28,1207.72 2019.87,1208.9 2020.46,1206.38 2021.04,1206.38 2021.63,1206.24 2022.22,1206.17 2022.8,1206.42 2023.39,1207.78 2023.98,1208.86 2024.56,1207.44 2025.15,1208.68 2025.73,1207.46 2026.32,1207.55 2026.91,1207.35 2027.49,1208.67 2028.08,1209.72 2028.67,1208.35 2029.25,1207.04 2029.84,1207.16 2030.43,1204.69 2031.01,1206.11 2031.6,1207.55 2032.19,1207.46 2032.77,1207.47 2033.36,1208.93 2033.94,1208.68 2034.53,1211.44 2035.12,1212.88 2035.7,1211.38 2036.29,1212.92 2036.88,1212.6 2037.46,1208.65 2038.05,1209.93 2038.64,1209.86 2039.22,1208.63 2039.81,1207.37 2040.4,1207.27 2040.98,1205.96 2041.57,1204.74 2042.15,1203.62 2042.74,1204.18 2043.33,1201.85 2043.91,1202.25 2044.5,1203.85 2045.09,1201.44 2045.67,1198.95 2046.26,1200.93 2046.85,1202.56 2047.43,1201.14 2048.02,1201.5 2048.6,1202 2049.19,1201.93 2049.78,1200.93 2050.36,1202.81 2050.95,1205.93 2051.54,1205.95 2052.12,1207.57 2052.71,1207.51 2053.3,1206.55 2053.88,1206.67 2054.47,1206.8 2055.06,1207.03 2055.64,1208.52 2056.23,1208.35 2056.81,1209.45 2057.4,1209.47 2057.99,1210.66 2058.57,1210.55 2059.16,1208.22 2059.75,1209.6 2060.33,1209.65 2060.92,1211.02 2061.51,1210.73 2062.09,1208.09 2062.68,1208 2063.27,1207.6 2063.85,1205.03 2064.44,1205.17 2065.02,1204.05 2065.61,1202.86 2066.2,1201.72 2066.78,1202.06 2067.37,1202.27 2067.96,1204 2068.54,1201.63 2069.13,1199.27 2069.72,1200.06 2070.3,1203.11 2070.89,1203.85 2071.48,1204.36 2072.06,1205.95 2072.65,1206.34 2073.23,1207.61 2073.82,1206.38 2074.41,1210.11 2074.99,1208.68 2075.58,1207.35 2076.17,1207.6 2076.75,1207.53 2077.34,1207.61 2077.93,1206.63 2078.51,1206.69 2079.1,1206.79 2079.68,1206.88 2080.27,1205.95 2080.86,1206.05 2081.44,1206.35 2082.03,1208.99 2082.62,1206.18 2083.2,1207.6 2083.79,1208.94 2084.38,1211.53 2084.96,1212.44 2085.55,1210.93 2086.14,1210.74 2086.72,1210.79 2087.31,1209.43 2087.89,1206.75 2088.48,1205.62 2089.07,1204.69 2089.65,1206.14 2090.24,1205.11 2090.83,1205.73 2091.41,1204.59 2092,1206.38 2092.59,1207.77 2093.17,1208.86 2093.76,1210.17 2094.35,1211.61 2094.93,1211.54 2095.52,1212.58 2096.1,1212.68 2096.69,1213.78 2097.28,1216.42 2097.86,1214.93 2098.45,1214.54 2099.04,1214.24 2099.62,1215.17 2100.21,1214.9 2100.8,1214.68 2101.38,1216.82 2101.97,1217.71 2102.55,1217.18 2103.14,1216.7 2103.73,1212.49 2104.31,1213.58 2104.9,1211.96 2105.49,1211.79 2106.07,1210.11 2106.66,1211.56 2107.25,1212.75 2107.83,1212.58 2108.42,1212.51 2109.01,1211.22 2109.59,1210.94 2110.18,1212.24 2110.76,1213.05 2111.35,1212.73 2111.94,1212.78 2112.52,1213.67 2113.11,1214.73 2113.7,1218.27 2114.28,1217.55 2114.87,1214.55 2115.46,1212.57 2116.04,1213.56 2116.63,1213.88 2117.22,1211.09 2117.8,1208.63 2118.39,1207.51 2118.97,1204.86 2119.56,1205.09 2120.15,1202.61 2120.73,1204.22 2121.32,1204.39 2121.91,1204.51 2122.49,1203.72 2123.08,1204.16 2123.67,1201.67 2124.25,1199.29 2124.84,1199.8 2125.42,1203.05 2126.01,1204.48 2126.6,1206.01 2127.18,1206.24 2127.77,1208.94 2128.36,1209.12 2128.94,1206.32 2129.53,1203.8 2130.12,1205.59 2130.7,1206.05 2131.29,1207.42 2131.88,1209.08 2132.46,1209.15 2133.05,1209.21 2133.63,1207.89 2134.22,1205.54 2134.81,1207.25 2135.39,1208.49 2135.98,1208.59 2136.57,1208.52 2137.15,1208.21 2137.74,1210.84 2138.33,1209.4 2138.91,1209.43 2139.5,1207.83 2140.09,1210.74 2140.67,1211.9 2141.26,1212.84 2141.84,1213.53 2142.43,1213.35 2143.02,1213.14 2143.6,1215.59 2144.19,1215.45 2144.78,1217.76 2145.36,1215 2145.95,1214.64 2146.54,1215.71 2147.12,1215.53 2147.71,1216.29 2148.3,1213.23 2148.88,1213.15 2149.47,1216.47 2150.05,1217.23 2150.64,1215.59 2151.23,1211.51 2151.81,1207.27 2152.4,1208.81 2152.99,1210.03 2153.57,1209.95 2154.16,1212.54 2154.75,1211.23 2155.33,1213.77 2155.92,1214.79 2156.5,1214.47 2157.09,1215.45 2157.68,1215.08 2158.26,1213.65 \"/>\n<path clip-path=\"url(#clip752)\" d=\"M986.025 1209.49 L986.612 1209.49 L987.198 1209.49 L987.785 1209.49 L988.371 1209.49 L988.957 1209.49 L989.544 1209.49 L990.13 1209.49 L990.717 1209.49 L991.303 1209.49 L991.889 1209.49 L992.476 1209.49 L993.062 1209.49 L993.649 1209.49 L994.235 1209.49 L994.822 1209.49 L995.408 1209.49 L995.994 1209.49 L996.581 1209.49 L997.167 1209.49 L997.754 1209.49 L998.34 1209.49 L998.926 1209.49 L999.513 1209.49 L1000.1 1209.49 L1000.69 1209.49 L1001.27 1209.49 L1001.86 1209.49 L1002.44 1209.49 L1003.03 1209.49 L1003.62 1209.49 L1004.2 1209.49 L1004.79 1209.49 L1005.38 1209.49 L1005.96 1209.49 L1006.55 1209.49 L1007.14 1209.49 L1007.72 1209.49 L1008.31 1209.49 L1008.9 1209.49 L1009.48 1209.49 L1010.07 1209.49 L1010.65 1209.49 L1011.24 1209.49 L1011.83 1209.49 L1012.41 1209.49 L1013 1209.49 L1013.59 1209.49 L1014.17 1209.49 L1014.76 1209.49 L1015.35 1209.49 L1015.93 1209.49 L1016.52 1209.49 L1017.11 1209.49 L1017.69 1209.49 L1018.28 1209.49 L1018.86 1209.49 L1019.45 1209.49 L1020.04 1209.49 L1020.62 1209.49 L1021.21 1209.49 L1021.8 1209.49 L1022.38 1209.49 L1022.97 1209.49 L1023.56 1209.49 L1024.14 1209.49 L1024.73 1209.49 L1025.32 1209.49 L1025.9 1209.49 L1026.49 1209.49 L1027.07 1209.49 L1027.66 1209.49 L1028.25 1209.49 L1028.83 1209.49 L1029.42 1209.49 L1030.01 1209.49 L1030.59 1209.49 L1031.18 1209.49 L1031.77 1209.49 L1032.35 1209.49 L1032.94 1209.49 L1033.52 1209.49 L1034.11 1209.49 L1034.7 1209.49 L1035.28 1209.49 L1035.87 1209.49 L1036.46 1209.49 L1037.04 1209.49 L1037.63 1209.49 L1038.22 1209.49 L1038.8 1209.49 L1039.39 1209.49 L1039.98 1209.49 L1040.56 1209.49 L1041.15 1209.49 L1041.73 1209.49 L1042.32 1209.49 L1042.91 1209.49 L1043.49 1209.49 L1044.08 1209.49 L1044.67 1209.49 L1045.25 1209.49 L1045.84 1209.49 L1046.43 1209.49 L1047.01 1209.49 L1047.6 1209.49 L1048.19 1209.49 L1048.77 1209.49 L1049.36 1209.49 L1049.94 1209.49 L1050.53 1209.49 L1051.12 1209.49 L1051.7 1209.49 L1052.29 1209.49 L1052.88 1209.49 L1053.46 1209.49 L1054.05 1209.49 L1054.64 1209.49 L1055.22 1209.49 L1055.81 1209.49 L1056.39 1209.49 L1056.98 1209.49 L1057.57 1209.49 L1058.15 1209.49 L1058.74 1209.49 L1059.33 1209.49 L1059.91 1209.49 L1060.5 1209.49 L1061.09 1209.49 L1061.67 1209.49 L1062.26 1209.49 L1062.85 1209.49 L1063.43 1209.49 L1064.02 1209.49 L1064.6 1209.49 L1065.19 1209.49 L1065.78 1209.49 L1066.36 1209.49 L1066.95 1209.49 L1067.54 1209.49 L1068.12 1209.49 L1068.71 1209.49 L1069.3 1209.49 L1069.88 1209.49 L1070.47 1209.49 L1071.06 1209.49 L1071.64 1209.49 L1072.23 1209.49 L1072.81 1209.49 L1073.4 1209.49 L1073.99 1209.49 L1074.57 1209.49 L1075.16 1209.49 L1075.75 1209.49 L1076.33 1209.49 L1076.92 1209.49 L1077.51 1209.49 L1078.09 1209.49 L1078.68 1209.49 L1079.26 1209.49 L1079.85 1209.49 L1080.44 1209.49 L1081.02 1209.49 L1081.61 1209.49 L1082.2 1209.49 L1082.78 1209.49 L1083.37 1209.49 L1083.96 1209.49 L1084.54 1209.49 L1085.13 1209.49 L1085.72 1209.49 L1086.3 1209.49 L1086.89 1209.49 L1087.47 1209.49 L1088.06 1209.49 L1088.65 1209.49 L1089.23 1209.49 L1089.82 1209.49 L1090.41 1209.49 L1090.99 1209.49 L1091.58 1209.49 L1092.17 1209.49 L1092.75 1209.49 L1093.34 1209.49 L1093.93 1209.49 L1094.51 1209.49 L1095.1 1209.49 L1095.68 1209.49 L1096.27 1209.49 L1096.86 1209.49 L1097.44 1209.49 L1098.03 1209.49 L1098.62 1209.49 L1099.2 1209.49 L1099.79 1209.49 L1100.38 1209.49 L1100.96 1209.49 L1101.55 1209.49 L1102.14 1209.49 L1102.72 1209.49 L1103.31 1209.49 L1103.89 1209.49 L1104.48 1209.49 L1105.07 1209.49 L1105.65 1209.49 L1106.24 1209.49 L1106.83 1209.49 L1107.41 1209.49 L1108 1209.49 L1108.59 1209.49 L1109.17 1209.49 L1109.76 1209.49 L1110.34 1209.49 L1110.93 1209.49 L1111.52 1209.49 L1112.1 1209.49 L1112.69 1209.49 L1113.28 1209.49 L1113.86 1209.49 L1114.45 1209.49 L1115.04 1209.49 L1115.62 1209.49 L1116.21 1209.49 L1116.8 1209.49 L1117.38 1209.49 L1117.97 1209.49 L1118.55 1209.49 L1119.14 1209.49 L1119.73 1209.49 L1120.31 1209.49 L1120.9 1209.49 L1121.49 1209.49 L1122.07 1209.49 L1122.66 1209.49 L1123.25 1209.49 L1123.83 1209.49 L1124.42 1209.49 L1125.01 1209.49 L1125.59 1209.49 L1126.18 1209.49 L1126.76 1209.49 L1127.35 1209.49 L1127.94 1209.49 L1128.52 1209.49 L1129.11 1209.49 L1129.7 1209.49 L1130.28 1209.49 L1130.87 1209.49 L1131.46 1209.49 L1132.04 1209.49 L1132.63 1209.49 L1133.21 1209.49 L1133.8 1209.49 L1134.39 1209.49 L1134.97 1209.49 L1135.56 1209.49 L1136.15 1209.49 L1136.73 1209.49 L1137.32 1209.49 L1137.91 1209.49 L1138.49 1209.49 L1139.08 1209.49 L1139.67 1209.49 L1140.25 1209.49 L1140.84 1209.49 L1141.42 1209.49 L1142.01 1209.49 L1142.6 1209.49 L1143.18 1209.49 L1143.77 1209.49 L1144.36 1209.49 L1144.94 1209.49 L1145.53 1209.49 L1146.12 1209.49 L1146.7 1209.49 L1147.29 1209.49 L1147.88 1209.49 L1148.46 1209.49 L1149.05 1209.49 L1149.63 1209.49 L1150.22 1209.49 L1150.81 1209.49 L1151.39 1209.49 L1151.98 1209.49 L1152.57 1209.49 L1153.15 1209.49 L1153.74 1209.49 L1154.33 1209.49 L1154.91 1209.49 L1155.5 1209.49 L1156.09 1209.49 L1156.67 1209.49 L1157.26 1209.49 L1157.84 1209.49 L1158.43 1209.49 L1159.02 1209.49 L1159.6 1209.49 L1160.19 1209.49 L1160.78 1209.49 L1161.36 1209.49 L1161.95 1209.49 L1162.54 1209.49 L1163.12 1209.49 L1163.71 1209.49 L1164.29 1209.49 L1164.88 1209.49 L1165.47 1209.49 L1166.05 1209.49 L1166.64 1209.49 L1167.23 1209.49 L1167.81 1209.49 L1168.4 1209.49 L1168.99 1209.49 L1169.57 1209.49 L1170.16 1209.49 L1170.75 1209.49 L1171.33 1209.49 L1171.92 1209.49 L1172.5 1209.49 L1173.09 1209.49 L1173.68 1209.49 L1174.26 1209.49 L1174.85 1209.49 L1175.44 1209.49 L1176.02 1209.49 L1176.61 1209.49 L1177.2 1209.49 L1177.78 1209.49 L1178.37 1209.49 L1178.96 1209.49 L1179.54 1209.49 L1180.13 1209.49 L1180.71 1209.49 L1181.3 1209.49 L1181.89 1209.49 L1182.47 1209.49 L1183.06 1209.49 L1183.65 1209.49 L1184.23 1209.49 L1184.82 1209.49 L1185.41 1209.49 L1185.99 1209.49 L1186.58 1209.49 L1187.16 1209.49 L1187.75 1209.49 L1188.34 1209.49 L1188.92 1209.49 L1189.51 1209.49 L1190.1 1209.49 L1190.68 1209.49 L1191.27 1209.49 L1191.86 1209.49 L1192.44 1209.49 L1193.03 1209.49 L1193.62 1209.49 L1194.2 1209.49 L1194.79 1209.49 L1195.37 1209.49 L1195.96 1209.49 L1196.55 1209.49 L1197.13 1209.49 L1197.72 1209.49 L1198.31 1209.49 L1198.89 1209.49 L1199.48 1209.49 L1200.07 1209.49 L1200.65 1209.49 L1201.24 1209.49 L1201.83 1209.49 L1202.41 1209.49 L1203 1209.49 L1203.58 1209.49 L1204.17 1209.49 L1204.76 1209.49 L1205.34 1209.49 L1205.93 1209.49 L1206.52 1209.49 L1207.1 1209.49 L1207.69 1209.49 L1208.28 1209.49 L1208.86 1209.49 L1209.45 1209.49 L1210.03 1209.49 L1210.62 1209.49 L1211.21 1209.49 L1211.79 1209.49 L1212.38 1209.49 L1212.97 1209.49 L1213.55 1209.49 L1214.14 1209.49 L1214.73 1209.49 L1215.31 1209.49 L1215.9 1209.49 L1216.49 1209.49 L1217.07 1209.49 L1217.66 1209.49 L1218.24 1209.49 L1218.83 1209.49 L1219.42 1209.49 L1220 1209.49 L1220.59 1209.49 L1221.18 1209.49 L1221.76 1209.49 L1222.35 1209.49 L1222.94 1209.49 L1223.52 1209.49 L1224.11 1209.49 L1224.7 1209.49 L1225.28 1209.49 L1225.87 1209.49 L1226.45 1209.49 L1227.04 1209.49 L1227.63 1209.49 L1228.21 1209.49 L1228.8 1209.49 L1229.39 1209.49 L1229.97 1209.49 L1230.56 1209.49 L1231.15 1209.49 L1231.73 1209.49 L1232.32 1209.49 L1232.91 1209.49 L1233.49 1209.49 L1234.08 1209.49 L1234.66 1209.49 L1235.25 1209.49 L1235.84 1209.49 L1236.42 1209.49 L1237.01 1209.49 L1237.6 1209.49 L1238.18 1209.49 L1238.77 1209.49 L1239.36 1209.49 L1239.94 1209.49 L1240.53 1209.49 L1241.11 1209.49 L1241.7 1209.49 L1242.29 1209.49 L1242.87 1209.49 L1243.46 1209.49 L1244.05 1209.49 L1244.63 1209.49 L1245.22 1209.49 L1245.81 1209.49 L1246.39 1209.49 L1246.98 1209.49 L1247.57 1209.49 L1248.15 1209.49 L1248.74 1209.49 L1249.32 1209.49 L1249.91 1209.49 L1250.5 1209.49 L1251.08 1209.49 L1251.67 1209.49 L1252.26 1209.49 L1252.84 1209.49 L1253.43 1209.49 L1254.02 1209.49 L1254.6 1209.49 L1255.19 1209.49 L1255.78 1209.49 L1256.36 1209.49 L1256.95 1209.49 L1257.53 1209.49 L1258.12 1209.49 L1258.71 1209.49 L1259.29 1209.49 L1259.88 1209.49 L1260.47 1209.49 L1261.05 1209.49 L1261.64 1209.49 L1262.23 1209.49 L1262.81 1209.49 L1263.4 1209.49 L1263.98 1209.49 L1264.57 1209.49 L1265.16 1209.49 L1265.74 1209.49 L1266.33 1209.49 L1266.92 1209.49 L1267.5 1209.49 L1268.09 1209.49 L1268.68 1209.49 L1269.26 1209.49 L1269.85 1209.49 L1270.44 1209.49 L1271.02 1209.49 L1271.61 1209.49 L1272.19 1209.49 L1272.78 1209.49 L1273.37 1209.49 L1273.95 1209.49 L1274.54 1209.49 L1275.13 1209.49 L1275.71 1209.49 L1276.3 1209.49 L1276.89 1209.49 L1277.47 1209.49 L1278.06 1209.49 L1278.65 1209.49 L1279.23 1209.49 L1279.82 1209.49 L1280.4 1209.49 L1280.99 1209.49 L1281.58 1209.49 L1282.16 1209.49 L1282.75 1209.49 L1283.34 1209.49 L1283.92 1209.49 L1284.51 1209.49 L1285.1 1209.49 L1285.68 1209.49 L1286.27 1209.49 L1286.86 1209.49 L1287.44 1209.49 L1288.03 1209.49 L1288.61 1209.49 L1289.2 1209.49 L1289.79 1209.49 L1290.37 1209.49 L1290.96 1209.49 L1291.55 1209.49 L1292.13 1209.49 L1292.72 1209.49 L1293.31 1209.49 L1293.89 1209.49 L1294.48 1209.49 L1295.06 1209.49 L1295.65 1209.49 L1296.24 1209.49 L1296.82 1209.49 L1297.41 1209.49 L1298 1209.49 L1298.58 1209.49 L1299.17 1209.49 L1299.76 1209.49 L1300.34 1209.49 L1300.93 1209.49 L1301.52 1209.49 L1302.1 1209.49 L1302.69 1209.49 L1303.27 1209.49 L1303.86 1209.49 L1304.45 1209.49 L1305.03 1209.49 L1305.62 1209.49 L1306.21 1209.49 L1306.79 1209.49 L1307.38 1209.49 L1307.97 1209.49 L1308.55 1209.49 L1309.14 1209.49 L1309.73 1209.49 L1310.31 1209.49 L1310.9 1209.49 L1311.48 1209.49 L1312.07 1209.49 L1312.66 1209.49 L1313.24 1209.49 L1313.83 1209.49 L1314.42 1209.49 L1315 1209.49 L1315.59 1209.49 L1316.18 1209.49 L1316.76 1209.49 L1317.35 1209.49 L1317.93 1209.49 L1318.52 1209.49 L1319.11 1209.49 L1319.69 1209.49 L1320.28 1209.49 L1320.87 1209.49 L1321.45 1209.49 L1322.04 1209.49 L1322.63 1209.49 L1323.21 1209.49 L1323.8 1209.49 L1324.39 1209.49 L1324.97 1209.49 L1325.56 1209.49 L1326.14 1209.49 L1326.73 1209.49 L1327.32 1209.49 L1327.9 1209.49 L1328.49 1209.49 L1329.08 1209.49 L1329.66 1209.49 L1330.25 1209.49 L1330.84 1209.49 L1331.42 1209.49 L1332.01 1209.49 L1332.6 1209.49 L1333.18 1209.49 L1333.77 1209.49 L1334.35 1209.49 L1334.94 1209.49 L1335.53 1209.49 L1336.11 1209.49 L1336.7 1209.49 L1337.29 1209.49 L1337.87 1209.49 L1338.46 1209.49 L1339.05 1209.49 L1339.63 1209.49 L1340.22 1209.49 L1340.8 1209.49 L1341.39 1209.49 L1341.98 1209.49 L1342.56 1209.49 L1343.15 1209.49 L1343.74 1209.49 L1344.32 1209.49 L1344.91 1209.49 L1345.5 1209.49 L1346.08 1209.49 L1346.67 1209.49 L1347.26 1209.49 L1347.84 1209.49 L1348.43 1209.49 L1349.01 1209.49 L1349.6 1209.49 L1350.19 1209.49 L1350.77 1209.49 L1351.36 1209.49 L1351.95 1209.49 L1352.53 1209.49 L1353.12 1209.49 L1353.71 1209.49 L1354.29 1209.49 L1354.88 1209.49 L1355.47 1209.49 L1356.05 1209.49 L1356.64 1209.49 L1357.22 1209.49 L1357.81 1209.49 L1358.4 1209.49 L1358.98 1209.49 L1359.57 1209.49 L1360.16 1209.49 L1360.74 1209.49 L1361.33 1209.49 L1361.92 1209.49 L1362.5 1209.49 L1363.09 1209.49 L1363.68 1209.49 L1364.26 1209.49 L1364.85 1209.49 L1365.43 1209.49 L1366.02 1209.49 L1366.61 1209.49 L1367.19 1209.49 L1367.78 1209.49 L1368.37 1209.49 L1368.95 1209.49 L1369.54 1209.49 L1370.13 1209.49 L1370.71 1209.49 L1371.3 1209.49 L1371.88 1209.49 L1372.47 1209.49 L1373.06 1209.49 L1373.64 1209.49 L1374.23 1209.49 L1374.82 1209.49 L1375.4 1209.49 L1375.99 1209.49 L1376.58 1209.49 L1377.16 1209.49 L1377.75 1209.49 L1378.34 1209.49 L1378.92 1209.49 L1379.51 1209.49 L1380.09 1209.49 L1380.68 1209.49 L1381.27 1209.49 L1381.85 1209.49 L1382.44 1209.49 L1383.03 1209.49 L1383.61 1209.49 L1384.2 1209.49 L1384.79 1209.49 L1385.37 1209.49 L1385.96 1209.49 L1386.55 1209.49 L1387.13 1209.49 L1387.72 1209.49 L1388.3 1209.49 L1388.89 1209.49 L1389.48 1209.49 L1390.06 1209.49 L1390.65 1209.49 L1391.24 1209.49 L1391.82 1209.49 L1392.41 1209.49 L1393 1209.49 L1393.58 1209.49 L1394.17 1209.49 L1394.75 1209.49 L1395.34 1209.49 L1395.93 1209.49 L1396.51 1209.49 L1397.1 1209.49 L1397.69 1209.49 L1398.27 1209.49 L1398.86 1209.49 L1399.45 1209.49 L1400.03 1209.49 L1400.62 1209.49 L1401.21 1209.49 L1401.79 1209.49 L1402.38 1209.49 L1402.96 1209.49 L1403.55 1209.49 L1404.14 1209.49 L1404.72 1209.49 L1405.31 1209.49 L1405.9 1209.49 L1406.48 1209.49 L1407.07 1209.49 L1407.66 1209.49 L1408.24 1209.49 L1408.83 1209.49 L1409.42 1209.49 L1410 1209.49 L1410.59 1209.49 L1411.17 1209.49 L1411.76 1209.49 L1412.35 1209.49 L1412.93 1209.49 L1413.52 1209.49 L1414.11 1209.49 L1414.69 1209.49 L1415.28 1209.49 L1415.87 1209.49 L1416.45 1209.49 L1417.04 1209.49 L1417.63 1209.49 L1418.21 1209.49 L1418.8 1209.49 L1419.38 1209.49 L1419.97 1209.49 L1420.56 1209.49 L1421.14 1209.49 L1421.73 1209.49 L1422.32 1209.49 L1422.9 1209.49 L1423.49 1209.49 L1424.08 1209.49 L1424.66 1209.49 L1425.25 1209.49 L1425.83 1209.49 L1426.42 1209.49 L1427.01 1209.49 L1427.59 1209.49 L1428.18 1209.49 L1428.77 1209.49 L1429.35 1209.49 L1429.94 1209.49 L1430.53 1209.49 L1431.11 1209.49 L1431.7 1209.49 L1432.29 1209.49 L1432.87 1209.49 L1433.46 1209.49 L1434.04 1209.49 L1434.63 1209.49 L1435.22 1209.49 L1435.8 1209.49 L1436.39 1209.49 L1436.98 1209.49 L1437.56 1209.49 L1438.15 1209.49 L1438.74 1209.49 L1439.32 1209.49 L1439.91 1209.49 L1440.5 1209.49 L1441.08 1209.49 L1441.67 1209.49 L1442.25 1209.49 L1442.84 1209.49 L1443.43 1209.49 L1444.01 1209.49 L1444.6 1209.49 L1445.19 1209.49 L1445.77 1209.49 L1446.36 1209.49 L1446.95 1209.49 L1447.53 1209.49 L1448.12 1209.49 L1448.7 1209.49 L1449.29 1209.49 L1449.88 1209.49 L1450.46 1209.49 L1451.05 1209.49 L1451.64 1209.49 L1452.22 1209.49 L1452.81 1209.49 L1453.4 1209.49 L1453.98 1209.49 L1454.57 1209.49 L1455.16 1209.49 L1455.74 1209.49 L1456.33 1209.49 L1456.91 1209.49 L1457.5 1209.49 L1458.09 1209.49 L1458.67 1209.49 L1459.26 1209.49 L1459.85 1209.49 L1460.43 1209.49 L1461.02 1209.49 L1461.61 1209.49 L1462.19 1209.49 L1462.78 1209.49 L1463.37 1209.49 L1463.95 1209.49 L1464.54 1209.49 L1465.12 1209.49 L1465.71 1209.49 L1466.3 1209.49 L1466.88 1209.49 L1467.47 1209.49 L1468.06 1209.49 L1468.64 1209.49 L1469.23 1209.49 L1469.82 1209.49 L1470.4 1209.49 L1470.99 1209.49 L1471.57 1209.49 L1472.16 1209.49 L1472.75 1209.49 L1473.33 1209.49 L1473.92 1209.49 L1474.51 1209.49 L1475.09 1209.49 L1475.68 1209.49 L1476.27 1209.49 L1476.85 1209.49 L1477.44 1209.49 L1478.03 1209.49 L1478.61 1209.49 L1479.2 1209.49 L1479.78 1209.49 L1480.37 1209.49 L1480.96 1209.49 L1481.54 1209.49 L1482.13 1209.49 L1482.72 1209.49 L1483.3 1209.49 L1483.89 1209.49 L1484.48 1209.49 L1485.06 1209.49 L1485.65 1209.49 L1486.24 1209.49 L1486.82 1209.49 L1487.41 1209.49 L1487.99 1209.49 L1488.58 1209.49 L1489.17 1209.49 L1489.75 1209.49 L1490.34 1209.49 L1490.93 1209.49 L1491.51 1209.49 L1492.1 1209.49 L1492.69 1209.49 L1493.27 1209.49 L1493.86 1209.49 L1494.45 1209.49 L1495.03 1209.49 L1495.62 1209.49 L1496.2 1209.49 L1496.79 1209.49 L1497.38 1209.49 L1497.96 1209.49 L1498.55 1209.49 L1499.14 1209.49 L1499.72 1209.49 L1500.31 1209.49 L1500.9 1209.49 L1501.48 1209.49 L1502.07 1209.49 L1502.65 1209.49 L1503.24 1209.49 L1503.83 1209.49 L1504.41 1209.49 L1505 1209.49 L1505.59 1209.49 L1506.17 1209.49 L1506.76 1209.49 L1507.35 1209.49 L1507.93 1209.49 L1508.52 1209.49 L1509.11 1209.49 L1509.69 1209.49 L1510.28 1209.49 L1510.86 1209.49 L1511.45 1209.49 L1512.04 1209.49 L1512.62 1209.49 L1513.21 1209.49 L1513.8 1209.49 L1514.38 1209.49 L1514.97 1209.49 L1515.56 1209.49 L1516.14 1209.49 L1516.73 1209.49 L1517.32 1209.49 L1517.9 1209.49 L1518.49 1209.49 L1519.07 1209.49 L1519.66 1209.49 L1520.25 1209.49 L1520.83 1209.49 L1521.42 1209.49 L1522.01 1209.49 L1522.59 1209.49 L1523.18 1209.49 L1523.77 1209.49 L1524.35 1209.49 L1524.94 1209.49 L1525.52 1209.49 L1526.11 1209.49 L1526.7 1209.49 L1527.28 1209.49 L1527.87 1209.49 L1528.46 1209.49 L1529.04 1209.49 L1529.63 1209.49 L1530.22 1209.49 L1530.8 1209.49 L1531.39 1209.49 L1531.98 1209.49 L1532.56 1209.49 L1533.15 1209.49 L1533.73 1209.49 L1534.32 1209.49 L1534.91 1209.49 L1535.49 1209.49 L1536.08 1209.49 L1536.67 1209.49 L1537.25 1209.49 L1537.84 1209.49 L1538.43 1209.49 L1539.01 1209.49 L1539.6 1209.49 L1540.19 1209.49 L1540.77 1209.49 L1541.36 1209.49 L1541.94 1209.49 L1542.53 1209.49 L1543.12 1209.49 L1543.7 1209.49 L1544.29 1209.49 L1544.88 1209.49 L1545.46 1209.49 L1546.05 1209.49 L1546.64 1209.49 L1547.22 1209.49 L1547.81 1209.49 L1548.4 1209.49 L1548.98 1209.49 L1549.57 1209.49 L1550.15 1209.49 L1550.74 1209.49 L1551.33 1209.49 L1551.91 1209.49 L1552.5 1209.49 L1553.09 1209.49 L1553.67 1209.49 L1554.26 1209.49 L1554.85 1209.49 L1555.43 1209.49 L1556.02 1209.49 L1556.6 1209.49 L1557.19 1209.49 L1557.78 1209.49 L1558.36 1209.49 L1558.95 1209.49 L1559.54 1209.49 L1560.12 1209.49 L1560.71 1209.49 L1561.3 1209.49 L1561.88 1209.49 L1562.47 1209.49 L1563.06 1209.49 L1563.64 1209.49 L1564.23 1209.49 L1564.81 1209.49 L1565.4 1209.49 L1565.99 1209.49 L1566.57 1209.49 L1567.16 1209.49 L1567.75 1209.49 L1568.33 1209.49 L1568.92 1209.49 L1569.51 1209.49 L1570.09 1209.49 L1570.68 1209.49 L1571.27 1209.49 L1571.85 1209.49 L1572.44 1209.49 L1573.02 1209.49 L1573.61 1209.49 L1574.2 1209.49 L1574.78 1209.49 L1575.37 1209.49 L1575.96 1209.49 L1576.54 1209.49 L1577.13 1209.49 L1577.72 1209.49 L1578.3 1209.49 L1578.89 1209.49 L1579.47 1209.49 L1580.06 1209.49 L1580.65 1209.49 L1581.23 1209.49 L1581.82 1209.49 L1582.41 1209.49 L1582.99 1209.49 L1583.58 1209.49 L1584.17 1209.49 L1584.75 1209.49 L1585.34 1209.49 L1585.93 1209.49 L1586.51 1209.49 L1587.1 1209.49 L1587.68 1209.49 L1588.27 1209.49 L1588.86 1209.49 L1589.44 1209.49 L1590.03 1209.49 L1590.62 1209.49 L1591.2 1209.49 L1591.79 1209.49 L1592.38 1209.49 L1592.96 1209.49 L1593.55 1209.49 L1594.14 1209.49 L1594.72 1209.49 L1595.31 1209.49 L1595.89 1209.49 L1596.48 1209.49 L1597.07 1209.49 L1597.65 1209.49 L1598.24 1209.49 L1598.83 1209.49 L1599.41 1209.49 L1600 1209.49 L1600.59 1209.49 L1601.17 1209.49 L1601.76 1209.49 L1602.34 1209.49 L1602.93 1209.49 L1603.52 1209.49 L1604.1 1209.49 L1604.69 1209.49 L1605.28 1209.49 L1605.86 1209.49 L1606.45 1209.49 L1607.04 1209.49 L1607.62 1209.49 L1608.21 1209.49 L1608.8 1209.49 L1609.38 1209.49 L1609.97 1209.49 L1610.55 1209.49 L1611.14 1209.49 L1611.73 1209.49 L1612.31 1209.49 L1612.9 1209.49 L1613.49 1209.49 L1614.07 1209.49 L1614.66 1209.49 L1615.25 1209.49 L1615.83 1209.49 L1616.42 1209.49 L1617.01 1209.49 L1617.59 1209.49 L1618.18 1209.49 L1618.76 1209.49 L1619.35 1209.49 L1619.94 1209.49 L1620.52 1209.49 L1621.11 1209.49 L1621.7 1209.49 L1622.28 1209.49 L1622.87 1209.49 L1623.46 1209.49 L1624.04 1209.49 L1624.63 1209.49 L1625.22 1209.49 L1625.8 1209.49 L1626.39 1209.49 L1626.97 1209.49 L1627.56 1209.49 L1628.15 1209.49 L1628.73 1209.49 L1629.32 1209.49 L1629.91 1209.49 L1630.49 1209.49 L1631.08 1209.49 L1631.67 1209.49 L1632.25 1209.49 L1632.84 1209.49 L1633.42 1209.49 L1634.01 1209.49 L1634.6 1209.49 L1635.18 1209.49 L1635.77 1209.49 L1636.36 1209.49 L1636.94 1209.49 L1637.53 1209.49 L1638.12 1209.49 L1638.7 1209.49 L1639.29 1209.49 L1639.88 1209.49 L1640.46 1209.49 L1641.05 1209.49 L1641.63 1209.49 L1642.22 1209.49 L1642.81 1209.49 L1643.39 1209.49 L1643.98 1209.49 L1644.57 1209.49 L1645.15 1209.49 L1645.74 1209.49 L1646.33 1209.49 L1646.91 1209.49 L1647.5 1209.49 L1648.09 1209.49 L1648.67 1209.49 L1649.26 1209.49 L1649.84 1209.49 L1650.43 1209.49 L1651.02 1209.49 L1651.6 1209.49 L1652.19 1209.49 L1652.78 1209.49 L1653.36 1209.49 L1653.95 1209.49 L1654.54 1209.49 L1655.12 1209.49 L1655.71 1209.49 L1656.29 1209.49 L1656.88 1209.49 L1657.47 1209.49 L1658.05 1209.49 L1658.64 1209.49 L1659.23 1209.49 L1659.81 1209.49 L1660.4 1209.49 L1660.99 1209.49 L1661.57 1209.49 L1662.16 1209.49 L1662.75 1209.49 L1663.33 1209.49 L1663.92 1209.49 L1664.5 1209.49 L1665.09 1209.49 L1665.68 1209.49 L1666.26 1209.49 L1666.85 1209.49 L1667.44 1209.49 L1668.02 1209.49 L1668.61 1209.49 L1669.2 1209.49 L1669.78 1209.49 L1670.37 1209.49 L1670.96 1209.49 L1671.54 1209.49 L1672.13 1209.49 L1672.71 1209.49 L1673.3 1209.49 L1673.89 1209.49 L1674.47 1209.49 L1675.06 1209.49 L1675.65 1209.49 L1676.23 1209.49 L1676.82 1209.49 L1677.41 1209.49 L1677.99 1209.49 L1678.58 1209.49 L1679.17 1209.49 L1679.75 1209.49 L1680.34 1209.49 L1680.92 1209.49 L1681.51 1209.49 L1682.1 1209.49 L1682.68 1209.49 L1683.27 1209.49 L1683.86 1209.49 L1684.44 1209.49 L1685.03 1209.49 L1685.62 1209.49 L1686.2 1209.49 L1686.79 1209.49 L1687.37 1209.49 L1687.96 1209.49 L1688.55 1209.49 L1689.13 1209.49 L1689.72 1209.49 L1690.31 1209.49 L1690.89 1209.49 L1691.48 1209.49 L1692.07 1209.49 L1692.65 1209.49 L1693.24 1209.49 L1693.83 1209.49 L1694.41 1209.49 L1695 1209.49 L1695.58 1209.49 L1696.17 1209.49 L1696.76 1209.49 L1697.34 1209.49 L1697.93 1209.49 L1698.52 1209.49 L1699.1 1209.49 L1699.69 1209.49 L1700.28 1209.49 L1700.86 1209.49 L1701.45 1209.49 L1702.04 1209.49 L1702.62 1209.49 L1703.21 1209.49 L1703.79 1209.49 L1704.38 1209.49 L1704.97 1209.49 L1705.55 1209.49 L1706.14 1209.49 L1706.73 1209.49 L1707.31 1209.49 L1707.9 1209.49 L1708.49 1209.49 L1709.07 1209.49 L1709.66 1209.49 L1710.24 1209.49 L1710.83 1209.49 L1711.42 1209.49 L1712 1209.49 L1712.59 1209.49 L1713.18 1209.49 L1713.76 1209.49 L1714.35 1209.49 L1714.94 1209.49 L1715.52 1209.49 L1716.11 1209.49 L1716.7 1209.49 L1717.28 1209.49 L1717.87 1209.49 L1718.45 1209.49 L1719.04 1209.49 L1719.63 1209.49 L1720.21 1209.49 L1720.8 1209.49 L1721.39 1209.49 L1721.97 1209.49 L1722.56 1209.49 L1723.15 1209.49 L1723.73 1209.49 L1724.32 1209.49 L1724.91 1209.49 L1725.49 1209.49 L1726.08 1209.49 L1726.66 1209.49 L1727.25 1209.49 L1727.84 1209.49 L1728.42 1209.49 L1729.01 1209.49 L1729.6 1209.49 L1730.18 1209.49 L1730.77 1209.49 L1731.36 1209.49 L1731.94 1209.49 L1732.53 1209.49 L1733.11 1209.49 L1733.7 1209.49 L1734.29 1209.49 L1734.87 1209.49 L1735.46 1209.49 L1736.05 1209.49 L1736.63 1209.49 L1737.22 1209.49 L1737.81 1209.49 L1738.39 1209.49 L1738.98 1209.49 L1739.57 1209.49 L1740.15 1209.49 L1740.74 1209.49 L1741.32 1209.49 L1741.91 1209.49 L1742.5 1209.49 L1743.08 1209.49 L1743.67 1209.49 L1744.26 1209.49 L1744.84 1209.49 L1745.43 1209.49 L1746.02 1209.49 L1746.6 1209.49 L1747.19 1209.49 L1747.78 1209.49 L1748.36 1209.49 L1748.95 1209.49 L1749.53 1209.49 L1750.12 1209.49 L1750.71 1209.49 L1751.29 1209.49 L1751.88 1209.49 L1752.47 1209.49 L1753.05 1209.49 L1753.64 1209.49 L1754.23 1209.49 L1754.81 1209.49 L1755.4 1209.49 L1755.99 1209.49 L1756.57 1209.49 L1757.16 1209.49 L1757.74 1209.49 L1758.33 1209.49 L1758.92 1209.49 L1759.5 1209.49 L1760.09 1209.49 L1760.68 1209.49 L1761.26 1209.49 L1761.85 1209.49 L1762.44 1209.49 L1763.02 1209.49 L1763.61 1209.49 L1764.19 1209.49 L1764.78 1209.49 L1765.37 1209.49 L1765.95 1209.49 L1766.54 1209.49 L1767.13 1209.49 L1767.71 1209.49 L1768.3 1209.49 L1768.89 1209.49 L1769.47 1209.49 L1770.06 1209.49 L1770.65 1209.49 L1771.23 1209.49 L1771.82 1209.49 L1772.4 1209.49 L1772.99 1209.49 L1773.58 1209.49 L1774.16 1209.49 L1774.75 1209.49 L1775.34 1209.49 L1775.92 1209.49 L1776.51 1209.49 L1777.1 1209.49 L1777.68 1209.49 L1778.27 1209.49 L1778.86 1209.49 L1779.44 1209.49 L1780.03 1209.49 L1780.61 1209.49 L1781.2 1209.49 L1781.79 1209.49 L1782.37 1209.49 L1782.96 1209.49 L1783.55 1209.49 L1784.13 1209.49 L1784.72 1209.49 L1785.31 1209.49 L1785.89 1209.49 L1786.48 1209.49 L1787.06 1209.49 L1787.65 1209.49 L1788.24 1209.49 L1788.82 1209.49 L1789.41 1209.49 L1790 1209.49 L1790.58 1209.49 L1791.17 1209.49 L1791.76 1209.49 L1792.34 1209.49 L1792.93 1209.49 L1793.52 1209.49 L1794.1 1209.49 L1794.69 1209.49 L1795.27 1209.49 L1795.86 1209.49 L1796.45 1209.49 L1797.03 1209.49 L1797.62 1209.49 L1798.21 1209.49 L1798.79 1209.49 L1799.38 1209.49 L1799.97 1209.49 L1800.55 1209.49 L1801.14 1209.49 L1801.73 1209.49 L1802.31 1209.49 L1802.9 1209.49 L1803.48 1209.49 L1804.07 1209.49 L1804.66 1209.49 L1805.24 1209.49 L1805.83 1209.49 L1806.42 1209.49 L1807 1209.49 L1807.59 1209.49 L1808.18 1209.49 L1808.76 1209.49 L1809.35 1209.49 L1809.94 1209.49 L1810.52 1209.49 L1811.11 1209.49 L1811.69 1209.49 L1812.28 1209.49 L1812.87 1209.49 L1813.45 1209.49 L1814.04 1209.49 L1814.63 1209.49 L1815.21 1209.49 L1815.8 1209.49 L1816.39 1209.49 L1816.97 1209.49 L1817.56 1209.49 L1818.14 1209.49 L1818.73 1209.49 L1819.32 1209.49 L1819.9 1209.49 L1820.49 1209.49 L1821.08 1209.49 L1821.66 1209.49 L1822.25 1209.49 L1822.84 1209.49 L1823.42 1209.49 L1824.01 1209.49 L1824.6 1209.49 L1825.18 1209.49 L1825.77 1209.49 L1826.35 1209.49 L1826.94 1209.49 L1827.53 1209.49 L1828.11 1209.49 L1828.7 1209.49 L1829.29 1209.49 L1829.87 1209.49 L1830.46 1209.49 L1831.05 1209.49 L1831.63 1209.49 L1832.22 1209.49 L1832.81 1209.49 L1833.39 1209.49 L1833.98 1209.49 L1834.56 1209.49 L1835.15 1209.49 L1835.74 1209.49 L1836.32 1209.49 L1836.91 1209.49 L1837.5 1209.49 L1838.08 1209.49 L1838.67 1209.49 L1839.26 1209.49 L1839.84 1209.49 L1840.43 1209.49 L1841.01 1209.49 L1841.6 1209.49 L1842.19 1209.49 L1842.77 1209.49 L1843.36 1209.49 L1843.95 1209.49 L1844.53 1209.49 L1845.12 1209.49 L1845.71 1209.49 L1846.29 1209.49 L1846.88 1209.49 L1847.47 1209.49 L1848.05 1209.49 L1848.64 1209.49 L1849.22 1209.49 L1849.81 1209.49 L1850.4 1209.49 L1850.98 1209.49 L1851.57 1209.49 L1852.16 1209.49 L1852.74 1209.49 L1853.33 1209.49 L1853.92 1209.49 L1854.5 1209.49 L1855.09 1209.49 L1855.68 1209.49 L1856.26 1209.49 L1856.85 1209.49 L1857.43 1209.49 L1858.02 1209.49 L1858.61 1209.49 L1859.19 1209.49 L1859.78 1209.49 L1860.37 1209.49 L1860.95 1209.49 L1861.54 1209.49 L1862.13 1209.49 L1862.71 1209.49 L1863.3 1209.49 L1863.88 1209.49 L1864.47 1209.49 L1865.06 1209.49 L1865.64 1209.49 L1866.23 1209.49 L1866.82 1209.49 L1867.4 1209.49 L1867.99 1209.49 L1868.58 1209.49 L1869.16 1209.49 L1869.75 1209.49 L1870.34 1209.49 L1870.92 1209.49 L1871.51 1209.49 L1872.09 1209.49 L1872.68 1209.49 L1873.27 1209.49 L1873.85 1209.49 L1874.44 1209.49 L1875.03 1209.49 L1875.61 1209.49 L1876.2 1209.49 L1876.79 1209.49 L1877.37 1209.49 L1877.96 1209.49 L1878.55 1209.49 L1879.13 1209.49 L1879.72 1209.49 L1880.3 1209.49 L1880.89 1209.49 L1881.48 1209.49 L1882.06 1209.49 L1882.65 1209.49 L1883.24 1209.49 L1883.82 1209.49 L1884.41 1209.49 L1885 1209.49 L1885.58 1209.49 L1886.17 1209.49 L1886.76 1209.49 L1887.34 1209.49 L1887.93 1209.49 L1888.51 1209.49 L1889.1 1209.49 L1889.69 1209.49 L1890.27 1209.49 L1890.86 1209.49 L1891.45 1209.49 L1892.03 1209.49 L1892.62 1209.49 L1893.21 1209.49 L1893.79 1209.49 L1894.38 1209.49 L1894.96 1209.49 L1895.55 1209.49 L1896.14 1209.49 L1896.72 1209.49 L1897.31 1209.49 L1897.9 1209.49 L1898.48 1209.49 L1899.07 1209.49 L1899.66 1209.49 L1900.24 1209.49 L1900.83 1209.49 L1901.42 1209.49 L1902 1209.49 L1902.59 1209.49 L1903.17 1209.49 L1903.76 1209.49 L1904.35 1209.49 L1904.93 1209.49 L1905.52 1209.49 L1906.11 1209.49 L1906.69 1209.49 L1907.28 1209.49 L1907.87 1209.49 L1908.45 1209.49 L1909.04 1209.49 L1909.63 1209.49 L1910.21 1209.49 L1910.8 1209.49 L1911.38 1209.49 L1911.97 1209.49 L1912.56 1209.49 L1913.14 1209.49 L1913.73 1209.49 L1914.32 1209.49 L1914.9 1209.49 L1915.49 1209.49 L1916.08 1209.49 L1916.66 1209.49 L1917.25 1209.49 L1917.83 1209.49 L1918.42 1209.49 L1919.01 1209.49 L1919.59 1209.49 L1920.18 1209.49 L1920.77 1209.49 L1921.35 1209.49 L1921.94 1209.49 L1922.53 1209.49 L1923.11 1209.49 L1923.7 1209.49 L1924.29 1209.49 L1924.87 1209.49 L1925.46 1209.49 L1926.04 1209.49 L1926.63 1209.49 L1927.22 1209.49 L1927.8 1209.49 L1928.39 1209.49 L1928.98 1209.49 L1929.56 1209.49 L1930.15 1209.49 L1930.74 1209.49 L1931.32 1209.49 L1931.91 1209.49 L1932.5 1209.49 L1933.08 1209.49 L1933.67 1209.49 L1934.25 1209.49 L1934.84 1209.49 L1935.43 1209.49 L1936.01 1209.49 L1936.6 1209.49 L1937.19 1209.49 L1937.77 1209.49 L1938.36 1209.49 L1938.95 1209.49 L1939.53 1209.49 L1940.12 1209.49 L1940.71 1209.49 L1941.29 1209.49 L1941.88 1209.49 L1942.46 1209.49 L1943.05 1209.49 L1943.64 1209.49 L1944.22 1209.49 L1944.81 1209.49 L1945.4 1209.49 L1945.98 1209.49 L1946.57 1209.49 L1947.16 1209.49 L1947.74 1209.49 L1948.33 1209.49 L1948.91 1209.49 L1949.5 1209.49 L1950.09 1209.49 L1950.67 1209.49 L1951.26 1209.49 L1951.85 1209.49 L1952.43 1209.49 L1953.02 1209.49 L1953.61 1209.49 L1954.19 1209.49 L1954.78 1209.49 L1955.37 1209.49 L1955.95 1209.49 L1956.54 1209.49 L1957.12 1209.49 L1957.71 1209.49 L1958.3 1209.49 L1958.88 1209.49 L1959.47 1209.49 L1960.06 1209.49 L1960.64 1209.49 L1961.23 1209.49 L1961.82 1209.49 L1962.4 1209.49 L1962.99 1209.49 L1963.58 1209.49 L1964.16 1209.49 L1964.75 1209.49 L1965.33 1209.49 L1965.92 1209.49 L1966.51 1209.49 L1967.09 1209.49 L1967.68 1209.49 L1968.27 1209.49 L1968.85 1209.49 L1969.44 1209.49 L1970.03 1209.49 L1970.61 1209.49 L1971.2 1209.49 L1971.78 1209.49 L1972.37 1209.49 L1972.96 1209.49 L1973.54 1209.49 L1974.13 1209.49 L1974.72 1209.49 L1975.3 1209.49 L1975.89 1209.49 L1976.48 1209.49 L1977.06 1209.49 L1977.65 1209.49 L1978.24 1209.49 L1978.82 1209.49 L1979.41 1209.49 L1979.99 1209.49 L1980.58 1209.49 L1981.17 1209.49 L1981.75 1209.49 L1982.34 1209.49 L1982.93 1209.49 L1983.51 1209.49 L1984.1 1209.49 L1984.69 1209.49 L1985.27 1209.49 L1985.86 1209.49 L1986.45 1209.49 L1987.03 1209.49 L1987.62 1209.49 L1988.2 1209.49 L1988.79 1209.49 L1989.38 1209.49 L1989.96 1209.49 L1990.55 1209.49 L1991.14 1209.49 L1991.72 1209.49 L1992.31 1209.49 L1992.9 1209.49 L1993.48 1209.49 L1994.07 1209.49 L1994.65 1209.49 L1995.24 1209.49 L1995.83 1209.49 L1996.41 1209.49 L1997 1209.49 L1997.59 1209.49 L1998.17 1209.49 L1998.76 1209.49 L1999.35 1209.49 L1999.93 1209.49 L2000.52 1209.49 L2001.11 1209.49 L2001.69 1209.49 L2002.28 1209.49 L2002.86 1209.49 L2003.45 1209.49 L2004.04 1209.49 L2004.62 1209.49 L2005.21 1209.49 L2005.8 1209.49 L2006.38 1209.49 L2006.97 1209.49 L2007.56 1209.49 L2008.14 1209.49 L2008.73 1209.49 L2009.32 1209.49 L2009.9 1209.49 L2010.49 1209.49 L2011.07 1209.49 L2011.66 1209.49 L2012.25 1209.49 L2012.83 1209.49 L2013.42 1209.49 L2014.01 1209.49 L2014.59 1209.49 L2015.18 1209.49 L2015.77 1209.49 L2016.35 1209.49 L2016.94 1209.49 L2017.53 1209.49 L2018.11 1209.49 L2018.7 1209.49 L2019.28 1209.49 L2019.87 1209.49 L2020.46 1209.49 L2021.04 1209.49 L2021.63 1209.49 L2022.22 1209.49 L2022.8 1209.49 L2023.39 1209.49 L2023.98 1209.49 L2024.56 1209.49 L2025.15 1209.49 L2025.73 1209.49 L2026.32 1209.49 L2026.91 1209.49 L2027.49 1209.49 L2028.08 1209.49 L2028.67 1209.49 L2029.25 1209.49 L2029.84 1209.49 L2030.43 1209.49 L2031.01 1209.49 L2031.6 1209.49 L2032.19 1209.49 L2032.77 1209.49 L2033.36 1209.49 L2033.94 1209.49 L2034.53 1209.49 L2035.12 1209.49 L2035.7 1209.49 L2036.29 1209.49 L2036.88 1209.49 L2037.46 1209.49 L2038.05 1209.49 L2038.64 1209.49 L2039.22 1209.49 L2039.81 1209.49 L2040.4 1209.49 L2040.98 1209.49 L2041.57 1209.49 L2042.15 1209.49 L2042.74 1209.49 L2043.33 1209.49 L2043.91 1209.49 L2044.5 1209.49 L2045.09 1209.49 L2045.67 1209.49 L2046.26 1209.49 L2046.85 1209.49 L2047.43 1209.49 L2048.02 1209.49 L2048.6 1209.49 L2049.19 1209.49 L2049.78 1209.49 L2050.36 1209.49 L2050.95 1209.49 L2051.54 1209.49 L2052.12 1209.49 L2052.71 1209.49 L2053.3 1209.49 L2053.88 1209.49 L2054.47 1209.49 L2055.06 1209.49 L2055.64 1209.49 L2056.23 1209.49 L2056.81 1209.49 L2057.4 1209.49 L2057.99 1209.49 L2058.57 1209.49 L2059.16 1209.49 L2059.75 1209.49 L2060.33 1209.49 L2060.92 1209.49 L2061.51 1209.49 L2062.09 1209.49 L2062.68 1209.49 L2063.27 1209.49 L2063.85 1209.49 L2064.44 1209.49 L2065.02 1209.49 L2065.61 1209.49 L2066.2 1209.49 L2066.78 1209.49 L2067.37 1209.49 L2067.96 1209.49 L2068.54 1209.49 L2069.13 1209.49 L2069.72 1209.49 L2070.3 1209.49 L2070.89 1209.49 L2071.48 1209.49 L2072.06 1209.49 L2072.65 1209.49 L2073.23 1209.49 L2073.82 1209.49 L2074.41 1209.49 L2074.99 1209.49 L2075.58 1209.49 L2076.17 1209.49 L2076.75 1209.49 L2077.34 1209.49 L2077.93 1209.49 L2078.51 1209.49 L2079.1 1209.49 L2079.68 1209.49 L2080.27 1209.49 L2080.86 1209.49 L2081.44 1209.49 L2082.03 1209.49 L2082.62 1209.49 L2083.2 1209.49 L2083.79 1209.49 L2084.38 1209.49 L2084.96 1209.49 L2085.55 1209.49 L2086.14 1209.49 L2086.72 1209.49 L2087.31 1209.49 L2087.89 1209.49 L2088.48 1209.49 L2089.07 1209.49 L2089.65 1209.49 L2090.24 1209.49 L2090.83 1209.49 L2091.41 1209.49 L2092 1209.49 L2092.59 1209.49 L2093.17 1209.49 L2093.76 1209.49 L2094.35 1209.49 L2094.93 1209.49 L2095.52 1209.49 L2096.1 1209.49 L2096.69 1209.49 L2097.28 1209.49 L2097.86 1209.49 L2098.45 1209.49 L2099.04 1209.49 L2099.62 1209.49 L2100.21 1209.49 L2100.8 1209.49 L2101.38 1209.49 L2101.97 1209.49 L2102.55 1209.49 L2103.14 1209.49 L2103.73 1209.49 L2104.31 1209.49 L2104.9 1209.49 L2105.49 1209.49 L2106.07 1209.49 L2106.66 1209.49 L2107.25 1209.49 L2107.83 1209.49 L2108.42 1209.49 L2109.01 1209.49 L2109.59 1209.49 L2110.18 1209.49 L2110.76 1209.49 L2111.35 1209.49 L2111.94 1209.49 L2112.52 1209.49 L2113.11 1209.49 L2113.7 1209.49 L2114.28 1209.49 L2114.87 1209.49 L2115.46 1209.49 L2116.04 1209.49 L2116.63 1209.49 L2117.22 1209.49 L2117.8 1209.49 L2118.39 1209.49 L2118.97 1209.49 L2119.56 1209.49 L2120.15 1209.49 L2120.73 1209.49 L2121.32 1209.49 L2121.91 1209.49 L2122.49 1209.49 L2123.08 1209.49 L2123.67 1209.49 L2124.25 1209.49 L2124.84 1209.49 L2125.42 1209.49 L2126.01 1209.49 L2126.6 1209.49 L2127.18 1209.49 L2127.77 1209.49 L2128.36 1209.49 L2128.94 1209.49 L2129.53 1209.49 L2130.12 1209.49 L2130.7 1209.49 L2131.29 1209.49 L2131.88 1209.49 L2132.46 1209.49 L2133.05 1209.49 L2133.63 1209.49 L2134.22 1209.49 L2134.81 1209.49 L2135.39 1209.49 L2135.98 1209.49 L2136.57 1209.49 L2137.15 1209.49 L2137.74 1209.49 L2138.33 1209.49 L2138.91 1209.49 L2139.5 1209.49 L2140.09 1209.49 L2140.67 1209.49 L2141.26 1209.49 L2141.84 1209.49 L2142.43 1209.49 L2143.02 1209.49 L2143.6 1209.49 L2144.19 1209.49 L2144.78 1209.49 L2145.36 1209.49 L2145.95 1209.49 L2146.54 1209.49 L2147.12 1209.49 L2147.71 1209.49 L2148.3 1209.49 L2148.88 1209.49 L2149.47 1209.49 L2150.05 1209.49 L2150.64 1209.49 L2151.23 1209.49 L2151.81 1209.49 L2152.4 1209.49 L2152.99 1209.49 L2153.57 1209.49 L2154.16 1209.49 L2154.75 1209.49 L2155.33 1209.49 L2155.92 1209.49 L2156.5 1209.49 L2157.09 1209.49 L2157.68 1209.49 L2158.26 1209.49 L2158.26 1208.64 L2157.68 1208.64 L2157.09 1208.64 L2156.5 1208.64 L2155.92 1208.64 L2155.33 1208.64 L2154.75 1208.64 L2154.16 1208.64 L2153.57 1208.64 L2152.99 1208.64 L2152.4 1208.64 L2151.81 1208.64 L2151.23 1208.64 L2150.64 1208.64 L2150.05 1208.64 L2149.47 1208.64 L2148.88 1208.64 L2148.3 1208.64 L2147.71 1208.64 L2147.12 1208.64 L2146.54 1208.64 L2145.95 1208.64 L2145.36 1208.64 L2144.78 1208.64 L2144.19 1208.64 L2143.6 1208.64 L2143.02 1208.64 L2142.43 1208.64 L2141.84 1208.64 L2141.26 1208.64 L2140.67 1208.64 L2140.09 1208.64 L2139.5 1208.64 L2138.91 1208.64 L2138.33 1208.64 L2137.74 1208.64 L2137.15 1208.64 L2136.57 1208.64 L2135.98 1208.64 L2135.39 1208.64 L2134.81 1208.64 L2134.22 1208.64 L2133.63 1208.64 L2133.05 1208.64 L2132.46 1208.64 L2131.88 1208.64 L2131.29 1208.64 L2130.7 1208.64 L2130.12 1208.64 L2129.53 1208.64 L2128.94 1208.64 L2128.36 1208.64 L2127.77 1208.64 L2127.18 1208.64 L2126.6 1208.64 L2126.01 1208.64 L2125.42 1208.64 L2124.84 1208.64 L2124.25 1208.64 L2123.67 1208.64 L2123.08 1208.64 L2122.49 1208.64 L2121.91 1208.64 L2121.32 1208.64 L2120.73 1208.64 L2120.15 1208.64 L2119.56 1208.64 L2118.97 1208.64 L2118.39 1208.64 L2117.8 1208.64 L2117.22 1208.64 L2116.63 1208.64 L2116.04 1208.64 L2115.46 1208.64 L2114.87 1208.64 L2114.28 1208.64 L2113.7 1208.64 L2113.11 1208.64 L2112.52 1208.64 L2111.94 1208.64 L2111.35 1208.64 L2110.76 1208.64 L2110.18 1208.64 L2109.59 1208.64 L2109.01 1208.64 L2108.42 1208.64 L2107.83 1208.64 L2107.25 1208.64 L2106.66 1208.64 L2106.07 1208.64 L2105.49 1208.64 L2104.9 1208.64 L2104.31 1208.64 L2103.73 1208.64 L2103.14 1208.64 L2102.55 1208.64 L2101.97 1208.64 L2101.38 1208.64 L2100.8 1208.64 L2100.21 1208.64 L2099.62 1208.64 L2099.04 1208.64 L2098.45 1208.64 L2097.86 1208.64 L2097.28 1208.64 L2096.69 1208.64 L2096.1 1208.64 L2095.52 1208.64 L2094.93 1208.64 L2094.35 1208.64 L2093.76 1208.64 L2093.17 1208.64 L2092.59 1208.64 L2092 1208.64 L2091.41 1208.64 L2090.83 1208.64 L2090.24 1208.64 L2089.65 1208.64 L2089.07 1208.64 L2088.48 1208.64 L2087.89 1208.64 L2087.31 1208.64 L2086.72 1208.64 L2086.14 1208.64 L2085.55 1208.64 L2084.96 1208.64 L2084.38 1208.64 L2083.79 1208.64 L2083.2 1208.64 L2082.62 1208.64 L2082.03 1208.64 L2081.44 1208.64 L2080.86 1208.64 L2080.27 1208.64 L2079.68 1208.64 L2079.1 1208.64 L2078.51 1208.64 L2077.93 1208.64 L2077.34 1208.64 L2076.75 1208.64 L2076.17 1208.64 L2075.58 1208.64 L2074.99 1208.64 L2074.41 1208.64 L2073.82 1208.64 L2073.23 1208.64 L2072.65 1208.64 L2072.06 1208.64 L2071.48 1208.64 L2070.89 1208.64 L2070.3 1208.64 L2069.72 1208.64 L2069.13 1208.64 L2068.54 1208.64 L2067.96 1208.64 L2067.37 1208.64 L2066.78 1208.64 L2066.2 1208.64 L2065.61 1208.64 L2065.02 1208.64 L2064.44 1208.64 L2063.85 1208.64 L2063.27 1208.64 L2062.68 1208.64 L2062.09 1208.64 L2061.51 1208.64 L2060.92 1208.64 L2060.33 1208.64 L2059.75 1208.64 L2059.16 1208.64 L2058.57 1208.64 L2057.99 1208.64 L2057.4 1208.64 L2056.81 1208.64 L2056.23 1208.64 L2055.64 1208.64 L2055.06 1208.64 L2054.47 1208.64 L2053.88 1208.64 L2053.3 1208.64 L2052.71 1208.64 L2052.12 1208.64 L2051.54 1208.64 L2050.95 1208.64 L2050.36 1208.64 L2049.78 1208.64 L2049.19 1208.64 L2048.6 1208.64 L2048.02 1208.64 L2047.43 1208.64 L2046.85 1208.64 L2046.26 1208.64 L2045.67 1208.64 L2045.09 1208.64 L2044.5 1208.64 L2043.91 1208.64 L2043.33 1208.64 L2042.74 1208.64 L2042.15 1208.64 L2041.57 1208.64 L2040.98 1208.64 L2040.4 1208.64 L2039.81 1208.64 L2039.22 1208.64 L2038.64 1208.64 L2038.05 1208.64 L2037.46 1208.64 L2036.88 1208.64 L2036.29 1208.64 L2035.7 1208.64 L2035.12 1208.64 L2034.53 1208.64 L2033.94 1208.64 L2033.36 1208.64 L2032.77 1208.64 L2032.19 1208.64 L2031.6 1208.64 L2031.01 1208.64 L2030.43 1208.64 L2029.84 1208.64 L2029.25 1208.64 L2028.67 1208.64 L2028.08 1208.64 L2027.49 1208.64 L2026.91 1208.64 L2026.32 1208.64 L2025.73 1208.64 L2025.15 1208.64 L2024.56 1208.64 L2023.98 1208.64 L2023.39 1208.64 L2022.8 1208.64 L2022.22 1208.64 L2021.63 1208.64 L2021.04 1208.64 L2020.46 1208.64 L2019.87 1208.64 L2019.28 1208.64 L2018.7 1208.64 L2018.11 1208.64 L2017.53 1208.64 L2016.94 1208.64 L2016.35 1208.64 L2015.77 1208.64 L2015.18 1208.64 L2014.59 1208.64 L2014.01 1208.64 L2013.42 1208.64 L2012.83 1208.64 L2012.25 1208.64 L2011.66 1208.64 L2011.07 1208.64 L2010.49 1208.64 L2009.9 1208.64 L2009.32 1208.64 L2008.73 1208.64 L2008.14 1208.64 L2007.56 1208.64 L2006.97 1208.64 L2006.38 1208.64 L2005.8 1208.64 L2005.21 1208.64 L2004.62 1208.64 L2004.04 1208.64 L2003.45 1208.64 L2002.86 1208.64 L2002.28 1208.64 L2001.69 1208.64 L2001.11 1208.64 L2000.52 1208.64 L1999.93 1208.64 L1999.35 1208.64 L1998.76 1208.64 L1998.17 1208.64 L1997.59 1208.64 L1997 1208.64 L1996.41 1208.64 L1995.83 1208.64 L1995.24 1208.64 L1994.65 1208.64 L1994.07 1208.64 L1993.48 1208.64 L1992.9 1208.64 L1992.31 1208.64 L1991.72 1208.64 L1991.14 1208.64 L1990.55 1208.64 L1989.96 1208.64 L1989.38 1208.64 L1988.79 1208.64 L1988.2 1208.64 L1987.62 1208.64 L1987.03 1208.64 L1986.45 1208.64 L1985.86 1208.64 L1985.27 1208.64 L1984.69 1208.64 L1984.1 1208.64 L1983.51 1208.64 L1982.93 1208.64 L1982.34 1208.64 L1981.75 1208.64 L1981.17 1208.64 L1980.58 1208.64 L1979.99 1208.64 L1979.41 1208.64 L1978.82 1208.64 L1978.24 1208.64 L1977.65 1208.64 L1977.06 1208.64 L1976.48 1208.64 L1975.89 1208.64 L1975.3 1208.64 L1974.72 1208.64 L1974.13 1208.64 L1973.54 1208.64 L1972.96 1208.64 L1972.37 1208.64 L1971.78 1208.64 L1971.2 1208.64 L1970.61 1208.64 L1970.03 1208.64 L1969.44 1208.64 L1968.85 1208.64 L1968.27 1208.64 L1967.68 1208.64 L1967.09 1208.64 L1966.51 1208.64 L1965.92 1208.64 L1965.33 1208.64 L1964.75 1208.64 L1964.16 1208.64 L1963.58 1208.64 L1962.99 1208.64 L1962.4 1208.64 L1961.82 1208.64 L1961.23 1208.64 L1960.64 1208.64 L1960.06 1208.64 L1959.47 1208.64 L1958.88 1208.64 L1958.3 1208.64 L1957.71 1208.64 L1957.12 1208.64 L1956.54 1208.64 L1955.95 1208.64 L1955.37 1208.64 L1954.78 1208.64 L1954.19 1208.64 L1953.61 1208.64 L1953.02 1208.64 L1952.43 1208.64 L1951.85 1208.64 L1951.26 1208.64 L1950.67 1208.64 L1950.09 1208.64 L1949.5 1208.64 L1948.91 1208.64 L1948.33 1208.64 L1947.74 1208.64 L1947.16 1208.64 L1946.57 1208.64 L1945.98 1208.64 L1945.4 1208.64 L1944.81 1208.64 L1944.22 1208.64 L1943.64 1208.64 L1943.05 1208.64 L1942.46 1208.64 L1941.88 1208.64 L1941.29 1208.64 L1940.71 1208.64 L1940.12 1208.64 L1939.53 1208.64 L1938.95 1208.64 L1938.36 1208.64 L1937.77 1208.64 L1937.19 1208.64 L1936.6 1208.64 L1936.01 1208.64 L1935.43 1208.64 L1934.84 1208.64 L1934.25 1208.64 L1933.67 1208.64 L1933.08 1208.64 L1932.5 1208.64 L1931.91 1208.64 L1931.32 1208.64 L1930.74 1208.64 L1930.15 1208.64 L1929.56 1208.64 L1928.98 1208.64 L1928.39 1208.64 L1927.8 1208.64 L1927.22 1208.64 L1926.63 1208.64 L1926.04 1208.64 L1925.46 1208.64 L1924.87 1208.64 L1924.29 1208.64 L1923.7 1208.64 L1923.11 1208.64 L1922.53 1208.64 L1921.94 1208.64 L1921.35 1208.64 L1920.77 1208.64 L1920.18 1208.64 L1919.59 1208.64 L1919.01 1208.64 L1918.42 1208.64 L1917.83 1208.64 L1917.25 1208.64 L1916.66 1208.64 L1916.08 1208.64 L1915.49 1208.64 L1914.9 1208.64 L1914.32 1208.64 L1913.73 1208.64 L1913.14 1208.64 L1912.56 1208.64 L1911.97 1208.64 L1911.38 1208.64 L1910.8 1208.64 L1910.21 1208.64 L1909.63 1208.64 L1909.04 1208.64 L1908.45 1208.64 L1907.87 1208.64 L1907.28 1208.64 L1906.69 1208.64 L1906.11 1208.64 L1905.52 1208.64 L1904.93 1208.64 L1904.35 1208.64 L1903.76 1208.64 L1903.17 1208.64 L1902.59 1208.64 L1902 1208.64 L1901.42 1208.64 L1900.83 1208.64 L1900.24 1208.64 L1899.66 1208.64 L1899.07 1208.64 L1898.48 1208.64 L1897.9 1208.64 L1897.31 1208.64 L1896.72 1208.64 L1896.14 1208.64 L1895.55 1208.64 L1894.96 1208.64 L1894.38 1208.64 L1893.79 1208.64 L1893.21 1208.64 L1892.62 1208.64 L1892.03 1208.64 L1891.45 1208.64 L1890.86 1208.64 L1890.27 1208.64 L1889.69 1208.64 L1889.1 1208.64 L1888.51 1208.64 L1887.93 1208.64 L1887.34 1208.64 L1886.76 1208.64 L1886.17 1208.64 L1885.58 1208.64 L1885 1208.64 L1884.41 1208.64 L1883.82 1208.64 L1883.24 1208.64 L1882.65 1208.64 L1882.06 1208.64 L1881.48 1208.64 L1880.89 1208.64 L1880.3 1208.64 L1879.72 1208.64 L1879.13 1208.64 L1878.55 1208.64 L1877.96 1208.64 L1877.37 1208.64 L1876.79 1208.64 L1876.2 1208.64 L1875.61 1208.64 L1875.03 1208.64 L1874.44 1208.64 L1873.85 1208.64 L1873.27 1208.64 L1872.68 1208.64 L1872.09 1208.64 L1871.51 1208.64 L1870.92 1208.64 L1870.34 1208.64 L1869.75 1208.64 L1869.16 1208.64 L1868.58 1208.64 L1867.99 1208.64 L1867.4 1208.64 L1866.82 1208.64 L1866.23 1208.64 L1865.64 1208.64 L1865.06 1208.64 L1864.47 1208.64 L1863.88 1208.64 L1863.3 1208.64 L1862.71 1208.64 L1862.13 1208.64 L1861.54 1208.64 L1860.95 1208.64 L1860.37 1208.64 L1859.78 1208.64 L1859.19 1208.64 L1858.61 1208.64 L1858.02 1208.64 L1857.43 1208.64 L1856.85 1208.64 L1856.26 1208.64 L1855.68 1208.64 L1855.09 1208.64 L1854.5 1208.64 L1853.92 1208.64 L1853.33 1208.64 L1852.74 1208.64 L1852.16 1208.64 L1851.57 1208.64 L1850.98 1208.64 L1850.4 1208.64 L1849.81 1208.64 L1849.22 1208.64 L1848.64 1208.64 L1848.05 1208.64 L1847.47 1208.64 L1846.88 1208.64 L1846.29 1208.64 L1845.71 1208.64 L1845.12 1208.64 L1844.53 1208.64 L1843.95 1208.64 L1843.36 1208.64 L1842.77 1208.64 L1842.19 1208.64 L1841.6 1208.64 L1841.01 1208.64 L1840.43 1208.64 L1839.84 1208.64 L1839.26 1208.64 L1838.67 1208.64 L1838.08 1208.64 L1837.5 1208.64 L1836.91 1208.64 L1836.32 1208.64 L1835.74 1208.64 L1835.15 1208.64 L1834.56 1208.64 L1833.98 1208.64 L1833.39 1208.64 L1832.81 1208.64 L1832.22 1208.64 L1831.63 1208.64 L1831.05 1208.64 L1830.46 1208.64 L1829.87 1208.64 L1829.29 1208.64 L1828.7 1208.64 L1828.11 1208.64 L1827.53 1208.64 L1826.94 1208.64 L1826.35 1208.64 L1825.77 1208.64 L1825.18 1208.64 L1824.6 1208.64 L1824.01 1208.64 L1823.42 1208.64 L1822.84 1208.64 L1822.25 1208.64 L1821.66 1208.64 L1821.08 1208.64 L1820.49 1208.64 L1819.9 1208.64 L1819.32 1208.64 L1818.73 1208.64 L1818.14 1208.64 L1817.56 1208.64 L1816.97 1208.64 L1816.39 1208.64 L1815.8 1208.64 L1815.21 1208.64 L1814.63 1208.64 L1814.04 1208.64 L1813.45 1208.64 L1812.87 1208.64 L1812.28 1208.64 L1811.69 1208.64 L1811.11 1208.64 L1810.52 1208.64 L1809.94 1208.64 L1809.35 1208.64 L1808.76 1208.64 L1808.18 1208.64 L1807.59 1208.64 L1807 1208.64 L1806.42 1208.64 L1805.83 1208.64 L1805.24 1208.64 L1804.66 1208.64 L1804.07 1208.64 L1803.48 1208.64 L1802.9 1208.64 L1802.31 1208.64 L1801.73 1208.64 L1801.14 1208.64 L1800.55 1208.64 L1799.97 1208.64 L1799.38 1208.64 L1798.79 1208.64 L1798.21 1208.64 L1797.62 1208.64 L1797.03 1208.64 L1796.45 1208.64 L1795.86 1208.64 L1795.27 1208.64 L1794.69 1208.64 L1794.1 1208.64 L1793.52 1208.64 L1792.93 1208.64 L1792.34 1208.64 L1791.76 1208.64 L1791.17 1208.64 L1790.58 1208.64 L1790 1208.64 L1789.41 1208.64 L1788.82 1208.64 L1788.24 1208.64 L1787.65 1208.64 L1787.06 1208.64 L1786.48 1208.64 L1785.89 1208.64 L1785.31 1208.64 L1784.72 1208.64 L1784.13 1208.64 L1783.55 1208.64 L1782.96 1208.64 L1782.37 1208.64 L1781.79 1208.64 L1781.2 1208.64 L1780.61 1208.64 L1780.03 1208.64 L1779.44 1208.64 L1778.86 1208.64 L1778.27 1208.64 L1777.68 1208.64 L1777.1 1208.64 L1776.51 1208.64 L1775.92 1208.64 L1775.34 1208.64 L1774.75 1208.64 L1774.16 1208.64 L1773.58 1208.64 L1772.99 1208.64 L1772.4 1208.64 L1771.82 1208.64 L1771.23 1208.64 L1770.65 1208.64 L1770.06 1208.64 L1769.47 1208.64 L1768.89 1208.64 L1768.3 1208.64 L1767.71 1208.64 L1767.13 1208.64 L1766.54 1208.64 L1765.95 1208.64 L1765.37 1208.64 L1764.78 1208.64 L1764.19 1208.64 L1763.61 1208.64 L1763.02 1208.64 L1762.44 1208.64 L1761.85 1208.64 L1761.26 1208.64 L1760.68 1208.64 L1760.09 1208.64 L1759.5 1208.64 L1758.92 1208.64 L1758.33 1208.64 L1757.74 1208.64 L1757.16 1208.64 L1756.57 1208.64 L1755.99 1208.64 L1755.4 1208.64 L1754.81 1208.64 L1754.23 1208.64 L1753.64 1208.64 L1753.05 1208.64 L1752.47 1208.64 L1751.88 1208.64 L1751.29 1208.64 L1750.71 1208.64 L1750.12 1208.64 L1749.53 1208.64 L1748.95 1208.64 L1748.36 1208.64 L1747.78 1208.64 L1747.19 1208.64 L1746.6 1208.64 L1746.02 1208.64 L1745.43 1208.64 L1744.84 1208.64 L1744.26 1208.64 L1743.67 1208.64 L1743.08 1208.64 L1742.5 1208.64 L1741.91 1208.64 L1741.32 1208.64 L1740.74 1208.64 L1740.15 1208.64 L1739.57 1208.64 L1738.98 1208.64 L1738.39 1208.64 L1737.81 1208.64 L1737.22 1208.64 L1736.63 1208.64 L1736.05 1208.64 L1735.46 1208.64 L1734.87 1208.64 L1734.29 1208.64 L1733.7 1208.64 L1733.11 1208.64 L1732.53 1208.64 L1731.94 1208.64 L1731.36 1208.64 L1730.77 1208.64 L1730.18 1208.64 L1729.6 1208.64 L1729.01 1208.64 L1728.42 1208.64 L1727.84 1208.64 L1727.25 1208.64 L1726.66 1208.64 L1726.08 1208.64 L1725.49 1208.64 L1724.91 1208.64 L1724.32 1208.64 L1723.73 1208.64 L1723.15 1208.64 L1722.56 1208.64 L1721.97 1208.64 L1721.39 1208.64 L1720.8 1208.64 L1720.21 1208.64 L1719.63 1208.64 L1719.04 1208.64 L1718.45 1208.64 L1717.87 1208.64 L1717.28 1208.64 L1716.7 1208.64 L1716.11 1208.64 L1715.52 1208.64 L1714.94 1208.64 L1714.35 1208.64 L1713.76 1208.64 L1713.18 1208.64 L1712.59 1208.64 L1712 1208.64 L1711.42 1208.64 L1710.83 1208.64 L1710.24 1208.64 L1709.66 1208.64 L1709.07 1208.64 L1708.49 1208.64 L1707.9 1208.64 L1707.31 1208.64 L1706.73 1208.64 L1706.14 1208.64 L1705.55 1208.64 L1704.97 1208.64 L1704.38 1208.64 L1703.79 1208.64 L1703.21 1208.64 L1702.62 1208.64 L1702.04 1208.64 L1701.45 1208.64 L1700.86 1208.64 L1700.28 1208.64 L1699.69 1208.64 L1699.1 1208.64 L1698.52 1208.64 L1697.93 1208.64 L1697.34 1208.64 L1696.76 1208.64 L1696.17 1208.64 L1695.58 1208.64 L1695 1208.64 L1694.41 1208.64 L1693.83 1208.64 L1693.24 1208.64 L1692.65 1208.64 L1692.07 1208.64 L1691.48 1208.64 L1690.89 1208.64 L1690.31 1208.64 L1689.72 1208.64 L1689.13 1208.64 L1688.55 1208.64 L1687.96 1208.64 L1687.37 1208.64 L1686.79 1208.64 L1686.2 1208.64 L1685.62 1208.64 L1685.03 1208.64 L1684.44 1208.64 L1683.86 1208.64 L1683.27 1208.64 L1682.68 1208.64 L1682.1 1208.64 L1681.51 1208.64 L1680.92 1208.64 L1680.34 1208.64 L1679.75 1208.64 L1679.17 1208.64 L1678.58 1208.64 L1677.99 1208.64 L1677.41 1208.64 L1676.82 1208.64 L1676.23 1208.64 L1675.65 1208.64 L1675.06 1208.64 L1674.47 1208.64 L1673.89 1208.64 L1673.3 1208.64 L1672.71 1208.64 L1672.13 1208.64 L1671.54 1208.64 L1670.96 1208.64 L1670.37 1208.64 L1669.78 1208.64 L1669.2 1208.64 L1668.61 1208.64 L1668.02 1208.64 L1667.44 1208.64 L1666.85 1208.64 L1666.26 1208.64 L1665.68 1208.64 L1665.09 1208.64 L1664.5 1208.64 L1663.92 1208.64 L1663.33 1208.64 L1662.75 1208.64 L1662.16 1208.64 L1661.57 1208.64 L1660.99 1208.64 L1660.4 1208.64 L1659.81 1208.64 L1659.23 1208.64 L1658.64 1208.64 L1658.05 1208.64 L1657.47 1208.64 L1656.88 1208.64 L1656.29 1208.64 L1655.71 1208.64 L1655.12 1208.64 L1654.54 1208.64 L1653.95 1208.64 L1653.36 1208.64 L1652.78 1208.64 L1652.19 1208.64 L1651.6 1208.64 L1651.02 1208.64 L1650.43 1208.64 L1649.84 1208.64 L1649.26 1208.64 L1648.67 1208.64 L1648.09 1208.64 L1647.5 1208.64 L1646.91 1208.64 L1646.33 1208.64 L1645.74 1208.64 L1645.15 1208.64 L1644.57 1208.64 L1643.98 1208.64 L1643.39 1208.64 L1642.81 1208.64 L1642.22 1208.64 L1641.63 1208.64 L1641.05 1208.64 L1640.46 1208.64 L1639.88 1208.64 L1639.29 1208.64 L1638.7 1208.64 L1638.12 1208.64 L1637.53 1208.64 L1636.94 1208.64 L1636.36 1208.64 L1635.77 1208.64 L1635.18 1208.64 L1634.6 1208.64 L1634.01 1208.64 L1633.42 1208.64 L1632.84 1208.64 L1632.25 1208.64 L1631.67 1208.64 L1631.08 1208.64 L1630.49 1208.64 L1629.91 1208.64 L1629.32 1208.64 L1628.73 1208.64 L1628.15 1208.64 L1627.56 1208.64 L1626.97 1208.64 L1626.39 1208.64 L1625.8 1208.64 L1625.22 1208.64 L1624.63 1208.64 L1624.04 1208.64 L1623.46 1208.64 L1622.87 1208.64 L1622.28 1208.64 L1621.7 1208.64 L1621.11 1208.64 L1620.52 1208.64 L1619.94 1208.64 L1619.35 1208.64 L1618.76 1208.64 L1618.18 1208.64 L1617.59 1208.64 L1617.01 1208.64 L1616.42 1208.64 L1615.83 1208.64 L1615.25 1208.64 L1614.66 1208.64 L1614.07 1208.64 L1613.49 1208.64 L1612.9 1208.64 L1612.31 1208.64 L1611.73 1208.64 L1611.14 1208.64 L1610.55 1208.64 L1609.97 1208.64 L1609.38 1208.64 L1608.8 1208.64 L1608.21 1208.64 L1607.62 1208.64 L1607.04 1208.64 L1606.45 1208.64 L1605.86 1208.64 L1605.28 1208.64 L1604.69 1208.64 L1604.1 1208.64 L1603.52 1208.64 L1602.93 1208.64 L1602.34 1208.64 L1601.76 1208.64 L1601.17 1208.64 L1600.59 1208.64 L1600 1208.64 L1599.41 1208.64 L1598.83 1208.64 L1598.24 1208.64 L1597.65 1208.64 L1597.07 1208.64 L1596.48 1208.64 L1595.89 1208.64 L1595.31 1208.64 L1594.72 1208.64 L1594.14 1208.64 L1593.55 1208.64 L1592.96 1208.64 L1592.38 1208.64 L1591.79 1208.64 L1591.2 1208.64 L1590.62 1208.64 L1590.03 1208.64 L1589.44 1208.64 L1588.86 1208.64 L1588.27 1208.64 L1587.68 1208.64 L1587.1 1208.64 L1586.51 1208.64 L1585.93 1208.64 L1585.34 1208.64 L1584.75 1208.64 L1584.17 1208.64 L1583.58 1208.64 L1582.99 1208.64 L1582.41 1208.64 L1581.82 1208.64 L1581.23 1208.64 L1580.65 1208.64 L1580.06 1208.64 L1579.47 1208.64 L1578.89 1208.64 L1578.3 1208.64 L1577.72 1208.64 L1577.13 1208.64 L1576.54 1208.64 L1575.96 1208.64 L1575.37 1208.64 L1574.78 1208.64 L1574.2 1208.64 L1573.61 1208.64 L1573.02 1208.64 L1572.44 1208.64 L1571.85 1208.64 L1571.27 1208.64 L1570.68 1208.64 L1570.09 1208.64 L1569.51 1208.64 L1568.92 1208.64 L1568.33 1208.64 L1567.75 1208.64 L1567.16 1208.64 L1566.57 1208.64 L1565.99 1208.64 L1565.4 1208.64 L1564.81 1208.64 L1564.23 1208.64 L1563.64 1208.64 L1563.06 1208.64 L1562.47 1208.64 L1561.88 1208.64 L1561.3 1208.64 L1560.71 1208.64 L1560.12 1208.64 L1559.54 1208.64 L1558.95 1208.64 L1558.36 1208.64 L1557.78 1208.64 L1557.19 1208.64 L1556.6 1208.64 L1556.02 1208.64 L1555.43 1208.64 L1554.85 1208.64 L1554.26 1208.64 L1553.67 1208.64 L1553.09 1208.64 L1552.5 1208.64 L1551.91 1208.64 L1551.33 1208.64 L1550.74 1208.64 L1550.15 1208.64 L1549.57 1208.64 L1548.98 1208.64 L1548.4 1208.64 L1547.81 1208.64 L1547.22 1208.64 L1546.64 1208.64 L1546.05 1208.64 L1545.46 1208.64 L1544.88 1208.64 L1544.29 1208.64 L1543.7 1208.64 L1543.12 1208.64 L1542.53 1208.64 L1541.94 1208.64 L1541.36 1208.64 L1540.77 1208.64 L1540.19 1208.64 L1539.6 1208.64 L1539.01 1208.64 L1538.43 1208.64 L1537.84 1208.64 L1537.25 1208.64 L1536.67 1208.64 L1536.08 1208.64 L1535.49 1208.64 L1534.91 1208.64 L1534.32 1208.64 L1533.73 1208.64 L1533.15 1208.64 L1532.56 1208.64 L1531.98 1208.64 L1531.39 1208.64 L1530.8 1208.64 L1530.22 1208.64 L1529.63 1208.64 L1529.04 1208.64 L1528.46 1208.64 L1527.87 1208.64 L1527.28 1208.64 L1526.7 1208.64 L1526.11 1208.64 L1525.52 1208.64 L1524.94 1208.64 L1524.35 1208.64 L1523.77 1208.64 L1523.18 1208.64 L1522.59 1208.64 L1522.01 1208.64 L1521.42 1208.64 L1520.83 1208.64 L1520.25 1208.64 L1519.66 1208.64 L1519.07 1208.64 L1518.49 1208.64 L1517.9 1208.64 L1517.32 1208.64 L1516.73 1208.64 L1516.14 1208.64 L1515.56 1208.64 L1514.97 1208.64 L1514.38 1208.64 L1513.8 1208.64 L1513.21 1208.64 L1512.62 1208.64 L1512.04 1208.64 L1511.45 1208.64 L1510.86 1208.64 L1510.28 1208.64 L1509.69 1208.64 L1509.11 1208.64 L1508.52 1208.64 L1507.93 1208.64 L1507.35 1208.64 L1506.76 1208.64 L1506.17 1208.64 L1505.59 1208.64 L1505 1208.64 L1504.41 1208.64 L1503.83 1208.64 L1503.24 1208.64 L1502.65 1208.64 L1502.07 1208.64 L1501.48 1208.64 L1500.9 1208.64 L1500.31 1208.64 L1499.72 1208.64 L1499.14 1208.64 L1498.55 1208.64 L1497.96 1208.64 L1497.38 1208.64 L1496.79 1208.64 L1496.2 1208.64 L1495.62 1208.64 L1495.03 1208.64 L1494.45 1208.64 L1493.86 1208.64 L1493.27 1208.64 L1492.69 1208.64 L1492.1 1208.64 L1491.51 1208.64 L1490.93 1208.64 L1490.34 1208.64 L1489.75 1208.64 L1489.17 1208.64 L1488.58 1208.64 L1487.99 1208.64 L1487.41 1208.64 L1486.82 1208.64 L1486.24 1208.64 L1485.65 1208.64 L1485.06 1208.64 L1484.48 1208.64 L1483.89 1208.64 L1483.3 1208.64 L1482.72 1208.64 L1482.13 1208.64 L1481.54 1208.64 L1480.96 1208.64 L1480.37 1208.64 L1479.78 1208.64 L1479.2 1208.64 L1478.61 1208.64 L1478.03 1208.64 L1477.44 1208.64 L1476.85 1208.64 L1476.27 1208.64 L1475.68 1208.64 L1475.09 1208.64 L1474.51 1208.64 L1473.92 1208.64 L1473.33 1208.64 L1472.75 1208.64 L1472.16 1208.64 L1471.57 1208.64 L1470.99 1208.64 L1470.4 1208.64 L1469.82 1208.64 L1469.23 1208.64 L1468.64 1208.64 L1468.06 1208.64 L1467.47 1208.64 L1466.88 1208.64 L1466.3 1208.64 L1465.71 1208.64 L1465.12 1208.64 L1464.54 1208.64 L1463.95 1208.64 L1463.37 1208.64 L1462.78 1208.64 L1462.19 1208.64 L1461.61 1208.64 L1461.02 1208.64 L1460.43 1208.64 L1459.85 1208.64 L1459.26 1208.64 L1458.67 1208.64 L1458.09 1208.64 L1457.5 1208.64 L1456.91 1208.64 L1456.33 1208.64 L1455.74 1208.64 L1455.16 1208.64 L1454.57 1208.64 L1453.98 1208.64 L1453.4 1208.64 L1452.81 1208.64 L1452.22 1208.64 L1451.64 1208.64 L1451.05 1208.64 L1450.46 1208.64 L1449.88 1208.64 L1449.29 1208.64 L1448.7 1208.64 L1448.12 1208.64 L1447.53 1208.64 L1446.95 1208.64 L1446.36 1208.64 L1445.77 1208.64 L1445.19 1208.64 L1444.6 1208.64 L1444.01 1208.64 L1443.43 1208.64 L1442.84 1208.64 L1442.25 1208.64 L1441.67 1208.64 L1441.08 1208.64 L1440.5 1208.64 L1439.91 1208.64 L1439.32 1208.64 L1438.74 1208.64 L1438.15 1208.64 L1437.56 1208.64 L1436.98 1208.64 L1436.39 1208.64 L1435.8 1208.64 L1435.22 1208.64 L1434.63 1208.64 L1434.04 1208.64 L1433.46 1208.64 L1432.87 1208.64 L1432.29 1208.64 L1431.7 1208.64 L1431.11 1208.64 L1430.53 1208.64 L1429.94 1208.64 L1429.35 1208.64 L1428.77 1208.64 L1428.18 1208.64 L1427.59 1208.64 L1427.01 1208.64 L1426.42 1208.64 L1425.83 1208.64 L1425.25 1208.64 L1424.66 1208.64 L1424.08 1208.64 L1423.49 1208.64 L1422.9 1208.64 L1422.32 1208.64 L1421.73 1208.64 L1421.14 1208.64 L1420.56 1208.64 L1419.97 1208.64 L1419.38 1208.64 L1418.8 1208.64 L1418.21 1208.64 L1417.63 1208.64 L1417.04 1208.64 L1416.45 1208.64 L1415.87 1208.64 L1415.28 1208.64 L1414.69 1208.64 L1414.11 1208.64 L1413.52 1208.64 L1412.93 1208.64 L1412.35 1208.64 L1411.76 1208.64 L1411.17 1208.64 L1410.59 1208.64 L1410 1208.64 L1409.42 1208.64 L1408.83 1208.64 L1408.24 1208.64 L1407.66 1208.64 L1407.07 1208.64 L1406.48 1208.64 L1405.9 1208.64 L1405.31 1208.64 L1404.72 1208.64 L1404.14 1208.64 L1403.55 1208.64 L1402.96 1208.64 L1402.38 1208.64 L1401.79 1208.64 L1401.21 1208.64 L1400.62 1208.64 L1400.03 1208.64 L1399.45 1208.64 L1398.86 1208.64 L1398.27 1208.64 L1397.69 1208.64 L1397.1 1208.64 L1396.51 1208.64 L1395.93 1208.64 L1395.34 1208.64 L1394.75 1208.64 L1394.17 1208.64 L1393.58 1208.64 L1393 1208.64 L1392.41 1208.64 L1391.82 1208.64 L1391.24 1208.64 L1390.65 1208.64 L1390.06 1208.64 L1389.48 1208.64 L1388.89 1208.64 L1388.3 1208.64 L1387.72 1208.64 L1387.13 1208.64 L1386.55 1208.64 L1385.96 1208.64 L1385.37 1208.64 L1384.79 1208.64 L1384.2 1208.64 L1383.61 1208.64 L1383.03 1208.64 L1382.44 1208.64 L1381.85 1208.64 L1381.27 1208.64 L1380.68 1208.64 L1380.09 1208.64 L1379.51 1208.64 L1378.92 1208.64 L1378.34 1208.64 L1377.75 1208.64 L1377.16 1208.64 L1376.58 1208.64 L1375.99 1208.64 L1375.4 1208.64 L1374.82 1208.64 L1374.23 1208.64 L1373.64 1208.64 L1373.06 1208.64 L1372.47 1208.64 L1371.88 1208.64 L1371.3 1208.64 L1370.71 1208.64 L1370.13 1208.64 L1369.54 1208.64 L1368.95 1208.64 L1368.37 1208.64 L1367.78 1208.64 L1367.19 1208.64 L1366.61 1208.64 L1366.02 1208.64 L1365.43 1208.64 L1364.85 1208.64 L1364.26 1208.64 L1363.68 1208.64 L1363.09 1208.64 L1362.5 1208.64 L1361.92 1208.64 L1361.33 1208.64 L1360.74 1208.64 L1360.16 1208.64 L1359.57 1208.64 L1358.98 1208.64 L1358.4 1208.64 L1357.81 1208.64 L1357.22 1208.64 L1356.64 1208.64 L1356.05 1208.64 L1355.47 1208.64 L1354.88 1208.64 L1354.29 1208.64 L1353.71 1208.64 L1353.12 1208.64 L1352.53 1208.64 L1351.95 1208.64 L1351.36 1208.64 L1350.77 1208.64 L1350.19 1208.64 L1349.6 1208.64 L1349.01 1208.64 L1348.43 1208.64 L1347.84 1208.64 L1347.26 1208.64 L1346.67 1208.64 L1346.08 1208.64 L1345.5 1208.64 L1344.91 1208.64 L1344.32 1208.64 L1343.74 1208.64 L1343.15 1208.64 L1342.56 1208.64 L1341.98 1208.64 L1341.39 1208.64 L1340.8 1208.64 L1340.22 1208.64 L1339.63 1208.64 L1339.05 1208.64 L1338.46 1208.64 L1337.87 1208.64 L1337.29 1208.64 L1336.7 1208.64 L1336.11 1208.64 L1335.53 1208.64 L1334.94 1208.64 L1334.35 1208.64 L1333.77 1208.64 L1333.18 1208.64 L1332.6 1208.64 L1332.01 1208.64 L1331.42 1208.64 L1330.84 1208.64 L1330.25 1208.64 L1329.66 1208.64 L1329.08 1208.64 L1328.49 1208.64 L1327.9 1208.64 L1327.32 1208.64 L1326.73 1208.64 L1326.14 1208.64 L1325.56 1208.64 L1324.97 1208.64 L1324.39 1208.64 L1323.8 1208.64 L1323.21 1208.64 L1322.63 1208.64 L1322.04 1208.64 L1321.45 1208.64 L1320.87 1208.64 L1320.28 1208.64 L1319.69 1208.64 L1319.11 1208.64 L1318.52 1208.64 L1317.93 1208.64 L1317.35 1208.64 L1316.76 1208.64 L1316.18 1208.64 L1315.59 1208.64 L1315 1208.64 L1314.42 1208.64 L1313.83 1208.64 L1313.24 1208.64 L1312.66 1208.64 L1312.07 1208.64 L1311.48 1208.64 L1310.9 1208.64 L1310.31 1208.64 L1309.73 1208.64 L1309.14 1208.64 L1308.55 1208.64 L1307.97 1208.64 L1307.38 1208.64 L1306.79 1208.64 L1306.21 1208.64 L1305.62 1208.64 L1305.03 1208.64 L1304.45 1208.64 L1303.86 1208.64 L1303.27 1208.64 L1302.69 1208.64 L1302.1 1208.64 L1301.52 1208.64 L1300.93 1208.64 L1300.34 1208.64 L1299.76 1208.64 L1299.17 1208.64 L1298.58 1208.64 L1298 1208.64 L1297.41 1208.64 L1296.82 1208.64 L1296.24 1208.64 L1295.65 1208.64 L1295.06 1208.64 L1294.48 1208.64 L1293.89 1208.64 L1293.31 1208.64 L1292.72 1208.64 L1292.13 1208.64 L1291.55 1208.64 L1290.96 1208.64 L1290.37 1208.64 L1289.79 1208.64 L1289.2 1208.64 L1288.61 1208.64 L1288.03 1208.64 L1287.44 1208.64 L1286.86 1208.64 L1286.27 1208.64 L1285.68 1208.64 L1285.1 1208.64 L1284.51 1208.64 L1283.92 1208.64 L1283.34 1208.64 L1282.75 1208.64 L1282.16 1208.64 L1281.58 1208.64 L1280.99 1208.64 L1280.4 1208.64 L1279.82 1208.64 L1279.23 1208.64 L1278.65 1208.64 L1278.06 1208.64 L1277.47 1208.64 L1276.89 1208.64 L1276.3 1208.64 L1275.71 1208.64 L1275.13 1208.64 L1274.54 1208.64 L1273.95 1208.64 L1273.37 1208.64 L1272.78 1208.64 L1272.19 1208.64 L1271.61 1208.64 L1271.02 1208.64 L1270.44 1208.64 L1269.85 1208.64 L1269.26 1208.64 L1268.68 1208.64 L1268.09 1208.64 L1267.5 1208.64 L1266.92 1208.64 L1266.33 1208.64 L1265.74 1208.64 L1265.16 1208.64 L1264.57 1208.64 L1263.98 1208.64 L1263.4 1208.64 L1262.81 1208.64 L1262.23 1208.64 L1261.64 1208.64 L1261.05 1208.64 L1260.47 1208.64 L1259.88 1208.64 L1259.29 1208.64 L1258.71 1208.64 L1258.12 1208.64 L1257.53 1208.64 L1256.95 1208.64 L1256.36 1208.64 L1255.78 1208.64 L1255.19 1208.64 L1254.6 1208.64 L1254.02 1208.64 L1253.43 1208.64 L1252.84 1208.64 L1252.26 1208.64 L1251.67 1208.64 L1251.08 1208.64 L1250.5 1208.64 L1249.91 1208.64 L1249.32 1208.64 L1248.74 1208.64 L1248.15 1208.64 L1247.57 1208.64 L1246.98 1208.64 L1246.39 1208.64 L1245.81 1208.64 L1245.22 1208.64 L1244.63 1208.64 L1244.05 1208.64 L1243.46 1208.64 L1242.87 1208.64 L1242.29 1208.64 L1241.7 1208.64 L1241.11 1208.64 L1240.53 1208.64 L1239.94 1208.64 L1239.36 1208.64 L1238.77 1208.64 L1238.18 1208.64 L1237.6 1208.64 L1237.01 1208.64 L1236.42 1208.64 L1235.84 1208.64 L1235.25 1208.64 L1234.66 1208.64 L1234.08 1208.64 L1233.49 1208.64 L1232.91 1208.64 L1232.32 1208.64 L1231.73 1208.64 L1231.15 1208.64 L1230.56 1208.64 L1229.97 1208.64 L1229.39 1208.64 L1228.8 1208.64 L1228.21 1208.64 L1227.63 1208.64 L1227.04 1208.64 L1226.45 1208.64 L1225.87 1208.64 L1225.28 1208.64 L1224.7 1208.64 L1224.11 1208.64 L1223.52 1208.64 L1222.94 1208.64 L1222.35 1208.64 L1221.76 1208.64 L1221.18 1208.64 L1220.59 1208.64 L1220 1208.64 L1219.42 1208.64 L1218.83 1208.64 L1218.24 1208.64 L1217.66 1208.64 L1217.07 1208.64 L1216.49 1208.64 L1215.9 1208.64 L1215.31 1208.64 L1214.73 1208.64 L1214.14 1208.64 L1213.55 1208.64 L1212.97 1208.64 L1212.38 1208.64 L1211.79 1208.64 L1211.21 1208.64 L1210.62 1208.64 L1210.03 1208.64 L1209.45 1208.64 L1208.86 1208.64 L1208.28 1208.64 L1207.69 1208.64 L1207.1 1208.64 L1206.52 1208.64 L1205.93 1208.64 L1205.34 1208.64 L1204.76 1208.64 L1204.17 1208.64 L1203.58 1208.64 L1203 1208.64 L1202.41 1208.64 L1201.83 1208.64 L1201.24 1208.64 L1200.65 1208.64 L1200.07 1208.64 L1199.48 1208.64 L1198.89 1208.64 L1198.31 1208.64 L1197.72 1208.64 L1197.13 1208.64 L1196.55 1208.64 L1195.96 1208.64 L1195.37 1208.64 L1194.79 1208.64 L1194.2 1208.64 L1193.62 1208.64 L1193.03 1208.64 L1192.44 1208.64 L1191.86 1208.64 L1191.27 1208.64 L1190.68 1208.64 L1190.1 1208.64 L1189.51 1208.64 L1188.92 1208.64 L1188.34 1208.64 L1187.75 1208.64 L1187.16 1208.64 L1186.58 1208.64 L1185.99 1208.64 L1185.41 1208.64 L1184.82 1208.64 L1184.23 1208.64 L1183.65 1208.64 L1183.06 1208.64 L1182.47 1208.64 L1181.89 1208.64 L1181.3 1208.64 L1180.71 1208.64 L1180.13 1208.64 L1179.54 1208.64 L1178.96 1208.64 L1178.37 1208.64 L1177.78 1208.64 L1177.2 1208.64 L1176.61 1208.64 L1176.02 1208.64 L1175.44 1208.64 L1174.85 1208.64 L1174.26 1208.64 L1173.68 1208.64 L1173.09 1208.64 L1172.5 1208.64 L1171.92 1208.64 L1171.33 1208.64 L1170.75 1208.64 L1170.16 1208.64 L1169.57 1208.64 L1168.99 1208.64 L1168.4 1208.64 L1167.81 1208.64 L1167.23 1208.64 L1166.64 1208.64 L1166.05 1208.64 L1165.47 1208.64 L1164.88 1208.64 L1164.29 1208.64 L1163.71 1208.64 L1163.12 1208.64 L1162.54 1208.64 L1161.95 1208.64 L1161.36 1208.64 L1160.78 1208.64 L1160.19 1208.64 L1159.6 1208.64 L1159.02 1208.64 L1158.43 1208.64 L1157.84 1208.64 L1157.26 1208.64 L1156.67 1208.64 L1156.09 1208.64 L1155.5 1208.64 L1154.91 1208.64 L1154.33 1208.64 L1153.74 1208.64 L1153.15 1208.64 L1152.57 1208.64 L1151.98 1208.64 L1151.39 1208.64 L1150.81 1208.64 L1150.22 1208.64 L1149.63 1208.64 L1149.05 1208.64 L1148.46 1208.64 L1147.88 1208.64 L1147.29 1208.64 L1146.7 1208.64 L1146.12 1208.64 L1145.53 1208.64 L1144.94 1208.64 L1144.36 1208.64 L1143.77 1208.64 L1143.18 1208.64 L1142.6 1208.64 L1142.01 1208.64 L1141.42 1208.64 L1140.84 1208.64 L1140.25 1208.64 L1139.67 1208.64 L1139.08 1208.64 L1138.49 1208.64 L1137.91 1208.64 L1137.32 1208.64 L1136.73 1208.64 L1136.15 1208.64 L1135.56 1208.64 L1134.97 1208.64 L1134.39 1208.64 L1133.8 1208.64 L1133.21 1208.64 L1132.63 1208.64 L1132.04 1208.64 L1131.46 1208.64 L1130.87 1208.64 L1130.28 1208.64 L1129.7 1208.64 L1129.11 1208.64 L1128.52 1208.64 L1127.94 1208.64 L1127.35 1208.64 L1126.76 1208.64 L1126.18 1208.64 L1125.59 1208.64 L1125.01 1208.64 L1124.42 1208.64 L1123.83 1208.64 L1123.25 1208.64 L1122.66 1208.64 L1122.07 1208.64 L1121.49 1208.64 L1120.9 1208.64 L1120.31 1208.64 L1119.73 1208.64 L1119.14 1208.64 L1118.55 1208.64 L1117.97 1208.64 L1117.38 1208.64 L1116.8 1208.64 L1116.21 1208.64 L1115.62 1208.64 L1115.04 1208.64 L1114.45 1208.64 L1113.86 1208.64 L1113.28 1208.64 L1112.69 1208.64 L1112.1 1208.64 L1111.52 1208.64 L1110.93 1208.64 L1110.34 1208.64 L1109.76 1208.64 L1109.17 1208.64 L1108.59 1208.64 L1108 1208.64 L1107.41 1208.64 L1106.83 1208.64 L1106.24 1208.64 L1105.65 1208.64 L1105.07 1208.64 L1104.48 1208.64 L1103.89 1208.64 L1103.31 1208.64 L1102.72 1208.64 L1102.14 1208.64 L1101.55 1208.64 L1100.96 1208.64 L1100.38 1208.64 L1099.79 1208.64 L1099.2 1208.64 L1098.62 1208.64 L1098.03 1208.64 L1097.44 1208.64 L1096.86 1208.64 L1096.27 1208.64 L1095.68 1208.64 L1095.1 1208.64 L1094.51 1208.64 L1093.93 1208.64 L1093.34 1208.64 L1092.75 1208.64 L1092.17 1208.64 L1091.58 1208.64 L1090.99 1208.64 L1090.41 1208.64 L1089.82 1208.64 L1089.23 1208.64 L1088.65 1208.64 L1088.06 1208.64 L1087.47 1208.64 L1086.89 1208.64 L1086.3 1208.64 L1085.72 1208.64 L1085.13 1208.64 L1084.54 1208.64 L1083.96 1208.64 L1083.37 1208.64 L1082.78 1208.64 L1082.2 1208.64 L1081.61 1208.64 L1081.02 1208.64 L1080.44 1208.64 L1079.85 1208.64 L1079.26 1208.64 L1078.68 1208.64 L1078.09 1208.64 L1077.51 1208.64 L1076.92 1208.64 L1076.33 1208.64 L1075.75 1208.64 L1075.16 1208.64 L1074.57 1208.64 L1073.99 1208.64 L1073.4 1208.64 L1072.81 1208.64 L1072.23 1208.64 L1071.64 1208.64 L1071.06 1208.64 L1070.47 1208.64 L1069.88 1208.64 L1069.3 1208.64 L1068.71 1208.64 L1068.12 1208.64 L1067.54 1208.64 L1066.95 1208.64 L1066.36 1208.64 L1065.78 1208.64 L1065.19 1208.64 L1064.6 1208.64 L1064.02 1208.64 L1063.43 1208.64 L1062.85 1208.64 L1062.26 1208.64 L1061.67 1208.64 L1061.09 1208.64 L1060.5 1208.64 L1059.91 1208.64 L1059.33 1208.64 L1058.74 1208.64 L1058.15 1208.64 L1057.57 1208.64 L1056.98 1208.64 L1056.39 1208.64 L1055.81 1208.64 L1055.22 1208.64 L1054.64 1208.64 L1054.05 1208.64 L1053.46 1208.64 L1052.88 1208.64 L1052.29 1208.64 L1051.7 1208.64 L1051.12 1208.64 L1050.53 1208.64 L1049.94 1208.64 L1049.36 1208.64 L1048.77 1208.64 L1048.19 1208.64 L1047.6 1208.64 L1047.01 1208.64 L1046.43 1208.64 L1045.84 1208.64 L1045.25 1208.64 L1044.67 1208.64 L1044.08 1208.64 L1043.49 1208.64 L1042.91 1208.64 L1042.32 1208.64 L1041.73 1208.64 L1041.15 1208.64 L1040.56 1208.64 L1039.98 1208.64 L1039.39 1208.64 L1038.8 1208.64 L1038.22 1208.64 L1037.63 1208.64 L1037.04 1208.64 L1036.46 1208.64 L1035.87 1208.64 L1035.28 1208.64 L1034.7 1208.64 L1034.11 1208.64 L1033.52 1208.64 L1032.94 1208.64 L1032.35 1208.64 L1031.77 1208.64 L1031.18 1208.64 L1030.59 1208.64 L1030.01 1208.64 L1029.42 1208.64 L1028.83 1208.64 L1028.25 1208.64 L1027.66 1208.64 L1027.07 1208.64 L1026.49 1208.64 L1025.9 1208.64 L1025.32 1208.64 L1024.73 1208.64 L1024.14 1208.64 L1023.56 1208.64 L1022.97 1208.64 L1022.38 1208.64 L1021.8 1208.64 L1021.21 1208.64 L1020.62 1208.64 L1020.04 1208.64 L1019.45 1208.64 L1018.86 1208.64 L1018.28 1208.64 L1017.69 1208.64 L1017.11 1208.64 L1016.52 1208.64 L1015.93 1208.64 L1015.35 1208.64 L1014.76 1208.64 L1014.17 1208.64 L1013.59 1208.64 L1013 1208.64 L1012.41 1208.64 L1011.83 1208.64 L1011.24 1208.64 L1010.65 1208.64 L1010.07 1208.64 L1009.48 1208.64 L1008.9 1208.64 L1008.31 1208.64 L1007.72 1208.64 L1007.14 1208.64 L1006.55 1208.64 L1005.96 1208.64 L1005.38 1208.64 L1004.79 1208.64 L1004.2 1208.64 L1003.62 1208.64 L1003.03 1208.64 L1002.44 1208.64 L1001.86 1208.64 L1001.27 1208.64 L1000.69 1208.64 L1000.1 1208.64 L999.513 1208.64 L998.926 1208.64 L998.34 1208.64 L997.754 1208.64 L997.167 1208.64 L996.581 1208.64 L995.994 1208.64 L995.408 1208.64 L994.822 1208.64 L994.235 1208.64 L993.649 1208.64 L993.062 1208.64 L992.476 1208.64 L991.889 1208.64 L991.303 1208.64 L990.717 1208.64 L990.13 1208.64 L989.544 1208.64 L988.957 1208.64 L988.371 1208.64 L987.785 1208.64 L987.198 1208.64 L986.612 1208.64 L986.025 1208.64  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.07 986.612,1209.07 987.198,1209.07 987.785,1209.07 988.371,1209.07 988.957,1209.07 989.544,1209.07 990.13,1209.07 990.717,1209.07 991.303,1209.07 991.889,1209.07 992.476,1209.07 993.062,1209.07 993.649,1209.07 994.235,1209.07 994.822,1209.07 995.408,1209.07 995.994,1209.07 996.581,1209.07 997.167,1209.07 997.754,1209.07 998.34,1209.07 998.926,1209.07 999.513,1209.07 1000.1,1209.07 1000.69,1209.07 1001.27,1209.07 1001.86,1209.07 1002.44,1209.07 1003.03,1209.07 1003.62,1209.07 1004.2,1209.07 1004.79,1209.07 1005.38,1209.07 1005.96,1209.07 1006.55,1209.07 1007.14,1209.07 1007.72,1209.07 1008.31,1209.07 1008.9,1209.07 1009.48,1209.07 1010.07,1209.07 1010.65,1209.07 1011.24,1209.07 1011.83,1209.07 1012.41,1209.07 1013,1209.07 1013.59,1209.07 1014.17,1209.07 1014.76,1209.07 1015.35,1209.07 1015.93,1209.07 1016.52,1209.07 1017.11,1209.07 1017.69,1209.07 1018.28,1209.07 1018.86,1209.07 1019.45,1209.07 1020.04,1209.07 1020.62,1209.07 1021.21,1209.07 1021.8,1209.07 1022.38,1209.07 1022.97,1209.07 1023.56,1209.07 1024.14,1209.07 1024.73,1209.07 1025.32,1209.07 1025.9,1209.07 1026.49,1209.07 1027.07,1209.07 1027.66,1209.07 1028.25,1209.07 1028.83,1209.07 1029.42,1209.07 1030.01,1209.07 1030.59,1209.07 1031.18,1209.07 1031.77,1209.07 1032.35,1209.07 1032.94,1209.07 1033.52,1209.07 1034.11,1209.07 1034.7,1209.07 1035.28,1209.07 1035.87,1209.07 1036.46,1209.07 1037.04,1209.07 1037.63,1209.07 1038.22,1209.07 1038.8,1209.07 1039.39,1209.07 1039.98,1209.07 1040.56,1209.07 1041.15,1209.07 1041.73,1209.07 1042.32,1209.07 1042.91,1209.07 1043.49,1209.07 1044.08,1209.07 1044.67,1209.07 1045.25,1209.07 1045.84,1209.07 1046.43,1209.07 1047.01,1209.07 1047.6,1209.07 1048.19,1209.07 1048.77,1209.07 1049.36,1209.07 1049.94,1209.07 1050.53,1209.07 1051.12,1209.07 1051.7,1209.07 1052.29,1209.07 1052.88,1209.07 1053.46,1209.07 1054.05,1209.07 1054.64,1209.07 1055.22,1209.07 1055.81,1209.07 1056.39,1209.07 1056.98,1209.07 1057.57,1209.07 1058.15,1209.07 1058.74,1209.07 1059.33,1209.07 1059.91,1209.07 1060.5,1209.07 1061.09,1209.07 1061.67,1209.07 1062.26,1209.07 1062.85,1209.07 1063.43,1209.07 1064.02,1209.07 1064.6,1209.07 1065.19,1209.07 1065.78,1209.07 1066.36,1209.07 1066.95,1209.07 1067.54,1209.07 1068.12,1209.07 1068.71,1209.07 1069.3,1209.07 1069.88,1209.07 1070.47,1209.07 1071.06,1209.07 1071.64,1209.07 1072.23,1209.07 1072.81,1209.07 1073.4,1209.07 1073.99,1209.07 1074.57,1209.07 1075.16,1209.07 1075.75,1209.07 1076.33,1209.07 1076.92,1209.07 1077.51,1209.07 1078.09,1209.07 1078.68,1209.07 1079.26,1209.07 1079.85,1209.07 1080.44,1209.07 1081.02,1209.07 1081.61,1209.07 1082.2,1209.07 1082.78,1209.07 1083.37,1209.07 1083.96,1209.07 1084.54,1209.07 1085.13,1209.07 1085.72,1209.07 1086.3,1209.07 1086.89,1209.07 1087.47,1209.07 1088.06,1209.07 1088.65,1209.07 1089.23,1209.07 1089.82,1209.07 1090.41,1209.07 1090.99,1209.07 1091.58,1209.07 1092.17,1209.07 1092.75,1209.07 1093.34,1209.07 1093.93,1209.07 1094.51,1209.07 1095.1,1209.07 1095.68,1209.07 1096.27,1209.07 1096.86,1209.07 1097.44,1209.07 1098.03,1209.07 1098.62,1209.07 1099.2,1209.07 1099.79,1209.07 1100.38,1209.07 1100.96,1209.07 1101.55,1209.07 1102.14,1209.07 1102.72,1209.07 1103.31,1209.07 1103.89,1209.07 1104.48,1209.07 1105.07,1209.07 1105.65,1209.07 1106.24,1209.07 1106.83,1209.07 1107.41,1209.07 1108,1209.07 1108.59,1209.07 1109.17,1209.07 1109.76,1209.07 1110.34,1209.07 1110.93,1209.07 1111.52,1209.07 1112.1,1209.07 1112.69,1209.07 1113.28,1209.07 1113.86,1209.07 1114.45,1209.07 1115.04,1209.07 1115.62,1209.07 1116.21,1209.07 1116.8,1209.07 1117.38,1209.07 1117.97,1209.07 1118.55,1209.07 1119.14,1209.07 1119.73,1209.07 1120.31,1209.07 1120.9,1209.07 1121.49,1209.07 1122.07,1209.07 1122.66,1209.07 1123.25,1209.07 1123.83,1209.07 1124.42,1209.07 1125.01,1209.07 1125.59,1209.07 1126.18,1209.07 1126.76,1209.07 1127.35,1209.07 1127.94,1209.07 1128.52,1209.07 1129.11,1209.07 1129.7,1209.07 1130.28,1209.07 1130.87,1209.07 1131.46,1209.07 1132.04,1209.07 1132.63,1209.07 1133.21,1209.07 1133.8,1209.07 1134.39,1209.07 1134.97,1209.07 1135.56,1209.07 1136.15,1209.07 1136.73,1209.07 1137.32,1209.07 1137.91,1209.07 1138.49,1209.07 1139.08,1209.07 1139.67,1209.07 1140.25,1209.07 1140.84,1209.07 1141.42,1209.07 1142.01,1209.07 1142.6,1209.07 1143.18,1209.07 1143.77,1209.07 1144.36,1209.07 1144.94,1209.07 1145.53,1209.07 1146.12,1209.07 1146.7,1209.07 1147.29,1209.07 1147.88,1209.07 1148.46,1209.07 1149.05,1209.07 1149.63,1209.07 1150.22,1209.07 1150.81,1209.07 1151.39,1209.07 1151.98,1209.07 1152.57,1209.07 1153.15,1209.07 1153.74,1209.07 1154.33,1209.07 1154.91,1209.07 1155.5,1209.07 1156.09,1209.07 1156.67,1209.07 1157.26,1209.07 1157.84,1209.07 1158.43,1209.07 1159.02,1209.07 1159.6,1209.07 1160.19,1209.07 1160.78,1209.07 1161.36,1209.07 1161.95,1209.07 1162.54,1209.07 1163.12,1209.07 1163.71,1209.07 1164.29,1209.07 1164.88,1209.07 1165.47,1209.07 1166.05,1209.07 1166.64,1209.07 1167.23,1209.07 1167.81,1209.07 1168.4,1209.07 1168.99,1209.07 1169.57,1209.07 1170.16,1209.07 1170.75,1209.07 1171.33,1209.07 1171.92,1209.07 1172.5,1209.07 1173.09,1209.07 1173.68,1209.07 1174.26,1209.07 1174.85,1209.07 1175.44,1209.07 1176.02,1209.07 1176.61,1209.07 1177.2,1209.07 1177.78,1209.07 1178.37,1209.07 1178.96,1209.07 1179.54,1209.07 1180.13,1209.07 1180.71,1209.07 1181.3,1209.07 1181.89,1209.07 1182.47,1209.07 1183.06,1209.07 1183.65,1209.07 1184.23,1209.07 1184.82,1209.07 1185.41,1209.07 1185.99,1209.07 1186.58,1209.07 1187.16,1209.07 1187.75,1209.07 1188.34,1209.07 1188.92,1209.07 1189.51,1209.07 1190.1,1209.07 1190.68,1209.07 1191.27,1209.07 1191.86,1209.07 1192.44,1209.07 1193.03,1209.07 1193.62,1209.07 1194.2,1209.07 1194.79,1209.07 1195.37,1209.07 1195.96,1209.07 1196.55,1209.07 1197.13,1209.07 1197.72,1209.07 1198.31,1209.07 1198.89,1209.07 1199.48,1209.07 1200.07,1209.07 1200.65,1209.07 1201.24,1209.07 1201.83,1209.07 1202.41,1209.07 1203,1209.07 1203.58,1209.07 1204.17,1209.07 1204.76,1209.07 1205.34,1209.07 1205.93,1209.07 1206.52,1209.07 1207.1,1209.07 1207.69,1209.07 1208.28,1209.07 1208.86,1209.07 1209.45,1209.07 1210.03,1209.07 1210.62,1209.07 1211.21,1209.07 1211.79,1209.07 1212.38,1209.07 1212.97,1209.07 1213.55,1209.07 1214.14,1209.07 1214.73,1209.07 1215.31,1209.07 1215.9,1209.07 1216.49,1209.07 1217.07,1209.07 1217.66,1209.07 1218.24,1209.07 1218.83,1209.07 1219.42,1209.07 1220,1209.07 1220.59,1209.07 1221.18,1209.07 1221.76,1209.07 1222.35,1209.07 1222.94,1209.07 1223.52,1209.07 1224.11,1209.07 1224.7,1209.07 1225.28,1209.07 1225.87,1209.07 1226.45,1209.07 1227.04,1209.07 1227.63,1209.07 1228.21,1209.07 1228.8,1209.07 1229.39,1209.07 1229.97,1209.07 1230.56,1209.07 1231.15,1209.07 1231.73,1209.07 1232.32,1209.07 1232.91,1209.07 1233.49,1209.07 1234.08,1209.07 1234.66,1209.07 1235.25,1209.07 1235.84,1209.07 1236.42,1209.07 1237.01,1209.07 1237.6,1209.07 1238.18,1209.07 1238.77,1209.07 1239.36,1209.07 1239.94,1209.07 1240.53,1209.07 1241.11,1209.07 1241.7,1209.07 1242.29,1209.07 1242.87,1209.07 1243.46,1209.07 1244.05,1209.07 1244.63,1209.07 1245.22,1209.07 1245.81,1209.07 1246.39,1209.07 1246.98,1209.07 1247.57,1209.07 1248.15,1209.07 1248.74,1209.07 1249.32,1209.07 1249.91,1209.07 1250.5,1209.07 1251.08,1209.07 1251.67,1209.07 1252.26,1209.07 1252.84,1209.07 1253.43,1209.07 1254.02,1209.07 1254.6,1209.07 1255.19,1209.07 1255.78,1209.07 1256.36,1209.07 1256.95,1209.07 1257.53,1209.07 1258.12,1209.07 1258.71,1209.07 1259.29,1209.07 1259.88,1209.07 1260.47,1209.07 1261.05,1209.07 1261.64,1209.07 1262.23,1209.07 1262.81,1209.07 1263.4,1209.07 1263.98,1209.07 1264.57,1209.07 1265.16,1209.07 1265.74,1209.07 1266.33,1209.07 1266.92,1209.07 1267.5,1209.07 1268.09,1209.07 1268.68,1209.07 1269.26,1209.07 1269.85,1209.07 1270.44,1209.07 1271.02,1209.07 1271.61,1209.07 1272.19,1209.07 1272.78,1209.07 1273.37,1209.07 1273.95,1209.07 1274.54,1209.07 1275.13,1209.07 1275.71,1209.07 1276.3,1209.07 1276.89,1209.07 1277.47,1209.07 1278.06,1209.07 1278.65,1209.07 1279.23,1209.07 1279.82,1209.07 1280.4,1209.07 1280.99,1209.07 1281.58,1209.07 1282.16,1209.07 1282.75,1209.07 1283.34,1209.07 1283.92,1209.07 1284.51,1209.07 1285.1,1209.07 1285.68,1209.07 1286.27,1209.07 1286.86,1209.07 1287.44,1209.07 1288.03,1209.07 1288.61,1209.07 1289.2,1209.07 1289.79,1209.07 1290.37,1209.07 1290.96,1209.07 1291.55,1209.07 1292.13,1209.07 1292.72,1209.07 1293.31,1209.07 1293.89,1209.07 1294.48,1209.07 1295.06,1209.07 1295.65,1209.07 1296.24,1209.07 1296.82,1209.07 1297.41,1209.07 1298,1209.07 1298.58,1209.07 1299.17,1209.07 1299.76,1209.07 1300.34,1209.07 1300.93,1209.07 1301.52,1209.07 1302.1,1209.07 1302.69,1209.07 1303.27,1209.07 1303.86,1209.07 1304.45,1209.07 1305.03,1209.07 1305.62,1209.07 1306.21,1209.07 1306.79,1209.07 1307.38,1209.07 1307.97,1209.07 1308.55,1209.07 1309.14,1209.07 1309.73,1209.07 1310.31,1209.07 1310.9,1209.07 1311.48,1209.07 1312.07,1209.07 1312.66,1209.07 1313.24,1209.07 1313.83,1209.07 1314.42,1209.07 1315,1209.07 1315.59,1209.07 1316.18,1209.07 1316.76,1209.07 1317.35,1209.07 1317.93,1209.07 1318.52,1209.07 1319.11,1209.07 1319.69,1209.07 1320.28,1209.07 1320.87,1209.07 1321.45,1209.07 1322.04,1209.07 1322.63,1209.07 1323.21,1209.07 1323.8,1209.07 1324.39,1209.07 1324.97,1209.07 1325.56,1209.07 1326.14,1209.07 1326.73,1209.07 1327.32,1209.07 1327.9,1209.07 1328.49,1209.07 1329.08,1209.07 1329.66,1209.07 1330.25,1209.07 1330.84,1209.07 1331.42,1209.07 1332.01,1209.07 1332.6,1209.07 1333.18,1209.07 1333.77,1209.07 1334.35,1209.07 1334.94,1209.07 1335.53,1209.07 1336.11,1209.07 1336.7,1209.07 1337.29,1209.07 1337.87,1209.07 1338.46,1209.07 1339.05,1209.07 1339.63,1209.07 1340.22,1209.07 1340.8,1209.07 1341.39,1209.07 1341.98,1209.07 1342.56,1209.07 1343.15,1209.07 1343.74,1209.07 1344.32,1209.07 1344.91,1209.07 1345.5,1209.07 1346.08,1209.07 1346.67,1209.07 1347.26,1209.07 1347.84,1209.07 1348.43,1209.07 1349.01,1209.07 1349.6,1209.07 1350.19,1209.07 1350.77,1209.07 1351.36,1209.07 1351.95,1209.07 1352.53,1209.07 1353.12,1209.07 1353.71,1209.07 1354.29,1209.07 1354.88,1209.07 1355.47,1209.07 1356.05,1209.07 1356.64,1209.07 1357.22,1209.07 1357.81,1209.07 1358.4,1209.07 1358.98,1209.07 1359.57,1209.07 1360.16,1209.07 1360.74,1209.07 1361.33,1209.07 1361.92,1209.07 1362.5,1209.07 1363.09,1209.07 1363.68,1209.07 1364.26,1209.07 1364.85,1209.07 1365.43,1209.07 1366.02,1209.07 1366.61,1209.07 1367.19,1209.07 1367.78,1209.07 1368.37,1209.07 1368.95,1209.07 1369.54,1209.07 1370.13,1209.07 1370.71,1209.07 1371.3,1209.07 1371.88,1209.07 1372.47,1209.07 1373.06,1209.07 1373.64,1209.07 1374.23,1209.07 1374.82,1209.07 1375.4,1209.07 1375.99,1209.07 1376.58,1209.07 1377.16,1209.07 1377.75,1209.07 1378.34,1209.07 1378.92,1209.07 1379.51,1209.07 1380.09,1209.07 1380.68,1209.07 1381.27,1209.07 1381.85,1209.07 1382.44,1209.07 1383.03,1209.07 1383.61,1209.07 1384.2,1209.07 1384.79,1209.07 1385.37,1209.07 1385.96,1209.07 1386.55,1209.07 1387.13,1209.07 1387.72,1209.07 1388.3,1209.07 1388.89,1209.07 1389.48,1209.07 1390.06,1209.07 1390.65,1209.07 1391.24,1209.07 1391.82,1209.07 1392.41,1209.07 1393,1209.07 1393.58,1209.07 1394.17,1209.07 1394.75,1209.07 1395.34,1209.07 1395.93,1209.07 1396.51,1209.07 1397.1,1209.07 1397.69,1209.07 1398.27,1209.07 1398.86,1209.07 1399.45,1209.07 1400.03,1209.07 1400.62,1209.07 1401.21,1209.07 1401.79,1209.07 1402.38,1209.07 1402.96,1209.07 1403.55,1209.07 1404.14,1209.07 1404.72,1209.07 1405.31,1209.07 1405.9,1209.07 1406.48,1209.07 1407.07,1209.07 1407.66,1209.07 1408.24,1209.07 1408.83,1209.07 1409.42,1209.07 1410,1209.07 1410.59,1209.07 1411.17,1209.07 1411.76,1209.07 1412.35,1209.07 1412.93,1209.07 1413.52,1209.07 1414.11,1209.07 1414.69,1209.07 1415.28,1209.07 1415.87,1209.07 1416.45,1209.07 1417.04,1209.07 1417.63,1209.07 1418.21,1209.07 1418.8,1209.07 1419.38,1209.07 1419.97,1209.07 1420.56,1209.07 1421.14,1209.07 1421.73,1209.07 1422.32,1209.07 1422.9,1209.07 1423.49,1209.07 1424.08,1209.07 1424.66,1209.07 1425.25,1209.07 1425.83,1209.07 1426.42,1209.07 1427.01,1209.07 1427.59,1209.07 1428.18,1209.07 1428.77,1209.07 1429.35,1209.07 1429.94,1209.07 1430.53,1209.07 1431.11,1209.07 1431.7,1209.07 1432.29,1209.07 1432.87,1209.07 1433.46,1209.07 1434.04,1209.07 1434.63,1209.07 1435.22,1209.07 1435.8,1209.07 1436.39,1209.07 1436.98,1209.07 1437.56,1209.07 1438.15,1209.07 1438.74,1209.07 1439.32,1209.07 1439.91,1209.07 1440.5,1209.07 1441.08,1209.07 1441.67,1209.07 1442.25,1209.07 1442.84,1209.07 1443.43,1209.07 1444.01,1209.07 1444.6,1209.07 1445.19,1209.07 1445.77,1209.07 1446.36,1209.07 1446.95,1209.07 1447.53,1209.07 1448.12,1209.07 1448.7,1209.07 1449.29,1209.07 1449.88,1209.07 1450.46,1209.07 1451.05,1209.07 1451.64,1209.07 1452.22,1209.07 1452.81,1209.07 1453.4,1209.07 1453.98,1209.07 1454.57,1209.07 1455.16,1209.07 1455.74,1209.07 1456.33,1209.07 1456.91,1209.07 1457.5,1209.07 1458.09,1209.07 1458.67,1209.07 1459.26,1209.07 1459.85,1209.07 1460.43,1209.07 1461.02,1209.07 1461.61,1209.07 1462.19,1209.07 1462.78,1209.07 1463.37,1209.07 1463.95,1209.07 1464.54,1209.07 1465.12,1209.07 1465.71,1209.07 1466.3,1209.07 1466.88,1209.07 1467.47,1209.07 1468.06,1209.07 1468.64,1209.07 1469.23,1209.07 1469.82,1209.07 1470.4,1209.07 1470.99,1209.07 1471.57,1209.07 1472.16,1209.07 1472.75,1209.07 1473.33,1209.07 1473.92,1209.07 1474.51,1209.07 1475.09,1209.07 1475.68,1209.07 1476.27,1209.07 1476.85,1209.07 1477.44,1209.07 1478.03,1209.07 1478.61,1209.07 1479.2,1209.07 1479.78,1209.07 1480.37,1209.07 1480.96,1209.07 1481.54,1209.07 1482.13,1209.07 1482.72,1209.07 1483.3,1209.07 1483.89,1209.07 1484.48,1209.07 1485.06,1209.07 1485.65,1209.07 1486.24,1209.07 1486.82,1209.07 1487.41,1209.07 1487.99,1209.07 1488.58,1209.07 1489.17,1209.07 1489.75,1209.07 1490.34,1209.07 1490.93,1209.07 1491.51,1209.07 1492.1,1209.07 1492.69,1209.07 1493.27,1209.07 1493.86,1209.07 1494.45,1209.07 1495.03,1209.07 1495.62,1209.07 1496.2,1209.07 1496.79,1209.07 1497.38,1209.07 1497.96,1209.07 1498.55,1209.07 1499.14,1209.07 1499.72,1209.07 1500.31,1209.07 1500.9,1209.07 1501.48,1209.07 1502.07,1209.07 1502.65,1209.07 1503.24,1209.07 1503.83,1209.07 1504.41,1209.07 1505,1209.07 1505.59,1209.07 1506.17,1209.07 1506.76,1209.07 1507.35,1209.07 1507.93,1209.07 1508.52,1209.07 1509.11,1209.07 1509.69,1209.07 1510.28,1209.07 1510.86,1209.07 1511.45,1209.07 1512.04,1209.07 1512.62,1209.07 1513.21,1209.07 1513.8,1209.07 1514.38,1209.07 1514.97,1209.07 1515.56,1209.07 1516.14,1209.07 1516.73,1209.07 1517.32,1209.07 1517.9,1209.07 1518.49,1209.07 1519.07,1209.07 1519.66,1209.07 1520.25,1209.07 1520.83,1209.07 1521.42,1209.07 1522.01,1209.07 1522.59,1209.07 1523.18,1209.07 1523.77,1209.07 1524.35,1209.07 1524.94,1209.07 1525.52,1209.07 1526.11,1209.07 1526.7,1209.07 1527.28,1209.07 1527.87,1209.07 1528.46,1209.07 1529.04,1209.07 1529.63,1209.07 1530.22,1209.07 1530.8,1209.07 1531.39,1209.07 1531.98,1209.07 1532.56,1209.07 1533.15,1209.07 1533.73,1209.07 1534.32,1209.07 1534.91,1209.07 1535.49,1209.07 1536.08,1209.07 1536.67,1209.07 1537.25,1209.07 1537.84,1209.07 1538.43,1209.07 1539.01,1209.07 1539.6,1209.07 1540.19,1209.07 1540.77,1209.07 1541.36,1209.07 1541.94,1209.07 1542.53,1209.07 1543.12,1209.07 1543.7,1209.07 1544.29,1209.07 1544.88,1209.07 1545.46,1209.07 1546.05,1209.07 1546.64,1209.07 1547.22,1209.07 1547.81,1209.07 1548.4,1209.07 1548.98,1209.07 1549.57,1209.07 1550.15,1209.07 1550.74,1209.07 1551.33,1209.07 1551.91,1209.07 1552.5,1209.07 1553.09,1209.07 1553.67,1209.07 1554.26,1209.07 1554.85,1209.07 1555.43,1209.07 1556.02,1209.07 1556.6,1209.07 1557.19,1209.07 1557.78,1209.07 1558.36,1209.07 1558.95,1209.07 1559.54,1209.07 1560.12,1209.07 1560.71,1209.07 1561.3,1209.07 1561.88,1209.07 1562.47,1209.07 1563.06,1209.07 1563.64,1209.07 1564.23,1209.07 1564.81,1209.07 1565.4,1209.07 1565.99,1209.07 1566.57,1209.07 1567.16,1209.07 1567.75,1209.07 1568.33,1209.07 1568.92,1209.07 1569.51,1209.07 1570.09,1209.07 1570.68,1209.07 1571.27,1209.07 1571.85,1209.07 1572.44,1209.07 1573.02,1209.07 1573.61,1209.07 1574.2,1209.07 1574.78,1209.07 1575.37,1209.07 1575.96,1209.07 1576.54,1209.07 1577.13,1209.07 1577.72,1209.07 1578.3,1209.07 1578.89,1209.07 1579.47,1209.07 1580.06,1209.07 1580.65,1209.07 1581.23,1209.07 1581.82,1209.07 1582.41,1209.07 1582.99,1209.07 1583.58,1209.07 1584.17,1209.07 1584.75,1209.07 1585.34,1209.07 1585.93,1209.07 1586.51,1209.07 1587.1,1209.07 1587.68,1209.07 1588.27,1209.07 1588.86,1209.07 1589.44,1209.07 1590.03,1209.07 1590.62,1209.07 1591.2,1209.07 1591.79,1209.07 1592.38,1209.07 1592.96,1209.07 1593.55,1209.07 1594.14,1209.07 1594.72,1209.07 1595.31,1209.07 1595.89,1209.07 1596.48,1209.07 1597.07,1209.07 1597.65,1209.07 1598.24,1209.07 1598.83,1209.07 1599.41,1209.07 1600,1209.07 1600.59,1209.07 1601.17,1209.07 1601.76,1209.07 1602.34,1209.07 1602.93,1209.07 1603.52,1209.07 1604.1,1209.07 1604.69,1209.07 1605.28,1209.07 1605.86,1209.07 1606.45,1209.07 1607.04,1209.07 1607.62,1209.07 1608.21,1209.07 1608.8,1209.07 1609.38,1209.07 1609.97,1209.07 1610.55,1209.07 1611.14,1209.07 1611.73,1209.07 1612.31,1209.07 1612.9,1209.07 1613.49,1209.07 1614.07,1209.07 1614.66,1209.07 1615.25,1209.07 1615.83,1209.07 1616.42,1209.07 1617.01,1209.07 1617.59,1209.07 1618.18,1209.07 1618.76,1209.07 1619.35,1209.07 1619.94,1209.07 1620.52,1209.07 1621.11,1209.07 1621.7,1209.07 1622.28,1209.07 1622.87,1209.07 1623.46,1209.07 1624.04,1209.07 1624.63,1209.07 1625.22,1209.07 1625.8,1209.07 1626.39,1209.07 1626.97,1209.07 1627.56,1209.07 1628.15,1209.07 1628.73,1209.07 1629.32,1209.07 1629.91,1209.07 1630.49,1209.07 1631.08,1209.07 1631.67,1209.07 1632.25,1209.07 1632.84,1209.07 1633.42,1209.07 1634.01,1209.07 1634.6,1209.07 1635.18,1209.07 1635.77,1209.07 1636.36,1209.07 1636.94,1209.07 1637.53,1209.07 1638.12,1209.07 1638.7,1209.07 1639.29,1209.07 1639.88,1209.07 1640.46,1209.07 1641.05,1209.07 1641.63,1209.07 1642.22,1209.07 1642.81,1209.07 1643.39,1209.07 1643.98,1209.07 1644.57,1209.07 1645.15,1209.07 1645.74,1209.07 1646.33,1209.07 1646.91,1209.07 1647.5,1209.07 1648.09,1209.07 1648.67,1209.07 1649.26,1209.07 1649.84,1209.07 1650.43,1209.07 1651.02,1209.07 1651.6,1209.07 1652.19,1209.07 1652.78,1209.07 1653.36,1209.07 1653.95,1209.07 1654.54,1209.07 1655.12,1209.07 1655.71,1209.07 1656.29,1209.07 1656.88,1209.07 1657.47,1209.07 1658.05,1209.07 1658.64,1209.07 1659.23,1209.07 1659.81,1209.07 1660.4,1209.07 1660.99,1209.07 1661.57,1209.07 1662.16,1209.07 1662.75,1209.07 1663.33,1209.07 1663.92,1209.07 1664.5,1209.07 1665.09,1209.07 1665.68,1209.07 1666.26,1209.07 1666.85,1209.07 1667.44,1209.07 1668.02,1209.07 1668.61,1209.07 1669.2,1209.07 1669.78,1209.07 1670.37,1209.07 1670.96,1209.07 1671.54,1209.07 1672.13,1209.07 1672.71,1209.07 1673.3,1209.07 1673.89,1209.07 1674.47,1209.07 1675.06,1209.07 1675.65,1209.07 1676.23,1209.07 1676.82,1209.07 1677.41,1209.07 1677.99,1209.07 1678.58,1209.07 1679.17,1209.07 1679.75,1209.07 1680.34,1209.07 1680.92,1209.07 1681.51,1209.07 1682.1,1209.07 1682.68,1209.07 1683.27,1209.07 1683.86,1209.07 1684.44,1209.07 1685.03,1209.07 1685.62,1209.07 1686.2,1209.07 1686.79,1209.07 1687.37,1209.07 1687.96,1209.07 1688.55,1209.07 1689.13,1209.07 1689.72,1209.07 1690.31,1209.07 1690.89,1209.07 1691.48,1209.07 1692.07,1209.07 1692.65,1209.07 1693.24,1209.07 1693.83,1209.07 1694.41,1209.07 1695,1209.07 1695.58,1209.07 1696.17,1209.07 1696.76,1209.07 1697.34,1209.07 1697.93,1209.07 1698.52,1209.07 1699.1,1209.07 1699.69,1209.07 1700.28,1209.07 1700.86,1209.07 1701.45,1209.07 1702.04,1209.07 1702.62,1209.07 1703.21,1209.07 1703.79,1209.07 1704.38,1209.07 1704.97,1209.07 1705.55,1209.07 1706.14,1209.07 1706.73,1209.07 1707.31,1209.07 1707.9,1209.07 1708.49,1209.07 1709.07,1209.07 1709.66,1209.07 1710.24,1209.07 1710.83,1209.07 1711.42,1209.07 1712,1209.07 1712.59,1209.07 1713.18,1209.07 1713.76,1209.07 1714.35,1209.07 1714.94,1209.07 1715.52,1209.07 1716.11,1209.07 1716.7,1209.07 1717.28,1209.07 1717.87,1209.07 1718.45,1209.07 1719.04,1209.07 1719.63,1209.07 1720.21,1209.07 1720.8,1209.07 1721.39,1209.07 1721.97,1209.07 1722.56,1209.07 1723.15,1209.07 1723.73,1209.07 1724.32,1209.07 1724.91,1209.07 1725.49,1209.07 1726.08,1209.07 1726.66,1209.07 1727.25,1209.07 1727.84,1209.07 1728.42,1209.07 1729.01,1209.07 1729.6,1209.07 1730.18,1209.07 1730.77,1209.07 1731.36,1209.07 1731.94,1209.07 1732.53,1209.07 1733.11,1209.07 1733.7,1209.07 1734.29,1209.07 1734.87,1209.07 1735.46,1209.07 1736.05,1209.07 1736.63,1209.07 1737.22,1209.07 1737.81,1209.07 1738.39,1209.07 1738.98,1209.07 1739.57,1209.07 1740.15,1209.07 1740.74,1209.07 1741.32,1209.07 1741.91,1209.07 1742.5,1209.07 1743.08,1209.07 1743.67,1209.07 1744.26,1209.07 1744.84,1209.07 1745.43,1209.07 1746.02,1209.07 1746.6,1209.07 1747.19,1209.07 1747.78,1209.07 1748.36,1209.07 1748.95,1209.07 1749.53,1209.07 1750.12,1209.07 1750.71,1209.07 1751.29,1209.07 1751.88,1209.07 1752.47,1209.07 1753.05,1209.07 1753.64,1209.07 1754.23,1209.07 1754.81,1209.07 1755.4,1209.07 1755.99,1209.07 1756.57,1209.07 1757.16,1209.07 1757.74,1209.07 1758.33,1209.07 1758.92,1209.07 1759.5,1209.07 1760.09,1209.07 1760.68,1209.07 1761.26,1209.07 1761.85,1209.07 1762.44,1209.07 1763.02,1209.07 1763.61,1209.07 1764.19,1209.07 1764.78,1209.07 1765.37,1209.07 1765.95,1209.07 1766.54,1209.07 1767.13,1209.07 1767.71,1209.07 1768.3,1209.07 1768.89,1209.07 1769.47,1209.07 1770.06,1209.07 1770.65,1209.07 1771.23,1209.07 1771.82,1209.07 1772.4,1209.07 1772.99,1209.07 1773.58,1209.07 1774.16,1209.07 1774.75,1209.07 1775.34,1209.07 1775.92,1209.07 1776.51,1209.07 1777.1,1209.07 1777.68,1209.07 1778.27,1209.07 1778.86,1209.07 1779.44,1209.07 1780.03,1209.07 1780.61,1209.07 1781.2,1209.07 1781.79,1209.07 1782.37,1209.07 1782.96,1209.07 1783.55,1209.07 1784.13,1209.07 1784.72,1209.07 1785.31,1209.07 1785.89,1209.07 1786.48,1209.07 1787.06,1209.07 1787.65,1209.07 1788.24,1209.07 1788.82,1209.07 1789.41,1209.07 1790,1209.07 1790.58,1209.07 1791.17,1209.07 1791.76,1209.07 1792.34,1209.07 1792.93,1209.07 1793.52,1209.07 1794.1,1209.07 1794.69,1209.07 1795.27,1209.07 1795.86,1209.07 1796.45,1209.07 1797.03,1209.07 1797.62,1209.07 1798.21,1209.07 1798.79,1209.07 1799.38,1209.07 1799.97,1209.07 1800.55,1209.07 1801.14,1209.07 1801.73,1209.07 1802.31,1209.07 1802.9,1209.07 1803.48,1209.07 1804.07,1209.07 1804.66,1209.07 1805.24,1209.07 1805.83,1209.07 1806.42,1209.07 1807,1209.07 1807.59,1209.07 1808.18,1209.07 1808.76,1209.07 1809.35,1209.07 1809.94,1209.07 1810.52,1209.07 1811.11,1209.07 1811.69,1209.07 1812.28,1209.07 1812.87,1209.07 1813.45,1209.07 1814.04,1209.07 1814.63,1209.07 1815.21,1209.07 1815.8,1209.07 1816.39,1209.07 1816.97,1209.07 1817.56,1209.07 1818.14,1209.07 1818.73,1209.07 1819.32,1209.07 1819.9,1209.07 1820.49,1209.07 1821.08,1209.07 1821.66,1209.07 1822.25,1209.07 1822.84,1209.07 1823.42,1209.07 1824.01,1209.07 1824.6,1209.07 1825.18,1209.07 1825.77,1209.07 1826.35,1209.07 1826.94,1209.07 1827.53,1209.07 1828.11,1209.07 1828.7,1209.07 1829.29,1209.07 1829.87,1209.07 1830.46,1209.07 1831.05,1209.07 1831.63,1209.07 1832.22,1209.07 1832.81,1209.07 1833.39,1209.07 1833.98,1209.07 1834.56,1209.07 1835.15,1209.07 1835.74,1209.07 1836.32,1209.07 1836.91,1209.07 1837.5,1209.07 1838.08,1209.07 1838.67,1209.07 1839.26,1209.07 1839.84,1209.07 1840.43,1209.07 1841.01,1209.07 1841.6,1209.07 1842.19,1209.07 1842.77,1209.07 1843.36,1209.07 1843.95,1209.07 1844.53,1209.07 1845.12,1209.07 1845.71,1209.07 1846.29,1209.07 1846.88,1209.07 1847.47,1209.07 1848.05,1209.07 1848.64,1209.07 1849.22,1209.07 1849.81,1209.07 1850.4,1209.07 1850.98,1209.07 1851.57,1209.07 1852.16,1209.07 1852.74,1209.07 1853.33,1209.07 1853.92,1209.07 1854.5,1209.07 1855.09,1209.07 1855.68,1209.07 1856.26,1209.07 1856.85,1209.07 1857.43,1209.07 1858.02,1209.07 1858.61,1209.07 1859.19,1209.07 1859.78,1209.07 1860.37,1209.07 1860.95,1209.07 1861.54,1209.07 1862.13,1209.07 1862.71,1209.07 1863.3,1209.07 1863.88,1209.07 1864.47,1209.07 1865.06,1209.07 1865.64,1209.07 1866.23,1209.07 1866.82,1209.07 1867.4,1209.07 1867.99,1209.07 1868.58,1209.07 1869.16,1209.07 1869.75,1209.07 1870.34,1209.07 1870.92,1209.07 1871.51,1209.07 1872.09,1209.07 1872.68,1209.07 1873.27,1209.07 1873.85,1209.07 1874.44,1209.07 1875.03,1209.07 1875.61,1209.07 1876.2,1209.07 1876.79,1209.07 1877.37,1209.07 1877.96,1209.07 1878.55,1209.07 1879.13,1209.07 1879.72,1209.07 1880.3,1209.07 1880.89,1209.07 1881.48,1209.07 1882.06,1209.07 1882.65,1209.07 1883.24,1209.07 1883.82,1209.07 1884.41,1209.07 1885,1209.07 1885.58,1209.07 1886.17,1209.07 1886.76,1209.07 1887.34,1209.07 1887.93,1209.07 1888.51,1209.07 1889.1,1209.07 1889.69,1209.07 1890.27,1209.07 1890.86,1209.07 1891.45,1209.07 1892.03,1209.07 1892.62,1209.07 1893.21,1209.07 1893.79,1209.07 1894.38,1209.07 1894.96,1209.07 1895.55,1209.07 1896.14,1209.07 1896.72,1209.07 1897.31,1209.07 1897.9,1209.07 1898.48,1209.07 1899.07,1209.07 1899.66,1209.07 1900.24,1209.07 1900.83,1209.07 1901.42,1209.07 1902,1209.07 1902.59,1209.07 1903.17,1209.07 1903.76,1209.07 1904.35,1209.07 1904.93,1209.07 1905.52,1209.07 1906.11,1209.07 1906.69,1209.07 1907.28,1209.07 1907.87,1209.07 1908.45,1209.07 1909.04,1209.07 1909.63,1209.07 1910.21,1209.07 1910.8,1209.07 1911.38,1209.07 1911.97,1209.07 1912.56,1209.07 1913.14,1209.07 1913.73,1209.07 1914.32,1209.07 1914.9,1209.07 1915.49,1209.07 1916.08,1209.07 1916.66,1209.07 1917.25,1209.07 1917.83,1209.07 1918.42,1209.07 1919.01,1209.07 1919.59,1209.07 1920.18,1209.07 1920.77,1209.07 1921.35,1209.07 1921.94,1209.07 1922.53,1209.07 1923.11,1209.07 1923.7,1209.07 1924.29,1209.07 1924.87,1209.07 1925.46,1209.07 1926.04,1209.07 1926.63,1209.07 1927.22,1209.07 1927.8,1209.07 1928.39,1209.07 1928.98,1209.07 1929.56,1209.07 1930.15,1209.07 1930.74,1209.07 1931.32,1209.07 1931.91,1209.07 1932.5,1209.07 1933.08,1209.07 1933.67,1209.07 1934.25,1209.07 1934.84,1209.07 1935.43,1209.07 1936.01,1209.07 1936.6,1209.07 1937.19,1209.07 1937.77,1209.07 1938.36,1209.07 1938.95,1209.07 1939.53,1209.07 1940.12,1209.07 1940.71,1209.07 1941.29,1209.07 1941.88,1209.07 1942.46,1209.07 1943.05,1209.07 1943.64,1209.07 1944.22,1209.07 1944.81,1209.07 1945.4,1209.07 1945.98,1209.07 1946.57,1209.07 1947.16,1209.07 1947.74,1209.07 1948.33,1209.07 1948.91,1209.07 1949.5,1209.07 1950.09,1209.07 1950.67,1209.07 1951.26,1209.07 1951.85,1209.07 1952.43,1209.07 1953.02,1209.07 1953.61,1209.07 1954.19,1209.07 1954.78,1209.07 1955.37,1209.07 1955.95,1209.07 1956.54,1209.07 1957.12,1209.07 1957.71,1209.07 1958.3,1209.07 1958.88,1209.07 1959.47,1209.07 1960.06,1209.07 1960.64,1209.07 1961.23,1209.07 1961.82,1209.07 1962.4,1209.07 1962.99,1209.07 1963.58,1209.07 1964.16,1209.07 1964.75,1209.07 1965.33,1209.07 1965.92,1209.07 1966.51,1209.07 1967.09,1209.07 1967.68,1209.07 1968.27,1209.07 1968.85,1209.07 1969.44,1209.07 1970.03,1209.07 1970.61,1209.07 1971.2,1209.07 1971.78,1209.07 1972.37,1209.07 1972.96,1209.07 1973.54,1209.07 1974.13,1209.07 1974.72,1209.07 1975.3,1209.07 1975.89,1209.07 1976.48,1209.07 1977.06,1209.07 1977.65,1209.07 1978.24,1209.07 1978.82,1209.07 1979.41,1209.07 1979.99,1209.07 1980.58,1209.07 1981.17,1209.07 1981.75,1209.07 1982.34,1209.07 1982.93,1209.07 1983.51,1209.07 1984.1,1209.07 1984.69,1209.07 1985.27,1209.07 1985.86,1209.07 1986.45,1209.07 1987.03,1209.07 1987.62,1209.07 1988.2,1209.07 1988.79,1209.07 1989.38,1209.07 1989.96,1209.07 1990.55,1209.07 1991.14,1209.07 1991.72,1209.07 1992.31,1209.07 1992.9,1209.07 1993.48,1209.07 1994.07,1209.07 1994.65,1209.07 1995.24,1209.07 1995.83,1209.07 1996.41,1209.07 1997,1209.07 1997.59,1209.07 1998.17,1209.07 1998.76,1209.07 1999.35,1209.07 1999.93,1209.07 2000.52,1209.07 2001.11,1209.07 2001.69,1209.07 2002.28,1209.07 2002.86,1209.07 2003.45,1209.07 2004.04,1209.07 2004.62,1209.07 2005.21,1209.07 2005.8,1209.07 2006.38,1209.07 2006.97,1209.07 2007.56,1209.07 2008.14,1209.07 2008.73,1209.07 2009.32,1209.07 2009.9,1209.07 2010.49,1209.07 2011.07,1209.07 2011.66,1209.07 2012.25,1209.07 2012.83,1209.07 2013.42,1209.07 2014.01,1209.07 2014.59,1209.07 2015.18,1209.07 2015.77,1209.07 2016.35,1209.07 2016.94,1209.07 2017.53,1209.07 2018.11,1209.07 2018.7,1209.07 2019.28,1209.07 2019.87,1209.07 2020.46,1209.07 2021.04,1209.07 2021.63,1209.07 2022.22,1209.07 2022.8,1209.07 2023.39,1209.07 2023.98,1209.07 2024.56,1209.07 2025.15,1209.07 2025.73,1209.07 2026.32,1209.07 2026.91,1209.07 2027.49,1209.07 2028.08,1209.07 2028.67,1209.07 2029.25,1209.07 2029.84,1209.07 2030.43,1209.07 2031.01,1209.07 2031.6,1209.07 2032.19,1209.07 2032.77,1209.07 2033.36,1209.07 2033.94,1209.07 2034.53,1209.07 2035.12,1209.07 2035.7,1209.07 2036.29,1209.07 2036.88,1209.07 2037.46,1209.07 2038.05,1209.07 2038.64,1209.07 2039.22,1209.07 2039.81,1209.07 2040.4,1209.07 2040.98,1209.07 2041.57,1209.07 2042.15,1209.07 2042.74,1209.07 2043.33,1209.07 2043.91,1209.07 2044.5,1209.07 2045.09,1209.07 2045.67,1209.07 2046.26,1209.07 2046.85,1209.07 2047.43,1209.07 2048.02,1209.07 2048.6,1209.07 2049.19,1209.07 2049.78,1209.07 2050.36,1209.07 2050.95,1209.07 2051.54,1209.07 2052.12,1209.07 2052.71,1209.07 2053.3,1209.07 2053.88,1209.07 2054.47,1209.07 2055.06,1209.07 2055.64,1209.07 2056.23,1209.07 2056.81,1209.07 2057.4,1209.07 2057.99,1209.07 2058.57,1209.07 2059.16,1209.07 2059.75,1209.07 2060.33,1209.07 2060.92,1209.07 2061.51,1209.07 2062.09,1209.07 2062.68,1209.07 2063.27,1209.07 2063.85,1209.07 2064.44,1209.07 2065.02,1209.07 2065.61,1209.07 2066.2,1209.07 2066.78,1209.07 2067.37,1209.07 2067.96,1209.07 2068.54,1209.07 2069.13,1209.07 2069.72,1209.07 2070.3,1209.07 2070.89,1209.07 2071.48,1209.07 2072.06,1209.07 2072.65,1209.07 2073.23,1209.07 2073.82,1209.07 2074.41,1209.07 2074.99,1209.07 2075.58,1209.07 2076.17,1209.07 2076.75,1209.07 2077.34,1209.07 2077.93,1209.07 2078.51,1209.07 2079.1,1209.07 2079.68,1209.07 2080.27,1209.07 2080.86,1209.07 2081.44,1209.07 2082.03,1209.07 2082.62,1209.07 2083.2,1209.07 2083.79,1209.07 2084.38,1209.07 2084.96,1209.07 2085.55,1209.07 2086.14,1209.07 2086.72,1209.07 2087.31,1209.07 2087.89,1209.07 2088.48,1209.07 2089.07,1209.07 2089.65,1209.07 2090.24,1209.07 2090.83,1209.07 2091.41,1209.07 2092,1209.07 2092.59,1209.07 2093.17,1209.07 2093.76,1209.07 2094.35,1209.07 2094.93,1209.07 2095.52,1209.07 2096.1,1209.07 2096.69,1209.07 2097.28,1209.07 2097.86,1209.07 2098.45,1209.07 2099.04,1209.07 2099.62,1209.07 2100.21,1209.07 2100.8,1209.07 2101.38,1209.07 2101.97,1209.07 2102.55,1209.07 2103.14,1209.07 2103.73,1209.07 2104.31,1209.07 2104.9,1209.07 2105.49,1209.07 2106.07,1209.07 2106.66,1209.07 2107.25,1209.07 2107.83,1209.07 2108.42,1209.07 2109.01,1209.07 2109.59,1209.07 2110.18,1209.07 2110.76,1209.07 2111.35,1209.07 2111.94,1209.07 2112.52,1209.07 2113.11,1209.07 2113.7,1209.07 2114.28,1209.07 2114.87,1209.07 2115.46,1209.07 2116.04,1209.07 2116.63,1209.07 2117.22,1209.07 2117.8,1209.07 2118.39,1209.07 2118.97,1209.07 2119.56,1209.07 2120.15,1209.07 2120.73,1209.07 2121.32,1209.07 2121.91,1209.07 2122.49,1209.07 2123.08,1209.07 2123.67,1209.07 2124.25,1209.07 2124.84,1209.07 2125.42,1209.07 2126.01,1209.07 2126.6,1209.07 2127.18,1209.07 2127.77,1209.07 2128.36,1209.07 2128.94,1209.07 2129.53,1209.07 2130.12,1209.07 2130.7,1209.07 2131.29,1209.07 2131.88,1209.07 2132.46,1209.07 2133.05,1209.07 2133.63,1209.07 2134.22,1209.07 2134.81,1209.07 2135.39,1209.07 2135.98,1209.07 2136.57,1209.07 2137.15,1209.07 2137.74,1209.07 2138.33,1209.07 2138.91,1209.07 2139.5,1209.07 2140.09,1209.07 2140.67,1209.07 2141.26,1209.07 2141.84,1209.07 2142.43,1209.07 2143.02,1209.07 2143.6,1209.07 2144.19,1209.07 2144.78,1209.07 2145.36,1209.07 2145.95,1209.07 2146.54,1209.07 2147.12,1209.07 2147.71,1209.07 2148.3,1209.07 2148.88,1209.07 2149.47,1209.07 2150.05,1209.07 2150.64,1209.07 2151.23,1209.07 2151.81,1209.07 2152.4,1209.07 2152.99,1209.07 2153.57,1209.07 2154.16,1209.07 2154.75,1209.07 2155.33,1209.07 2155.92,1209.07 2156.5,1209.07 2157.09,1209.07 2157.68,1209.07 2158.26,1209.07 \"/>\n<path clip-path=\"url(#clip752)\" d=\"M986.025 1208.82 L986.612 1208.82 L987.198 1208.82 L987.785 1208.82 L988.371 1208.82 L988.957 1208.82 L989.544 1208.82 L990.13 1208.82 L990.717 1208.82 L991.303 1208.82 L991.889 1208.82 L992.476 1208.82 L993.062 1208.82 L993.649 1208.82 L994.235 1208.82 L994.822 1208.82 L995.408 1208.82 L995.994 1208.82 L996.581 1208.82 L997.167 1208.82 L997.754 1208.82 L998.34 1208.82 L998.926 1208.82 L999.513 1208.82 L1000.1 1208.82 L1000.69 1208.82 L1001.27 1208.82 L1001.86 1208.82 L1002.44 1208.82 L1003.03 1208.82 L1003.62 1208.82 L1004.2 1208.82 L1004.79 1208.82 L1005.38 1208.82 L1005.96 1208.82 L1006.55 1208.82 L1007.14 1208.82 L1007.72 1208.82 L1008.31 1208.82 L1008.9 1208.82 L1009.48 1208.82 L1010.07 1208.82 L1010.65 1208.82 L1011.24 1208.82 L1011.83 1208.82 L1012.41 1208.82 L1013 1208.82 L1013.59 1208.82 L1014.17 1208.82 L1014.76 1208.82 L1015.35 1208.82 L1015.93 1208.82 L1016.52 1208.82 L1017.11 1208.82 L1017.69 1208.82 L1018.28 1208.82 L1018.86 1208.82 L1019.45 1208.82 L1020.04 1208.82 L1020.62 1208.82 L1021.21 1208.82 L1021.8 1208.82 L1022.38 1208.82 L1022.97 1208.82 L1023.56 1208.82 L1024.14 1208.82 L1024.73 1208.82 L1025.32 1208.82 L1025.9 1208.82 L1026.49 1208.82 L1027.07 1208.82 L1027.66 1208.82 L1028.25 1208.82 L1028.83 1208.82 L1029.42 1208.82 L1030.01 1208.82 L1030.59 1208.82 L1031.18 1208.82 L1031.77 1208.82 L1032.35 1208.82 L1032.94 1208.82 L1033.52 1208.82 L1034.11 1208.82 L1034.7 1208.82 L1035.28 1208.82 L1035.87 1208.82 L1036.46 1208.82 L1037.04 1208.82 L1037.63 1208.82 L1038.22 1208.82 L1038.8 1208.82 L1039.39 1208.82 L1039.98 1208.82 L1040.56 1208.82 L1041.15 1208.82 L1041.73 1208.82 L1042.32 1208.82 L1042.91 1208.82 L1043.49 1208.82 L1044.08 1208.82 L1044.67 1208.82 L1045.25 1208.82 L1045.84 1208.82 L1046.43 1208.82 L1047.01 1208.82 L1047.6 1208.82 L1048.19 1208.82 L1048.77 1208.82 L1049.36 1208.82 L1049.94 1208.82 L1050.53 1208.82 L1051.12 1208.82 L1051.7 1208.82 L1052.29 1208.82 L1052.88 1208.82 L1053.46 1208.82 L1054.05 1208.82 L1054.64 1208.82 L1055.22 1208.82 L1055.81 1208.82 L1056.39 1208.82 L1056.98 1208.82 L1057.57 1208.82 L1058.15 1208.82 L1058.74 1208.82 L1059.33 1208.82 L1059.91 1208.82 L1060.5 1208.82 L1061.09 1208.82 L1061.67 1208.82 L1062.26 1208.82 L1062.85 1208.82 L1063.43 1208.82 L1064.02 1208.82 L1064.6 1208.82 L1065.19 1208.82 L1065.78 1208.82 L1066.36 1208.82 L1066.95 1208.82 L1067.54 1208.82 L1068.12 1208.82 L1068.71 1208.82 L1069.3 1208.82 L1069.88 1208.82 L1070.47 1208.82 L1071.06 1208.82 L1071.64 1208.82 L1072.23 1208.82 L1072.81 1208.82 L1073.4 1208.82 L1073.99 1208.82 L1074.57 1208.82 L1075.16 1208.82 L1075.75 1208.82 L1076.33 1208.82 L1076.92 1208.82 L1077.51 1208.82 L1078.09 1208.82 L1078.68 1208.82 L1079.26 1208.82 L1079.85 1208.82 L1080.44 1208.82 L1081.02 1208.82 L1081.61 1208.82 L1082.2 1208.82 L1082.78 1208.82 L1083.37 1208.82 L1083.96 1208.82 L1084.54 1208.82 L1085.13 1208.82 L1085.72 1208.82 L1086.3 1208.82 L1086.89 1208.82 L1087.47 1208.82 L1088.06 1208.82 L1088.65 1208.82 L1089.23 1208.82 L1089.82 1208.82 L1090.41 1208.82 L1090.99 1208.82 L1091.58 1208.82 L1092.17 1208.82 L1092.75 1208.82 L1093.34 1208.82 L1093.93 1208.82 L1094.51 1208.82 L1095.1 1208.82 L1095.68 1208.82 L1096.27 1208.82 L1096.86 1208.82 L1097.44 1208.82 L1098.03 1208.82 L1098.62 1208.82 L1099.2 1208.82 L1099.79 1208.82 L1100.38 1208.82 L1100.96 1208.82 L1101.55 1208.82 L1102.14 1208.82 L1102.72 1208.82 L1103.31 1208.82 L1103.89 1208.82 L1104.48 1208.82 L1105.07 1208.82 L1105.65 1208.82 L1106.24 1208.82 L1106.83 1208.82 L1107.41 1208.82 L1108 1208.82 L1108.59 1208.82 L1109.17 1208.82 L1109.76 1208.82 L1110.34 1208.82 L1110.93 1208.82 L1111.52 1208.82 L1112.1 1208.82 L1112.69 1208.82 L1113.28 1208.82 L1113.86 1208.82 L1114.45 1208.82 L1115.04 1208.82 L1115.62 1208.82 L1116.21 1208.82 L1116.8 1208.82 L1117.38 1208.82 L1117.97 1208.82 L1118.55 1208.82 L1119.14 1208.82 L1119.73 1208.82 L1120.31 1208.82 L1120.9 1208.82 L1121.49 1208.82 L1122.07 1208.82 L1122.66 1208.82 L1123.25 1208.82 L1123.83 1208.82 L1124.42 1208.82 L1125.01 1208.82 L1125.59 1208.82 L1126.18 1208.82 L1126.76 1208.82 L1127.35 1208.82 L1127.94 1208.82 L1128.52 1208.82 L1129.11 1208.82 L1129.7 1208.82 L1130.28 1208.82 L1130.87 1208.82 L1131.46 1208.82 L1132.04 1208.82 L1132.63 1208.82 L1133.21 1208.82 L1133.8 1208.82 L1134.39 1208.82 L1134.97 1208.82 L1135.56 1208.82 L1136.15 1208.82 L1136.73 1208.82 L1137.32 1208.82 L1137.91 1208.82 L1138.49 1208.82 L1139.08 1208.82 L1139.67 1208.82 L1140.25 1208.82 L1140.84 1208.82 L1141.42 1208.82 L1142.01 1208.82 L1142.6 1208.82 L1143.18 1208.82 L1143.77 1208.82 L1144.36 1208.82 L1144.94 1208.82 L1145.53 1208.82 L1146.12 1208.82 L1146.7 1208.82 L1147.29 1208.82 L1147.88 1208.82 L1148.46 1208.82 L1149.05 1208.82 L1149.63 1208.82 L1150.22 1208.82 L1150.81 1208.82 L1151.39 1208.82 L1151.98 1208.82 L1152.57 1208.82 L1153.15 1208.82 L1153.74 1208.82 L1154.33 1208.82 L1154.91 1208.82 L1155.5 1208.82 L1156.09 1208.82 L1156.67 1208.82 L1157.26 1208.82 L1157.84 1208.82 L1158.43 1208.82 L1159.02 1208.82 L1159.6 1208.82 L1160.19 1208.82 L1160.78 1208.82 L1161.36 1208.82 L1161.95 1208.82 L1162.54 1208.82 L1163.12 1208.82 L1163.71 1208.82 L1164.29 1208.82 L1164.88 1208.82 L1165.47 1208.82 L1166.05 1208.82 L1166.64 1208.82 L1167.23 1208.82 L1167.81 1208.82 L1168.4 1208.82 L1168.99 1208.82 L1169.57 1208.82 L1170.16 1208.82 L1170.75 1208.82 L1171.33 1208.82 L1171.92 1208.82 L1172.5 1208.82 L1173.09 1208.82 L1173.68 1208.82 L1174.26 1208.82 L1174.85 1208.82 L1175.44 1208.82 L1176.02 1208.82 L1176.61 1208.82 L1177.2 1208.82 L1177.78 1208.82 L1178.37 1208.82 L1178.96 1208.82 L1179.54 1208.82 L1180.13 1208.82 L1180.71 1208.82 L1181.3 1208.82 L1181.89 1208.82 L1182.47 1208.82 L1183.06 1208.82 L1183.65 1208.82 L1184.23 1208.82 L1184.82 1208.82 L1185.41 1208.82 L1185.99 1208.82 L1186.58 1208.82 L1187.16 1208.82 L1187.75 1208.82 L1188.34 1208.82 L1188.92 1208.82 L1189.51 1208.82 L1190.1 1208.82 L1190.68 1208.82 L1191.27 1208.82 L1191.86 1208.82 L1192.44 1208.82 L1193.03 1208.82 L1193.62 1208.82 L1194.2 1208.82 L1194.79 1208.82 L1195.37 1208.82 L1195.96 1208.82 L1196.55 1208.82 L1197.13 1208.82 L1197.72 1208.82 L1198.31 1208.82 L1198.89 1208.82 L1199.48 1208.82 L1200.07 1208.82 L1200.65 1208.82 L1201.24 1208.82 L1201.83 1208.82 L1202.41 1208.82 L1203 1208.82 L1203.58 1208.82 L1204.17 1208.82 L1204.76 1208.82 L1205.34 1208.82 L1205.93 1208.82 L1206.52 1208.82 L1207.1 1208.82 L1207.69 1208.82 L1208.28 1208.82 L1208.86 1208.82 L1209.45 1208.82 L1210.03 1208.82 L1210.62 1208.82 L1211.21 1208.82 L1211.79 1208.82 L1212.38 1208.82 L1212.97 1208.82 L1213.55 1208.82 L1214.14 1208.82 L1214.73 1208.82 L1215.31 1208.82 L1215.9 1208.82 L1216.49 1208.82 L1217.07 1208.82 L1217.66 1208.82 L1218.24 1208.82 L1218.83 1208.82 L1219.42 1208.82 L1220 1208.82 L1220.59 1208.82 L1221.18 1208.82 L1221.76 1208.82 L1222.35 1208.82 L1222.94 1208.82 L1223.52 1208.82 L1224.11 1208.82 L1224.7 1208.82 L1225.28 1208.82 L1225.87 1208.82 L1226.45 1208.82 L1227.04 1208.82 L1227.63 1208.82 L1228.21 1208.82 L1228.8 1208.82 L1229.39 1208.82 L1229.97 1208.82 L1230.56 1208.82 L1231.15 1208.82 L1231.73 1208.82 L1232.32 1208.82 L1232.91 1208.82 L1233.49 1208.82 L1234.08 1208.82 L1234.66 1208.82 L1235.25 1208.82 L1235.84 1208.82 L1236.42 1208.82 L1237.01 1208.82 L1237.6 1208.82 L1238.18 1208.82 L1238.77 1208.82 L1239.36 1208.82 L1239.94 1208.82 L1240.53 1208.82 L1241.11 1208.82 L1241.7 1208.82 L1242.29 1208.82 L1242.87 1208.82 L1243.46 1208.82 L1244.05 1208.82 L1244.63 1208.82 L1245.22 1208.82 L1245.81 1208.82 L1246.39 1208.82 L1246.98 1208.82 L1247.57 1208.82 L1248.15 1208.82 L1248.74 1208.82 L1249.32 1208.82 L1249.91 1208.82 L1250.5 1208.82 L1251.08 1208.82 L1251.67 1208.82 L1252.26 1208.82 L1252.84 1208.82 L1253.43 1208.82 L1254.02 1208.82 L1254.6 1208.82 L1255.19 1208.82 L1255.78 1208.82 L1256.36 1208.82 L1256.95 1208.82 L1257.53 1208.82 L1258.12 1208.82 L1258.71 1208.82 L1259.29 1208.82 L1259.88 1208.82 L1260.47 1208.82 L1261.05 1208.82 L1261.64 1208.82 L1262.23 1208.82 L1262.81 1208.82 L1263.4 1208.82 L1263.98 1208.82 L1264.57 1208.82 L1265.16 1208.82 L1265.74 1208.82 L1266.33 1208.82 L1266.92 1208.82 L1267.5 1208.82 L1268.09 1208.82 L1268.68 1208.82 L1269.26 1208.82 L1269.85 1208.82 L1270.44 1208.82 L1271.02 1208.82 L1271.61 1208.82 L1272.19 1208.82 L1272.78 1208.82 L1273.37 1208.82 L1273.95 1208.82 L1274.54 1208.82 L1275.13 1208.82 L1275.71 1208.82 L1276.3 1208.82 L1276.89 1208.82 L1277.47 1208.82 L1278.06 1208.82 L1278.65 1208.82 L1279.23 1208.82 L1279.82 1208.82 L1280.4 1208.82 L1280.99 1208.82 L1281.58 1208.82 L1282.16 1208.82 L1282.75 1208.82 L1283.34 1208.82 L1283.92 1208.82 L1284.51 1208.82 L1285.1 1208.82 L1285.68 1208.82 L1286.27 1208.82 L1286.86 1208.82 L1287.44 1208.82 L1288.03 1208.82 L1288.61 1208.82 L1289.2 1208.82 L1289.79 1208.82 L1290.37 1208.82 L1290.96 1208.82 L1291.55 1208.82 L1292.13 1208.82 L1292.72 1208.82 L1293.31 1208.82 L1293.89 1208.82 L1294.48 1208.82 L1295.06 1208.82 L1295.65 1208.82 L1296.24 1208.82 L1296.82 1208.82 L1297.41 1208.82 L1298 1208.82 L1298.58 1208.82 L1299.17 1208.82 L1299.76 1208.82 L1300.34 1208.82 L1300.93 1208.82 L1301.52 1208.82 L1302.1 1208.82 L1302.69 1208.82 L1303.27 1208.82 L1303.86 1208.82 L1304.45 1208.82 L1305.03 1208.82 L1305.62 1208.82 L1306.21 1208.82 L1306.79 1208.82 L1307.38 1208.82 L1307.97 1208.82 L1308.55 1208.82 L1309.14 1208.82 L1309.73 1208.82 L1310.31 1208.82 L1310.9 1208.82 L1311.48 1208.82 L1312.07 1208.82 L1312.66 1208.82 L1313.24 1208.82 L1313.83 1208.82 L1314.42 1208.82 L1315 1208.82 L1315.59 1208.82 L1316.18 1208.82 L1316.76 1208.82 L1317.35 1208.82 L1317.93 1208.82 L1318.52 1208.82 L1319.11 1208.82 L1319.69 1208.82 L1320.28 1208.82 L1320.87 1208.82 L1321.45 1208.82 L1322.04 1208.82 L1322.63 1208.82 L1323.21 1208.82 L1323.8 1208.82 L1324.39 1208.82 L1324.97 1208.82 L1325.56 1208.82 L1326.14 1208.82 L1326.73 1208.82 L1327.32 1208.82 L1327.9 1208.82 L1328.49 1208.82 L1329.08 1208.82 L1329.66 1208.82 L1330.25 1208.82 L1330.84 1208.82 L1331.42 1208.82 L1332.01 1208.82 L1332.6 1208.82 L1333.18 1208.82 L1333.77 1208.82 L1334.35 1208.82 L1334.94 1208.82 L1335.53 1208.82 L1336.11 1208.82 L1336.7 1208.82 L1337.29 1208.82 L1337.87 1208.82 L1338.46 1208.82 L1339.05 1208.82 L1339.63 1208.82 L1340.22 1208.82 L1340.8 1208.82 L1341.39 1208.82 L1341.98 1208.82 L1342.56 1208.82 L1343.15 1208.82 L1343.74 1208.82 L1344.32 1208.82 L1344.91 1208.82 L1345.5 1208.82 L1346.08 1208.82 L1346.67 1208.82 L1347.26 1208.82 L1347.84 1208.82 L1348.43 1208.82 L1349.01 1208.82 L1349.6 1208.82 L1350.19 1208.82 L1350.77 1208.82 L1351.36 1208.82 L1351.95 1208.82 L1352.53 1208.82 L1353.12 1208.82 L1353.71 1208.82 L1354.29 1208.82 L1354.88 1208.82 L1355.47 1208.82 L1356.05 1208.82 L1356.64 1208.82 L1357.22 1208.82 L1357.81 1208.82 L1358.4 1208.82 L1358.98 1208.82 L1359.57 1208.82 L1360.16 1208.82 L1360.74 1208.82 L1361.33 1208.82 L1361.92 1208.82 L1362.5 1208.82 L1363.09 1208.82 L1363.68 1208.82 L1364.26 1208.82 L1364.85 1208.82 L1365.43 1208.82 L1366.02 1208.82 L1366.61 1208.82 L1367.19 1208.82 L1367.78 1208.82 L1368.37 1208.82 L1368.95 1208.82 L1369.54 1208.82 L1370.13 1208.82 L1370.71 1208.82 L1371.3 1208.82 L1371.88 1208.82 L1372.47 1208.82 L1373.06 1208.82 L1373.64 1208.82 L1374.23 1208.82 L1374.82 1208.82 L1375.4 1208.82 L1375.99 1208.82 L1376.58 1208.82 L1377.16 1208.82 L1377.75 1208.82 L1378.34 1208.82 L1378.92 1208.82 L1379.51 1208.82 L1380.09 1208.82 L1380.68 1208.82 L1381.27 1208.82 L1381.85 1208.82 L1382.44 1208.82 L1383.03 1208.82 L1383.61 1208.82 L1384.2 1208.82 L1384.79 1208.82 L1385.37 1208.82 L1385.96 1208.82 L1386.55 1208.82 L1387.13 1208.82 L1387.72 1208.82 L1388.3 1208.82 L1388.89 1208.82 L1389.48 1208.82 L1390.06 1208.82 L1390.65 1208.82 L1391.24 1208.82 L1391.82 1208.82 L1392.41 1208.82 L1393 1208.82 L1393.58 1208.82 L1394.17 1208.82 L1394.75 1208.82 L1395.34 1208.82 L1395.93 1208.82 L1396.51 1208.82 L1397.1 1208.82 L1397.69 1208.82 L1398.27 1208.82 L1398.86 1208.82 L1399.45 1208.82 L1400.03 1208.82 L1400.62 1208.82 L1401.21 1208.82 L1401.79 1208.82 L1402.38 1208.82 L1402.96 1208.82 L1403.55 1208.82 L1404.14 1208.82 L1404.72 1208.82 L1405.31 1208.82 L1405.9 1208.82 L1406.48 1208.82 L1407.07 1208.82 L1407.66 1208.82 L1408.24 1208.82 L1408.83 1208.82 L1409.42 1208.82 L1410 1208.82 L1410.59 1208.82 L1411.17 1208.82 L1411.76 1208.82 L1412.35 1208.82 L1412.93 1208.82 L1413.52 1208.82 L1414.11 1208.82 L1414.69 1208.82 L1415.28 1208.82 L1415.87 1208.82 L1416.45 1208.82 L1417.04 1208.82 L1417.63 1208.82 L1418.21 1208.82 L1418.8 1208.82 L1419.38 1208.82 L1419.97 1208.82 L1420.56 1208.82 L1421.14 1208.82 L1421.73 1208.82 L1422.32 1208.82 L1422.9 1208.82 L1423.49 1208.82 L1424.08 1208.82 L1424.66 1208.82 L1425.25 1208.82 L1425.83 1208.82 L1426.42 1208.82 L1427.01 1208.82 L1427.59 1208.82 L1428.18 1208.82 L1428.77 1208.82 L1429.35 1208.82 L1429.94 1208.82 L1430.53 1208.82 L1431.11 1208.82 L1431.7 1208.82 L1432.29 1208.82 L1432.87 1208.82 L1433.46 1208.82 L1434.04 1208.82 L1434.63 1208.82 L1435.22 1208.82 L1435.8 1208.82 L1436.39 1208.82 L1436.98 1208.82 L1437.56 1208.82 L1438.15 1208.82 L1438.74 1208.82 L1439.32 1208.82 L1439.91 1208.82 L1440.5 1208.82 L1441.08 1208.82 L1441.67 1208.82 L1442.25 1208.82 L1442.84 1208.82 L1443.43 1208.82 L1444.01 1208.82 L1444.6 1208.82 L1445.19 1208.82 L1445.77 1208.82 L1446.36 1208.82 L1446.95 1208.82 L1447.53 1208.82 L1448.12 1208.82 L1448.7 1208.82 L1449.29 1208.82 L1449.88 1208.82 L1450.46 1208.82 L1451.05 1208.82 L1451.64 1208.82 L1452.22 1208.82 L1452.81 1208.82 L1453.4 1208.82 L1453.98 1208.82 L1454.57 1208.82 L1455.16 1208.82 L1455.74 1208.82 L1456.33 1208.82 L1456.91 1208.82 L1457.5 1208.82 L1458.09 1208.82 L1458.67 1208.82 L1459.26 1208.82 L1459.85 1208.82 L1460.43 1208.82 L1461.02 1208.82 L1461.61 1208.82 L1462.19 1208.82 L1462.78 1208.82 L1463.37 1208.82 L1463.95 1208.82 L1464.54 1208.82 L1465.12 1208.82 L1465.71 1208.82 L1466.3 1208.82 L1466.88 1208.82 L1467.47 1208.82 L1468.06 1208.82 L1468.64 1208.82 L1469.23 1208.82 L1469.82 1208.82 L1470.4 1208.82 L1470.99 1208.82 L1471.57 1208.82 L1472.16 1208.82 L1472.75 1208.82 L1473.33 1208.82 L1473.92 1208.82 L1474.51 1208.82 L1475.09 1208.82 L1475.68 1208.82 L1476.27 1208.82 L1476.85 1208.82 L1477.44 1208.82 L1478.03 1208.82 L1478.61 1208.82 L1479.2 1208.82 L1479.78 1208.82 L1480.37 1208.82 L1480.96 1208.82 L1481.54 1208.82 L1482.13 1208.82 L1482.72 1208.82 L1483.3 1208.82 L1483.89 1208.82 L1484.48 1208.82 L1485.06 1208.82 L1485.65 1208.82 L1486.24 1208.82 L1486.82 1208.82 L1487.41 1208.82 L1487.99 1208.82 L1488.58 1208.82 L1489.17 1208.82 L1489.75 1208.82 L1490.34 1208.82 L1490.93 1208.82 L1491.51 1208.82 L1492.1 1208.82 L1492.69 1208.82 L1493.27 1208.82 L1493.86 1208.82 L1494.45 1208.82 L1495.03 1208.82 L1495.62 1208.82 L1496.2 1208.82 L1496.79 1208.82 L1497.38 1208.82 L1497.96 1208.82 L1498.55 1208.82 L1499.14 1208.82 L1499.72 1208.82 L1500.31 1208.82 L1500.9 1208.82 L1501.48 1208.82 L1502.07 1208.82 L1502.65 1208.82 L1503.24 1208.82 L1503.83 1208.82 L1504.41 1208.82 L1505 1208.82 L1505.59 1208.82 L1506.17 1208.82 L1506.76 1208.82 L1507.35 1208.82 L1507.93 1208.82 L1508.52 1208.82 L1509.11 1208.82 L1509.69 1208.82 L1510.28 1208.82 L1510.86 1208.82 L1511.45 1208.82 L1512.04 1208.82 L1512.62 1208.82 L1513.21 1208.82 L1513.8 1208.82 L1514.38 1208.82 L1514.97 1208.82 L1515.56 1208.82 L1516.14 1208.82 L1516.73 1208.82 L1517.32 1208.82 L1517.9 1208.82 L1518.49 1208.82 L1519.07 1208.82 L1519.66 1208.82 L1520.25 1208.82 L1520.83 1208.82 L1521.42 1208.82 L1522.01 1208.82 L1522.59 1208.82 L1523.18 1208.82 L1523.77 1208.82 L1524.35 1208.82 L1524.94 1208.82 L1525.52 1208.82 L1526.11 1208.82 L1526.7 1208.82 L1527.28 1208.82 L1527.87 1208.82 L1528.46 1208.82 L1529.04 1208.82 L1529.63 1208.82 L1530.22 1208.82 L1530.8 1208.82 L1531.39 1208.82 L1531.98 1208.82 L1532.56 1208.82 L1533.15 1208.82 L1533.73 1208.82 L1534.32 1208.82 L1534.91 1208.82 L1535.49 1208.82 L1536.08 1208.82 L1536.67 1208.82 L1537.25 1208.82 L1537.84 1208.82 L1538.43 1208.82 L1539.01 1208.82 L1539.6 1208.82 L1540.19 1208.82 L1540.77 1208.82 L1541.36 1208.82 L1541.94 1208.82 L1542.53 1208.82 L1543.12 1208.82 L1543.7 1208.82 L1544.29 1208.82 L1544.88 1208.82 L1545.46 1208.82 L1546.05 1208.82 L1546.64 1208.82 L1547.22 1208.82 L1547.81 1208.82 L1548.4 1208.82 L1548.98 1208.82 L1549.57 1208.82 L1550.15 1208.82 L1550.74 1208.82 L1551.33 1208.82 L1551.91 1208.82 L1552.5 1208.82 L1553.09 1208.82 L1553.67 1208.82 L1554.26 1208.82 L1554.85 1208.82 L1555.43 1208.82 L1556.02 1208.82 L1556.6 1208.82 L1557.19 1208.82 L1557.78 1208.82 L1558.36 1208.82 L1558.95 1208.82 L1559.54 1208.82 L1560.12 1208.82 L1560.71 1208.82 L1561.3 1208.82 L1561.88 1208.82 L1562.47 1208.82 L1563.06 1208.82 L1563.64 1208.82 L1564.23 1208.82 L1564.81 1208.82 L1565.4 1208.82 L1565.99 1208.82 L1566.57 1208.82 L1567.16 1208.82 L1567.75 1208.82 L1568.33 1208.82 L1568.92 1208.82 L1569.51 1208.82 L1570.09 1208.82 L1570.68 1208.82 L1571.27 1208.82 L1571.85 1208.82 L1572.44 1208.82 L1573.02 1208.82 L1573.61 1208.82 L1574.2 1208.82 L1574.78 1208.82 L1575.37 1208.82 L1575.96 1208.82 L1576.54 1208.82 L1577.13 1208.82 L1577.72 1208.82 L1578.3 1208.82 L1578.89 1208.82 L1579.47 1208.82 L1580.06 1208.82 L1580.65 1208.82 L1581.23 1208.82 L1581.82 1208.82 L1582.41 1208.82 L1582.99 1208.82 L1583.58 1208.82 L1584.17 1208.82 L1584.75 1208.82 L1585.34 1208.82 L1585.93 1208.82 L1586.51 1208.82 L1587.1 1208.82 L1587.68 1208.82 L1588.27 1208.82 L1588.86 1208.82 L1589.44 1208.82 L1590.03 1208.82 L1590.62 1208.82 L1591.2 1208.82 L1591.79 1208.82 L1592.38 1208.82 L1592.96 1208.82 L1593.55 1208.82 L1594.14 1208.82 L1594.72 1208.82 L1595.31 1208.82 L1595.89 1208.82 L1596.48 1208.82 L1597.07 1208.82 L1597.65 1208.82 L1598.24 1208.82 L1598.83 1208.82 L1599.41 1208.82 L1600 1208.82 L1600.59 1208.82 L1601.17 1208.82 L1601.76 1208.82 L1602.34 1208.82 L1602.93 1208.82 L1603.52 1208.82 L1604.1 1208.82 L1604.69 1208.82 L1605.28 1208.82 L1605.86 1208.82 L1606.45 1208.82 L1607.04 1208.82 L1607.62 1208.82 L1608.21 1208.82 L1608.8 1208.82 L1609.38 1208.82 L1609.97 1208.82 L1610.55 1208.82 L1611.14 1208.82 L1611.73 1208.82 L1612.31 1208.82 L1612.9 1208.82 L1613.49 1208.82 L1614.07 1208.82 L1614.66 1208.82 L1615.25 1208.82 L1615.83 1208.82 L1616.42 1208.82 L1617.01 1208.82 L1617.59 1208.82 L1618.18 1208.82 L1618.76 1208.82 L1619.35 1208.82 L1619.94 1208.82 L1620.52 1208.82 L1621.11 1208.82 L1621.7 1208.82 L1622.28 1208.82 L1622.87 1208.82 L1623.46 1208.82 L1624.04 1208.82 L1624.63 1208.82 L1625.22 1208.82 L1625.8 1208.82 L1626.39 1208.82 L1626.97 1208.82 L1627.56 1208.82 L1628.15 1208.82 L1628.73 1208.82 L1629.32 1208.82 L1629.91 1208.82 L1630.49 1208.82 L1631.08 1208.82 L1631.67 1208.82 L1632.25 1208.82 L1632.84 1208.82 L1633.42 1208.82 L1634.01 1208.82 L1634.6 1208.82 L1635.18 1208.82 L1635.77 1208.82 L1636.36 1208.82 L1636.94 1208.82 L1637.53 1208.82 L1638.12 1208.82 L1638.7 1208.82 L1639.29 1208.82 L1639.88 1208.82 L1640.46 1208.82 L1641.05 1208.82 L1641.63 1208.82 L1642.22 1208.82 L1642.81 1208.82 L1643.39 1208.82 L1643.98 1208.82 L1644.57 1208.82 L1645.15 1208.82 L1645.74 1208.82 L1646.33 1208.82 L1646.91 1208.82 L1647.5 1208.82 L1648.09 1208.82 L1648.67 1208.82 L1649.26 1208.82 L1649.84 1208.82 L1650.43 1208.82 L1651.02 1208.82 L1651.6 1208.82 L1652.19 1208.82 L1652.78 1208.82 L1653.36 1208.82 L1653.95 1208.82 L1654.54 1208.82 L1655.12 1208.82 L1655.71 1208.82 L1656.29 1208.82 L1656.88 1208.82 L1657.47 1208.82 L1658.05 1208.82 L1658.64 1208.82 L1659.23 1208.82 L1659.81 1208.82 L1660.4 1208.82 L1660.99 1208.82 L1661.57 1208.82 L1662.16 1208.82 L1662.75 1208.82 L1663.33 1208.82 L1663.92 1208.82 L1664.5 1208.82 L1665.09 1208.82 L1665.68 1208.82 L1666.26 1208.82 L1666.85 1208.82 L1667.44 1208.82 L1668.02 1208.82 L1668.61 1208.82 L1669.2 1208.82 L1669.78 1208.82 L1670.37 1208.82 L1670.96 1208.82 L1671.54 1208.82 L1672.13 1208.82 L1672.71 1208.82 L1673.3 1208.82 L1673.89 1208.82 L1674.47 1208.82 L1675.06 1208.82 L1675.65 1208.82 L1676.23 1208.82 L1676.82 1208.82 L1677.41 1208.82 L1677.99 1208.82 L1678.58 1208.82 L1679.17 1208.82 L1679.75 1208.82 L1680.34 1208.82 L1680.92 1208.82 L1681.51 1208.82 L1682.1 1208.82 L1682.68 1208.82 L1683.27 1208.82 L1683.86 1208.82 L1684.44 1208.82 L1685.03 1208.82 L1685.62 1208.82 L1686.2 1208.82 L1686.79 1208.82 L1687.37 1208.82 L1687.96 1208.82 L1688.55 1208.82 L1689.13 1208.82 L1689.72 1208.82 L1690.31 1208.82 L1690.89 1208.82 L1691.48 1208.82 L1692.07 1208.82 L1692.65 1208.82 L1693.24 1208.82 L1693.83 1208.82 L1694.41 1208.82 L1695 1208.82 L1695.58 1208.82 L1696.17 1208.82 L1696.76 1208.82 L1697.34 1208.82 L1697.93 1208.82 L1698.52 1208.82 L1699.1 1208.82 L1699.69 1208.82 L1700.28 1208.82 L1700.86 1208.82 L1701.45 1208.82 L1702.04 1208.82 L1702.62 1208.82 L1703.21 1208.82 L1703.79 1208.82 L1704.38 1208.82 L1704.97 1208.82 L1705.55 1208.82 L1706.14 1208.82 L1706.73 1208.82 L1707.31 1208.82 L1707.9 1208.82 L1708.49 1208.82 L1709.07 1208.82 L1709.66 1208.82 L1710.24 1208.82 L1710.83 1208.82 L1711.42 1208.82 L1712 1208.82 L1712.59 1208.82 L1713.18 1208.82 L1713.76 1208.82 L1714.35 1208.82 L1714.94 1208.82 L1715.52 1208.82 L1716.11 1208.82 L1716.7 1208.82 L1717.28 1208.82 L1717.87 1208.82 L1718.45 1208.82 L1719.04 1208.82 L1719.63 1208.82 L1720.21 1208.82 L1720.8 1208.82 L1721.39 1208.82 L1721.97 1208.82 L1722.56 1208.82 L1723.15 1208.82 L1723.73 1208.82 L1724.32 1208.82 L1724.91 1208.82 L1725.49 1208.82 L1726.08 1208.82 L1726.66 1208.82 L1727.25 1208.82 L1727.84 1208.82 L1728.42 1208.82 L1729.01 1208.82 L1729.6 1208.82 L1730.18 1208.82 L1730.77 1208.82 L1731.36 1208.82 L1731.94 1208.82 L1732.53 1208.82 L1733.11 1208.82 L1733.7 1208.82 L1734.29 1208.82 L1734.87 1208.82 L1735.46 1208.82 L1736.05 1208.82 L1736.63 1208.82 L1737.22 1208.82 L1737.81 1208.82 L1738.39 1208.82 L1738.98 1208.82 L1739.57 1208.82 L1740.15 1208.82 L1740.74 1208.82 L1741.32 1208.82 L1741.91 1208.82 L1742.5 1208.82 L1743.08 1208.82 L1743.67 1208.82 L1744.26 1208.82 L1744.84 1208.82 L1745.43 1208.82 L1746.02 1208.82 L1746.6 1208.82 L1747.19 1208.82 L1747.78 1208.82 L1748.36 1208.82 L1748.95 1208.82 L1749.53 1208.82 L1750.12 1208.82 L1750.71 1208.82 L1751.29 1208.82 L1751.88 1208.82 L1752.47 1208.82 L1753.05 1208.82 L1753.64 1208.82 L1754.23 1208.82 L1754.81 1208.82 L1755.4 1208.82 L1755.99 1208.82 L1756.57 1208.82 L1757.16 1208.82 L1757.74 1208.82 L1758.33 1208.82 L1758.92 1208.82 L1759.5 1208.82 L1760.09 1208.82 L1760.68 1208.82 L1761.26 1208.82 L1761.85 1208.82 L1762.44 1208.82 L1763.02 1208.82 L1763.61 1208.82 L1764.19 1208.82 L1764.78 1208.82 L1765.37 1208.82 L1765.95 1208.82 L1766.54 1208.82 L1767.13 1208.82 L1767.71 1208.82 L1768.3 1208.82 L1768.89 1208.82 L1769.47 1208.82 L1770.06 1208.82 L1770.65 1208.82 L1771.23 1208.82 L1771.82 1208.82 L1772.4 1208.82 L1772.99 1208.82 L1773.58 1208.82 L1774.16 1208.82 L1774.75 1208.82 L1775.34 1208.82 L1775.92 1208.82 L1776.51 1208.82 L1777.1 1208.82 L1777.68 1208.82 L1778.27 1208.82 L1778.86 1208.82 L1779.44 1208.82 L1780.03 1208.82 L1780.61 1208.82 L1781.2 1208.82 L1781.79 1208.82 L1782.37 1208.82 L1782.96 1208.82 L1783.55 1208.82 L1784.13 1208.82 L1784.72 1208.82 L1785.31 1208.82 L1785.89 1208.82 L1786.48 1208.82 L1787.06 1208.82 L1787.65 1208.82 L1788.24 1208.82 L1788.82 1208.82 L1789.41 1208.82 L1790 1208.82 L1790.58 1208.82 L1791.17 1208.82 L1791.76 1208.82 L1792.34 1208.82 L1792.93 1208.82 L1793.52 1208.82 L1794.1 1208.82 L1794.69 1208.82 L1795.27 1208.82 L1795.86 1208.82 L1796.45 1208.82 L1797.03 1208.82 L1797.62 1208.82 L1798.21 1208.82 L1798.79 1208.82 L1799.38 1208.82 L1799.97 1208.82 L1800.55 1208.82 L1801.14 1208.82 L1801.73 1208.82 L1802.31 1208.82 L1802.9 1208.82 L1803.48 1208.82 L1804.07 1208.82 L1804.66 1208.82 L1805.24 1208.82 L1805.83 1208.82 L1806.42 1208.82 L1807 1208.82 L1807.59 1208.82 L1808.18 1208.82 L1808.76 1208.82 L1809.35 1208.82 L1809.94 1208.82 L1810.52 1208.82 L1811.11 1208.82 L1811.69 1208.82 L1812.28 1208.82 L1812.87 1208.82 L1813.45 1208.82 L1814.04 1208.82 L1814.63 1208.82 L1815.21 1208.82 L1815.8 1208.82 L1816.39 1208.82 L1816.97 1208.82 L1817.56 1208.82 L1818.14 1208.82 L1818.73 1208.82 L1819.32 1208.82 L1819.9 1208.82 L1820.49 1208.82 L1821.08 1208.82 L1821.66 1208.82 L1822.25 1208.82 L1822.84 1208.82 L1823.42 1208.82 L1824.01 1208.82 L1824.6 1208.82 L1825.18 1208.82 L1825.77 1208.82 L1826.35 1208.82 L1826.94 1208.82 L1827.53 1208.82 L1828.11 1208.82 L1828.7 1208.82 L1829.29 1208.82 L1829.87 1208.82 L1830.46 1208.82 L1831.05 1208.82 L1831.63 1208.82 L1832.22 1208.82 L1832.81 1208.82 L1833.39 1208.82 L1833.98 1208.82 L1834.56 1208.82 L1835.15 1208.82 L1835.74 1208.82 L1836.32 1208.82 L1836.91 1208.82 L1837.5 1208.82 L1838.08 1208.82 L1838.67 1208.82 L1839.26 1208.82 L1839.84 1208.82 L1840.43 1208.82 L1841.01 1208.82 L1841.6 1208.82 L1842.19 1208.82 L1842.77 1208.82 L1843.36 1208.82 L1843.95 1208.82 L1844.53 1208.82 L1845.12 1208.82 L1845.71 1208.82 L1846.29 1208.82 L1846.88 1208.82 L1847.47 1208.82 L1848.05 1208.82 L1848.64 1208.82 L1849.22 1208.82 L1849.81 1208.82 L1850.4 1208.82 L1850.98 1208.82 L1851.57 1208.82 L1852.16 1208.82 L1852.74 1208.82 L1853.33 1208.82 L1853.92 1208.82 L1854.5 1208.82 L1855.09 1208.82 L1855.68 1208.82 L1856.26 1208.82 L1856.85 1208.82 L1857.43 1208.82 L1858.02 1208.82 L1858.61 1208.82 L1859.19 1208.82 L1859.78 1208.82 L1860.37 1208.82 L1860.95 1208.82 L1861.54 1208.82 L1862.13 1208.82 L1862.71 1208.82 L1863.3 1208.82 L1863.88 1208.82 L1864.47 1208.82 L1865.06 1208.82 L1865.64 1208.82 L1866.23 1208.82 L1866.82 1208.82 L1867.4 1208.82 L1867.99 1208.82 L1868.58 1208.82 L1869.16 1208.82 L1869.75 1208.82 L1870.34 1208.82 L1870.92 1208.82 L1871.51 1208.82 L1872.09 1208.82 L1872.68 1208.82 L1873.27 1208.82 L1873.85 1208.82 L1874.44 1208.82 L1875.03 1208.82 L1875.61 1208.82 L1876.2 1208.82 L1876.79 1208.82 L1877.37 1208.82 L1877.96 1208.82 L1878.55 1208.82 L1879.13 1208.82 L1879.72 1208.82 L1880.3 1208.82 L1880.89 1208.82 L1881.48 1208.82 L1882.06 1208.82 L1882.65 1208.82 L1883.24 1208.82 L1883.82 1208.82 L1884.41 1208.82 L1885 1208.82 L1885.58 1208.82 L1886.17 1208.82 L1886.76 1208.82 L1887.34 1208.82 L1887.93 1208.82 L1888.51 1208.82 L1889.1 1208.82 L1889.69 1208.82 L1890.27 1208.82 L1890.86 1208.82 L1891.45 1208.82 L1892.03 1208.82 L1892.62 1208.82 L1893.21 1208.82 L1893.79 1208.82 L1894.38 1208.82 L1894.96 1208.82 L1895.55 1208.82 L1896.14 1208.82 L1896.72 1208.82 L1897.31 1208.82 L1897.9 1208.82 L1898.48 1208.82 L1899.07 1208.82 L1899.66 1208.82 L1900.24 1208.82 L1900.83 1208.82 L1901.42 1208.82 L1902 1208.82 L1902.59 1208.82 L1903.17 1208.82 L1903.76 1208.82 L1904.35 1208.82 L1904.93 1208.82 L1905.52 1208.82 L1906.11 1208.82 L1906.69 1208.82 L1907.28 1208.82 L1907.87 1208.82 L1908.45 1208.82 L1909.04 1208.82 L1909.63 1208.82 L1910.21 1208.82 L1910.8 1208.82 L1911.38 1208.82 L1911.97 1208.82 L1912.56 1208.82 L1913.14 1208.82 L1913.73 1208.82 L1914.32 1208.82 L1914.9 1208.82 L1915.49 1208.82 L1916.08 1208.82 L1916.66 1208.82 L1917.25 1208.82 L1917.83 1208.82 L1918.42 1208.82 L1919.01 1208.82 L1919.59 1208.82 L1920.18 1208.82 L1920.77 1208.82 L1921.35 1208.82 L1921.94 1208.82 L1922.53 1208.82 L1923.11 1208.82 L1923.7 1208.82 L1924.29 1208.82 L1924.87 1208.82 L1925.46 1208.82 L1926.04 1208.82 L1926.63 1208.82 L1927.22 1208.82 L1927.8 1208.82 L1928.39 1208.82 L1928.98 1208.82 L1929.56 1208.82 L1930.15 1208.82 L1930.74 1208.82 L1931.32 1208.82 L1931.91 1208.82 L1932.5 1208.82 L1933.08 1208.82 L1933.67 1208.82 L1934.25 1208.82 L1934.84 1208.82 L1935.43 1208.82 L1936.01 1208.82 L1936.6 1208.82 L1937.19 1208.82 L1937.77 1208.82 L1938.36 1208.82 L1938.95 1208.82 L1939.53 1208.82 L1940.12 1208.82 L1940.71 1208.82 L1941.29 1208.82 L1941.88 1208.82 L1942.46 1208.82 L1943.05 1208.82 L1943.64 1208.82 L1944.22 1208.82 L1944.81 1208.82 L1945.4 1208.82 L1945.98 1208.82 L1946.57 1208.82 L1947.16 1208.82 L1947.74 1208.82 L1948.33 1208.82 L1948.91 1208.82 L1949.5 1208.82 L1950.09 1208.82 L1950.67 1208.82 L1951.26 1208.82 L1951.85 1208.82 L1952.43 1208.82 L1953.02 1208.82 L1953.61 1208.82 L1954.19 1208.82 L1954.78 1208.82 L1955.37 1208.82 L1955.95 1208.82 L1956.54 1208.82 L1957.12 1208.82 L1957.71 1208.82 L1958.3 1208.82 L1958.88 1208.82 L1959.47 1208.82 L1960.06 1208.82 L1960.64 1208.82 L1961.23 1208.82 L1961.82 1208.82 L1962.4 1208.82 L1962.99 1208.82 L1963.58 1208.82 L1964.16 1208.82 L1964.75 1208.82 L1965.33 1208.82 L1965.92 1208.82 L1966.51 1208.82 L1967.09 1208.82 L1967.68 1208.82 L1968.27 1208.82 L1968.85 1208.82 L1969.44 1208.82 L1970.03 1208.82 L1970.61 1208.82 L1971.2 1208.82 L1971.78 1208.82 L1972.37 1208.82 L1972.96 1208.82 L1973.54 1208.82 L1974.13 1208.82 L1974.72 1208.82 L1975.3 1208.82 L1975.89 1208.82 L1976.48 1208.82 L1977.06 1208.82 L1977.65 1208.82 L1978.24 1208.82 L1978.82 1208.82 L1979.41 1208.82 L1979.99 1208.82 L1980.58 1208.82 L1981.17 1208.82 L1981.75 1208.82 L1982.34 1208.82 L1982.93 1208.82 L1983.51 1208.82 L1984.1 1208.82 L1984.69 1208.82 L1985.27 1208.82 L1985.86 1208.82 L1986.45 1208.82 L1987.03 1208.82 L1987.62 1208.82 L1988.2 1208.82 L1988.79 1208.82 L1989.38 1208.82 L1989.96 1208.82 L1990.55 1208.82 L1991.14 1208.82 L1991.72 1208.82 L1992.31 1208.82 L1992.9 1208.82 L1993.48 1208.82 L1994.07 1208.82 L1994.65 1208.82 L1995.24 1208.82 L1995.83 1208.82 L1996.41 1208.82 L1997 1208.82 L1997.59 1208.82 L1998.17 1208.82 L1998.76 1208.82 L1999.35 1208.82 L1999.93 1208.82 L2000.52 1208.82 L2001.11 1208.82 L2001.69 1208.82 L2002.28 1208.82 L2002.86 1208.82 L2003.45 1208.82 L2004.04 1208.82 L2004.62 1208.82 L2005.21 1208.82 L2005.8 1208.82 L2006.38 1208.82 L2006.97 1208.82 L2007.56 1208.82 L2008.14 1208.82 L2008.73 1208.82 L2009.32 1208.82 L2009.9 1208.82 L2010.49 1208.82 L2011.07 1208.82 L2011.66 1208.82 L2012.25 1208.82 L2012.83 1208.82 L2013.42 1208.82 L2014.01 1208.82 L2014.59 1208.82 L2015.18 1208.82 L2015.77 1208.82 L2016.35 1208.82 L2016.94 1208.82 L2017.53 1208.82 L2018.11 1208.82 L2018.7 1208.82 L2019.28 1208.82 L2019.87 1208.82 L2020.46 1208.82 L2021.04 1208.82 L2021.63 1208.82 L2022.22 1208.82 L2022.8 1208.82 L2023.39 1208.82 L2023.98 1208.82 L2024.56 1208.82 L2025.15 1208.82 L2025.73 1208.82 L2026.32 1208.82 L2026.91 1208.82 L2027.49 1208.82 L2028.08 1208.82 L2028.67 1208.82 L2029.25 1208.82 L2029.84 1208.82 L2030.43 1208.82 L2031.01 1208.82 L2031.6 1208.82 L2032.19 1208.82 L2032.77 1208.82 L2033.36 1208.82 L2033.94 1208.82 L2034.53 1208.82 L2035.12 1208.82 L2035.7 1208.82 L2036.29 1208.82 L2036.88 1208.82 L2037.46 1208.82 L2038.05 1208.82 L2038.64 1208.82 L2039.22 1208.82 L2039.81 1208.82 L2040.4 1208.82 L2040.98 1208.82 L2041.57 1208.82 L2042.15 1208.82 L2042.74 1208.82 L2043.33 1208.82 L2043.91 1208.82 L2044.5 1208.82 L2045.09 1208.82 L2045.67 1208.82 L2046.26 1208.82 L2046.85 1208.82 L2047.43 1208.82 L2048.02 1208.82 L2048.6 1208.82 L2049.19 1208.82 L2049.78 1208.82 L2050.36 1208.82 L2050.95 1208.82 L2051.54 1208.82 L2052.12 1208.82 L2052.71 1208.82 L2053.3 1208.82 L2053.88 1208.82 L2054.47 1208.82 L2055.06 1208.82 L2055.64 1208.82 L2056.23 1208.82 L2056.81 1208.82 L2057.4 1208.82 L2057.99 1208.82 L2058.57 1208.82 L2059.16 1208.82 L2059.75 1208.82 L2060.33 1208.82 L2060.92 1208.82 L2061.51 1208.82 L2062.09 1208.82 L2062.68 1208.82 L2063.27 1208.82 L2063.85 1208.82 L2064.44 1208.82 L2065.02 1208.82 L2065.61 1208.82 L2066.2 1208.82 L2066.78 1208.82 L2067.37 1208.82 L2067.96 1208.82 L2068.54 1208.82 L2069.13 1208.82 L2069.72 1208.82 L2070.3 1208.82 L2070.89 1208.82 L2071.48 1208.82 L2072.06 1208.82 L2072.65 1208.82 L2073.23 1208.82 L2073.82 1208.82 L2074.41 1208.82 L2074.99 1208.82 L2075.58 1208.82 L2076.17 1208.82 L2076.75 1208.82 L2077.34 1208.82 L2077.93 1208.82 L2078.51 1208.82 L2079.1 1208.82 L2079.68 1208.82 L2080.27 1208.82 L2080.86 1208.82 L2081.44 1208.82 L2082.03 1208.82 L2082.62 1208.82 L2083.2 1208.82 L2083.79 1208.82 L2084.38 1208.82 L2084.96 1208.82 L2085.55 1208.82 L2086.14 1208.82 L2086.72 1208.82 L2087.31 1208.82 L2087.89 1208.82 L2088.48 1208.82 L2089.07 1208.82 L2089.65 1208.82 L2090.24 1208.82 L2090.83 1208.82 L2091.41 1208.82 L2092 1208.82 L2092.59 1208.82 L2093.17 1208.82 L2093.76 1208.82 L2094.35 1208.82 L2094.93 1208.82 L2095.52 1208.82 L2096.1 1208.82 L2096.69 1208.82 L2097.28 1208.82 L2097.86 1208.82 L2098.45 1208.82 L2099.04 1208.82 L2099.62 1208.82 L2100.21 1208.82 L2100.8 1208.82 L2101.38 1208.82 L2101.97 1208.82 L2102.55 1208.82 L2103.14 1208.82 L2103.73 1208.82 L2104.31 1208.82 L2104.9 1208.82 L2105.49 1208.82 L2106.07 1208.82 L2106.66 1208.82 L2107.25 1208.82 L2107.83 1208.82 L2108.42 1208.82 L2109.01 1208.82 L2109.59 1208.82 L2110.18 1208.82 L2110.76 1208.82 L2111.35 1208.82 L2111.94 1208.82 L2112.52 1208.82 L2113.11 1208.82 L2113.7 1208.82 L2114.28 1208.82 L2114.87 1208.82 L2115.46 1208.82 L2116.04 1208.82 L2116.63 1208.82 L2117.22 1208.82 L2117.8 1208.82 L2118.39 1208.82 L2118.97 1208.82 L2119.56 1208.82 L2120.15 1208.82 L2120.73 1208.82 L2121.32 1208.82 L2121.91 1208.82 L2122.49 1208.82 L2123.08 1208.82 L2123.67 1208.82 L2124.25 1208.82 L2124.84 1208.82 L2125.42 1208.82 L2126.01 1208.82 L2126.6 1208.82 L2127.18 1208.82 L2127.77 1208.82 L2128.36 1208.82 L2128.94 1208.82 L2129.53 1208.82 L2130.12 1208.82 L2130.7 1208.82 L2131.29 1208.82 L2131.88 1208.82 L2132.46 1208.82 L2133.05 1208.82 L2133.63 1208.82 L2134.22 1208.82 L2134.81 1208.82 L2135.39 1208.82 L2135.98 1208.82 L2136.57 1208.82 L2137.15 1208.82 L2137.74 1208.82 L2138.33 1208.82 L2138.91 1208.82 L2139.5 1208.82 L2140.09 1208.82 L2140.67 1208.82 L2141.26 1208.82 L2141.84 1208.82 L2142.43 1208.82 L2143.02 1208.82 L2143.6 1208.82 L2144.19 1208.82 L2144.78 1208.82 L2145.36 1208.82 L2145.95 1208.82 L2146.54 1208.82 L2147.12 1208.82 L2147.71 1208.82 L2148.3 1208.82 L2148.88 1208.82 L2149.47 1208.82 L2150.05 1208.82 L2150.64 1208.82 L2151.23 1208.82 L2151.81 1208.82 L2152.4 1208.82 L2152.99 1208.82 L2153.57 1208.82 L2154.16 1208.82 L2154.75 1208.82 L2155.33 1208.82 L2155.92 1208.82 L2156.5 1208.82 L2157.09 1208.82 L2157.68 1208.82 L2158.26 1208.82 L2158.26 1208.67 L2157.68 1208.67 L2157.09 1208.67 L2156.5 1208.67 L2155.92 1208.67 L2155.33 1208.67 L2154.75 1208.67 L2154.16 1208.67 L2153.57 1208.67 L2152.99 1208.67 L2152.4 1208.67 L2151.81 1208.67 L2151.23 1208.67 L2150.64 1208.67 L2150.05 1208.67 L2149.47 1208.67 L2148.88 1208.67 L2148.3 1208.67 L2147.71 1208.67 L2147.12 1208.67 L2146.54 1208.67 L2145.95 1208.67 L2145.36 1208.67 L2144.78 1208.67 L2144.19 1208.67 L2143.6 1208.67 L2143.02 1208.67 L2142.43 1208.67 L2141.84 1208.67 L2141.26 1208.67 L2140.67 1208.67 L2140.09 1208.67 L2139.5 1208.67 L2138.91 1208.67 L2138.33 1208.67 L2137.74 1208.67 L2137.15 1208.67 L2136.57 1208.67 L2135.98 1208.67 L2135.39 1208.67 L2134.81 1208.67 L2134.22 1208.67 L2133.63 1208.67 L2133.05 1208.67 L2132.46 1208.67 L2131.88 1208.67 L2131.29 1208.67 L2130.7 1208.67 L2130.12 1208.67 L2129.53 1208.67 L2128.94 1208.67 L2128.36 1208.67 L2127.77 1208.67 L2127.18 1208.67 L2126.6 1208.67 L2126.01 1208.67 L2125.42 1208.67 L2124.84 1208.67 L2124.25 1208.67 L2123.67 1208.67 L2123.08 1208.67 L2122.49 1208.67 L2121.91 1208.67 L2121.32 1208.67 L2120.73 1208.67 L2120.15 1208.67 L2119.56 1208.67 L2118.97 1208.67 L2118.39 1208.67 L2117.8 1208.67 L2117.22 1208.67 L2116.63 1208.67 L2116.04 1208.67 L2115.46 1208.67 L2114.87 1208.67 L2114.28 1208.67 L2113.7 1208.67 L2113.11 1208.67 L2112.52 1208.67 L2111.94 1208.67 L2111.35 1208.67 L2110.76 1208.67 L2110.18 1208.67 L2109.59 1208.67 L2109.01 1208.67 L2108.42 1208.67 L2107.83 1208.67 L2107.25 1208.67 L2106.66 1208.67 L2106.07 1208.67 L2105.49 1208.67 L2104.9 1208.67 L2104.31 1208.67 L2103.73 1208.67 L2103.14 1208.67 L2102.55 1208.67 L2101.97 1208.67 L2101.38 1208.67 L2100.8 1208.67 L2100.21 1208.67 L2099.62 1208.67 L2099.04 1208.67 L2098.45 1208.67 L2097.86 1208.67 L2097.28 1208.67 L2096.69 1208.67 L2096.1 1208.67 L2095.52 1208.67 L2094.93 1208.67 L2094.35 1208.67 L2093.76 1208.67 L2093.17 1208.67 L2092.59 1208.67 L2092 1208.67 L2091.41 1208.67 L2090.83 1208.67 L2090.24 1208.67 L2089.65 1208.67 L2089.07 1208.67 L2088.48 1208.67 L2087.89 1208.67 L2087.31 1208.67 L2086.72 1208.67 L2086.14 1208.67 L2085.55 1208.67 L2084.96 1208.67 L2084.38 1208.67 L2083.79 1208.67 L2083.2 1208.67 L2082.62 1208.67 L2082.03 1208.67 L2081.44 1208.67 L2080.86 1208.67 L2080.27 1208.67 L2079.68 1208.67 L2079.1 1208.67 L2078.51 1208.67 L2077.93 1208.67 L2077.34 1208.67 L2076.75 1208.67 L2076.17 1208.67 L2075.58 1208.67 L2074.99 1208.67 L2074.41 1208.67 L2073.82 1208.67 L2073.23 1208.67 L2072.65 1208.67 L2072.06 1208.67 L2071.48 1208.67 L2070.89 1208.67 L2070.3 1208.67 L2069.72 1208.67 L2069.13 1208.67 L2068.54 1208.67 L2067.96 1208.67 L2067.37 1208.67 L2066.78 1208.67 L2066.2 1208.67 L2065.61 1208.67 L2065.02 1208.67 L2064.44 1208.67 L2063.85 1208.67 L2063.27 1208.67 L2062.68 1208.67 L2062.09 1208.67 L2061.51 1208.67 L2060.92 1208.67 L2060.33 1208.67 L2059.75 1208.67 L2059.16 1208.67 L2058.57 1208.67 L2057.99 1208.67 L2057.4 1208.67 L2056.81 1208.67 L2056.23 1208.67 L2055.64 1208.67 L2055.06 1208.67 L2054.47 1208.67 L2053.88 1208.67 L2053.3 1208.67 L2052.71 1208.67 L2052.12 1208.67 L2051.54 1208.67 L2050.95 1208.67 L2050.36 1208.67 L2049.78 1208.67 L2049.19 1208.67 L2048.6 1208.67 L2048.02 1208.67 L2047.43 1208.67 L2046.85 1208.67 L2046.26 1208.67 L2045.67 1208.67 L2045.09 1208.67 L2044.5 1208.67 L2043.91 1208.67 L2043.33 1208.67 L2042.74 1208.67 L2042.15 1208.67 L2041.57 1208.67 L2040.98 1208.67 L2040.4 1208.67 L2039.81 1208.67 L2039.22 1208.67 L2038.64 1208.67 L2038.05 1208.67 L2037.46 1208.67 L2036.88 1208.67 L2036.29 1208.67 L2035.7 1208.67 L2035.12 1208.67 L2034.53 1208.67 L2033.94 1208.67 L2033.36 1208.67 L2032.77 1208.67 L2032.19 1208.67 L2031.6 1208.67 L2031.01 1208.67 L2030.43 1208.67 L2029.84 1208.67 L2029.25 1208.67 L2028.67 1208.67 L2028.08 1208.67 L2027.49 1208.67 L2026.91 1208.67 L2026.32 1208.67 L2025.73 1208.67 L2025.15 1208.67 L2024.56 1208.67 L2023.98 1208.67 L2023.39 1208.67 L2022.8 1208.67 L2022.22 1208.67 L2021.63 1208.67 L2021.04 1208.67 L2020.46 1208.67 L2019.87 1208.67 L2019.28 1208.67 L2018.7 1208.67 L2018.11 1208.67 L2017.53 1208.67 L2016.94 1208.67 L2016.35 1208.67 L2015.77 1208.67 L2015.18 1208.67 L2014.59 1208.67 L2014.01 1208.67 L2013.42 1208.67 L2012.83 1208.67 L2012.25 1208.67 L2011.66 1208.67 L2011.07 1208.67 L2010.49 1208.67 L2009.9 1208.67 L2009.32 1208.67 L2008.73 1208.67 L2008.14 1208.67 L2007.56 1208.67 L2006.97 1208.67 L2006.38 1208.67 L2005.8 1208.67 L2005.21 1208.67 L2004.62 1208.67 L2004.04 1208.67 L2003.45 1208.67 L2002.86 1208.67 L2002.28 1208.67 L2001.69 1208.67 L2001.11 1208.67 L2000.52 1208.67 L1999.93 1208.67 L1999.35 1208.67 L1998.76 1208.67 L1998.17 1208.67 L1997.59 1208.67 L1997 1208.67 L1996.41 1208.67 L1995.83 1208.67 L1995.24 1208.67 L1994.65 1208.67 L1994.07 1208.67 L1993.48 1208.67 L1992.9 1208.67 L1992.31 1208.67 L1991.72 1208.67 L1991.14 1208.67 L1990.55 1208.67 L1989.96 1208.67 L1989.38 1208.67 L1988.79 1208.67 L1988.2 1208.67 L1987.62 1208.67 L1987.03 1208.67 L1986.45 1208.67 L1985.86 1208.67 L1985.27 1208.67 L1984.69 1208.67 L1984.1 1208.67 L1983.51 1208.67 L1982.93 1208.67 L1982.34 1208.67 L1981.75 1208.67 L1981.17 1208.67 L1980.58 1208.67 L1979.99 1208.67 L1979.41 1208.67 L1978.82 1208.67 L1978.24 1208.67 L1977.65 1208.67 L1977.06 1208.67 L1976.48 1208.67 L1975.89 1208.67 L1975.3 1208.67 L1974.72 1208.67 L1974.13 1208.67 L1973.54 1208.67 L1972.96 1208.67 L1972.37 1208.67 L1971.78 1208.67 L1971.2 1208.67 L1970.61 1208.67 L1970.03 1208.67 L1969.44 1208.67 L1968.85 1208.67 L1968.27 1208.67 L1967.68 1208.67 L1967.09 1208.67 L1966.51 1208.67 L1965.92 1208.67 L1965.33 1208.67 L1964.75 1208.67 L1964.16 1208.67 L1963.58 1208.67 L1962.99 1208.67 L1962.4 1208.67 L1961.82 1208.67 L1961.23 1208.67 L1960.64 1208.67 L1960.06 1208.67 L1959.47 1208.67 L1958.88 1208.67 L1958.3 1208.67 L1957.71 1208.67 L1957.12 1208.67 L1956.54 1208.67 L1955.95 1208.67 L1955.37 1208.67 L1954.78 1208.67 L1954.19 1208.67 L1953.61 1208.67 L1953.02 1208.67 L1952.43 1208.67 L1951.85 1208.67 L1951.26 1208.67 L1950.67 1208.67 L1950.09 1208.67 L1949.5 1208.67 L1948.91 1208.67 L1948.33 1208.67 L1947.74 1208.67 L1947.16 1208.67 L1946.57 1208.67 L1945.98 1208.67 L1945.4 1208.67 L1944.81 1208.67 L1944.22 1208.67 L1943.64 1208.67 L1943.05 1208.67 L1942.46 1208.67 L1941.88 1208.67 L1941.29 1208.67 L1940.71 1208.67 L1940.12 1208.67 L1939.53 1208.67 L1938.95 1208.67 L1938.36 1208.67 L1937.77 1208.67 L1937.19 1208.67 L1936.6 1208.67 L1936.01 1208.67 L1935.43 1208.67 L1934.84 1208.67 L1934.25 1208.67 L1933.67 1208.67 L1933.08 1208.67 L1932.5 1208.67 L1931.91 1208.67 L1931.32 1208.67 L1930.74 1208.67 L1930.15 1208.67 L1929.56 1208.67 L1928.98 1208.67 L1928.39 1208.67 L1927.8 1208.67 L1927.22 1208.67 L1926.63 1208.67 L1926.04 1208.67 L1925.46 1208.67 L1924.87 1208.67 L1924.29 1208.67 L1923.7 1208.67 L1923.11 1208.67 L1922.53 1208.67 L1921.94 1208.67 L1921.35 1208.67 L1920.77 1208.67 L1920.18 1208.67 L1919.59 1208.67 L1919.01 1208.67 L1918.42 1208.67 L1917.83 1208.67 L1917.25 1208.67 L1916.66 1208.67 L1916.08 1208.67 L1915.49 1208.67 L1914.9 1208.67 L1914.32 1208.67 L1913.73 1208.67 L1913.14 1208.67 L1912.56 1208.67 L1911.97 1208.67 L1911.38 1208.67 L1910.8 1208.67 L1910.21 1208.67 L1909.63 1208.67 L1909.04 1208.67 L1908.45 1208.67 L1907.87 1208.67 L1907.28 1208.67 L1906.69 1208.67 L1906.11 1208.67 L1905.52 1208.67 L1904.93 1208.67 L1904.35 1208.67 L1903.76 1208.67 L1903.17 1208.67 L1902.59 1208.67 L1902 1208.67 L1901.42 1208.67 L1900.83 1208.67 L1900.24 1208.67 L1899.66 1208.67 L1899.07 1208.67 L1898.48 1208.67 L1897.9 1208.67 L1897.31 1208.67 L1896.72 1208.67 L1896.14 1208.67 L1895.55 1208.67 L1894.96 1208.67 L1894.38 1208.67 L1893.79 1208.67 L1893.21 1208.67 L1892.62 1208.67 L1892.03 1208.67 L1891.45 1208.67 L1890.86 1208.67 L1890.27 1208.67 L1889.69 1208.67 L1889.1 1208.67 L1888.51 1208.67 L1887.93 1208.67 L1887.34 1208.67 L1886.76 1208.67 L1886.17 1208.67 L1885.58 1208.67 L1885 1208.67 L1884.41 1208.67 L1883.82 1208.67 L1883.24 1208.67 L1882.65 1208.67 L1882.06 1208.67 L1881.48 1208.67 L1880.89 1208.67 L1880.3 1208.67 L1879.72 1208.67 L1879.13 1208.67 L1878.55 1208.67 L1877.96 1208.67 L1877.37 1208.67 L1876.79 1208.67 L1876.2 1208.67 L1875.61 1208.67 L1875.03 1208.67 L1874.44 1208.67 L1873.85 1208.67 L1873.27 1208.67 L1872.68 1208.67 L1872.09 1208.67 L1871.51 1208.67 L1870.92 1208.67 L1870.34 1208.67 L1869.75 1208.67 L1869.16 1208.67 L1868.58 1208.67 L1867.99 1208.67 L1867.4 1208.67 L1866.82 1208.67 L1866.23 1208.67 L1865.64 1208.67 L1865.06 1208.67 L1864.47 1208.67 L1863.88 1208.67 L1863.3 1208.67 L1862.71 1208.67 L1862.13 1208.67 L1861.54 1208.67 L1860.95 1208.67 L1860.37 1208.67 L1859.78 1208.67 L1859.19 1208.67 L1858.61 1208.67 L1858.02 1208.67 L1857.43 1208.67 L1856.85 1208.67 L1856.26 1208.67 L1855.68 1208.67 L1855.09 1208.67 L1854.5 1208.67 L1853.92 1208.67 L1853.33 1208.67 L1852.74 1208.67 L1852.16 1208.67 L1851.57 1208.67 L1850.98 1208.67 L1850.4 1208.67 L1849.81 1208.67 L1849.22 1208.67 L1848.64 1208.67 L1848.05 1208.67 L1847.47 1208.67 L1846.88 1208.67 L1846.29 1208.67 L1845.71 1208.67 L1845.12 1208.67 L1844.53 1208.67 L1843.95 1208.67 L1843.36 1208.67 L1842.77 1208.67 L1842.19 1208.67 L1841.6 1208.67 L1841.01 1208.67 L1840.43 1208.67 L1839.84 1208.67 L1839.26 1208.67 L1838.67 1208.67 L1838.08 1208.67 L1837.5 1208.67 L1836.91 1208.67 L1836.32 1208.67 L1835.74 1208.67 L1835.15 1208.67 L1834.56 1208.67 L1833.98 1208.67 L1833.39 1208.67 L1832.81 1208.67 L1832.22 1208.67 L1831.63 1208.67 L1831.05 1208.67 L1830.46 1208.67 L1829.87 1208.67 L1829.29 1208.67 L1828.7 1208.67 L1828.11 1208.67 L1827.53 1208.67 L1826.94 1208.67 L1826.35 1208.67 L1825.77 1208.67 L1825.18 1208.67 L1824.6 1208.67 L1824.01 1208.67 L1823.42 1208.67 L1822.84 1208.67 L1822.25 1208.67 L1821.66 1208.67 L1821.08 1208.67 L1820.49 1208.67 L1819.9 1208.67 L1819.32 1208.67 L1818.73 1208.67 L1818.14 1208.67 L1817.56 1208.67 L1816.97 1208.67 L1816.39 1208.67 L1815.8 1208.67 L1815.21 1208.67 L1814.63 1208.67 L1814.04 1208.67 L1813.45 1208.67 L1812.87 1208.67 L1812.28 1208.67 L1811.69 1208.67 L1811.11 1208.67 L1810.52 1208.67 L1809.94 1208.67 L1809.35 1208.67 L1808.76 1208.67 L1808.18 1208.67 L1807.59 1208.67 L1807 1208.67 L1806.42 1208.67 L1805.83 1208.67 L1805.24 1208.67 L1804.66 1208.67 L1804.07 1208.67 L1803.48 1208.67 L1802.9 1208.67 L1802.31 1208.67 L1801.73 1208.67 L1801.14 1208.67 L1800.55 1208.67 L1799.97 1208.67 L1799.38 1208.67 L1798.79 1208.67 L1798.21 1208.67 L1797.62 1208.67 L1797.03 1208.67 L1796.45 1208.67 L1795.86 1208.67 L1795.27 1208.67 L1794.69 1208.67 L1794.1 1208.67 L1793.52 1208.67 L1792.93 1208.67 L1792.34 1208.67 L1791.76 1208.67 L1791.17 1208.67 L1790.58 1208.67 L1790 1208.67 L1789.41 1208.67 L1788.82 1208.67 L1788.24 1208.67 L1787.65 1208.67 L1787.06 1208.67 L1786.48 1208.67 L1785.89 1208.67 L1785.31 1208.67 L1784.72 1208.67 L1784.13 1208.67 L1783.55 1208.67 L1782.96 1208.67 L1782.37 1208.67 L1781.79 1208.67 L1781.2 1208.67 L1780.61 1208.67 L1780.03 1208.67 L1779.44 1208.67 L1778.86 1208.67 L1778.27 1208.67 L1777.68 1208.67 L1777.1 1208.67 L1776.51 1208.67 L1775.92 1208.67 L1775.34 1208.67 L1774.75 1208.67 L1774.16 1208.67 L1773.58 1208.67 L1772.99 1208.67 L1772.4 1208.67 L1771.82 1208.67 L1771.23 1208.67 L1770.65 1208.67 L1770.06 1208.67 L1769.47 1208.67 L1768.89 1208.67 L1768.3 1208.67 L1767.71 1208.67 L1767.13 1208.67 L1766.54 1208.67 L1765.95 1208.67 L1765.37 1208.67 L1764.78 1208.67 L1764.19 1208.67 L1763.61 1208.67 L1763.02 1208.67 L1762.44 1208.67 L1761.85 1208.67 L1761.26 1208.67 L1760.68 1208.67 L1760.09 1208.67 L1759.5 1208.67 L1758.92 1208.67 L1758.33 1208.67 L1757.74 1208.67 L1757.16 1208.67 L1756.57 1208.67 L1755.99 1208.67 L1755.4 1208.67 L1754.81 1208.67 L1754.23 1208.67 L1753.64 1208.67 L1753.05 1208.67 L1752.47 1208.67 L1751.88 1208.67 L1751.29 1208.67 L1750.71 1208.67 L1750.12 1208.67 L1749.53 1208.67 L1748.95 1208.67 L1748.36 1208.67 L1747.78 1208.67 L1747.19 1208.67 L1746.6 1208.67 L1746.02 1208.67 L1745.43 1208.67 L1744.84 1208.67 L1744.26 1208.67 L1743.67 1208.67 L1743.08 1208.67 L1742.5 1208.67 L1741.91 1208.67 L1741.32 1208.67 L1740.74 1208.67 L1740.15 1208.67 L1739.57 1208.67 L1738.98 1208.67 L1738.39 1208.67 L1737.81 1208.67 L1737.22 1208.67 L1736.63 1208.67 L1736.05 1208.67 L1735.46 1208.67 L1734.87 1208.67 L1734.29 1208.67 L1733.7 1208.67 L1733.11 1208.67 L1732.53 1208.67 L1731.94 1208.67 L1731.36 1208.67 L1730.77 1208.67 L1730.18 1208.67 L1729.6 1208.67 L1729.01 1208.67 L1728.42 1208.67 L1727.84 1208.67 L1727.25 1208.67 L1726.66 1208.67 L1726.08 1208.67 L1725.49 1208.67 L1724.91 1208.67 L1724.32 1208.67 L1723.73 1208.67 L1723.15 1208.67 L1722.56 1208.67 L1721.97 1208.67 L1721.39 1208.67 L1720.8 1208.67 L1720.21 1208.67 L1719.63 1208.67 L1719.04 1208.67 L1718.45 1208.67 L1717.87 1208.67 L1717.28 1208.67 L1716.7 1208.67 L1716.11 1208.67 L1715.52 1208.67 L1714.94 1208.67 L1714.35 1208.67 L1713.76 1208.67 L1713.18 1208.67 L1712.59 1208.67 L1712 1208.67 L1711.42 1208.67 L1710.83 1208.67 L1710.24 1208.67 L1709.66 1208.67 L1709.07 1208.67 L1708.49 1208.67 L1707.9 1208.67 L1707.31 1208.67 L1706.73 1208.67 L1706.14 1208.67 L1705.55 1208.67 L1704.97 1208.67 L1704.38 1208.67 L1703.79 1208.67 L1703.21 1208.67 L1702.62 1208.67 L1702.04 1208.67 L1701.45 1208.67 L1700.86 1208.67 L1700.28 1208.67 L1699.69 1208.67 L1699.1 1208.67 L1698.52 1208.67 L1697.93 1208.67 L1697.34 1208.67 L1696.76 1208.67 L1696.17 1208.67 L1695.58 1208.67 L1695 1208.67 L1694.41 1208.67 L1693.83 1208.67 L1693.24 1208.67 L1692.65 1208.67 L1692.07 1208.67 L1691.48 1208.67 L1690.89 1208.67 L1690.31 1208.67 L1689.72 1208.67 L1689.13 1208.67 L1688.55 1208.67 L1687.96 1208.67 L1687.37 1208.67 L1686.79 1208.67 L1686.2 1208.67 L1685.62 1208.67 L1685.03 1208.67 L1684.44 1208.67 L1683.86 1208.67 L1683.27 1208.67 L1682.68 1208.67 L1682.1 1208.67 L1681.51 1208.67 L1680.92 1208.67 L1680.34 1208.67 L1679.75 1208.67 L1679.17 1208.67 L1678.58 1208.67 L1677.99 1208.67 L1677.41 1208.67 L1676.82 1208.67 L1676.23 1208.67 L1675.65 1208.67 L1675.06 1208.67 L1674.47 1208.67 L1673.89 1208.67 L1673.3 1208.67 L1672.71 1208.67 L1672.13 1208.67 L1671.54 1208.67 L1670.96 1208.67 L1670.37 1208.67 L1669.78 1208.67 L1669.2 1208.67 L1668.61 1208.67 L1668.02 1208.67 L1667.44 1208.67 L1666.85 1208.67 L1666.26 1208.67 L1665.68 1208.67 L1665.09 1208.67 L1664.5 1208.67 L1663.92 1208.67 L1663.33 1208.67 L1662.75 1208.67 L1662.16 1208.67 L1661.57 1208.67 L1660.99 1208.67 L1660.4 1208.67 L1659.81 1208.67 L1659.23 1208.67 L1658.64 1208.67 L1658.05 1208.67 L1657.47 1208.67 L1656.88 1208.67 L1656.29 1208.67 L1655.71 1208.67 L1655.12 1208.67 L1654.54 1208.67 L1653.95 1208.67 L1653.36 1208.67 L1652.78 1208.67 L1652.19 1208.67 L1651.6 1208.67 L1651.02 1208.67 L1650.43 1208.67 L1649.84 1208.67 L1649.26 1208.67 L1648.67 1208.67 L1648.09 1208.67 L1647.5 1208.67 L1646.91 1208.67 L1646.33 1208.67 L1645.74 1208.67 L1645.15 1208.67 L1644.57 1208.67 L1643.98 1208.67 L1643.39 1208.67 L1642.81 1208.67 L1642.22 1208.67 L1641.63 1208.67 L1641.05 1208.67 L1640.46 1208.67 L1639.88 1208.67 L1639.29 1208.67 L1638.7 1208.67 L1638.12 1208.67 L1637.53 1208.67 L1636.94 1208.67 L1636.36 1208.67 L1635.77 1208.67 L1635.18 1208.67 L1634.6 1208.67 L1634.01 1208.67 L1633.42 1208.67 L1632.84 1208.67 L1632.25 1208.67 L1631.67 1208.67 L1631.08 1208.67 L1630.49 1208.67 L1629.91 1208.67 L1629.32 1208.67 L1628.73 1208.67 L1628.15 1208.67 L1627.56 1208.67 L1626.97 1208.67 L1626.39 1208.67 L1625.8 1208.67 L1625.22 1208.67 L1624.63 1208.67 L1624.04 1208.67 L1623.46 1208.67 L1622.87 1208.67 L1622.28 1208.67 L1621.7 1208.67 L1621.11 1208.67 L1620.52 1208.67 L1619.94 1208.67 L1619.35 1208.67 L1618.76 1208.67 L1618.18 1208.67 L1617.59 1208.67 L1617.01 1208.67 L1616.42 1208.67 L1615.83 1208.67 L1615.25 1208.67 L1614.66 1208.67 L1614.07 1208.67 L1613.49 1208.67 L1612.9 1208.67 L1612.31 1208.67 L1611.73 1208.67 L1611.14 1208.67 L1610.55 1208.67 L1609.97 1208.67 L1609.38 1208.67 L1608.8 1208.67 L1608.21 1208.67 L1607.62 1208.67 L1607.04 1208.67 L1606.45 1208.67 L1605.86 1208.67 L1605.28 1208.67 L1604.69 1208.67 L1604.1 1208.67 L1603.52 1208.67 L1602.93 1208.67 L1602.34 1208.67 L1601.76 1208.67 L1601.17 1208.67 L1600.59 1208.67 L1600 1208.67 L1599.41 1208.67 L1598.83 1208.67 L1598.24 1208.67 L1597.65 1208.67 L1597.07 1208.67 L1596.48 1208.67 L1595.89 1208.67 L1595.31 1208.67 L1594.72 1208.67 L1594.14 1208.67 L1593.55 1208.67 L1592.96 1208.67 L1592.38 1208.67 L1591.79 1208.67 L1591.2 1208.67 L1590.62 1208.67 L1590.03 1208.67 L1589.44 1208.67 L1588.86 1208.67 L1588.27 1208.67 L1587.68 1208.67 L1587.1 1208.67 L1586.51 1208.67 L1585.93 1208.67 L1585.34 1208.67 L1584.75 1208.67 L1584.17 1208.67 L1583.58 1208.67 L1582.99 1208.67 L1582.41 1208.67 L1581.82 1208.67 L1581.23 1208.67 L1580.65 1208.67 L1580.06 1208.67 L1579.47 1208.67 L1578.89 1208.67 L1578.3 1208.67 L1577.72 1208.67 L1577.13 1208.67 L1576.54 1208.67 L1575.96 1208.67 L1575.37 1208.67 L1574.78 1208.67 L1574.2 1208.67 L1573.61 1208.67 L1573.02 1208.67 L1572.44 1208.67 L1571.85 1208.67 L1571.27 1208.67 L1570.68 1208.67 L1570.09 1208.67 L1569.51 1208.67 L1568.92 1208.67 L1568.33 1208.67 L1567.75 1208.67 L1567.16 1208.67 L1566.57 1208.67 L1565.99 1208.67 L1565.4 1208.67 L1564.81 1208.67 L1564.23 1208.67 L1563.64 1208.67 L1563.06 1208.67 L1562.47 1208.67 L1561.88 1208.67 L1561.3 1208.67 L1560.71 1208.67 L1560.12 1208.67 L1559.54 1208.67 L1558.95 1208.67 L1558.36 1208.67 L1557.78 1208.67 L1557.19 1208.67 L1556.6 1208.67 L1556.02 1208.67 L1555.43 1208.67 L1554.85 1208.67 L1554.26 1208.67 L1553.67 1208.67 L1553.09 1208.67 L1552.5 1208.67 L1551.91 1208.67 L1551.33 1208.67 L1550.74 1208.67 L1550.15 1208.67 L1549.57 1208.67 L1548.98 1208.67 L1548.4 1208.67 L1547.81 1208.67 L1547.22 1208.67 L1546.64 1208.67 L1546.05 1208.67 L1545.46 1208.67 L1544.88 1208.67 L1544.29 1208.67 L1543.7 1208.67 L1543.12 1208.67 L1542.53 1208.67 L1541.94 1208.67 L1541.36 1208.67 L1540.77 1208.67 L1540.19 1208.67 L1539.6 1208.67 L1539.01 1208.67 L1538.43 1208.67 L1537.84 1208.67 L1537.25 1208.67 L1536.67 1208.67 L1536.08 1208.67 L1535.49 1208.67 L1534.91 1208.67 L1534.32 1208.67 L1533.73 1208.67 L1533.15 1208.67 L1532.56 1208.67 L1531.98 1208.67 L1531.39 1208.67 L1530.8 1208.67 L1530.22 1208.67 L1529.63 1208.67 L1529.04 1208.67 L1528.46 1208.67 L1527.87 1208.67 L1527.28 1208.67 L1526.7 1208.67 L1526.11 1208.67 L1525.52 1208.67 L1524.94 1208.67 L1524.35 1208.67 L1523.77 1208.67 L1523.18 1208.67 L1522.59 1208.67 L1522.01 1208.67 L1521.42 1208.67 L1520.83 1208.67 L1520.25 1208.67 L1519.66 1208.67 L1519.07 1208.67 L1518.49 1208.67 L1517.9 1208.67 L1517.32 1208.67 L1516.73 1208.67 L1516.14 1208.67 L1515.56 1208.67 L1514.97 1208.67 L1514.38 1208.67 L1513.8 1208.67 L1513.21 1208.67 L1512.62 1208.67 L1512.04 1208.67 L1511.45 1208.67 L1510.86 1208.67 L1510.28 1208.67 L1509.69 1208.67 L1509.11 1208.67 L1508.52 1208.67 L1507.93 1208.67 L1507.35 1208.67 L1506.76 1208.67 L1506.17 1208.67 L1505.59 1208.67 L1505 1208.67 L1504.41 1208.67 L1503.83 1208.67 L1503.24 1208.67 L1502.65 1208.67 L1502.07 1208.67 L1501.48 1208.67 L1500.9 1208.67 L1500.31 1208.67 L1499.72 1208.67 L1499.14 1208.67 L1498.55 1208.67 L1497.96 1208.67 L1497.38 1208.67 L1496.79 1208.67 L1496.2 1208.67 L1495.62 1208.67 L1495.03 1208.67 L1494.45 1208.67 L1493.86 1208.67 L1493.27 1208.67 L1492.69 1208.67 L1492.1 1208.67 L1491.51 1208.67 L1490.93 1208.67 L1490.34 1208.67 L1489.75 1208.67 L1489.17 1208.67 L1488.58 1208.67 L1487.99 1208.67 L1487.41 1208.67 L1486.82 1208.67 L1486.24 1208.67 L1485.65 1208.67 L1485.06 1208.67 L1484.48 1208.67 L1483.89 1208.67 L1483.3 1208.67 L1482.72 1208.67 L1482.13 1208.67 L1481.54 1208.67 L1480.96 1208.67 L1480.37 1208.67 L1479.78 1208.67 L1479.2 1208.67 L1478.61 1208.67 L1478.03 1208.67 L1477.44 1208.67 L1476.85 1208.67 L1476.27 1208.67 L1475.68 1208.67 L1475.09 1208.67 L1474.51 1208.67 L1473.92 1208.67 L1473.33 1208.67 L1472.75 1208.67 L1472.16 1208.67 L1471.57 1208.67 L1470.99 1208.67 L1470.4 1208.67 L1469.82 1208.67 L1469.23 1208.67 L1468.64 1208.67 L1468.06 1208.67 L1467.47 1208.67 L1466.88 1208.67 L1466.3 1208.67 L1465.71 1208.67 L1465.12 1208.67 L1464.54 1208.67 L1463.95 1208.67 L1463.37 1208.67 L1462.78 1208.67 L1462.19 1208.67 L1461.61 1208.67 L1461.02 1208.67 L1460.43 1208.67 L1459.85 1208.67 L1459.26 1208.67 L1458.67 1208.67 L1458.09 1208.67 L1457.5 1208.67 L1456.91 1208.67 L1456.33 1208.67 L1455.74 1208.67 L1455.16 1208.67 L1454.57 1208.67 L1453.98 1208.67 L1453.4 1208.67 L1452.81 1208.67 L1452.22 1208.67 L1451.64 1208.67 L1451.05 1208.67 L1450.46 1208.67 L1449.88 1208.67 L1449.29 1208.67 L1448.7 1208.67 L1448.12 1208.67 L1447.53 1208.67 L1446.95 1208.67 L1446.36 1208.67 L1445.77 1208.67 L1445.19 1208.67 L1444.6 1208.67 L1444.01 1208.67 L1443.43 1208.67 L1442.84 1208.67 L1442.25 1208.67 L1441.67 1208.67 L1441.08 1208.67 L1440.5 1208.67 L1439.91 1208.67 L1439.32 1208.67 L1438.74 1208.67 L1438.15 1208.67 L1437.56 1208.67 L1436.98 1208.67 L1436.39 1208.67 L1435.8 1208.67 L1435.22 1208.67 L1434.63 1208.67 L1434.04 1208.67 L1433.46 1208.67 L1432.87 1208.67 L1432.29 1208.67 L1431.7 1208.67 L1431.11 1208.67 L1430.53 1208.67 L1429.94 1208.67 L1429.35 1208.67 L1428.77 1208.67 L1428.18 1208.67 L1427.59 1208.67 L1427.01 1208.67 L1426.42 1208.67 L1425.83 1208.67 L1425.25 1208.67 L1424.66 1208.67 L1424.08 1208.67 L1423.49 1208.67 L1422.9 1208.67 L1422.32 1208.67 L1421.73 1208.67 L1421.14 1208.67 L1420.56 1208.67 L1419.97 1208.67 L1419.38 1208.67 L1418.8 1208.67 L1418.21 1208.67 L1417.63 1208.67 L1417.04 1208.67 L1416.45 1208.67 L1415.87 1208.67 L1415.28 1208.67 L1414.69 1208.67 L1414.11 1208.67 L1413.52 1208.67 L1412.93 1208.67 L1412.35 1208.67 L1411.76 1208.67 L1411.17 1208.67 L1410.59 1208.67 L1410 1208.67 L1409.42 1208.67 L1408.83 1208.67 L1408.24 1208.67 L1407.66 1208.67 L1407.07 1208.67 L1406.48 1208.67 L1405.9 1208.67 L1405.31 1208.67 L1404.72 1208.67 L1404.14 1208.67 L1403.55 1208.67 L1402.96 1208.67 L1402.38 1208.67 L1401.79 1208.67 L1401.21 1208.67 L1400.62 1208.67 L1400.03 1208.67 L1399.45 1208.67 L1398.86 1208.67 L1398.27 1208.67 L1397.69 1208.67 L1397.1 1208.67 L1396.51 1208.67 L1395.93 1208.67 L1395.34 1208.67 L1394.75 1208.67 L1394.17 1208.67 L1393.58 1208.67 L1393 1208.67 L1392.41 1208.67 L1391.82 1208.67 L1391.24 1208.67 L1390.65 1208.67 L1390.06 1208.67 L1389.48 1208.67 L1388.89 1208.67 L1388.3 1208.67 L1387.72 1208.67 L1387.13 1208.67 L1386.55 1208.67 L1385.96 1208.67 L1385.37 1208.67 L1384.79 1208.67 L1384.2 1208.67 L1383.61 1208.67 L1383.03 1208.67 L1382.44 1208.67 L1381.85 1208.67 L1381.27 1208.67 L1380.68 1208.67 L1380.09 1208.67 L1379.51 1208.67 L1378.92 1208.67 L1378.34 1208.67 L1377.75 1208.67 L1377.16 1208.67 L1376.58 1208.67 L1375.99 1208.67 L1375.4 1208.67 L1374.82 1208.67 L1374.23 1208.67 L1373.64 1208.67 L1373.06 1208.67 L1372.47 1208.67 L1371.88 1208.67 L1371.3 1208.67 L1370.71 1208.67 L1370.13 1208.67 L1369.54 1208.67 L1368.95 1208.67 L1368.37 1208.67 L1367.78 1208.67 L1367.19 1208.67 L1366.61 1208.67 L1366.02 1208.67 L1365.43 1208.67 L1364.85 1208.67 L1364.26 1208.67 L1363.68 1208.67 L1363.09 1208.67 L1362.5 1208.67 L1361.92 1208.67 L1361.33 1208.67 L1360.74 1208.67 L1360.16 1208.67 L1359.57 1208.67 L1358.98 1208.67 L1358.4 1208.67 L1357.81 1208.67 L1357.22 1208.67 L1356.64 1208.67 L1356.05 1208.67 L1355.47 1208.67 L1354.88 1208.67 L1354.29 1208.67 L1353.71 1208.67 L1353.12 1208.67 L1352.53 1208.67 L1351.95 1208.67 L1351.36 1208.67 L1350.77 1208.67 L1350.19 1208.67 L1349.6 1208.67 L1349.01 1208.67 L1348.43 1208.67 L1347.84 1208.67 L1347.26 1208.67 L1346.67 1208.67 L1346.08 1208.67 L1345.5 1208.67 L1344.91 1208.67 L1344.32 1208.67 L1343.74 1208.67 L1343.15 1208.67 L1342.56 1208.67 L1341.98 1208.67 L1341.39 1208.67 L1340.8 1208.67 L1340.22 1208.67 L1339.63 1208.67 L1339.05 1208.67 L1338.46 1208.67 L1337.87 1208.67 L1337.29 1208.67 L1336.7 1208.67 L1336.11 1208.67 L1335.53 1208.67 L1334.94 1208.67 L1334.35 1208.67 L1333.77 1208.67 L1333.18 1208.67 L1332.6 1208.67 L1332.01 1208.67 L1331.42 1208.67 L1330.84 1208.67 L1330.25 1208.67 L1329.66 1208.67 L1329.08 1208.67 L1328.49 1208.67 L1327.9 1208.67 L1327.32 1208.67 L1326.73 1208.67 L1326.14 1208.67 L1325.56 1208.67 L1324.97 1208.67 L1324.39 1208.67 L1323.8 1208.67 L1323.21 1208.67 L1322.63 1208.67 L1322.04 1208.67 L1321.45 1208.67 L1320.87 1208.67 L1320.28 1208.67 L1319.69 1208.67 L1319.11 1208.67 L1318.52 1208.67 L1317.93 1208.67 L1317.35 1208.67 L1316.76 1208.67 L1316.18 1208.67 L1315.59 1208.67 L1315 1208.67 L1314.42 1208.67 L1313.83 1208.67 L1313.24 1208.67 L1312.66 1208.67 L1312.07 1208.67 L1311.48 1208.67 L1310.9 1208.67 L1310.31 1208.67 L1309.73 1208.67 L1309.14 1208.67 L1308.55 1208.67 L1307.97 1208.67 L1307.38 1208.67 L1306.79 1208.67 L1306.21 1208.67 L1305.62 1208.67 L1305.03 1208.67 L1304.45 1208.67 L1303.86 1208.67 L1303.27 1208.67 L1302.69 1208.67 L1302.1 1208.67 L1301.52 1208.67 L1300.93 1208.67 L1300.34 1208.67 L1299.76 1208.67 L1299.17 1208.67 L1298.58 1208.67 L1298 1208.67 L1297.41 1208.67 L1296.82 1208.67 L1296.24 1208.67 L1295.65 1208.67 L1295.06 1208.67 L1294.48 1208.67 L1293.89 1208.67 L1293.31 1208.67 L1292.72 1208.67 L1292.13 1208.67 L1291.55 1208.67 L1290.96 1208.67 L1290.37 1208.67 L1289.79 1208.67 L1289.2 1208.67 L1288.61 1208.67 L1288.03 1208.67 L1287.44 1208.67 L1286.86 1208.67 L1286.27 1208.67 L1285.68 1208.67 L1285.1 1208.67 L1284.51 1208.67 L1283.92 1208.67 L1283.34 1208.67 L1282.75 1208.67 L1282.16 1208.67 L1281.58 1208.67 L1280.99 1208.67 L1280.4 1208.67 L1279.82 1208.67 L1279.23 1208.67 L1278.65 1208.67 L1278.06 1208.67 L1277.47 1208.67 L1276.89 1208.67 L1276.3 1208.67 L1275.71 1208.67 L1275.13 1208.67 L1274.54 1208.67 L1273.95 1208.67 L1273.37 1208.67 L1272.78 1208.67 L1272.19 1208.67 L1271.61 1208.67 L1271.02 1208.67 L1270.44 1208.67 L1269.85 1208.67 L1269.26 1208.67 L1268.68 1208.67 L1268.09 1208.67 L1267.5 1208.67 L1266.92 1208.67 L1266.33 1208.67 L1265.74 1208.67 L1265.16 1208.67 L1264.57 1208.67 L1263.98 1208.67 L1263.4 1208.67 L1262.81 1208.67 L1262.23 1208.67 L1261.64 1208.67 L1261.05 1208.67 L1260.47 1208.67 L1259.88 1208.67 L1259.29 1208.67 L1258.71 1208.67 L1258.12 1208.67 L1257.53 1208.67 L1256.95 1208.67 L1256.36 1208.67 L1255.78 1208.67 L1255.19 1208.67 L1254.6 1208.67 L1254.02 1208.67 L1253.43 1208.67 L1252.84 1208.67 L1252.26 1208.67 L1251.67 1208.67 L1251.08 1208.67 L1250.5 1208.67 L1249.91 1208.67 L1249.32 1208.67 L1248.74 1208.67 L1248.15 1208.67 L1247.57 1208.67 L1246.98 1208.67 L1246.39 1208.67 L1245.81 1208.67 L1245.22 1208.67 L1244.63 1208.67 L1244.05 1208.67 L1243.46 1208.67 L1242.87 1208.67 L1242.29 1208.67 L1241.7 1208.67 L1241.11 1208.67 L1240.53 1208.67 L1239.94 1208.67 L1239.36 1208.67 L1238.77 1208.67 L1238.18 1208.67 L1237.6 1208.67 L1237.01 1208.67 L1236.42 1208.67 L1235.84 1208.67 L1235.25 1208.67 L1234.66 1208.67 L1234.08 1208.67 L1233.49 1208.67 L1232.91 1208.67 L1232.32 1208.67 L1231.73 1208.67 L1231.15 1208.67 L1230.56 1208.67 L1229.97 1208.67 L1229.39 1208.67 L1228.8 1208.67 L1228.21 1208.67 L1227.63 1208.67 L1227.04 1208.67 L1226.45 1208.67 L1225.87 1208.67 L1225.28 1208.67 L1224.7 1208.67 L1224.11 1208.67 L1223.52 1208.67 L1222.94 1208.67 L1222.35 1208.67 L1221.76 1208.67 L1221.18 1208.67 L1220.59 1208.67 L1220 1208.67 L1219.42 1208.67 L1218.83 1208.67 L1218.24 1208.67 L1217.66 1208.67 L1217.07 1208.67 L1216.49 1208.67 L1215.9 1208.67 L1215.31 1208.67 L1214.73 1208.67 L1214.14 1208.67 L1213.55 1208.67 L1212.97 1208.67 L1212.38 1208.67 L1211.79 1208.67 L1211.21 1208.67 L1210.62 1208.67 L1210.03 1208.67 L1209.45 1208.67 L1208.86 1208.67 L1208.28 1208.67 L1207.69 1208.67 L1207.1 1208.67 L1206.52 1208.67 L1205.93 1208.67 L1205.34 1208.67 L1204.76 1208.67 L1204.17 1208.67 L1203.58 1208.67 L1203 1208.67 L1202.41 1208.67 L1201.83 1208.67 L1201.24 1208.67 L1200.65 1208.67 L1200.07 1208.67 L1199.48 1208.67 L1198.89 1208.67 L1198.31 1208.67 L1197.72 1208.67 L1197.13 1208.67 L1196.55 1208.67 L1195.96 1208.67 L1195.37 1208.67 L1194.79 1208.67 L1194.2 1208.67 L1193.62 1208.67 L1193.03 1208.67 L1192.44 1208.67 L1191.86 1208.67 L1191.27 1208.67 L1190.68 1208.67 L1190.1 1208.67 L1189.51 1208.67 L1188.92 1208.67 L1188.34 1208.67 L1187.75 1208.67 L1187.16 1208.67 L1186.58 1208.67 L1185.99 1208.67 L1185.41 1208.67 L1184.82 1208.67 L1184.23 1208.67 L1183.65 1208.67 L1183.06 1208.67 L1182.47 1208.67 L1181.89 1208.67 L1181.3 1208.67 L1180.71 1208.67 L1180.13 1208.67 L1179.54 1208.67 L1178.96 1208.67 L1178.37 1208.67 L1177.78 1208.67 L1177.2 1208.67 L1176.61 1208.67 L1176.02 1208.67 L1175.44 1208.67 L1174.85 1208.67 L1174.26 1208.67 L1173.68 1208.67 L1173.09 1208.67 L1172.5 1208.67 L1171.92 1208.67 L1171.33 1208.67 L1170.75 1208.67 L1170.16 1208.67 L1169.57 1208.67 L1168.99 1208.67 L1168.4 1208.67 L1167.81 1208.67 L1167.23 1208.67 L1166.64 1208.67 L1166.05 1208.67 L1165.47 1208.67 L1164.88 1208.67 L1164.29 1208.67 L1163.71 1208.67 L1163.12 1208.67 L1162.54 1208.67 L1161.95 1208.67 L1161.36 1208.67 L1160.78 1208.67 L1160.19 1208.67 L1159.6 1208.67 L1159.02 1208.67 L1158.43 1208.67 L1157.84 1208.67 L1157.26 1208.67 L1156.67 1208.67 L1156.09 1208.67 L1155.5 1208.67 L1154.91 1208.67 L1154.33 1208.67 L1153.74 1208.67 L1153.15 1208.67 L1152.57 1208.67 L1151.98 1208.67 L1151.39 1208.67 L1150.81 1208.67 L1150.22 1208.67 L1149.63 1208.67 L1149.05 1208.67 L1148.46 1208.67 L1147.88 1208.67 L1147.29 1208.67 L1146.7 1208.67 L1146.12 1208.67 L1145.53 1208.67 L1144.94 1208.67 L1144.36 1208.67 L1143.77 1208.67 L1143.18 1208.67 L1142.6 1208.67 L1142.01 1208.67 L1141.42 1208.67 L1140.84 1208.67 L1140.25 1208.67 L1139.67 1208.67 L1139.08 1208.67 L1138.49 1208.67 L1137.91 1208.67 L1137.32 1208.67 L1136.73 1208.67 L1136.15 1208.67 L1135.56 1208.67 L1134.97 1208.67 L1134.39 1208.67 L1133.8 1208.67 L1133.21 1208.67 L1132.63 1208.67 L1132.04 1208.67 L1131.46 1208.67 L1130.87 1208.67 L1130.28 1208.67 L1129.7 1208.67 L1129.11 1208.67 L1128.52 1208.67 L1127.94 1208.67 L1127.35 1208.67 L1126.76 1208.67 L1126.18 1208.67 L1125.59 1208.67 L1125.01 1208.67 L1124.42 1208.67 L1123.83 1208.67 L1123.25 1208.67 L1122.66 1208.67 L1122.07 1208.67 L1121.49 1208.67 L1120.9 1208.67 L1120.31 1208.67 L1119.73 1208.67 L1119.14 1208.67 L1118.55 1208.67 L1117.97 1208.67 L1117.38 1208.67 L1116.8 1208.67 L1116.21 1208.67 L1115.62 1208.67 L1115.04 1208.67 L1114.45 1208.67 L1113.86 1208.67 L1113.28 1208.67 L1112.69 1208.67 L1112.1 1208.67 L1111.52 1208.67 L1110.93 1208.67 L1110.34 1208.67 L1109.76 1208.67 L1109.17 1208.67 L1108.59 1208.67 L1108 1208.67 L1107.41 1208.67 L1106.83 1208.67 L1106.24 1208.67 L1105.65 1208.67 L1105.07 1208.67 L1104.48 1208.67 L1103.89 1208.67 L1103.31 1208.67 L1102.72 1208.67 L1102.14 1208.67 L1101.55 1208.67 L1100.96 1208.67 L1100.38 1208.67 L1099.79 1208.67 L1099.2 1208.67 L1098.62 1208.67 L1098.03 1208.67 L1097.44 1208.67 L1096.86 1208.67 L1096.27 1208.67 L1095.68 1208.67 L1095.1 1208.67 L1094.51 1208.67 L1093.93 1208.67 L1093.34 1208.67 L1092.75 1208.67 L1092.17 1208.67 L1091.58 1208.67 L1090.99 1208.67 L1090.41 1208.67 L1089.82 1208.67 L1089.23 1208.67 L1088.65 1208.67 L1088.06 1208.67 L1087.47 1208.67 L1086.89 1208.67 L1086.3 1208.67 L1085.72 1208.67 L1085.13 1208.67 L1084.54 1208.67 L1083.96 1208.67 L1083.37 1208.67 L1082.78 1208.67 L1082.2 1208.67 L1081.61 1208.67 L1081.02 1208.67 L1080.44 1208.67 L1079.85 1208.67 L1079.26 1208.67 L1078.68 1208.67 L1078.09 1208.67 L1077.51 1208.67 L1076.92 1208.67 L1076.33 1208.67 L1075.75 1208.67 L1075.16 1208.67 L1074.57 1208.67 L1073.99 1208.67 L1073.4 1208.67 L1072.81 1208.67 L1072.23 1208.67 L1071.64 1208.67 L1071.06 1208.67 L1070.47 1208.67 L1069.88 1208.67 L1069.3 1208.67 L1068.71 1208.67 L1068.12 1208.67 L1067.54 1208.67 L1066.95 1208.67 L1066.36 1208.67 L1065.78 1208.67 L1065.19 1208.67 L1064.6 1208.67 L1064.02 1208.67 L1063.43 1208.67 L1062.85 1208.67 L1062.26 1208.67 L1061.67 1208.67 L1061.09 1208.67 L1060.5 1208.67 L1059.91 1208.67 L1059.33 1208.67 L1058.74 1208.67 L1058.15 1208.67 L1057.57 1208.67 L1056.98 1208.67 L1056.39 1208.67 L1055.81 1208.67 L1055.22 1208.67 L1054.64 1208.67 L1054.05 1208.67 L1053.46 1208.67 L1052.88 1208.67 L1052.29 1208.67 L1051.7 1208.67 L1051.12 1208.67 L1050.53 1208.67 L1049.94 1208.67 L1049.36 1208.67 L1048.77 1208.67 L1048.19 1208.67 L1047.6 1208.67 L1047.01 1208.67 L1046.43 1208.67 L1045.84 1208.67 L1045.25 1208.67 L1044.67 1208.67 L1044.08 1208.67 L1043.49 1208.67 L1042.91 1208.67 L1042.32 1208.67 L1041.73 1208.67 L1041.15 1208.67 L1040.56 1208.67 L1039.98 1208.67 L1039.39 1208.67 L1038.8 1208.67 L1038.22 1208.67 L1037.63 1208.67 L1037.04 1208.67 L1036.46 1208.67 L1035.87 1208.67 L1035.28 1208.67 L1034.7 1208.67 L1034.11 1208.67 L1033.52 1208.67 L1032.94 1208.67 L1032.35 1208.67 L1031.77 1208.67 L1031.18 1208.67 L1030.59 1208.67 L1030.01 1208.67 L1029.42 1208.67 L1028.83 1208.67 L1028.25 1208.67 L1027.66 1208.67 L1027.07 1208.67 L1026.49 1208.67 L1025.9 1208.67 L1025.32 1208.67 L1024.73 1208.67 L1024.14 1208.67 L1023.56 1208.67 L1022.97 1208.67 L1022.38 1208.67 L1021.8 1208.67 L1021.21 1208.67 L1020.62 1208.67 L1020.04 1208.67 L1019.45 1208.67 L1018.86 1208.67 L1018.28 1208.67 L1017.69 1208.67 L1017.11 1208.67 L1016.52 1208.67 L1015.93 1208.67 L1015.35 1208.67 L1014.76 1208.67 L1014.17 1208.67 L1013.59 1208.67 L1013 1208.67 L1012.41 1208.67 L1011.83 1208.67 L1011.24 1208.67 L1010.65 1208.67 L1010.07 1208.67 L1009.48 1208.67 L1008.9 1208.67 L1008.31 1208.67 L1007.72 1208.67 L1007.14 1208.67 L1006.55 1208.67 L1005.96 1208.67 L1005.38 1208.67 L1004.79 1208.67 L1004.2 1208.67 L1003.62 1208.67 L1003.03 1208.67 L1002.44 1208.67 L1001.86 1208.67 L1001.27 1208.67 L1000.69 1208.67 L1000.1 1208.67 L999.513 1208.67 L998.926 1208.67 L998.34 1208.67 L997.754 1208.67 L997.167 1208.67 L996.581 1208.67 L995.994 1208.67 L995.408 1208.67 L994.822 1208.67 L994.235 1208.67 L993.649 1208.67 L993.062 1208.67 L992.476 1208.67 L991.889 1208.67 L991.303 1208.67 L990.717 1208.67 L990.13 1208.67 L989.544 1208.67 L988.957 1208.67 L988.371 1208.67 L987.785 1208.67 L987.198 1208.67 L986.612 1208.67 L986.025 1208.67  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1208.74 986.612,1208.74 987.198,1208.74 987.785,1208.74 988.371,1208.74 988.957,1208.74 989.544,1208.74 990.13,1208.74 990.717,1208.74 991.303,1208.74 991.889,1208.74 992.476,1208.74 993.062,1208.74 993.649,1208.74 994.235,1208.74 994.822,1208.74 995.408,1208.74 995.994,1208.74 996.581,1208.74 997.167,1208.74 997.754,1208.74 998.34,1208.74 998.926,1208.74 999.513,1208.74 1000.1,1208.74 1000.69,1208.74 1001.27,1208.74 1001.86,1208.74 1002.44,1208.74 1003.03,1208.74 1003.62,1208.74 1004.2,1208.74 1004.79,1208.74 1005.38,1208.74 1005.96,1208.74 1006.55,1208.74 1007.14,1208.74 1007.72,1208.74 1008.31,1208.74 1008.9,1208.74 1009.48,1208.74 1010.07,1208.74 1010.65,1208.74 1011.24,1208.74 1011.83,1208.74 1012.41,1208.74 1013,1208.74 1013.59,1208.74 1014.17,1208.74 1014.76,1208.74 1015.35,1208.74 1015.93,1208.74 1016.52,1208.74 1017.11,1208.74 1017.69,1208.74 1018.28,1208.74 1018.86,1208.74 1019.45,1208.74 1020.04,1208.74 1020.62,1208.74 1021.21,1208.74 1021.8,1208.74 1022.38,1208.74 1022.97,1208.74 1023.56,1208.74 1024.14,1208.74 1024.73,1208.74 1025.32,1208.74 1025.9,1208.74 1026.49,1208.74 1027.07,1208.74 1027.66,1208.74 1028.25,1208.74 1028.83,1208.74 1029.42,1208.74 1030.01,1208.74 1030.59,1208.74 1031.18,1208.74 1031.77,1208.74 1032.35,1208.74 1032.94,1208.74 1033.52,1208.74 1034.11,1208.74 1034.7,1208.74 1035.28,1208.74 1035.87,1208.74 1036.46,1208.74 1037.04,1208.74 1037.63,1208.74 1038.22,1208.74 1038.8,1208.74 1039.39,1208.74 1039.98,1208.74 1040.56,1208.74 1041.15,1208.74 1041.73,1208.74 1042.32,1208.74 1042.91,1208.74 1043.49,1208.74 1044.08,1208.74 1044.67,1208.74 1045.25,1208.74 1045.84,1208.74 1046.43,1208.74 1047.01,1208.74 1047.6,1208.74 1048.19,1208.74 1048.77,1208.74 1049.36,1208.74 1049.94,1208.74 1050.53,1208.74 1051.12,1208.74 1051.7,1208.74 1052.29,1208.74 1052.88,1208.74 1053.46,1208.74 1054.05,1208.74 1054.64,1208.74 1055.22,1208.74 1055.81,1208.74 1056.39,1208.74 1056.98,1208.74 1057.57,1208.74 1058.15,1208.74 1058.74,1208.74 1059.33,1208.74 1059.91,1208.74 1060.5,1208.74 1061.09,1208.74 1061.67,1208.74 1062.26,1208.74 1062.85,1208.74 1063.43,1208.74 1064.02,1208.74 1064.6,1208.74 1065.19,1208.74 1065.78,1208.74 1066.36,1208.74 1066.95,1208.74 1067.54,1208.74 1068.12,1208.74 1068.71,1208.74 1069.3,1208.74 1069.88,1208.74 1070.47,1208.74 1071.06,1208.74 1071.64,1208.74 1072.23,1208.74 1072.81,1208.74 1073.4,1208.74 1073.99,1208.74 1074.57,1208.74 1075.16,1208.74 1075.75,1208.74 1076.33,1208.74 1076.92,1208.74 1077.51,1208.74 1078.09,1208.74 1078.68,1208.74 1079.26,1208.74 1079.85,1208.74 1080.44,1208.74 1081.02,1208.74 1081.61,1208.74 1082.2,1208.74 1082.78,1208.74 1083.37,1208.74 1083.96,1208.74 1084.54,1208.74 1085.13,1208.74 1085.72,1208.74 1086.3,1208.74 1086.89,1208.74 1087.47,1208.74 1088.06,1208.74 1088.65,1208.74 1089.23,1208.74 1089.82,1208.74 1090.41,1208.74 1090.99,1208.74 1091.58,1208.74 1092.17,1208.74 1092.75,1208.74 1093.34,1208.74 1093.93,1208.74 1094.51,1208.74 1095.1,1208.74 1095.68,1208.74 1096.27,1208.74 1096.86,1208.74 1097.44,1208.74 1098.03,1208.74 1098.62,1208.74 1099.2,1208.74 1099.79,1208.74 1100.38,1208.74 1100.96,1208.74 1101.55,1208.74 1102.14,1208.74 1102.72,1208.74 1103.31,1208.74 1103.89,1208.74 1104.48,1208.74 1105.07,1208.74 1105.65,1208.74 1106.24,1208.74 1106.83,1208.74 1107.41,1208.74 1108,1208.74 1108.59,1208.74 1109.17,1208.74 1109.76,1208.74 1110.34,1208.74 1110.93,1208.74 1111.52,1208.74 1112.1,1208.74 1112.69,1208.74 1113.28,1208.74 1113.86,1208.74 1114.45,1208.74 1115.04,1208.74 1115.62,1208.74 1116.21,1208.74 1116.8,1208.74 1117.38,1208.74 1117.97,1208.74 1118.55,1208.74 1119.14,1208.74 1119.73,1208.74 1120.31,1208.74 1120.9,1208.74 1121.49,1208.74 1122.07,1208.74 1122.66,1208.74 1123.25,1208.74 1123.83,1208.74 1124.42,1208.74 1125.01,1208.74 1125.59,1208.74 1126.18,1208.74 1126.76,1208.74 1127.35,1208.74 1127.94,1208.74 1128.52,1208.74 1129.11,1208.74 1129.7,1208.74 1130.28,1208.74 1130.87,1208.74 1131.46,1208.74 1132.04,1208.74 1132.63,1208.74 1133.21,1208.74 1133.8,1208.74 1134.39,1208.74 1134.97,1208.74 1135.56,1208.74 1136.15,1208.74 1136.73,1208.74 1137.32,1208.74 1137.91,1208.74 1138.49,1208.74 1139.08,1208.74 1139.67,1208.74 1140.25,1208.74 1140.84,1208.74 1141.42,1208.74 1142.01,1208.74 1142.6,1208.74 1143.18,1208.74 1143.77,1208.74 1144.36,1208.74 1144.94,1208.74 1145.53,1208.74 1146.12,1208.74 1146.7,1208.74 1147.29,1208.74 1147.88,1208.74 1148.46,1208.74 1149.05,1208.74 1149.63,1208.74 1150.22,1208.74 1150.81,1208.74 1151.39,1208.74 1151.98,1208.74 1152.57,1208.74 1153.15,1208.74 1153.74,1208.74 1154.33,1208.74 1154.91,1208.74 1155.5,1208.74 1156.09,1208.74 1156.67,1208.74 1157.26,1208.74 1157.84,1208.74 1158.43,1208.74 1159.02,1208.74 1159.6,1208.74 1160.19,1208.74 1160.78,1208.74 1161.36,1208.74 1161.95,1208.74 1162.54,1208.74 1163.12,1208.74 1163.71,1208.74 1164.29,1208.74 1164.88,1208.74 1165.47,1208.74 1166.05,1208.74 1166.64,1208.74 1167.23,1208.74 1167.81,1208.74 1168.4,1208.74 1168.99,1208.74 1169.57,1208.74 1170.16,1208.74 1170.75,1208.74 1171.33,1208.74 1171.92,1208.74 1172.5,1208.74 1173.09,1208.74 1173.68,1208.74 1174.26,1208.74 1174.85,1208.74 1175.44,1208.74 1176.02,1208.74 1176.61,1208.74 1177.2,1208.74 1177.78,1208.74 1178.37,1208.74 1178.96,1208.74 1179.54,1208.74 1180.13,1208.74 1180.71,1208.74 1181.3,1208.74 1181.89,1208.74 1182.47,1208.74 1183.06,1208.74 1183.65,1208.74 1184.23,1208.74 1184.82,1208.74 1185.41,1208.74 1185.99,1208.74 1186.58,1208.74 1187.16,1208.74 1187.75,1208.74 1188.34,1208.74 1188.92,1208.74 1189.51,1208.74 1190.1,1208.74 1190.68,1208.74 1191.27,1208.74 1191.86,1208.74 1192.44,1208.74 1193.03,1208.74 1193.62,1208.74 1194.2,1208.74 1194.79,1208.74 1195.37,1208.74 1195.96,1208.74 1196.55,1208.74 1197.13,1208.74 1197.72,1208.74 1198.31,1208.74 1198.89,1208.74 1199.48,1208.74 1200.07,1208.74 1200.65,1208.74 1201.24,1208.74 1201.83,1208.74 1202.41,1208.74 1203,1208.74 1203.58,1208.74 1204.17,1208.74 1204.76,1208.74 1205.34,1208.74 1205.93,1208.74 1206.52,1208.74 1207.1,1208.74 1207.69,1208.74 1208.28,1208.74 1208.86,1208.74 1209.45,1208.74 1210.03,1208.74 1210.62,1208.74 1211.21,1208.74 1211.79,1208.74 1212.38,1208.74 1212.97,1208.74 1213.55,1208.74 1214.14,1208.74 1214.73,1208.74 1215.31,1208.74 1215.9,1208.74 1216.49,1208.74 1217.07,1208.74 1217.66,1208.74 1218.24,1208.74 1218.83,1208.74 1219.42,1208.74 1220,1208.74 1220.59,1208.74 1221.18,1208.74 1221.76,1208.74 1222.35,1208.74 1222.94,1208.74 1223.52,1208.74 1224.11,1208.74 1224.7,1208.74 1225.28,1208.74 1225.87,1208.74 1226.45,1208.74 1227.04,1208.74 1227.63,1208.74 1228.21,1208.74 1228.8,1208.74 1229.39,1208.74 1229.97,1208.74 1230.56,1208.74 1231.15,1208.74 1231.73,1208.74 1232.32,1208.74 1232.91,1208.74 1233.49,1208.74 1234.08,1208.74 1234.66,1208.74 1235.25,1208.74 1235.84,1208.74 1236.42,1208.74 1237.01,1208.74 1237.6,1208.74 1238.18,1208.74 1238.77,1208.74 1239.36,1208.74 1239.94,1208.74 1240.53,1208.74 1241.11,1208.74 1241.7,1208.74 1242.29,1208.74 1242.87,1208.74 1243.46,1208.74 1244.05,1208.74 1244.63,1208.74 1245.22,1208.74 1245.81,1208.74 1246.39,1208.74 1246.98,1208.74 1247.57,1208.74 1248.15,1208.74 1248.74,1208.74 1249.32,1208.74 1249.91,1208.74 1250.5,1208.74 1251.08,1208.74 1251.67,1208.74 1252.26,1208.74 1252.84,1208.74 1253.43,1208.74 1254.02,1208.74 1254.6,1208.74 1255.19,1208.74 1255.78,1208.74 1256.36,1208.74 1256.95,1208.74 1257.53,1208.74 1258.12,1208.74 1258.71,1208.74 1259.29,1208.74 1259.88,1208.74 1260.47,1208.74 1261.05,1208.74 1261.64,1208.74 1262.23,1208.74 1262.81,1208.74 1263.4,1208.74 1263.98,1208.74 1264.57,1208.74 1265.16,1208.74 1265.74,1208.74 1266.33,1208.74 1266.92,1208.74 1267.5,1208.74 1268.09,1208.74 1268.68,1208.74 1269.26,1208.74 1269.85,1208.74 1270.44,1208.74 1271.02,1208.74 1271.61,1208.74 1272.19,1208.74 1272.78,1208.74 1273.37,1208.74 1273.95,1208.74 1274.54,1208.74 1275.13,1208.74 1275.71,1208.74 1276.3,1208.74 1276.89,1208.74 1277.47,1208.74 1278.06,1208.74 1278.65,1208.74 1279.23,1208.74 1279.82,1208.74 1280.4,1208.74 1280.99,1208.74 1281.58,1208.74 1282.16,1208.74 1282.75,1208.74 1283.34,1208.74 1283.92,1208.74 1284.51,1208.74 1285.1,1208.74 1285.68,1208.74 1286.27,1208.74 1286.86,1208.74 1287.44,1208.74 1288.03,1208.74 1288.61,1208.74 1289.2,1208.74 1289.79,1208.74 1290.37,1208.74 1290.96,1208.74 1291.55,1208.74 1292.13,1208.74 1292.72,1208.74 1293.31,1208.74 1293.89,1208.74 1294.48,1208.74 1295.06,1208.74 1295.65,1208.74 1296.24,1208.74 1296.82,1208.74 1297.41,1208.74 1298,1208.74 1298.58,1208.74 1299.17,1208.74 1299.76,1208.74 1300.34,1208.74 1300.93,1208.74 1301.52,1208.74 1302.1,1208.74 1302.69,1208.74 1303.27,1208.74 1303.86,1208.74 1304.45,1208.74 1305.03,1208.74 1305.62,1208.74 1306.21,1208.74 1306.79,1208.74 1307.38,1208.74 1307.97,1208.74 1308.55,1208.74 1309.14,1208.74 1309.73,1208.74 1310.31,1208.74 1310.9,1208.74 1311.48,1208.74 1312.07,1208.74 1312.66,1208.74 1313.24,1208.74 1313.83,1208.74 1314.42,1208.74 1315,1208.74 1315.59,1208.74 1316.18,1208.74 1316.76,1208.74 1317.35,1208.74 1317.93,1208.74 1318.52,1208.74 1319.11,1208.74 1319.69,1208.74 1320.28,1208.74 1320.87,1208.74 1321.45,1208.74 1322.04,1208.74 1322.63,1208.74 1323.21,1208.74 1323.8,1208.74 1324.39,1208.74 1324.97,1208.74 1325.56,1208.74 1326.14,1208.74 1326.73,1208.74 1327.32,1208.74 1327.9,1208.74 1328.49,1208.74 1329.08,1208.74 1329.66,1208.74 1330.25,1208.74 1330.84,1208.74 1331.42,1208.74 1332.01,1208.74 1332.6,1208.74 1333.18,1208.74 1333.77,1208.74 1334.35,1208.74 1334.94,1208.74 1335.53,1208.74 1336.11,1208.74 1336.7,1208.74 1337.29,1208.74 1337.87,1208.74 1338.46,1208.74 1339.05,1208.74 1339.63,1208.74 1340.22,1208.74 1340.8,1208.74 1341.39,1208.74 1341.98,1208.74 1342.56,1208.74 1343.15,1208.74 1343.74,1208.74 1344.32,1208.74 1344.91,1208.74 1345.5,1208.74 1346.08,1208.74 1346.67,1208.74 1347.26,1208.74 1347.84,1208.74 1348.43,1208.74 1349.01,1208.74 1349.6,1208.74 1350.19,1208.74 1350.77,1208.74 1351.36,1208.74 1351.95,1208.74 1352.53,1208.74 1353.12,1208.74 1353.71,1208.74 1354.29,1208.74 1354.88,1208.74 1355.47,1208.74 1356.05,1208.74 1356.64,1208.74 1357.22,1208.74 1357.81,1208.74 1358.4,1208.74 1358.98,1208.74 1359.57,1208.74 1360.16,1208.74 1360.74,1208.74 1361.33,1208.74 1361.92,1208.74 1362.5,1208.74 1363.09,1208.74 1363.68,1208.74 1364.26,1208.74 1364.85,1208.74 1365.43,1208.74 1366.02,1208.74 1366.61,1208.74 1367.19,1208.74 1367.78,1208.74 1368.37,1208.74 1368.95,1208.74 1369.54,1208.74 1370.13,1208.74 1370.71,1208.74 1371.3,1208.74 1371.88,1208.74 1372.47,1208.74 1373.06,1208.74 1373.64,1208.74 1374.23,1208.74 1374.82,1208.74 1375.4,1208.74 1375.99,1208.74 1376.58,1208.74 1377.16,1208.74 1377.75,1208.74 1378.34,1208.74 1378.92,1208.74 1379.51,1208.74 1380.09,1208.74 1380.68,1208.74 1381.27,1208.74 1381.85,1208.74 1382.44,1208.74 1383.03,1208.74 1383.61,1208.74 1384.2,1208.74 1384.79,1208.74 1385.37,1208.74 1385.96,1208.74 1386.55,1208.74 1387.13,1208.74 1387.72,1208.74 1388.3,1208.74 1388.89,1208.74 1389.48,1208.74 1390.06,1208.74 1390.65,1208.74 1391.24,1208.74 1391.82,1208.74 1392.41,1208.74 1393,1208.74 1393.58,1208.74 1394.17,1208.74 1394.75,1208.74 1395.34,1208.74 1395.93,1208.74 1396.51,1208.74 1397.1,1208.74 1397.69,1208.74 1398.27,1208.74 1398.86,1208.74 1399.45,1208.74 1400.03,1208.74 1400.62,1208.74 1401.21,1208.74 1401.79,1208.74 1402.38,1208.74 1402.96,1208.74 1403.55,1208.74 1404.14,1208.74 1404.72,1208.74 1405.31,1208.74 1405.9,1208.74 1406.48,1208.74 1407.07,1208.74 1407.66,1208.74 1408.24,1208.74 1408.83,1208.74 1409.42,1208.74 1410,1208.74 1410.59,1208.74 1411.17,1208.74 1411.76,1208.74 1412.35,1208.74 1412.93,1208.74 1413.52,1208.74 1414.11,1208.74 1414.69,1208.74 1415.28,1208.74 1415.87,1208.74 1416.45,1208.74 1417.04,1208.74 1417.63,1208.74 1418.21,1208.74 1418.8,1208.74 1419.38,1208.74 1419.97,1208.74 1420.56,1208.74 1421.14,1208.74 1421.73,1208.74 1422.32,1208.74 1422.9,1208.74 1423.49,1208.74 1424.08,1208.74 1424.66,1208.74 1425.25,1208.74 1425.83,1208.74 1426.42,1208.74 1427.01,1208.74 1427.59,1208.74 1428.18,1208.74 1428.77,1208.74 1429.35,1208.74 1429.94,1208.74 1430.53,1208.74 1431.11,1208.74 1431.7,1208.74 1432.29,1208.74 1432.87,1208.74 1433.46,1208.74 1434.04,1208.74 1434.63,1208.74 1435.22,1208.74 1435.8,1208.74 1436.39,1208.74 1436.98,1208.74 1437.56,1208.74 1438.15,1208.74 1438.74,1208.74 1439.32,1208.74 1439.91,1208.74 1440.5,1208.74 1441.08,1208.74 1441.67,1208.74 1442.25,1208.74 1442.84,1208.74 1443.43,1208.74 1444.01,1208.74 1444.6,1208.74 1445.19,1208.74 1445.77,1208.74 1446.36,1208.74 1446.95,1208.74 1447.53,1208.74 1448.12,1208.74 1448.7,1208.74 1449.29,1208.74 1449.88,1208.74 1450.46,1208.74 1451.05,1208.74 1451.64,1208.74 1452.22,1208.74 1452.81,1208.74 1453.4,1208.74 1453.98,1208.74 1454.57,1208.74 1455.16,1208.74 1455.74,1208.74 1456.33,1208.74 1456.91,1208.74 1457.5,1208.74 1458.09,1208.74 1458.67,1208.74 1459.26,1208.74 1459.85,1208.74 1460.43,1208.74 1461.02,1208.74 1461.61,1208.74 1462.19,1208.74 1462.78,1208.74 1463.37,1208.74 1463.95,1208.74 1464.54,1208.74 1465.12,1208.74 1465.71,1208.74 1466.3,1208.74 1466.88,1208.74 1467.47,1208.74 1468.06,1208.74 1468.64,1208.74 1469.23,1208.74 1469.82,1208.74 1470.4,1208.74 1470.99,1208.74 1471.57,1208.74 1472.16,1208.74 1472.75,1208.74 1473.33,1208.74 1473.92,1208.74 1474.51,1208.74 1475.09,1208.74 1475.68,1208.74 1476.27,1208.74 1476.85,1208.74 1477.44,1208.74 1478.03,1208.74 1478.61,1208.74 1479.2,1208.74 1479.78,1208.74 1480.37,1208.74 1480.96,1208.74 1481.54,1208.74 1482.13,1208.74 1482.72,1208.74 1483.3,1208.74 1483.89,1208.74 1484.48,1208.74 1485.06,1208.74 1485.65,1208.74 1486.24,1208.74 1486.82,1208.74 1487.41,1208.74 1487.99,1208.74 1488.58,1208.74 1489.17,1208.74 1489.75,1208.74 1490.34,1208.74 1490.93,1208.74 1491.51,1208.74 1492.1,1208.74 1492.69,1208.74 1493.27,1208.74 1493.86,1208.74 1494.45,1208.74 1495.03,1208.74 1495.62,1208.74 1496.2,1208.74 1496.79,1208.74 1497.38,1208.74 1497.96,1208.74 1498.55,1208.74 1499.14,1208.74 1499.72,1208.74 1500.31,1208.74 1500.9,1208.74 1501.48,1208.74 1502.07,1208.74 1502.65,1208.74 1503.24,1208.74 1503.83,1208.74 1504.41,1208.74 1505,1208.74 1505.59,1208.74 1506.17,1208.74 1506.76,1208.74 1507.35,1208.74 1507.93,1208.74 1508.52,1208.74 1509.11,1208.74 1509.69,1208.74 1510.28,1208.74 1510.86,1208.74 1511.45,1208.74 1512.04,1208.74 1512.62,1208.74 1513.21,1208.74 1513.8,1208.74 1514.38,1208.74 1514.97,1208.74 1515.56,1208.74 1516.14,1208.74 1516.73,1208.74 1517.32,1208.74 1517.9,1208.74 1518.49,1208.74 1519.07,1208.74 1519.66,1208.74 1520.25,1208.74 1520.83,1208.74 1521.42,1208.74 1522.01,1208.74 1522.59,1208.74 1523.18,1208.74 1523.77,1208.74 1524.35,1208.74 1524.94,1208.74 1525.52,1208.74 1526.11,1208.74 1526.7,1208.74 1527.28,1208.74 1527.87,1208.74 1528.46,1208.74 1529.04,1208.74 1529.63,1208.74 1530.22,1208.74 1530.8,1208.74 1531.39,1208.74 1531.98,1208.74 1532.56,1208.74 1533.15,1208.74 1533.73,1208.74 1534.32,1208.74 1534.91,1208.74 1535.49,1208.74 1536.08,1208.74 1536.67,1208.74 1537.25,1208.74 1537.84,1208.74 1538.43,1208.74 1539.01,1208.74 1539.6,1208.74 1540.19,1208.74 1540.77,1208.74 1541.36,1208.74 1541.94,1208.74 1542.53,1208.74 1543.12,1208.74 1543.7,1208.74 1544.29,1208.74 1544.88,1208.74 1545.46,1208.74 1546.05,1208.74 1546.64,1208.74 1547.22,1208.74 1547.81,1208.74 1548.4,1208.74 1548.98,1208.74 1549.57,1208.74 1550.15,1208.74 1550.74,1208.74 1551.33,1208.74 1551.91,1208.74 1552.5,1208.74 1553.09,1208.74 1553.67,1208.74 1554.26,1208.74 1554.85,1208.74 1555.43,1208.74 1556.02,1208.74 1556.6,1208.74 1557.19,1208.74 1557.78,1208.74 1558.36,1208.74 1558.95,1208.74 1559.54,1208.74 1560.12,1208.74 1560.71,1208.74 1561.3,1208.74 1561.88,1208.74 1562.47,1208.74 1563.06,1208.74 1563.64,1208.74 1564.23,1208.74 1564.81,1208.74 1565.4,1208.74 1565.99,1208.74 1566.57,1208.74 1567.16,1208.74 1567.75,1208.74 1568.33,1208.74 1568.92,1208.74 1569.51,1208.74 1570.09,1208.74 1570.68,1208.74 1571.27,1208.74 1571.85,1208.74 1572.44,1208.74 1573.02,1208.74 1573.61,1208.74 1574.2,1208.74 1574.78,1208.74 1575.37,1208.74 1575.96,1208.74 1576.54,1208.74 1577.13,1208.74 1577.72,1208.74 1578.3,1208.74 1578.89,1208.74 1579.47,1208.74 1580.06,1208.74 1580.65,1208.74 1581.23,1208.74 1581.82,1208.74 1582.41,1208.74 1582.99,1208.74 1583.58,1208.74 1584.17,1208.74 1584.75,1208.74 1585.34,1208.74 1585.93,1208.74 1586.51,1208.74 1587.1,1208.74 1587.68,1208.74 1588.27,1208.74 1588.86,1208.74 1589.44,1208.74 1590.03,1208.74 1590.62,1208.74 1591.2,1208.74 1591.79,1208.74 1592.38,1208.74 1592.96,1208.74 1593.55,1208.74 1594.14,1208.74 1594.72,1208.74 1595.31,1208.74 1595.89,1208.74 1596.48,1208.74 1597.07,1208.74 1597.65,1208.74 1598.24,1208.74 1598.83,1208.74 1599.41,1208.74 1600,1208.74 1600.59,1208.74 1601.17,1208.74 1601.76,1208.74 1602.34,1208.74 1602.93,1208.74 1603.52,1208.74 1604.1,1208.74 1604.69,1208.74 1605.28,1208.74 1605.86,1208.74 1606.45,1208.74 1607.04,1208.74 1607.62,1208.74 1608.21,1208.74 1608.8,1208.74 1609.38,1208.74 1609.97,1208.74 1610.55,1208.74 1611.14,1208.74 1611.73,1208.74 1612.31,1208.74 1612.9,1208.74 1613.49,1208.74 1614.07,1208.74 1614.66,1208.74 1615.25,1208.74 1615.83,1208.74 1616.42,1208.74 1617.01,1208.74 1617.59,1208.74 1618.18,1208.74 1618.76,1208.74 1619.35,1208.74 1619.94,1208.74 1620.52,1208.74 1621.11,1208.74 1621.7,1208.74 1622.28,1208.74 1622.87,1208.74 1623.46,1208.74 1624.04,1208.74 1624.63,1208.74 1625.22,1208.74 1625.8,1208.74 1626.39,1208.74 1626.97,1208.74 1627.56,1208.74 1628.15,1208.74 1628.73,1208.74 1629.32,1208.74 1629.91,1208.74 1630.49,1208.74 1631.08,1208.74 1631.67,1208.74 1632.25,1208.74 1632.84,1208.74 1633.42,1208.74 1634.01,1208.74 1634.6,1208.74 1635.18,1208.74 1635.77,1208.74 1636.36,1208.74 1636.94,1208.74 1637.53,1208.74 1638.12,1208.74 1638.7,1208.74 1639.29,1208.74 1639.88,1208.74 1640.46,1208.74 1641.05,1208.74 1641.63,1208.74 1642.22,1208.74 1642.81,1208.74 1643.39,1208.74 1643.98,1208.74 1644.57,1208.74 1645.15,1208.74 1645.74,1208.74 1646.33,1208.74 1646.91,1208.74 1647.5,1208.74 1648.09,1208.74 1648.67,1208.74 1649.26,1208.74 1649.84,1208.74 1650.43,1208.74 1651.02,1208.74 1651.6,1208.74 1652.19,1208.74 1652.78,1208.74 1653.36,1208.74 1653.95,1208.74 1654.54,1208.74 1655.12,1208.74 1655.71,1208.74 1656.29,1208.74 1656.88,1208.74 1657.47,1208.74 1658.05,1208.74 1658.64,1208.74 1659.23,1208.74 1659.81,1208.74 1660.4,1208.74 1660.99,1208.74 1661.57,1208.74 1662.16,1208.74 1662.75,1208.74 1663.33,1208.74 1663.92,1208.74 1664.5,1208.74 1665.09,1208.74 1665.68,1208.74 1666.26,1208.74 1666.85,1208.74 1667.44,1208.74 1668.02,1208.74 1668.61,1208.74 1669.2,1208.74 1669.78,1208.74 1670.37,1208.74 1670.96,1208.74 1671.54,1208.74 1672.13,1208.74 1672.71,1208.74 1673.3,1208.74 1673.89,1208.74 1674.47,1208.74 1675.06,1208.74 1675.65,1208.74 1676.23,1208.74 1676.82,1208.74 1677.41,1208.74 1677.99,1208.74 1678.58,1208.74 1679.17,1208.74 1679.75,1208.74 1680.34,1208.74 1680.92,1208.74 1681.51,1208.74 1682.1,1208.74 1682.68,1208.74 1683.27,1208.74 1683.86,1208.74 1684.44,1208.74 1685.03,1208.74 1685.62,1208.74 1686.2,1208.74 1686.79,1208.74 1687.37,1208.74 1687.96,1208.74 1688.55,1208.74 1689.13,1208.74 1689.72,1208.74 1690.31,1208.74 1690.89,1208.74 1691.48,1208.74 1692.07,1208.74 1692.65,1208.74 1693.24,1208.74 1693.83,1208.74 1694.41,1208.74 1695,1208.74 1695.58,1208.74 1696.17,1208.74 1696.76,1208.74 1697.34,1208.74 1697.93,1208.74 1698.52,1208.74 1699.1,1208.74 1699.69,1208.74 1700.28,1208.74 1700.86,1208.74 1701.45,1208.74 1702.04,1208.74 1702.62,1208.74 1703.21,1208.74 1703.79,1208.74 1704.38,1208.74 1704.97,1208.74 1705.55,1208.74 1706.14,1208.74 1706.73,1208.74 1707.31,1208.74 1707.9,1208.74 1708.49,1208.74 1709.07,1208.74 1709.66,1208.74 1710.24,1208.74 1710.83,1208.74 1711.42,1208.74 1712,1208.74 1712.59,1208.74 1713.18,1208.74 1713.76,1208.74 1714.35,1208.74 1714.94,1208.74 1715.52,1208.74 1716.11,1208.74 1716.7,1208.74 1717.28,1208.74 1717.87,1208.74 1718.45,1208.74 1719.04,1208.74 1719.63,1208.74 1720.21,1208.74 1720.8,1208.74 1721.39,1208.74 1721.97,1208.74 1722.56,1208.74 1723.15,1208.74 1723.73,1208.74 1724.32,1208.74 1724.91,1208.74 1725.49,1208.74 1726.08,1208.74 1726.66,1208.74 1727.25,1208.74 1727.84,1208.74 1728.42,1208.74 1729.01,1208.74 1729.6,1208.74 1730.18,1208.74 1730.77,1208.74 1731.36,1208.74 1731.94,1208.74 1732.53,1208.74 1733.11,1208.74 1733.7,1208.74 1734.29,1208.74 1734.87,1208.74 1735.46,1208.74 1736.05,1208.74 1736.63,1208.74 1737.22,1208.74 1737.81,1208.74 1738.39,1208.74 1738.98,1208.74 1739.57,1208.74 1740.15,1208.74 1740.74,1208.74 1741.32,1208.74 1741.91,1208.74 1742.5,1208.74 1743.08,1208.74 1743.67,1208.74 1744.26,1208.74 1744.84,1208.74 1745.43,1208.74 1746.02,1208.74 1746.6,1208.74 1747.19,1208.74 1747.78,1208.74 1748.36,1208.74 1748.95,1208.74 1749.53,1208.74 1750.12,1208.74 1750.71,1208.74 1751.29,1208.74 1751.88,1208.74 1752.47,1208.74 1753.05,1208.74 1753.64,1208.74 1754.23,1208.74 1754.81,1208.74 1755.4,1208.74 1755.99,1208.74 1756.57,1208.74 1757.16,1208.74 1757.74,1208.74 1758.33,1208.74 1758.92,1208.74 1759.5,1208.74 1760.09,1208.74 1760.68,1208.74 1761.26,1208.74 1761.85,1208.74 1762.44,1208.74 1763.02,1208.74 1763.61,1208.74 1764.19,1208.74 1764.78,1208.74 1765.37,1208.74 1765.95,1208.74 1766.54,1208.74 1767.13,1208.74 1767.71,1208.74 1768.3,1208.74 1768.89,1208.74 1769.47,1208.74 1770.06,1208.74 1770.65,1208.74 1771.23,1208.74 1771.82,1208.74 1772.4,1208.74 1772.99,1208.74 1773.58,1208.74 1774.16,1208.74 1774.75,1208.74 1775.34,1208.74 1775.92,1208.74 1776.51,1208.74 1777.1,1208.74 1777.68,1208.74 1778.27,1208.74 1778.86,1208.74 1779.44,1208.74 1780.03,1208.74 1780.61,1208.74 1781.2,1208.74 1781.79,1208.74 1782.37,1208.74 1782.96,1208.74 1783.55,1208.74 1784.13,1208.74 1784.72,1208.74 1785.31,1208.74 1785.89,1208.74 1786.48,1208.74 1787.06,1208.74 1787.65,1208.74 1788.24,1208.74 1788.82,1208.74 1789.41,1208.74 1790,1208.74 1790.58,1208.74 1791.17,1208.74 1791.76,1208.74 1792.34,1208.74 1792.93,1208.74 1793.52,1208.74 1794.1,1208.74 1794.69,1208.74 1795.27,1208.74 1795.86,1208.74 1796.45,1208.74 1797.03,1208.74 1797.62,1208.74 1798.21,1208.74 1798.79,1208.74 1799.38,1208.74 1799.97,1208.74 1800.55,1208.74 1801.14,1208.74 1801.73,1208.74 1802.31,1208.74 1802.9,1208.74 1803.48,1208.74 1804.07,1208.74 1804.66,1208.74 1805.24,1208.74 1805.83,1208.74 1806.42,1208.74 1807,1208.74 1807.59,1208.74 1808.18,1208.74 1808.76,1208.74 1809.35,1208.74 1809.94,1208.74 1810.52,1208.74 1811.11,1208.74 1811.69,1208.74 1812.28,1208.74 1812.87,1208.74 1813.45,1208.74 1814.04,1208.74 1814.63,1208.74 1815.21,1208.74 1815.8,1208.74 1816.39,1208.74 1816.97,1208.74 1817.56,1208.74 1818.14,1208.74 1818.73,1208.74 1819.32,1208.74 1819.9,1208.74 1820.49,1208.74 1821.08,1208.74 1821.66,1208.74 1822.25,1208.74 1822.84,1208.74 1823.42,1208.74 1824.01,1208.74 1824.6,1208.74 1825.18,1208.74 1825.77,1208.74 1826.35,1208.74 1826.94,1208.74 1827.53,1208.74 1828.11,1208.74 1828.7,1208.74 1829.29,1208.74 1829.87,1208.74 1830.46,1208.74 1831.05,1208.74 1831.63,1208.74 1832.22,1208.74 1832.81,1208.74 1833.39,1208.74 1833.98,1208.74 1834.56,1208.74 1835.15,1208.74 1835.74,1208.74 1836.32,1208.74 1836.91,1208.74 1837.5,1208.74 1838.08,1208.74 1838.67,1208.74 1839.26,1208.74 1839.84,1208.74 1840.43,1208.74 1841.01,1208.74 1841.6,1208.74 1842.19,1208.74 1842.77,1208.74 1843.36,1208.74 1843.95,1208.74 1844.53,1208.74 1845.12,1208.74 1845.71,1208.74 1846.29,1208.74 1846.88,1208.74 1847.47,1208.74 1848.05,1208.74 1848.64,1208.74 1849.22,1208.74 1849.81,1208.74 1850.4,1208.74 1850.98,1208.74 1851.57,1208.74 1852.16,1208.74 1852.74,1208.74 1853.33,1208.74 1853.92,1208.74 1854.5,1208.74 1855.09,1208.74 1855.68,1208.74 1856.26,1208.74 1856.85,1208.74 1857.43,1208.74 1858.02,1208.74 1858.61,1208.74 1859.19,1208.74 1859.78,1208.74 1860.37,1208.74 1860.95,1208.74 1861.54,1208.74 1862.13,1208.74 1862.71,1208.74 1863.3,1208.74 1863.88,1208.74 1864.47,1208.74 1865.06,1208.74 1865.64,1208.74 1866.23,1208.74 1866.82,1208.74 1867.4,1208.74 1867.99,1208.74 1868.58,1208.74 1869.16,1208.74 1869.75,1208.74 1870.34,1208.74 1870.92,1208.74 1871.51,1208.74 1872.09,1208.74 1872.68,1208.74 1873.27,1208.74 1873.85,1208.74 1874.44,1208.74 1875.03,1208.74 1875.61,1208.74 1876.2,1208.74 1876.79,1208.74 1877.37,1208.74 1877.96,1208.74 1878.55,1208.74 1879.13,1208.74 1879.72,1208.74 1880.3,1208.74 1880.89,1208.74 1881.48,1208.74 1882.06,1208.74 1882.65,1208.74 1883.24,1208.74 1883.82,1208.74 1884.41,1208.74 1885,1208.74 1885.58,1208.74 1886.17,1208.74 1886.76,1208.74 1887.34,1208.74 1887.93,1208.74 1888.51,1208.74 1889.1,1208.74 1889.69,1208.74 1890.27,1208.74 1890.86,1208.74 1891.45,1208.74 1892.03,1208.74 1892.62,1208.74 1893.21,1208.74 1893.79,1208.74 1894.38,1208.74 1894.96,1208.74 1895.55,1208.74 1896.14,1208.74 1896.72,1208.74 1897.31,1208.74 1897.9,1208.74 1898.48,1208.74 1899.07,1208.74 1899.66,1208.74 1900.24,1208.74 1900.83,1208.74 1901.42,1208.74 1902,1208.74 1902.59,1208.74 1903.17,1208.74 1903.76,1208.74 1904.35,1208.74 1904.93,1208.74 1905.52,1208.74 1906.11,1208.74 1906.69,1208.74 1907.28,1208.74 1907.87,1208.74 1908.45,1208.74 1909.04,1208.74 1909.63,1208.74 1910.21,1208.74 1910.8,1208.74 1911.38,1208.74 1911.97,1208.74 1912.56,1208.74 1913.14,1208.74 1913.73,1208.74 1914.32,1208.74 1914.9,1208.74 1915.49,1208.74 1916.08,1208.74 1916.66,1208.74 1917.25,1208.74 1917.83,1208.74 1918.42,1208.74 1919.01,1208.74 1919.59,1208.74 1920.18,1208.74 1920.77,1208.74 1921.35,1208.74 1921.94,1208.74 1922.53,1208.74 1923.11,1208.74 1923.7,1208.74 1924.29,1208.74 1924.87,1208.74 1925.46,1208.74 1926.04,1208.74 1926.63,1208.74 1927.22,1208.74 1927.8,1208.74 1928.39,1208.74 1928.98,1208.74 1929.56,1208.74 1930.15,1208.74 1930.74,1208.74 1931.32,1208.74 1931.91,1208.74 1932.5,1208.74 1933.08,1208.74 1933.67,1208.74 1934.25,1208.74 1934.84,1208.74 1935.43,1208.74 1936.01,1208.74 1936.6,1208.74 1937.19,1208.74 1937.77,1208.74 1938.36,1208.74 1938.95,1208.74 1939.53,1208.74 1940.12,1208.74 1940.71,1208.74 1941.29,1208.74 1941.88,1208.74 1942.46,1208.74 1943.05,1208.74 1943.64,1208.74 1944.22,1208.74 1944.81,1208.74 1945.4,1208.74 1945.98,1208.74 1946.57,1208.74 1947.16,1208.74 1947.74,1208.74 1948.33,1208.74 1948.91,1208.74 1949.5,1208.74 1950.09,1208.74 1950.67,1208.74 1951.26,1208.74 1951.85,1208.74 1952.43,1208.74 1953.02,1208.74 1953.61,1208.74 1954.19,1208.74 1954.78,1208.74 1955.37,1208.74 1955.95,1208.74 1956.54,1208.74 1957.12,1208.74 1957.71,1208.74 1958.3,1208.74 1958.88,1208.74 1959.47,1208.74 1960.06,1208.74 1960.64,1208.74 1961.23,1208.74 1961.82,1208.74 1962.4,1208.74 1962.99,1208.74 1963.58,1208.74 1964.16,1208.74 1964.75,1208.74 1965.33,1208.74 1965.92,1208.74 1966.51,1208.74 1967.09,1208.74 1967.68,1208.74 1968.27,1208.74 1968.85,1208.74 1969.44,1208.74 1970.03,1208.74 1970.61,1208.74 1971.2,1208.74 1971.78,1208.74 1972.37,1208.74 1972.96,1208.74 1973.54,1208.74 1974.13,1208.74 1974.72,1208.74 1975.3,1208.74 1975.89,1208.74 1976.48,1208.74 1977.06,1208.74 1977.65,1208.74 1978.24,1208.74 1978.82,1208.74 1979.41,1208.74 1979.99,1208.74 1980.58,1208.74 1981.17,1208.74 1981.75,1208.74 1982.34,1208.74 1982.93,1208.74 1983.51,1208.74 1984.1,1208.74 1984.69,1208.74 1985.27,1208.74 1985.86,1208.74 1986.45,1208.74 1987.03,1208.74 1987.62,1208.74 1988.2,1208.74 1988.79,1208.74 1989.38,1208.74 1989.96,1208.74 1990.55,1208.74 1991.14,1208.74 1991.72,1208.74 1992.31,1208.74 1992.9,1208.74 1993.48,1208.74 1994.07,1208.74 1994.65,1208.74 1995.24,1208.74 1995.83,1208.74 1996.41,1208.74 1997,1208.74 1997.59,1208.74 1998.17,1208.74 1998.76,1208.74 1999.35,1208.74 1999.93,1208.74 2000.52,1208.74 2001.11,1208.74 2001.69,1208.74 2002.28,1208.74 2002.86,1208.74 2003.45,1208.74 2004.04,1208.74 2004.62,1208.74 2005.21,1208.74 2005.8,1208.74 2006.38,1208.74 2006.97,1208.74 2007.56,1208.74 2008.14,1208.74 2008.73,1208.74 2009.32,1208.74 2009.9,1208.74 2010.49,1208.74 2011.07,1208.74 2011.66,1208.74 2012.25,1208.74 2012.83,1208.74 2013.42,1208.74 2014.01,1208.74 2014.59,1208.74 2015.18,1208.74 2015.77,1208.74 2016.35,1208.74 2016.94,1208.74 2017.53,1208.74 2018.11,1208.74 2018.7,1208.74 2019.28,1208.74 2019.87,1208.74 2020.46,1208.74 2021.04,1208.74 2021.63,1208.74 2022.22,1208.74 2022.8,1208.74 2023.39,1208.74 2023.98,1208.74 2024.56,1208.74 2025.15,1208.74 2025.73,1208.74 2026.32,1208.74 2026.91,1208.74 2027.49,1208.74 2028.08,1208.74 2028.67,1208.74 2029.25,1208.74 2029.84,1208.74 2030.43,1208.74 2031.01,1208.74 2031.6,1208.74 2032.19,1208.74 2032.77,1208.74 2033.36,1208.74 2033.94,1208.74 2034.53,1208.74 2035.12,1208.74 2035.7,1208.74 2036.29,1208.74 2036.88,1208.74 2037.46,1208.74 2038.05,1208.74 2038.64,1208.74 2039.22,1208.74 2039.81,1208.74 2040.4,1208.74 2040.98,1208.74 2041.57,1208.74 2042.15,1208.74 2042.74,1208.74 2043.33,1208.74 2043.91,1208.74 2044.5,1208.74 2045.09,1208.74 2045.67,1208.74 2046.26,1208.74 2046.85,1208.74 2047.43,1208.74 2048.02,1208.74 2048.6,1208.74 2049.19,1208.74 2049.78,1208.74 2050.36,1208.74 2050.95,1208.74 2051.54,1208.74 2052.12,1208.74 2052.71,1208.74 2053.3,1208.74 2053.88,1208.74 2054.47,1208.74 2055.06,1208.74 2055.64,1208.74 2056.23,1208.74 2056.81,1208.74 2057.4,1208.74 2057.99,1208.74 2058.57,1208.74 2059.16,1208.74 2059.75,1208.74 2060.33,1208.74 2060.92,1208.74 2061.51,1208.74 2062.09,1208.74 2062.68,1208.74 2063.27,1208.74 2063.85,1208.74 2064.44,1208.74 2065.02,1208.74 2065.61,1208.74 2066.2,1208.74 2066.78,1208.74 2067.37,1208.74 2067.96,1208.74 2068.54,1208.74 2069.13,1208.74 2069.72,1208.74 2070.3,1208.74 2070.89,1208.74 2071.48,1208.74 2072.06,1208.74 2072.65,1208.74 2073.23,1208.74 2073.82,1208.74 2074.41,1208.74 2074.99,1208.74 2075.58,1208.74 2076.17,1208.74 2076.75,1208.74 2077.34,1208.74 2077.93,1208.74 2078.51,1208.74 2079.1,1208.74 2079.68,1208.74 2080.27,1208.74 2080.86,1208.74 2081.44,1208.74 2082.03,1208.74 2082.62,1208.74 2083.2,1208.74 2083.79,1208.74 2084.38,1208.74 2084.96,1208.74 2085.55,1208.74 2086.14,1208.74 2086.72,1208.74 2087.31,1208.74 2087.89,1208.74 2088.48,1208.74 2089.07,1208.74 2089.65,1208.74 2090.24,1208.74 2090.83,1208.74 2091.41,1208.74 2092,1208.74 2092.59,1208.74 2093.17,1208.74 2093.76,1208.74 2094.35,1208.74 2094.93,1208.74 2095.52,1208.74 2096.1,1208.74 2096.69,1208.74 2097.28,1208.74 2097.86,1208.74 2098.45,1208.74 2099.04,1208.74 2099.62,1208.74 2100.21,1208.74 2100.8,1208.74 2101.38,1208.74 2101.97,1208.74 2102.55,1208.74 2103.14,1208.74 2103.73,1208.74 2104.31,1208.74 2104.9,1208.74 2105.49,1208.74 2106.07,1208.74 2106.66,1208.74 2107.25,1208.74 2107.83,1208.74 2108.42,1208.74 2109.01,1208.74 2109.59,1208.74 2110.18,1208.74 2110.76,1208.74 2111.35,1208.74 2111.94,1208.74 2112.52,1208.74 2113.11,1208.74 2113.7,1208.74 2114.28,1208.74 2114.87,1208.74 2115.46,1208.74 2116.04,1208.74 2116.63,1208.74 2117.22,1208.74 2117.8,1208.74 2118.39,1208.74 2118.97,1208.74 2119.56,1208.74 2120.15,1208.74 2120.73,1208.74 2121.32,1208.74 2121.91,1208.74 2122.49,1208.74 2123.08,1208.74 2123.67,1208.74 2124.25,1208.74 2124.84,1208.74 2125.42,1208.74 2126.01,1208.74 2126.6,1208.74 2127.18,1208.74 2127.77,1208.74 2128.36,1208.74 2128.94,1208.74 2129.53,1208.74 2130.12,1208.74 2130.7,1208.74 2131.29,1208.74 2131.88,1208.74 2132.46,1208.74 2133.05,1208.74 2133.63,1208.74 2134.22,1208.74 2134.81,1208.74 2135.39,1208.74 2135.98,1208.74 2136.57,1208.74 2137.15,1208.74 2137.74,1208.74 2138.33,1208.74 2138.91,1208.74 2139.5,1208.74 2140.09,1208.74 2140.67,1208.74 2141.26,1208.74 2141.84,1208.74 2142.43,1208.74 2143.02,1208.74 2143.6,1208.74 2144.19,1208.74 2144.78,1208.74 2145.36,1208.74 2145.95,1208.74 2146.54,1208.74 2147.12,1208.74 2147.71,1208.74 2148.3,1208.74 2148.88,1208.74 2149.47,1208.74 2150.05,1208.74 2150.64,1208.74 2151.23,1208.74 2151.81,1208.74 2152.4,1208.74 2152.99,1208.74 2153.57,1208.74 2154.16,1208.74 2154.75,1208.74 2155.33,1208.74 2155.92,1208.74 2156.5,1208.74 2157.09,1208.74 2157.68,1208.74 2158.26,1208.74 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.07,1190.89 1400.17,899.083 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1226.14 985.439,1190.89 2158.26,1190.89 2158.26,1226.14 985.439,1226.14 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip750)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip750)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip753\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip753)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip753)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip753)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip753)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip753)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip753)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip753)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip753)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip753)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip753)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip753)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-6762.81 164.91,-7586.79 165.469,-8335.09 166.029,-9036.4 166.588,-9669.84 167.147,-10239.8 167.706,-10750.4 168.266,-11205.5 168.825,-10728.8 169.384,-11120.9 169.943,-10715.6 170.503,-11047.1 171.062,-11326.1 171.621,-11575.8 172.18,-11202.8 172.74,-11390.5 173.299,-11052.7 173.858,-11193.8 174.417,-11317.3 174.977,-11413.5 175.536,-11484.3 176.095,-11520.9 176.655,-11535.5 177.214,-11541.6 177.773,-11524.5 178.332,-11211.1 178.892,-11175.8 179.451,-10637.5 180.01,-10137.8 180.569,-10108.4 181.129,-10064.1 181.688,-9820 182.247,-9571.16 182.806,-9337.11 183.366,-9094.71 183.925,-9012.56 184.484,-8771.79 185.043,-8687.7 185.603,-8587.58 186.162,-8480.12 186.721,-8366.59 187.28,-8033.32 187.84,-7701.83 188.399,-7390.15 188.958,-7272.16 189.517,-6970.26 190.077,-6773.64 190.636,-6651.56 191.195,-6525.4 191.754,-6409.54 192.314,-6282.12 192.873,-6004.73 193.432,-5677.07 193.991,-5314.89 194.551,-5141.62 195.11,-4976.51 195.669,-4870.68 196.228,-4706.97 196.788,-4498.2 197.347,-4350.75 197.906,-4246.34 198.465,-4006.96 199.025,-3866.29 199.584,-3732.41 200.143,-3644.74 200.702,-3516.23 201.262,-3308.88 201.821,-3147.49 202.38,-3074.71 202.939,-2960.89 203.499,-2841.43 204.058,-2735.14 204.617,-2588.68 205.176,-2481.85 205.736,-2311.79 206.295,-2148.23 206.854,-2059.45 207.413,-2004.6 207.973,-1951.93 208.532,-1834.26 209.091,-1780.68 209.65,-1606.66 210.21,-1472.52 210.769,-1425.1 211.328,-1319.97 211.887,-1276.26 212.447,-1124.71 213.006,-1091.08 213.565,-1000.26 214.124,-912.119 214.684,-877.549 215.243,-844.196 215.802,-756.757 216.361,-702.949 216.921,-619.263 217.48,-564.973 218.039,-533.919 218.598,-505.042 219.158,-426.565 219.717,-374.81 220.276,-319.594 220.835,-291.6 221.395,-175.986 221.954,-127.053 222.513,-82.205 223.072,-59.89 223.632,6.3707 224.191,64.0077 224.75,82.9014 225.309,80.495 225.869,185.32 226.428,160.838 226.987,197.487 227.546,277.837 228.106,311.757 228.665,385.439 229.224,412.037 229.783,422.688 230.343,455.044 230.902,441.579 231.461,450.127 232.02,458.603 232.58,487.416 233.139,539.42 233.698,546.255 234.257,588.951 234.817,610.134 235.376,668.29 235.935,690.451 236.494,745.18 237.054,766.047 237.613,747.257 238.172,767.596 238.731,807.446 239.291,843.856 239.85,877.382 240.409,908.126 240.968,939.761 241.528,955.265 242.087,1001.48 242.646,975.285 243.205,946.898 243.765,942.615 244.324,956.855 244.883,951.541 245.442,962.673 246.002,990.769 246.561,1003 247.12,995.711 247.679,990.931 248.239,1003.76 248.798,963.759 249.357,1028.54 249.916,1021.3 250.476,999.319 251.035,996.952 251.594,1027.44 252.153,1040.16 252.713,1084.08 253.272,1075.02 253.831,1103.64 254.39,1078.81 254.95,1139.66 255.509,1128.43 256.068,1132.3 256.627,1157.33 257.187,1161.74 257.746,1168.16 258.305,1188.9 258.864,1192.25 259.424,1179.51 259.983,1166.62 260.542,1172.33 261.101,1164.02 261.661,1168.76 262.22,1171.43 262.779,1162 263.338,1117.03 263.898,1140.87 264.457,1178.54 265.016,1168.25 265.575,1171.37 266.135,1173.25 266.694,1174.35 267.253,1146.03 267.812,1135.33 268.372,1126.23 268.931,1116.84 269.49,1126.1 270.049,1100.56 270.609,1126.55 271.168,1149.09 271.727,1142.04 272.286,1201.5 272.846,1188.72 273.405,1158.94 273.964,1136.31 274.523,1128.71 275.083,1102.44 275.642,1093.64 276.201,1102.36 276.76,1098.04 277.32,1087.96 277.879,1098.1 278.438,1124.28 278.997,1133.77 279.557,1111.55 280.116,1119.6 280.675,1127.88 281.234,1149.36 281.794,1155.84 282.353,1175.66 282.912,1178.13 283.471,1152.57 284.031,1142.66 284.59,1114.65 285.149,1086.73 285.708,1077.4 286.268,1067.94 286.827,1078.19 287.386,1054.59 287.945,1065.55 288.505,1079.62 289.064,1068.99 289.623,1078.17 290.182,1068.14 290.742,1046.84 291.301,1059.37 291.86,1072 292.419,1096.85 292.979,1103.39 293.538,1128.34 294.097,1134.39 294.656,1121.94 295.216,1175.84 295.775,1164.58 296.334,1150.3 296.893,1154.32 297.453,1144 298.012,1166.15 298.571,1121.96 299.13,1126.06 299.69,1115.63 300.249,1103.84 300.808,1089.98 301.368,1084.51 301.927,1077.32 302.486,1002.65 303.045,997.497 303.605,995.848 304.164,1004.51 304.723,981.029 305.282,959.135 305.842,942.038 306.401,937.307 306.96,936.562 307.519,934.584 308.079,948.84 308.638,949.567 309.197,979.24 309.756,976.908 310.316,1020.86 310.875,998.425 311.434,975.144 311.993,970.857 312.553,1000.29 313.112,978.254 313.671,939.631 314.23,955.386 314.79,950.866 315.349,914.503 315.908,945.487 316.467,926.508 317.027,940.218 317.586,935.089 318.145,917.973 318.704,916.033 319.264,916.649 319.823,916.865 320.382,914.913 320.941,929.847 321.501,928.69 322.06,924.296 322.619,940.849 323.178,971.762 323.738,1017.5 324.297,991.616 324.856,1000.07 325.415,991.216 325.975,983.696 326.534,978.285 327.093,975.093 327.652,985.514 328.212,993.764 328.771,923.444 329.33,935.645 329.889,947.084 330.449,958.521 331.008,970.205 331.567,981.204 332.126,1006.17 332.686,989.13 333.245,967.258 333.804,963.542 334.363,991.554 334.923,950.631 335.482,963.791 336.041,972.821 336.6,966.102 337.16,942.428 337.719,921.021 338.278,900.547 338.837,897.626 339.397,913.481 339.956,928.381 340.515,922.858 341.074,902.527 341.634,899.278 342.193,915.004 342.752,879.05 343.311,879.964 343.871,880.193 344.43,879.301 344.989,894.688 345.548,862.579 346.108,865.456 346.667,884.681 347.226,899.238 347.785,928.02 348.345,941.681 348.904,920.907 349.463,948.783 350.022,946.031 350.582,958.117 351.141,946.764 351.7,939.908 352.259,983.282 352.819,974.31 353.378,954.073 353.937,947.316 354.496,975.845 355.056,949.031 355.615,940.404 356.174,922.649 356.733,901.786 357.293,882.482 357.852,880.591 358.411,877.223 358.97,874.836 359.53,888.91 360.089,903.435 360.648,899.073 361.207,894.438 361.767,920.148 362.326,918.962 362.885,916.732 363.444,890.595 364.004,905.044 364.563,884.968 365.122,866.777 365.681,864.182 366.241,846.01 366.8,843.394 367.359,828.579 367.918,844.072 368.478,891.797 369.037,871.407 369.596,885.768 370.155,911.833 370.715,910.532 371.274,886.784 371.833,882.574 372.392,860.442 372.952,885.062 373.511,882.037 374.07,847.236 374.629,862.349 375.189,878.158 375.748,890.157 376.307,885.005 376.866,910.743 377.426,923.718 377.985,899.243 378.544,912.974 379.103,925.055 379.663,919.001 380.222,944.273 380.781,919.978 381.34,879.831 381.9,859.503 382.459,836.317 383.018,829.601 383.577,795.181 384.137,797.047 384.696,826.663 385.255,804.536 385.814,805.03 386.374,821.507 386.933,810.098 387.492,778.674 388.051,780.738 388.611,766.32 389.17,749.564 389.729,750.723 390.288,768.7 390.848,818.793 391.407,832.572 391.966,845.559 392.525,874.904 393.085,871.845 393.644,884.422 394.203,864.789 394.762,863.369 395.322,875.738 395.881,859.064 396.44,851.678 396.999,863.395 397.559,893.576 398.118,888.174 398.677,867.4 399.236,859.703 399.796,859.944 400.355,888.209 400.914,867.439 401.473,878.138 402.033,937.039 402.592,960.713 403.151,953.506 403.71,928.161 404.27,923.498 404.829,914.661 405.388,907.918 405.947,901.85 406.507,898.708 407.066,910.298 407.625,907.546 408.184,921.497 408.744,896.34 409.303,889.142 409.862,902.104 410.421,861.818 410.981,841.72 411.54,836.185 412.099,833.812 412.658,831.524 413.218,827.878 413.777,858.372 414.336,788.664 414.895,789.217 415.455,773.675 416.014,755.202 416.573,714.374 417.132,717.657 417.692,688.217 418.251,696.209 418.81,683.075 419.369,701.952 419.929,705.201 420.488,674.331 421.047,679.216 421.606,731.124 422.166,732.638 422.725,716.318 423.284,732.938 423.843,735.966 424.403,736.399 424.962,737.952 425.521,721.594 426.08,725.818 426.64,745.811 427.199,713.846 427.758,668.528 428.318,655.801 428.877,662.144 429.436,683.903 429.995,689.785 430.555,712.169 431.114,714.076 431.673,733.34 432.232,734.172 432.792,735.226 433.351,755.193 433.91,754.215 434.469,753.872 435.029,805.139 435.588,801.992 436.147,816.294 436.706,828.654 437.266,812.538 437.825,808.092 438.384,757.04 438.943,776.38 439.503,776.385 440.062,790.85 440.621,803.596 441.18,785.353 441.74,784.021 442.299,784.331 442.858,746.578 443.417,747.466 443.977,782.221 444.536,781.383 445.095,778.98 445.654,780.662 446.214,782.458 446.773,798.753 447.332,814.554 447.891,811.446 448.451,824.376 449.01,820.184 449.569,814.807 450.128,811.983 450.688,790.536 451.247,775.048 451.806,826.482 452.365,824.88 452.925,787.293 453.484,799.21 454.043,891.792 454.602,882.655 455.162,876.994 455.721,919.958 456.28,927.531 456.839,898.479 457.399,906.982 457.958,929.785 458.517,936.623 459.076,893.998 459.636,886.394 460.195,882.141 460.754,907.892 461.313,915.996 461.873,909.821 462.432,903.127 462.991,899.311 463.55,890.481 464.11,915.93 464.669,858.292 465.228,819.855 465.787,814.175 466.347,762.461 466.906,778.428 467.465,725.599 468.024,724.682 468.584,711.175 469.143,701.356 469.702,719.799 470.261,719.947 470.821,739.361 471.38,753.981 471.939,736.956 472.498,752.941 473.058,737.339 473.617,702.697 474.176,704.873 474.735,708.005 475.295,692.647 475.854,777.156 476.413,805.729 476.972,802.555 477.532,817.962 478.091,780.916 478.65,760.63 479.209,760.623 479.769,777.108 480.328,755.277 480.887,722.151 481.446,752.611 482.006,735.34 482.565,718.822 483.124,736.434 483.683,738.623 484.243,719.794 484.802,738.946 485.361,721.884 485.92,724.801 486.48,707.434 487.039,722.794 487.598,739.635 488.157,756.162 488.717,755.371 489.276,784.402 489.835,779.07 490.394,780.289 490.954,775.985 491.513,790.371 492.072,802.108 492.631,799.306 493.191,812.591 493.75,809.52 494.309,804.616 494.868,768.332 495.428,801.275 495.987,813.723 496.546,810.876 497.105,757.651 497.665,741.474 498.224,743.749 498.783,740.578 499.342,740.283 499.902,725.446 500.461,726.811 501.02,725.757 501.579,724.636 502.139,756.528 502.698,736.861 503.257,709.411 503.816,710.996 504.376,710.357 504.935,694.48 505.494,696.447 506.053,698.953 506.613,711.305 507.172,694.363 507.731,725.547 508.29,774.906 508.85,753.105 509.409,769.659 509.968,769.116 510.527,735.838 511.087,768.889 511.646,785.538 512.205,766.584 512.764,750.193 513.324,744.878 513.883,745.892 514.442,760.689 515.001,790.955 515.561,786.046 516.12,764.77 516.679,777.898 517.238,776.08 517.798,741.402 518.357,739.929 518.916,772.931 519.475,801.484 520.035,782.601 520.594,733.464 521.153,699.923 521.712,701.186 522.272,703.971 522.831,702.044 523.39,686.268 523.949,671.528 524.509,689.346 525.068,674.25 525.627,678.559 526.186,663.125 526.746,702.34 527.305,671.407 527.864,657.196 528.423,673.908 528.983,692.355 529.542,706.857 530.101,724.502 530.66,694.913 531.22,697.404 531.779,715.552 532.338,730.38 532.897,745.826 533.457,712.598 534.016,729.916 534.575,717.665 535.134,702.671 535.694,719.897 536.253,707.021 536.812,692.705 537.371,726.185 537.931,677.857 538.49,680.08 539.049,701.598 539.608,688.705 540.168,706.121 540.727,704.929 541.286,691.717 541.845,695.667 542.405,647.137 542.964,667.984 543.523,688.506 544.082,722.784 544.642,705.385 545.201,724.098 545.76,724.28 546.319,741.559 546.879,741.45 547.438,756.689 547.997,756.986 548.556,771.644 549.116,789.247 549.675,789.015 550.234,849.875 550.793,846.054 551.353,844.031 551.912,839.537 552.471,815.971 553.031,746.592 553.59,777.219 554.149,820.991 554.708,833.174 555.268,859.175 555.827,833.742 556.386,814.058 556.945,810.882 557.505,803.161 558.064,831.524 558.623,841.751 559.182,866.785 559.742,837.417 560.301,863.402 560.86,827.154 561.419,837.538 561.979,831.629 562.538,794.746 563.097,758.385 563.656,724.131 564.216,690.367 564.775,692.898 565.334,710.043 565.893,693.217 566.453,661.499 567.012,679.463 567.571,679.748 568.13,717.478 568.69,686.721 569.249,687.455 569.808,671.11 570.367,678.7 570.927,694.081 571.486,676.039 572.045,678.925 572.604,714.811 573.164,695.954 573.723,708.294 574.282,691.991 574.841,709.02 575.401,692.745 575.96,644.699 576.519,647.56 577.078,637.381 577.638,644.712 578.197,648.086 578.756,667.968 579.315,666.755 579.875,651.19 580.434,672.406 580.993,674.432 581.552,693.162 582.112,678.024 582.671,679.762 583.23,646.015 583.789,633.608 584.349,621.431 584.908,593.788 585.467,630.923 586.026,637.779 586.586,644.315 587.145,649.651 587.704,653.741 588.263,640.652 588.823,645.584 589.382,647.345 589.941,635.158 590.5,656.433 591.06,676.964 591.619,685.138 592.178,706.756 592.737,719.153 593.297,691.035 593.856,676.482 594.415,680.327 594.974,696.29 595.534,747.944 596.093,732.782 596.652,698.382 597.211,697.735 597.771,698.328 598.33,699.01 598.889,699.293 599.448,695.823 600.008,695.348 600.567,697.273 601.126,683.237 601.685,718.576 602.245,748.113 602.804,778.921 603.363,791.579 603.922,788.155 604.482,797.857 605.041,825.624 605.6,851.232 606.159,855.583 606.719,898.809 607.278,902.938 607.837,924.005 608.396,893.583 608.956,850.04 609.515,825.883 610.074,880.67 610.633,890.236 611.193,881.712 611.752,870.643 612.311,832.175 612.87,824.587 613.43,799.989 613.989,775.634 614.548,804.85 615.107,777.707 615.667,804.361 616.226,812.531 616.785,806.062 617.344,815.777 617.904,826.345 618.463,816.685 619.022,807.927 619.581,770.327 620.141,765.439 620.7,779.598 621.259,760.461 621.818,754.921 622.378,752.017 622.937,767.663 623.496,762.289 624.055,710.643 624.615,714.428 625.174,713.757 625.733,681.878 626.292,682.925 626.852,729.845 627.411,710.197 627.97,725.965 628.529,722.313 629.089,720.814 629.648,703.883 630.207,703.158 630.766,704.426 631.326,718.215 631.885,716.966 632.444,750.306 633.003,716.504 633.563,719.401 634.122,751.604 634.681,766.635 635.24,733.402 635.8,749.171 636.359,761.735 636.918,758.092 637.477,785.155 638.037,799.403 638.596,824.801 639.155,768.967 639.714,780.473 640.274,789.267 640.833,751.85 641.392,735.624 641.951,748.141 642.511,715.064 643.07,714.201 643.629,711.706 644.188,710.982 644.748,693.696 645.307,697.014 645.866,729.947 646.425,698.516 646.985,717.615 647.544,715.556 648.103,697.694 648.662,663.751 649.222,666.981 649.781,702.116 650.34,702.034 650.899,651.283 651.459,674.087 652.018,691.831 652.577,710.055 653.136,689.967 653.696,722.204 654.255,691.778 654.814,660.558 655.373,647.884 655.933,649.25 656.492,671.221 657.051,688.097 657.61,751.923 658.17,743.245 658.729,711.223 659.288,709.08 659.847,723.721 660.407,689.263 660.966,674.492 661.525,676.231 662.084,707.889 662.644,671.132 663.203,656.86 663.762,673.24 664.321,690.005 664.881,723.294 665.44,738.534 665.999,768.948 666.558,779.429 667.118,773.731 667.677,783.888 668.236,767.967 668.795,746.512 669.355,729.401 669.914,744.243 670.473,741.327 671.032,693.368 671.592,679.437 672.151,682.7 672.71,699.304 673.269,717.568 673.829,718.643 674.388,698.829 674.947,696.829 675.506,661.17 676.066,676.294 676.625,678.121 677.184,662.974 677.743,647.208 678.303,601.442 678.862,607.654 679.421,612.933 679.981,616.319 680.54,622.061 681.099,627.275 681.658,630.754 682.218,625.587 682.777,632.527 683.336,635.172 683.895,603.542 684.455,592.142 685.014,614.488 685.573,653.252 686.132,624.63 686.692,678.78 687.251,679.615 687.81,679.782 688.369,649.367 688.929,649.878 689.488,671.226 690.047,678.682 690.606,681.043 691.166,666.164 691.725,669.158 692.284,638.312 692.843,675.487 693.403,692.308 693.962,680.891 694.521,679.989 695.08,632.578 695.64,634.082 696.199,623.574 696.758,616.363 697.317,619.63 697.877,641.963 698.436,643.611 698.995,632.775 699.554,608.809 700.114,600.349 700.673,605.627 701.232,642.085 701.791,630.355 702.351,632.641 702.91,653.194 703.469,637.211 704.028,669.218 704.588,651.857 705.147,701.997 705.706,703.954 706.265,718.913 706.825,703.425 707.384,684.514 707.943,669.934 708.502,622.733 709.062,658.655 709.621,665.954 710.18,652.436 710.739,654.994 711.299,624.973 711.858,645.728 712.417,647.22 712.976,650.046 713.536,652.576 714.095,642.302 714.654,648.545 715.213,637.782 715.773,622.968 716.332,625.24 716.891,627.3 717.45,645.219 718.01,650.162 718.569,654.286 719.128,670.477 719.687,674.984 720.247,696.653 720.806,681.109 721.365,712.448 721.924,745.572 722.484,759.214 723.043,754.472 723.602,735.513 724.161,685.67 724.721,668.61 725.28,685.794 725.839,668.789 726.398,687.199 726.958,705.857 727.517,703.646 728.076,703.802 728.635,718.699 729.195,666.126 729.754,635.838 730.313,667.128 730.872,654.068 731.432,638.309 731.991,657.288 732.55,694.564 733.109,741.937 733.669,739.229 734.228,735.991 734.787,717.366 735.346,714.299 735.906,729.561 736.465,713.718 737.024,697.627 737.583,682.879 738.143,683.687 738.702,699.483 739.261,684.133 739.82,667.753 740.38,685.926 740.939,684.903 741.498,683.646 742.057,670.771 742.617,671.525 743.176,718.978 743.735,701.624 744.294,730.351 744.854,666.094 745.413,683.822 745.972,618.056 746.531,669.686 747.091,653.748 747.65,642.013 748.209,613.494 748.768,619.184 749.328,639.145 749.887,673.489 750.446,625.795 751.005,608.653 751.565,600.82 752.124,603.365 752.683,609.137 753.242,648.236 753.802,653.606 754.361,670.839 754.92,686.271 755.479,719.767 756.039,702.772 756.598,672.841 757.157,641.91 757.716,659.656 758.276,675.448 758.835,678.167 759.394,680.149 759.953,714.476 760.513,713.148 761.072,726.523 761.631,726.427 762.19,740.04 762.75,741.711 763.309,756.264 763.868,771.398 764.427,765.333 764.987,808.531 765.546,817.053 766.105,812.036 766.664,819.622 767.224,799.762 767.783,827.427 768.342,801.049 768.901,796.044 769.461,788.93 770.02,818.63 770.579,811.992 771.138,786.549 771.698,765.498 772.257,745.314 772.816,740.703 773.375,704.496 773.935,703.281 774.494,719.074 775.053,701.622 775.612,701.126 776.172,686.316 776.731,669.734 777.29,669.876 777.849,669.763 778.409,686.604 778.968,655.434 779.527,655.568 780.086,656.338 780.646,660.154 781.205,663.623 781.764,614.621 782.323,621.094 782.883,625.263 783.442,660.682 784.001,646.862 784.56,634.046 785.12,636.488 785.679,671.202 786.238,624.84 786.797,632.101 787.357,632.044 787.916,634.456 788.475,604.053 789.034,610.888 789.594,613.565 790.153,617.26 790.712,620.92 791.271,621.652 791.831,626.283 792.39,612.797 792.949,631.014 793.508,620.636 794.068,626.808 794.627,628.849 795.186,665.23 795.745,647.422 796.305,653.732 796.864,627.381 797.423,663.066 797.982,617.047 798.542,591.318 799.101,592.336 799.66,597.873 800.219,601.708 800.779,604.722 801.338,592.912 801.897,596.622 802.456,604.692 803.016,623.203 803.575,640.128 804.134,642.069 804.693,659.61 805.253,674.338 805.812,660.999 806.371,663.929 806.931,681.185 807.49,614.845 808.049,616.968 808.608,633.49 809.168,636.833 809.727,658.546 810.286,676.8 810.845,709.94 811.405,707.705 811.964,727.115 812.523,694.54 813.082,711.57 813.642,728.12 814.201,742.112 814.76,774.262 815.319,800.068 815.879,857.391 816.438,864.268 816.997,854.679 817.556,863.123 818.116,869.645 818.675,858.173 819.234,849.001 819.793,841.337 820.353,833.311 820.912,794.467 821.471,800.499 822.03,811.396 822.59,821.704 823.149,816.909 823.708,828.352 824.267,836.083 824.827,810.827 825.386,803.599 825.945,779.65 826.504,791.478 827.064,768.808 827.623,763.247 828.182,756.356 828.741,770.514 829.301,783.75 829.86,764.324 830.419,776.625 830.978,755.735 831.538,767.712 832.097,780.051 832.656,777.094 833.215,752.436 833.775,781.123 834.334,794.573 834.893,787.874 835.452,780.078 836.012,773.878 836.571,750.286 837.13,730.52 837.689,696.227 838.249,660.067 838.808,678.974 839.367,676.811 839.926,691.222 840.486,692.611 841.045,692.352 841.604,709.735 842.163,705.684 842.723,706.98 843.282,705.443 843.841,701.486 844.4,685.507 844.96,717.123 845.519,715.321 846.078,713.93 846.637,694.885 847.197,675.761 847.756,645.097 848.315,646.475 848.874,614.895 849.434,637.313 849.993,608.205 850.552,599.443 851.111,617.099 851.671,621.426 852.23,639.849 852.789,627.282 853.348,577.829 853.908,600.518 854.467,605.649 855.026,640.438 855.585,641.812 856.145,661.111 856.704,631.977 857.263,638.12 857.822,578.032 858.382,600.917 858.941,602.305 859.5,609.691 860.059,611.495 860.619,628.537 861.178,611.733 861.737,614.881 862.296,620.544 862.856,624.16 863.415,643.597 863.974,642.195 864.533,648.028 865.093,664.063 865.652,646.084 866.211,696.038 866.77,644.706 867.33,645.331 867.889,644.567 868.448,663.532 869.007,664.629 869.567,685.684 870.126,669.252 870.685,688.057 871.244,703.02 871.804,685.389 872.363,696.531 872.922,695.716 873.481,699.75 874.041,711.945 874.6,726.407 875.159,724.198 875.718,738.019 876.278,766.773 876.837,747.163 877.396,726.987 877.955,708.359 878.515,741.288 879.074,739.206 879.633,771.786 880.192,749.451 880.752,734.532 881.311,763.205 881.87,757.861 882.429,768.078 882.989,749.62 883.548,693.751 884.107,644.714 884.666,646.659 885.226,634.612 885.785,651.025 886.344,634.286 886.903,586.323 887.463,576.61 888.022,550.683 888.581,573.264 889.14,578.198 889.7,582.555 890.259,570.747 890.818,591.885 891.377,614.148 891.937,615.074 892.496,684.994 893.055,666.325 893.614,651.182 894.174,653.208 894.733,668.285 895.292,687.896 895.851,722.445 896.411,753.378 896.97,737.143 897.529,721.148 898.088,687.595 898.648,689.071 899.207,688.779 899.766,671.413 900.325,671.366 900.885,657.658 901.444,675.808 902.003,678.235 902.562,677.827 903.122,676.646 903.681,710.189 904.24,709.068 904.799,723.643 905.359,737.82 905.918,768.838 906.477,735.637 907.036,705.612 907.596,704.154 908.155,689.511 908.714,705.825 909.273,735.597 909.833,729.694 910.392,742.092 910.951,724.234 911.51,739.174 912.07,717.607 912.629,746.692 913.188,745.203 913.747,785.4 914.307,766.866 914.866,730.395 915.425,742.951 915.984,725.088 916.544,705.214 917.103,685.726 917.662,668.517 918.221,669.549 918.781,654.958 919.34,625.719 919.899,613.072 920.458,630.191 921.018,598.382 921.577,585.821 922.136,591.023 922.695,547.176 923.255,539.332 923.814,530.962 924.373,538.251 924.932,528.511 925.492,551.63 926.051,584.153 926.61,604.213 927.169,562.657 927.729,571.703 928.288,562.032 928.847,534.28 929.406,557.499 929.966,564.032 930.525,603.813 931.084,624.28 931.644,583.12 932.203,587.881 932.762,610.975 933.321,651.199 933.881,654.826 934.44,671.568 934.999,671.786 935.558,656.454 936.118,655.116 936.677,657.086 937.236,630.039 937.795,632.42 938.355,649.747 938.914,685.275 939.473,652.623 940.032,655.299 940.592,639.077 941.151,672.498 941.71,686.489 942.269,654.441 942.829,638.765 943.388,641.469 943.947,660.274 944.506,695.559 945.066,712.374 945.625,709.65 946.184,708.799 946.743,710.824 947.303,660.842 947.862,676.69 948.421,711.982 948.98,710.752 949.54,693.144 950.099,706.087 950.658,701.763 951.217,731.658 951.777,730.363 952.336,758.26 952.895,737.313 953.454,716.677 954.014,733.743 954.573,766.105 955.132,747.015 955.691,759.271 956.251,740.111 956.81,750.724 957.369,718.898 957.928,717.493 958.488,716.333 959.047,695.818 959.606,714.648 960.165,733.109 960.725,696.656 961.284,710.518 961.843,694.461 962.402,692.98 962.962,709.562 963.521,709.24 964.08,755.087 964.639,753.115 965.199,749.851 965.758,747.419 966.317,731.662 966.876,747.839 967.436,744.718 967.995,786.795 968.554,782.216 969.113,776.278 969.673,783.601 970.232,809.37 970.791,788.304 971.35,811.392 971.91,788.932 972.469,731.55 973.028,713.458 973.587,728.486 974.147,711.233 974.706,712.226 975.265,726.919 975.824,680.013 976.384,667.243 976.943,666.537 977.502,672.165 978.061,659.721 978.621,662.213 979.18,645.753 979.739,617.619 980.298,622.395 980.858,645.59 981.417,665.287 981.976,670.128 982.535,654.229 983.095,656.721 983.654,641.07 984.213,642.242 984.772,596.644 985.332,584.164 985.891,558.677 986.45,551.969 987.009,570.809 987.569,590.477 988.128,593.974 988.687,612.893 989.246,645.949 989.806,664.427 990.365,665.608 990.924,696.225 991.483,681.766 992.043,678.863 992.602,715.065 993.161,715.921 993.72,681.543 994.28,694.701 994.839,659.779 995.398,707.216 995.957,672.262 996.517,657.475 997.076,627.638 997.635,629.498 998.194,635.361 998.754,637.925 999.313,626.911 999.872,610.004 1000.43,630.507 1000.99,650.029 1001.55,665.39 1002.11,652.594 1002.67,653.703 1003.23,670.228 1003.79,685.678 1004.35,686.908 1004.91,670.343 1005.46,672.438 1006.02,669.135 1006.58,702.738 1007.14,754.528 1007.7,750.107 1008.26,728.847 1008.82,744.689 1009.38,743.535 1009.94,741.433 1010.5,737.936 1011.06,750.166 1011.62,745.209 1012.18,710.409 1012.73,723.182 1013.29,720.316 1013.85,738.666 1014.41,724.231 1014.97,754.175 1015.53,750.732 1016.09,760.606 1016.65,724.364 1017.21,705.543 1017.77,769.946 1018.33,747.973 1018.89,794.96 1019.45,787.189 1020.01,797.25 1020.56,806.242 1021.12,797.625 1021.68,791.729 1022.24,786.934 1022.8,796.958 1023.36,771.13 1023.92,748.135 1024.48,762.417 1025.04,724.55 1025.6,705.331 1026.16,707.21 1026.72,674.442 1027.28,692.905 1027.83,674.274 1028.39,673.108 1028.95,673.139 1029.51,637.656 1030.07,639.298 1030.63,626.903 1031.19,613.362 1031.75,614.812 1032.31,617.655 1032.87,652.074 1033.43,654.182 1033.99,656.435 1034.55,642.849 1035.1,679.705 1035.66,663.407 1036.22,681.167 1036.78,680.742 1037.34,682.157 1037.9,698.795 1038.46,666.775 1039.02,649.478 1039.58,667.097 1040.14,683.831 1040.7,682.67 1041.26,653.143 1041.82,654.904 1042.38,671.01 1042.93,688.921 1043.49,707.516 1044.05,723.756 1044.61,707.114 1045.17,675.928 1045.73,675.899 1046.29,671.989 1046.85,656.251 1047.41,658.539 1047.97,662.934 1048.53,662.722 1049.09,677.908 1049.65,679.511 1050.2,697.049 1050.76,677.901 1051.32,683.853 1051.88,685.567 1052.44,669.913 1053,653.033 1053.56,655.228 1054.12,674.624 1054.68,703.354 1055.24,671.022 1055.8,687.43 1056.36,669.272 1056.92,655.606 1057.48,654.761 1058.03,689.256 1058.59,706.357 1059.15,708.829 1059.71,707.007 1060.27,690.098 1060.83,677.923 1061.39,693.176 1061.95,691.946 1062.51,693.038 1063.07,642.548 1063.63,660.031 1064.19,679.58 1064.75,694.758 1065.3,634.054 1065.86,637.41 1066.42,643.623 1066.98,629.642 1067.54,618.196 1068.1,654.647 1068.66,689.917 1069.22,686.943 1069.78,654.535 1070.34,643.737 1070.9,628.691 1071.46,618.186 1072.02,637.282 1072.57,654.246 1073.13,643.281 1073.69,647.69 1074.25,665.836 1074.81,670.366 1075.37,720.521 1075.93,686.018 1076.49,719.07 1077.05,717.343 1077.61,700.445 1078.17,666.574 1078.73,684.911 1079.29,684.29 1079.85,684.232 1080.4,717.318 1080.96,683.992 1081.52,685.322 1082.08,672.297 1082.64,704.606 1083.2,703.637 1083.76,670.444 1084.32,717.315 1084.88,729.75 1085.44,757.646 1086,766.513 1086.56,809.215 1087.12,803.068 1087.67,796.475 1088.23,757.216 1088.79,723.841 1089.35,689.34 1089.91,671.994 1090.47,654.073 1091.03,623.582 1091.59,641.036 1092.15,627.761 1092.71,645.214 1093.27,632.296 1093.83,634.695 1094.39,652.969 1094.94,651.696 1095.5,638.907 1096.06,624.95 1096.62,627.518 1097.18,679.321 1097.74,664.918 1098.3,685.693 1098.86,650.149 1099.42,638.918 1099.98,659.789 1100.54,679.651 1101.1,697.654 1101.66,712.202 1102.22,725.011 1102.77,689.574 1103.33,722.77 1103.89,751.61 1104.45,779.314 1105.01,758.22 1105.57,752.476 1106.13,751.098 1106.69,744.224 1107.25,739.298 1107.81,795.276 1108.37,759.939 1108.93,770.418 1109.49,733.657 1110.04,733.808 1110.6,717.976 1111.16,716.316 1111.72,731.833 1112.28,745.583 1112.84,773.212 1113.4,771.167 1113.96,763.082 1114.52,789.208 1115.08,785.642 1115.64,783.648 1116.2,780.575 1116.76,743.676 1117.31,725.056 1117.87,704.709 1118.43,719.751 1118.99,719.966 1119.55,735.992 1120.11,764.973 1120.67,741.328 1121.23,645.322 1121.79,663.151 1122.35,662.139 1122.91,663.168 1123.47,679.379 1124.03,675.384 1124.59,644.551 1125.14,613.941 1125.7,632.077 1126.26,619.38 1126.82,657.904 1127.38,611.391 1127.94,596.794 1128.5,601.651 1129.06,653.503 1129.62,636.799 1130.18,638.435 1130.74,654.76 1131.3,658.508 1131.86,659.746 1132.41,646.33 1132.97,649.456 1133.53,669.125 1134.09,700.316 1134.65,698.37 1135.21,697.739 1135.77,696.715 1136.33,713.016 1136.89,726.168 1137.45,737.903 1138.01,719.68 1138.57,706.129 1139.13,721.796 1139.68,751.41 1140.24,745.794 1140.8,706.789 1141.36,657.885 1141.92,676.349 1142.48,678.951 1143.04,666.921 1143.6,667.941 1144.16,650.108 1144.72,639.23 1145.28,676.157 1145.84,676.38 1146.4,658.948 1146.96,627.654 1147.51,662.799 1148.07,647.573 1148.63,627.784 1149.19,612.681 1149.75,635.734 1150.31,639.045 1150.87,676.162 1151.43,676.392 1151.99,704.042 1152.55,704.071 1153.11,668.962 1153.67,685.302 1154.23,669.479 1154.78,669.262 1155.34,665.767 1155.9,667.646 1156.46,602.813 1157.02,607.03 1157.58,610.541 1158.14,615.788 1158.7,620.228 1159.26,622.375 1159.82,657.956 1160.38,627.76 1160.94,647.547 1161.5,665.22 1162.05,646.936 1162.61,649.779 1163.17,649.743 1163.73,620.362 1164.29,621.272 1164.85,625.46 1165.41,648.566 1165.97,619.621 1166.53,623.376 1167.09,613.396 1167.65,647.248 1168.21,632.948 1168.77,651.893 1169.33,637.841 1169.88,641.921 1170.44,662.999 1171,680.332 1171.56,680.677 1172.12,648.257 1172.68,602.637 1173.24,625.982 1173.8,614.83 1174.36,652.096 1174.92,685.881 1175.48,682.734 1176.04,679.024 1176.6,694.026 1177.15,742.317 1177.71,702.438 1178.27,700.698 1178.83,713.909 1179.39,666.182 1179.95,701.866 1180.51,717.357 1181.07,701.824 1181.63,700.359 1182.19,721.504 1182.75,720.484 1183.31,719.145 1183.87,721.295 1184.43,689.502 1184.98,701.649 1185.54,714.656 1186.1,694.625 1186.66,739.346 1187.22,721.214 1187.78,719.515 1188.34,699.398 1188.9,730.56 1189.46,760.902 1190.02,742.737 1190.58,726.136 1191.14,706.54 1191.7,658.076 1192.25,675.368 1192.81,708.901 1193.37,738.153 1193.93,720.943 1194.49,704.34 1195.05,716.931 1195.61,716.05 1196.17,680.056 1196.73,726.207 1197.29,741.74 1197.85,752.286 1198.41,762.856 1198.97,757.914 1199.52,770.249 1200.08,779.493 1200.64,805.112 1201.2,828.627 1201.76,787.679 1202.32,764.891 1202.88,711.422 1203.44,695.384 1204,695.947 1204.56,714.296 1205.12,746.389 1205.68,709.853 1206.24,695.158 1206.8,710.194 1207.35,721.479 1207.91,682.887 1208.47,686.145 1209.03,703.216 1209.59,669.433 1210.15,714.045 1210.71,743.367 1211.27,725.828 1211.83,724.898 1212.39,704.259 1212.95,737.094 1213.51,719.662 1214.07,734.96 1214.62,714.728 1215.18,713.669 1215.74,716.2 1216.3,684.291 1216.86,671.006 1217.42,639.555 1217.98,639.562 1218.54,626.246 1219.1,632.464 1219.66,638.315 1220.22,622.254 1220.78,621.524 1221.34,610.13 1221.89,617.068 1222.45,634.755 1223.01,602.802 1223.57,573.504 1224.13,612.805 1224.69,583.898 1225.25,590.292 1225.81,547.44 1226.37,554.733 1226.93,559.534 1227.49,564.232 1228.05,572.335 1228.61,609.443 1229.17,658.852 1229.72,661.351 1230.28,644.954 1230.84,618.203 1231.4,621.04 1231.96,626.901 1232.52,613.567 1233.08,635.121 1233.64,656.517 1234.2,678.792 1234.76,682.221 1235.32,650.871 1235.88,650.258 1236.44,653.579 1236.99,638.974 1237.55,630.618 1238.11,652.149 1238.67,716.442 1239.23,715.893 1239.79,700.623 1240.35,704.46 1240.91,737.093 1241.47,750.358 1242.03,765.346 1242.59,764.555 1243.15,766.037 1243.71,761.786 1244.26,741.788 1244.82,752.964 1245.38,761.379 1245.94,721.839 1246.5,735.395 1247.06,798.778 1247.62,806.178 1248.18,834.994 1248.74,810.475 1249.3,785.479 1249.86,780.521 1250.42,746.181 1250.98,772.705 1251.54,782.185 1252.09,778.994 1252.65,758.88 1253.21,770.96 1253.77,813.943 1254.33,821.253 1254.89,810.848 1255.45,822.324 1256.01,750.745 1256.57,763.903 1257.13,775.177 1257.69,753.212 1258.25,735.647 1258.81,749.152 1259.36,747.646 1259.92,744.09 1260.48,757.558 1261.04,736.464 1261.6,734.901 1262.16,714.525 1262.72,714.979 1263.28,714.142 1263.84,727.154 1264.4,743.069 1264.96,739.49 1265.52,719.259 1266.08,733.479 1266.63,702.601 1267.19,731.939 1267.75,714.55 1268.31,698.075 1268.87,665.968 1269.43,665.982 1269.99,666.029 1270.55,615.998 1271.11,621.324 1271.67,620.766 1272.23,621.654 1272.79,639.066 1273.35,613.482 1273.91,634.29 1274.46,635.049 1275.02,635.942 1275.58,669.698 1276.14,670.858 1276.7,654.661 1277.26,670.998 1277.82,637.821 1278.38,655.045 1278.94,623.672 1279.5,647.279 1280.06,648.759 1280.62,666.226 1281.18,648.16 1281.73,661.986 1282.29,628.058 1282.85,617.015 1283.41,606.446 1283.97,607.745 1284.53,581.553 1285.09,603.745 1285.65,609.137 1286.21,598.854 1286.77,635.992 1287.33,640.593 1287.89,676.545 1288.45,705.608 1289,722.761 1289.56,719.246 1290.12,717.48 1290.68,717.318 1291.24,682.082 1291.8,665.137 1292.36,697.392 1292.92,678.346 1293.48,662.568 1294.04,660.281 1294.6,675.716 1295.16,705.943 1295.72,703.565 1296.28,723.579 1296.83,671.773 1297.39,671.506 1297.95,699.493 1298.51,681.606 1299.07,663.832 1299.63,647.394 1300.19,631.544 1300.75,631.761 1301.31,632.304 1301.87,634.9 1302.43,624.801 1302.99,642.395 1303.55,615.865 1304.1,605.024 1304.66,609.927 1305.22,611.814 1305.78,616.843 1306.34,638.716 1306.9,640.223 1307.46,644.583 1308.02,611.746 1308.58,631.564 1309.14,667.921 1309.7,669.759 1310.26,668.432 1310.82,673.902 1311.38,674.522 1311.93,638.202 1312.49,644.771 1313.05,662.564 1313.61,631.248 1314.17,649.639 1314.73,654.577 1315.29,641.13 1315.85,580.962 1316.41,667.037 1316.97,654.023 1317.53,668.086 1318.09,685.742 1318.65,685.713 1319.2,649.886 1319.76,648.975 1320.32,630.125 1320.88,649.597 1321.44,635.992 1322,622.965 1322.56,641.961 1323.12,631.338 1323.68,618.859 1324.24,605.343 1324.8,611.157 1325.36,616.983 1325.92,623.291 1326.47,643.535 1327.03,661.337 1327.59,664.062 1328.15,653.393 1328.71,639.57 1329.27,659.621 1329.83,679.827 1330.39,647.987 1330.95,669.608 1331.51,667.754 1332.07,655.922 1332.63,670.411 1333.19,674.823 1333.75,693.446 1334.3,677.552 1334.86,709.4 1335.42,709.446 1335.98,708.29 1336.54,691.584 1337.1,693.431 1337.66,705.747 1338.22,720.576 1338.78,717.107 1339.34,716.295 1339.9,682.211 1340.46,678.261 1341.02,658.723 1341.57,641.71 1342.13,641.18 1342.69,626.936 1343.25,599.476 1343.81,636.624 1344.37,653.523 1344.93,637.712 1345.49,627.317 1346.05,647.981 1346.61,619.183 1347.17,620.627 1347.73,659.926 1348.29,643.837 1348.84,646.477 1349.4,633.53 1349.96,605.339 1350.52,611.577 1351.08,599.833 1351.64,639.085 1352.2,659.172 1352.76,678.365 1353.32,680.935 1353.88,708.712 1354.44,689.569 1355,624.356 1355.56,693.349 1356.12,722.421 1356.67,704.03 1357.23,735.193 1357.79,766.2 1358.35,760.434 1358.91,707.815 1359.47,691.656 1360.03,693.16 1360.59,711.755 1361.15,727.09 1361.71,726.496 1362.27,743.378 1362.83,786.303 1363.39,762.76 1363.94,759.905 1364.5,738.744 1365.06,751.383 1365.62,748.86 1366.18,729.645 1366.74,743.262 1367.3,742.774 1367.86,725.524 1368.42,725.514 1368.98,739.794 1369.54,704.903 1370.1,671.08 1370.66,701.761 1371.21,702.676 1371.77,653.721 1372.33,640.633 1372.89,659.793 1373.45,642.817 1374.01,627.695 1374.57,628.987 1375.13,646.581 1375.69,665.01 1376.25,651.055 1376.81,638.068 1377.37,655.961 1377.93,687.746 1378.49,690.355 1379.04,724.71 1379.6,741.162 1380.16,773.157 1380.72,817.555 1381.28,845.562 1381.84,801.326 1382.4,763.624 1382.96,743.802 1383.52,728.291 1384.08,726.422 1384.64,724.108 1385.2,688.823 1385.76,709.185 1386.31,707.443 1386.87,693.332 1387.43,724.917 1387.99,722.472 1388.55,705.065 1389.11,706.738 1389.67,703.811 1390.23,733.361 1390.79,725.136 1391.35,739.185 1391.91,723.448 1392.47,704.893 1393.03,686.709 1393.58,682.035 1394.14,664.55 1394.7,680.837 1395.26,680.335 1395.82,715.307 1396.38,696.892 1396.94,712.89 1397.5,697.238 1398.06,712.135 1398.62,713.173 1399.18,726.586 1399.74,757.301 1400.3,740.302 1400.86,770.525 1401.41,769.157 1401.97,750.026 1402.53,729.594 1403.09,772.437 1403.65,748.028 1404.21,711.376 1404.77,726.536 1405.33,758.796 1405.89,770.501 1406.45,784.002 1407.01,780.405 1407.57,808.423 1408.13,784.416 1408.68,730.581 1409.24,694.883 1409.8,697.054 1410.36,694.91 1410.92,724.406 1411.48,722.231 1412.04,704.92 1412.6,672.755 1413.16,669.843 1413.72,704.616 1414.28,681.885 1414.84,698.812 1415.4,712.389 1415.95,727.652 1416.51,730.227 1417.07,761.164 1417.63,755.466 1418.19,755.092 1418.75,751.179 1419.31,743.834 1419.87,742.637 1420.43,756.634 1420.99,770.737 1421.55,779.924 1422.11,788.497 1422.67,780.708 1423.23,774.37 1423.78,738.874 1424.34,719.137 1424.9,684.272 1425.46,671.187 1426.02,705.086 1426.58,669.662 1427.14,652.139 1427.7,671.844 1428.26,688.95 1428.82,689.724 1429.38,686.915 1429.94,670.428 1430.5,651.211 1431.05,604.396 1431.61,653.713 1432.17,672.015 1432.73,673.373 1433.29,660.402 1433.85,644.894 1434.41,630.585 1434.97,680.36 1435.53,661.67 1436.09,666.904 1436.65,671.567 1437.21,670.297 1437.77,671.064 1438.33,671.718 1438.88,660.556 1439.44,663.775 1440,676.329 1440.56,647.485 1441.12,635.217 1441.68,658.58 1442.24,658.428 1442.8,644.067 1443.36,613.297 1443.92,603.634 1444.48,589.624 1445.04,601.584 1445.6,672.477 1446.15,624.16 1446.71,622.68 1447.27,591.14 1447.83,583.4 1448.39,587.888 1448.95,637.229 1449.51,656.307 1450.07,641.782 1450.63,663.076 1451.19,663.775 1451.75,678.578 1452.31,710.484 1452.87,714.341 1453.42,692.739 1453.98,692.225 1454.54,688.969 1455.1,670.417 1455.66,639.995 1456.22,642.539 1456.78,647.686 1457.34,650.735 1457.9,635.36 1458.46,637.687 1459.02,657.46 1459.58,644.367 1460.14,645.725 1460.7,647.961 1461.25,651.545 1461.81,664.482 1462.37,645.483 1462.93,633.391 1463.49,635.364 1464.05,605.991 1464.61,592.023 1465.17,642.369 1465.73,659.757 1466.29,674.773 1466.85,691.539 1467.41,704.423 1467.97,734.283 1468.52,730.387 1469.08,729.609 1469.64,760.064 1470.2,723.307 1470.76,691.81 1471.32,689.444 1471.88,688.595 1472.44,672.106 1473,688.654 1473.56,688.54 1474.12,709.69 1474.68,709.887 1475.24,720.95 1475.79,706.029 1476.35,736.104 1476.91,717.859 1477.47,731.399 1478.03,743.654 1478.59,771.295 1479.15,737.824 1479.71,750.773 1480.27,779.999 1480.83,775.395 1481.39,800.628 1481.95,775.014 1482.51,752.454 1483.07,749.312 1483.62,796.129 1484.18,791.512 1484.74,815.617 1485.3,810.696 1485.86,819.946 1486.42,800.742 1486.98,807.825 1487.54,801.329 1488.1,795.169 1488.66,789.043 1489.22,787.947 1489.78,781.978 1490.34,776.073 1490.89,801.781 1491.45,809.326 1492.01,788.071 1492.57,783.889 1493.13,775.757 1493.69,773.323 1494.25,731.877 1494.81,679.862 1495.37,665.599 1495.93,636.111 1496.49,640.055 1497.05,655.554 1497.61,660.273 1498.16,631.4 1498.72,638.062 1499.28,591.007 1499.84,612.38 1500.4,619.495 1500.96,607.285 1501.52,611.771 1502.08,612.083 1502.64,612.937 1503.2,631.942 1503.76,583.195 1504.32,589.592 1504.88,626.332 1505.44,643.411 1505.99,644.757 1506.55,644.644 1507.11,630.611 1507.67,634.763 1508.23,604.56 1508.79,578.185 1509.35,585.839 1509.91,601.64 1510.47,621.584 1511.03,640.794 1511.59,675.696 1512.15,643.202 1512.71,646.489 1513.26,620.233 1513.82,592.217 1514.38,613.467 1514.94,650.707 1515.5,669.283 1516.06,703.331 1516.62,704.348 1517.18,686.717 1517.74,669.043 1518.3,716.635 1518.86,681.072 1519.42,669.182 1519.98,654.754 1520.53,624.176 1521.09,612.042 1521.65,646.96 1522.21,635.084 1522.77,619.416 1523.33,642.171 1523.89,647.698 1524.45,649.98 1525.01,637.781 1525.57,640.713 1526.13,639.778 1526.69,656.972 1527.25,660.585 1527.81,677.976 1528.36,676.556 1528.92,660.711 1529.48,629.468 1530.04,617.774 1530.6,620.544 1531.16,639.048 1531.72,625.416 1532.28,609.872 1532.84,634.391 1533.4,653.712 1533.96,636.951 1534.52,641.038 1535.08,627.455 1535.63,665.573 1536.19,667.064 1536.75,668.628 1537.31,669.521 1537.87,649.926 1538.43,650.142 1538.99,650.634 1539.55,669.119 1540.11,658.433 1540.67,643.774 1541.23,647.021 1541.79,635.017 1542.35,635.724 1542.9,620.689 1543.46,643.234 1544.02,660.229 1544.58,618.78 1545.14,642.077 1545.7,630.903 1546.26,648.491 1546.82,668.294 1547.38,687.589 1547.94,700.376 1548.5,730.591 1549.06,744.16 1549.62,725.188 1550.18,721.501 1550.73,719.429 1551.29,683.888 1551.85,683.53 1552.41,687.455 1552.97,638.363 1553.53,636.688 1554.09,626.308 1554.65,595.398 1555.21,619.442 1555.77,654.907 1556.33,669.379 1556.89,639.235 1557.45,673.03 1558,693.735 1558.56,680.03 1559.12,679.2 1559.68,699.785 1560.24,699.102 1560.8,719.035 1561.36,716.302 1561.92,697.124 1562.48,713.011 1563.04,741.189 1563.6,737.891 1564.16,720.158 1564.72,721.98 1565.28,737.655 1565.83,750.655 1566.39,810.613 1566.95,784.295 1567.51,791.237 1568.07,689.598 1568.63,703.47 1569.19,701.288 1569.75,697.89 1570.31,644.491 1570.87,663.897 1571.43,668.497 1571.99,670.341 1572.55,670.975 1573.1,689.853 1573.66,684.791 1574.22,682.936 1574.78,713.4 1575.34,713.253 1575.9,712.801 1576.46,713.197 1577.02,761.161 1577.58,744.551 1578.14,773.066 1578.7,750.157 1579.26,747.752 1579.82,708.127 1580.37,736.047 1580.93,715.092 1581.49,731.664 1582.05,717.434 1582.61,699.626 1583.17,696.63 1583.73,692.999 1584.29,694.822 1584.85,728.921 1585.41,743.342 1585.97,740.264 1586.53,732.209 1587.09,746.636 1587.65,693.855 1588.2,659.907 1588.76,643.207 1589.32,643.564 1589.88,657.154 1590.44,691.885 1591,657.858 1591.56,690.837 1592.12,689.391 1592.68,688.389 1593.24,687.142 1593.8,707.028 1594.36,724.427 1594.92,705.882 1595.47,689.412 1596.03,692.173 1596.59,695.819 1597.15,679.497 1597.71,644.772 1598.27,646.405 1598.83,667.485 1599.39,685.181 1599.95,665.779 1600.51,682.486 1601.07,666.241 1601.63,664.879 1602.19,665.662 1602.74,666.084 1603.3,667.214 1603.86,635.275 1604.42,652.957 1604.98,687.738 1605.54,703.399 1606.1,703.755 1606.66,704.281 1607.22,703.652 1607.78,734.201 1608.34,729.886 1608.9,745.081 1609.46,758.897 1610.02,710.682 1610.57,678.306 1611.13,678.228 1611.69,698.422 1612.25,730.941 1612.81,774.82 1613.37,754.386 1613.93,750.598 1614.49,761.507 1615.05,725.189 1615.61,688.771 1616.17,688.812 1616.73,717.394 1617.29,716.077 1617.84,731.53 1618.4,728.349 1618.96,758.446 1619.52,799.876 1620.08,796.111 1620.64,793.177 1621.2,785.857 1621.76,718.668 1622.32,686.577 1622.88,672.093 1623.44,706.788 1624,704.53 1624.56,733.998 1625.11,730.41 1625.67,730.472 1626.23,694.957 1626.79,643.525 1627.35,661.084 1627.91,664.355 1628.47,632.338 1629.03,606.692 1629.59,659.695 1630.15,645.481 1630.71,681.725 1631.27,676.636 1631.83,707.179 1632.39,689.782 1632.94,702.619 1633.5,702.918 1634.06,699.034 1634.62,728.229 1635.18,722.655 1635.74,737.888 1636.3,737.316 1636.86,751.243 1637.42,714.699 1637.98,681.915 1638.54,681.92 1639.1,666.83 1639.66,682.59 1640.21,683.267 1640.77,649.867 1641.33,648.535 1641.89,628.841 1642.45,617.243 1643.01,552.592 1643.57,543.961 1644.13,551.549 1644.69,545.206 1645.25,552.67 1645.81,560.08 1646.37,599.002 1646.93,605.504 1647.48,609.799 1648.04,598.842 1648.6,588.094 1649.16,558.229 1649.72,564.136 1650.28,585.059 1650.84,572.408 1651.4,595.618 1651.96,580.896 1652.52,571.916 1653.08,577.977 1653.64,630.481 1654.2,633.602 1654.76,619.28 1655.31,609.703 1655.87,614.546 1656.43,619.78 1656.99,607.199 1657.55,632.15 1658.11,635.42 1658.67,655.911 1659.23,708.205 1659.79,721.652 1660.35,720.701 1660.91,718.169 1661.47,747.145 1662.03,744.629 1662.58,724.46 1663.14,659.251 1663.7,660.706 1664.26,678.222 1664.82,677.093 1665.38,678.393 1665.94,679.305 1666.5,678.581 1667.06,678.483 1667.62,681.905 1668.18,681.776 1668.74,700.439 1669.3,684.713 1669.85,647.397 1670.41,649.767 1670.97,683.622 1671.53,633.825 1672.09,620.726 1672.65,639.25 1673.21,654.073 1673.77,667.051 1674.33,717.463 1674.89,730.308 1675.45,727.35 1676.01,705.673 1676.57,687.309 1677.13,708.508 1677.68,704.398 1678.24,733.286 1678.8,764.062 1679.36,778.732 1679.92,755.88 1680.48,766.567 1681.04,712.935 1681.6,728.509 1682.16,712.581 1682.72,708.709 1683.28,674.186 1683.84,641.224 1684.4,628.315 1684.95,675.892 1685.51,676.633 1686.07,708.204 1686.63,718.899 1687.19,764.771 1687.75,743.129 1688.31,772.537 1688.87,750.472 1689.43,714.978 1689.99,714.963 1690.55,717.315 1691.11,731.565 1691.67,732.743 1692.23,746.762 1692.78,761.888 1693.34,772.656 1693.9,800.067 1694.46,795.004 1695.02,789.059 1695.58,850.502 1696.14,847.335 1696.7,840.91 1697.26,879.864 1697.82,868.472 1698.38,893.163 1698.94,896.632 1699.5,901.931 1700.05,922.355 1700.61,908.287 1701.17,863.221 1701.73,851.602 1702.29,825.721 1702.85,821.556 1703.41,814.147 1703.97,760.79 1704.53,738.561 1705.09,706.072 1705.65,670.801 1706.21,685.378 1706.77,654.149 1707.32,654.122 1707.88,652.448 1708.44,651.531 1709,654.602 1709.56,671.578 1710.12,684.924 1710.68,667.258 1711.24,682.657 1711.8,667.495 1712.36,668.701 1712.92,666.186 1713.48,682.534 1714.04,695.553 1714.6,678.598 1715.15,662.403 1715.71,663.847 1716.27,633.227 1716.83,650.869 1717.39,668.714 1717.95,667.587 1718.51,667.723 1719.07,685.743 1719.63,682.642 1720.19,716.867 1720.75,734.785 1721.31,716.128 1721.87,735.194 1722.42,731.254 1722.98,682.325 1723.54,698.151 1724.1,697.316 1724.66,682.015 1725.22,666.448 1725.78,665.147 1726.34,648.966 1726.9,633.781 1727.46,619.895 1728.02,626.84 1728.58,598.064 1729.14,602.935 1729.69,622.789 1730.25,592.9 1730.81,562.086 1731.37,586.641 1731.93,606.756 1732.49,589.239 1733.05,593.689 1733.61,599.874 1734.17,599.012 1734.73,586.539 1735.29,609.892 1735.85,648.636 1736.41,648.88 1736.97,668.889 1737.52,668.162 1738.08,656.241 1738.64,657.704 1739.2,659.424 1739.76,662.18 1740.32,680.74 1740.88,678.53 1741.44,692.245 1742,692.531 1742.56,707.233 1743.12,705.913 1743.68,676.956 1744.24,694.049 1744.79,694.665 1745.35,711.65 1745.91,708.04 1746.47,675.355 1747.03,674.285 1747.59,669.239 1748.15,637.393 1748.71,639.222 1749.27,625.33 1749.83,610.576 1750.39,596.347 1750.95,600.596 1751.51,603.175 1752.06,624.65 1752.62,595.292 1753.18,566.004 1753.74,575.816 1754.3,613.611 1754.86,622.801 1755.42,629.138 1755.98,648.889 1756.54,653.682 1757.1,669.439 1757.66,654.104 1758.22,700.442 1758.78,682.722 1759.34,666.208 1759.89,669.239 1760.45,668.482 1761.01,669.46 1761.57,657.301 1762.13,657.958 1762.69,659.191 1763.25,660.301 1763.81,648.802 1764.37,650.021 1764.93,653.849 1765.49,686.473 1766.05,651.671 1766.61,669.305 1767.16,685.911 1767.72,718.067 1768.28,729.252 1768.84,710.54 1769.4,708.262 1769.96,708.784 1770.52,691.997 1771.08,658.757 1771.64,644.696 1772.2,633.249 1772.76,651.227 1773.32,638.457 1773.88,646.062 1774.43,631.994 1774.99,654.162 1775.55,671.368 1776.11,684.855 1776.67,701.197 1777.23,719.006 1777.79,718.084 1778.35,731.003 1778.91,732.217 1779.47,745.916 1780.03,778.574 1780.59,760.133 1781.15,755.279 1781.71,751.649 1782.26,763.145 1782.82,759.848 1783.38,757.08 1783.94,783.54 1784.5,794.68 1785.06,788.017 1785.62,782.132 1786.18,729.962 1786.74,743.483 1787.3,723.332 1787.86,721.224 1788.42,700.429 1788.98,718.444 1789.53,733.123 1790.09,731.047 1790.65,730.195 1791.21,714.217 1791.77,710.687 1792.33,726.769 1792.89,736.881 1793.45,732.948 1794.01,733.568 1794.57,744.566 1795.13,757.62 1795.69,801.622 1796.25,792.673 1796.8,755.487 1797.36,730.847 1797.92,743.131 1798.48,747.201 1799.04,712.542 1799.6,682.081 1800.16,668.188 1800.72,635.358 1801.28,638.161 1801.84,607.463 1802.4,627.432 1802.96,629.443 1803.52,630.999 1804.08,621.158 1804.63,626.633 1805.19,595.813 1805.75,566.215 1806.31,572.565 1806.87,612.858 1807.43,630.656 1807.99,649.562 1808.55,652.447 1809.11,685.893 1809.67,688.179 1810.23,653.415 1810.79,622.138 1811.35,644.41 1811.9,650.069 1812.46,667.116 1813.02,687.583 1813.58,688.442 1814.14,689.236 1814.7,672.833 1815.26,643.719 1815.82,664.994 1816.38,680.293 1816.94,681.503 1817.5,680.638 1818.06,676.819 1818.62,709.517 1819.18,691.582 1819.73,692.031 1820.29,672.104 1820.85,708.271 1821.41,722.618 1821.97,734.233 1822.53,742.771 1823.09,740.56 1823.65,737.965 1824.21,768.361 1824.77,766.575 1825.33,795.208 1825.89,760.968 1826.45,756.537 1827,769.817 1827.56,767.617 1828.12,777.007 1828.68,739.082 1829.24,738.156 1829.8,779.315 1830.36,788.722 1830.92,768.397 1831.48,717.727 1832.04,665.185 1832.6,684.328 1833.16,699.473 1833.72,698.406 1834.27,730.593 1834.83,714.266 1835.39,745.764 1835.95,758.407 1836.51,754.404 1837.07,766.67 1837.63,761.994 1838.19,744.279 \"/>\n<path clip-path=\"url(#clip753)\" d=\"M720.247 692.761 L720.806 692.761 L721.365 692.761 L721.924 692.761 L722.484 692.761 L723.043 692.761 L723.602 692.761 L724.161 692.761 L724.721 692.761 L725.28 692.761 L725.839 692.761 L726.398 692.761 L726.958 692.761 L727.517 692.761 L728.076 692.761 L728.635 692.761 L729.195 692.761 L729.754 692.761 L730.313 692.761 L730.872 692.761 L731.432 692.761 L731.991 692.761 L732.55 692.761 L733.109 692.761 L733.669 692.761 L734.228 692.761 L734.787 692.761 L735.346 692.761 L735.906 692.761 L736.465 692.761 L737.024 692.761 L737.583 692.761 L738.143 692.761 L738.702 692.761 L739.261 692.761 L739.82 692.761 L740.38 692.761 L740.939 692.761 L741.498 692.761 L742.057 692.761 L742.617 692.761 L743.176 692.761 L743.735 692.761 L744.294 692.761 L744.854 692.761 L745.413 692.761 L745.972 692.761 L746.531 692.761 L747.091 692.761 L747.65 692.761 L748.209 692.761 L748.768 692.761 L749.328 692.761 L749.887 692.761 L750.446 692.761 L751.005 692.761 L751.565 692.761 L752.124 692.761 L752.683 692.761 L753.242 692.761 L753.802 692.761 L754.361 692.761 L754.92 692.761 L755.479 692.761 L756.039 692.761 L756.598 692.761 L757.157 692.761 L757.716 692.761 L758.276 692.761 L758.835 692.761 L759.394 692.761 L759.953 692.761 L760.513 692.761 L761.072 692.761 L761.631 692.761 L762.19 692.761 L762.75 692.761 L763.309 692.761 L763.868 692.761 L764.427 692.761 L764.987 692.761 L765.546 692.761 L766.105 692.761 L766.664 692.761 L767.224 692.761 L767.783 692.761 L768.342 692.761 L768.901 692.761 L769.461 692.761 L770.02 692.761 L770.579 692.761 L771.138 692.761 L771.698 692.761 L772.257 692.761 L772.816 692.761 L773.375 692.761 L773.935 692.761 L774.494 692.761 L775.053 692.761 L775.612 692.761 L776.172 692.761 L776.731 692.761 L777.29 692.761 L777.849 692.761 L778.409 692.761 L778.968 692.761 L779.527 692.761 L780.086 692.761 L780.646 692.761 L781.205 692.761 L781.764 692.761 L782.323 692.761 L782.883 692.761 L783.442 692.761 L784.001 692.761 L784.56 692.761 L785.12 692.761 L785.679 692.761 L786.238 692.761 L786.797 692.761 L787.357 692.761 L787.916 692.761 L788.475 692.761 L789.034 692.761 L789.594 692.761 L790.153 692.761 L790.712 692.761 L791.271 692.761 L791.831 692.761 L792.39 692.761 L792.949 692.761 L793.508 692.761 L794.068 692.761 L794.627 692.761 L795.186 692.761 L795.745 692.761 L796.305 692.761 L796.864 692.761 L797.423 692.761 L797.982 692.761 L798.542 692.761 L799.101 692.761 L799.66 692.761 L800.219 692.761 L800.779 692.761 L801.338 692.761 L801.897 692.761 L802.456 692.761 L803.016 692.761 L803.575 692.761 L804.134 692.761 L804.693 692.761 L805.253 692.761 L805.812 692.761 L806.371 692.761 L806.931 692.761 L807.49 692.761 L808.049 692.761 L808.608 692.761 L809.168 692.761 L809.727 692.761 L810.286 692.761 L810.845 692.761 L811.405 692.761 L811.964 692.761 L812.523 692.761 L813.082 692.761 L813.642 692.761 L814.201 692.761 L814.76 692.761 L815.319 692.761 L815.879 692.761 L816.438 692.761 L816.997 692.761 L817.556 692.761 L818.116 692.761 L818.675 692.761 L819.234 692.761 L819.793 692.761 L820.353 692.761 L820.912 692.761 L821.471 692.761 L822.03 692.761 L822.59 692.761 L823.149 692.761 L823.708 692.761 L824.267 692.761 L824.827 692.761 L825.386 692.761 L825.945 692.761 L826.504 692.761 L827.064 692.761 L827.623 692.761 L828.182 692.761 L828.741 692.761 L829.301 692.761 L829.86 692.761 L830.419 692.761 L830.978 692.761 L831.538 692.761 L832.097 692.761 L832.656 692.761 L833.215 692.761 L833.775 692.761 L834.334 692.761 L834.893 692.761 L835.452 692.761 L836.012 692.761 L836.571 692.761 L837.13 692.761 L837.689 692.761 L838.249 692.761 L838.808 692.761 L839.367 692.761 L839.926 692.761 L840.486 692.761 L841.045 692.761 L841.604 692.761 L842.163 692.761 L842.723 692.761 L843.282 692.761 L843.841 692.761 L844.4 692.761 L844.96 692.761 L845.519 692.761 L846.078 692.761 L846.637 692.761 L847.197 692.761 L847.756 692.761 L848.315 692.761 L848.874 692.761 L849.434 692.761 L849.993 692.761 L850.552 692.761 L851.111 692.761 L851.671 692.761 L852.23 692.761 L852.789 692.761 L853.348 692.761 L853.908 692.761 L854.467 692.761 L855.026 692.761 L855.585 692.761 L856.145 692.761 L856.704 692.761 L857.263 692.761 L857.822 692.761 L858.382 692.761 L858.941 692.761 L859.5 692.761 L860.059 692.761 L860.619 692.761 L861.178 692.761 L861.737 692.761 L862.296 692.761 L862.856 692.761 L863.415 692.761 L863.974 692.761 L864.533 692.761 L865.093 692.761 L865.652 692.761 L866.211 692.761 L866.77 692.761 L867.33 692.761 L867.889 692.761 L868.448 692.761 L869.007 692.761 L869.567 692.761 L870.126 692.761 L870.685 692.761 L871.244 692.761 L871.804 692.761 L872.363 692.761 L872.922 692.761 L873.481 692.761 L874.041 692.761 L874.6 692.761 L875.159 692.761 L875.718 692.761 L876.278 692.761 L876.837 692.761 L877.396 692.761 L877.955 692.761 L878.515 692.761 L879.074 692.761 L879.633 692.761 L880.192 692.761 L880.752 692.761 L881.311 692.761 L881.87 692.761 L882.429 692.761 L882.989 692.761 L883.548 692.761 L884.107 692.761 L884.666 692.761 L885.226 692.761 L885.785 692.761 L886.344 692.761 L886.903 692.761 L887.463 692.761 L888.022 692.761 L888.581 692.761 L889.14 692.761 L889.7 692.761 L890.259 692.761 L890.818 692.761 L891.377 692.761 L891.937 692.761 L892.496 692.761 L893.055 692.761 L893.614 692.761 L894.174 692.761 L894.733 692.761 L895.292 692.761 L895.851 692.761 L896.411 692.761 L896.97 692.761 L897.529 692.761 L898.088 692.761 L898.648 692.761 L899.207 692.761 L899.766 692.761 L900.325 692.761 L900.885 692.761 L901.444 692.761 L902.003 692.761 L902.562 692.761 L903.122 692.761 L903.681 692.761 L904.24 692.761 L904.799 692.761 L905.359 692.761 L905.918 692.761 L906.477 692.761 L907.036 692.761 L907.596 692.761 L908.155 692.761 L908.714 692.761 L909.273 692.761 L909.833 692.761 L910.392 692.761 L910.951 692.761 L911.51 692.761 L912.07 692.761 L912.629 692.761 L913.188 692.761 L913.747 692.761 L914.307 692.761 L914.866 692.761 L915.425 692.761 L915.984 692.761 L916.544 692.761 L917.103 692.761 L917.662 692.761 L918.221 692.761 L918.781 692.761 L919.34 692.761 L919.899 692.761 L920.458 692.761 L921.018 692.761 L921.577 692.761 L922.136 692.761 L922.695 692.761 L923.255 692.761 L923.814 692.761 L924.373 692.761 L924.932 692.761 L925.492 692.761 L926.051 692.761 L926.61 692.761 L927.169 692.761 L927.729 692.761 L928.288 692.761 L928.847 692.761 L929.406 692.761 L929.966 692.761 L930.525 692.761 L931.084 692.761 L931.644 692.761 L932.203 692.761 L932.762 692.761 L933.321 692.761 L933.881 692.761 L934.44 692.761 L934.999 692.761 L935.558 692.761 L936.118 692.761 L936.677 692.761 L937.236 692.761 L937.795 692.761 L938.355 692.761 L938.914 692.761 L939.473 692.761 L940.032 692.761 L940.592 692.761 L941.151 692.761 L941.71 692.761 L942.269 692.761 L942.829 692.761 L943.388 692.761 L943.947 692.761 L944.506 692.761 L945.066 692.761 L945.625 692.761 L946.184 692.761 L946.743 692.761 L947.303 692.761 L947.862 692.761 L948.421 692.761 L948.98 692.761 L949.54 692.761 L950.099 692.761 L950.658 692.761 L951.217 692.761 L951.777 692.761 L952.336 692.761 L952.895 692.761 L953.454 692.761 L954.014 692.761 L954.573 692.761 L955.132 692.761 L955.691 692.761 L956.251 692.761 L956.81 692.761 L957.369 692.761 L957.928 692.761 L958.488 692.761 L959.047 692.761 L959.606 692.761 L960.165 692.761 L960.725 692.761 L961.284 692.761 L961.843 692.761 L962.402 692.761 L962.962 692.761 L963.521 692.761 L964.08 692.761 L964.639 692.761 L965.199 692.761 L965.758 692.761 L966.317 692.761 L966.876 692.761 L967.436 692.761 L967.995 692.761 L968.554 692.761 L969.113 692.761 L969.673 692.761 L970.232 692.761 L970.791 692.761 L971.35 692.761 L971.91 692.761 L972.469 692.761 L973.028 692.761 L973.587 692.761 L974.147 692.761 L974.706 692.761 L975.265 692.761 L975.824 692.761 L976.384 692.761 L976.943 692.761 L977.502 692.761 L978.061 692.761 L978.621 692.761 L979.18 692.761 L979.739 692.761 L980.298 692.761 L980.858 692.761 L981.417 692.761 L981.976 692.761 L982.535 692.761 L983.095 692.761 L983.654 692.761 L984.213 692.761 L984.772 692.761 L985.332 692.761 L985.891 692.761 L986.45 692.761 L987.009 692.761 L987.569 692.761 L988.128 692.761 L988.687 692.761 L989.246 692.761 L989.806 692.761 L990.365 692.761 L990.924 692.761 L991.483 692.761 L992.043 692.761 L992.602 692.761 L993.161 692.761 L993.72 692.761 L994.28 692.761 L994.839 692.761 L995.398 692.761 L995.957 692.761 L996.517 692.761 L997.076 692.761 L997.635 692.761 L998.194 692.761 L998.754 692.761 L999.313 692.761 L999.872 692.761 L1000.43 692.761 L1000.99 692.761 L1001.55 692.761 L1002.11 692.761 L1002.67 692.761 L1003.23 692.761 L1003.79 692.761 L1004.35 692.761 L1004.91 692.761 L1005.46 692.761 L1006.02 692.761 L1006.58 692.761 L1007.14 692.761 L1007.7 692.761 L1008.26 692.761 L1008.82 692.761 L1009.38 692.761 L1009.94 692.761 L1010.5 692.761 L1011.06 692.761 L1011.62 692.761 L1012.18 692.761 L1012.73 692.761 L1013.29 692.761 L1013.85 692.761 L1014.41 692.761 L1014.97 692.761 L1015.53 692.761 L1016.09 692.761 L1016.65 692.761 L1017.21 692.761 L1017.77 692.761 L1018.33 692.761 L1018.89 692.761 L1019.45 692.761 L1020.01 692.761 L1020.56 692.761 L1021.12 692.761 L1021.68 692.761 L1022.24 692.761 L1022.8 692.761 L1023.36 692.761 L1023.92 692.761 L1024.48 692.761 L1025.04 692.761 L1025.6 692.761 L1026.16 692.761 L1026.72 692.761 L1027.28 692.761 L1027.83 692.761 L1028.39 692.761 L1028.95 692.761 L1029.51 692.761 L1030.07 692.761 L1030.63 692.761 L1031.19 692.761 L1031.75 692.761 L1032.31 692.761 L1032.87 692.761 L1033.43 692.761 L1033.99 692.761 L1034.55 692.761 L1035.1 692.761 L1035.66 692.761 L1036.22 692.761 L1036.78 692.761 L1037.34 692.761 L1037.9 692.761 L1038.46 692.761 L1039.02 692.761 L1039.58 692.761 L1040.14 692.761 L1040.7 692.761 L1041.26 692.761 L1041.82 692.761 L1042.38 692.761 L1042.93 692.761 L1043.49 692.761 L1044.05 692.761 L1044.61 692.761 L1045.17 692.761 L1045.73 692.761 L1046.29 692.761 L1046.85 692.761 L1047.41 692.761 L1047.97 692.761 L1048.53 692.761 L1049.09 692.761 L1049.65 692.761 L1050.2 692.761 L1050.76 692.761 L1051.32 692.761 L1051.88 692.761 L1052.44 692.761 L1053 692.761 L1053.56 692.761 L1054.12 692.761 L1054.68 692.761 L1055.24 692.761 L1055.8 692.761 L1056.36 692.761 L1056.92 692.761 L1057.48 692.761 L1058.03 692.761 L1058.59 692.761 L1059.15 692.761 L1059.71 692.761 L1060.27 692.761 L1060.83 692.761 L1061.39 692.761 L1061.95 692.761 L1062.51 692.761 L1063.07 692.761 L1063.63 692.761 L1064.19 692.761 L1064.75 692.761 L1065.3 692.761 L1065.86 692.761 L1066.42 692.761 L1066.98 692.761 L1067.54 692.761 L1068.1 692.761 L1068.66 692.761 L1069.22 692.761 L1069.78 692.761 L1070.34 692.761 L1070.9 692.761 L1071.46 692.761 L1072.02 692.761 L1072.57 692.761 L1073.13 692.761 L1073.69 692.761 L1074.25 692.761 L1074.81 692.761 L1075.37 692.761 L1075.93 692.761 L1076.49 692.761 L1077.05 692.761 L1077.61 692.761 L1078.17 692.761 L1078.73 692.761 L1079.29 692.761 L1079.85 692.761 L1080.4 692.761 L1080.96 692.761 L1081.52 692.761 L1082.08 692.761 L1082.64 692.761 L1083.2 692.761 L1083.76 692.761 L1084.32 692.761 L1084.88 692.761 L1085.44 692.761 L1086 692.761 L1086.56 692.761 L1087.12 692.761 L1087.67 692.761 L1088.23 692.761 L1088.79 692.761 L1089.35 692.761 L1089.91 692.761 L1090.47 692.761 L1091.03 692.761 L1091.59 692.761 L1092.15 692.761 L1092.71 692.761 L1093.27 692.761 L1093.83 692.761 L1094.39 692.761 L1094.94 692.761 L1095.5 692.761 L1096.06 692.761 L1096.62 692.761 L1097.18 692.761 L1097.74 692.761 L1098.3 692.761 L1098.86 692.761 L1099.42 692.761 L1099.98 692.761 L1100.54 692.761 L1101.1 692.761 L1101.66 692.761 L1102.22 692.761 L1102.77 692.761 L1103.33 692.761 L1103.89 692.761 L1104.45 692.761 L1105.01 692.761 L1105.57 692.761 L1106.13 692.761 L1106.69 692.761 L1107.25 692.761 L1107.81 692.761 L1108.37 692.761 L1108.93 692.761 L1109.49 692.761 L1110.04 692.761 L1110.6 692.761 L1111.16 692.761 L1111.72 692.761 L1112.28 692.761 L1112.84 692.761 L1113.4 692.761 L1113.96 692.761 L1114.52 692.761 L1115.08 692.761 L1115.64 692.761 L1116.2 692.761 L1116.76 692.761 L1117.31 692.761 L1117.87 692.761 L1118.43 692.761 L1118.99 692.761 L1119.55 692.761 L1120.11 692.761 L1120.67 692.761 L1121.23 692.761 L1121.79 692.761 L1122.35 692.761 L1122.91 692.761 L1123.47 692.761 L1124.03 692.761 L1124.59 692.761 L1125.14 692.761 L1125.7 692.761 L1126.26 692.761 L1126.82 692.761 L1127.38 692.761 L1127.94 692.761 L1128.5 692.761 L1129.06 692.761 L1129.62 692.761 L1130.18 692.761 L1130.74 692.761 L1131.3 692.761 L1131.86 692.761 L1132.41 692.761 L1132.97 692.761 L1133.53 692.761 L1134.09 692.761 L1134.65 692.761 L1135.21 692.761 L1135.77 692.761 L1136.33 692.761 L1136.89 692.761 L1137.45 692.761 L1138.01 692.761 L1138.57 692.761 L1139.13 692.761 L1139.68 692.761 L1140.24 692.761 L1140.8 692.761 L1141.36 692.761 L1141.92 692.761 L1142.48 692.761 L1143.04 692.761 L1143.6 692.761 L1144.16 692.761 L1144.72 692.761 L1145.28 692.761 L1145.84 692.761 L1146.4 692.761 L1146.96 692.761 L1147.51 692.761 L1148.07 692.761 L1148.63 692.761 L1149.19 692.761 L1149.75 692.761 L1150.31 692.761 L1150.87 692.761 L1151.43 692.761 L1151.99 692.761 L1152.55 692.761 L1153.11 692.761 L1153.67 692.761 L1154.23 692.761 L1154.78 692.761 L1155.34 692.761 L1155.9 692.761 L1156.46 692.761 L1157.02 692.761 L1157.58 692.761 L1158.14 692.761 L1158.7 692.761 L1159.26 692.761 L1159.82 692.761 L1160.38 692.761 L1160.94 692.761 L1161.5 692.761 L1162.05 692.761 L1162.61 692.761 L1163.17 692.761 L1163.73 692.761 L1164.29 692.761 L1164.85 692.761 L1165.41 692.761 L1165.97 692.761 L1166.53 692.761 L1167.09 692.761 L1167.65 692.761 L1168.21 692.761 L1168.77 692.761 L1169.33 692.761 L1169.88 692.761 L1170.44 692.761 L1171 692.761 L1171.56 692.761 L1172.12 692.761 L1172.68 692.761 L1173.24 692.761 L1173.8 692.761 L1174.36 692.761 L1174.92 692.761 L1175.48 692.761 L1176.04 692.761 L1176.6 692.761 L1177.15 692.761 L1177.71 692.761 L1178.27 692.761 L1178.83 692.761 L1179.39 692.761 L1179.95 692.761 L1180.51 692.761 L1181.07 692.761 L1181.63 692.761 L1182.19 692.761 L1182.75 692.761 L1183.31 692.761 L1183.87 692.761 L1184.43 692.761 L1184.98 692.761 L1185.54 692.761 L1186.1 692.761 L1186.66 692.761 L1187.22 692.761 L1187.78 692.761 L1188.34 692.761 L1188.9 692.761 L1189.46 692.761 L1190.02 692.761 L1190.58 692.761 L1191.14 692.761 L1191.7 692.761 L1192.25 692.761 L1192.81 692.761 L1193.37 692.761 L1193.93 692.761 L1194.49 692.761 L1195.05 692.761 L1195.61 692.761 L1196.17 692.761 L1196.73 692.761 L1197.29 692.761 L1197.85 692.761 L1198.41 692.761 L1198.97 692.761 L1199.52 692.761 L1200.08 692.761 L1200.64 692.761 L1201.2 692.761 L1201.76 692.761 L1202.32 692.761 L1202.88 692.761 L1203.44 692.761 L1204 692.761 L1204.56 692.761 L1205.12 692.761 L1205.68 692.761 L1206.24 692.761 L1206.8 692.761 L1207.35 692.761 L1207.91 692.761 L1208.47 692.761 L1209.03 692.761 L1209.59 692.761 L1210.15 692.761 L1210.71 692.761 L1211.27 692.761 L1211.83 692.761 L1212.39 692.761 L1212.95 692.761 L1213.51 692.761 L1214.07 692.761 L1214.62 692.761 L1215.18 692.761 L1215.74 692.761 L1216.3 692.761 L1216.86 692.761 L1217.42 692.761 L1217.98 692.761 L1218.54 692.761 L1219.1 692.761 L1219.66 692.761 L1220.22 692.761 L1220.78 692.761 L1221.34 692.761 L1221.89 692.761 L1222.45 692.761 L1223.01 692.761 L1223.57 692.761 L1224.13 692.761 L1224.69 692.761 L1225.25 692.761 L1225.81 692.761 L1226.37 692.761 L1226.93 692.761 L1227.49 692.761 L1228.05 692.761 L1228.61 692.761 L1229.17 692.761 L1229.72 692.761 L1230.28 692.761 L1230.84 692.761 L1231.4 692.761 L1231.96 692.761 L1232.52 692.761 L1233.08 692.761 L1233.64 692.761 L1234.2 692.761 L1234.76 692.761 L1235.32 692.761 L1235.88 692.761 L1236.44 692.761 L1236.99 692.761 L1237.55 692.761 L1238.11 692.761 L1238.67 692.761 L1239.23 692.761 L1239.79 692.761 L1240.35 692.761 L1240.91 692.761 L1241.47 692.761 L1242.03 692.761 L1242.59 692.761 L1243.15 692.761 L1243.71 692.761 L1244.26 692.761 L1244.82 692.761 L1245.38 692.761 L1245.94 692.761 L1246.5 692.761 L1247.06 692.761 L1247.62 692.761 L1248.18 692.761 L1248.74 692.761 L1249.3 692.761 L1249.86 692.761 L1250.42 692.761 L1250.98 692.761 L1251.54 692.761 L1252.09 692.761 L1252.65 692.761 L1253.21 692.761 L1253.77 692.761 L1254.33 692.761 L1254.89 692.761 L1255.45 692.761 L1256.01 692.761 L1256.57 692.761 L1257.13 692.761 L1257.69 692.761 L1258.25 692.761 L1258.81 692.761 L1259.36 692.761 L1259.92 692.761 L1260.48 692.761 L1261.04 692.761 L1261.6 692.761 L1262.16 692.761 L1262.72 692.761 L1263.28 692.761 L1263.84 692.761 L1264.4 692.761 L1264.96 692.761 L1265.52 692.761 L1266.08 692.761 L1266.63 692.761 L1267.19 692.761 L1267.75 692.761 L1268.31 692.761 L1268.87 692.761 L1269.43 692.761 L1269.99 692.761 L1270.55 692.761 L1271.11 692.761 L1271.67 692.761 L1272.23 692.761 L1272.79 692.761 L1273.35 692.761 L1273.91 692.761 L1274.46 692.761 L1275.02 692.761 L1275.58 692.761 L1276.14 692.761 L1276.7 692.761 L1277.26 692.761 L1277.82 692.761 L1278.38 692.761 L1278.94 692.761 L1279.5 692.761 L1280.06 692.761 L1280.62 692.761 L1281.18 692.761 L1281.73 692.761 L1282.29 692.761 L1282.85 692.761 L1283.41 692.761 L1283.97 692.761 L1284.53 692.761 L1285.09 692.761 L1285.65 692.761 L1286.21 692.761 L1286.77 692.761 L1287.33 692.761 L1287.89 692.761 L1288.45 692.761 L1289 692.761 L1289.56 692.761 L1290.12 692.761 L1290.68 692.761 L1291.24 692.761 L1291.8 692.761 L1292.36 692.761 L1292.92 692.761 L1293.48 692.761 L1294.04 692.761 L1294.6 692.761 L1295.16 692.761 L1295.72 692.761 L1296.28 692.761 L1296.83 692.761 L1297.39 692.761 L1297.95 692.761 L1298.51 692.761 L1299.07 692.761 L1299.63 692.761 L1300.19 692.761 L1300.75 692.761 L1301.31 692.761 L1301.87 692.761 L1302.43 692.761 L1302.99 692.761 L1303.55 692.761 L1304.1 692.761 L1304.66 692.761 L1305.22 692.761 L1305.78 692.761 L1306.34 692.761 L1306.9 692.761 L1307.46 692.761 L1308.02 692.761 L1308.58 692.761 L1309.14 692.761 L1309.7 692.761 L1310.26 692.761 L1310.82 692.761 L1311.38 692.761 L1311.93 692.761 L1312.49 692.761 L1313.05 692.761 L1313.61 692.761 L1314.17 692.761 L1314.73 692.761 L1315.29 692.761 L1315.85 692.761 L1316.41 692.761 L1316.97 692.761 L1317.53 692.761 L1318.09 692.761 L1318.65 692.761 L1319.2 692.761 L1319.76 692.761 L1320.32 692.761 L1320.88 692.761 L1321.44 692.761 L1322 692.761 L1322.56 692.761 L1323.12 692.761 L1323.68 692.761 L1324.24 692.761 L1324.8 692.761 L1325.36 692.761 L1325.92 692.761 L1326.47 692.761 L1327.03 692.761 L1327.59 692.761 L1328.15 692.761 L1328.71 692.761 L1329.27 692.761 L1329.83 692.761 L1330.39 692.761 L1330.95 692.761 L1331.51 692.761 L1332.07 692.761 L1332.63 692.761 L1333.19 692.761 L1333.75 692.761 L1334.3 692.761 L1334.86 692.761 L1335.42 692.761 L1335.98 692.761 L1336.54 692.761 L1337.1 692.761 L1337.66 692.761 L1338.22 692.761 L1338.78 692.761 L1339.34 692.761 L1339.9 692.761 L1340.46 692.761 L1341.02 692.761 L1341.57 692.761 L1342.13 692.761 L1342.69 692.761 L1343.25 692.761 L1343.81 692.761 L1344.37 692.761 L1344.93 692.761 L1345.49 692.761 L1346.05 692.761 L1346.61 692.761 L1347.17 692.761 L1347.73 692.761 L1348.29 692.761 L1348.84 692.761 L1349.4 692.761 L1349.96 692.761 L1350.52 692.761 L1351.08 692.761 L1351.64 692.761 L1352.2 692.761 L1352.76 692.761 L1353.32 692.761 L1353.88 692.761 L1354.44 692.761 L1355 692.761 L1355.56 692.761 L1356.12 692.761 L1356.67 692.761 L1357.23 692.761 L1357.79 692.761 L1358.35 692.761 L1358.91 692.761 L1359.47 692.761 L1360.03 692.761 L1360.59 692.761 L1361.15 692.761 L1361.71 692.761 L1362.27 692.761 L1362.83 692.761 L1363.39 692.761 L1363.94 692.761 L1364.5 692.761 L1365.06 692.761 L1365.62 692.761 L1366.18 692.761 L1366.74 692.761 L1367.3 692.761 L1367.86 692.761 L1368.42 692.761 L1368.98 692.761 L1369.54 692.761 L1370.1 692.761 L1370.66 692.761 L1371.21 692.761 L1371.77 692.761 L1372.33 692.761 L1372.89 692.761 L1373.45 692.761 L1374.01 692.761 L1374.57 692.761 L1375.13 692.761 L1375.69 692.761 L1376.25 692.761 L1376.81 692.761 L1377.37 692.761 L1377.93 692.761 L1378.49 692.761 L1379.04 692.761 L1379.6 692.761 L1380.16 692.761 L1380.72 692.761 L1381.28 692.761 L1381.84 692.761 L1382.4 692.761 L1382.96 692.761 L1383.52 692.761 L1384.08 692.761 L1384.64 692.761 L1385.2 692.761 L1385.76 692.761 L1386.31 692.761 L1386.87 692.761 L1387.43 692.761 L1387.99 692.761 L1388.55 692.761 L1389.11 692.761 L1389.67 692.761 L1390.23 692.761 L1390.79 692.761 L1391.35 692.761 L1391.91 692.761 L1392.47 692.761 L1393.03 692.761 L1393.58 692.761 L1394.14 692.761 L1394.7 692.761 L1395.26 692.761 L1395.82 692.761 L1396.38 692.761 L1396.94 692.761 L1397.5 692.761 L1398.06 692.761 L1398.62 692.761 L1399.18 692.761 L1399.74 692.761 L1400.3 692.761 L1400.86 692.761 L1401.41 692.761 L1401.97 692.761 L1402.53 692.761 L1403.09 692.761 L1403.65 692.761 L1404.21 692.761 L1404.77 692.761 L1405.33 692.761 L1405.89 692.761 L1406.45 692.761 L1407.01 692.761 L1407.57 692.761 L1408.13 692.761 L1408.68 692.761 L1409.24 692.761 L1409.8 692.761 L1410.36 692.761 L1410.92 692.761 L1411.48 692.761 L1412.04 692.761 L1412.6 692.761 L1413.16 692.761 L1413.72 692.761 L1414.28 692.761 L1414.84 692.761 L1415.4 692.761 L1415.95 692.761 L1416.51 692.761 L1417.07 692.761 L1417.63 692.761 L1418.19 692.761 L1418.75 692.761 L1419.31 692.761 L1419.87 692.761 L1420.43 692.761 L1420.99 692.761 L1421.55 692.761 L1422.11 692.761 L1422.67 692.761 L1423.23 692.761 L1423.78 692.761 L1424.34 692.761 L1424.9 692.761 L1425.46 692.761 L1426.02 692.761 L1426.58 692.761 L1427.14 692.761 L1427.7 692.761 L1428.26 692.761 L1428.82 692.761 L1429.38 692.761 L1429.94 692.761 L1430.5 692.761 L1431.05 692.761 L1431.61 692.761 L1432.17 692.761 L1432.73 692.761 L1433.29 692.761 L1433.85 692.761 L1434.41 692.761 L1434.97 692.761 L1435.53 692.761 L1436.09 692.761 L1436.65 692.761 L1437.21 692.761 L1437.77 692.761 L1438.33 692.761 L1438.88 692.761 L1439.44 692.761 L1440 692.761 L1440.56 692.761 L1441.12 692.761 L1441.68 692.761 L1442.24 692.761 L1442.8 692.761 L1443.36 692.761 L1443.92 692.761 L1444.48 692.761 L1445.04 692.761 L1445.6 692.761 L1446.15 692.761 L1446.71 692.761 L1447.27 692.761 L1447.83 692.761 L1448.39 692.761 L1448.95 692.761 L1449.51 692.761 L1450.07 692.761 L1450.63 692.761 L1451.19 692.761 L1451.75 692.761 L1452.31 692.761 L1452.87 692.761 L1453.42 692.761 L1453.98 692.761 L1454.54 692.761 L1455.1 692.761 L1455.66 692.761 L1456.22 692.761 L1456.78 692.761 L1457.34 692.761 L1457.9 692.761 L1458.46 692.761 L1459.02 692.761 L1459.58 692.761 L1460.14 692.761 L1460.7 692.761 L1461.25 692.761 L1461.81 692.761 L1462.37 692.761 L1462.93 692.761 L1463.49 692.761 L1464.05 692.761 L1464.61 692.761 L1465.17 692.761 L1465.73 692.761 L1466.29 692.761 L1466.85 692.761 L1467.41 692.761 L1467.97 692.761 L1468.52 692.761 L1469.08 692.761 L1469.64 692.761 L1470.2 692.761 L1470.76 692.761 L1471.32 692.761 L1471.88 692.761 L1472.44 692.761 L1473 692.761 L1473.56 692.761 L1474.12 692.761 L1474.68 692.761 L1475.24 692.761 L1475.79 692.761 L1476.35 692.761 L1476.91 692.761 L1477.47 692.761 L1478.03 692.761 L1478.59 692.761 L1479.15 692.761 L1479.71 692.761 L1480.27 692.761 L1480.83 692.761 L1481.39 692.761 L1481.95 692.761 L1482.51 692.761 L1483.07 692.761 L1483.62 692.761 L1484.18 692.761 L1484.74 692.761 L1485.3 692.761 L1485.86 692.761 L1486.42 692.761 L1486.98 692.761 L1487.54 692.761 L1488.1 692.761 L1488.66 692.761 L1489.22 692.761 L1489.78 692.761 L1490.34 692.761 L1490.89 692.761 L1491.45 692.761 L1492.01 692.761 L1492.57 692.761 L1493.13 692.761 L1493.69 692.761 L1494.25 692.761 L1494.81 692.761 L1495.37 692.761 L1495.93 692.761 L1496.49 692.761 L1497.05 692.761 L1497.61 692.761 L1498.16 692.761 L1498.72 692.761 L1499.28 692.761 L1499.84 692.761 L1500.4 692.761 L1500.96 692.761 L1501.52 692.761 L1502.08 692.761 L1502.64 692.761 L1503.2 692.761 L1503.76 692.761 L1504.32 692.761 L1504.88 692.761 L1505.44 692.761 L1505.99 692.761 L1506.55 692.761 L1507.11 692.761 L1507.67 692.761 L1508.23 692.761 L1508.79 692.761 L1509.35 692.761 L1509.91 692.761 L1510.47 692.761 L1511.03 692.761 L1511.59 692.761 L1512.15 692.761 L1512.71 692.761 L1513.26 692.761 L1513.82 692.761 L1514.38 692.761 L1514.94 692.761 L1515.5 692.761 L1516.06 692.761 L1516.62 692.761 L1517.18 692.761 L1517.74 692.761 L1518.3 692.761 L1518.86 692.761 L1519.42 692.761 L1519.98 692.761 L1520.53 692.761 L1521.09 692.761 L1521.65 692.761 L1522.21 692.761 L1522.77 692.761 L1523.33 692.761 L1523.89 692.761 L1524.45 692.761 L1525.01 692.761 L1525.57 692.761 L1526.13 692.761 L1526.69 692.761 L1527.25 692.761 L1527.81 692.761 L1528.36 692.761 L1528.92 692.761 L1529.48 692.761 L1530.04 692.761 L1530.6 692.761 L1531.16 692.761 L1531.72 692.761 L1532.28 692.761 L1532.84 692.761 L1533.4 692.761 L1533.96 692.761 L1534.52 692.761 L1535.08 692.761 L1535.63 692.761 L1536.19 692.761 L1536.75 692.761 L1537.31 692.761 L1537.87 692.761 L1538.43 692.761 L1538.99 692.761 L1539.55 692.761 L1540.11 692.761 L1540.67 692.761 L1541.23 692.761 L1541.79 692.761 L1542.35 692.761 L1542.9 692.761 L1543.46 692.761 L1544.02 692.761 L1544.58 692.761 L1545.14 692.761 L1545.7 692.761 L1546.26 692.761 L1546.82 692.761 L1547.38 692.761 L1547.94 692.761 L1548.5 692.761 L1549.06 692.761 L1549.62 692.761 L1550.18 692.761 L1550.73 692.761 L1551.29 692.761 L1551.85 692.761 L1552.41 692.761 L1552.97 692.761 L1553.53 692.761 L1554.09 692.761 L1554.65 692.761 L1555.21 692.761 L1555.77 692.761 L1556.33 692.761 L1556.89 692.761 L1557.45 692.761 L1558 692.761 L1558.56 692.761 L1559.12 692.761 L1559.68 692.761 L1560.24 692.761 L1560.8 692.761 L1561.36 692.761 L1561.92 692.761 L1562.48 692.761 L1563.04 692.761 L1563.6 692.761 L1564.16 692.761 L1564.72 692.761 L1565.28 692.761 L1565.83 692.761 L1566.39 692.761 L1566.95 692.761 L1567.51 692.761 L1568.07 692.761 L1568.63 692.761 L1569.19 692.761 L1569.75 692.761 L1570.31 692.761 L1570.87 692.761 L1571.43 692.761 L1571.99 692.761 L1572.55 692.761 L1573.1 692.761 L1573.66 692.761 L1574.22 692.761 L1574.78 692.761 L1575.34 692.761 L1575.9 692.761 L1576.46 692.761 L1577.02 692.761 L1577.58 692.761 L1578.14 692.761 L1578.7 692.761 L1579.26 692.761 L1579.82 692.761 L1580.37 692.761 L1580.93 692.761 L1581.49 692.761 L1582.05 692.761 L1582.61 692.761 L1583.17 692.761 L1583.73 692.761 L1584.29 692.761 L1584.85 692.761 L1585.41 692.761 L1585.97 692.761 L1586.53 692.761 L1587.09 692.761 L1587.65 692.761 L1588.2 692.761 L1588.76 692.761 L1589.32 692.761 L1589.88 692.761 L1590.44 692.761 L1591 692.761 L1591.56 692.761 L1592.12 692.761 L1592.68 692.761 L1593.24 692.761 L1593.8 692.761 L1594.36 692.761 L1594.92 692.761 L1595.47 692.761 L1596.03 692.761 L1596.59 692.761 L1597.15 692.761 L1597.71 692.761 L1598.27 692.761 L1598.83 692.761 L1599.39 692.761 L1599.95 692.761 L1600.51 692.761 L1601.07 692.761 L1601.63 692.761 L1602.19 692.761 L1602.74 692.761 L1603.3 692.761 L1603.86 692.761 L1604.42 692.761 L1604.98 692.761 L1605.54 692.761 L1606.1 692.761 L1606.66 692.761 L1607.22 692.761 L1607.78 692.761 L1608.34 692.761 L1608.9 692.761 L1609.46 692.761 L1610.02 692.761 L1610.57 692.761 L1611.13 692.761 L1611.69 692.761 L1612.25 692.761 L1612.81 692.761 L1613.37 692.761 L1613.93 692.761 L1614.49 692.761 L1615.05 692.761 L1615.61 692.761 L1616.17 692.761 L1616.73 692.761 L1617.29 692.761 L1617.84 692.761 L1618.4 692.761 L1618.96 692.761 L1619.52 692.761 L1620.08 692.761 L1620.64 692.761 L1621.2 692.761 L1621.76 692.761 L1622.32 692.761 L1622.88 692.761 L1623.44 692.761 L1624 692.761 L1624.56 692.761 L1625.11 692.761 L1625.67 692.761 L1626.23 692.761 L1626.79 692.761 L1627.35 692.761 L1627.91 692.761 L1628.47 692.761 L1629.03 692.761 L1629.59 692.761 L1630.15 692.761 L1630.71 692.761 L1631.27 692.761 L1631.83 692.761 L1632.39 692.761 L1632.94 692.761 L1633.5 692.761 L1634.06 692.761 L1634.62 692.761 L1635.18 692.761 L1635.74 692.761 L1636.3 692.761 L1636.86 692.761 L1637.42 692.761 L1637.98 692.761 L1638.54 692.761 L1639.1 692.761 L1639.66 692.761 L1640.21 692.761 L1640.77 692.761 L1641.33 692.761 L1641.89 692.761 L1642.45 692.761 L1643.01 692.761 L1643.57 692.761 L1644.13 692.761 L1644.69 692.761 L1645.25 692.761 L1645.81 692.761 L1646.37 692.761 L1646.93 692.761 L1647.48 692.761 L1648.04 692.761 L1648.6 692.761 L1649.16 692.761 L1649.72 692.761 L1650.28 692.761 L1650.84 692.761 L1651.4 692.761 L1651.96 692.761 L1652.52 692.761 L1653.08 692.761 L1653.64 692.761 L1654.2 692.761 L1654.76 692.761 L1655.31 692.761 L1655.87 692.761 L1656.43 692.761 L1656.99 692.761 L1657.55 692.761 L1658.11 692.761 L1658.67 692.761 L1659.23 692.761 L1659.79 692.761 L1660.35 692.761 L1660.91 692.761 L1661.47 692.761 L1662.03 692.761 L1662.58 692.761 L1663.14 692.761 L1663.7 692.761 L1664.26 692.761 L1664.82 692.761 L1665.38 692.761 L1665.94 692.761 L1666.5 692.761 L1667.06 692.761 L1667.62 692.761 L1668.18 692.761 L1668.74 692.761 L1669.3 692.761 L1669.85 692.761 L1670.41 692.761 L1670.97 692.761 L1671.53 692.761 L1672.09 692.761 L1672.65 692.761 L1673.21 692.761 L1673.77 692.761 L1674.33 692.761 L1674.89 692.761 L1675.45 692.761 L1676.01 692.761 L1676.57 692.761 L1677.13 692.761 L1677.68 692.761 L1678.24 692.761 L1678.8 692.761 L1679.36 692.761 L1679.92 692.761 L1680.48 692.761 L1681.04 692.761 L1681.6 692.761 L1682.16 692.761 L1682.72 692.761 L1683.28 692.761 L1683.84 692.761 L1684.4 692.761 L1684.95 692.761 L1685.51 692.761 L1686.07 692.761 L1686.63 692.761 L1687.19 692.761 L1687.75 692.761 L1688.31 692.761 L1688.87 692.761 L1689.43 692.761 L1689.99 692.761 L1690.55 692.761 L1691.11 692.761 L1691.67 692.761 L1692.23 692.761 L1692.78 692.761 L1693.34 692.761 L1693.9 692.761 L1694.46 692.761 L1695.02 692.761 L1695.58 692.761 L1696.14 692.761 L1696.7 692.761 L1697.26 692.761 L1697.82 692.761 L1698.38 692.761 L1698.94 692.761 L1699.5 692.761 L1700.05 692.761 L1700.61 692.761 L1701.17 692.761 L1701.73 692.761 L1702.29 692.761 L1702.85 692.761 L1703.41 692.761 L1703.97 692.761 L1704.53 692.761 L1705.09 692.761 L1705.65 692.761 L1706.21 692.761 L1706.77 692.761 L1707.32 692.761 L1707.88 692.761 L1708.44 692.761 L1709 692.761 L1709.56 692.761 L1710.12 692.761 L1710.68 692.761 L1711.24 692.761 L1711.8 692.761 L1712.36 692.761 L1712.92 692.761 L1713.48 692.761 L1714.04 692.761 L1714.6 692.761 L1715.15 692.761 L1715.71 692.761 L1716.27 692.761 L1716.83 692.761 L1717.39 692.761 L1717.95 692.761 L1718.51 692.761 L1719.07 692.761 L1719.63 692.761 L1720.19 692.761 L1720.75 692.761 L1721.31 692.761 L1721.87 692.761 L1722.42 692.761 L1722.98 692.761 L1723.54 692.761 L1724.1 692.761 L1724.66 692.761 L1725.22 692.761 L1725.78 692.761 L1726.34 692.761 L1726.9 692.761 L1727.46 692.761 L1728.02 692.761 L1728.58 692.761 L1729.14 692.761 L1729.69 692.761 L1730.25 692.761 L1730.81 692.761 L1731.37 692.761 L1731.93 692.761 L1732.49 692.761 L1733.05 692.761 L1733.61 692.761 L1734.17 692.761 L1734.73 692.761 L1735.29 692.761 L1735.85 692.761 L1736.41 692.761 L1736.97 692.761 L1737.52 692.761 L1738.08 692.761 L1738.64 692.761 L1739.2 692.761 L1739.76 692.761 L1740.32 692.761 L1740.88 692.761 L1741.44 692.761 L1742 692.761 L1742.56 692.761 L1743.12 692.761 L1743.68 692.761 L1744.24 692.761 L1744.79 692.761 L1745.35 692.761 L1745.91 692.761 L1746.47 692.761 L1747.03 692.761 L1747.59 692.761 L1748.15 692.761 L1748.71 692.761 L1749.27 692.761 L1749.83 692.761 L1750.39 692.761 L1750.95 692.761 L1751.51 692.761 L1752.06 692.761 L1752.62 692.761 L1753.18 692.761 L1753.74 692.761 L1754.3 692.761 L1754.86 692.761 L1755.42 692.761 L1755.98 692.761 L1756.54 692.761 L1757.1 692.761 L1757.66 692.761 L1758.22 692.761 L1758.78 692.761 L1759.34 692.761 L1759.89 692.761 L1760.45 692.761 L1761.01 692.761 L1761.57 692.761 L1762.13 692.761 L1762.69 692.761 L1763.25 692.761 L1763.81 692.761 L1764.37 692.761 L1764.93 692.761 L1765.49 692.761 L1766.05 692.761 L1766.61 692.761 L1767.16 692.761 L1767.72 692.761 L1768.28 692.761 L1768.84 692.761 L1769.4 692.761 L1769.96 692.761 L1770.52 692.761 L1771.08 692.761 L1771.64 692.761 L1772.2 692.761 L1772.76 692.761 L1773.32 692.761 L1773.88 692.761 L1774.43 692.761 L1774.99 692.761 L1775.55 692.761 L1776.11 692.761 L1776.67 692.761 L1777.23 692.761 L1777.79 692.761 L1778.35 692.761 L1778.91 692.761 L1779.47 692.761 L1780.03 692.761 L1780.59 692.761 L1781.15 692.761 L1781.71 692.761 L1782.26 692.761 L1782.82 692.761 L1783.38 692.761 L1783.94 692.761 L1784.5 692.761 L1785.06 692.761 L1785.62 692.761 L1786.18 692.761 L1786.74 692.761 L1787.3 692.761 L1787.86 692.761 L1788.42 692.761 L1788.98 692.761 L1789.53 692.761 L1790.09 692.761 L1790.65 692.761 L1791.21 692.761 L1791.77 692.761 L1792.33 692.761 L1792.89 692.761 L1793.45 692.761 L1794.01 692.761 L1794.57 692.761 L1795.13 692.761 L1795.69 692.761 L1796.25 692.761 L1796.8 692.761 L1797.36 692.761 L1797.92 692.761 L1798.48 692.761 L1799.04 692.761 L1799.6 692.761 L1800.16 692.761 L1800.72 692.761 L1801.28 692.761 L1801.84 692.761 L1802.4 692.761 L1802.96 692.761 L1803.52 692.761 L1804.08 692.761 L1804.63 692.761 L1805.19 692.761 L1805.75 692.761 L1806.31 692.761 L1806.87 692.761 L1807.43 692.761 L1807.99 692.761 L1808.55 692.761 L1809.11 692.761 L1809.67 692.761 L1810.23 692.761 L1810.79 692.761 L1811.35 692.761 L1811.9 692.761 L1812.46 692.761 L1813.02 692.761 L1813.58 692.761 L1814.14 692.761 L1814.7 692.761 L1815.26 692.761 L1815.82 692.761 L1816.38 692.761 L1816.94 692.761 L1817.5 692.761 L1818.06 692.761 L1818.62 692.761 L1819.18 692.761 L1819.73 692.761 L1820.29 692.761 L1820.85 692.761 L1821.41 692.761 L1821.97 692.761 L1822.53 692.761 L1823.09 692.761 L1823.65 692.761 L1824.21 692.761 L1824.77 692.761 L1825.33 692.761 L1825.89 692.761 L1826.45 692.761 L1827 692.761 L1827.56 692.761 L1828.12 692.761 L1828.68 692.761 L1829.24 692.761 L1829.8 692.761 L1830.36 692.761 L1830.92 692.761 L1831.48 692.761 L1832.04 692.761 L1832.6 692.761 L1833.16 692.761 L1833.72 692.761 L1834.27 692.761 L1834.83 692.761 L1835.39 692.761 L1835.95 692.761 L1836.51 692.761 L1837.07 692.761 L1837.63 692.761 L1838.19 692.761 L1838.19 682.163 L1837.63 682.163 L1837.07 682.163 L1836.51 682.163 L1835.95 682.163 L1835.39 682.163 L1834.83 682.163 L1834.27 682.163 L1833.72 682.163 L1833.16 682.163 L1832.6 682.163 L1832.04 682.163 L1831.48 682.163 L1830.92 682.163 L1830.36 682.163 L1829.8 682.163 L1829.24 682.163 L1828.68 682.163 L1828.12 682.163 L1827.56 682.163 L1827 682.163 L1826.45 682.163 L1825.89 682.163 L1825.33 682.163 L1824.77 682.163 L1824.21 682.163 L1823.65 682.163 L1823.09 682.163 L1822.53 682.163 L1821.97 682.163 L1821.41 682.163 L1820.85 682.163 L1820.29 682.163 L1819.73 682.163 L1819.18 682.163 L1818.62 682.163 L1818.06 682.163 L1817.5 682.163 L1816.94 682.163 L1816.38 682.163 L1815.82 682.163 L1815.26 682.163 L1814.7 682.163 L1814.14 682.163 L1813.58 682.163 L1813.02 682.163 L1812.46 682.163 L1811.9 682.163 L1811.35 682.163 L1810.79 682.163 L1810.23 682.163 L1809.67 682.163 L1809.11 682.163 L1808.55 682.163 L1807.99 682.163 L1807.43 682.163 L1806.87 682.163 L1806.31 682.163 L1805.75 682.163 L1805.19 682.163 L1804.63 682.163 L1804.08 682.163 L1803.52 682.163 L1802.96 682.163 L1802.4 682.163 L1801.84 682.163 L1801.28 682.163 L1800.72 682.163 L1800.16 682.163 L1799.6 682.163 L1799.04 682.163 L1798.48 682.163 L1797.92 682.163 L1797.36 682.163 L1796.8 682.163 L1796.25 682.163 L1795.69 682.163 L1795.13 682.163 L1794.57 682.163 L1794.01 682.163 L1793.45 682.163 L1792.89 682.163 L1792.33 682.163 L1791.77 682.163 L1791.21 682.163 L1790.65 682.163 L1790.09 682.163 L1789.53 682.163 L1788.98 682.163 L1788.42 682.163 L1787.86 682.163 L1787.3 682.163 L1786.74 682.163 L1786.18 682.163 L1785.62 682.163 L1785.06 682.163 L1784.5 682.163 L1783.94 682.163 L1783.38 682.163 L1782.82 682.163 L1782.26 682.163 L1781.71 682.163 L1781.15 682.163 L1780.59 682.163 L1780.03 682.163 L1779.47 682.163 L1778.91 682.163 L1778.35 682.163 L1777.79 682.163 L1777.23 682.163 L1776.67 682.163 L1776.11 682.163 L1775.55 682.163 L1774.99 682.163 L1774.43 682.163 L1773.88 682.163 L1773.32 682.163 L1772.76 682.163 L1772.2 682.163 L1771.64 682.163 L1771.08 682.163 L1770.52 682.163 L1769.96 682.163 L1769.4 682.163 L1768.84 682.163 L1768.28 682.163 L1767.72 682.163 L1767.16 682.163 L1766.61 682.163 L1766.05 682.163 L1765.49 682.163 L1764.93 682.163 L1764.37 682.163 L1763.81 682.163 L1763.25 682.163 L1762.69 682.163 L1762.13 682.163 L1761.57 682.163 L1761.01 682.163 L1760.45 682.163 L1759.89 682.163 L1759.34 682.163 L1758.78 682.163 L1758.22 682.163 L1757.66 682.163 L1757.1 682.163 L1756.54 682.163 L1755.98 682.163 L1755.42 682.163 L1754.86 682.163 L1754.3 682.163 L1753.74 682.163 L1753.18 682.163 L1752.62 682.163 L1752.06 682.163 L1751.51 682.163 L1750.95 682.163 L1750.39 682.163 L1749.83 682.163 L1749.27 682.163 L1748.71 682.163 L1748.15 682.163 L1747.59 682.163 L1747.03 682.163 L1746.47 682.163 L1745.91 682.163 L1745.35 682.163 L1744.79 682.163 L1744.24 682.163 L1743.68 682.163 L1743.12 682.163 L1742.56 682.163 L1742 682.163 L1741.44 682.163 L1740.88 682.163 L1740.32 682.163 L1739.76 682.163 L1739.2 682.163 L1738.64 682.163 L1738.08 682.163 L1737.52 682.163 L1736.97 682.163 L1736.41 682.163 L1735.85 682.163 L1735.29 682.163 L1734.73 682.163 L1734.17 682.163 L1733.61 682.163 L1733.05 682.163 L1732.49 682.163 L1731.93 682.163 L1731.37 682.163 L1730.81 682.163 L1730.25 682.163 L1729.69 682.163 L1729.14 682.163 L1728.58 682.163 L1728.02 682.163 L1727.46 682.163 L1726.9 682.163 L1726.34 682.163 L1725.78 682.163 L1725.22 682.163 L1724.66 682.163 L1724.1 682.163 L1723.54 682.163 L1722.98 682.163 L1722.42 682.163 L1721.87 682.163 L1721.31 682.163 L1720.75 682.163 L1720.19 682.163 L1719.63 682.163 L1719.07 682.163 L1718.51 682.163 L1717.95 682.163 L1717.39 682.163 L1716.83 682.163 L1716.27 682.163 L1715.71 682.163 L1715.15 682.163 L1714.6 682.163 L1714.04 682.163 L1713.48 682.163 L1712.92 682.163 L1712.36 682.163 L1711.8 682.163 L1711.24 682.163 L1710.68 682.163 L1710.12 682.163 L1709.56 682.163 L1709 682.163 L1708.44 682.163 L1707.88 682.163 L1707.32 682.163 L1706.77 682.163 L1706.21 682.163 L1705.65 682.163 L1705.09 682.163 L1704.53 682.163 L1703.97 682.163 L1703.41 682.163 L1702.85 682.163 L1702.29 682.163 L1701.73 682.163 L1701.17 682.163 L1700.61 682.163 L1700.05 682.163 L1699.5 682.163 L1698.94 682.163 L1698.38 682.163 L1697.82 682.163 L1697.26 682.163 L1696.7 682.163 L1696.14 682.163 L1695.58 682.163 L1695.02 682.163 L1694.46 682.163 L1693.9 682.163 L1693.34 682.163 L1692.78 682.163 L1692.23 682.163 L1691.67 682.163 L1691.11 682.163 L1690.55 682.163 L1689.99 682.163 L1689.43 682.163 L1688.87 682.163 L1688.31 682.163 L1687.75 682.163 L1687.19 682.163 L1686.63 682.163 L1686.07 682.163 L1685.51 682.163 L1684.95 682.163 L1684.4 682.163 L1683.84 682.163 L1683.28 682.163 L1682.72 682.163 L1682.16 682.163 L1681.6 682.163 L1681.04 682.163 L1680.48 682.163 L1679.92 682.163 L1679.36 682.163 L1678.8 682.163 L1678.24 682.163 L1677.68 682.163 L1677.13 682.163 L1676.57 682.163 L1676.01 682.163 L1675.45 682.163 L1674.89 682.163 L1674.33 682.163 L1673.77 682.163 L1673.21 682.163 L1672.65 682.163 L1672.09 682.163 L1671.53 682.163 L1670.97 682.163 L1670.41 682.163 L1669.85 682.163 L1669.3 682.163 L1668.74 682.163 L1668.18 682.163 L1667.62 682.163 L1667.06 682.163 L1666.5 682.163 L1665.94 682.163 L1665.38 682.163 L1664.82 682.163 L1664.26 682.163 L1663.7 682.163 L1663.14 682.163 L1662.58 682.163 L1662.03 682.163 L1661.47 682.163 L1660.91 682.163 L1660.35 682.163 L1659.79 682.163 L1659.23 682.163 L1658.67 682.163 L1658.11 682.163 L1657.55 682.163 L1656.99 682.163 L1656.43 682.163 L1655.87 682.163 L1655.31 682.163 L1654.76 682.163 L1654.2 682.163 L1653.64 682.163 L1653.08 682.163 L1652.52 682.163 L1651.96 682.163 L1651.4 682.163 L1650.84 682.163 L1650.28 682.163 L1649.72 682.163 L1649.16 682.163 L1648.6 682.163 L1648.04 682.163 L1647.48 682.163 L1646.93 682.163 L1646.37 682.163 L1645.81 682.163 L1645.25 682.163 L1644.69 682.163 L1644.13 682.163 L1643.57 682.163 L1643.01 682.163 L1642.45 682.163 L1641.89 682.163 L1641.33 682.163 L1640.77 682.163 L1640.21 682.163 L1639.66 682.163 L1639.1 682.163 L1638.54 682.163 L1637.98 682.163 L1637.42 682.163 L1636.86 682.163 L1636.3 682.163 L1635.74 682.163 L1635.18 682.163 L1634.62 682.163 L1634.06 682.163 L1633.5 682.163 L1632.94 682.163 L1632.39 682.163 L1631.83 682.163 L1631.27 682.163 L1630.71 682.163 L1630.15 682.163 L1629.59 682.163 L1629.03 682.163 L1628.47 682.163 L1627.91 682.163 L1627.35 682.163 L1626.79 682.163 L1626.23 682.163 L1625.67 682.163 L1625.11 682.163 L1624.56 682.163 L1624 682.163 L1623.44 682.163 L1622.88 682.163 L1622.32 682.163 L1621.76 682.163 L1621.2 682.163 L1620.64 682.163 L1620.08 682.163 L1619.52 682.163 L1618.96 682.163 L1618.4 682.163 L1617.84 682.163 L1617.29 682.163 L1616.73 682.163 L1616.17 682.163 L1615.61 682.163 L1615.05 682.163 L1614.49 682.163 L1613.93 682.163 L1613.37 682.163 L1612.81 682.163 L1612.25 682.163 L1611.69 682.163 L1611.13 682.163 L1610.57 682.163 L1610.02 682.163 L1609.46 682.163 L1608.9 682.163 L1608.34 682.163 L1607.78 682.163 L1607.22 682.163 L1606.66 682.163 L1606.1 682.163 L1605.54 682.163 L1604.98 682.163 L1604.42 682.163 L1603.86 682.163 L1603.3 682.163 L1602.74 682.163 L1602.19 682.163 L1601.63 682.163 L1601.07 682.163 L1600.51 682.163 L1599.95 682.163 L1599.39 682.163 L1598.83 682.163 L1598.27 682.163 L1597.71 682.163 L1597.15 682.163 L1596.59 682.163 L1596.03 682.163 L1595.47 682.163 L1594.92 682.163 L1594.36 682.163 L1593.8 682.163 L1593.24 682.163 L1592.68 682.163 L1592.12 682.163 L1591.56 682.163 L1591 682.163 L1590.44 682.163 L1589.88 682.163 L1589.32 682.163 L1588.76 682.163 L1588.2 682.163 L1587.65 682.163 L1587.09 682.163 L1586.53 682.163 L1585.97 682.163 L1585.41 682.163 L1584.85 682.163 L1584.29 682.163 L1583.73 682.163 L1583.17 682.163 L1582.61 682.163 L1582.05 682.163 L1581.49 682.163 L1580.93 682.163 L1580.37 682.163 L1579.82 682.163 L1579.26 682.163 L1578.7 682.163 L1578.14 682.163 L1577.58 682.163 L1577.02 682.163 L1576.46 682.163 L1575.9 682.163 L1575.34 682.163 L1574.78 682.163 L1574.22 682.163 L1573.66 682.163 L1573.1 682.163 L1572.55 682.163 L1571.99 682.163 L1571.43 682.163 L1570.87 682.163 L1570.31 682.163 L1569.75 682.163 L1569.19 682.163 L1568.63 682.163 L1568.07 682.163 L1567.51 682.163 L1566.95 682.163 L1566.39 682.163 L1565.83 682.163 L1565.28 682.163 L1564.72 682.163 L1564.16 682.163 L1563.6 682.163 L1563.04 682.163 L1562.48 682.163 L1561.92 682.163 L1561.36 682.163 L1560.8 682.163 L1560.24 682.163 L1559.68 682.163 L1559.12 682.163 L1558.56 682.163 L1558 682.163 L1557.45 682.163 L1556.89 682.163 L1556.33 682.163 L1555.77 682.163 L1555.21 682.163 L1554.65 682.163 L1554.09 682.163 L1553.53 682.163 L1552.97 682.163 L1552.41 682.163 L1551.85 682.163 L1551.29 682.163 L1550.73 682.163 L1550.18 682.163 L1549.62 682.163 L1549.06 682.163 L1548.5 682.163 L1547.94 682.163 L1547.38 682.163 L1546.82 682.163 L1546.26 682.163 L1545.7 682.163 L1545.14 682.163 L1544.58 682.163 L1544.02 682.163 L1543.46 682.163 L1542.9 682.163 L1542.35 682.163 L1541.79 682.163 L1541.23 682.163 L1540.67 682.163 L1540.11 682.163 L1539.55 682.163 L1538.99 682.163 L1538.43 682.163 L1537.87 682.163 L1537.31 682.163 L1536.75 682.163 L1536.19 682.163 L1535.63 682.163 L1535.08 682.163 L1534.52 682.163 L1533.96 682.163 L1533.4 682.163 L1532.84 682.163 L1532.28 682.163 L1531.72 682.163 L1531.16 682.163 L1530.6 682.163 L1530.04 682.163 L1529.48 682.163 L1528.92 682.163 L1528.36 682.163 L1527.81 682.163 L1527.25 682.163 L1526.69 682.163 L1526.13 682.163 L1525.57 682.163 L1525.01 682.163 L1524.45 682.163 L1523.89 682.163 L1523.33 682.163 L1522.77 682.163 L1522.21 682.163 L1521.65 682.163 L1521.09 682.163 L1520.53 682.163 L1519.98 682.163 L1519.42 682.163 L1518.86 682.163 L1518.3 682.163 L1517.74 682.163 L1517.18 682.163 L1516.62 682.163 L1516.06 682.163 L1515.5 682.163 L1514.94 682.163 L1514.38 682.163 L1513.82 682.163 L1513.26 682.163 L1512.71 682.163 L1512.15 682.163 L1511.59 682.163 L1511.03 682.163 L1510.47 682.163 L1509.91 682.163 L1509.35 682.163 L1508.79 682.163 L1508.23 682.163 L1507.67 682.163 L1507.11 682.163 L1506.55 682.163 L1505.99 682.163 L1505.44 682.163 L1504.88 682.163 L1504.32 682.163 L1503.76 682.163 L1503.2 682.163 L1502.64 682.163 L1502.08 682.163 L1501.52 682.163 L1500.96 682.163 L1500.4 682.163 L1499.84 682.163 L1499.28 682.163 L1498.72 682.163 L1498.16 682.163 L1497.61 682.163 L1497.05 682.163 L1496.49 682.163 L1495.93 682.163 L1495.37 682.163 L1494.81 682.163 L1494.25 682.163 L1493.69 682.163 L1493.13 682.163 L1492.57 682.163 L1492.01 682.163 L1491.45 682.163 L1490.89 682.163 L1490.34 682.163 L1489.78 682.163 L1489.22 682.163 L1488.66 682.163 L1488.1 682.163 L1487.54 682.163 L1486.98 682.163 L1486.42 682.163 L1485.86 682.163 L1485.3 682.163 L1484.74 682.163 L1484.18 682.163 L1483.62 682.163 L1483.07 682.163 L1482.51 682.163 L1481.95 682.163 L1481.39 682.163 L1480.83 682.163 L1480.27 682.163 L1479.71 682.163 L1479.15 682.163 L1478.59 682.163 L1478.03 682.163 L1477.47 682.163 L1476.91 682.163 L1476.35 682.163 L1475.79 682.163 L1475.24 682.163 L1474.68 682.163 L1474.12 682.163 L1473.56 682.163 L1473 682.163 L1472.44 682.163 L1471.88 682.163 L1471.32 682.163 L1470.76 682.163 L1470.2 682.163 L1469.64 682.163 L1469.08 682.163 L1468.52 682.163 L1467.97 682.163 L1467.41 682.163 L1466.85 682.163 L1466.29 682.163 L1465.73 682.163 L1465.17 682.163 L1464.61 682.163 L1464.05 682.163 L1463.49 682.163 L1462.93 682.163 L1462.37 682.163 L1461.81 682.163 L1461.25 682.163 L1460.7 682.163 L1460.14 682.163 L1459.58 682.163 L1459.02 682.163 L1458.46 682.163 L1457.9 682.163 L1457.34 682.163 L1456.78 682.163 L1456.22 682.163 L1455.66 682.163 L1455.1 682.163 L1454.54 682.163 L1453.98 682.163 L1453.42 682.163 L1452.87 682.163 L1452.31 682.163 L1451.75 682.163 L1451.19 682.163 L1450.63 682.163 L1450.07 682.163 L1449.51 682.163 L1448.95 682.163 L1448.39 682.163 L1447.83 682.163 L1447.27 682.163 L1446.71 682.163 L1446.15 682.163 L1445.6 682.163 L1445.04 682.163 L1444.48 682.163 L1443.92 682.163 L1443.36 682.163 L1442.8 682.163 L1442.24 682.163 L1441.68 682.163 L1441.12 682.163 L1440.56 682.163 L1440 682.163 L1439.44 682.163 L1438.88 682.163 L1438.33 682.163 L1437.77 682.163 L1437.21 682.163 L1436.65 682.163 L1436.09 682.163 L1435.53 682.163 L1434.97 682.163 L1434.41 682.163 L1433.85 682.163 L1433.29 682.163 L1432.73 682.163 L1432.17 682.163 L1431.61 682.163 L1431.05 682.163 L1430.5 682.163 L1429.94 682.163 L1429.38 682.163 L1428.82 682.163 L1428.26 682.163 L1427.7 682.163 L1427.14 682.163 L1426.58 682.163 L1426.02 682.163 L1425.46 682.163 L1424.9 682.163 L1424.34 682.163 L1423.78 682.163 L1423.23 682.163 L1422.67 682.163 L1422.11 682.163 L1421.55 682.163 L1420.99 682.163 L1420.43 682.163 L1419.87 682.163 L1419.31 682.163 L1418.75 682.163 L1418.19 682.163 L1417.63 682.163 L1417.07 682.163 L1416.51 682.163 L1415.95 682.163 L1415.4 682.163 L1414.84 682.163 L1414.28 682.163 L1413.72 682.163 L1413.16 682.163 L1412.6 682.163 L1412.04 682.163 L1411.48 682.163 L1410.92 682.163 L1410.36 682.163 L1409.8 682.163 L1409.24 682.163 L1408.68 682.163 L1408.13 682.163 L1407.57 682.163 L1407.01 682.163 L1406.45 682.163 L1405.89 682.163 L1405.33 682.163 L1404.77 682.163 L1404.21 682.163 L1403.65 682.163 L1403.09 682.163 L1402.53 682.163 L1401.97 682.163 L1401.41 682.163 L1400.86 682.163 L1400.3 682.163 L1399.74 682.163 L1399.18 682.163 L1398.62 682.163 L1398.06 682.163 L1397.5 682.163 L1396.94 682.163 L1396.38 682.163 L1395.82 682.163 L1395.26 682.163 L1394.7 682.163 L1394.14 682.163 L1393.58 682.163 L1393.03 682.163 L1392.47 682.163 L1391.91 682.163 L1391.35 682.163 L1390.79 682.163 L1390.23 682.163 L1389.67 682.163 L1389.11 682.163 L1388.55 682.163 L1387.99 682.163 L1387.43 682.163 L1386.87 682.163 L1386.31 682.163 L1385.76 682.163 L1385.2 682.163 L1384.64 682.163 L1384.08 682.163 L1383.52 682.163 L1382.96 682.163 L1382.4 682.163 L1381.84 682.163 L1381.28 682.163 L1380.72 682.163 L1380.16 682.163 L1379.6 682.163 L1379.04 682.163 L1378.49 682.163 L1377.93 682.163 L1377.37 682.163 L1376.81 682.163 L1376.25 682.163 L1375.69 682.163 L1375.13 682.163 L1374.57 682.163 L1374.01 682.163 L1373.45 682.163 L1372.89 682.163 L1372.33 682.163 L1371.77 682.163 L1371.21 682.163 L1370.66 682.163 L1370.1 682.163 L1369.54 682.163 L1368.98 682.163 L1368.42 682.163 L1367.86 682.163 L1367.3 682.163 L1366.74 682.163 L1366.18 682.163 L1365.62 682.163 L1365.06 682.163 L1364.5 682.163 L1363.94 682.163 L1363.39 682.163 L1362.83 682.163 L1362.27 682.163 L1361.71 682.163 L1361.15 682.163 L1360.59 682.163 L1360.03 682.163 L1359.47 682.163 L1358.91 682.163 L1358.35 682.163 L1357.79 682.163 L1357.23 682.163 L1356.67 682.163 L1356.12 682.163 L1355.56 682.163 L1355 682.163 L1354.44 682.163 L1353.88 682.163 L1353.32 682.163 L1352.76 682.163 L1352.2 682.163 L1351.64 682.163 L1351.08 682.163 L1350.52 682.163 L1349.96 682.163 L1349.4 682.163 L1348.84 682.163 L1348.29 682.163 L1347.73 682.163 L1347.17 682.163 L1346.61 682.163 L1346.05 682.163 L1345.49 682.163 L1344.93 682.163 L1344.37 682.163 L1343.81 682.163 L1343.25 682.163 L1342.69 682.163 L1342.13 682.163 L1341.57 682.163 L1341.02 682.163 L1340.46 682.163 L1339.9 682.163 L1339.34 682.163 L1338.78 682.163 L1338.22 682.163 L1337.66 682.163 L1337.1 682.163 L1336.54 682.163 L1335.98 682.163 L1335.42 682.163 L1334.86 682.163 L1334.3 682.163 L1333.75 682.163 L1333.19 682.163 L1332.63 682.163 L1332.07 682.163 L1331.51 682.163 L1330.95 682.163 L1330.39 682.163 L1329.83 682.163 L1329.27 682.163 L1328.71 682.163 L1328.15 682.163 L1327.59 682.163 L1327.03 682.163 L1326.47 682.163 L1325.92 682.163 L1325.36 682.163 L1324.8 682.163 L1324.24 682.163 L1323.68 682.163 L1323.12 682.163 L1322.56 682.163 L1322 682.163 L1321.44 682.163 L1320.88 682.163 L1320.32 682.163 L1319.76 682.163 L1319.2 682.163 L1318.65 682.163 L1318.09 682.163 L1317.53 682.163 L1316.97 682.163 L1316.41 682.163 L1315.85 682.163 L1315.29 682.163 L1314.73 682.163 L1314.17 682.163 L1313.61 682.163 L1313.05 682.163 L1312.49 682.163 L1311.93 682.163 L1311.38 682.163 L1310.82 682.163 L1310.26 682.163 L1309.7 682.163 L1309.14 682.163 L1308.58 682.163 L1308.02 682.163 L1307.46 682.163 L1306.9 682.163 L1306.34 682.163 L1305.78 682.163 L1305.22 682.163 L1304.66 682.163 L1304.1 682.163 L1303.55 682.163 L1302.99 682.163 L1302.43 682.163 L1301.87 682.163 L1301.31 682.163 L1300.75 682.163 L1300.19 682.163 L1299.63 682.163 L1299.07 682.163 L1298.51 682.163 L1297.95 682.163 L1297.39 682.163 L1296.83 682.163 L1296.28 682.163 L1295.72 682.163 L1295.16 682.163 L1294.6 682.163 L1294.04 682.163 L1293.48 682.163 L1292.92 682.163 L1292.36 682.163 L1291.8 682.163 L1291.24 682.163 L1290.68 682.163 L1290.12 682.163 L1289.56 682.163 L1289 682.163 L1288.45 682.163 L1287.89 682.163 L1287.33 682.163 L1286.77 682.163 L1286.21 682.163 L1285.65 682.163 L1285.09 682.163 L1284.53 682.163 L1283.97 682.163 L1283.41 682.163 L1282.85 682.163 L1282.29 682.163 L1281.73 682.163 L1281.18 682.163 L1280.62 682.163 L1280.06 682.163 L1279.5 682.163 L1278.94 682.163 L1278.38 682.163 L1277.82 682.163 L1277.26 682.163 L1276.7 682.163 L1276.14 682.163 L1275.58 682.163 L1275.02 682.163 L1274.46 682.163 L1273.91 682.163 L1273.35 682.163 L1272.79 682.163 L1272.23 682.163 L1271.67 682.163 L1271.11 682.163 L1270.55 682.163 L1269.99 682.163 L1269.43 682.163 L1268.87 682.163 L1268.31 682.163 L1267.75 682.163 L1267.19 682.163 L1266.63 682.163 L1266.08 682.163 L1265.52 682.163 L1264.96 682.163 L1264.4 682.163 L1263.84 682.163 L1263.28 682.163 L1262.72 682.163 L1262.16 682.163 L1261.6 682.163 L1261.04 682.163 L1260.48 682.163 L1259.92 682.163 L1259.36 682.163 L1258.81 682.163 L1258.25 682.163 L1257.69 682.163 L1257.13 682.163 L1256.57 682.163 L1256.01 682.163 L1255.45 682.163 L1254.89 682.163 L1254.33 682.163 L1253.77 682.163 L1253.21 682.163 L1252.65 682.163 L1252.09 682.163 L1251.54 682.163 L1250.98 682.163 L1250.42 682.163 L1249.86 682.163 L1249.3 682.163 L1248.74 682.163 L1248.18 682.163 L1247.62 682.163 L1247.06 682.163 L1246.5 682.163 L1245.94 682.163 L1245.38 682.163 L1244.82 682.163 L1244.26 682.163 L1243.71 682.163 L1243.15 682.163 L1242.59 682.163 L1242.03 682.163 L1241.47 682.163 L1240.91 682.163 L1240.35 682.163 L1239.79 682.163 L1239.23 682.163 L1238.67 682.163 L1238.11 682.163 L1237.55 682.163 L1236.99 682.163 L1236.44 682.163 L1235.88 682.163 L1235.32 682.163 L1234.76 682.163 L1234.2 682.163 L1233.64 682.163 L1233.08 682.163 L1232.52 682.163 L1231.96 682.163 L1231.4 682.163 L1230.84 682.163 L1230.28 682.163 L1229.72 682.163 L1229.17 682.163 L1228.61 682.163 L1228.05 682.163 L1227.49 682.163 L1226.93 682.163 L1226.37 682.163 L1225.81 682.163 L1225.25 682.163 L1224.69 682.163 L1224.13 682.163 L1223.57 682.163 L1223.01 682.163 L1222.45 682.163 L1221.89 682.163 L1221.34 682.163 L1220.78 682.163 L1220.22 682.163 L1219.66 682.163 L1219.1 682.163 L1218.54 682.163 L1217.98 682.163 L1217.42 682.163 L1216.86 682.163 L1216.3 682.163 L1215.74 682.163 L1215.18 682.163 L1214.62 682.163 L1214.07 682.163 L1213.51 682.163 L1212.95 682.163 L1212.39 682.163 L1211.83 682.163 L1211.27 682.163 L1210.71 682.163 L1210.15 682.163 L1209.59 682.163 L1209.03 682.163 L1208.47 682.163 L1207.91 682.163 L1207.35 682.163 L1206.8 682.163 L1206.24 682.163 L1205.68 682.163 L1205.12 682.163 L1204.56 682.163 L1204 682.163 L1203.44 682.163 L1202.88 682.163 L1202.32 682.163 L1201.76 682.163 L1201.2 682.163 L1200.64 682.163 L1200.08 682.163 L1199.52 682.163 L1198.97 682.163 L1198.41 682.163 L1197.85 682.163 L1197.29 682.163 L1196.73 682.163 L1196.17 682.163 L1195.61 682.163 L1195.05 682.163 L1194.49 682.163 L1193.93 682.163 L1193.37 682.163 L1192.81 682.163 L1192.25 682.163 L1191.7 682.163 L1191.14 682.163 L1190.58 682.163 L1190.02 682.163 L1189.46 682.163 L1188.9 682.163 L1188.34 682.163 L1187.78 682.163 L1187.22 682.163 L1186.66 682.163 L1186.1 682.163 L1185.54 682.163 L1184.98 682.163 L1184.43 682.163 L1183.87 682.163 L1183.31 682.163 L1182.75 682.163 L1182.19 682.163 L1181.63 682.163 L1181.07 682.163 L1180.51 682.163 L1179.95 682.163 L1179.39 682.163 L1178.83 682.163 L1178.27 682.163 L1177.71 682.163 L1177.15 682.163 L1176.6 682.163 L1176.04 682.163 L1175.48 682.163 L1174.92 682.163 L1174.36 682.163 L1173.8 682.163 L1173.24 682.163 L1172.68 682.163 L1172.12 682.163 L1171.56 682.163 L1171 682.163 L1170.44 682.163 L1169.88 682.163 L1169.33 682.163 L1168.77 682.163 L1168.21 682.163 L1167.65 682.163 L1167.09 682.163 L1166.53 682.163 L1165.97 682.163 L1165.41 682.163 L1164.85 682.163 L1164.29 682.163 L1163.73 682.163 L1163.17 682.163 L1162.61 682.163 L1162.05 682.163 L1161.5 682.163 L1160.94 682.163 L1160.38 682.163 L1159.82 682.163 L1159.26 682.163 L1158.7 682.163 L1158.14 682.163 L1157.58 682.163 L1157.02 682.163 L1156.46 682.163 L1155.9 682.163 L1155.34 682.163 L1154.78 682.163 L1154.23 682.163 L1153.67 682.163 L1153.11 682.163 L1152.55 682.163 L1151.99 682.163 L1151.43 682.163 L1150.87 682.163 L1150.31 682.163 L1149.75 682.163 L1149.19 682.163 L1148.63 682.163 L1148.07 682.163 L1147.51 682.163 L1146.96 682.163 L1146.4 682.163 L1145.84 682.163 L1145.28 682.163 L1144.72 682.163 L1144.16 682.163 L1143.6 682.163 L1143.04 682.163 L1142.48 682.163 L1141.92 682.163 L1141.36 682.163 L1140.8 682.163 L1140.24 682.163 L1139.68 682.163 L1139.13 682.163 L1138.57 682.163 L1138.01 682.163 L1137.45 682.163 L1136.89 682.163 L1136.33 682.163 L1135.77 682.163 L1135.21 682.163 L1134.65 682.163 L1134.09 682.163 L1133.53 682.163 L1132.97 682.163 L1132.41 682.163 L1131.86 682.163 L1131.3 682.163 L1130.74 682.163 L1130.18 682.163 L1129.62 682.163 L1129.06 682.163 L1128.5 682.163 L1127.94 682.163 L1127.38 682.163 L1126.82 682.163 L1126.26 682.163 L1125.7 682.163 L1125.14 682.163 L1124.59 682.163 L1124.03 682.163 L1123.47 682.163 L1122.91 682.163 L1122.35 682.163 L1121.79 682.163 L1121.23 682.163 L1120.67 682.163 L1120.11 682.163 L1119.55 682.163 L1118.99 682.163 L1118.43 682.163 L1117.87 682.163 L1117.31 682.163 L1116.76 682.163 L1116.2 682.163 L1115.64 682.163 L1115.08 682.163 L1114.52 682.163 L1113.96 682.163 L1113.4 682.163 L1112.84 682.163 L1112.28 682.163 L1111.72 682.163 L1111.16 682.163 L1110.6 682.163 L1110.04 682.163 L1109.49 682.163 L1108.93 682.163 L1108.37 682.163 L1107.81 682.163 L1107.25 682.163 L1106.69 682.163 L1106.13 682.163 L1105.57 682.163 L1105.01 682.163 L1104.45 682.163 L1103.89 682.163 L1103.33 682.163 L1102.77 682.163 L1102.22 682.163 L1101.66 682.163 L1101.1 682.163 L1100.54 682.163 L1099.98 682.163 L1099.42 682.163 L1098.86 682.163 L1098.3 682.163 L1097.74 682.163 L1097.18 682.163 L1096.62 682.163 L1096.06 682.163 L1095.5 682.163 L1094.94 682.163 L1094.39 682.163 L1093.83 682.163 L1093.27 682.163 L1092.71 682.163 L1092.15 682.163 L1091.59 682.163 L1091.03 682.163 L1090.47 682.163 L1089.91 682.163 L1089.35 682.163 L1088.79 682.163 L1088.23 682.163 L1087.67 682.163 L1087.12 682.163 L1086.56 682.163 L1086 682.163 L1085.44 682.163 L1084.88 682.163 L1084.32 682.163 L1083.76 682.163 L1083.2 682.163 L1082.64 682.163 L1082.08 682.163 L1081.52 682.163 L1080.96 682.163 L1080.4 682.163 L1079.85 682.163 L1079.29 682.163 L1078.73 682.163 L1078.17 682.163 L1077.61 682.163 L1077.05 682.163 L1076.49 682.163 L1075.93 682.163 L1075.37 682.163 L1074.81 682.163 L1074.25 682.163 L1073.69 682.163 L1073.13 682.163 L1072.57 682.163 L1072.02 682.163 L1071.46 682.163 L1070.9 682.163 L1070.34 682.163 L1069.78 682.163 L1069.22 682.163 L1068.66 682.163 L1068.1 682.163 L1067.54 682.163 L1066.98 682.163 L1066.42 682.163 L1065.86 682.163 L1065.3 682.163 L1064.75 682.163 L1064.19 682.163 L1063.63 682.163 L1063.07 682.163 L1062.51 682.163 L1061.95 682.163 L1061.39 682.163 L1060.83 682.163 L1060.27 682.163 L1059.71 682.163 L1059.15 682.163 L1058.59 682.163 L1058.03 682.163 L1057.48 682.163 L1056.92 682.163 L1056.36 682.163 L1055.8 682.163 L1055.24 682.163 L1054.68 682.163 L1054.12 682.163 L1053.56 682.163 L1053 682.163 L1052.44 682.163 L1051.88 682.163 L1051.32 682.163 L1050.76 682.163 L1050.2 682.163 L1049.65 682.163 L1049.09 682.163 L1048.53 682.163 L1047.97 682.163 L1047.41 682.163 L1046.85 682.163 L1046.29 682.163 L1045.73 682.163 L1045.17 682.163 L1044.61 682.163 L1044.05 682.163 L1043.49 682.163 L1042.93 682.163 L1042.38 682.163 L1041.82 682.163 L1041.26 682.163 L1040.7 682.163 L1040.14 682.163 L1039.58 682.163 L1039.02 682.163 L1038.46 682.163 L1037.9 682.163 L1037.34 682.163 L1036.78 682.163 L1036.22 682.163 L1035.66 682.163 L1035.1 682.163 L1034.55 682.163 L1033.99 682.163 L1033.43 682.163 L1032.87 682.163 L1032.31 682.163 L1031.75 682.163 L1031.19 682.163 L1030.63 682.163 L1030.07 682.163 L1029.51 682.163 L1028.95 682.163 L1028.39 682.163 L1027.83 682.163 L1027.28 682.163 L1026.72 682.163 L1026.16 682.163 L1025.6 682.163 L1025.04 682.163 L1024.48 682.163 L1023.92 682.163 L1023.36 682.163 L1022.8 682.163 L1022.24 682.163 L1021.68 682.163 L1021.12 682.163 L1020.56 682.163 L1020.01 682.163 L1019.45 682.163 L1018.89 682.163 L1018.33 682.163 L1017.77 682.163 L1017.21 682.163 L1016.65 682.163 L1016.09 682.163 L1015.53 682.163 L1014.97 682.163 L1014.41 682.163 L1013.85 682.163 L1013.29 682.163 L1012.73 682.163 L1012.18 682.163 L1011.62 682.163 L1011.06 682.163 L1010.5 682.163 L1009.94 682.163 L1009.38 682.163 L1008.82 682.163 L1008.26 682.163 L1007.7 682.163 L1007.14 682.163 L1006.58 682.163 L1006.02 682.163 L1005.46 682.163 L1004.91 682.163 L1004.35 682.163 L1003.79 682.163 L1003.23 682.163 L1002.67 682.163 L1002.11 682.163 L1001.55 682.163 L1000.99 682.163 L1000.43 682.163 L999.872 682.163 L999.313 682.163 L998.754 682.163 L998.194 682.163 L997.635 682.163 L997.076 682.163 L996.517 682.163 L995.957 682.163 L995.398 682.163 L994.839 682.163 L994.28 682.163 L993.72 682.163 L993.161 682.163 L992.602 682.163 L992.043 682.163 L991.483 682.163 L990.924 682.163 L990.365 682.163 L989.806 682.163 L989.246 682.163 L988.687 682.163 L988.128 682.163 L987.569 682.163 L987.009 682.163 L986.45 682.163 L985.891 682.163 L985.332 682.163 L984.772 682.163 L984.213 682.163 L983.654 682.163 L983.095 682.163 L982.535 682.163 L981.976 682.163 L981.417 682.163 L980.858 682.163 L980.298 682.163 L979.739 682.163 L979.18 682.163 L978.621 682.163 L978.061 682.163 L977.502 682.163 L976.943 682.163 L976.384 682.163 L975.824 682.163 L975.265 682.163 L974.706 682.163 L974.147 682.163 L973.587 682.163 L973.028 682.163 L972.469 682.163 L971.91 682.163 L971.35 682.163 L970.791 682.163 L970.232 682.163 L969.673 682.163 L969.113 682.163 L968.554 682.163 L967.995 682.163 L967.436 682.163 L966.876 682.163 L966.317 682.163 L965.758 682.163 L965.199 682.163 L964.639 682.163 L964.08 682.163 L963.521 682.163 L962.962 682.163 L962.402 682.163 L961.843 682.163 L961.284 682.163 L960.725 682.163 L960.165 682.163 L959.606 682.163 L959.047 682.163 L958.488 682.163 L957.928 682.163 L957.369 682.163 L956.81 682.163 L956.251 682.163 L955.691 682.163 L955.132 682.163 L954.573 682.163 L954.014 682.163 L953.454 682.163 L952.895 682.163 L952.336 682.163 L951.777 682.163 L951.217 682.163 L950.658 682.163 L950.099 682.163 L949.54 682.163 L948.98 682.163 L948.421 682.163 L947.862 682.163 L947.303 682.163 L946.743 682.163 L946.184 682.163 L945.625 682.163 L945.066 682.163 L944.506 682.163 L943.947 682.163 L943.388 682.163 L942.829 682.163 L942.269 682.163 L941.71 682.163 L941.151 682.163 L940.592 682.163 L940.032 682.163 L939.473 682.163 L938.914 682.163 L938.355 682.163 L937.795 682.163 L937.236 682.163 L936.677 682.163 L936.118 682.163 L935.558 682.163 L934.999 682.163 L934.44 682.163 L933.881 682.163 L933.321 682.163 L932.762 682.163 L932.203 682.163 L931.644 682.163 L931.084 682.163 L930.525 682.163 L929.966 682.163 L929.406 682.163 L928.847 682.163 L928.288 682.163 L927.729 682.163 L927.169 682.163 L926.61 682.163 L926.051 682.163 L925.492 682.163 L924.932 682.163 L924.373 682.163 L923.814 682.163 L923.255 682.163 L922.695 682.163 L922.136 682.163 L921.577 682.163 L921.018 682.163 L920.458 682.163 L919.899 682.163 L919.34 682.163 L918.781 682.163 L918.221 682.163 L917.662 682.163 L917.103 682.163 L916.544 682.163 L915.984 682.163 L915.425 682.163 L914.866 682.163 L914.307 682.163 L913.747 682.163 L913.188 682.163 L912.629 682.163 L912.07 682.163 L911.51 682.163 L910.951 682.163 L910.392 682.163 L909.833 682.163 L909.273 682.163 L908.714 682.163 L908.155 682.163 L907.596 682.163 L907.036 682.163 L906.477 682.163 L905.918 682.163 L905.359 682.163 L904.799 682.163 L904.24 682.163 L903.681 682.163 L903.122 682.163 L902.562 682.163 L902.003 682.163 L901.444 682.163 L900.885 682.163 L900.325 682.163 L899.766 682.163 L899.207 682.163 L898.648 682.163 L898.088 682.163 L897.529 682.163 L896.97 682.163 L896.411 682.163 L895.851 682.163 L895.292 682.163 L894.733 682.163 L894.174 682.163 L893.614 682.163 L893.055 682.163 L892.496 682.163 L891.937 682.163 L891.377 682.163 L890.818 682.163 L890.259 682.163 L889.7 682.163 L889.14 682.163 L888.581 682.163 L888.022 682.163 L887.463 682.163 L886.903 682.163 L886.344 682.163 L885.785 682.163 L885.226 682.163 L884.666 682.163 L884.107 682.163 L883.548 682.163 L882.989 682.163 L882.429 682.163 L881.87 682.163 L881.311 682.163 L880.752 682.163 L880.192 682.163 L879.633 682.163 L879.074 682.163 L878.515 682.163 L877.955 682.163 L877.396 682.163 L876.837 682.163 L876.278 682.163 L875.718 682.163 L875.159 682.163 L874.6 682.163 L874.041 682.163 L873.481 682.163 L872.922 682.163 L872.363 682.163 L871.804 682.163 L871.244 682.163 L870.685 682.163 L870.126 682.163 L869.567 682.163 L869.007 682.163 L868.448 682.163 L867.889 682.163 L867.33 682.163 L866.77 682.163 L866.211 682.163 L865.652 682.163 L865.093 682.163 L864.533 682.163 L863.974 682.163 L863.415 682.163 L862.856 682.163 L862.296 682.163 L861.737 682.163 L861.178 682.163 L860.619 682.163 L860.059 682.163 L859.5 682.163 L858.941 682.163 L858.382 682.163 L857.822 682.163 L857.263 682.163 L856.704 682.163 L856.145 682.163 L855.585 682.163 L855.026 682.163 L854.467 682.163 L853.908 682.163 L853.348 682.163 L852.789 682.163 L852.23 682.163 L851.671 682.163 L851.111 682.163 L850.552 682.163 L849.993 682.163 L849.434 682.163 L848.874 682.163 L848.315 682.163 L847.756 682.163 L847.197 682.163 L846.637 682.163 L846.078 682.163 L845.519 682.163 L844.96 682.163 L844.4 682.163 L843.841 682.163 L843.282 682.163 L842.723 682.163 L842.163 682.163 L841.604 682.163 L841.045 682.163 L840.486 682.163 L839.926 682.163 L839.367 682.163 L838.808 682.163 L838.249 682.163 L837.689 682.163 L837.13 682.163 L836.571 682.163 L836.012 682.163 L835.452 682.163 L834.893 682.163 L834.334 682.163 L833.775 682.163 L833.215 682.163 L832.656 682.163 L832.097 682.163 L831.538 682.163 L830.978 682.163 L830.419 682.163 L829.86 682.163 L829.301 682.163 L828.741 682.163 L828.182 682.163 L827.623 682.163 L827.064 682.163 L826.504 682.163 L825.945 682.163 L825.386 682.163 L824.827 682.163 L824.267 682.163 L823.708 682.163 L823.149 682.163 L822.59 682.163 L822.03 682.163 L821.471 682.163 L820.912 682.163 L820.353 682.163 L819.793 682.163 L819.234 682.163 L818.675 682.163 L818.116 682.163 L817.556 682.163 L816.997 682.163 L816.438 682.163 L815.879 682.163 L815.319 682.163 L814.76 682.163 L814.201 682.163 L813.642 682.163 L813.082 682.163 L812.523 682.163 L811.964 682.163 L811.405 682.163 L810.845 682.163 L810.286 682.163 L809.727 682.163 L809.168 682.163 L808.608 682.163 L808.049 682.163 L807.49 682.163 L806.931 682.163 L806.371 682.163 L805.812 682.163 L805.253 682.163 L804.693 682.163 L804.134 682.163 L803.575 682.163 L803.016 682.163 L802.456 682.163 L801.897 682.163 L801.338 682.163 L800.779 682.163 L800.219 682.163 L799.66 682.163 L799.101 682.163 L798.542 682.163 L797.982 682.163 L797.423 682.163 L796.864 682.163 L796.305 682.163 L795.745 682.163 L795.186 682.163 L794.627 682.163 L794.068 682.163 L793.508 682.163 L792.949 682.163 L792.39 682.163 L791.831 682.163 L791.271 682.163 L790.712 682.163 L790.153 682.163 L789.594 682.163 L789.034 682.163 L788.475 682.163 L787.916 682.163 L787.357 682.163 L786.797 682.163 L786.238 682.163 L785.679 682.163 L785.12 682.163 L784.56 682.163 L784.001 682.163 L783.442 682.163 L782.883 682.163 L782.323 682.163 L781.764 682.163 L781.205 682.163 L780.646 682.163 L780.086 682.163 L779.527 682.163 L778.968 682.163 L778.409 682.163 L777.849 682.163 L777.29 682.163 L776.731 682.163 L776.172 682.163 L775.612 682.163 L775.053 682.163 L774.494 682.163 L773.935 682.163 L773.375 682.163 L772.816 682.163 L772.257 682.163 L771.698 682.163 L771.138 682.163 L770.579 682.163 L770.02 682.163 L769.461 682.163 L768.901 682.163 L768.342 682.163 L767.783 682.163 L767.224 682.163 L766.664 682.163 L766.105 682.163 L765.546 682.163 L764.987 682.163 L764.427 682.163 L763.868 682.163 L763.309 682.163 L762.75 682.163 L762.19 682.163 L761.631 682.163 L761.072 682.163 L760.513 682.163 L759.953 682.163 L759.394 682.163 L758.835 682.163 L758.276 682.163 L757.716 682.163 L757.157 682.163 L756.598 682.163 L756.039 682.163 L755.479 682.163 L754.92 682.163 L754.361 682.163 L753.802 682.163 L753.242 682.163 L752.683 682.163 L752.124 682.163 L751.565 682.163 L751.005 682.163 L750.446 682.163 L749.887 682.163 L749.328 682.163 L748.768 682.163 L748.209 682.163 L747.65 682.163 L747.091 682.163 L746.531 682.163 L745.972 682.163 L745.413 682.163 L744.854 682.163 L744.294 682.163 L743.735 682.163 L743.176 682.163 L742.617 682.163 L742.057 682.163 L741.498 682.163 L740.939 682.163 L740.38 682.163 L739.82 682.163 L739.261 682.163 L738.702 682.163 L738.143 682.163 L737.583 682.163 L737.024 682.163 L736.465 682.163 L735.906 682.163 L735.346 682.163 L734.787 682.163 L734.228 682.163 L733.669 682.163 L733.109 682.163 L732.55 682.163 L731.991 682.163 L731.432 682.163 L730.872 682.163 L730.313 682.163 L729.754 682.163 L729.195 682.163 L728.635 682.163 L728.076 682.163 L727.517 682.163 L726.958 682.163 L726.398 682.163 L725.839 682.163 L725.28 682.163 L724.721 682.163 L724.161 682.163 L723.602 682.163 L723.043 682.163 L722.484 682.163 L721.924 682.163 L721.365 682.163 L720.806 682.163 L720.247 682.163  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip753)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.462 720.806,687.462 721.365,687.462 721.924,687.462 722.484,687.462 723.043,687.462 723.602,687.462 724.161,687.462 724.721,687.462 725.28,687.462 725.839,687.462 726.398,687.462 726.958,687.462 727.517,687.462 728.076,687.462 728.635,687.462 729.195,687.462 729.754,687.462 730.313,687.462 730.872,687.462 731.432,687.462 731.991,687.462 732.55,687.462 733.109,687.462 733.669,687.462 734.228,687.462 734.787,687.462 735.346,687.462 735.906,687.462 736.465,687.462 737.024,687.462 737.583,687.462 738.143,687.462 738.702,687.462 739.261,687.462 739.82,687.462 740.38,687.462 740.939,687.462 741.498,687.462 742.057,687.462 742.617,687.462 743.176,687.462 743.735,687.462 744.294,687.462 744.854,687.462 745.413,687.462 745.972,687.462 746.531,687.462 747.091,687.462 747.65,687.462 748.209,687.462 748.768,687.462 749.328,687.462 749.887,687.462 750.446,687.462 751.005,687.462 751.565,687.462 752.124,687.462 752.683,687.462 753.242,687.462 753.802,687.462 754.361,687.462 754.92,687.462 755.479,687.462 756.039,687.462 756.598,687.462 757.157,687.462 757.716,687.462 758.276,687.462 758.835,687.462 759.394,687.462 759.953,687.462 760.513,687.462 761.072,687.462 761.631,687.462 762.19,687.462 762.75,687.462 763.309,687.462 763.868,687.462 764.427,687.462 764.987,687.462 765.546,687.462 766.105,687.462 766.664,687.462 767.224,687.462 767.783,687.462 768.342,687.462 768.901,687.462 769.461,687.462 770.02,687.462 770.579,687.462 771.138,687.462 771.698,687.462 772.257,687.462 772.816,687.462 773.375,687.462 773.935,687.462 774.494,687.462 775.053,687.462 775.612,687.462 776.172,687.462 776.731,687.462 777.29,687.462 777.849,687.462 778.409,687.462 778.968,687.462 779.527,687.462 780.086,687.462 780.646,687.462 781.205,687.462 781.764,687.462 782.323,687.462 782.883,687.462 783.442,687.462 784.001,687.462 784.56,687.462 785.12,687.462 785.679,687.462 786.238,687.462 786.797,687.462 787.357,687.462 787.916,687.462 788.475,687.462 789.034,687.462 789.594,687.462 790.153,687.462 790.712,687.462 791.271,687.462 791.831,687.462 792.39,687.462 792.949,687.462 793.508,687.462 794.068,687.462 794.627,687.462 795.186,687.462 795.745,687.462 796.305,687.462 796.864,687.462 797.423,687.462 797.982,687.462 798.542,687.462 799.101,687.462 799.66,687.462 800.219,687.462 800.779,687.462 801.338,687.462 801.897,687.462 802.456,687.462 803.016,687.462 803.575,687.462 804.134,687.462 804.693,687.462 805.253,687.462 805.812,687.462 806.371,687.462 806.931,687.462 807.49,687.462 808.049,687.462 808.608,687.462 809.168,687.462 809.727,687.462 810.286,687.462 810.845,687.462 811.405,687.462 811.964,687.462 812.523,687.462 813.082,687.462 813.642,687.462 814.201,687.462 814.76,687.462 815.319,687.462 815.879,687.462 816.438,687.462 816.997,687.462 817.556,687.462 818.116,687.462 818.675,687.462 819.234,687.462 819.793,687.462 820.353,687.462 820.912,687.462 821.471,687.462 822.03,687.462 822.59,687.462 823.149,687.462 823.708,687.462 824.267,687.462 824.827,687.462 825.386,687.462 825.945,687.462 826.504,687.462 827.064,687.462 827.623,687.462 828.182,687.462 828.741,687.462 829.301,687.462 829.86,687.462 830.419,687.462 830.978,687.462 831.538,687.462 832.097,687.462 832.656,687.462 833.215,687.462 833.775,687.462 834.334,687.462 834.893,687.462 835.452,687.462 836.012,687.462 836.571,687.462 837.13,687.462 837.689,687.462 838.249,687.462 838.808,687.462 839.367,687.462 839.926,687.462 840.486,687.462 841.045,687.462 841.604,687.462 842.163,687.462 842.723,687.462 843.282,687.462 843.841,687.462 844.4,687.462 844.96,687.462 845.519,687.462 846.078,687.462 846.637,687.462 847.197,687.462 847.756,687.462 848.315,687.462 848.874,687.462 849.434,687.462 849.993,687.462 850.552,687.462 851.111,687.462 851.671,687.462 852.23,687.462 852.789,687.462 853.348,687.462 853.908,687.462 854.467,687.462 855.026,687.462 855.585,687.462 856.145,687.462 856.704,687.462 857.263,687.462 857.822,687.462 858.382,687.462 858.941,687.462 859.5,687.462 860.059,687.462 860.619,687.462 861.178,687.462 861.737,687.462 862.296,687.462 862.856,687.462 863.415,687.462 863.974,687.462 864.533,687.462 865.093,687.462 865.652,687.462 866.211,687.462 866.77,687.462 867.33,687.462 867.889,687.462 868.448,687.462 869.007,687.462 869.567,687.462 870.126,687.462 870.685,687.462 871.244,687.462 871.804,687.462 872.363,687.462 872.922,687.462 873.481,687.462 874.041,687.462 874.6,687.462 875.159,687.462 875.718,687.462 876.278,687.462 876.837,687.462 877.396,687.462 877.955,687.462 878.515,687.462 879.074,687.462 879.633,687.462 880.192,687.462 880.752,687.462 881.311,687.462 881.87,687.462 882.429,687.462 882.989,687.462 883.548,687.462 884.107,687.462 884.666,687.462 885.226,687.462 885.785,687.462 886.344,687.462 886.903,687.462 887.463,687.462 888.022,687.462 888.581,687.462 889.14,687.462 889.7,687.462 890.259,687.462 890.818,687.462 891.377,687.462 891.937,687.462 892.496,687.462 893.055,687.462 893.614,687.462 894.174,687.462 894.733,687.462 895.292,687.462 895.851,687.462 896.411,687.462 896.97,687.462 897.529,687.462 898.088,687.462 898.648,687.462 899.207,687.462 899.766,687.462 900.325,687.462 900.885,687.462 901.444,687.462 902.003,687.462 902.562,687.462 903.122,687.462 903.681,687.462 904.24,687.462 904.799,687.462 905.359,687.462 905.918,687.462 906.477,687.462 907.036,687.462 907.596,687.462 908.155,687.462 908.714,687.462 909.273,687.462 909.833,687.462 910.392,687.462 910.951,687.462 911.51,687.462 912.07,687.462 912.629,687.462 913.188,687.462 913.747,687.462 914.307,687.462 914.866,687.462 915.425,687.462 915.984,687.462 916.544,687.462 917.103,687.462 917.662,687.462 918.221,687.462 918.781,687.462 919.34,687.462 919.899,687.462 920.458,687.462 921.018,687.462 921.577,687.462 922.136,687.462 922.695,687.462 923.255,687.462 923.814,687.462 924.373,687.462 924.932,687.462 925.492,687.462 926.051,687.462 926.61,687.462 927.169,687.462 927.729,687.462 928.288,687.462 928.847,687.462 929.406,687.462 929.966,687.462 930.525,687.462 931.084,687.462 931.644,687.462 932.203,687.462 932.762,687.462 933.321,687.462 933.881,687.462 934.44,687.462 934.999,687.462 935.558,687.462 936.118,687.462 936.677,687.462 937.236,687.462 937.795,687.462 938.355,687.462 938.914,687.462 939.473,687.462 940.032,687.462 940.592,687.462 941.151,687.462 941.71,687.462 942.269,687.462 942.829,687.462 943.388,687.462 943.947,687.462 944.506,687.462 945.066,687.462 945.625,687.462 946.184,687.462 946.743,687.462 947.303,687.462 947.862,687.462 948.421,687.462 948.98,687.462 949.54,687.462 950.099,687.462 950.658,687.462 951.217,687.462 951.777,687.462 952.336,687.462 952.895,687.462 953.454,687.462 954.014,687.462 954.573,687.462 955.132,687.462 955.691,687.462 956.251,687.462 956.81,687.462 957.369,687.462 957.928,687.462 958.488,687.462 959.047,687.462 959.606,687.462 960.165,687.462 960.725,687.462 961.284,687.462 961.843,687.462 962.402,687.462 962.962,687.462 963.521,687.462 964.08,687.462 964.639,687.462 965.199,687.462 965.758,687.462 966.317,687.462 966.876,687.462 967.436,687.462 967.995,687.462 968.554,687.462 969.113,687.462 969.673,687.462 970.232,687.462 970.791,687.462 971.35,687.462 971.91,687.462 972.469,687.462 973.028,687.462 973.587,687.462 974.147,687.462 974.706,687.462 975.265,687.462 975.824,687.462 976.384,687.462 976.943,687.462 977.502,687.462 978.061,687.462 978.621,687.462 979.18,687.462 979.739,687.462 980.298,687.462 980.858,687.462 981.417,687.462 981.976,687.462 982.535,687.462 983.095,687.462 983.654,687.462 984.213,687.462 984.772,687.462 985.332,687.462 985.891,687.462 986.45,687.462 987.009,687.462 987.569,687.462 988.128,687.462 988.687,687.462 989.246,687.462 989.806,687.462 990.365,687.462 990.924,687.462 991.483,687.462 992.043,687.462 992.602,687.462 993.161,687.462 993.72,687.462 994.28,687.462 994.839,687.462 995.398,687.462 995.957,687.462 996.517,687.462 997.076,687.462 997.635,687.462 998.194,687.462 998.754,687.462 999.313,687.462 999.872,687.462 1000.43,687.462 1000.99,687.462 1001.55,687.462 1002.11,687.462 1002.67,687.462 1003.23,687.462 1003.79,687.462 1004.35,687.462 1004.91,687.462 1005.46,687.462 1006.02,687.462 1006.58,687.462 1007.14,687.462 1007.7,687.462 1008.26,687.462 1008.82,687.462 1009.38,687.462 1009.94,687.462 1010.5,687.462 1011.06,687.462 1011.62,687.462 1012.18,687.462 1012.73,687.462 1013.29,687.462 1013.85,687.462 1014.41,687.462 1014.97,687.462 1015.53,687.462 1016.09,687.462 1016.65,687.462 1017.21,687.462 1017.77,687.462 1018.33,687.462 1018.89,687.462 1019.45,687.462 1020.01,687.462 1020.56,687.462 1021.12,687.462 1021.68,687.462 1022.24,687.462 1022.8,687.462 1023.36,687.462 1023.92,687.462 1024.48,687.462 1025.04,687.462 1025.6,687.462 1026.16,687.462 1026.72,687.462 1027.28,687.462 1027.83,687.462 1028.39,687.462 1028.95,687.462 1029.51,687.462 1030.07,687.462 1030.63,687.462 1031.19,687.462 1031.75,687.462 1032.31,687.462 1032.87,687.462 1033.43,687.462 1033.99,687.462 1034.55,687.462 1035.1,687.462 1035.66,687.462 1036.22,687.462 1036.78,687.462 1037.34,687.462 1037.9,687.462 1038.46,687.462 1039.02,687.462 1039.58,687.462 1040.14,687.462 1040.7,687.462 1041.26,687.462 1041.82,687.462 1042.38,687.462 1042.93,687.462 1043.49,687.462 1044.05,687.462 1044.61,687.462 1045.17,687.462 1045.73,687.462 1046.29,687.462 1046.85,687.462 1047.41,687.462 1047.97,687.462 1048.53,687.462 1049.09,687.462 1049.65,687.462 1050.2,687.462 1050.76,687.462 1051.32,687.462 1051.88,687.462 1052.44,687.462 1053,687.462 1053.56,687.462 1054.12,687.462 1054.68,687.462 1055.24,687.462 1055.8,687.462 1056.36,687.462 1056.92,687.462 1057.48,687.462 1058.03,687.462 1058.59,687.462 1059.15,687.462 1059.71,687.462 1060.27,687.462 1060.83,687.462 1061.39,687.462 1061.95,687.462 1062.51,687.462 1063.07,687.462 1063.63,687.462 1064.19,687.462 1064.75,687.462 1065.3,687.462 1065.86,687.462 1066.42,687.462 1066.98,687.462 1067.54,687.462 1068.1,687.462 1068.66,687.462 1069.22,687.462 1069.78,687.462 1070.34,687.462 1070.9,687.462 1071.46,687.462 1072.02,687.462 1072.57,687.462 1073.13,687.462 1073.69,687.462 1074.25,687.462 1074.81,687.462 1075.37,687.462 1075.93,687.462 1076.49,687.462 1077.05,687.462 1077.61,687.462 1078.17,687.462 1078.73,687.462 1079.29,687.462 1079.85,687.462 1080.4,687.462 1080.96,687.462 1081.52,687.462 1082.08,687.462 1082.64,687.462 1083.2,687.462 1083.76,687.462 1084.32,687.462 1084.88,687.462 1085.44,687.462 1086,687.462 1086.56,687.462 1087.12,687.462 1087.67,687.462 1088.23,687.462 1088.79,687.462 1089.35,687.462 1089.91,687.462 1090.47,687.462 1091.03,687.462 1091.59,687.462 1092.15,687.462 1092.71,687.462 1093.27,687.462 1093.83,687.462 1094.39,687.462 1094.94,687.462 1095.5,687.462 1096.06,687.462 1096.62,687.462 1097.18,687.462 1097.74,687.462 1098.3,687.462 1098.86,687.462 1099.42,687.462 1099.98,687.462 1100.54,687.462 1101.1,687.462 1101.66,687.462 1102.22,687.462 1102.77,687.462 1103.33,687.462 1103.89,687.462 1104.45,687.462 1105.01,687.462 1105.57,687.462 1106.13,687.462 1106.69,687.462 1107.25,687.462 1107.81,687.462 1108.37,687.462 1108.93,687.462 1109.49,687.462 1110.04,687.462 1110.6,687.462 1111.16,687.462 1111.72,687.462 1112.28,687.462 1112.84,687.462 1113.4,687.462 1113.96,687.462 1114.52,687.462 1115.08,687.462 1115.64,687.462 1116.2,687.462 1116.76,687.462 1117.31,687.462 1117.87,687.462 1118.43,687.462 1118.99,687.462 1119.55,687.462 1120.11,687.462 1120.67,687.462 1121.23,687.462 1121.79,687.462 1122.35,687.462 1122.91,687.462 1123.47,687.462 1124.03,687.462 1124.59,687.462 1125.14,687.462 1125.7,687.462 1126.26,687.462 1126.82,687.462 1127.38,687.462 1127.94,687.462 1128.5,687.462 1129.06,687.462 1129.62,687.462 1130.18,687.462 1130.74,687.462 1131.3,687.462 1131.86,687.462 1132.41,687.462 1132.97,687.462 1133.53,687.462 1134.09,687.462 1134.65,687.462 1135.21,687.462 1135.77,687.462 1136.33,687.462 1136.89,687.462 1137.45,687.462 1138.01,687.462 1138.57,687.462 1139.13,687.462 1139.68,687.462 1140.24,687.462 1140.8,687.462 1141.36,687.462 1141.92,687.462 1142.48,687.462 1143.04,687.462 1143.6,687.462 1144.16,687.462 1144.72,687.462 1145.28,687.462 1145.84,687.462 1146.4,687.462 1146.96,687.462 1147.51,687.462 1148.07,687.462 1148.63,687.462 1149.19,687.462 1149.75,687.462 1150.31,687.462 1150.87,687.462 1151.43,687.462 1151.99,687.462 1152.55,687.462 1153.11,687.462 1153.67,687.462 1154.23,687.462 1154.78,687.462 1155.34,687.462 1155.9,687.462 1156.46,687.462 1157.02,687.462 1157.58,687.462 1158.14,687.462 1158.7,687.462 1159.26,687.462 1159.82,687.462 1160.38,687.462 1160.94,687.462 1161.5,687.462 1162.05,687.462 1162.61,687.462 1163.17,687.462 1163.73,687.462 1164.29,687.462 1164.85,687.462 1165.41,687.462 1165.97,687.462 1166.53,687.462 1167.09,687.462 1167.65,687.462 1168.21,687.462 1168.77,687.462 1169.33,687.462 1169.88,687.462 1170.44,687.462 1171,687.462 1171.56,687.462 1172.12,687.462 1172.68,687.462 1173.24,687.462 1173.8,687.462 1174.36,687.462 1174.92,687.462 1175.48,687.462 1176.04,687.462 1176.6,687.462 1177.15,687.462 1177.71,687.462 1178.27,687.462 1178.83,687.462 1179.39,687.462 1179.95,687.462 1180.51,687.462 1181.07,687.462 1181.63,687.462 1182.19,687.462 1182.75,687.462 1183.31,687.462 1183.87,687.462 1184.43,687.462 1184.98,687.462 1185.54,687.462 1186.1,687.462 1186.66,687.462 1187.22,687.462 1187.78,687.462 1188.34,687.462 1188.9,687.462 1189.46,687.462 1190.02,687.462 1190.58,687.462 1191.14,687.462 1191.7,687.462 1192.25,687.462 1192.81,687.462 1193.37,687.462 1193.93,687.462 1194.49,687.462 1195.05,687.462 1195.61,687.462 1196.17,687.462 1196.73,687.462 1197.29,687.462 1197.85,687.462 1198.41,687.462 1198.97,687.462 1199.52,687.462 1200.08,687.462 1200.64,687.462 1201.2,687.462 1201.76,687.462 1202.32,687.462 1202.88,687.462 1203.44,687.462 1204,687.462 1204.56,687.462 1205.12,687.462 1205.68,687.462 1206.24,687.462 1206.8,687.462 1207.35,687.462 1207.91,687.462 1208.47,687.462 1209.03,687.462 1209.59,687.462 1210.15,687.462 1210.71,687.462 1211.27,687.462 1211.83,687.462 1212.39,687.462 1212.95,687.462 1213.51,687.462 1214.07,687.462 1214.62,687.462 1215.18,687.462 1215.74,687.462 1216.3,687.462 1216.86,687.462 1217.42,687.462 1217.98,687.462 1218.54,687.462 1219.1,687.462 1219.66,687.462 1220.22,687.462 1220.78,687.462 1221.34,687.462 1221.89,687.462 1222.45,687.462 1223.01,687.462 1223.57,687.462 1224.13,687.462 1224.69,687.462 1225.25,687.462 1225.81,687.462 1226.37,687.462 1226.93,687.462 1227.49,687.462 1228.05,687.462 1228.61,687.462 1229.17,687.462 1229.72,687.462 1230.28,687.462 1230.84,687.462 1231.4,687.462 1231.96,687.462 1232.52,687.462 1233.08,687.462 1233.64,687.462 1234.2,687.462 1234.76,687.462 1235.32,687.462 1235.88,687.462 1236.44,687.462 1236.99,687.462 1237.55,687.462 1238.11,687.462 1238.67,687.462 1239.23,687.462 1239.79,687.462 1240.35,687.462 1240.91,687.462 1241.47,687.462 1242.03,687.462 1242.59,687.462 1243.15,687.462 1243.71,687.462 1244.26,687.462 1244.82,687.462 1245.38,687.462 1245.94,687.462 1246.5,687.462 1247.06,687.462 1247.62,687.462 1248.18,687.462 1248.74,687.462 1249.3,687.462 1249.86,687.462 1250.42,687.462 1250.98,687.462 1251.54,687.462 1252.09,687.462 1252.65,687.462 1253.21,687.462 1253.77,687.462 1254.33,687.462 1254.89,687.462 1255.45,687.462 1256.01,687.462 1256.57,687.462 1257.13,687.462 1257.69,687.462 1258.25,687.462 1258.81,687.462 1259.36,687.462 1259.92,687.462 1260.48,687.462 1261.04,687.462 1261.6,687.462 1262.16,687.462 1262.72,687.462 1263.28,687.462 1263.84,687.462 1264.4,687.462 1264.96,687.462 1265.52,687.462 1266.08,687.462 1266.63,687.462 1267.19,687.462 1267.75,687.462 1268.31,687.462 1268.87,687.462 1269.43,687.462 1269.99,687.462 1270.55,687.462 1271.11,687.462 1271.67,687.462 1272.23,687.462 1272.79,687.462 1273.35,687.462 1273.91,687.462 1274.46,687.462 1275.02,687.462 1275.58,687.462 1276.14,687.462 1276.7,687.462 1277.26,687.462 1277.82,687.462 1278.38,687.462 1278.94,687.462 1279.5,687.462 1280.06,687.462 1280.62,687.462 1281.18,687.462 1281.73,687.462 1282.29,687.462 1282.85,687.462 1283.41,687.462 1283.97,687.462 1284.53,687.462 1285.09,687.462 1285.65,687.462 1286.21,687.462 1286.77,687.462 1287.33,687.462 1287.89,687.462 1288.45,687.462 1289,687.462 1289.56,687.462 1290.12,687.462 1290.68,687.462 1291.24,687.462 1291.8,687.462 1292.36,687.462 1292.92,687.462 1293.48,687.462 1294.04,687.462 1294.6,687.462 1295.16,687.462 1295.72,687.462 1296.28,687.462 1296.83,687.462 1297.39,687.462 1297.95,687.462 1298.51,687.462 1299.07,687.462 1299.63,687.462 1300.19,687.462 1300.75,687.462 1301.31,687.462 1301.87,687.462 1302.43,687.462 1302.99,687.462 1303.55,687.462 1304.1,687.462 1304.66,687.462 1305.22,687.462 1305.78,687.462 1306.34,687.462 1306.9,687.462 1307.46,687.462 1308.02,687.462 1308.58,687.462 1309.14,687.462 1309.7,687.462 1310.26,687.462 1310.82,687.462 1311.38,687.462 1311.93,687.462 1312.49,687.462 1313.05,687.462 1313.61,687.462 1314.17,687.462 1314.73,687.462 1315.29,687.462 1315.85,687.462 1316.41,687.462 1316.97,687.462 1317.53,687.462 1318.09,687.462 1318.65,687.462 1319.2,687.462 1319.76,687.462 1320.32,687.462 1320.88,687.462 1321.44,687.462 1322,687.462 1322.56,687.462 1323.12,687.462 1323.68,687.462 1324.24,687.462 1324.8,687.462 1325.36,687.462 1325.92,687.462 1326.47,687.462 1327.03,687.462 1327.59,687.462 1328.15,687.462 1328.71,687.462 1329.27,687.462 1329.83,687.462 1330.39,687.462 1330.95,687.462 1331.51,687.462 1332.07,687.462 1332.63,687.462 1333.19,687.462 1333.75,687.462 1334.3,687.462 1334.86,687.462 1335.42,687.462 1335.98,687.462 1336.54,687.462 1337.1,687.462 1337.66,687.462 1338.22,687.462 1338.78,687.462 1339.34,687.462 1339.9,687.462 1340.46,687.462 1341.02,687.462 1341.57,687.462 1342.13,687.462 1342.69,687.462 1343.25,687.462 1343.81,687.462 1344.37,687.462 1344.93,687.462 1345.49,687.462 1346.05,687.462 1346.61,687.462 1347.17,687.462 1347.73,687.462 1348.29,687.462 1348.84,687.462 1349.4,687.462 1349.96,687.462 1350.52,687.462 1351.08,687.462 1351.64,687.462 1352.2,687.462 1352.76,687.462 1353.32,687.462 1353.88,687.462 1354.44,687.462 1355,687.462 1355.56,687.462 1356.12,687.462 1356.67,687.462 1357.23,687.462 1357.79,687.462 1358.35,687.462 1358.91,687.462 1359.47,687.462 1360.03,687.462 1360.59,687.462 1361.15,687.462 1361.71,687.462 1362.27,687.462 1362.83,687.462 1363.39,687.462 1363.94,687.462 1364.5,687.462 1365.06,687.462 1365.62,687.462 1366.18,687.462 1366.74,687.462 1367.3,687.462 1367.86,687.462 1368.42,687.462 1368.98,687.462 1369.54,687.462 1370.1,687.462 1370.66,687.462 1371.21,687.462 1371.77,687.462 1372.33,687.462 1372.89,687.462 1373.45,687.462 1374.01,687.462 1374.57,687.462 1375.13,687.462 1375.69,687.462 1376.25,687.462 1376.81,687.462 1377.37,687.462 1377.93,687.462 1378.49,687.462 1379.04,687.462 1379.6,687.462 1380.16,687.462 1380.72,687.462 1381.28,687.462 1381.84,687.462 1382.4,687.462 1382.96,687.462 1383.52,687.462 1384.08,687.462 1384.64,687.462 1385.2,687.462 1385.76,687.462 1386.31,687.462 1386.87,687.462 1387.43,687.462 1387.99,687.462 1388.55,687.462 1389.11,687.462 1389.67,687.462 1390.23,687.462 1390.79,687.462 1391.35,687.462 1391.91,687.462 1392.47,687.462 1393.03,687.462 1393.58,687.462 1394.14,687.462 1394.7,687.462 1395.26,687.462 1395.82,687.462 1396.38,687.462 1396.94,687.462 1397.5,687.462 1398.06,687.462 1398.62,687.462 1399.18,687.462 1399.74,687.462 1400.3,687.462 1400.86,687.462 1401.41,687.462 1401.97,687.462 1402.53,687.462 1403.09,687.462 1403.65,687.462 1404.21,687.462 1404.77,687.462 1405.33,687.462 1405.89,687.462 1406.45,687.462 1407.01,687.462 1407.57,687.462 1408.13,687.462 1408.68,687.462 1409.24,687.462 1409.8,687.462 1410.36,687.462 1410.92,687.462 1411.48,687.462 1412.04,687.462 1412.6,687.462 1413.16,687.462 1413.72,687.462 1414.28,687.462 1414.84,687.462 1415.4,687.462 1415.95,687.462 1416.51,687.462 1417.07,687.462 1417.63,687.462 1418.19,687.462 1418.75,687.462 1419.31,687.462 1419.87,687.462 1420.43,687.462 1420.99,687.462 1421.55,687.462 1422.11,687.462 1422.67,687.462 1423.23,687.462 1423.78,687.462 1424.34,687.462 1424.9,687.462 1425.46,687.462 1426.02,687.462 1426.58,687.462 1427.14,687.462 1427.7,687.462 1428.26,687.462 1428.82,687.462 1429.38,687.462 1429.94,687.462 1430.5,687.462 1431.05,687.462 1431.61,687.462 1432.17,687.462 1432.73,687.462 1433.29,687.462 1433.85,687.462 1434.41,687.462 1434.97,687.462 1435.53,687.462 1436.09,687.462 1436.65,687.462 1437.21,687.462 1437.77,687.462 1438.33,687.462 1438.88,687.462 1439.44,687.462 1440,687.462 1440.56,687.462 1441.12,687.462 1441.68,687.462 1442.24,687.462 1442.8,687.462 1443.36,687.462 1443.92,687.462 1444.48,687.462 1445.04,687.462 1445.6,687.462 1446.15,687.462 1446.71,687.462 1447.27,687.462 1447.83,687.462 1448.39,687.462 1448.95,687.462 1449.51,687.462 1450.07,687.462 1450.63,687.462 1451.19,687.462 1451.75,687.462 1452.31,687.462 1452.87,687.462 1453.42,687.462 1453.98,687.462 1454.54,687.462 1455.1,687.462 1455.66,687.462 1456.22,687.462 1456.78,687.462 1457.34,687.462 1457.9,687.462 1458.46,687.462 1459.02,687.462 1459.58,687.462 1460.14,687.462 1460.7,687.462 1461.25,687.462 1461.81,687.462 1462.37,687.462 1462.93,687.462 1463.49,687.462 1464.05,687.462 1464.61,687.462 1465.17,687.462 1465.73,687.462 1466.29,687.462 1466.85,687.462 1467.41,687.462 1467.97,687.462 1468.52,687.462 1469.08,687.462 1469.64,687.462 1470.2,687.462 1470.76,687.462 1471.32,687.462 1471.88,687.462 1472.44,687.462 1473,687.462 1473.56,687.462 1474.12,687.462 1474.68,687.462 1475.24,687.462 1475.79,687.462 1476.35,687.462 1476.91,687.462 1477.47,687.462 1478.03,687.462 1478.59,687.462 1479.15,687.462 1479.71,687.462 1480.27,687.462 1480.83,687.462 1481.39,687.462 1481.95,687.462 1482.51,687.462 1483.07,687.462 1483.62,687.462 1484.18,687.462 1484.74,687.462 1485.3,687.462 1485.86,687.462 1486.42,687.462 1486.98,687.462 1487.54,687.462 1488.1,687.462 1488.66,687.462 1489.22,687.462 1489.78,687.462 1490.34,687.462 1490.89,687.462 1491.45,687.462 1492.01,687.462 1492.57,687.462 1493.13,687.462 1493.69,687.462 1494.25,687.462 1494.81,687.462 1495.37,687.462 1495.93,687.462 1496.49,687.462 1497.05,687.462 1497.61,687.462 1498.16,687.462 1498.72,687.462 1499.28,687.462 1499.84,687.462 1500.4,687.462 1500.96,687.462 1501.52,687.462 1502.08,687.462 1502.64,687.462 1503.2,687.462 1503.76,687.462 1504.32,687.462 1504.88,687.462 1505.44,687.462 1505.99,687.462 1506.55,687.462 1507.11,687.462 1507.67,687.462 1508.23,687.462 1508.79,687.462 1509.35,687.462 1509.91,687.462 1510.47,687.462 1511.03,687.462 1511.59,687.462 1512.15,687.462 1512.71,687.462 1513.26,687.462 1513.82,687.462 1514.38,687.462 1514.94,687.462 1515.5,687.462 1516.06,687.462 1516.62,687.462 1517.18,687.462 1517.74,687.462 1518.3,687.462 1518.86,687.462 1519.42,687.462 1519.98,687.462 1520.53,687.462 1521.09,687.462 1521.65,687.462 1522.21,687.462 1522.77,687.462 1523.33,687.462 1523.89,687.462 1524.45,687.462 1525.01,687.462 1525.57,687.462 1526.13,687.462 1526.69,687.462 1527.25,687.462 1527.81,687.462 1528.36,687.462 1528.92,687.462 1529.48,687.462 1530.04,687.462 1530.6,687.462 1531.16,687.462 1531.72,687.462 1532.28,687.462 1532.84,687.462 1533.4,687.462 1533.96,687.462 1534.52,687.462 1535.08,687.462 1535.63,687.462 1536.19,687.462 1536.75,687.462 1537.31,687.462 1537.87,687.462 1538.43,687.462 1538.99,687.462 1539.55,687.462 1540.11,687.462 1540.67,687.462 1541.23,687.462 1541.79,687.462 1542.35,687.462 1542.9,687.462 1543.46,687.462 1544.02,687.462 1544.58,687.462 1545.14,687.462 1545.7,687.462 1546.26,687.462 1546.82,687.462 1547.38,687.462 1547.94,687.462 1548.5,687.462 1549.06,687.462 1549.62,687.462 1550.18,687.462 1550.73,687.462 1551.29,687.462 1551.85,687.462 1552.41,687.462 1552.97,687.462 1553.53,687.462 1554.09,687.462 1554.65,687.462 1555.21,687.462 1555.77,687.462 1556.33,687.462 1556.89,687.462 1557.45,687.462 1558,687.462 1558.56,687.462 1559.12,687.462 1559.68,687.462 1560.24,687.462 1560.8,687.462 1561.36,687.462 1561.92,687.462 1562.48,687.462 1563.04,687.462 1563.6,687.462 1564.16,687.462 1564.72,687.462 1565.28,687.462 1565.83,687.462 1566.39,687.462 1566.95,687.462 1567.51,687.462 1568.07,687.462 1568.63,687.462 1569.19,687.462 1569.75,687.462 1570.31,687.462 1570.87,687.462 1571.43,687.462 1571.99,687.462 1572.55,687.462 1573.1,687.462 1573.66,687.462 1574.22,687.462 1574.78,687.462 1575.34,687.462 1575.9,687.462 1576.46,687.462 1577.02,687.462 1577.58,687.462 1578.14,687.462 1578.7,687.462 1579.26,687.462 1579.82,687.462 1580.37,687.462 1580.93,687.462 1581.49,687.462 1582.05,687.462 1582.61,687.462 1583.17,687.462 1583.73,687.462 1584.29,687.462 1584.85,687.462 1585.41,687.462 1585.97,687.462 1586.53,687.462 1587.09,687.462 1587.65,687.462 1588.2,687.462 1588.76,687.462 1589.32,687.462 1589.88,687.462 1590.44,687.462 1591,687.462 1591.56,687.462 1592.12,687.462 1592.68,687.462 1593.24,687.462 1593.8,687.462 1594.36,687.462 1594.92,687.462 1595.47,687.462 1596.03,687.462 1596.59,687.462 1597.15,687.462 1597.71,687.462 1598.27,687.462 1598.83,687.462 1599.39,687.462 1599.95,687.462 1600.51,687.462 1601.07,687.462 1601.63,687.462 1602.19,687.462 1602.74,687.462 1603.3,687.462 1603.86,687.462 1604.42,687.462 1604.98,687.462 1605.54,687.462 1606.1,687.462 1606.66,687.462 1607.22,687.462 1607.78,687.462 1608.34,687.462 1608.9,687.462 1609.46,687.462 1610.02,687.462 1610.57,687.462 1611.13,687.462 1611.69,687.462 1612.25,687.462 1612.81,687.462 1613.37,687.462 1613.93,687.462 1614.49,687.462 1615.05,687.462 1615.61,687.462 1616.17,687.462 1616.73,687.462 1617.29,687.462 1617.84,687.462 1618.4,687.462 1618.96,687.462 1619.52,687.462 1620.08,687.462 1620.64,687.462 1621.2,687.462 1621.76,687.462 1622.32,687.462 1622.88,687.462 1623.44,687.462 1624,687.462 1624.56,687.462 1625.11,687.462 1625.67,687.462 1626.23,687.462 1626.79,687.462 1627.35,687.462 1627.91,687.462 1628.47,687.462 1629.03,687.462 1629.59,687.462 1630.15,687.462 1630.71,687.462 1631.27,687.462 1631.83,687.462 1632.39,687.462 1632.94,687.462 1633.5,687.462 1634.06,687.462 1634.62,687.462 1635.18,687.462 1635.74,687.462 1636.3,687.462 1636.86,687.462 1637.42,687.462 1637.98,687.462 1638.54,687.462 1639.1,687.462 1639.66,687.462 1640.21,687.462 1640.77,687.462 1641.33,687.462 1641.89,687.462 1642.45,687.462 1643.01,687.462 1643.57,687.462 1644.13,687.462 1644.69,687.462 1645.25,687.462 1645.81,687.462 1646.37,687.462 1646.93,687.462 1647.48,687.462 1648.04,687.462 1648.6,687.462 1649.16,687.462 1649.72,687.462 1650.28,687.462 1650.84,687.462 1651.4,687.462 1651.96,687.462 1652.52,687.462 1653.08,687.462 1653.64,687.462 1654.2,687.462 1654.76,687.462 1655.31,687.462 1655.87,687.462 1656.43,687.462 1656.99,687.462 1657.55,687.462 1658.11,687.462 1658.67,687.462 1659.23,687.462 1659.79,687.462 1660.35,687.462 1660.91,687.462 1661.47,687.462 1662.03,687.462 1662.58,687.462 1663.14,687.462 1663.7,687.462 1664.26,687.462 1664.82,687.462 1665.38,687.462 1665.94,687.462 1666.5,687.462 1667.06,687.462 1667.62,687.462 1668.18,687.462 1668.74,687.462 1669.3,687.462 1669.85,687.462 1670.41,687.462 1670.97,687.462 1671.53,687.462 1672.09,687.462 1672.65,687.462 1673.21,687.462 1673.77,687.462 1674.33,687.462 1674.89,687.462 1675.45,687.462 1676.01,687.462 1676.57,687.462 1677.13,687.462 1677.68,687.462 1678.24,687.462 1678.8,687.462 1679.36,687.462 1679.92,687.462 1680.48,687.462 1681.04,687.462 1681.6,687.462 1682.16,687.462 1682.72,687.462 1683.28,687.462 1683.84,687.462 1684.4,687.462 1684.95,687.462 1685.51,687.462 1686.07,687.462 1686.63,687.462 1687.19,687.462 1687.75,687.462 1688.31,687.462 1688.87,687.462 1689.43,687.462 1689.99,687.462 1690.55,687.462 1691.11,687.462 1691.67,687.462 1692.23,687.462 1692.78,687.462 1693.34,687.462 1693.9,687.462 1694.46,687.462 1695.02,687.462 1695.58,687.462 1696.14,687.462 1696.7,687.462 1697.26,687.462 1697.82,687.462 1698.38,687.462 1698.94,687.462 1699.5,687.462 1700.05,687.462 1700.61,687.462 1701.17,687.462 1701.73,687.462 1702.29,687.462 1702.85,687.462 1703.41,687.462 1703.97,687.462 1704.53,687.462 1705.09,687.462 1705.65,687.462 1706.21,687.462 1706.77,687.462 1707.32,687.462 1707.88,687.462 1708.44,687.462 1709,687.462 1709.56,687.462 1710.12,687.462 1710.68,687.462 1711.24,687.462 1711.8,687.462 1712.36,687.462 1712.92,687.462 1713.48,687.462 1714.04,687.462 1714.6,687.462 1715.15,687.462 1715.71,687.462 1716.27,687.462 1716.83,687.462 1717.39,687.462 1717.95,687.462 1718.51,687.462 1719.07,687.462 1719.63,687.462 1720.19,687.462 1720.75,687.462 1721.31,687.462 1721.87,687.462 1722.42,687.462 1722.98,687.462 1723.54,687.462 1724.1,687.462 1724.66,687.462 1725.22,687.462 1725.78,687.462 1726.34,687.462 1726.9,687.462 1727.46,687.462 1728.02,687.462 1728.58,687.462 1729.14,687.462 1729.69,687.462 1730.25,687.462 1730.81,687.462 1731.37,687.462 1731.93,687.462 1732.49,687.462 1733.05,687.462 1733.61,687.462 1734.17,687.462 1734.73,687.462 1735.29,687.462 1735.85,687.462 1736.41,687.462 1736.97,687.462 1737.52,687.462 1738.08,687.462 1738.64,687.462 1739.2,687.462 1739.76,687.462 1740.32,687.462 1740.88,687.462 1741.44,687.462 1742,687.462 1742.56,687.462 1743.12,687.462 1743.68,687.462 1744.24,687.462 1744.79,687.462 1745.35,687.462 1745.91,687.462 1746.47,687.462 1747.03,687.462 1747.59,687.462 1748.15,687.462 1748.71,687.462 1749.27,687.462 1749.83,687.462 1750.39,687.462 1750.95,687.462 1751.51,687.462 1752.06,687.462 1752.62,687.462 1753.18,687.462 1753.74,687.462 1754.3,687.462 1754.86,687.462 1755.42,687.462 1755.98,687.462 1756.54,687.462 1757.1,687.462 1757.66,687.462 1758.22,687.462 1758.78,687.462 1759.34,687.462 1759.89,687.462 1760.45,687.462 1761.01,687.462 1761.57,687.462 1762.13,687.462 1762.69,687.462 1763.25,687.462 1763.81,687.462 1764.37,687.462 1764.93,687.462 1765.49,687.462 1766.05,687.462 1766.61,687.462 1767.16,687.462 1767.72,687.462 1768.28,687.462 1768.84,687.462 1769.4,687.462 1769.96,687.462 1770.52,687.462 1771.08,687.462 1771.64,687.462 1772.2,687.462 1772.76,687.462 1773.32,687.462 1773.88,687.462 1774.43,687.462 1774.99,687.462 1775.55,687.462 1776.11,687.462 1776.67,687.462 1777.23,687.462 1777.79,687.462 1778.35,687.462 1778.91,687.462 1779.47,687.462 1780.03,687.462 1780.59,687.462 1781.15,687.462 1781.71,687.462 1782.26,687.462 1782.82,687.462 1783.38,687.462 1783.94,687.462 1784.5,687.462 1785.06,687.462 1785.62,687.462 1786.18,687.462 1786.74,687.462 1787.3,687.462 1787.86,687.462 1788.42,687.462 1788.98,687.462 1789.53,687.462 1790.09,687.462 1790.65,687.462 1791.21,687.462 1791.77,687.462 1792.33,687.462 1792.89,687.462 1793.45,687.462 1794.01,687.462 1794.57,687.462 1795.13,687.462 1795.69,687.462 1796.25,687.462 1796.8,687.462 1797.36,687.462 1797.92,687.462 1798.48,687.462 1799.04,687.462 1799.6,687.462 1800.16,687.462 1800.72,687.462 1801.28,687.462 1801.84,687.462 1802.4,687.462 1802.96,687.462 1803.52,687.462 1804.08,687.462 1804.63,687.462 1805.19,687.462 1805.75,687.462 1806.31,687.462 1806.87,687.462 1807.43,687.462 1807.99,687.462 1808.55,687.462 1809.11,687.462 1809.67,687.462 1810.23,687.462 1810.79,687.462 1811.35,687.462 1811.9,687.462 1812.46,687.462 1813.02,687.462 1813.58,687.462 1814.14,687.462 1814.7,687.462 1815.26,687.462 1815.82,687.462 1816.38,687.462 1816.94,687.462 1817.5,687.462 1818.06,687.462 1818.62,687.462 1819.18,687.462 1819.73,687.462 1820.29,687.462 1820.85,687.462 1821.41,687.462 1821.97,687.462 1822.53,687.462 1823.09,687.462 1823.65,687.462 1824.21,687.462 1824.77,687.462 1825.33,687.462 1825.89,687.462 1826.45,687.462 1827,687.462 1827.56,687.462 1828.12,687.462 1828.68,687.462 1829.24,687.462 1829.8,687.462 1830.36,687.462 1830.92,687.462 1831.48,687.462 1832.04,687.462 1832.6,687.462 1833.16,687.462 1833.72,687.462 1834.27,687.462 1834.83,687.462 1835.39,687.462 1835.95,687.462 1836.51,687.462 1837.07,687.462 1837.63,687.462 1838.19,687.462 \"/>\n<path clip-path=\"url(#clip753)\" d=\"M720.247 684.36 L720.806 684.36 L721.365 684.36 L721.924 684.36 L722.484 684.36 L723.043 684.36 L723.602 684.36 L724.161 684.36 L724.721 684.36 L725.28 684.36 L725.839 684.36 L726.398 684.36 L726.958 684.36 L727.517 684.36 L728.076 684.36 L728.635 684.36 L729.195 684.36 L729.754 684.36 L730.313 684.36 L730.872 684.36 L731.432 684.36 L731.991 684.36 L732.55 684.36 L733.109 684.36 L733.669 684.36 L734.228 684.36 L734.787 684.36 L735.346 684.36 L735.906 684.36 L736.465 684.36 L737.024 684.36 L737.583 684.36 L738.143 684.36 L738.702 684.36 L739.261 684.36 L739.82 684.36 L740.38 684.36 L740.939 684.36 L741.498 684.36 L742.057 684.36 L742.617 684.36 L743.176 684.36 L743.735 684.36 L744.294 684.36 L744.854 684.36 L745.413 684.36 L745.972 684.36 L746.531 684.36 L747.091 684.36 L747.65 684.36 L748.209 684.36 L748.768 684.36 L749.328 684.36 L749.887 684.36 L750.446 684.36 L751.005 684.36 L751.565 684.36 L752.124 684.36 L752.683 684.36 L753.242 684.36 L753.802 684.36 L754.361 684.36 L754.92 684.36 L755.479 684.36 L756.039 684.36 L756.598 684.36 L757.157 684.36 L757.716 684.36 L758.276 684.36 L758.835 684.36 L759.394 684.36 L759.953 684.36 L760.513 684.36 L761.072 684.36 L761.631 684.36 L762.19 684.36 L762.75 684.36 L763.309 684.36 L763.868 684.36 L764.427 684.36 L764.987 684.36 L765.546 684.36 L766.105 684.36 L766.664 684.36 L767.224 684.36 L767.783 684.36 L768.342 684.36 L768.901 684.36 L769.461 684.36 L770.02 684.36 L770.579 684.36 L771.138 684.36 L771.698 684.36 L772.257 684.36 L772.816 684.36 L773.375 684.36 L773.935 684.36 L774.494 684.36 L775.053 684.36 L775.612 684.36 L776.172 684.36 L776.731 684.36 L777.29 684.36 L777.849 684.36 L778.409 684.36 L778.968 684.36 L779.527 684.36 L780.086 684.36 L780.646 684.36 L781.205 684.36 L781.764 684.36 L782.323 684.36 L782.883 684.36 L783.442 684.36 L784.001 684.36 L784.56 684.36 L785.12 684.36 L785.679 684.36 L786.238 684.36 L786.797 684.36 L787.357 684.36 L787.916 684.36 L788.475 684.36 L789.034 684.36 L789.594 684.36 L790.153 684.36 L790.712 684.36 L791.271 684.36 L791.831 684.36 L792.39 684.36 L792.949 684.36 L793.508 684.36 L794.068 684.36 L794.627 684.36 L795.186 684.36 L795.745 684.36 L796.305 684.36 L796.864 684.36 L797.423 684.36 L797.982 684.36 L798.542 684.36 L799.101 684.36 L799.66 684.36 L800.219 684.36 L800.779 684.36 L801.338 684.36 L801.897 684.36 L802.456 684.36 L803.016 684.36 L803.575 684.36 L804.134 684.36 L804.693 684.36 L805.253 684.36 L805.812 684.36 L806.371 684.36 L806.931 684.36 L807.49 684.36 L808.049 684.36 L808.608 684.36 L809.168 684.36 L809.727 684.36 L810.286 684.36 L810.845 684.36 L811.405 684.36 L811.964 684.36 L812.523 684.36 L813.082 684.36 L813.642 684.36 L814.201 684.36 L814.76 684.36 L815.319 684.36 L815.879 684.36 L816.438 684.36 L816.997 684.36 L817.556 684.36 L818.116 684.36 L818.675 684.36 L819.234 684.36 L819.793 684.36 L820.353 684.36 L820.912 684.36 L821.471 684.36 L822.03 684.36 L822.59 684.36 L823.149 684.36 L823.708 684.36 L824.267 684.36 L824.827 684.36 L825.386 684.36 L825.945 684.36 L826.504 684.36 L827.064 684.36 L827.623 684.36 L828.182 684.36 L828.741 684.36 L829.301 684.36 L829.86 684.36 L830.419 684.36 L830.978 684.36 L831.538 684.36 L832.097 684.36 L832.656 684.36 L833.215 684.36 L833.775 684.36 L834.334 684.36 L834.893 684.36 L835.452 684.36 L836.012 684.36 L836.571 684.36 L837.13 684.36 L837.689 684.36 L838.249 684.36 L838.808 684.36 L839.367 684.36 L839.926 684.36 L840.486 684.36 L841.045 684.36 L841.604 684.36 L842.163 684.36 L842.723 684.36 L843.282 684.36 L843.841 684.36 L844.4 684.36 L844.96 684.36 L845.519 684.36 L846.078 684.36 L846.637 684.36 L847.197 684.36 L847.756 684.36 L848.315 684.36 L848.874 684.36 L849.434 684.36 L849.993 684.36 L850.552 684.36 L851.111 684.36 L851.671 684.36 L852.23 684.36 L852.789 684.36 L853.348 684.36 L853.908 684.36 L854.467 684.36 L855.026 684.36 L855.585 684.36 L856.145 684.36 L856.704 684.36 L857.263 684.36 L857.822 684.36 L858.382 684.36 L858.941 684.36 L859.5 684.36 L860.059 684.36 L860.619 684.36 L861.178 684.36 L861.737 684.36 L862.296 684.36 L862.856 684.36 L863.415 684.36 L863.974 684.36 L864.533 684.36 L865.093 684.36 L865.652 684.36 L866.211 684.36 L866.77 684.36 L867.33 684.36 L867.889 684.36 L868.448 684.36 L869.007 684.36 L869.567 684.36 L870.126 684.36 L870.685 684.36 L871.244 684.36 L871.804 684.36 L872.363 684.36 L872.922 684.36 L873.481 684.36 L874.041 684.36 L874.6 684.36 L875.159 684.36 L875.718 684.36 L876.278 684.36 L876.837 684.36 L877.396 684.36 L877.955 684.36 L878.515 684.36 L879.074 684.36 L879.633 684.36 L880.192 684.36 L880.752 684.36 L881.311 684.36 L881.87 684.36 L882.429 684.36 L882.989 684.36 L883.548 684.36 L884.107 684.36 L884.666 684.36 L885.226 684.36 L885.785 684.36 L886.344 684.36 L886.903 684.36 L887.463 684.36 L888.022 684.36 L888.581 684.36 L889.14 684.36 L889.7 684.36 L890.259 684.36 L890.818 684.36 L891.377 684.36 L891.937 684.36 L892.496 684.36 L893.055 684.36 L893.614 684.36 L894.174 684.36 L894.733 684.36 L895.292 684.36 L895.851 684.36 L896.411 684.36 L896.97 684.36 L897.529 684.36 L898.088 684.36 L898.648 684.36 L899.207 684.36 L899.766 684.36 L900.325 684.36 L900.885 684.36 L901.444 684.36 L902.003 684.36 L902.562 684.36 L903.122 684.36 L903.681 684.36 L904.24 684.36 L904.799 684.36 L905.359 684.36 L905.918 684.36 L906.477 684.36 L907.036 684.36 L907.596 684.36 L908.155 684.36 L908.714 684.36 L909.273 684.36 L909.833 684.36 L910.392 684.36 L910.951 684.36 L911.51 684.36 L912.07 684.36 L912.629 684.36 L913.188 684.36 L913.747 684.36 L914.307 684.36 L914.866 684.36 L915.425 684.36 L915.984 684.36 L916.544 684.36 L917.103 684.36 L917.662 684.36 L918.221 684.36 L918.781 684.36 L919.34 684.36 L919.899 684.36 L920.458 684.36 L921.018 684.36 L921.577 684.36 L922.136 684.36 L922.695 684.36 L923.255 684.36 L923.814 684.36 L924.373 684.36 L924.932 684.36 L925.492 684.36 L926.051 684.36 L926.61 684.36 L927.169 684.36 L927.729 684.36 L928.288 684.36 L928.847 684.36 L929.406 684.36 L929.966 684.36 L930.525 684.36 L931.084 684.36 L931.644 684.36 L932.203 684.36 L932.762 684.36 L933.321 684.36 L933.881 684.36 L934.44 684.36 L934.999 684.36 L935.558 684.36 L936.118 684.36 L936.677 684.36 L937.236 684.36 L937.795 684.36 L938.355 684.36 L938.914 684.36 L939.473 684.36 L940.032 684.36 L940.592 684.36 L941.151 684.36 L941.71 684.36 L942.269 684.36 L942.829 684.36 L943.388 684.36 L943.947 684.36 L944.506 684.36 L945.066 684.36 L945.625 684.36 L946.184 684.36 L946.743 684.36 L947.303 684.36 L947.862 684.36 L948.421 684.36 L948.98 684.36 L949.54 684.36 L950.099 684.36 L950.658 684.36 L951.217 684.36 L951.777 684.36 L952.336 684.36 L952.895 684.36 L953.454 684.36 L954.014 684.36 L954.573 684.36 L955.132 684.36 L955.691 684.36 L956.251 684.36 L956.81 684.36 L957.369 684.36 L957.928 684.36 L958.488 684.36 L959.047 684.36 L959.606 684.36 L960.165 684.36 L960.725 684.36 L961.284 684.36 L961.843 684.36 L962.402 684.36 L962.962 684.36 L963.521 684.36 L964.08 684.36 L964.639 684.36 L965.199 684.36 L965.758 684.36 L966.317 684.36 L966.876 684.36 L967.436 684.36 L967.995 684.36 L968.554 684.36 L969.113 684.36 L969.673 684.36 L970.232 684.36 L970.791 684.36 L971.35 684.36 L971.91 684.36 L972.469 684.36 L973.028 684.36 L973.587 684.36 L974.147 684.36 L974.706 684.36 L975.265 684.36 L975.824 684.36 L976.384 684.36 L976.943 684.36 L977.502 684.36 L978.061 684.36 L978.621 684.36 L979.18 684.36 L979.739 684.36 L980.298 684.36 L980.858 684.36 L981.417 684.36 L981.976 684.36 L982.535 684.36 L983.095 684.36 L983.654 684.36 L984.213 684.36 L984.772 684.36 L985.332 684.36 L985.891 684.36 L986.45 684.36 L987.009 684.36 L987.569 684.36 L988.128 684.36 L988.687 684.36 L989.246 684.36 L989.806 684.36 L990.365 684.36 L990.924 684.36 L991.483 684.36 L992.043 684.36 L992.602 684.36 L993.161 684.36 L993.72 684.36 L994.28 684.36 L994.839 684.36 L995.398 684.36 L995.957 684.36 L996.517 684.36 L997.076 684.36 L997.635 684.36 L998.194 684.36 L998.754 684.36 L999.313 684.36 L999.872 684.36 L1000.43 684.36 L1000.99 684.36 L1001.55 684.36 L1002.11 684.36 L1002.67 684.36 L1003.23 684.36 L1003.79 684.36 L1004.35 684.36 L1004.91 684.36 L1005.46 684.36 L1006.02 684.36 L1006.58 684.36 L1007.14 684.36 L1007.7 684.36 L1008.26 684.36 L1008.82 684.36 L1009.38 684.36 L1009.94 684.36 L1010.5 684.36 L1011.06 684.36 L1011.62 684.36 L1012.18 684.36 L1012.73 684.36 L1013.29 684.36 L1013.85 684.36 L1014.41 684.36 L1014.97 684.36 L1015.53 684.36 L1016.09 684.36 L1016.65 684.36 L1017.21 684.36 L1017.77 684.36 L1018.33 684.36 L1018.89 684.36 L1019.45 684.36 L1020.01 684.36 L1020.56 684.36 L1021.12 684.36 L1021.68 684.36 L1022.24 684.36 L1022.8 684.36 L1023.36 684.36 L1023.92 684.36 L1024.48 684.36 L1025.04 684.36 L1025.6 684.36 L1026.16 684.36 L1026.72 684.36 L1027.28 684.36 L1027.83 684.36 L1028.39 684.36 L1028.95 684.36 L1029.51 684.36 L1030.07 684.36 L1030.63 684.36 L1031.19 684.36 L1031.75 684.36 L1032.31 684.36 L1032.87 684.36 L1033.43 684.36 L1033.99 684.36 L1034.55 684.36 L1035.1 684.36 L1035.66 684.36 L1036.22 684.36 L1036.78 684.36 L1037.34 684.36 L1037.9 684.36 L1038.46 684.36 L1039.02 684.36 L1039.58 684.36 L1040.14 684.36 L1040.7 684.36 L1041.26 684.36 L1041.82 684.36 L1042.38 684.36 L1042.93 684.36 L1043.49 684.36 L1044.05 684.36 L1044.61 684.36 L1045.17 684.36 L1045.73 684.36 L1046.29 684.36 L1046.85 684.36 L1047.41 684.36 L1047.97 684.36 L1048.53 684.36 L1049.09 684.36 L1049.65 684.36 L1050.2 684.36 L1050.76 684.36 L1051.32 684.36 L1051.88 684.36 L1052.44 684.36 L1053 684.36 L1053.56 684.36 L1054.12 684.36 L1054.68 684.36 L1055.24 684.36 L1055.8 684.36 L1056.36 684.36 L1056.92 684.36 L1057.48 684.36 L1058.03 684.36 L1058.59 684.36 L1059.15 684.36 L1059.71 684.36 L1060.27 684.36 L1060.83 684.36 L1061.39 684.36 L1061.95 684.36 L1062.51 684.36 L1063.07 684.36 L1063.63 684.36 L1064.19 684.36 L1064.75 684.36 L1065.3 684.36 L1065.86 684.36 L1066.42 684.36 L1066.98 684.36 L1067.54 684.36 L1068.1 684.36 L1068.66 684.36 L1069.22 684.36 L1069.78 684.36 L1070.34 684.36 L1070.9 684.36 L1071.46 684.36 L1072.02 684.36 L1072.57 684.36 L1073.13 684.36 L1073.69 684.36 L1074.25 684.36 L1074.81 684.36 L1075.37 684.36 L1075.93 684.36 L1076.49 684.36 L1077.05 684.36 L1077.61 684.36 L1078.17 684.36 L1078.73 684.36 L1079.29 684.36 L1079.85 684.36 L1080.4 684.36 L1080.96 684.36 L1081.52 684.36 L1082.08 684.36 L1082.64 684.36 L1083.2 684.36 L1083.76 684.36 L1084.32 684.36 L1084.88 684.36 L1085.44 684.36 L1086 684.36 L1086.56 684.36 L1087.12 684.36 L1087.67 684.36 L1088.23 684.36 L1088.79 684.36 L1089.35 684.36 L1089.91 684.36 L1090.47 684.36 L1091.03 684.36 L1091.59 684.36 L1092.15 684.36 L1092.71 684.36 L1093.27 684.36 L1093.83 684.36 L1094.39 684.36 L1094.94 684.36 L1095.5 684.36 L1096.06 684.36 L1096.62 684.36 L1097.18 684.36 L1097.74 684.36 L1098.3 684.36 L1098.86 684.36 L1099.42 684.36 L1099.98 684.36 L1100.54 684.36 L1101.1 684.36 L1101.66 684.36 L1102.22 684.36 L1102.77 684.36 L1103.33 684.36 L1103.89 684.36 L1104.45 684.36 L1105.01 684.36 L1105.57 684.36 L1106.13 684.36 L1106.69 684.36 L1107.25 684.36 L1107.81 684.36 L1108.37 684.36 L1108.93 684.36 L1109.49 684.36 L1110.04 684.36 L1110.6 684.36 L1111.16 684.36 L1111.72 684.36 L1112.28 684.36 L1112.84 684.36 L1113.4 684.36 L1113.96 684.36 L1114.52 684.36 L1115.08 684.36 L1115.64 684.36 L1116.2 684.36 L1116.76 684.36 L1117.31 684.36 L1117.87 684.36 L1118.43 684.36 L1118.99 684.36 L1119.55 684.36 L1120.11 684.36 L1120.67 684.36 L1121.23 684.36 L1121.79 684.36 L1122.35 684.36 L1122.91 684.36 L1123.47 684.36 L1124.03 684.36 L1124.59 684.36 L1125.14 684.36 L1125.7 684.36 L1126.26 684.36 L1126.82 684.36 L1127.38 684.36 L1127.94 684.36 L1128.5 684.36 L1129.06 684.36 L1129.62 684.36 L1130.18 684.36 L1130.74 684.36 L1131.3 684.36 L1131.86 684.36 L1132.41 684.36 L1132.97 684.36 L1133.53 684.36 L1134.09 684.36 L1134.65 684.36 L1135.21 684.36 L1135.77 684.36 L1136.33 684.36 L1136.89 684.36 L1137.45 684.36 L1138.01 684.36 L1138.57 684.36 L1139.13 684.36 L1139.68 684.36 L1140.24 684.36 L1140.8 684.36 L1141.36 684.36 L1141.92 684.36 L1142.48 684.36 L1143.04 684.36 L1143.6 684.36 L1144.16 684.36 L1144.72 684.36 L1145.28 684.36 L1145.84 684.36 L1146.4 684.36 L1146.96 684.36 L1147.51 684.36 L1148.07 684.36 L1148.63 684.36 L1149.19 684.36 L1149.75 684.36 L1150.31 684.36 L1150.87 684.36 L1151.43 684.36 L1151.99 684.36 L1152.55 684.36 L1153.11 684.36 L1153.67 684.36 L1154.23 684.36 L1154.78 684.36 L1155.34 684.36 L1155.9 684.36 L1156.46 684.36 L1157.02 684.36 L1157.58 684.36 L1158.14 684.36 L1158.7 684.36 L1159.26 684.36 L1159.82 684.36 L1160.38 684.36 L1160.94 684.36 L1161.5 684.36 L1162.05 684.36 L1162.61 684.36 L1163.17 684.36 L1163.73 684.36 L1164.29 684.36 L1164.85 684.36 L1165.41 684.36 L1165.97 684.36 L1166.53 684.36 L1167.09 684.36 L1167.65 684.36 L1168.21 684.36 L1168.77 684.36 L1169.33 684.36 L1169.88 684.36 L1170.44 684.36 L1171 684.36 L1171.56 684.36 L1172.12 684.36 L1172.68 684.36 L1173.24 684.36 L1173.8 684.36 L1174.36 684.36 L1174.92 684.36 L1175.48 684.36 L1176.04 684.36 L1176.6 684.36 L1177.15 684.36 L1177.71 684.36 L1178.27 684.36 L1178.83 684.36 L1179.39 684.36 L1179.95 684.36 L1180.51 684.36 L1181.07 684.36 L1181.63 684.36 L1182.19 684.36 L1182.75 684.36 L1183.31 684.36 L1183.87 684.36 L1184.43 684.36 L1184.98 684.36 L1185.54 684.36 L1186.1 684.36 L1186.66 684.36 L1187.22 684.36 L1187.78 684.36 L1188.34 684.36 L1188.9 684.36 L1189.46 684.36 L1190.02 684.36 L1190.58 684.36 L1191.14 684.36 L1191.7 684.36 L1192.25 684.36 L1192.81 684.36 L1193.37 684.36 L1193.93 684.36 L1194.49 684.36 L1195.05 684.36 L1195.61 684.36 L1196.17 684.36 L1196.73 684.36 L1197.29 684.36 L1197.85 684.36 L1198.41 684.36 L1198.97 684.36 L1199.52 684.36 L1200.08 684.36 L1200.64 684.36 L1201.2 684.36 L1201.76 684.36 L1202.32 684.36 L1202.88 684.36 L1203.44 684.36 L1204 684.36 L1204.56 684.36 L1205.12 684.36 L1205.68 684.36 L1206.24 684.36 L1206.8 684.36 L1207.35 684.36 L1207.91 684.36 L1208.47 684.36 L1209.03 684.36 L1209.59 684.36 L1210.15 684.36 L1210.71 684.36 L1211.27 684.36 L1211.83 684.36 L1212.39 684.36 L1212.95 684.36 L1213.51 684.36 L1214.07 684.36 L1214.62 684.36 L1215.18 684.36 L1215.74 684.36 L1216.3 684.36 L1216.86 684.36 L1217.42 684.36 L1217.98 684.36 L1218.54 684.36 L1219.1 684.36 L1219.66 684.36 L1220.22 684.36 L1220.78 684.36 L1221.34 684.36 L1221.89 684.36 L1222.45 684.36 L1223.01 684.36 L1223.57 684.36 L1224.13 684.36 L1224.69 684.36 L1225.25 684.36 L1225.81 684.36 L1226.37 684.36 L1226.93 684.36 L1227.49 684.36 L1228.05 684.36 L1228.61 684.36 L1229.17 684.36 L1229.72 684.36 L1230.28 684.36 L1230.84 684.36 L1231.4 684.36 L1231.96 684.36 L1232.52 684.36 L1233.08 684.36 L1233.64 684.36 L1234.2 684.36 L1234.76 684.36 L1235.32 684.36 L1235.88 684.36 L1236.44 684.36 L1236.99 684.36 L1237.55 684.36 L1238.11 684.36 L1238.67 684.36 L1239.23 684.36 L1239.79 684.36 L1240.35 684.36 L1240.91 684.36 L1241.47 684.36 L1242.03 684.36 L1242.59 684.36 L1243.15 684.36 L1243.71 684.36 L1244.26 684.36 L1244.82 684.36 L1245.38 684.36 L1245.94 684.36 L1246.5 684.36 L1247.06 684.36 L1247.62 684.36 L1248.18 684.36 L1248.74 684.36 L1249.3 684.36 L1249.86 684.36 L1250.42 684.36 L1250.98 684.36 L1251.54 684.36 L1252.09 684.36 L1252.65 684.36 L1253.21 684.36 L1253.77 684.36 L1254.33 684.36 L1254.89 684.36 L1255.45 684.36 L1256.01 684.36 L1256.57 684.36 L1257.13 684.36 L1257.69 684.36 L1258.25 684.36 L1258.81 684.36 L1259.36 684.36 L1259.92 684.36 L1260.48 684.36 L1261.04 684.36 L1261.6 684.36 L1262.16 684.36 L1262.72 684.36 L1263.28 684.36 L1263.84 684.36 L1264.4 684.36 L1264.96 684.36 L1265.52 684.36 L1266.08 684.36 L1266.63 684.36 L1267.19 684.36 L1267.75 684.36 L1268.31 684.36 L1268.87 684.36 L1269.43 684.36 L1269.99 684.36 L1270.55 684.36 L1271.11 684.36 L1271.67 684.36 L1272.23 684.36 L1272.79 684.36 L1273.35 684.36 L1273.91 684.36 L1274.46 684.36 L1275.02 684.36 L1275.58 684.36 L1276.14 684.36 L1276.7 684.36 L1277.26 684.36 L1277.82 684.36 L1278.38 684.36 L1278.94 684.36 L1279.5 684.36 L1280.06 684.36 L1280.62 684.36 L1281.18 684.36 L1281.73 684.36 L1282.29 684.36 L1282.85 684.36 L1283.41 684.36 L1283.97 684.36 L1284.53 684.36 L1285.09 684.36 L1285.65 684.36 L1286.21 684.36 L1286.77 684.36 L1287.33 684.36 L1287.89 684.36 L1288.45 684.36 L1289 684.36 L1289.56 684.36 L1290.12 684.36 L1290.68 684.36 L1291.24 684.36 L1291.8 684.36 L1292.36 684.36 L1292.92 684.36 L1293.48 684.36 L1294.04 684.36 L1294.6 684.36 L1295.16 684.36 L1295.72 684.36 L1296.28 684.36 L1296.83 684.36 L1297.39 684.36 L1297.95 684.36 L1298.51 684.36 L1299.07 684.36 L1299.63 684.36 L1300.19 684.36 L1300.75 684.36 L1301.31 684.36 L1301.87 684.36 L1302.43 684.36 L1302.99 684.36 L1303.55 684.36 L1304.1 684.36 L1304.66 684.36 L1305.22 684.36 L1305.78 684.36 L1306.34 684.36 L1306.9 684.36 L1307.46 684.36 L1308.02 684.36 L1308.58 684.36 L1309.14 684.36 L1309.7 684.36 L1310.26 684.36 L1310.82 684.36 L1311.38 684.36 L1311.93 684.36 L1312.49 684.36 L1313.05 684.36 L1313.61 684.36 L1314.17 684.36 L1314.73 684.36 L1315.29 684.36 L1315.85 684.36 L1316.41 684.36 L1316.97 684.36 L1317.53 684.36 L1318.09 684.36 L1318.65 684.36 L1319.2 684.36 L1319.76 684.36 L1320.32 684.36 L1320.88 684.36 L1321.44 684.36 L1322 684.36 L1322.56 684.36 L1323.12 684.36 L1323.68 684.36 L1324.24 684.36 L1324.8 684.36 L1325.36 684.36 L1325.92 684.36 L1326.47 684.36 L1327.03 684.36 L1327.59 684.36 L1328.15 684.36 L1328.71 684.36 L1329.27 684.36 L1329.83 684.36 L1330.39 684.36 L1330.95 684.36 L1331.51 684.36 L1332.07 684.36 L1332.63 684.36 L1333.19 684.36 L1333.75 684.36 L1334.3 684.36 L1334.86 684.36 L1335.42 684.36 L1335.98 684.36 L1336.54 684.36 L1337.1 684.36 L1337.66 684.36 L1338.22 684.36 L1338.78 684.36 L1339.34 684.36 L1339.9 684.36 L1340.46 684.36 L1341.02 684.36 L1341.57 684.36 L1342.13 684.36 L1342.69 684.36 L1343.25 684.36 L1343.81 684.36 L1344.37 684.36 L1344.93 684.36 L1345.49 684.36 L1346.05 684.36 L1346.61 684.36 L1347.17 684.36 L1347.73 684.36 L1348.29 684.36 L1348.84 684.36 L1349.4 684.36 L1349.96 684.36 L1350.52 684.36 L1351.08 684.36 L1351.64 684.36 L1352.2 684.36 L1352.76 684.36 L1353.32 684.36 L1353.88 684.36 L1354.44 684.36 L1355 684.36 L1355.56 684.36 L1356.12 684.36 L1356.67 684.36 L1357.23 684.36 L1357.79 684.36 L1358.35 684.36 L1358.91 684.36 L1359.47 684.36 L1360.03 684.36 L1360.59 684.36 L1361.15 684.36 L1361.71 684.36 L1362.27 684.36 L1362.83 684.36 L1363.39 684.36 L1363.94 684.36 L1364.5 684.36 L1365.06 684.36 L1365.62 684.36 L1366.18 684.36 L1366.74 684.36 L1367.3 684.36 L1367.86 684.36 L1368.42 684.36 L1368.98 684.36 L1369.54 684.36 L1370.1 684.36 L1370.66 684.36 L1371.21 684.36 L1371.77 684.36 L1372.33 684.36 L1372.89 684.36 L1373.45 684.36 L1374.01 684.36 L1374.57 684.36 L1375.13 684.36 L1375.69 684.36 L1376.25 684.36 L1376.81 684.36 L1377.37 684.36 L1377.93 684.36 L1378.49 684.36 L1379.04 684.36 L1379.6 684.36 L1380.16 684.36 L1380.72 684.36 L1381.28 684.36 L1381.84 684.36 L1382.4 684.36 L1382.96 684.36 L1383.52 684.36 L1384.08 684.36 L1384.64 684.36 L1385.2 684.36 L1385.76 684.36 L1386.31 684.36 L1386.87 684.36 L1387.43 684.36 L1387.99 684.36 L1388.55 684.36 L1389.11 684.36 L1389.67 684.36 L1390.23 684.36 L1390.79 684.36 L1391.35 684.36 L1391.91 684.36 L1392.47 684.36 L1393.03 684.36 L1393.58 684.36 L1394.14 684.36 L1394.7 684.36 L1395.26 684.36 L1395.82 684.36 L1396.38 684.36 L1396.94 684.36 L1397.5 684.36 L1398.06 684.36 L1398.62 684.36 L1399.18 684.36 L1399.74 684.36 L1400.3 684.36 L1400.86 684.36 L1401.41 684.36 L1401.97 684.36 L1402.53 684.36 L1403.09 684.36 L1403.65 684.36 L1404.21 684.36 L1404.77 684.36 L1405.33 684.36 L1405.89 684.36 L1406.45 684.36 L1407.01 684.36 L1407.57 684.36 L1408.13 684.36 L1408.68 684.36 L1409.24 684.36 L1409.8 684.36 L1410.36 684.36 L1410.92 684.36 L1411.48 684.36 L1412.04 684.36 L1412.6 684.36 L1413.16 684.36 L1413.72 684.36 L1414.28 684.36 L1414.84 684.36 L1415.4 684.36 L1415.95 684.36 L1416.51 684.36 L1417.07 684.36 L1417.63 684.36 L1418.19 684.36 L1418.75 684.36 L1419.31 684.36 L1419.87 684.36 L1420.43 684.36 L1420.99 684.36 L1421.55 684.36 L1422.11 684.36 L1422.67 684.36 L1423.23 684.36 L1423.78 684.36 L1424.34 684.36 L1424.9 684.36 L1425.46 684.36 L1426.02 684.36 L1426.58 684.36 L1427.14 684.36 L1427.7 684.36 L1428.26 684.36 L1428.82 684.36 L1429.38 684.36 L1429.94 684.36 L1430.5 684.36 L1431.05 684.36 L1431.61 684.36 L1432.17 684.36 L1432.73 684.36 L1433.29 684.36 L1433.85 684.36 L1434.41 684.36 L1434.97 684.36 L1435.53 684.36 L1436.09 684.36 L1436.65 684.36 L1437.21 684.36 L1437.77 684.36 L1438.33 684.36 L1438.88 684.36 L1439.44 684.36 L1440 684.36 L1440.56 684.36 L1441.12 684.36 L1441.68 684.36 L1442.24 684.36 L1442.8 684.36 L1443.36 684.36 L1443.92 684.36 L1444.48 684.36 L1445.04 684.36 L1445.6 684.36 L1446.15 684.36 L1446.71 684.36 L1447.27 684.36 L1447.83 684.36 L1448.39 684.36 L1448.95 684.36 L1449.51 684.36 L1450.07 684.36 L1450.63 684.36 L1451.19 684.36 L1451.75 684.36 L1452.31 684.36 L1452.87 684.36 L1453.42 684.36 L1453.98 684.36 L1454.54 684.36 L1455.1 684.36 L1455.66 684.36 L1456.22 684.36 L1456.78 684.36 L1457.34 684.36 L1457.9 684.36 L1458.46 684.36 L1459.02 684.36 L1459.58 684.36 L1460.14 684.36 L1460.7 684.36 L1461.25 684.36 L1461.81 684.36 L1462.37 684.36 L1462.93 684.36 L1463.49 684.36 L1464.05 684.36 L1464.61 684.36 L1465.17 684.36 L1465.73 684.36 L1466.29 684.36 L1466.85 684.36 L1467.41 684.36 L1467.97 684.36 L1468.52 684.36 L1469.08 684.36 L1469.64 684.36 L1470.2 684.36 L1470.76 684.36 L1471.32 684.36 L1471.88 684.36 L1472.44 684.36 L1473 684.36 L1473.56 684.36 L1474.12 684.36 L1474.68 684.36 L1475.24 684.36 L1475.79 684.36 L1476.35 684.36 L1476.91 684.36 L1477.47 684.36 L1478.03 684.36 L1478.59 684.36 L1479.15 684.36 L1479.71 684.36 L1480.27 684.36 L1480.83 684.36 L1481.39 684.36 L1481.95 684.36 L1482.51 684.36 L1483.07 684.36 L1483.62 684.36 L1484.18 684.36 L1484.74 684.36 L1485.3 684.36 L1485.86 684.36 L1486.42 684.36 L1486.98 684.36 L1487.54 684.36 L1488.1 684.36 L1488.66 684.36 L1489.22 684.36 L1489.78 684.36 L1490.34 684.36 L1490.89 684.36 L1491.45 684.36 L1492.01 684.36 L1492.57 684.36 L1493.13 684.36 L1493.69 684.36 L1494.25 684.36 L1494.81 684.36 L1495.37 684.36 L1495.93 684.36 L1496.49 684.36 L1497.05 684.36 L1497.61 684.36 L1498.16 684.36 L1498.72 684.36 L1499.28 684.36 L1499.84 684.36 L1500.4 684.36 L1500.96 684.36 L1501.52 684.36 L1502.08 684.36 L1502.64 684.36 L1503.2 684.36 L1503.76 684.36 L1504.32 684.36 L1504.88 684.36 L1505.44 684.36 L1505.99 684.36 L1506.55 684.36 L1507.11 684.36 L1507.67 684.36 L1508.23 684.36 L1508.79 684.36 L1509.35 684.36 L1509.91 684.36 L1510.47 684.36 L1511.03 684.36 L1511.59 684.36 L1512.15 684.36 L1512.71 684.36 L1513.26 684.36 L1513.82 684.36 L1514.38 684.36 L1514.94 684.36 L1515.5 684.36 L1516.06 684.36 L1516.62 684.36 L1517.18 684.36 L1517.74 684.36 L1518.3 684.36 L1518.86 684.36 L1519.42 684.36 L1519.98 684.36 L1520.53 684.36 L1521.09 684.36 L1521.65 684.36 L1522.21 684.36 L1522.77 684.36 L1523.33 684.36 L1523.89 684.36 L1524.45 684.36 L1525.01 684.36 L1525.57 684.36 L1526.13 684.36 L1526.69 684.36 L1527.25 684.36 L1527.81 684.36 L1528.36 684.36 L1528.92 684.36 L1529.48 684.36 L1530.04 684.36 L1530.6 684.36 L1531.16 684.36 L1531.72 684.36 L1532.28 684.36 L1532.84 684.36 L1533.4 684.36 L1533.96 684.36 L1534.52 684.36 L1535.08 684.36 L1535.63 684.36 L1536.19 684.36 L1536.75 684.36 L1537.31 684.36 L1537.87 684.36 L1538.43 684.36 L1538.99 684.36 L1539.55 684.36 L1540.11 684.36 L1540.67 684.36 L1541.23 684.36 L1541.79 684.36 L1542.35 684.36 L1542.9 684.36 L1543.46 684.36 L1544.02 684.36 L1544.58 684.36 L1545.14 684.36 L1545.7 684.36 L1546.26 684.36 L1546.82 684.36 L1547.38 684.36 L1547.94 684.36 L1548.5 684.36 L1549.06 684.36 L1549.62 684.36 L1550.18 684.36 L1550.73 684.36 L1551.29 684.36 L1551.85 684.36 L1552.41 684.36 L1552.97 684.36 L1553.53 684.36 L1554.09 684.36 L1554.65 684.36 L1555.21 684.36 L1555.77 684.36 L1556.33 684.36 L1556.89 684.36 L1557.45 684.36 L1558 684.36 L1558.56 684.36 L1559.12 684.36 L1559.68 684.36 L1560.24 684.36 L1560.8 684.36 L1561.36 684.36 L1561.92 684.36 L1562.48 684.36 L1563.04 684.36 L1563.6 684.36 L1564.16 684.36 L1564.72 684.36 L1565.28 684.36 L1565.83 684.36 L1566.39 684.36 L1566.95 684.36 L1567.51 684.36 L1568.07 684.36 L1568.63 684.36 L1569.19 684.36 L1569.75 684.36 L1570.31 684.36 L1570.87 684.36 L1571.43 684.36 L1571.99 684.36 L1572.55 684.36 L1573.1 684.36 L1573.66 684.36 L1574.22 684.36 L1574.78 684.36 L1575.34 684.36 L1575.9 684.36 L1576.46 684.36 L1577.02 684.36 L1577.58 684.36 L1578.14 684.36 L1578.7 684.36 L1579.26 684.36 L1579.82 684.36 L1580.37 684.36 L1580.93 684.36 L1581.49 684.36 L1582.05 684.36 L1582.61 684.36 L1583.17 684.36 L1583.73 684.36 L1584.29 684.36 L1584.85 684.36 L1585.41 684.36 L1585.97 684.36 L1586.53 684.36 L1587.09 684.36 L1587.65 684.36 L1588.2 684.36 L1588.76 684.36 L1589.32 684.36 L1589.88 684.36 L1590.44 684.36 L1591 684.36 L1591.56 684.36 L1592.12 684.36 L1592.68 684.36 L1593.24 684.36 L1593.8 684.36 L1594.36 684.36 L1594.92 684.36 L1595.47 684.36 L1596.03 684.36 L1596.59 684.36 L1597.15 684.36 L1597.71 684.36 L1598.27 684.36 L1598.83 684.36 L1599.39 684.36 L1599.95 684.36 L1600.51 684.36 L1601.07 684.36 L1601.63 684.36 L1602.19 684.36 L1602.74 684.36 L1603.3 684.36 L1603.86 684.36 L1604.42 684.36 L1604.98 684.36 L1605.54 684.36 L1606.1 684.36 L1606.66 684.36 L1607.22 684.36 L1607.78 684.36 L1608.34 684.36 L1608.9 684.36 L1609.46 684.36 L1610.02 684.36 L1610.57 684.36 L1611.13 684.36 L1611.69 684.36 L1612.25 684.36 L1612.81 684.36 L1613.37 684.36 L1613.93 684.36 L1614.49 684.36 L1615.05 684.36 L1615.61 684.36 L1616.17 684.36 L1616.73 684.36 L1617.29 684.36 L1617.84 684.36 L1618.4 684.36 L1618.96 684.36 L1619.52 684.36 L1620.08 684.36 L1620.64 684.36 L1621.2 684.36 L1621.76 684.36 L1622.32 684.36 L1622.88 684.36 L1623.44 684.36 L1624 684.36 L1624.56 684.36 L1625.11 684.36 L1625.67 684.36 L1626.23 684.36 L1626.79 684.36 L1627.35 684.36 L1627.91 684.36 L1628.47 684.36 L1629.03 684.36 L1629.59 684.36 L1630.15 684.36 L1630.71 684.36 L1631.27 684.36 L1631.83 684.36 L1632.39 684.36 L1632.94 684.36 L1633.5 684.36 L1634.06 684.36 L1634.62 684.36 L1635.18 684.36 L1635.74 684.36 L1636.3 684.36 L1636.86 684.36 L1637.42 684.36 L1637.98 684.36 L1638.54 684.36 L1639.1 684.36 L1639.66 684.36 L1640.21 684.36 L1640.77 684.36 L1641.33 684.36 L1641.89 684.36 L1642.45 684.36 L1643.01 684.36 L1643.57 684.36 L1644.13 684.36 L1644.69 684.36 L1645.25 684.36 L1645.81 684.36 L1646.37 684.36 L1646.93 684.36 L1647.48 684.36 L1648.04 684.36 L1648.6 684.36 L1649.16 684.36 L1649.72 684.36 L1650.28 684.36 L1650.84 684.36 L1651.4 684.36 L1651.96 684.36 L1652.52 684.36 L1653.08 684.36 L1653.64 684.36 L1654.2 684.36 L1654.76 684.36 L1655.31 684.36 L1655.87 684.36 L1656.43 684.36 L1656.99 684.36 L1657.55 684.36 L1658.11 684.36 L1658.67 684.36 L1659.23 684.36 L1659.79 684.36 L1660.35 684.36 L1660.91 684.36 L1661.47 684.36 L1662.03 684.36 L1662.58 684.36 L1663.14 684.36 L1663.7 684.36 L1664.26 684.36 L1664.82 684.36 L1665.38 684.36 L1665.94 684.36 L1666.5 684.36 L1667.06 684.36 L1667.62 684.36 L1668.18 684.36 L1668.74 684.36 L1669.3 684.36 L1669.85 684.36 L1670.41 684.36 L1670.97 684.36 L1671.53 684.36 L1672.09 684.36 L1672.65 684.36 L1673.21 684.36 L1673.77 684.36 L1674.33 684.36 L1674.89 684.36 L1675.45 684.36 L1676.01 684.36 L1676.57 684.36 L1677.13 684.36 L1677.68 684.36 L1678.24 684.36 L1678.8 684.36 L1679.36 684.36 L1679.92 684.36 L1680.48 684.36 L1681.04 684.36 L1681.6 684.36 L1682.16 684.36 L1682.72 684.36 L1683.28 684.36 L1683.84 684.36 L1684.4 684.36 L1684.95 684.36 L1685.51 684.36 L1686.07 684.36 L1686.63 684.36 L1687.19 684.36 L1687.75 684.36 L1688.31 684.36 L1688.87 684.36 L1689.43 684.36 L1689.99 684.36 L1690.55 684.36 L1691.11 684.36 L1691.67 684.36 L1692.23 684.36 L1692.78 684.36 L1693.34 684.36 L1693.9 684.36 L1694.46 684.36 L1695.02 684.36 L1695.58 684.36 L1696.14 684.36 L1696.7 684.36 L1697.26 684.36 L1697.82 684.36 L1698.38 684.36 L1698.94 684.36 L1699.5 684.36 L1700.05 684.36 L1700.61 684.36 L1701.17 684.36 L1701.73 684.36 L1702.29 684.36 L1702.85 684.36 L1703.41 684.36 L1703.97 684.36 L1704.53 684.36 L1705.09 684.36 L1705.65 684.36 L1706.21 684.36 L1706.77 684.36 L1707.32 684.36 L1707.88 684.36 L1708.44 684.36 L1709 684.36 L1709.56 684.36 L1710.12 684.36 L1710.68 684.36 L1711.24 684.36 L1711.8 684.36 L1712.36 684.36 L1712.92 684.36 L1713.48 684.36 L1714.04 684.36 L1714.6 684.36 L1715.15 684.36 L1715.71 684.36 L1716.27 684.36 L1716.83 684.36 L1717.39 684.36 L1717.95 684.36 L1718.51 684.36 L1719.07 684.36 L1719.63 684.36 L1720.19 684.36 L1720.75 684.36 L1721.31 684.36 L1721.87 684.36 L1722.42 684.36 L1722.98 684.36 L1723.54 684.36 L1724.1 684.36 L1724.66 684.36 L1725.22 684.36 L1725.78 684.36 L1726.34 684.36 L1726.9 684.36 L1727.46 684.36 L1728.02 684.36 L1728.58 684.36 L1729.14 684.36 L1729.69 684.36 L1730.25 684.36 L1730.81 684.36 L1731.37 684.36 L1731.93 684.36 L1732.49 684.36 L1733.05 684.36 L1733.61 684.36 L1734.17 684.36 L1734.73 684.36 L1735.29 684.36 L1735.85 684.36 L1736.41 684.36 L1736.97 684.36 L1737.52 684.36 L1738.08 684.36 L1738.64 684.36 L1739.2 684.36 L1739.76 684.36 L1740.32 684.36 L1740.88 684.36 L1741.44 684.36 L1742 684.36 L1742.56 684.36 L1743.12 684.36 L1743.68 684.36 L1744.24 684.36 L1744.79 684.36 L1745.35 684.36 L1745.91 684.36 L1746.47 684.36 L1747.03 684.36 L1747.59 684.36 L1748.15 684.36 L1748.71 684.36 L1749.27 684.36 L1749.83 684.36 L1750.39 684.36 L1750.95 684.36 L1751.51 684.36 L1752.06 684.36 L1752.62 684.36 L1753.18 684.36 L1753.74 684.36 L1754.3 684.36 L1754.86 684.36 L1755.42 684.36 L1755.98 684.36 L1756.54 684.36 L1757.1 684.36 L1757.66 684.36 L1758.22 684.36 L1758.78 684.36 L1759.34 684.36 L1759.89 684.36 L1760.45 684.36 L1761.01 684.36 L1761.57 684.36 L1762.13 684.36 L1762.69 684.36 L1763.25 684.36 L1763.81 684.36 L1764.37 684.36 L1764.93 684.36 L1765.49 684.36 L1766.05 684.36 L1766.61 684.36 L1767.16 684.36 L1767.72 684.36 L1768.28 684.36 L1768.84 684.36 L1769.4 684.36 L1769.96 684.36 L1770.52 684.36 L1771.08 684.36 L1771.64 684.36 L1772.2 684.36 L1772.76 684.36 L1773.32 684.36 L1773.88 684.36 L1774.43 684.36 L1774.99 684.36 L1775.55 684.36 L1776.11 684.36 L1776.67 684.36 L1777.23 684.36 L1777.79 684.36 L1778.35 684.36 L1778.91 684.36 L1779.47 684.36 L1780.03 684.36 L1780.59 684.36 L1781.15 684.36 L1781.71 684.36 L1782.26 684.36 L1782.82 684.36 L1783.38 684.36 L1783.94 684.36 L1784.5 684.36 L1785.06 684.36 L1785.62 684.36 L1786.18 684.36 L1786.74 684.36 L1787.3 684.36 L1787.86 684.36 L1788.42 684.36 L1788.98 684.36 L1789.53 684.36 L1790.09 684.36 L1790.65 684.36 L1791.21 684.36 L1791.77 684.36 L1792.33 684.36 L1792.89 684.36 L1793.45 684.36 L1794.01 684.36 L1794.57 684.36 L1795.13 684.36 L1795.69 684.36 L1796.25 684.36 L1796.8 684.36 L1797.36 684.36 L1797.92 684.36 L1798.48 684.36 L1799.04 684.36 L1799.6 684.36 L1800.16 684.36 L1800.72 684.36 L1801.28 684.36 L1801.84 684.36 L1802.4 684.36 L1802.96 684.36 L1803.52 684.36 L1804.08 684.36 L1804.63 684.36 L1805.19 684.36 L1805.75 684.36 L1806.31 684.36 L1806.87 684.36 L1807.43 684.36 L1807.99 684.36 L1808.55 684.36 L1809.11 684.36 L1809.67 684.36 L1810.23 684.36 L1810.79 684.36 L1811.35 684.36 L1811.9 684.36 L1812.46 684.36 L1813.02 684.36 L1813.58 684.36 L1814.14 684.36 L1814.7 684.36 L1815.26 684.36 L1815.82 684.36 L1816.38 684.36 L1816.94 684.36 L1817.5 684.36 L1818.06 684.36 L1818.62 684.36 L1819.18 684.36 L1819.73 684.36 L1820.29 684.36 L1820.85 684.36 L1821.41 684.36 L1821.97 684.36 L1822.53 684.36 L1823.09 684.36 L1823.65 684.36 L1824.21 684.36 L1824.77 684.36 L1825.33 684.36 L1825.89 684.36 L1826.45 684.36 L1827 684.36 L1827.56 684.36 L1828.12 684.36 L1828.68 684.36 L1829.24 684.36 L1829.8 684.36 L1830.36 684.36 L1830.92 684.36 L1831.48 684.36 L1832.04 684.36 L1832.6 684.36 L1833.16 684.36 L1833.72 684.36 L1834.27 684.36 L1834.83 684.36 L1835.39 684.36 L1835.95 684.36 L1836.51 684.36 L1837.07 684.36 L1837.63 684.36 L1838.19 684.36 L1838.19 682.52 L1837.63 682.52 L1837.07 682.52 L1836.51 682.52 L1835.95 682.52 L1835.39 682.52 L1834.83 682.52 L1834.27 682.52 L1833.72 682.52 L1833.16 682.52 L1832.6 682.52 L1832.04 682.52 L1831.48 682.52 L1830.92 682.52 L1830.36 682.52 L1829.8 682.52 L1829.24 682.52 L1828.68 682.52 L1828.12 682.52 L1827.56 682.52 L1827 682.52 L1826.45 682.52 L1825.89 682.52 L1825.33 682.52 L1824.77 682.52 L1824.21 682.52 L1823.65 682.52 L1823.09 682.52 L1822.53 682.52 L1821.97 682.52 L1821.41 682.52 L1820.85 682.52 L1820.29 682.52 L1819.73 682.52 L1819.18 682.52 L1818.62 682.52 L1818.06 682.52 L1817.5 682.52 L1816.94 682.52 L1816.38 682.52 L1815.82 682.52 L1815.26 682.52 L1814.7 682.52 L1814.14 682.52 L1813.58 682.52 L1813.02 682.52 L1812.46 682.52 L1811.9 682.52 L1811.35 682.52 L1810.79 682.52 L1810.23 682.52 L1809.67 682.52 L1809.11 682.52 L1808.55 682.52 L1807.99 682.52 L1807.43 682.52 L1806.87 682.52 L1806.31 682.52 L1805.75 682.52 L1805.19 682.52 L1804.63 682.52 L1804.08 682.52 L1803.52 682.52 L1802.96 682.52 L1802.4 682.52 L1801.84 682.52 L1801.28 682.52 L1800.72 682.52 L1800.16 682.52 L1799.6 682.52 L1799.04 682.52 L1798.48 682.52 L1797.92 682.52 L1797.36 682.52 L1796.8 682.52 L1796.25 682.52 L1795.69 682.52 L1795.13 682.52 L1794.57 682.52 L1794.01 682.52 L1793.45 682.52 L1792.89 682.52 L1792.33 682.52 L1791.77 682.52 L1791.21 682.52 L1790.65 682.52 L1790.09 682.52 L1789.53 682.52 L1788.98 682.52 L1788.42 682.52 L1787.86 682.52 L1787.3 682.52 L1786.74 682.52 L1786.18 682.52 L1785.62 682.52 L1785.06 682.52 L1784.5 682.52 L1783.94 682.52 L1783.38 682.52 L1782.82 682.52 L1782.26 682.52 L1781.71 682.52 L1781.15 682.52 L1780.59 682.52 L1780.03 682.52 L1779.47 682.52 L1778.91 682.52 L1778.35 682.52 L1777.79 682.52 L1777.23 682.52 L1776.67 682.52 L1776.11 682.52 L1775.55 682.52 L1774.99 682.52 L1774.43 682.52 L1773.88 682.52 L1773.32 682.52 L1772.76 682.52 L1772.2 682.52 L1771.64 682.52 L1771.08 682.52 L1770.52 682.52 L1769.96 682.52 L1769.4 682.52 L1768.84 682.52 L1768.28 682.52 L1767.72 682.52 L1767.16 682.52 L1766.61 682.52 L1766.05 682.52 L1765.49 682.52 L1764.93 682.52 L1764.37 682.52 L1763.81 682.52 L1763.25 682.52 L1762.69 682.52 L1762.13 682.52 L1761.57 682.52 L1761.01 682.52 L1760.45 682.52 L1759.89 682.52 L1759.34 682.52 L1758.78 682.52 L1758.22 682.52 L1757.66 682.52 L1757.1 682.52 L1756.54 682.52 L1755.98 682.52 L1755.42 682.52 L1754.86 682.52 L1754.3 682.52 L1753.74 682.52 L1753.18 682.52 L1752.62 682.52 L1752.06 682.52 L1751.51 682.52 L1750.95 682.52 L1750.39 682.52 L1749.83 682.52 L1749.27 682.52 L1748.71 682.52 L1748.15 682.52 L1747.59 682.52 L1747.03 682.52 L1746.47 682.52 L1745.91 682.52 L1745.35 682.52 L1744.79 682.52 L1744.24 682.52 L1743.68 682.52 L1743.12 682.52 L1742.56 682.52 L1742 682.52 L1741.44 682.52 L1740.88 682.52 L1740.32 682.52 L1739.76 682.52 L1739.2 682.52 L1738.64 682.52 L1738.08 682.52 L1737.52 682.52 L1736.97 682.52 L1736.41 682.52 L1735.85 682.52 L1735.29 682.52 L1734.73 682.52 L1734.17 682.52 L1733.61 682.52 L1733.05 682.52 L1732.49 682.52 L1731.93 682.52 L1731.37 682.52 L1730.81 682.52 L1730.25 682.52 L1729.69 682.52 L1729.14 682.52 L1728.58 682.52 L1728.02 682.52 L1727.46 682.52 L1726.9 682.52 L1726.34 682.52 L1725.78 682.52 L1725.22 682.52 L1724.66 682.52 L1724.1 682.52 L1723.54 682.52 L1722.98 682.52 L1722.42 682.52 L1721.87 682.52 L1721.31 682.52 L1720.75 682.52 L1720.19 682.52 L1719.63 682.52 L1719.07 682.52 L1718.51 682.52 L1717.95 682.52 L1717.39 682.52 L1716.83 682.52 L1716.27 682.52 L1715.71 682.52 L1715.15 682.52 L1714.6 682.52 L1714.04 682.52 L1713.48 682.52 L1712.92 682.52 L1712.36 682.52 L1711.8 682.52 L1711.24 682.52 L1710.68 682.52 L1710.12 682.52 L1709.56 682.52 L1709 682.52 L1708.44 682.52 L1707.88 682.52 L1707.32 682.52 L1706.77 682.52 L1706.21 682.52 L1705.65 682.52 L1705.09 682.52 L1704.53 682.52 L1703.97 682.52 L1703.41 682.52 L1702.85 682.52 L1702.29 682.52 L1701.73 682.52 L1701.17 682.52 L1700.61 682.52 L1700.05 682.52 L1699.5 682.52 L1698.94 682.52 L1698.38 682.52 L1697.82 682.52 L1697.26 682.52 L1696.7 682.52 L1696.14 682.52 L1695.58 682.52 L1695.02 682.52 L1694.46 682.52 L1693.9 682.52 L1693.34 682.52 L1692.78 682.52 L1692.23 682.52 L1691.67 682.52 L1691.11 682.52 L1690.55 682.52 L1689.99 682.52 L1689.43 682.52 L1688.87 682.52 L1688.31 682.52 L1687.75 682.52 L1687.19 682.52 L1686.63 682.52 L1686.07 682.52 L1685.51 682.52 L1684.95 682.52 L1684.4 682.52 L1683.84 682.52 L1683.28 682.52 L1682.72 682.52 L1682.16 682.52 L1681.6 682.52 L1681.04 682.52 L1680.48 682.52 L1679.92 682.52 L1679.36 682.52 L1678.8 682.52 L1678.24 682.52 L1677.68 682.52 L1677.13 682.52 L1676.57 682.52 L1676.01 682.52 L1675.45 682.52 L1674.89 682.52 L1674.33 682.52 L1673.77 682.52 L1673.21 682.52 L1672.65 682.52 L1672.09 682.52 L1671.53 682.52 L1670.97 682.52 L1670.41 682.52 L1669.85 682.52 L1669.3 682.52 L1668.74 682.52 L1668.18 682.52 L1667.62 682.52 L1667.06 682.52 L1666.5 682.52 L1665.94 682.52 L1665.38 682.52 L1664.82 682.52 L1664.26 682.52 L1663.7 682.52 L1663.14 682.52 L1662.58 682.52 L1662.03 682.52 L1661.47 682.52 L1660.91 682.52 L1660.35 682.52 L1659.79 682.52 L1659.23 682.52 L1658.67 682.52 L1658.11 682.52 L1657.55 682.52 L1656.99 682.52 L1656.43 682.52 L1655.87 682.52 L1655.31 682.52 L1654.76 682.52 L1654.2 682.52 L1653.64 682.52 L1653.08 682.52 L1652.52 682.52 L1651.96 682.52 L1651.4 682.52 L1650.84 682.52 L1650.28 682.52 L1649.72 682.52 L1649.16 682.52 L1648.6 682.52 L1648.04 682.52 L1647.48 682.52 L1646.93 682.52 L1646.37 682.52 L1645.81 682.52 L1645.25 682.52 L1644.69 682.52 L1644.13 682.52 L1643.57 682.52 L1643.01 682.52 L1642.45 682.52 L1641.89 682.52 L1641.33 682.52 L1640.77 682.52 L1640.21 682.52 L1639.66 682.52 L1639.1 682.52 L1638.54 682.52 L1637.98 682.52 L1637.42 682.52 L1636.86 682.52 L1636.3 682.52 L1635.74 682.52 L1635.18 682.52 L1634.62 682.52 L1634.06 682.52 L1633.5 682.52 L1632.94 682.52 L1632.39 682.52 L1631.83 682.52 L1631.27 682.52 L1630.71 682.52 L1630.15 682.52 L1629.59 682.52 L1629.03 682.52 L1628.47 682.52 L1627.91 682.52 L1627.35 682.52 L1626.79 682.52 L1626.23 682.52 L1625.67 682.52 L1625.11 682.52 L1624.56 682.52 L1624 682.52 L1623.44 682.52 L1622.88 682.52 L1622.32 682.52 L1621.76 682.52 L1621.2 682.52 L1620.64 682.52 L1620.08 682.52 L1619.52 682.52 L1618.96 682.52 L1618.4 682.52 L1617.84 682.52 L1617.29 682.52 L1616.73 682.52 L1616.17 682.52 L1615.61 682.52 L1615.05 682.52 L1614.49 682.52 L1613.93 682.52 L1613.37 682.52 L1612.81 682.52 L1612.25 682.52 L1611.69 682.52 L1611.13 682.52 L1610.57 682.52 L1610.02 682.52 L1609.46 682.52 L1608.9 682.52 L1608.34 682.52 L1607.78 682.52 L1607.22 682.52 L1606.66 682.52 L1606.1 682.52 L1605.54 682.52 L1604.98 682.52 L1604.42 682.52 L1603.86 682.52 L1603.3 682.52 L1602.74 682.52 L1602.19 682.52 L1601.63 682.52 L1601.07 682.52 L1600.51 682.52 L1599.95 682.52 L1599.39 682.52 L1598.83 682.52 L1598.27 682.52 L1597.71 682.52 L1597.15 682.52 L1596.59 682.52 L1596.03 682.52 L1595.47 682.52 L1594.92 682.52 L1594.36 682.52 L1593.8 682.52 L1593.24 682.52 L1592.68 682.52 L1592.12 682.52 L1591.56 682.52 L1591 682.52 L1590.44 682.52 L1589.88 682.52 L1589.32 682.52 L1588.76 682.52 L1588.2 682.52 L1587.65 682.52 L1587.09 682.52 L1586.53 682.52 L1585.97 682.52 L1585.41 682.52 L1584.85 682.52 L1584.29 682.52 L1583.73 682.52 L1583.17 682.52 L1582.61 682.52 L1582.05 682.52 L1581.49 682.52 L1580.93 682.52 L1580.37 682.52 L1579.82 682.52 L1579.26 682.52 L1578.7 682.52 L1578.14 682.52 L1577.58 682.52 L1577.02 682.52 L1576.46 682.52 L1575.9 682.52 L1575.34 682.52 L1574.78 682.52 L1574.22 682.52 L1573.66 682.52 L1573.1 682.52 L1572.55 682.52 L1571.99 682.52 L1571.43 682.52 L1570.87 682.52 L1570.31 682.52 L1569.75 682.52 L1569.19 682.52 L1568.63 682.52 L1568.07 682.52 L1567.51 682.52 L1566.95 682.52 L1566.39 682.52 L1565.83 682.52 L1565.28 682.52 L1564.72 682.52 L1564.16 682.52 L1563.6 682.52 L1563.04 682.52 L1562.48 682.52 L1561.92 682.52 L1561.36 682.52 L1560.8 682.52 L1560.24 682.52 L1559.68 682.52 L1559.12 682.52 L1558.56 682.52 L1558 682.52 L1557.45 682.52 L1556.89 682.52 L1556.33 682.52 L1555.77 682.52 L1555.21 682.52 L1554.65 682.52 L1554.09 682.52 L1553.53 682.52 L1552.97 682.52 L1552.41 682.52 L1551.85 682.52 L1551.29 682.52 L1550.73 682.52 L1550.18 682.52 L1549.62 682.52 L1549.06 682.52 L1548.5 682.52 L1547.94 682.52 L1547.38 682.52 L1546.82 682.52 L1546.26 682.52 L1545.7 682.52 L1545.14 682.52 L1544.58 682.52 L1544.02 682.52 L1543.46 682.52 L1542.9 682.52 L1542.35 682.52 L1541.79 682.52 L1541.23 682.52 L1540.67 682.52 L1540.11 682.52 L1539.55 682.52 L1538.99 682.52 L1538.43 682.52 L1537.87 682.52 L1537.31 682.52 L1536.75 682.52 L1536.19 682.52 L1535.63 682.52 L1535.08 682.52 L1534.52 682.52 L1533.96 682.52 L1533.4 682.52 L1532.84 682.52 L1532.28 682.52 L1531.72 682.52 L1531.16 682.52 L1530.6 682.52 L1530.04 682.52 L1529.48 682.52 L1528.92 682.52 L1528.36 682.52 L1527.81 682.52 L1527.25 682.52 L1526.69 682.52 L1526.13 682.52 L1525.57 682.52 L1525.01 682.52 L1524.45 682.52 L1523.89 682.52 L1523.33 682.52 L1522.77 682.52 L1522.21 682.52 L1521.65 682.52 L1521.09 682.52 L1520.53 682.52 L1519.98 682.52 L1519.42 682.52 L1518.86 682.52 L1518.3 682.52 L1517.74 682.52 L1517.18 682.52 L1516.62 682.52 L1516.06 682.52 L1515.5 682.52 L1514.94 682.52 L1514.38 682.52 L1513.82 682.52 L1513.26 682.52 L1512.71 682.52 L1512.15 682.52 L1511.59 682.52 L1511.03 682.52 L1510.47 682.52 L1509.91 682.52 L1509.35 682.52 L1508.79 682.52 L1508.23 682.52 L1507.67 682.52 L1507.11 682.52 L1506.55 682.52 L1505.99 682.52 L1505.44 682.52 L1504.88 682.52 L1504.32 682.52 L1503.76 682.52 L1503.2 682.52 L1502.64 682.52 L1502.08 682.52 L1501.52 682.52 L1500.96 682.52 L1500.4 682.52 L1499.84 682.52 L1499.28 682.52 L1498.72 682.52 L1498.16 682.52 L1497.61 682.52 L1497.05 682.52 L1496.49 682.52 L1495.93 682.52 L1495.37 682.52 L1494.81 682.52 L1494.25 682.52 L1493.69 682.52 L1493.13 682.52 L1492.57 682.52 L1492.01 682.52 L1491.45 682.52 L1490.89 682.52 L1490.34 682.52 L1489.78 682.52 L1489.22 682.52 L1488.66 682.52 L1488.1 682.52 L1487.54 682.52 L1486.98 682.52 L1486.42 682.52 L1485.86 682.52 L1485.3 682.52 L1484.74 682.52 L1484.18 682.52 L1483.62 682.52 L1483.07 682.52 L1482.51 682.52 L1481.95 682.52 L1481.39 682.52 L1480.83 682.52 L1480.27 682.52 L1479.71 682.52 L1479.15 682.52 L1478.59 682.52 L1478.03 682.52 L1477.47 682.52 L1476.91 682.52 L1476.35 682.52 L1475.79 682.52 L1475.24 682.52 L1474.68 682.52 L1474.12 682.52 L1473.56 682.52 L1473 682.52 L1472.44 682.52 L1471.88 682.52 L1471.32 682.52 L1470.76 682.52 L1470.2 682.52 L1469.64 682.52 L1469.08 682.52 L1468.52 682.52 L1467.97 682.52 L1467.41 682.52 L1466.85 682.52 L1466.29 682.52 L1465.73 682.52 L1465.17 682.52 L1464.61 682.52 L1464.05 682.52 L1463.49 682.52 L1462.93 682.52 L1462.37 682.52 L1461.81 682.52 L1461.25 682.52 L1460.7 682.52 L1460.14 682.52 L1459.58 682.52 L1459.02 682.52 L1458.46 682.52 L1457.9 682.52 L1457.34 682.52 L1456.78 682.52 L1456.22 682.52 L1455.66 682.52 L1455.1 682.52 L1454.54 682.52 L1453.98 682.52 L1453.42 682.52 L1452.87 682.52 L1452.31 682.52 L1451.75 682.52 L1451.19 682.52 L1450.63 682.52 L1450.07 682.52 L1449.51 682.52 L1448.95 682.52 L1448.39 682.52 L1447.83 682.52 L1447.27 682.52 L1446.71 682.52 L1446.15 682.52 L1445.6 682.52 L1445.04 682.52 L1444.48 682.52 L1443.92 682.52 L1443.36 682.52 L1442.8 682.52 L1442.24 682.52 L1441.68 682.52 L1441.12 682.52 L1440.56 682.52 L1440 682.52 L1439.44 682.52 L1438.88 682.52 L1438.33 682.52 L1437.77 682.52 L1437.21 682.52 L1436.65 682.52 L1436.09 682.52 L1435.53 682.52 L1434.97 682.52 L1434.41 682.52 L1433.85 682.52 L1433.29 682.52 L1432.73 682.52 L1432.17 682.52 L1431.61 682.52 L1431.05 682.52 L1430.5 682.52 L1429.94 682.52 L1429.38 682.52 L1428.82 682.52 L1428.26 682.52 L1427.7 682.52 L1427.14 682.52 L1426.58 682.52 L1426.02 682.52 L1425.46 682.52 L1424.9 682.52 L1424.34 682.52 L1423.78 682.52 L1423.23 682.52 L1422.67 682.52 L1422.11 682.52 L1421.55 682.52 L1420.99 682.52 L1420.43 682.52 L1419.87 682.52 L1419.31 682.52 L1418.75 682.52 L1418.19 682.52 L1417.63 682.52 L1417.07 682.52 L1416.51 682.52 L1415.95 682.52 L1415.4 682.52 L1414.84 682.52 L1414.28 682.52 L1413.72 682.52 L1413.16 682.52 L1412.6 682.52 L1412.04 682.52 L1411.48 682.52 L1410.92 682.52 L1410.36 682.52 L1409.8 682.52 L1409.24 682.52 L1408.68 682.52 L1408.13 682.52 L1407.57 682.52 L1407.01 682.52 L1406.45 682.52 L1405.89 682.52 L1405.33 682.52 L1404.77 682.52 L1404.21 682.52 L1403.65 682.52 L1403.09 682.52 L1402.53 682.52 L1401.97 682.52 L1401.41 682.52 L1400.86 682.52 L1400.3 682.52 L1399.74 682.52 L1399.18 682.52 L1398.62 682.52 L1398.06 682.52 L1397.5 682.52 L1396.94 682.52 L1396.38 682.52 L1395.82 682.52 L1395.26 682.52 L1394.7 682.52 L1394.14 682.52 L1393.58 682.52 L1393.03 682.52 L1392.47 682.52 L1391.91 682.52 L1391.35 682.52 L1390.79 682.52 L1390.23 682.52 L1389.67 682.52 L1389.11 682.52 L1388.55 682.52 L1387.99 682.52 L1387.43 682.52 L1386.87 682.52 L1386.31 682.52 L1385.76 682.52 L1385.2 682.52 L1384.64 682.52 L1384.08 682.52 L1383.52 682.52 L1382.96 682.52 L1382.4 682.52 L1381.84 682.52 L1381.28 682.52 L1380.72 682.52 L1380.16 682.52 L1379.6 682.52 L1379.04 682.52 L1378.49 682.52 L1377.93 682.52 L1377.37 682.52 L1376.81 682.52 L1376.25 682.52 L1375.69 682.52 L1375.13 682.52 L1374.57 682.52 L1374.01 682.52 L1373.45 682.52 L1372.89 682.52 L1372.33 682.52 L1371.77 682.52 L1371.21 682.52 L1370.66 682.52 L1370.1 682.52 L1369.54 682.52 L1368.98 682.52 L1368.42 682.52 L1367.86 682.52 L1367.3 682.52 L1366.74 682.52 L1366.18 682.52 L1365.62 682.52 L1365.06 682.52 L1364.5 682.52 L1363.94 682.52 L1363.39 682.52 L1362.83 682.52 L1362.27 682.52 L1361.71 682.52 L1361.15 682.52 L1360.59 682.52 L1360.03 682.52 L1359.47 682.52 L1358.91 682.52 L1358.35 682.52 L1357.79 682.52 L1357.23 682.52 L1356.67 682.52 L1356.12 682.52 L1355.56 682.52 L1355 682.52 L1354.44 682.52 L1353.88 682.52 L1353.32 682.52 L1352.76 682.52 L1352.2 682.52 L1351.64 682.52 L1351.08 682.52 L1350.52 682.52 L1349.96 682.52 L1349.4 682.52 L1348.84 682.52 L1348.29 682.52 L1347.73 682.52 L1347.17 682.52 L1346.61 682.52 L1346.05 682.52 L1345.49 682.52 L1344.93 682.52 L1344.37 682.52 L1343.81 682.52 L1343.25 682.52 L1342.69 682.52 L1342.13 682.52 L1341.57 682.52 L1341.02 682.52 L1340.46 682.52 L1339.9 682.52 L1339.34 682.52 L1338.78 682.52 L1338.22 682.52 L1337.66 682.52 L1337.1 682.52 L1336.54 682.52 L1335.98 682.52 L1335.42 682.52 L1334.86 682.52 L1334.3 682.52 L1333.75 682.52 L1333.19 682.52 L1332.63 682.52 L1332.07 682.52 L1331.51 682.52 L1330.95 682.52 L1330.39 682.52 L1329.83 682.52 L1329.27 682.52 L1328.71 682.52 L1328.15 682.52 L1327.59 682.52 L1327.03 682.52 L1326.47 682.52 L1325.92 682.52 L1325.36 682.52 L1324.8 682.52 L1324.24 682.52 L1323.68 682.52 L1323.12 682.52 L1322.56 682.52 L1322 682.52 L1321.44 682.52 L1320.88 682.52 L1320.32 682.52 L1319.76 682.52 L1319.2 682.52 L1318.65 682.52 L1318.09 682.52 L1317.53 682.52 L1316.97 682.52 L1316.41 682.52 L1315.85 682.52 L1315.29 682.52 L1314.73 682.52 L1314.17 682.52 L1313.61 682.52 L1313.05 682.52 L1312.49 682.52 L1311.93 682.52 L1311.38 682.52 L1310.82 682.52 L1310.26 682.52 L1309.7 682.52 L1309.14 682.52 L1308.58 682.52 L1308.02 682.52 L1307.46 682.52 L1306.9 682.52 L1306.34 682.52 L1305.78 682.52 L1305.22 682.52 L1304.66 682.52 L1304.1 682.52 L1303.55 682.52 L1302.99 682.52 L1302.43 682.52 L1301.87 682.52 L1301.31 682.52 L1300.75 682.52 L1300.19 682.52 L1299.63 682.52 L1299.07 682.52 L1298.51 682.52 L1297.95 682.52 L1297.39 682.52 L1296.83 682.52 L1296.28 682.52 L1295.72 682.52 L1295.16 682.52 L1294.6 682.52 L1294.04 682.52 L1293.48 682.52 L1292.92 682.52 L1292.36 682.52 L1291.8 682.52 L1291.24 682.52 L1290.68 682.52 L1290.12 682.52 L1289.56 682.52 L1289 682.52 L1288.45 682.52 L1287.89 682.52 L1287.33 682.52 L1286.77 682.52 L1286.21 682.52 L1285.65 682.52 L1285.09 682.52 L1284.53 682.52 L1283.97 682.52 L1283.41 682.52 L1282.85 682.52 L1282.29 682.52 L1281.73 682.52 L1281.18 682.52 L1280.62 682.52 L1280.06 682.52 L1279.5 682.52 L1278.94 682.52 L1278.38 682.52 L1277.82 682.52 L1277.26 682.52 L1276.7 682.52 L1276.14 682.52 L1275.58 682.52 L1275.02 682.52 L1274.46 682.52 L1273.91 682.52 L1273.35 682.52 L1272.79 682.52 L1272.23 682.52 L1271.67 682.52 L1271.11 682.52 L1270.55 682.52 L1269.99 682.52 L1269.43 682.52 L1268.87 682.52 L1268.31 682.52 L1267.75 682.52 L1267.19 682.52 L1266.63 682.52 L1266.08 682.52 L1265.52 682.52 L1264.96 682.52 L1264.4 682.52 L1263.84 682.52 L1263.28 682.52 L1262.72 682.52 L1262.16 682.52 L1261.6 682.52 L1261.04 682.52 L1260.48 682.52 L1259.92 682.52 L1259.36 682.52 L1258.81 682.52 L1258.25 682.52 L1257.69 682.52 L1257.13 682.52 L1256.57 682.52 L1256.01 682.52 L1255.45 682.52 L1254.89 682.52 L1254.33 682.52 L1253.77 682.52 L1253.21 682.52 L1252.65 682.52 L1252.09 682.52 L1251.54 682.52 L1250.98 682.52 L1250.42 682.52 L1249.86 682.52 L1249.3 682.52 L1248.74 682.52 L1248.18 682.52 L1247.62 682.52 L1247.06 682.52 L1246.5 682.52 L1245.94 682.52 L1245.38 682.52 L1244.82 682.52 L1244.26 682.52 L1243.71 682.52 L1243.15 682.52 L1242.59 682.52 L1242.03 682.52 L1241.47 682.52 L1240.91 682.52 L1240.35 682.52 L1239.79 682.52 L1239.23 682.52 L1238.67 682.52 L1238.11 682.52 L1237.55 682.52 L1236.99 682.52 L1236.44 682.52 L1235.88 682.52 L1235.32 682.52 L1234.76 682.52 L1234.2 682.52 L1233.64 682.52 L1233.08 682.52 L1232.52 682.52 L1231.96 682.52 L1231.4 682.52 L1230.84 682.52 L1230.28 682.52 L1229.72 682.52 L1229.17 682.52 L1228.61 682.52 L1228.05 682.52 L1227.49 682.52 L1226.93 682.52 L1226.37 682.52 L1225.81 682.52 L1225.25 682.52 L1224.69 682.52 L1224.13 682.52 L1223.57 682.52 L1223.01 682.52 L1222.45 682.52 L1221.89 682.52 L1221.34 682.52 L1220.78 682.52 L1220.22 682.52 L1219.66 682.52 L1219.1 682.52 L1218.54 682.52 L1217.98 682.52 L1217.42 682.52 L1216.86 682.52 L1216.3 682.52 L1215.74 682.52 L1215.18 682.52 L1214.62 682.52 L1214.07 682.52 L1213.51 682.52 L1212.95 682.52 L1212.39 682.52 L1211.83 682.52 L1211.27 682.52 L1210.71 682.52 L1210.15 682.52 L1209.59 682.52 L1209.03 682.52 L1208.47 682.52 L1207.91 682.52 L1207.35 682.52 L1206.8 682.52 L1206.24 682.52 L1205.68 682.52 L1205.12 682.52 L1204.56 682.52 L1204 682.52 L1203.44 682.52 L1202.88 682.52 L1202.32 682.52 L1201.76 682.52 L1201.2 682.52 L1200.64 682.52 L1200.08 682.52 L1199.52 682.52 L1198.97 682.52 L1198.41 682.52 L1197.85 682.52 L1197.29 682.52 L1196.73 682.52 L1196.17 682.52 L1195.61 682.52 L1195.05 682.52 L1194.49 682.52 L1193.93 682.52 L1193.37 682.52 L1192.81 682.52 L1192.25 682.52 L1191.7 682.52 L1191.14 682.52 L1190.58 682.52 L1190.02 682.52 L1189.46 682.52 L1188.9 682.52 L1188.34 682.52 L1187.78 682.52 L1187.22 682.52 L1186.66 682.52 L1186.1 682.52 L1185.54 682.52 L1184.98 682.52 L1184.43 682.52 L1183.87 682.52 L1183.31 682.52 L1182.75 682.52 L1182.19 682.52 L1181.63 682.52 L1181.07 682.52 L1180.51 682.52 L1179.95 682.52 L1179.39 682.52 L1178.83 682.52 L1178.27 682.52 L1177.71 682.52 L1177.15 682.52 L1176.6 682.52 L1176.04 682.52 L1175.48 682.52 L1174.92 682.52 L1174.36 682.52 L1173.8 682.52 L1173.24 682.52 L1172.68 682.52 L1172.12 682.52 L1171.56 682.52 L1171 682.52 L1170.44 682.52 L1169.88 682.52 L1169.33 682.52 L1168.77 682.52 L1168.21 682.52 L1167.65 682.52 L1167.09 682.52 L1166.53 682.52 L1165.97 682.52 L1165.41 682.52 L1164.85 682.52 L1164.29 682.52 L1163.73 682.52 L1163.17 682.52 L1162.61 682.52 L1162.05 682.52 L1161.5 682.52 L1160.94 682.52 L1160.38 682.52 L1159.82 682.52 L1159.26 682.52 L1158.7 682.52 L1158.14 682.52 L1157.58 682.52 L1157.02 682.52 L1156.46 682.52 L1155.9 682.52 L1155.34 682.52 L1154.78 682.52 L1154.23 682.52 L1153.67 682.52 L1153.11 682.52 L1152.55 682.52 L1151.99 682.52 L1151.43 682.52 L1150.87 682.52 L1150.31 682.52 L1149.75 682.52 L1149.19 682.52 L1148.63 682.52 L1148.07 682.52 L1147.51 682.52 L1146.96 682.52 L1146.4 682.52 L1145.84 682.52 L1145.28 682.52 L1144.72 682.52 L1144.16 682.52 L1143.6 682.52 L1143.04 682.52 L1142.48 682.52 L1141.92 682.52 L1141.36 682.52 L1140.8 682.52 L1140.24 682.52 L1139.68 682.52 L1139.13 682.52 L1138.57 682.52 L1138.01 682.52 L1137.45 682.52 L1136.89 682.52 L1136.33 682.52 L1135.77 682.52 L1135.21 682.52 L1134.65 682.52 L1134.09 682.52 L1133.53 682.52 L1132.97 682.52 L1132.41 682.52 L1131.86 682.52 L1131.3 682.52 L1130.74 682.52 L1130.18 682.52 L1129.62 682.52 L1129.06 682.52 L1128.5 682.52 L1127.94 682.52 L1127.38 682.52 L1126.82 682.52 L1126.26 682.52 L1125.7 682.52 L1125.14 682.52 L1124.59 682.52 L1124.03 682.52 L1123.47 682.52 L1122.91 682.52 L1122.35 682.52 L1121.79 682.52 L1121.23 682.52 L1120.67 682.52 L1120.11 682.52 L1119.55 682.52 L1118.99 682.52 L1118.43 682.52 L1117.87 682.52 L1117.31 682.52 L1116.76 682.52 L1116.2 682.52 L1115.64 682.52 L1115.08 682.52 L1114.52 682.52 L1113.96 682.52 L1113.4 682.52 L1112.84 682.52 L1112.28 682.52 L1111.72 682.52 L1111.16 682.52 L1110.6 682.52 L1110.04 682.52 L1109.49 682.52 L1108.93 682.52 L1108.37 682.52 L1107.81 682.52 L1107.25 682.52 L1106.69 682.52 L1106.13 682.52 L1105.57 682.52 L1105.01 682.52 L1104.45 682.52 L1103.89 682.52 L1103.33 682.52 L1102.77 682.52 L1102.22 682.52 L1101.66 682.52 L1101.1 682.52 L1100.54 682.52 L1099.98 682.52 L1099.42 682.52 L1098.86 682.52 L1098.3 682.52 L1097.74 682.52 L1097.18 682.52 L1096.62 682.52 L1096.06 682.52 L1095.5 682.52 L1094.94 682.52 L1094.39 682.52 L1093.83 682.52 L1093.27 682.52 L1092.71 682.52 L1092.15 682.52 L1091.59 682.52 L1091.03 682.52 L1090.47 682.52 L1089.91 682.52 L1089.35 682.52 L1088.79 682.52 L1088.23 682.52 L1087.67 682.52 L1087.12 682.52 L1086.56 682.52 L1086 682.52 L1085.44 682.52 L1084.88 682.52 L1084.32 682.52 L1083.76 682.52 L1083.2 682.52 L1082.64 682.52 L1082.08 682.52 L1081.52 682.52 L1080.96 682.52 L1080.4 682.52 L1079.85 682.52 L1079.29 682.52 L1078.73 682.52 L1078.17 682.52 L1077.61 682.52 L1077.05 682.52 L1076.49 682.52 L1075.93 682.52 L1075.37 682.52 L1074.81 682.52 L1074.25 682.52 L1073.69 682.52 L1073.13 682.52 L1072.57 682.52 L1072.02 682.52 L1071.46 682.52 L1070.9 682.52 L1070.34 682.52 L1069.78 682.52 L1069.22 682.52 L1068.66 682.52 L1068.1 682.52 L1067.54 682.52 L1066.98 682.52 L1066.42 682.52 L1065.86 682.52 L1065.3 682.52 L1064.75 682.52 L1064.19 682.52 L1063.63 682.52 L1063.07 682.52 L1062.51 682.52 L1061.95 682.52 L1061.39 682.52 L1060.83 682.52 L1060.27 682.52 L1059.71 682.52 L1059.15 682.52 L1058.59 682.52 L1058.03 682.52 L1057.48 682.52 L1056.92 682.52 L1056.36 682.52 L1055.8 682.52 L1055.24 682.52 L1054.68 682.52 L1054.12 682.52 L1053.56 682.52 L1053 682.52 L1052.44 682.52 L1051.88 682.52 L1051.32 682.52 L1050.76 682.52 L1050.2 682.52 L1049.65 682.52 L1049.09 682.52 L1048.53 682.52 L1047.97 682.52 L1047.41 682.52 L1046.85 682.52 L1046.29 682.52 L1045.73 682.52 L1045.17 682.52 L1044.61 682.52 L1044.05 682.52 L1043.49 682.52 L1042.93 682.52 L1042.38 682.52 L1041.82 682.52 L1041.26 682.52 L1040.7 682.52 L1040.14 682.52 L1039.58 682.52 L1039.02 682.52 L1038.46 682.52 L1037.9 682.52 L1037.34 682.52 L1036.78 682.52 L1036.22 682.52 L1035.66 682.52 L1035.1 682.52 L1034.55 682.52 L1033.99 682.52 L1033.43 682.52 L1032.87 682.52 L1032.31 682.52 L1031.75 682.52 L1031.19 682.52 L1030.63 682.52 L1030.07 682.52 L1029.51 682.52 L1028.95 682.52 L1028.39 682.52 L1027.83 682.52 L1027.28 682.52 L1026.72 682.52 L1026.16 682.52 L1025.6 682.52 L1025.04 682.52 L1024.48 682.52 L1023.92 682.52 L1023.36 682.52 L1022.8 682.52 L1022.24 682.52 L1021.68 682.52 L1021.12 682.52 L1020.56 682.52 L1020.01 682.52 L1019.45 682.52 L1018.89 682.52 L1018.33 682.52 L1017.77 682.52 L1017.21 682.52 L1016.65 682.52 L1016.09 682.52 L1015.53 682.52 L1014.97 682.52 L1014.41 682.52 L1013.85 682.52 L1013.29 682.52 L1012.73 682.52 L1012.18 682.52 L1011.62 682.52 L1011.06 682.52 L1010.5 682.52 L1009.94 682.52 L1009.38 682.52 L1008.82 682.52 L1008.26 682.52 L1007.7 682.52 L1007.14 682.52 L1006.58 682.52 L1006.02 682.52 L1005.46 682.52 L1004.91 682.52 L1004.35 682.52 L1003.79 682.52 L1003.23 682.52 L1002.67 682.52 L1002.11 682.52 L1001.55 682.52 L1000.99 682.52 L1000.43 682.52 L999.872 682.52 L999.313 682.52 L998.754 682.52 L998.194 682.52 L997.635 682.52 L997.076 682.52 L996.517 682.52 L995.957 682.52 L995.398 682.52 L994.839 682.52 L994.28 682.52 L993.72 682.52 L993.161 682.52 L992.602 682.52 L992.043 682.52 L991.483 682.52 L990.924 682.52 L990.365 682.52 L989.806 682.52 L989.246 682.52 L988.687 682.52 L988.128 682.52 L987.569 682.52 L987.009 682.52 L986.45 682.52 L985.891 682.52 L985.332 682.52 L984.772 682.52 L984.213 682.52 L983.654 682.52 L983.095 682.52 L982.535 682.52 L981.976 682.52 L981.417 682.52 L980.858 682.52 L980.298 682.52 L979.739 682.52 L979.18 682.52 L978.621 682.52 L978.061 682.52 L977.502 682.52 L976.943 682.52 L976.384 682.52 L975.824 682.52 L975.265 682.52 L974.706 682.52 L974.147 682.52 L973.587 682.52 L973.028 682.52 L972.469 682.52 L971.91 682.52 L971.35 682.52 L970.791 682.52 L970.232 682.52 L969.673 682.52 L969.113 682.52 L968.554 682.52 L967.995 682.52 L967.436 682.52 L966.876 682.52 L966.317 682.52 L965.758 682.52 L965.199 682.52 L964.639 682.52 L964.08 682.52 L963.521 682.52 L962.962 682.52 L962.402 682.52 L961.843 682.52 L961.284 682.52 L960.725 682.52 L960.165 682.52 L959.606 682.52 L959.047 682.52 L958.488 682.52 L957.928 682.52 L957.369 682.52 L956.81 682.52 L956.251 682.52 L955.691 682.52 L955.132 682.52 L954.573 682.52 L954.014 682.52 L953.454 682.52 L952.895 682.52 L952.336 682.52 L951.777 682.52 L951.217 682.52 L950.658 682.52 L950.099 682.52 L949.54 682.52 L948.98 682.52 L948.421 682.52 L947.862 682.52 L947.303 682.52 L946.743 682.52 L946.184 682.52 L945.625 682.52 L945.066 682.52 L944.506 682.52 L943.947 682.52 L943.388 682.52 L942.829 682.52 L942.269 682.52 L941.71 682.52 L941.151 682.52 L940.592 682.52 L940.032 682.52 L939.473 682.52 L938.914 682.52 L938.355 682.52 L937.795 682.52 L937.236 682.52 L936.677 682.52 L936.118 682.52 L935.558 682.52 L934.999 682.52 L934.44 682.52 L933.881 682.52 L933.321 682.52 L932.762 682.52 L932.203 682.52 L931.644 682.52 L931.084 682.52 L930.525 682.52 L929.966 682.52 L929.406 682.52 L928.847 682.52 L928.288 682.52 L927.729 682.52 L927.169 682.52 L926.61 682.52 L926.051 682.52 L925.492 682.52 L924.932 682.52 L924.373 682.52 L923.814 682.52 L923.255 682.52 L922.695 682.52 L922.136 682.52 L921.577 682.52 L921.018 682.52 L920.458 682.52 L919.899 682.52 L919.34 682.52 L918.781 682.52 L918.221 682.52 L917.662 682.52 L917.103 682.52 L916.544 682.52 L915.984 682.52 L915.425 682.52 L914.866 682.52 L914.307 682.52 L913.747 682.52 L913.188 682.52 L912.629 682.52 L912.07 682.52 L911.51 682.52 L910.951 682.52 L910.392 682.52 L909.833 682.52 L909.273 682.52 L908.714 682.52 L908.155 682.52 L907.596 682.52 L907.036 682.52 L906.477 682.52 L905.918 682.52 L905.359 682.52 L904.799 682.52 L904.24 682.52 L903.681 682.52 L903.122 682.52 L902.562 682.52 L902.003 682.52 L901.444 682.52 L900.885 682.52 L900.325 682.52 L899.766 682.52 L899.207 682.52 L898.648 682.52 L898.088 682.52 L897.529 682.52 L896.97 682.52 L896.411 682.52 L895.851 682.52 L895.292 682.52 L894.733 682.52 L894.174 682.52 L893.614 682.52 L893.055 682.52 L892.496 682.52 L891.937 682.52 L891.377 682.52 L890.818 682.52 L890.259 682.52 L889.7 682.52 L889.14 682.52 L888.581 682.52 L888.022 682.52 L887.463 682.52 L886.903 682.52 L886.344 682.52 L885.785 682.52 L885.226 682.52 L884.666 682.52 L884.107 682.52 L883.548 682.52 L882.989 682.52 L882.429 682.52 L881.87 682.52 L881.311 682.52 L880.752 682.52 L880.192 682.52 L879.633 682.52 L879.074 682.52 L878.515 682.52 L877.955 682.52 L877.396 682.52 L876.837 682.52 L876.278 682.52 L875.718 682.52 L875.159 682.52 L874.6 682.52 L874.041 682.52 L873.481 682.52 L872.922 682.52 L872.363 682.52 L871.804 682.52 L871.244 682.52 L870.685 682.52 L870.126 682.52 L869.567 682.52 L869.007 682.52 L868.448 682.52 L867.889 682.52 L867.33 682.52 L866.77 682.52 L866.211 682.52 L865.652 682.52 L865.093 682.52 L864.533 682.52 L863.974 682.52 L863.415 682.52 L862.856 682.52 L862.296 682.52 L861.737 682.52 L861.178 682.52 L860.619 682.52 L860.059 682.52 L859.5 682.52 L858.941 682.52 L858.382 682.52 L857.822 682.52 L857.263 682.52 L856.704 682.52 L856.145 682.52 L855.585 682.52 L855.026 682.52 L854.467 682.52 L853.908 682.52 L853.348 682.52 L852.789 682.52 L852.23 682.52 L851.671 682.52 L851.111 682.52 L850.552 682.52 L849.993 682.52 L849.434 682.52 L848.874 682.52 L848.315 682.52 L847.756 682.52 L847.197 682.52 L846.637 682.52 L846.078 682.52 L845.519 682.52 L844.96 682.52 L844.4 682.52 L843.841 682.52 L843.282 682.52 L842.723 682.52 L842.163 682.52 L841.604 682.52 L841.045 682.52 L840.486 682.52 L839.926 682.52 L839.367 682.52 L838.808 682.52 L838.249 682.52 L837.689 682.52 L837.13 682.52 L836.571 682.52 L836.012 682.52 L835.452 682.52 L834.893 682.52 L834.334 682.52 L833.775 682.52 L833.215 682.52 L832.656 682.52 L832.097 682.52 L831.538 682.52 L830.978 682.52 L830.419 682.52 L829.86 682.52 L829.301 682.52 L828.741 682.52 L828.182 682.52 L827.623 682.52 L827.064 682.52 L826.504 682.52 L825.945 682.52 L825.386 682.52 L824.827 682.52 L824.267 682.52 L823.708 682.52 L823.149 682.52 L822.59 682.52 L822.03 682.52 L821.471 682.52 L820.912 682.52 L820.353 682.52 L819.793 682.52 L819.234 682.52 L818.675 682.52 L818.116 682.52 L817.556 682.52 L816.997 682.52 L816.438 682.52 L815.879 682.52 L815.319 682.52 L814.76 682.52 L814.201 682.52 L813.642 682.52 L813.082 682.52 L812.523 682.52 L811.964 682.52 L811.405 682.52 L810.845 682.52 L810.286 682.52 L809.727 682.52 L809.168 682.52 L808.608 682.52 L808.049 682.52 L807.49 682.52 L806.931 682.52 L806.371 682.52 L805.812 682.52 L805.253 682.52 L804.693 682.52 L804.134 682.52 L803.575 682.52 L803.016 682.52 L802.456 682.52 L801.897 682.52 L801.338 682.52 L800.779 682.52 L800.219 682.52 L799.66 682.52 L799.101 682.52 L798.542 682.52 L797.982 682.52 L797.423 682.52 L796.864 682.52 L796.305 682.52 L795.745 682.52 L795.186 682.52 L794.627 682.52 L794.068 682.52 L793.508 682.52 L792.949 682.52 L792.39 682.52 L791.831 682.52 L791.271 682.52 L790.712 682.52 L790.153 682.52 L789.594 682.52 L789.034 682.52 L788.475 682.52 L787.916 682.52 L787.357 682.52 L786.797 682.52 L786.238 682.52 L785.679 682.52 L785.12 682.52 L784.56 682.52 L784.001 682.52 L783.442 682.52 L782.883 682.52 L782.323 682.52 L781.764 682.52 L781.205 682.52 L780.646 682.52 L780.086 682.52 L779.527 682.52 L778.968 682.52 L778.409 682.52 L777.849 682.52 L777.29 682.52 L776.731 682.52 L776.172 682.52 L775.612 682.52 L775.053 682.52 L774.494 682.52 L773.935 682.52 L773.375 682.52 L772.816 682.52 L772.257 682.52 L771.698 682.52 L771.138 682.52 L770.579 682.52 L770.02 682.52 L769.461 682.52 L768.901 682.52 L768.342 682.52 L767.783 682.52 L767.224 682.52 L766.664 682.52 L766.105 682.52 L765.546 682.52 L764.987 682.52 L764.427 682.52 L763.868 682.52 L763.309 682.52 L762.75 682.52 L762.19 682.52 L761.631 682.52 L761.072 682.52 L760.513 682.52 L759.953 682.52 L759.394 682.52 L758.835 682.52 L758.276 682.52 L757.716 682.52 L757.157 682.52 L756.598 682.52 L756.039 682.52 L755.479 682.52 L754.92 682.52 L754.361 682.52 L753.802 682.52 L753.242 682.52 L752.683 682.52 L752.124 682.52 L751.565 682.52 L751.005 682.52 L750.446 682.52 L749.887 682.52 L749.328 682.52 L748.768 682.52 L748.209 682.52 L747.65 682.52 L747.091 682.52 L746.531 682.52 L745.972 682.52 L745.413 682.52 L744.854 682.52 L744.294 682.52 L743.735 682.52 L743.176 682.52 L742.617 682.52 L742.057 682.52 L741.498 682.52 L740.939 682.52 L740.38 682.52 L739.82 682.52 L739.261 682.52 L738.702 682.52 L738.143 682.52 L737.583 682.52 L737.024 682.52 L736.465 682.52 L735.906 682.52 L735.346 682.52 L734.787 682.52 L734.228 682.52 L733.669 682.52 L733.109 682.52 L732.55 682.52 L731.991 682.52 L731.432 682.52 L730.872 682.52 L730.313 682.52 L729.754 682.52 L729.195 682.52 L728.635 682.52 L728.076 682.52 L727.517 682.52 L726.958 682.52 L726.398 682.52 L725.839 682.52 L725.28 682.52 L724.721 682.52 L724.161 682.52 L723.602 682.52 L723.043 682.52 L722.484 682.52 L721.924 682.52 L721.365 682.52 L720.806 682.52 L720.247 682.52  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip753)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.45 720.806,683.45 721.365,683.45 721.924,683.45 722.484,683.45 723.043,683.45 723.602,683.45 724.161,683.45 724.721,683.45 725.28,683.45 725.839,683.45 726.398,683.45 726.958,683.45 727.517,683.45 728.076,683.45 728.635,683.45 729.195,683.45 729.754,683.45 730.313,683.45 730.872,683.45 731.432,683.45 731.991,683.45 732.55,683.45 733.109,683.45 733.669,683.45 734.228,683.45 734.787,683.45 735.346,683.45 735.906,683.45 736.465,683.45 737.024,683.45 737.583,683.45 738.143,683.45 738.702,683.45 739.261,683.45 739.82,683.45 740.38,683.45 740.939,683.45 741.498,683.45 742.057,683.45 742.617,683.45 743.176,683.45 743.735,683.45 744.294,683.45 744.854,683.45 745.413,683.45 745.972,683.45 746.531,683.45 747.091,683.45 747.65,683.45 748.209,683.45 748.768,683.45 749.328,683.45 749.887,683.45 750.446,683.45 751.005,683.45 751.565,683.45 752.124,683.45 752.683,683.45 753.242,683.45 753.802,683.45 754.361,683.45 754.92,683.45 755.479,683.45 756.039,683.45 756.598,683.45 757.157,683.45 757.716,683.45 758.276,683.45 758.835,683.45 759.394,683.45 759.953,683.45 760.513,683.45 761.072,683.45 761.631,683.45 762.19,683.45 762.75,683.45 763.309,683.45 763.868,683.45 764.427,683.45 764.987,683.45 765.546,683.45 766.105,683.45 766.664,683.45 767.224,683.45 767.783,683.45 768.342,683.45 768.901,683.45 769.461,683.45 770.02,683.45 770.579,683.45 771.138,683.45 771.698,683.45 772.257,683.45 772.816,683.45 773.375,683.45 773.935,683.45 774.494,683.45 775.053,683.45 775.612,683.45 776.172,683.45 776.731,683.45 777.29,683.45 777.849,683.45 778.409,683.45 778.968,683.45 779.527,683.45 780.086,683.45 780.646,683.45 781.205,683.45 781.764,683.45 782.323,683.45 782.883,683.45 783.442,683.45 784.001,683.45 784.56,683.45 785.12,683.45 785.679,683.45 786.238,683.45 786.797,683.45 787.357,683.45 787.916,683.45 788.475,683.45 789.034,683.45 789.594,683.45 790.153,683.45 790.712,683.45 791.271,683.45 791.831,683.45 792.39,683.45 792.949,683.45 793.508,683.45 794.068,683.45 794.627,683.45 795.186,683.45 795.745,683.45 796.305,683.45 796.864,683.45 797.423,683.45 797.982,683.45 798.542,683.45 799.101,683.45 799.66,683.45 800.219,683.45 800.779,683.45 801.338,683.45 801.897,683.45 802.456,683.45 803.016,683.45 803.575,683.45 804.134,683.45 804.693,683.45 805.253,683.45 805.812,683.45 806.371,683.45 806.931,683.45 807.49,683.45 808.049,683.45 808.608,683.45 809.168,683.45 809.727,683.45 810.286,683.45 810.845,683.45 811.405,683.45 811.964,683.45 812.523,683.45 813.082,683.45 813.642,683.45 814.201,683.45 814.76,683.45 815.319,683.45 815.879,683.45 816.438,683.45 816.997,683.45 817.556,683.45 818.116,683.45 818.675,683.45 819.234,683.45 819.793,683.45 820.353,683.45 820.912,683.45 821.471,683.45 822.03,683.45 822.59,683.45 823.149,683.45 823.708,683.45 824.267,683.45 824.827,683.45 825.386,683.45 825.945,683.45 826.504,683.45 827.064,683.45 827.623,683.45 828.182,683.45 828.741,683.45 829.301,683.45 829.86,683.45 830.419,683.45 830.978,683.45 831.538,683.45 832.097,683.45 832.656,683.45 833.215,683.45 833.775,683.45 834.334,683.45 834.893,683.45 835.452,683.45 836.012,683.45 836.571,683.45 837.13,683.45 837.689,683.45 838.249,683.45 838.808,683.45 839.367,683.45 839.926,683.45 840.486,683.45 841.045,683.45 841.604,683.45 842.163,683.45 842.723,683.45 843.282,683.45 843.841,683.45 844.4,683.45 844.96,683.45 845.519,683.45 846.078,683.45 846.637,683.45 847.197,683.45 847.756,683.45 848.315,683.45 848.874,683.45 849.434,683.45 849.993,683.45 850.552,683.45 851.111,683.45 851.671,683.45 852.23,683.45 852.789,683.45 853.348,683.45 853.908,683.45 854.467,683.45 855.026,683.45 855.585,683.45 856.145,683.45 856.704,683.45 857.263,683.45 857.822,683.45 858.382,683.45 858.941,683.45 859.5,683.45 860.059,683.45 860.619,683.45 861.178,683.45 861.737,683.45 862.296,683.45 862.856,683.45 863.415,683.45 863.974,683.45 864.533,683.45 865.093,683.45 865.652,683.45 866.211,683.45 866.77,683.45 867.33,683.45 867.889,683.45 868.448,683.45 869.007,683.45 869.567,683.45 870.126,683.45 870.685,683.45 871.244,683.45 871.804,683.45 872.363,683.45 872.922,683.45 873.481,683.45 874.041,683.45 874.6,683.45 875.159,683.45 875.718,683.45 876.278,683.45 876.837,683.45 877.396,683.45 877.955,683.45 878.515,683.45 879.074,683.45 879.633,683.45 880.192,683.45 880.752,683.45 881.311,683.45 881.87,683.45 882.429,683.45 882.989,683.45 883.548,683.45 884.107,683.45 884.666,683.45 885.226,683.45 885.785,683.45 886.344,683.45 886.903,683.45 887.463,683.45 888.022,683.45 888.581,683.45 889.14,683.45 889.7,683.45 890.259,683.45 890.818,683.45 891.377,683.45 891.937,683.45 892.496,683.45 893.055,683.45 893.614,683.45 894.174,683.45 894.733,683.45 895.292,683.45 895.851,683.45 896.411,683.45 896.97,683.45 897.529,683.45 898.088,683.45 898.648,683.45 899.207,683.45 899.766,683.45 900.325,683.45 900.885,683.45 901.444,683.45 902.003,683.45 902.562,683.45 903.122,683.45 903.681,683.45 904.24,683.45 904.799,683.45 905.359,683.45 905.918,683.45 906.477,683.45 907.036,683.45 907.596,683.45 908.155,683.45 908.714,683.45 909.273,683.45 909.833,683.45 910.392,683.45 910.951,683.45 911.51,683.45 912.07,683.45 912.629,683.45 913.188,683.45 913.747,683.45 914.307,683.45 914.866,683.45 915.425,683.45 915.984,683.45 916.544,683.45 917.103,683.45 917.662,683.45 918.221,683.45 918.781,683.45 919.34,683.45 919.899,683.45 920.458,683.45 921.018,683.45 921.577,683.45 922.136,683.45 922.695,683.45 923.255,683.45 923.814,683.45 924.373,683.45 924.932,683.45 925.492,683.45 926.051,683.45 926.61,683.45 927.169,683.45 927.729,683.45 928.288,683.45 928.847,683.45 929.406,683.45 929.966,683.45 930.525,683.45 931.084,683.45 931.644,683.45 932.203,683.45 932.762,683.45 933.321,683.45 933.881,683.45 934.44,683.45 934.999,683.45 935.558,683.45 936.118,683.45 936.677,683.45 937.236,683.45 937.795,683.45 938.355,683.45 938.914,683.45 939.473,683.45 940.032,683.45 940.592,683.45 941.151,683.45 941.71,683.45 942.269,683.45 942.829,683.45 943.388,683.45 943.947,683.45 944.506,683.45 945.066,683.45 945.625,683.45 946.184,683.45 946.743,683.45 947.303,683.45 947.862,683.45 948.421,683.45 948.98,683.45 949.54,683.45 950.099,683.45 950.658,683.45 951.217,683.45 951.777,683.45 952.336,683.45 952.895,683.45 953.454,683.45 954.014,683.45 954.573,683.45 955.132,683.45 955.691,683.45 956.251,683.45 956.81,683.45 957.369,683.45 957.928,683.45 958.488,683.45 959.047,683.45 959.606,683.45 960.165,683.45 960.725,683.45 961.284,683.45 961.843,683.45 962.402,683.45 962.962,683.45 963.521,683.45 964.08,683.45 964.639,683.45 965.199,683.45 965.758,683.45 966.317,683.45 966.876,683.45 967.436,683.45 967.995,683.45 968.554,683.45 969.113,683.45 969.673,683.45 970.232,683.45 970.791,683.45 971.35,683.45 971.91,683.45 972.469,683.45 973.028,683.45 973.587,683.45 974.147,683.45 974.706,683.45 975.265,683.45 975.824,683.45 976.384,683.45 976.943,683.45 977.502,683.45 978.061,683.45 978.621,683.45 979.18,683.45 979.739,683.45 980.298,683.45 980.858,683.45 981.417,683.45 981.976,683.45 982.535,683.45 983.095,683.45 983.654,683.45 984.213,683.45 984.772,683.45 985.332,683.45 985.891,683.45 986.45,683.45 987.009,683.45 987.569,683.45 988.128,683.45 988.687,683.45 989.246,683.45 989.806,683.45 990.365,683.45 990.924,683.45 991.483,683.45 992.043,683.45 992.602,683.45 993.161,683.45 993.72,683.45 994.28,683.45 994.839,683.45 995.398,683.45 995.957,683.45 996.517,683.45 997.076,683.45 997.635,683.45 998.194,683.45 998.754,683.45 999.313,683.45 999.872,683.45 1000.43,683.45 1000.99,683.45 1001.55,683.45 1002.11,683.45 1002.67,683.45 1003.23,683.45 1003.79,683.45 1004.35,683.45 1004.91,683.45 1005.46,683.45 1006.02,683.45 1006.58,683.45 1007.14,683.45 1007.7,683.45 1008.26,683.45 1008.82,683.45 1009.38,683.45 1009.94,683.45 1010.5,683.45 1011.06,683.45 1011.62,683.45 1012.18,683.45 1012.73,683.45 1013.29,683.45 1013.85,683.45 1014.41,683.45 1014.97,683.45 1015.53,683.45 1016.09,683.45 1016.65,683.45 1017.21,683.45 1017.77,683.45 1018.33,683.45 1018.89,683.45 1019.45,683.45 1020.01,683.45 1020.56,683.45 1021.12,683.45 1021.68,683.45 1022.24,683.45 1022.8,683.45 1023.36,683.45 1023.92,683.45 1024.48,683.45 1025.04,683.45 1025.6,683.45 1026.16,683.45 1026.72,683.45 1027.28,683.45 1027.83,683.45 1028.39,683.45 1028.95,683.45 1029.51,683.45 1030.07,683.45 1030.63,683.45 1031.19,683.45 1031.75,683.45 1032.31,683.45 1032.87,683.45 1033.43,683.45 1033.99,683.45 1034.55,683.45 1035.1,683.45 1035.66,683.45 1036.22,683.45 1036.78,683.45 1037.34,683.45 1037.9,683.45 1038.46,683.45 1039.02,683.45 1039.58,683.45 1040.14,683.45 1040.7,683.45 1041.26,683.45 1041.82,683.45 1042.38,683.45 1042.93,683.45 1043.49,683.45 1044.05,683.45 1044.61,683.45 1045.17,683.45 1045.73,683.45 1046.29,683.45 1046.85,683.45 1047.41,683.45 1047.97,683.45 1048.53,683.45 1049.09,683.45 1049.65,683.45 1050.2,683.45 1050.76,683.45 1051.32,683.45 1051.88,683.45 1052.44,683.45 1053,683.45 1053.56,683.45 1054.12,683.45 1054.68,683.45 1055.24,683.45 1055.8,683.45 1056.36,683.45 1056.92,683.45 1057.48,683.45 1058.03,683.45 1058.59,683.45 1059.15,683.45 1059.71,683.45 1060.27,683.45 1060.83,683.45 1061.39,683.45 1061.95,683.45 1062.51,683.45 1063.07,683.45 1063.63,683.45 1064.19,683.45 1064.75,683.45 1065.3,683.45 1065.86,683.45 1066.42,683.45 1066.98,683.45 1067.54,683.45 1068.1,683.45 1068.66,683.45 1069.22,683.45 1069.78,683.45 1070.34,683.45 1070.9,683.45 1071.46,683.45 1072.02,683.45 1072.57,683.45 1073.13,683.45 1073.69,683.45 1074.25,683.45 1074.81,683.45 1075.37,683.45 1075.93,683.45 1076.49,683.45 1077.05,683.45 1077.61,683.45 1078.17,683.45 1078.73,683.45 1079.29,683.45 1079.85,683.45 1080.4,683.45 1080.96,683.45 1081.52,683.45 1082.08,683.45 1082.64,683.45 1083.2,683.45 1083.76,683.45 1084.32,683.45 1084.88,683.45 1085.44,683.45 1086,683.45 1086.56,683.45 1087.12,683.45 1087.67,683.45 1088.23,683.45 1088.79,683.45 1089.35,683.45 1089.91,683.45 1090.47,683.45 1091.03,683.45 1091.59,683.45 1092.15,683.45 1092.71,683.45 1093.27,683.45 1093.83,683.45 1094.39,683.45 1094.94,683.45 1095.5,683.45 1096.06,683.45 1096.62,683.45 1097.18,683.45 1097.74,683.45 1098.3,683.45 1098.86,683.45 1099.42,683.45 1099.98,683.45 1100.54,683.45 1101.1,683.45 1101.66,683.45 1102.22,683.45 1102.77,683.45 1103.33,683.45 1103.89,683.45 1104.45,683.45 1105.01,683.45 1105.57,683.45 1106.13,683.45 1106.69,683.45 1107.25,683.45 1107.81,683.45 1108.37,683.45 1108.93,683.45 1109.49,683.45 1110.04,683.45 1110.6,683.45 1111.16,683.45 1111.72,683.45 1112.28,683.45 1112.84,683.45 1113.4,683.45 1113.96,683.45 1114.52,683.45 1115.08,683.45 1115.64,683.45 1116.2,683.45 1116.76,683.45 1117.31,683.45 1117.87,683.45 1118.43,683.45 1118.99,683.45 1119.55,683.45 1120.11,683.45 1120.67,683.45 1121.23,683.45 1121.79,683.45 1122.35,683.45 1122.91,683.45 1123.47,683.45 1124.03,683.45 1124.59,683.45 1125.14,683.45 1125.7,683.45 1126.26,683.45 1126.82,683.45 1127.38,683.45 1127.94,683.45 1128.5,683.45 1129.06,683.45 1129.62,683.45 1130.18,683.45 1130.74,683.45 1131.3,683.45 1131.86,683.45 1132.41,683.45 1132.97,683.45 1133.53,683.45 1134.09,683.45 1134.65,683.45 1135.21,683.45 1135.77,683.45 1136.33,683.45 1136.89,683.45 1137.45,683.45 1138.01,683.45 1138.57,683.45 1139.13,683.45 1139.68,683.45 1140.24,683.45 1140.8,683.45 1141.36,683.45 1141.92,683.45 1142.48,683.45 1143.04,683.45 1143.6,683.45 1144.16,683.45 1144.72,683.45 1145.28,683.45 1145.84,683.45 1146.4,683.45 1146.96,683.45 1147.51,683.45 1148.07,683.45 1148.63,683.45 1149.19,683.45 1149.75,683.45 1150.31,683.45 1150.87,683.45 1151.43,683.45 1151.99,683.45 1152.55,683.45 1153.11,683.45 1153.67,683.45 1154.23,683.45 1154.78,683.45 1155.34,683.45 1155.9,683.45 1156.46,683.45 1157.02,683.45 1157.58,683.45 1158.14,683.45 1158.7,683.45 1159.26,683.45 1159.82,683.45 1160.38,683.45 1160.94,683.45 1161.5,683.45 1162.05,683.45 1162.61,683.45 1163.17,683.45 1163.73,683.45 1164.29,683.45 1164.85,683.45 1165.41,683.45 1165.97,683.45 1166.53,683.45 1167.09,683.45 1167.65,683.45 1168.21,683.45 1168.77,683.45 1169.33,683.45 1169.88,683.45 1170.44,683.45 1171,683.45 1171.56,683.45 1172.12,683.45 1172.68,683.45 1173.24,683.45 1173.8,683.45 1174.36,683.45 1174.92,683.45 1175.48,683.45 1176.04,683.45 1176.6,683.45 1177.15,683.45 1177.71,683.45 1178.27,683.45 1178.83,683.45 1179.39,683.45 1179.95,683.45 1180.51,683.45 1181.07,683.45 1181.63,683.45 1182.19,683.45 1182.75,683.45 1183.31,683.45 1183.87,683.45 1184.43,683.45 1184.98,683.45 1185.54,683.45 1186.1,683.45 1186.66,683.45 1187.22,683.45 1187.78,683.45 1188.34,683.45 1188.9,683.45 1189.46,683.45 1190.02,683.45 1190.58,683.45 1191.14,683.45 1191.7,683.45 1192.25,683.45 1192.81,683.45 1193.37,683.45 1193.93,683.45 1194.49,683.45 1195.05,683.45 1195.61,683.45 1196.17,683.45 1196.73,683.45 1197.29,683.45 1197.85,683.45 1198.41,683.45 1198.97,683.45 1199.52,683.45 1200.08,683.45 1200.64,683.45 1201.2,683.45 1201.76,683.45 1202.32,683.45 1202.88,683.45 1203.44,683.45 1204,683.45 1204.56,683.45 1205.12,683.45 1205.68,683.45 1206.24,683.45 1206.8,683.45 1207.35,683.45 1207.91,683.45 1208.47,683.45 1209.03,683.45 1209.59,683.45 1210.15,683.45 1210.71,683.45 1211.27,683.45 1211.83,683.45 1212.39,683.45 1212.95,683.45 1213.51,683.45 1214.07,683.45 1214.62,683.45 1215.18,683.45 1215.74,683.45 1216.3,683.45 1216.86,683.45 1217.42,683.45 1217.98,683.45 1218.54,683.45 1219.1,683.45 1219.66,683.45 1220.22,683.45 1220.78,683.45 1221.34,683.45 1221.89,683.45 1222.45,683.45 1223.01,683.45 1223.57,683.45 1224.13,683.45 1224.69,683.45 1225.25,683.45 1225.81,683.45 1226.37,683.45 1226.93,683.45 1227.49,683.45 1228.05,683.45 1228.61,683.45 1229.17,683.45 1229.72,683.45 1230.28,683.45 1230.84,683.45 1231.4,683.45 1231.96,683.45 1232.52,683.45 1233.08,683.45 1233.64,683.45 1234.2,683.45 1234.76,683.45 1235.32,683.45 1235.88,683.45 1236.44,683.45 1236.99,683.45 1237.55,683.45 1238.11,683.45 1238.67,683.45 1239.23,683.45 1239.79,683.45 1240.35,683.45 1240.91,683.45 1241.47,683.45 1242.03,683.45 1242.59,683.45 1243.15,683.45 1243.71,683.45 1244.26,683.45 1244.82,683.45 1245.38,683.45 1245.94,683.45 1246.5,683.45 1247.06,683.45 1247.62,683.45 1248.18,683.45 1248.74,683.45 1249.3,683.45 1249.86,683.45 1250.42,683.45 1250.98,683.45 1251.54,683.45 1252.09,683.45 1252.65,683.45 1253.21,683.45 1253.77,683.45 1254.33,683.45 1254.89,683.45 1255.45,683.45 1256.01,683.45 1256.57,683.45 1257.13,683.45 1257.69,683.45 1258.25,683.45 1258.81,683.45 1259.36,683.45 1259.92,683.45 1260.48,683.45 1261.04,683.45 1261.6,683.45 1262.16,683.45 1262.72,683.45 1263.28,683.45 1263.84,683.45 1264.4,683.45 1264.96,683.45 1265.52,683.45 1266.08,683.45 1266.63,683.45 1267.19,683.45 1267.75,683.45 1268.31,683.45 1268.87,683.45 1269.43,683.45 1269.99,683.45 1270.55,683.45 1271.11,683.45 1271.67,683.45 1272.23,683.45 1272.79,683.45 1273.35,683.45 1273.91,683.45 1274.46,683.45 1275.02,683.45 1275.58,683.45 1276.14,683.45 1276.7,683.45 1277.26,683.45 1277.82,683.45 1278.38,683.45 1278.94,683.45 1279.5,683.45 1280.06,683.45 1280.62,683.45 1281.18,683.45 1281.73,683.45 1282.29,683.45 1282.85,683.45 1283.41,683.45 1283.97,683.45 1284.53,683.45 1285.09,683.45 1285.65,683.45 1286.21,683.45 1286.77,683.45 1287.33,683.45 1287.89,683.45 1288.45,683.45 1289,683.45 1289.56,683.45 1290.12,683.45 1290.68,683.45 1291.24,683.45 1291.8,683.45 1292.36,683.45 1292.92,683.45 1293.48,683.45 1294.04,683.45 1294.6,683.45 1295.16,683.45 1295.72,683.45 1296.28,683.45 1296.83,683.45 1297.39,683.45 1297.95,683.45 1298.51,683.45 1299.07,683.45 1299.63,683.45 1300.19,683.45 1300.75,683.45 1301.31,683.45 1301.87,683.45 1302.43,683.45 1302.99,683.45 1303.55,683.45 1304.1,683.45 1304.66,683.45 1305.22,683.45 1305.78,683.45 1306.34,683.45 1306.9,683.45 1307.46,683.45 1308.02,683.45 1308.58,683.45 1309.14,683.45 1309.7,683.45 1310.26,683.45 1310.82,683.45 1311.38,683.45 1311.93,683.45 1312.49,683.45 1313.05,683.45 1313.61,683.45 1314.17,683.45 1314.73,683.45 1315.29,683.45 1315.85,683.45 1316.41,683.45 1316.97,683.45 1317.53,683.45 1318.09,683.45 1318.65,683.45 1319.2,683.45 1319.76,683.45 1320.32,683.45 1320.88,683.45 1321.44,683.45 1322,683.45 1322.56,683.45 1323.12,683.45 1323.68,683.45 1324.24,683.45 1324.8,683.45 1325.36,683.45 1325.92,683.45 1326.47,683.45 1327.03,683.45 1327.59,683.45 1328.15,683.45 1328.71,683.45 1329.27,683.45 1329.83,683.45 1330.39,683.45 1330.95,683.45 1331.51,683.45 1332.07,683.45 1332.63,683.45 1333.19,683.45 1333.75,683.45 1334.3,683.45 1334.86,683.45 1335.42,683.45 1335.98,683.45 1336.54,683.45 1337.1,683.45 1337.66,683.45 1338.22,683.45 1338.78,683.45 1339.34,683.45 1339.9,683.45 1340.46,683.45 1341.02,683.45 1341.57,683.45 1342.13,683.45 1342.69,683.45 1343.25,683.45 1343.81,683.45 1344.37,683.45 1344.93,683.45 1345.49,683.45 1346.05,683.45 1346.61,683.45 1347.17,683.45 1347.73,683.45 1348.29,683.45 1348.84,683.45 1349.4,683.45 1349.96,683.45 1350.52,683.45 1351.08,683.45 1351.64,683.45 1352.2,683.45 1352.76,683.45 1353.32,683.45 1353.88,683.45 1354.44,683.45 1355,683.45 1355.56,683.45 1356.12,683.45 1356.67,683.45 1357.23,683.45 1357.79,683.45 1358.35,683.45 1358.91,683.45 1359.47,683.45 1360.03,683.45 1360.59,683.45 1361.15,683.45 1361.71,683.45 1362.27,683.45 1362.83,683.45 1363.39,683.45 1363.94,683.45 1364.5,683.45 1365.06,683.45 1365.62,683.45 1366.18,683.45 1366.74,683.45 1367.3,683.45 1367.86,683.45 1368.42,683.45 1368.98,683.45 1369.54,683.45 1370.1,683.45 1370.66,683.45 1371.21,683.45 1371.77,683.45 1372.33,683.45 1372.89,683.45 1373.45,683.45 1374.01,683.45 1374.57,683.45 1375.13,683.45 1375.69,683.45 1376.25,683.45 1376.81,683.45 1377.37,683.45 1377.93,683.45 1378.49,683.45 1379.04,683.45 1379.6,683.45 1380.16,683.45 1380.72,683.45 1381.28,683.45 1381.84,683.45 1382.4,683.45 1382.96,683.45 1383.52,683.45 1384.08,683.45 1384.64,683.45 1385.2,683.45 1385.76,683.45 1386.31,683.45 1386.87,683.45 1387.43,683.45 1387.99,683.45 1388.55,683.45 1389.11,683.45 1389.67,683.45 1390.23,683.45 1390.79,683.45 1391.35,683.45 1391.91,683.45 1392.47,683.45 1393.03,683.45 1393.58,683.45 1394.14,683.45 1394.7,683.45 1395.26,683.45 1395.82,683.45 1396.38,683.45 1396.94,683.45 1397.5,683.45 1398.06,683.45 1398.62,683.45 1399.18,683.45 1399.74,683.45 1400.3,683.45 1400.86,683.45 1401.41,683.45 1401.97,683.45 1402.53,683.45 1403.09,683.45 1403.65,683.45 1404.21,683.45 1404.77,683.45 1405.33,683.45 1405.89,683.45 1406.45,683.45 1407.01,683.45 1407.57,683.45 1408.13,683.45 1408.68,683.45 1409.24,683.45 1409.8,683.45 1410.36,683.45 1410.92,683.45 1411.48,683.45 1412.04,683.45 1412.6,683.45 1413.16,683.45 1413.72,683.45 1414.28,683.45 1414.84,683.45 1415.4,683.45 1415.95,683.45 1416.51,683.45 1417.07,683.45 1417.63,683.45 1418.19,683.45 1418.75,683.45 1419.31,683.45 1419.87,683.45 1420.43,683.45 1420.99,683.45 1421.55,683.45 1422.11,683.45 1422.67,683.45 1423.23,683.45 1423.78,683.45 1424.34,683.45 1424.9,683.45 1425.46,683.45 1426.02,683.45 1426.58,683.45 1427.14,683.45 1427.7,683.45 1428.26,683.45 1428.82,683.45 1429.38,683.45 1429.94,683.45 1430.5,683.45 1431.05,683.45 1431.61,683.45 1432.17,683.45 1432.73,683.45 1433.29,683.45 1433.85,683.45 1434.41,683.45 1434.97,683.45 1435.53,683.45 1436.09,683.45 1436.65,683.45 1437.21,683.45 1437.77,683.45 1438.33,683.45 1438.88,683.45 1439.44,683.45 1440,683.45 1440.56,683.45 1441.12,683.45 1441.68,683.45 1442.24,683.45 1442.8,683.45 1443.36,683.45 1443.92,683.45 1444.48,683.45 1445.04,683.45 1445.6,683.45 1446.15,683.45 1446.71,683.45 1447.27,683.45 1447.83,683.45 1448.39,683.45 1448.95,683.45 1449.51,683.45 1450.07,683.45 1450.63,683.45 1451.19,683.45 1451.75,683.45 1452.31,683.45 1452.87,683.45 1453.42,683.45 1453.98,683.45 1454.54,683.45 1455.1,683.45 1455.66,683.45 1456.22,683.45 1456.78,683.45 1457.34,683.45 1457.9,683.45 1458.46,683.45 1459.02,683.45 1459.58,683.45 1460.14,683.45 1460.7,683.45 1461.25,683.45 1461.81,683.45 1462.37,683.45 1462.93,683.45 1463.49,683.45 1464.05,683.45 1464.61,683.45 1465.17,683.45 1465.73,683.45 1466.29,683.45 1466.85,683.45 1467.41,683.45 1467.97,683.45 1468.52,683.45 1469.08,683.45 1469.64,683.45 1470.2,683.45 1470.76,683.45 1471.32,683.45 1471.88,683.45 1472.44,683.45 1473,683.45 1473.56,683.45 1474.12,683.45 1474.68,683.45 1475.24,683.45 1475.79,683.45 1476.35,683.45 1476.91,683.45 1477.47,683.45 1478.03,683.45 1478.59,683.45 1479.15,683.45 1479.71,683.45 1480.27,683.45 1480.83,683.45 1481.39,683.45 1481.95,683.45 1482.51,683.45 1483.07,683.45 1483.62,683.45 1484.18,683.45 1484.74,683.45 1485.3,683.45 1485.86,683.45 1486.42,683.45 1486.98,683.45 1487.54,683.45 1488.1,683.45 1488.66,683.45 1489.22,683.45 1489.78,683.45 1490.34,683.45 1490.89,683.45 1491.45,683.45 1492.01,683.45 1492.57,683.45 1493.13,683.45 1493.69,683.45 1494.25,683.45 1494.81,683.45 1495.37,683.45 1495.93,683.45 1496.49,683.45 1497.05,683.45 1497.61,683.45 1498.16,683.45 1498.72,683.45 1499.28,683.45 1499.84,683.45 1500.4,683.45 1500.96,683.45 1501.52,683.45 1502.08,683.45 1502.64,683.45 1503.2,683.45 1503.76,683.45 1504.32,683.45 1504.88,683.45 1505.44,683.45 1505.99,683.45 1506.55,683.45 1507.11,683.45 1507.67,683.45 1508.23,683.45 1508.79,683.45 1509.35,683.45 1509.91,683.45 1510.47,683.45 1511.03,683.45 1511.59,683.45 1512.15,683.45 1512.71,683.45 1513.26,683.45 1513.82,683.45 1514.38,683.45 1514.94,683.45 1515.5,683.45 1516.06,683.45 1516.62,683.45 1517.18,683.45 1517.74,683.45 1518.3,683.45 1518.86,683.45 1519.42,683.45 1519.98,683.45 1520.53,683.45 1521.09,683.45 1521.65,683.45 1522.21,683.45 1522.77,683.45 1523.33,683.45 1523.89,683.45 1524.45,683.45 1525.01,683.45 1525.57,683.45 1526.13,683.45 1526.69,683.45 1527.25,683.45 1527.81,683.45 1528.36,683.45 1528.92,683.45 1529.48,683.45 1530.04,683.45 1530.6,683.45 1531.16,683.45 1531.72,683.45 1532.28,683.45 1532.84,683.45 1533.4,683.45 1533.96,683.45 1534.52,683.45 1535.08,683.45 1535.63,683.45 1536.19,683.45 1536.75,683.45 1537.31,683.45 1537.87,683.45 1538.43,683.45 1538.99,683.45 1539.55,683.45 1540.11,683.45 1540.67,683.45 1541.23,683.45 1541.79,683.45 1542.35,683.45 1542.9,683.45 1543.46,683.45 1544.02,683.45 1544.58,683.45 1545.14,683.45 1545.7,683.45 1546.26,683.45 1546.82,683.45 1547.38,683.45 1547.94,683.45 1548.5,683.45 1549.06,683.45 1549.62,683.45 1550.18,683.45 1550.73,683.45 1551.29,683.45 1551.85,683.45 1552.41,683.45 1552.97,683.45 1553.53,683.45 1554.09,683.45 1554.65,683.45 1555.21,683.45 1555.77,683.45 1556.33,683.45 1556.89,683.45 1557.45,683.45 1558,683.45 1558.56,683.45 1559.12,683.45 1559.68,683.45 1560.24,683.45 1560.8,683.45 1561.36,683.45 1561.92,683.45 1562.48,683.45 1563.04,683.45 1563.6,683.45 1564.16,683.45 1564.72,683.45 1565.28,683.45 1565.83,683.45 1566.39,683.45 1566.95,683.45 1567.51,683.45 1568.07,683.45 1568.63,683.45 1569.19,683.45 1569.75,683.45 1570.31,683.45 1570.87,683.45 1571.43,683.45 1571.99,683.45 1572.55,683.45 1573.1,683.45 1573.66,683.45 1574.22,683.45 1574.78,683.45 1575.34,683.45 1575.9,683.45 1576.46,683.45 1577.02,683.45 1577.58,683.45 1578.14,683.45 1578.7,683.45 1579.26,683.45 1579.82,683.45 1580.37,683.45 1580.93,683.45 1581.49,683.45 1582.05,683.45 1582.61,683.45 1583.17,683.45 1583.73,683.45 1584.29,683.45 1584.85,683.45 1585.41,683.45 1585.97,683.45 1586.53,683.45 1587.09,683.45 1587.65,683.45 1588.2,683.45 1588.76,683.45 1589.32,683.45 1589.88,683.45 1590.44,683.45 1591,683.45 1591.56,683.45 1592.12,683.45 1592.68,683.45 1593.24,683.45 1593.8,683.45 1594.36,683.45 1594.92,683.45 1595.47,683.45 1596.03,683.45 1596.59,683.45 1597.15,683.45 1597.71,683.45 1598.27,683.45 1598.83,683.45 1599.39,683.45 1599.95,683.45 1600.51,683.45 1601.07,683.45 1601.63,683.45 1602.19,683.45 1602.74,683.45 1603.3,683.45 1603.86,683.45 1604.42,683.45 1604.98,683.45 1605.54,683.45 1606.1,683.45 1606.66,683.45 1607.22,683.45 1607.78,683.45 1608.34,683.45 1608.9,683.45 1609.46,683.45 1610.02,683.45 1610.57,683.45 1611.13,683.45 1611.69,683.45 1612.25,683.45 1612.81,683.45 1613.37,683.45 1613.93,683.45 1614.49,683.45 1615.05,683.45 1615.61,683.45 1616.17,683.45 1616.73,683.45 1617.29,683.45 1617.84,683.45 1618.4,683.45 1618.96,683.45 1619.52,683.45 1620.08,683.45 1620.64,683.45 1621.2,683.45 1621.76,683.45 1622.32,683.45 1622.88,683.45 1623.44,683.45 1624,683.45 1624.56,683.45 1625.11,683.45 1625.67,683.45 1626.23,683.45 1626.79,683.45 1627.35,683.45 1627.91,683.45 1628.47,683.45 1629.03,683.45 1629.59,683.45 1630.15,683.45 1630.71,683.45 1631.27,683.45 1631.83,683.45 1632.39,683.45 1632.94,683.45 1633.5,683.45 1634.06,683.45 1634.62,683.45 1635.18,683.45 1635.74,683.45 1636.3,683.45 1636.86,683.45 1637.42,683.45 1637.98,683.45 1638.54,683.45 1639.1,683.45 1639.66,683.45 1640.21,683.45 1640.77,683.45 1641.33,683.45 1641.89,683.45 1642.45,683.45 1643.01,683.45 1643.57,683.45 1644.13,683.45 1644.69,683.45 1645.25,683.45 1645.81,683.45 1646.37,683.45 1646.93,683.45 1647.48,683.45 1648.04,683.45 1648.6,683.45 1649.16,683.45 1649.72,683.45 1650.28,683.45 1650.84,683.45 1651.4,683.45 1651.96,683.45 1652.52,683.45 1653.08,683.45 1653.64,683.45 1654.2,683.45 1654.76,683.45 1655.31,683.45 1655.87,683.45 1656.43,683.45 1656.99,683.45 1657.55,683.45 1658.11,683.45 1658.67,683.45 1659.23,683.45 1659.79,683.45 1660.35,683.45 1660.91,683.45 1661.47,683.45 1662.03,683.45 1662.58,683.45 1663.14,683.45 1663.7,683.45 1664.26,683.45 1664.82,683.45 1665.38,683.45 1665.94,683.45 1666.5,683.45 1667.06,683.45 1667.62,683.45 1668.18,683.45 1668.74,683.45 1669.3,683.45 1669.85,683.45 1670.41,683.45 1670.97,683.45 1671.53,683.45 1672.09,683.45 1672.65,683.45 1673.21,683.45 1673.77,683.45 1674.33,683.45 1674.89,683.45 1675.45,683.45 1676.01,683.45 1676.57,683.45 1677.13,683.45 1677.68,683.45 1678.24,683.45 1678.8,683.45 1679.36,683.45 1679.92,683.45 1680.48,683.45 1681.04,683.45 1681.6,683.45 1682.16,683.45 1682.72,683.45 1683.28,683.45 1683.84,683.45 1684.4,683.45 1684.95,683.45 1685.51,683.45 1686.07,683.45 1686.63,683.45 1687.19,683.45 1687.75,683.45 1688.31,683.45 1688.87,683.45 1689.43,683.45 1689.99,683.45 1690.55,683.45 1691.11,683.45 1691.67,683.45 1692.23,683.45 1692.78,683.45 1693.34,683.45 1693.9,683.45 1694.46,683.45 1695.02,683.45 1695.58,683.45 1696.14,683.45 1696.7,683.45 1697.26,683.45 1697.82,683.45 1698.38,683.45 1698.94,683.45 1699.5,683.45 1700.05,683.45 1700.61,683.45 1701.17,683.45 1701.73,683.45 1702.29,683.45 1702.85,683.45 1703.41,683.45 1703.97,683.45 1704.53,683.45 1705.09,683.45 1705.65,683.45 1706.21,683.45 1706.77,683.45 1707.32,683.45 1707.88,683.45 1708.44,683.45 1709,683.45 1709.56,683.45 1710.12,683.45 1710.68,683.45 1711.24,683.45 1711.8,683.45 1712.36,683.45 1712.92,683.45 1713.48,683.45 1714.04,683.45 1714.6,683.45 1715.15,683.45 1715.71,683.45 1716.27,683.45 1716.83,683.45 1717.39,683.45 1717.95,683.45 1718.51,683.45 1719.07,683.45 1719.63,683.45 1720.19,683.45 1720.75,683.45 1721.31,683.45 1721.87,683.45 1722.42,683.45 1722.98,683.45 1723.54,683.45 1724.1,683.45 1724.66,683.45 1725.22,683.45 1725.78,683.45 1726.34,683.45 1726.9,683.45 1727.46,683.45 1728.02,683.45 1728.58,683.45 1729.14,683.45 1729.69,683.45 1730.25,683.45 1730.81,683.45 1731.37,683.45 1731.93,683.45 1732.49,683.45 1733.05,683.45 1733.61,683.45 1734.17,683.45 1734.73,683.45 1735.29,683.45 1735.85,683.45 1736.41,683.45 1736.97,683.45 1737.52,683.45 1738.08,683.45 1738.64,683.45 1739.2,683.45 1739.76,683.45 1740.32,683.45 1740.88,683.45 1741.44,683.45 1742,683.45 1742.56,683.45 1743.12,683.45 1743.68,683.45 1744.24,683.45 1744.79,683.45 1745.35,683.45 1745.91,683.45 1746.47,683.45 1747.03,683.45 1747.59,683.45 1748.15,683.45 1748.71,683.45 1749.27,683.45 1749.83,683.45 1750.39,683.45 1750.95,683.45 1751.51,683.45 1752.06,683.45 1752.62,683.45 1753.18,683.45 1753.74,683.45 1754.3,683.45 1754.86,683.45 1755.42,683.45 1755.98,683.45 1756.54,683.45 1757.1,683.45 1757.66,683.45 1758.22,683.45 1758.78,683.45 1759.34,683.45 1759.89,683.45 1760.45,683.45 1761.01,683.45 1761.57,683.45 1762.13,683.45 1762.69,683.45 1763.25,683.45 1763.81,683.45 1764.37,683.45 1764.93,683.45 1765.49,683.45 1766.05,683.45 1766.61,683.45 1767.16,683.45 1767.72,683.45 1768.28,683.45 1768.84,683.45 1769.4,683.45 1769.96,683.45 1770.52,683.45 1771.08,683.45 1771.64,683.45 1772.2,683.45 1772.76,683.45 1773.32,683.45 1773.88,683.45 1774.43,683.45 1774.99,683.45 1775.55,683.45 1776.11,683.45 1776.67,683.45 1777.23,683.45 1777.79,683.45 1778.35,683.45 1778.91,683.45 1779.47,683.45 1780.03,683.45 1780.59,683.45 1781.15,683.45 1781.71,683.45 1782.26,683.45 1782.82,683.45 1783.38,683.45 1783.94,683.45 1784.5,683.45 1785.06,683.45 1785.62,683.45 1786.18,683.45 1786.74,683.45 1787.3,683.45 1787.86,683.45 1788.42,683.45 1788.98,683.45 1789.53,683.45 1790.09,683.45 1790.65,683.45 1791.21,683.45 1791.77,683.45 1792.33,683.45 1792.89,683.45 1793.45,683.45 1794.01,683.45 1794.57,683.45 1795.13,683.45 1795.69,683.45 1796.25,683.45 1796.8,683.45 1797.36,683.45 1797.92,683.45 1798.48,683.45 1799.04,683.45 1799.6,683.45 1800.16,683.45 1800.72,683.45 1801.28,683.45 1801.84,683.45 1802.4,683.45 1802.96,683.45 1803.52,683.45 1804.08,683.45 1804.63,683.45 1805.19,683.45 1805.75,683.45 1806.31,683.45 1806.87,683.45 1807.43,683.45 1807.99,683.45 1808.55,683.45 1809.11,683.45 1809.67,683.45 1810.23,683.45 1810.79,683.45 1811.35,683.45 1811.9,683.45 1812.46,683.45 1813.02,683.45 1813.58,683.45 1814.14,683.45 1814.7,683.45 1815.26,683.45 1815.82,683.45 1816.38,683.45 1816.94,683.45 1817.5,683.45 1818.06,683.45 1818.62,683.45 1819.18,683.45 1819.73,683.45 1820.29,683.45 1820.85,683.45 1821.41,683.45 1821.97,683.45 1822.53,683.45 1823.09,683.45 1823.65,683.45 1824.21,683.45 1824.77,683.45 1825.33,683.45 1825.89,683.45 1826.45,683.45 1827,683.45 1827.56,683.45 1828.12,683.45 1828.68,683.45 1829.24,683.45 1829.8,683.45 1830.36,683.45 1830.92,683.45 1831.48,683.45 1832.04,683.45 1832.6,683.45 1833.16,683.45 1833.72,683.45 1834.27,683.45 1834.83,683.45 1835.39,683.45 1835.95,683.45 1836.51,683.45 1837.07,683.45 1837.63,683.45 1838.19,683.45 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.0346050719701285 ± 0.02667801216448904\nProjected Energy: -4.01440517022608 ± (0.0045831242411056294, 0.0046820151318964776)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.476426</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3546e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.3595e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.347e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.172e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.865e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.165e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321626\n -3.3631242916133512\n -0.759019192277087\n  0.13584182219621077\n  0.15789998694608798\n  0.8767114411781325\n  1.5305929970973375\n  1.5835732611867357\n  3.0728703303258706\n  3.12567265395184\n  4.8621072215621695\n  6.260694850380594\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector\n3-element Vector{Float64}:\n -0.5773502691896257\n -0.5773502691896255\n -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => -0.57735\n  fs\"|0 1 0⟩\" => -0.57735\n  fs\"|1 0 0⟩\" => -0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.1. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
