var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.20976904372768218 ± 0.0012068955335117395\n   G2(1) = 0.9169637559768092 ± 0.0007062587304852018\n   G2(2) = 0.9815675100468826 ± 0.00041063443100243654\n   G2(3) = 0.9931684242249335 ± 0.0007752322071834669\n   G2(4) = 0.9815675100468826 ± 0.00041063443100243654\n   G2(5) = 0.9169637559768092 ± 0.0007062587304852018\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.010643399995027 ± 0.10423867107164204\n   Replica 2: -4.00491141812106 ± 0.12133003001009615\n   Replica 3: -3.984905655979538 ± 0.14836088902412253\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip770\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip770)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip771\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip770)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip772\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip772)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip772)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip772)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip772)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip772)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip772)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.33 2211.02,1003.33 \"/>\n<polyline clip-path=\"url(#clip772)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.824 2211.02,745.824 \"/>\n<polyline clip-path=\"url(#clip772)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.321 2211.02,488.321 \"/>\n<polyline clip-path=\"url(#clip772)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.819 2211.02,230.819 \"/>\n<polyline clip-path=\"url(#clip770)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip770)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip770)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip770)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip770)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip770)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip770)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip770)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip770)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.33 423.181,1003.33 \"/>\n<polyline clip-path=\"url(#clip770)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.824 423.181,745.824 \"/>\n<polyline clip-path=\"url(#clip770)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.321 423.181,488.321 \"/>\n<polyline clip-path=\"url(#clip770)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.819 423.181,230.819 \"/>\n<path clip-path=\"url(#clip770)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.19 Q349.094 1253.73 349.094 1260.86 Q349.094 1267.97 350.899 1271.53 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.53 Q363.608 1267.97 363.608 1260.86 Q363.608 1253.73 361.779 1250.19 Q359.973 1246.63 356.339 1246.63 M356.339 1242.92 Q362.149 1242.92 365.205 1247.53 Q368.284 1252.11 368.284 1260.86 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.86 Q344.395 1252.11 347.45 1247.53 Q350.529 1242.92 356.339 1242.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M290.043 1016.67 L306.363 1016.67 L306.363 1020.61 L284.418 1020.61 L284.418 1016.67 Q287.08 1013.92 291.664 1009.29 Q296.27 1004.63 297.451 1003.29 Q299.696 1000.77 300.576 999.032 Q301.478 997.273 301.478 995.583 Q301.478 992.829 299.534 991.093 Q297.613 989.356 294.511 989.356 Q292.312 989.356 289.858 990.12 Q287.427 990.884 284.65 992.435 L284.65 987.713 Q287.474 986.579 289.927 986 Q292.381 985.421 294.418 985.421 Q299.789 985.421 302.983 988.106 Q306.177 990.792 306.177 995.282 Q306.177 997.412 305.367 999.333 Q304.58 1001.23 302.474 1003.82 Q301.895 1004.5 298.793 1007.71 Q295.691 1010.91 290.043 1016.67 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M316.224 986.046 L334.58 986.046 L334.58 989.981 L320.506 989.981 L320.506 998.454 Q321.524 998.106 322.543 997.944 Q323.562 997.759 324.58 997.759 Q330.367 997.759 333.747 1000.93 Q337.126 1004.1 337.126 1009.52 Q337.126 1015.1 333.654 1018.2 Q330.182 1021.28 323.862 1021.28 Q321.687 1021.28 319.418 1020.91 Q317.173 1020.54 314.765 1019.8 L314.765 1015.1 Q316.849 1016.23 319.071 1016.79 Q321.293 1017.34 323.77 1017.34 Q327.774 1017.34 330.112 1015.24 Q332.45 1013.13 332.45 1009.52 Q332.45 1005.91 330.112 1003.8 Q327.774 1001.69 323.77 1001.69 Q321.895 1001.69 320.02 1002.11 Q318.168 1002.53 316.224 1003.41 L316.224 986.046 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M356.339 989.125 Q352.728 989.125 350.899 992.69 Q349.094 996.231 349.094 1003.36 Q349.094 1010.47 350.899 1014.03 Q352.728 1017.57 356.339 1017.57 Q359.973 1017.57 361.779 1014.03 Q363.608 1010.47 363.608 1003.36 Q363.608 996.231 361.779 992.69 Q359.973 989.125 356.339 989.125 M356.339 985.421 Q362.149 985.421 365.205 990.028 Q368.284 994.611 368.284 1003.36 Q368.284 1012.09 365.205 1016.69 Q362.149 1021.28 356.339 1021.28 Q350.529 1021.28 347.45 1016.69 Q344.395 1012.09 344.395 1003.36 Q344.395 994.611 347.45 990.028 Q350.529 985.421 356.339 985.421 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M286.062 728.544 L304.418 728.544 L304.418 732.479 L290.344 732.479 L290.344 740.951 Q291.363 740.604 292.381 740.442 Q293.4 740.257 294.418 740.257 Q300.205 740.257 303.585 743.428 Q306.964 746.599 306.964 752.016 Q306.964 757.595 303.492 760.696 Q300.02 763.775 293.701 763.775 Q291.525 763.775 289.256 763.405 Q287.011 763.034 284.603 762.294 L284.603 757.595 Q286.687 758.729 288.909 759.284 Q291.131 759.84 293.608 759.84 Q297.613 759.84 299.951 757.733 Q302.288 755.627 302.288 752.016 Q302.288 748.405 299.951 746.298 Q297.613 744.192 293.608 744.192 Q291.733 744.192 289.858 744.609 Q288.006 745.025 286.062 745.905 L286.062 728.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M326.177 731.623 Q322.566 731.623 320.737 735.187 Q318.932 738.729 318.932 745.859 Q318.932 752.965 320.737 756.53 Q322.566 760.071 326.177 760.071 Q329.811 760.071 331.617 756.53 Q333.446 752.965 333.446 745.859 Q333.446 738.729 331.617 735.187 Q329.811 731.623 326.177 731.623 M326.177 727.919 Q331.987 727.919 335.043 732.525 Q338.122 737.109 338.122 745.859 Q338.122 754.585 335.043 759.192 Q331.987 763.775 326.177 763.775 Q320.367 763.775 317.288 759.192 Q314.233 754.585 314.233 745.859 Q314.233 737.109 317.288 732.525 Q320.367 727.919 326.177 727.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M356.339 731.623 Q352.728 731.623 350.899 735.187 Q349.094 738.729 349.094 745.859 Q349.094 752.965 350.899 756.53 Q352.728 760.071 356.339 760.071 Q359.973 760.071 361.779 756.53 Q363.608 752.965 363.608 745.859 Q363.608 738.729 361.779 735.187 Q359.973 731.623 356.339 731.623 M356.339 727.919 Q362.149 727.919 365.205 732.525 Q368.284 737.109 368.284 745.859 Q368.284 754.585 365.205 759.192 Q362.149 763.775 356.339 763.775 Q350.529 763.775 347.45 759.192 Q344.395 754.585 344.395 745.859 Q344.395 737.109 347.45 732.525 Q350.529 727.919 356.339 727.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M284.835 471.041 L307.057 471.041 L307.057 473.032 L294.511 505.601 L289.627 505.601 L301.432 474.977 L284.835 474.977 L284.835 471.041 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M316.224 471.041 L334.58 471.041 L334.58 474.977 L320.506 474.977 L320.506 483.449 Q321.524 483.102 322.543 482.94 Q323.562 482.754 324.58 482.754 Q330.367 482.754 333.747 485.926 Q337.126 489.097 337.126 494.514 Q337.126 500.092 333.654 503.194 Q330.182 506.273 323.862 506.273 Q321.687 506.273 319.418 505.902 Q317.173 505.532 314.765 504.791 L314.765 500.092 Q316.849 501.226 319.071 501.782 Q321.293 502.338 323.77 502.338 Q327.774 502.338 330.112 500.231 Q332.45 498.125 332.45 494.514 Q332.45 490.902 330.112 488.796 Q327.774 486.689 323.77 486.689 Q321.895 486.689 320.02 487.106 Q318.168 487.523 316.224 488.402 L316.224 471.041 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M356.339 474.12 Q352.728 474.12 350.899 477.685 Q349.094 481.227 349.094 488.356 Q349.094 495.463 350.899 499.027 Q352.728 502.569 356.339 502.569 Q359.973 502.569 361.779 499.027 Q363.608 495.463 363.608 488.356 Q363.608 481.227 361.779 477.685 Q359.973 474.12 356.339 474.12 M356.339 470.416 Q362.149 470.416 365.205 475.023 Q368.284 479.606 368.284 488.356 Q368.284 497.083 365.205 501.689 Q362.149 506.273 356.339 506.273 Q350.529 506.273 347.45 501.689 Q344.395 497.083 344.395 488.356 Q344.395 479.606 347.45 475.023 Q350.529 470.416 356.339 470.416 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M256.664 244.164 L264.303 244.164 L264.303 217.798 L255.992 219.465 L255.992 215.206 L264.256 213.539 L268.932 213.539 L268.932 244.164 L276.571 244.164 L276.571 248.099 L256.664 248.099 L256.664 244.164 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M296.015 216.618 Q292.404 216.618 290.576 220.182 Q288.77 223.724 288.77 230.854 Q288.77 237.96 290.576 241.525 Q292.404 245.067 296.015 245.067 Q299.65 245.067 301.455 241.525 Q303.284 237.96 303.284 230.854 Q303.284 223.724 301.455 220.182 Q299.65 216.618 296.015 216.618 M296.015 212.914 Q301.826 212.914 304.881 217.52 Q307.96 222.104 307.96 230.854 Q307.96 239.581 304.881 244.187 Q301.826 248.77 296.015 248.77 Q290.205 248.77 287.127 244.187 Q284.071 239.581 284.071 230.854 Q284.071 222.104 287.127 217.52 Q290.205 212.914 296.015 212.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M326.177 216.618 Q322.566 216.618 320.737 220.182 Q318.932 223.724 318.932 230.854 Q318.932 237.96 320.737 241.525 Q322.566 245.067 326.177 245.067 Q329.811 245.067 331.617 241.525 Q333.446 237.96 333.446 230.854 Q333.446 223.724 331.617 220.182 Q329.811 216.618 326.177 216.618 M326.177 212.914 Q331.987 212.914 335.043 217.52 Q338.122 222.104 338.122 230.854 Q338.122 239.581 335.043 244.187 Q331.987 248.77 326.177 248.77 Q320.367 248.77 317.288 244.187 Q314.233 239.581 314.233 230.854 Q314.233 222.104 317.288 217.52 Q320.367 212.914 326.177 212.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M356.339 216.618 Q352.728 216.618 350.899 220.182 Q349.094 223.724 349.094 230.854 Q349.094 237.96 350.899 241.525 Q352.728 245.067 356.339 245.067 Q359.973 245.067 361.779 241.525 Q363.608 237.96 363.608 230.854 Q363.608 223.724 361.779 220.182 Q359.973 216.618 356.339 216.618 M356.339 212.914 Q362.149 212.914 365.205 217.52 Q368.284 222.104 368.284 230.854 Q368.284 239.581 365.205 244.187 Q362.149 248.77 356.339 248.77 Q350.529 248.77 347.45 244.187 Q344.395 239.581 344.395 230.854 Q344.395 222.104 347.45 217.52 Q350.529 212.914 356.339 212.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip772)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.819 4017.76,230.819 \"/>\n<polyline clip-path=\"url(#clip772)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1246.4 461.101,1245.74 461.669,1244.98 462.238,1244.16 462.806,1243.24 463.375,1242.25 463.943,1241.16 464.511,1239.97 465.08,1238.68 465.648,1237.28 466.216,1235.77 466.785,1234.13 467.353,1230.31 467.921,1228.35 468.49,1226.27 469.058,1224.04 469.626,1221.68 470.195,1218.1 470.763,1215.38 471.331,1212.46 471.9,1209.37 472.468,1205.09 473.036,1199.53 473.605,1195.75 474.173,1191.76 474.741,1187.57 475.31,1182.13 475.878,1177.48 476.446,1172.59 477.015,1167.5 477.583,1162.14 478.152,1154.47 478.72,1147.72 479.288,1140.79 479.857,1133.57 480.425,1127.06 480.993,1118.25 481.562,1109.31 482.13,1099.21 482.698,1091.92 483.267,1083.4 483.835,1075.87 484.403,1067.98 484.972,1058.92 485.54,1050.54 486.108,1042.02 486.677,1032.42 487.245,1023.63 487.813,1013.66 488.382,1003.53 488.95,994.353 489.518,981.937 490.087,971.527 490.655,962.095 491.224,951.641 491.792,941.007 492.36,930.378 492.929,917.621 493.497,906.97 494.065,896.343 494.634,886.554 495.202,875.782 495.77,865.1 496.339,853.296 496.907,840.594 497.475,829.908 498.044,819.376 498.612,808.857 499.18,794.186 499.749,783.982 500.317,771.567 500.885,761.421 501.454,751.362 502.022,740.181 502.59,730.23 503.159,716.206 503.727,706.616 504.295,697.28 504.864,686.789 505.432,678.666 506.001,670.459 506.569,661.306 507.137,650.112 507.706,641.21 508.274,632.502 508.842,622.93 509.411,614.473 509.979,602.97 510.547,594.961 511.116,586.206 511.684,578.344 512.252,568.489 512.821,561.963 513.389,554.645 513.957,548.319 514.526,542.201 515.094,536.103 515.662,529.051 516.231,520.201 516.799,513.391 517.367,506.72 517.936,498.305 518.504,492.087 519.072,485.892 519.641,480.88 520.209,477.11 520.778,471.068 521.346,466.386 521.914,461.863 522.483,454.091 523.051,449.583 523.619,444.049 524.188,438.761 524.756,435.786 525.324,429.707 525.893,424.851 526.461,420.959 527.029,414.913 527.598,411.335 528.166,406.924 528.734,402.593 529.303,399.376 529.871,393.947 530.439,391.02 531.008,385.831 531.576,382.834 532.144,381.163 532.713,378.15 533.281,374.525 533.85,370.805 534.418,365.869 534.986,360.264 535.555,357.937 536.123,354.591 536.691,351.29 537.26,348.955 537.828,345.174 538.396,341.108 538.965,339.462 539.533,339.071 540.101,335.034 540.67,333.202 541.238,331.466 541.806,329.837 542.375,328.376 542.943,326.623 543.511,325.904 544.08,325.056 544.648,323.325 545.216,321.551 545.785,320.72 546.353,318.019 546.921,315.246 547.49,312.799 548.058,310.501 548.627,306.983 549.195,302.48 549.763,300.413 550.332,297.59 550.9,294.804 551.468,294.182 552.037,293.673 552.605,292.667 553.173,291.981 553.742,291.265 554.31,288.616 554.878,286.898 555.447,285.421 556.015,281.717 556.583,281.583 557.152,280.213 557.72,280.106 558.288,278.652 558.857,278.412 559.425,276.875 559.993,278.385 560.562,275.923 561.13,276.738 561.698,275.521 562.267,270.925 562.835,270.782 563.404,270.574 563.972,269.303 564.54,268.289 565.109,266.123 565.677,269.384 566.245,268.139 566.814,267.892 567.382,267.912 567.95,264.736 568.519,263.539 569.087,264.471 569.655,265.411 570.224,263.149 570.792,262.29 571.36,262.242 571.929,262.131 572.497,260.088 573.065,259.019 573.634,257.092 574.202,258.229 574.77,257.249 575.339,256.456 575.907,256.625 576.476,254.753 577.044,255.968 577.612,257.071 578.181,257.142 578.749,257.998 579.317,257.807 579.886,253.655 580.454,253.748 581.022,253.653 581.591,253.594 582.159,254.699 582.727,255.88 583.296,253.78 583.864,252.662 584.432,252.68 585.001,252.591 585.569,251.575 586.137,248.514 586.706,249.872 587.274,249.931 587.842,250.159 588.411,250.057 588.979,250.273 589.547,251.463 590.116,250.328 590.684,248.359 591.253,248.345 591.821,249.504 592.389,246.639 592.958,248.103 593.526,247.299 594.094,245.401 594.663,246.733 595.231,247.131 595.799,246.446 596.368,246.509 596.936,247.394 597.504,247.541 598.073,248.72 598.641,248.516 599.209,248.581 599.778,249.759 600.346,250.473 600.914,250.105 601.483,248.892 602.051,250.892 602.619,248.505 603.188,245.168 603.756,244.188 604.325,243.245 604.893,244.603 605.461,243.767 606.03,242.943 606.598,243.185 607.166,242.417 607.735,241.729 608.303,239.858 608.871,239.247 609.44,238.654 610.008,242.191 610.576,242.233 611.145,243.397 611.713,239.376 612.281,239.786 612.85,239.221 613.418,239.627 613.986,239.052 614.555,240.557 615.123,239.776 615.691,239.172 616.26,238.738 616.828,240.191 617.396,239.461 617.965,238.768 618.533,237.012 619.102,235.471 619.67,238.151 620.238,239.443 620.807,238.774 621.375,241.331 621.943,241.78 622.512,239.656 623.08,238.847 623.648,239.237 624.217,240.537 624.785,238.728 625.353,237.825 625.922,237.113 626.49,236.554 627.058,237.275 627.627,238.822 628.195,239.002 628.763,239.305 629.332,239.424 629.9,241.716 630.468,240.659 631.037,239.949 631.605,237.908 632.173,240.226 632.742,239.289 633.31,237.403 633.879,238.765 634.447,238.951 635.015,238.108 635.584,239.183 636.152,239.448 636.72,239.59 637.289,239.605 637.857,239.592 638.425,239.716 638.994,237.57 639.562,240.824 640.13,243.801 640.699,241.319 641.267,238.208 641.835,238.298 642.404,237.592 642.972,235.787 643.54,235.849 644.109,238.206 644.677,238.284 645.245,236.45 645.814,234.737 646.382,234.051 646.951,234.658 647.519,234.041 648.087,234.641 648.656,234.166 649.224,234.744 649.792,237.154 650.361,237.341 650.929,234.594 651.497,234.752 652.066,236.976 652.634,235.902 653.202,234.211 653.771,233.646 654.339,236.29 654.907,236.469 655.476,234.717 656.044,235.055 656.612,234.439 657.181,235.829 657.749,236.36 658.317,238.616 658.886,239.759 659.454,241.518 660.022,243.531 660.591,244.3 661.159,242.808 661.728,243.612 662.296,243.207 662.864,245.096 663.433,244.624 664.001,240.28 664.569,240.294 665.138,241.093 665.706,240.773 666.274,243.579 666.843,243.078 667.411,242.585 667.979,243.107 668.548,241.506 669.116,240.188 669.684,240.952 670.253,237.477 670.821,238.71 671.389,237.381 671.958,240.301 672.526,241.18 673.094,241.819 673.663,241.229 674.231,237.438 674.799,236.113 675.368,235.155 675.936,235.147 676.505,236.217 677.073,236.175 677.641,233.228 678.21,232.395 678.778,234.619 679.346,235.702 679.915,234.716 680.483,234.785 681.051,235.885 681.62,232.762 682.188,227.853 682.756,227.299 683.325,228.108 683.893,228.665 684.461,227.1 685.03,228.509 685.598,228.886 686.166,231.289 686.735,232.621 687.303,231.803 687.871,231.344 688.44,231.852 689.008,233.965 689.577,231.152 690.145,231.502 690.713,231.929 691.282,231.367 691.85,231.644 692.418,228.866 692.987,230.361 693.555,227.833 694.123,227.604 694.692,229.121 695.26,229.562 695.828,231.031 696.397,231.328 696.965,229.793 697.533,229.281 698.102,228.561 698.67,229.039 699.238,228.693 699.807,229.295 700.375,230.899 700.943,228.559 701.512,228.968 702.08,228.535 702.648,229.071 703.217,231.817 703.785,233.409 704.354,233.649 704.922,236.017 705.49,236.889 706.059,236.855 706.627,237.679 707.195,234.612 707.764,237.836 708.332,237.871 708.9,240.802 709.469,240.341 710.037,240.11 710.605,239.902 711.174,240.64 711.742,238.161 712.31,239.103 712.879,237.823 713.447,237.692 714.015,237.532 714.584,235.209 715.152,235.356 715.72,236.202 716.289,235.975 716.857,235.848 717.425,235.821 717.994,234.518 718.562,232.577 719.131,235.938 719.699,235.831 720.267,236.653 720.836,236.488 721.404,237.329 721.972,237.203 722.541,235.839 723.109,234.758 723.677,234.834 724.246,234.932 724.814,236.079 725.382,235.992 725.951,236.264 726.519,235.081 727.087,232.919 727.656,231.852 728.224,232.002 728.792,233.123 729.361,235.317 729.929,235.182 730.497,237.132 731.066,235.702 731.634,232.423 732.203,232.359 732.771,232.543 733.339,231.709 733.908,231.045 734.476,232.392 735.044,232.288 735.613,232.339 736.181,232.65 736.749,231.586 737.318,229.548 737.886,229.828 738.454,228.998 739.023,228.126 739.591,228.37 740.159,227.628 740.728,228.043 741.296,227.377 741.864,228.655 742.433,229.214 743.001,227.597 743.569,228.15 744.138,228.609 744.706,226.783 745.274,229.163 745.843,229.521 746.411,229.815 746.98,230.064 747.548,228.534 748.116,231.036 748.685,233.422 749.253,235.412 749.821,235.264 750.39,234.043 750.958,235.163 751.526,235.08 752.095,236.175 752.663,237.082 753.231,236.84 753.8,238.645 754.368,240.483 754.936,238.117 755.505,236.689 756.073,235.58 756.641,233.491 757.21,230.22 757.778,232.543 758.346,231.677 758.915,232.866 759.483,231.795 760.052,235.014 760.62,232.769 761.188,232.731 761.757,231.993 762.325,233.003 762.893,232.897 763.462,232.992 764.03,235.086 764.598,234.852 765.167,234.76 765.735,231.463 766.303,231.572 766.872,230.738 767.44,230.928 768.008,229.986 768.577,230.124 769.145,232.325 769.713,229.183 770.282,230.59 770.85,230.833 771.418,231.13 771.987,233.533 772.555,234.707 773.123,232.681 773.692,231.724 774.26,231.818 774.829,234.972 775.397,234.631 775.965,235.553 776.534,236.398 777.102,237.042 777.67,236.709 778.239,239.355 778.807,238.762 779.375,236.381 779.944,236.28 780.512,235.714 781.08,235.496 781.649,234.257 782.217,234.273 782.785,233.137 783.354,233.861 783.922,234.954 784.49,234.83 785.059,235.676 785.627,235.713 786.195,236.412 786.764,236.013 787.332,235.834 787.9,235.509 788.469,234.226 789.037,233.074 789.606,230.929 790.174,230.091 790.742,229.254 791.311,229.585 791.879,231.714 792.447,232.387 793.016,233.511 793.584,235.327 794.152,235.097 794.721,235.994 795.289,235.517 795.857,232.234 796.426,230.059 796.994,231.111 797.562,231.008 798.131,230.897 798.699,231.833 799.267,231.821 799.836,230.881 800.404,229.77 800.972,229.744 801.541,230.735 802.109,231.735 802.678,231.58 803.246,231.47 803.814,231.318 804.383,230.138 804.951,230.21 805.519,230.249 806.088,231.295 806.656,232.415 807.224,232.39 807.793,232.306 808.361,233.339 808.929,234.257 809.498,233.93 810.066,232.821 810.634,231.546 811.203,230.53 811.771,231.744 812.339,230.642 812.908,232.808 813.476,230.559 814.044,231.494 814.613,232.644 815.181,230.456 815.749,231.25 816.318,230.331 816.886,229.552 817.455,228.735 818.023,229.884 818.591,230.04 819.16,229.287 819.728,230.382 820.296,230.185 820.865,228.298 821.433,227.395 822.001,228.642 822.57,225.874 823.138,226.376 823.706,225.673 824.275,226.022 824.843,227.332 825.411,227.707 825.98,225.191 826.548,225.614 827.116,224.19 827.685,226.731 828.253,225.467 828.821,225.021 829.39,224.379 829.958,225.918 830.526,226.51 831.095,227.01 831.663,227.46 832.232,226.754 832.8,226.283 833.368,226.968 833.937,227.49 834.505,227.99 835.073,230.53 835.642,231.613 836.21,231.685 836.778,230.691 837.347,230.698 837.915,230.841 838.483,231.061 839.052,230.327 839.62,229.542 840.188,230.735 840.757,227.774 841.325,229.204 841.893,229.557 842.462,228.962 843.03,228.37 843.598,227.744 844.167,229.153 844.735,229.46 845.304,229.997 845.872,230.294 846.44,231.642 847.009,231.962 847.577,233.264 848.145,233.343 848.714,234.673 849.282,232.552 849.85,231.896 850.419,234.124 850.987,233.181 851.555,234.238 852.124,234.207 852.692,237.211 853.26,237.047 853.829,237.776 854.397,238.391 854.965,237.011 855.534,236.826 856.102,236.649 856.67,234.287 857.239,234.093 857.807,232.18 858.375,232.19 858.944,229.221 859.512,229.536 860.081,228.825 860.649,227.999 861.217,228.295 861.786,227.836 862.354,227.237 862.922,227.796 863.491,228.423 864.059,229.791 864.627,232.042 865.196,232.089 865.764,234.164 866.332,234.133 866.901,232.258 867.469,231.253 868.037,232.362 868.606,230.408 869.174,232.612 869.742,231.608 870.311,231.691 870.879,228.619 871.447,229.747 872.016,231.881 872.584,234.203 873.152,234.249 873.721,234.224 874.289,236.131 874.858,234.893 875.426,233.947 875.994,232.815 876.563,226.49 877.131,226.906 877.699,231.371 878.268,234.751 878.836,234.604 879.404,234.647 879.973,235.426 880.541,236.293 881.109,234.952 881.678,235.807 882.246,234.637 882.814,234.463 883.383,232.17 883.951,232.096 884.519,232.263 885.088,232.974 885.656,232.738 886.224,233.623 886.793,234.389 887.361,234.15 887.93,232.803 888.498,232.728 889.066,232.807 889.635,229.842 890.203,232.951 890.771,231.887 891.34,231.902 891.908,231.939 892.476,231.078 893.045,233.041 893.613,230.836 894.181,232.025 894.75,231.918 895.318,230.957 895.886,233.109 896.455,233.917 897.023,235.88 897.591,235.65 898.16,233.151 898.728,234.234 899.296,235.071 899.865,235.7 900.433,235.416 901.001,236.131 901.57,235.825 902.138,234.513 902.707,233.418 903.275,234.527 903.843,234.345 904.412,234.217 904.98,233.969 905.548,233.708 906.117,234.789 906.685,235.328 907.253,234.086 907.822,238.094 908.39,238.528 908.958,235.775 909.527,235.407 910.095,234.898 910.663,232.353 911.232,235.687 911.8,237.464 912.368,236.938 912.937,234.361 913.505,233.304 914.073,233.144 914.642,234.949 915.21,233.694 915.779,230.421 916.347,228.346 916.915,228.284 917.484,229.355 918.052,228.178 918.62,228.345 919.189,228.762 919.757,230.817 920.325,230.606 920.894,230.635 921.462,231.631 922.03,230.449 922.599,231.368 923.167,231.375 923.735,234.502 924.304,235.172 924.872,236.91 925.44,235.495 926.009,235.015 926.577,235.747 927.145,236.441 927.714,236.072 928.282,238.668 928.85,236.981 929.419,236.483 929.987,236.068 930.556,236.58 931.124,235.874 931.692,233.224 932.261,231.027 932.829,231.704 933.397,228.646 933.966,226.46 934.534,225.735 935.102,227.094 935.671,228.159 936.239,228.442 936.807,226.617 937.376,227.905 937.944,229.997 938.512,228.947 939.081,230.222 939.649,230.195 940.217,229.097 940.786,228.982 941.354,230.961 941.922,231.858 942.491,230.599 943.059,229.596 943.627,228.48 944.196,226.662 944.764,227.027 945.333,230.408 945.901,228.518 946.469,228.394 947.038,228.749 947.606,228.708 948.174,227.614 948.743,228.775 949.311,227.886 949.879,226.004 950.448,227.314 951.016,228.666 951.584,227.88 952.153,227.089 952.721,228.247 953.289,227.18 953.858,226.393 954.426,226.692 954.994,225.758 955.563,227.376 956.131,227.522 956.699,227.617 957.268,227.794 957.836,229.24 958.405,229.496 958.973,228.509 959.541,228.892 960.11,229.19 960.678,229.642 961.246,228.597 961.815,231.758 962.383,231.711 962.951,231.491 963.52,231.676 964.088,230.549 964.656,229.444 965.225,227.591 965.793,225.827 966.361,226.353 966.93,227.681 967.498,227.91 968.066,231.389 968.635,230.423 969.203,230.569 969.771,229.728 970.34,229.936 970.908,230.192 971.476,228.066 972.045,228.119 972.613,228.281 973.182,226.398 973.75,228.813 974.318,227.973 974.887,227.181 975.455,227.534 976.023,227.974 976.592,231.61 977.16,231.568 977.728,232.486 978.297,233.313 978.865,234.135 979.433,233.044 980.002,233.996 980.57,234.786 981.138,234.613 981.707,233.438 982.275,229.994 982.843,231.119 983.412,230.006 983.98,230.076 984.548,230.33 985.117,229.568 985.685,230.705 986.253,233.001 986.822,232.899 987.39,232.771 987.959,231.734 988.527,231.692 989.095,230.472 989.664,229.55 990.232,229.734 990.8,229.023 991.369,229.303 991.937,228.393 992.505,230.7 993.074,230.636 993.642,229.915 994.21,232.129 994.779,233.255 995.347,235.216 995.915,236.11 996.484,236.857 997.052,234.793 997.62,234.596 998.189,234.565 998.757,235.257 999.325,236.144 999.894,234.771 1000.46,233.63 1001.03,233.341 1001.6,232.879 1002.17,233.704 1002.74,234.442 1003.3,234.318 1003.87,233.157 1004.44,231.936 1005.01,234.005 1005.58,236.068 1006.15,236.513 1006.71,237.05 1007.28,237.6 1007.85,236.054 1008.42,237.778 1008.99,236.315 1009.56,235.944 1010.12,235.539 1010.69,234.09 1011.26,235.813 1011.83,235.429 1012.4,235 1012.97,234.728 1013.53,234.433 1014.1,233.092 1014.67,232.611 1015.24,231.352 1015.81,230.096 1016.38,230.821 1016.94,232.836 1017.51,231.459 1018.08,231.164 1018.65,230.056 1019.22,229.054 1019.79,228.97 1020.35,230.179 1020.92,231.012 1021.49,230.771 1022.06,232.711 1022.63,232.552 1023.2,233.483 1023.76,233.153 1024.33,230.751 1024.9,229.678 1025.47,229.943 1026.04,229.99 1026.61,229.872 1027.17,230.815 1027.74,229.406 1028.31,230.38 1028.88,229.241 1029.45,229.279 1030.02,230.384 1030.58,230.53 1031.15,231.449 1031.72,232.18 1032.29,232.062 1032.86,231.953 1033.43,231.877 1033.99,231.67 1034.56,230.723 1035.13,230.828 1035.7,231.732 1036.27,231.591 1036.84,230.378 1037.4,229.184 1037.97,229.193 1038.54,232.373 1039.11,232.434 1039.68,230.166 1040.25,229.275 1040.81,229.176 1041.38,228.958 1041.95,229.257 1042.52,229.263 1043.09,228.177 1043.66,228.278 1044.22,228.386 1044.79,229.46 1045.36,229.706 1045.93,227.65 1046.5,229.783 1047.07,229.71 1047.63,230.761 1048.2,228.5 1048.77,226.413 1049.34,224.686 1049.91,224.972 1050.48,225.078 1051.05,224.365 1051.61,223.776 1052.18,223.2 1052.75,223.761 1053.32,223.246 1053.89,223.678 1054.46,226.072 1055.02,227.453 1055.59,228.925 1056.16,228.987 1056.73,229.259 1057.3,229.441 1057.87,229.221 1058.43,229.232 1059,230.441 1059.57,230.626 1060.14,230.677 1060.71,230.555 1061.28,230.447 1061.84,231.675 1062.41,231.559 1062.98,228.41 1063.55,228.813 1064.12,227.96 1064.69,230.251 1065.25,231.323 1065.82,231.235 1066.39,232.287 1066.96,232.318 1067.53,232.167 1068.1,231.033 1068.66,232.085 1069.23,232.941 1069.8,231.862 1070.37,230.819 1070.94,232.934 1071.51,231.911 1072.07,233.858 1072.64,230.494 1073.21,230.58 1073.78,229.554 1074.35,228.786 1074.92,230.121 1075.48,229.08 1076.05,229.481 1076.62,229.557 1077.19,229.855 1077.76,232.132 1078.33,231.099 1078.89,231.195 1079.46,231.389 1080.03,229.232 1080.6,227.474 1081.17,229.865 1081.74,231.087 1082.3,231.203 1082.87,233.253 1083.44,232.153 1084.01,231.905 1084.58,232.003 1085.15,234.177 1085.71,234.181 1086.28,235.863 1086.85,233.297 1087.42,232.133 1087.99,231.224 1088.56,231.423 1089.12,232.471 1089.69,232.487 1090.26,231.323 1090.83,231.327 1091.4,229.142 1091.97,230.439 1092.53,230.592 1093.1,230.708 1093.67,231.824 1094.24,231.779 1094.81,230.8 1095.38,231.688 1095.94,232.792 1096.51,231.744 1097.08,228.624 1097.65,229.872 1098.22,230.876 1098.79,229.902 1099.35,230.035 1099.92,229.967 1100.49,230.105 1101.06,230.238 1101.63,229.912 1102.2,230.049 1102.76,230.399 1103.33,230.375 1103.9,229.406 1104.47,229.549 1105.04,229.601 1105.61,231.694 1106.17,230.702 1106.74,232.832 1107.31,232.687 1107.88,233.519 1108.45,236.458 1109.02,237.029 1109.58,235.885 1110.15,233.35 1110.72,233.068 1111.29,232.922 1111.86,231.721 1112.43,231.591 1112.99,233.694 1113.56,232.439 1114.13,231.313 1114.7,231.436 1115.27,231.55 1115.84,232.563 1116.4,232.428 1116.97,232.379 1117.54,232.281 1118.11,231.217 1118.68,232.19 1119.25,232.323 1119.81,229.209 1120.38,228.187 1120.95,228.443 1121.52,226.636 1122.09,226.037 1122.66,224.61 1123.23,223.228 1123.79,222.775 1124.36,223.385 1124.93,225.012 1125.5,223.18 1126.07,225.939 1126.64,224.195 1127.2,225.724 1127.77,226.256 1128.34,229.756 1128.91,228.897 1129.48,229.047 1130.05,230.341 1130.61,231.373 1131.18,232.277 1131.75,231.197 1132.32,231.196 1132.89,231.261 1133.46,232.099 1134.02,232.142 1134.59,233.222 1135.16,234.165 1135.73,234.047 1136.3,232.968 1136.87,233.925 1137.43,233.678 1138,233.511 1138.57,234.257 1139.14,233.018 1139.71,232.048 1140.28,231.147 1140.84,230.154 1141.41,230.2 1141.98,231.118 1142.55,229.227 1143.12,229.288 1143.69,226.253 1144.25,226.637 1144.82,227.332 1145.39,226.59 1145.96,226.807 1146.53,227.944 1147.1,229.119 1147.66,230.352 1148.23,229.305 1148.8,230.55 1149.37,232.476 1149.94,231.373 1150.51,232.322 1151.07,232.174 1151.64,234.205 1152.21,234.937 1152.78,234.639 1153.35,235.411 1153.92,235.944 1154.48,236.838 1155.05,237.581 1155.62,236.147 1156.19,233.748 1156.76,236.671 1157.33,235.126 1157.89,234.731 1158.46,235.532 1159.03,235.441 1159.6,236.08 1160.17,236.743 1160.74,237.379 1161.3,236.966 1161.87,237.54 1162.44,240.111 1163.01,239.543 1163.58,238.7 1164.15,236.059 1164.71,235.485 1165.28,234.021 1165.85,232.692 1166.42,233.35 1166.99,231.166 1167.56,230.026 1168.12,229.821 1168.69,231.556 1169.26,230.516 1169.83,230.704 1170.4,229.74 1170.97,228.877 1171.53,227.863 1172.1,230.09 1172.67,231.067 1173.24,229.995 1173.81,229.819 1174.38,228.515 1174.94,225.584 1175.51,227.872 1176.08,228.288 1176.65,228.484 1177.22,228.451 1177.79,229.627 1178.35,226.714 1178.92,226.854 1179.49,226.026 1180.06,226.321 1180.63,228.594 1181.2,229.814 1181.76,228.809 1182.33,228.986 1182.9,228.005 1183.47,227.13 1184.04,227.462 1184.61,230.806 1185.17,231.902 1185.74,231.917 1186.31,232.858 1186.88,232.723 1187.45,232.324 1188.02,233.067 1188.58,233.931 1189.15,235.923 1189.72,235.441 1190.29,232.923 1190.86,231.661 1191.43,230.453 1192,230.423 1192.56,229.404 1193.13,229.458 1193.7,230.643 1194.27,229.837 1194.84,226.939 1195.41,228.164 1195.97,229.448 1196.54,231.599 1197.11,231.505 1197.68,230.443 1198.25,232.557 1198.82,234.431 1199.38,234.087 1199.95,232.961 1200.52,233.874 1201.09,232.621 1201.66,232.371 1202.23,230.403 1202.79,230.482 1203.36,227.324 1203.93,225.597 1204.5,226.008 1205.07,227.485 1205.64,224.784 1206.2,225.369 1206.77,227.956 1207.34,228.093 1207.91,227.104 1208.48,226.429 1209.05,226.559 1209.61,227.996 1210.18,229.157 1210.75,230.39 1211.32,230.412 1211.89,230.598 1212.46,229.46 1213.02,228.701 1213.59,225.575 1214.16,224.186 1214.73,226.71 1215.3,226.896 1215.87,228.296 1216.43,228.498 1217,227.783 1217.57,229.027 1218.14,229.186 1218.71,230.126 1219.28,230.179 1219.84,232.163 1220.41,232.064 1220.98,230.084 1221.55,231.054 1222.12,232.095 1222.69,230.111 1223.25,230.37 1223.82,229.343 1224.39,229.409 1224.96,229.516 1225.53,229.773 1226.1,230.976 1226.66,232.192 1227.23,232.326 1227.8,233.217 1228.37,230.971 1228.94,232.01 1229.51,233.133 1230.07,232.06 1230.64,230.98 1231.21,231.927 1231.78,233.187 1232.35,233.155 1232.92,232.137 1233.48,232.15 1234.05,232.033 1234.62,234.029 1235.19,231.704 1235.76,232.509 1236.33,231.093 1236.89,233.166 1237.46,231.99 1238.03,232.909 1238.6,231.462 1239.17,230.527 1239.74,229.691 1240.3,228.895 1240.87,228.877 1241.44,228.095 1242.01,229.361 1242.58,229.351 1243.15,228.229 1243.71,227.249 1244.28,227.271 1244.85,225.34 1245.42,224.777 1245.99,225.38 1246.56,227.864 1247.12,226.768 1247.69,229.012 1248.26,228.152 1248.83,229.311 1249.4,229.506 1249.97,227.531 1250.53,227.948 1251.1,228.652 1251.67,228.636 1252.24,230.086 1252.81,231.284 1253.38,230.428 1253.94,230.494 1254.51,230.629 1255.08,230.572 1255.65,230.68 1256.22,229.946 1256.79,232.261 1257.35,232.207 1257.92,233.344 1258.49,234.428 1259.06,236.4 1259.63,237.029 1260.2,236.76 1260.76,235.381 1261.33,234.178 1261.9,232.024 1262.47,231.005 1263.04,231.992 1263.61,229.979 1264.18,230.931 1264.74,231.21 1265.31,231.183 1265.88,232.252 1266.45,232.417 1267.02,234.422 1267.59,235.013 1268.15,234.752 1268.72,234.465 1269.29,234.111 1269.86,232.937 1270.43,232.946 1271,233.88 1271.56,232.8 1272.13,232.56 1272.7,231.416 1273.27,232.305 1273.84,231.284 1274.41,230.191 1274.97,230.304 1275.54,231.479 1276.11,231.487 1276.68,232.782 1277.25,233.619 1277.82,234.218 1278.38,233.866 1278.95,233.616 1279.52,236.495 1280.09,235.2 1280.66,235.943 1281.23,236.432 1281.79,234.809 1282.36,235.466 1282.93,235.876 1283.5,233.414 1284.07,232.949 1284.64,232.869 1285.2,231.552 1285.77,230.412 1286.34,231.393 1286.91,233.357 1287.48,232.172 1288.05,231.208 1288.61,232.154 1289.18,231.747 1289.75,230.682 1290.32,231.712 1290.89,230.744 1291.46,230.807 1292.02,231.42 1292.59,231.117 1293.16,231.205 1293.73,228.886 1294.3,228.708 1294.87,226.653 1295.43,225.813 1296,226.099 1296.57,227.478 1297.14,225.575 1297.71,225.983 1298.28,227.392 1298.84,225.528 1299.41,226.863 1299.98,226.175 1300.55,226.687 1301.12,227.127 1301.69,227.493 1302.25,227.631 1302.82,228.986 1303.39,230.069 1303.96,231.01 1304.53,232.046 1305.1,233.013 1305.66,234.923 1306.23,233.737 1306.8,231.584 1307.37,230.455 1307.94,229.631 1308.51,229.835 1309.07,229.645 1309.64,231.751 1310.21,234.724 1310.78,232.364 1311.35,233.4 1311.92,233.074 1312.48,231.781 1313.05,230.738 1313.62,228.576 1314.19,227.673 1314.76,229.172 1315.33,231.114 1315.89,232.005 1316.46,233.026 1317.03,231.99 1317.6,232.882 1318.17,233.836 1318.74,233.663 1319.3,233.436 1319.87,233.192 1320.44,234.079 1321.01,233.711 1321.58,232.431 1322.15,231.365 1322.71,230.354 1323.28,230.437 1323.85,230.522 1324.42,230.349 1324.99,229.427 1325.56,229.513 1326.12,227.484 1326.69,226.776 1327.26,225.877 1327.83,226.22 1328.4,225.582 1328.97,227.934 1329.53,229.175 1330.1,226.007 1330.67,226.18 1331.24,228.614 1331.81,228.635 1332.38,228.857 1332.94,230.248 1333.51,230.121 1334.08,231.182 1334.65,231.141 1335.22,234.276 1335.79,236.133 1336.36,234.617 1336.92,235.295 1337.49,233.863 1338.06,233.7 1338.63,232.447 1339.2,233.228 1339.77,232.002 1340.33,229.898 1340.9,231.053 1341.47,230.201 1342.04,230.073 1342.61,227.265 1343.18,227.508 1343.74,226.873 1344.31,226.04 1344.88,227.301 1345.45,227.497 1346.02,226.628 1346.59,227.101 1347.15,227.634 1347.72,227.124 1348.29,228.422 1348.86,230.471 1349.43,228.696 1350,228.923 1350.56,226.907 1351.13,228.401 1351.7,228.623 1352.27,229.048 1352.84,232.458 1353.41,232.381 1353.97,235.583 1354.54,235.454 1355.11,234.161 1355.68,234.043 1356.25,232.787 1356.82,231.929 1357.38,232.786 1357.95,233.716 1358.52,233.754 1359.09,234.641 1359.66,234.556 1360.23,234.44 1360.79,232.951 1361.36,229.663 1361.93,230.962 1362.5,230.983 1363.07,229.791 1363.64,229.856 1364.2,229.89 1364.77,232.14 1365.34,229.822 1365.91,231.854 1366.48,229.992 1367.05,230.009 1367.61,229.157 1368.18,228.229 1368.75,227.461 1369.32,226.761 1369.89,227.976 1370.46,229.201 1371.02,229.407 1371.59,231.633 1372.16,231.675 1372.73,232.851 1373.3,231.593 1373.87,230.757 1374.43,229.881 1375,229.114 1375.57,230.224 1376.14,229.887 1376.71,227.894 1377.28,228.059 1377.84,228.456 1378.41,227.621 1378.98,228.004 1379.55,226.224 1380.12,227.796 1380.69,228.184 1381.25,228.35 1381.82,227.661 1382.39,228.775 1382.96,229.789 1383.53,229.934 1384.1,230.349 1384.66,231.776 1385.23,229.807 1385.8,228.963 1386.37,228.064 1386.94,230.388 1387.51,234.489 1388.07,233.208 1388.64,233.204 1389.21,233.236 1389.78,233.008 1390.35,229.803 1390.92,230.715 1391.48,232.618 1392.05,231.428 1392.62,230.522 1393.19,228.59 1393.76,229.888 1394.33,229.945 1394.89,230.048 1395.46,229.139 1396.03,228.062 1396.6,229.115 1397.17,230.642 1397.74,229.652 1398.3,231.771 1398.87,228.869 1399.44,226.001 1400.01,226.407 1400.58,225.948 1401.15,227.452 1401.71,229.884 1402.28,229.857 1402.85,229.174 1403.42,228.08 1403.99,229.541 1404.56,227.671 1405.13,227.006 1405.69,228.358 1406.26,228.729 1406.83,228.901 1407.4,229.173 1407.97,229.646 1408.54,231.961 1409.1,231.95 1409.67,232.144 1410.24,231.158 1410.81,229.192 1411.38,229.754 1411.95,229.056 1412.51,233.107 1413.08,236.048 1413.65,235.626 1414.22,236.285 1414.79,236.103 1415.36,235.979 1415.92,236.621 1416.49,236.44 1417.06,235.123 1417.63,233.021 1418.2,232.072 1418.77,230.147 1419.33,230.297 1419.9,228.473 1420.47,231.729 1421.04,232.943 1421.61,232.91 1422.18,231.899 1422.74,233.915 1423.31,234.834 1423.88,233.334 1424.45,232.263 1425.02,233.321 1425.59,233.149 1426.15,232.158 1426.72,233.231 1427.29,229.995 1427.86,228.104 1428.43,228.459 1429,228.962 1429.56,228.168 1430.13,229.345 1430.7,231.503 1431.27,232.596 1431.84,231.597 1432.41,231.604 1432.97,232.776 1433.54,231.937 1434.11,232.893 1434.68,234.94 1435.25,234.658 1435.82,231.375 1436.38,232.443 1436.95,235.444 1437.52,236.163 1438.09,236.784 1438.66,236.339 1439.23,236.962 1439.79,237.575 1440.36,238.128 1440.93,238.457 1441.5,238.916 1442.07,236.255 1442.64,234.795 1443.2,235.326 1443.77,232.708 1444.34,232.352 1444.91,232.26 1445.48,233.226 1446.05,232.788 1446.61,232.686 1447.18,233.443 1447.75,233.345 1448.32,234.045 1448.89,232.748 1449.46,232.722 1450.02,231.351 1450.59,229.423 1451.16,230.445 1451.73,229.563 1452.3,229.694 1452.87,229.703 1453.43,231.876 1454,231.458 1454.57,233.445 1455.14,234.367 1455.71,234.314 1456.28,233.141 1456.84,235.084 1457.41,233.508 1457.98,234.263 1458.55,234.869 1459.12,234.379 1459.69,234.1 1460.25,227.955 1460.82,230.307 1461.39,231.128 1461.96,230.971 1462.53,232.82 1463.1,233.662 1463.66,233.375 1464.23,231.708 1464.8,231.468 1465.37,231.411 1465.94,229.043 1466.51,229.178 1467.07,226.987 1467.64,224.969 1468.21,225.104 1468.78,225.256 1469.35,227.536 1469.92,224.878 1470.48,224.227 1471.05,224.744 1471.62,223.976 1472.19,224.49 1472.76,225.969 1473.33,229.126 1473.89,229.175 1474.46,228.229 1475.03,229.487 1475.6,228.669 1476.17,227.868 1476.74,228.067 1477.31,227.067 1477.87,228.335 1478.44,229.61 1479.01,228.71 1479.58,230.96 1480.15,229.746 1480.72,228.643 1481.28,231.92 1481.85,233.16 1482.42,235.046 1482.99,234.714 1483.56,239.375 1484.13,239.767 1484.69,241.191 1485.26,239.292 1485.83,238.726 1486.4,238.242 1486.97,234.512 1487.54,235.218 1488.1,237.004 1488.67,236.506 1489.24,234.939 1489.81,234.734 1490.38,233.311 1490.95,233.066 1491.51,232.662 1492.08,231.401 1492.65,232.392 1493.22,232.187 1493.79,231.061 1494.36,228.072 1494.92,225.115 1495.49,225.189 1496.06,224.555 1496.63,224.091 1497.2,224.377 1497.77,227.892 1498.33,226.092 1498.9,224.176 1499.47,226.806 1500.04,227.998 1500.61,228.227 1501.18,229.346 1501.74,230.625 1502.31,231.553 1502.88,231.183 1503.45,231.046 1504.02,232.01 1504.59,232.855 1505.15,231.368 1505.72,232.527 1506.29,232.506 1506.86,231.395 1507.43,232.281 1508,233.08 1508.56,232.853 1509.13,232.744 1509.7,234.706 1510.27,234.302 1510.84,232.938 1511.41,232.857 1511.97,231.767 1512.54,231.63 1513.11,229.211 1513.68,229.117 1514.25,227.108 1514.82,228.131 1515.38,228.147 1515.95,228.344 1516.52,227.457 1517.09,224.56 1517.66,222.907 1518.23,223.501 1518.79,225.071 1519.36,225.301 1519.93,225.67 1520.5,229.946 1521.07,231.048 1521.64,227.736 1522.2,227.821 1522.77,227.873 1523.34,228.952 1523.91,230.895 1524.48,231.911 1525.05,231.719 1525.61,232.663 1526.18,233.593 1526.75,232.196 1527.32,231.113 1527.89,230.83 1528.46,228.834 1529.02,230.102 1529.59,229.987 1530.16,229.163 1530.73,231.413 1531.3,233.273 1531.87,231.15 1532.43,230.24 1533,230.33 1533.57,230.634 1534.14,231.58 1534.71,232.636 1535.28,231.308 1535.84,231.447 1536.41,232.407 1536.98,229.335 1537.55,229.396 1538.12,230.292 1538.69,230.379 1539.25,230.5 1539.82,233.494 1540.39,231.2 1540.96,231.103 1541.53,231.019 1542.1,231.084 1542.66,229.891 1543.23,229.827 1543.8,230.005 1544.37,229.972 1544.94,227.988 1545.51,228.344 1546.08,229.496 1546.64,228.512 1547.21,230.015 1547.78,230.067 1548.35,231.055 1548.92,230.95 1549.49,231.933 1550.05,232.655 1550.62,232.589 1551.19,230.312 1551.76,229.34 1552.33,228.701 1552.9,229.1 1553.46,230.177 1554.03,231.316 1554.6,229.379 1555.17,229.72 1555.74,229.846 1556.31,232.017 1556.87,231.897 1557.44,231.734 1558.01,231.683 1558.58,230.67 1559.15,229.627 1559.72,228.73 1560.28,229.83 1560.85,228.894 1561.42,228.86 1561.99,228.875 1562.56,229.878 1563.13,230.057 1563.69,231.212 1564.26,230.347 1564.83,230.348 1565.4,231.428 1565.97,232.574 1566.54,231.53 1567.1,230.406 1567.67,228.387 1568.24,228.718 1568.81,226.889 1569.38,225.332 1569.95,225.379 1570.51,225.839 1571.08,226.441 1571.65,227.759 1572.22,230.15 1572.79,232.406 1573.36,231.497 1573.92,231.362 1574.49,232.288 1575.06,233.085 1575.63,230.761 1576.2,231.666 1576.77,231.811 1577.33,230.891 1577.9,232.312 1578.47,231.996 1579.04,232.063 1579.61,232.056 1580.18,231.074 1580.74,230.138 1581.31,232.296 1581.88,230.407 1582.45,229.292 1583.02,228.725 1583.59,226.939 1584.15,227.183 1584.72,227.658 1585.29,226.725 1585.86,227.486 1586.43,226.835 1587,227.126 1587.56,228.511 1588.13,228.606 1588.7,229.808 1589.27,230.132 1589.84,229.2 1590.41,230.476 1590.97,230.41 1591.54,231.775 1592.11,231.734 1592.68,233.604 1593.25,231.575 1593.82,227.418 1594.38,227.675 1594.95,228.982 1595.52,229.102 1596.09,228.275 1596.66,230.605 1597.23,229.679 1597.79,230.627 1598.36,231.749 1598.93,232.726 1599.5,232.675 1600.07,233.783 1600.64,233.726 1601.2,233.404 1601.77,232.257 1602.34,232.306 1602.91,231.3 1603.48,230.328 1604.05,229.22 1604.61,227.382 1605.18,226.618 1605.75,226.961 1606.32,228.179 1606.89,231.487 1607.46,232.603 1608.02,232.709 1608.59,234.522 1609.16,233.215 1609.73,231.931 1610.3,232.839 1610.87,233.926 1611.43,231.809 1612,229.703 1612.57,230.993 1613.14,233.027 1613.71,232.967 1614.28,231.901 1614.84,235.969 1615.41,234.523 1615.98,235.258 1616.55,234.947 1617.12,234.724 1617.69,232.399 1618.26,233.366 1618.82,230.087 1619.39,229.211 1619.96,229.356 1620.53,230.697 1621.1,229.998 1621.67,233.235 1622.23,229.828 1622.8,229.733 1623.37,231.496 1623.94,230.308 1624.51,231.564 1625.08,229.382 1625.64,233.393 1626.21,233.008 1626.78,230.631 1627.35,232.539 1627.92,232.348 1628.49,232.172 1629.05,230.235 1629.62,231.163 1630.19,232.182 1630.76,232.388 1631.33,232.25 1631.9,235.254 1632.46,235.969 1633.03,236.768 1633.6,236.182 1634.17,235.679 1634.74,235.479 1635.31,233.13 1635.87,231.65 1636.44,233.338 1637.01,231.048 1637.58,231.894 1638.15,231.552 1638.72,230.577 1639.28,230.513 1639.85,229.59 1640.42,229.786 1640.99,229.105 1641.56,232.31 1642.13,234.198 1642.69,233.988 1643.26,233.557 1643.83,234.26 1644.4,230.83 1644.97,233.918 1645.54,234.607 1646.1,234.405 1646.67,232.071 1647.24,232.882 1647.81,232.772 1648.38,234.432 1648.95,235.217 1649.51,234.996 1650.08,233.49 1650.65,234.427 1651.22,231.166 1651.79,230.073 1652.36,229.997 1652.92,228.836 1653.49,229.661 1654.06,230.904 1654.63,230.786 1655.2,231.883 1655.77,230.618 1656.33,230.6 1656.9,230.436 1657.47,232.345 1658.04,230.972 1658.61,231.92 1659.18,230.701 1659.74,229.53 1660.31,228.448 1660.88,227.636 1661.45,226.93 1662.02,227.075 1662.59,227.139 1663.15,228.46 1663.72,229.633 1664.29,228.669 1664.86,226.637 1665.43,226.936 1666,227.235 1666.56,227.22 1667.13,225.552 1667.7,227.009 1668.27,226.407 1668.84,226.935 1669.41,227.285 1669.97,229.717 1670.54,230.767 1671.11,229.74 1671.68,232.997 1672.25,231.715 1672.82,232.932 1673.38,230.704 1673.95,229.677 1674.52,229.548 1675.09,229.653 1675.66,230.634 1676.23,230.677 1676.79,231.774 1677.36,230.763 1677.93,231.701 1678.5,232.461 1679.07,232.153 1679.64,231.936 1680.2,230.736 1680.77,232.199 1681.34,233.124 1681.91,234.159 1682.48,233.85 1683.05,231.695 1683.61,228.738 1684.18,227.901 1684.75,228.124 1685.32,227.56 1685.89,226.672 1686.46,227.95 1687.02,227.347 1687.59,225.598 1688.16,227 1688.73,228.336 1689.3,228.601 1689.87,230.986 1690.44,231.938 1691,233.177 1691.57,231.979 1692.14,231.77 1692.71,231.801 1693.28,231.566 1693.85,231.571 1694.41,233.388 1694.98,233.369 1695.55,231.847 1696.12,232.835 1696.69,233.672 1697.26,233.471 1697.82,232.103 1698.39,232.899 1698.96,232.566 1699.53,232.284 1700.1,231.144 1700.67,230.963 1701.23,231.857 1701.8,232.757 1702.37,231.578 1702.94,231.459 1703.51,231.561 1704.08,231.471 1704.64,231.49 1705.21,234.454 1705.78,234.327 1706.35,234.039 1706.92,232.824 1707.49,232.608 1708.05,229.538 1708.62,228.356 1709.19,227.714 1709.76,227.068 1710.33,227.417 1710.9,225.402 1711.46,222.588 1712.03,224.199 1712.6,225.864 1713.17,227.234 1713.74,228.559 1714.31,228.743 1714.87,228.027 1715.44,226.313 1716.01,227.867 1716.58,229.138 1717.15,229.436 1717.72,230.511 1718.28,228.534 1718.85,230.886 1719.42,233.076 1719.99,231.925 1720.56,231.066 1721.13,230.963 1721.69,231.905 1722.26,230.872 1722.83,229.865 1723.4,230.058 1723.97,232.188 1724.54,231.148 1725.1,231.364 1725.67,232.362 1726.24,233.553 1726.81,235.676 1727.38,235.499 1727.95,235.318 1728.51,234.03 1729.08,231.98 1729.65,231.82 1730.22,232.491 1730.79,232.433 1731.36,231.008 1731.92,231.028 1732.49,234.062 1733.06,234.701 1733.63,234.423 1734.2,235.225 1734.77,232.852 1735.33,229.74 1735.9,230.759 1736.47,228.599 1737.04,228.722 1737.61,227.771 1738.18,227.257 1738.74,227.309 1739.31,227.485 1739.88,227.591 1740.45,228.897 1741.02,228.166 1741.59,229.211 1742.15,230.448 1742.72,230.433 1743.29,229.514 1743.86,230.648 1744.43,230.728 1745,230.784 1745.56,230.741 1746.13,231.808 1746.7,232.82 1747.27,231.629 1747.84,231.355 1748.41,232.405 1748.97,233.329 1749.54,233.297 1750.11,233.151 1750.68,232.89 1751.25,231.759 1751.82,232.974 1752.38,232.821 1752.95,231.612 1753.52,228.536 1754.09,228.64 1754.66,231.737 1755.23,235.675 1755.79,235.615 1756.36,236.265 1756.93,235.845 1757.5,234.207 1758.07,233.85 1758.64,235.588 1759.21,235.436 1759.77,236.044 1760.34,233.651 1760.91,233.344 1761.48,233.944 1762.05,233.599 1762.62,234.224 1763.18,234.721 1763.75,236.159 1764.32,233.576 1764.89,233.177 1765.46,232.775 1766.03,233.426 1766.59,232.206 1767.16,230.866 1767.73,232.691 1768.3,232.568 1768.87,232.301 1769.44,231.294 1770,231.023 1770.57,233.229 1771.14,232.938 1771.71,233.682 1772.28,233.28 1772.85,230.894 1773.41,232.788 1773.98,231.749 1774.55,231.636 1775.12,228.379 1775.69,227.482 1776.26,227.766 1776.82,230.937 1777.39,228.846 1777.96,228.883 1778.53,229.994 1779.1,228.988 1779.67,228.131 1780.23,229.126 1780.8,229.327 1781.37,227.262 1781.94,227.599 1782.51,226.53 1783.08,226.75 1783.64,227.042 1784.21,224.969 1784.78,224.5 1785.35,224.986 1785.92,225.302 1786.49,225.492 1787.05,225.939 1787.62,228.269 1788.19,228.159 1788.76,228.252 1789.33,227.316 1789.9,226.377 1790.46,225.683 1791.03,225.203 1791.6,226.503 1792.17,227.773 1792.74,226.798 1793.31,228.35 1793.87,228.368 1794.44,229.836 1795.01,229.919 1795.58,230.021 1796.15,229.986 1796.72,231.285 1797.28,232.323 1797.85,231.221 1798.42,232.215 1798.99,232.346 1799.56,235.201 1800.13,235.273 1800.69,237.13 1801.26,236.435 1801.83,236.217 1802.4,235.939 1802.97,232.571 1803.54,232.368 1804.1,232.254 1804.67,233.15 1805.24,231.879 1805.81,230.845 1806.38,231.879 1806.95,232.525 1807.51,231.43 1808.08,230.141 1808.65,230.113 1809.22,231.111 1809.79,230.844 1810.36,228.839 1810.92,227.924 1811.49,226.075 1812.06,228.383 1812.63,226.525 1813.2,227.823 1813.77,229.29 1814.33,230.423 1814.9,231.284 1815.47,231.372 1816.04,231.331 1816.61,232.503 1817.18,233.416 1817.74,230.076 1818.31,230.192 1818.88,229.15 1819.45,229.193 1820.02,229.477 1820.59,229.579 1821.15,229.641 1821.72,229.686 1822.29,226.577 1822.86,228.183 1823.43,226.401 1824,225.795 1824.56,225.94 1825.13,228.154 1825.7,226.284 1826.27,226.671 1826.84,226.995 1827.41,228.214 1827.97,228.494 1828.54,228.871 1829.11,230.376 1829.68,231.387 1830.25,231.438 1830.82,231.431 1831.39,230.424 1831.95,231.305 1832.52,231.311 1833.09,233.355 1833.66,229.957 1834.23,229.913 1834.8,231.096 1835.36,231.077 1835.93,233.219 1836.5,234.158 1837.07,235.201 1837.64,235.025 1838.21,235.815 1838.77,234.477 1839.34,234.311 1839.91,233.091 1840.48,232.967 1841.05,231.781 1841.62,232.634 1842.18,233.405 1842.75,235.12 1843.32,233.797 1843.89,234.637 1844.46,234.369 1845.03,232.776 1845.59,232.709 1846.16,232.529 1846.73,234.379 1847.3,231.003 1847.87,229.922 1848.44,230.166 1849,230.317 1849.57,231.328 1850.14,231.488 1850.71,233.338 1851.28,234.334 1851.85,233.993 1852.41,231.672 1852.98,230.548 1853.55,232.518 1854.12,231.733 1854.69,231.829 1855.26,232.674 1855.82,231.47 1856.39,233.373 1856.96,233.179 1857.53,232.918 1858.1,231.851 1858.67,230.869 1859.23,227.908 1859.8,226.849 1860.37,227.738 1860.94,228.873 1861.51,230.112 1862.08,231.035 1862.64,229.846 1863.21,230.716 1863.78,229.611 1864.35,232.714 1864.92,237.661 1865.49,236.145 1866.05,236.54 1866.62,237.206 1867.19,236.463 1867.76,236.715 1868.33,237.208 1868.9,235.724 1869.46,237.331 1870.03,238.801 1870.6,238.109 1871.17,238.268 1871.74,238.787 1872.31,237.917 1872.87,234.385 1873.44,233.847 1874.01,233.392 1874.58,231.577 1875.15,230.26 1875.72,229.976 1876.28,228.823 1876.85,229.865 1877.42,229.929 1877.99,228.831 1878.56,227.793 1879.13,228.021 1879.69,226.795 1880.26,226.839 1880.83,226.954 1881.4,227.058 1881.97,226.274 1882.54,227.448 1883.1,226.528 1883.67,225.636 1884.24,226.748 1884.81,225.741 1885.38,227.101 1885.95,228.128 1886.51,229.485 1887.08,226.431 1887.65,227.648 1888.22,228.511 1888.79,225.606 1889.36,225.677 1889.92,225.988 1890.49,226.32 1891.06,226.663 1891.63,226.76 1892.2,226.987 1892.77,226.972 1893.33,226.154 1893.9,227.305 1894.47,226.385 1895.04,226.799 1895.61,228.015 1896.18,229.311 1896.74,227.085 1897.31,226.209 1897.88,227.545 1898.45,226.93 1899.02,226.091 1899.59,225.639 1900.16,226.216 1900.72,227.599 1901.29,226.85 1901.86,228.261 1902.43,232.812 1903,231.817 1903.57,230.801 1904.13,229.947 1904.7,230.232 1905.27,230.332 1905.84,229.144 1906.41,228.375 1906.98,227.547 1907.54,226.686 1908.11,225.629 1908.68,226.047 1909.25,225.295 1909.82,226.546 1910.39,228.122 1910.95,228.541 1911.52,227.949 1912.09,229.147 1912.66,229.331 1913.23,229.459 1913.8,230.878 1914.36,231.205 1914.93,231.48 1915.5,231.47 1916.07,231.607 1916.64,233.715 1917.21,232.617 1917.77,233.54 1918.34,234.03 1918.91,235.011 1919.48,234.704 1920.05,235.506 1920.62,235.069 1921.18,230.87 1921.75,232.945 1922.32,232.713 1922.89,233.905 1923.46,234.603 1924.03,233.177 1924.59,234.085 1925.16,233.931 1925.73,232.674 1926.3,232.73 1926.87,231.364 1927.44,231.117 1928,227.999 1928.57,227.132 1929.14,228.424 1929.71,229.799 1930.28,230.888 1930.85,230.043 1931.41,230.105 1931.98,229.156 1932.55,227.289 1933.12,230.761 1933.69,230.912 1934.26,229.826 1934.82,232.2 1935.39,229.97 1935.96,229.996 1936.53,228.191 1937.1,228.581 1937.67,225.742 1938.23,225.382 1938.8,223.857 1939.37,224.483 1939.94,224.773 1940.51,225.513 1941.08,223.668 1941.64,224.219 1942.21,224.924 1942.78,225.453 1943.35,225.065 1943.92,224.568 1944.49,229.266 1945.05,231.49 1945.62,231.715 1946.19,233.871 1946.76,232.052 1947.33,232.148 1947.9,233.339 1948.46,233.573 1949.03,235.443 1949.6,237.389 1950.17,238.012 1950.74,238.589 1951.31,240.161 1951.87,239.665 1952.44,237.062 1953.01,237.952 1953.58,238.566 1954.15,242.096 1954.72,242.384 1955.28,240.288 1955.85,240.752 1956.42,242.179 1956.99,241.463 1957.56,239.835 1958.13,238.092 1958.69,237.61 1959.26,236.066 1959.83,236.668 1960.4,235.426 1960.97,232.162 1961.54,233.092 1962.1,231.98 1962.67,231.698 1963.24,228.404 1963.81,228.512 1964.38,229.492 1964.95,231.623 1965.51,231.649 1966.08,230.529 1966.65,228.451 1967.22,226.319 1967.79,226.316 1968.36,226.639 1968.92,226.821 1969.49,227.02 1970.06,228.325 1970.63,226.345 1971.2,223.421 1971.77,223.96 1972.34,222.433 1972.9,219.895 1973.47,221.821 1974.04,224.657 1974.61,225.072 1975.18,224.702 1975.75,225.078 1976.31,226.713 1976.88,226.085 1977.45,227.456 1978.02,227.702 1978.59,224.811 1979.16,226.388 1979.72,229.847 1980.29,229.892 1980.86,231.912 1981.43,230.722 1982,230.755 1982.57,230.813 1983.13,227.824 1983.7,228.059 1984.27,230.412 1984.84,228.496 1985.41,228.859 1985.98,229.119 1986.54,230.305 1987.11,230.344 1987.68,230.23 1988.25,230.308 1988.82,227.47 1989.39,228.718 1989.95,228.031 1990.52,231.306 1991.09,232.372 1991.66,234.435 1992.23,234.162 1992.8,234.908 1993.36,233.646 1993.93,232.558 1994.5,233.343 1995.07,233.215 1995.64,232.99 1996.21,233.997 1996.77,234.895 1997.34,233.687 1997.91,232.499 1998.48,234.527 1999.05,232.267 1999.62,233.267 2000.18,234.242 2000.75,232.839 2001.32,236.041 2001.89,235.602 2002.46,233.198 2003.03,234.084 2003.59,232.912 2004.16,230.745 2004.73,231.755 2005.3,232.573 2005.87,231.389 2006.44,234.251 2007,237.011 2007.57,235.449 2008.14,235.012 2008.71,234.788 2009.28,235.752 2009.85,233.362 2010.41,230.883 2010.98,232.977 2011.55,232.743 2012.12,233.754 2012.69,233.369 2013.26,234.924 2013.82,234.542 2014.39,233.325 2014.96,232.208 2015.53,231.995 2016.1,231.967 2016.67,227.667 2017.23,227.892 2017.8,225.068 2018.37,226.459 2018.94,226.558 2019.51,227.654 2020.08,228.054 2020.64,230.079 2021.21,231.083 2021.78,232.237 2022.35,231.922 2022.92,232.733 2023.49,232.564 2024.05,233.484 2024.62,233.357 2025.19,234.022 2025.76,233.811 2026.33,233.591 2026.9,235.216 2027.46,234.815 2028.03,233.58 2028.6,234.228 2029.17,231.678 2029.74,233.49 2030.31,233.334 2030.87,233.246 2031.44,232.952 2032.01,232.94 2032.58,231.574 2033.15,232.542 2033.72,233.3 2034.28,234.957 2034.85,233.462 2035.42,233.139 2035.99,231.909 2036.56,231.594 2037.13,231.194 2037.69,230.053 2038.26,229.884 2038.83,229.886 2039.4,229.824 2039.97,228.936 2040.54,228.969 2041.11,229.034 2041.67,224.857 2042.24,223.121 2042.81,224.669 2043.38,226.254 2043.95,227.534 2044.52,228.749 2045.08,228.901 2045.65,228.917 2046.22,228.94 2046.79,228.973 2047.36,228.967 2047.93,228.06 2048.49,230.549 2049.06,228.298 2049.63,228.439 2050.2,226.365 2050.77,226.621 2051.34,227.009 2051.9,227.329 2052.47,226.375 2053.04,227.785 2053.61,229.954 2054.18,229.005 2054.75,230.068 2055.31,229.091 2055.88,228.114 2056.45,228.283 2057.02,229.46 2057.59,233.766 2058.16,233.504 2058.72,234.368 2059.29,234.059 2059.86,234.612 2060.43,233.17 2061,234.9 2061.57,234.517 2062.13,231.14 2062.7,233.252 2063.27,233.109 2063.84,231.795 2064.41,231.648 2064.98,233.47 2065.54,235.072 2066.11,231.436 2066.68,231.179 2067.25,229.071 2067.82,228.202 2068.39,228.242 2068.95,227.275 2069.52,228.685 2070.09,229.861 2070.66,228.738 2071.23,228.68 2071.8,228.902 2072.36,227.888 2072.93,227.222 2073.5,227.592 2074.07,227.63 2074.64,226.81 2075.21,226.114 2075.77,227.577 2076.34,226.651 2076.91,224.999 2077.48,225.384 2078.05,226.715 2078.62,229.125 2079.18,229.353 2079.75,227.505 2080.32,228.794 2080.89,229.813 2081.46,226.712 2082.03,226.065 2082.59,227.19 2083.16,227.598 2083.73,226.924 2084.3,228.401 2084.87,228.598 2085.44,228.768 2086,229.283 2086.57,230.867 2087.14,229.204 2087.71,229.491 2088.28,229.666 2088.85,231.954 2089.41,232.095 2089.98,231.955 2090.55,231.108 2091.12,231.204 2091.69,229.364 2092.26,228.529 2092.82,228.706 2093.39,229.926 2093.96,229.848 2094.53,231.047 2095.1,232.21 2095.67,230.929 2096.23,230.982 2096.8,232.943 2097.37,232.785 2097.94,233.048 2098.51,233.178 2099.08,233.096 2099.64,231.97 2100.21,231.174 2100.78,229.069 2101.35,228.307 2101.92,226.685 2102.49,227.182 2103.05,226.396 2103.62,227.893 2104.19,230.306 2104.76,232.695 2105.33,232.681 2105.9,231.576 2106.46,228.553 2107.03,227.614 2107.6,230.015 2108.17,230.299 2108.74,229.306 2109.31,229.401 2109.87,229.625 2110.44,227.683 2111.01,227.951 2111.58,229.528 2112.15,229.642 2112.72,226.776 2113.29,229.096 2113.85,230.285 2114.42,229.481 2114.99,227.716 2115.56,230.261 2116.13,230.482 2116.7,232.768 2117.26,231.651 2117.83,230.442 2118.4,230.607 2118.97,229.677 2119.54,229.928 2120.11,228.037 2120.67,227.332 2121.24,228.596 2121.81,229.708 2122.38,228.736 2122.95,232.044 2123.52,233.294 2124.08,233.145 2124.65,233.045 2125.22,232.853 2125.79,231.694 2126.36,230.422 2126.93,232.665 2127.49,231.647 2128.06,231.735 2128.63,232.729 2129.2,230.791 2129.77,231.123 2130.34,231.099 2130.9,230.343 2131.47,230.514 2132.04,230.7 2132.61,230.765 2133.18,234.91 2133.75,233.687 2134.31,232.545 2134.88,233.533 2135.45,232.628 2136.02,232.774 2136.59,231.931 2137.16,234.789 2137.72,234.941 2138.29,235.534 2138.86,235.363 2139.43,234.176 2140,235.024 2140.57,233.746 2141.13,235.773 2141.7,236.747 2142.27,237.536 2142.84,237.134 2143.41,234.744 2143.98,235.401 2144.54,234.166 2145.11,234.854 2145.68,237.636 2146.25,237.359 2146.82,232.91 2147.39,232.819 2147.95,234.664 2148.52,235.366 2149.09,234.967 2149.66,232.592 2150.23,233.339 2150.8,233.238 2151.36,232.164 2151.93,233.305 2152.5,233.004 2153.07,231.994 2153.64,231.856 2154.21,231.83 2154.77,230.6 2155.34,231.681 2155.91,230.521 2156.48,231.437 2157.05,229.195 2157.62,229.892 2158.18,228.765 2158.75,230.038 2159.32,227.935 2159.89,227.997 \"/>\n<path clip-path=\"url(#clip770)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip770)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip770)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip770)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip770)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip770)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip770)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.042 ± 0.017\n  with uncertainty of ± 0.0011089103179142644\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01612 ± (0.0035103, 0.00343436) (MC)\n  95% confidence interval: [-4.02298, -4.00954]) (MC)\n  linear error propagation: -4.01681 ± 0.00344697\n  |δ_y| = |0.00305631| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.016116811686935, val_l = 0.0068642383094692505, val_u = 0.006577198213700619)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip800\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip800)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip801\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip800)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip802\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1157.55 2211.02,1157.55 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1013.86 2211.02,1013.86 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,870.173 2211.02,870.173 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,726.483 2211.02,726.483 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,582.793 2211.02,582.793 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,439.103 2211.02,439.103 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,295.413 2211.02,295.413 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip800)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1157.55 365.751,1157.55 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1013.86 365.751,1013.86 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,870.173 365.751,870.173 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,726.483 365.751,726.483 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,582.793 365.751,582.793 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,439.103 365.751,439.103 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,295.413 365.751,295.413 \"/>\n<path clip-path=\"url(#clip800)\" d=\"M298.909 1143.35 Q295.298 1143.35 293.469 1146.92 Q291.664 1150.46 291.664 1157.59 Q291.664 1164.69 293.469 1168.26 Q295.298 1171.8 298.909 1171.8 Q302.543 1171.8 304.349 1168.26 Q306.177 1164.69 306.177 1157.59 Q306.177 1150.46 304.349 1146.92 Q302.543 1143.35 298.909 1143.35 M298.909 1139.65 Q304.719 1139.65 307.775 1144.26 Q310.853 1148.84 310.853 1157.59 Q310.853 1166.32 307.775 1170.92 Q304.719 1175.5 298.909 1175.5 Q293.099 1175.5 290.02 1170.92 Q286.964 1166.32 286.964 1157.59 Q286.964 1148.84 290.02 1144.26 Q293.099 1139.65 298.909 1139.65 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M259.557 1027.21 L267.196 1027.21 L267.196 1000.84 L258.886 1002.51 L258.886 998.25 L267.15 996.583 L271.826 996.583 L271.826 1027.21 L279.465 1027.21 L279.465 1031.14 L259.557 1031.14 L259.557 1027.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M298.909 999.662 Q295.298 999.662 293.469 1003.23 Q291.664 1006.77 291.664 1013.9 Q291.664 1021 293.469 1024.57 Q295.298 1028.11 298.909 1028.11 Q302.543 1028.11 304.349 1024.57 Q306.177 1021 306.177 1013.9 Q306.177 1006.77 304.349 1003.23 Q302.543 999.662 298.909 999.662 M298.909 995.958 Q304.719 995.958 307.775 1000.56 Q310.853 1005.15 310.853 1013.9 Q310.853 1022.63 307.775 1027.23 Q304.719 1031.81 298.909 1031.81 Q293.099 1031.81 290.02 1027.23 Q286.964 1022.63 286.964 1013.9 Q286.964 1005.15 290.02 1000.56 Q293.099 995.958 298.909 995.958 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M262.775 883.518 L279.094 883.518 L279.094 887.453 L257.15 887.453 L257.15 883.518 Q259.812 880.764 264.395 876.134 Q269.002 871.481 270.182 870.139 Q272.428 867.615 273.307 865.879 Q274.21 864.12 274.21 862.43 Q274.21 859.676 272.266 857.94 Q270.344 856.203 267.242 856.203 Q265.043 856.203 262.59 856.967 Q260.159 857.731 257.381 859.282 L257.381 854.56 Q260.205 853.426 262.659 852.847 Q265.113 852.268 267.15 852.268 Q272.52 852.268 275.715 854.953 Q278.909 857.639 278.909 862.129 Q278.909 864.259 278.099 866.18 Q277.312 868.078 275.205 870.671 Q274.627 871.342 271.525 874.56 Q268.423 877.754 262.775 883.518 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M298.909 855.972 Q295.298 855.972 293.469 859.537 Q291.664 863.078 291.664 870.208 Q291.664 877.314 293.469 880.879 Q295.298 884.421 298.909 884.421 Q302.543 884.421 304.349 880.879 Q306.177 877.314 306.177 870.208 Q306.177 863.078 304.349 859.537 Q302.543 855.972 298.909 855.972 M298.909 852.268 Q304.719 852.268 307.775 856.875 Q310.853 861.458 310.853 870.208 Q310.853 878.935 307.775 883.541 Q304.719 888.125 298.909 888.125 Q293.099 888.125 290.02 883.541 Q286.964 878.935 286.964 870.208 Q286.964 861.458 290.02 856.875 Q293.099 852.268 298.909 852.268 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M272.914 725.129 Q276.27 725.847 278.145 728.115 Q280.043 730.384 280.043 733.717 Q280.043 738.833 276.525 741.634 Q273.006 744.434 266.525 744.434 Q264.349 744.434 262.034 743.995 Q259.742 743.578 257.289 742.721 L257.289 738.208 Q259.233 739.342 261.548 739.921 Q263.863 740.499 266.386 740.499 Q270.784 740.499 273.076 738.763 Q275.39 737.027 275.39 733.717 Q275.39 730.661 273.238 728.948 Q271.108 727.212 267.289 727.212 L263.261 727.212 L263.261 723.37 L267.474 723.37 Q270.923 723.37 272.752 722.004 Q274.58 720.615 274.58 718.023 Q274.58 715.361 272.682 713.948 Q270.807 712.513 267.289 712.513 Q265.367 712.513 263.168 712.93 Q260.969 713.347 258.33 714.226 L258.33 710.06 Q260.992 709.319 263.307 708.949 Q265.645 708.578 267.705 708.578 Q273.029 708.578 276.131 711.009 Q279.233 713.416 279.233 717.536 Q279.233 720.407 277.59 722.398 Q275.946 724.365 272.914 725.129 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M298.909 712.282 Q295.298 712.282 293.469 715.847 Q291.664 719.388 291.664 726.518 Q291.664 733.624 293.469 737.189 Q295.298 740.731 298.909 740.731 Q302.543 740.731 304.349 737.189 Q306.177 733.624 306.177 726.518 Q306.177 719.388 304.349 715.847 Q302.543 712.282 298.909 712.282 M298.909 708.578 Q304.719 708.578 307.775 713.185 Q310.853 717.768 310.853 726.518 Q310.853 735.245 307.775 739.851 Q304.719 744.434 298.909 744.434 Q293.099 744.434 290.02 739.851 Q286.964 735.245 286.964 726.518 Q286.964 717.768 290.02 713.185 Q293.099 708.578 298.909 708.578 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M271.594 569.587 L259.789 588.036 L271.594 588.036 L271.594 569.587 M270.367 565.513 L276.247 565.513 L276.247 588.036 L281.177 588.036 L281.177 591.925 L276.247 591.925 L276.247 600.073 L271.594 600.073 L271.594 591.925 L255.992 591.925 L255.992 587.411 L270.367 565.513 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M298.909 568.592 Q295.298 568.592 293.469 572.156 Q291.664 575.698 291.664 582.828 Q291.664 589.934 293.469 593.499 Q295.298 597.041 298.909 597.041 Q302.543 597.041 304.349 593.499 Q306.177 589.934 306.177 582.828 Q306.177 575.698 304.349 572.156 Q302.543 568.592 298.909 568.592 M298.909 564.888 Q304.719 564.888 307.775 569.494 Q310.853 574.078 310.853 582.828 Q310.853 591.554 307.775 596.161 Q304.719 600.744 298.909 600.744 Q293.099 600.744 290.02 596.161 Q286.964 591.554 286.964 582.828 Q286.964 574.078 290.02 569.494 Q293.099 564.888 298.909 564.888 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M258.793 421.823 L277.15 421.823 L277.15 425.758 L263.076 425.758 L263.076 434.23 Q264.094 433.883 265.113 433.721 Q266.131 433.536 267.15 433.536 Q272.937 433.536 276.316 436.707 Q279.696 439.878 279.696 445.295 Q279.696 450.874 276.224 453.975 Q272.752 457.054 266.432 457.054 Q264.256 457.054 261.988 456.684 Q259.742 456.313 257.335 455.573 L257.335 450.874 Q259.418 452.008 261.641 452.563 Q263.863 453.119 266.34 453.119 Q270.344 453.119 272.682 451.012 Q275.02 448.906 275.02 445.295 Q275.02 441.684 272.682 439.577 Q270.344 437.471 266.34 437.471 Q264.465 437.471 262.59 437.888 Q260.738 438.304 258.793 439.184 L258.793 421.823 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M298.909 424.901 Q295.298 424.901 293.469 428.466 Q291.664 432.008 291.664 439.138 Q291.664 446.244 293.469 449.809 Q295.298 453.35 298.909 453.35 Q302.543 453.35 304.349 449.809 Q306.177 446.244 306.177 439.138 Q306.177 432.008 304.349 428.466 Q302.543 424.901 298.909 424.901 M298.909 421.198 Q304.719 421.198 307.775 425.804 Q310.853 430.388 310.853 439.138 Q310.853 447.864 307.775 452.471 Q304.719 457.054 298.909 457.054 Q293.099 457.054 290.02 452.471 Q286.964 447.864 286.964 439.138 Q286.964 430.388 290.02 425.804 Q293.099 421.198 298.909 421.198 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M269.326 293.549 Q266.178 293.549 264.326 295.702 Q262.497 297.855 262.497 301.605 Q262.497 305.332 264.326 307.507 Q266.178 309.66 269.326 309.66 Q272.474 309.66 274.303 307.507 Q276.154 305.332 276.154 301.605 Q276.154 297.855 274.303 295.702 Q272.474 293.549 269.326 293.549 M278.608 278.897 L278.608 283.156 Q276.849 282.322 275.043 281.883 Q273.261 281.443 271.502 281.443 Q266.872 281.443 264.418 284.568 Q261.988 287.693 261.641 294.012 Q263.006 291.998 265.066 290.933 Q267.127 289.846 269.603 289.846 Q274.812 289.846 277.821 293.017 Q280.853 296.165 280.853 301.605 Q280.853 306.929 277.705 310.146 Q274.557 313.364 269.326 313.364 Q263.33 313.364 260.159 308.781 Q256.988 304.174 256.988 295.447 Q256.988 287.253 260.877 282.392 Q264.766 277.508 271.316 277.508 Q273.076 277.508 274.858 277.855 Q276.664 278.202 278.608 278.897 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M298.909 281.211 Q295.298 281.211 293.469 284.776 Q291.664 288.318 291.664 295.447 Q291.664 302.554 293.469 306.119 Q295.298 309.66 298.909 309.66 Q302.543 309.66 304.349 306.119 Q306.177 302.554 306.177 295.447 Q306.177 288.318 304.349 284.776 Q302.543 281.211 298.909 281.211 M298.909 277.508 Q304.719 277.508 307.775 282.114 Q310.853 286.697 310.853 295.447 Q310.853 304.174 307.775 308.781 Q304.719 313.364 298.909 313.364 Q293.099 313.364 290.02 308.781 Q286.964 304.174 286.964 295.447 Q286.964 286.697 290.02 282.114 Q293.099 277.508 298.909 277.508 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip802)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1051.68 400.199,954.412 400.786,865.166 401.372,783.402 401.958,708.622 402.545,640.365 403.131,578.204 403.718,521.742 404.304,470.609 404.891,511.309 405.477,465.756 406.063,425.916 406.65,389.147 407.236,357.54 407.823,328.452 408.409,302.867 408.995,280.555 409.582,261.299 410.168,244.897 410.755,231.156 411.341,219.895 411.927,292.875 412.514,284.735 413.1,277.995 413.687,273.224 414.273,269.643 414.86,296.954 415.446,296.379 416.032,297.648 416.619,299.824 417.205,324.694 417.792,369.021 418.378,374.314 418.964,380.623 419.551,387.618 420.137,410.82 420.724,418.945 421.31,427.995 421.896,437.25 422.483,447.503 423.069,481.385 423.656,501.331 424.242,520.27 424.829,539.342 425.415,549.742 426.001,577.626 426.588,603.449 427.174,635.063 427.761,644.169 428.347,660.309 428.933,668.634 429.52,678.119 430.106,693.407 430.693,703.654 431.279,713.671 431.865,728.432 432.452,738.06 433.038,752.57 433.625,766.884 434.211,776.071 434.798,798.381 435.384,811.316 435.97,819.736 436.557,831.609 437.143,843.592 437.73,855.038 438.316,873.315 438.902,883.883 439.489,894.012 440.075,901.204 440.662,911.198 441.248,920.661 441.835,933.134 442.421,947.802 443.007,956.634 443.594,964.914 444.18,973.046 444.767,991.563 445.353,998.723 445.939,1011.15 446.526,1018.11 447.112,1024.84 447.699,1034.11 448.285,1040.63 448.871,1055.96 449.458,1061.78 450.044,1067.12 450.631,1074.88 451.217,1077.92 451.804,1081.21 452.39,1086.46 452.976,1095.7 453.563,1100.66 454.149,1105.33 454.736,1111.7 455.322,1116.13 455.908,1126.1 456.495,1129.98 457.081,1135.26 457.668,1139.12 458.254,1146.47 458.84,1148.34 459.427,1151.63 460.013,1153.41 460.6,1154.96 461.186,1156.59 461.773,1159.87 462.359,1166.1 462.945,1169.25 463.532,1172.3 464.118,1178.14 464.705,1180.75 465.291,1183.43 465.877,1184.45 466.464,1183.71 467.05,1186.43 467.637,1187.26 468.223,1187.95 468.809,1193.46 469.396,1194.37 469.982,1196.85 470.569,1199.09 471.155,1198.14 471.742,1201.65 472.328,1203.54 472.914,1204.19 473.501,1207.91 474.087,1208.33 474.674,1209.98 475.26,1211.6 475.846,1211.79 476.433,1215.05 477.019,1215.03 477.606,1218.12 478.192,1218.38 478.778,1216.94 479.365,1217.32 479.951,1218.58 480.538,1220.03 481.124,1223.16 481.711,1227.25 482.297,1227.19 482.883,1228.5 483.47,1229.82 484.056,1229.96 484.643,1232.01 485.229,1234.5 485.815,1234 486.402,1231.93 486.988,1234.5 487.575,1234.37 488.161,1234.15 488.748,1233.84 489.334,1233.36 489.92,1233.27 490.507,1231.93 491.093,1230.77 491.68,1230.73 492.266,1230.78 492.852,1229.7 493.439,1230.96 494.025,1232.37 494.612,1233.44 495.198,1234.37 495.784,1236.85 496.371,1240.6 496.957,1241.47 497.544,1243.31 498.13,1245.15 498.717,1244.43 499.303,1243.59 499.889,1243.36 500.476,1242.77 501.062,1242.23 501.649,1244.04 502.235,1244.78 502.821,1245.27 503.408,1248.46 503.994,1247.45 504.581,1247.93 505.167,1246.93 505.753,1247.54 506.34,1246.73 506.926,1247.48 507.513,1244.62 508.099,1246.47 508.686,1244.47 509.272,1244.87 509.858,1249.31 510.445,1248.57 511.031,1247.9 511.618,1248.5 512.204,1248.83 512.79,1250.53 513.377,1245.88 513.963,1246.47 514.55,1245.91 515.136,1245.05 515.722,1247.95 516.309,1248.59 516.895,1246.75 517.482,1244.88 518.068,1246.75 518.655,1247.03 519.241,1246.37 519.827,1245.79 520.414,1247.48 521,1248.07 521.587,1249.68 522.173,1247.76 522.759,1248.28 523.346,1248.61 523.932,1247.84 524.519,1249.44 525.105,1247.48 525.691,1245.62 526.278,1244.95 526.864,1243.35 527.451,1242.96 528.037,1247.19 528.624,1246.57 529.21,1246.16 529.796,1245.71 530.383,1243.91 530.969,1242 531.556,1243.88 532.142,1244.66 532.728,1244.15 533.315,1243.76 533.901,1244.45 534.488,1247.53 535.074,1245.56 535.661,1245.06 536.247,1244.37 536.833,1244.05 537.42,1243.36 538.006,1241.54 538.593,1242.4 539.179,1244.24 539.765,1243.86 540.352,1242.12 540.938,1245.02 541.525,1242.97 542.111,1243.51 542.697,1245.33 543.284,1243.47 543.87,1242.65 544.457,1243.07 545.043,1242.65 545.63,1241.27 546.216,1240.73 546.802,1238.99 547.389,1238.82 547.975,1238.35 548.562,1236.58 549.148,1235.33 549.734,1235.31 550.321,1236.28 550.907,1233.56 551.494,1235.87 552.08,1239.33 552.666,1240.14 553.253,1240.93 553.839,1239.08 554.426,1239.74 555.012,1240.4 555.599,1239.85 556.185,1240.45 556.771,1240.98 557.358,1242.89 557.944,1243.39 558.531,1243.88 559.117,1239.64 559.703,1239.34 560.29,1237.74 560.876,1242.08 561.463,1241.42 562.049,1241.87 562.635,1241.21 563.222,1241.67 563.808,1239.76 564.395,1240.44 564.981,1240.93 565.568,1241.24 566.154,1239.4 566.74,1240.03 567.327,1240.63 567.913,1242.46 568.5,1244.09 569.086,1240.92 569.672,1239.27 570.259,1239.84 570.845,1236.73 571.432,1235.98 572.018,1238.17 572.605,1238.9 573.191,1238.27 573.777,1236.59 574.364,1238.45 574.95,1239.31 575.537,1239.97 576.123,1240.47 576.709,1239.51 577.296,1237.6 577.882,1237.21 578.469,1236.68 579.055,1236.35 579.641,1233.53 580.228,1234.5 580.814,1235.09 581.401,1237.23 581.987,1234.41 582.574,1235.27 583.16,1237.25 583.746,1235.54 584.333,1235.15 584.919,1235.93 585.506,1234.54 586.092,1234.04 586.678,1233.69 587.265,1233.47 587.851,1233.29 588.438,1232.95 589.024,1235.21 589.61,1231.33 590.197,1227.68 590.783,1230.24 591.37,1233.58 591.956,1233.31 592.543,1233.95 593.129,1235.87 593.715,1235.69 594.302,1232.87 594.888,1232.62 595.475,1234.55 596.061,1236.39 596.647,1237.08 597.234,1236.32 597.82,1236.94 598.407,1236.18 598.993,1236.64 599.579,1235.9 600.166,1233.06 600.752,1232.7 601.339,1235.7 601.925,1235.43 602.512,1232.8 603.098,1233.89 603.684,1235.71 604.271,1236.28 604.857,1233.19 605.444,1232.87 606.03,1234.74 606.616,1234.27 607.203,1234.88 607.789,1233.21 608.376,1232.49 608.962,1229.78 609.548,1228.29 610.135,1226.07 610.721,1223.51 611.308,1222.34 611.894,1223.76 612.481,1222.56 613.067,1222.74 613.653,1220.29 614.24,1220.51 614.826,1225.2 615.413,1224.97 615.999,1223.84 616.585,1223.98 617.172,1220.53 617.758,1220.82 618.345,1221.11 618.931,1220.24 619.518,1221.81 620.104,1223.09 620.69,1222 621.277,1225.76 621.863,1224.2 622.45,1225.54 623.036,1222.05 623.622,1220.82 624.209,1219.86 624.795,1220.29 625.382,1224.41 625.968,1225.78 626.554,1226.75 627.141,1226.66 627.727,1225.34 628.314,1225.27 628.9,1228.52 629.487,1229.41 630.073,1226.84 630.659,1225.52 631.246,1226.54 631.832,1226.37 632.419,1225.02 633.005,1228.48 633.591,1234.02 634.178,1234.71 634.764,1233.87 635.351,1233.3 635.937,1235.13 636.523,1233.61 637.11,1233.23 637.696,1230.54 638.283,1229.01 638.869,1229.91 639.456,1230.41 640.042,1229.82 640.628,1227.38 641.215,1230.52 641.801,1230.12 642.388,1229.61 642.974,1230.23 643.56,1229.9 644.147,1233.04 644.733,1231.39 645.32,1234.27 645.906,1234.6 646.492,1232.95 647.079,1232.48 647.665,1230.84 648.252,1230.5 648.838,1232.23 649.425,1232.84 650.011,1233.69 650.597,1233.2 651.184,1233.63 651.77,1232.99 652.357,1231.2 652.943,1233.86 653.529,1233.45 654.116,1233.98 654.702,1233.42 655.289,1230.34 655.875,1228.5 656.462,1228.17 657.048,1225.4 657.634,1224.28 658.221,1224.19 658.807,1223.11 659.394,1226.46 659.98,1222.69 660.566,1222.49 661.153,1218.97 661.739,1219.28 662.326,1219.33 662.912,1219.36 663.498,1218.31 664.085,1220.93 664.671,1219.69 665.258,1220.97 665.844,1220.96 666.431,1220.99 667.017,1223.5 667.603,1223.23 668.19,1222.16 668.776,1222.3 669.363,1222.33 669.949,1222.25 670.535,1223.63 671.122,1225.76 671.708,1221.88 672.295,1221.89 672.881,1220.84 673.467,1220.9 674.054,1219.81 674.64,1219.81 675.227,1221.22 675.813,1222.35 676.4,1222.17 676.986,1221.97 677.572,1220.57 678.159,1220.55 678.745,1220.12 679.332,1221.35 679.918,1223.73 680.504,1224.9 681.091,1224.7 681.677,1223.4 682.264,1220.84 682.85,1220.89 683.436,1218.57 684.023,1220.06 684.609,1223.7 685.196,1223.73 685.782,1223.49 686.369,1224.4 686.955,1225.14 687.541,1223.6 688.128,1223.68 688.714,1223.59 689.301,1223.2 689.887,1224.37 690.473,1226.68 691.06,1226.39 691.646,1227.35 692.233,1228.38 692.819,1228.17 693.405,1229.06 693.992,1228.66 694.578,1229.48 695.165,1228.11 695.751,1227.52 696.338,1229.39 696.924,1228.84 697.51,1228.37 698.097,1230.5 698.683,1227.88 699.27,1227.51 699.856,1227.21 700.442,1226.95 701.029,1228.7 701.615,1225.91 702.202,1223.18 702.788,1220.85 703.375,1220.92 703.961,1222.22 704.547,1220.86 705.134,1220.86 705.72,1219.51 706.307,1218.35 706.893,1218.49 707.479,1216.29 708.066,1214 708.652,1216.5 709.239,1217.97 709.825,1219.11 710.411,1221.39 710.998,1225.06 711.584,1222.43 712.171,1223.38 712.757,1222 713.344,1223.18 713.93,1219.48 714.516,1221.95 715.103,1221.95 715.689,1222.75 716.276,1221.57 716.862,1221.64 717.448,1221.49 718.035,1219.05 718.621,1219.22 719.208,1219.24 719.794,1222.91 720.38,1222.77 720.967,1223.7 721.553,1223.49 722.14,1224.56 722.726,1224.42 723.313,1221.93 723.899,1225.47 724.485,1223.91 725.072,1223.64 725.658,1223.3 726.245,1220.55 726.831,1219.15 727.417,1221.38 728.004,1222.43 728.59,1222.3 729.177,1218.68 729.763,1218.97 730.349,1217.83 730.936,1216.76 731.522,1215.9 732.109,1216.14 732.695,1212.98 733.282,1213.47 733.868,1216.02 734.454,1216.01 735.041,1216.53 735.627,1216.67 736.214,1217.98 736.8,1217.89 737.386,1219.11 737.973,1218.23 738.559,1216.91 739.146,1216.96 739.732,1215.91 740.318,1215.75 740.905,1214.84 741.491,1215.18 742.078,1215.26 742.664,1215.52 743.251,1216.89 743.837,1218.12 744.423,1220.52 745.01,1221.47 745.596,1222.44 746.183,1222.1 746.769,1219.7 747.355,1218.91 747.942,1217.6 748.528,1215.46 749.115,1215.62 749.701,1214.5 750.288,1214.93 750.874,1218.58 751.46,1221.02 752.047,1219.84 752.633,1219.95 753.22,1220.07 753.806,1219.01 754.392,1219 754.979,1220.05 755.565,1221.31 756.152,1221.36 756.738,1220.26 757.324,1219.12 757.911,1219.28 758.497,1219.39 759.084,1219.54 759.67,1220.87 760.257,1220.81 760.843,1220.78 761.429,1219.6 762.016,1218.31 762.602,1218.31 763.189,1218.37 763.775,1217.16 764.361,1216.05 764.948,1216.35 765.534,1217.54 766.121,1218.95 766.707,1220.09 767.293,1218.72 767.88,1219.95 768.466,1217.49 769.053,1220.01 769.639,1218.95 770.226,1217.62 770.812,1220.07 771.398,1219.18 771.985,1220.21 772.571,1221.11 773.158,1222.07 773.744,1220.81 774.33,1220.65 774.917,1221.52 775.503,1220.31 776.09,1220.55 776.676,1222.71 777.262,1223.79 777.849,1222.45 778.435,1225.64 779.022,1225.18 779.608,1226.07 780.195,1225.79 780.781,1224.41 781.367,1224.07 781.954,1226.99 782.54,1226.63 783.127,1228.36 783.713,1225.63 784.299,1227.15 784.886,1227.78 785.472,1228.63 786.059,1227.03 786.645,1226.47 787.232,1226 787.818,1225.58 788.404,1226.45 788.991,1227.08 789.577,1226.4 790.164,1225.89 790.75,1225.4 791.336,1222.58 791.923,1221.35 792.509,1221.25 793.096,1222.36 793.682,1222.36 794.268,1222.2 794.855,1221.95 795.441,1222.78 796.028,1223.68 796.614,1222.35 797.201,1225.72 797.787,1224.16 798.373,1223.8 798.96,1224.5 799.546,1225.22 800.133,1225.98 800.719,1224.45 801.305,1224.14 801.892,1223.56 802.478,1223.24 803.065,1221.72 803.651,1221.33 804.237,1219.82 804.824,1219.68 805.41,1218.1 805.997,1220.44 806.583,1221.15 807.17,1218.58 807.756,1219.58 808.342,1218.32 808.929,1218.28 809.515,1214.77 810.102,1214.82 810.688,1213.84 811.274,1212.98 811.861,1214.39 812.447,1214.47 813.034,1214.53 813.62,1217.1 814.206,1217.25 814.793,1219.36 815.379,1219.32 815.966,1222.66 816.552,1222.34 817.139,1223.18 817.725,1224.16 818.311,1223.89 818.898,1224.47 819.484,1225.21 820.071,1224.66 820.657,1224.01 821.243,1222.51 821.83,1219.97 822.416,1219.89 823.003,1217.49 823.589,1217.46 824.175,1219.52 824.762,1220.63 825.348,1219.36 825.935,1221.55 826.521,1219.05 827.108,1220.15 827.694,1220.04 828.28,1223.52 828.867,1222.28 829.453,1219.88 830.04,1217.21 830.626,1217.08 831.212,1217.03 831.799,1214.77 832.385,1216.07 832.972,1217.06 833.558,1218.28 834.145,1225.43 834.731,1225.05 835.317,1220.07 835.904,1216.2 836.49,1216.28 837.077,1216.15 837.663,1215.17 838.249,1214.07 838.836,1215.49 839.422,1214.42 840.009,1215.64 840.595,1215.75 841.181,1218.29 841.768,1218.34 842.354,1218.12 842.941,1217.28 843.527,1217.5 844.114,1216.45 844.7,1215.51 845.286,1215.71 845.873,1217.17 846.459,1217.21 847.046,1217.08 847.632,1220.41 848.218,1216.89 848.805,1218.06 849.391,1218.02 849.978,1217.95 850.564,1218.9 851.15,1216.66 851.737,1219.12 852.323,1217.77 852.91,1217.86 853.496,1218.94 854.083,1216.48 854.669,1215.51 855.255,1213.19 855.842,1213.34 856.428,1216.09 857.015,1214.8 857.601,1213.77 858.187,1212.95 858.774,1213.17 859.36,1212.25 859.947,1212.48 860.533,1213.87 861.119,1215.04 861.706,1213.71 862.292,1213.84 862.879,1213.9 863.465,1214.11 864.052,1214.34 864.638,1213.04 865.224,1212.34 865.811,1213.65 866.397,1208.99 866.984,1208.33 867.57,1211.31 868.156,1211.62 868.743,1212.1 869.329,1214.92 869.916,1211.08 870.502,1208.93 871.089,1209.39 871.675,1212.2 872.261,1213.32 872.848,1213.45 873.434,1211.34 874.021,1212.68 874.607,1216.35 875.193,1218.71 875.78,1218.84 876.366,1217.68 876.953,1219.05 877.539,1218.92 878.125,1218.5 878.712,1216.21 879.298,1216.45 879.885,1216.42 880.471,1215.29 881.058,1216.62 881.644,1215.58 882.23,1215.56 882.817,1211.98 883.403,1211.13 883.99,1209.05 884.576,1210.53 885.162,1210.97 885.749,1210.04 886.335,1209.14 886.922,1209.43 887.508,1206.34 888.094,1208.1 888.681,1208.53 889.267,1208.88 889.854,1208.18 890.44,1208.86 891.027,1211.77 891.613,1214.22 892.199,1213.44 892.786,1216.9 893.372,1219.43 893.959,1220.35 894.545,1218.92 895.131,1217.8 895.718,1217.54 896.304,1219.66 896.891,1218.29 897.477,1215.98 898.063,1217.19 898.65,1215.79 899.236,1215.83 899.823,1217.09 900.409,1217.26 900.996,1215.05 901.582,1214.03 902.168,1215.44 902.755,1216.58 903.341,1217.88 903.928,1219.99 904.514,1219.67 905.1,1215.92 905.687,1218.07 906.273,1218.27 906.86,1217.92 907.446,1218.01 908.032,1219.3 908.619,1218.05 909.205,1219.11 909.792,1221.31 910.378,1219.93 910.965,1218.47 911.551,1219.41 912.137,1220.37 912.724,1219.14 913.31,1220.41 913.897,1221.39 914.483,1221.14 915.069,1222.3 915.656,1220.57 916.242,1220.49 916.829,1220.45 917.415,1220.32 918.002,1218.75 918.588,1218.49 919.174,1219.64 919.761,1219.26 920.347,1218.96 920.934,1218.48 921.52,1219.7 922.106,1216.15 922.693,1216.18 923.279,1216.41 923.866,1216.19 924.452,1217.45 925.038,1218.72 925.625,1220.85 926.211,1222.92 926.798,1222.44 927.384,1221.03 927.971,1220.84 928.557,1216.95 929.143,1218.04 929.73,1217.88 930.316,1218.84 930.903,1218.63 931.489,1218.36 932.075,1220.79 932.662,1220.79 933.248,1220.67 933.835,1222.86 934.421,1220.22 935.007,1221.22 935.594,1222.18 936.18,1221.86 936.767,1221.43 937.353,1217.36 937.94,1217.39 938.526,1216.33 939.112,1215.35 939.699,1214.35 940.285,1215.53 940.872,1214.39 941.458,1213.42 942.044,1213.52 942.631,1214.78 943.217,1218.65 943.804,1217.39 944.39,1218.65 944.976,1218.58 945.563,1218.31 946.149,1219.19 946.736,1217.92 947.322,1215.31 947.909,1215.38 948.495,1215.48 949.081,1216.62 949.668,1216.64 950.254,1218.01 950.841,1219.07 951.427,1218.89 952.013,1219.72 952.6,1219.44 953.186,1220.51 953.773,1217.94 954.359,1218.02 954.945,1218.84 955.532,1216.34 956.118,1215.03 956.705,1212.73 957.291,1211.61 957.878,1210.64 958.464,1212.86 959.05,1213 959.637,1212.95 960.223,1212.08 960.81,1210.96 961.396,1212.41 961.982,1213.63 962.569,1213.9 963.155,1214.37 963.742,1213.38 964.328,1212.47 964.915,1212.53 965.501,1213.78 966.087,1215.12 966.674,1212.73 967.26,1210.31 967.847,1209.68 968.433,1208.94 969.019,1208.17 969.606,1209.78 970.192,1207.69 970.779,1209.21 971.365,1209.51 971.951,1209.86 972.538,1211.41 973.124,1209.37 973.711,1209.7 974.297,1210.09 974.884,1210.3 975.47,1210.55 976.056,1212 976.643,1212.5 977.229,1213.9 977.816,1215.31 978.402,1214.5 978.988,1212.21 979.575,1213.73 980.161,1214.05 980.748,1215.31 981.334,1216.46 981.92,1216.6 982.507,1215.27 983.093,1214.33 983.68,1214.6 984.266,1212.39 984.853,1212.53 985.439,1211.43 986.025,1211.75 986.612,1214.43 987.198,1215.66 987.785,1215.38 988.371,1215.35 988.957,1215.5 989.544,1214.45 990.13,1216.05 990.717,1214.97 991.303,1216.28 991.889,1216.27 992.476,1215.05 993.062,1214.89 993.649,1213.85 994.235,1213 994.822,1213.11 995.408,1213.21 995.994,1213.27 996.581,1213.48 997.167,1214.54 997.754,1214.42 998.34,1213.39 998.926,1213.53 999.513,1214.89 1000.1,1216.26 1000.69,1216.29 1001.27,1212.7 1001.86,1212.6 1002.44,1215.15 1003.03,1216.18 1003.62,1216.32 1004.2,1216.61 1004.79,1216.31 1005.38,1216.34 1005.96,1217.61 1006.55,1217.55 1007.14,1217.48 1007.72,1216.32 1008.31,1216.07 1008.9,1218.43 1009.48,1216.08 1010.07,1216.18 1010.65,1215.01 1011.24,1217.58 1011.83,1220 1012.41,1222.06 1013,1221.87 1013.59,1221.88 1014.17,1222.81 1014.76,1223.62 1015.35,1224.43 1015.93,1223.97 1016.52,1224.71 1017.11,1224.39 1017.69,1221.84 1018.28,1220.38 1018.86,1218.78 1019.45,1218.75 1020.04,1218.48 1020.62,1218.31 1021.21,1218.59 1021.8,1218.61 1022.38,1217.28 1022.97,1217.07 1023.56,1217.02 1024.14,1217.16 1024.73,1217.29 1025.32,1215.9 1025.9,1216.01 1026.49,1219.58 1027.07,1219.17 1027.66,1220.19 1028.25,1217.65 1028.83,1216.44 1029.42,1216.53 1030.01,1215.32 1030.59,1215.25 1031.18,1215.39 1031.77,1216.65 1032.35,1215.45 1032.94,1214.45 1033.52,1215.63 1034.11,1216.79 1034.7,1214.38 1035.28,1215.5 1035.87,1213.26 1036.46,1217.02 1037.04,1216.93 1037.63,1218.11 1038.22,1219.01 1038.8,1217.53 1039.39,1218.73 1039.98,1218.32 1040.56,1218.26 1041.15,1217.95 1041.73,1215.38 1042.32,1216.53 1042.91,1216.41 1043.49,1216.18 1044.08,1218.62 1044.67,1220.65 1045.25,1218.01 1045.84,1216.64 1046.43,1216.51 1047.01,1214.16 1047.6,1215.36 1048.19,1215.61 1048.77,1215.48 1049.36,1212.97 1049.94,1212.89 1050.53,1210.89 1051.12,1213.71 1051.7,1214.98 1052.29,1215.99 1052.88,1215.75 1053.46,1214.55 1054.05,1214.49 1054.64,1215.78 1055.22,1215.76 1055.81,1218.24 1056.39,1216.8 1056.98,1216.64 1057.57,1216.51 1058.15,1215.24 1058.74,1215.27 1059.33,1216.36 1059.91,1215.35 1060.5,1214.07 1061.09,1215.22 1061.67,1218.75 1062.26,1217.38 1062.85,1216.26 1063.43,1217.37 1064.02,1217.24 1064.6,1217.33 1065.19,1217.2 1065.78,1217.06 1066.36,1217.44 1066.95,1217.31 1067.54,1216.93 1068.12,1216.96 1068.71,1218.08 1069.3,1217.95 1069.88,1217.91 1070.47,1215.56 1071.06,1216.67 1071.64,1214.25 1072.23,1214.37 1072.81,1213.37 1073.4,1209.95 1073.99,1209.18 1074.57,1210.35 1075.16,1213.13 1075.75,1213.39 1076.33,1213.51 1076.92,1214.83 1077.51,1214.96 1078.09,1212.54 1078.68,1213.91 1079.26,1215.16 1079.85,1215.01 1080.44,1214.86 1081.02,1213.69 1081.61,1213.81 1082.2,1213.83 1082.78,1213.9 1083.37,1215.08 1083.96,1213.97 1084.54,1213.79 1085.13,1217.3 1085.72,1218.49 1086.3,1218.26 1086.89,1220.36 1087.47,1221.14 1088.06,1222.86 1088.65,1224.56 1089.23,1225.24 1089.82,1224.73 1090.41,1223.06 1090.99,1225.26 1091.58,1222.3 1092.17,1224.39 1092.75,1222.8 1093.34,1222.32 1093.93,1218.44 1094.51,1219.44 1095.1,1219.32 1095.68,1217.88 1096.27,1216.72 1096.86,1215.68 1097.44,1216.87 1098.03,1216.87 1098.62,1216.79 1099.2,1215.82 1099.79,1215.74 1100.38,1214.48 1100.96,1213.35 1101.55,1213.41 1102.14,1214.57 1102.72,1213.43 1103.31,1213.64 1103.89,1213.77 1104.48,1212.86 1105.07,1214.2 1105.65,1215.25 1106.24,1216.25 1106.83,1217.37 1107.41,1217.34 1108,1216.31 1108.59,1218.45 1109.17,1218.42 1109.76,1221.9 1110.34,1221.56 1110.93,1220.87 1111.52,1221.79 1112.1,1221.63 1112.69,1220.43 1113.28,1219.16 1113.86,1217.8 1114.45,1219 1115.04,1217.62 1115.62,1215.43 1116.21,1216.65 1116.8,1215.56 1117.38,1215.69 1117.97,1213.34 1118.55,1212.43 1119.14,1212.68 1119.73,1211.71 1120.31,1211 1120.9,1209.86 1121.49,1208.88 1122.07,1210.37 1122.66,1212.99 1123.25,1209.58 1123.83,1211.22 1124.42,1211.57 1125.01,1210.57 1125.59,1210.57 1126.18,1209.74 1126.76,1208.86 1127.35,1208 1127.94,1208.32 1128.52,1207.53 1129.11,1204.43 1129.7,1204.87 1130.28,1205.64 1130.87,1208.49 1131.46,1209.03 1132.04,1210.6 1132.63,1212.05 1133.21,1211.25 1133.8,1213.69 1134.39,1214.98 1134.97,1215.23 1135.56,1213.27 1136.15,1214.44 1136.73,1214.24 1137.32,1215.33 1137.91,1216.34 1138.49,1217.53 1139.08,1215.07 1139.67,1213.97 1140.25,1215.19 1140.84,1215.41 1141.42,1216.91 1142.01,1220.29 1142.6,1217.81 1143.18,1217.4 1143.77,1217.24 1144.36,1217.33 1144.94,1216.04 1145.53,1219.38 1146.12,1219.31 1146.7,1220.34 1147.29,1220.11 1147.88,1217.63 1148.46,1216.29 1149.05,1217.46 1149.63,1217.3 1150.22,1218.46 1150.81,1219.51 1151.39,1219.22 1151.98,1215.49 1152.57,1214.24 1153.15,1214.2 1153.74,1213.1 1154.33,1213.21 1154.91,1213.63 1155.5,1212.75 1156.09,1211.71 1156.67,1209.36 1157.26,1209.8 1157.84,1212.57 1158.43,1213.96 1159.02,1215.32 1159.6,1215.36 1160.19,1216.53 1160.78,1216.5 1161.36,1215.18 1161.95,1216.1 1162.54,1219.42 1163.12,1218.11 1163.71,1216.71 1164.29,1214.3 1164.88,1214.39 1165.47,1215.58 1166.05,1213.18 1166.64,1211 1167.23,1211.31 1167.81,1212.53 1168.4,1211.44 1168.99,1212.8 1169.57,1213.04 1170.16,1215.25 1170.75,1215.17 1171.33,1218.77 1171.92,1220.8 1172.5,1220.45 1173.09,1218.88 1173.68,1222.02 1174.26,1221.49 1174.85,1218.68 1175.44,1218.59 1176.02,1219.77 1176.61,1220.62 1177.2,1220.57 1177.78,1219.03 1178.37,1217.78 1178.96,1216.41 1179.54,1216.4 1180.13,1216.19 1180.71,1217.49 1181.3,1218.39 1181.89,1221.98 1182.47,1223.67 1183.06,1220.96 1183.65,1220.84 1184.23,1219.34 1184.82,1219.16 1185.41,1220.03 1185.99,1218.68 1186.58,1218.54 1187.16,1217.51 1187.75,1217.46 1188.34,1215.22 1188.92,1215.3 1189.51,1217.53 1190.1,1216.44 1190.68,1215.25 1191.27,1217.48 1191.86,1217.2 1192.44,1218.38 1193.03,1218.34 1193.62,1218.25 1194.2,1217.99 1194.79,1216.64 1195.37,1215.25 1195.96,1215.07 1196.55,1214.02 1197.13,1216.52 1197.72,1215.34 1198.31,1214.03 1198.89,1215.2 1199.48,1216.4 1200.07,1215.32 1200.65,1213.86 1201.24,1213.84 1201.83,1214.95 1202.41,1214.91 1203,1215.01 1203.58,1212.71 1204.17,1215.29 1204.76,1214.35 1205.34,1215.93 1205.93,1213.56 1206.52,1214.85 1207.1,1213.77 1207.69,1215.37 1208.28,1216.43 1208.86,1217.38 1209.45,1218.31 1210.03,1218.38 1210.62,1219.31 1211.21,1217.93 1211.79,1217.97 1212.38,1219.28 1212.97,1220.45 1213.55,1220.51 1214.14,1222.77 1214.73,1223.53 1215.31,1222.98 1215.9,1220.29 1216.49,1221.6 1217.07,1219.14 1217.66,1220.16 1218.24,1218.9 1218.83,1218.71 1219.42,1220.99 1220,1220.59 1220.59,1219.85 1221.18,1219.92 1221.76,1218.32 1222.35,1216.97 1222.94,1217.93 1223.52,1217.87 1224.11,1217.72 1224.7,1217.79 1225.28,1217.67 1225.87,1218.51 1226.45,1215.9 1227.04,1215.93 1227.63,1214.6 1228.21,1213.3 1228.8,1210.97 1229.39,1210.12 1229.97,1210.29 1230.56,1211.74 1231.15,1213.01 1231.73,1215.39 1232.32,1216.52 1232.91,1215.4 1233.49,1217.66 1234.08,1216.6 1234.66,1216.28 1235.25,1216.3 1235.84,1215.07 1236.42,1214.85 1237.01,1212.53 1237.6,1211.77 1238.18,1211.98 1238.77,1212.22 1239.36,1212.54 1239.94,1213.81 1240.53,1213.75 1241.11,1212.64 1241.7,1213.8 1242.29,1214.03 1242.87,1215.29 1243.46,1214.27 1244.05,1215.4 1244.63,1216.63 1245.22,1216.52 1245.81,1215.19 1246.39,1215.17 1246.98,1213.68 1247.57,1212.68 1248.15,1211.93 1248.74,1212.26 1249.32,1212.47 1249.91,1209.12 1250.5,1210.48 1251.08,1209.53 1251.67,1208.85 1252.26,1210.58 1252.84,1209.74 1253.43,1209.17 1254.02,1211.87 1254.6,1212.34 1255.19,1212.39 1255.78,1213.84 1256.36,1215.12 1256.95,1214.02 1257.53,1211.76 1258.12,1213.06 1258.71,1214.13 1259.29,1213.04 1259.88,1213.47 1260.47,1214.67 1261.05,1213.5 1261.64,1214.58 1262.23,1214.51 1262.81,1213.81 1263.4,1214.14 1263.98,1214.04 1264.57,1216.67 1265.16,1216.91 1265.74,1219.29 1266.33,1220.34 1266.92,1220.12 1267.5,1218.66 1268.09,1220.9 1268.68,1220.55 1269.26,1219.06 1269.85,1221.25 1270.44,1219.85 1271.02,1220.72 1271.61,1220.25 1272.19,1219.84 1272.78,1219.51 1273.37,1219.42 1273.95,1217.96 1274.54,1216.76 1275.13,1215.71 1275.71,1214.53 1276.3,1213.4 1276.89,1211.17 1277.47,1212.43 1278.06,1214.82 1278.65,1216.09 1279.23,1217.03 1279.82,1216.83 1280.4,1217.07 1280.99,1214.69 1281.58,1211.28 1282.16,1213.89 1282.75,1212.67 1283.34,1212.99 1283.92,1214.41 1284.51,1215.58 1285.1,1218.04 1285.68,1219.11 1286.27,1217.48 1286.86,1215.31 1287.44,1214.29 1288.03,1213.09 1288.61,1214.23 1289.2,1213.18 1289.79,1212.05 1290.37,1212.18 1290.96,1212.37 1291.55,1212.59 1292.13,1211.53 1292.72,1211.88 1293.31,1213.27 1293.89,1214.45 1294.48,1215.59 1295.06,1215.51 1295.65,1215.42 1296.24,1215.62 1296.82,1216.68 1297.41,1216.61 1298,1218.95 1298.58,1219.82 1299.17,1220.93 1299.76,1220.65 1300.34,1221.48 1300.93,1218.93 1301.52,1217.58 1302.1,1221.22 1302.69,1221.13 1303.27,1218.47 1303.86,1218.49 1304.45,1218.29 1305.03,1216.75 1305.62,1216.91 1306.21,1215.72 1306.79,1215.76 1307.38,1212.17 1307.97,1209.97 1308.55,1211.59 1309.14,1210.73 1309.73,1212.26 1310.31,1212.38 1310.9,1213.75 1311.48,1212.82 1312.07,1214.16 1312.66,1216.53 1313.24,1215.24 1313.83,1216.2 1314.42,1216.36 1315,1219.57 1315.59,1219.37 1316.18,1220.17 1316.76,1221.2 1317.35,1219.88 1317.93,1219.73 1318.52,1220.79 1319.11,1220.35 1319.69,1219.83 1320.28,1220.48 1320.87,1219.09 1321.45,1216.81 1322.04,1218.84 1322.63,1218.62 1323.21,1220.96 1323.8,1219.35 1324.39,1219.15 1324.97,1218.72 1325.56,1214.87 1326.14,1214.92 1326.73,1211.23 1327.32,1211.27 1327.9,1212.65 1328.49,1212.71 1329.08,1214.07 1329.66,1215 1330.25,1214 1330.84,1212.9 1331.42,1212.79 1332.01,1211.71 1332.6,1211.72 1333.18,1211.77 1333.77,1213.39 1334.35,1217.09 1334.94,1215.63 1335.53,1215.61 1336.11,1216.96 1336.7,1216.91 1337.29,1216.89 1337.87,1214.35 1338.46,1216.96 1339.05,1214.67 1339.63,1216.77 1340.22,1216.76 1340.8,1217.75 1341.39,1218.84 1341.98,1219.77 1342.56,1220.64 1343.15,1219.35 1343.74,1218.02 1344.32,1217.83 1344.91,1215.33 1345.5,1215.26 1346.08,1213.9 1346.67,1215.29 1347.26,1216.22 1347.84,1217.22 1348.43,1218.11 1349.01,1216.89 1349.6,1217.29 1350.19,1219.57 1350.77,1219.45 1351.36,1219.06 1351.95,1220.06 1352.53,1219.7 1353.12,1221.78 1353.71,1220.1 1354.29,1219.73 1354.88,1219.6 1355.47,1220.43 1356.05,1219.24 1356.64,1218.13 1357.22,1217.99 1357.81,1217.54 1358.4,1215.92 1358.98,1218.14 1359.57,1219.13 1360.16,1220.19 1360.74,1217.61 1361.33,1212.94 1361.92,1214.32 1362.5,1214.27 1363.09,1214.18 1363.68,1214.39 1364.26,1217.99 1364.85,1216.98 1365.43,1214.81 1366.02,1216.13 1366.61,1217.14 1367.19,1219.35 1367.78,1217.92 1368.37,1217.88 1368.95,1217.78 1369.54,1218.83 1370.13,1220.09 1370.71,1218.96 1371.3,1217.26 1371.88,1218.39 1372.47,1216 1373.06,1219.28 1373.64,1222.58 1374.23,1222.23 1374.82,1222.85 1375.4,1221.25 1375.99,1218.56 1376.58,1218.61 1377.16,1219.41 1377.75,1220.69 1378.34,1219.09 1378.92,1221.24 1379.51,1222.07 1380.09,1220.62 1380.68,1220.25 1381.27,1220.1 1381.85,1219.84 1382.44,1219.34 1383.03,1216.73 1383.61,1216.72 1384.2,1216.47 1384.79,1217.56 1385.37,1219.79 1385.96,1219.19 1386.55,1220.01 1387.13,1215.43 1387.72,1212.02 1388.3,1212.39 1388.89,1211.53 1389.48,1211.61 1390.06,1211.64 1390.65,1210.78 1391.24,1210.86 1391.82,1212.24 1392.41,1214.55 1393,1215.58 1393.58,1217.74 1394.17,1217.59 1394.75,1219.67 1395.34,1216.02 1395.93,1214.62 1396.51,1214.61 1397.1,1215.71 1397.69,1213.39 1398.27,1212.27 1398.86,1213.89 1399.45,1215.06 1400.03,1213.82 1400.62,1213.96 1401.21,1215.04 1401.79,1213.78 1402.38,1217.42 1402.96,1219.59 1403.55,1219.24 1404.14,1218.72 1404.72,1219.67 1405.31,1218.39 1405.9,1215.97 1406.48,1214.71 1407.07,1215.8 1407.66,1215.78 1408.24,1214.43 1408.83,1215.34 1409.42,1214.22 1410,1211.84 1410.59,1212.07 1411.17,1215.73 1411.76,1214.5 1412.35,1211.04 1412.93,1210.11 1413.52,1209.28 1414.11,1209.66 1414.69,1208.82 1415.28,1207.98 1415.87,1207.19 1416.45,1206.65 1417.04,1205.96 1417.63,1208.82 1418.21,1210.37 1418.8,1209.68 1419.38,1212.56 1419.97,1212.93 1420.56,1213 1421.14,1211.87 1421.73,1212.31 1422.32,1212.38 1422.9,1211.48 1423.49,1211.53 1424.08,1210.68 1424.66,1212.08 1425.25,1212.07 1425.83,1213.59 1426.42,1215.77 1427.01,1214.64 1427.59,1215.65 1428.18,1215.53 1428.77,1215.55 1429.35,1213.1 1429.94,1213.55 1430.53,1211.27 1431.11,1210.16 1431.7,1210.14 1432.29,1211.4 1432.87,1209.13 1433.46,1210.84 1434.04,1209.91 1434.63,1209.14 1435.22,1209.61 1435.8,1209.85 1436.39,1216.78 1436.98,1214.17 1437.56,1213.24 1438.15,1213.42 1438.74,1211.3 1439.32,1210.3 1439.91,1210.56 1440.5,1212.41 1441.08,1212.66 1441.67,1212.71 1442.25,1215.39 1442.84,1215.28 1443.43,1217.8 1444.01,1220.17 1444.6,1220.15 1445.19,1220.11 1445.77,1217.65 1446.36,1220.73 1446.95,1221.6 1447.53,1221.16 1448.12,1222.17 1448.7,1221.74 1449.29,1220.2 1449.88,1216.73 1450.46,1216.71 1451.05,1217.82 1451.64,1216.45 1452.22,1217.41 1452.81,1218.37 1453.4,1218.21 1453.98,1219.4 1454.57,1218.05 1455.16,1216.65 1455.74,1217.7 1456.33,1215.19 1456.91,1216.57 1457.5,1217.85 1458.09,1214.17 1458.67,1212.73 1459.26,1210.52 1459.85,1210.81 1460.43,1205.38 1461.02,1204.74 1461.61,1202.9 1462.19,1204.85 1462.78,1205.31 1463.37,1205.69 1463.95,1209.79 1464.54,1208.9 1465.12,1206.76 1465.71,1207.19 1466.3,1208.86 1466.88,1209 1467.47,1210.54 1468.06,1210.76 1468.64,1211.17 1469.23,1212.57 1469.82,1211.43 1470.4,1211.63 1470.99,1212.88 1471.57,1216.27 1472.16,1219.68 1472.75,1219.73 1473.33,1220.57 1473.92,1221.23 1474.51,1221.06 1475.09,1217.22 1475.68,1219.33 1476.27,1221.6 1476.85,1218.77 1477.44,1217.51 1478.03,1217.31 1478.61,1216.1 1479.2,1214.68 1479.78,1213.62 1480.37,1214.03 1480.96,1214.18 1481.54,1213.07 1482.13,1212.08 1482.72,1213.73 1483.3,1212.4 1483.89,1212.39 1484.48,1213.61 1485.06,1212.59 1485.65,1211.65 1486.24,1211.86 1486.82,1211.93 1487.41,1209.65 1487.99,1210.03 1488.58,1211.51 1489.17,1211.55 1489.75,1212.75 1490.34,1212.88 1490.93,1215.62 1491.51,1215.76 1492.1,1218.08 1492.69,1217 1493.27,1217.04 1493.86,1216.88 1494.45,1217.94 1495.03,1221.3 1495.62,1223.31 1496.2,1222.81 1496.79,1221.2 1497.38,1221.06 1497.96,1220.77 1498.55,1216.03 1499.14,1214.8 1499.72,1218.56 1500.31,1218.53 1500.9,1218.54 1501.48,1217.38 1502.07,1215.21 1502.65,1214.05 1503.24,1214.24 1503.83,1213.15 1504.41,1212.05 1505,1213.58 1505.59,1214.78 1506.17,1215.1 1506.76,1217.37 1507.35,1215.97 1507.93,1216.11 1508.52,1217.07 1509.11,1214.55 1509.69,1212.41 1510.28,1214.78 1510.86,1215.81 1511.45,1215.72 1512.04,1215.38 1512.62,1214.31 1513.21,1213.09 1513.8,1214.56 1514.38,1214.39 1514.97,1213.28 1515.56,1216.75 1516.14,1216.71 1516.73,1215.72 1517.32,1215.64 1517.9,1215.51 1518.49,1212.1 1519.07,1214.66 1519.66,1214.76 1520.25,1214.85 1520.83,1214.77 1521.42,1216.12 1522.01,1216.22 1522.59,1216.04 1523.18,1216.09 1523.77,1218.37 1524.35,1218.02 1524.94,1216.77 1525.52,1217.92 1526.11,1216.26 1526.7,1216.22 1527.28,1215.11 1527.87,1215.23 1528.46,1214.1 1529.04,1213.26 1529.63,1213.29 1530.22,1215.84 1530.8,1216.96 1531.39,1217.72 1531.98,1217.31 1532.56,1216.13 1533.15,1214.84 1533.73,1217.04 1534.32,1216.68 1534.91,1216.56 1535.49,1214.11 1536.08,1214.22 1536.67,1214.39 1537.25,1214.42 1537.84,1215.56 1538.43,1216.75 1539.01,1217.79 1539.6,1216.59 1540.19,1217.68 1540.77,1217.76 1541.36,1217.78 1541.94,1216.69 1542.53,1216.5 1543.12,1215.21 1543.7,1216.18 1544.29,1216.19 1544.88,1214.97 1545.46,1213.65 1546.05,1214.8 1546.64,1216.07 1547.22,1218.37 1547.81,1218.05 1548.4,1220.17 1548.98,1222.03 1549.57,1222.09 1550.15,1221.69 1550.74,1221.12 1551.33,1219.72 1551.91,1217.08 1552.5,1214.52 1553.09,1215.52 1553.67,1215.66 1554.26,1214.59 1554.85,1213.65 1555.43,1216.25 1556.02,1215.22 1556.6,1215.04 1557.19,1216.06 1557.78,1214.44 1558.36,1214.77 1558.95,1214.67 1559.54,1214.65 1560.12,1215.74 1560.71,1216.8 1561.3,1214.35 1561.88,1216.47 1562.47,1217.75 1563.06,1218.43 1563.64,1220.5 1564.23,1220.31 1564.81,1219.85 1565.4,1220.98 1565.99,1220.21 1566.57,1221.02 1567.16,1220.78 1567.75,1219.29 1568.33,1219.24 1568.92,1217.92 1569.51,1217.57 1570.09,1218.65 1570.68,1217.23 1571.27,1217.32 1571.85,1215.77 1572.44,1215.8 1573.02,1213.64 1573.61,1215.9 1574.2,1220.6 1574.78,1220.39 1575.37,1218.97 1575.96,1218.88 1576.54,1219.86 1577.13,1217.26 1577.72,1218.32 1578.3,1217.27 1578.89,1216 1579.47,1214.86 1580.06,1214.88 1580.65,1213.57 1581.23,1213.57 1581.82,1213.87 1582.41,1215.12 1582.99,1215.04 1583.58,1216.15 1584.17,1217.24 1584.75,1218.51 1585.34,1220.64 1585.93,1221.58 1586.51,1221.29 1587.1,1219.99 1587.68,1216.29 1588.27,1215 1588.86,1214.84 1589.44,1212.73 1590.03,1214.14 1590.62,1215.55 1591.2,1214.49 1591.79,1213.2 1592.38,1215.55 1592.96,1217.92 1593.55,1216.48 1594.14,1214.16 1594.72,1214.18 1595.31,1215.34 1595.89,1210.68 1596.48,1212.21 1597.07,1211.29 1597.65,1211.55 1598.24,1211.71 1598.83,1214.27 1599.41,1213.14 1600,1216.82 1600.59,1217.83 1601.17,1217.7 1601.76,1216.21 1602.34,1217 1602.93,1213.33 1603.52,1217.16 1604.1,1217.29 1604.69,1215.31 1605.28,1216.65 1605.86,1215.23 1606.45,1217.69 1607.04,1213.16 1607.62,1213.54 1608.21,1216.2 1608.8,1214.03 1609.38,1214.21 1609.97,1214.38 1610.55,1216.55 1611.14,1215.51 1611.73,1214.34 1612.31,1214.08 1612.9,1214.2 1613.49,1210.74 1614.07,1209.82 1614.66,1208.79 1615.25,1209.33 1615.83,1209.78 1616.42,1209.9 1617.01,1212.48 1617.59,1214.12 1618.18,1212.17 1618.76,1214.73 1619.35,1213.76 1619.94,1214.12 1620.52,1215.22 1621.11,1215.3 1621.7,1216.35 1622.28,1216.16 1622.87,1216.96 1623.46,1213.35 1624.04,1211.16 1624.63,1211.32 1625.22,1211.74 1625.8,1210.88 1626.39,1214.71 1626.97,1211.19 1627.56,1210.34 1628.15,1210.48 1628.73,1213.07 1629.32,1212.11 1629.91,1212.19 1630.49,1210.25 1631.08,1209.28 1631.67,1209.43 1632.25,1211.06 1632.84,1209.93 1633.42,1213.57 1634.01,1214.8 1634.6,1214.91 1635.18,1216.24 1635.77,1215.35 1636.36,1213.96 1636.94,1214.09 1637.53,1212.84 1638.12,1214.26 1638.7,1214.29 1639.29,1214.48 1639.88,1212.31 1640.46,1213.84 1641.05,1212.76 1641.63,1214.12 1642.22,1215.46 1642.81,1216.72 1643.39,1217.69 1643.98,1218.56 1644.57,1218.48 1645.15,1218.5 1645.74,1217.08 1646.33,1215.8 1646.91,1216.92 1647.5,1219.27 1648.09,1219.03 1648.67,1218.78 1649.26,1218.87 1649.84,1220.84 1650.43,1219.31 1651.02,1220.08 1651.6,1219.58 1652.19,1219.27 1652.78,1216.58 1653.36,1215.41 1653.95,1216.58 1654.54,1212.9 1655.12,1214.31 1655.71,1212.9 1656.29,1215.39 1656.88,1216.56 1657.47,1216.74 1658.05,1216.65 1658.64,1215.56 1659.23,1215.51 1659.81,1214.27 1660.4,1215.39 1660.99,1214.33 1661.57,1213.44 1662.16,1213.76 1662.75,1213.97 1663.33,1215.32 1663.92,1213.65 1664.5,1212.57 1665.09,1211.33 1665.68,1211.61 1666.26,1214 1666.85,1217.35 1667.44,1218.34 1668.02,1218.15 1668.61,1218.85 1669.2,1219.93 1669.78,1218.58 1670.37,1219.32 1670.96,1221.39 1671.54,1219.91 1672.13,1218.48 1672.71,1218.24 1673.3,1215.57 1673.89,1214.48 1674.47,1213.05 1675.06,1214.36 1675.65,1214.57 1676.23,1214.52 1676.82,1214.76 1677.41,1214.74 1677.99,1212.65 1678.58,1212.61 1679.17,1214.29 1679.75,1213.14 1680.34,1212.14 1680.92,1212.31 1681.51,1213.81 1682.1,1212.87 1682.68,1213.21 1683.27,1213.49 1683.86,1214.76 1684.44,1214.96 1685.03,1213.93 1685.62,1212.88 1686.2,1214.18 1686.79,1214.3 1687.37,1214.17 1687.96,1214.26 1688.55,1214.22 1689.13,1210.83 1689.72,1210.89 1690.31,1211.14 1690.89,1212.46 1691.48,1212.66 1692.07,1216.11 1692.65,1217.48 1693.24,1218.27 1693.83,1219.07 1694.41,1218.76 1695,1221.12 1695.58,1224.42 1696.17,1222.78 1696.76,1221.05 1697.34,1219.6 1697.93,1218.18 1698.52,1218.02 1699.1,1218.88 1699.69,1220.89 1700.28,1219.22 1700.86,1217.85 1701.45,1217.54 1702.04,1216.35 1702.62,1218.61 1703.21,1215.98 1703.79,1213.49 1704.38,1214.75 1704.97,1215.7 1705.55,1215.81 1706.14,1214.74 1706.73,1215.89 1707.31,1217.03 1707.9,1216.84 1708.49,1214.43 1709.07,1215.58 1709.66,1215.33 1710.24,1214.18 1710.83,1212.79 1711.42,1210.3 1712,1210.39 1712.59,1210.5 1713.18,1211.87 1713.76,1214.13 1714.35,1214.29 1714.94,1213.5 1715.52,1213.53 1716.11,1215.12 1716.7,1215.09 1717.28,1211.63 1717.87,1210.83 1718.45,1211.06 1719.04,1210.06 1719.63,1212.67 1720.21,1216.17 1720.8,1215.03 1721.39,1217.49 1721.97,1217.4 1722.56,1218.53 1723.15,1219.18 1723.73,1219.2 1724.32,1219.08 1724.91,1219.03 1725.49,1217.62 1726.08,1218.49 1726.66,1217.37 1727.25,1216 1727.84,1216.02 1728.42,1217.07 1729.01,1215.81 1729.6,1215.73 1730.18,1215.67 1730.77,1215.71 1731.36,1214.5 1731.94,1213.33 1732.53,1214.64 1733.11,1214.93 1733.7,1213.72 1734.29,1212.63 1734.87,1212.61 1735.46,1212.73 1736.05,1212.97 1736.63,1214.21 1737.22,1212.81 1737.81,1212.93 1738.39,1214.27 1738.98,1217.75 1739.57,1217.68 1740.15,1214.21 1740.74,1209.69 1741.32,1209.65 1741.91,1208.8 1742.5,1209.16 1743.08,1210.92 1743.67,1211.25 1744.26,1209.2 1744.84,1209.26 1745.43,1208.47 1746.02,1211.08 1746.6,1211.37 1747.19,1210.63 1747.78,1210.95 1748.36,1210.18 1748.95,1209.53 1749.53,1207.8 1750.12,1210.63 1750.71,1211.03 1751.29,1211.43 1751.88,1210.65 1752.47,1211.98 1753.05,1213.48 1753.64,1211.4 1754.23,1211.49 1754.81,1211.76 1755.4,1212.87 1755.99,1213.17 1756.57,1210.65 1757.16,1210.93 1757.74,1210.04 1758.33,1210.43 1758.92,1213.09 1759.5,1210.93 1760.09,1212.07 1760.68,1212.18 1761.26,1215.87 1761.85,1216.94 1762.44,1216.69 1763.02,1213.16 1763.61,1215.53 1764.19,1215.54 1764.78,1214.31 1765.37,1215.48 1765.95,1216.49 1766.54,1215.42 1767.13,1215.23 1767.71,1217.61 1768.3,1217.3 1768.89,1218.59 1769.47,1218.44 1770.06,1218.2 1770.65,1220.63 1771.23,1221.29 1771.82,1220.88 1772.4,1220.65 1772.99,1220.56 1773.58,1220.17 1774.16,1217.64 1774.75,1217.82 1775.34,1217.77 1775.92,1218.89 1776.51,1220.04 1777.1,1220.92 1777.68,1221.58 1778.27,1220.23 1778.86,1218.89 1779.44,1220.06 1780.03,1218.39 1780.61,1218.42 1781.2,1216.81 1781.79,1216.74 1782.37,1216.64 1782.96,1216.7 1783.55,1215.24 1784.13,1214.05 1784.72,1215.27 1785.31,1214.13 1785.89,1213.95 1786.48,1210.65 1787.06,1210.47 1787.65,1208.25 1788.24,1208.9 1788.82,1209.03 1789.41,1209.22 1790,1212.96 1790.58,1213.15 1791.17,1213.24 1791.76,1212.19 1792.34,1213.59 1792.93,1214.74 1793.52,1213.56 1794.1,1212.8 1794.69,1214.01 1795.27,1215.47 1795.86,1215.51 1796.45,1214.39 1797.03,1214.69 1797.62,1216.97 1798.21,1218.05 1798.79,1220.21 1799.38,1217.7 1799.97,1219.86 1800.55,1218.49 1801.14,1216.89 1801.73,1215.63 1802.31,1214.66 1802.9,1214.55 1803.48,1214.59 1804.07,1213.24 1804.66,1212.16 1805.24,1215.91 1805.83,1215.79 1806.42,1216.99 1807,1216.98 1807.59,1216.69 1808.18,1216.61 1808.76,1216.56 1809.35,1216.54 1809.94,1220.09 1810.52,1218.37 1811.11,1220.45 1811.69,1221.23 1812.28,1221.18 1812.87,1218.78 1813.45,1220.96 1814.04,1220.62 1814.63,1220.34 1815.21,1219.05 1815.8,1218.79 1816.39,1218.41 1816.97,1216.74 1817.56,1215.6 1818.14,1215.53 1818.73,1215.53 1819.32,1216.66 1819.9,1215.66 1820.49,1215.65 1821.08,1213.31 1821.66,1217.12 1822.25,1217.19 1822.84,1215.86 1823.42,1215.88 1824.01,1213.43 1824.6,1212.31 1825.18,1211.04 1825.77,1211.14 1826.35,1210.15 1826.94,1211.56 1827.53,1211.67 1828.11,1212.99 1828.7,1213.08 1829.29,1214.38 1829.87,1213.39 1830.46,1212.47 1831.05,1210.45 1831.63,1211.86 1832.22,1210.84 1832.81,1211.06 1833.39,1212.8 1833.98,1212.83 1834.56,1212.99 1835.15,1210.84 1835.74,1214.62 1836.32,1215.84 1836.91,1215.58 1837.5,1215.43 1838.08,1214.29 1838.67,1214.09 1839.26,1211.97 1839.84,1210.78 1840.43,1211.09 1841.01,1213.66 1841.6,1214.92 1842.19,1212.69 1842.77,1213.54 1843.36,1213.41 1843.95,1212.43 1844.53,1213.76 1845.12,1211.57 1845.71,1211.74 1846.29,1211.98 1846.88,1213.15 1847.47,1214.25 1848.05,1217.61 1848.64,1218.88 1849.22,1217.96 1849.81,1216.74 1850.4,1215.37 1850.98,1214.34 1851.57,1215.69 1852.16,1214.72 1852.74,1215.98 1853.33,1212.47 1853.92,1206.77 1854.5,1208.36 1855.09,1207.79 1855.68,1206.89 1856.26,1207.6 1856.85,1207.19 1857.43,1206.49 1858.02,1208.05 1858.61,1206.1 1859.19,1204.27 1859.78,1204.88 1860.37,1204.54 1860.95,1203.77 1861.54,1204.59 1862.13,1208.48 1862.71,1209.01 1863.3,1209.46 1863.88,1211.47 1864.47,1212.96 1865.06,1213.29 1865.64,1214.62 1866.23,1213.48 1866.82,1213.43 1867.4,1214.7 1867.99,1215.92 1868.58,1215.73 1869.16,1217.18 1869.75,1217.22 1870.34,1217.18 1870.92,1217.15 1871.51,1218.12 1872.09,1216.89 1872.68,1218.01 1873.27,1219.12 1873.85,1217.97 1874.44,1219.2 1875.03,1217.78 1875.61,1216.69 1876.2,1215.21 1876.79,1218.71 1877.37,1217.42 1877.96,1216.51 1878.55,1219.86 1879.13,1219.9 1879.72,1219.66 1880.3,1219.39 1880.89,1219.1 1881.48,1219.08 1882.06,1218.92 1882.65,1219.02 1883.24,1220.03 1883.82,1218.83 1884.41,1219.95 1885,1219.58 1885.58,1218.29 1886.17,1216.88 1886.76,1219.44 1887.34,1220.52 1887.93,1219.11 1888.51,1219.88 1889.1,1220.92 1889.69,1221.53 1890.27,1221 1890.86,1219.53 1891.45,1220.45 1892.03,1218.94 1892.62,1213.82 1893.21,1214.91 1893.79,1216.04 1894.38,1217.01 1894.96,1216.71 1895.55,1216.61 1896.14,1217.97 1896.72,1218.88 1897.31,1219.87 1897.9,1220.92 1898.48,1222.21 1899.07,1221.86 1899.66,1222.81 1900.24,1221.52 1900.83,1219.83 1901.42,1219.41 1902,1220.13 1902.59,1218.84 1903.17,1218.67 1903.76,1218.55 1904.35,1216.97 1904.93,1216.6 1905.52,1216.27 1906.11,1216.27 1906.69,1216.1 1907.28,1213.68 1907.87,1214.87 1908.45,1213.77 1909.04,1213.15 1909.63,1211.96 1910.21,1212.22 1910.8,1211.21 1911.38,1211.61 1911.97,1216.3 1912.56,1213.94 1913.14,1214.15 1913.73,1212.75 1914.32,1211.89 1914.9,1213.43 1915.49,1212.34 1916.08,1212.44 1916.66,1213.81 1917.25,1213.7 1917.83,1215.22 1918.42,1215.49 1919.01,1219.02 1919.59,1220.07 1920.18,1218.69 1920.77,1217.18 1921.35,1215.96 1921.94,1216.92 1922.53,1216.87 1923.11,1217.96 1923.7,1220.12 1924.29,1216.25 1924.87,1216.08 1925.46,1217.32 1926.04,1214.64 1926.63,1217.14 1927.22,1217.13 1927.8,1219.2 1928.39,1218.82 1928.98,1222.09 1929.56,1222.61 1930.15,1224.46 1930.74,1223.9 1931.32,1223.72 1931.91,1223.01 1932.5,1225.22 1933.08,1224.75 1933.67,1224.1 1934.25,1223.64 1934.84,1224.19 1935.43,1224.89 1936.01,1219.7 1936.6,1217.2 1937.19,1216.93 1937.77,1214.45 1938.36,1216.46 1938.95,1216.32 1939.53,1214.93 1940.12,1214.61 1940.71,1212.41 1941.29,1210.08 1941.88,1209.22 1942.46,1208.4 1943.05,1206.42 1943.64,1206.78 1944.22,1209.57 1944.81,1208.4 1945.4,1207.54 1945.98,1203.31 1946.57,1202.73 1947.16,1204.88 1947.74,1204.13 1948.33,1202.27 1948.91,1202.84 1949.5,1204.47 1950.09,1206.27 1950.67,1206.66 1951.26,1208.27 1951.85,1207.47 1952.43,1208.76 1953.02,1212.38 1953.61,1211.29 1954.19,1212.51 1954.78,1212.8 1955.37,1216.53 1955.95,1216.46 1956.54,1215.4 1957.12,1213 1957.71,1212.96 1958.3,1214.21 1958.88,1216.58 1959.47,1219.05 1960.06,1219.16 1960.64,1218.89 1961.23,1218.78 1961.82,1218.64 1962.4,1217.24 1962.99,1219.55 1963.58,1222.96 1964.16,1222.51 1964.75,1224.39 1965.33,1227.44 1965.92,1225.51 1966.51,1222.5 1967.09,1222.17 1967.68,1222.72 1968.27,1222.43 1968.85,1220.7 1969.44,1221.51 1970.03,1220.06 1970.61,1219.85 1971.2,1223.2 1971.78,1221.55 1972.37,1217.72 1972.96,1217.69 1973.54,1215.41 1974.13,1216.74 1974.72,1216.7 1975.3,1216.64 1975.89,1220.04 1976.48,1219.84 1977.06,1217.23 1977.65,1219.41 1978.24,1219.05 1978.82,1218.8 1979.41,1217.49 1979.99,1217.46 1980.58,1217.6 1981.17,1217.52 1981.75,1220.76 1982.34,1219.42 1982.93,1220.24 1983.51,1216.58 1984.1,1215.35 1984.69,1212.97 1985.27,1213.2 1985.86,1212.27 1986.45,1213.62 1987.03,1214.8 1987.62,1213.86 1988.2,1213.95 1988.79,1214.16 1989.38,1212.96 1989.96,1211.86 1990.55,1213.15 1991.14,1214.44 1991.72,1212.09 1992.31,1214.59 1992.9,1213.41 1993.48,1212.24 1994.07,1213.77 1994.65,1210.07 1995.24,1210.45 1995.83,1213.09 1996.41,1212.03 1997,1213.29 1997.59,1215.71 1998.17,1214.57 1998.76,1213.61 1999.35,1214.92 1999.93,1211.65 2000.52,1208.41 2001.11,1210.06 2001.69,1210.46 2002.28,1210.62 2002.86,1209.43 2003.45,1212.05 2004.04,1214.82 2004.62,1212.43 2005.21,1212.65 2005.8,1211.45 2006.38,1211.83 2006.97,1209.99 2007.56,1210.34 2008.14,1211.64 2008.73,1212.86 2009.32,1213.07 2009.9,1213.08 2010.49,1217.94 2011.07,1217.76 2011.66,1221.02 2012.25,1219.58 2012.83,1219.56 2013.42,1218.41 2014.01,1218.03 2014.59,1215.79 2015.18,1214.66 2015.77,1213.34 2016.35,1213.67 2016.94,1212.72 2017.53,1212.87 2018.11,1211.78 2018.7,1211.87 2019.28,1211.05 2019.87,1211.22 2020.46,1211.41 2021.04,1209.49 2021.63,1209.85 2022.22,1211.17 2022.8,1210.37 2023.39,1213.2 2023.98,1211.11 2024.56,1211.23 2025.15,1211.28 2025.73,1211.56 2026.32,1211.52 2026.91,1213.03 2027.49,1211.91 2028.08,1211.01 2028.67,1209.06 2029.25,1210.68 2029.84,1210.99 2030.43,1212.34 2031.01,1212.67 2031.6,1213.11 2032.19,1214.4 2032.77,1214.61 2033.36,1214.63 2033.94,1214.72 2034.53,1215.75 2035.12,1215.76 2035.7,1215.72 2036.29,1220.5 2036.88,1222.6 2037.46,1221.02 2038.05,1219.36 2038.64,1218.01 2039.22,1216.7 2039.81,1216.58 2040.4,1216.6 2040.98,1216.62 2041.57,1216.62 2042.15,1216.67 2042.74,1217.74 2043.33,1214.97 2043.91,1217.54 2044.5,1217.43 2045.09,1219.84 2045.67,1219.65 2046.26,1219.3 2046.85,1219.03 2047.43,1220.19 2048.02,1218.68 2048.6,1216.29 2049.19,1217.39 2049.78,1216.22 2050.36,1217.35 2050.95,1218.49 2051.54,1218.36 2052.12,1217.08 2052.71,1212.21 2053.3,1212.44 2053.88,1211.39 2054.47,1211.67 2055.06,1210.96 2055.64,1212.52 2056.23,1210.5 2056.81,1210.84 2057.4,1214.61 2057.99,1212.2 2058.57,1212.31 2059.16,1213.75 2059.75,1213.9 2060.33,1211.8 2060.92,1209.91 2061.51,1213.97 2062.09,1214.25 2062.68,1216.64 2063.27,1217.66 2063.85,1217.67 2064.44,1218.83 2065.02,1217.31 2065.61,1216.02 2066.2,1217.32 2066.78,1217.43 2067.37,1217.23 2067.96,1218.42 2068.54,1219.24 2069.13,1218.9 2069.72,1218.93 2070.3,1219.93 2070.89,1220.81 2071.48,1219.26 2072.06,1220.38 2072.65,1222.34 2073.23,1222.03 2073.82,1220.65 2074.41,1218 2074.99,1217.78 2075.58,1219.91 2076.17,1218.52 2076.75,1217.41 2077.34,1220.95 2077.93,1221.78 2078.51,1220.61 2079.1,1220.23 2079.68,1221.06 2080.27,1219.47 2080.86,1219.31 2081.44,1219.16 2082.03,1218.62 2082.62,1216.86 2083.2,1218.74 2083.79,1218.46 2084.38,1218.29 2084.96,1215.71 2085.55,1215.52 2086.14,1215.65 2086.72,1216.59 2087.31,1216.48 2087.89,1218.56 2088.48,1219.54 2089.07,1219.39 2089.65,1218.05 2090.24,1218.16 2090.83,1216.82 2091.41,1215.49 2092,1216.92 2092.59,1216.85 2093.17,1214.61 2093.76,1214.75 2094.35,1214.4 2094.93,1214.21 2095.52,1214.25 2096.1,1215.48 2096.69,1216.36 2097.28,1218.75 2097.86,1219.65 2098.45,1221.55 2099.04,1221.08 2099.62,1222.05 2100.21,1220.45 2100.8,1217.77 2101.38,1215.06 2101.97,1215.04 2102.55,1216.26 2103.14,1219.68 2103.73,1220.79 2104.31,1218.14 2104.9,1217.83 2105.49,1218.97 2106.07,1218.9 2106.66,1218.68 2107.25,1220.91 2107.83,1220.67 2108.42,1218.95 2109.01,1218.84 2109.59,1222.13 2110.18,1219.58 2110.76,1218.27 2111.35,1219.19 2111.94,1221.23 2112.52,1218.41 2113.11,1218.17 2113.7,1215.57 2114.28,1216.8 2114.87,1218.16 2115.46,1217.98 2116.04,1219.04 2116.63,1218.78 2117.22,1220.95 2117.8,1221.81 2118.39,1220.46 2118.97,1219.24 2119.56,1220.37 2120.15,1216.65 2120.73,1215.2 2121.32,1215.32 2121.91,1215.38 2122.49,1215.55 2123.08,1216.82 2123.67,1218.25 2124.25,1215.7 2124.84,1216.82 2125.42,1216.7 2126.01,1215.55 2126.6,1217.72 2127.18,1217.34 2127.77,1217.36 2128.36,1218.21 2128.94,1218.03 2129.53,1217.83 2130.12,1217.75 2130.7,1213.03 2131.29,1214.33 2131.88,1215.57 2132.46,1214.41 2133.05,1215.38 2133.63,1215.17 2134.22,1216.09 2134.81,1212.8 2135.39,1212.54 2135.98,1211.77 2136.57,1211.86 2137.15,1213.11 2137.74,1212.07 2138.33,1213.44 2138.91,1211.05 2139.5,1209.83 2140.09,1208.79 2140.67,1209.1 2141.26,1211.7 2141.84,1210.86 2142.43,1212.17 2143.02,1211.3 2143.6,1208.03 2144.19,1208.2 2144.78,1213.14 2145.36,1213.19 2145.95,1211.04 2146.54,1210.15 2147.12,1210.51 2147.71,1213.13 2148.3,1212.23 2148.88,1212.29 2149.47,1213.46 2150.05,1212.13 2150.64,1212.42 2151.23,1213.52 2151.81,1213.65 2152.4,1213.66 2152.99,1215.04 2153.57,1213.81 2154.16,1215.11 2154.75,1214.08 2155.33,1216.61 2155.92,1215.86 2156.5,1217.16 2157.09,1215.76 2157.68,1218.17 2158.26,1218.16 \"/>\n<path clip-path=\"url(#clip802)\" d=\"M986.025 1215.88 L986.612 1215.88 L987.198 1215.88 L987.785 1215.88 L988.371 1215.88 L988.957 1215.88 L989.544 1215.88 L990.13 1215.88 L990.717 1215.88 L991.303 1215.88 L991.889 1215.88 L992.476 1215.88 L993.062 1215.88 L993.649 1215.88 L994.235 1215.88 L994.822 1215.88 L995.408 1215.88 L995.994 1215.88 L996.581 1215.88 L997.167 1215.88 L997.754 1215.88 L998.34 1215.88 L998.926 1215.88 L999.513 1215.88 L1000.1 1215.88 L1000.69 1215.88 L1001.27 1215.88 L1001.86 1215.88 L1002.44 1215.88 L1003.03 1215.88 L1003.62 1215.88 L1004.2 1215.88 L1004.79 1215.88 L1005.38 1215.88 L1005.96 1215.88 L1006.55 1215.88 L1007.14 1215.88 L1007.72 1215.88 L1008.31 1215.88 L1008.9 1215.88 L1009.48 1215.88 L1010.07 1215.88 L1010.65 1215.88 L1011.24 1215.88 L1011.83 1215.88 L1012.41 1215.88 L1013 1215.88 L1013.59 1215.88 L1014.17 1215.88 L1014.76 1215.88 L1015.35 1215.88 L1015.93 1215.88 L1016.52 1215.88 L1017.11 1215.88 L1017.69 1215.88 L1018.28 1215.88 L1018.86 1215.88 L1019.45 1215.88 L1020.04 1215.88 L1020.62 1215.88 L1021.21 1215.88 L1021.8 1215.88 L1022.38 1215.88 L1022.97 1215.88 L1023.56 1215.88 L1024.14 1215.88 L1024.73 1215.88 L1025.32 1215.88 L1025.9 1215.88 L1026.49 1215.88 L1027.07 1215.88 L1027.66 1215.88 L1028.25 1215.88 L1028.83 1215.88 L1029.42 1215.88 L1030.01 1215.88 L1030.59 1215.88 L1031.18 1215.88 L1031.77 1215.88 L1032.35 1215.88 L1032.94 1215.88 L1033.52 1215.88 L1034.11 1215.88 L1034.7 1215.88 L1035.28 1215.88 L1035.87 1215.88 L1036.46 1215.88 L1037.04 1215.88 L1037.63 1215.88 L1038.22 1215.88 L1038.8 1215.88 L1039.39 1215.88 L1039.98 1215.88 L1040.56 1215.88 L1041.15 1215.88 L1041.73 1215.88 L1042.32 1215.88 L1042.91 1215.88 L1043.49 1215.88 L1044.08 1215.88 L1044.67 1215.88 L1045.25 1215.88 L1045.84 1215.88 L1046.43 1215.88 L1047.01 1215.88 L1047.6 1215.88 L1048.19 1215.88 L1048.77 1215.88 L1049.36 1215.88 L1049.94 1215.88 L1050.53 1215.88 L1051.12 1215.88 L1051.7 1215.88 L1052.29 1215.88 L1052.88 1215.88 L1053.46 1215.88 L1054.05 1215.88 L1054.64 1215.88 L1055.22 1215.88 L1055.81 1215.88 L1056.39 1215.88 L1056.98 1215.88 L1057.57 1215.88 L1058.15 1215.88 L1058.74 1215.88 L1059.33 1215.88 L1059.91 1215.88 L1060.5 1215.88 L1061.09 1215.88 L1061.67 1215.88 L1062.26 1215.88 L1062.85 1215.88 L1063.43 1215.88 L1064.02 1215.88 L1064.6 1215.88 L1065.19 1215.88 L1065.78 1215.88 L1066.36 1215.88 L1066.95 1215.88 L1067.54 1215.88 L1068.12 1215.88 L1068.71 1215.88 L1069.3 1215.88 L1069.88 1215.88 L1070.47 1215.88 L1071.06 1215.88 L1071.64 1215.88 L1072.23 1215.88 L1072.81 1215.88 L1073.4 1215.88 L1073.99 1215.88 L1074.57 1215.88 L1075.16 1215.88 L1075.75 1215.88 L1076.33 1215.88 L1076.92 1215.88 L1077.51 1215.88 L1078.09 1215.88 L1078.68 1215.88 L1079.26 1215.88 L1079.85 1215.88 L1080.44 1215.88 L1081.02 1215.88 L1081.61 1215.88 L1082.2 1215.88 L1082.78 1215.88 L1083.37 1215.88 L1083.96 1215.88 L1084.54 1215.88 L1085.13 1215.88 L1085.72 1215.88 L1086.3 1215.88 L1086.89 1215.88 L1087.47 1215.88 L1088.06 1215.88 L1088.65 1215.88 L1089.23 1215.88 L1089.82 1215.88 L1090.41 1215.88 L1090.99 1215.88 L1091.58 1215.88 L1092.17 1215.88 L1092.75 1215.88 L1093.34 1215.88 L1093.93 1215.88 L1094.51 1215.88 L1095.1 1215.88 L1095.68 1215.88 L1096.27 1215.88 L1096.86 1215.88 L1097.44 1215.88 L1098.03 1215.88 L1098.62 1215.88 L1099.2 1215.88 L1099.79 1215.88 L1100.38 1215.88 L1100.96 1215.88 L1101.55 1215.88 L1102.14 1215.88 L1102.72 1215.88 L1103.31 1215.88 L1103.89 1215.88 L1104.48 1215.88 L1105.07 1215.88 L1105.65 1215.88 L1106.24 1215.88 L1106.83 1215.88 L1107.41 1215.88 L1108 1215.88 L1108.59 1215.88 L1109.17 1215.88 L1109.76 1215.88 L1110.34 1215.88 L1110.93 1215.88 L1111.52 1215.88 L1112.1 1215.88 L1112.69 1215.88 L1113.28 1215.88 L1113.86 1215.88 L1114.45 1215.88 L1115.04 1215.88 L1115.62 1215.88 L1116.21 1215.88 L1116.8 1215.88 L1117.38 1215.88 L1117.97 1215.88 L1118.55 1215.88 L1119.14 1215.88 L1119.73 1215.88 L1120.31 1215.88 L1120.9 1215.88 L1121.49 1215.88 L1122.07 1215.88 L1122.66 1215.88 L1123.25 1215.88 L1123.83 1215.88 L1124.42 1215.88 L1125.01 1215.88 L1125.59 1215.88 L1126.18 1215.88 L1126.76 1215.88 L1127.35 1215.88 L1127.94 1215.88 L1128.52 1215.88 L1129.11 1215.88 L1129.7 1215.88 L1130.28 1215.88 L1130.87 1215.88 L1131.46 1215.88 L1132.04 1215.88 L1132.63 1215.88 L1133.21 1215.88 L1133.8 1215.88 L1134.39 1215.88 L1134.97 1215.88 L1135.56 1215.88 L1136.15 1215.88 L1136.73 1215.88 L1137.32 1215.88 L1137.91 1215.88 L1138.49 1215.88 L1139.08 1215.88 L1139.67 1215.88 L1140.25 1215.88 L1140.84 1215.88 L1141.42 1215.88 L1142.01 1215.88 L1142.6 1215.88 L1143.18 1215.88 L1143.77 1215.88 L1144.36 1215.88 L1144.94 1215.88 L1145.53 1215.88 L1146.12 1215.88 L1146.7 1215.88 L1147.29 1215.88 L1147.88 1215.88 L1148.46 1215.88 L1149.05 1215.88 L1149.63 1215.88 L1150.22 1215.88 L1150.81 1215.88 L1151.39 1215.88 L1151.98 1215.88 L1152.57 1215.88 L1153.15 1215.88 L1153.74 1215.88 L1154.33 1215.88 L1154.91 1215.88 L1155.5 1215.88 L1156.09 1215.88 L1156.67 1215.88 L1157.26 1215.88 L1157.84 1215.88 L1158.43 1215.88 L1159.02 1215.88 L1159.6 1215.88 L1160.19 1215.88 L1160.78 1215.88 L1161.36 1215.88 L1161.95 1215.88 L1162.54 1215.88 L1163.12 1215.88 L1163.71 1215.88 L1164.29 1215.88 L1164.88 1215.88 L1165.47 1215.88 L1166.05 1215.88 L1166.64 1215.88 L1167.23 1215.88 L1167.81 1215.88 L1168.4 1215.88 L1168.99 1215.88 L1169.57 1215.88 L1170.16 1215.88 L1170.75 1215.88 L1171.33 1215.88 L1171.92 1215.88 L1172.5 1215.88 L1173.09 1215.88 L1173.68 1215.88 L1174.26 1215.88 L1174.85 1215.88 L1175.44 1215.88 L1176.02 1215.88 L1176.61 1215.88 L1177.2 1215.88 L1177.78 1215.88 L1178.37 1215.88 L1178.96 1215.88 L1179.54 1215.88 L1180.13 1215.88 L1180.71 1215.88 L1181.3 1215.88 L1181.89 1215.88 L1182.47 1215.88 L1183.06 1215.88 L1183.65 1215.88 L1184.23 1215.88 L1184.82 1215.88 L1185.41 1215.88 L1185.99 1215.88 L1186.58 1215.88 L1187.16 1215.88 L1187.75 1215.88 L1188.34 1215.88 L1188.92 1215.88 L1189.51 1215.88 L1190.1 1215.88 L1190.68 1215.88 L1191.27 1215.88 L1191.86 1215.88 L1192.44 1215.88 L1193.03 1215.88 L1193.62 1215.88 L1194.2 1215.88 L1194.79 1215.88 L1195.37 1215.88 L1195.96 1215.88 L1196.55 1215.88 L1197.13 1215.88 L1197.72 1215.88 L1198.31 1215.88 L1198.89 1215.88 L1199.48 1215.88 L1200.07 1215.88 L1200.65 1215.88 L1201.24 1215.88 L1201.83 1215.88 L1202.41 1215.88 L1203 1215.88 L1203.58 1215.88 L1204.17 1215.88 L1204.76 1215.88 L1205.34 1215.88 L1205.93 1215.88 L1206.52 1215.88 L1207.1 1215.88 L1207.69 1215.88 L1208.28 1215.88 L1208.86 1215.88 L1209.45 1215.88 L1210.03 1215.88 L1210.62 1215.88 L1211.21 1215.88 L1211.79 1215.88 L1212.38 1215.88 L1212.97 1215.88 L1213.55 1215.88 L1214.14 1215.88 L1214.73 1215.88 L1215.31 1215.88 L1215.9 1215.88 L1216.49 1215.88 L1217.07 1215.88 L1217.66 1215.88 L1218.24 1215.88 L1218.83 1215.88 L1219.42 1215.88 L1220 1215.88 L1220.59 1215.88 L1221.18 1215.88 L1221.76 1215.88 L1222.35 1215.88 L1222.94 1215.88 L1223.52 1215.88 L1224.11 1215.88 L1224.7 1215.88 L1225.28 1215.88 L1225.87 1215.88 L1226.45 1215.88 L1227.04 1215.88 L1227.63 1215.88 L1228.21 1215.88 L1228.8 1215.88 L1229.39 1215.88 L1229.97 1215.88 L1230.56 1215.88 L1231.15 1215.88 L1231.73 1215.88 L1232.32 1215.88 L1232.91 1215.88 L1233.49 1215.88 L1234.08 1215.88 L1234.66 1215.88 L1235.25 1215.88 L1235.84 1215.88 L1236.42 1215.88 L1237.01 1215.88 L1237.6 1215.88 L1238.18 1215.88 L1238.77 1215.88 L1239.36 1215.88 L1239.94 1215.88 L1240.53 1215.88 L1241.11 1215.88 L1241.7 1215.88 L1242.29 1215.88 L1242.87 1215.88 L1243.46 1215.88 L1244.05 1215.88 L1244.63 1215.88 L1245.22 1215.88 L1245.81 1215.88 L1246.39 1215.88 L1246.98 1215.88 L1247.57 1215.88 L1248.15 1215.88 L1248.74 1215.88 L1249.32 1215.88 L1249.91 1215.88 L1250.5 1215.88 L1251.08 1215.88 L1251.67 1215.88 L1252.26 1215.88 L1252.84 1215.88 L1253.43 1215.88 L1254.02 1215.88 L1254.6 1215.88 L1255.19 1215.88 L1255.78 1215.88 L1256.36 1215.88 L1256.95 1215.88 L1257.53 1215.88 L1258.12 1215.88 L1258.71 1215.88 L1259.29 1215.88 L1259.88 1215.88 L1260.47 1215.88 L1261.05 1215.88 L1261.64 1215.88 L1262.23 1215.88 L1262.81 1215.88 L1263.4 1215.88 L1263.98 1215.88 L1264.57 1215.88 L1265.16 1215.88 L1265.74 1215.88 L1266.33 1215.88 L1266.92 1215.88 L1267.5 1215.88 L1268.09 1215.88 L1268.68 1215.88 L1269.26 1215.88 L1269.85 1215.88 L1270.44 1215.88 L1271.02 1215.88 L1271.61 1215.88 L1272.19 1215.88 L1272.78 1215.88 L1273.37 1215.88 L1273.95 1215.88 L1274.54 1215.88 L1275.13 1215.88 L1275.71 1215.88 L1276.3 1215.88 L1276.89 1215.88 L1277.47 1215.88 L1278.06 1215.88 L1278.65 1215.88 L1279.23 1215.88 L1279.82 1215.88 L1280.4 1215.88 L1280.99 1215.88 L1281.58 1215.88 L1282.16 1215.88 L1282.75 1215.88 L1283.34 1215.88 L1283.92 1215.88 L1284.51 1215.88 L1285.1 1215.88 L1285.68 1215.88 L1286.27 1215.88 L1286.86 1215.88 L1287.44 1215.88 L1288.03 1215.88 L1288.61 1215.88 L1289.2 1215.88 L1289.79 1215.88 L1290.37 1215.88 L1290.96 1215.88 L1291.55 1215.88 L1292.13 1215.88 L1292.72 1215.88 L1293.31 1215.88 L1293.89 1215.88 L1294.48 1215.88 L1295.06 1215.88 L1295.65 1215.88 L1296.24 1215.88 L1296.82 1215.88 L1297.41 1215.88 L1298 1215.88 L1298.58 1215.88 L1299.17 1215.88 L1299.76 1215.88 L1300.34 1215.88 L1300.93 1215.88 L1301.52 1215.88 L1302.1 1215.88 L1302.69 1215.88 L1303.27 1215.88 L1303.86 1215.88 L1304.45 1215.88 L1305.03 1215.88 L1305.62 1215.88 L1306.21 1215.88 L1306.79 1215.88 L1307.38 1215.88 L1307.97 1215.88 L1308.55 1215.88 L1309.14 1215.88 L1309.73 1215.88 L1310.31 1215.88 L1310.9 1215.88 L1311.48 1215.88 L1312.07 1215.88 L1312.66 1215.88 L1313.24 1215.88 L1313.83 1215.88 L1314.42 1215.88 L1315 1215.88 L1315.59 1215.88 L1316.18 1215.88 L1316.76 1215.88 L1317.35 1215.88 L1317.93 1215.88 L1318.52 1215.88 L1319.11 1215.88 L1319.69 1215.88 L1320.28 1215.88 L1320.87 1215.88 L1321.45 1215.88 L1322.04 1215.88 L1322.63 1215.88 L1323.21 1215.88 L1323.8 1215.88 L1324.39 1215.88 L1324.97 1215.88 L1325.56 1215.88 L1326.14 1215.88 L1326.73 1215.88 L1327.32 1215.88 L1327.9 1215.88 L1328.49 1215.88 L1329.08 1215.88 L1329.66 1215.88 L1330.25 1215.88 L1330.84 1215.88 L1331.42 1215.88 L1332.01 1215.88 L1332.6 1215.88 L1333.18 1215.88 L1333.77 1215.88 L1334.35 1215.88 L1334.94 1215.88 L1335.53 1215.88 L1336.11 1215.88 L1336.7 1215.88 L1337.29 1215.88 L1337.87 1215.88 L1338.46 1215.88 L1339.05 1215.88 L1339.63 1215.88 L1340.22 1215.88 L1340.8 1215.88 L1341.39 1215.88 L1341.98 1215.88 L1342.56 1215.88 L1343.15 1215.88 L1343.74 1215.88 L1344.32 1215.88 L1344.91 1215.88 L1345.5 1215.88 L1346.08 1215.88 L1346.67 1215.88 L1347.26 1215.88 L1347.84 1215.88 L1348.43 1215.88 L1349.01 1215.88 L1349.6 1215.88 L1350.19 1215.88 L1350.77 1215.88 L1351.36 1215.88 L1351.95 1215.88 L1352.53 1215.88 L1353.12 1215.88 L1353.71 1215.88 L1354.29 1215.88 L1354.88 1215.88 L1355.47 1215.88 L1356.05 1215.88 L1356.64 1215.88 L1357.22 1215.88 L1357.81 1215.88 L1358.4 1215.88 L1358.98 1215.88 L1359.57 1215.88 L1360.16 1215.88 L1360.74 1215.88 L1361.33 1215.88 L1361.92 1215.88 L1362.5 1215.88 L1363.09 1215.88 L1363.68 1215.88 L1364.26 1215.88 L1364.85 1215.88 L1365.43 1215.88 L1366.02 1215.88 L1366.61 1215.88 L1367.19 1215.88 L1367.78 1215.88 L1368.37 1215.88 L1368.95 1215.88 L1369.54 1215.88 L1370.13 1215.88 L1370.71 1215.88 L1371.3 1215.88 L1371.88 1215.88 L1372.47 1215.88 L1373.06 1215.88 L1373.64 1215.88 L1374.23 1215.88 L1374.82 1215.88 L1375.4 1215.88 L1375.99 1215.88 L1376.58 1215.88 L1377.16 1215.88 L1377.75 1215.88 L1378.34 1215.88 L1378.92 1215.88 L1379.51 1215.88 L1380.09 1215.88 L1380.68 1215.88 L1381.27 1215.88 L1381.85 1215.88 L1382.44 1215.88 L1383.03 1215.88 L1383.61 1215.88 L1384.2 1215.88 L1384.79 1215.88 L1385.37 1215.88 L1385.96 1215.88 L1386.55 1215.88 L1387.13 1215.88 L1387.72 1215.88 L1388.3 1215.88 L1388.89 1215.88 L1389.48 1215.88 L1390.06 1215.88 L1390.65 1215.88 L1391.24 1215.88 L1391.82 1215.88 L1392.41 1215.88 L1393 1215.88 L1393.58 1215.88 L1394.17 1215.88 L1394.75 1215.88 L1395.34 1215.88 L1395.93 1215.88 L1396.51 1215.88 L1397.1 1215.88 L1397.69 1215.88 L1398.27 1215.88 L1398.86 1215.88 L1399.45 1215.88 L1400.03 1215.88 L1400.62 1215.88 L1401.21 1215.88 L1401.79 1215.88 L1402.38 1215.88 L1402.96 1215.88 L1403.55 1215.88 L1404.14 1215.88 L1404.72 1215.88 L1405.31 1215.88 L1405.9 1215.88 L1406.48 1215.88 L1407.07 1215.88 L1407.66 1215.88 L1408.24 1215.88 L1408.83 1215.88 L1409.42 1215.88 L1410 1215.88 L1410.59 1215.88 L1411.17 1215.88 L1411.76 1215.88 L1412.35 1215.88 L1412.93 1215.88 L1413.52 1215.88 L1414.11 1215.88 L1414.69 1215.88 L1415.28 1215.88 L1415.87 1215.88 L1416.45 1215.88 L1417.04 1215.88 L1417.63 1215.88 L1418.21 1215.88 L1418.8 1215.88 L1419.38 1215.88 L1419.97 1215.88 L1420.56 1215.88 L1421.14 1215.88 L1421.73 1215.88 L1422.32 1215.88 L1422.9 1215.88 L1423.49 1215.88 L1424.08 1215.88 L1424.66 1215.88 L1425.25 1215.88 L1425.83 1215.88 L1426.42 1215.88 L1427.01 1215.88 L1427.59 1215.88 L1428.18 1215.88 L1428.77 1215.88 L1429.35 1215.88 L1429.94 1215.88 L1430.53 1215.88 L1431.11 1215.88 L1431.7 1215.88 L1432.29 1215.88 L1432.87 1215.88 L1433.46 1215.88 L1434.04 1215.88 L1434.63 1215.88 L1435.22 1215.88 L1435.8 1215.88 L1436.39 1215.88 L1436.98 1215.88 L1437.56 1215.88 L1438.15 1215.88 L1438.74 1215.88 L1439.32 1215.88 L1439.91 1215.88 L1440.5 1215.88 L1441.08 1215.88 L1441.67 1215.88 L1442.25 1215.88 L1442.84 1215.88 L1443.43 1215.88 L1444.01 1215.88 L1444.6 1215.88 L1445.19 1215.88 L1445.77 1215.88 L1446.36 1215.88 L1446.95 1215.88 L1447.53 1215.88 L1448.12 1215.88 L1448.7 1215.88 L1449.29 1215.88 L1449.88 1215.88 L1450.46 1215.88 L1451.05 1215.88 L1451.64 1215.88 L1452.22 1215.88 L1452.81 1215.88 L1453.4 1215.88 L1453.98 1215.88 L1454.57 1215.88 L1455.16 1215.88 L1455.74 1215.88 L1456.33 1215.88 L1456.91 1215.88 L1457.5 1215.88 L1458.09 1215.88 L1458.67 1215.88 L1459.26 1215.88 L1459.85 1215.88 L1460.43 1215.88 L1461.02 1215.88 L1461.61 1215.88 L1462.19 1215.88 L1462.78 1215.88 L1463.37 1215.88 L1463.95 1215.88 L1464.54 1215.88 L1465.12 1215.88 L1465.71 1215.88 L1466.3 1215.88 L1466.88 1215.88 L1467.47 1215.88 L1468.06 1215.88 L1468.64 1215.88 L1469.23 1215.88 L1469.82 1215.88 L1470.4 1215.88 L1470.99 1215.88 L1471.57 1215.88 L1472.16 1215.88 L1472.75 1215.88 L1473.33 1215.88 L1473.92 1215.88 L1474.51 1215.88 L1475.09 1215.88 L1475.68 1215.88 L1476.27 1215.88 L1476.85 1215.88 L1477.44 1215.88 L1478.03 1215.88 L1478.61 1215.88 L1479.2 1215.88 L1479.78 1215.88 L1480.37 1215.88 L1480.96 1215.88 L1481.54 1215.88 L1482.13 1215.88 L1482.72 1215.88 L1483.3 1215.88 L1483.89 1215.88 L1484.48 1215.88 L1485.06 1215.88 L1485.65 1215.88 L1486.24 1215.88 L1486.82 1215.88 L1487.41 1215.88 L1487.99 1215.88 L1488.58 1215.88 L1489.17 1215.88 L1489.75 1215.88 L1490.34 1215.88 L1490.93 1215.88 L1491.51 1215.88 L1492.1 1215.88 L1492.69 1215.88 L1493.27 1215.88 L1493.86 1215.88 L1494.45 1215.88 L1495.03 1215.88 L1495.62 1215.88 L1496.2 1215.88 L1496.79 1215.88 L1497.38 1215.88 L1497.96 1215.88 L1498.55 1215.88 L1499.14 1215.88 L1499.72 1215.88 L1500.31 1215.88 L1500.9 1215.88 L1501.48 1215.88 L1502.07 1215.88 L1502.65 1215.88 L1503.24 1215.88 L1503.83 1215.88 L1504.41 1215.88 L1505 1215.88 L1505.59 1215.88 L1506.17 1215.88 L1506.76 1215.88 L1507.35 1215.88 L1507.93 1215.88 L1508.52 1215.88 L1509.11 1215.88 L1509.69 1215.88 L1510.28 1215.88 L1510.86 1215.88 L1511.45 1215.88 L1512.04 1215.88 L1512.62 1215.88 L1513.21 1215.88 L1513.8 1215.88 L1514.38 1215.88 L1514.97 1215.88 L1515.56 1215.88 L1516.14 1215.88 L1516.73 1215.88 L1517.32 1215.88 L1517.9 1215.88 L1518.49 1215.88 L1519.07 1215.88 L1519.66 1215.88 L1520.25 1215.88 L1520.83 1215.88 L1521.42 1215.88 L1522.01 1215.88 L1522.59 1215.88 L1523.18 1215.88 L1523.77 1215.88 L1524.35 1215.88 L1524.94 1215.88 L1525.52 1215.88 L1526.11 1215.88 L1526.7 1215.88 L1527.28 1215.88 L1527.87 1215.88 L1528.46 1215.88 L1529.04 1215.88 L1529.63 1215.88 L1530.22 1215.88 L1530.8 1215.88 L1531.39 1215.88 L1531.98 1215.88 L1532.56 1215.88 L1533.15 1215.88 L1533.73 1215.88 L1534.32 1215.88 L1534.91 1215.88 L1535.49 1215.88 L1536.08 1215.88 L1536.67 1215.88 L1537.25 1215.88 L1537.84 1215.88 L1538.43 1215.88 L1539.01 1215.88 L1539.6 1215.88 L1540.19 1215.88 L1540.77 1215.88 L1541.36 1215.88 L1541.94 1215.88 L1542.53 1215.88 L1543.12 1215.88 L1543.7 1215.88 L1544.29 1215.88 L1544.88 1215.88 L1545.46 1215.88 L1546.05 1215.88 L1546.64 1215.88 L1547.22 1215.88 L1547.81 1215.88 L1548.4 1215.88 L1548.98 1215.88 L1549.57 1215.88 L1550.15 1215.88 L1550.74 1215.88 L1551.33 1215.88 L1551.91 1215.88 L1552.5 1215.88 L1553.09 1215.88 L1553.67 1215.88 L1554.26 1215.88 L1554.85 1215.88 L1555.43 1215.88 L1556.02 1215.88 L1556.6 1215.88 L1557.19 1215.88 L1557.78 1215.88 L1558.36 1215.88 L1558.95 1215.88 L1559.54 1215.88 L1560.12 1215.88 L1560.71 1215.88 L1561.3 1215.88 L1561.88 1215.88 L1562.47 1215.88 L1563.06 1215.88 L1563.64 1215.88 L1564.23 1215.88 L1564.81 1215.88 L1565.4 1215.88 L1565.99 1215.88 L1566.57 1215.88 L1567.16 1215.88 L1567.75 1215.88 L1568.33 1215.88 L1568.92 1215.88 L1569.51 1215.88 L1570.09 1215.88 L1570.68 1215.88 L1571.27 1215.88 L1571.85 1215.88 L1572.44 1215.88 L1573.02 1215.88 L1573.61 1215.88 L1574.2 1215.88 L1574.78 1215.88 L1575.37 1215.88 L1575.96 1215.88 L1576.54 1215.88 L1577.13 1215.88 L1577.72 1215.88 L1578.3 1215.88 L1578.89 1215.88 L1579.47 1215.88 L1580.06 1215.88 L1580.65 1215.88 L1581.23 1215.88 L1581.82 1215.88 L1582.41 1215.88 L1582.99 1215.88 L1583.58 1215.88 L1584.17 1215.88 L1584.75 1215.88 L1585.34 1215.88 L1585.93 1215.88 L1586.51 1215.88 L1587.1 1215.88 L1587.68 1215.88 L1588.27 1215.88 L1588.86 1215.88 L1589.44 1215.88 L1590.03 1215.88 L1590.62 1215.88 L1591.2 1215.88 L1591.79 1215.88 L1592.38 1215.88 L1592.96 1215.88 L1593.55 1215.88 L1594.14 1215.88 L1594.72 1215.88 L1595.31 1215.88 L1595.89 1215.88 L1596.48 1215.88 L1597.07 1215.88 L1597.65 1215.88 L1598.24 1215.88 L1598.83 1215.88 L1599.41 1215.88 L1600 1215.88 L1600.59 1215.88 L1601.17 1215.88 L1601.76 1215.88 L1602.34 1215.88 L1602.93 1215.88 L1603.52 1215.88 L1604.1 1215.88 L1604.69 1215.88 L1605.28 1215.88 L1605.86 1215.88 L1606.45 1215.88 L1607.04 1215.88 L1607.62 1215.88 L1608.21 1215.88 L1608.8 1215.88 L1609.38 1215.88 L1609.97 1215.88 L1610.55 1215.88 L1611.14 1215.88 L1611.73 1215.88 L1612.31 1215.88 L1612.9 1215.88 L1613.49 1215.88 L1614.07 1215.88 L1614.66 1215.88 L1615.25 1215.88 L1615.83 1215.88 L1616.42 1215.88 L1617.01 1215.88 L1617.59 1215.88 L1618.18 1215.88 L1618.76 1215.88 L1619.35 1215.88 L1619.94 1215.88 L1620.52 1215.88 L1621.11 1215.88 L1621.7 1215.88 L1622.28 1215.88 L1622.87 1215.88 L1623.46 1215.88 L1624.04 1215.88 L1624.63 1215.88 L1625.22 1215.88 L1625.8 1215.88 L1626.39 1215.88 L1626.97 1215.88 L1627.56 1215.88 L1628.15 1215.88 L1628.73 1215.88 L1629.32 1215.88 L1629.91 1215.88 L1630.49 1215.88 L1631.08 1215.88 L1631.67 1215.88 L1632.25 1215.88 L1632.84 1215.88 L1633.42 1215.88 L1634.01 1215.88 L1634.6 1215.88 L1635.18 1215.88 L1635.77 1215.88 L1636.36 1215.88 L1636.94 1215.88 L1637.53 1215.88 L1638.12 1215.88 L1638.7 1215.88 L1639.29 1215.88 L1639.88 1215.88 L1640.46 1215.88 L1641.05 1215.88 L1641.63 1215.88 L1642.22 1215.88 L1642.81 1215.88 L1643.39 1215.88 L1643.98 1215.88 L1644.57 1215.88 L1645.15 1215.88 L1645.74 1215.88 L1646.33 1215.88 L1646.91 1215.88 L1647.5 1215.88 L1648.09 1215.88 L1648.67 1215.88 L1649.26 1215.88 L1649.84 1215.88 L1650.43 1215.88 L1651.02 1215.88 L1651.6 1215.88 L1652.19 1215.88 L1652.78 1215.88 L1653.36 1215.88 L1653.95 1215.88 L1654.54 1215.88 L1655.12 1215.88 L1655.71 1215.88 L1656.29 1215.88 L1656.88 1215.88 L1657.47 1215.88 L1658.05 1215.88 L1658.64 1215.88 L1659.23 1215.88 L1659.81 1215.88 L1660.4 1215.88 L1660.99 1215.88 L1661.57 1215.88 L1662.16 1215.88 L1662.75 1215.88 L1663.33 1215.88 L1663.92 1215.88 L1664.5 1215.88 L1665.09 1215.88 L1665.68 1215.88 L1666.26 1215.88 L1666.85 1215.88 L1667.44 1215.88 L1668.02 1215.88 L1668.61 1215.88 L1669.2 1215.88 L1669.78 1215.88 L1670.37 1215.88 L1670.96 1215.88 L1671.54 1215.88 L1672.13 1215.88 L1672.71 1215.88 L1673.3 1215.88 L1673.89 1215.88 L1674.47 1215.88 L1675.06 1215.88 L1675.65 1215.88 L1676.23 1215.88 L1676.82 1215.88 L1677.41 1215.88 L1677.99 1215.88 L1678.58 1215.88 L1679.17 1215.88 L1679.75 1215.88 L1680.34 1215.88 L1680.92 1215.88 L1681.51 1215.88 L1682.1 1215.88 L1682.68 1215.88 L1683.27 1215.88 L1683.86 1215.88 L1684.44 1215.88 L1685.03 1215.88 L1685.62 1215.88 L1686.2 1215.88 L1686.79 1215.88 L1687.37 1215.88 L1687.96 1215.88 L1688.55 1215.88 L1689.13 1215.88 L1689.72 1215.88 L1690.31 1215.88 L1690.89 1215.88 L1691.48 1215.88 L1692.07 1215.88 L1692.65 1215.88 L1693.24 1215.88 L1693.83 1215.88 L1694.41 1215.88 L1695 1215.88 L1695.58 1215.88 L1696.17 1215.88 L1696.76 1215.88 L1697.34 1215.88 L1697.93 1215.88 L1698.52 1215.88 L1699.1 1215.88 L1699.69 1215.88 L1700.28 1215.88 L1700.86 1215.88 L1701.45 1215.88 L1702.04 1215.88 L1702.62 1215.88 L1703.21 1215.88 L1703.79 1215.88 L1704.38 1215.88 L1704.97 1215.88 L1705.55 1215.88 L1706.14 1215.88 L1706.73 1215.88 L1707.31 1215.88 L1707.9 1215.88 L1708.49 1215.88 L1709.07 1215.88 L1709.66 1215.88 L1710.24 1215.88 L1710.83 1215.88 L1711.42 1215.88 L1712 1215.88 L1712.59 1215.88 L1713.18 1215.88 L1713.76 1215.88 L1714.35 1215.88 L1714.94 1215.88 L1715.52 1215.88 L1716.11 1215.88 L1716.7 1215.88 L1717.28 1215.88 L1717.87 1215.88 L1718.45 1215.88 L1719.04 1215.88 L1719.63 1215.88 L1720.21 1215.88 L1720.8 1215.88 L1721.39 1215.88 L1721.97 1215.88 L1722.56 1215.88 L1723.15 1215.88 L1723.73 1215.88 L1724.32 1215.88 L1724.91 1215.88 L1725.49 1215.88 L1726.08 1215.88 L1726.66 1215.88 L1727.25 1215.88 L1727.84 1215.88 L1728.42 1215.88 L1729.01 1215.88 L1729.6 1215.88 L1730.18 1215.88 L1730.77 1215.88 L1731.36 1215.88 L1731.94 1215.88 L1732.53 1215.88 L1733.11 1215.88 L1733.7 1215.88 L1734.29 1215.88 L1734.87 1215.88 L1735.46 1215.88 L1736.05 1215.88 L1736.63 1215.88 L1737.22 1215.88 L1737.81 1215.88 L1738.39 1215.88 L1738.98 1215.88 L1739.57 1215.88 L1740.15 1215.88 L1740.74 1215.88 L1741.32 1215.88 L1741.91 1215.88 L1742.5 1215.88 L1743.08 1215.88 L1743.67 1215.88 L1744.26 1215.88 L1744.84 1215.88 L1745.43 1215.88 L1746.02 1215.88 L1746.6 1215.88 L1747.19 1215.88 L1747.78 1215.88 L1748.36 1215.88 L1748.95 1215.88 L1749.53 1215.88 L1750.12 1215.88 L1750.71 1215.88 L1751.29 1215.88 L1751.88 1215.88 L1752.47 1215.88 L1753.05 1215.88 L1753.64 1215.88 L1754.23 1215.88 L1754.81 1215.88 L1755.4 1215.88 L1755.99 1215.88 L1756.57 1215.88 L1757.16 1215.88 L1757.74 1215.88 L1758.33 1215.88 L1758.92 1215.88 L1759.5 1215.88 L1760.09 1215.88 L1760.68 1215.88 L1761.26 1215.88 L1761.85 1215.88 L1762.44 1215.88 L1763.02 1215.88 L1763.61 1215.88 L1764.19 1215.88 L1764.78 1215.88 L1765.37 1215.88 L1765.95 1215.88 L1766.54 1215.88 L1767.13 1215.88 L1767.71 1215.88 L1768.3 1215.88 L1768.89 1215.88 L1769.47 1215.88 L1770.06 1215.88 L1770.65 1215.88 L1771.23 1215.88 L1771.82 1215.88 L1772.4 1215.88 L1772.99 1215.88 L1773.58 1215.88 L1774.16 1215.88 L1774.75 1215.88 L1775.34 1215.88 L1775.92 1215.88 L1776.51 1215.88 L1777.1 1215.88 L1777.68 1215.88 L1778.27 1215.88 L1778.86 1215.88 L1779.44 1215.88 L1780.03 1215.88 L1780.61 1215.88 L1781.2 1215.88 L1781.79 1215.88 L1782.37 1215.88 L1782.96 1215.88 L1783.55 1215.88 L1784.13 1215.88 L1784.72 1215.88 L1785.31 1215.88 L1785.89 1215.88 L1786.48 1215.88 L1787.06 1215.88 L1787.65 1215.88 L1788.24 1215.88 L1788.82 1215.88 L1789.41 1215.88 L1790 1215.88 L1790.58 1215.88 L1791.17 1215.88 L1791.76 1215.88 L1792.34 1215.88 L1792.93 1215.88 L1793.52 1215.88 L1794.1 1215.88 L1794.69 1215.88 L1795.27 1215.88 L1795.86 1215.88 L1796.45 1215.88 L1797.03 1215.88 L1797.62 1215.88 L1798.21 1215.88 L1798.79 1215.88 L1799.38 1215.88 L1799.97 1215.88 L1800.55 1215.88 L1801.14 1215.88 L1801.73 1215.88 L1802.31 1215.88 L1802.9 1215.88 L1803.48 1215.88 L1804.07 1215.88 L1804.66 1215.88 L1805.24 1215.88 L1805.83 1215.88 L1806.42 1215.88 L1807 1215.88 L1807.59 1215.88 L1808.18 1215.88 L1808.76 1215.88 L1809.35 1215.88 L1809.94 1215.88 L1810.52 1215.88 L1811.11 1215.88 L1811.69 1215.88 L1812.28 1215.88 L1812.87 1215.88 L1813.45 1215.88 L1814.04 1215.88 L1814.63 1215.88 L1815.21 1215.88 L1815.8 1215.88 L1816.39 1215.88 L1816.97 1215.88 L1817.56 1215.88 L1818.14 1215.88 L1818.73 1215.88 L1819.32 1215.88 L1819.9 1215.88 L1820.49 1215.88 L1821.08 1215.88 L1821.66 1215.88 L1822.25 1215.88 L1822.84 1215.88 L1823.42 1215.88 L1824.01 1215.88 L1824.6 1215.88 L1825.18 1215.88 L1825.77 1215.88 L1826.35 1215.88 L1826.94 1215.88 L1827.53 1215.88 L1828.11 1215.88 L1828.7 1215.88 L1829.29 1215.88 L1829.87 1215.88 L1830.46 1215.88 L1831.05 1215.88 L1831.63 1215.88 L1832.22 1215.88 L1832.81 1215.88 L1833.39 1215.88 L1833.98 1215.88 L1834.56 1215.88 L1835.15 1215.88 L1835.74 1215.88 L1836.32 1215.88 L1836.91 1215.88 L1837.5 1215.88 L1838.08 1215.88 L1838.67 1215.88 L1839.26 1215.88 L1839.84 1215.88 L1840.43 1215.88 L1841.01 1215.88 L1841.6 1215.88 L1842.19 1215.88 L1842.77 1215.88 L1843.36 1215.88 L1843.95 1215.88 L1844.53 1215.88 L1845.12 1215.88 L1845.71 1215.88 L1846.29 1215.88 L1846.88 1215.88 L1847.47 1215.88 L1848.05 1215.88 L1848.64 1215.88 L1849.22 1215.88 L1849.81 1215.88 L1850.4 1215.88 L1850.98 1215.88 L1851.57 1215.88 L1852.16 1215.88 L1852.74 1215.88 L1853.33 1215.88 L1853.92 1215.88 L1854.5 1215.88 L1855.09 1215.88 L1855.68 1215.88 L1856.26 1215.88 L1856.85 1215.88 L1857.43 1215.88 L1858.02 1215.88 L1858.61 1215.88 L1859.19 1215.88 L1859.78 1215.88 L1860.37 1215.88 L1860.95 1215.88 L1861.54 1215.88 L1862.13 1215.88 L1862.71 1215.88 L1863.3 1215.88 L1863.88 1215.88 L1864.47 1215.88 L1865.06 1215.88 L1865.64 1215.88 L1866.23 1215.88 L1866.82 1215.88 L1867.4 1215.88 L1867.99 1215.88 L1868.58 1215.88 L1869.16 1215.88 L1869.75 1215.88 L1870.34 1215.88 L1870.92 1215.88 L1871.51 1215.88 L1872.09 1215.88 L1872.68 1215.88 L1873.27 1215.88 L1873.85 1215.88 L1874.44 1215.88 L1875.03 1215.88 L1875.61 1215.88 L1876.2 1215.88 L1876.79 1215.88 L1877.37 1215.88 L1877.96 1215.88 L1878.55 1215.88 L1879.13 1215.88 L1879.72 1215.88 L1880.3 1215.88 L1880.89 1215.88 L1881.48 1215.88 L1882.06 1215.88 L1882.65 1215.88 L1883.24 1215.88 L1883.82 1215.88 L1884.41 1215.88 L1885 1215.88 L1885.58 1215.88 L1886.17 1215.88 L1886.76 1215.88 L1887.34 1215.88 L1887.93 1215.88 L1888.51 1215.88 L1889.1 1215.88 L1889.69 1215.88 L1890.27 1215.88 L1890.86 1215.88 L1891.45 1215.88 L1892.03 1215.88 L1892.62 1215.88 L1893.21 1215.88 L1893.79 1215.88 L1894.38 1215.88 L1894.96 1215.88 L1895.55 1215.88 L1896.14 1215.88 L1896.72 1215.88 L1897.31 1215.88 L1897.9 1215.88 L1898.48 1215.88 L1899.07 1215.88 L1899.66 1215.88 L1900.24 1215.88 L1900.83 1215.88 L1901.42 1215.88 L1902 1215.88 L1902.59 1215.88 L1903.17 1215.88 L1903.76 1215.88 L1904.35 1215.88 L1904.93 1215.88 L1905.52 1215.88 L1906.11 1215.88 L1906.69 1215.88 L1907.28 1215.88 L1907.87 1215.88 L1908.45 1215.88 L1909.04 1215.88 L1909.63 1215.88 L1910.21 1215.88 L1910.8 1215.88 L1911.38 1215.88 L1911.97 1215.88 L1912.56 1215.88 L1913.14 1215.88 L1913.73 1215.88 L1914.32 1215.88 L1914.9 1215.88 L1915.49 1215.88 L1916.08 1215.88 L1916.66 1215.88 L1917.25 1215.88 L1917.83 1215.88 L1918.42 1215.88 L1919.01 1215.88 L1919.59 1215.88 L1920.18 1215.88 L1920.77 1215.88 L1921.35 1215.88 L1921.94 1215.88 L1922.53 1215.88 L1923.11 1215.88 L1923.7 1215.88 L1924.29 1215.88 L1924.87 1215.88 L1925.46 1215.88 L1926.04 1215.88 L1926.63 1215.88 L1927.22 1215.88 L1927.8 1215.88 L1928.39 1215.88 L1928.98 1215.88 L1929.56 1215.88 L1930.15 1215.88 L1930.74 1215.88 L1931.32 1215.88 L1931.91 1215.88 L1932.5 1215.88 L1933.08 1215.88 L1933.67 1215.88 L1934.25 1215.88 L1934.84 1215.88 L1935.43 1215.88 L1936.01 1215.88 L1936.6 1215.88 L1937.19 1215.88 L1937.77 1215.88 L1938.36 1215.88 L1938.95 1215.88 L1939.53 1215.88 L1940.12 1215.88 L1940.71 1215.88 L1941.29 1215.88 L1941.88 1215.88 L1942.46 1215.88 L1943.05 1215.88 L1943.64 1215.88 L1944.22 1215.88 L1944.81 1215.88 L1945.4 1215.88 L1945.98 1215.88 L1946.57 1215.88 L1947.16 1215.88 L1947.74 1215.88 L1948.33 1215.88 L1948.91 1215.88 L1949.5 1215.88 L1950.09 1215.88 L1950.67 1215.88 L1951.26 1215.88 L1951.85 1215.88 L1952.43 1215.88 L1953.02 1215.88 L1953.61 1215.88 L1954.19 1215.88 L1954.78 1215.88 L1955.37 1215.88 L1955.95 1215.88 L1956.54 1215.88 L1957.12 1215.88 L1957.71 1215.88 L1958.3 1215.88 L1958.88 1215.88 L1959.47 1215.88 L1960.06 1215.88 L1960.64 1215.88 L1961.23 1215.88 L1961.82 1215.88 L1962.4 1215.88 L1962.99 1215.88 L1963.58 1215.88 L1964.16 1215.88 L1964.75 1215.88 L1965.33 1215.88 L1965.92 1215.88 L1966.51 1215.88 L1967.09 1215.88 L1967.68 1215.88 L1968.27 1215.88 L1968.85 1215.88 L1969.44 1215.88 L1970.03 1215.88 L1970.61 1215.88 L1971.2 1215.88 L1971.78 1215.88 L1972.37 1215.88 L1972.96 1215.88 L1973.54 1215.88 L1974.13 1215.88 L1974.72 1215.88 L1975.3 1215.88 L1975.89 1215.88 L1976.48 1215.88 L1977.06 1215.88 L1977.65 1215.88 L1978.24 1215.88 L1978.82 1215.88 L1979.41 1215.88 L1979.99 1215.88 L1980.58 1215.88 L1981.17 1215.88 L1981.75 1215.88 L1982.34 1215.88 L1982.93 1215.88 L1983.51 1215.88 L1984.1 1215.88 L1984.69 1215.88 L1985.27 1215.88 L1985.86 1215.88 L1986.45 1215.88 L1987.03 1215.88 L1987.62 1215.88 L1988.2 1215.88 L1988.79 1215.88 L1989.38 1215.88 L1989.96 1215.88 L1990.55 1215.88 L1991.14 1215.88 L1991.72 1215.88 L1992.31 1215.88 L1992.9 1215.88 L1993.48 1215.88 L1994.07 1215.88 L1994.65 1215.88 L1995.24 1215.88 L1995.83 1215.88 L1996.41 1215.88 L1997 1215.88 L1997.59 1215.88 L1998.17 1215.88 L1998.76 1215.88 L1999.35 1215.88 L1999.93 1215.88 L2000.52 1215.88 L2001.11 1215.88 L2001.69 1215.88 L2002.28 1215.88 L2002.86 1215.88 L2003.45 1215.88 L2004.04 1215.88 L2004.62 1215.88 L2005.21 1215.88 L2005.8 1215.88 L2006.38 1215.88 L2006.97 1215.88 L2007.56 1215.88 L2008.14 1215.88 L2008.73 1215.88 L2009.32 1215.88 L2009.9 1215.88 L2010.49 1215.88 L2011.07 1215.88 L2011.66 1215.88 L2012.25 1215.88 L2012.83 1215.88 L2013.42 1215.88 L2014.01 1215.88 L2014.59 1215.88 L2015.18 1215.88 L2015.77 1215.88 L2016.35 1215.88 L2016.94 1215.88 L2017.53 1215.88 L2018.11 1215.88 L2018.7 1215.88 L2019.28 1215.88 L2019.87 1215.88 L2020.46 1215.88 L2021.04 1215.88 L2021.63 1215.88 L2022.22 1215.88 L2022.8 1215.88 L2023.39 1215.88 L2023.98 1215.88 L2024.56 1215.88 L2025.15 1215.88 L2025.73 1215.88 L2026.32 1215.88 L2026.91 1215.88 L2027.49 1215.88 L2028.08 1215.88 L2028.67 1215.88 L2029.25 1215.88 L2029.84 1215.88 L2030.43 1215.88 L2031.01 1215.88 L2031.6 1215.88 L2032.19 1215.88 L2032.77 1215.88 L2033.36 1215.88 L2033.94 1215.88 L2034.53 1215.88 L2035.12 1215.88 L2035.7 1215.88 L2036.29 1215.88 L2036.88 1215.88 L2037.46 1215.88 L2038.05 1215.88 L2038.64 1215.88 L2039.22 1215.88 L2039.81 1215.88 L2040.4 1215.88 L2040.98 1215.88 L2041.57 1215.88 L2042.15 1215.88 L2042.74 1215.88 L2043.33 1215.88 L2043.91 1215.88 L2044.5 1215.88 L2045.09 1215.88 L2045.67 1215.88 L2046.26 1215.88 L2046.85 1215.88 L2047.43 1215.88 L2048.02 1215.88 L2048.6 1215.88 L2049.19 1215.88 L2049.78 1215.88 L2050.36 1215.88 L2050.95 1215.88 L2051.54 1215.88 L2052.12 1215.88 L2052.71 1215.88 L2053.3 1215.88 L2053.88 1215.88 L2054.47 1215.88 L2055.06 1215.88 L2055.64 1215.88 L2056.23 1215.88 L2056.81 1215.88 L2057.4 1215.88 L2057.99 1215.88 L2058.57 1215.88 L2059.16 1215.88 L2059.75 1215.88 L2060.33 1215.88 L2060.92 1215.88 L2061.51 1215.88 L2062.09 1215.88 L2062.68 1215.88 L2063.27 1215.88 L2063.85 1215.88 L2064.44 1215.88 L2065.02 1215.88 L2065.61 1215.88 L2066.2 1215.88 L2066.78 1215.88 L2067.37 1215.88 L2067.96 1215.88 L2068.54 1215.88 L2069.13 1215.88 L2069.72 1215.88 L2070.3 1215.88 L2070.89 1215.88 L2071.48 1215.88 L2072.06 1215.88 L2072.65 1215.88 L2073.23 1215.88 L2073.82 1215.88 L2074.41 1215.88 L2074.99 1215.88 L2075.58 1215.88 L2076.17 1215.88 L2076.75 1215.88 L2077.34 1215.88 L2077.93 1215.88 L2078.51 1215.88 L2079.1 1215.88 L2079.68 1215.88 L2080.27 1215.88 L2080.86 1215.88 L2081.44 1215.88 L2082.03 1215.88 L2082.62 1215.88 L2083.2 1215.88 L2083.79 1215.88 L2084.38 1215.88 L2084.96 1215.88 L2085.55 1215.88 L2086.14 1215.88 L2086.72 1215.88 L2087.31 1215.88 L2087.89 1215.88 L2088.48 1215.88 L2089.07 1215.88 L2089.65 1215.88 L2090.24 1215.88 L2090.83 1215.88 L2091.41 1215.88 L2092 1215.88 L2092.59 1215.88 L2093.17 1215.88 L2093.76 1215.88 L2094.35 1215.88 L2094.93 1215.88 L2095.52 1215.88 L2096.1 1215.88 L2096.69 1215.88 L2097.28 1215.88 L2097.86 1215.88 L2098.45 1215.88 L2099.04 1215.88 L2099.62 1215.88 L2100.21 1215.88 L2100.8 1215.88 L2101.38 1215.88 L2101.97 1215.88 L2102.55 1215.88 L2103.14 1215.88 L2103.73 1215.88 L2104.31 1215.88 L2104.9 1215.88 L2105.49 1215.88 L2106.07 1215.88 L2106.66 1215.88 L2107.25 1215.88 L2107.83 1215.88 L2108.42 1215.88 L2109.01 1215.88 L2109.59 1215.88 L2110.18 1215.88 L2110.76 1215.88 L2111.35 1215.88 L2111.94 1215.88 L2112.52 1215.88 L2113.11 1215.88 L2113.7 1215.88 L2114.28 1215.88 L2114.87 1215.88 L2115.46 1215.88 L2116.04 1215.88 L2116.63 1215.88 L2117.22 1215.88 L2117.8 1215.88 L2118.39 1215.88 L2118.97 1215.88 L2119.56 1215.88 L2120.15 1215.88 L2120.73 1215.88 L2121.32 1215.88 L2121.91 1215.88 L2122.49 1215.88 L2123.08 1215.88 L2123.67 1215.88 L2124.25 1215.88 L2124.84 1215.88 L2125.42 1215.88 L2126.01 1215.88 L2126.6 1215.88 L2127.18 1215.88 L2127.77 1215.88 L2128.36 1215.88 L2128.94 1215.88 L2129.53 1215.88 L2130.12 1215.88 L2130.7 1215.88 L2131.29 1215.88 L2131.88 1215.88 L2132.46 1215.88 L2133.05 1215.88 L2133.63 1215.88 L2134.22 1215.88 L2134.81 1215.88 L2135.39 1215.88 L2135.98 1215.88 L2136.57 1215.88 L2137.15 1215.88 L2137.74 1215.88 L2138.33 1215.88 L2138.91 1215.88 L2139.5 1215.88 L2140.09 1215.88 L2140.67 1215.88 L2141.26 1215.88 L2141.84 1215.88 L2142.43 1215.88 L2143.02 1215.88 L2143.6 1215.88 L2144.19 1215.88 L2144.78 1215.88 L2145.36 1215.88 L2145.95 1215.88 L2146.54 1215.88 L2147.12 1215.88 L2147.71 1215.88 L2148.3 1215.88 L2148.88 1215.88 L2149.47 1215.88 L2150.05 1215.88 L2150.64 1215.88 L2151.23 1215.88 L2151.81 1215.88 L2152.4 1215.88 L2152.99 1215.88 L2153.57 1215.88 L2154.16 1215.88 L2154.75 1215.88 L2155.33 1215.88 L2155.92 1215.88 L2156.5 1215.88 L2157.09 1215.88 L2157.68 1215.88 L2158.26 1215.88 L2158.26 1215.38 L2157.68 1215.38 L2157.09 1215.38 L2156.5 1215.38 L2155.92 1215.38 L2155.33 1215.38 L2154.75 1215.38 L2154.16 1215.38 L2153.57 1215.38 L2152.99 1215.38 L2152.4 1215.38 L2151.81 1215.38 L2151.23 1215.38 L2150.64 1215.38 L2150.05 1215.38 L2149.47 1215.38 L2148.88 1215.38 L2148.3 1215.38 L2147.71 1215.38 L2147.12 1215.38 L2146.54 1215.38 L2145.95 1215.38 L2145.36 1215.38 L2144.78 1215.38 L2144.19 1215.38 L2143.6 1215.38 L2143.02 1215.38 L2142.43 1215.38 L2141.84 1215.38 L2141.26 1215.38 L2140.67 1215.38 L2140.09 1215.38 L2139.5 1215.38 L2138.91 1215.38 L2138.33 1215.38 L2137.74 1215.38 L2137.15 1215.38 L2136.57 1215.38 L2135.98 1215.38 L2135.39 1215.38 L2134.81 1215.38 L2134.22 1215.38 L2133.63 1215.38 L2133.05 1215.38 L2132.46 1215.38 L2131.88 1215.38 L2131.29 1215.38 L2130.7 1215.38 L2130.12 1215.38 L2129.53 1215.38 L2128.94 1215.38 L2128.36 1215.38 L2127.77 1215.38 L2127.18 1215.38 L2126.6 1215.38 L2126.01 1215.38 L2125.42 1215.38 L2124.84 1215.38 L2124.25 1215.38 L2123.67 1215.38 L2123.08 1215.38 L2122.49 1215.38 L2121.91 1215.38 L2121.32 1215.38 L2120.73 1215.38 L2120.15 1215.38 L2119.56 1215.38 L2118.97 1215.38 L2118.39 1215.38 L2117.8 1215.38 L2117.22 1215.38 L2116.63 1215.38 L2116.04 1215.38 L2115.46 1215.38 L2114.87 1215.38 L2114.28 1215.38 L2113.7 1215.38 L2113.11 1215.38 L2112.52 1215.38 L2111.94 1215.38 L2111.35 1215.38 L2110.76 1215.38 L2110.18 1215.38 L2109.59 1215.38 L2109.01 1215.38 L2108.42 1215.38 L2107.83 1215.38 L2107.25 1215.38 L2106.66 1215.38 L2106.07 1215.38 L2105.49 1215.38 L2104.9 1215.38 L2104.31 1215.38 L2103.73 1215.38 L2103.14 1215.38 L2102.55 1215.38 L2101.97 1215.38 L2101.38 1215.38 L2100.8 1215.38 L2100.21 1215.38 L2099.62 1215.38 L2099.04 1215.38 L2098.45 1215.38 L2097.86 1215.38 L2097.28 1215.38 L2096.69 1215.38 L2096.1 1215.38 L2095.52 1215.38 L2094.93 1215.38 L2094.35 1215.38 L2093.76 1215.38 L2093.17 1215.38 L2092.59 1215.38 L2092 1215.38 L2091.41 1215.38 L2090.83 1215.38 L2090.24 1215.38 L2089.65 1215.38 L2089.07 1215.38 L2088.48 1215.38 L2087.89 1215.38 L2087.31 1215.38 L2086.72 1215.38 L2086.14 1215.38 L2085.55 1215.38 L2084.96 1215.38 L2084.38 1215.38 L2083.79 1215.38 L2083.2 1215.38 L2082.62 1215.38 L2082.03 1215.38 L2081.44 1215.38 L2080.86 1215.38 L2080.27 1215.38 L2079.68 1215.38 L2079.1 1215.38 L2078.51 1215.38 L2077.93 1215.38 L2077.34 1215.38 L2076.75 1215.38 L2076.17 1215.38 L2075.58 1215.38 L2074.99 1215.38 L2074.41 1215.38 L2073.82 1215.38 L2073.23 1215.38 L2072.65 1215.38 L2072.06 1215.38 L2071.48 1215.38 L2070.89 1215.38 L2070.3 1215.38 L2069.72 1215.38 L2069.13 1215.38 L2068.54 1215.38 L2067.96 1215.38 L2067.37 1215.38 L2066.78 1215.38 L2066.2 1215.38 L2065.61 1215.38 L2065.02 1215.38 L2064.44 1215.38 L2063.85 1215.38 L2063.27 1215.38 L2062.68 1215.38 L2062.09 1215.38 L2061.51 1215.38 L2060.92 1215.38 L2060.33 1215.38 L2059.75 1215.38 L2059.16 1215.38 L2058.57 1215.38 L2057.99 1215.38 L2057.4 1215.38 L2056.81 1215.38 L2056.23 1215.38 L2055.64 1215.38 L2055.06 1215.38 L2054.47 1215.38 L2053.88 1215.38 L2053.3 1215.38 L2052.71 1215.38 L2052.12 1215.38 L2051.54 1215.38 L2050.95 1215.38 L2050.36 1215.38 L2049.78 1215.38 L2049.19 1215.38 L2048.6 1215.38 L2048.02 1215.38 L2047.43 1215.38 L2046.85 1215.38 L2046.26 1215.38 L2045.67 1215.38 L2045.09 1215.38 L2044.5 1215.38 L2043.91 1215.38 L2043.33 1215.38 L2042.74 1215.38 L2042.15 1215.38 L2041.57 1215.38 L2040.98 1215.38 L2040.4 1215.38 L2039.81 1215.38 L2039.22 1215.38 L2038.64 1215.38 L2038.05 1215.38 L2037.46 1215.38 L2036.88 1215.38 L2036.29 1215.38 L2035.7 1215.38 L2035.12 1215.38 L2034.53 1215.38 L2033.94 1215.38 L2033.36 1215.38 L2032.77 1215.38 L2032.19 1215.38 L2031.6 1215.38 L2031.01 1215.38 L2030.43 1215.38 L2029.84 1215.38 L2029.25 1215.38 L2028.67 1215.38 L2028.08 1215.38 L2027.49 1215.38 L2026.91 1215.38 L2026.32 1215.38 L2025.73 1215.38 L2025.15 1215.38 L2024.56 1215.38 L2023.98 1215.38 L2023.39 1215.38 L2022.8 1215.38 L2022.22 1215.38 L2021.63 1215.38 L2021.04 1215.38 L2020.46 1215.38 L2019.87 1215.38 L2019.28 1215.38 L2018.7 1215.38 L2018.11 1215.38 L2017.53 1215.38 L2016.94 1215.38 L2016.35 1215.38 L2015.77 1215.38 L2015.18 1215.38 L2014.59 1215.38 L2014.01 1215.38 L2013.42 1215.38 L2012.83 1215.38 L2012.25 1215.38 L2011.66 1215.38 L2011.07 1215.38 L2010.49 1215.38 L2009.9 1215.38 L2009.32 1215.38 L2008.73 1215.38 L2008.14 1215.38 L2007.56 1215.38 L2006.97 1215.38 L2006.38 1215.38 L2005.8 1215.38 L2005.21 1215.38 L2004.62 1215.38 L2004.04 1215.38 L2003.45 1215.38 L2002.86 1215.38 L2002.28 1215.38 L2001.69 1215.38 L2001.11 1215.38 L2000.52 1215.38 L1999.93 1215.38 L1999.35 1215.38 L1998.76 1215.38 L1998.17 1215.38 L1997.59 1215.38 L1997 1215.38 L1996.41 1215.38 L1995.83 1215.38 L1995.24 1215.38 L1994.65 1215.38 L1994.07 1215.38 L1993.48 1215.38 L1992.9 1215.38 L1992.31 1215.38 L1991.72 1215.38 L1991.14 1215.38 L1990.55 1215.38 L1989.96 1215.38 L1989.38 1215.38 L1988.79 1215.38 L1988.2 1215.38 L1987.62 1215.38 L1987.03 1215.38 L1986.45 1215.38 L1985.86 1215.38 L1985.27 1215.38 L1984.69 1215.38 L1984.1 1215.38 L1983.51 1215.38 L1982.93 1215.38 L1982.34 1215.38 L1981.75 1215.38 L1981.17 1215.38 L1980.58 1215.38 L1979.99 1215.38 L1979.41 1215.38 L1978.82 1215.38 L1978.24 1215.38 L1977.65 1215.38 L1977.06 1215.38 L1976.48 1215.38 L1975.89 1215.38 L1975.3 1215.38 L1974.72 1215.38 L1974.13 1215.38 L1973.54 1215.38 L1972.96 1215.38 L1972.37 1215.38 L1971.78 1215.38 L1971.2 1215.38 L1970.61 1215.38 L1970.03 1215.38 L1969.44 1215.38 L1968.85 1215.38 L1968.27 1215.38 L1967.68 1215.38 L1967.09 1215.38 L1966.51 1215.38 L1965.92 1215.38 L1965.33 1215.38 L1964.75 1215.38 L1964.16 1215.38 L1963.58 1215.38 L1962.99 1215.38 L1962.4 1215.38 L1961.82 1215.38 L1961.23 1215.38 L1960.64 1215.38 L1960.06 1215.38 L1959.47 1215.38 L1958.88 1215.38 L1958.3 1215.38 L1957.71 1215.38 L1957.12 1215.38 L1956.54 1215.38 L1955.95 1215.38 L1955.37 1215.38 L1954.78 1215.38 L1954.19 1215.38 L1953.61 1215.38 L1953.02 1215.38 L1952.43 1215.38 L1951.85 1215.38 L1951.26 1215.38 L1950.67 1215.38 L1950.09 1215.38 L1949.5 1215.38 L1948.91 1215.38 L1948.33 1215.38 L1947.74 1215.38 L1947.16 1215.38 L1946.57 1215.38 L1945.98 1215.38 L1945.4 1215.38 L1944.81 1215.38 L1944.22 1215.38 L1943.64 1215.38 L1943.05 1215.38 L1942.46 1215.38 L1941.88 1215.38 L1941.29 1215.38 L1940.71 1215.38 L1940.12 1215.38 L1939.53 1215.38 L1938.95 1215.38 L1938.36 1215.38 L1937.77 1215.38 L1937.19 1215.38 L1936.6 1215.38 L1936.01 1215.38 L1935.43 1215.38 L1934.84 1215.38 L1934.25 1215.38 L1933.67 1215.38 L1933.08 1215.38 L1932.5 1215.38 L1931.91 1215.38 L1931.32 1215.38 L1930.74 1215.38 L1930.15 1215.38 L1929.56 1215.38 L1928.98 1215.38 L1928.39 1215.38 L1927.8 1215.38 L1927.22 1215.38 L1926.63 1215.38 L1926.04 1215.38 L1925.46 1215.38 L1924.87 1215.38 L1924.29 1215.38 L1923.7 1215.38 L1923.11 1215.38 L1922.53 1215.38 L1921.94 1215.38 L1921.35 1215.38 L1920.77 1215.38 L1920.18 1215.38 L1919.59 1215.38 L1919.01 1215.38 L1918.42 1215.38 L1917.83 1215.38 L1917.25 1215.38 L1916.66 1215.38 L1916.08 1215.38 L1915.49 1215.38 L1914.9 1215.38 L1914.32 1215.38 L1913.73 1215.38 L1913.14 1215.38 L1912.56 1215.38 L1911.97 1215.38 L1911.38 1215.38 L1910.8 1215.38 L1910.21 1215.38 L1909.63 1215.38 L1909.04 1215.38 L1908.45 1215.38 L1907.87 1215.38 L1907.28 1215.38 L1906.69 1215.38 L1906.11 1215.38 L1905.52 1215.38 L1904.93 1215.38 L1904.35 1215.38 L1903.76 1215.38 L1903.17 1215.38 L1902.59 1215.38 L1902 1215.38 L1901.42 1215.38 L1900.83 1215.38 L1900.24 1215.38 L1899.66 1215.38 L1899.07 1215.38 L1898.48 1215.38 L1897.9 1215.38 L1897.31 1215.38 L1896.72 1215.38 L1896.14 1215.38 L1895.55 1215.38 L1894.96 1215.38 L1894.38 1215.38 L1893.79 1215.38 L1893.21 1215.38 L1892.62 1215.38 L1892.03 1215.38 L1891.45 1215.38 L1890.86 1215.38 L1890.27 1215.38 L1889.69 1215.38 L1889.1 1215.38 L1888.51 1215.38 L1887.93 1215.38 L1887.34 1215.38 L1886.76 1215.38 L1886.17 1215.38 L1885.58 1215.38 L1885 1215.38 L1884.41 1215.38 L1883.82 1215.38 L1883.24 1215.38 L1882.65 1215.38 L1882.06 1215.38 L1881.48 1215.38 L1880.89 1215.38 L1880.3 1215.38 L1879.72 1215.38 L1879.13 1215.38 L1878.55 1215.38 L1877.96 1215.38 L1877.37 1215.38 L1876.79 1215.38 L1876.2 1215.38 L1875.61 1215.38 L1875.03 1215.38 L1874.44 1215.38 L1873.85 1215.38 L1873.27 1215.38 L1872.68 1215.38 L1872.09 1215.38 L1871.51 1215.38 L1870.92 1215.38 L1870.34 1215.38 L1869.75 1215.38 L1869.16 1215.38 L1868.58 1215.38 L1867.99 1215.38 L1867.4 1215.38 L1866.82 1215.38 L1866.23 1215.38 L1865.64 1215.38 L1865.06 1215.38 L1864.47 1215.38 L1863.88 1215.38 L1863.3 1215.38 L1862.71 1215.38 L1862.13 1215.38 L1861.54 1215.38 L1860.95 1215.38 L1860.37 1215.38 L1859.78 1215.38 L1859.19 1215.38 L1858.61 1215.38 L1858.02 1215.38 L1857.43 1215.38 L1856.85 1215.38 L1856.26 1215.38 L1855.68 1215.38 L1855.09 1215.38 L1854.5 1215.38 L1853.92 1215.38 L1853.33 1215.38 L1852.74 1215.38 L1852.16 1215.38 L1851.57 1215.38 L1850.98 1215.38 L1850.4 1215.38 L1849.81 1215.38 L1849.22 1215.38 L1848.64 1215.38 L1848.05 1215.38 L1847.47 1215.38 L1846.88 1215.38 L1846.29 1215.38 L1845.71 1215.38 L1845.12 1215.38 L1844.53 1215.38 L1843.95 1215.38 L1843.36 1215.38 L1842.77 1215.38 L1842.19 1215.38 L1841.6 1215.38 L1841.01 1215.38 L1840.43 1215.38 L1839.84 1215.38 L1839.26 1215.38 L1838.67 1215.38 L1838.08 1215.38 L1837.5 1215.38 L1836.91 1215.38 L1836.32 1215.38 L1835.74 1215.38 L1835.15 1215.38 L1834.56 1215.38 L1833.98 1215.38 L1833.39 1215.38 L1832.81 1215.38 L1832.22 1215.38 L1831.63 1215.38 L1831.05 1215.38 L1830.46 1215.38 L1829.87 1215.38 L1829.29 1215.38 L1828.7 1215.38 L1828.11 1215.38 L1827.53 1215.38 L1826.94 1215.38 L1826.35 1215.38 L1825.77 1215.38 L1825.18 1215.38 L1824.6 1215.38 L1824.01 1215.38 L1823.42 1215.38 L1822.84 1215.38 L1822.25 1215.38 L1821.66 1215.38 L1821.08 1215.38 L1820.49 1215.38 L1819.9 1215.38 L1819.32 1215.38 L1818.73 1215.38 L1818.14 1215.38 L1817.56 1215.38 L1816.97 1215.38 L1816.39 1215.38 L1815.8 1215.38 L1815.21 1215.38 L1814.63 1215.38 L1814.04 1215.38 L1813.45 1215.38 L1812.87 1215.38 L1812.28 1215.38 L1811.69 1215.38 L1811.11 1215.38 L1810.52 1215.38 L1809.94 1215.38 L1809.35 1215.38 L1808.76 1215.38 L1808.18 1215.38 L1807.59 1215.38 L1807 1215.38 L1806.42 1215.38 L1805.83 1215.38 L1805.24 1215.38 L1804.66 1215.38 L1804.07 1215.38 L1803.48 1215.38 L1802.9 1215.38 L1802.31 1215.38 L1801.73 1215.38 L1801.14 1215.38 L1800.55 1215.38 L1799.97 1215.38 L1799.38 1215.38 L1798.79 1215.38 L1798.21 1215.38 L1797.62 1215.38 L1797.03 1215.38 L1796.45 1215.38 L1795.86 1215.38 L1795.27 1215.38 L1794.69 1215.38 L1794.1 1215.38 L1793.52 1215.38 L1792.93 1215.38 L1792.34 1215.38 L1791.76 1215.38 L1791.17 1215.38 L1790.58 1215.38 L1790 1215.38 L1789.41 1215.38 L1788.82 1215.38 L1788.24 1215.38 L1787.65 1215.38 L1787.06 1215.38 L1786.48 1215.38 L1785.89 1215.38 L1785.31 1215.38 L1784.72 1215.38 L1784.13 1215.38 L1783.55 1215.38 L1782.96 1215.38 L1782.37 1215.38 L1781.79 1215.38 L1781.2 1215.38 L1780.61 1215.38 L1780.03 1215.38 L1779.44 1215.38 L1778.86 1215.38 L1778.27 1215.38 L1777.68 1215.38 L1777.1 1215.38 L1776.51 1215.38 L1775.92 1215.38 L1775.34 1215.38 L1774.75 1215.38 L1774.16 1215.38 L1773.58 1215.38 L1772.99 1215.38 L1772.4 1215.38 L1771.82 1215.38 L1771.23 1215.38 L1770.65 1215.38 L1770.06 1215.38 L1769.47 1215.38 L1768.89 1215.38 L1768.3 1215.38 L1767.71 1215.38 L1767.13 1215.38 L1766.54 1215.38 L1765.95 1215.38 L1765.37 1215.38 L1764.78 1215.38 L1764.19 1215.38 L1763.61 1215.38 L1763.02 1215.38 L1762.44 1215.38 L1761.85 1215.38 L1761.26 1215.38 L1760.68 1215.38 L1760.09 1215.38 L1759.5 1215.38 L1758.92 1215.38 L1758.33 1215.38 L1757.74 1215.38 L1757.16 1215.38 L1756.57 1215.38 L1755.99 1215.38 L1755.4 1215.38 L1754.81 1215.38 L1754.23 1215.38 L1753.64 1215.38 L1753.05 1215.38 L1752.47 1215.38 L1751.88 1215.38 L1751.29 1215.38 L1750.71 1215.38 L1750.12 1215.38 L1749.53 1215.38 L1748.95 1215.38 L1748.36 1215.38 L1747.78 1215.38 L1747.19 1215.38 L1746.6 1215.38 L1746.02 1215.38 L1745.43 1215.38 L1744.84 1215.38 L1744.26 1215.38 L1743.67 1215.38 L1743.08 1215.38 L1742.5 1215.38 L1741.91 1215.38 L1741.32 1215.38 L1740.74 1215.38 L1740.15 1215.38 L1739.57 1215.38 L1738.98 1215.38 L1738.39 1215.38 L1737.81 1215.38 L1737.22 1215.38 L1736.63 1215.38 L1736.05 1215.38 L1735.46 1215.38 L1734.87 1215.38 L1734.29 1215.38 L1733.7 1215.38 L1733.11 1215.38 L1732.53 1215.38 L1731.94 1215.38 L1731.36 1215.38 L1730.77 1215.38 L1730.18 1215.38 L1729.6 1215.38 L1729.01 1215.38 L1728.42 1215.38 L1727.84 1215.38 L1727.25 1215.38 L1726.66 1215.38 L1726.08 1215.38 L1725.49 1215.38 L1724.91 1215.38 L1724.32 1215.38 L1723.73 1215.38 L1723.15 1215.38 L1722.56 1215.38 L1721.97 1215.38 L1721.39 1215.38 L1720.8 1215.38 L1720.21 1215.38 L1719.63 1215.38 L1719.04 1215.38 L1718.45 1215.38 L1717.87 1215.38 L1717.28 1215.38 L1716.7 1215.38 L1716.11 1215.38 L1715.52 1215.38 L1714.94 1215.38 L1714.35 1215.38 L1713.76 1215.38 L1713.18 1215.38 L1712.59 1215.38 L1712 1215.38 L1711.42 1215.38 L1710.83 1215.38 L1710.24 1215.38 L1709.66 1215.38 L1709.07 1215.38 L1708.49 1215.38 L1707.9 1215.38 L1707.31 1215.38 L1706.73 1215.38 L1706.14 1215.38 L1705.55 1215.38 L1704.97 1215.38 L1704.38 1215.38 L1703.79 1215.38 L1703.21 1215.38 L1702.62 1215.38 L1702.04 1215.38 L1701.45 1215.38 L1700.86 1215.38 L1700.28 1215.38 L1699.69 1215.38 L1699.1 1215.38 L1698.52 1215.38 L1697.93 1215.38 L1697.34 1215.38 L1696.76 1215.38 L1696.17 1215.38 L1695.58 1215.38 L1695 1215.38 L1694.41 1215.38 L1693.83 1215.38 L1693.24 1215.38 L1692.65 1215.38 L1692.07 1215.38 L1691.48 1215.38 L1690.89 1215.38 L1690.31 1215.38 L1689.72 1215.38 L1689.13 1215.38 L1688.55 1215.38 L1687.96 1215.38 L1687.37 1215.38 L1686.79 1215.38 L1686.2 1215.38 L1685.62 1215.38 L1685.03 1215.38 L1684.44 1215.38 L1683.86 1215.38 L1683.27 1215.38 L1682.68 1215.38 L1682.1 1215.38 L1681.51 1215.38 L1680.92 1215.38 L1680.34 1215.38 L1679.75 1215.38 L1679.17 1215.38 L1678.58 1215.38 L1677.99 1215.38 L1677.41 1215.38 L1676.82 1215.38 L1676.23 1215.38 L1675.65 1215.38 L1675.06 1215.38 L1674.47 1215.38 L1673.89 1215.38 L1673.3 1215.38 L1672.71 1215.38 L1672.13 1215.38 L1671.54 1215.38 L1670.96 1215.38 L1670.37 1215.38 L1669.78 1215.38 L1669.2 1215.38 L1668.61 1215.38 L1668.02 1215.38 L1667.44 1215.38 L1666.85 1215.38 L1666.26 1215.38 L1665.68 1215.38 L1665.09 1215.38 L1664.5 1215.38 L1663.92 1215.38 L1663.33 1215.38 L1662.75 1215.38 L1662.16 1215.38 L1661.57 1215.38 L1660.99 1215.38 L1660.4 1215.38 L1659.81 1215.38 L1659.23 1215.38 L1658.64 1215.38 L1658.05 1215.38 L1657.47 1215.38 L1656.88 1215.38 L1656.29 1215.38 L1655.71 1215.38 L1655.12 1215.38 L1654.54 1215.38 L1653.95 1215.38 L1653.36 1215.38 L1652.78 1215.38 L1652.19 1215.38 L1651.6 1215.38 L1651.02 1215.38 L1650.43 1215.38 L1649.84 1215.38 L1649.26 1215.38 L1648.67 1215.38 L1648.09 1215.38 L1647.5 1215.38 L1646.91 1215.38 L1646.33 1215.38 L1645.74 1215.38 L1645.15 1215.38 L1644.57 1215.38 L1643.98 1215.38 L1643.39 1215.38 L1642.81 1215.38 L1642.22 1215.38 L1641.63 1215.38 L1641.05 1215.38 L1640.46 1215.38 L1639.88 1215.38 L1639.29 1215.38 L1638.7 1215.38 L1638.12 1215.38 L1637.53 1215.38 L1636.94 1215.38 L1636.36 1215.38 L1635.77 1215.38 L1635.18 1215.38 L1634.6 1215.38 L1634.01 1215.38 L1633.42 1215.38 L1632.84 1215.38 L1632.25 1215.38 L1631.67 1215.38 L1631.08 1215.38 L1630.49 1215.38 L1629.91 1215.38 L1629.32 1215.38 L1628.73 1215.38 L1628.15 1215.38 L1627.56 1215.38 L1626.97 1215.38 L1626.39 1215.38 L1625.8 1215.38 L1625.22 1215.38 L1624.63 1215.38 L1624.04 1215.38 L1623.46 1215.38 L1622.87 1215.38 L1622.28 1215.38 L1621.7 1215.38 L1621.11 1215.38 L1620.52 1215.38 L1619.94 1215.38 L1619.35 1215.38 L1618.76 1215.38 L1618.18 1215.38 L1617.59 1215.38 L1617.01 1215.38 L1616.42 1215.38 L1615.83 1215.38 L1615.25 1215.38 L1614.66 1215.38 L1614.07 1215.38 L1613.49 1215.38 L1612.9 1215.38 L1612.31 1215.38 L1611.73 1215.38 L1611.14 1215.38 L1610.55 1215.38 L1609.97 1215.38 L1609.38 1215.38 L1608.8 1215.38 L1608.21 1215.38 L1607.62 1215.38 L1607.04 1215.38 L1606.45 1215.38 L1605.86 1215.38 L1605.28 1215.38 L1604.69 1215.38 L1604.1 1215.38 L1603.52 1215.38 L1602.93 1215.38 L1602.34 1215.38 L1601.76 1215.38 L1601.17 1215.38 L1600.59 1215.38 L1600 1215.38 L1599.41 1215.38 L1598.83 1215.38 L1598.24 1215.38 L1597.65 1215.38 L1597.07 1215.38 L1596.48 1215.38 L1595.89 1215.38 L1595.31 1215.38 L1594.72 1215.38 L1594.14 1215.38 L1593.55 1215.38 L1592.96 1215.38 L1592.38 1215.38 L1591.79 1215.38 L1591.2 1215.38 L1590.62 1215.38 L1590.03 1215.38 L1589.44 1215.38 L1588.86 1215.38 L1588.27 1215.38 L1587.68 1215.38 L1587.1 1215.38 L1586.51 1215.38 L1585.93 1215.38 L1585.34 1215.38 L1584.75 1215.38 L1584.17 1215.38 L1583.58 1215.38 L1582.99 1215.38 L1582.41 1215.38 L1581.82 1215.38 L1581.23 1215.38 L1580.65 1215.38 L1580.06 1215.38 L1579.47 1215.38 L1578.89 1215.38 L1578.3 1215.38 L1577.72 1215.38 L1577.13 1215.38 L1576.54 1215.38 L1575.96 1215.38 L1575.37 1215.38 L1574.78 1215.38 L1574.2 1215.38 L1573.61 1215.38 L1573.02 1215.38 L1572.44 1215.38 L1571.85 1215.38 L1571.27 1215.38 L1570.68 1215.38 L1570.09 1215.38 L1569.51 1215.38 L1568.92 1215.38 L1568.33 1215.38 L1567.75 1215.38 L1567.16 1215.38 L1566.57 1215.38 L1565.99 1215.38 L1565.4 1215.38 L1564.81 1215.38 L1564.23 1215.38 L1563.64 1215.38 L1563.06 1215.38 L1562.47 1215.38 L1561.88 1215.38 L1561.3 1215.38 L1560.71 1215.38 L1560.12 1215.38 L1559.54 1215.38 L1558.95 1215.38 L1558.36 1215.38 L1557.78 1215.38 L1557.19 1215.38 L1556.6 1215.38 L1556.02 1215.38 L1555.43 1215.38 L1554.85 1215.38 L1554.26 1215.38 L1553.67 1215.38 L1553.09 1215.38 L1552.5 1215.38 L1551.91 1215.38 L1551.33 1215.38 L1550.74 1215.38 L1550.15 1215.38 L1549.57 1215.38 L1548.98 1215.38 L1548.4 1215.38 L1547.81 1215.38 L1547.22 1215.38 L1546.64 1215.38 L1546.05 1215.38 L1545.46 1215.38 L1544.88 1215.38 L1544.29 1215.38 L1543.7 1215.38 L1543.12 1215.38 L1542.53 1215.38 L1541.94 1215.38 L1541.36 1215.38 L1540.77 1215.38 L1540.19 1215.38 L1539.6 1215.38 L1539.01 1215.38 L1538.43 1215.38 L1537.84 1215.38 L1537.25 1215.38 L1536.67 1215.38 L1536.08 1215.38 L1535.49 1215.38 L1534.91 1215.38 L1534.32 1215.38 L1533.73 1215.38 L1533.15 1215.38 L1532.56 1215.38 L1531.98 1215.38 L1531.39 1215.38 L1530.8 1215.38 L1530.22 1215.38 L1529.63 1215.38 L1529.04 1215.38 L1528.46 1215.38 L1527.87 1215.38 L1527.28 1215.38 L1526.7 1215.38 L1526.11 1215.38 L1525.52 1215.38 L1524.94 1215.38 L1524.35 1215.38 L1523.77 1215.38 L1523.18 1215.38 L1522.59 1215.38 L1522.01 1215.38 L1521.42 1215.38 L1520.83 1215.38 L1520.25 1215.38 L1519.66 1215.38 L1519.07 1215.38 L1518.49 1215.38 L1517.9 1215.38 L1517.32 1215.38 L1516.73 1215.38 L1516.14 1215.38 L1515.56 1215.38 L1514.97 1215.38 L1514.38 1215.38 L1513.8 1215.38 L1513.21 1215.38 L1512.62 1215.38 L1512.04 1215.38 L1511.45 1215.38 L1510.86 1215.38 L1510.28 1215.38 L1509.69 1215.38 L1509.11 1215.38 L1508.52 1215.38 L1507.93 1215.38 L1507.35 1215.38 L1506.76 1215.38 L1506.17 1215.38 L1505.59 1215.38 L1505 1215.38 L1504.41 1215.38 L1503.83 1215.38 L1503.24 1215.38 L1502.65 1215.38 L1502.07 1215.38 L1501.48 1215.38 L1500.9 1215.38 L1500.31 1215.38 L1499.72 1215.38 L1499.14 1215.38 L1498.55 1215.38 L1497.96 1215.38 L1497.38 1215.38 L1496.79 1215.38 L1496.2 1215.38 L1495.62 1215.38 L1495.03 1215.38 L1494.45 1215.38 L1493.86 1215.38 L1493.27 1215.38 L1492.69 1215.38 L1492.1 1215.38 L1491.51 1215.38 L1490.93 1215.38 L1490.34 1215.38 L1489.75 1215.38 L1489.17 1215.38 L1488.58 1215.38 L1487.99 1215.38 L1487.41 1215.38 L1486.82 1215.38 L1486.24 1215.38 L1485.65 1215.38 L1485.06 1215.38 L1484.48 1215.38 L1483.89 1215.38 L1483.3 1215.38 L1482.72 1215.38 L1482.13 1215.38 L1481.54 1215.38 L1480.96 1215.38 L1480.37 1215.38 L1479.78 1215.38 L1479.2 1215.38 L1478.61 1215.38 L1478.03 1215.38 L1477.44 1215.38 L1476.85 1215.38 L1476.27 1215.38 L1475.68 1215.38 L1475.09 1215.38 L1474.51 1215.38 L1473.92 1215.38 L1473.33 1215.38 L1472.75 1215.38 L1472.16 1215.38 L1471.57 1215.38 L1470.99 1215.38 L1470.4 1215.38 L1469.82 1215.38 L1469.23 1215.38 L1468.64 1215.38 L1468.06 1215.38 L1467.47 1215.38 L1466.88 1215.38 L1466.3 1215.38 L1465.71 1215.38 L1465.12 1215.38 L1464.54 1215.38 L1463.95 1215.38 L1463.37 1215.38 L1462.78 1215.38 L1462.19 1215.38 L1461.61 1215.38 L1461.02 1215.38 L1460.43 1215.38 L1459.85 1215.38 L1459.26 1215.38 L1458.67 1215.38 L1458.09 1215.38 L1457.5 1215.38 L1456.91 1215.38 L1456.33 1215.38 L1455.74 1215.38 L1455.16 1215.38 L1454.57 1215.38 L1453.98 1215.38 L1453.4 1215.38 L1452.81 1215.38 L1452.22 1215.38 L1451.64 1215.38 L1451.05 1215.38 L1450.46 1215.38 L1449.88 1215.38 L1449.29 1215.38 L1448.7 1215.38 L1448.12 1215.38 L1447.53 1215.38 L1446.95 1215.38 L1446.36 1215.38 L1445.77 1215.38 L1445.19 1215.38 L1444.6 1215.38 L1444.01 1215.38 L1443.43 1215.38 L1442.84 1215.38 L1442.25 1215.38 L1441.67 1215.38 L1441.08 1215.38 L1440.5 1215.38 L1439.91 1215.38 L1439.32 1215.38 L1438.74 1215.38 L1438.15 1215.38 L1437.56 1215.38 L1436.98 1215.38 L1436.39 1215.38 L1435.8 1215.38 L1435.22 1215.38 L1434.63 1215.38 L1434.04 1215.38 L1433.46 1215.38 L1432.87 1215.38 L1432.29 1215.38 L1431.7 1215.38 L1431.11 1215.38 L1430.53 1215.38 L1429.94 1215.38 L1429.35 1215.38 L1428.77 1215.38 L1428.18 1215.38 L1427.59 1215.38 L1427.01 1215.38 L1426.42 1215.38 L1425.83 1215.38 L1425.25 1215.38 L1424.66 1215.38 L1424.08 1215.38 L1423.49 1215.38 L1422.9 1215.38 L1422.32 1215.38 L1421.73 1215.38 L1421.14 1215.38 L1420.56 1215.38 L1419.97 1215.38 L1419.38 1215.38 L1418.8 1215.38 L1418.21 1215.38 L1417.63 1215.38 L1417.04 1215.38 L1416.45 1215.38 L1415.87 1215.38 L1415.28 1215.38 L1414.69 1215.38 L1414.11 1215.38 L1413.52 1215.38 L1412.93 1215.38 L1412.35 1215.38 L1411.76 1215.38 L1411.17 1215.38 L1410.59 1215.38 L1410 1215.38 L1409.42 1215.38 L1408.83 1215.38 L1408.24 1215.38 L1407.66 1215.38 L1407.07 1215.38 L1406.48 1215.38 L1405.9 1215.38 L1405.31 1215.38 L1404.72 1215.38 L1404.14 1215.38 L1403.55 1215.38 L1402.96 1215.38 L1402.38 1215.38 L1401.79 1215.38 L1401.21 1215.38 L1400.62 1215.38 L1400.03 1215.38 L1399.45 1215.38 L1398.86 1215.38 L1398.27 1215.38 L1397.69 1215.38 L1397.1 1215.38 L1396.51 1215.38 L1395.93 1215.38 L1395.34 1215.38 L1394.75 1215.38 L1394.17 1215.38 L1393.58 1215.38 L1393 1215.38 L1392.41 1215.38 L1391.82 1215.38 L1391.24 1215.38 L1390.65 1215.38 L1390.06 1215.38 L1389.48 1215.38 L1388.89 1215.38 L1388.3 1215.38 L1387.72 1215.38 L1387.13 1215.38 L1386.55 1215.38 L1385.96 1215.38 L1385.37 1215.38 L1384.79 1215.38 L1384.2 1215.38 L1383.61 1215.38 L1383.03 1215.38 L1382.44 1215.38 L1381.85 1215.38 L1381.27 1215.38 L1380.68 1215.38 L1380.09 1215.38 L1379.51 1215.38 L1378.92 1215.38 L1378.34 1215.38 L1377.75 1215.38 L1377.16 1215.38 L1376.58 1215.38 L1375.99 1215.38 L1375.4 1215.38 L1374.82 1215.38 L1374.23 1215.38 L1373.64 1215.38 L1373.06 1215.38 L1372.47 1215.38 L1371.88 1215.38 L1371.3 1215.38 L1370.71 1215.38 L1370.13 1215.38 L1369.54 1215.38 L1368.95 1215.38 L1368.37 1215.38 L1367.78 1215.38 L1367.19 1215.38 L1366.61 1215.38 L1366.02 1215.38 L1365.43 1215.38 L1364.85 1215.38 L1364.26 1215.38 L1363.68 1215.38 L1363.09 1215.38 L1362.5 1215.38 L1361.92 1215.38 L1361.33 1215.38 L1360.74 1215.38 L1360.16 1215.38 L1359.57 1215.38 L1358.98 1215.38 L1358.4 1215.38 L1357.81 1215.38 L1357.22 1215.38 L1356.64 1215.38 L1356.05 1215.38 L1355.47 1215.38 L1354.88 1215.38 L1354.29 1215.38 L1353.71 1215.38 L1353.12 1215.38 L1352.53 1215.38 L1351.95 1215.38 L1351.36 1215.38 L1350.77 1215.38 L1350.19 1215.38 L1349.6 1215.38 L1349.01 1215.38 L1348.43 1215.38 L1347.84 1215.38 L1347.26 1215.38 L1346.67 1215.38 L1346.08 1215.38 L1345.5 1215.38 L1344.91 1215.38 L1344.32 1215.38 L1343.74 1215.38 L1343.15 1215.38 L1342.56 1215.38 L1341.98 1215.38 L1341.39 1215.38 L1340.8 1215.38 L1340.22 1215.38 L1339.63 1215.38 L1339.05 1215.38 L1338.46 1215.38 L1337.87 1215.38 L1337.29 1215.38 L1336.7 1215.38 L1336.11 1215.38 L1335.53 1215.38 L1334.94 1215.38 L1334.35 1215.38 L1333.77 1215.38 L1333.18 1215.38 L1332.6 1215.38 L1332.01 1215.38 L1331.42 1215.38 L1330.84 1215.38 L1330.25 1215.38 L1329.66 1215.38 L1329.08 1215.38 L1328.49 1215.38 L1327.9 1215.38 L1327.32 1215.38 L1326.73 1215.38 L1326.14 1215.38 L1325.56 1215.38 L1324.97 1215.38 L1324.39 1215.38 L1323.8 1215.38 L1323.21 1215.38 L1322.63 1215.38 L1322.04 1215.38 L1321.45 1215.38 L1320.87 1215.38 L1320.28 1215.38 L1319.69 1215.38 L1319.11 1215.38 L1318.52 1215.38 L1317.93 1215.38 L1317.35 1215.38 L1316.76 1215.38 L1316.18 1215.38 L1315.59 1215.38 L1315 1215.38 L1314.42 1215.38 L1313.83 1215.38 L1313.24 1215.38 L1312.66 1215.38 L1312.07 1215.38 L1311.48 1215.38 L1310.9 1215.38 L1310.31 1215.38 L1309.73 1215.38 L1309.14 1215.38 L1308.55 1215.38 L1307.97 1215.38 L1307.38 1215.38 L1306.79 1215.38 L1306.21 1215.38 L1305.62 1215.38 L1305.03 1215.38 L1304.45 1215.38 L1303.86 1215.38 L1303.27 1215.38 L1302.69 1215.38 L1302.1 1215.38 L1301.52 1215.38 L1300.93 1215.38 L1300.34 1215.38 L1299.76 1215.38 L1299.17 1215.38 L1298.58 1215.38 L1298 1215.38 L1297.41 1215.38 L1296.82 1215.38 L1296.24 1215.38 L1295.65 1215.38 L1295.06 1215.38 L1294.48 1215.38 L1293.89 1215.38 L1293.31 1215.38 L1292.72 1215.38 L1292.13 1215.38 L1291.55 1215.38 L1290.96 1215.38 L1290.37 1215.38 L1289.79 1215.38 L1289.2 1215.38 L1288.61 1215.38 L1288.03 1215.38 L1287.44 1215.38 L1286.86 1215.38 L1286.27 1215.38 L1285.68 1215.38 L1285.1 1215.38 L1284.51 1215.38 L1283.92 1215.38 L1283.34 1215.38 L1282.75 1215.38 L1282.16 1215.38 L1281.58 1215.38 L1280.99 1215.38 L1280.4 1215.38 L1279.82 1215.38 L1279.23 1215.38 L1278.65 1215.38 L1278.06 1215.38 L1277.47 1215.38 L1276.89 1215.38 L1276.3 1215.38 L1275.71 1215.38 L1275.13 1215.38 L1274.54 1215.38 L1273.95 1215.38 L1273.37 1215.38 L1272.78 1215.38 L1272.19 1215.38 L1271.61 1215.38 L1271.02 1215.38 L1270.44 1215.38 L1269.85 1215.38 L1269.26 1215.38 L1268.68 1215.38 L1268.09 1215.38 L1267.5 1215.38 L1266.92 1215.38 L1266.33 1215.38 L1265.74 1215.38 L1265.16 1215.38 L1264.57 1215.38 L1263.98 1215.38 L1263.4 1215.38 L1262.81 1215.38 L1262.23 1215.38 L1261.64 1215.38 L1261.05 1215.38 L1260.47 1215.38 L1259.88 1215.38 L1259.29 1215.38 L1258.71 1215.38 L1258.12 1215.38 L1257.53 1215.38 L1256.95 1215.38 L1256.36 1215.38 L1255.78 1215.38 L1255.19 1215.38 L1254.6 1215.38 L1254.02 1215.38 L1253.43 1215.38 L1252.84 1215.38 L1252.26 1215.38 L1251.67 1215.38 L1251.08 1215.38 L1250.5 1215.38 L1249.91 1215.38 L1249.32 1215.38 L1248.74 1215.38 L1248.15 1215.38 L1247.57 1215.38 L1246.98 1215.38 L1246.39 1215.38 L1245.81 1215.38 L1245.22 1215.38 L1244.63 1215.38 L1244.05 1215.38 L1243.46 1215.38 L1242.87 1215.38 L1242.29 1215.38 L1241.7 1215.38 L1241.11 1215.38 L1240.53 1215.38 L1239.94 1215.38 L1239.36 1215.38 L1238.77 1215.38 L1238.18 1215.38 L1237.6 1215.38 L1237.01 1215.38 L1236.42 1215.38 L1235.84 1215.38 L1235.25 1215.38 L1234.66 1215.38 L1234.08 1215.38 L1233.49 1215.38 L1232.91 1215.38 L1232.32 1215.38 L1231.73 1215.38 L1231.15 1215.38 L1230.56 1215.38 L1229.97 1215.38 L1229.39 1215.38 L1228.8 1215.38 L1228.21 1215.38 L1227.63 1215.38 L1227.04 1215.38 L1226.45 1215.38 L1225.87 1215.38 L1225.28 1215.38 L1224.7 1215.38 L1224.11 1215.38 L1223.52 1215.38 L1222.94 1215.38 L1222.35 1215.38 L1221.76 1215.38 L1221.18 1215.38 L1220.59 1215.38 L1220 1215.38 L1219.42 1215.38 L1218.83 1215.38 L1218.24 1215.38 L1217.66 1215.38 L1217.07 1215.38 L1216.49 1215.38 L1215.9 1215.38 L1215.31 1215.38 L1214.73 1215.38 L1214.14 1215.38 L1213.55 1215.38 L1212.97 1215.38 L1212.38 1215.38 L1211.79 1215.38 L1211.21 1215.38 L1210.62 1215.38 L1210.03 1215.38 L1209.45 1215.38 L1208.86 1215.38 L1208.28 1215.38 L1207.69 1215.38 L1207.1 1215.38 L1206.52 1215.38 L1205.93 1215.38 L1205.34 1215.38 L1204.76 1215.38 L1204.17 1215.38 L1203.58 1215.38 L1203 1215.38 L1202.41 1215.38 L1201.83 1215.38 L1201.24 1215.38 L1200.65 1215.38 L1200.07 1215.38 L1199.48 1215.38 L1198.89 1215.38 L1198.31 1215.38 L1197.72 1215.38 L1197.13 1215.38 L1196.55 1215.38 L1195.96 1215.38 L1195.37 1215.38 L1194.79 1215.38 L1194.2 1215.38 L1193.62 1215.38 L1193.03 1215.38 L1192.44 1215.38 L1191.86 1215.38 L1191.27 1215.38 L1190.68 1215.38 L1190.1 1215.38 L1189.51 1215.38 L1188.92 1215.38 L1188.34 1215.38 L1187.75 1215.38 L1187.16 1215.38 L1186.58 1215.38 L1185.99 1215.38 L1185.41 1215.38 L1184.82 1215.38 L1184.23 1215.38 L1183.65 1215.38 L1183.06 1215.38 L1182.47 1215.38 L1181.89 1215.38 L1181.3 1215.38 L1180.71 1215.38 L1180.13 1215.38 L1179.54 1215.38 L1178.96 1215.38 L1178.37 1215.38 L1177.78 1215.38 L1177.2 1215.38 L1176.61 1215.38 L1176.02 1215.38 L1175.44 1215.38 L1174.85 1215.38 L1174.26 1215.38 L1173.68 1215.38 L1173.09 1215.38 L1172.5 1215.38 L1171.92 1215.38 L1171.33 1215.38 L1170.75 1215.38 L1170.16 1215.38 L1169.57 1215.38 L1168.99 1215.38 L1168.4 1215.38 L1167.81 1215.38 L1167.23 1215.38 L1166.64 1215.38 L1166.05 1215.38 L1165.47 1215.38 L1164.88 1215.38 L1164.29 1215.38 L1163.71 1215.38 L1163.12 1215.38 L1162.54 1215.38 L1161.95 1215.38 L1161.36 1215.38 L1160.78 1215.38 L1160.19 1215.38 L1159.6 1215.38 L1159.02 1215.38 L1158.43 1215.38 L1157.84 1215.38 L1157.26 1215.38 L1156.67 1215.38 L1156.09 1215.38 L1155.5 1215.38 L1154.91 1215.38 L1154.33 1215.38 L1153.74 1215.38 L1153.15 1215.38 L1152.57 1215.38 L1151.98 1215.38 L1151.39 1215.38 L1150.81 1215.38 L1150.22 1215.38 L1149.63 1215.38 L1149.05 1215.38 L1148.46 1215.38 L1147.88 1215.38 L1147.29 1215.38 L1146.7 1215.38 L1146.12 1215.38 L1145.53 1215.38 L1144.94 1215.38 L1144.36 1215.38 L1143.77 1215.38 L1143.18 1215.38 L1142.6 1215.38 L1142.01 1215.38 L1141.42 1215.38 L1140.84 1215.38 L1140.25 1215.38 L1139.67 1215.38 L1139.08 1215.38 L1138.49 1215.38 L1137.91 1215.38 L1137.32 1215.38 L1136.73 1215.38 L1136.15 1215.38 L1135.56 1215.38 L1134.97 1215.38 L1134.39 1215.38 L1133.8 1215.38 L1133.21 1215.38 L1132.63 1215.38 L1132.04 1215.38 L1131.46 1215.38 L1130.87 1215.38 L1130.28 1215.38 L1129.7 1215.38 L1129.11 1215.38 L1128.52 1215.38 L1127.94 1215.38 L1127.35 1215.38 L1126.76 1215.38 L1126.18 1215.38 L1125.59 1215.38 L1125.01 1215.38 L1124.42 1215.38 L1123.83 1215.38 L1123.25 1215.38 L1122.66 1215.38 L1122.07 1215.38 L1121.49 1215.38 L1120.9 1215.38 L1120.31 1215.38 L1119.73 1215.38 L1119.14 1215.38 L1118.55 1215.38 L1117.97 1215.38 L1117.38 1215.38 L1116.8 1215.38 L1116.21 1215.38 L1115.62 1215.38 L1115.04 1215.38 L1114.45 1215.38 L1113.86 1215.38 L1113.28 1215.38 L1112.69 1215.38 L1112.1 1215.38 L1111.52 1215.38 L1110.93 1215.38 L1110.34 1215.38 L1109.76 1215.38 L1109.17 1215.38 L1108.59 1215.38 L1108 1215.38 L1107.41 1215.38 L1106.83 1215.38 L1106.24 1215.38 L1105.65 1215.38 L1105.07 1215.38 L1104.48 1215.38 L1103.89 1215.38 L1103.31 1215.38 L1102.72 1215.38 L1102.14 1215.38 L1101.55 1215.38 L1100.96 1215.38 L1100.38 1215.38 L1099.79 1215.38 L1099.2 1215.38 L1098.62 1215.38 L1098.03 1215.38 L1097.44 1215.38 L1096.86 1215.38 L1096.27 1215.38 L1095.68 1215.38 L1095.1 1215.38 L1094.51 1215.38 L1093.93 1215.38 L1093.34 1215.38 L1092.75 1215.38 L1092.17 1215.38 L1091.58 1215.38 L1090.99 1215.38 L1090.41 1215.38 L1089.82 1215.38 L1089.23 1215.38 L1088.65 1215.38 L1088.06 1215.38 L1087.47 1215.38 L1086.89 1215.38 L1086.3 1215.38 L1085.72 1215.38 L1085.13 1215.38 L1084.54 1215.38 L1083.96 1215.38 L1083.37 1215.38 L1082.78 1215.38 L1082.2 1215.38 L1081.61 1215.38 L1081.02 1215.38 L1080.44 1215.38 L1079.85 1215.38 L1079.26 1215.38 L1078.68 1215.38 L1078.09 1215.38 L1077.51 1215.38 L1076.92 1215.38 L1076.33 1215.38 L1075.75 1215.38 L1075.16 1215.38 L1074.57 1215.38 L1073.99 1215.38 L1073.4 1215.38 L1072.81 1215.38 L1072.23 1215.38 L1071.64 1215.38 L1071.06 1215.38 L1070.47 1215.38 L1069.88 1215.38 L1069.3 1215.38 L1068.71 1215.38 L1068.12 1215.38 L1067.54 1215.38 L1066.95 1215.38 L1066.36 1215.38 L1065.78 1215.38 L1065.19 1215.38 L1064.6 1215.38 L1064.02 1215.38 L1063.43 1215.38 L1062.85 1215.38 L1062.26 1215.38 L1061.67 1215.38 L1061.09 1215.38 L1060.5 1215.38 L1059.91 1215.38 L1059.33 1215.38 L1058.74 1215.38 L1058.15 1215.38 L1057.57 1215.38 L1056.98 1215.38 L1056.39 1215.38 L1055.81 1215.38 L1055.22 1215.38 L1054.64 1215.38 L1054.05 1215.38 L1053.46 1215.38 L1052.88 1215.38 L1052.29 1215.38 L1051.7 1215.38 L1051.12 1215.38 L1050.53 1215.38 L1049.94 1215.38 L1049.36 1215.38 L1048.77 1215.38 L1048.19 1215.38 L1047.6 1215.38 L1047.01 1215.38 L1046.43 1215.38 L1045.84 1215.38 L1045.25 1215.38 L1044.67 1215.38 L1044.08 1215.38 L1043.49 1215.38 L1042.91 1215.38 L1042.32 1215.38 L1041.73 1215.38 L1041.15 1215.38 L1040.56 1215.38 L1039.98 1215.38 L1039.39 1215.38 L1038.8 1215.38 L1038.22 1215.38 L1037.63 1215.38 L1037.04 1215.38 L1036.46 1215.38 L1035.87 1215.38 L1035.28 1215.38 L1034.7 1215.38 L1034.11 1215.38 L1033.52 1215.38 L1032.94 1215.38 L1032.35 1215.38 L1031.77 1215.38 L1031.18 1215.38 L1030.59 1215.38 L1030.01 1215.38 L1029.42 1215.38 L1028.83 1215.38 L1028.25 1215.38 L1027.66 1215.38 L1027.07 1215.38 L1026.49 1215.38 L1025.9 1215.38 L1025.32 1215.38 L1024.73 1215.38 L1024.14 1215.38 L1023.56 1215.38 L1022.97 1215.38 L1022.38 1215.38 L1021.8 1215.38 L1021.21 1215.38 L1020.62 1215.38 L1020.04 1215.38 L1019.45 1215.38 L1018.86 1215.38 L1018.28 1215.38 L1017.69 1215.38 L1017.11 1215.38 L1016.52 1215.38 L1015.93 1215.38 L1015.35 1215.38 L1014.76 1215.38 L1014.17 1215.38 L1013.59 1215.38 L1013 1215.38 L1012.41 1215.38 L1011.83 1215.38 L1011.24 1215.38 L1010.65 1215.38 L1010.07 1215.38 L1009.48 1215.38 L1008.9 1215.38 L1008.31 1215.38 L1007.72 1215.38 L1007.14 1215.38 L1006.55 1215.38 L1005.96 1215.38 L1005.38 1215.38 L1004.79 1215.38 L1004.2 1215.38 L1003.62 1215.38 L1003.03 1215.38 L1002.44 1215.38 L1001.86 1215.38 L1001.27 1215.38 L1000.69 1215.38 L1000.1 1215.38 L999.513 1215.38 L998.926 1215.38 L998.34 1215.38 L997.754 1215.38 L997.167 1215.38 L996.581 1215.38 L995.994 1215.38 L995.408 1215.38 L994.822 1215.38 L994.235 1215.38 L993.649 1215.38 L993.062 1215.38 L992.476 1215.38 L991.889 1215.38 L991.303 1215.38 L990.717 1215.38 L990.13 1215.38 L989.544 1215.38 L988.957 1215.38 L988.371 1215.38 L987.785 1215.38 L987.198 1215.38 L986.612 1215.38 L986.025 1215.38  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1215.63 986.612,1215.63 987.198,1215.63 987.785,1215.63 988.371,1215.63 988.957,1215.63 989.544,1215.63 990.13,1215.63 990.717,1215.63 991.303,1215.63 991.889,1215.63 992.476,1215.63 993.062,1215.63 993.649,1215.63 994.235,1215.63 994.822,1215.63 995.408,1215.63 995.994,1215.63 996.581,1215.63 997.167,1215.63 997.754,1215.63 998.34,1215.63 998.926,1215.63 999.513,1215.63 1000.1,1215.63 1000.69,1215.63 1001.27,1215.63 1001.86,1215.63 1002.44,1215.63 1003.03,1215.63 1003.62,1215.63 1004.2,1215.63 1004.79,1215.63 1005.38,1215.63 1005.96,1215.63 1006.55,1215.63 1007.14,1215.63 1007.72,1215.63 1008.31,1215.63 1008.9,1215.63 1009.48,1215.63 1010.07,1215.63 1010.65,1215.63 1011.24,1215.63 1011.83,1215.63 1012.41,1215.63 1013,1215.63 1013.59,1215.63 1014.17,1215.63 1014.76,1215.63 1015.35,1215.63 1015.93,1215.63 1016.52,1215.63 1017.11,1215.63 1017.69,1215.63 1018.28,1215.63 1018.86,1215.63 1019.45,1215.63 1020.04,1215.63 1020.62,1215.63 1021.21,1215.63 1021.8,1215.63 1022.38,1215.63 1022.97,1215.63 1023.56,1215.63 1024.14,1215.63 1024.73,1215.63 1025.32,1215.63 1025.9,1215.63 1026.49,1215.63 1027.07,1215.63 1027.66,1215.63 1028.25,1215.63 1028.83,1215.63 1029.42,1215.63 1030.01,1215.63 1030.59,1215.63 1031.18,1215.63 1031.77,1215.63 1032.35,1215.63 1032.94,1215.63 1033.52,1215.63 1034.11,1215.63 1034.7,1215.63 1035.28,1215.63 1035.87,1215.63 1036.46,1215.63 1037.04,1215.63 1037.63,1215.63 1038.22,1215.63 1038.8,1215.63 1039.39,1215.63 1039.98,1215.63 1040.56,1215.63 1041.15,1215.63 1041.73,1215.63 1042.32,1215.63 1042.91,1215.63 1043.49,1215.63 1044.08,1215.63 1044.67,1215.63 1045.25,1215.63 1045.84,1215.63 1046.43,1215.63 1047.01,1215.63 1047.6,1215.63 1048.19,1215.63 1048.77,1215.63 1049.36,1215.63 1049.94,1215.63 1050.53,1215.63 1051.12,1215.63 1051.7,1215.63 1052.29,1215.63 1052.88,1215.63 1053.46,1215.63 1054.05,1215.63 1054.64,1215.63 1055.22,1215.63 1055.81,1215.63 1056.39,1215.63 1056.98,1215.63 1057.57,1215.63 1058.15,1215.63 1058.74,1215.63 1059.33,1215.63 1059.91,1215.63 1060.5,1215.63 1061.09,1215.63 1061.67,1215.63 1062.26,1215.63 1062.85,1215.63 1063.43,1215.63 1064.02,1215.63 1064.6,1215.63 1065.19,1215.63 1065.78,1215.63 1066.36,1215.63 1066.95,1215.63 1067.54,1215.63 1068.12,1215.63 1068.71,1215.63 1069.3,1215.63 1069.88,1215.63 1070.47,1215.63 1071.06,1215.63 1071.64,1215.63 1072.23,1215.63 1072.81,1215.63 1073.4,1215.63 1073.99,1215.63 1074.57,1215.63 1075.16,1215.63 1075.75,1215.63 1076.33,1215.63 1076.92,1215.63 1077.51,1215.63 1078.09,1215.63 1078.68,1215.63 1079.26,1215.63 1079.85,1215.63 1080.44,1215.63 1081.02,1215.63 1081.61,1215.63 1082.2,1215.63 1082.78,1215.63 1083.37,1215.63 1083.96,1215.63 1084.54,1215.63 1085.13,1215.63 1085.72,1215.63 1086.3,1215.63 1086.89,1215.63 1087.47,1215.63 1088.06,1215.63 1088.65,1215.63 1089.23,1215.63 1089.82,1215.63 1090.41,1215.63 1090.99,1215.63 1091.58,1215.63 1092.17,1215.63 1092.75,1215.63 1093.34,1215.63 1093.93,1215.63 1094.51,1215.63 1095.1,1215.63 1095.68,1215.63 1096.27,1215.63 1096.86,1215.63 1097.44,1215.63 1098.03,1215.63 1098.62,1215.63 1099.2,1215.63 1099.79,1215.63 1100.38,1215.63 1100.96,1215.63 1101.55,1215.63 1102.14,1215.63 1102.72,1215.63 1103.31,1215.63 1103.89,1215.63 1104.48,1215.63 1105.07,1215.63 1105.65,1215.63 1106.24,1215.63 1106.83,1215.63 1107.41,1215.63 1108,1215.63 1108.59,1215.63 1109.17,1215.63 1109.76,1215.63 1110.34,1215.63 1110.93,1215.63 1111.52,1215.63 1112.1,1215.63 1112.69,1215.63 1113.28,1215.63 1113.86,1215.63 1114.45,1215.63 1115.04,1215.63 1115.62,1215.63 1116.21,1215.63 1116.8,1215.63 1117.38,1215.63 1117.97,1215.63 1118.55,1215.63 1119.14,1215.63 1119.73,1215.63 1120.31,1215.63 1120.9,1215.63 1121.49,1215.63 1122.07,1215.63 1122.66,1215.63 1123.25,1215.63 1123.83,1215.63 1124.42,1215.63 1125.01,1215.63 1125.59,1215.63 1126.18,1215.63 1126.76,1215.63 1127.35,1215.63 1127.94,1215.63 1128.52,1215.63 1129.11,1215.63 1129.7,1215.63 1130.28,1215.63 1130.87,1215.63 1131.46,1215.63 1132.04,1215.63 1132.63,1215.63 1133.21,1215.63 1133.8,1215.63 1134.39,1215.63 1134.97,1215.63 1135.56,1215.63 1136.15,1215.63 1136.73,1215.63 1137.32,1215.63 1137.91,1215.63 1138.49,1215.63 1139.08,1215.63 1139.67,1215.63 1140.25,1215.63 1140.84,1215.63 1141.42,1215.63 1142.01,1215.63 1142.6,1215.63 1143.18,1215.63 1143.77,1215.63 1144.36,1215.63 1144.94,1215.63 1145.53,1215.63 1146.12,1215.63 1146.7,1215.63 1147.29,1215.63 1147.88,1215.63 1148.46,1215.63 1149.05,1215.63 1149.63,1215.63 1150.22,1215.63 1150.81,1215.63 1151.39,1215.63 1151.98,1215.63 1152.57,1215.63 1153.15,1215.63 1153.74,1215.63 1154.33,1215.63 1154.91,1215.63 1155.5,1215.63 1156.09,1215.63 1156.67,1215.63 1157.26,1215.63 1157.84,1215.63 1158.43,1215.63 1159.02,1215.63 1159.6,1215.63 1160.19,1215.63 1160.78,1215.63 1161.36,1215.63 1161.95,1215.63 1162.54,1215.63 1163.12,1215.63 1163.71,1215.63 1164.29,1215.63 1164.88,1215.63 1165.47,1215.63 1166.05,1215.63 1166.64,1215.63 1167.23,1215.63 1167.81,1215.63 1168.4,1215.63 1168.99,1215.63 1169.57,1215.63 1170.16,1215.63 1170.75,1215.63 1171.33,1215.63 1171.92,1215.63 1172.5,1215.63 1173.09,1215.63 1173.68,1215.63 1174.26,1215.63 1174.85,1215.63 1175.44,1215.63 1176.02,1215.63 1176.61,1215.63 1177.2,1215.63 1177.78,1215.63 1178.37,1215.63 1178.96,1215.63 1179.54,1215.63 1180.13,1215.63 1180.71,1215.63 1181.3,1215.63 1181.89,1215.63 1182.47,1215.63 1183.06,1215.63 1183.65,1215.63 1184.23,1215.63 1184.82,1215.63 1185.41,1215.63 1185.99,1215.63 1186.58,1215.63 1187.16,1215.63 1187.75,1215.63 1188.34,1215.63 1188.92,1215.63 1189.51,1215.63 1190.1,1215.63 1190.68,1215.63 1191.27,1215.63 1191.86,1215.63 1192.44,1215.63 1193.03,1215.63 1193.62,1215.63 1194.2,1215.63 1194.79,1215.63 1195.37,1215.63 1195.96,1215.63 1196.55,1215.63 1197.13,1215.63 1197.72,1215.63 1198.31,1215.63 1198.89,1215.63 1199.48,1215.63 1200.07,1215.63 1200.65,1215.63 1201.24,1215.63 1201.83,1215.63 1202.41,1215.63 1203,1215.63 1203.58,1215.63 1204.17,1215.63 1204.76,1215.63 1205.34,1215.63 1205.93,1215.63 1206.52,1215.63 1207.1,1215.63 1207.69,1215.63 1208.28,1215.63 1208.86,1215.63 1209.45,1215.63 1210.03,1215.63 1210.62,1215.63 1211.21,1215.63 1211.79,1215.63 1212.38,1215.63 1212.97,1215.63 1213.55,1215.63 1214.14,1215.63 1214.73,1215.63 1215.31,1215.63 1215.9,1215.63 1216.49,1215.63 1217.07,1215.63 1217.66,1215.63 1218.24,1215.63 1218.83,1215.63 1219.42,1215.63 1220,1215.63 1220.59,1215.63 1221.18,1215.63 1221.76,1215.63 1222.35,1215.63 1222.94,1215.63 1223.52,1215.63 1224.11,1215.63 1224.7,1215.63 1225.28,1215.63 1225.87,1215.63 1226.45,1215.63 1227.04,1215.63 1227.63,1215.63 1228.21,1215.63 1228.8,1215.63 1229.39,1215.63 1229.97,1215.63 1230.56,1215.63 1231.15,1215.63 1231.73,1215.63 1232.32,1215.63 1232.91,1215.63 1233.49,1215.63 1234.08,1215.63 1234.66,1215.63 1235.25,1215.63 1235.84,1215.63 1236.42,1215.63 1237.01,1215.63 1237.6,1215.63 1238.18,1215.63 1238.77,1215.63 1239.36,1215.63 1239.94,1215.63 1240.53,1215.63 1241.11,1215.63 1241.7,1215.63 1242.29,1215.63 1242.87,1215.63 1243.46,1215.63 1244.05,1215.63 1244.63,1215.63 1245.22,1215.63 1245.81,1215.63 1246.39,1215.63 1246.98,1215.63 1247.57,1215.63 1248.15,1215.63 1248.74,1215.63 1249.32,1215.63 1249.91,1215.63 1250.5,1215.63 1251.08,1215.63 1251.67,1215.63 1252.26,1215.63 1252.84,1215.63 1253.43,1215.63 1254.02,1215.63 1254.6,1215.63 1255.19,1215.63 1255.78,1215.63 1256.36,1215.63 1256.95,1215.63 1257.53,1215.63 1258.12,1215.63 1258.71,1215.63 1259.29,1215.63 1259.88,1215.63 1260.47,1215.63 1261.05,1215.63 1261.64,1215.63 1262.23,1215.63 1262.81,1215.63 1263.4,1215.63 1263.98,1215.63 1264.57,1215.63 1265.16,1215.63 1265.74,1215.63 1266.33,1215.63 1266.92,1215.63 1267.5,1215.63 1268.09,1215.63 1268.68,1215.63 1269.26,1215.63 1269.85,1215.63 1270.44,1215.63 1271.02,1215.63 1271.61,1215.63 1272.19,1215.63 1272.78,1215.63 1273.37,1215.63 1273.95,1215.63 1274.54,1215.63 1275.13,1215.63 1275.71,1215.63 1276.3,1215.63 1276.89,1215.63 1277.47,1215.63 1278.06,1215.63 1278.65,1215.63 1279.23,1215.63 1279.82,1215.63 1280.4,1215.63 1280.99,1215.63 1281.58,1215.63 1282.16,1215.63 1282.75,1215.63 1283.34,1215.63 1283.92,1215.63 1284.51,1215.63 1285.1,1215.63 1285.68,1215.63 1286.27,1215.63 1286.86,1215.63 1287.44,1215.63 1288.03,1215.63 1288.61,1215.63 1289.2,1215.63 1289.79,1215.63 1290.37,1215.63 1290.96,1215.63 1291.55,1215.63 1292.13,1215.63 1292.72,1215.63 1293.31,1215.63 1293.89,1215.63 1294.48,1215.63 1295.06,1215.63 1295.65,1215.63 1296.24,1215.63 1296.82,1215.63 1297.41,1215.63 1298,1215.63 1298.58,1215.63 1299.17,1215.63 1299.76,1215.63 1300.34,1215.63 1300.93,1215.63 1301.52,1215.63 1302.1,1215.63 1302.69,1215.63 1303.27,1215.63 1303.86,1215.63 1304.45,1215.63 1305.03,1215.63 1305.62,1215.63 1306.21,1215.63 1306.79,1215.63 1307.38,1215.63 1307.97,1215.63 1308.55,1215.63 1309.14,1215.63 1309.73,1215.63 1310.31,1215.63 1310.9,1215.63 1311.48,1215.63 1312.07,1215.63 1312.66,1215.63 1313.24,1215.63 1313.83,1215.63 1314.42,1215.63 1315,1215.63 1315.59,1215.63 1316.18,1215.63 1316.76,1215.63 1317.35,1215.63 1317.93,1215.63 1318.52,1215.63 1319.11,1215.63 1319.69,1215.63 1320.28,1215.63 1320.87,1215.63 1321.45,1215.63 1322.04,1215.63 1322.63,1215.63 1323.21,1215.63 1323.8,1215.63 1324.39,1215.63 1324.97,1215.63 1325.56,1215.63 1326.14,1215.63 1326.73,1215.63 1327.32,1215.63 1327.9,1215.63 1328.49,1215.63 1329.08,1215.63 1329.66,1215.63 1330.25,1215.63 1330.84,1215.63 1331.42,1215.63 1332.01,1215.63 1332.6,1215.63 1333.18,1215.63 1333.77,1215.63 1334.35,1215.63 1334.94,1215.63 1335.53,1215.63 1336.11,1215.63 1336.7,1215.63 1337.29,1215.63 1337.87,1215.63 1338.46,1215.63 1339.05,1215.63 1339.63,1215.63 1340.22,1215.63 1340.8,1215.63 1341.39,1215.63 1341.98,1215.63 1342.56,1215.63 1343.15,1215.63 1343.74,1215.63 1344.32,1215.63 1344.91,1215.63 1345.5,1215.63 1346.08,1215.63 1346.67,1215.63 1347.26,1215.63 1347.84,1215.63 1348.43,1215.63 1349.01,1215.63 1349.6,1215.63 1350.19,1215.63 1350.77,1215.63 1351.36,1215.63 1351.95,1215.63 1352.53,1215.63 1353.12,1215.63 1353.71,1215.63 1354.29,1215.63 1354.88,1215.63 1355.47,1215.63 1356.05,1215.63 1356.64,1215.63 1357.22,1215.63 1357.81,1215.63 1358.4,1215.63 1358.98,1215.63 1359.57,1215.63 1360.16,1215.63 1360.74,1215.63 1361.33,1215.63 1361.92,1215.63 1362.5,1215.63 1363.09,1215.63 1363.68,1215.63 1364.26,1215.63 1364.85,1215.63 1365.43,1215.63 1366.02,1215.63 1366.61,1215.63 1367.19,1215.63 1367.78,1215.63 1368.37,1215.63 1368.95,1215.63 1369.54,1215.63 1370.13,1215.63 1370.71,1215.63 1371.3,1215.63 1371.88,1215.63 1372.47,1215.63 1373.06,1215.63 1373.64,1215.63 1374.23,1215.63 1374.82,1215.63 1375.4,1215.63 1375.99,1215.63 1376.58,1215.63 1377.16,1215.63 1377.75,1215.63 1378.34,1215.63 1378.92,1215.63 1379.51,1215.63 1380.09,1215.63 1380.68,1215.63 1381.27,1215.63 1381.85,1215.63 1382.44,1215.63 1383.03,1215.63 1383.61,1215.63 1384.2,1215.63 1384.79,1215.63 1385.37,1215.63 1385.96,1215.63 1386.55,1215.63 1387.13,1215.63 1387.72,1215.63 1388.3,1215.63 1388.89,1215.63 1389.48,1215.63 1390.06,1215.63 1390.65,1215.63 1391.24,1215.63 1391.82,1215.63 1392.41,1215.63 1393,1215.63 1393.58,1215.63 1394.17,1215.63 1394.75,1215.63 1395.34,1215.63 1395.93,1215.63 1396.51,1215.63 1397.1,1215.63 1397.69,1215.63 1398.27,1215.63 1398.86,1215.63 1399.45,1215.63 1400.03,1215.63 1400.62,1215.63 1401.21,1215.63 1401.79,1215.63 1402.38,1215.63 1402.96,1215.63 1403.55,1215.63 1404.14,1215.63 1404.72,1215.63 1405.31,1215.63 1405.9,1215.63 1406.48,1215.63 1407.07,1215.63 1407.66,1215.63 1408.24,1215.63 1408.83,1215.63 1409.42,1215.63 1410,1215.63 1410.59,1215.63 1411.17,1215.63 1411.76,1215.63 1412.35,1215.63 1412.93,1215.63 1413.52,1215.63 1414.11,1215.63 1414.69,1215.63 1415.28,1215.63 1415.87,1215.63 1416.45,1215.63 1417.04,1215.63 1417.63,1215.63 1418.21,1215.63 1418.8,1215.63 1419.38,1215.63 1419.97,1215.63 1420.56,1215.63 1421.14,1215.63 1421.73,1215.63 1422.32,1215.63 1422.9,1215.63 1423.49,1215.63 1424.08,1215.63 1424.66,1215.63 1425.25,1215.63 1425.83,1215.63 1426.42,1215.63 1427.01,1215.63 1427.59,1215.63 1428.18,1215.63 1428.77,1215.63 1429.35,1215.63 1429.94,1215.63 1430.53,1215.63 1431.11,1215.63 1431.7,1215.63 1432.29,1215.63 1432.87,1215.63 1433.46,1215.63 1434.04,1215.63 1434.63,1215.63 1435.22,1215.63 1435.8,1215.63 1436.39,1215.63 1436.98,1215.63 1437.56,1215.63 1438.15,1215.63 1438.74,1215.63 1439.32,1215.63 1439.91,1215.63 1440.5,1215.63 1441.08,1215.63 1441.67,1215.63 1442.25,1215.63 1442.84,1215.63 1443.43,1215.63 1444.01,1215.63 1444.6,1215.63 1445.19,1215.63 1445.77,1215.63 1446.36,1215.63 1446.95,1215.63 1447.53,1215.63 1448.12,1215.63 1448.7,1215.63 1449.29,1215.63 1449.88,1215.63 1450.46,1215.63 1451.05,1215.63 1451.64,1215.63 1452.22,1215.63 1452.81,1215.63 1453.4,1215.63 1453.98,1215.63 1454.57,1215.63 1455.16,1215.63 1455.74,1215.63 1456.33,1215.63 1456.91,1215.63 1457.5,1215.63 1458.09,1215.63 1458.67,1215.63 1459.26,1215.63 1459.85,1215.63 1460.43,1215.63 1461.02,1215.63 1461.61,1215.63 1462.19,1215.63 1462.78,1215.63 1463.37,1215.63 1463.95,1215.63 1464.54,1215.63 1465.12,1215.63 1465.71,1215.63 1466.3,1215.63 1466.88,1215.63 1467.47,1215.63 1468.06,1215.63 1468.64,1215.63 1469.23,1215.63 1469.82,1215.63 1470.4,1215.63 1470.99,1215.63 1471.57,1215.63 1472.16,1215.63 1472.75,1215.63 1473.33,1215.63 1473.92,1215.63 1474.51,1215.63 1475.09,1215.63 1475.68,1215.63 1476.27,1215.63 1476.85,1215.63 1477.44,1215.63 1478.03,1215.63 1478.61,1215.63 1479.2,1215.63 1479.78,1215.63 1480.37,1215.63 1480.96,1215.63 1481.54,1215.63 1482.13,1215.63 1482.72,1215.63 1483.3,1215.63 1483.89,1215.63 1484.48,1215.63 1485.06,1215.63 1485.65,1215.63 1486.24,1215.63 1486.82,1215.63 1487.41,1215.63 1487.99,1215.63 1488.58,1215.63 1489.17,1215.63 1489.75,1215.63 1490.34,1215.63 1490.93,1215.63 1491.51,1215.63 1492.1,1215.63 1492.69,1215.63 1493.27,1215.63 1493.86,1215.63 1494.45,1215.63 1495.03,1215.63 1495.62,1215.63 1496.2,1215.63 1496.79,1215.63 1497.38,1215.63 1497.96,1215.63 1498.55,1215.63 1499.14,1215.63 1499.72,1215.63 1500.31,1215.63 1500.9,1215.63 1501.48,1215.63 1502.07,1215.63 1502.65,1215.63 1503.24,1215.63 1503.83,1215.63 1504.41,1215.63 1505,1215.63 1505.59,1215.63 1506.17,1215.63 1506.76,1215.63 1507.35,1215.63 1507.93,1215.63 1508.52,1215.63 1509.11,1215.63 1509.69,1215.63 1510.28,1215.63 1510.86,1215.63 1511.45,1215.63 1512.04,1215.63 1512.62,1215.63 1513.21,1215.63 1513.8,1215.63 1514.38,1215.63 1514.97,1215.63 1515.56,1215.63 1516.14,1215.63 1516.73,1215.63 1517.32,1215.63 1517.9,1215.63 1518.49,1215.63 1519.07,1215.63 1519.66,1215.63 1520.25,1215.63 1520.83,1215.63 1521.42,1215.63 1522.01,1215.63 1522.59,1215.63 1523.18,1215.63 1523.77,1215.63 1524.35,1215.63 1524.94,1215.63 1525.52,1215.63 1526.11,1215.63 1526.7,1215.63 1527.28,1215.63 1527.87,1215.63 1528.46,1215.63 1529.04,1215.63 1529.63,1215.63 1530.22,1215.63 1530.8,1215.63 1531.39,1215.63 1531.98,1215.63 1532.56,1215.63 1533.15,1215.63 1533.73,1215.63 1534.32,1215.63 1534.91,1215.63 1535.49,1215.63 1536.08,1215.63 1536.67,1215.63 1537.25,1215.63 1537.84,1215.63 1538.43,1215.63 1539.01,1215.63 1539.6,1215.63 1540.19,1215.63 1540.77,1215.63 1541.36,1215.63 1541.94,1215.63 1542.53,1215.63 1543.12,1215.63 1543.7,1215.63 1544.29,1215.63 1544.88,1215.63 1545.46,1215.63 1546.05,1215.63 1546.64,1215.63 1547.22,1215.63 1547.81,1215.63 1548.4,1215.63 1548.98,1215.63 1549.57,1215.63 1550.15,1215.63 1550.74,1215.63 1551.33,1215.63 1551.91,1215.63 1552.5,1215.63 1553.09,1215.63 1553.67,1215.63 1554.26,1215.63 1554.85,1215.63 1555.43,1215.63 1556.02,1215.63 1556.6,1215.63 1557.19,1215.63 1557.78,1215.63 1558.36,1215.63 1558.95,1215.63 1559.54,1215.63 1560.12,1215.63 1560.71,1215.63 1561.3,1215.63 1561.88,1215.63 1562.47,1215.63 1563.06,1215.63 1563.64,1215.63 1564.23,1215.63 1564.81,1215.63 1565.4,1215.63 1565.99,1215.63 1566.57,1215.63 1567.16,1215.63 1567.75,1215.63 1568.33,1215.63 1568.92,1215.63 1569.51,1215.63 1570.09,1215.63 1570.68,1215.63 1571.27,1215.63 1571.85,1215.63 1572.44,1215.63 1573.02,1215.63 1573.61,1215.63 1574.2,1215.63 1574.78,1215.63 1575.37,1215.63 1575.96,1215.63 1576.54,1215.63 1577.13,1215.63 1577.72,1215.63 1578.3,1215.63 1578.89,1215.63 1579.47,1215.63 1580.06,1215.63 1580.65,1215.63 1581.23,1215.63 1581.82,1215.63 1582.41,1215.63 1582.99,1215.63 1583.58,1215.63 1584.17,1215.63 1584.75,1215.63 1585.34,1215.63 1585.93,1215.63 1586.51,1215.63 1587.1,1215.63 1587.68,1215.63 1588.27,1215.63 1588.86,1215.63 1589.44,1215.63 1590.03,1215.63 1590.62,1215.63 1591.2,1215.63 1591.79,1215.63 1592.38,1215.63 1592.96,1215.63 1593.55,1215.63 1594.14,1215.63 1594.72,1215.63 1595.31,1215.63 1595.89,1215.63 1596.48,1215.63 1597.07,1215.63 1597.65,1215.63 1598.24,1215.63 1598.83,1215.63 1599.41,1215.63 1600,1215.63 1600.59,1215.63 1601.17,1215.63 1601.76,1215.63 1602.34,1215.63 1602.93,1215.63 1603.52,1215.63 1604.1,1215.63 1604.69,1215.63 1605.28,1215.63 1605.86,1215.63 1606.45,1215.63 1607.04,1215.63 1607.62,1215.63 1608.21,1215.63 1608.8,1215.63 1609.38,1215.63 1609.97,1215.63 1610.55,1215.63 1611.14,1215.63 1611.73,1215.63 1612.31,1215.63 1612.9,1215.63 1613.49,1215.63 1614.07,1215.63 1614.66,1215.63 1615.25,1215.63 1615.83,1215.63 1616.42,1215.63 1617.01,1215.63 1617.59,1215.63 1618.18,1215.63 1618.76,1215.63 1619.35,1215.63 1619.94,1215.63 1620.52,1215.63 1621.11,1215.63 1621.7,1215.63 1622.28,1215.63 1622.87,1215.63 1623.46,1215.63 1624.04,1215.63 1624.63,1215.63 1625.22,1215.63 1625.8,1215.63 1626.39,1215.63 1626.97,1215.63 1627.56,1215.63 1628.15,1215.63 1628.73,1215.63 1629.32,1215.63 1629.91,1215.63 1630.49,1215.63 1631.08,1215.63 1631.67,1215.63 1632.25,1215.63 1632.84,1215.63 1633.42,1215.63 1634.01,1215.63 1634.6,1215.63 1635.18,1215.63 1635.77,1215.63 1636.36,1215.63 1636.94,1215.63 1637.53,1215.63 1638.12,1215.63 1638.7,1215.63 1639.29,1215.63 1639.88,1215.63 1640.46,1215.63 1641.05,1215.63 1641.63,1215.63 1642.22,1215.63 1642.81,1215.63 1643.39,1215.63 1643.98,1215.63 1644.57,1215.63 1645.15,1215.63 1645.74,1215.63 1646.33,1215.63 1646.91,1215.63 1647.5,1215.63 1648.09,1215.63 1648.67,1215.63 1649.26,1215.63 1649.84,1215.63 1650.43,1215.63 1651.02,1215.63 1651.6,1215.63 1652.19,1215.63 1652.78,1215.63 1653.36,1215.63 1653.95,1215.63 1654.54,1215.63 1655.12,1215.63 1655.71,1215.63 1656.29,1215.63 1656.88,1215.63 1657.47,1215.63 1658.05,1215.63 1658.64,1215.63 1659.23,1215.63 1659.81,1215.63 1660.4,1215.63 1660.99,1215.63 1661.57,1215.63 1662.16,1215.63 1662.75,1215.63 1663.33,1215.63 1663.92,1215.63 1664.5,1215.63 1665.09,1215.63 1665.68,1215.63 1666.26,1215.63 1666.85,1215.63 1667.44,1215.63 1668.02,1215.63 1668.61,1215.63 1669.2,1215.63 1669.78,1215.63 1670.37,1215.63 1670.96,1215.63 1671.54,1215.63 1672.13,1215.63 1672.71,1215.63 1673.3,1215.63 1673.89,1215.63 1674.47,1215.63 1675.06,1215.63 1675.65,1215.63 1676.23,1215.63 1676.82,1215.63 1677.41,1215.63 1677.99,1215.63 1678.58,1215.63 1679.17,1215.63 1679.75,1215.63 1680.34,1215.63 1680.92,1215.63 1681.51,1215.63 1682.1,1215.63 1682.68,1215.63 1683.27,1215.63 1683.86,1215.63 1684.44,1215.63 1685.03,1215.63 1685.62,1215.63 1686.2,1215.63 1686.79,1215.63 1687.37,1215.63 1687.96,1215.63 1688.55,1215.63 1689.13,1215.63 1689.72,1215.63 1690.31,1215.63 1690.89,1215.63 1691.48,1215.63 1692.07,1215.63 1692.65,1215.63 1693.24,1215.63 1693.83,1215.63 1694.41,1215.63 1695,1215.63 1695.58,1215.63 1696.17,1215.63 1696.76,1215.63 1697.34,1215.63 1697.93,1215.63 1698.52,1215.63 1699.1,1215.63 1699.69,1215.63 1700.28,1215.63 1700.86,1215.63 1701.45,1215.63 1702.04,1215.63 1702.62,1215.63 1703.21,1215.63 1703.79,1215.63 1704.38,1215.63 1704.97,1215.63 1705.55,1215.63 1706.14,1215.63 1706.73,1215.63 1707.31,1215.63 1707.9,1215.63 1708.49,1215.63 1709.07,1215.63 1709.66,1215.63 1710.24,1215.63 1710.83,1215.63 1711.42,1215.63 1712,1215.63 1712.59,1215.63 1713.18,1215.63 1713.76,1215.63 1714.35,1215.63 1714.94,1215.63 1715.52,1215.63 1716.11,1215.63 1716.7,1215.63 1717.28,1215.63 1717.87,1215.63 1718.45,1215.63 1719.04,1215.63 1719.63,1215.63 1720.21,1215.63 1720.8,1215.63 1721.39,1215.63 1721.97,1215.63 1722.56,1215.63 1723.15,1215.63 1723.73,1215.63 1724.32,1215.63 1724.91,1215.63 1725.49,1215.63 1726.08,1215.63 1726.66,1215.63 1727.25,1215.63 1727.84,1215.63 1728.42,1215.63 1729.01,1215.63 1729.6,1215.63 1730.18,1215.63 1730.77,1215.63 1731.36,1215.63 1731.94,1215.63 1732.53,1215.63 1733.11,1215.63 1733.7,1215.63 1734.29,1215.63 1734.87,1215.63 1735.46,1215.63 1736.05,1215.63 1736.63,1215.63 1737.22,1215.63 1737.81,1215.63 1738.39,1215.63 1738.98,1215.63 1739.57,1215.63 1740.15,1215.63 1740.74,1215.63 1741.32,1215.63 1741.91,1215.63 1742.5,1215.63 1743.08,1215.63 1743.67,1215.63 1744.26,1215.63 1744.84,1215.63 1745.43,1215.63 1746.02,1215.63 1746.6,1215.63 1747.19,1215.63 1747.78,1215.63 1748.36,1215.63 1748.95,1215.63 1749.53,1215.63 1750.12,1215.63 1750.71,1215.63 1751.29,1215.63 1751.88,1215.63 1752.47,1215.63 1753.05,1215.63 1753.64,1215.63 1754.23,1215.63 1754.81,1215.63 1755.4,1215.63 1755.99,1215.63 1756.57,1215.63 1757.16,1215.63 1757.74,1215.63 1758.33,1215.63 1758.92,1215.63 1759.5,1215.63 1760.09,1215.63 1760.68,1215.63 1761.26,1215.63 1761.85,1215.63 1762.44,1215.63 1763.02,1215.63 1763.61,1215.63 1764.19,1215.63 1764.78,1215.63 1765.37,1215.63 1765.95,1215.63 1766.54,1215.63 1767.13,1215.63 1767.71,1215.63 1768.3,1215.63 1768.89,1215.63 1769.47,1215.63 1770.06,1215.63 1770.65,1215.63 1771.23,1215.63 1771.82,1215.63 1772.4,1215.63 1772.99,1215.63 1773.58,1215.63 1774.16,1215.63 1774.75,1215.63 1775.34,1215.63 1775.92,1215.63 1776.51,1215.63 1777.1,1215.63 1777.68,1215.63 1778.27,1215.63 1778.86,1215.63 1779.44,1215.63 1780.03,1215.63 1780.61,1215.63 1781.2,1215.63 1781.79,1215.63 1782.37,1215.63 1782.96,1215.63 1783.55,1215.63 1784.13,1215.63 1784.72,1215.63 1785.31,1215.63 1785.89,1215.63 1786.48,1215.63 1787.06,1215.63 1787.65,1215.63 1788.24,1215.63 1788.82,1215.63 1789.41,1215.63 1790,1215.63 1790.58,1215.63 1791.17,1215.63 1791.76,1215.63 1792.34,1215.63 1792.93,1215.63 1793.52,1215.63 1794.1,1215.63 1794.69,1215.63 1795.27,1215.63 1795.86,1215.63 1796.45,1215.63 1797.03,1215.63 1797.62,1215.63 1798.21,1215.63 1798.79,1215.63 1799.38,1215.63 1799.97,1215.63 1800.55,1215.63 1801.14,1215.63 1801.73,1215.63 1802.31,1215.63 1802.9,1215.63 1803.48,1215.63 1804.07,1215.63 1804.66,1215.63 1805.24,1215.63 1805.83,1215.63 1806.42,1215.63 1807,1215.63 1807.59,1215.63 1808.18,1215.63 1808.76,1215.63 1809.35,1215.63 1809.94,1215.63 1810.52,1215.63 1811.11,1215.63 1811.69,1215.63 1812.28,1215.63 1812.87,1215.63 1813.45,1215.63 1814.04,1215.63 1814.63,1215.63 1815.21,1215.63 1815.8,1215.63 1816.39,1215.63 1816.97,1215.63 1817.56,1215.63 1818.14,1215.63 1818.73,1215.63 1819.32,1215.63 1819.9,1215.63 1820.49,1215.63 1821.08,1215.63 1821.66,1215.63 1822.25,1215.63 1822.84,1215.63 1823.42,1215.63 1824.01,1215.63 1824.6,1215.63 1825.18,1215.63 1825.77,1215.63 1826.35,1215.63 1826.94,1215.63 1827.53,1215.63 1828.11,1215.63 1828.7,1215.63 1829.29,1215.63 1829.87,1215.63 1830.46,1215.63 1831.05,1215.63 1831.63,1215.63 1832.22,1215.63 1832.81,1215.63 1833.39,1215.63 1833.98,1215.63 1834.56,1215.63 1835.15,1215.63 1835.74,1215.63 1836.32,1215.63 1836.91,1215.63 1837.5,1215.63 1838.08,1215.63 1838.67,1215.63 1839.26,1215.63 1839.84,1215.63 1840.43,1215.63 1841.01,1215.63 1841.6,1215.63 1842.19,1215.63 1842.77,1215.63 1843.36,1215.63 1843.95,1215.63 1844.53,1215.63 1845.12,1215.63 1845.71,1215.63 1846.29,1215.63 1846.88,1215.63 1847.47,1215.63 1848.05,1215.63 1848.64,1215.63 1849.22,1215.63 1849.81,1215.63 1850.4,1215.63 1850.98,1215.63 1851.57,1215.63 1852.16,1215.63 1852.74,1215.63 1853.33,1215.63 1853.92,1215.63 1854.5,1215.63 1855.09,1215.63 1855.68,1215.63 1856.26,1215.63 1856.85,1215.63 1857.43,1215.63 1858.02,1215.63 1858.61,1215.63 1859.19,1215.63 1859.78,1215.63 1860.37,1215.63 1860.95,1215.63 1861.54,1215.63 1862.13,1215.63 1862.71,1215.63 1863.3,1215.63 1863.88,1215.63 1864.47,1215.63 1865.06,1215.63 1865.64,1215.63 1866.23,1215.63 1866.82,1215.63 1867.4,1215.63 1867.99,1215.63 1868.58,1215.63 1869.16,1215.63 1869.75,1215.63 1870.34,1215.63 1870.92,1215.63 1871.51,1215.63 1872.09,1215.63 1872.68,1215.63 1873.27,1215.63 1873.85,1215.63 1874.44,1215.63 1875.03,1215.63 1875.61,1215.63 1876.2,1215.63 1876.79,1215.63 1877.37,1215.63 1877.96,1215.63 1878.55,1215.63 1879.13,1215.63 1879.72,1215.63 1880.3,1215.63 1880.89,1215.63 1881.48,1215.63 1882.06,1215.63 1882.65,1215.63 1883.24,1215.63 1883.82,1215.63 1884.41,1215.63 1885,1215.63 1885.58,1215.63 1886.17,1215.63 1886.76,1215.63 1887.34,1215.63 1887.93,1215.63 1888.51,1215.63 1889.1,1215.63 1889.69,1215.63 1890.27,1215.63 1890.86,1215.63 1891.45,1215.63 1892.03,1215.63 1892.62,1215.63 1893.21,1215.63 1893.79,1215.63 1894.38,1215.63 1894.96,1215.63 1895.55,1215.63 1896.14,1215.63 1896.72,1215.63 1897.31,1215.63 1897.9,1215.63 1898.48,1215.63 1899.07,1215.63 1899.66,1215.63 1900.24,1215.63 1900.83,1215.63 1901.42,1215.63 1902,1215.63 1902.59,1215.63 1903.17,1215.63 1903.76,1215.63 1904.35,1215.63 1904.93,1215.63 1905.52,1215.63 1906.11,1215.63 1906.69,1215.63 1907.28,1215.63 1907.87,1215.63 1908.45,1215.63 1909.04,1215.63 1909.63,1215.63 1910.21,1215.63 1910.8,1215.63 1911.38,1215.63 1911.97,1215.63 1912.56,1215.63 1913.14,1215.63 1913.73,1215.63 1914.32,1215.63 1914.9,1215.63 1915.49,1215.63 1916.08,1215.63 1916.66,1215.63 1917.25,1215.63 1917.83,1215.63 1918.42,1215.63 1919.01,1215.63 1919.59,1215.63 1920.18,1215.63 1920.77,1215.63 1921.35,1215.63 1921.94,1215.63 1922.53,1215.63 1923.11,1215.63 1923.7,1215.63 1924.29,1215.63 1924.87,1215.63 1925.46,1215.63 1926.04,1215.63 1926.63,1215.63 1927.22,1215.63 1927.8,1215.63 1928.39,1215.63 1928.98,1215.63 1929.56,1215.63 1930.15,1215.63 1930.74,1215.63 1931.32,1215.63 1931.91,1215.63 1932.5,1215.63 1933.08,1215.63 1933.67,1215.63 1934.25,1215.63 1934.84,1215.63 1935.43,1215.63 1936.01,1215.63 1936.6,1215.63 1937.19,1215.63 1937.77,1215.63 1938.36,1215.63 1938.95,1215.63 1939.53,1215.63 1940.12,1215.63 1940.71,1215.63 1941.29,1215.63 1941.88,1215.63 1942.46,1215.63 1943.05,1215.63 1943.64,1215.63 1944.22,1215.63 1944.81,1215.63 1945.4,1215.63 1945.98,1215.63 1946.57,1215.63 1947.16,1215.63 1947.74,1215.63 1948.33,1215.63 1948.91,1215.63 1949.5,1215.63 1950.09,1215.63 1950.67,1215.63 1951.26,1215.63 1951.85,1215.63 1952.43,1215.63 1953.02,1215.63 1953.61,1215.63 1954.19,1215.63 1954.78,1215.63 1955.37,1215.63 1955.95,1215.63 1956.54,1215.63 1957.12,1215.63 1957.71,1215.63 1958.3,1215.63 1958.88,1215.63 1959.47,1215.63 1960.06,1215.63 1960.64,1215.63 1961.23,1215.63 1961.82,1215.63 1962.4,1215.63 1962.99,1215.63 1963.58,1215.63 1964.16,1215.63 1964.75,1215.63 1965.33,1215.63 1965.92,1215.63 1966.51,1215.63 1967.09,1215.63 1967.68,1215.63 1968.27,1215.63 1968.85,1215.63 1969.44,1215.63 1970.03,1215.63 1970.61,1215.63 1971.2,1215.63 1971.78,1215.63 1972.37,1215.63 1972.96,1215.63 1973.54,1215.63 1974.13,1215.63 1974.72,1215.63 1975.3,1215.63 1975.89,1215.63 1976.48,1215.63 1977.06,1215.63 1977.65,1215.63 1978.24,1215.63 1978.82,1215.63 1979.41,1215.63 1979.99,1215.63 1980.58,1215.63 1981.17,1215.63 1981.75,1215.63 1982.34,1215.63 1982.93,1215.63 1983.51,1215.63 1984.1,1215.63 1984.69,1215.63 1985.27,1215.63 1985.86,1215.63 1986.45,1215.63 1987.03,1215.63 1987.62,1215.63 1988.2,1215.63 1988.79,1215.63 1989.38,1215.63 1989.96,1215.63 1990.55,1215.63 1991.14,1215.63 1991.72,1215.63 1992.31,1215.63 1992.9,1215.63 1993.48,1215.63 1994.07,1215.63 1994.65,1215.63 1995.24,1215.63 1995.83,1215.63 1996.41,1215.63 1997,1215.63 1997.59,1215.63 1998.17,1215.63 1998.76,1215.63 1999.35,1215.63 1999.93,1215.63 2000.52,1215.63 2001.11,1215.63 2001.69,1215.63 2002.28,1215.63 2002.86,1215.63 2003.45,1215.63 2004.04,1215.63 2004.62,1215.63 2005.21,1215.63 2005.8,1215.63 2006.38,1215.63 2006.97,1215.63 2007.56,1215.63 2008.14,1215.63 2008.73,1215.63 2009.32,1215.63 2009.9,1215.63 2010.49,1215.63 2011.07,1215.63 2011.66,1215.63 2012.25,1215.63 2012.83,1215.63 2013.42,1215.63 2014.01,1215.63 2014.59,1215.63 2015.18,1215.63 2015.77,1215.63 2016.35,1215.63 2016.94,1215.63 2017.53,1215.63 2018.11,1215.63 2018.7,1215.63 2019.28,1215.63 2019.87,1215.63 2020.46,1215.63 2021.04,1215.63 2021.63,1215.63 2022.22,1215.63 2022.8,1215.63 2023.39,1215.63 2023.98,1215.63 2024.56,1215.63 2025.15,1215.63 2025.73,1215.63 2026.32,1215.63 2026.91,1215.63 2027.49,1215.63 2028.08,1215.63 2028.67,1215.63 2029.25,1215.63 2029.84,1215.63 2030.43,1215.63 2031.01,1215.63 2031.6,1215.63 2032.19,1215.63 2032.77,1215.63 2033.36,1215.63 2033.94,1215.63 2034.53,1215.63 2035.12,1215.63 2035.7,1215.63 2036.29,1215.63 2036.88,1215.63 2037.46,1215.63 2038.05,1215.63 2038.64,1215.63 2039.22,1215.63 2039.81,1215.63 2040.4,1215.63 2040.98,1215.63 2041.57,1215.63 2042.15,1215.63 2042.74,1215.63 2043.33,1215.63 2043.91,1215.63 2044.5,1215.63 2045.09,1215.63 2045.67,1215.63 2046.26,1215.63 2046.85,1215.63 2047.43,1215.63 2048.02,1215.63 2048.6,1215.63 2049.19,1215.63 2049.78,1215.63 2050.36,1215.63 2050.95,1215.63 2051.54,1215.63 2052.12,1215.63 2052.71,1215.63 2053.3,1215.63 2053.88,1215.63 2054.47,1215.63 2055.06,1215.63 2055.64,1215.63 2056.23,1215.63 2056.81,1215.63 2057.4,1215.63 2057.99,1215.63 2058.57,1215.63 2059.16,1215.63 2059.75,1215.63 2060.33,1215.63 2060.92,1215.63 2061.51,1215.63 2062.09,1215.63 2062.68,1215.63 2063.27,1215.63 2063.85,1215.63 2064.44,1215.63 2065.02,1215.63 2065.61,1215.63 2066.2,1215.63 2066.78,1215.63 2067.37,1215.63 2067.96,1215.63 2068.54,1215.63 2069.13,1215.63 2069.72,1215.63 2070.3,1215.63 2070.89,1215.63 2071.48,1215.63 2072.06,1215.63 2072.65,1215.63 2073.23,1215.63 2073.82,1215.63 2074.41,1215.63 2074.99,1215.63 2075.58,1215.63 2076.17,1215.63 2076.75,1215.63 2077.34,1215.63 2077.93,1215.63 2078.51,1215.63 2079.1,1215.63 2079.68,1215.63 2080.27,1215.63 2080.86,1215.63 2081.44,1215.63 2082.03,1215.63 2082.62,1215.63 2083.2,1215.63 2083.79,1215.63 2084.38,1215.63 2084.96,1215.63 2085.55,1215.63 2086.14,1215.63 2086.72,1215.63 2087.31,1215.63 2087.89,1215.63 2088.48,1215.63 2089.07,1215.63 2089.65,1215.63 2090.24,1215.63 2090.83,1215.63 2091.41,1215.63 2092,1215.63 2092.59,1215.63 2093.17,1215.63 2093.76,1215.63 2094.35,1215.63 2094.93,1215.63 2095.52,1215.63 2096.1,1215.63 2096.69,1215.63 2097.28,1215.63 2097.86,1215.63 2098.45,1215.63 2099.04,1215.63 2099.62,1215.63 2100.21,1215.63 2100.8,1215.63 2101.38,1215.63 2101.97,1215.63 2102.55,1215.63 2103.14,1215.63 2103.73,1215.63 2104.31,1215.63 2104.9,1215.63 2105.49,1215.63 2106.07,1215.63 2106.66,1215.63 2107.25,1215.63 2107.83,1215.63 2108.42,1215.63 2109.01,1215.63 2109.59,1215.63 2110.18,1215.63 2110.76,1215.63 2111.35,1215.63 2111.94,1215.63 2112.52,1215.63 2113.11,1215.63 2113.7,1215.63 2114.28,1215.63 2114.87,1215.63 2115.46,1215.63 2116.04,1215.63 2116.63,1215.63 2117.22,1215.63 2117.8,1215.63 2118.39,1215.63 2118.97,1215.63 2119.56,1215.63 2120.15,1215.63 2120.73,1215.63 2121.32,1215.63 2121.91,1215.63 2122.49,1215.63 2123.08,1215.63 2123.67,1215.63 2124.25,1215.63 2124.84,1215.63 2125.42,1215.63 2126.01,1215.63 2126.6,1215.63 2127.18,1215.63 2127.77,1215.63 2128.36,1215.63 2128.94,1215.63 2129.53,1215.63 2130.12,1215.63 2130.7,1215.63 2131.29,1215.63 2131.88,1215.63 2132.46,1215.63 2133.05,1215.63 2133.63,1215.63 2134.22,1215.63 2134.81,1215.63 2135.39,1215.63 2135.98,1215.63 2136.57,1215.63 2137.15,1215.63 2137.74,1215.63 2138.33,1215.63 2138.91,1215.63 2139.5,1215.63 2140.09,1215.63 2140.67,1215.63 2141.26,1215.63 2141.84,1215.63 2142.43,1215.63 2143.02,1215.63 2143.6,1215.63 2144.19,1215.63 2144.78,1215.63 2145.36,1215.63 2145.95,1215.63 2146.54,1215.63 2147.12,1215.63 2147.71,1215.63 2148.3,1215.63 2148.88,1215.63 2149.47,1215.63 2150.05,1215.63 2150.64,1215.63 2151.23,1215.63 2151.81,1215.63 2152.4,1215.63 2152.99,1215.63 2153.57,1215.63 2154.16,1215.63 2154.75,1215.63 2155.33,1215.63 2155.92,1215.63 2156.5,1215.63 2157.09,1215.63 2157.68,1215.63 2158.26,1215.63 \"/>\n<path clip-path=\"url(#clip802)\" d=\"M986.025 1215.36 L986.612 1215.36 L987.198 1215.36 L987.785 1215.36 L988.371 1215.36 L988.957 1215.36 L989.544 1215.36 L990.13 1215.36 L990.717 1215.36 L991.303 1215.36 L991.889 1215.36 L992.476 1215.36 L993.062 1215.36 L993.649 1215.36 L994.235 1215.36 L994.822 1215.36 L995.408 1215.36 L995.994 1215.36 L996.581 1215.36 L997.167 1215.36 L997.754 1215.36 L998.34 1215.36 L998.926 1215.36 L999.513 1215.36 L1000.1 1215.36 L1000.69 1215.36 L1001.27 1215.36 L1001.86 1215.36 L1002.44 1215.36 L1003.03 1215.36 L1003.62 1215.36 L1004.2 1215.36 L1004.79 1215.36 L1005.38 1215.36 L1005.96 1215.36 L1006.55 1215.36 L1007.14 1215.36 L1007.72 1215.36 L1008.31 1215.36 L1008.9 1215.36 L1009.48 1215.36 L1010.07 1215.36 L1010.65 1215.36 L1011.24 1215.36 L1011.83 1215.36 L1012.41 1215.36 L1013 1215.36 L1013.59 1215.36 L1014.17 1215.36 L1014.76 1215.36 L1015.35 1215.36 L1015.93 1215.36 L1016.52 1215.36 L1017.11 1215.36 L1017.69 1215.36 L1018.28 1215.36 L1018.86 1215.36 L1019.45 1215.36 L1020.04 1215.36 L1020.62 1215.36 L1021.21 1215.36 L1021.8 1215.36 L1022.38 1215.36 L1022.97 1215.36 L1023.56 1215.36 L1024.14 1215.36 L1024.73 1215.36 L1025.32 1215.36 L1025.9 1215.36 L1026.49 1215.36 L1027.07 1215.36 L1027.66 1215.36 L1028.25 1215.36 L1028.83 1215.36 L1029.42 1215.36 L1030.01 1215.36 L1030.59 1215.36 L1031.18 1215.36 L1031.77 1215.36 L1032.35 1215.36 L1032.94 1215.36 L1033.52 1215.36 L1034.11 1215.36 L1034.7 1215.36 L1035.28 1215.36 L1035.87 1215.36 L1036.46 1215.36 L1037.04 1215.36 L1037.63 1215.36 L1038.22 1215.36 L1038.8 1215.36 L1039.39 1215.36 L1039.98 1215.36 L1040.56 1215.36 L1041.15 1215.36 L1041.73 1215.36 L1042.32 1215.36 L1042.91 1215.36 L1043.49 1215.36 L1044.08 1215.36 L1044.67 1215.36 L1045.25 1215.36 L1045.84 1215.36 L1046.43 1215.36 L1047.01 1215.36 L1047.6 1215.36 L1048.19 1215.36 L1048.77 1215.36 L1049.36 1215.36 L1049.94 1215.36 L1050.53 1215.36 L1051.12 1215.36 L1051.7 1215.36 L1052.29 1215.36 L1052.88 1215.36 L1053.46 1215.36 L1054.05 1215.36 L1054.64 1215.36 L1055.22 1215.36 L1055.81 1215.36 L1056.39 1215.36 L1056.98 1215.36 L1057.57 1215.36 L1058.15 1215.36 L1058.74 1215.36 L1059.33 1215.36 L1059.91 1215.36 L1060.5 1215.36 L1061.09 1215.36 L1061.67 1215.36 L1062.26 1215.36 L1062.85 1215.36 L1063.43 1215.36 L1064.02 1215.36 L1064.6 1215.36 L1065.19 1215.36 L1065.78 1215.36 L1066.36 1215.36 L1066.95 1215.36 L1067.54 1215.36 L1068.12 1215.36 L1068.71 1215.36 L1069.3 1215.36 L1069.88 1215.36 L1070.47 1215.36 L1071.06 1215.36 L1071.64 1215.36 L1072.23 1215.36 L1072.81 1215.36 L1073.4 1215.36 L1073.99 1215.36 L1074.57 1215.36 L1075.16 1215.36 L1075.75 1215.36 L1076.33 1215.36 L1076.92 1215.36 L1077.51 1215.36 L1078.09 1215.36 L1078.68 1215.36 L1079.26 1215.36 L1079.85 1215.36 L1080.44 1215.36 L1081.02 1215.36 L1081.61 1215.36 L1082.2 1215.36 L1082.78 1215.36 L1083.37 1215.36 L1083.96 1215.36 L1084.54 1215.36 L1085.13 1215.36 L1085.72 1215.36 L1086.3 1215.36 L1086.89 1215.36 L1087.47 1215.36 L1088.06 1215.36 L1088.65 1215.36 L1089.23 1215.36 L1089.82 1215.36 L1090.41 1215.36 L1090.99 1215.36 L1091.58 1215.36 L1092.17 1215.36 L1092.75 1215.36 L1093.34 1215.36 L1093.93 1215.36 L1094.51 1215.36 L1095.1 1215.36 L1095.68 1215.36 L1096.27 1215.36 L1096.86 1215.36 L1097.44 1215.36 L1098.03 1215.36 L1098.62 1215.36 L1099.2 1215.36 L1099.79 1215.36 L1100.38 1215.36 L1100.96 1215.36 L1101.55 1215.36 L1102.14 1215.36 L1102.72 1215.36 L1103.31 1215.36 L1103.89 1215.36 L1104.48 1215.36 L1105.07 1215.36 L1105.65 1215.36 L1106.24 1215.36 L1106.83 1215.36 L1107.41 1215.36 L1108 1215.36 L1108.59 1215.36 L1109.17 1215.36 L1109.76 1215.36 L1110.34 1215.36 L1110.93 1215.36 L1111.52 1215.36 L1112.1 1215.36 L1112.69 1215.36 L1113.28 1215.36 L1113.86 1215.36 L1114.45 1215.36 L1115.04 1215.36 L1115.62 1215.36 L1116.21 1215.36 L1116.8 1215.36 L1117.38 1215.36 L1117.97 1215.36 L1118.55 1215.36 L1119.14 1215.36 L1119.73 1215.36 L1120.31 1215.36 L1120.9 1215.36 L1121.49 1215.36 L1122.07 1215.36 L1122.66 1215.36 L1123.25 1215.36 L1123.83 1215.36 L1124.42 1215.36 L1125.01 1215.36 L1125.59 1215.36 L1126.18 1215.36 L1126.76 1215.36 L1127.35 1215.36 L1127.94 1215.36 L1128.52 1215.36 L1129.11 1215.36 L1129.7 1215.36 L1130.28 1215.36 L1130.87 1215.36 L1131.46 1215.36 L1132.04 1215.36 L1132.63 1215.36 L1133.21 1215.36 L1133.8 1215.36 L1134.39 1215.36 L1134.97 1215.36 L1135.56 1215.36 L1136.15 1215.36 L1136.73 1215.36 L1137.32 1215.36 L1137.91 1215.36 L1138.49 1215.36 L1139.08 1215.36 L1139.67 1215.36 L1140.25 1215.36 L1140.84 1215.36 L1141.42 1215.36 L1142.01 1215.36 L1142.6 1215.36 L1143.18 1215.36 L1143.77 1215.36 L1144.36 1215.36 L1144.94 1215.36 L1145.53 1215.36 L1146.12 1215.36 L1146.7 1215.36 L1147.29 1215.36 L1147.88 1215.36 L1148.46 1215.36 L1149.05 1215.36 L1149.63 1215.36 L1150.22 1215.36 L1150.81 1215.36 L1151.39 1215.36 L1151.98 1215.36 L1152.57 1215.36 L1153.15 1215.36 L1153.74 1215.36 L1154.33 1215.36 L1154.91 1215.36 L1155.5 1215.36 L1156.09 1215.36 L1156.67 1215.36 L1157.26 1215.36 L1157.84 1215.36 L1158.43 1215.36 L1159.02 1215.36 L1159.6 1215.36 L1160.19 1215.36 L1160.78 1215.36 L1161.36 1215.36 L1161.95 1215.36 L1162.54 1215.36 L1163.12 1215.36 L1163.71 1215.36 L1164.29 1215.36 L1164.88 1215.36 L1165.47 1215.36 L1166.05 1215.36 L1166.64 1215.36 L1167.23 1215.36 L1167.81 1215.36 L1168.4 1215.36 L1168.99 1215.36 L1169.57 1215.36 L1170.16 1215.36 L1170.75 1215.36 L1171.33 1215.36 L1171.92 1215.36 L1172.5 1215.36 L1173.09 1215.36 L1173.68 1215.36 L1174.26 1215.36 L1174.85 1215.36 L1175.44 1215.36 L1176.02 1215.36 L1176.61 1215.36 L1177.2 1215.36 L1177.78 1215.36 L1178.37 1215.36 L1178.96 1215.36 L1179.54 1215.36 L1180.13 1215.36 L1180.71 1215.36 L1181.3 1215.36 L1181.89 1215.36 L1182.47 1215.36 L1183.06 1215.36 L1183.65 1215.36 L1184.23 1215.36 L1184.82 1215.36 L1185.41 1215.36 L1185.99 1215.36 L1186.58 1215.36 L1187.16 1215.36 L1187.75 1215.36 L1188.34 1215.36 L1188.92 1215.36 L1189.51 1215.36 L1190.1 1215.36 L1190.68 1215.36 L1191.27 1215.36 L1191.86 1215.36 L1192.44 1215.36 L1193.03 1215.36 L1193.62 1215.36 L1194.2 1215.36 L1194.79 1215.36 L1195.37 1215.36 L1195.96 1215.36 L1196.55 1215.36 L1197.13 1215.36 L1197.72 1215.36 L1198.31 1215.36 L1198.89 1215.36 L1199.48 1215.36 L1200.07 1215.36 L1200.65 1215.36 L1201.24 1215.36 L1201.83 1215.36 L1202.41 1215.36 L1203 1215.36 L1203.58 1215.36 L1204.17 1215.36 L1204.76 1215.36 L1205.34 1215.36 L1205.93 1215.36 L1206.52 1215.36 L1207.1 1215.36 L1207.69 1215.36 L1208.28 1215.36 L1208.86 1215.36 L1209.45 1215.36 L1210.03 1215.36 L1210.62 1215.36 L1211.21 1215.36 L1211.79 1215.36 L1212.38 1215.36 L1212.97 1215.36 L1213.55 1215.36 L1214.14 1215.36 L1214.73 1215.36 L1215.31 1215.36 L1215.9 1215.36 L1216.49 1215.36 L1217.07 1215.36 L1217.66 1215.36 L1218.24 1215.36 L1218.83 1215.36 L1219.42 1215.36 L1220 1215.36 L1220.59 1215.36 L1221.18 1215.36 L1221.76 1215.36 L1222.35 1215.36 L1222.94 1215.36 L1223.52 1215.36 L1224.11 1215.36 L1224.7 1215.36 L1225.28 1215.36 L1225.87 1215.36 L1226.45 1215.36 L1227.04 1215.36 L1227.63 1215.36 L1228.21 1215.36 L1228.8 1215.36 L1229.39 1215.36 L1229.97 1215.36 L1230.56 1215.36 L1231.15 1215.36 L1231.73 1215.36 L1232.32 1215.36 L1232.91 1215.36 L1233.49 1215.36 L1234.08 1215.36 L1234.66 1215.36 L1235.25 1215.36 L1235.84 1215.36 L1236.42 1215.36 L1237.01 1215.36 L1237.6 1215.36 L1238.18 1215.36 L1238.77 1215.36 L1239.36 1215.36 L1239.94 1215.36 L1240.53 1215.36 L1241.11 1215.36 L1241.7 1215.36 L1242.29 1215.36 L1242.87 1215.36 L1243.46 1215.36 L1244.05 1215.36 L1244.63 1215.36 L1245.22 1215.36 L1245.81 1215.36 L1246.39 1215.36 L1246.98 1215.36 L1247.57 1215.36 L1248.15 1215.36 L1248.74 1215.36 L1249.32 1215.36 L1249.91 1215.36 L1250.5 1215.36 L1251.08 1215.36 L1251.67 1215.36 L1252.26 1215.36 L1252.84 1215.36 L1253.43 1215.36 L1254.02 1215.36 L1254.6 1215.36 L1255.19 1215.36 L1255.78 1215.36 L1256.36 1215.36 L1256.95 1215.36 L1257.53 1215.36 L1258.12 1215.36 L1258.71 1215.36 L1259.29 1215.36 L1259.88 1215.36 L1260.47 1215.36 L1261.05 1215.36 L1261.64 1215.36 L1262.23 1215.36 L1262.81 1215.36 L1263.4 1215.36 L1263.98 1215.36 L1264.57 1215.36 L1265.16 1215.36 L1265.74 1215.36 L1266.33 1215.36 L1266.92 1215.36 L1267.5 1215.36 L1268.09 1215.36 L1268.68 1215.36 L1269.26 1215.36 L1269.85 1215.36 L1270.44 1215.36 L1271.02 1215.36 L1271.61 1215.36 L1272.19 1215.36 L1272.78 1215.36 L1273.37 1215.36 L1273.95 1215.36 L1274.54 1215.36 L1275.13 1215.36 L1275.71 1215.36 L1276.3 1215.36 L1276.89 1215.36 L1277.47 1215.36 L1278.06 1215.36 L1278.65 1215.36 L1279.23 1215.36 L1279.82 1215.36 L1280.4 1215.36 L1280.99 1215.36 L1281.58 1215.36 L1282.16 1215.36 L1282.75 1215.36 L1283.34 1215.36 L1283.92 1215.36 L1284.51 1215.36 L1285.1 1215.36 L1285.68 1215.36 L1286.27 1215.36 L1286.86 1215.36 L1287.44 1215.36 L1288.03 1215.36 L1288.61 1215.36 L1289.2 1215.36 L1289.79 1215.36 L1290.37 1215.36 L1290.96 1215.36 L1291.55 1215.36 L1292.13 1215.36 L1292.72 1215.36 L1293.31 1215.36 L1293.89 1215.36 L1294.48 1215.36 L1295.06 1215.36 L1295.65 1215.36 L1296.24 1215.36 L1296.82 1215.36 L1297.41 1215.36 L1298 1215.36 L1298.58 1215.36 L1299.17 1215.36 L1299.76 1215.36 L1300.34 1215.36 L1300.93 1215.36 L1301.52 1215.36 L1302.1 1215.36 L1302.69 1215.36 L1303.27 1215.36 L1303.86 1215.36 L1304.45 1215.36 L1305.03 1215.36 L1305.62 1215.36 L1306.21 1215.36 L1306.79 1215.36 L1307.38 1215.36 L1307.97 1215.36 L1308.55 1215.36 L1309.14 1215.36 L1309.73 1215.36 L1310.31 1215.36 L1310.9 1215.36 L1311.48 1215.36 L1312.07 1215.36 L1312.66 1215.36 L1313.24 1215.36 L1313.83 1215.36 L1314.42 1215.36 L1315 1215.36 L1315.59 1215.36 L1316.18 1215.36 L1316.76 1215.36 L1317.35 1215.36 L1317.93 1215.36 L1318.52 1215.36 L1319.11 1215.36 L1319.69 1215.36 L1320.28 1215.36 L1320.87 1215.36 L1321.45 1215.36 L1322.04 1215.36 L1322.63 1215.36 L1323.21 1215.36 L1323.8 1215.36 L1324.39 1215.36 L1324.97 1215.36 L1325.56 1215.36 L1326.14 1215.36 L1326.73 1215.36 L1327.32 1215.36 L1327.9 1215.36 L1328.49 1215.36 L1329.08 1215.36 L1329.66 1215.36 L1330.25 1215.36 L1330.84 1215.36 L1331.42 1215.36 L1332.01 1215.36 L1332.6 1215.36 L1333.18 1215.36 L1333.77 1215.36 L1334.35 1215.36 L1334.94 1215.36 L1335.53 1215.36 L1336.11 1215.36 L1336.7 1215.36 L1337.29 1215.36 L1337.87 1215.36 L1338.46 1215.36 L1339.05 1215.36 L1339.63 1215.36 L1340.22 1215.36 L1340.8 1215.36 L1341.39 1215.36 L1341.98 1215.36 L1342.56 1215.36 L1343.15 1215.36 L1343.74 1215.36 L1344.32 1215.36 L1344.91 1215.36 L1345.5 1215.36 L1346.08 1215.36 L1346.67 1215.36 L1347.26 1215.36 L1347.84 1215.36 L1348.43 1215.36 L1349.01 1215.36 L1349.6 1215.36 L1350.19 1215.36 L1350.77 1215.36 L1351.36 1215.36 L1351.95 1215.36 L1352.53 1215.36 L1353.12 1215.36 L1353.71 1215.36 L1354.29 1215.36 L1354.88 1215.36 L1355.47 1215.36 L1356.05 1215.36 L1356.64 1215.36 L1357.22 1215.36 L1357.81 1215.36 L1358.4 1215.36 L1358.98 1215.36 L1359.57 1215.36 L1360.16 1215.36 L1360.74 1215.36 L1361.33 1215.36 L1361.92 1215.36 L1362.5 1215.36 L1363.09 1215.36 L1363.68 1215.36 L1364.26 1215.36 L1364.85 1215.36 L1365.43 1215.36 L1366.02 1215.36 L1366.61 1215.36 L1367.19 1215.36 L1367.78 1215.36 L1368.37 1215.36 L1368.95 1215.36 L1369.54 1215.36 L1370.13 1215.36 L1370.71 1215.36 L1371.3 1215.36 L1371.88 1215.36 L1372.47 1215.36 L1373.06 1215.36 L1373.64 1215.36 L1374.23 1215.36 L1374.82 1215.36 L1375.4 1215.36 L1375.99 1215.36 L1376.58 1215.36 L1377.16 1215.36 L1377.75 1215.36 L1378.34 1215.36 L1378.92 1215.36 L1379.51 1215.36 L1380.09 1215.36 L1380.68 1215.36 L1381.27 1215.36 L1381.85 1215.36 L1382.44 1215.36 L1383.03 1215.36 L1383.61 1215.36 L1384.2 1215.36 L1384.79 1215.36 L1385.37 1215.36 L1385.96 1215.36 L1386.55 1215.36 L1387.13 1215.36 L1387.72 1215.36 L1388.3 1215.36 L1388.89 1215.36 L1389.48 1215.36 L1390.06 1215.36 L1390.65 1215.36 L1391.24 1215.36 L1391.82 1215.36 L1392.41 1215.36 L1393 1215.36 L1393.58 1215.36 L1394.17 1215.36 L1394.75 1215.36 L1395.34 1215.36 L1395.93 1215.36 L1396.51 1215.36 L1397.1 1215.36 L1397.69 1215.36 L1398.27 1215.36 L1398.86 1215.36 L1399.45 1215.36 L1400.03 1215.36 L1400.62 1215.36 L1401.21 1215.36 L1401.79 1215.36 L1402.38 1215.36 L1402.96 1215.36 L1403.55 1215.36 L1404.14 1215.36 L1404.72 1215.36 L1405.31 1215.36 L1405.9 1215.36 L1406.48 1215.36 L1407.07 1215.36 L1407.66 1215.36 L1408.24 1215.36 L1408.83 1215.36 L1409.42 1215.36 L1410 1215.36 L1410.59 1215.36 L1411.17 1215.36 L1411.76 1215.36 L1412.35 1215.36 L1412.93 1215.36 L1413.52 1215.36 L1414.11 1215.36 L1414.69 1215.36 L1415.28 1215.36 L1415.87 1215.36 L1416.45 1215.36 L1417.04 1215.36 L1417.63 1215.36 L1418.21 1215.36 L1418.8 1215.36 L1419.38 1215.36 L1419.97 1215.36 L1420.56 1215.36 L1421.14 1215.36 L1421.73 1215.36 L1422.32 1215.36 L1422.9 1215.36 L1423.49 1215.36 L1424.08 1215.36 L1424.66 1215.36 L1425.25 1215.36 L1425.83 1215.36 L1426.42 1215.36 L1427.01 1215.36 L1427.59 1215.36 L1428.18 1215.36 L1428.77 1215.36 L1429.35 1215.36 L1429.94 1215.36 L1430.53 1215.36 L1431.11 1215.36 L1431.7 1215.36 L1432.29 1215.36 L1432.87 1215.36 L1433.46 1215.36 L1434.04 1215.36 L1434.63 1215.36 L1435.22 1215.36 L1435.8 1215.36 L1436.39 1215.36 L1436.98 1215.36 L1437.56 1215.36 L1438.15 1215.36 L1438.74 1215.36 L1439.32 1215.36 L1439.91 1215.36 L1440.5 1215.36 L1441.08 1215.36 L1441.67 1215.36 L1442.25 1215.36 L1442.84 1215.36 L1443.43 1215.36 L1444.01 1215.36 L1444.6 1215.36 L1445.19 1215.36 L1445.77 1215.36 L1446.36 1215.36 L1446.95 1215.36 L1447.53 1215.36 L1448.12 1215.36 L1448.7 1215.36 L1449.29 1215.36 L1449.88 1215.36 L1450.46 1215.36 L1451.05 1215.36 L1451.64 1215.36 L1452.22 1215.36 L1452.81 1215.36 L1453.4 1215.36 L1453.98 1215.36 L1454.57 1215.36 L1455.16 1215.36 L1455.74 1215.36 L1456.33 1215.36 L1456.91 1215.36 L1457.5 1215.36 L1458.09 1215.36 L1458.67 1215.36 L1459.26 1215.36 L1459.85 1215.36 L1460.43 1215.36 L1461.02 1215.36 L1461.61 1215.36 L1462.19 1215.36 L1462.78 1215.36 L1463.37 1215.36 L1463.95 1215.36 L1464.54 1215.36 L1465.12 1215.36 L1465.71 1215.36 L1466.3 1215.36 L1466.88 1215.36 L1467.47 1215.36 L1468.06 1215.36 L1468.64 1215.36 L1469.23 1215.36 L1469.82 1215.36 L1470.4 1215.36 L1470.99 1215.36 L1471.57 1215.36 L1472.16 1215.36 L1472.75 1215.36 L1473.33 1215.36 L1473.92 1215.36 L1474.51 1215.36 L1475.09 1215.36 L1475.68 1215.36 L1476.27 1215.36 L1476.85 1215.36 L1477.44 1215.36 L1478.03 1215.36 L1478.61 1215.36 L1479.2 1215.36 L1479.78 1215.36 L1480.37 1215.36 L1480.96 1215.36 L1481.54 1215.36 L1482.13 1215.36 L1482.72 1215.36 L1483.3 1215.36 L1483.89 1215.36 L1484.48 1215.36 L1485.06 1215.36 L1485.65 1215.36 L1486.24 1215.36 L1486.82 1215.36 L1487.41 1215.36 L1487.99 1215.36 L1488.58 1215.36 L1489.17 1215.36 L1489.75 1215.36 L1490.34 1215.36 L1490.93 1215.36 L1491.51 1215.36 L1492.1 1215.36 L1492.69 1215.36 L1493.27 1215.36 L1493.86 1215.36 L1494.45 1215.36 L1495.03 1215.36 L1495.62 1215.36 L1496.2 1215.36 L1496.79 1215.36 L1497.38 1215.36 L1497.96 1215.36 L1498.55 1215.36 L1499.14 1215.36 L1499.72 1215.36 L1500.31 1215.36 L1500.9 1215.36 L1501.48 1215.36 L1502.07 1215.36 L1502.65 1215.36 L1503.24 1215.36 L1503.83 1215.36 L1504.41 1215.36 L1505 1215.36 L1505.59 1215.36 L1506.17 1215.36 L1506.76 1215.36 L1507.35 1215.36 L1507.93 1215.36 L1508.52 1215.36 L1509.11 1215.36 L1509.69 1215.36 L1510.28 1215.36 L1510.86 1215.36 L1511.45 1215.36 L1512.04 1215.36 L1512.62 1215.36 L1513.21 1215.36 L1513.8 1215.36 L1514.38 1215.36 L1514.97 1215.36 L1515.56 1215.36 L1516.14 1215.36 L1516.73 1215.36 L1517.32 1215.36 L1517.9 1215.36 L1518.49 1215.36 L1519.07 1215.36 L1519.66 1215.36 L1520.25 1215.36 L1520.83 1215.36 L1521.42 1215.36 L1522.01 1215.36 L1522.59 1215.36 L1523.18 1215.36 L1523.77 1215.36 L1524.35 1215.36 L1524.94 1215.36 L1525.52 1215.36 L1526.11 1215.36 L1526.7 1215.36 L1527.28 1215.36 L1527.87 1215.36 L1528.46 1215.36 L1529.04 1215.36 L1529.63 1215.36 L1530.22 1215.36 L1530.8 1215.36 L1531.39 1215.36 L1531.98 1215.36 L1532.56 1215.36 L1533.15 1215.36 L1533.73 1215.36 L1534.32 1215.36 L1534.91 1215.36 L1535.49 1215.36 L1536.08 1215.36 L1536.67 1215.36 L1537.25 1215.36 L1537.84 1215.36 L1538.43 1215.36 L1539.01 1215.36 L1539.6 1215.36 L1540.19 1215.36 L1540.77 1215.36 L1541.36 1215.36 L1541.94 1215.36 L1542.53 1215.36 L1543.12 1215.36 L1543.7 1215.36 L1544.29 1215.36 L1544.88 1215.36 L1545.46 1215.36 L1546.05 1215.36 L1546.64 1215.36 L1547.22 1215.36 L1547.81 1215.36 L1548.4 1215.36 L1548.98 1215.36 L1549.57 1215.36 L1550.15 1215.36 L1550.74 1215.36 L1551.33 1215.36 L1551.91 1215.36 L1552.5 1215.36 L1553.09 1215.36 L1553.67 1215.36 L1554.26 1215.36 L1554.85 1215.36 L1555.43 1215.36 L1556.02 1215.36 L1556.6 1215.36 L1557.19 1215.36 L1557.78 1215.36 L1558.36 1215.36 L1558.95 1215.36 L1559.54 1215.36 L1560.12 1215.36 L1560.71 1215.36 L1561.3 1215.36 L1561.88 1215.36 L1562.47 1215.36 L1563.06 1215.36 L1563.64 1215.36 L1564.23 1215.36 L1564.81 1215.36 L1565.4 1215.36 L1565.99 1215.36 L1566.57 1215.36 L1567.16 1215.36 L1567.75 1215.36 L1568.33 1215.36 L1568.92 1215.36 L1569.51 1215.36 L1570.09 1215.36 L1570.68 1215.36 L1571.27 1215.36 L1571.85 1215.36 L1572.44 1215.36 L1573.02 1215.36 L1573.61 1215.36 L1574.2 1215.36 L1574.78 1215.36 L1575.37 1215.36 L1575.96 1215.36 L1576.54 1215.36 L1577.13 1215.36 L1577.72 1215.36 L1578.3 1215.36 L1578.89 1215.36 L1579.47 1215.36 L1580.06 1215.36 L1580.65 1215.36 L1581.23 1215.36 L1581.82 1215.36 L1582.41 1215.36 L1582.99 1215.36 L1583.58 1215.36 L1584.17 1215.36 L1584.75 1215.36 L1585.34 1215.36 L1585.93 1215.36 L1586.51 1215.36 L1587.1 1215.36 L1587.68 1215.36 L1588.27 1215.36 L1588.86 1215.36 L1589.44 1215.36 L1590.03 1215.36 L1590.62 1215.36 L1591.2 1215.36 L1591.79 1215.36 L1592.38 1215.36 L1592.96 1215.36 L1593.55 1215.36 L1594.14 1215.36 L1594.72 1215.36 L1595.31 1215.36 L1595.89 1215.36 L1596.48 1215.36 L1597.07 1215.36 L1597.65 1215.36 L1598.24 1215.36 L1598.83 1215.36 L1599.41 1215.36 L1600 1215.36 L1600.59 1215.36 L1601.17 1215.36 L1601.76 1215.36 L1602.34 1215.36 L1602.93 1215.36 L1603.52 1215.36 L1604.1 1215.36 L1604.69 1215.36 L1605.28 1215.36 L1605.86 1215.36 L1606.45 1215.36 L1607.04 1215.36 L1607.62 1215.36 L1608.21 1215.36 L1608.8 1215.36 L1609.38 1215.36 L1609.97 1215.36 L1610.55 1215.36 L1611.14 1215.36 L1611.73 1215.36 L1612.31 1215.36 L1612.9 1215.36 L1613.49 1215.36 L1614.07 1215.36 L1614.66 1215.36 L1615.25 1215.36 L1615.83 1215.36 L1616.42 1215.36 L1617.01 1215.36 L1617.59 1215.36 L1618.18 1215.36 L1618.76 1215.36 L1619.35 1215.36 L1619.94 1215.36 L1620.52 1215.36 L1621.11 1215.36 L1621.7 1215.36 L1622.28 1215.36 L1622.87 1215.36 L1623.46 1215.36 L1624.04 1215.36 L1624.63 1215.36 L1625.22 1215.36 L1625.8 1215.36 L1626.39 1215.36 L1626.97 1215.36 L1627.56 1215.36 L1628.15 1215.36 L1628.73 1215.36 L1629.32 1215.36 L1629.91 1215.36 L1630.49 1215.36 L1631.08 1215.36 L1631.67 1215.36 L1632.25 1215.36 L1632.84 1215.36 L1633.42 1215.36 L1634.01 1215.36 L1634.6 1215.36 L1635.18 1215.36 L1635.77 1215.36 L1636.36 1215.36 L1636.94 1215.36 L1637.53 1215.36 L1638.12 1215.36 L1638.7 1215.36 L1639.29 1215.36 L1639.88 1215.36 L1640.46 1215.36 L1641.05 1215.36 L1641.63 1215.36 L1642.22 1215.36 L1642.81 1215.36 L1643.39 1215.36 L1643.98 1215.36 L1644.57 1215.36 L1645.15 1215.36 L1645.74 1215.36 L1646.33 1215.36 L1646.91 1215.36 L1647.5 1215.36 L1648.09 1215.36 L1648.67 1215.36 L1649.26 1215.36 L1649.84 1215.36 L1650.43 1215.36 L1651.02 1215.36 L1651.6 1215.36 L1652.19 1215.36 L1652.78 1215.36 L1653.36 1215.36 L1653.95 1215.36 L1654.54 1215.36 L1655.12 1215.36 L1655.71 1215.36 L1656.29 1215.36 L1656.88 1215.36 L1657.47 1215.36 L1658.05 1215.36 L1658.64 1215.36 L1659.23 1215.36 L1659.81 1215.36 L1660.4 1215.36 L1660.99 1215.36 L1661.57 1215.36 L1662.16 1215.36 L1662.75 1215.36 L1663.33 1215.36 L1663.92 1215.36 L1664.5 1215.36 L1665.09 1215.36 L1665.68 1215.36 L1666.26 1215.36 L1666.85 1215.36 L1667.44 1215.36 L1668.02 1215.36 L1668.61 1215.36 L1669.2 1215.36 L1669.78 1215.36 L1670.37 1215.36 L1670.96 1215.36 L1671.54 1215.36 L1672.13 1215.36 L1672.71 1215.36 L1673.3 1215.36 L1673.89 1215.36 L1674.47 1215.36 L1675.06 1215.36 L1675.65 1215.36 L1676.23 1215.36 L1676.82 1215.36 L1677.41 1215.36 L1677.99 1215.36 L1678.58 1215.36 L1679.17 1215.36 L1679.75 1215.36 L1680.34 1215.36 L1680.92 1215.36 L1681.51 1215.36 L1682.1 1215.36 L1682.68 1215.36 L1683.27 1215.36 L1683.86 1215.36 L1684.44 1215.36 L1685.03 1215.36 L1685.62 1215.36 L1686.2 1215.36 L1686.79 1215.36 L1687.37 1215.36 L1687.96 1215.36 L1688.55 1215.36 L1689.13 1215.36 L1689.72 1215.36 L1690.31 1215.36 L1690.89 1215.36 L1691.48 1215.36 L1692.07 1215.36 L1692.65 1215.36 L1693.24 1215.36 L1693.83 1215.36 L1694.41 1215.36 L1695 1215.36 L1695.58 1215.36 L1696.17 1215.36 L1696.76 1215.36 L1697.34 1215.36 L1697.93 1215.36 L1698.52 1215.36 L1699.1 1215.36 L1699.69 1215.36 L1700.28 1215.36 L1700.86 1215.36 L1701.45 1215.36 L1702.04 1215.36 L1702.62 1215.36 L1703.21 1215.36 L1703.79 1215.36 L1704.38 1215.36 L1704.97 1215.36 L1705.55 1215.36 L1706.14 1215.36 L1706.73 1215.36 L1707.31 1215.36 L1707.9 1215.36 L1708.49 1215.36 L1709.07 1215.36 L1709.66 1215.36 L1710.24 1215.36 L1710.83 1215.36 L1711.42 1215.36 L1712 1215.36 L1712.59 1215.36 L1713.18 1215.36 L1713.76 1215.36 L1714.35 1215.36 L1714.94 1215.36 L1715.52 1215.36 L1716.11 1215.36 L1716.7 1215.36 L1717.28 1215.36 L1717.87 1215.36 L1718.45 1215.36 L1719.04 1215.36 L1719.63 1215.36 L1720.21 1215.36 L1720.8 1215.36 L1721.39 1215.36 L1721.97 1215.36 L1722.56 1215.36 L1723.15 1215.36 L1723.73 1215.36 L1724.32 1215.36 L1724.91 1215.36 L1725.49 1215.36 L1726.08 1215.36 L1726.66 1215.36 L1727.25 1215.36 L1727.84 1215.36 L1728.42 1215.36 L1729.01 1215.36 L1729.6 1215.36 L1730.18 1215.36 L1730.77 1215.36 L1731.36 1215.36 L1731.94 1215.36 L1732.53 1215.36 L1733.11 1215.36 L1733.7 1215.36 L1734.29 1215.36 L1734.87 1215.36 L1735.46 1215.36 L1736.05 1215.36 L1736.63 1215.36 L1737.22 1215.36 L1737.81 1215.36 L1738.39 1215.36 L1738.98 1215.36 L1739.57 1215.36 L1740.15 1215.36 L1740.74 1215.36 L1741.32 1215.36 L1741.91 1215.36 L1742.5 1215.36 L1743.08 1215.36 L1743.67 1215.36 L1744.26 1215.36 L1744.84 1215.36 L1745.43 1215.36 L1746.02 1215.36 L1746.6 1215.36 L1747.19 1215.36 L1747.78 1215.36 L1748.36 1215.36 L1748.95 1215.36 L1749.53 1215.36 L1750.12 1215.36 L1750.71 1215.36 L1751.29 1215.36 L1751.88 1215.36 L1752.47 1215.36 L1753.05 1215.36 L1753.64 1215.36 L1754.23 1215.36 L1754.81 1215.36 L1755.4 1215.36 L1755.99 1215.36 L1756.57 1215.36 L1757.16 1215.36 L1757.74 1215.36 L1758.33 1215.36 L1758.92 1215.36 L1759.5 1215.36 L1760.09 1215.36 L1760.68 1215.36 L1761.26 1215.36 L1761.85 1215.36 L1762.44 1215.36 L1763.02 1215.36 L1763.61 1215.36 L1764.19 1215.36 L1764.78 1215.36 L1765.37 1215.36 L1765.95 1215.36 L1766.54 1215.36 L1767.13 1215.36 L1767.71 1215.36 L1768.3 1215.36 L1768.89 1215.36 L1769.47 1215.36 L1770.06 1215.36 L1770.65 1215.36 L1771.23 1215.36 L1771.82 1215.36 L1772.4 1215.36 L1772.99 1215.36 L1773.58 1215.36 L1774.16 1215.36 L1774.75 1215.36 L1775.34 1215.36 L1775.92 1215.36 L1776.51 1215.36 L1777.1 1215.36 L1777.68 1215.36 L1778.27 1215.36 L1778.86 1215.36 L1779.44 1215.36 L1780.03 1215.36 L1780.61 1215.36 L1781.2 1215.36 L1781.79 1215.36 L1782.37 1215.36 L1782.96 1215.36 L1783.55 1215.36 L1784.13 1215.36 L1784.72 1215.36 L1785.31 1215.36 L1785.89 1215.36 L1786.48 1215.36 L1787.06 1215.36 L1787.65 1215.36 L1788.24 1215.36 L1788.82 1215.36 L1789.41 1215.36 L1790 1215.36 L1790.58 1215.36 L1791.17 1215.36 L1791.76 1215.36 L1792.34 1215.36 L1792.93 1215.36 L1793.52 1215.36 L1794.1 1215.36 L1794.69 1215.36 L1795.27 1215.36 L1795.86 1215.36 L1796.45 1215.36 L1797.03 1215.36 L1797.62 1215.36 L1798.21 1215.36 L1798.79 1215.36 L1799.38 1215.36 L1799.97 1215.36 L1800.55 1215.36 L1801.14 1215.36 L1801.73 1215.36 L1802.31 1215.36 L1802.9 1215.36 L1803.48 1215.36 L1804.07 1215.36 L1804.66 1215.36 L1805.24 1215.36 L1805.83 1215.36 L1806.42 1215.36 L1807 1215.36 L1807.59 1215.36 L1808.18 1215.36 L1808.76 1215.36 L1809.35 1215.36 L1809.94 1215.36 L1810.52 1215.36 L1811.11 1215.36 L1811.69 1215.36 L1812.28 1215.36 L1812.87 1215.36 L1813.45 1215.36 L1814.04 1215.36 L1814.63 1215.36 L1815.21 1215.36 L1815.8 1215.36 L1816.39 1215.36 L1816.97 1215.36 L1817.56 1215.36 L1818.14 1215.36 L1818.73 1215.36 L1819.32 1215.36 L1819.9 1215.36 L1820.49 1215.36 L1821.08 1215.36 L1821.66 1215.36 L1822.25 1215.36 L1822.84 1215.36 L1823.42 1215.36 L1824.01 1215.36 L1824.6 1215.36 L1825.18 1215.36 L1825.77 1215.36 L1826.35 1215.36 L1826.94 1215.36 L1827.53 1215.36 L1828.11 1215.36 L1828.7 1215.36 L1829.29 1215.36 L1829.87 1215.36 L1830.46 1215.36 L1831.05 1215.36 L1831.63 1215.36 L1832.22 1215.36 L1832.81 1215.36 L1833.39 1215.36 L1833.98 1215.36 L1834.56 1215.36 L1835.15 1215.36 L1835.74 1215.36 L1836.32 1215.36 L1836.91 1215.36 L1837.5 1215.36 L1838.08 1215.36 L1838.67 1215.36 L1839.26 1215.36 L1839.84 1215.36 L1840.43 1215.36 L1841.01 1215.36 L1841.6 1215.36 L1842.19 1215.36 L1842.77 1215.36 L1843.36 1215.36 L1843.95 1215.36 L1844.53 1215.36 L1845.12 1215.36 L1845.71 1215.36 L1846.29 1215.36 L1846.88 1215.36 L1847.47 1215.36 L1848.05 1215.36 L1848.64 1215.36 L1849.22 1215.36 L1849.81 1215.36 L1850.4 1215.36 L1850.98 1215.36 L1851.57 1215.36 L1852.16 1215.36 L1852.74 1215.36 L1853.33 1215.36 L1853.92 1215.36 L1854.5 1215.36 L1855.09 1215.36 L1855.68 1215.36 L1856.26 1215.36 L1856.85 1215.36 L1857.43 1215.36 L1858.02 1215.36 L1858.61 1215.36 L1859.19 1215.36 L1859.78 1215.36 L1860.37 1215.36 L1860.95 1215.36 L1861.54 1215.36 L1862.13 1215.36 L1862.71 1215.36 L1863.3 1215.36 L1863.88 1215.36 L1864.47 1215.36 L1865.06 1215.36 L1865.64 1215.36 L1866.23 1215.36 L1866.82 1215.36 L1867.4 1215.36 L1867.99 1215.36 L1868.58 1215.36 L1869.16 1215.36 L1869.75 1215.36 L1870.34 1215.36 L1870.92 1215.36 L1871.51 1215.36 L1872.09 1215.36 L1872.68 1215.36 L1873.27 1215.36 L1873.85 1215.36 L1874.44 1215.36 L1875.03 1215.36 L1875.61 1215.36 L1876.2 1215.36 L1876.79 1215.36 L1877.37 1215.36 L1877.96 1215.36 L1878.55 1215.36 L1879.13 1215.36 L1879.72 1215.36 L1880.3 1215.36 L1880.89 1215.36 L1881.48 1215.36 L1882.06 1215.36 L1882.65 1215.36 L1883.24 1215.36 L1883.82 1215.36 L1884.41 1215.36 L1885 1215.36 L1885.58 1215.36 L1886.17 1215.36 L1886.76 1215.36 L1887.34 1215.36 L1887.93 1215.36 L1888.51 1215.36 L1889.1 1215.36 L1889.69 1215.36 L1890.27 1215.36 L1890.86 1215.36 L1891.45 1215.36 L1892.03 1215.36 L1892.62 1215.36 L1893.21 1215.36 L1893.79 1215.36 L1894.38 1215.36 L1894.96 1215.36 L1895.55 1215.36 L1896.14 1215.36 L1896.72 1215.36 L1897.31 1215.36 L1897.9 1215.36 L1898.48 1215.36 L1899.07 1215.36 L1899.66 1215.36 L1900.24 1215.36 L1900.83 1215.36 L1901.42 1215.36 L1902 1215.36 L1902.59 1215.36 L1903.17 1215.36 L1903.76 1215.36 L1904.35 1215.36 L1904.93 1215.36 L1905.52 1215.36 L1906.11 1215.36 L1906.69 1215.36 L1907.28 1215.36 L1907.87 1215.36 L1908.45 1215.36 L1909.04 1215.36 L1909.63 1215.36 L1910.21 1215.36 L1910.8 1215.36 L1911.38 1215.36 L1911.97 1215.36 L1912.56 1215.36 L1913.14 1215.36 L1913.73 1215.36 L1914.32 1215.36 L1914.9 1215.36 L1915.49 1215.36 L1916.08 1215.36 L1916.66 1215.36 L1917.25 1215.36 L1917.83 1215.36 L1918.42 1215.36 L1919.01 1215.36 L1919.59 1215.36 L1920.18 1215.36 L1920.77 1215.36 L1921.35 1215.36 L1921.94 1215.36 L1922.53 1215.36 L1923.11 1215.36 L1923.7 1215.36 L1924.29 1215.36 L1924.87 1215.36 L1925.46 1215.36 L1926.04 1215.36 L1926.63 1215.36 L1927.22 1215.36 L1927.8 1215.36 L1928.39 1215.36 L1928.98 1215.36 L1929.56 1215.36 L1930.15 1215.36 L1930.74 1215.36 L1931.32 1215.36 L1931.91 1215.36 L1932.5 1215.36 L1933.08 1215.36 L1933.67 1215.36 L1934.25 1215.36 L1934.84 1215.36 L1935.43 1215.36 L1936.01 1215.36 L1936.6 1215.36 L1937.19 1215.36 L1937.77 1215.36 L1938.36 1215.36 L1938.95 1215.36 L1939.53 1215.36 L1940.12 1215.36 L1940.71 1215.36 L1941.29 1215.36 L1941.88 1215.36 L1942.46 1215.36 L1943.05 1215.36 L1943.64 1215.36 L1944.22 1215.36 L1944.81 1215.36 L1945.4 1215.36 L1945.98 1215.36 L1946.57 1215.36 L1947.16 1215.36 L1947.74 1215.36 L1948.33 1215.36 L1948.91 1215.36 L1949.5 1215.36 L1950.09 1215.36 L1950.67 1215.36 L1951.26 1215.36 L1951.85 1215.36 L1952.43 1215.36 L1953.02 1215.36 L1953.61 1215.36 L1954.19 1215.36 L1954.78 1215.36 L1955.37 1215.36 L1955.95 1215.36 L1956.54 1215.36 L1957.12 1215.36 L1957.71 1215.36 L1958.3 1215.36 L1958.88 1215.36 L1959.47 1215.36 L1960.06 1215.36 L1960.64 1215.36 L1961.23 1215.36 L1961.82 1215.36 L1962.4 1215.36 L1962.99 1215.36 L1963.58 1215.36 L1964.16 1215.36 L1964.75 1215.36 L1965.33 1215.36 L1965.92 1215.36 L1966.51 1215.36 L1967.09 1215.36 L1967.68 1215.36 L1968.27 1215.36 L1968.85 1215.36 L1969.44 1215.36 L1970.03 1215.36 L1970.61 1215.36 L1971.2 1215.36 L1971.78 1215.36 L1972.37 1215.36 L1972.96 1215.36 L1973.54 1215.36 L1974.13 1215.36 L1974.72 1215.36 L1975.3 1215.36 L1975.89 1215.36 L1976.48 1215.36 L1977.06 1215.36 L1977.65 1215.36 L1978.24 1215.36 L1978.82 1215.36 L1979.41 1215.36 L1979.99 1215.36 L1980.58 1215.36 L1981.17 1215.36 L1981.75 1215.36 L1982.34 1215.36 L1982.93 1215.36 L1983.51 1215.36 L1984.1 1215.36 L1984.69 1215.36 L1985.27 1215.36 L1985.86 1215.36 L1986.45 1215.36 L1987.03 1215.36 L1987.62 1215.36 L1988.2 1215.36 L1988.79 1215.36 L1989.38 1215.36 L1989.96 1215.36 L1990.55 1215.36 L1991.14 1215.36 L1991.72 1215.36 L1992.31 1215.36 L1992.9 1215.36 L1993.48 1215.36 L1994.07 1215.36 L1994.65 1215.36 L1995.24 1215.36 L1995.83 1215.36 L1996.41 1215.36 L1997 1215.36 L1997.59 1215.36 L1998.17 1215.36 L1998.76 1215.36 L1999.35 1215.36 L1999.93 1215.36 L2000.52 1215.36 L2001.11 1215.36 L2001.69 1215.36 L2002.28 1215.36 L2002.86 1215.36 L2003.45 1215.36 L2004.04 1215.36 L2004.62 1215.36 L2005.21 1215.36 L2005.8 1215.36 L2006.38 1215.36 L2006.97 1215.36 L2007.56 1215.36 L2008.14 1215.36 L2008.73 1215.36 L2009.32 1215.36 L2009.9 1215.36 L2010.49 1215.36 L2011.07 1215.36 L2011.66 1215.36 L2012.25 1215.36 L2012.83 1215.36 L2013.42 1215.36 L2014.01 1215.36 L2014.59 1215.36 L2015.18 1215.36 L2015.77 1215.36 L2016.35 1215.36 L2016.94 1215.36 L2017.53 1215.36 L2018.11 1215.36 L2018.7 1215.36 L2019.28 1215.36 L2019.87 1215.36 L2020.46 1215.36 L2021.04 1215.36 L2021.63 1215.36 L2022.22 1215.36 L2022.8 1215.36 L2023.39 1215.36 L2023.98 1215.36 L2024.56 1215.36 L2025.15 1215.36 L2025.73 1215.36 L2026.32 1215.36 L2026.91 1215.36 L2027.49 1215.36 L2028.08 1215.36 L2028.67 1215.36 L2029.25 1215.36 L2029.84 1215.36 L2030.43 1215.36 L2031.01 1215.36 L2031.6 1215.36 L2032.19 1215.36 L2032.77 1215.36 L2033.36 1215.36 L2033.94 1215.36 L2034.53 1215.36 L2035.12 1215.36 L2035.7 1215.36 L2036.29 1215.36 L2036.88 1215.36 L2037.46 1215.36 L2038.05 1215.36 L2038.64 1215.36 L2039.22 1215.36 L2039.81 1215.36 L2040.4 1215.36 L2040.98 1215.36 L2041.57 1215.36 L2042.15 1215.36 L2042.74 1215.36 L2043.33 1215.36 L2043.91 1215.36 L2044.5 1215.36 L2045.09 1215.36 L2045.67 1215.36 L2046.26 1215.36 L2046.85 1215.36 L2047.43 1215.36 L2048.02 1215.36 L2048.6 1215.36 L2049.19 1215.36 L2049.78 1215.36 L2050.36 1215.36 L2050.95 1215.36 L2051.54 1215.36 L2052.12 1215.36 L2052.71 1215.36 L2053.3 1215.36 L2053.88 1215.36 L2054.47 1215.36 L2055.06 1215.36 L2055.64 1215.36 L2056.23 1215.36 L2056.81 1215.36 L2057.4 1215.36 L2057.99 1215.36 L2058.57 1215.36 L2059.16 1215.36 L2059.75 1215.36 L2060.33 1215.36 L2060.92 1215.36 L2061.51 1215.36 L2062.09 1215.36 L2062.68 1215.36 L2063.27 1215.36 L2063.85 1215.36 L2064.44 1215.36 L2065.02 1215.36 L2065.61 1215.36 L2066.2 1215.36 L2066.78 1215.36 L2067.37 1215.36 L2067.96 1215.36 L2068.54 1215.36 L2069.13 1215.36 L2069.72 1215.36 L2070.3 1215.36 L2070.89 1215.36 L2071.48 1215.36 L2072.06 1215.36 L2072.65 1215.36 L2073.23 1215.36 L2073.82 1215.36 L2074.41 1215.36 L2074.99 1215.36 L2075.58 1215.36 L2076.17 1215.36 L2076.75 1215.36 L2077.34 1215.36 L2077.93 1215.36 L2078.51 1215.36 L2079.1 1215.36 L2079.68 1215.36 L2080.27 1215.36 L2080.86 1215.36 L2081.44 1215.36 L2082.03 1215.36 L2082.62 1215.36 L2083.2 1215.36 L2083.79 1215.36 L2084.38 1215.36 L2084.96 1215.36 L2085.55 1215.36 L2086.14 1215.36 L2086.72 1215.36 L2087.31 1215.36 L2087.89 1215.36 L2088.48 1215.36 L2089.07 1215.36 L2089.65 1215.36 L2090.24 1215.36 L2090.83 1215.36 L2091.41 1215.36 L2092 1215.36 L2092.59 1215.36 L2093.17 1215.36 L2093.76 1215.36 L2094.35 1215.36 L2094.93 1215.36 L2095.52 1215.36 L2096.1 1215.36 L2096.69 1215.36 L2097.28 1215.36 L2097.86 1215.36 L2098.45 1215.36 L2099.04 1215.36 L2099.62 1215.36 L2100.21 1215.36 L2100.8 1215.36 L2101.38 1215.36 L2101.97 1215.36 L2102.55 1215.36 L2103.14 1215.36 L2103.73 1215.36 L2104.31 1215.36 L2104.9 1215.36 L2105.49 1215.36 L2106.07 1215.36 L2106.66 1215.36 L2107.25 1215.36 L2107.83 1215.36 L2108.42 1215.36 L2109.01 1215.36 L2109.59 1215.36 L2110.18 1215.36 L2110.76 1215.36 L2111.35 1215.36 L2111.94 1215.36 L2112.52 1215.36 L2113.11 1215.36 L2113.7 1215.36 L2114.28 1215.36 L2114.87 1215.36 L2115.46 1215.36 L2116.04 1215.36 L2116.63 1215.36 L2117.22 1215.36 L2117.8 1215.36 L2118.39 1215.36 L2118.97 1215.36 L2119.56 1215.36 L2120.15 1215.36 L2120.73 1215.36 L2121.32 1215.36 L2121.91 1215.36 L2122.49 1215.36 L2123.08 1215.36 L2123.67 1215.36 L2124.25 1215.36 L2124.84 1215.36 L2125.42 1215.36 L2126.01 1215.36 L2126.6 1215.36 L2127.18 1215.36 L2127.77 1215.36 L2128.36 1215.36 L2128.94 1215.36 L2129.53 1215.36 L2130.12 1215.36 L2130.7 1215.36 L2131.29 1215.36 L2131.88 1215.36 L2132.46 1215.36 L2133.05 1215.36 L2133.63 1215.36 L2134.22 1215.36 L2134.81 1215.36 L2135.39 1215.36 L2135.98 1215.36 L2136.57 1215.36 L2137.15 1215.36 L2137.74 1215.36 L2138.33 1215.36 L2138.91 1215.36 L2139.5 1215.36 L2140.09 1215.36 L2140.67 1215.36 L2141.26 1215.36 L2141.84 1215.36 L2142.43 1215.36 L2143.02 1215.36 L2143.6 1215.36 L2144.19 1215.36 L2144.78 1215.36 L2145.36 1215.36 L2145.95 1215.36 L2146.54 1215.36 L2147.12 1215.36 L2147.71 1215.36 L2148.3 1215.36 L2148.88 1215.36 L2149.47 1215.36 L2150.05 1215.36 L2150.64 1215.36 L2151.23 1215.36 L2151.81 1215.36 L2152.4 1215.36 L2152.99 1215.36 L2153.57 1215.36 L2154.16 1215.36 L2154.75 1215.36 L2155.33 1215.36 L2155.92 1215.36 L2156.5 1215.36 L2157.09 1215.36 L2157.68 1215.36 L2158.26 1215.36 L2158.26 1215.17 L2157.68 1215.17 L2157.09 1215.17 L2156.5 1215.17 L2155.92 1215.17 L2155.33 1215.17 L2154.75 1215.17 L2154.16 1215.17 L2153.57 1215.17 L2152.99 1215.17 L2152.4 1215.17 L2151.81 1215.17 L2151.23 1215.17 L2150.64 1215.17 L2150.05 1215.17 L2149.47 1215.17 L2148.88 1215.17 L2148.3 1215.17 L2147.71 1215.17 L2147.12 1215.17 L2146.54 1215.17 L2145.95 1215.17 L2145.36 1215.17 L2144.78 1215.17 L2144.19 1215.17 L2143.6 1215.17 L2143.02 1215.17 L2142.43 1215.17 L2141.84 1215.17 L2141.26 1215.17 L2140.67 1215.17 L2140.09 1215.17 L2139.5 1215.17 L2138.91 1215.17 L2138.33 1215.17 L2137.74 1215.17 L2137.15 1215.17 L2136.57 1215.17 L2135.98 1215.17 L2135.39 1215.17 L2134.81 1215.17 L2134.22 1215.17 L2133.63 1215.17 L2133.05 1215.17 L2132.46 1215.17 L2131.88 1215.17 L2131.29 1215.17 L2130.7 1215.17 L2130.12 1215.17 L2129.53 1215.17 L2128.94 1215.17 L2128.36 1215.17 L2127.77 1215.17 L2127.18 1215.17 L2126.6 1215.17 L2126.01 1215.17 L2125.42 1215.17 L2124.84 1215.17 L2124.25 1215.17 L2123.67 1215.17 L2123.08 1215.17 L2122.49 1215.17 L2121.91 1215.17 L2121.32 1215.17 L2120.73 1215.17 L2120.15 1215.17 L2119.56 1215.17 L2118.97 1215.17 L2118.39 1215.17 L2117.8 1215.17 L2117.22 1215.17 L2116.63 1215.17 L2116.04 1215.17 L2115.46 1215.17 L2114.87 1215.17 L2114.28 1215.17 L2113.7 1215.17 L2113.11 1215.17 L2112.52 1215.17 L2111.94 1215.17 L2111.35 1215.17 L2110.76 1215.17 L2110.18 1215.17 L2109.59 1215.17 L2109.01 1215.17 L2108.42 1215.17 L2107.83 1215.17 L2107.25 1215.17 L2106.66 1215.17 L2106.07 1215.17 L2105.49 1215.17 L2104.9 1215.17 L2104.31 1215.17 L2103.73 1215.17 L2103.14 1215.17 L2102.55 1215.17 L2101.97 1215.17 L2101.38 1215.17 L2100.8 1215.17 L2100.21 1215.17 L2099.62 1215.17 L2099.04 1215.17 L2098.45 1215.17 L2097.86 1215.17 L2097.28 1215.17 L2096.69 1215.17 L2096.1 1215.17 L2095.52 1215.17 L2094.93 1215.17 L2094.35 1215.17 L2093.76 1215.17 L2093.17 1215.17 L2092.59 1215.17 L2092 1215.17 L2091.41 1215.17 L2090.83 1215.17 L2090.24 1215.17 L2089.65 1215.17 L2089.07 1215.17 L2088.48 1215.17 L2087.89 1215.17 L2087.31 1215.17 L2086.72 1215.17 L2086.14 1215.17 L2085.55 1215.17 L2084.96 1215.17 L2084.38 1215.17 L2083.79 1215.17 L2083.2 1215.17 L2082.62 1215.17 L2082.03 1215.17 L2081.44 1215.17 L2080.86 1215.17 L2080.27 1215.17 L2079.68 1215.17 L2079.1 1215.17 L2078.51 1215.17 L2077.93 1215.17 L2077.34 1215.17 L2076.75 1215.17 L2076.17 1215.17 L2075.58 1215.17 L2074.99 1215.17 L2074.41 1215.17 L2073.82 1215.17 L2073.23 1215.17 L2072.65 1215.17 L2072.06 1215.17 L2071.48 1215.17 L2070.89 1215.17 L2070.3 1215.17 L2069.72 1215.17 L2069.13 1215.17 L2068.54 1215.17 L2067.96 1215.17 L2067.37 1215.17 L2066.78 1215.17 L2066.2 1215.17 L2065.61 1215.17 L2065.02 1215.17 L2064.44 1215.17 L2063.85 1215.17 L2063.27 1215.17 L2062.68 1215.17 L2062.09 1215.17 L2061.51 1215.17 L2060.92 1215.17 L2060.33 1215.17 L2059.75 1215.17 L2059.16 1215.17 L2058.57 1215.17 L2057.99 1215.17 L2057.4 1215.17 L2056.81 1215.17 L2056.23 1215.17 L2055.64 1215.17 L2055.06 1215.17 L2054.47 1215.17 L2053.88 1215.17 L2053.3 1215.17 L2052.71 1215.17 L2052.12 1215.17 L2051.54 1215.17 L2050.95 1215.17 L2050.36 1215.17 L2049.78 1215.17 L2049.19 1215.17 L2048.6 1215.17 L2048.02 1215.17 L2047.43 1215.17 L2046.85 1215.17 L2046.26 1215.17 L2045.67 1215.17 L2045.09 1215.17 L2044.5 1215.17 L2043.91 1215.17 L2043.33 1215.17 L2042.74 1215.17 L2042.15 1215.17 L2041.57 1215.17 L2040.98 1215.17 L2040.4 1215.17 L2039.81 1215.17 L2039.22 1215.17 L2038.64 1215.17 L2038.05 1215.17 L2037.46 1215.17 L2036.88 1215.17 L2036.29 1215.17 L2035.7 1215.17 L2035.12 1215.17 L2034.53 1215.17 L2033.94 1215.17 L2033.36 1215.17 L2032.77 1215.17 L2032.19 1215.17 L2031.6 1215.17 L2031.01 1215.17 L2030.43 1215.17 L2029.84 1215.17 L2029.25 1215.17 L2028.67 1215.17 L2028.08 1215.17 L2027.49 1215.17 L2026.91 1215.17 L2026.32 1215.17 L2025.73 1215.17 L2025.15 1215.17 L2024.56 1215.17 L2023.98 1215.17 L2023.39 1215.17 L2022.8 1215.17 L2022.22 1215.17 L2021.63 1215.17 L2021.04 1215.17 L2020.46 1215.17 L2019.87 1215.17 L2019.28 1215.17 L2018.7 1215.17 L2018.11 1215.17 L2017.53 1215.17 L2016.94 1215.17 L2016.35 1215.17 L2015.77 1215.17 L2015.18 1215.17 L2014.59 1215.17 L2014.01 1215.17 L2013.42 1215.17 L2012.83 1215.17 L2012.25 1215.17 L2011.66 1215.17 L2011.07 1215.17 L2010.49 1215.17 L2009.9 1215.17 L2009.32 1215.17 L2008.73 1215.17 L2008.14 1215.17 L2007.56 1215.17 L2006.97 1215.17 L2006.38 1215.17 L2005.8 1215.17 L2005.21 1215.17 L2004.62 1215.17 L2004.04 1215.17 L2003.45 1215.17 L2002.86 1215.17 L2002.28 1215.17 L2001.69 1215.17 L2001.11 1215.17 L2000.52 1215.17 L1999.93 1215.17 L1999.35 1215.17 L1998.76 1215.17 L1998.17 1215.17 L1997.59 1215.17 L1997 1215.17 L1996.41 1215.17 L1995.83 1215.17 L1995.24 1215.17 L1994.65 1215.17 L1994.07 1215.17 L1993.48 1215.17 L1992.9 1215.17 L1992.31 1215.17 L1991.72 1215.17 L1991.14 1215.17 L1990.55 1215.17 L1989.96 1215.17 L1989.38 1215.17 L1988.79 1215.17 L1988.2 1215.17 L1987.62 1215.17 L1987.03 1215.17 L1986.45 1215.17 L1985.86 1215.17 L1985.27 1215.17 L1984.69 1215.17 L1984.1 1215.17 L1983.51 1215.17 L1982.93 1215.17 L1982.34 1215.17 L1981.75 1215.17 L1981.17 1215.17 L1980.58 1215.17 L1979.99 1215.17 L1979.41 1215.17 L1978.82 1215.17 L1978.24 1215.17 L1977.65 1215.17 L1977.06 1215.17 L1976.48 1215.17 L1975.89 1215.17 L1975.3 1215.17 L1974.72 1215.17 L1974.13 1215.17 L1973.54 1215.17 L1972.96 1215.17 L1972.37 1215.17 L1971.78 1215.17 L1971.2 1215.17 L1970.61 1215.17 L1970.03 1215.17 L1969.44 1215.17 L1968.85 1215.17 L1968.27 1215.17 L1967.68 1215.17 L1967.09 1215.17 L1966.51 1215.17 L1965.92 1215.17 L1965.33 1215.17 L1964.75 1215.17 L1964.16 1215.17 L1963.58 1215.17 L1962.99 1215.17 L1962.4 1215.17 L1961.82 1215.17 L1961.23 1215.17 L1960.64 1215.17 L1960.06 1215.17 L1959.47 1215.17 L1958.88 1215.17 L1958.3 1215.17 L1957.71 1215.17 L1957.12 1215.17 L1956.54 1215.17 L1955.95 1215.17 L1955.37 1215.17 L1954.78 1215.17 L1954.19 1215.17 L1953.61 1215.17 L1953.02 1215.17 L1952.43 1215.17 L1951.85 1215.17 L1951.26 1215.17 L1950.67 1215.17 L1950.09 1215.17 L1949.5 1215.17 L1948.91 1215.17 L1948.33 1215.17 L1947.74 1215.17 L1947.16 1215.17 L1946.57 1215.17 L1945.98 1215.17 L1945.4 1215.17 L1944.81 1215.17 L1944.22 1215.17 L1943.64 1215.17 L1943.05 1215.17 L1942.46 1215.17 L1941.88 1215.17 L1941.29 1215.17 L1940.71 1215.17 L1940.12 1215.17 L1939.53 1215.17 L1938.95 1215.17 L1938.36 1215.17 L1937.77 1215.17 L1937.19 1215.17 L1936.6 1215.17 L1936.01 1215.17 L1935.43 1215.17 L1934.84 1215.17 L1934.25 1215.17 L1933.67 1215.17 L1933.08 1215.17 L1932.5 1215.17 L1931.91 1215.17 L1931.32 1215.17 L1930.74 1215.17 L1930.15 1215.17 L1929.56 1215.17 L1928.98 1215.17 L1928.39 1215.17 L1927.8 1215.17 L1927.22 1215.17 L1926.63 1215.17 L1926.04 1215.17 L1925.46 1215.17 L1924.87 1215.17 L1924.29 1215.17 L1923.7 1215.17 L1923.11 1215.17 L1922.53 1215.17 L1921.94 1215.17 L1921.35 1215.17 L1920.77 1215.17 L1920.18 1215.17 L1919.59 1215.17 L1919.01 1215.17 L1918.42 1215.17 L1917.83 1215.17 L1917.25 1215.17 L1916.66 1215.17 L1916.08 1215.17 L1915.49 1215.17 L1914.9 1215.17 L1914.32 1215.17 L1913.73 1215.17 L1913.14 1215.17 L1912.56 1215.17 L1911.97 1215.17 L1911.38 1215.17 L1910.8 1215.17 L1910.21 1215.17 L1909.63 1215.17 L1909.04 1215.17 L1908.45 1215.17 L1907.87 1215.17 L1907.28 1215.17 L1906.69 1215.17 L1906.11 1215.17 L1905.52 1215.17 L1904.93 1215.17 L1904.35 1215.17 L1903.76 1215.17 L1903.17 1215.17 L1902.59 1215.17 L1902 1215.17 L1901.42 1215.17 L1900.83 1215.17 L1900.24 1215.17 L1899.66 1215.17 L1899.07 1215.17 L1898.48 1215.17 L1897.9 1215.17 L1897.31 1215.17 L1896.72 1215.17 L1896.14 1215.17 L1895.55 1215.17 L1894.96 1215.17 L1894.38 1215.17 L1893.79 1215.17 L1893.21 1215.17 L1892.62 1215.17 L1892.03 1215.17 L1891.45 1215.17 L1890.86 1215.17 L1890.27 1215.17 L1889.69 1215.17 L1889.1 1215.17 L1888.51 1215.17 L1887.93 1215.17 L1887.34 1215.17 L1886.76 1215.17 L1886.17 1215.17 L1885.58 1215.17 L1885 1215.17 L1884.41 1215.17 L1883.82 1215.17 L1883.24 1215.17 L1882.65 1215.17 L1882.06 1215.17 L1881.48 1215.17 L1880.89 1215.17 L1880.3 1215.17 L1879.72 1215.17 L1879.13 1215.17 L1878.55 1215.17 L1877.96 1215.17 L1877.37 1215.17 L1876.79 1215.17 L1876.2 1215.17 L1875.61 1215.17 L1875.03 1215.17 L1874.44 1215.17 L1873.85 1215.17 L1873.27 1215.17 L1872.68 1215.17 L1872.09 1215.17 L1871.51 1215.17 L1870.92 1215.17 L1870.34 1215.17 L1869.75 1215.17 L1869.16 1215.17 L1868.58 1215.17 L1867.99 1215.17 L1867.4 1215.17 L1866.82 1215.17 L1866.23 1215.17 L1865.64 1215.17 L1865.06 1215.17 L1864.47 1215.17 L1863.88 1215.17 L1863.3 1215.17 L1862.71 1215.17 L1862.13 1215.17 L1861.54 1215.17 L1860.95 1215.17 L1860.37 1215.17 L1859.78 1215.17 L1859.19 1215.17 L1858.61 1215.17 L1858.02 1215.17 L1857.43 1215.17 L1856.85 1215.17 L1856.26 1215.17 L1855.68 1215.17 L1855.09 1215.17 L1854.5 1215.17 L1853.92 1215.17 L1853.33 1215.17 L1852.74 1215.17 L1852.16 1215.17 L1851.57 1215.17 L1850.98 1215.17 L1850.4 1215.17 L1849.81 1215.17 L1849.22 1215.17 L1848.64 1215.17 L1848.05 1215.17 L1847.47 1215.17 L1846.88 1215.17 L1846.29 1215.17 L1845.71 1215.17 L1845.12 1215.17 L1844.53 1215.17 L1843.95 1215.17 L1843.36 1215.17 L1842.77 1215.17 L1842.19 1215.17 L1841.6 1215.17 L1841.01 1215.17 L1840.43 1215.17 L1839.84 1215.17 L1839.26 1215.17 L1838.67 1215.17 L1838.08 1215.17 L1837.5 1215.17 L1836.91 1215.17 L1836.32 1215.17 L1835.74 1215.17 L1835.15 1215.17 L1834.56 1215.17 L1833.98 1215.17 L1833.39 1215.17 L1832.81 1215.17 L1832.22 1215.17 L1831.63 1215.17 L1831.05 1215.17 L1830.46 1215.17 L1829.87 1215.17 L1829.29 1215.17 L1828.7 1215.17 L1828.11 1215.17 L1827.53 1215.17 L1826.94 1215.17 L1826.35 1215.17 L1825.77 1215.17 L1825.18 1215.17 L1824.6 1215.17 L1824.01 1215.17 L1823.42 1215.17 L1822.84 1215.17 L1822.25 1215.17 L1821.66 1215.17 L1821.08 1215.17 L1820.49 1215.17 L1819.9 1215.17 L1819.32 1215.17 L1818.73 1215.17 L1818.14 1215.17 L1817.56 1215.17 L1816.97 1215.17 L1816.39 1215.17 L1815.8 1215.17 L1815.21 1215.17 L1814.63 1215.17 L1814.04 1215.17 L1813.45 1215.17 L1812.87 1215.17 L1812.28 1215.17 L1811.69 1215.17 L1811.11 1215.17 L1810.52 1215.17 L1809.94 1215.17 L1809.35 1215.17 L1808.76 1215.17 L1808.18 1215.17 L1807.59 1215.17 L1807 1215.17 L1806.42 1215.17 L1805.83 1215.17 L1805.24 1215.17 L1804.66 1215.17 L1804.07 1215.17 L1803.48 1215.17 L1802.9 1215.17 L1802.31 1215.17 L1801.73 1215.17 L1801.14 1215.17 L1800.55 1215.17 L1799.97 1215.17 L1799.38 1215.17 L1798.79 1215.17 L1798.21 1215.17 L1797.62 1215.17 L1797.03 1215.17 L1796.45 1215.17 L1795.86 1215.17 L1795.27 1215.17 L1794.69 1215.17 L1794.1 1215.17 L1793.52 1215.17 L1792.93 1215.17 L1792.34 1215.17 L1791.76 1215.17 L1791.17 1215.17 L1790.58 1215.17 L1790 1215.17 L1789.41 1215.17 L1788.82 1215.17 L1788.24 1215.17 L1787.65 1215.17 L1787.06 1215.17 L1786.48 1215.17 L1785.89 1215.17 L1785.31 1215.17 L1784.72 1215.17 L1784.13 1215.17 L1783.55 1215.17 L1782.96 1215.17 L1782.37 1215.17 L1781.79 1215.17 L1781.2 1215.17 L1780.61 1215.17 L1780.03 1215.17 L1779.44 1215.17 L1778.86 1215.17 L1778.27 1215.17 L1777.68 1215.17 L1777.1 1215.17 L1776.51 1215.17 L1775.92 1215.17 L1775.34 1215.17 L1774.75 1215.17 L1774.16 1215.17 L1773.58 1215.17 L1772.99 1215.17 L1772.4 1215.17 L1771.82 1215.17 L1771.23 1215.17 L1770.65 1215.17 L1770.06 1215.17 L1769.47 1215.17 L1768.89 1215.17 L1768.3 1215.17 L1767.71 1215.17 L1767.13 1215.17 L1766.54 1215.17 L1765.95 1215.17 L1765.37 1215.17 L1764.78 1215.17 L1764.19 1215.17 L1763.61 1215.17 L1763.02 1215.17 L1762.44 1215.17 L1761.85 1215.17 L1761.26 1215.17 L1760.68 1215.17 L1760.09 1215.17 L1759.5 1215.17 L1758.92 1215.17 L1758.33 1215.17 L1757.74 1215.17 L1757.16 1215.17 L1756.57 1215.17 L1755.99 1215.17 L1755.4 1215.17 L1754.81 1215.17 L1754.23 1215.17 L1753.64 1215.17 L1753.05 1215.17 L1752.47 1215.17 L1751.88 1215.17 L1751.29 1215.17 L1750.71 1215.17 L1750.12 1215.17 L1749.53 1215.17 L1748.95 1215.17 L1748.36 1215.17 L1747.78 1215.17 L1747.19 1215.17 L1746.6 1215.17 L1746.02 1215.17 L1745.43 1215.17 L1744.84 1215.17 L1744.26 1215.17 L1743.67 1215.17 L1743.08 1215.17 L1742.5 1215.17 L1741.91 1215.17 L1741.32 1215.17 L1740.74 1215.17 L1740.15 1215.17 L1739.57 1215.17 L1738.98 1215.17 L1738.39 1215.17 L1737.81 1215.17 L1737.22 1215.17 L1736.63 1215.17 L1736.05 1215.17 L1735.46 1215.17 L1734.87 1215.17 L1734.29 1215.17 L1733.7 1215.17 L1733.11 1215.17 L1732.53 1215.17 L1731.94 1215.17 L1731.36 1215.17 L1730.77 1215.17 L1730.18 1215.17 L1729.6 1215.17 L1729.01 1215.17 L1728.42 1215.17 L1727.84 1215.17 L1727.25 1215.17 L1726.66 1215.17 L1726.08 1215.17 L1725.49 1215.17 L1724.91 1215.17 L1724.32 1215.17 L1723.73 1215.17 L1723.15 1215.17 L1722.56 1215.17 L1721.97 1215.17 L1721.39 1215.17 L1720.8 1215.17 L1720.21 1215.17 L1719.63 1215.17 L1719.04 1215.17 L1718.45 1215.17 L1717.87 1215.17 L1717.28 1215.17 L1716.7 1215.17 L1716.11 1215.17 L1715.52 1215.17 L1714.94 1215.17 L1714.35 1215.17 L1713.76 1215.17 L1713.18 1215.17 L1712.59 1215.17 L1712 1215.17 L1711.42 1215.17 L1710.83 1215.17 L1710.24 1215.17 L1709.66 1215.17 L1709.07 1215.17 L1708.49 1215.17 L1707.9 1215.17 L1707.31 1215.17 L1706.73 1215.17 L1706.14 1215.17 L1705.55 1215.17 L1704.97 1215.17 L1704.38 1215.17 L1703.79 1215.17 L1703.21 1215.17 L1702.62 1215.17 L1702.04 1215.17 L1701.45 1215.17 L1700.86 1215.17 L1700.28 1215.17 L1699.69 1215.17 L1699.1 1215.17 L1698.52 1215.17 L1697.93 1215.17 L1697.34 1215.17 L1696.76 1215.17 L1696.17 1215.17 L1695.58 1215.17 L1695 1215.17 L1694.41 1215.17 L1693.83 1215.17 L1693.24 1215.17 L1692.65 1215.17 L1692.07 1215.17 L1691.48 1215.17 L1690.89 1215.17 L1690.31 1215.17 L1689.72 1215.17 L1689.13 1215.17 L1688.55 1215.17 L1687.96 1215.17 L1687.37 1215.17 L1686.79 1215.17 L1686.2 1215.17 L1685.62 1215.17 L1685.03 1215.17 L1684.44 1215.17 L1683.86 1215.17 L1683.27 1215.17 L1682.68 1215.17 L1682.1 1215.17 L1681.51 1215.17 L1680.92 1215.17 L1680.34 1215.17 L1679.75 1215.17 L1679.17 1215.17 L1678.58 1215.17 L1677.99 1215.17 L1677.41 1215.17 L1676.82 1215.17 L1676.23 1215.17 L1675.65 1215.17 L1675.06 1215.17 L1674.47 1215.17 L1673.89 1215.17 L1673.3 1215.17 L1672.71 1215.17 L1672.13 1215.17 L1671.54 1215.17 L1670.96 1215.17 L1670.37 1215.17 L1669.78 1215.17 L1669.2 1215.17 L1668.61 1215.17 L1668.02 1215.17 L1667.44 1215.17 L1666.85 1215.17 L1666.26 1215.17 L1665.68 1215.17 L1665.09 1215.17 L1664.5 1215.17 L1663.92 1215.17 L1663.33 1215.17 L1662.75 1215.17 L1662.16 1215.17 L1661.57 1215.17 L1660.99 1215.17 L1660.4 1215.17 L1659.81 1215.17 L1659.23 1215.17 L1658.64 1215.17 L1658.05 1215.17 L1657.47 1215.17 L1656.88 1215.17 L1656.29 1215.17 L1655.71 1215.17 L1655.12 1215.17 L1654.54 1215.17 L1653.95 1215.17 L1653.36 1215.17 L1652.78 1215.17 L1652.19 1215.17 L1651.6 1215.17 L1651.02 1215.17 L1650.43 1215.17 L1649.84 1215.17 L1649.26 1215.17 L1648.67 1215.17 L1648.09 1215.17 L1647.5 1215.17 L1646.91 1215.17 L1646.33 1215.17 L1645.74 1215.17 L1645.15 1215.17 L1644.57 1215.17 L1643.98 1215.17 L1643.39 1215.17 L1642.81 1215.17 L1642.22 1215.17 L1641.63 1215.17 L1641.05 1215.17 L1640.46 1215.17 L1639.88 1215.17 L1639.29 1215.17 L1638.7 1215.17 L1638.12 1215.17 L1637.53 1215.17 L1636.94 1215.17 L1636.36 1215.17 L1635.77 1215.17 L1635.18 1215.17 L1634.6 1215.17 L1634.01 1215.17 L1633.42 1215.17 L1632.84 1215.17 L1632.25 1215.17 L1631.67 1215.17 L1631.08 1215.17 L1630.49 1215.17 L1629.91 1215.17 L1629.32 1215.17 L1628.73 1215.17 L1628.15 1215.17 L1627.56 1215.17 L1626.97 1215.17 L1626.39 1215.17 L1625.8 1215.17 L1625.22 1215.17 L1624.63 1215.17 L1624.04 1215.17 L1623.46 1215.17 L1622.87 1215.17 L1622.28 1215.17 L1621.7 1215.17 L1621.11 1215.17 L1620.52 1215.17 L1619.94 1215.17 L1619.35 1215.17 L1618.76 1215.17 L1618.18 1215.17 L1617.59 1215.17 L1617.01 1215.17 L1616.42 1215.17 L1615.83 1215.17 L1615.25 1215.17 L1614.66 1215.17 L1614.07 1215.17 L1613.49 1215.17 L1612.9 1215.17 L1612.31 1215.17 L1611.73 1215.17 L1611.14 1215.17 L1610.55 1215.17 L1609.97 1215.17 L1609.38 1215.17 L1608.8 1215.17 L1608.21 1215.17 L1607.62 1215.17 L1607.04 1215.17 L1606.45 1215.17 L1605.86 1215.17 L1605.28 1215.17 L1604.69 1215.17 L1604.1 1215.17 L1603.52 1215.17 L1602.93 1215.17 L1602.34 1215.17 L1601.76 1215.17 L1601.17 1215.17 L1600.59 1215.17 L1600 1215.17 L1599.41 1215.17 L1598.83 1215.17 L1598.24 1215.17 L1597.65 1215.17 L1597.07 1215.17 L1596.48 1215.17 L1595.89 1215.17 L1595.31 1215.17 L1594.72 1215.17 L1594.14 1215.17 L1593.55 1215.17 L1592.96 1215.17 L1592.38 1215.17 L1591.79 1215.17 L1591.2 1215.17 L1590.62 1215.17 L1590.03 1215.17 L1589.44 1215.17 L1588.86 1215.17 L1588.27 1215.17 L1587.68 1215.17 L1587.1 1215.17 L1586.51 1215.17 L1585.93 1215.17 L1585.34 1215.17 L1584.75 1215.17 L1584.17 1215.17 L1583.58 1215.17 L1582.99 1215.17 L1582.41 1215.17 L1581.82 1215.17 L1581.23 1215.17 L1580.65 1215.17 L1580.06 1215.17 L1579.47 1215.17 L1578.89 1215.17 L1578.3 1215.17 L1577.72 1215.17 L1577.13 1215.17 L1576.54 1215.17 L1575.96 1215.17 L1575.37 1215.17 L1574.78 1215.17 L1574.2 1215.17 L1573.61 1215.17 L1573.02 1215.17 L1572.44 1215.17 L1571.85 1215.17 L1571.27 1215.17 L1570.68 1215.17 L1570.09 1215.17 L1569.51 1215.17 L1568.92 1215.17 L1568.33 1215.17 L1567.75 1215.17 L1567.16 1215.17 L1566.57 1215.17 L1565.99 1215.17 L1565.4 1215.17 L1564.81 1215.17 L1564.23 1215.17 L1563.64 1215.17 L1563.06 1215.17 L1562.47 1215.17 L1561.88 1215.17 L1561.3 1215.17 L1560.71 1215.17 L1560.12 1215.17 L1559.54 1215.17 L1558.95 1215.17 L1558.36 1215.17 L1557.78 1215.17 L1557.19 1215.17 L1556.6 1215.17 L1556.02 1215.17 L1555.43 1215.17 L1554.85 1215.17 L1554.26 1215.17 L1553.67 1215.17 L1553.09 1215.17 L1552.5 1215.17 L1551.91 1215.17 L1551.33 1215.17 L1550.74 1215.17 L1550.15 1215.17 L1549.57 1215.17 L1548.98 1215.17 L1548.4 1215.17 L1547.81 1215.17 L1547.22 1215.17 L1546.64 1215.17 L1546.05 1215.17 L1545.46 1215.17 L1544.88 1215.17 L1544.29 1215.17 L1543.7 1215.17 L1543.12 1215.17 L1542.53 1215.17 L1541.94 1215.17 L1541.36 1215.17 L1540.77 1215.17 L1540.19 1215.17 L1539.6 1215.17 L1539.01 1215.17 L1538.43 1215.17 L1537.84 1215.17 L1537.25 1215.17 L1536.67 1215.17 L1536.08 1215.17 L1535.49 1215.17 L1534.91 1215.17 L1534.32 1215.17 L1533.73 1215.17 L1533.15 1215.17 L1532.56 1215.17 L1531.98 1215.17 L1531.39 1215.17 L1530.8 1215.17 L1530.22 1215.17 L1529.63 1215.17 L1529.04 1215.17 L1528.46 1215.17 L1527.87 1215.17 L1527.28 1215.17 L1526.7 1215.17 L1526.11 1215.17 L1525.52 1215.17 L1524.94 1215.17 L1524.35 1215.17 L1523.77 1215.17 L1523.18 1215.17 L1522.59 1215.17 L1522.01 1215.17 L1521.42 1215.17 L1520.83 1215.17 L1520.25 1215.17 L1519.66 1215.17 L1519.07 1215.17 L1518.49 1215.17 L1517.9 1215.17 L1517.32 1215.17 L1516.73 1215.17 L1516.14 1215.17 L1515.56 1215.17 L1514.97 1215.17 L1514.38 1215.17 L1513.8 1215.17 L1513.21 1215.17 L1512.62 1215.17 L1512.04 1215.17 L1511.45 1215.17 L1510.86 1215.17 L1510.28 1215.17 L1509.69 1215.17 L1509.11 1215.17 L1508.52 1215.17 L1507.93 1215.17 L1507.35 1215.17 L1506.76 1215.17 L1506.17 1215.17 L1505.59 1215.17 L1505 1215.17 L1504.41 1215.17 L1503.83 1215.17 L1503.24 1215.17 L1502.65 1215.17 L1502.07 1215.17 L1501.48 1215.17 L1500.9 1215.17 L1500.31 1215.17 L1499.72 1215.17 L1499.14 1215.17 L1498.55 1215.17 L1497.96 1215.17 L1497.38 1215.17 L1496.79 1215.17 L1496.2 1215.17 L1495.62 1215.17 L1495.03 1215.17 L1494.45 1215.17 L1493.86 1215.17 L1493.27 1215.17 L1492.69 1215.17 L1492.1 1215.17 L1491.51 1215.17 L1490.93 1215.17 L1490.34 1215.17 L1489.75 1215.17 L1489.17 1215.17 L1488.58 1215.17 L1487.99 1215.17 L1487.41 1215.17 L1486.82 1215.17 L1486.24 1215.17 L1485.65 1215.17 L1485.06 1215.17 L1484.48 1215.17 L1483.89 1215.17 L1483.3 1215.17 L1482.72 1215.17 L1482.13 1215.17 L1481.54 1215.17 L1480.96 1215.17 L1480.37 1215.17 L1479.78 1215.17 L1479.2 1215.17 L1478.61 1215.17 L1478.03 1215.17 L1477.44 1215.17 L1476.85 1215.17 L1476.27 1215.17 L1475.68 1215.17 L1475.09 1215.17 L1474.51 1215.17 L1473.92 1215.17 L1473.33 1215.17 L1472.75 1215.17 L1472.16 1215.17 L1471.57 1215.17 L1470.99 1215.17 L1470.4 1215.17 L1469.82 1215.17 L1469.23 1215.17 L1468.64 1215.17 L1468.06 1215.17 L1467.47 1215.17 L1466.88 1215.17 L1466.3 1215.17 L1465.71 1215.17 L1465.12 1215.17 L1464.54 1215.17 L1463.95 1215.17 L1463.37 1215.17 L1462.78 1215.17 L1462.19 1215.17 L1461.61 1215.17 L1461.02 1215.17 L1460.43 1215.17 L1459.85 1215.17 L1459.26 1215.17 L1458.67 1215.17 L1458.09 1215.17 L1457.5 1215.17 L1456.91 1215.17 L1456.33 1215.17 L1455.74 1215.17 L1455.16 1215.17 L1454.57 1215.17 L1453.98 1215.17 L1453.4 1215.17 L1452.81 1215.17 L1452.22 1215.17 L1451.64 1215.17 L1451.05 1215.17 L1450.46 1215.17 L1449.88 1215.17 L1449.29 1215.17 L1448.7 1215.17 L1448.12 1215.17 L1447.53 1215.17 L1446.95 1215.17 L1446.36 1215.17 L1445.77 1215.17 L1445.19 1215.17 L1444.6 1215.17 L1444.01 1215.17 L1443.43 1215.17 L1442.84 1215.17 L1442.25 1215.17 L1441.67 1215.17 L1441.08 1215.17 L1440.5 1215.17 L1439.91 1215.17 L1439.32 1215.17 L1438.74 1215.17 L1438.15 1215.17 L1437.56 1215.17 L1436.98 1215.17 L1436.39 1215.17 L1435.8 1215.17 L1435.22 1215.17 L1434.63 1215.17 L1434.04 1215.17 L1433.46 1215.17 L1432.87 1215.17 L1432.29 1215.17 L1431.7 1215.17 L1431.11 1215.17 L1430.53 1215.17 L1429.94 1215.17 L1429.35 1215.17 L1428.77 1215.17 L1428.18 1215.17 L1427.59 1215.17 L1427.01 1215.17 L1426.42 1215.17 L1425.83 1215.17 L1425.25 1215.17 L1424.66 1215.17 L1424.08 1215.17 L1423.49 1215.17 L1422.9 1215.17 L1422.32 1215.17 L1421.73 1215.17 L1421.14 1215.17 L1420.56 1215.17 L1419.97 1215.17 L1419.38 1215.17 L1418.8 1215.17 L1418.21 1215.17 L1417.63 1215.17 L1417.04 1215.17 L1416.45 1215.17 L1415.87 1215.17 L1415.28 1215.17 L1414.69 1215.17 L1414.11 1215.17 L1413.52 1215.17 L1412.93 1215.17 L1412.35 1215.17 L1411.76 1215.17 L1411.17 1215.17 L1410.59 1215.17 L1410 1215.17 L1409.42 1215.17 L1408.83 1215.17 L1408.24 1215.17 L1407.66 1215.17 L1407.07 1215.17 L1406.48 1215.17 L1405.9 1215.17 L1405.31 1215.17 L1404.72 1215.17 L1404.14 1215.17 L1403.55 1215.17 L1402.96 1215.17 L1402.38 1215.17 L1401.79 1215.17 L1401.21 1215.17 L1400.62 1215.17 L1400.03 1215.17 L1399.45 1215.17 L1398.86 1215.17 L1398.27 1215.17 L1397.69 1215.17 L1397.1 1215.17 L1396.51 1215.17 L1395.93 1215.17 L1395.34 1215.17 L1394.75 1215.17 L1394.17 1215.17 L1393.58 1215.17 L1393 1215.17 L1392.41 1215.17 L1391.82 1215.17 L1391.24 1215.17 L1390.65 1215.17 L1390.06 1215.17 L1389.48 1215.17 L1388.89 1215.17 L1388.3 1215.17 L1387.72 1215.17 L1387.13 1215.17 L1386.55 1215.17 L1385.96 1215.17 L1385.37 1215.17 L1384.79 1215.17 L1384.2 1215.17 L1383.61 1215.17 L1383.03 1215.17 L1382.44 1215.17 L1381.85 1215.17 L1381.27 1215.17 L1380.68 1215.17 L1380.09 1215.17 L1379.51 1215.17 L1378.92 1215.17 L1378.34 1215.17 L1377.75 1215.17 L1377.16 1215.17 L1376.58 1215.17 L1375.99 1215.17 L1375.4 1215.17 L1374.82 1215.17 L1374.23 1215.17 L1373.64 1215.17 L1373.06 1215.17 L1372.47 1215.17 L1371.88 1215.17 L1371.3 1215.17 L1370.71 1215.17 L1370.13 1215.17 L1369.54 1215.17 L1368.95 1215.17 L1368.37 1215.17 L1367.78 1215.17 L1367.19 1215.17 L1366.61 1215.17 L1366.02 1215.17 L1365.43 1215.17 L1364.85 1215.17 L1364.26 1215.17 L1363.68 1215.17 L1363.09 1215.17 L1362.5 1215.17 L1361.92 1215.17 L1361.33 1215.17 L1360.74 1215.17 L1360.16 1215.17 L1359.57 1215.17 L1358.98 1215.17 L1358.4 1215.17 L1357.81 1215.17 L1357.22 1215.17 L1356.64 1215.17 L1356.05 1215.17 L1355.47 1215.17 L1354.88 1215.17 L1354.29 1215.17 L1353.71 1215.17 L1353.12 1215.17 L1352.53 1215.17 L1351.95 1215.17 L1351.36 1215.17 L1350.77 1215.17 L1350.19 1215.17 L1349.6 1215.17 L1349.01 1215.17 L1348.43 1215.17 L1347.84 1215.17 L1347.26 1215.17 L1346.67 1215.17 L1346.08 1215.17 L1345.5 1215.17 L1344.91 1215.17 L1344.32 1215.17 L1343.74 1215.17 L1343.15 1215.17 L1342.56 1215.17 L1341.98 1215.17 L1341.39 1215.17 L1340.8 1215.17 L1340.22 1215.17 L1339.63 1215.17 L1339.05 1215.17 L1338.46 1215.17 L1337.87 1215.17 L1337.29 1215.17 L1336.7 1215.17 L1336.11 1215.17 L1335.53 1215.17 L1334.94 1215.17 L1334.35 1215.17 L1333.77 1215.17 L1333.18 1215.17 L1332.6 1215.17 L1332.01 1215.17 L1331.42 1215.17 L1330.84 1215.17 L1330.25 1215.17 L1329.66 1215.17 L1329.08 1215.17 L1328.49 1215.17 L1327.9 1215.17 L1327.32 1215.17 L1326.73 1215.17 L1326.14 1215.17 L1325.56 1215.17 L1324.97 1215.17 L1324.39 1215.17 L1323.8 1215.17 L1323.21 1215.17 L1322.63 1215.17 L1322.04 1215.17 L1321.45 1215.17 L1320.87 1215.17 L1320.28 1215.17 L1319.69 1215.17 L1319.11 1215.17 L1318.52 1215.17 L1317.93 1215.17 L1317.35 1215.17 L1316.76 1215.17 L1316.18 1215.17 L1315.59 1215.17 L1315 1215.17 L1314.42 1215.17 L1313.83 1215.17 L1313.24 1215.17 L1312.66 1215.17 L1312.07 1215.17 L1311.48 1215.17 L1310.9 1215.17 L1310.31 1215.17 L1309.73 1215.17 L1309.14 1215.17 L1308.55 1215.17 L1307.97 1215.17 L1307.38 1215.17 L1306.79 1215.17 L1306.21 1215.17 L1305.62 1215.17 L1305.03 1215.17 L1304.45 1215.17 L1303.86 1215.17 L1303.27 1215.17 L1302.69 1215.17 L1302.1 1215.17 L1301.52 1215.17 L1300.93 1215.17 L1300.34 1215.17 L1299.76 1215.17 L1299.17 1215.17 L1298.58 1215.17 L1298 1215.17 L1297.41 1215.17 L1296.82 1215.17 L1296.24 1215.17 L1295.65 1215.17 L1295.06 1215.17 L1294.48 1215.17 L1293.89 1215.17 L1293.31 1215.17 L1292.72 1215.17 L1292.13 1215.17 L1291.55 1215.17 L1290.96 1215.17 L1290.37 1215.17 L1289.79 1215.17 L1289.2 1215.17 L1288.61 1215.17 L1288.03 1215.17 L1287.44 1215.17 L1286.86 1215.17 L1286.27 1215.17 L1285.68 1215.17 L1285.1 1215.17 L1284.51 1215.17 L1283.92 1215.17 L1283.34 1215.17 L1282.75 1215.17 L1282.16 1215.17 L1281.58 1215.17 L1280.99 1215.17 L1280.4 1215.17 L1279.82 1215.17 L1279.23 1215.17 L1278.65 1215.17 L1278.06 1215.17 L1277.47 1215.17 L1276.89 1215.17 L1276.3 1215.17 L1275.71 1215.17 L1275.13 1215.17 L1274.54 1215.17 L1273.95 1215.17 L1273.37 1215.17 L1272.78 1215.17 L1272.19 1215.17 L1271.61 1215.17 L1271.02 1215.17 L1270.44 1215.17 L1269.85 1215.17 L1269.26 1215.17 L1268.68 1215.17 L1268.09 1215.17 L1267.5 1215.17 L1266.92 1215.17 L1266.33 1215.17 L1265.74 1215.17 L1265.16 1215.17 L1264.57 1215.17 L1263.98 1215.17 L1263.4 1215.17 L1262.81 1215.17 L1262.23 1215.17 L1261.64 1215.17 L1261.05 1215.17 L1260.47 1215.17 L1259.88 1215.17 L1259.29 1215.17 L1258.71 1215.17 L1258.12 1215.17 L1257.53 1215.17 L1256.95 1215.17 L1256.36 1215.17 L1255.78 1215.17 L1255.19 1215.17 L1254.6 1215.17 L1254.02 1215.17 L1253.43 1215.17 L1252.84 1215.17 L1252.26 1215.17 L1251.67 1215.17 L1251.08 1215.17 L1250.5 1215.17 L1249.91 1215.17 L1249.32 1215.17 L1248.74 1215.17 L1248.15 1215.17 L1247.57 1215.17 L1246.98 1215.17 L1246.39 1215.17 L1245.81 1215.17 L1245.22 1215.17 L1244.63 1215.17 L1244.05 1215.17 L1243.46 1215.17 L1242.87 1215.17 L1242.29 1215.17 L1241.7 1215.17 L1241.11 1215.17 L1240.53 1215.17 L1239.94 1215.17 L1239.36 1215.17 L1238.77 1215.17 L1238.18 1215.17 L1237.6 1215.17 L1237.01 1215.17 L1236.42 1215.17 L1235.84 1215.17 L1235.25 1215.17 L1234.66 1215.17 L1234.08 1215.17 L1233.49 1215.17 L1232.91 1215.17 L1232.32 1215.17 L1231.73 1215.17 L1231.15 1215.17 L1230.56 1215.17 L1229.97 1215.17 L1229.39 1215.17 L1228.8 1215.17 L1228.21 1215.17 L1227.63 1215.17 L1227.04 1215.17 L1226.45 1215.17 L1225.87 1215.17 L1225.28 1215.17 L1224.7 1215.17 L1224.11 1215.17 L1223.52 1215.17 L1222.94 1215.17 L1222.35 1215.17 L1221.76 1215.17 L1221.18 1215.17 L1220.59 1215.17 L1220 1215.17 L1219.42 1215.17 L1218.83 1215.17 L1218.24 1215.17 L1217.66 1215.17 L1217.07 1215.17 L1216.49 1215.17 L1215.9 1215.17 L1215.31 1215.17 L1214.73 1215.17 L1214.14 1215.17 L1213.55 1215.17 L1212.97 1215.17 L1212.38 1215.17 L1211.79 1215.17 L1211.21 1215.17 L1210.62 1215.17 L1210.03 1215.17 L1209.45 1215.17 L1208.86 1215.17 L1208.28 1215.17 L1207.69 1215.17 L1207.1 1215.17 L1206.52 1215.17 L1205.93 1215.17 L1205.34 1215.17 L1204.76 1215.17 L1204.17 1215.17 L1203.58 1215.17 L1203 1215.17 L1202.41 1215.17 L1201.83 1215.17 L1201.24 1215.17 L1200.65 1215.17 L1200.07 1215.17 L1199.48 1215.17 L1198.89 1215.17 L1198.31 1215.17 L1197.72 1215.17 L1197.13 1215.17 L1196.55 1215.17 L1195.96 1215.17 L1195.37 1215.17 L1194.79 1215.17 L1194.2 1215.17 L1193.62 1215.17 L1193.03 1215.17 L1192.44 1215.17 L1191.86 1215.17 L1191.27 1215.17 L1190.68 1215.17 L1190.1 1215.17 L1189.51 1215.17 L1188.92 1215.17 L1188.34 1215.17 L1187.75 1215.17 L1187.16 1215.17 L1186.58 1215.17 L1185.99 1215.17 L1185.41 1215.17 L1184.82 1215.17 L1184.23 1215.17 L1183.65 1215.17 L1183.06 1215.17 L1182.47 1215.17 L1181.89 1215.17 L1181.3 1215.17 L1180.71 1215.17 L1180.13 1215.17 L1179.54 1215.17 L1178.96 1215.17 L1178.37 1215.17 L1177.78 1215.17 L1177.2 1215.17 L1176.61 1215.17 L1176.02 1215.17 L1175.44 1215.17 L1174.85 1215.17 L1174.26 1215.17 L1173.68 1215.17 L1173.09 1215.17 L1172.5 1215.17 L1171.92 1215.17 L1171.33 1215.17 L1170.75 1215.17 L1170.16 1215.17 L1169.57 1215.17 L1168.99 1215.17 L1168.4 1215.17 L1167.81 1215.17 L1167.23 1215.17 L1166.64 1215.17 L1166.05 1215.17 L1165.47 1215.17 L1164.88 1215.17 L1164.29 1215.17 L1163.71 1215.17 L1163.12 1215.17 L1162.54 1215.17 L1161.95 1215.17 L1161.36 1215.17 L1160.78 1215.17 L1160.19 1215.17 L1159.6 1215.17 L1159.02 1215.17 L1158.43 1215.17 L1157.84 1215.17 L1157.26 1215.17 L1156.67 1215.17 L1156.09 1215.17 L1155.5 1215.17 L1154.91 1215.17 L1154.33 1215.17 L1153.74 1215.17 L1153.15 1215.17 L1152.57 1215.17 L1151.98 1215.17 L1151.39 1215.17 L1150.81 1215.17 L1150.22 1215.17 L1149.63 1215.17 L1149.05 1215.17 L1148.46 1215.17 L1147.88 1215.17 L1147.29 1215.17 L1146.7 1215.17 L1146.12 1215.17 L1145.53 1215.17 L1144.94 1215.17 L1144.36 1215.17 L1143.77 1215.17 L1143.18 1215.17 L1142.6 1215.17 L1142.01 1215.17 L1141.42 1215.17 L1140.84 1215.17 L1140.25 1215.17 L1139.67 1215.17 L1139.08 1215.17 L1138.49 1215.17 L1137.91 1215.17 L1137.32 1215.17 L1136.73 1215.17 L1136.15 1215.17 L1135.56 1215.17 L1134.97 1215.17 L1134.39 1215.17 L1133.8 1215.17 L1133.21 1215.17 L1132.63 1215.17 L1132.04 1215.17 L1131.46 1215.17 L1130.87 1215.17 L1130.28 1215.17 L1129.7 1215.17 L1129.11 1215.17 L1128.52 1215.17 L1127.94 1215.17 L1127.35 1215.17 L1126.76 1215.17 L1126.18 1215.17 L1125.59 1215.17 L1125.01 1215.17 L1124.42 1215.17 L1123.83 1215.17 L1123.25 1215.17 L1122.66 1215.17 L1122.07 1215.17 L1121.49 1215.17 L1120.9 1215.17 L1120.31 1215.17 L1119.73 1215.17 L1119.14 1215.17 L1118.55 1215.17 L1117.97 1215.17 L1117.38 1215.17 L1116.8 1215.17 L1116.21 1215.17 L1115.62 1215.17 L1115.04 1215.17 L1114.45 1215.17 L1113.86 1215.17 L1113.28 1215.17 L1112.69 1215.17 L1112.1 1215.17 L1111.52 1215.17 L1110.93 1215.17 L1110.34 1215.17 L1109.76 1215.17 L1109.17 1215.17 L1108.59 1215.17 L1108 1215.17 L1107.41 1215.17 L1106.83 1215.17 L1106.24 1215.17 L1105.65 1215.17 L1105.07 1215.17 L1104.48 1215.17 L1103.89 1215.17 L1103.31 1215.17 L1102.72 1215.17 L1102.14 1215.17 L1101.55 1215.17 L1100.96 1215.17 L1100.38 1215.17 L1099.79 1215.17 L1099.2 1215.17 L1098.62 1215.17 L1098.03 1215.17 L1097.44 1215.17 L1096.86 1215.17 L1096.27 1215.17 L1095.68 1215.17 L1095.1 1215.17 L1094.51 1215.17 L1093.93 1215.17 L1093.34 1215.17 L1092.75 1215.17 L1092.17 1215.17 L1091.58 1215.17 L1090.99 1215.17 L1090.41 1215.17 L1089.82 1215.17 L1089.23 1215.17 L1088.65 1215.17 L1088.06 1215.17 L1087.47 1215.17 L1086.89 1215.17 L1086.3 1215.17 L1085.72 1215.17 L1085.13 1215.17 L1084.54 1215.17 L1083.96 1215.17 L1083.37 1215.17 L1082.78 1215.17 L1082.2 1215.17 L1081.61 1215.17 L1081.02 1215.17 L1080.44 1215.17 L1079.85 1215.17 L1079.26 1215.17 L1078.68 1215.17 L1078.09 1215.17 L1077.51 1215.17 L1076.92 1215.17 L1076.33 1215.17 L1075.75 1215.17 L1075.16 1215.17 L1074.57 1215.17 L1073.99 1215.17 L1073.4 1215.17 L1072.81 1215.17 L1072.23 1215.17 L1071.64 1215.17 L1071.06 1215.17 L1070.47 1215.17 L1069.88 1215.17 L1069.3 1215.17 L1068.71 1215.17 L1068.12 1215.17 L1067.54 1215.17 L1066.95 1215.17 L1066.36 1215.17 L1065.78 1215.17 L1065.19 1215.17 L1064.6 1215.17 L1064.02 1215.17 L1063.43 1215.17 L1062.85 1215.17 L1062.26 1215.17 L1061.67 1215.17 L1061.09 1215.17 L1060.5 1215.17 L1059.91 1215.17 L1059.33 1215.17 L1058.74 1215.17 L1058.15 1215.17 L1057.57 1215.17 L1056.98 1215.17 L1056.39 1215.17 L1055.81 1215.17 L1055.22 1215.17 L1054.64 1215.17 L1054.05 1215.17 L1053.46 1215.17 L1052.88 1215.17 L1052.29 1215.17 L1051.7 1215.17 L1051.12 1215.17 L1050.53 1215.17 L1049.94 1215.17 L1049.36 1215.17 L1048.77 1215.17 L1048.19 1215.17 L1047.6 1215.17 L1047.01 1215.17 L1046.43 1215.17 L1045.84 1215.17 L1045.25 1215.17 L1044.67 1215.17 L1044.08 1215.17 L1043.49 1215.17 L1042.91 1215.17 L1042.32 1215.17 L1041.73 1215.17 L1041.15 1215.17 L1040.56 1215.17 L1039.98 1215.17 L1039.39 1215.17 L1038.8 1215.17 L1038.22 1215.17 L1037.63 1215.17 L1037.04 1215.17 L1036.46 1215.17 L1035.87 1215.17 L1035.28 1215.17 L1034.7 1215.17 L1034.11 1215.17 L1033.52 1215.17 L1032.94 1215.17 L1032.35 1215.17 L1031.77 1215.17 L1031.18 1215.17 L1030.59 1215.17 L1030.01 1215.17 L1029.42 1215.17 L1028.83 1215.17 L1028.25 1215.17 L1027.66 1215.17 L1027.07 1215.17 L1026.49 1215.17 L1025.9 1215.17 L1025.32 1215.17 L1024.73 1215.17 L1024.14 1215.17 L1023.56 1215.17 L1022.97 1215.17 L1022.38 1215.17 L1021.8 1215.17 L1021.21 1215.17 L1020.62 1215.17 L1020.04 1215.17 L1019.45 1215.17 L1018.86 1215.17 L1018.28 1215.17 L1017.69 1215.17 L1017.11 1215.17 L1016.52 1215.17 L1015.93 1215.17 L1015.35 1215.17 L1014.76 1215.17 L1014.17 1215.17 L1013.59 1215.17 L1013 1215.17 L1012.41 1215.17 L1011.83 1215.17 L1011.24 1215.17 L1010.65 1215.17 L1010.07 1215.17 L1009.48 1215.17 L1008.9 1215.17 L1008.31 1215.17 L1007.72 1215.17 L1007.14 1215.17 L1006.55 1215.17 L1005.96 1215.17 L1005.38 1215.17 L1004.79 1215.17 L1004.2 1215.17 L1003.62 1215.17 L1003.03 1215.17 L1002.44 1215.17 L1001.86 1215.17 L1001.27 1215.17 L1000.69 1215.17 L1000.1 1215.17 L999.513 1215.17 L998.926 1215.17 L998.34 1215.17 L997.754 1215.17 L997.167 1215.17 L996.581 1215.17 L995.994 1215.17 L995.408 1215.17 L994.822 1215.17 L994.235 1215.17 L993.649 1215.17 L993.062 1215.17 L992.476 1215.17 L991.889 1215.17 L991.303 1215.17 L990.717 1215.17 L990.13 1215.17 L989.544 1215.17 L988.957 1215.17 L988.371 1215.17 L987.785 1215.17 L987.198 1215.17 L986.612 1215.17 L986.025 1215.17  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1215.26 986.612,1215.26 987.198,1215.26 987.785,1215.26 988.371,1215.26 988.957,1215.26 989.544,1215.26 990.13,1215.26 990.717,1215.26 991.303,1215.26 991.889,1215.26 992.476,1215.26 993.062,1215.26 993.649,1215.26 994.235,1215.26 994.822,1215.26 995.408,1215.26 995.994,1215.26 996.581,1215.26 997.167,1215.26 997.754,1215.26 998.34,1215.26 998.926,1215.26 999.513,1215.26 1000.1,1215.26 1000.69,1215.26 1001.27,1215.26 1001.86,1215.26 1002.44,1215.26 1003.03,1215.26 1003.62,1215.26 1004.2,1215.26 1004.79,1215.26 1005.38,1215.26 1005.96,1215.26 1006.55,1215.26 1007.14,1215.26 1007.72,1215.26 1008.31,1215.26 1008.9,1215.26 1009.48,1215.26 1010.07,1215.26 1010.65,1215.26 1011.24,1215.26 1011.83,1215.26 1012.41,1215.26 1013,1215.26 1013.59,1215.26 1014.17,1215.26 1014.76,1215.26 1015.35,1215.26 1015.93,1215.26 1016.52,1215.26 1017.11,1215.26 1017.69,1215.26 1018.28,1215.26 1018.86,1215.26 1019.45,1215.26 1020.04,1215.26 1020.62,1215.26 1021.21,1215.26 1021.8,1215.26 1022.38,1215.26 1022.97,1215.26 1023.56,1215.26 1024.14,1215.26 1024.73,1215.26 1025.32,1215.26 1025.9,1215.26 1026.49,1215.26 1027.07,1215.26 1027.66,1215.26 1028.25,1215.26 1028.83,1215.26 1029.42,1215.26 1030.01,1215.26 1030.59,1215.26 1031.18,1215.26 1031.77,1215.26 1032.35,1215.26 1032.94,1215.26 1033.52,1215.26 1034.11,1215.26 1034.7,1215.26 1035.28,1215.26 1035.87,1215.26 1036.46,1215.26 1037.04,1215.26 1037.63,1215.26 1038.22,1215.26 1038.8,1215.26 1039.39,1215.26 1039.98,1215.26 1040.56,1215.26 1041.15,1215.26 1041.73,1215.26 1042.32,1215.26 1042.91,1215.26 1043.49,1215.26 1044.08,1215.26 1044.67,1215.26 1045.25,1215.26 1045.84,1215.26 1046.43,1215.26 1047.01,1215.26 1047.6,1215.26 1048.19,1215.26 1048.77,1215.26 1049.36,1215.26 1049.94,1215.26 1050.53,1215.26 1051.12,1215.26 1051.7,1215.26 1052.29,1215.26 1052.88,1215.26 1053.46,1215.26 1054.05,1215.26 1054.64,1215.26 1055.22,1215.26 1055.81,1215.26 1056.39,1215.26 1056.98,1215.26 1057.57,1215.26 1058.15,1215.26 1058.74,1215.26 1059.33,1215.26 1059.91,1215.26 1060.5,1215.26 1061.09,1215.26 1061.67,1215.26 1062.26,1215.26 1062.85,1215.26 1063.43,1215.26 1064.02,1215.26 1064.6,1215.26 1065.19,1215.26 1065.78,1215.26 1066.36,1215.26 1066.95,1215.26 1067.54,1215.26 1068.12,1215.26 1068.71,1215.26 1069.3,1215.26 1069.88,1215.26 1070.47,1215.26 1071.06,1215.26 1071.64,1215.26 1072.23,1215.26 1072.81,1215.26 1073.4,1215.26 1073.99,1215.26 1074.57,1215.26 1075.16,1215.26 1075.75,1215.26 1076.33,1215.26 1076.92,1215.26 1077.51,1215.26 1078.09,1215.26 1078.68,1215.26 1079.26,1215.26 1079.85,1215.26 1080.44,1215.26 1081.02,1215.26 1081.61,1215.26 1082.2,1215.26 1082.78,1215.26 1083.37,1215.26 1083.96,1215.26 1084.54,1215.26 1085.13,1215.26 1085.72,1215.26 1086.3,1215.26 1086.89,1215.26 1087.47,1215.26 1088.06,1215.26 1088.65,1215.26 1089.23,1215.26 1089.82,1215.26 1090.41,1215.26 1090.99,1215.26 1091.58,1215.26 1092.17,1215.26 1092.75,1215.26 1093.34,1215.26 1093.93,1215.26 1094.51,1215.26 1095.1,1215.26 1095.68,1215.26 1096.27,1215.26 1096.86,1215.26 1097.44,1215.26 1098.03,1215.26 1098.62,1215.26 1099.2,1215.26 1099.79,1215.26 1100.38,1215.26 1100.96,1215.26 1101.55,1215.26 1102.14,1215.26 1102.72,1215.26 1103.31,1215.26 1103.89,1215.26 1104.48,1215.26 1105.07,1215.26 1105.65,1215.26 1106.24,1215.26 1106.83,1215.26 1107.41,1215.26 1108,1215.26 1108.59,1215.26 1109.17,1215.26 1109.76,1215.26 1110.34,1215.26 1110.93,1215.26 1111.52,1215.26 1112.1,1215.26 1112.69,1215.26 1113.28,1215.26 1113.86,1215.26 1114.45,1215.26 1115.04,1215.26 1115.62,1215.26 1116.21,1215.26 1116.8,1215.26 1117.38,1215.26 1117.97,1215.26 1118.55,1215.26 1119.14,1215.26 1119.73,1215.26 1120.31,1215.26 1120.9,1215.26 1121.49,1215.26 1122.07,1215.26 1122.66,1215.26 1123.25,1215.26 1123.83,1215.26 1124.42,1215.26 1125.01,1215.26 1125.59,1215.26 1126.18,1215.26 1126.76,1215.26 1127.35,1215.26 1127.94,1215.26 1128.52,1215.26 1129.11,1215.26 1129.7,1215.26 1130.28,1215.26 1130.87,1215.26 1131.46,1215.26 1132.04,1215.26 1132.63,1215.26 1133.21,1215.26 1133.8,1215.26 1134.39,1215.26 1134.97,1215.26 1135.56,1215.26 1136.15,1215.26 1136.73,1215.26 1137.32,1215.26 1137.91,1215.26 1138.49,1215.26 1139.08,1215.26 1139.67,1215.26 1140.25,1215.26 1140.84,1215.26 1141.42,1215.26 1142.01,1215.26 1142.6,1215.26 1143.18,1215.26 1143.77,1215.26 1144.36,1215.26 1144.94,1215.26 1145.53,1215.26 1146.12,1215.26 1146.7,1215.26 1147.29,1215.26 1147.88,1215.26 1148.46,1215.26 1149.05,1215.26 1149.63,1215.26 1150.22,1215.26 1150.81,1215.26 1151.39,1215.26 1151.98,1215.26 1152.57,1215.26 1153.15,1215.26 1153.74,1215.26 1154.33,1215.26 1154.91,1215.26 1155.5,1215.26 1156.09,1215.26 1156.67,1215.26 1157.26,1215.26 1157.84,1215.26 1158.43,1215.26 1159.02,1215.26 1159.6,1215.26 1160.19,1215.26 1160.78,1215.26 1161.36,1215.26 1161.95,1215.26 1162.54,1215.26 1163.12,1215.26 1163.71,1215.26 1164.29,1215.26 1164.88,1215.26 1165.47,1215.26 1166.05,1215.26 1166.64,1215.26 1167.23,1215.26 1167.81,1215.26 1168.4,1215.26 1168.99,1215.26 1169.57,1215.26 1170.16,1215.26 1170.75,1215.26 1171.33,1215.26 1171.92,1215.26 1172.5,1215.26 1173.09,1215.26 1173.68,1215.26 1174.26,1215.26 1174.85,1215.26 1175.44,1215.26 1176.02,1215.26 1176.61,1215.26 1177.2,1215.26 1177.78,1215.26 1178.37,1215.26 1178.96,1215.26 1179.54,1215.26 1180.13,1215.26 1180.71,1215.26 1181.3,1215.26 1181.89,1215.26 1182.47,1215.26 1183.06,1215.26 1183.65,1215.26 1184.23,1215.26 1184.82,1215.26 1185.41,1215.26 1185.99,1215.26 1186.58,1215.26 1187.16,1215.26 1187.75,1215.26 1188.34,1215.26 1188.92,1215.26 1189.51,1215.26 1190.1,1215.26 1190.68,1215.26 1191.27,1215.26 1191.86,1215.26 1192.44,1215.26 1193.03,1215.26 1193.62,1215.26 1194.2,1215.26 1194.79,1215.26 1195.37,1215.26 1195.96,1215.26 1196.55,1215.26 1197.13,1215.26 1197.72,1215.26 1198.31,1215.26 1198.89,1215.26 1199.48,1215.26 1200.07,1215.26 1200.65,1215.26 1201.24,1215.26 1201.83,1215.26 1202.41,1215.26 1203,1215.26 1203.58,1215.26 1204.17,1215.26 1204.76,1215.26 1205.34,1215.26 1205.93,1215.26 1206.52,1215.26 1207.1,1215.26 1207.69,1215.26 1208.28,1215.26 1208.86,1215.26 1209.45,1215.26 1210.03,1215.26 1210.62,1215.26 1211.21,1215.26 1211.79,1215.26 1212.38,1215.26 1212.97,1215.26 1213.55,1215.26 1214.14,1215.26 1214.73,1215.26 1215.31,1215.26 1215.9,1215.26 1216.49,1215.26 1217.07,1215.26 1217.66,1215.26 1218.24,1215.26 1218.83,1215.26 1219.42,1215.26 1220,1215.26 1220.59,1215.26 1221.18,1215.26 1221.76,1215.26 1222.35,1215.26 1222.94,1215.26 1223.52,1215.26 1224.11,1215.26 1224.7,1215.26 1225.28,1215.26 1225.87,1215.26 1226.45,1215.26 1227.04,1215.26 1227.63,1215.26 1228.21,1215.26 1228.8,1215.26 1229.39,1215.26 1229.97,1215.26 1230.56,1215.26 1231.15,1215.26 1231.73,1215.26 1232.32,1215.26 1232.91,1215.26 1233.49,1215.26 1234.08,1215.26 1234.66,1215.26 1235.25,1215.26 1235.84,1215.26 1236.42,1215.26 1237.01,1215.26 1237.6,1215.26 1238.18,1215.26 1238.77,1215.26 1239.36,1215.26 1239.94,1215.26 1240.53,1215.26 1241.11,1215.26 1241.7,1215.26 1242.29,1215.26 1242.87,1215.26 1243.46,1215.26 1244.05,1215.26 1244.63,1215.26 1245.22,1215.26 1245.81,1215.26 1246.39,1215.26 1246.98,1215.26 1247.57,1215.26 1248.15,1215.26 1248.74,1215.26 1249.32,1215.26 1249.91,1215.26 1250.5,1215.26 1251.08,1215.26 1251.67,1215.26 1252.26,1215.26 1252.84,1215.26 1253.43,1215.26 1254.02,1215.26 1254.6,1215.26 1255.19,1215.26 1255.78,1215.26 1256.36,1215.26 1256.95,1215.26 1257.53,1215.26 1258.12,1215.26 1258.71,1215.26 1259.29,1215.26 1259.88,1215.26 1260.47,1215.26 1261.05,1215.26 1261.64,1215.26 1262.23,1215.26 1262.81,1215.26 1263.4,1215.26 1263.98,1215.26 1264.57,1215.26 1265.16,1215.26 1265.74,1215.26 1266.33,1215.26 1266.92,1215.26 1267.5,1215.26 1268.09,1215.26 1268.68,1215.26 1269.26,1215.26 1269.85,1215.26 1270.44,1215.26 1271.02,1215.26 1271.61,1215.26 1272.19,1215.26 1272.78,1215.26 1273.37,1215.26 1273.95,1215.26 1274.54,1215.26 1275.13,1215.26 1275.71,1215.26 1276.3,1215.26 1276.89,1215.26 1277.47,1215.26 1278.06,1215.26 1278.65,1215.26 1279.23,1215.26 1279.82,1215.26 1280.4,1215.26 1280.99,1215.26 1281.58,1215.26 1282.16,1215.26 1282.75,1215.26 1283.34,1215.26 1283.92,1215.26 1284.51,1215.26 1285.1,1215.26 1285.68,1215.26 1286.27,1215.26 1286.86,1215.26 1287.44,1215.26 1288.03,1215.26 1288.61,1215.26 1289.2,1215.26 1289.79,1215.26 1290.37,1215.26 1290.96,1215.26 1291.55,1215.26 1292.13,1215.26 1292.72,1215.26 1293.31,1215.26 1293.89,1215.26 1294.48,1215.26 1295.06,1215.26 1295.65,1215.26 1296.24,1215.26 1296.82,1215.26 1297.41,1215.26 1298,1215.26 1298.58,1215.26 1299.17,1215.26 1299.76,1215.26 1300.34,1215.26 1300.93,1215.26 1301.52,1215.26 1302.1,1215.26 1302.69,1215.26 1303.27,1215.26 1303.86,1215.26 1304.45,1215.26 1305.03,1215.26 1305.62,1215.26 1306.21,1215.26 1306.79,1215.26 1307.38,1215.26 1307.97,1215.26 1308.55,1215.26 1309.14,1215.26 1309.73,1215.26 1310.31,1215.26 1310.9,1215.26 1311.48,1215.26 1312.07,1215.26 1312.66,1215.26 1313.24,1215.26 1313.83,1215.26 1314.42,1215.26 1315,1215.26 1315.59,1215.26 1316.18,1215.26 1316.76,1215.26 1317.35,1215.26 1317.93,1215.26 1318.52,1215.26 1319.11,1215.26 1319.69,1215.26 1320.28,1215.26 1320.87,1215.26 1321.45,1215.26 1322.04,1215.26 1322.63,1215.26 1323.21,1215.26 1323.8,1215.26 1324.39,1215.26 1324.97,1215.26 1325.56,1215.26 1326.14,1215.26 1326.73,1215.26 1327.32,1215.26 1327.9,1215.26 1328.49,1215.26 1329.08,1215.26 1329.66,1215.26 1330.25,1215.26 1330.84,1215.26 1331.42,1215.26 1332.01,1215.26 1332.6,1215.26 1333.18,1215.26 1333.77,1215.26 1334.35,1215.26 1334.94,1215.26 1335.53,1215.26 1336.11,1215.26 1336.7,1215.26 1337.29,1215.26 1337.87,1215.26 1338.46,1215.26 1339.05,1215.26 1339.63,1215.26 1340.22,1215.26 1340.8,1215.26 1341.39,1215.26 1341.98,1215.26 1342.56,1215.26 1343.15,1215.26 1343.74,1215.26 1344.32,1215.26 1344.91,1215.26 1345.5,1215.26 1346.08,1215.26 1346.67,1215.26 1347.26,1215.26 1347.84,1215.26 1348.43,1215.26 1349.01,1215.26 1349.6,1215.26 1350.19,1215.26 1350.77,1215.26 1351.36,1215.26 1351.95,1215.26 1352.53,1215.26 1353.12,1215.26 1353.71,1215.26 1354.29,1215.26 1354.88,1215.26 1355.47,1215.26 1356.05,1215.26 1356.64,1215.26 1357.22,1215.26 1357.81,1215.26 1358.4,1215.26 1358.98,1215.26 1359.57,1215.26 1360.16,1215.26 1360.74,1215.26 1361.33,1215.26 1361.92,1215.26 1362.5,1215.26 1363.09,1215.26 1363.68,1215.26 1364.26,1215.26 1364.85,1215.26 1365.43,1215.26 1366.02,1215.26 1366.61,1215.26 1367.19,1215.26 1367.78,1215.26 1368.37,1215.26 1368.95,1215.26 1369.54,1215.26 1370.13,1215.26 1370.71,1215.26 1371.3,1215.26 1371.88,1215.26 1372.47,1215.26 1373.06,1215.26 1373.64,1215.26 1374.23,1215.26 1374.82,1215.26 1375.4,1215.26 1375.99,1215.26 1376.58,1215.26 1377.16,1215.26 1377.75,1215.26 1378.34,1215.26 1378.92,1215.26 1379.51,1215.26 1380.09,1215.26 1380.68,1215.26 1381.27,1215.26 1381.85,1215.26 1382.44,1215.26 1383.03,1215.26 1383.61,1215.26 1384.2,1215.26 1384.79,1215.26 1385.37,1215.26 1385.96,1215.26 1386.55,1215.26 1387.13,1215.26 1387.72,1215.26 1388.3,1215.26 1388.89,1215.26 1389.48,1215.26 1390.06,1215.26 1390.65,1215.26 1391.24,1215.26 1391.82,1215.26 1392.41,1215.26 1393,1215.26 1393.58,1215.26 1394.17,1215.26 1394.75,1215.26 1395.34,1215.26 1395.93,1215.26 1396.51,1215.26 1397.1,1215.26 1397.69,1215.26 1398.27,1215.26 1398.86,1215.26 1399.45,1215.26 1400.03,1215.26 1400.62,1215.26 1401.21,1215.26 1401.79,1215.26 1402.38,1215.26 1402.96,1215.26 1403.55,1215.26 1404.14,1215.26 1404.72,1215.26 1405.31,1215.26 1405.9,1215.26 1406.48,1215.26 1407.07,1215.26 1407.66,1215.26 1408.24,1215.26 1408.83,1215.26 1409.42,1215.26 1410,1215.26 1410.59,1215.26 1411.17,1215.26 1411.76,1215.26 1412.35,1215.26 1412.93,1215.26 1413.52,1215.26 1414.11,1215.26 1414.69,1215.26 1415.28,1215.26 1415.87,1215.26 1416.45,1215.26 1417.04,1215.26 1417.63,1215.26 1418.21,1215.26 1418.8,1215.26 1419.38,1215.26 1419.97,1215.26 1420.56,1215.26 1421.14,1215.26 1421.73,1215.26 1422.32,1215.26 1422.9,1215.26 1423.49,1215.26 1424.08,1215.26 1424.66,1215.26 1425.25,1215.26 1425.83,1215.26 1426.42,1215.26 1427.01,1215.26 1427.59,1215.26 1428.18,1215.26 1428.77,1215.26 1429.35,1215.26 1429.94,1215.26 1430.53,1215.26 1431.11,1215.26 1431.7,1215.26 1432.29,1215.26 1432.87,1215.26 1433.46,1215.26 1434.04,1215.26 1434.63,1215.26 1435.22,1215.26 1435.8,1215.26 1436.39,1215.26 1436.98,1215.26 1437.56,1215.26 1438.15,1215.26 1438.74,1215.26 1439.32,1215.26 1439.91,1215.26 1440.5,1215.26 1441.08,1215.26 1441.67,1215.26 1442.25,1215.26 1442.84,1215.26 1443.43,1215.26 1444.01,1215.26 1444.6,1215.26 1445.19,1215.26 1445.77,1215.26 1446.36,1215.26 1446.95,1215.26 1447.53,1215.26 1448.12,1215.26 1448.7,1215.26 1449.29,1215.26 1449.88,1215.26 1450.46,1215.26 1451.05,1215.26 1451.64,1215.26 1452.22,1215.26 1452.81,1215.26 1453.4,1215.26 1453.98,1215.26 1454.57,1215.26 1455.16,1215.26 1455.74,1215.26 1456.33,1215.26 1456.91,1215.26 1457.5,1215.26 1458.09,1215.26 1458.67,1215.26 1459.26,1215.26 1459.85,1215.26 1460.43,1215.26 1461.02,1215.26 1461.61,1215.26 1462.19,1215.26 1462.78,1215.26 1463.37,1215.26 1463.95,1215.26 1464.54,1215.26 1465.12,1215.26 1465.71,1215.26 1466.3,1215.26 1466.88,1215.26 1467.47,1215.26 1468.06,1215.26 1468.64,1215.26 1469.23,1215.26 1469.82,1215.26 1470.4,1215.26 1470.99,1215.26 1471.57,1215.26 1472.16,1215.26 1472.75,1215.26 1473.33,1215.26 1473.92,1215.26 1474.51,1215.26 1475.09,1215.26 1475.68,1215.26 1476.27,1215.26 1476.85,1215.26 1477.44,1215.26 1478.03,1215.26 1478.61,1215.26 1479.2,1215.26 1479.78,1215.26 1480.37,1215.26 1480.96,1215.26 1481.54,1215.26 1482.13,1215.26 1482.72,1215.26 1483.3,1215.26 1483.89,1215.26 1484.48,1215.26 1485.06,1215.26 1485.65,1215.26 1486.24,1215.26 1486.82,1215.26 1487.41,1215.26 1487.99,1215.26 1488.58,1215.26 1489.17,1215.26 1489.75,1215.26 1490.34,1215.26 1490.93,1215.26 1491.51,1215.26 1492.1,1215.26 1492.69,1215.26 1493.27,1215.26 1493.86,1215.26 1494.45,1215.26 1495.03,1215.26 1495.62,1215.26 1496.2,1215.26 1496.79,1215.26 1497.38,1215.26 1497.96,1215.26 1498.55,1215.26 1499.14,1215.26 1499.72,1215.26 1500.31,1215.26 1500.9,1215.26 1501.48,1215.26 1502.07,1215.26 1502.65,1215.26 1503.24,1215.26 1503.83,1215.26 1504.41,1215.26 1505,1215.26 1505.59,1215.26 1506.17,1215.26 1506.76,1215.26 1507.35,1215.26 1507.93,1215.26 1508.52,1215.26 1509.11,1215.26 1509.69,1215.26 1510.28,1215.26 1510.86,1215.26 1511.45,1215.26 1512.04,1215.26 1512.62,1215.26 1513.21,1215.26 1513.8,1215.26 1514.38,1215.26 1514.97,1215.26 1515.56,1215.26 1516.14,1215.26 1516.73,1215.26 1517.32,1215.26 1517.9,1215.26 1518.49,1215.26 1519.07,1215.26 1519.66,1215.26 1520.25,1215.26 1520.83,1215.26 1521.42,1215.26 1522.01,1215.26 1522.59,1215.26 1523.18,1215.26 1523.77,1215.26 1524.35,1215.26 1524.94,1215.26 1525.52,1215.26 1526.11,1215.26 1526.7,1215.26 1527.28,1215.26 1527.87,1215.26 1528.46,1215.26 1529.04,1215.26 1529.63,1215.26 1530.22,1215.26 1530.8,1215.26 1531.39,1215.26 1531.98,1215.26 1532.56,1215.26 1533.15,1215.26 1533.73,1215.26 1534.32,1215.26 1534.91,1215.26 1535.49,1215.26 1536.08,1215.26 1536.67,1215.26 1537.25,1215.26 1537.84,1215.26 1538.43,1215.26 1539.01,1215.26 1539.6,1215.26 1540.19,1215.26 1540.77,1215.26 1541.36,1215.26 1541.94,1215.26 1542.53,1215.26 1543.12,1215.26 1543.7,1215.26 1544.29,1215.26 1544.88,1215.26 1545.46,1215.26 1546.05,1215.26 1546.64,1215.26 1547.22,1215.26 1547.81,1215.26 1548.4,1215.26 1548.98,1215.26 1549.57,1215.26 1550.15,1215.26 1550.74,1215.26 1551.33,1215.26 1551.91,1215.26 1552.5,1215.26 1553.09,1215.26 1553.67,1215.26 1554.26,1215.26 1554.85,1215.26 1555.43,1215.26 1556.02,1215.26 1556.6,1215.26 1557.19,1215.26 1557.78,1215.26 1558.36,1215.26 1558.95,1215.26 1559.54,1215.26 1560.12,1215.26 1560.71,1215.26 1561.3,1215.26 1561.88,1215.26 1562.47,1215.26 1563.06,1215.26 1563.64,1215.26 1564.23,1215.26 1564.81,1215.26 1565.4,1215.26 1565.99,1215.26 1566.57,1215.26 1567.16,1215.26 1567.75,1215.26 1568.33,1215.26 1568.92,1215.26 1569.51,1215.26 1570.09,1215.26 1570.68,1215.26 1571.27,1215.26 1571.85,1215.26 1572.44,1215.26 1573.02,1215.26 1573.61,1215.26 1574.2,1215.26 1574.78,1215.26 1575.37,1215.26 1575.96,1215.26 1576.54,1215.26 1577.13,1215.26 1577.72,1215.26 1578.3,1215.26 1578.89,1215.26 1579.47,1215.26 1580.06,1215.26 1580.65,1215.26 1581.23,1215.26 1581.82,1215.26 1582.41,1215.26 1582.99,1215.26 1583.58,1215.26 1584.17,1215.26 1584.75,1215.26 1585.34,1215.26 1585.93,1215.26 1586.51,1215.26 1587.1,1215.26 1587.68,1215.26 1588.27,1215.26 1588.86,1215.26 1589.44,1215.26 1590.03,1215.26 1590.62,1215.26 1591.2,1215.26 1591.79,1215.26 1592.38,1215.26 1592.96,1215.26 1593.55,1215.26 1594.14,1215.26 1594.72,1215.26 1595.31,1215.26 1595.89,1215.26 1596.48,1215.26 1597.07,1215.26 1597.65,1215.26 1598.24,1215.26 1598.83,1215.26 1599.41,1215.26 1600,1215.26 1600.59,1215.26 1601.17,1215.26 1601.76,1215.26 1602.34,1215.26 1602.93,1215.26 1603.52,1215.26 1604.1,1215.26 1604.69,1215.26 1605.28,1215.26 1605.86,1215.26 1606.45,1215.26 1607.04,1215.26 1607.62,1215.26 1608.21,1215.26 1608.8,1215.26 1609.38,1215.26 1609.97,1215.26 1610.55,1215.26 1611.14,1215.26 1611.73,1215.26 1612.31,1215.26 1612.9,1215.26 1613.49,1215.26 1614.07,1215.26 1614.66,1215.26 1615.25,1215.26 1615.83,1215.26 1616.42,1215.26 1617.01,1215.26 1617.59,1215.26 1618.18,1215.26 1618.76,1215.26 1619.35,1215.26 1619.94,1215.26 1620.52,1215.26 1621.11,1215.26 1621.7,1215.26 1622.28,1215.26 1622.87,1215.26 1623.46,1215.26 1624.04,1215.26 1624.63,1215.26 1625.22,1215.26 1625.8,1215.26 1626.39,1215.26 1626.97,1215.26 1627.56,1215.26 1628.15,1215.26 1628.73,1215.26 1629.32,1215.26 1629.91,1215.26 1630.49,1215.26 1631.08,1215.26 1631.67,1215.26 1632.25,1215.26 1632.84,1215.26 1633.42,1215.26 1634.01,1215.26 1634.6,1215.26 1635.18,1215.26 1635.77,1215.26 1636.36,1215.26 1636.94,1215.26 1637.53,1215.26 1638.12,1215.26 1638.7,1215.26 1639.29,1215.26 1639.88,1215.26 1640.46,1215.26 1641.05,1215.26 1641.63,1215.26 1642.22,1215.26 1642.81,1215.26 1643.39,1215.26 1643.98,1215.26 1644.57,1215.26 1645.15,1215.26 1645.74,1215.26 1646.33,1215.26 1646.91,1215.26 1647.5,1215.26 1648.09,1215.26 1648.67,1215.26 1649.26,1215.26 1649.84,1215.26 1650.43,1215.26 1651.02,1215.26 1651.6,1215.26 1652.19,1215.26 1652.78,1215.26 1653.36,1215.26 1653.95,1215.26 1654.54,1215.26 1655.12,1215.26 1655.71,1215.26 1656.29,1215.26 1656.88,1215.26 1657.47,1215.26 1658.05,1215.26 1658.64,1215.26 1659.23,1215.26 1659.81,1215.26 1660.4,1215.26 1660.99,1215.26 1661.57,1215.26 1662.16,1215.26 1662.75,1215.26 1663.33,1215.26 1663.92,1215.26 1664.5,1215.26 1665.09,1215.26 1665.68,1215.26 1666.26,1215.26 1666.85,1215.26 1667.44,1215.26 1668.02,1215.26 1668.61,1215.26 1669.2,1215.26 1669.78,1215.26 1670.37,1215.26 1670.96,1215.26 1671.54,1215.26 1672.13,1215.26 1672.71,1215.26 1673.3,1215.26 1673.89,1215.26 1674.47,1215.26 1675.06,1215.26 1675.65,1215.26 1676.23,1215.26 1676.82,1215.26 1677.41,1215.26 1677.99,1215.26 1678.58,1215.26 1679.17,1215.26 1679.75,1215.26 1680.34,1215.26 1680.92,1215.26 1681.51,1215.26 1682.1,1215.26 1682.68,1215.26 1683.27,1215.26 1683.86,1215.26 1684.44,1215.26 1685.03,1215.26 1685.62,1215.26 1686.2,1215.26 1686.79,1215.26 1687.37,1215.26 1687.96,1215.26 1688.55,1215.26 1689.13,1215.26 1689.72,1215.26 1690.31,1215.26 1690.89,1215.26 1691.48,1215.26 1692.07,1215.26 1692.65,1215.26 1693.24,1215.26 1693.83,1215.26 1694.41,1215.26 1695,1215.26 1695.58,1215.26 1696.17,1215.26 1696.76,1215.26 1697.34,1215.26 1697.93,1215.26 1698.52,1215.26 1699.1,1215.26 1699.69,1215.26 1700.28,1215.26 1700.86,1215.26 1701.45,1215.26 1702.04,1215.26 1702.62,1215.26 1703.21,1215.26 1703.79,1215.26 1704.38,1215.26 1704.97,1215.26 1705.55,1215.26 1706.14,1215.26 1706.73,1215.26 1707.31,1215.26 1707.9,1215.26 1708.49,1215.26 1709.07,1215.26 1709.66,1215.26 1710.24,1215.26 1710.83,1215.26 1711.42,1215.26 1712,1215.26 1712.59,1215.26 1713.18,1215.26 1713.76,1215.26 1714.35,1215.26 1714.94,1215.26 1715.52,1215.26 1716.11,1215.26 1716.7,1215.26 1717.28,1215.26 1717.87,1215.26 1718.45,1215.26 1719.04,1215.26 1719.63,1215.26 1720.21,1215.26 1720.8,1215.26 1721.39,1215.26 1721.97,1215.26 1722.56,1215.26 1723.15,1215.26 1723.73,1215.26 1724.32,1215.26 1724.91,1215.26 1725.49,1215.26 1726.08,1215.26 1726.66,1215.26 1727.25,1215.26 1727.84,1215.26 1728.42,1215.26 1729.01,1215.26 1729.6,1215.26 1730.18,1215.26 1730.77,1215.26 1731.36,1215.26 1731.94,1215.26 1732.53,1215.26 1733.11,1215.26 1733.7,1215.26 1734.29,1215.26 1734.87,1215.26 1735.46,1215.26 1736.05,1215.26 1736.63,1215.26 1737.22,1215.26 1737.81,1215.26 1738.39,1215.26 1738.98,1215.26 1739.57,1215.26 1740.15,1215.26 1740.74,1215.26 1741.32,1215.26 1741.91,1215.26 1742.5,1215.26 1743.08,1215.26 1743.67,1215.26 1744.26,1215.26 1744.84,1215.26 1745.43,1215.26 1746.02,1215.26 1746.6,1215.26 1747.19,1215.26 1747.78,1215.26 1748.36,1215.26 1748.95,1215.26 1749.53,1215.26 1750.12,1215.26 1750.71,1215.26 1751.29,1215.26 1751.88,1215.26 1752.47,1215.26 1753.05,1215.26 1753.64,1215.26 1754.23,1215.26 1754.81,1215.26 1755.4,1215.26 1755.99,1215.26 1756.57,1215.26 1757.16,1215.26 1757.74,1215.26 1758.33,1215.26 1758.92,1215.26 1759.5,1215.26 1760.09,1215.26 1760.68,1215.26 1761.26,1215.26 1761.85,1215.26 1762.44,1215.26 1763.02,1215.26 1763.61,1215.26 1764.19,1215.26 1764.78,1215.26 1765.37,1215.26 1765.95,1215.26 1766.54,1215.26 1767.13,1215.26 1767.71,1215.26 1768.3,1215.26 1768.89,1215.26 1769.47,1215.26 1770.06,1215.26 1770.65,1215.26 1771.23,1215.26 1771.82,1215.26 1772.4,1215.26 1772.99,1215.26 1773.58,1215.26 1774.16,1215.26 1774.75,1215.26 1775.34,1215.26 1775.92,1215.26 1776.51,1215.26 1777.1,1215.26 1777.68,1215.26 1778.27,1215.26 1778.86,1215.26 1779.44,1215.26 1780.03,1215.26 1780.61,1215.26 1781.2,1215.26 1781.79,1215.26 1782.37,1215.26 1782.96,1215.26 1783.55,1215.26 1784.13,1215.26 1784.72,1215.26 1785.31,1215.26 1785.89,1215.26 1786.48,1215.26 1787.06,1215.26 1787.65,1215.26 1788.24,1215.26 1788.82,1215.26 1789.41,1215.26 1790,1215.26 1790.58,1215.26 1791.17,1215.26 1791.76,1215.26 1792.34,1215.26 1792.93,1215.26 1793.52,1215.26 1794.1,1215.26 1794.69,1215.26 1795.27,1215.26 1795.86,1215.26 1796.45,1215.26 1797.03,1215.26 1797.62,1215.26 1798.21,1215.26 1798.79,1215.26 1799.38,1215.26 1799.97,1215.26 1800.55,1215.26 1801.14,1215.26 1801.73,1215.26 1802.31,1215.26 1802.9,1215.26 1803.48,1215.26 1804.07,1215.26 1804.66,1215.26 1805.24,1215.26 1805.83,1215.26 1806.42,1215.26 1807,1215.26 1807.59,1215.26 1808.18,1215.26 1808.76,1215.26 1809.35,1215.26 1809.94,1215.26 1810.52,1215.26 1811.11,1215.26 1811.69,1215.26 1812.28,1215.26 1812.87,1215.26 1813.45,1215.26 1814.04,1215.26 1814.63,1215.26 1815.21,1215.26 1815.8,1215.26 1816.39,1215.26 1816.97,1215.26 1817.56,1215.26 1818.14,1215.26 1818.73,1215.26 1819.32,1215.26 1819.9,1215.26 1820.49,1215.26 1821.08,1215.26 1821.66,1215.26 1822.25,1215.26 1822.84,1215.26 1823.42,1215.26 1824.01,1215.26 1824.6,1215.26 1825.18,1215.26 1825.77,1215.26 1826.35,1215.26 1826.94,1215.26 1827.53,1215.26 1828.11,1215.26 1828.7,1215.26 1829.29,1215.26 1829.87,1215.26 1830.46,1215.26 1831.05,1215.26 1831.63,1215.26 1832.22,1215.26 1832.81,1215.26 1833.39,1215.26 1833.98,1215.26 1834.56,1215.26 1835.15,1215.26 1835.74,1215.26 1836.32,1215.26 1836.91,1215.26 1837.5,1215.26 1838.08,1215.26 1838.67,1215.26 1839.26,1215.26 1839.84,1215.26 1840.43,1215.26 1841.01,1215.26 1841.6,1215.26 1842.19,1215.26 1842.77,1215.26 1843.36,1215.26 1843.95,1215.26 1844.53,1215.26 1845.12,1215.26 1845.71,1215.26 1846.29,1215.26 1846.88,1215.26 1847.47,1215.26 1848.05,1215.26 1848.64,1215.26 1849.22,1215.26 1849.81,1215.26 1850.4,1215.26 1850.98,1215.26 1851.57,1215.26 1852.16,1215.26 1852.74,1215.26 1853.33,1215.26 1853.92,1215.26 1854.5,1215.26 1855.09,1215.26 1855.68,1215.26 1856.26,1215.26 1856.85,1215.26 1857.43,1215.26 1858.02,1215.26 1858.61,1215.26 1859.19,1215.26 1859.78,1215.26 1860.37,1215.26 1860.95,1215.26 1861.54,1215.26 1862.13,1215.26 1862.71,1215.26 1863.3,1215.26 1863.88,1215.26 1864.47,1215.26 1865.06,1215.26 1865.64,1215.26 1866.23,1215.26 1866.82,1215.26 1867.4,1215.26 1867.99,1215.26 1868.58,1215.26 1869.16,1215.26 1869.75,1215.26 1870.34,1215.26 1870.92,1215.26 1871.51,1215.26 1872.09,1215.26 1872.68,1215.26 1873.27,1215.26 1873.85,1215.26 1874.44,1215.26 1875.03,1215.26 1875.61,1215.26 1876.2,1215.26 1876.79,1215.26 1877.37,1215.26 1877.96,1215.26 1878.55,1215.26 1879.13,1215.26 1879.72,1215.26 1880.3,1215.26 1880.89,1215.26 1881.48,1215.26 1882.06,1215.26 1882.65,1215.26 1883.24,1215.26 1883.82,1215.26 1884.41,1215.26 1885,1215.26 1885.58,1215.26 1886.17,1215.26 1886.76,1215.26 1887.34,1215.26 1887.93,1215.26 1888.51,1215.26 1889.1,1215.26 1889.69,1215.26 1890.27,1215.26 1890.86,1215.26 1891.45,1215.26 1892.03,1215.26 1892.62,1215.26 1893.21,1215.26 1893.79,1215.26 1894.38,1215.26 1894.96,1215.26 1895.55,1215.26 1896.14,1215.26 1896.72,1215.26 1897.31,1215.26 1897.9,1215.26 1898.48,1215.26 1899.07,1215.26 1899.66,1215.26 1900.24,1215.26 1900.83,1215.26 1901.42,1215.26 1902,1215.26 1902.59,1215.26 1903.17,1215.26 1903.76,1215.26 1904.35,1215.26 1904.93,1215.26 1905.52,1215.26 1906.11,1215.26 1906.69,1215.26 1907.28,1215.26 1907.87,1215.26 1908.45,1215.26 1909.04,1215.26 1909.63,1215.26 1910.21,1215.26 1910.8,1215.26 1911.38,1215.26 1911.97,1215.26 1912.56,1215.26 1913.14,1215.26 1913.73,1215.26 1914.32,1215.26 1914.9,1215.26 1915.49,1215.26 1916.08,1215.26 1916.66,1215.26 1917.25,1215.26 1917.83,1215.26 1918.42,1215.26 1919.01,1215.26 1919.59,1215.26 1920.18,1215.26 1920.77,1215.26 1921.35,1215.26 1921.94,1215.26 1922.53,1215.26 1923.11,1215.26 1923.7,1215.26 1924.29,1215.26 1924.87,1215.26 1925.46,1215.26 1926.04,1215.26 1926.63,1215.26 1927.22,1215.26 1927.8,1215.26 1928.39,1215.26 1928.98,1215.26 1929.56,1215.26 1930.15,1215.26 1930.74,1215.26 1931.32,1215.26 1931.91,1215.26 1932.5,1215.26 1933.08,1215.26 1933.67,1215.26 1934.25,1215.26 1934.84,1215.26 1935.43,1215.26 1936.01,1215.26 1936.6,1215.26 1937.19,1215.26 1937.77,1215.26 1938.36,1215.26 1938.95,1215.26 1939.53,1215.26 1940.12,1215.26 1940.71,1215.26 1941.29,1215.26 1941.88,1215.26 1942.46,1215.26 1943.05,1215.26 1943.64,1215.26 1944.22,1215.26 1944.81,1215.26 1945.4,1215.26 1945.98,1215.26 1946.57,1215.26 1947.16,1215.26 1947.74,1215.26 1948.33,1215.26 1948.91,1215.26 1949.5,1215.26 1950.09,1215.26 1950.67,1215.26 1951.26,1215.26 1951.85,1215.26 1952.43,1215.26 1953.02,1215.26 1953.61,1215.26 1954.19,1215.26 1954.78,1215.26 1955.37,1215.26 1955.95,1215.26 1956.54,1215.26 1957.12,1215.26 1957.71,1215.26 1958.3,1215.26 1958.88,1215.26 1959.47,1215.26 1960.06,1215.26 1960.64,1215.26 1961.23,1215.26 1961.82,1215.26 1962.4,1215.26 1962.99,1215.26 1963.58,1215.26 1964.16,1215.26 1964.75,1215.26 1965.33,1215.26 1965.92,1215.26 1966.51,1215.26 1967.09,1215.26 1967.68,1215.26 1968.27,1215.26 1968.85,1215.26 1969.44,1215.26 1970.03,1215.26 1970.61,1215.26 1971.2,1215.26 1971.78,1215.26 1972.37,1215.26 1972.96,1215.26 1973.54,1215.26 1974.13,1215.26 1974.72,1215.26 1975.3,1215.26 1975.89,1215.26 1976.48,1215.26 1977.06,1215.26 1977.65,1215.26 1978.24,1215.26 1978.82,1215.26 1979.41,1215.26 1979.99,1215.26 1980.58,1215.26 1981.17,1215.26 1981.75,1215.26 1982.34,1215.26 1982.93,1215.26 1983.51,1215.26 1984.1,1215.26 1984.69,1215.26 1985.27,1215.26 1985.86,1215.26 1986.45,1215.26 1987.03,1215.26 1987.62,1215.26 1988.2,1215.26 1988.79,1215.26 1989.38,1215.26 1989.96,1215.26 1990.55,1215.26 1991.14,1215.26 1991.72,1215.26 1992.31,1215.26 1992.9,1215.26 1993.48,1215.26 1994.07,1215.26 1994.65,1215.26 1995.24,1215.26 1995.83,1215.26 1996.41,1215.26 1997,1215.26 1997.59,1215.26 1998.17,1215.26 1998.76,1215.26 1999.35,1215.26 1999.93,1215.26 2000.52,1215.26 2001.11,1215.26 2001.69,1215.26 2002.28,1215.26 2002.86,1215.26 2003.45,1215.26 2004.04,1215.26 2004.62,1215.26 2005.21,1215.26 2005.8,1215.26 2006.38,1215.26 2006.97,1215.26 2007.56,1215.26 2008.14,1215.26 2008.73,1215.26 2009.32,1215.26 2009.9,1215.26 2010.49,1215.26 2011.07,1215.26 2011.66,1215.26 2012.25,1215.26 2012.83,1215.26 2013.42,1215.26 2014.01,1215.26 2014.59,1215.26 2015.18,1215.26 2015.77,1215.26 2016.35,1215.26 2016.94,1215.26 2017.53,1215.26 2018.11,1215.26 2018.7,1215.26 2019.28,1215.26 2019.87,1215.26 2020.46,1215.26 2021.04,1215.26 2021.63,1215.26 2022.22,1215.26 2022.8,1215.26 2023.39,1215.26 2023.98,1215.26 2024.56,1215.26 2025.15,1215.26 2025.73,1215.26 2026.32,1215.26 2026.91,1215.26 2027.49,1215.26 2028.08,1215.26 2028.67,1215.26 2029.25,1215.26 2029.84,1215.26 2030.43,1215.26 2031.01,1215.26 2031.6,1215.26 2032.19,1215.26 2032.77,1215.26 2033.36,1215.26 2033.94,1215.26 2034.53,1215.26 2035.12,1215.26 2035.7,1215.26 2036.29,1215.26 2036.88,1215.26 2037.46,1215.26 2038.05,1215.26 2038.64,1215.26 2039.22,1215.26 2039.81,1215.26 2040.4,1215.26 2040.98,1215.26 2041.57,1215.26 2042.15,1215.26 2042.74,1215.26 2043.33,1215.26 2043.91,1215.26 2044.5,1215.26 2045.09,1215.26 2045.67,1215.26 2046.26,1215.26 2046.85,1215.26 2047.43,1215.26 2048.02,1215.26 2048.6,1215.26 2049.19,1215.26 2049.78,1215.26 2050.36,1215.26 2050.95,1215.26 2051.54,1215.26 2052.12,1215.26 2052.71,1215.26 2053.3,1215.26 2053.88,1215.26 2054.47,1215.26 2055.06,1215.26 2055.64,1215.26 2056.23,1215.26 2056.81,1215.26 2057.4,1215.26 2057.99,1215.26 2058.57,1215.26 2059.16,1215.26 2059.75,1215.26 2060.33,1215.26 2060.92,1215.26 2061.51,1215.26 2062.09,1215.26 2062.68,1215.26 2063.27,1215.26 2063.85,1215.26 2064.44,1215.26 2065.02,1215.26 2065.61,1215.26 2066.2,1215.26 2066.78,1215.26 2067.37,1215.26 2067.96,1215.26 2068.54,1215.26 2069.13,1215.26 2069.72,1215.26 2070.3,1215.26 2070.89,1215.26 2071.48,1215.26 2072.06,1215.26 2072.65,1215.26 2073.23,1215.26 2073.82,1215.26 2074.41,1215.26 2074.99,1215.26 2075.58,1215.26 2076.17,1215.26 2076.75,1215.26 2077.34,1215.26 2077.93,1215.26 2078.51,1215.26 2079.1,1215.26 2079.68,1215.26 2080.27,1215.26 2080.86,1215.26 2081.44,1215.26 2082.03,1215.26 2082.62,1215.26 2083.2,1215.26 2083.79,1215.26 2084.38,1215.26 2084.96,1215.26 2085.55,1215.26 2086.14,1215.26 2086.72,1215.26 2087.31,1215.26 2087.89,1215.26 2088.48,1215.26 2089.07,1215.26 2089.65,1215.26 2090.24,1215.26 2090.83,1215.26 2091.41,1215.26 2092,1215.26 2092.59,1215.26 2093.17,1215.26 2093.76,1215.26 2094.35,1215.26 2094.93,1215.26 2095.52,1215.26 2096.1,1215.26 2096.69,1215.26 2097.28,1215.26 2097.86,1215.26 2098.45,1215.26 2099.04,1215.26 2099.62,1215.26 2100.21,1215.26 2100.8,1215.26 2101.38,1215.26 2101.97,1215.26 2102.55,1215.26 2103.14,1215.26 2103.73,1215.26 2104.31,1215.26 2104.9,1215.26 2105.49,1215.26 2106.07,1215.26 2106.66,1215.26 2107.25,1215.26 2107.83,1215.26 2108.42,1215.26 2109.01,1215.26 2109.59,1215.26 2110.18,1215.26 2110.76,1215.26 2111.35,1215.26 2111.94,1215.26 2112.52,1215.26 2113.11,1215.26 2113.7,1215.26 2114.28,1215.26 2114.87,1215.26 2115.46,1215.26 2116.04,1215.26 2116.63,1215.26 2117.22,1215.26 2117.8,1215.26 2118.39,1215.26 2118.97,1215.26 2119.56,1215.26 2120.15,1215.26 2120.73,1215.26 2121.32,1215.26 2121.91,1215.26 2122.49,1215.26 2123.08,1215.26 2123.67,1215.26 2124.25,1215.26 2124.84,1215.26 2125.42,1215.26 2126.01,1215.26 2126.6,1215.26 2127.18,1215.26 2127.77,1215.26 2128.36,1215.26 2128.94,1215.26 2129.53,1215.26 2130.12,1215.26 2130.7,1215.26 2131.29,1215.26 2131.88,1215.26 2132.46,1215.26 2133.05,1215.26 2133.63,1215.26 2134.22,1215.26 2134.81,1215.26 2135.39,1215.26 2135.98,1215.26 2136.57,1215.26 2137.15,1215.26 2137.74,1215.26 2138.33,1215.26 2138.91,1215.26 2139.5,1215.26 2140.09,1215.26 2140.67,1215.26 2141.26,1215.26 2141.84,1215.26 2142.43,1215.26 2143.02,1215.26 2143.6,1215.26 2144.19,1215.26 2144.78,1215.26 2145.36,1215.26 2145.95,1215.26 2146.54,1215.26 2147.12,1215.26 2147.71,1215.26 2148.3,1215.26 2148.88,1215.26 2149.47,1215.26 2150.05,1215.26 2150.64,1215.26 2151.23,1215.26 2151.81,1215.26 2152.4,1215.26 2152.99,1215.26 2153.57,1215.26 2154.16,1215.26 2154.75,1215.26 2155.33,1215.26 2155.92,1215.26 2156.5,1215.26 2157.09,1215.26 2157.68,1215.26 2158.26,1215.26 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1563.19,1199.22 1398.69,899.083 \"/>\n<polyline clip-path=\"url(#clip802)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1230.84 985.439,1199.22 2158.26,1199.22 2158.26,1230.84 985.439,1230.84 \"/>\n<path clip-path=\"url(#clip800)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip800)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip800)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip800)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip800)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip800)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip803\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip803)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip803)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip803)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip803)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip803)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip803)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip803)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip803)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip803)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip803)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip800)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip800)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip800)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip800)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip803)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-9047.34 166.588,-9677.06 167.147,-10227.8 167.706,-10736.1 168.266,-11173 168.825,-11575.1 169.384,-11928.8 169.943,-12237.2 170.503,-12503.4 171.062,-12730.1 171.621,-12920.1 172.18,-13075.7 172.74,-12066.9 173.299,-12179.4 173.858,-12272.6 174.417,-12338.5 174.977,-12388 175.536,-12010.5 176.095,-12018.4 176.655,-12000.9 177.214,-11970.8 177.773,-11627 178.332,-11014.3 178.892,-10941.1 179.451,-10853.9 180.01,-10757.2 180.569,-10436.5 181.129,-10324.1 181.688,-10199 182.247,-10071.1 182.806,-9929.37 183.366,-9461 183.925,-9185.27 184.484,-8923.47 185.043,-8659.83 185.603,-8516.06 186.162,-8130.61 186.721,-7773.64 187.28,-7336.62 187.84,-7210.74 188.399,-6987.63 188.958,-6872.56 189.517,-6741.43 190.077,-6530.09 190.636,-6388.46 191.195,-6249.98 191.754,-6045.92 192.314,-5912.84 192.873,-5712.25 193.432,-5514.39 193.991,-5387.38 194.551,-5078.98 195.11,-4900.18 195.669,-4783.78 196.228,-4619.65 196.788,-4454.01 197.347,-4295.79 197.906,-4043.13 198.465,-3897.05 199.025,-3757.02 199.584,-3657.6 200.143,-3519.45 200.702,-3388.64 201.262,-3216.22 201.821,-3013.45 202.38,-2891.36 202.939,-2776.9 203.499,-2664.48 204.058,-2408.52 204.617,-2309.55 205.176,-2137.69 205.736,-2041.6 206.295,-1948.45 206.854,-1820.31 207.413,-1730.28 207.973,-1518.26 208.532,-1437.83 209.091,-1364.05 209.65,-1256.75 210.21,-1214.82 210.769,-1169.25 211.328,-1096.75 211.887,-968.929 212.447,-900.47 213.006,-835.806 213.565,-747.812 214.124,-686.618 214.684,-548.803 215.243,-495.144 215.802,-422.069 216.361,-368.766 216.921,-267.191 217.48,-241.369 218.039,-195.798 218.598,-171.207 219.158,-149.759 219.717,-127.212 220.276,-81.9786 220.835,4.22455 221.395,47.7619 221.954,89.872 222.513,170.637 223.072,206.721 223.632,243.827 224.191,257.883 224.75,247.673 225.309,285.29 225.869,296.691 226.428,306.185 226.987,382.369 227.546,395.028 228.106,429.337 228.665,460.233 229.224,447.112 229.783,495.574 230.343,521.825 230.902,530.762 231.461,582.179 232.02,588.009 232.58,610.719 233.139,633.123 233.698,635.777 234.257,680.812 234.817,680.657 235.376,723.34 235.935,726.912 236.494,706.995 237.054,712.273 237.613,729.632 238.172,749.772 238.731,792.98 239.291,849.514 239.85,848.651 240.409,866.754 240.968,884.995 241.528,887.014 242.087,915.366 242.646,949.793 243.205,942.777 243.765,914.225 244.324,949.766 244.883,947.911 245.442,944.942 246.002,940.65 246.561,933.933 247.12,932.764 247.679,914.205 248.239,898.113 248.798,897.574 249.357,898.307 249.916,883.339 250.476,900.811 251.035,920.299 251.594,935.019 252.153,947.901 252.713,982.199 253.272,1034.11 253.831,1046.12 254.39,1071.45 254.95,1096.98 255.509,1087.03 256.068,1075.37 256.627,1072.23 257.187,1064.01 257.746,1056.53 258.305,1081.55 258.864,1091.8 259.424,1098.58 259.983,1142.69 260.542,1128.81 261.101,1135.41 261.661,1121.55 262.22,1129.98 262.779,1118.83 263.338,1129.13 263.898,1089.7 264.457,1115.25 265.016,1087.6 265.575,1093.14 266.135,1154.47 266.694,1144.18 267.253,1135.02 267.812,1143.29 268.372,1147.76 268.931,1171.31 269.49,1107 270.049,1115.21 270.609,1107.51 271.168,1095.55 271.727,1135.64 272.286,1144.48 272.846,1119.06 273.405,1093.2 273.964,1119.13 274.523,1122.95 275.083,1113.87 275.642,1105.83 276.201,1129.13 276.76,1137.28 277.32,1159.6 277.879,1133.02 278.438,1140.28 278.997,1144.83 279.557,1134.08 280.116,1156.2 280.675,1129.15 281.234,1103.5 281.794,1094.15 282.353,1072.09 282.912,1066.67 283.471,1125.18 284.031,1116.58 284.59,1110.94 285.149,1104.76 285.708,1079.87 286.268,1053.39 286.827,1079.39 287.386,1090.2 287.945,1083.1 288.505,1077.72 289.064,1087.25 289.623,1129.87 290.182,1102.6 290.742,1095.72 291.301,1086.12 291.86,1081.73 292.419,1072.27 292.979,1047.11 293.538,1058.89 294.097,1084.37 294.656,1079.13 295.216,1055.12 295.775,1095.15 296.334,1066.82 296.893,1074.3 297.453,1099.5 298.012,1073.69 298.571,1062.38 299.13,1068.25 299.69,1062.39 300.249,1043.36 300.808,1035.85 301.368,1011.78 301.927,1009.48 302.486,1002.94 303.045,978.522 303.605,961.18 304.164,960.968 304.723,974.401 305.282,936.7 305.842,968.718 306.401,1016.55 306.96,1027.72 307.519,1038.6 308.079,1013.09 308.638,1022.14 309.197,1031.24 309.756,1023.63 310.316,1032.01 310.875,1039.36 311.434,1065.71 311.993,1072.6 312.553,1079.4 313.112,1020.79 313.671,1016.6 314.23,994.521 314.79,1054.55 315.349,1045.38 315.908,1051.57 316.467,1042.52 317.027,1048.92 317.586,1022.49 318.145,1031.86 318.704,1038.68 319.264,1042.97 319.823,1017.45 320.382,1026.14 320.941,1034.45 321.501,1059.82 322.06,1082.28 322.619,1038.42 323.178,1015.66 323.738,1023.6 324.297,980.539 324.856,970.139 325.415,1000.49 325.975,1010.58 326.534,1001.91 327.093,978.666 327.652,1004.37 328.212,1016.23 328.771,1025.33 329.33,1032.24 329.889,1019.04 330.449,992.527 331.008,987.2 331.567,979.849 332.126,975.338 332.686,936.26 333.245,949.681 333.804,957.905 334.363,987.451 334.923,948.485 335.482,960.45 336.041,987.711 336.6,964.097 337.16,958.675 337.719,969.536 338.278,950.226 338.837,943.427 339.397,938.51 339.956,935.544 340.515,933.031 341.074,928.337 341.634,959.619 342.193,905.901 342.752,855.415 343.311,890.894 343.871,937.021 344.43,933.307 344.989,942.186 345.548,968.646 346.108,966.131 346.667,927.262 347.226,923.734 347.785,950.469 348.345,975.806 348.904,985.432 349.463,974.855 350.022,983.412 350.582,972.938 351.141,979.26 351.7,969.098 352.259,929.768 352.819,924.85 353.378,966.272 353.937,962.615 354.496,926.226 355.056,941.316 355.615,966.461 356.174,974.333 356.733,931.684 357.293,927.15 357.852,953.107 358.411,946.565 358.97,954.979 359.53,931.905 360.089,921.944 360.648,884.499 361.207,863.949 361.767,833.24 362.326,797.885 362.885,781.675 363.444,801.258 364.004,784.727 364.563,787.217 365.122,753.253 365.681,756.339 366.241,821.189 366.8,818.046 367.359,802.412 367.918,804.306 368.478,756.582 369.037,760.598 369.596,764.635 370.155,752.681 370.715,774.333 371.274,791.972 371.833,776.931 372.392,828.914 372.952,807.316 373.511,825.938 374.07,777.584 374.629,760.688 375.189,747.309 375.748,753.275 376.307,810.213 376.866,829.128 377.426,842.638 377.985,841.419 378.544,823.162 379.103,822.164 379.663,867.049 380.222,879.444 380.781,843.86 381.34,825.582 381.9,839.653 382.459,837.353 383.018,818.745 383.577,866.492 384.137,943.094 384.696,952.701 385.255,941.092 385.814,933.181 386.374,958.4 386.933,937.446 387.492,932.241 388.051,895.049 388.611,873.914 389.17,886.256 389.729,893.167 390.288,885.019 390.848,851.381 391.407,894.747 391.966,889.126 392.525,882.19 393.085,890.707 393.644,886.167 394.203,929.615 394.762,906.714 395.322,946.57 395.881,951.086 396.44,928.258 396.999,921.843 397.559,899.14 398.118,894.398 398.677,918.381 399.236,926.744 399.796,938.535 400.355,931.715 400.914,937.701 401.473,928.905 402.033,904.153 402.592,940.903 403.151,935.174 403.71,942.559 404.27,934.842 404.829,892.174 405.388,866.777 405.947,862.188 406.507,823.912 407.066,808.495 407.625,807.166 408.184,792.243 408.744,838.634 409.303,786.467 409.862,783.742 410.421,735.051 410.981,739.28 411.54,739.998 412.099,740.409 412.658,725.87 413.218,762.162 413.777,744.958 414.336,762.678 414.895,762.6 415.455,762.999 416.014,797.671 416.573,793.992 417.132,779.211 417.692,781.146 418.251,781.545 418.81,780.425 419.369,799.473 419.929,828.957 420.488,775.334 421.047,775.451 421.606,760.894 422.166,761.702 422.725,746.635 423.284,746.618 423.843,766.222 424.403,781.755 424.962,779.335 425.521,776.541 426.08,757.138 426.64,756.891 427.199,750.995 427.758,768.005 428.318,800.823 428.877,816.988 429.436,814.306 429.995,796.264 430.555,760.921 431.114,761.655 431.673,729.466 432.232,750.143 432.792,800.394 433.351,800.9 433.91,797.531 434.469,810.139 435.029,820.31 435.588,799.022 436.147,800.181 436.706,798.933 437.266,793.561 437.825,809.76 438.384,841.573 438.943,837.574 439.503,850.921 440.062,865.177 440.621,862.17 441.18,874.578 441.74,869.047 442.299,880.348 442.858,861.358 443.417,853.242 443.977,879.116 444.536,871.432 445.095,865.055 445.654,894.38 446.214,858.274 446.773,853.166 447.332,848.93 447.891,845.331 448.451,869.612 449.01,830.976 449.569,793.305 450.128,761.091 450.688,761.999 451.247,779.921 451.806,761.234 452.365,761.193 452.925,742.569 453.484,726.549 454.043,728.454 454.602,697.997 455.162,666.402 455.721,700.944 456.28,721.296 456.839,737.015 457.399,768.534 457.958,819.238 458.517,782.844 459.076,795.958 459.636,776.96 460.195,793.2 460.754,742.124 461.313,776.262 461.873,776.263 462.432,787.297 462.991,771.015 463.55,772.016 464.11,769.867 464.669,736.147 465.228,738.524 465.787,738.728 466.347,789.515 466.906,787.592 467.465,800.494 468.024,797.518 468.584,812.315 469.143,810.392 469.702,775.966 470.261,824.943 470.821,803.323 471.38,799.57 471.939,794.884 472.498,756.922 473.058,737.553 473.617,768.322 474.176,782.823 474.735,781.065 475.295,731.008 475.854,735.106 476.413,719.354 476.972,704.521 477.532,692.603 478.091,695.958 478.65,652.196 479.209,658.963 479.769,694.218 480.328,694.096 480.887,701.363 481.446,703.287 482.006,721.421 482.565,720.099 483.124,736.957 483.683,724.821 484.243,706.615 484.802,707.302 485.361,692.692 485.92,690.606 486.48,678.034 487.039,682.616 487.598,683.837 488.157,687.431 488.717,706.242 489.276,723.366 489.835,756.475 490.394,769.61 490.954,782.993 491.513,778.276 492.072,745.156 492.631,734.276 493.191,716.08 493.75,686.561 494.309,688.804 494.868,673.31 495.428,679.241 495.987,729.609 496.546,763.412 497.105,747.086 497.665,748.619 498.224,750.316 498.783,735.553 499.342,735.429 499.902,749.924 500.461,767.371 501.02,768.103 501.579,752.851 502.139,737.135 502.698,739.299 503.257,740.796 503.816,742.976 504.376,761.387 504.935,760.476 505.494,760.054 506.053,743.766 506.613,725.982 507.172,725.873 507.731,726.722 508.29,709.975 508.85,694.697 509.409,698.803 509.968,715.334 510.527,734.802 511.087,750.576 511.646,731.552 512.205,748.612 512.764,714.561 513.324,749.369 513.883,734.732 514.442,716.4 515.001,750.292 515.561,737.914 516.12,752.244 516.679,764.632 517.238,777.854 517.798,760.451 518.357,758.279 518.916,770.353 519.475,753.618 520.035,756.856 520.594,786.702 521.153,801.643 521.712,783.121 522.272,827.198 522.831,820.855 523.39,833.245 523.949,829.367 524.509,810.307 525.068,805.495 525.627,845.876 526.186,840.993 526.746,864.866 527.305,827.141 527.864,848.199 528.423,856.823 528.983,868.641 529.542,846.538 530.101,838.769 530.66,832.262 531.22,826.378 531.779,838.479 532.338,847.118 532.897,837.779 533.457,830.776 534.016,823.958 534.575,784.931 535.134,767.972 535.694,766.589 536.253,781.973 536.812,781.896 537.371,779.689 537.931,776.21 538.49,787.689 539.049,800.184 539.608,781.818 540.168,828.363 540.727,806.848 541.286,801.801 541.845,811.545 542.405,821.404 542.964,831.981 543.523,810.817 544.082,806.512 544.642,798.482 545.201,794.07 545.76,773.014 546.319,767.72 546.879,746.837 547.438,744.841 547.997,723.071 548.556,755.346 549.116,765.137 549.675,729.669 550.234,743.534 550.793,726.12 551.353,725.562 551.912,677.017 552.471,677.635 553.031,664.154 553.59,652.261 554.149,671.779 554.708,672.786 555.268,673.727 555.827,709.265 556.386,711.248 556.945,740.418 557.505,739.84 558.064,786.122 558.623,781.671 559.182,793.24 559.742,806.824 560.301,803.038 560.86,811.021 561.419,821.334 561.979,813.671 562.538,804.758 563.097,784.014 563.656,748.899 564.216,747.779 564.775,714.666 565.334,714.122 565.893,742.665 566.453,758.061 567.012,740.45 567.571,770.749 568.13,736.166 568.69,751.424 569.249,749.883 569.808,797.928 570.367,780.882 570.927,747.632 571.486,710.687 572.045,708.904 572.604,708.249 573.164,677.047 573.723,694.986 574.282,708.656 574.841,725.547 575.401,824.358 575.96,819.161 576.519,750.221 577.078,696.745 577.638,697.85 578.197,696.014 578.756,682.517 579.315,667.377 579.875,686.886 580.434,672.095 580.993,689.039 581.552,690.604 582.112,725.657 582.671,726.407 583.23,723.373 583.789,711.719 584.349,714.773 584.908,700.222 585.467,687.265 586.026,689.939 586.586,710.169 587.145,710.732 587.704,708.904 588.263,754.961 588.823,706.311 589.382,722.427 589.941,721.863 590.5,720.948 591.06,734.158 591.619,703.149 592.178,737.191 592.737,718.474 593.297,719.778 593.856,734.577 594.415,700.621 594.974,687.171 595.534,655.2 596.093,657.281 596.652,695.239 597.211,677.437 597.771,663.152 598.33,651.898 598.889,654.884 599.448,642.159 600.008,645.355 600.567,664.536 601.126,680.671 601.685,662.368 602.245,664.1 602.804,665.022 603.363,667.884 603.922,671.044 604.482,653.084 605.041,643.339 605.6,661.559 606.159,597.159 606.719,588.024 607.278,629.224 607.837,633.503 608.396,640.132 608.956,679.025 609.515,625.92 610.074,596.301 610.633,602.572 611.193,641.43 611.752,657.016 612.311,658.759 612.87,629.551 613.43,648.092 613.989,698.771 614.548,731.496 615.107,733.242 615.667,717.193 616.226,736.132 616.785,734.331 617.344,728.544 617.904,696.867 618.463,700.186 619.022,699.796 619.581,684.171 620.141,702.526 620.7,688.177 621.259,687.895 621.818,638.416 622.378,626.703 622.937,597.865 623.496,618.359 624.055,624.498 624.615,611.629 625.174,599.131 625.733,603.234 626.292,560.492 626.852,584.79 627.411,590.768 627.97,595.582 628.529,585.85 629.089,595.237 629.648,635.535 630.207,669.406 630.766,658.676 631.326,706.495 631.885,741.452 632.444,754.162 633.003,734.434 633.563,718.869 634.122,715.238 634.681,744.6 635.24,725.705 635.8,693.74 636.359,710.494 636.918,691.038 637.477,691.645 638.037,709.088 638.596,711.427 639.155,680.874 639.714,666.717 640.274,686.208 640.833,702.045 641.392,719.963 641.951,749.196 642.511,744.753 643.07,692.831 643.629,722.665 644.188,725.32 644.748,720.479 645.307,721.762 645.866,739.593 646.425,722.357 646.985,736.947 647.544,767.341 648.103,748.292 648.662,728.158 649.222,741.156 649.781,754.474 650.34,737.458 650.899,754.991 651.459,768.453 652.018,765.118 652.577,781.033 653.136,757.231 653.696,756.003 654.255,755.522 654.814,753.742 655.373,731.96 655.933,728.422 656.492,744.339 657.051,739.032 657.61,734.943 658.17,728.35 658.729,745.123 659.288,696.11 659.847,696.551 660.407,699.734 660.966,696.616 661.525,714.094 662.084,731.553 662.644,761.079 663.203,789.708 663.762,783.016 664.321,763.573 664.881,760.947 665.44,707.149 665.999,722.179 666.558,720.005 667.118,733.304 667.677,730.375 668.236,726.623 668.795,760.206 669.355,760.235 669.914,758.515 670.473,788.837 671.032,752.309 671.592,766.12 672.151,779.42 672.71,775.004 673.269,769.106 673.829,712.826 674.388,713.242 674.947,698.551 675.506,684.998 676.066,671.255 676.625,687.439 677.184,671.733 677.743,658.272 678.303,659.779 678.862,677.162 679.421,730.599 679.981,713.148 680.54,730.565 681.099,729.711 681.658,725.955 682.218,738.086 682.777,720.595 683.336,684.458 683.895,685.398 684.455,686.765 685.014,702.509 685.573,702.888 686.132,721.816 686.692,736.417 687.251,733.922 687.81,745.424 688.369,741.577 688.929,756.344 689.488,720.832 690.047,721.879 690.606,733.273 691.166,698.699 691.725,680.541 692.284,648.833 692.843,633.333 693.403,619.887 693.962,650.658 694.521,652.529 695.08,651.864 695.64,639.762 696.199,624.378 696.758,644.432 697.317,661.213 697.877,664.91 698.436,671.417 698.995,657.765 699.554,645.221 700.114,646.061 700.673,663.307 701.232,681.823 701.791,648.85 702.351,615.276 702.91,606.604 703.469,596.347 704.028,585.713 704.588,608.078 705.147,579.179 705.706,600.182 706.265,604.352 706.825,609.175 707.384,630.594 707.943,602.368 708.502,606.898 709.062,612.253 709.621,615.256 710.18,618.694 710.739,638.748 711.299,645.635 711.858,664.91 712.417,684.509 712.976,673.331 713.536,641.584 714.095,662.658 714.654,667.113 715.213,684.43 715.773,700.411 716.332,702.276 716.891,683.843 717.45,670.944 718.01,674.676 718.569,644.134 719.128,646.058 719.687,630.831 720.247,635.221 720.806,672.331 721.365,689.239 721.924,685.421 722.484,684.951 723.043,687.062 723.602,672.527 724.161,694.684 724.721,679.803 725.28,697.842 725.839,697.732 726.398,680.839 726.958,678.678 727.517,664.298 728.076,652.596 728.635,654.034 729.195,655.366 729.754,656.215 730.313,659.149 730.872,673.79 731.432,672.162 731.991,657.93 732.55,659.865 733.109,678.718 733.669,697.637 734.228,697.991 734.787,648.451 735.346,647.013 735.906,682.227 736.465,696.435 737.024,698.455 737.583,702.399 738.143,698.274 738.702,698.651 739.261,716.191 739.82,715.412 740.38,714.512 740.939,698.38 741.498,694.931 742.057,727.57 742.617,695.048 743.176,696.522 743.735,680.33 744.294,715.88 744.854,749.34 745.413,777.72 745.972,775.139 746.531,775.279 747.091,788.193 747.65,799.391 748.209,810.564 748.768,804.14 749.328,814.352 749.887,809.928 750.446,774.67 751.005,754.484 751.565,732.418 752.124,732.026 752.683,728.317 753.242,725.942 753.802,729.824 754.361,730.15 754.92,711.629 755.479,708.833 756.039,708.083 756.598,710.051 757.157,711.834 757.716,692.62 758.276,694.177 758.835,743.47 759.394,737.882 759.953,751.888 760.513,716.774 761.072,700.081 761.631,701.308 762.19,684.621 762.75,683.68 763.309,685.596 763.868,703.038 764.427,686.406 764.987,672.519 765.546,688.862 766.105,704.975 766.664,671.646 767.224,687.124 767.783,656.086 768.342,708.158 768.901,706.902 769.461,723.105 770.02,735.564 770.579,715.206 771.138,731.791 771.698,726.017 772.257,725.241 772.816,720.951 773.375,685.398 773.935,701.269 774.494,699.67 775.053,696.506 775.612,730.246 776.172,758.34 776.731,721.817 777.29,702.887 777.849,700.987 778.409,668.562 778.968,685.159 779.527,688.645 780.086,686.771 780.646,652.116 781.205,651.017 781.764,623.399 782.323,662.364 782.883,679.949 783.442,693.866 784.001,690.598 784.56,673.909 785.12,673.139 785.679,690.96 786.238,690.747 786.797,724.961 787.357,705.089 787.916,702.797 788.475,701.033 789.034,683.503 789.594,683.908 790.153,699.015 790.712,685.047 791.271,667.378 791.831,683.287 792.39,732.066 792.949,713.138 793.508,697.627 794.068,712.932 794.627,711.122 795.186,712.438 795.745,710.533 796.305,708.659 796.864,713.96 797.423,712.089 797.982,706.832 798.542,707.327 799.101,722.703 799.66,720.889 800.219,720.46 800.779,687.907 801.338,703.258 801.897,669.741 802.456,671.415 803.016,657.706 803.575,610.433 804.134,599.661 804.693,615.832 805.253,654.301 805.812,657.978 806.371,659.581 806.931,677.859 807.49,679.633 808.049,646.231 808.608,665.141 809.168,682.383 809.727,680.294 810.286,678.307 810.845,662.112 811.405,663.703 811.964,663.99 812.523,665.038 813.082,681.35 813.642,665.91 814.201,663.384 814.76,711.925 815.319,728.467 815.879,725.261 816.438,754.338 816.997,765.008 817.556,788.816 818.116,812.331 818.675,821.735 819.234,814.676 819.793,791.528 820.353,821.96 820.912,781.148 821.471,809.951 822.03,788.057 822.59,781.298 823.149,727.769 823.708,741.603 824.267,739.828 824.827,720.043 825.386,703.952 825.945,689.546 826.504,706.094 827.064,705.991 827.623,704.863 828.182,691.52 828.741,690.458 829.301,673.022 829.86,657.389 830.419,658.227 830.978,674.241 831.538,658.485 832.097,661.425 832.656,663.173 833.215,650.572 833.775,669.059 834.334,683.663 834.893,697.482 835.452,712.996 836.012,712.482 836.571,698.226 837.13,727.869 837.689,727.411 838.249,775.501 838.808,770.885 839.367,761.276 839.926,773.988 840.486,771.891 841.045,755.289 841.604,737.724 842.163,718.871 842.723,735.474 843.282,716.366 843.841,686.117 844.4,702.981 844.96,687.869 845.519,689.737 846.078,657.278 846.637,644.674 847.197,648.104 847.756,634.724 848.315,624.88 848.874,609.148 849.434,595.527 849.993,616.131 850.552,652.382 851.111,605.279 851.671,627.901 852.23,632.812 852.789,618.941 853.348,618.923 853.908,607.4 854.467,595.278 855.026,583.378 855.585,587.878 856.145,576.9 856.704,534.041 857.263,540.181 857.822,550.851 858.382,590.234 858.941,597.69 859.5,619.368 860.059,639.345 860.619,628.394 861.178,662.024 861.737,679.856 862.296,683.314 862.856,656.327 863.415,672.472 863.974,669.61 864.533,684.797 865.093,698.689 865.652,715.214 866.211,681.133 866.77,666.002 867.33,682.788 867.889,685.801 868.448,706.602 869.007,753.268 869.567,719.007 870.126,713.399 870.685,711.088 871.244,712.336 871.804,694.593 872.363,740.671 872.922,739.753 873.481,753.948 874.041,750.803 874.6,716.537 875.159,698.043 875.718,714.147 876.278,711.993 876.837,727.954 877.396,742.547 877.955,738.487 878.515,686.983 879.074,669.724 879.633,669.164 880.192,653.981 880.752,655.489 881.311,661.183 881.87,649.01 882.429,634.684 882.989,602.253 883.548,608.299 884.107,646.616 884.666,665.848 885.226,684.614 885.785,685.195 886.344,701.333 886.903,700.928 887.463,682.716 888.022,695.442 888.581,741.239 889.14,723.21 889.7,703.862 890.259,670.459 890.818,671.687 891.377,688.2 891.937,655.03 892.496,624.915 893.055,629.23 893.614,645.987 894.174,630.924 894.733,649.747 895.292,653.133 895.851,683.639 896.411,682.515 896.97,732.224 897.529,760.362 898.088,755.534 898.648,733.864 899.207,777.198 899.766,769.912 900.325,731.04 900.885,729.771 901.444,746.133 902.003,757.851 902.562,757.172 903.122,735.947 903.681,718.577 904.24,699.712 904.799,699.501 905.359,696.692 905.918,714.655 906.477,727.007 907.036,776.674 907.596,800.014 908.155,762.542 908.714,760.9 909.273,740.142 909.833,737.747 910.392,749.684 910.951,731.095 911.51,729.144 912.07,714.872 912.629,714.245 913.188,683.212 913.747,684.366 914.307,715.141 914.866,700.114 915.425,683.653 915.984,714.478 916.544,710.622 917.103,726.905 917.662,726.325 918.221,725.077 918.781,721.445 919.34,702.843 919.899,683.638 920.458,681.105 921.018,666.597 921.577,701.237 922.136,684.835 922.695,666.761 923.255,682.964 923.814,699.592 924.373,684.631 924.932,664.427 925.492,664.199 926.051,679.52 926.61,678.912 927.169,680.345 927.729,648.486 928.288,684.168 928.847,671.205 929.406,692.983 929.966,660.245 930.525,678.053 931.084,663.205 931.644,685.36 932.203,699.88 932.762,713.108 933.321,725.967 933.881,726.847 934.44,739.716 934.999,720.683 935.558,721.293 936.118,739.353 936.677,755.536 937.236,756.289 937.795,787.636 938.355,798.13 938.914,790.556 939.473,753.302 940.032,771.399 940.592,737.436 941.151,751.49 941.71,734.115 942.269,731.51 942.829,762.925 943.388,757.404 943.947,747.227 944.506,748.146 945.066,726.041 945.625,707.413 946.184,720.743 946.743,719.825 947.303,717.803 947.862,718.756 948.421,717.133 948.98,728.726 949.54,692.552 950.099,692.964 950.658,674.605 951.217,656.722 951.777,624.426 952.336,612.747 952.895,615.079 953.454,635.056 954.014,652.652 954.573,685.577 955.132,701.255 955.691,685.658 956.251,716.981 956.81,702.264 957.369,697.838 957.928,698.146 958.488,681.187 959.047,678.139 959.606,646.026 960.165,635.577 960.725,638.403 961.284,641.718 961.843,646.176 962.402,663.692 962.962,662.881 963.521,647.497 964.08,663.586 964.639,666.755 965.199,684.249 965.758,670.062 966.317,685.672 966.876,702.728 967.436,701.146 967.995,682.811 968.554,682.484 969.113,661.87 969.673,648.067 970.232,637.752 970.791,642.253 971.35,645.267 971.91,598.897 972.469,617.628 973.028,604.526 973.587,595.201 974.147,619.131 974.706,607.508 975.265,599.597 975.824,636.92 976.384,643.442 976.943,644.059 977.502,664.168 978.061,681.89 978.621,666.57 979.18,635.444 979.739,653.336 980.298,668.107 980.858,653.094 981.417,659.081 981.976,675.565 982.535,659.39 983.095,674.365 983.654,673.39 984.213,663.744 984.772,668.334 985.332,666.858 985.891,703.199 986.45,706.594 987.009,739.485 987.569,753.926 988.128,750.978 988.687,730.818 989.246,761.67 989.806,756.904 990.365,736.302 990.924,766.572 991.483,747.284 992.043,759.273 992.602,752.69 993.161,747.064 993.72,742.456 994.28,741.318 994.839,721.038 995.398,704.575 995.957,690.007 996.517,673.624 997.076,658.012 997.635,627.181 998.194,644.643 998.754,677.676 999.313,695.214 999.872,708.276 1000.43,705.447 1000.99,708.728 1001.55,675.956 1002.11,628.783 1002.67,664.8 1003.23,647.986 1003.79,652.34 1004.35,672.017 1004.91,688.148 1005.46,722.149 1006.02,737.015 1006.58,714.444 1007.14,684.425 1007.7,670.303 1008.26,653.832 1008.82,669.479 1009.38,655.069 1009.94,639.381 1010.5,641.182 1011.06,643.873 1011.62,646.921 1012.18,632.187 1012.73,636.992 1013.29,656.276 1013.85,672.576 1014.41,688.315 1014.97,687.16 1015.53,685.931 1016.09,688.748 1016.65,703.383 1017.21,702.475 1017.77,734.722 1018.33,746.852 1018.89,762.191 1019.45,758.337 1020.01,769.751 1020.56,734.49 1021.12,715.897 1021.68,766.092 1022.24,764.867 1022.8,728.122 1023.36,728.463 1023.92,725.651 1024.48,704.406 1025.04,706.579 1025.6,690.089 1026.16,690.63 1026.72,641.102 1027.28,610.689 1027.83,633.004 1028.39,621.119 1028.95,642.351 1029.51,643.98 1030.07,662.862 1030.63,650.044 1031.19,668.622 1031.75,701.362 1032.31,683.485 1032.87,696.813 1033.43,699.019 1033.99,743.35 1034.55,740.624 1035.1,751.607 1035.66,765.874 1036.22,747.577 1036.78,745.594 1037.34,760.244 1037.9,754.119 1038.46,746.907 1039.02,755.887 1039.58,736.66 1040.14,705.195 1040.7,733.192 1041.26,730.287 1041.82,762.505 1042.38,740.273 1042.93,737.539 1043.49,731.539 1044.05,678.432 1044.61,679.126 1045.17,628.102 1045.73,628.677 1046.29,647.663 1046.85,648.501 1047.41,667.307 1047.97,680.233 1048.53,666.372 1049.09,651.102 1049.65,649.606 1050.2,634.703 1050.76,634.854 1051.32,635.537 1051.88,657.908 1052.44,709.011 1053,688.942 1053.56,688.566 1054.12,707.265 1054.68,706.561 1055.24,706.325 1055.8,671.205 1056.36,707.268 1056.92,675.611 1057.48,704.585 1058.03,704.571 1058.59,718.212 1059.15,733.301 1059.71,746.154 1060.27,758.153 1060.83,740.349 1061.39,721.993 1061.95,719.251 1062.51,684.672 1063.07,683.757 1063.63,664.973 1064.19,684.157 1064.75,697.084 1065.3,710.872 1065.86,723.224 1066.42,706.309 1066.98,711.781 1067.54,743.38 1068.1,741.69 1068.66,736.3 1069.22,750.143 1069.78,745.113 1070.34,773.884 1070.9,750.657 1071.46,745.499 1072.02,743.713 1072.57,755.288 1073.13,738.772 1073.69,723.471 1074.25,721.507 1074.81,715.257 1075.37,692.938 1075.93,723.628 1076.49,737.203 1077.05,751.893 1077.61,716.217 1078.17,651.722 1078.73,670.806 1079.29,670.12 1079.85,668.885 1080.4,671.74 1080.96,721.516 1081.52,707.487 1082.08,677.553 1082.64,695.741 1083.2,709.816 1083.76,740.266 1084.32,720.573 1084.88,719.958 1085.44,718.614 1086,733.126 1086.56,750.557 1087.12,734.871 1087.67,711.401 1088.23,727.011 1088.79,694.032 1089.35,739.39 1089.91,784.964 1090.47,780.09 1091.03,788.646 1091.59,766.561 1092.15,729.421 1092.71,730.127 1093.27,741.155 1093.83,758.851 1094.39,736.746 1094.94,766.503 1095.5,777.905 1096.06,757.865 1096.62,752.798 1097.18,750.732 1097.74,747.062 1098.3,740.14 1098.86,704.06 1099.42,703.893 1099.98,700.478 1100.54,715.599 1101.1,746.418 1101.66,738.082 1102.22,749.375 1102.77,686.164 1103.33,639.008 1103.89,644.067 1104.45,632.145 1105.01,633.335 1105.57,633.672 1106.13,621.908 1106.69,622.986 1107.25,642.062 1107.81,673.912 1108.37,688.193 1108.93,718.107 1109.49,715.955 1110.04,744.785 1110.6,694.302 1111.16,674.89 1111.72,674.763 1112.28,690.037 1112.84,657.915 1113.4,642.451 1113.96,664.898 1114.52,681.008 1115.08,663.873 1115.64,665.813 1116.2,680.716 1116.76,663.38 1117.31,713.6 1117.87,743.562 1118.43,738.833 1118.99,731.663 1119.55,744.689 1120.11,727.021 1120.67,693.535 1121.23,676.113 1121.79,691.296 1122.35,690.943 1122.91,672.237 1123.47,684.854 1124.03,669.442 1124.59,636.487 1125.14,639.679 1125.7,690.261 1126.26,673.27 1126.82,625.389 1127.38,612.601 1127.94,601.113 1128.5,606.316 1129.06,594.747 1129.62,583.14 1130.18,572.283 1130.74,564.804 1131.3,555.157 1131.86,594.811 1132.41,616.201 1132.97,606.588 1133.53,646.511 1134.09,651.535 1134.65,652.524 1135.21,636.845 1135.77,643.014 1136.33,644.005 1136.89,631.495 1137.45,632.222 1138.01,620.41 1138.57,639.871 1139.13,639.686 1139.68,660.686 1140.24,690.857 1140.8,675.211 1141.36,689.203 1141.92,687.529 1142.48,687.73 1143.04,653.887 1143.6,660.134 1144.16,628.624 1144.72,613.27 1145.28,613.001 1145.84,630.434 1146.4,599.046 1146.96,622.616 1147.51,609.868 1148.07,599.235 1148.63,605.717 1149.19,609.012 1149.75,704.721 1150.31,668.655 1150.87,655.887 1151.43,658.268 1151.99,629.099 1152.55,615.194 1153.11,618.855 1153.67,644.327 1154.23,647.834 1154.78,648.538 1155.34,685.595 1155.9,684.018 1156.46,718.915 1157.02,751.698 1157.58,751.393 1158.14,750.769 1158.7,716.759 1159.26,759.406 1159.82,771.409 1160.38,765.355 1160.94,779.234 1161.5,773.305 1162.05,752.107 1162.61,704.081 1163.17,703.821 1163.73,719.185 1164.29,700.232 1164.85,713.491 1165.41,726.723 1165.97,724.512 1166.53,741.04 1167.09,722.303 1167.65,703.055 1168.21,717.556 1168.77,682.842 1169.33,701.888 1169.88,719.557 1170.44,668.683 1171,648.788 1171.56,618.302 1172.12,622.243 1172.68,547.247 1173.24,538.367 1173.8,512.973 1174.36,539.92 1174.92,546.27 1175.48,551.502 1176.04,608.217 1176.6,595.914 1177.15,566.308 1177.71,572.268 1178.27,595.292 1178.83,597.26 1179.39,618.513 1179.95,621.598 1180.51,627.282 1181.07,646.579 1181.63,630.785 1182.19,633.525 1182.75,650.844 1183.31,697.738 1183.87,744.931 1184.43,745.525 1184.98,757.173 1185.54,766.361 1186.1,763.963 1186.66,710.882 1187.22,739.995 1187.78,771.433 1188.34,732.304 1188.9,714.852 1189.46,712.131 1190.02,695.356 1190.58,675.688 1191.14,661.149 1191.7,666.747 1192.25,668.794 1192.81,653.542 1193.37,639.85 1193.93,662.655 1194.49,644.221 1195.05,644.031 1195.61,661.008 1196.17,646.884 1196.73,633.834 1197.29,636.71 1197.85,637.8 1198.41,606.249 1198.97,611.428 1199.52,631.879 1200.08,632.49 1200.64,649.046 1201.2,650.9 1201.76,688.704 1202.32,690.674 1202.88,722.736 1203.44,707.832 1204,708.401 1204.56,706.145 1205.12,720.819 1205.68,767.236 1206.24,794.993 1206.8,788.146 1207.35,765.838 1207.91,764.007 1208.47,759.934 1209.03,694.423 1209.59,677.354 1210.15,729.332 1210.71,728.946 1211.27,729.053 1211.83,713.028 1212.39,683.048 1212.95,667.035 1213.51,669.715 1214.07,654.575 1214.62,639.339 1215.18,660.504 1215.74,677.138 1216.3,681.497 1216.86,712.879 1217.42,693.558 1217.98,695.587 1218.54,708.787 1219.1,673.915 1219.66,644.427 1220.22,677.119 1220.78,691.324 1221.34,690.101 1221.89,685.459 1222.45,670.631 1223.01,653.757 1223.57,674.118 1224.13,671.784 1224.69,656.462 1225.25,704.315 1225.81,703.809 1226.37,690.162 1226.93,688.966 1227.49,687.19 1228.05,640.127 1228.61,675.451 1229.17,676.854 1229.72,678.087 1230.28,677.011 1230.84,695.689 1231.4,696.983 1231.96,694.496 1232.52,695.265 1233.08,726.696 1233.64,721.972 1234.2,704.648 1234.76,720.503 1235.32,697.599 1235.88,697.035 1236.44,681.72 1236.99,683.304 1237.55,667.783 1238.11,656.062 1238.67,656.531 1239.23,691.834 1239.79,707.275 1240.35,717.771 1240.91,712.163 1241.47,695.764 1242.03,678.032 1242.59,708.346 1243.15,703.44 1243.71,701.786 1244.26,667.92 1244.82,669.445 1245.38,671.682 1245.94,672.2 1246.5,687.875 1247.06,704.331 1247.62,718.784 1248.18,702.147 1248.74,717.164 1249.3,718.288 1249.86,718.651 1250.42,703.497 1250.98,700.966 1251.54,683.029 1252.09,696.52 1252.65,696.661 1253.21,679.804 1253.77,661.558 1254.33,677.468 1254.89,694.932 1255.45,726.786 1256.01,722.349 1256.57,751.686 1257.13,777.294 1257.69,778.248 1258.25,772.712 1258.81,764.809 1259.36,745.493 1259.92,708.889 1260.48,673.581 1261.04,687.411 1261.6,689.316 1262.16,674.573 1262.72,661.553 1263.28,697.461 1263.84,683.227 1264.4,680.678 1264.96,694.87 1265.52,672.46 1266.08,676.974 1266.63,675.561 1267.19,675.292 1267.75,690.378 1268.31,705.026 1268.87,671.252 1269.43,700.536 1269.99,718.196 1270.55,727.58 1271.11,756.24 1271.67,753.617 1272.23,747.283 1272.79,762.881 1273.35,752.214 1273.91,763.447 1274.46,760.108 1275.02,739.514 1275.58,738.737 1276.14,720.537 1276.7,715.751 1277.26,730.615 1277.82,711.054 1278.38,712.199 1278.94,690.846 1279.5,691.192 1280.06,661.436 1280.62,692.555 1281.18,757.644 1281.73,754.67 1282.29,735.123 1282.85,733.797 1283.41,747.319 1283.97,711.486 1284.53,726.111 1285.09,711.557 1285.65,693.955 1286.21,678.272 1286.77,678.483 1287.33,660.427 1287.89,660.42 1288.45,664.603 1289,681.884 1289.56,680.673 1290.12,696.059 1290.68,711.208 1291.24,728.766 1291.8,758.113 1292.36,771.162 1292.92,767.072 1293.48,749.147 1294.04,697.959 1294.6,680.18 1295.16,677.952 1295.72,648.762 1296.28,668.243 1296.83,687.749 1297.39,673.09 1297.95,655.312 1298.51,687.734 1299.07,720.567 1299.63,700.626 1300.19,668.53 1300.75,668.797 1301.31,684.934 1301.87,620.393 1302.43,641.645 1302.99,628.894 1303.55,632.425 1304.1,634.678 1304.66,670.147 1305.22,654.423 1305.78,705.276 1306.34,719.265 1306.9,717.495 1307.46,696.848 1308.02,707.892 1308.58,657.157 1309.14,710.071 1309.7,711.862 1310.26,684.47 1310.82,702.948 1311.38,683.339 1311.93,717.431 1312.49,654.729 1313.05,660 1313.61,696.773 1314.17,666.776 1314.73,669.261 1315.29,671.555 1315.85,701.641 1316.41,687.213 1316.97,671.051 1317.53,667.397 1318.09,669.085 1318.65,621.238 1319.2,608.558 1319.76,594.32 1320.32,601.757 1320.88,608.048 1321.44,609.714 1322,645.355 1322.56,667.976 1323.12,641.105 1323.68,676.416 1324.24,663.013 1324.8,668.081 1325.36,683.19 1325.92,684.279 1326.47,698.888 1327.03,696.178 1327.59,707.203 1328.15,657.305 1328.71,627.066 1329.27,629.332 1329.83,635.158 1330.39,623.221 1330.95,676.224 1331.51,627.552 1332.07,615.706 1332.63,617.733 1333.19,653.435 1333.75,640.269 1334.3,641.37 1334.86,614.565 1335.42,601.045 1335.98,603.185 1336.54,625.668 1337.1,610.053 1337.66,660.355 1338.22,677.435 1338.78,678.873 1339.34,697.358 1339.9,685.019 1340.46,665.822 1341.02,667.656 1341.57,650.385 1342.13,669.979 1342.69,670.326 1343.25,672.964 1343.81,643.032 1344.37,664.182 1344.93,649.209 1345.49,668.06 1346.05,686.507 1346.61,703.904 1347.17,717.379 1347.73,729.436 1348.29,728.351 1348.84,728.506 1349.4,708.911 1349.96,691.22 1350.52,706.726 1351.08,739.262 1351.64,735.864 1352.2,732.371 1352.76,733.718 1353.32,760.953 1353.88,739.755 1354.44,750.363 1355,743.44 1355.56,739.144 1356.12,702.047 1356.67,685.887 1357.23,702.049 1357.79,651.107 1358.35,670.629 1358.91,651.183 1359.47,685.613 1360.03,701.798 1360.59,704.187 1361.15,702.925 1361.71,687.864 1362.27,687.239 1362.83,670.021 1363.39,685.63 1363.94,670.893 1364.5,658.64 1365.06,662.981 1365.62,665.992 1366.18,684.542 1366.74,661.531 1367.3,646.527 1367.86,629.482 1368.42,633.319 1368.98,666.36 1369.54,712.602 1370.1,726.373 1370.66,723.778 1371.21,733.464 1371.77,748.384 1372.33,729.614 1372.89,739.96 1373.45,768.444 1374.01,748.073 1374.57,728.297 1375.13,724.908 1375.69,688.089 1376.25,673.052 1376.81,653.18 1377.37,671.33 1377.93,674.27 1378.49,673.479 1379.04,676.878 1379.6,676.574 1380.16,647.704 1380.72,647.201 1381.28,670.41 1381.84,654.517 1382.4,640.705 1382.96,642.987 1383.52,663.731 1384.08,650.799 1384.64,655.398 1385.2,659.314 1385.76,676.814 1386.31,679.56 1386.87,665.44 1387.43,650.934 1387.99,668.909 1388.55,670.553 1389.11,668.748 1389.67,669.935 1390.23,669.442 1390.79,622.494 1391.35,623.374 1391.91,626.828 1392.47,645.015 1393.03,647.791 1393.58,695.57 1394.14,714.521 1394.7,725.359 1395.26,736.452 1395.82,732.127 1396.38,764.743 1396.94,810.405 1397.5,787.769 1398.06,763.75 1398.62,743.808 1399.18,724.119 1399.74,721.929 1400.3,733.805 1400.86,761.55 1401.41,738.57 1401.97,719.518 1402.53,715.348 1403.09,698.874 1403.65,730.045 1404.21,693.783 1404.77,659.255 1405.33,676.694 1405.89,689.888 1406.45,691.426 1407.01,676.556 1407.57,692.488 1408.13,708.304 1408.68,705.566 1409.24,672.266 1409.8,688.221 1410.36,684.733 1410.92,668.838 1411.48,649.573 1412.04,615.208 1412.6,616.502 1413.16,617.908 1413.72,636.874 1414.28,668.201 1414.84,670.36 1415.4,659.475 1415.95,659.876 1416.51,681.825 1417.07,681.459 1417.63,633.572 1418.19,622.472 1418.75,625.659 1419.31,611.882 1419.87,647.978 1420.43,696.341 1420.99,680.655 1421.55,714.616 1422.11,713.379 1422.67,728.943 1423.23,737.944 1423.78,738.221 1424.34,736.548 1424.9,735.918 1425.46,716.413 1426.02,728.478 1426.58,712.878 1427.14,693.933 1427.7,694.292 1428.26,708.858 1428.82,691.427 1429.38,690.22 1429.94,689.371 1430.5,690.047 1431.05,673.28 1431.61,657.028 1432.17,675.174 1432.73,679.233 1433.29,662.528 1433.85,647.477 1434.41,647.197 1434.97,648.749 1435.53,652.138 1436.09,669.317 1436.65,649.879 1437.21,651.625 1437.77,670.063 1438.33,718.188 1438.88,717.261 1439.44,669.216 1440,606.805 1440.56,606.245 1441.12,594.481 1441.68,599.444 1442.24,623.765 1442.8,628.347 1443.36,599.959 1443.92,600.897 1444.48,589.854 1445.04,626.039 1445.6,630.001 1446.15,619.758 1446.71,624.246 1447.27,613.51 1447.83,604.62 1448.39,580.686 1448.95,619.827 1449.51,625.277 1450.07,630.88 1450.63,620.007 1451.19,638.448 1451.75,659.12 1452.31,630.352 1452.87,631.714 1453.42,635.388 1453.98,650.787 1454.54,654.905 1455.1,620.088 1455.66,623.931 1456.22,611.549 1456.78,617.007 1457.34,653.835 1457.9,623.972 1458.46,639.737 1459.02,641.23 1459.58,692.186 1460.14,707.023 1460.7,703.599 1461.25,654.699 1461.81,687.548 1462.37,687.579 1462.93,670.702 1463.49,686.774 1464.05,700.801 1464.61,686 1465.17,683.358 1465.73,716.243 1466.29,712.041 1466.85,729.806 1467.41,727.669 1467.97,724.355 1468.52,757.986 1469.08,767.12 1469.64,761.453 1470.2,758.315 1470.76,757.026 1471.32,751.675 1471.88,716.648 1472.44,719.146 1473,718.517 1473.56,733.994 1474.12,749.796 1474.68,762.03 1475.24,771.128 1475.79,752.487 1476.35,733.901 1476.91,750.142 1477.47,727.024 1478.03,727.501 1478.59,705.206 1479.15,704.202 1479.71,702.878 1480.27,703.666 1480.83,683.492 1481.39,666.999 1481.95,683.88 1482.51,668.108 1483.07,665.611 1483.62,620.086 1484.18,617.591 1484.74,586.837 1485.3,595.884 1485.86,597.59 1486.42,600.32 1486.98,651.924 1487.54,654.568 1488.1,655.901 1488.66,641.332 1489.22,660.638 1489.78,676.598 1490.34,660.298 1490.89,649.797 1491.45,666.523 1492.01,686.612 1492.57,687.268 1493.13,671.784 1493.69,675.89 1494.25,707.404 1494.81,722.378 1495.37,752.263 1495.93,717.531 1496.49,747.424 1497.05,728.396 1497.61,706.283 1498.16,688.933 1498.72,675.509 1499.28,673.987 1499.84,674.459 1500.4,655.846 1500.96,640.927 1501.52,692.73 1502.08,691.13 1502.64,707.706 1503.2,707.534 1503.76,703.58 1504.32,702.39 1504.88,701.793 1505.44,701.448 1505.99,750.596 1506.55,726.717 1507.11,755.469 1507.67,766.332 1508.23,765.604 1508.79,732.397 1509.35,762.539 1509.91,757.871 1510.47,754.062 1511.03,736.125 1511.59,732.535 1512.15,727.329 1512.71,704.272 1513.26,688.493 1513.82,687.528 1514.38,687.445 1514.94,703.098 1515.5,689.359 1516.06,689.108 1516.62,656.754 1517.18,709.481 1517.74,710.435 1518.3,692.105 1518.86,692.328 1519.42,658.498 1519.98,642.927 1520.53,625.433 1521.09,626.854 1521.65,613.07 1522.21,632.666 1522.77,634.16 1523.33,652.323 1523.89,653.576 1524.45,671.607 1525.01,657.876 1525.57,645.15 1526.13,617.267 1526.69,636.836 1527.25,622.658 1527.81,625.713 1528.36,649.751 1528.92,650.189 1529.48,652.443 1530.04,622.73 1530.6,674.861 1531.16,691.803 1531.72,688.244 1532.28,686.068 1532.84,670.324 1533.4,667.641 1533.96,638.276 1534.52,621.783 1535.08,626.07 1535.63,661.685 1536.19,679.116 1536.75,648.188 1537.31,660.028 1537.87,658.226 1538.43,644.601 1538.99,663.007 1539.55,632.815 1540.11,635.08 1540.67,638.471 1541.23,654.635 1541.79,669.782 1542.35,716.283 1542.9,733.8 1543.46,721.077 1544.02,704.204 1544.58,685.344 1545.14,671.037 1545.7,689.675 1546.26,676.284 1546.82,693.698 1547.38,645.222 1547.94,566.468 1548.5,588.337 1549.06,580.442 1549.62,568.125 1550.18,577.916 1550.73,572.18 1551.29,562.546 1551.85,584.062 1552.41,557.108 1552.97,531.795 1553.53,540.291 1554.09,535.515 1554.65,524.986 1555.21,536.3 1555.77,589.983 1556.33,597.366 1556.89,603.606 1557.45,631.421 1558,651.91 1558.56,656.553 1559.12,674.939 1559.68,659.177 1560.24,658.469 1560.8,675.995 1561.36,692.9 1561.92,690.251 1562.48,710.341 1563.04,710.9 1563.6,710.32 1564.16,709.877 1564.72,723.324 1565.28,706.316 1565.83,721.774 1566.39,737.079 1566.95,721.253 1567.51,738.276 1568.07,718.538 1568.63,703.564 1569.19,683.076 1569.75,731.424 1570.31,713.695 1570.87,701.118 1571.43,747.382 1571.99,747.875 1572.55,744.581 1573.1,740.868 1573.66,736.879 1574.22,736.635 1574.78,734.328 1575.34,735.745 1575.9,749.753 1576.46,733.14 1577.02,748.655 1577.58,743.528 1578.14,725.699 1578.7,706.208 1579.26,741.614 1579.82,756.493 1580.37,736.971 1580.93,747.613 1581.49,761.961 1582.05,770.501 1582.61,763.061 1583.17,742.787 1583.73,755.533 1584.29,734.62 1584.85,663.811 1585.41,678.87 1585.97,694.568 1586.53,708.008 1587.09,703.784 1587.65,702.398 1588.2,721.225 1588.76,733.818 1589.32,747.559 1589.88,762.071 1590.44,779.904 1591,774.946 1591.56,788.191 1592.12,770.298 1592.68,746.896 1593.24,741.153 1593.8,751.148 1594.36,733.232 1594.92,730.842 1595.47,729.304 1596.03,707.394 1596.59,702.229 1597.15,697.79 1597.71,697.74 1598.27,695.386 1598.83,661.901 1599.39,678.338 1599.95,663.215 1600.51,654.642 1601.07,638.157 1601.63,641.708 1602.19,627.833 1602.74,633.304 1603.3,698.195 1603.86,665.499 1604.42,668.493 1604.98,649.113 1605.54,637.139 1606.1,658.467 1606.66,643.411 1607.22,644.84 1607.78,663.696 1608.34,662.246 1608.9,683.178 1609.46,686.895 1610.02,735.81 1610.57,750.273 1611.13,731.15 1611.69,710.276 1612.25,693.46 1612.81,706.745 1613.37,705.999 1613.93,721.135 1614.49,750.962 1615.05,697.508 1615.61,695.14 1616.17,712.195 1616.73,675.137 1617.29,709.817 1617.84,709.663 1618.4,738.276 1618.96,732.961 1619.52,778.165 1620.08,785.367 1620.64,810.892 1621.2,803.255 1621.76,800.671 1622.32,790.943 1622.88,821.438 1623.44,815.02 1624,806.028 1624.56,799.562 1625.11,807.283 1625.67,816.833 1626.23,745.107 1626.79,710.601 1627.35,706.854 1627.91,672.585 1628.47,700.325 1629.03,698.431 1629.59,679.246 1630.15,674.773 1630.71,644.385 1631.27,612.171 1631.83,600.264 1632.39,588.897 1632.94,561.542 1633.5,566.526 1634.06,605.048 1634.62,589.011 1635.18,577.079 1635.74,518.599 1636.3,510.526 1636.86,540.254 1637.42,529.955 1637.98,504.189 1638.54,512.041 1639.1,534.61 1639.66,559.465 1640.21,564.847 1640.77,587.184 1641.33,576.037 1641.89,593.879 1642.45,643.962 1643.01,628.891 1643.57,645.705 1644.13,649.794 1644.69,701.319 1645.25,700.362 1645.81,685.689 1646.37,652.564 1646.93,651.916 1647.48,669.281 1648.04,702.022 1648.6,736.195 1649.16,737.622 1649.72,733.95 1650.28,732.394 1650.84,730.503 1651.4,711.195 1651.96,743.013 1652.52,790.145 1653.08,783.988 1653.64,809.965 1654.2,852.096 1654.76,825.437 1655.31,783.892 1655.87,779.306 1656.43,786.855 1656.99,782.865 1657.55,759.026 1658.11,770.126 1658.67,750.087 1659.23,747.276 1659.79,793.518 1660.35,770.679 1660.91,717.753 1661.47,717.348 1662.03,685.844 1662.58,704.239 1663.14,703.746 1663.7,702.863 1664.26,749.821 1664.82,747.057 1665.38,710.935 1665.94,741.182 1666.5,736.197 1667.06,732.715 1667.62,714.59 1668.18,714.135 1668.74,716.073 1669.3,715.04 1669.85,759.761 1670.41,741.217 1670.97,752.642 1671.53,702.022 1672.09,685.081 1672.65,652.059 1673.21,655.26 1673.77,642.434 1674.33,661.1 1674.89,677.381 1675.45,664.468 1676.01,665.714 1676.57,668.511 1677.13,651.96 1677.68,636.789 1678.24,654.608 1678.8,672.464 1679.36,639.945 1679.92,674.445 1680.48,658.232 1681.04,642.087 1681.6,663.173 1682.16,611.988 1682.72,617.308 1683.28,653.791 1683.84,639.079 1684.4,656.554 1684.95,690.053 1685.51,674.17 1686.07,660.996 1686.63,679.095 1687.19,633.801 1687.75,589.111 1688.31,611.898 1688.87,617.379 1689.43,619.613 1689.99,603.159 1690.55,639.379 1691.11,677.645 1691.67,644.643 1692.23,647.666 1692.78,631.116 1693.34,636.288 1693.9,610.951 1694.46,615.711 1695.02,633.769 1695.58,650.606 1696.14,653.535 1696.7,653.621 1697.26,720.865 1697.82,718.306 1698.38,763.458 1698.94,743.443 1699.5,743.241 1700.05,727.36 1700.61,722.06 1701.17,691.099 1701.73,675.541 1702.29,657.276 1702.85,661.802 1703.41,648.683 1703.97,650.761 1704.53,635.705 1705.09,636.893 1705.65,625.617 1706.21,627.956 1706.77,630.505 1707.32,603.988 1707.88,608.962 1708.44,627.219 1709,616.147 1709.56,655.304 1710.12,626.466 1710.68,628.104 1711.24,628.719 1711.8,632.605 1712.36,632.14 1712.92,653.008 1713.48,637.517 1714.04,625.039 1714.6,598.111 1715.15,620.429 1715.71,624.707 1716.27,643.38 1716.83,648.009 1717.39,654.062 1717.95,671.904 1718.51,674.798 1719.07,675.047 1719.63,676.322 1720.19,690.582 1720.75,690.647 1721.31,690.186 1721.87,756.223 1722.42,785.196 1722.98,763.372 1723.54,740.437 1724.1,721.778 1724.66,703.732 1725.22,701.985 1725.78,702.31 1726.34,702.541 1726.9,702.598 1727.46,703.267 1728.02,718.07 1728.58,679.815 1729.14,715.271 1729.69,713.837 1730.25,747.105 1730.81,744.458 1731.37,739.677 1731.93,735.821 1732.49,751.855 1733.05,731.113 1733.61,697.99 1734.17,713.166 1734.73,697.011 1735.29,712.598 1735.85,728.483 1736.41,726.667 1736.97,708.954 1737.52,641.569 1738.08,644.784 1738.64,630.314 1739.2,634.102 1739.76,624.368 1740.32,645.958 1740.88,617.921 1741.44,622.707 1742,674.805 1742.56,641.427 1743.12,642.939 1743.68,662.938 1744.24,664.958 1744.79,635.978 1745.35,609.858 1745.91,665.896 1746.47,669.756 1747.03,702.798 1747.59,716.977 1748.15,717.152 1748.71,733.122 1749.27,712.085 1749.83,694.272 1750.39,712.208 1750.95,713.754 1751.51,710.941 1752.06,727.449 1752.62,738.792 1753.18,734.1 1753.74,734.499 1754.3,748.335 1754.86,760.478 1755.42,739.001 1755.98,754.505 1756.54,781.668 1757.1,777.425 1757.66,758.256 1758.22,721.704 1758.78,718.64 1759.34,748.112 1759.89,728.902 1760.45,713.505 1761.01,762.497 1761.57,773.9 1762.13,757.735 1762.69,752.444 1763.25,764.006 1763.81,742.034 1764.37,739.698 1764.93,737.701 1765.49,730.243 1766.05,705.821 1766.61,731.943 1767.16,727.938 1767.72,725.601 1768.28,689.94 1768.84,687.375 1769.4,689.195 1769.96,702.171 1770.52,700.58 1771.08,729.395 1771.64,742.96 1772.2,740.879 1772.76,722.361 1773.32,723.863 1773.88,705.313 1774.43,686.922 1774.99,706.667 1775.55,705.798 1776.11,674.85 1776.67,676.683 1777.23,671.94 1777.79,669.199 1778.35,669.764 1778.91,686.809 1779.47,698.986 1780.03,731.977 1780.59,744.49 1781.15,770.697 1781.71,764.177 1782.26,777.625 1782.82,755.513 1783.38,718.497 1783.94,681.048 1784.5,680.683 1785.06,697.526 1785.62,744.815 1786.18,760.255 1786.74,723.537 1787.3,719.313 1787.86,735.084 1788.42,734.066 1788.98,730.981 1789.53,761.838 1790.09,758.607 1790.65,734.728 1791.21,733.328 1791.77,778.675 1792.33,743.52 1792.89,725.35 1793.45,738.162 1794.01,766.29 1794.57,727.267 1795.13,723.959 1795.69,688.062 1796.25,705.06 1796.8,723.845 1797.36,721.356 1797.92,736.042 1798.48,732.461 1799.04,762.434 1799.6,774.346 1800.16,755.587 1800.72,738.811 1801.28,754.425 1801.84,703.033 1802.4,682.947 1802.96,684.533 1803.52,685.391 1804.08,687.727 1804.63,705.369 1805.19,725.116 1805.75,689.922 1806.31,705.39 1806.87,703.744 1807.43,687.807 1807.99,717.737 1808.55,712.522 1809.11,712.797 1809.67,724.605 1810.23,722.071 1810.79,719.231 1811.35,718.243 1811.9,652.915 1812.46,670.962 1813.02,688.079 1813.58,671.968 1814.14,685.397 1814.7,682.539 1815.26,695.221 1815.82,649.802 1816.38,646.162 1816.94,635.514 1817.5,636.77 1818.06,654.115 1818.62,639.688 1819.18,658.567 1819.73,625.634 1820.29,608.698 1820.85,594.367 1821.41,598.653 1821.97,634.506 1822.53,622.901 1823.09,640.996 1823.65,629.096 1824.21,583.833 1824.77,586.115 1825.33,654.397 1825.89,655.189 1826.45,625.453 1827,613.169 1827.56,618.075 1828.12,654.263 1828.68,641.943 1829.24,642.759 1829.8,658.941 1830.36,640.536 1830.92,644.524 1831.48,659.761 1832.04,661.571 1832.6,661.663 1833.16,680.716 1833.72,663.764 1834.27,681.754 1834.83,667.425 1835.39,702.501 1835.95,692.05 1836.51,710.039 1837.07,690.678 1837.63,723.945 1838.19,723.869 \"/>\n<path clip-path=\"url(#clip803)\" d=\"M720.247 692.337 L720.806 692.337 L721.365 692.337 L721.924 692.337 L722.484 692.337 L723.043 692.337 L723.602 692.337 L724.161 692.337 L724.721 692.337 L725.28 692.337 L725.839 692.337 L726.398 692.337 L726.958 692.337 L727.517 692.337 L728.076 692.337 L728.635 692.337 L729.195 692.337 L729.754 692.337 L730.313 692.337 L730.872 692.337 L731.432 692.337 L731.991 692.337 L732.55 692.337 L733.109 692.337 L733.669 692.337 L734.228 692.337 L734.787 692.337 L735.346 692.337 L735.906 692.337 L736.465 692.337 L737.024 692.337 L737.583 692.337 L738.143 692.337 L738.702 692.337 L739.261 692.337 L739.82 692.337 L740.38 692.337 L740.939 692.337 L741.498 692.337 L742.057 692.337 L742.617 692.337 L743.176 692.337 L743.735 692.337 L744.294 692.337 L744.854 692.337 L745.413 692.337 L745.972 692.337 L746.531 692.337 L747.091 692.337 L747.65 692.337 L748.209 692.337 L748.768 692.337 L749.328 692.337 L749.887 692.337 L750.446 692.337 L751.005 692.337 L751.565 692.337 L752.124 692.337 L752.683 692.337 L753.242 692.337 L753.802 692.337 L754.361 692.337 L754.92 692.337 L755.479 692.337 L756.039 692.337 L756.598 692.337 L757.157 692.337 L757.716 692.337 L758.276 692.337 L758.835 692.337 L759.394 692.337 L759.953 692.337 L760.513 692.337 L761.072 692.337 L761.631 692.337 L762.19 692.337 L762.75 692.337 L763.309 692.337 L763.868 692.337 L764.427 692.337 L764.987 692.337 L765.546 692.337 L766.105 692.337 L766.664 692.337 L767.224 692.337 L767.783 692.337 L768.342 692.337 L768.901 692.337 L769.461 692.337 L770.02 692.337 L770.579 692.337 L771.138 692.337 L771.698 692.337 L772.257 692.337 L772.816 692.337 L773.375 692.337 L773.935 692.337 L774.494 692.337 L775.053 692.337 L775.612 692.337 L776.172 692.337 L776.731 692.337 L777.29 692.337 L777.849 692.337 L778.409 692.337 L778.968 692.337 L779.527 692.337 L780.086 692.337 L780.646 692.337 L781.205 692.337 L781.764 692.337 L782.323 692.337 L782.883 692.337 L783.442 692.337 L784.001 692.337 L784.56 692.337 L785.12 692.337 L785.679 692.337 L786.238 692.337 L786.797 692.337 L787.357 692.337 L787.916 692.337 L788.475 692.337 L789.034 692.337 L789.594 692.337 L790.153 692.337 L790.712 692.337 L791.271 692.337 L791.831 692.337 L792.39 692.337 L792.949 692.337 L793.508 692.337 L794.068 692.337 L794.627 692.337 L795.186 692.337 L795.745 692.337 L796.305 692.337 L796.864 692.337 L797.423 692.337 L797.982 692.337 L798.542 692.337 L799.101 692.337 L799.66 692.337 L800.219 692.337 L800.779 692.337 L801.338 692.337 L801.897 692.337 L802.456 692.337 L803.016 692.337 L803.575 692.337 L804.134 692.337 L804.693 692.337 L805.253 692.337 L805.812 692.337 L806.371 692.337 L806.931 692.337 L807.49 692.337 L808.049 692.337 L808.608 692.337 L809.168 692.337 L809.727 692.337 L810.286 692.337 L810.845 692.337 L811.405 692.337 L811.964 692.337 L812.523 692.337 L813.082 692.337 L813.642 692.337 L814.201 692.337 L814.76 692.337 L815.319 692.337 L815.879 692.337 L816.438 692.337 L816.997 692.337 L817.556 692.337 L818.116 692.337 L818.675 692.337 L819.234 692.337 L819.793 692.337 L820.353 692.337 L820.912 692.337 L821.471 692.337 L822.03 692.337 L822.59 692.337 L823.149 692.337 L823.708 692.337 L824.267 692.337 L824.827 692.337 L825.386 692.337 L825.945 692.337 L826.504 692.337 L827.064 692.337 L827.623 692.337 L828.182 692.337 L828.741 692.337 L829.301 692.337 L829.86 692.337 L830.419 692.337 L830.978 692.337 L831.538 692.337 L832.097 692.337 L832.656 692.337 L833.215 692.337 L833.775 692.337 L834.334 692.337 L834.893 692.337 L835.452 692.337 L836.012 692.337 L836.571 692.337 L837.13 692.337 L837.689 692.337 L838.249 692.337 L838.808 692.337 L839.367 692.337 L839.926 692.337 L840.486 692.337 L841.045 692.337 L841.604 692.337 L842.163 692.337 L842.723 692.337 L843.282 692.337 L843.841 692.337 L844.4 692.337 L844.96 692.337 L845.519 692.337 L846.078 692.337 L846.637 692.337 L847.197 692.337 L847.756 692.337 L848.315 692.337 L848.874 692.337 L849.434 692.337 L849.993 692.337 L850.552 692.337 L851.111 692.337 L851.671 692.337 L852.23 692.337 L852.789 692.337 L853.348 692.337 L853.908 692.337 L854.467 692.337 L855.026 692.337 L855.585 692.337 L856.145 692.337 L856.704 692.337 L857.263 692.337 L857.822 692.337 L858.382 692.337 L858.941 692.337 L859.5 692.337 L860.059 692.337 L860.619 692.337 L861.178 692.337 L861.737 692.337 L862.296 692.337 L862.856 692.337 L863.415 692.337 L863.974 692.337 L864.533 692.337 L865.093 692.337 L865.652 692.337 L866.211 692.337 L866.77 692.337 L867.33 692.337 L867.889 692.337 L868.448 692.337 L869.007 692.337 L869.567 692.337 L870.126 692.337 L870.685 692.337 L871.244 692.337 L871.804 692.337 L872.363 692.337 L872.922 692.337 L873.481 692.337 L874.041 692.337 L874.6 692.337 L875.159 692.337 L875.718 692.337 L876.278 692.337 L876.837 692.337 L877.396 692.337 L877.955 692.337 L878.515 692.337 L879.074 692.337 L879.633 692.337 L880.192 692.337 L880.752 692.337 L881.311 692.337 L881.87 692.337 L882.429 692.337 L882.989 692.337 L883.548 692.337 L884.107 692.337 L884.666 692.337 L885.226 692.337 L885.785 692.337 L886.344 692.337 L886.903 692.337 L887.463 692.337 L888.022 692.337 L888.581 692.337 L889.14 692.337 L889.7 692.337 L890.259 692.337 L890.818 692.337 L891.377 692.337 L891.937 692.337 L892.496 692.337 L893.055 692.337 L893.614 692.337 L894.174 692.337 L894.733 692.337 L895.292 692.337 L895.851 692.337 L896.411 692.337 L896.97 692.337 L897.529 692.337 L898.088 692.337 L898.648 692.337 L899.207 692.337 L899.766 692.337 L900.325 692.337 L900.885 692.337 L901.444 692.337 L902.003 692.337 L902.562 692.337 L903.122 692.337 L903.681 692.337 L904.24 692.337 L904.799 692.337 L905.359 692.337 L905.918 692.337 L906.477 692.337 L907.036 692.337 L907.596 692.337 L908.155 692.337 L908.714 692.337 L909.273 692.337 L909.833 692.337 L910.392 692.337 L910.951 692.337 L911.51 692.337 L912.07 692.337 L912.629 692.337 L913.188 692.337 L913.747 692.337 L914.307 692.337 L914.866 692.337 L915.425 692.337 L915.984 692.337 L916.544 692.337 L917.103 692.337 L917.662 692.337 L918.221 692.337 L918.781 692.337 L919.34 692.337 L919.899 692.337 L920.458 692.337 L921.018 692.337 L921.577 692.337 L922.136 692.337 L922.695 692.337 L923.255 692.337 L923.814 692.337 L924.373 692.337 L924.932 692.337 L925.492 692.337 L926.051 692.337 L926.61 692.337 L927.169 692.337 L927.729 692.337 L928.288 692.337 L928.847 692.337 L929.406 692.337 L929.966 692.337 L930.525 692.337 L931.084 692.337 L931.644 692.337 L932.203 692.337 L932.762 692.337 L933.321 692.337 L933.881 692.337 L934.44 692.337 L934.999 692.337 L935.558 692.337 L936.118 692.337 L936.677 692.337 L937.236 692.337 L937.795 692.337 L938.355 692.337 L938.914 692.337 L939.473 692.337 L940.032 692.337 L940.592 692.337 L941.151 692.337 L941.71 692.337 L942.269 692.337 L942.829 692.337 L943.388 692.337 L943.947 692.337 L944.506 692.337 L945.066 692.337 L945.625 692.337 L946.184 692.337 L946.743 692.337 L947.303 692.337 L947.862 692.337 L948.421 692.337 L948.98 692.337 L949.54 692.337 L950.099 692.337 L950.658 692.337 L951.217 692.337 L951.777 692.337 L952.336 692.337 L952.895 692.337 L953.454 692.337 L954.014 692.337 L954.573 692.337 L955.132 692.337 L955.691 692.337 L956.251 692.337 L956.81 692.337 L957.369 692.337 L957.928 692.337 L958.488 692.337 L959.047 692.337 L959.606 692.337 L960.165 692.337 L960.725 692.337 L961.284 692.337 L961.843 692.337 L962.402 692.337 L962.962 692.337 L963.521 692.337 L964.08 692.337 L964.639 692.337 L965.199 692.337 L965.758 692.337 L966.317 692.337 L966.876 692.337 L967.436 692.337 L967.995 692.337 L968.554 692.337 L969.113 692.337 L969.673 692.337 L970.232 692.337 L970.791 692.337 L971.35 692.337 L971.91 692.337 L972.469 692.337 L973.028 692.337 L973.587 692.337 L974.147 692.337 L974.706 692.337 L975.265 692.337 L975.824 692.337 L976.384 692.337 L976.943 692.337 L977.502 692.337 L978.061 692.337 L978.621 692.337 L979.18 692.337 L979.739 692.337 L980.298 692.337 L980.858 692.337 L981.417 692.337 L981.976 692.337 L982.535 692.337 L983.095 692.337 L983.654 692.337 L984.213 692.337 L984.772 692.337 L985.332 692.337 L985.891 692.337 L986.45 692.337 L987.009 692.337 L987.569 692.337 L988.128 692.337 L988.687 692.337 L989.246 692.337 L989.806 692.337 L990.365 692.337 L990.924 692.337 L991.483 692.337 L992.043 692.337 L992.602 692.337 L993.161 692.337 L993.72 692.337 L994.28 692.337 L994.839 692.337 L995.398 692.337 L995.957 692.337 L996.517 692.337 L997.076 692.337 L997.635 692.337 L998.194 692.337 L998.754 692.337 L999.313 692.337 L999.872 692.337 L1000.43 692.337 L1000.99 692.337 L1001.55 692.337 L1002.11 692.337 L1002.67 692.337 L1003.23 692.337 L1003.79 692.337 L1004.35 692.337 L1004.91 692.337 L1005.46 692.337 L1006.02 692.337 L1006.58 692.337 L1007.14 692.337 L1007.7 692.337 L1008.26 692.337 L1008.82 692.337 L1009.38 692.337 L1009.94 692.337 L1010.5 692.337 L1011.06 692.337 L1011.62 692.337 L1012.18 692.337 L1012.73 692.337 L1013.29 692.337 L1013.85 692.337 L1014.41 692.337 L1014.97 692.337 L1015.53 692.337 L1016.09 692.337 L1016.65 692.337 L1017.21 692.337 L1017.77 692.337 L1018.33 692.337 L1018.89 692.337 L1019.45 692.337 L1020.01 692.337 L1020.56 692.337 L1021.12 692.337 L1021.68 692.337 L1022.24 692.337 L1022.8 692.337 L1023.36 692.337 L1023.92 692.337 L1024.48 692.337 L1025.04 692.337 L1025.6 692.337 L1026.16 692.337 L1026.72 692.337 L1027.28 692.337 L1027.83 692.337 L1028.39 692.337 L1028.95 692.337 L1029.51 692.337 L1030.07 692.337 L1030.63 692.337 L1031.19 692.337 L1031.75 692.337 L1032.31 692.337 L1032.87 692.337 L1033.43 692.337 L1033.99 692.337 L1034.55 692.337 L1035.1 692.337 L1035.66 692.337 L1036.22 692.337 L1036.78 692.337 L1037.34 692.337 L1037.9 692.337 L1038.46 692.337 L1039.02 692.337 L1039.58 692.337 L1040.14 692.337 L1040.7 692.337 L1041.26 692.337 L1041.82 692.337 L1042.38 692.337 L1042.93 692.337 L1043.49 692.337 L1044.05 692.337 L1044.61 692.337 L1045.17 692.337 L1045.73 692.337 L1046.29 692.337 L1046.85 692.337 L1047.41 692.337 L1047.97 692.337 L1048.53 692.337 L1049.09 692.337 L1049.65 692.337 L1050.2 692.337 L1050.76 692.337 L1051.32 692.337 L1051.88 692.337 L1052.44 692.337 L1053 692.337 L1053.56 692.337 L1054.12 692.337 L1054.68 692.337 L1055.24 692.337 L1055.8 692.337 L1056.36 692.337 L1056.92 692.337 L1057.48 692.337 L1058.03 692.337 L1058.59 692.337 L1059.15 692.337 L1059.71 692.337 L1060.27 692.337 L1060.83 692.337 L1061.39 692.337 L1061.95 692.337 L1062.51 692.337 L1063.07 692.337 L1063.63 692.337 L1064.19 692.337 L1064.75 692.337 L1065.3 692.337 L1065.86 692.337 L1066.42 692.337 L1066.98 692.337 L1067.54 692.337 L1068.1 692.337 L1068.66 692.337 L1069.22 692.337 L1069.78 692.337 L1070.34 692.337 L1070.9 692.337 L1071.46 692.337 L1072.02 692.337 L1072.57 692.337 L1073.13 692.337 L1073.69 692.337 L1074.25 692.337 L1074.81 692.337 L1075.37 692.337 L1075.93 692.337 L1076.49 692.337 L1077.05 692.337 L1077.61 692.337 L1078.17 692.337 L1078.73 692.337 L1079.29 692.337 L1079.85 692.337 L1080.4 692.337 L1080.96 692.337 L1081.52 692.337 L1082.08 692.337 L1082.64 692.337 L1083.2 692.337 L1083.76 692.337 L1084.32 692.337 L1084.88 692.337 L1085.44 692.337 L1086 692.337 L1086.56 692.337 L1087.12 692.337 L1087.67 692.337 L1088.23 692.337 L1088.79 692.337 L1089.35 692.337 L1089.91 692.337 L1090.47 692.337 L1091.03 692.337 L1091.59 692.337 L1092.15 692.337 L1092.71 692.337 L1093.27 692.337 L1093.83 692.337 L1094.39 692.337 L1094.94 692.337 L1095.5 692.337 L1096.06 692.337 L1096.62 692.337 L1097.18 692.337 L1097.74 692.337 L1098.3 692.337 L1098.86 692.337 L1099.42 692.337 L1099.98 692.337 L1100.54 692.337 L1101.1 692.337 L1101.66 692.337 L1102.22 692.337 L1102.77 692.337 L1103.33 692.337 L1103.89 692.337 L1104.45 692.337 L1105.01 692.337 L1105.57 692.337 L1106.13 692.337 L1106.69 692.337 L1107.25 692.337 L1107.81 692.337 L1108.37 692.337 L1108.93 692.337 L1109.49 692.337 L1110.04 692.337 L1110.6 692.337 L1111.16 692.337 L1111.72 692.337 L1112.28 692.337 L1112.84 692.337 L1113.4 692.337 L1113.96 692.337 L1114.52 692.337 L1115.08 692.337 L1115.64 692.337 L1116.2 692.337 L1116.76 692.337 L1117.31 692.337 L1117.87 692.337 L1118.43 692.337 L1118.99 692.337 L1119.55 692.337 L1120.11 692.337 L1120.67 692.337 L1121.23 692.337 L1121.79 692.337 L1122.35 692.337 L1122.91 692.337 L1123.47 692.337 L1124.03 692.337 L1124.59 692.337 L1125.14 692.337 L1125.7 692.337 L1126.26 692.337 L1126.82 692.337 L1127.38 692.337 L1127.94 692.337 L1128.5 692.337 L1129.06 692.337 L1129.62 692.337 L1130.18 692.337 L1130.74 692.337 L1131.3 692.337 L1131.86 692.337 L1132.41 692.337 L1132.97 692.337 L1133.53 692.337 L1134.09 692.337 L1134.65 692.337 L1135.21 692.337 L1135.77 692.337 L1136.33 692.337 L1136.89 692.337 L1137.45 692.337 L1138.01 692.337 L1138.57 692.337 L1139.13 692.337 L1139.68 692.337 L1140.24 692.337 L1140.8 692.337 L1141.36 692.337 L1141.92 692.337 L1142.48 692.337 L1143.04 692.337 L1143.6 692.337 L1144.16 692.337 L1144.72 692.337 L1145.28 692.337 L1145.84 692.337 L1146.4 692.337 L1146.96 692.337 L1147.51 692.337 L1148.07 692.337 L1148.63 692.337 L1149.19 692.337 L1149.75 692.337 L1150.31 692.337 L1150.87 692.337 L1151.43 692.337 L1151.99 692.337 L1152.55 692.337 L1153.11 692.337 L1153.67 692.337 L1154.23 692.337 L1154.78 692.337 L1155.34 692.337 L1155.9 692.337 L1156.46 692.337 L1157.02 692.337 L1157.58 692.337 L1158.14 692.337 L1158.7 692.337 L1159.26 692.337 L1159.82 692.337 L1160.38 692.337 L1160.94 692.337 L1161.5 692.337 L1162.05 692.337 L1162.61 692.337 L1163.17 692.337 L1163.73 692.337 L1164.29 692.337 L1164.85 692.337 L1165.41 692.337 L1165.97 692.337 L1166.53 692.337 L1167.09 692.337 L1167.65 692.337 L1168.21 692.337 L1168.77 692.337 L1169.33 692.337 L1169.88 692.337 L1170.44 692.337 L1171 692.337 L1171.56 692.337 L1172.12 692.337 L1172.68 692.337 L1173.24 692.337 L1173.8 692.337 L1174.36 692.337 L1174.92 692.337 L1175.48 692.337 L1176.04 692.337 L1176.6 692.337 L1177.15 692.337 L1177.71 692.337 L1178.27 692.337 L1178.83 692.337 L1179.39 692.337 L1179.95 692.337 L1180.51 692.337 L1181.07 692.337 L1181.63 692.337 L1182.19 692.337 L1182.75 692.337 L1183.31 692.337 L1183.87 692.337 L1184.43 692.337 L1184.98 692.337 L1185.54 692.337 L1186.1 692.337 L1186.66 692.337 L1187.22 692.337 L1187.78 692.337 L1188.34 692.337 L1188.9 692.337 L1189.46 692.337 L1190.02 692.337 L1190.58 692.337 L1191.14 692.337 L1191.7 692.337 L1192.25 692.337 L1192.81 692.337 L1193.37 692.337 L1193.93 692.337 L1194.49 692.337 L1195.05 692.337 L1195.61 692.337 L1196.17 692.337 L1196.73 692.337 L1197.29 692.337 L1197.85 692.337 L1198.41 692.337 L1198.97 692.337 L1199.52 692.337 L1200.08 692.337 L1200.64 692.337 L1201.2 692.337 L1201.76 692.337 L1202.32 692.337 L1202.88 692.337 L1203.44 692.337 L1204 692.337 L1204.56 692.337 L1205.12 692.337 L1205.68 692.337 L1206.24 692.337 L1206.8 692.337 L1207.35 692.337 L1207.91 692.337 L1208.47 692.337 L1209.03 692.337 L1209.59 692.337 L1210.15 692.337 L1210.71 692.337 L1211.27 692.337 L1211.83 692.337 L1212.39 692.337 L1212.95 692.337 L1213.51 692.337 L1214.07 692.337 L1214.62 692.337 L1215.18 692.337 L1215.74 692.337 L1216.3 692.337 L1216.86 692.337 L1217.42 692.337 L1217.98 692.337 L1218.54 692.337 L1219.1 692.337 L1219.66 692.337 L1220.22 692.337 L1220.78 692.337 L1221.34 692.337 L1221.89 692.337 L1222.45 692.337 L1223.01 692.337 L1223.57 692.337 L1224.13 692.337 L1224.69 692.337 L1225.25 692.337 L1225.81 692.337 L1226.37 692.337 L1226.93 692.337 L1227.49 692.337 L1228.05 692.337 L1228.61 692.337 L1229.17 692.337 L1229.72 692.337 L1230.28 692.337 L1230.84 692.337 L1231.4 692.337 L1231.96 692.337 L1232.52 692.337 L1233.08 692.337 L1233.64 692.337 L1234.2 692.337 L1234.76 692.337 L1235.32 692.337 L1235.88 692.337 L1236.44 692.337 L1236.99 692.337 L1237.55 692.337 L1238.11 692.337 L1238.67 692.337 L1239.23 692.337 L1239.79 692.337 L1240.35 692.337 L1240.91 692.337 L1241.47 692.337 L1242.03 692.337 L1242.59 692.337 L1243.15 692.337 L1243.71 692.337 L1244.26 692.337 L1244.82 692.337 L1245.38 692.337 L1245.94 692.337 L1246.5 692.337 L1247.06 692.337 L1247.62 692.337 L1248.18 692.337 L1248.74 692.337 L1249.3 692.337 L1249.86 692.337 L1250.42 692.337 L1250.98 692.337 L1251.54 692.337 L1252.09 692.337 L1252.65 692.337 L1253.21 692.337 L1253.77 692.337 L1254.33 692.337 L1254.89 692.337 L1255.45 692.337 L1256.01 692.337 L1256.57 692.337 L1257.13 692.337 L1257.69 692.337 L1258.25 692.337 L1258.81 692.337 L1259.36 692.337 L1259.92 692.337 L1260.48 692.337 L1261.04 692.337 L1261.6 692.337 L1262.16 692.337 L1262.72 692.337 L1263.28 692.337 L1263.84 692.337 L1264.4 692.337 L1264.96 692.337 L1265.52 692.337 L1266.08 692.337 L1266.63 692.337 L1267.19 692.337 L1267.75 692.337 L1268.31 692.337 L1268.87 692.337 L1269.43 692.337 L1269.99 692.337 L1270.55 692.337 L1271.11 692.337 L1271.67 692.337 L1272.23 692.337 L1272.79 692.337 L1273.35 692.337 L1273.91 692.337 L1274.46 692.337 L1275.02 692.337 L1275.58 692.337 L1276.14 692.337 L1276.7 692.337 L1277.26 692.337 L1277.82 692.337 L1278.38 692.337 L1278.94 692.337 L1279.5 692.337 L1280.06 692.337 L1280.62 692.337 L1281.18 692.337 L1281.73 692.337 L1282.29 692.337 L1282.85 692.337 L1283.41 692.337 L1283.97 692.337 L1284.53 692.337 L1285.09 692.337 L1285.65 692.337 L1286.21 692.337 L1286.77 692.337 L1287.33 692.337 L1287.89 692.337 L1288.45 692.337 L1289 692.337 L1289.56 692.337 L1290.12 692.337 L1290.68 692.337 L1291.24 692.337 L1291.8 692.337 L1292.36 692.337 L1292.92 692.337 L1293.48 692.337 L1294.04 692.337 L1294.6 692.337 L1295.16 692.337 L1295.72 692.337 L1296.28 692.337 L1296.83 692.337 L1297.39 692.337 L1297.95 692.337 L1298.51 692.337 L1299.07 692.337 L1299.63 692.337 L1300.19 692.337 L1300.75 692.337 L1301.31 692.337 L1301.87 692.337 L1302.43 692.337 L1302.99 692.337 L1303.55 692.337 L1304.1 692.337 L1304.66 692.337 L1305.22 692.337 L1305.78 692.337 L1306.34 692.337 L1306.9 692.337 L1307.46 692.337 L1308.02 692.337 L1308.58 692.337 L1309.14 692.337 L1309.7 692.337 L1310.26 692.337 L1310.82 692.337 L1311.38 692.337 L1311.93 692.337 L1312.49 692.337 L1313.05 692.337 L1313.61 692.337 L1314.17 692.337 L1314.73 692.337 L1315.29 692.337 L1315.85 692.337 L1316.41 692.337 L1316.97 692.337 L1317.53 692.337 L1318.09 692.337 L1318.65 692.337 L1319.2 692.337 L1319.76 692.337 L1320.32 692.337 L1320.88 692.337 L1321.44 692.337 L1322 692.337 L1322.56 692.337 L1323.12 692.337 L1323.68 692.337 L1324.24 692.337 L1324.8 692.337 L1325.36 692.337 L1325.92 692.337 L1326.47 692.337 L1327.03 692.337 L1327.59 692.337 L1328.15 692.337 L1328.71 692.337 L1329.27 692.337 L1329.83 692.337 L1330.39 692.337 L1330.95 692.337 L1331.51 692.337 L1332.07 692.337 L1332.63 692.337 L1333.19 692.337 L1333.75 692.337 L1334.3 692.337 L1334.86 692.337 L1335.42 692.337 L1335.98 692.337 L1336.54 692.337 L1337.1 692.337 L1337.66 692.337 L1338.22 692.337 L1338.78 692.337 L1339.34 692.337 L1339.9 692.337 L1340.46 692.337 L1341.02 692.337 L1341.57 692.337 L1342.13 692.337 L1342.69 692.337 L1343.25 692.337 L1343.81 692.337 L1344.37 692.337 L1344.93 692.337 L1345.49 692.337 L1346.05 692.337 L1346.61 692.337 L1347.17 692.337 L1347.73 692.337 L1348.29 692.337 L1348.84 692.337 L1349.4 692.337 L1349.96 692.337 L1350.52 692.337 L1351.08 692.337 L1351.64 692.337 L1352.2 692.337 L1352.76 692.337 L1353.32 692.337 L1353.88 692.337 L1354.44 692.337 L1355 692.337 L1355.56 692.337 L1356.12 692.337 L1356.67 692.337 L1357.23 692.337 L1357.79 692.337 L1358.35 692.337 L1358.91 692.337 L1359.47 692.337 L1360.03 692.337 L1360.59 692.337 L1361.15 692.337 L1361.71 692.337 L1362.27 692.337 L1362.83 692.337 L1363.39 692.337 L1363.94 692.337 L1364.5 692.337 L1365.06 692.337 L1365.62 692.337 L1366.18 692.337 L1366.74 692.337 L1367.3 692.337 L1367.86 692.337 L1368.42 692.337 L1368.98 692.337 L1369.54 692.337 L1370.1 692.337 L1370.66 692.337 L1371.21 692.337 L1371.77 692.337 L1372.33 692.337 L1372.89 692.337 L1373.45 692.337 L1374.01 692.337 L1374.57 692.337 L1375.13 692.337 L1375.69 692.337 L1376.25 692.337 L1376.81 692.337 L1377.37 692.337 L1377.93 692.337 L1378.49 692.337 L1379.04 692.337 L1379.6 692.337 L1380.16 692.337 L1380.72 692.337 L1381.28 692.337 L1381.84 692.337 L1382.4 692.337 L1382.96 692.337 L1383.52 692.337 L1384.08 692.337 L1384.64 692.337 L1385.2 692.337 L1385.76 692.337 L1386.31 692.337 L1386.87 692.337 L1387.43 692.337 L1387.99 692.337 L1388.55 692.337 L1389.11 692.337 L1389.67 692.337 L1390.23 692.337 L1390.79 692.337 L1391.35 692.337 L1391.91 692.337 L1392.47 692.337 L1393.03 692.337 L1393.58 692.337 L1394.14 692.337 L1394.7 692.337 L1395.26 692.337 L1395.82 692.337 L1396.38 692.337 L1396.94 692.337 L1397.5 692.337 L1398.06 692.337 L1398.62 692.337 L1399.18 692.337 L1399.74 692.337 L1400.3 692.337 L1400.86 692.337 L1401.41 692.337 L1401.97 692.337 L1402.53 692.337 L1403.09 692.337 L1403.65 692.337 L1404.21 692.337 L1404.77 692.337 L1405.33 692.337 L1405.89 692.337 L1406.45 692.337 L1407.01 692.337 L1407.57 692.337 L1408.13 692.337 L1408.68 692.337 L1409.24 692.337 L1409.8 692.337 L1410.36 692.337 L1410.92 692.337 L1411.48 692.337 L1412.04 692.337 L1412.6 692.337 L1413.16 692.337 L1413.72 692.337 L1414.28 692.337 L1414.84 692.337 L1415.4 692.337 L1415.95 692.337 L1416.51 692.337 L1417.07 692.337 L1417.63 692.337 L1418.19 692.337 L1418.75 692.337 L1419.31 692.337 L1419.87 692.337 L1420.43 692.337 L1420.99 692.337 L1421.55 692.337 L1422.11 692.337 L1422.67 692.337 L1423.23 692.337 L1423.78 692.337 L1424.34 692.337 L1424.9 692.337 L1425.46 692.337 L1426.02 692.337 L1426.58 692.337 L1427.14 692.337 L1427.7 692.337 L1428.26 692.337 L1428.82 692.337 L1429.38 692.337 L1429.94 692.337 L1430.5 692.337 L1431.05 692.337 L1431.61 692.337 L1432.17 692.337 L1432.73 692.337 L1433.29 692.337 L1433.85 692.337 L1434.41 692.337 L1434.97 692.337 L1435.53 692.337 L1436.09 692.337 L1436.65 692.337 L1437.21 692.337 L1437.77 692.337 L1438.33 692.337 L1438.88 692.337 L1439.44 692.337 L1440 692.337 L1440.56 692.337 L1441.12 692.337 L1441.68 692.337 L1442.24 692.337 L1442.8 692.337 L1443.36 692.337 L1443.92 692.337 L1444.48 692.337 L1445.04 692.337 L1445.6 692.337 L1446.15 692.337 L1446.71 692.337 L1447.27 692.337 L1447.83 692.337 L1448.39 692.337 L1448.95 692.337 L1449.51 692.337 L1450.07 692.337 L1450.63 692.337 L1451.19 692.337 L1451.75 692.337 L1452.31 692.337 L1452.87 692.337 L1453.42 692.337 L1453.98 692.337 L1454.54 692.337 L1455.1 692.337 L1455.66 692.337 L1456.22 692.337 L1456.78 692.337 L1457.34 692.337 L1457.9 692.337 L1458.46 692.337 L1459.02 692.337 L1459.58 692.337 L1460.14 692.337 L1460.7 692.337 L1461.25 692.337 L1461.81 692.337 L1462.37 692.337 L1462.93 692.337 L1463.49 692.337 L1464.05 692.337 L1464.61 692.337 L1465.17 692.337 L1465.73 692.337 L1466.29 692.337 L1466.85 692.337 L1467.41 692.337 L1467.97 692.337 L1468.52 692.337 L1469.08 692.337 L1469.64 692.337 L1470.2 692.337 L1470.76 692.337 L1471.32 692.337 L1471.88 692.337 L1472.44 692.337 L1473 692.337 L1473.56 692.337 L1474.12 692.337 L1474.68 692.337 L1475.24 692.337 L1475.79 692.337 L1476.35 692.337 L1476.91 692.337 L1477.47 692.337 L1478.03 692.337 L1478.59 692.337 L1479.15 692.337 L1479.71 692.337 L1480.27 692.337 L1480.83 692.337 L1481.39 692.337 L1481.95 692.337 L1482.51 692.337 L1483.07 692.337 L1483.62 692.337 L1484.18 692.337 L1484.74 692.337 L1485.3 692.337 L1485.86 692.337 L1486.42 692.337 L1486.98 692.337 L1487.54 692.337 L1488.1 692.337 L1488.66 692.337 L1489.22 692.337 L1489.78 692.337 L1490.34 692.337 L1490.89 692.337 L1491.45 692.337 L1492.01 692.337 L1492.57 692.337 L1493.13 692.337 L1493.69 692.337 L1494.25 692.337 L1494.81 692.337 L1495.37 692.337 L1495.93 692.337 L1496.49 692.337 L1497.05 692.337 L1497.61 692.337 L1498.16 692.337 L1498.72 692.337 L1499.28 692.337 L1499.84 692.337 L1500.4 692.337 L1500.96 692.337 L1501.52 692.337 L1502.08 692.337 L1502.64 692.337 L1503.2 692.337 L1503.76 692.337 L1504.32 692.337 L1504.88 692.337 L1505.44 692.337 L1505.99 692.337 L1506.55 692.337 L1507.11 692.337 L1507.67 692.337 L1508.23 692.337 L1508.79 692.337 L1509.35 692.337 L1509.91 692.337 L1510.47 692.337 L1511.03 692.337 L1511.59 692.337 L1512.15 692.337 L1512.71 692.337 L1513.26 692.337 L1513.82 692.337 L1514.38 692.337 L1514.94 692.337 L1515.5 692.337 L1516.06 692.337 L1516.62 692.337 L1517.18 692.337 L1517.74 692.337 L1518.3 692.337 L1518.86 692.337 L1519.42 692.337 L1519.98 692.337 L1520.53 692.337 L1521.09 692.337 L1521.65 692.337 L1522.21 692.337 L1522.77 692.337 L1523.33 692.337 L1523.89 692.337 L1524.45 692.337 L1525.01 692.337 L1525.57 692.337 L1526.13 692.337 L1526.69 692.337 L1527.25 692.337 L1527.81 692.337 L1528.36 692.337 L1528.92 692.337 L1529.48 692.337 L1530.04 692.337 L1530.6 692.337 L1531.16 692.337 L1531.72 692.337 L1532.28 692.337 L1532.84 692.337 L1533.4 692.337 L1533.96 692.337 L1534.52 692.337 L1535.08 692.337 L1535.63 692.337 L1536.19 692.337 L1536.75 692.337 L1537.31 692.337 L1537.87 692.337 L1538.43 692.337 L1538.99 692.337 L1539.55 692.337 L1540.11 692.337 L1540.67 692.337 L1541.23 692.337 L1541.79 692.337 L1542.35 692.337 L1542.9 692.337 L1543.46 692.337 L1544.02 692.337 L1544.58 692.337 L1545.14 692.337 L1545.7 692.337 L1546.26 692.337 L1546.82 692.337 L1547.38 692.337 L1547.94 692.337 L1548.5 692.337 L1549.06 692.337 L1549.62 692.337 L1550.18 692.337 L1550.73 692.337 L1551.29 692.337 L1551.85 692.337 L1552.41 692.337 L1552.97 692.337 L1553.53 692.337 L1554.09 692.337 L1554.65 692.337 L1555.21 692.337 L1555.77 692.337 L1556.33 692.337 L1556.89 692.337 L1557.45 692.337 L1558 692.337 L1558.56 692.337 L1559.12 692.337 L1559.68 692.337 L1560.24 692.337 L1560.8 692.337 L1561.36 692.337 L1561.92 692.337 L1562.48 692.337 L1563.04 692.337 L1563.6 692.337 L1564.16 692.337 L1564.72 692.337 L1565.28 692.337 L1565.83 692.337 L1566.39 692.337 L1566.95 692.337 L1567.51 692.337 L1568.07 692.337 L1568.63 692.337 L1569.19 692.337 L1569.75 692.337 L1570.31 692.337 L1570.87 692.337 L1571.43 692.337 L1571.99 692.337 L1572.55 692.337 L1573.1 692.337 L1573.66 692.337 L1574.22 692.337 L1574.78 692.337 L1575.34 692.337 L1575.9 692.337 L1576.46 692.337 L1577.02 692.337 L1577.58 692.337 L1578.14 692.337 L1578.7 692.337 L1579.26 692.337 L1579.82 692.337 L1580.37 692.337 L1580.93 692.337 L1581.49 692.337 L1582.05 692.337 L1582.61 692.337 L1583.17 692.337 L1583.73 692.337 L1584.29 692.337 L1584.85 692.337 L1585.41 692.337 L1585.97 692.337 L1586.53 692.337 L1587.09 692.337 L1587.65 692.337 L1588.2 692.337 L1588.76 692.337 L1589.32 692.337 L1589.88 692.337 L1590.44 692.337 L1591 692.337 L1591.56 692.337 L1592.12 692.337 L1592.68 692.337 L1593.24 692.337 L1593.8 692.337 L1594.36 692.337 L1594.92 692.337 L1595.47 692.337 L1596.03 692.337 L1596.59 692.337 L1597.15 692.337 L1597.71 692.337 L1598.27 692.337 L1598.83 692.337 L1599.39 692.337 L1599.95 692.337 L1600.51 692.337 L1601.07 692.337 L1601.63 692.337 L1602.19 692.337 L1602.74 692.337 L1603.3 692.337 L1603.86 692.337 L1604.42 692.337 L1604.98 692.337 L1605.54 692.337 L1606.1 692.337 L1606.66 692.337 L1607.22 692.337 L1607.78 692.337 L1608.34 692.337 L1608.9 692.337 L1609.46 692.337 L1610.02 692.337 L1610.57 692.337 L1611.13 692.337 L1611.69 692.337 L1612.25 692.337 L1612.81 692.337 L1613.37 692.337 L1613.93 692.337 L1614.49 692.337 L1615.05 692.337 L1615.61 692.337 L1616.17 692.337 L1616.73 692.337 L1617.29 692.337 L1617.84 692.337 L1618.4 692.337 L1618.96 692.337 L1619.52 692.337 L1620.08 692.337 L1620.64 692.337 L1621.2 692.337 L1621.76 692.337 L1622.32 692.337 L1622.88 692.337 L1623.44 692.337 L1624 692.337 L1624.56 692.337 L1625.11 692.337 L1625.67 692.337 L1626.23 692.337 L1626.79 692.337 L1627.35 692.337 L1627.91 692.337 L1628.47 692.337 L1629.03 692.337 L1629.59 692.337 L1630.15 692.337 L1630.71 692.337 L1631.27 692.337 L1631.83 692.337 L1632.39 692.337 L1632.94 692.337 L1633.5 692.337 L1634.06 692.337 L1634.62 692.337 L1635.18 692.337 L1635.74 692.337 L1636.3 692.337 L1636.86 692.337 L1637.42 692.337 L1637.98 692.337 L1638.54 692.337 L1639.1 692.337 L1639.66 692.337 L1640.21 692.337 L1640.77 692.337 L1641.33 692.337 L1641.89 692.337 L1642.45 692.337 L1643.01 692.337 L1643.57 692.337 L1644.13 692.337 L1644.69 692.337 L1645.25 692.337 L1645.81 692.337 L1646.37 692.337 L1646.93 692.337 L1647.48 692.337 L1648.04 692.337 L1648.6 692.337 L1649.16 692.337 L1649.72 692.337 L1650.28 692.337 L1650.84 692.337 L1651.4 692.337 L1651.96 692.337 L1652.52 692.337 L1653.08 692.337 L1653.64 692.337 L1654.2 692.337 L1654.76 692.337 L1655.31 692.337 L1655.87 692.337 L1656.43 692.337 L1656.99 692.337 L1657.55 692.337 L1658.11 692.337 L1658.67 692.337 L1659.23 692.337 L1659.79 692.337 L1660.35 692.337 L1660.91 692.337 L1661.47 692.337 L1662.03 692.337 L1662.58 692.337 L1663.14 692.337 L1663.7 692.337 L1664.26 692.337 L1664.82 692.337 L1665.38 692.337 L1665.94 692.337 L1666.5 692.337 L1667.06 692.337 L1667.62 692.337 L1668.18 692.337 L1668.74 692.337 L1669.3 692.337 L1669.85 692.337 L1670.41 692.337 L1670.97 692.337 L1671.53 692.337 L1672.09 692.337 L1672.65 692.337 L1673.21 692.337 L1673.77 692.337 L1674.33 692.337 L1674.89 692.337 L1675.45 692.337 L1676.01 692.337 L1676.57 692.337 L1677.13 692.337 L1677.68 692.337 L1678.24 692.337 L1678.8 692.337 L1679.36 692.337 L1679.92 692.337 L1680.48 692.337 L1681.04 692.337 L1681.6 692.337 L1682.16 692.337 L1682.72 692.337 L1683.28 692.337 L1683.84 692.337 L1684.4 692.337 L1684.95 692.337 L1685.51 692.337 L1686.07 692.337 L1686.63 692.337 L1687.19 692.337 L1687.75 692.337 L1688.31 692.337 L1688.87 692.337 L1689.43 692.337 L1689.99 692.337 L1690.55 692.337 L1691.11 692.337 L1691.67 692.337 L1692.23 692.337 L1692.78 692.337 L1693.34 692.337 L1693.9 692.337 L1694.46 692.337 L1695.02 692.337 L1695.58 692.337 L1696.14 692.337 L1696.7 692.337 L1697.26 692.337 L1697.82 692.337 L1698.38 692.337 L1698.94 692.337 L1699.5 692.337 L1700.05 692.337 L1700.61 692.337 L1701.17 692.337 L1701.73 692.337 L1702.29 692.337 L1702.85 692.337 L1703.41 692.337 L1703.97 692.337 L1704.53 692.337 L1705.09 692.337 L1705.65 692.337 L1706.21 692.337 L1706.77 692.337 L1707.32 692.337 L1707.88 692.337 L1708.44 692.337 L1709 692.337 L1709.56 692.337 L1710.12 692.337 L1710.68 692.337 L1711.24 692.337 L1711.8 692.337 L1712.36 692.337 L1712.92 692.337 L1713.48 692.337 L1714.04 692.337 L1714.6 692.337 L1715.15 692.337 L1715.71 692.337 L1716.27 692.337 L1716.83 692.337 L1717.39 692.337 L1717.95 692.337 L1718.51 692.337 L1719.07 692.337 L1719.63 692.337 L1720.19 692.337 L1720.75 692.337 L1721.31 692.337 L1721.87 692.337 L1722.42 692.337 L1722.98 692.337 L1723.54 692.337 L1724.1 692.337 L1724.66 692.337 L1725.22 692.337 L1725.78 692.337 L1726.34 692.337 L1726.9 692.337 L1727.46 692.337 L1728.02 692.337 L1728.58 692.337 L1729.14 692.337 L1729.69 692.337 L1730.25 692.337 L1730.81 692.337 L1731.37 692.337 L1731.93 692.337 L1732.49 692.337 L1733.05 692.337 L1733.61 692.337 L1734.17 692.337 L1734.73 692.337 L1735.29 692.337 L1735.85 692.337 L1736.41 692.337 L1736.97 692.337 L1737.52 692.337 L1738.08 692.337 L1738.64 692.337 L1739.2 692.337 L1739.76 692.337 L1740.32 692.337 L1740.88 692.337 L1741.44 692.337 L1742 692.337 L1742.56 692.337 L1743.12 692.337 L1743.68 692.337 L1744.24 692.337 L1744.79 692.337 L1745.35 692.337 L1745.91 692.337 L1746.47 692.337 L1747.03 692.337 L1747.59 692.337 L1748.15 692.337 L1748.71 692.337 L1749.27 692.337 L1749.83 692.337 L1750.39 692.337 L1750.95 692.337 L1751.51 692.337 L1752.06 692.337 L1752.62 692.337 L1753.18 692.337 L1753.74 692.337 L1754.3 692.337 L1754.86 692.337 L1755.42 692.337 L1755.98 692.337 L1756.54 692.337 L1757.1 692.337 L1757.66 692.337 L1758.22 692.337 L1758.78 692.337 L1759.34 692.337 L1759.89 692.337 L1760.45 692.337 L1761.01 692.337 L1761.57 692.337 L1762.13 692.337 L1762.69 692.337 L1763.25 692.337 L1763.81 692.337 L1764.37 692.337 L1764.93 692.337 L1765.49 692.337 L1766.05 692.337 L1766.61 692.337 L1767.16 692.337 L1767.72 692.337 L1768.28 692.337 L1768.84 692.337 L1769.4 692.337 L1769.96 692.337 L1770.52 692.337 L1771.08 692.337 L1771.64 692.337 L1772.2 692.337 L1772.76 692.337 L1773.32 692.337 L1773.88 692.337 L1774.43 692.337 L1774.99 692.337 L1775.55 692.337 L1776.11 692.337 L1776.67 692.337 L1777.23 692.337 L1777.79 692.337 L1778.35 692.337 L1778.91 692.337 L1779.47 692.337 L1780.03 692.337 L1780.59 692.337 L1781.15 692.337 L1781.71 692.337 L1782.26 692.337 L1782.82 692.337 L1783.38 692.337 L1783.94 692.337 L1784.5 692.337 L1785.06 692.337 L1785.62 692.337 L1786.18 692.337 L1786.74 692.337 L1787.3 692.337 L1787.86 692.337 L1788.42 692.337 L1788.98 692.337 L1789.53 692.337 L1790.09 692.337 L1790.65 692.337 L1791.21 692.337 L1791.77 692.337 L1792.33 692.337 L1792.89 692.337 L1793.45 692.337 L1794.01 692.337 L1794.57 692.337 L1795.13 692.337 L1795.69 692.337 L1796.25 692.337 L1796.8 692.337 L1797.36 692.337 L1797.92 692.337 L1798.48 692.337 L1799.04 692.337 L1799.6 692.337 L1800.16 692.337 L1800.72 692.337 L1801.28 692.337 L1801.84 692.337 L1802.4 692.337 L1802.96 692.337 L1803.52 692.337 L1804.08 692.337 L1804.63 692.337 L1805.19 692.337 L1805.75 692.337 L1806.31 692.337 L1806.87 692.337 L1807.43 692.337 L1807.99 692.337 L1808.55 692.337 L1809.11 692.337 L1809.67 692.337 L1810.23 692.337 L1810.79 692.337 L1811.35 692.337 L1811.9 692.337 L1812.46 692.337 L1813.02 692.337 L1813.58 692.337 L1814.14 692.337 L1814.7 692.337 L1815.26 692.337 L1815.82 692.337 L1816.38 692.337 L1816.94 692.337 L1817.5 692.337 L1818.06 692.337 L1818.62 692.337 L1819.18 692.337 L1819.73 692.337 L1820.29 692.337 L1820.85 692.337 L1821.41 692.337 L1821.97 692.337 L1822.53 692.337 L1823.09 692.337 L1823.65 692.337 L1824.21 692.337 L1824.77 692.337 L1825.33 692.337 L1825.89 692.337 L1826.45 692.337 L1827 692.337 L1827.56 692.337 L1828.12 692.337 L1828.68 692.337 L1829.24 692.337 L1829.8 692.337 L1830.36 692.337 L1830.92 692.337 L1831.48 692.337 L1832.04 692.337 L1832.6 692.337 L1833.16 692.337 L1833.72 692.337 L1834.27 692.337 L1834.83 692.337 L1835.39 692.337 L1835.95 692.337 L1836.51 692.337 L1837.07 692.337 L1837.63 692.337 L1838.19 692.337 L1838.19 685.399 L1837.63 685.399 L1837.07 685.399 L1836.51 685.399 L1835.95 685.399 L1835.39 685.399 L1834.83 685.399 L1834.27 685.399 L1833.72 685.399 L1833.16 685.399 L1832.6 685.399 L1832.04 685.399 L1831.48 685.399 L1830.92 685.399 L1830.36 685.399 L1829.8 685.399 L1829.24 685.399 L1828.68 685.399 L1828.12 685.399 L1827.56 685.399 L1827 685.399 L1826.45 685.399 L1825.89 685.399 L1825.33 685.399 L1824.77 685.399 L1824.21 685.399 L1823.65 685.399 L1823.09 685.399 L1822.53 685.399 L1821.97 685.399 L1821.41 685.399 L1820.85 685.399 L1820.29 685.399 L1819.73 685.399 L1819.18 685.399 L1818.62 685.399 L1818.06 685.399 L1817.5 685.399 L1816.94 685.399 L1816.38 685.399 L1815.82 685.399 L1815.26 685.399 L1814.7 685.399 L1814.14 685.399 L1813.58 685.399 L1813.02 685.399 L1812.46 685.399 L1811.9 685.399 L1811.35 685.399 L1810.79 685.399 L1810.23 685.399 L1809.67 685.399 L1809.11 685.399 L1808.55 685.399 L1807.99 685.399 L1807.43 685.399 L1806.87 685.399 L1806.31 685.399 L1805.75 685.399 L1805.19 685.399 L1804.63 685.399 L1804.08 685.399 L1803.52 685.399 L1802.96 685.399 L1802.4 685.399 L1801.84 685.399 L1801.28 685.399 L1800.72 685.399 L1800.16 685.399 L1799.6 685.399 L1799.04 685.399 L1798.48 685.399 L1797.92 685.399 L1797.36 685.399 L1796.8 685.399 L1796.25 685.399 L1795.69 685.399 L1795.13 685.399 L1794.57 685.399 L1794.01 685.399 L1793.45 685.399 L1792.89 685.399 L1792.33 685.399 L1791.77 685.399 L1791.21 685.399 L1790.65 685.399 L1790.09 685.399 L1789.53 685.399 L1788.98 685.399 L1788.42 685.399 L1787.86 685.399 L1787.3 685.399 L1786.74 685.399 L1786.18 685.399 L1785.62 685.399 L1785.06 685.399 L1784.5 685.399 L1783.94 685.399 L1783.38 685.399 L1782.82 685.399 L1782.26 685.399 L1781.71 685.399 L1781.15 685.399 L1780.59 685.399 L1780.03 685.399 L1779.47 685.399 L1778.91 685.399 L1778.35 685.399 L1777.79 685.399 L1777.23 685.399 L1776.67 685.399 L1776.11 685.399 L1775.55 685.399 L1774.99 685.399 L1774.43 685.399 L1773.88 685.399 L1773.32 685.399 L1772.76 685.399 L1772.2 685.399 L1771.64 685.399 L1771.08 685.399 L1770.52 685.399 L1769.96 685.399 L1769.4 685.399 L1768.84 685.399 L1768.28 685.399 L1767.72 685.399 L1767.16 685.399 L1766.61 685.399 L1766.05 685.399 L1765.49 685.399 L1764.93 685.399 L1764.37 685.399 L1763.81 685.399 L1763.25 685.399 L1762.69 685.399 L1762.13 685.399 L1761.57 685.399 L1761.01 685.399 L1760.45 685.399 L1759.89 685.399 L1759.34 685.399 L1758.78 685.399 L1758.22 685.399 L1757.66 685.399 L1757.1 685.399 L1756.54 685.399 L1755.98 685.399 L1755.42 685.399 L1754.86 685.399 L1754.3 685.399 L1753.74 685.399 L1753.18 685.399 L1752.62 685.399 L1752.06 685.399 L1751.51 685.399 L1750.95 685.399 L1750.39 685.399 L1749.83 685.399 L1749.27 685.399 L1748.71 685.399 L1748.15 685.399 L1747.59 685.399 L1747.03 685.399 L1746.47 685.399 L1745.91 685.399 L1745.35 685.399 L1744.79 685.399 L1744.24 685.399 L1743.68 685.399 L1743.12 685.399 L1742.56 685.399 L1742 685.399 L1741.44 685.399 L1740.88 685.399 L1740.32 685.399 L1739.76 685.399 L1739.2 685.399 L1738.64 685.399 L1738.08 685.399 L1737.52 685.399 L1736.97 685.399 L1736.41 685.399 L1735.85 685.399 L1735.29 685.399 L1734.73 685.399 L1734.17 685.399 L1733.61 685.399 L1733.05 685.399 L1732.49 685.399 L1731.93 685.399 L1731.37 685.399 L1730.81 685.399 L1730.25 685.399 L1729.69 685.399 L1729.14 685.399 L1728.58 685.399 L1728.02 685.399 L1727.46 685.399 L1726.9 685.399 L1726.34 685.399 L1725.78 685.399 L1725.22 685.399 L1724.66 685.399 L1724.1 685.399 L1723.54 685.399 L1722.98 685.399 L1722.42 685.399 L1721.87 685.399 L1721.31 685.399 L1720.75 685.399 L1720.19 685.399 L1719.63 685.399 L1719.07 685.399 L1718.51 685.399 L1717.95 685.399 L1717.39 685.399 L1716.83 685.399 L1716.27 685.399 L1715.71 685.399 L1715.15 685.399 L1714.6 685.399 L1714.04 685.399 L1713.48 685.399 L1712.92 685.399 L1712.36 685.399 L1711.8 685.399 L1711.24 685.399 L1710.68 685.399 L1710.12 685.399 L1709.56 685.399 L1709 685.399 L1708.44 685.399 L1707.88 685.399 L1707.32 685.399 L1706.77 685.399 L1706.21 685.399 L1705.65 685.399 L1705.09 685.399 L1704.53 685.399 L1703.97 685.399 L1703.41 685.399 L1702.85 685.399 L1702.29 685.399 L1701.73 685.399 L1701.17 685.399 L1700.61 685.399 L1700.05 685.399 L1699.5 685.399 L1698.94 685.399 L1698.38 685.399 L1697.82 685.399 L1697.26 685.399 L1696.7 685.399 L1696.14 685.399 L1695.58 685.399 L1695.02 685.399 L1694.46 685.399 L1693.9 685.399 L1693.34 685.399 L1692.78 685.399 L1692.23 685.399 L1691.67 685.399 L1691.11 685.399 L1690.55 685.399 L1689.99 685.399 L1689.43 685.399 L1688.87 685.399 L1688.31 685.399 L1687.75 685.399 L1687.19 685.399 L1686.63 685.399 L1686.07 685.399 L1685.51 685.399 L1684.95 685.399 L1684.4 685.399 L1683.84 685.399 L1683.28 685.399 L1682.72 685.399 L1682.16 685.399 L1681.6 685.399 L1681.04 685.399 L1680.48 685.399 L1679.92 685.399 L1679.36 685.399 L1678.8 685.399 L1678.24 685.399 L1677.68 685.399 L1677.13 685.399 L1676.57 685.399 L1676.01 685.399 L1675.45 685.399 L1674.89 685.399 L1674.33 685.399 L1673.77 685.399 L1673.21 685.399 L1672.65 685.399 L1672.09 685.399 L1671.53 685.399 L1670.97 685.399 L1670.41 685.399 L1669.85 685.399 L1669.3 685.399 L1668.74 685.399 L1668.18 685.399 L1667.62 685.399 L1667.06 685.399 L1666.5 685.399 L1665.94 685.399 L1665.38 685.399 L1664.82 685.399 L1664.26 685.399 L1663.7 685.399 L1663.14 685.399 L1662.58 685.399 L1662.03 685.399 L1661.47 685.399 L1660.91 685.399 L1660.35 685.399 L1659.79 685.399 L1659.23 685.399 L1658.67 685.399 L1658.11 685.399 L1657.55 685.399 L1656.99 685.399 L1656.43 685.399 L1655.87 685.399 L1655.31 685.399 L1654.76 685.399 L1654.2 685.399 L1653.64 685.399 L1653.08 685.399 L1652.52 685.399 L1651.96 685.399 L1651.4 685.399 L1650.84 685.399 L1650.28 685.399 L1649.72 685.399 L1649.16 685.399 L1648.6 685.399 L1648.04 685.399 L1647.48 685.399 L1646.93 685.399 L1646.37 685.399 L1645.81 685.399 L1645.25 685.399 L1644.69 685.399 L1644.13 685.399 L1643.57 685.399 L1643.01 685.399 L1642.45 685.399 L1641.89 685.399 L1641.33 685.399 L1640.77 685.399 L1640.21 685.399 L1639.66 685.399 L1639.1 685.399 L1638.54 685.399 L1637.98 685.399 L1637.42 685.399 L1636.86 685.399 L1636.3 685.399 L1635.74 685.399 L1635.18 685.399 L1634.62 685.399 L1634.06 685.399 L1633.5 685.399 L1632.94 685.399 L1632.39 685.399 L1631.83 685.399 L1631.27 685.399 L1630.71 685.399 L1630.15 685.399 L1629.59 685.399 L1629.03 685.399 L1628.47 685.399 L1627.91 685.399 L1627.35 685.399 L1626.79 685.399 L1626.23 685.399 L1625.67 685.399 L1625.11 685.399 L1624.56 685.399 L1624 685.399 L1623.44 685.399 L1622.88 685.399 L1622.32 685.399 L1621.76 685.399 L1621.2 685.399 L1620.64 685.399 L1620.08 685.399 L1619.52 685.399 L1618.96 685.399 L1618.4 685.399 L1617.84 685.399 L1617.29 685.399 L1616.73 685.399 L1616.17 685.399 L1615.61 685.399 L1615.05 685.399 L1614.49 685.399 L1613.93 685.399 L1613.37 685.399 L1612.81 685.399 L1612.25 685.399 L1611.69 685.399 L1611.13 685.399 L1610.57 685.399 L1610.02 685.399 L1609.46 685.399 L1608.9 685.399 L1608.34 685.399 L1607.78 685.399 L1607.22 685.399 L1606.66 685.399 L1606.1 685.399 L1605.54 685.399 L1604.98 685.399 L1604.42 685.399 L1603.86 685.399 L1603.3 685.399 L1602.74 685.399 L1602.19 685.399 L1601.63 685.399 L1601.07 685.399 L1600.51 685.399 L1599.95 685.399 L1599.39 685.399 L1598.83 685.399 L1598.27 685.399 L1597.71 685.399 L1597.15 685.399 L1596.59 685.399 L1596.03 685.399 L1595.47 685.399 L1594.92 685.399 L1594.36 685.399 L1593.8 685.399 L1593.24 685.399 L1592.68 685.399 L1592.12 685.399 L1591.56 685.399 L1591 685.399 L1590.44 685.399 L1589.88 685.399 L1589.32 685.399 L1588.76 685.399 L1588.2 685.399 L1587.65 685.399 L1587.09 685.399 L1586.53 685.399 L1585.97 685.399 L1585.41 685.399 L1584.85 685.399 L1584.29 685.399 L1583.73 685.399 L1583.17 685.399 L1582.61 685.399 L1582.05 685.399 L1581.49 685.399 L1580.93 685.399 L1580.37 685.399 L1579.82 685.399 L1579.26 685.399 L1578.7 685.399 L1578.14 685.399 L1577.58 685.399 L1577.02 685.399 L1576.46 685.399 L1575.9 685.399 L1575.34 685.399 L1574.78 685.399 L1574.22 685.399 L1573.66 685.399 L1573.1 685.399 L1572.55 685.399 L1571.99 685.399 L1571.43 685.399 L1570.87 685.399 L1570.31 685.399 L1569.75 685.399 L1569.19 685.399 L1568.63 685.399 L1568.07 685.399 L1567.51 685.399 L1566.95 685.399 L1566.39 685.399 L1565.83 685.399 L1565.28 685.399 L1564.72 685.399 L1564.16 685.399 L1563.6 685.399 L1563.04 685.399 L1562.48 685.399 L1561.92 685.399 L1561.36 685.399 L1560.8 685.399 L1560.24 685.399 L1559.68 685.399 L1559.12 685.399 L1558.56 685.399 L1558 685.399 L1557.45 685.399 L1556.89 685.399 L1556.33 685.399 L1555.77 685.399 L1555.21 685.399 L1554.65 685.399 L1554.09 685.399 L1553.53 685.399 L1552.97 685.399 L1552.41 685.399 L1551.85 685.399 L1551.29 685.399 L1550.73 685.399 L1550.18 685.399 L1549.62 685.399 L1549.06 685.399 L1548.5 685.399 L1547.94 685.399 L1547.38 685.399 L1546.82 685.399 L1546.26 685.399 L1545.7 685.399 L1545.14 685.399 L1544.58 685.399 L1544.02 685.399 L1543.46 685.399 L1542.9 685.399 L1542.35 685.399 L1541.79 685.399 L1541.23 685.399 L1540.67 685.399 L1540.11 685.399 L1539.55 685.399 L1538.99 685.399 L1538.43 685.399 L1537.87 685.399 L1537.31 685.399 L1536.75 685.399 L1536.19 685.399 L1535.63 685.399 L1535.08 685.399 L1534.52 685.399 L1533.96 685.399 L1533.4 685.399 L1532.84 685.399 L1532.28 685.399 L1531.72 685.399 L1531.16 685.399 L1530.6 685.399 L1530.04 685.399 L1529.48 685.399 L1528.92 685.399 L1528.36 685.399 L1527.81 685.399 L1527.25 685.399 L1526.69 685.399 L1526.13 685.399 L1525.57 685.399 L1525.01 685.399 L1524.45 685.399 L1523.89 685.399 L1523.33 685.399 L1522.77 685.399 L1522.21 685.399 L1521.65 685.399 L1521.09 685.399 L1520.53 685.399 L1519.98 685.399 L1519.42 685.399 L1518.86 685.399 L1518.3 685.399 L1517.74 685.399 L1517.18 685.399 L1516.62 685.399 L1516.06 685.399 L1515.5 685.399 L1514.94 685.399 L1514.38 685.399 L1513.82 685.399 L1513.26 685.399 L1512.71 685.399 L1512.15 685.399 L1511.59 685.399 L1511.03 685.399 L1510.47 685.399 L1509.91 685.399 L1509.35 685.399 L1508.79 685.399 L1508.23 685.399 L1507.67 685.399 L1507.11 685.399 L1506.55 685.399 L1505.99 685.399 L1505.44 685.399 L1504.88 685.399 L1504.32 685.399 L1503.76 685.399 L1503.2 685.399 L1502.64 685.399 L1502.08 685.399 L1501.52 685.399 L1500.96 685.399 L1500.4 685.399 L1499.84 685.399 L1499.28 685.399 L1498.72 685.399 L1498.16 685.399 L1497.61 685.399 L1497.05 685.399 L1496.49 685.399 L1495.93 685.399 L1495.37 685.399 L1494.81 685.399 L1494.25 685.399 L1493.69 685.399 L1493.13 685.399 L1492.57 685.399 L1492.01 685.399 L1491.45 685.399 L1490.89 685.399 L1490.34 685.399 L1489.78 685.399 L1489.22 685.399 L1488.66 685.399 L1488.1 685.399 L1487.54 685.399 L1486.98 685.399 L1486.42 685.399 L1485.86 685.399 L1485.3 685.399 L1484.74 685.399 L1484.18 685.399 L1483.62 685.399 L1483.07 685.399 L1482.51 685.399 L1481.95 685.399 L1481.39 685.399 L1480.83 685.399 L1480.27 685.399 L1479.71 685.399 L1479.15 685.399 L1478.59 685.399 L1478.03 685.399 L1477.47 685.399 L1476.91 685.399 L1476.35 685.399 L1475.79 685.399 L1475.24 685.399 L1474.68 685.399 L1474.12 685.399 L1473.56 685.399 L1473 685.399 L1472.44 685.399 L1471.88 685.399 L1471.32 685.399 L1470.76 685.399 L1470.2 685.399 L1469.64 685.399 L1469.08 685.399 L1468.52 685.399 L1467.97 685.399 L1467.41 685.399 L1466.85 685.399 L1466.29 685.399 L1465.73 685.399 L1465.17 685.399 L1464.61 685.399 L1464.05 685.399 L1463.49 685.399 L1462.93 685.399 L1462.37 685.399 L1461.81 685.399 L1461.25 685.399 L1460.7 685.399 L1460.14 685.399 L1459.58 685.399 L1459.02 685.399 L1458.46 685.399 L1457.9 685.399 L1457.34 685.399 L1456.78 685.399 L1456.22 685.399 L1455.66 685.399 L1455.1 685.399 L1454.54 685.399 L1453.98 685.399 L1453.42 685.399 L1452.87 685.399 L1452.31 685.399 L1451.75 685.399 L1451.19 685.399 L1450.63 685.399 L1450.07 685.399 L1449.51 685.399 L1448.95 685.399 L1448.39 685.399 L1447.83 685.399 L1447.27 685.399 L1446.71 685.399 L1446.15 685.399 L1445.6 685.399 L1445.04 685.399 L1444.48 685.399 L1443.92 685.399 L1443.36 685.399 L1442.8 685.399 L1442.24 685.399 L1441.68 685.399 L1441.12 685.399 L1440.56 685.399 L1440 685.399 L1439.44 685.399 L1438.88 685.399 L1438.33 685.399 L1437.77 685.399 L1437.21 685.399 L1436.65 685.399 L1436.09 685.399 L1435.53 685.399 L1434.97 685.399 L1434.41 685.399 L1433.85 685.399 L1433.29 685.399 L1432.73 685.399 L1432.17 685.399 L1431.61 685.399 L1431.05 685.399 L1430.5 685.399 L1429.94 685.399 L1429.38 685.399 L1428.82 685.399 L1428.26 685.399 L1427.7 685.399 L1427.14 685.399 L1426.58 685.399 L1426.02 685.399 L1425.46 685.399 L1424.9 685.399 L1424.34 685.399 L1423.78 685.399 L1423.23 685.399 L1422.67 685.399 L1422.11 685.399 L1421.55 685.399 L1420.99 685.399 L1420.43 685.399 L1419.87 685.399 L1419.31 685.399 L1418.75 685.399 L1418.19 685.399 L1417.63 685.399 L1417.07 685.399 L1416.51 685.399 L1415.95 685.399 L1415.4 685.399 L1414.84 685.399 L1414.28 685.399 L1413.72 685.399 L1413.16 685.399 L1412.6 685.399 L1412.04 685.399 L1411.48 685.399 L1410.92 685.399 L1410.36 685.399 L1409.8 685.399 L1409.24 685.399 L1408.68 685.399 L1408.13 685.399 L1407.57 685.399 L1407.01 685.399 L1406.45 685.399 L1405.89 685.399 L1405.33 685.399 L1404.77 685.399 L1404.21 685.399 L1403.65 685.399 L1403.09 685.399 L1402.53 685.399 L1401.97 685.399 L1401.41 685.399 L1400.86 685.399 L1400.3 685.399 L1399.74 685.399 L1399.18 685.399 L1398.62 685.399 L1398.06 685.399 L1397.5 685.399 L1396.94 685.399 L1396.38 685.399 L1395.82 685.399 L1395.26 685.399 L1394.7 685.399 L1394.14 685.399 L1393.58 685.399 L1393.03 685.399 L1392.47 685.399 L1391.91 685.399 L1391.35 685.399 L1390.79 685.399 L1390.23 685.399 L1389.67 685.399 L1389.11 685.399 L1388.55 685.399 L1387.99 685.399 L1387.43 685.399 L1386.87 685.399 L1386.31 685.399 L1385.76 685.399 L1385.2 685.399 L1384.64 685.399 L1384.08 685.399 L1383.52 685.399 L1382.96 685.399 L1382.4 685.399 L1381.84 685.399 L1381.28 685.399 L1380.72 685.399 L1380.16 685.399 L1379.6 685.399 L1379.04 685.399 L1378.49 685.399 L1377.93 685.399 L1377.37 685.399 L1376.81 685.399 L1376.25 685.399 L1375.69 685.399 L1375.13 685.399 L1374.57 685.399 L1374.01 685.399 L1373.45 685.399 L1372.89 685.399 L1372.33 685.399 L1371.77 685.399 L1371.21 685.399 L1370.66 685.399 L1370.1 685.399 L1369.54 685.399 L1368.98 685.399 L1368.42 685.399 L1367.86 685.399 L1367.3 685.399 L1366.74 685.399 L1366.18 685.399 L1365.62 685.399 L1365.06 685.399 L1364.5 685.399 L1363.94 685.399 L1363.39 685.399 L1362.83 685.399 L1362.27 685.399 L1361.71 685.399 L1361.15 685.399 L1360.59 685.399 L1360.03 685.399 L1359.47 685.399 L1358.91 685.399 L1358.35 685.399 L1357.79 685.399 L1357.23 685.399 L1356.67 685.399 L1356.12 685.399 L1355.56 685.399 L1355 685.399 L1354.44 685.399 L1353.88 685.399 L1353.32 685.399 L1352.76 685.399 L1352.2 685.399 L1351.64 685.399 L1351.08 685.399 L1350.52 685.399 L1349.96 685.399 L1349.4 685.399 L1348.84 685.399 L1348.29 685.399 L1347.73 685.399 L1347.17 685.399 L1346.61 685.399 L1346.05 685.399 L1345.49 685.399 L1344.93 685.399 L1344.37 685.399 L1343.81 685.399 L1343.25 685.399 L1342.69 685.399 L1342.13 685.399 L1341.57 685.399 L1341.02 685.399 L1340.46 685.399 L1339.9 685.399 L1339.34 685.399 L1338.78 685.399 L1338.22 685.399 L1337.66 685.399 L1337.1 685.399 L1336.54 685.399 L1335.98 685.399 L1335.42 685.399 L1334.86 685.399 L1334.3 685.399 L1333.75 685.399 L1333.19 685.399 L1332.63 685.399 L1332.07 685.399 L1331.51 685.399 L1330.95 685.399 L1330.39 685.399 L1329.83 685.399 L1329.27 685.399 L1328.71 685.399 L1328.15 685.399 L1327.59 685.399 L1327.03 685.399 L1326.47 685.399 L1325.92 685.399 L1325.36 685.399 L1324.8 685.399 L1324.24 685.399 L1323.68 685.399 L1323.12 685.399 L1322.56 685.399 L1322 685.399 L1321.44 685.399 L1320.88 685.399 L1320.32 685.399 L1319.76 685.399 L1319.2 685.399 L1318.65 685.399 L1318.09 685.399 L1317.53 685.399 L1316.97 685.399 L1316.41 685.399 L1315.85 685.399 L1315.29 685.399 L1314.73 685.399 L1314.17 685.399 L1313.61 685.399 L1313.05 685.399 L1312.49 685.399 L1311.93 685.399 L1311.38 685.399 L1310.82 685.399 L1310.26 685.399 L1309.7 685.399 L1309.14 685.399 L1308.58 685.399 L1308.02 685.399 L1307.46 685.399 L1306.9 685.399 L1306.34 685.399 L1305.78 685.399 L1305.22 685.399 L1304.66 685.399 L1304.1 685.399 L1303.55 685.399 L1302.99 685.399 L1302.43 685.399 L1301.87 685.399 L1301.31 685.399 L1300.75 685.399 L1300.19 685.399 L1299.63 685.399 L1299.07 685.399 L1298.51 685.399 L1297.95 685.399 L1297.39 685.399 L1296.83 685.399 L1296.28 685.399 L1295.72 685.399 L1295.16 685.399 L1294.6 685.399 L1294.04 685.399 L1293.48 685.399 L1292.92 685.399 L1292.36 685.399 L1291.8 685.399 L1291.24 685.399 L1290.68 685.399 L1290.12 685.399 L1289.56 685.399 L1289 685.399 L1288.45 685.399 L1287.89 685.399 L1287.33 685.399 L1286.77 685.399 L1286.21 685.399 L1285.65 685.399 L1285.09 685.399 L1284.53 685.399 L1283.97 685.399 L1283.41 685.399 L1282.85 685.399 L1282.29 685.399 L1281.73 685.399 L1281.18 685.399 L1280.62 685.399 L1280.06 685.399 L1279.5 685.399 L1278.94 685.399 L1278.38 685.399 L1277.82 685.399 L1277.26 685.399 L1276.7 685.399 L1276.14 685.399 L1275.58 685.399 L1275.02 685.399 L1274.46 685.399 L1273.91 685.399 L1273.35 685.399 L1272.79 685.399 L1272.23 685.399 L1271.67 685.399 L1271.11 685.399 L1270.55 685.399 L1269.99 685.399 L1269.43 685.399 L1268.87 685.399 L1268.31 685.399 L1267.75 685.399 L1267.19 685.399 L1266.63 685.399 L1266.08 685.399 L1265.52 685.399 L1264.96 685.399 L1264.4 685.399 L1263.84 685.399 L1263.28 685.399 L1262.72 685.399 L1262.16 685.399 L1261.6 685.399 L1261.04 685.399 L1260.48 685.399 L1259.92 685.399 L1259.36 685.399 L1258.81 685.399 L1258.25 685.399 L1257.69 685.399 L1257.13 685.399 L1256.57 685.399 L1256.01 685.399 L1255.45 685.399 L1254.89 685.399 L1254.33 685.399 L1253.77 685.399 L1253.21 685.399 L1252.65 685.399 L1252.09 685.399 L1251.54 685.399 L1250.98 685.399 L1250.42 685.399 L1249.86 685.399 L1249.3 685.399 L1248.74 685.399 L1248.18 685.399 L1247.62 685.399 L1247.06 685.399 L1246.5 685.399 L1245.94 685.399 L1245.38 685.399 L1244.82 685.399 L1244.26 685.399 L1243.71 685.399 L1243.15 685.399 L1242.59 685.399 L1242.03 685.399 L1241.47 685.399 L1240.91 685.399 L1240.35 685.399 L1239.79 685.399 L1239.23 685.399 L1238.67 685.399 L1238.11 685.399 L1237.55 685.399 L1236.99 685.399 L1236.44 685.399 L1235.88 685.399 L1235.32 685.399 L1234.76 685.399 L1234.2 685.399 L1233.64 685.399 L1233.08 685.399 L1232.52 685.399 L1231.96 685.399 L1231.4 685.399 L1230.84 685.399 L1230.28 685.399 L1229.72 685.399 L1229.17 685.399 L1228.61 685.399 L1228.05 685.399 L1227.49 685.399 L1226.93 685.399 L1226.37 685.399 L1225.81 685.399 L1225.25 685.399 L1224.69 685.399 L1224.13 685.399 L1223.57 685.399 L1223.01 685.399 L1222.45 685.399 L1221.89 685.399 L1221.34 685.399 L1220.78 685.399 L1220.22 685.399 L1219.66 685.399 L1219.1 685.399 L1218.54 685.399 L1217.98 685.399 L1217.42 685.399 L1216.86 685.399 L1216.3 685.399 L1215.74 685.399 L1215.18 685.399 L1214.62 685.399 L1214.07 685.399 L1213.51 685.399 L1212.95 685.399 L1212.39 685.399 L1211.83 685.399 L1211.27 685.399 L1210.71 685.399 L1210.15 685.399 L1209.59 685.399 L1209.03 685.399 L1208.47 685.399 L1207.91 685.399 L1207.35 685.399 L1206.8 685.399 L1206.24 685.399 L1205.68 685.399 L1205.12 685.399 L1204.56 685.399 L1204 685.399 L1203.44 685.399 L1202.88 685.399 L1202.32 685.399 L1201.76 685.399 L1201.2 685.399 L1200.64 685.399 L1200.08 685.399 L1199.52 685.399 L1198.97 685.399 L1198.41 685.399 L1197.85 685.399 L1197.29 685.399 L1196.73 685.399 L1196.17 685.399 L1195.61 685.399 L1195.05 685.399 L1194.49 685.399 L1193.93 685.399 L1193.37 685.399 L1192.81 685.399 L1192.25 685.399 L1191.7 685.399 L1191.14 685.399 L1190.58 685.399 L1190.02 685.399 L1189.46 685.399 L1188.9 685.399 L1188.34 685.399 L1187.78 685.399 L1187.22 685.399 L1186.66 685.399 L1186.1 685.399 L1185.54 685.399 L1184.98 685.399 L1184.43 685.399 L1183.87 685.399 L1183.31 685.399 L1182.75 685.399 L1182.19 685.399 L1181.63 685.399 L1181.07 685.399 L1180.51 685.399 L1179.95 685.399 L1179.39 685.399 L1178.83 685.399 L1178.27 685.399 L1177.71 685.399 L1177.15 685.399 L1176.6 685.399 L1176.04 685.399 L1175.48 685.399 L1174.92 685.399 L1174.36 685.399 L1173.8 685.399 L1173.24 685.399 L1172.68 685.399 L1172.12 685.399 L1171.56 685.399 L1171 685.399 L1170.44 685.399 L1169.88 685.399 L1169.33 685.399 L1168.77 685.399 L1168.21 685.399 L1167.65 685.399 L1167.09 685.399 L1166.53 685.399 L1165.97 685.399 L1165.41 685.399 L1164.85 685.399 L1164.29 685.399 L1163.73 685.399 L1163.17 685.399 L1162.61 685.399 L1162.05 685.399 L1161.5 685.399 L1160.94 685.399 L1160.38 685.399 L1159.82 685.399 L1159.26 685.399 L1158.7 685.399 L1158.14 685.399 L1157.58 685.399 L1157.02 685.399 L1156.46 685.399 L1155.9 685.399 L1155.34 685.399 L1154.78 685.399 L1154.23 685.399 L1153.67 685.399 L1153.11 685.399 L1152.55 685.399 L1151.99 685.399 L1151.43 685.399 L1150.87 685.399 L1150.31 685.399 L1149.75 685.399 L1149.19 685.399 L1148.63 685.399 L1148.07 685.399 L1147.51 685.399 L1146.96 685.399 L1146.4 685.399 L1145.84 685.399 L1145.28 685.399 L1144.72 685.399 L1144.16 685.399 L1143.6 685.399 L1143.04 685.399 L1142.48 685.399 L1141.92 685.399 L1141.36 685.399 L1140.8 685.399 L1140.24 685.399 L1139.68 685.399 L1139.13 685.399 L1138.57 685.399 L1138.01 685.399 L1137.45 685.399 L1136.89 685.399 L1136.33 685.399 L1135.77 685.399 L1135.21 685.399 L1134.65 685.399 L1134.09 685.399 L1133.53 685.399 L1132.97 685.399 L1132.41 685.399 L1131.86 685.399 L1131.3 685.399 L1130.74 685.399 L1130.18 685.399 L1129.62 685.399 L1129.06 685.399 L1128.5 685.399 L1127.94 685.399 L1127.38 685.399 L1126.82 685.399 L1126.26 685.399 L1125.7 685.399 L1125.14 685.399 L1124.59 685.399 L1124.03 685.399 L1123.47 685.399 L1122.91 685.399 L1122.35 685.399 L1121.79 685.399 L1121.23 685.399 L1120.67 685.399 L1120.11 685.399 L1119.55 685.399 L1118.99 685.399 L1118.43 685.399 L1117.87 685.399 L1117.31 685.399 L1116.76 685.399 L1116.2 685.399 L1115.64 685.399 L1115.08 685.399 L1114.52 685.399 L1113.96 685.399 L1113.4 685.399 L1112.84 685.399 L1112.28 685.399 L1111.72 685.399 L1111.16 685.399 L1110.6 685.399 L1110.04 685.399 L1109.49 685.399 L1108.93 685.399 L1108.37 685.399 L1107.81 685.399 L1107.25 685.399 L1106.69 685.399 L1106.13 685.399 L1105.57 685.399 L1105.01 685.399 L1104.45 685.399 L1103.89 685.399 L1103.33 685.399 L1102.77 685.399 L1102.22 685.399 L1101.66 685.399 L1101.1 685.399 L1100.54 685.399 L1099.98 685.399 L1099.42 685.399 L1098.86 685.399 L1098.3 685.399 L1097.74 685.399 L1097.18 685.399 L1096.62 685.399 L1096.06 685.399 L1095.5 685.399 L1094.94 685.399 L1094.39 685.399 L1093.83 685.399 L1093.27 685.399 L1092.71 685.399 L1092.15 685.399 L1091.59 685.399 L1091.03 685.399 L1090.47 685.399 L1089.91 685.399 L1089.35 685.399 L1088.79 685.399 L1088.23 685.399 L1087.67 685.399 L1087.12 685.399 L1086.56 685.399 L1086 685.399 L1085.44 685.399 L1084.88 685.399 L1084.32 685.399 L1083.76 685.399 L1083.2 685.399 L1082.64 685.399 L1082.08 685.399 L1081.52 685.399 L1080.96 685.399 L1080.4 685.399 L1079.85 685.399 L1079.29 685.399 L1078.73 685.399 L1078.17 685.399 L1077.61 685.399 L1077.05 685.399 L1076.49 685.399 L1075.93 685.399 L1075.37 685.399 L1074.81 685.399 L1074.25 685.399 L1073.69 685.399 L1073.13 685.399 L1072.57 685.399 L1072.02 685.399 L1071.46 685.399 L1070.9 685.399 L1070.34 685.399 L1069.78 685.399 L1069.22 685.399 L1068.66 685.399 L1068.1 685.399 L1067.54 685.399 L1066.98 685.399 L1066.42 685.399 L1065.86 685.399 L1065.3 685.399 L1064.75 685.399 L1064.19 685.399 L1063.63 685.399 L1063.07 685.399 L1062.51 685.399 L1061.95 685.399 L1061.39 685.399 L1060.83 685.399 L1060.27 685.399 L1059.71 685.399 L1059.15 685.399 L1058.59 685.399 L1058.03 685.399 L1057.48 685.399 L1056.92 685.399 L1056.36 685.399 L1055.8 685.399 L1055.24 685.399 L1054.68 685.399 L1054.12 685.399 L1053.56 685.399 L1053 685.399 L1052.44 685.399 L1051.88 685.399 L1051.32 685.399 L1050.76 685.399 L1050.2 685.399 L1049.65 685.399 L1049.09 685.399 L1048.53 685.399 L1047.97 685.399 L1047.41 685.399 L1046.85 685.399 L1046.29 685.399 L1045.73 685.399 L1045.17 685.399 L1044.61 685.399 L1044.05 685.399 L1043.49 685.399 L1042.93 685.399 L1042.38 685.399 L1041.82 685.399 L1041.26 685.399 L1040.7 685.399 L1040.14 685.399 L1039.58 685.399 L1039.02 685.399 L1038.46 685.399 L1037.9 685.399 L1037.34 685.399 L1036.78 685.399 L1036.22 685.399 L1035.66 685.399 L1035.1 685.399 L1034.55 685.399 L1033.99 685.399 L1033.43 685.399 L1032.87 685.399 L1032.31 685.399 L1031.75 685.399 L1031.19 685.399 L1030.63 685.399 L1030.07 685.399 L1029.51 685.399 L1028.95 685.399 L1028.39 685.399 L1027.83 685.399 L1027.28 685.399 L1026.72 685.399 L1026.16 685.399 L1025.6 685.399 L1025.04 685.399 L1024.48 685.399 L1023.92 685.399 L1023.36 685.399 L1022.8 685.399 L1022.24 685.399 L1021.68 685.399 L1021.12 685.399 L1020.56 685.399 L1020.01 685.399 L1019.45 685.399 L1018.89 685.399 L1018.33 685.399 L1017.77 685.399 L1017.21 685.399 L1016.65 685.399 L1016.09 685.399 L1015.53 685.399 L1014.97 685.399 L1014.41 685.399 L1013.85 685.399 L1013.29 685.399 L1012.73 685.399 L1012.18 685.399 L1011.62 685.399 L1011.06 685.399 L1010.5 685.399 L1009.94 685.399 L1009.38 685.399 L1008.82 685.399 L1008.26 685.399 L1007.7 685.399 L1007.14 685.399 L1006.58 685.399 L1006.02 685.399 L1005.46 685.399 L1004.91 685.399 L1004.35 685.399 L1003.79 685.399 L1003.23 685.399 L1002.67 685.399 L1002.11 685.399 L1001.55 685.399 L1000.99 685.399 L1000.43 685.399 L999.872 685.399 L999.313 685.399 L998.754 685.399 L998.194 685.399 L997.635 685.399 L997.076 685.399 L996.517 685.399 L995.957 685.399 L995.398 685.399 L994.839 685.399 L994.28 685.399 L993.72 685.399 L993.161 685.399 L992.602 685.399 L992.043 685.399 L991.483 685.399 L990.924 685.399 L990.365 685.399 L989.806 685.399 L989.246 685.399 L988.687 685.399 L988.128 685.399 L987.569 685.399 L987.009 685.399 L986.45 685.399 L985.891 685.399 L985.332 685.399 L984.772 685.399 L984.213 685.399 L983.654 685.399 L983.095 685.399 L982.535 685.399 L981.976 685.399 L981.417 685.399 L980.858 685.399 L980.298 685.399 L979.739 685.399 L979.18 685.399 L978.621 685.399 L978.061 685.399 L977.502 685.399 L976.943 685.399 L976.384 685.399 L975.824 685.399 L975.265 685.399 L974.706 685.399 L974.147 685.399 L973.587 685.399 L973.028 685.399 L972.469 685.399 L971.91 685.399 L971.35 685.399 L970.791 685.399 L970.232 685.399 L969.673 685.399 L969.113 685.399 L968.554 685.399 L967.995 685.399 L967.436 685.399 L966.876 685.399 L966.317 685.399 L965.758 685.399 L965.199 685.399 L964.639 685.399 L964.08 685.399 L963.521 685.399 L962.962 685.399 L962.402 685.399 L961.843 685.399 L961.284 685.399 L960.725 685.399 L960.165 685.399 L959.606 685.399 L959.047 685.399 L958.488 685.399 L957.928 685.399 L957.369 685.399 L956.81 685.399 L956.251 685.399 L955.691 685.399 L955.132 685.399 L954.573 685.399 L954.014 685.399 L953.454 685.399 L952.895 685.399 L952.336 685.399 L951.777 685.399 L951.217 685.399 L950.658 685.399 L950.099 685.399 L949.54 685.399 L948.98 685.399 L948.421 685.399 L947.862 685.399 L947.303 685.399 L946.743 685.399 L946.184 685.399 L945.625 685.399 L945.066 685.399 L944.506 685.399 L943.947 685.399 L943.388 685.399 L942.829 685.399 L942.269 685.399 L941.71 685.399 L941.151 685.399 L940.592 685.399 L940.032 685.399 L939.473 685.399 L938.914 685.399 L938.355 685.399 L937.795 685.399 L937.236 685.399 L936.677 685.399 L936.118 685.399 L935.558 685.399 L934.999 685.399 L934.44 685.399 L933.881 685.399 L933.321 685.399 L932.762 685.399 L932.203 685.399 L931.644 685.399 L931.084 685.399 L930.525 685.399 L929.966 685.399 L929.406 685.399 L928.847 685.399 L928.288 685.399 L927.729 685.399 L927.169 685.399 L926.61 685.399 L926.051 685.399 L925.492 685.399 L924.932 685.399 L924.373 685.399 L923.814 685.399 L923.255 685.399 L922.695 685.399 L922.136 685.399 L921.577 685.399 L921.018 685.399 L920.458 685.399 L919.899 685.399 L919.34 685.399 L918.781 685.399 L918.221 685.399 L917.662 685.399 L917.103 685.399 L916.544 685.399 L915.984 685.399 L915.425 685.399 L914.866 685.399 L914.307 685.399 L913.747 685.399 L913.188 685.399 L912.629 685.399 L912.07 685.399 L911.51 685.399 L910.951 685.399 L910.392 685.399 L909.833 685.399 L909.273 685.399 L908.714 685.399 L908.155 685.399 L907.596 685.399 L907.036 685.399 L906.477 685.399 L905.918 685.399 L905.359 685.399 L904.799 685.399 L904.24 685.399 L903.681 685.399 L903.122 685.399 L902.562 685.399 L902.003 685.399 L901.444 685.399 L900.885 685.399 L900.325 685.399 L899.766 685.399 L899.207 685.399 L898.648 685.399 L898.088 685.399 L897.529 685.399 L896.97 685.399 L896.411 685.399 L895.851 685.399 L895.292 685.399 L894.733 685.399 L894.174 685.399 L893.614 685.399 L893.055 685.399 L892.496 685.399 L891.937 685.399 L891.377 685.399 L890.818 685.399 L890.259 685.399 L889.7 685.399 L889.14 685.399 L888.581 685.399 L888.022 685.399 L887.463 685.399 L886.903 685.399 L886.344 685.399 L885.785 685.399 L885.226 685.399 L884.666 685.399 L884.107 685.399 L883.548 685.399 L882.989 685.399 L882.429 685.399 L881.87 685.399 L881.311 685.399 L880.752 685.399 L880.192 685.399 L879.633 685.399 L879.074 685.399 L878.515 685.399 L877.955 685.399 L877.396 685.399 L876.837 685.399 L876.278 685.399 L875.718 685.399 L875.159 685.399 L874.6 685.399 L874.041 685.399 L873.481 685.399 L872.922 685.399 L872.363 685.399 L871.804 685.399 L871.244 685.399 L870.685 685.399 L870.126 685.399 L869.567 685.399 L869.007 685.399 L868.448 685.399 L867.889 685.399 L867.33 685.399 L866.77 685.399 L866.211 685.399 L865.652 685.399 L865.093 685.399 L864.533 685.399 L863.974 685.399 L863.415 685.399 L862.856 685.399 L862.296 685.399 L861.737 685.399 L861.178 685.399 L860.619 685.399 L860.059 685.399 L859.5 685.399 L858.941 685.399 L858.382 685.399 L857.822 685.399 L857.263 685.399 L856.704 685.399 L856.145 685.399 L855.585 685.399 L855.026 685.399 L854.467 685.399 L853.908 685.399 L853.348 685.399 L852.789 685.399 L852.23 685.399 L851.671 685.399 L851.111 685.399 L850.552 685.399 L849.993 685.399 L849.434 685.399 L848.874 685.399 L848.315 685.399 L847.756 685.399 L847.197 685.399 L846.637 685.399 L846.078 685.399 L845.519 685.399 L844.96 685.399 L844.4 685.399 L843.841 685.399 L843.282 685.399 L842.723 685.399 L842.163 685.399 L841.604 685.399 L841.045 685.399 L840.486 685.399 L839.926 685.399 L839.367 685.399 L838.808 685.399 L838.249 685.399 L837.689 685.399 L837.13 685.399 L836.571 685.399 L836.012 685.399 L835.452 685.399 L834.893 685.399 L834.334 685.399 L833.775 685.399 L833.215 685.399 L832.656 685.399 L832.097 685.399 L831.538 685.399 L830.978 685.399 L830.419 685.399 L829.86 685.399 L829.301 685.399 L828.741 685.399 L828.182 685.399 L827.623 685.399 L827.064 685.399 L826.504 685.399 L825.945 685.399 L825.386 685.399 L824.827 685.399 L824.267 685.399 L823.708 685.399 L823.149 685.399 L822.59 685.399 L822.03 685.399 L821.471 685.399 L820.912 685.399 L820.353 685.399 L819.793 685.399 L819.234 685.399 L818.675 685.399 L818.116 685.399 L817.556 685.399 L816.997 685.399 L816.438 685.399 L815.879 685.399 L815.319 685.399 L814.76 685.399 L814.201 685.399 L813.642 685.399 L813.082 685.399 L812.523 685.399 L811.964 685.399 L811.405 685.399 L810.845 685.399 L810.286 685.399 L809.727 685.399 L809.168 685.399 L808.608 685.399 L808.049 685.399 L807.49 685.399 L806.931 685.399 L806.371 685.399 L805.812 685.399 L805.253 685.399 L804.693 685.399 L804.134 685.399 L803.575 685.399 L803.016 685.399 L802.456 685.399 L801.897 685.399 L801.338 685.399 L800.779 685.399 L800.219 685.399 L799.66 685.399 L799.101 685.399 L798.542 685.399 L797.982 685.399 L797.423 685.399 L796.864 685.399 L796.305 685.399 L795.745 685.399 L795.186 685.399 L794.627 685.399 L794.068 685.399 L793.508 685.399 L792.949 685.399 L792.39 685.399 L791.831 685.399 L791.271 685.399 L790.712 685.399 L790.153 685.399 L789.594 685.399 L789.034 685.399 L788.475 685.399 L787.916 685.399 L787.357 685.399 L786.797 685.399 L786.238 685.399 L785.679 685.399 L785.12 685.399 L784.56 685.399 L784.001 685.399 L783.442 685.399 L782.883 685.399 L782.323 685.399 L781.764 685.399 L781.205 685.399 L780.646 685.399 L780.086 685.399 L779.527 685.399 L778.968 685.399 L778.409 685.399 L777.849 685.399 L777.29 685.399 L776.731 685.399 L776.172 685.399 L775.612 685.399 L775.053 685.399 L774.494 685.399 L773.935 685.399 L773.375 685.399 L772.816 685.399 L772.257 685.399 L771.698 685.399 L771.138 685.399 L770.579 685.399 L770.02 685.399 L769.461 685.399 L768.901 685.399 L768.342 685.399 L767.783 685.399 L767.224 685.399 L766.664 685.399 L766.105 685.399 L765.546 685.399 L764.987 685.399 L764.427 685.399 L763.868 685.399 L763.309 685.399 L762.75 685.399 L762.19 685.399 L761.631 685.399 L761.072 685.399 L760.513 685.399 L759.953 685.399 L759.394 685.399 L758.835 685.399 L758.276 685.399 L757.716 685.399 L757.157 685.399 L756.598 685.399 L756.039 685.399 L755.479 685.399 L754.92 685.399 L754.361 685.399 L753.802 685.399 L753.242 685.399 L752.683 685.399 L752.124 685.399 L751.565 685.399 L751.005 685.399 L750.446 685.399 L749.887 685.399 L749.328 685.399 L748.768 685.399 L748.209 685.399 L747.65 685.399 L747.091 685.399 L746.531 685.399 L745.972 685.399 L745.413 685.399 L744.854 685.399 L744.294 685.399 L743.735 685.399 L743.176 685.399 L742.617 685.399 L742.057 685.399 L741.498 685.399 L740.939 685.399 L740.38 685.399 L739.82 685.399 L739.261 685.399 L738.702 685.399 L738.143 685.399 L737.583 685.399 L737.024 685.399 L736.465 685.399 L735.906 685.399 L735.346 685.399 L734.787 685.399 L734.228 685.399 L733.669 685.399 L733.109 685.399 L732.55 685.399 L731.991 685.399 L731.432 685.399 L730.872 685.399 L730.313 685.399 L729.754 685.399 L729.195 685.399 L728.635 685.399 L728.076 685.399 L727.517 685.399 L726.958 685.399 L726.398 685.399 L725.839 685.399 L725.28 685.399 L724.721 685.399 L724.161 685.399 L723.602 685.399 L723.043 685.399 L722.484 685.399 L721.924 685.399 L721.365 685.399 L720.806 685.399 L720.247 685.399  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip803)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,688.868 720.806,688.868 721.365,688.868 721.924,688.868 722.484,688.868 723.043,688.868 723.602,688.868 724.161,688.868 724.721,688.868 725.28,688.868 725.839,688.868 726.398,688.868 726.958,688.868 727.517,688.868 728.076,688.868 728.635,688.868 729.195,688.868 729.754,688.868 730.313,688.868 730.872,688.868 731.432,688.868 731.991,688.868 732.55,688.868 733.109,688.868 733.669,688.868 734.228,688.868 734.787,688.868 735.346,688.868 735.906,688.868 736.465,688.868 737.024,688.868 737.583,688.868 738.143,688.868 738.702,688.868 739.261,688.868 739.82,688.868 740.38,688.868 740.939,688.868 741.498,688.868 742.057,688.868 742.617,688.868 743.176,688.868 743.735,688.868 744.294,688.868 744.854,688.868 745.413,688.868 745.972,688.868 746.531,688.868 747.091,688.868 747.65,688.868 748.209,688.868 748.768,688.868 749.328,688.868 749.887,688.868 750.446,688.868 751.005,688.868 751.565,688.868 752.124,688.868 752.683,688.868 753.242,688.868 753.802,688.868 754.361,688.868 754.92,688.868 755.479,688.868 756.039,688.868 756.598,688.868 757.157,688.868 757.716,688.868 758.276,688.868 758.835,688.868 759.394,688.868 759.953,688.868 760.513,688.868 761.072,688.868 761.631,688.868 762.19,688.868 762.75,688.868 763.309,688.868 763.868,688.868 764.427,688.868 764.987,688.868 765.546,688.868 766.105,688.868 766.664,688.868 767.224,688.868 767.783,688.868 768.342,688.868 768.901,688.868 769.461,688.868 770.02,688.868 770.579,688.868 771.138,688.868 771.698,688.868 772.257,688.868 772.816,688.868 773.375,688.868 773.935,688.868 774.494,688.868 775.053,688.868 775.612,688.868 776.172,688.868 776.731,688.868 777.29,688.868 777.849,688.868 778.409,688.868 778.968,688.868 779.527,688.868 780.086,688.868 780.646,688.868 781.205,688.868 781.764,688.868 782.323,688.868 782.883,688.868 783.442,688.868 784.001,688.868 784.56,688.868 785.12,688.868 785.679,688.868 786.238,688.868 786.797,688.868 787.357,688.868 787.916,688.868 788.475,688.868 789.034,688.868 789.594,688.868 790.153,688.868 790.712,688.868 791.271,688.868 791.831,688.868 792.39,688.868 792.949,688.868 793.508,688.868 794.068,688.868 794.627,688.868 795.186,688.868 795.745,688.868 796.305,688.868 796.864,688.868 797.423,688.868 797.982,688.868 798.542,688.868 799.101,688.868 799.66,688.868 800.219,688.868 800.779,688.868 801.338,688.868 801.897,688.868 802.456,688.868 803.016,688.868 803.575,688.868 804.134,688.868 804.693,688.868 805.253,688.868 805.812,688.868 806.371,688.868 806.931,688.868 807.49,688.868 808.049,688.868 808.608,688.868 809.168,688.868 809.727,688.868 810.286,688.868 810.845,688.868 811.405,688.868 811.964,688.868 812.523,688.868 813.082,688.868 813.642,688.868 814.201,688.868 814.76,688.868 815.319,688.868 815.879,688.868 816.438,688.868 816.997,688.868 817.556,688.868 818.116,688.868 818.675,688.868 819.234,688.868 819.793,688.868 820.353,688.868 820.912,688.868 821.471,688.868 822.03,688.868 822.59,688.868 823.149,688.868 823.708,688.868 824.267,688.868 824.827,688.868 825.386,688.868 825.945,688.868 826.504,688.868 827.064,688.868 827.623,688.868 828.182,688.868 828.741,688.868 829.301,688.868 829.86,688.868 830.419,688.868 830.978,688.868 831.538,688.868 832.097,688.868 832.656,688.868 833.215,688.868 833.775,688.868 834.334,688.868 834.893,688.868 835.452,688.868 836.012,688.868 836.571,688.868 837.13,688.868 837.689,688.868 838.249,688.868 838.808,688.868 839.367,688.868 839.926,688.868 840.486,688.868 841.045,688.868 841.604,688.868 842.163,688.868 842.723,688.868 843.282,688.868 843.841,688.868 844.4,688.868 844.96,688.868 845.519,688.868 846.078,688.868 846.637,688.868 847.197,688.868 847.756,688.868 848.315,688.868 848.874,688.868 849.434,688.868 849.993,688.868 850.552,688.868 851.111,688.868 851.671,688.868 852.23,688.868 852.789,688.868 853.348,688.868 853.908,688.868 854.467,688.868 855.026,688.868 855.585,688.868 856.145,688.868 856.704,688.868 857.263,688.868 857.822,688.868 858.382,688.868 858.941,688.868 859.5,688.868 860.059,688.868 860.619,688.868 861.178,688.868 861.737,688.868 862.296,688.868 862.856,688.868 863.415,688.868 863.974,688.868 864.533,688.868 865.093,688.868 865.652,688.868 866.211,688.868 866.77,688.868 867.33,688.868 867.889,688.868 868.448,688.868 869.007,688.868 869.567,688.868 870.126,688.868 870.685,688.868 871.244,688.868 871.804,688.868 872.363,688.868 872.922,688.868 873.481,688.868 874.041,688.868 874.6,688.868 875.159,688.868 875.718,688.868 876.278,688.868 876.837,688.868 877.396,688.868 877.955,688.868 878.515,688.868 879.074,688.868 879.633,688.868 880.192,688.868 880.752,688.868 881.311,688.868 881.87,688.868 882.429,688.868 882.989,688.868 883.548,688.868 884.107,688.868 884.666,688.868 885.226,688.868 885.785,688.868 886.344,688.868 886.903,688.868 887.463,688.868 888.022,688.868 888.581,688.868 889.14,688.868 889.7,688.868 890.259,688.868 890.818,688.868 891.377,688.868 891.937,688.868 892.496,688.868 893.055,688.868 893.614,688.868 894.174,688.868 894.733,688.868 895.292,688.868 895.851,688.868 896.411,688.868 896.97,688.868 897.529,688.868 898.088,688.868 898.648,688.868 899.207,688.868 899.766,688.868 900.325,688.868 900.885,688.868 901.444,688.868 902.003,688.868 902.562,688.868 903.122,688.868 903.681,688.868 904.24,688.868 904.799,688.868 905.359,688.868 905.918,688.868 906.477,688.868 907.036,688.868 907.596,688.868 908.155,688.868 908.714,688.868 909.273,688.868 909.833,688.868 910.392,688.868 910.951,688.868 911.51,688.868 912.07,688.868 912.629,688.868 913.188,688.868 913.747,688.868 914.307,688.868 914.866,688.868 915.425,688.868 915.984,688.868 916.544,688.868 917.103,688.868 917.662,688.868 918.221,688.868 918.781,688.868 919.34,688.868 919.899,688.868 920.458,688.868 921.018,688.868 921.577,688.868 922.136,688.868 922.695,688.868 923.255,688.868 923.814,688.868 924.373,688.868 924.932,688.868 925.492,688.868 926.051,688.868 926.61,688.868 927.169,688.868 927.729,688.868 928.288,688.868 928.847,688.868 929.406,688.868 929.966,688.868 930.525,688.868 931.084,688.868 931.644,688.868 932.203,688.868 932.762,688.868 933.321,688.868 933.881,688.868 934.44,688.868 934.999,688.868 935.558,688.868 936.118,688.868 936.677,688.868 937.236,688.868 937.795,688.868 938.355,688.868 938.914,688.868 939.473,688.868 940.032,688.868 940.592,688.868 941.151,688.868 941.71,688.868 942.269,688.868 942.829,688.868 943.388,688.868 943.947,688.868 944.506,688.868 945.066,688.868 945.625,688.868 946.184,688.868 946.743,688.868 947.303,688.868 947.862,688.868 948.421,688.868 948.98,688.868 949.54,688.868 950.099,688.868 950.658,688.868 951.217,688.868 951.777,688.868 952.336,688.868 952.895,688.868 953.454,688.868 954.014,688.868 954.573,688.868 955.132,688.868 955.691,688.868 956.251,688.868 956.81,688.868 957.369,688.868 957.928,688.868 958.488,688.868 959.047,688.868 959.606,688.868 960.165,688.868 960.725,688.868 961.284,688.868 961.843,688.868 962.402,688.868 962.962,688.868 963.521,688.868 964.08,688.868 964.639,688.868 965.199,688.868 965.758,688.868 966.317,688.868 966.876,688.868 967.436,688.868 967.995,688.868 968.554,688.868 969.113,688.868 969.673,688.868 970.232,688.868 970.791,688.868 971.35,688.868 971.91,688.868 972.469,688.868 973.028,688.868 973.587,688.868 974.147,688.868 974.706,688.868 975.265,688.868 975.824,688.868 976.384,688.868 976.943,688.868 977.502,688.868 978.061,688.868 978.621,688.868 979.18,688.868 979.739,688.868 980.298,688.868 980.858,688.868 981.417,688.868 981.976,688.868 982.535,688.868 983.095,688.868 983.654,688.868 984.213,688.868 984.772,688.868 985.332,688.868 985.891,688.868 986.45,688.868 987.009,688.868 987.569,688.868 988.128,688.868 988.687,688.868 989.246,688.868 989.806,688.868 990.365,688.868 990.924,688.868 991.483,688.868 992.043,688.868 992.602,688.868 993.161,688.868 993.72,688.868 994.28,688.868 994.839,688.868 995.398,688.868 995.957,688.868 996.517,688.868 997.076,688.868 997.635,688.868 998.194,688.868 998.754,688.868 999.313,688.868 999.872,688.868 1000.43,688.868 1000.99,688.868 1001.55,688.868 1002.11,688.868 1002.67,688.868 1003.23,688.868 1003.79,688.868 1004.35,688.868 1004.91,688.868 1005.46,688.868 1006.02,688.868 1006.58,688.868 1007.14,688.868 1007.7,688.868 1008.26,688.868 1008.82,688.868 1009.38,688.868 1009.94,688.868 1010.5,688.868 1011.06,688.868 1011.62,688.868 1012.18,688.868 1012.73,688.868 1013.29,688.868 1013.85,688.868 1014.41,688.868 1014.97,688.868 1015.53,688.868 1016.09,688.868 1016.65,688.868 1017.21,688.868 1017.77,688.868 1018.33,688.868 1018.89,688.868 1019.45,688.868 1020.01,688.868 1020.56,688.868 1021.12,688.868 1021.68,688.868 1022.24,688.868 1022.8,688.868 1023.36,688.868 1023.92,688.868 1024.48,688.868 1025.04,688.868 1025.6,688.868 1026.16,688.868 1026.72,688.868 1027.28,688.868 1027.83,688.868 1028.39,688.868 1028.95,688.868 1029.51,688.868 1030.07,688.868 1030.63,688.868 1031.19,688.868 1031.75,688.868 1032.31,688.868 1032.87,688.868 1033.43,688.868 1033.99,688.868 1034.55,688.868 1035.1,688.868 1035.66,688.868 1036.22,688.868 1036.78,688.868 1037.34,688.868 1037.9,688.868 1038.46,688.868 1039.02,688.868 1039.58,688.868 1040.14,688.868 1040.7,688.868 1041.26,688.868 1041.82,688.868 1042.38,688.868 1042.93,688.868 1043.49,688.868 1044.05,688.868 1044.61,688.868 1045.17,688.868 1045.73,688.868 1046.29,688.868 1046.85,688.868 1047.41,688.868 1047.97,688.868 1048.53,688.868 1049.09,688.868 1049.65,688.868 1050.2,688.868 1050.76,688.868 1051.32,688.868 1051.88,688.868 1052.44,688.868 1053,688.868 1053.56,688.868 1054.12,688.868 1054.68,688.868 1055.24,688.868 1055.8,688.868 1056.36,688.868 1056.92,688.868 1057.48,688.868 1058.03,688.868 1058.59,688.868 1059.15,688.868 1059.71,688.868 1060.27,688.868 1060.83,688.868 1061.39,688.868 1061.95,688.868 1062.51,688.868 1063.07,688.868 1063.63,688.868 1064.19,688.868 1064.75,688.868 1065.3,688.868 1065.86,688.868 1066.42,688.868 1066.98,688.868 1067.54,688.868 1068.1,688.868 1068.66,688.868 1069.22,688.868 1069.78,688.868 1070.34,688.868 1070.9,688.868 1071.46,688.868 1072.02,688.868 1072.57,688.868 1073.13,688.868 1073.69,688.868 1074.25,688.868 1074.81,688.868 1075.37,688.868 1075.93,688.868 1076.49,688.868 1077.05,688.868 1077.61,688.868 1078.17,688.868 1078.73,688.868 1079.29,688.868 1079.85,688.868 1080.4,688.868 1080.96,688.868 1081.52,688.868 1082.08,688.868 1082.64,688.868 1083.2,688.868 1083.76,688.868 1084.32,688.868 1084.88,688.868 1085.44,688.868 1086,688.868 1086.56,688.868 1087.12,688.868 1087.67,688.868 1088.23,688.868 1088.79,688.868 1089.35,688.868 1089.91,688.868 1090.47,688.868 1091.03,688.868 1091.59,688.868 1092.15,688.868 1092.71,688.868 1093.27,688.868 1093.83,688.868 1094.39,688.868 1094.94,688.868 1095.5,688.868 1096.06,688.868 1096.62,688.868 1097.18,688.868 1097.74,688.868 1098.3,688.868 1098.86,688.868 1099.42,688.868 1099.98,688.868 1100.54,688.868 1101.1,688.868 1101.66,688.868 1102.22,688.868 1102.77,688.868 1103.33,688.868 1103.89,688.868 1104.45,688.868 1105.01,688.868 1105.57,688.868 1106.13,688.868 1106.69,688.868 1107.25,688.868 1107.81,688.868 1108.37,688.868 1108.93,688.868 1109.49,688.868 1110.04,688.868 1110.6,688.868 1111.16,688.868 1111.72,688.868 1112.28,688.868 1112.84,688.868 1113.4,688.868 1113.96,688.868 1114.52,688.868 1115.08,688.868 1115.64,688.868 1116.2,688.868 1116.76,688.868 1117.31,688.868 1117.87,688.868 1118.43,688.868 1118.99,688.868 1119.55,688.868 1120.11,688.868 1120.67,688.868 1121.23,688.868 1121.79,688.868 1122.35,688.868 1122.91,688.868 1123.47,688.868 1124.03,688.868 1124.59,688.868 1125.14,688.868 1125.7,688.868 1126.26,688.868 1126.82,688.868 1127.38,688.868 1127.94,688.868 1128.5,688.868 1129.06,688.868 1129.62,688.868 1130.18,688.868 1130.74,688.868 1131.3,688.868 1131.86,688.868 1132.41,688.868 1132.97,688.868 1133.53,688.868 1134.09,688.868 1134.65,688.868 1135.21,688.868 1135.77,688.868 1136.33,688.868 1136.89,688.868 1137.45,688.868 1138.01,688.868 1138.57,688.868 1139.13,688.868 1139.68,688.868 1140.24,688.868 1140.8,688.868 1141.36,688.868 1141.92,688.868 1142.48,688.868 1143.04,688.868 1143.6,688.868 1144.16,688.868 1144.72,688.868 1145.28,688.868 1145.84,688.868 1146.4,688.868 1146.96,688.868 1147.51,688.868 1148.07,688.868 1148.63,688.868 1149.19,688.868 1149.75,688.868 1150.31,688.868 1150.87,688.868 1151.43,688.868 1151.99,688.868 1152.55,688.868 1153.11,688.868 1153.67,688.868 1154.23,688.868 1154.78,688.868 1155.34,688.868 1155.9,688.868 1156.46,688.868 1157.02,688.868 1157.58,688.868 1158.14,688.868 1158.7,688.868 1159.26,688.868 1159.82,688.868 1160.38,688.868 1160.94,688.868 1161.5,688.868 1162.05,688.868 1162.61,688.868 1163.17,688.868 1163.73,688.868 1164.29,688.868 1164.85,688.868 1165.41,688.868 1165.97,688.868 1166.53,688.868 1167.09,688.868 1167.65,688.868 1168.21,688.868 1168.77,688.868 1169.33,688.868 1169.88,688.868 1170.44,688.868 1171,688.868 1171.56,688.868 1172.12,688.868 1172.68,688.868 1173.24,688.868 1173.8,688.868 1174.36,688.868 1174.92,688.868 1175.48,688.868 1176.04,688.868 1176.6,688.868 1177.15,688.868 1177.71,688.868 1178.27,688.868 1178.83,688.868 1179.39,688.868 1179.95,688.868 1180.51,688.868 1181.07,688.868 1181.63,688.868 1182.19,688.868 1182.75,688.868 1183.31,688.868 1183.87,688.868 1184.43,688.868 1184.98,688.868 1185.54,688.868 1186.1,688.868 1186.66,688.868 1187.22,688.868 1187.78,688.868 1188.34,688.868 1188.9,688.868 1189.46,688.868 1190.02,688.868 1190.58,688.868 1191.14,688.868 1191.7,688.868 1192.25,688.868 1192.81,688.868 1193.37,688.868 1193.93,688.868 1194.49,688.868 1195.05,688.868 1195.61,688.868 1196.17,688.868 1196.73,688.868 1197.29,688.868 1197.85,688.868 1198.41,688.868 1198.97,688.868 1199.52,688.868 1200.08,688.868 1200.64,688.868 1201.2,688.868 1201.76,688.868 1202.32,688.868 1202.88,688.868 1203.44,688.868 1204,688.868 1204.56,688.868 1205.12,688.868 1205.68,688.868 1206.24,688.868 1206.8,688.868 1207.35,688.868 1207.91,688.868 1208.47,688.868 1209.03,688.868 1209.59,688.868 1210.15,688.868 1210.71,688.868 1211.27,688.868 1211.83,688.868 1212.39,688.868 1212.95,688.868 1213.51,688.868 1214.07,688.868 1214.62,688.868 1215.18,688.868 1215.74,688.868 1216.3,688.868 1216.86,688.868 1217.42,688.868 1217.98,688.868 1218.54,688.868 1219.1,688.868 1219.66,688.868 1220.22,688.868 1220.78,688.868 1221.34,688.868 1221.89,688.868 1222.45,688.868 1223.01,688.868 1223.57,688.868 1224.13,688.868 1224.69,688.868 1225.25,688.868 1225.81,688.868 1226.37,688.868 1226.93,688.868 1227.49,688.868 1228.05,688.868 1228.61,688.868 1229.17,688.868 1229.72,688.868 1230.28,688.868 1230.84,688.868 1231.4,688.868 1231.96,688.868 1232.52,688.868 1233.08,688.868 1233.64,688.868 1234.2,688.868 1234.76,688.868 1235.32,688.868 1235.88,688.868 1236.44,688.868 1236.99,688.868 1237.55,688.868 1238.11,688.868 1238.67,688.868 1239.23,688.868 1239.79,688.868 1240.35,688.868 1240.91,688.868 1241.47,688.868 1242.03,688.868 1242.59,688.868 1243.15,688.868 1243.71,688.868 1244.26,688.868 1244.82,688.868 1245.38,688.868 1245.94,688.868 1246.5,688.868 1247.06,688.868 1247.62,688.868 1248.18,688.868 1248.74,688.868 1249.3,688.868 1249.86,688.868 1250.42,688.868 1250.98,688.868 1251.54,688.868 1252.09,688.868 1252.65,688.868 1253.21,688.868 1253.77,688.868 1254.33,688.868 1254.89,688.868 1255.45,688.868 1256.01,688.868 1256.57,688.868 1257.13,688.868 1257.69,688.868 1258.25,688.868 1258.81,688.868 1259.36,688.868 1259.92,688.868 1260.48,688.868 1261.04,688.868 1261.6,688.868 1262.16,688.868 1262.72,688.868 1263.28,688.868 1263.84,688.868 1264.4,688.868 1264.96,688.868 1265.52,688.868 1266.08,688.868 1266.63,688.868 1267.19,688.868 1267.75,688.868 1268.31,688.868 1268.87,688.868 1269.43,688.868 1269.99,688.868 1270.55,688.868 1271.11,688.868 1271.67,688.868 1272.23,688.868 1272.79,688.868 1273.35,688.868 1273.91,688.868 1274.46,688.868 1275.02,688.868 1275.58,688.868 1276.14,688.868 1276.7,688.868 1277.26,688.868 1277.82,688.868 1278.38,688.868 1278.94,688.868 1279.5,688.868 1280.06,688.868 1280.62,688.868 1281.18,688.868 1281.73,688.868 1282.29,688.868 1282.85,688.868 1283.41,688.868 1283.97,688.868 1284.53,688.868 1285.09,688.868 1285.65,688.868 1286.21,688.868 1286.77,688.868 1287.33,688.868 1287.89,688.868 1288.45,688.868 1289,688.868 1289.56,688.868 1290.12,688.868 1290.68,688.868 1291.24,688.868 1291.8,688.868 1292.36,688.868 1292.92,688.868 1293.48,688.868 1294.04,688.868 1294.6,688.868 1295.16,688.868 1295.72,688.868 1296.28,688.868 1296.83,688.868 1297.39,688.868 1297.95,688.868 1298.51,688.868 1299.07,688.868 1299.63,688.868 1300.19,688.868 1300.75,688.868 1301.31,688.868 1301.87,688.868 1302.43,688.868 1302.99,688.868 1303.55,688.868 1304.1,688.868 1304.66,688.868 1305.22,688.868 1305.78,688.868 1306.34,688.868 1306.9,688.868 1307.46,688.868 1308.02,688.868 1308.58,688.868 1309.14,688.868 1309.7,688.868 1310.26,688.868 1310.82,688.868 1311.38,688.868 1311.93,688.868 1312.49,688.868 1313.05,688.868 1313.61,688.868 1314.17,688.868 1314.73,688.868 1315.29,688.868 1315.85,688.868 1316.41,688.868 1316.97,688.868 1317.53,688.868 1318.09,688.868 1318.65,688.868 1319.2,688.868 1319.76,688.868 1320.32,688.868 1320.88,688.868 1321.44,688.868 1322,688.868 1322.56,688.868 1323.12,688.868 1323.68,688.868 1324.24,688.868 1324.8,688.868 1325.36,688.868 1325.92,688.868 1326.47,688.868 1327.03,688.868 1327.59,688.868 1328.15,688.868 1328.71,688.868 1329.27,688.868 1329.83,688.868 1330.39,688.868 1330.95,688.868 1331.51,688.868 1332.07,688.868 1332.63,688.868 1333.19,688.868 1333.75,688.868 1334.3,688.868 1334.86,688.868 1335.42,688.868 1335.98,688.868 1336.54,688.868 1337.1,688.868 1337.66,688.868 1338.22,688.868 1338.78,688.868 1339.34,688.868 1339.9,688.868 1340.46,688.868 1341.02,688.868 1341.57,688.868 1342.13,688.868 1342.69,688.868 1343.25,688.868 1343.81,688.868 1344.37,688.868 1344.93,688.868 1345.49,688.868 1346.05,688.868 1346.61,688.868 1347.17,688.868 1347.73,688.868 1348.29,688.868 1348.84,688.868 1349.4,688.868 1349.96,688.868 1350.52,688.868 1351.08,688.868 1351.64,688.868 1352.2,688.868 1352.76,688.868 1353.32,688.868 1353.88,688.868 1354.44,688.868 1355,688.868 1355.56,688.868 1356.12,688.868 1356.67,688.868 1357.23,688.868 1357.79,688.868 1358.35,688.868 1358.91,688.868 1359.47,688.868 1360.03,688.868 1360.59,688.868 1361.15,688.868 1361.71,688.868 1362.27,688.868 1362.83,688.868 1363.39,688.868 1363.94,688.868 1364.5,688.868 1365.06,688.868 1365.62,688.868 1366.18,688.868 1366.74,688.868 1367.3,688.868 1367.86,688.868 1368.42,688.868 1368.98,688.868 1369.54,688.868 1370.1,688.868 1370.66,688.868 1371.21,688.868 1371.77,688.868 1372.33,688.868 1372.89,688.868 1373.45,688.868 1374.01,688.868 1374.57,688.868 1375.13,688.868 1375.69,688.868 1376.25,688.868 1376.81,688.868 1377.37,688.868 1377.93,688.868 1378.49,688.868 1379.04,688.868 1379.6,688.868 1380.16,688.868 1380.72,688.868 1381.28,688.868 1381.84,688.868 1382.4,688.868 1382.96,688.868 1383.52,688.868 1384.08,688.868 1384.64,688.868 1385.2,688.868 1385.76,688.868 1386.31,688.868 1386.87,688.868 1387.43,688.868 1387.99,688.868 1388.55,688.868 1389.11,688.868 1389.67,688.868 1390.23,688.868 1390.79,688.868 1391.35,688.868 1391.91,688.868 1392.47,688.868 1393.03,688.868 1393.58,688.868 1394.14,688.868 1394.7,688.868 1395.26,688.868 1395.82,688.868 1396.38,688.868 1396.94,688.868 1397.5,688.868 1398.06,688.868 1398.62,688.868 1399.18,688.868 1399.74,688.868 1400.3,688.868 1400.86,688.868 1401.41,688.868 1401.97,688.868 1402.53,688.868 1403.09,688.868 1403.65,688.868 1404.21,688.868 1404.77,688.868 1405.33,688.868 1405.89,688.868 1406.45,688.868 1407.01,688.868 1407.57,688.868 1408.13,688.868 1408.68,688.868 1409.24,688.868 1409.8,688.868 1410.36,688.868 1410.92,688.868 1411.48,688.868 1412.04,688.868 1412.6,688.868 1413.16,688.868 1413.72,688.868 1414.28,688.868 1414.84,688.868 1415.4,688.868 1415.95,688.868 1416.51,688.868 1417.07,688.868 1417.63,688.868 1418.19,688.868 1418.75,688.868 1419.31,688.868 1419.87,688.868 1420.43,688.868 1420.99,688.868 1421.55,688.868 1422.11,688.868 1422.67,688.868 1423.23,688.868 1423.78,688.868 1424.34,688.868 1424.9,688.868 1425.46,688.868 1426.02,688.868 1426.58,688.868 1427.14,688.868 1427.7,688.868 1428.26,688.868 1428.82,688.868 1429.38,688.868 1429.94,688.868 1430.5,688.868 1431.05,688.868 1431.61,688.868 1432.17,688.868 1432.73,688.868 1433.29,688.868 1433.85,688.868 1434.41,688.868 1434.97,688.868 1435.53,688.868 1436.09,688.868 1436.65,688.868 1437.21,688.868 1437.77,688.868 1438.33,688.868 1438.88,688.868 1439.44,688.868 1440,688.868 1440.56,688.868 1441.12,688.868 1441.68,688.868 1442.24,688.868 1442.8,688.868 1443.36,688.868 1443.92,688.868 1444.48,688.868 1445.04,688.868 1445.6,688.868 1446.15,688.868 1446.71,688.868 1447.27,688.868 1447.83,688.868 1448.39,688.868 1448.95,688.868 1449.51,688.868 1450.07,688.868 1450.63,688.868 1451.19,688.868 1451.75,688.868 1452.31,688.868 1452.87,688.868 1453.42,688.868 1453.98,688.868 1454.54,688.868 1455.1,688.868 1455.66,688.868 1456.22,688.868 1456.78,688.868 1457.34,688.868 1457.9,688.868 1458.46,688.868 1459.02,688.868 1459.58,688.868 1460.14,688.868 1460.7,688.868 1461.25,688.868 1461.81,688.868 1462.37,688.868 1462.93,688.868 1463.49,688.868 1464.05,688.868 1464.61,688.868 1465.17,688.868 1465.73,688.868 1466.29,688.868 1466.85,688.868 1467.41,688.868 1467.97,688.868 1468.52,688.868 1469.08,688.868 1469.64,688.868 1470.2,688.868 1470.76,688.868 1471.32,688.868 1471.88,688.868 1472.44,688.868 1473,688.868 1473.56,688.868 1474.12,688.868 1474.68,688.868 1475.24,688.868 1475.79,688.868 1476.35,688.868 1476.91,688.868 1477.47,688.868 1478.03,688.868 1478.59,688.868 1479.15,688.868 1479.71,688.868 1480.27,688.868 1480.83,688.868 1481.39,688.868 1481.95,688.868 1482.51,688.868 1483.07,688.868 1483.62,688.868 1484.18,688.868 1484.74,688.868 1485.3,688.868 1485.86,688.868 1486.42,688.868 1486.98,688.868 1487.54,688.868 1488.1,688.868 1488.66,688.868 1489.22,688.868 1489.78,688.868 1490.34,688.868 1490.89,688.868 1491.45,688.868 1492.01,688.868 1492.57,688.868 1493.13,688.868 1493.69,688.868 1494.25,688.868 1494.81,688.868 1495.37,688.868 1495.93,688.868 1496.49,688.868 1497.05,688.868 1497.61,688.868 1498.16,688.868 1498.72,688.868 1499.28,688.868 1499.84,688.868 1500.4,688.868 1500.96,688.868 1501.52,688.868 1502.08,688.868 1502.64,688.868 1503.2,688.868 1503.76,688.868 1504.32,688.868 1504.88,688.868 1505.44,688.868 1505.99,688.868 1506.55,688.868 1507.11,688.868 1507.67,688.868 1508.23,688.868 1508.79,688.868 1509.35,688.868 1509.91,688.868 1510.47,688.868 1511.03,688.868 1511.59,688.868 1512.15,688.868 1512.71,688.868 1513.26,688.868 1513.82,688.868 1514.38,688.868 1514.94,688.868 1515.5,688.868 1516.06,688.868 1516.62,688.868 1517.18,688.868 1517.74,688.868 1518.3,688.868 1518.86,688.868 1519.42,688.868 1519.98,688.868 1520.53,688.868 1521.09,688.868 1521.65,688.868 1522.21,688.868 1522.77,688.868 1523.33,688.868 1523.89,688.868 1524.45,688.868 1525.01,688.868 1525.57,688.868 1526.13,688.868 1526.69,688.868 1527.25,688.868 1527.81,688.868 1528.36,688.868 1528.92,688.868 1529.48,688.868 1530.04,688.868 1530.6,688.868 1531.16,688.868 1531.72,688.868 1532.28,688.868 1532.84,688.868 1533.4,688.868 1533.96,688.868 1534.52,688.868 1535.08,688.868 1535.63,688.868 1536.19,688.868 1536.75,688.868 1537.31,688.868 1537.87,688.868 1538.43,688.868 1538.99,688.868 1539.55,688.868 1540.11,688.868 1540.67,688.868 1541.23,688.868 1541.79,688.868 1542.35,688.868 1542.9,688.868 1543.46,688.868 1544.02,688.868 1544.58,688.868 1545.14,688.868 1545.7,688.868 1546.26,688.868 1546.82,688.868 1547.38,688.868 1547.94,688.868 1548.5,688.868 1549.06,688.868 1549.62,688.868 1550.18,688.868 1550.73,688.868 1551.29,688.868 1551.85,688.868 1552.41,688.868 1552.97,688.868 1553.53,688.868 1554.09,688.868 1554.65,688.868 1555.21,688.868 1555.77,688.868 1556.33,688.868 1556.89,688.868 1557.45,688.868 1558,688.868 1558.56,688.868 1559.12,688.868 1559.68,688.868 1560.24,688.868 1560.8,688.868 1561.36,688.868 1561.92,688.868 1562.48,688.868 1563.04,688.868 1563.6,688.868 1564.16,688.868 1564.72,688.868 1565.28,688.868 1565.83,688.868 1566.39,688.868 1566.95,688.868 1567.51,688.868 1568.07,688.868 1568.63,688.868 1569.19,688.868 1569.75,688.868 1570.31,688.868 1570.87,688.868 1571.43,688.868 1571.99,688.868 1572.55,688.868 1573.1,688.868 1573.66,688.868 1574.22,688.868 1574.78,688.868 1575.34,688.868 1575.9,688.868 1576.46,688.868 1577.02,688.868 1577.58,688.868 1578.14,688.868 1578.7,688.868 1579.26,688.868 1579.82,688.868 1580.37,688.868 1580.93,688.868 1581.49,688.868 1582.05,688.868 1582.61,688.868 1583.17,688.868 1583.73,688.868 1584.29,688.868 1584.85,688.868 1585.41,688.868 1585.97,688.868 1586.53,688.868 1587.09,688.868 1587.65,688.868 1588.2,688.868 1588.76,688.868 1589.32,688.868 1589.88,688.868 1590.44,688.868 1591,688.868 1591.56,688.868 1592.12,688.868 1592.68,688.868 1593.24,688.868 1593.8,688.868 1594.36,688.868 1594.92,688.868 1595.47,688.868 1596.03,688.868 1596.59,688.868 1597.15,688.868 1597.71,688.868 1598.27,688.868 1598.83,688.868 1599.39,688.868 1599.95,688.868 1600.51,688.868 1601.07,688.868 1601.63,688.868 1602.19,688.868 1602.74,688.868 1603.3,688.868 1603.86,688.868 1604.42,688.868 1604.98,688.868 1605.54,688.868 1606.1,688.868 1606.66,688.868 1607.22,688.868 1607.78,688.868 1608.34,688.868 1608.9,688.868 1609.46,688.868 1610.02,688.868 1610.57,688.868 1611.13,688.868 1611.69,688.868 1612.25,688.868 1612.81,688.868 1613.37,688.868 1613.93,688.868 1614.49,688.868 1615.05,688.868 1615.61,688.868 1616.17,688.868 1616.73,688.868 1617.29,688.868 1617.84,688.868 1618.4,688.868 1618.96,688.868 1619.52,688.868 1620.08,688.868 1620.64,688.868 1621.2,688.868 1621.76,688.868 1622.32,688.868 1622.88,688.868 1623.44,688.868 1624,688.868 1624.56,688.868 1625.11,688.868 1625.67,688.868 1626.23,688.868 1626.79,688.868 1627.35,688.868 1627.91,688.868 1628.47,688.868 1629.03,688.868 1629.59,688.868 1630.15,688.868 1630.71,688.868 1631.27,688.868 1631.83,688.868 1632.39,688.868 1632.94,688.868 1633.5,688.868 1634.06,688.868 1634.62,688.868 1635.18,688.868 1635.74,688.868 1636.3,688.868 1636.86,688.868 1637.42,688.868 1637.98,688.868 1638.54,688.868 1639.1,688.868 1639.66,688.868 1640.21,688.868 1640.77,688.868 1641.33,688.868 1641.89,688.868 1642.45,688.868 1643.01,688.868 1643.57,688.868 1644.13,688.868 1644.69,688.868 1645.25,688.868 1645.81,688.868 1646.37,688.868 1646.93,688.868 1647.48,688.868 1648.04,688.868 1648.6,688.868 1649.16,688.868 1649.72,688.868 1650.28,688.868 1650.84,688.868 1651.4,688.868 1651.96,688.868 1652.52,688.868 1653.08,688.868 1653.64,688.868 1654.2,688.868 1654.76,688.868 1655.31,688.868 1655.87,688.868 1656.43,688.868 1656.99,688.868 1657.55,688.868 1658.11,688.868 1658.67,688.868 1659.23,688.868 1659.79,688.868 1660.35,688.868 1660.91,688.868 1661.47,688.868 1662.03,688.868 1662.58,688.868 1663.14,688.868 1663.7,688.868 1664.26,688.868 1664.82,688.868 1665.38,688.868 1665.94,688.868 1666.5,688.868 1667.06,688.868 1667.62,688.868 1668.18,688.868 1668.74,688.868 1669.3,688.868 1669.85,688.868 1670.41,688.868 1670.97,688.868 1671.53,688.868 1672.09,688.868 1672.65,688.868 1673.21,688.868 1673.77,688.868 1674.33,688.868 1674.89,688.868 1675.45,688.868 1676.01,688.868 1676.57,688.868 1677.13,688.868 1677.68,688.868 1678.24,688.868 1678.8,688.868 1679.36,688.868 1679.92,688.868 1680.48,688.868 1681.04,688.868 1681.6,688.868 1682.16,688.868 1682.72,688.868 1683.28,688.868 1683.84,688.868 1684.4,688.868 1684.95,688.868 1685.51,688.868 1686.07,688.868 1686.63,688.868 1687.19,688.868 1687.75,688.868 1688.31,688.868 1688.87,688.868 1689.43,688.868 1689.99,688.868 1690.55,688.868 1691.11,688.868 1691.67,688.868 1692.23,688.868 1692.78,688.868 1693.34,688.868 1693.9,688.868 1694.46,688.868 1695.02,688.868 1695.58,688.868 1696.14,688.868 1696.7,688.868 1697.26,688.868 1697.82,688.868 1698.38,688.868 1698.94,688.868 1699.5,688.868 1700.05,688.868 1700.61,688.868 1701.17,688.868 1701.73,688.868 1702.29,688.868 1702.85,688.868 1703.41,688.868 1703.97,688.868 1704.53,688.868 1705.09,688.868 1705.65,688.868 1706.21,688.868 1706.77,688.868 1707.32,688.868 1707.88,688.868 1708.44,688.868 1709,688.868 1709.56,688.868 1710.12,688.868 1710.68,688.868 1711.24,688.868 1711.8,688.868 1712.36,688.868 1712.92,688.868 1713.48,688.868 1714.04,688.868 1714.6,688.868 1715.15,688.868 1715.71,688.868 1716.27,688.868 1716.83,688.868 1717.39,688.868 1717.95,688.868 1718.51,688.868 1719.07,688.868 1719.63,688.868 1720.19,688.868 1720.75,688.868 1721.31,688.868 1721.87,688.868 1722.42,688.868 1722.98,688.868 1723.54,688.868 1724.1,688.868 1724.66,688.868 1725.22,688.868 1725.78,688.868 1726.34,688.868 1726.9,688.868 1727.46,688.868 1728.02,688.868 1728.58,688.868 1729.14,688.868 1729.69,688.868 1730.25,688.868 1730.81,688.868 1731.37,688.868 1731.93,688.868 1732.49,688.868 1733.05,688.868 1733.61,688.868 1734.17,688.868 1734.73,688.868 1735.29,688.868 1735.85,688.868 1736.41,688.868 1736.97,688.868 1737.52,688.868 1738.08,688.868 1738.64,688.868 1739.2,688.868 1739.76,688.868 1740.32,688.868 1740.88,688.868 1741.44,688.868 1742,688.868 1742.56,688.868 1743.12,688.868 1743.68,688.868 1744.24,688.868 1744.79,688.868 1745.35,688.868 1745.91,688.868 1746.47,688.868 1747.03,688.868 1747.59,688.868 1748.15,688.868 1748.71,688.868 1749.27,688.868 1749.83,688.868 1750.39,688.868 1750.95,688.868 1751.51,688.868 1752.06,688.868 1752.62,688.868 1753.18,688.868 1753.74,688.868 1754.3,688.868 1754.86,688.868 1755.42,688.868 1755.98,688.868 1756.54,688.868 1757.1,688.868 1757.66,688.868 1758.22,688.868 1758.78,688.868 1759.34,688.868 1759.89,688.868 1760.45,688.868 1761.01,688.868 1761.57,688.868 1762.13,688.868 1762.69,688.868 1763.25,688.868 1763.81,688.868 1764.37,688.868 1764.93,688.868 1765.49,688.868 1766.05,688.868 1766.61,688.868 1767.16,688.868 1767.72,688.868 1768.28,688.868 1768.84,688.868 1769.4,688.868 1769.96,688.868 1770.52,688.868 1771.08,688.868 1771.64,688.868 1772.2,688.868 1772.76,688.868 1773.32,688.868 1773.88,688.868 1774.43,688.868 1774.99,688.868 1775.55,688.868 1776.11,688.868 1776.67,688.868 1777.23,688.868 1777.79,688.868 1778.35,688.868 1778.91,688.868 1779.47,688.868 1780.03,688.868 1780.59,688.868 1781.15,688.868 1781.71,688.868 1782.26,688.868 1782.82,688.868 1783.38,688.868 1783.94,688.868 1784.5,688.868 1785.06,688.868 1785.62,688.868 1786.18,688.868 1786.74,688.868 1787.3,688.868 1787.86,688.868 1788.42,688.868 1788.98,688.868 1789.53,688.868 1790.09,688.868 1790.65,688.868 1791.21,688.868 1791.77,688.868 1792.33,688.868 1792.89,688.868 1793.45,688.868 1794.01,688.868 1794.57,688.868 1795.13,688.868 1795.69,688.868 1796.25,688.868 1796.8,688.868 1797.36,688.868 1797.92,688.868 1798.48,688.868 1799.04,688.868 1799.6,688.868 1800.16,688.868 1800.72,688.868 1801.28,688.868 1801.84,688.868 1802.4,688.868 1802.96,688.868 1803.52,688.868 1804.08,688.868 1804.63,688.868 1805.19,688.868 1805.75,688.868 1806.31,688.868 1806.87,688.868 1807.43,688.868 1807.99,688.868 1808.55,688.868 1809.11,688.868 1809.67,688.868 1810.23,688.868 1810.79,688.868 1811.35,688.868 1811.9,688.868 1812.46,688.868 1813.02,688.868 1813.58,688.868 1814.14,688.868 1814.7,688.868 1815.26,688.868 1815.82,688.868 1816.38,688.868 1816.94,688.868 1817.5,688.868 1818.06,688.868 1818.62,688.868 1819.18,688.868 1819.73,688.868 1820.29,688.868 1820.85,688.868 1821.41,688.868 1821.97,688.868 1822.53,688.868 1823.09,688.868 1823.65,688.868 1824.21,688.868 1824.77,688.868 1825.33,688.868 1825.89,688.868 1826.45,688.868 1827,688.868 1827.56,688.868 1828.12,688.868 1828.68,688.868 1829.24,688.868 1829.8,688.868 1830.36,688.868 1830.92,688.868 1831.48,688.868 1832.04,688.868 1832.6,688.868 1833.16,688.868 1833.72,688.868 1834.27,688.868 1834.83,688.868 1835.39,688.868 1835.95,688.868 1836.51,688.868 1837.07,688.868 1837.63,688.868 1838.19,688.868 \"/>\n<path clip-path=\"url(#clip803)\" d=\"M720.247 685.153 L720.806 685.153 L721.365 685.153 L721.924 685.153 L722.484 685.153 L723.043 685.153 L723.602 685.153 L724.161 685.153 L724.721 685.153 L725.28 685.153 L725.839 685.153 L726.398 685.153 L726.958 685.153 L727.517 685.153 L728.076 685.153 L728.635 685.153 L729.195 685.153 L729.754 685.153 L730.313 685.153 L730.872 685.153 L731.432 685.153 L731.991 685.153 L732.55 685.153 L733.109 685.153 L733.669 685.153 L734.228 685.153 L734.787 685.153 L735.346 685.153 L735.906 685.153 L736.465 685.153 L737.024 685.153 L737.583 685.153 L738.143 685.153 L738.702 685.153 L739.261 685.153 L739.82 685.153 L740.38 685.153 L740.939 685.153 L741.498 685.153 L742.057 685.153 L742.617 685.153 L743.176 685.153 L743.735 685.153 L744.294 685.153 L744.854 685.153 L745.413 685.153 L745.972 685.153 L746.531 685.153 L747.091 685.153 L747.65 685.153 L748.209 685.153 L748.768 685.153 L749.328 685.153 L749.887 685.153 L750.446 685.153 L751.005 685.153 L751.565 685.153 L752.124 685.153 L752.683 685.153 L753.242 685.153 L753.802 685.153 L754.361 685.153 L754.92 685.153 L755.479 685.153 L756.039 685.153 L756.598 685.153 L757.157 685.153 L757.716 685.153 L758.276 685.153 L758.835 685.153 L759.394 685.153 L759.953 685.153 L760.513 685.153 L761.072 685.153 L761.631 685.153 L762.19 685.153 L762.75 685.153 L763.309 685.153 L763.868 685.153 L764.427 685.153 L764.987 685.153 L765.546 685.153 L766.105 685.153 L766.664 685.153 L767.224 685.153 L767.783 685.153 L768.342 685.153 L768.901 685.153 L769.461 685.153 L770.02 685.153 L770.579 685.153 L771.138 685.153 L771.698 685.153 L772.257 685.153 L772.816 685.153 L773.375 685.153 L773.935 685.153 L774.494 685.153 L775.053 685.153 L775.612 685.153 L776.172 685.153 L776.731 685.153 L777.29 685.153 L777.849 685.153 L778.409 685.153 L778.968 685.153 L779.527 685.153 L780.086 685.153 L780.646 685.153 L781.205 685.153 L781.764 685.153 L782.323 685.153 L782.883 685.153 L783.442 685.153 L784.001 685.153 L784.56 685.153 L785.12 685.153 L785.679 685.153 L786.238 685.153 L786.797 685.153 L787.357 685.153 L787.916 685.153 L788.475 685.153 L789.034 685.153 L789.594 685.153 L790.153 685.153 L790.712 685.153 L791.271 685.153 L791.831 685.153 L792.39 685.153 L792.949 685.153 L793.508 685.153 L794.068 685.153 L794.627 685.153 L795.186 685.153 L795.745 685.153 L796.305 685.153 L796.864 685.153 L797.423 685.153 L797.982 685.153 L798.542 685.153 L799.101 685.153 L799.66 685.153 L800.219 685.153 L800.779 685.153 L801.338 685.153 L801.897 685.153 L802.456 685.153 L803.016 685.153 L803.575 685.153 L804.134 685.153 L804.693 685.153 L805.253 685.153 L805.812 685.153 L806.371 685.153 L806.931 685.153 L807.49 685.153 L808.049 685.153 L808.608 685.153 L809.168 685.153 L809.727 685.153 L810.286 685.153 L810.845 685.153 L811.405 685.153 L811.964 685.153 L812.523 685.153 L813.082 685.153 L813.642 685.153 L814.201 685.153 L814.76 685.153 L815.319 685.153 L815.879 685.153 L816.438 685.153 L816.997 685.153 L817.556 685.153 L818.116 685.153 L818.675 685.153 L819.234 685.153 L819.793 685.153 L820.353 685.153 L820.912 685.153 L821.471 685.153 L822.03 685.153 L822.59 685.153 L823.149 685.153 L823.708 685.153 L824.267 685.153 L824.827 685.153 L825.386 685.153 L825.945 685.153 L826.504 685.153 L827.064 685.153 L827.623 685.153 L828.182 685.153 L828.741 685.153 L829.301 685.153 L829.86 685.153 L830.419 685.153 L830.978 685.153 L831.538 685.153 L832.097 685.153 L832.656 685.153 L833.215 685.153 L833.775 685.153 L834.334 685.153 L834.893 685.153 L835.452 685.153 L836.012 685.153 L836.571 685.153 L837.13 685.153 L837.689 685.153 L838.249 685.153 L838.808 685.153 L839.367 685.153 L839.926 685.153 L840.486 685.153 L841.045 685.153 L841.604 685.153 L842.163 685.153 L842.723 685.153 L843.282 685.153 L843.841 685.153 L844.4 685.153 L844.96 685.153 L845.519 685.153 L846.078 685.153 L846.637 685.153 L847.197 685.153 L847.756 685.153 L848.315 685.153 L848.874 685.153 L849.434 685.153 L849.993 685.153 L850.552 685.153 L851.111 685.153 L851.671 685.153 L852.23 685.153 L852.789 685.153 L853.348 685.153 L853.908 685.153 L854.467 685.153 L855.026 685.153 L855.585 685.153 L856.145 685.153 L856.704 685.153 L857.263 685.153 L857.822 685.153 L858.382 685.153 L858.941 685.153 L859.5 685.153 L860.059 685.153 L860.619 685.153 L861.178 685.153 L861.737 685.153 L862.296 685.153 L862.856 685.153 L863.415 685.153 L863.974 685.153 L864.533 685.153 L865.093 685.153 L865.652 685.153 L866.211 685.153 L866.77 685.153 L867.33 685.153 L867.889 685.153 L868.448 685.153 L869.007 685.153 L869.567 685.153 L870.126 685.153 L870.685 685.153 L871.244 685.153 L871.804 685.153 L872.363 685.153 L872.922 685.153 L873.481 685.153 L874.041 685.153 L874.6 685.153 L875.159 685.153 L875.718 685.153 L876.278 685.153 L876.837 685.153 L877.396 685.153 L877.955 685.153 L878.515 685.153 L879.074 685.153 L879.633 685.153 L880.192 685.153 L880.752 685.153 L881.311 685.153 L881.87 685.153 L882.429 685.153 L882.989 685.153 L883.548 685.153 L884.107 685.153 L884.666 685.153 L885.226 685.153 L885.785 685.153 L886.344 685.153 L886.903 685.153 L887.463 685.153 L888.022 685.153 L888.581 685.153 L889.14 685.153 L889.7 685.153 L890.259 685.153 L890.818 685.153 L891.377 685.153 L891.937 685.153 L892.496 685.153 L893.055 685.153 L893.614 685.153 L894.174 685.153 L894.733 685.153 L895.292 685.153 L895.851 685.153 L896.411 685.153 L896.97 685.153 L897.529 685.153 L898.088 685.153 L898.648 685.153 L899.207 685.153 L899.766 685.153 L900.325 685.153 L900.885 685.153 L901.444 685.153 L902.003 685.153 L902.562 685.153 L903.122 685.153 L903.681 685.153 L904.24 685.153 L904.799 685.153 L905.359 685.153 L905.918 685.153 L906.477 685.153 L907.036 685.153 L907.596 685.153 L908.155 685.153 L908.714 685.153 L909.273 685.153 L909.833 685.153 L910.392 685.153 L910.951 685.153 L911.51 685.153 L912.07 685.153 L912.629 685.153 L913.188 685.153 L913.747 685.153 L914.307 685.153 L914.866 685.153 L915.425 685.153 L915.984 685.153 L916.544 685.153 L917.103 685.153 L917.662 685.153 L918.221 685.153 L918.781 685.153 L919.34 685.153 L919.899 685.153 L920.458 685.153 L921.018 685.153 L921.577 685.153 L922.136 685.153 L922.695 685.153 L923.255 685.153 L923.814 685.153 L924.373 685.153 L924.932 685.153 L925.492 685.153 L926.051 685.153 L926.61 685.153 L927.169 685.153 L927.729 685.153 L928.288 685.153 L928.847 685.153 L929.406 685.153 L929.966 685.153 L930.525 685.153 L931.084 685.153 L931.644 685.153 L932.203 685.153 L932.762 685.153 L933.321 685.153 L933.881 685.153 L934.44 685.153 L934.999 685.153 L935.558 685.153 L936.118 685.153 L936.677 685.153 L937.236 685.153 L937.795 685.153 L938.355 685.153 L938.914 685.153 L939.473 685.153 L940.032 685.153 L940.592 685.153 L941.151 685.153 L941.71 685.153 L942.269 685.153 L942.829 685.153 L943.388 685.153 L943.947 685.153 L944.506 685.153 L945.066 685.153 L945.625 685.153 L946.184 685.153 L946.743 685.153 L947.303 685.153 L947.862 685.153 L948.421 685.153 L948.98 685.153 L949.54 685.153 L950.099 685.153 L950.658 685.153 L951.217 685.153 L951.777 685.153 L952.336 685.153 L952.895 685.153 L953.454 685.153 L954.014 685.153 L954.573 685.153 L955.132 685.153 L955.691 685.153 L956.251 685.153 L956.81 685.153 L957.369 685.153 L957.928 685.153 L958.488 685.153 L959.047 685.153 L959.606 685.153 L960.165 685.153 L960.725 685.153 L961.284 685.153 L961.843 685.153 L962.402 685.153 L962.962 685.153 L963.521 685.153 L964.08 685.153 L964.639 685.153 L965.199 685.153 L965.758 685.153 L966.317 685.153 L966.876 685.153 L967.436 685.153 L967.995 685.153 L968.554 685.153 L969.113 685.153 L969.673 685.153 L970.232 685.153 L970.791 685.153 L971.35 685.153 L971.91 685.153 L972.469 685.153 L973.028 685.153 L973.587 685.153 L974.147 685.153 L974.706 685.153 L975.265 685.153 L975.824 685.153 L976.384 685.153 L976.943 685.153 L977.502 685.153 L978.061 685.153 L978.621 685.153 L979.18 685.153 L979.739 685.153 L980.298 685.153 L980.858 685.153 L981.417 685.153 L981.976 685.153 L982.535 685.153 L983.095 685.153 L983.654 685.153 L984.213 685.153 L984.772 685.153 L985.332 685.153 L985.891 685.153 L986.45 685.153 L987.009 685.153 L987.569 685.153 L988.128 685.153 L988.687 685.153 L989.246 685.153 L989.806 685.153 L990.365 685.153 L990.924 685.153 L991.483 685.153 L992.043 685.153 L992.602 685.153 L993.161 685.153 L993.72 685.153 L994.28 685.153 L994.839 685.153 L995.398 685.153 L995.957 685.153 L996.517 685.153 L997.076 685.153 L997.635 685.153 L998.194 685.153 L998.754 685.153 L999.313 685.153 L999.872 685.153 L1000.43 685.153 L1000.99 685.153 L1001.55 685.153 L1002.11 685.153 L1002.67 685.153 L1003.23 685.153 L1003.79 685.153 L1004.35 685.153 L1004.91 685.153 L1005.46 685.153 L1006.02 685.153 L1006.58 685.153 L1007.14 685.153 L1007.7 685.153 L1008.26 685.153 L1008.82 685.153 L1009.38 685.153 L1009.94 685.153 L1010.5 685.153 L1011.06 685.153 L1011.62 685.153 L1012.18 685.153 L1012.73 685.153 L1013.29 685.153 L1013.85 685.153 L1014.41 685.153 L1014.97 685.153 L1015.53 685.153 L1016.09 685.153 L1016.65 685.153 L1017.21 685.153 L1017.77 685.153 L1018.33 685.153 L1018.89 685.153 L1019.45 685.153 L1020.01 685.153 L1020.56 685.153 L1021.12 685.153 L1021.68 685.153 L1022.24 685.153 L1022.8 685.153 L1023.36 685.153 L1023.92 685.153 L1024.48 685.153 L1025.04 685.153 L1025.6 685.153 L1026.16 685.153 L1026.72 685.153 L1027.28 685.153 L1027.83 685.153 L1028.39 685.153 L1028.95 685.153 L1029.51 685.153 L1030.07 685.153 L1030.63 685.153 L1031.19 685.153 L1031.75 685.153 L1032.31 685.153 L1032.87 685.153 L1033.43 685.153 L1033.99 685.153 L1034.55 685.153 L1035.1 685.153 L1035.66 685.153 L1036.22 685.153 L1036.78 685.153 L1037.34 685.153 L1037.9 685.153 L1038.46 685.153 L1039.02 685.153 L1039.58 685.153 L1040.14 685.153 L1040.7 685.153 L1041.26 685.153 L1041.82 685.153 L1042.38 685.153 L1042.93 685.153 L1043.49 685.153 L1044.05 685.153 L1044.61 685.153 L1045.17 685.153 L1045.73 685.153 L1046.29 685.153 L1046.85 685.153 L1047.41 685.153 L1047.97 685.153 L1048.53 685.153 L1049.09 685.153 L1049.65 685.153 L1050.2 685.153 L1050.76 685.153 L1051.32 685.153 L1051.88 685.153 L1052.44 685.153 L1053 685.153 L1053.56 685.153 L1054.12 685.153 L1054.68 685.153 L1055.24 685.153 L1055.8 685.153 L1056.36 685.153 L1056.92 685.153 L1057.48 685.153 L1058.03 685.153 L1058.59 685.153 L1059.15 685.153 L1059.71 685.153 L1060.27 685.153 L1060.83 685.153 L1061.39 685.153 L1061.95 685.153 L1062.51 685.153 L1063.07 685.153 L1063.63 685.153 L1064.19 685.153 L1064.75 685.153 L1065.3 685.153 L1065.86 685.153 L1066.42 685.153 L1066.98 685.153 L1067.54 685.153 L1068.1 685.153 L1068.66 685.153 L1069.22 685.153 L1069.78 685.153 L1070.34 685.153 L1070.9 685.153 L1071.46 685.153 L1072.02 685.153 L1072.57 685.153 L1073.13 685.153 L1073.69 685.153 L1074.25 685.153 L1074.81 685.153 L1075.37 685.153 L1075.93 685.153 L1076.49 685.153 L1077.05 685.153 L1077.61 685.153 L1078.17 685.153 L1078.73 685.153 L1079.29 685.153 L1079.85 685.153 L1080.4 685.153 L1080.96 685.153 L1081.52 685.153 L1082.08 685.153 L1082.64 685.153 L1083.2 685.153 L1083.76 685.153 L1084.32 685.153 L1084.88 685.153 L1085.44 685.153 L1086 685.153 L1086.56 685.153 L1087.12 685.153 L1087.67 685.153 L1088.23 685.153 L1088.79 685.153 L1089.35 685.153 L1089.91 685.153 L1090.47 685.153 L1091.03 685.153 L1091.59 685.153 L1092.15 685.153 L1092.71 685.153 L1093.27 685.153 L1093.83 685.153 L1094.39 685.153 L1094.94 685.153 L1095.5 685.153 L1096.06 685.153 L1096.62 685.153 L1097.18 685.153 L1097.74 685.153 L1098.3 685.153 L1098.86 685.153 L1099.42 685.153 L1099.98 685.153 L1100.54 685.153 L1101.1 685.153 L1101.66 685.153 L1102.22 685.153 L1102.77 685.153 L1103.33 685.153 L1103.89 685.153 L1104.45 685.153 L1105.01 685.153 L1105.57 685.153 L1106.13 685.153 L1106.69 685.153 L1107.25 685.153 L1107.81 685.153 L1108.37 685.153 L1108.93 685.153 L1109.49 685.153 L1110.04 685.153 L1110.6 685.153 L1111.16 685.153 L1111.72 685.153 L1112.28 685.153 L1112.84 685.153 L1113.4 685.153 L1113.96 685.153 L1114.52 685.153 L1115.08 685.153 L1115.64 685.153 L1116.2 685.153 L1116.76 685.153 L1117.31 685.153 L1117.87 685.153 L1118.43 685.153 L1118.99 685.153 L1119.55 685.153 L1120.11 685.153 L1120.67 685.153 L1121.23 685.153 L1121.79 685.153 L1122.35 685.153 L1122.91 685.153 L1123.47 685.153 L1124.03 685.153 L1124.59 685.153 L1125.14 685.153 L1125.7 685.153 L1126.26 685.153 L1126.82 685.153 L1127.38 685.153 L1127.94 685.153 L1128.5 685.153 L1129.06 685.153 L1129.62 685.153 L1130.18 685.153 L1130.74 685.153 L1131.3 685.153 L1131.86 685.153 L1132.41 685.153 L1132.97 685.153 L1133.53 685.153 L1134.09 685.153 L1134.65 685.153 L1135.21 685.153 L1135.77 685.153 L1136.33 685.153 L1136.89 685.153 L1137.45 685.153 L1138.01 685.153 L1138.57 685.153 L1139.13 685.153 L1139.68 685.153 L1140.24 685.153 L1140.8 685.153 L1141.36 685.153 L1141.92 685.153 L1142.48 685.153 L1143.04 685.153 L1143.6 685.153 L1144.16 685.153 L1144.72 685.153 L1145.28 685.153 L1145.84 685.153 L1146.4 685.153 L1146.96 685.153 L1147.51 685.153 L1148.07 685.153 L1148.63 685.153 L1149.19 685.153 L1149.75 685.153 L1150.31 685.153 L1150.87 685.153 L1151.43 685.153 L1151.99 685.153 L1152.55 685.153 L1153.11 685.153 L1153.67 685.153 L1154.23 685.153 L1154.78 685.153 L1155.34 685.153 L1155.9 685.153 L1156.46 685.153 L1157.02 685.153 L1157.58 685.153 L1158.14 685.153 L1158.7 685.153 L1159.26 685.153 L1159.82 685.153 L1160.38 685.153 L1160.94 685.153 L1161.5 685.153 L1162.05 685.153 L1162.61 685.153 L1163.17 685.153 L1163.73 685.153 L1164.29 685.153 L1164.85 685.153 L1165.41 685.153 L1165.97 685.153 L1166.53 685.153 L1167.09 685.153 L1167.65 685.153 L1168.21 685.153 L1168.77 685.153 L1169.33 685.153 L1169.88 685.153 L1170.44 685.153 L1171 685.153 L1171.56 685.153 L1172.12 685.153 L1172.68 685.153 L1173.24 685.153 L1173.8 685.153 L1174.36 685.153 L1174.92 685.153 L1175.48 685.153 L1176.04 685.153 L1176.6 685.153 L1177.15 685.153 L1177.71 685.153 L1178.27 685.153 L1178.83 685.153 L1179.39 685.153 L1179.95 685.153 L1180.51 685.153 L1181.07 685.153 L1181.63 685.153 L1182.19 685.153 L1182.75 685.153 L1183.31 685.153 L1183.87 685.153 L1184.43 685.153 L1184.98 685.153 L1185.54 685.153 L1186.1 685.153 L1186.66 685.153 L1187.22 685.153 L1187.78 685.153 L1188.34 685.153 L1188.9 685.153 L1189.46 685.153 L1190.02 685.153 L1190.58 685.153 L1191.14 685.153 L1191.7 685.153 L1192.25 685.153 L1192.81 685.153 L1193.37 685.153 L1193.93 685.153 L1194.49 685.153 L1195.05 685.153 L1195.61 685.153 L1196.17 685.153 L1196.73 685.153 L1197.29 685.153 L1197.85 685.153 L1198.41 685.153 L1198.97 685.153 L1199.52 685.153 L1200.08 685.153 L1200.64 685.153 L1201.2 685.153 L1201.76 685.153 L1202.32 685.153 L1202.88 685.153 L1203.44 685.153 L1204 685.153 L1204.56 685.153 L1205.12 685.153 L1205.68 685.153 L1206.24 685.153 L1206.8 685.153 L1207.35 685.153 L1207.91 685.153 L1208.47 685.153 L1209.03 685.153 L1209.59 685.153 L1210.15 685.153 L1210.71 685.153 L1211.27 685.153 L1211.83 685.153 L1212.39 685.153 L1212.95 685.153 L1213.51 685.153 L1214.07 685.153 L1214.62 685.153 L1215.18 685.153 L1215.74 685.153 L1216.3 685.153 L1216.86 685.153 L1217.42 685.153 L1217.98 685.153 L1218.54 685.153 L1219.1 685.153 L1219.66 685.153 L1220.22 685.153 L1220.78 685.153 L1221.34 685.153 L1221.89 685.153 L1222.45 685.153 L1223.01 685.153 L1223.57 685.153 L1224.13 685.153 L1224.69 685.153 L1225.25 685.153 L1225.81 685.153 L1226.37 685.153 L1226.93 685.153 L1227.49 685.153 L1228.05 685.153 L1228.61 685.153 L1229.17 685.153 L1229.72 685.153 L1230.28 685.153 L1230.84 685.153 L1231.4 685.153 L1231.96 685.153 L1232.52 685.153 L1233.08 685.153 L1233.64 685.153 L1234.2 685.153 L1234.76 685.153 L1235.32 685.153 L1235.88 685.153 L1236.44 685.153 L1236.99 685.153 L1237.55 685.153 L1238.11 685.153 L1238.67 685.153 L1239.23 685.153 L1239.79 685.153 L1240.35 685.153 L1240.91 685.153 L1241.47 685.153 L1242.03 685.153 L1242.59 685.153 L1243.15 685.153 L1243.71 685.153 L1244.26 685.153 L1244.82 685.153 L1245.38 685.153 L1245.94 685.153 L1246.5 685.153 L1247.06 685.153 L1247.62 685.153 L1248.18 685.153 L1248.74 685.153 L1249.3 685.153 L1249.86 685.153 L1250.42 685.153 L1250.98 685.153 L1251.54 685.153 L1252.09 685.153 L1252.65 685.153 L1253.21 685.153 L1253.77 685.153 L1254.33 685.153 L1254.89 685.153 L1255.45 685.153 L1256.01 685.153 L1256.57 685.153 L1257.13 685.153 L1257.69 685.153 L1258.25 685.153 L1258.81 685.153 L1259.36 685.153 L1259.92 685.153 L1260.48 685.153 L1261.04 685.153 L1261.6 685.153 L1262.16 685.153 L1262.72 685.153 L1263.28 685.153 L1263.84 685.153 L1264.4 685.153 L1264.96 685.153 L1265.52 685.153 L1266.08 685.153 L1266.63 685.153 L1267.19 685.153 L1267.75 685.153 L1268.31 685.153 L1268.87 685.153 L1269.43 685.153 L1269.99 685.153 L1270.55 685.153 L1271.11 685.153 L1271.67 685.153 L1272.23 685.153 L1272.79 685.153 L1273.35 685.153 L1273.91 685.153 L1274.46 685.153 L1275.02 685.153 L1275.58 685.153 L1276.14 685.153 L1276.7 685.153 L1277.26 685.153 L1277.82 685.153 L1278.38 685.153 L1278.94 685.153 L1279.5 685.153 L1280.06 685.153 L1280.62 685.153 L1281.18 685.153 L1281.73 685.153 L1282.29 685.153 L1282.85 685.153 L1283.41 685.153 L1283.97 685.153 L1284.53 685.153 L1285.09 685.153 L1285.65 685.153 L1286.21 685.153 L1286.77 685.153 L1287.33 685.153 L1287.89 685.153 L1288.45 685.153 L1289 685.153 L1289.56 685.153 L1290.12 685.153 L1290.68 685.153 L1291.24 685.153 L1291.8 685.153 L1292.36 685.153 L1292.92 685.153 L1293.48 685.153 L1294.04 685.153 L1294.6 685.153 L1295.16 685.153 L1295.72 685.153 L1296.28 685.153 L1296.83 685.153 L1297.39 685.153 L1297.95 685.153 L1298.51 685.153 L1299.07 685.153 L1299.63 685.153 L1300.19 685.153 L1300.75 685.153 L1301.31 685.153 L1301.87 685.153 L1302.43 685.153 L1302.99 685.153 L1303.55 685.153 L1304.1 685.153 L1304.66 685.153 L1305.22 685.153 L1305.78 685.153 L1306.34 685.153 L1306.9 685.153 L1307.46 685.153 L1308.02 685.153 L1308.58 685.153 L1309.14 685.153 L1309.7 685.153 L1310.26 685.153 L1310.82 685.153 L1311.38 685.153 L1311.93 685.153 L1312.49 685.153 L1313.05 685.153 L1313.61 685.153 L1314.17 685.153 L1314.73 685.153 L1315.29 685.153 L1315.85 685.153 L1316.41 685.153 L1316.97 685.153 L1317.53 685.153 L1318.09 685.153 L1318.65 685.153 L1319.2 685.153 L1319.76 685.153 L1320.32 685.153 L1320.88 685.153 L1321.44 685.153 L1322 685.153 L1322.56 685.153 L1323.12 685.153 L1323.68 685.153 L1324.24 685.153 L1324.8 685.153 L1325.36 685.153 L1325.92 685.153 L1326.47 685.153 L1327.03 685.153 L1327.59 685.153 L1328.15 685.153 L1328.71 685.153 L1329.27 685.153 L1329.83 685.153 L1330.39 685.153 L1330.95 685.153 L1331.51 685.153 L1332.07 685.153 L1332.63 685.153 L1333.19 685.153 L1333.75 685.153 L1334.3 685.153 L1334.86 685.153 L1335.42 685.153 L1335.98 685.153 L1336.54 685.153 L1337.1 685.153 L1337.66 685.153 L1338.22 685.153 L1338.78 685.153 L1339.34 685.153 L1339.9 685.153 L1340.46 685.153 L1341.02 685.153 L1341.57 685.153 L1342.13 685.153 L1342.69 685.153 L1343.25 685.153 L1343.81 685.153 L1344.37 685.153 L1344.93 685.153 L1345.49 685.153 L1346.05 685.153 L1346.61 685.153 L1347.17 685.153 L1347.73 685.153 L1348.29 685.153 L1348.84 685.153 L1349.4 685.153 L1349.96 685.153 L1350.52 685.153 L1351.08 685.153 L1351.64 685.153 L1352.2 685.153 L1352.76 685.153 L1353.32 685.153 L1353.88 685.153 L1354.44 685.153 L1355 685.153 L1355.56 685.153 L1356.12 685.153 L1356.67 685.153 L1357.23 685.153 L1357.79 685.153 L1358.35 685.153 L1358.91 685.153 L1359.47 685.153 L1360.03 685.153 L1360.59 685.153 L1361.15 685.153 L1361.71 685.153 L1362.27 685.153 L1362.83 685.153 L1363.39 685.153 L1363.94 685.153 L1364.5 685.153 L1365.06 685.153 L1365.62 685.153 L1366.18 685.153 L1366.74 685.153 L1367.3 685.153 L1367.86 685.153 L1368.42 685.153 L1368.98 685.153 L1369.54 685.153 L1370.1 685.153 L1370.66 685.153 L1371.21 685.153 L1371.77 685.153 L1372.33 685.153 L1372.89 685.153 L1373.45 685.153 L1374.01 685.153 L1374.57 685.153 L1375.13 685.153 L1375.69 685.153 L1376.25 685.153 L1376.81 685.153 L1377.37 685.153 L1377.93 685.153 L1378.49 685.153 L1379.04 685.153 L1379.6 685.153 L1380.16 685.153 L1380.72 685.153 L1381.28 685.153 L1381.84 685.153 L1382.4 685.153 L1382.96 685.153 L1383.52 685.153 L1384.08 685.153 L1384.64 685.153 L1385.2 685.153 L1385.76 685.153 L1386.31 685.153 L1386.87 685.153 L1387.43 685.153 L1387.99 685.153 L1388.55 685.153 L1389.11 685.153 L1389.67 685.153 L1390.23 685.153 L1390.79 685.153 L1391.35 685.153 L1391.91 685.153 L1392.47 685.153 L1393.03 685.153 L1393.58 685.153 L1394.14 685.153 L1394.7 685.153 L1395.26 685.153 L1395.82 685.153 L1396.38 685.153 L1396.94 685.153 L1397.5 685.153 L1398.06 685.153 L1398.62 685.153 L1399.18 685.153 L1399.74 685.153 L1400.3 685.153 L1400.86 685.153 L1401.41 685.153 L1401.97 685.153 L1402.53 685.153 L1403.09 685.153 L1403.65 685.153 L1404.21 685.153 L1404.77 685.153 L1405.33 685.153 L1405.89 685.153 L1406.45 685.153 L1407.01 685.153 L1407.57 685.153 L1408.13 685.153 L1408.68 685.153 L1409.24 685.153 L1409.8 685.153 L1410.36 685.153 L1410.92 685.153 L1411.48 685.153 L1412.04 685.153 L1412.6 685.153 L1413.16 685.153 L1413.72 685.153 L1414.28 685.153 L1414.84 685.153 L1415.4 685.153 L1415.95 685.153 L1416.51 685.153 L1417.07 685.153 L1417.63 685.153 L1418.19 685.153 L1418.75 685.153 L1419.31 685.153 L1419.87 685.153 L1420.43 685.153 L1420.99 685.153 L1421.55 685.153 L1422.11 685.153 L1422.67 685.153 L1423.23 685.153 L1423.78 685.153 L1424.34 685.153 L1424.9 685.153 L1425.46 685.153 L1426.02 685.153 L1426.58 685.153 L1427.14 685.153 L1427.7 685.153 L1428.26 685.153 L1428.82 685.153 L1429.38 685.153 L1429.94 685.153 L1430.5 685.153 L1431.05 685.153 L1431.61 685.153 L1432.17 685.153 L1432.73 685.153 L1433.29 685.153 L1433.85 685.153 L1434.41 685.153 L1434.97 685.153 L1435.53 685.153 L1436.09 685.153 L1436.65 685.153 L1437.21 685.153 L1437.77 685.153 L1438.33 685.153 L1438.88 685.153 L1439.44 685.153 L1440 685.153 L1440.56 685.153 L1441.12 685.153 L1441.68 685.153 L1442.24 685.153 L1442.8 685.153 L1443.36 685.153 L1443.92 685.153 L1444.48 685.153 L1445.04 685.153 L1445.6 685.153 L1446.15 685.153 L1446.71 685.153 L1447.27 685.153 L1447.83 685.153 L1448.39 685.153 L1448.95 685.153 L1449.51 685.153 L1450.07 685.153 L1450.63 685.153 L1451.19 685.153 L1451.75 685.153 L1452.31 685.153 L1452.87 685.153 L1453.42 685.153 L1453.98 685.153 L1454.54 685.153 L1455.1 685.153 L1455.66 685.153 L1456.22 685.153 L1456.78 685.153 L1457.34 685.153 L1457.9 685.153 L1458.46 685.153 L1459.02 685.153 L1459.58 685.153 L1460.14 685.153 L1460.7 685.153 L1461.25 685.153 L1461.81 685.153 L1462.37 685.153 L1462.93 685.153 L1463.49 685.153 L1464.05 685.153 L1464.61 685.153 L1465.17 685.153 L1465.73 685.153 L1466.29 685.153 L1466.85 685.153 L1467.41 685.153 L1467.97 685.153 L1468.52 685.153 L1469.08 685.153 L1469.64 685.153 L1470.2 685.153 L1470.76 685.153 L1471.32 685.153 L1471.88 685.153 L1472.44 685.153 L1473 685.153 L1473.56 685.153 L1474.12 685.153 L1474.68 685.153 L1475.24 685.153 L1475.79 685.153 L1476.35 685.153 L1476.91 685.153 L1477.47 685.153 L1478.03 685.153 L1478.59 685.153 L1479.15 685.153 L1479.71 685.153 L1480.27 685.153 L1480.83 685.153 L1481.39 685.153 L1481.95 685.153 L1482.51 685.153 L1483.07 685.153 L1483.62 685.153 L1484.18 685.153 L1484.74 685.153 L1485.3 685.153 L1485.86 685.153 L1486.42 685.153 L1486.98 685.153 L1487.54 685.153 L1488.1 685.153 L1488.66 685.153 L1489.22 685.153 L1489.78 685.153 L1490.34 685.153 L1490.89 685.153 L1491.45 685.153 L1492.01 685.153 L1492.57 685.153 L1493.13 685.153 L1493.69 685.153 L1494.25 685.153 L1494.81 685.153 L1495.37 685.153 L1495.93 685.153 L1496.49 685.153 L1497.05 685.153 L1497.61 685.153 L1498.16 685.153 L1498.72 685.153 L1499.28 685.153 L1499.84 685.153 L1500.4 685.153 L1500.96 685.153 L1501.52 685.153 L1502.08 685.153 L1502.64 685.153 L1503.2 685.153 L1503.76 685.153 L1504.32 685.153 L1504.88 685.153 L1505.44 685.153 L1505.99 685.153 L1506.55 685.153 L1507.11 685.153 L1507.67 685.153 L1508.23 685.153 L1508.79 685.153 L1509.35 685.153 L1509.91 685.153 L1510.47 685.153 L1511.03 685.153 L1511.59 685.153 L1512.15 685.153 L1512.71 685.153 L1513.26 685.153 L1513.82 685.153 L1514.38 685.153 L1514.94 685.153 L1515.5 685.153 L1516.06 685.153 L1516.62 685.153 L1517.18 685.153 L1517.74 685.153 L1518.3 685.153 L1518.86 685.153 L1519.42 685.153 L1519.98 685.153 L1520.53 685.153 L1521.09 685.153 L1521.65 685.153 L1522.21 685.153 L1522.77 685.153 L1523.33 685.153 L1523.89 685.153 L1524.45 685.153 L1525.01 685.153 L1525.57 685.153 L1526.13 685.153 L1526.69 685.153 L1527.25 685.153 L1527.81 685.153 L1528.36 685.153 L1528.92 685.153 L1529.48 685.153 L1530.04 685.153 L1530.6 685.153 L1531.16 685.153 L1531.72 685.153 L1532.28 685.153 L1532.84 685.153 L1533.4 685.153 L1533.96 685.153 L1534.52 685.153 L1535.08 685.153 L1535.63 685.153 L1536.19 685.153 L1536.75 685.153 L1537.31 685.153 L1537.87 685.153 L1538.43 685.153 L1538.99 685.153 L1539.55 685.153 L1540.11 685.153 L1540.67 685.153 L1541.23 685.153 L1541.79 685.153 L1542.35 685.153 L1542.9 685.153 L1543.46 685.153 L1544.02 685.153 L1544.58 685.153 L1545.14 685.153 L1545.7 685.153 L1546.26 685.153 L1546.82 685.153 L1547.38 685.153 L1547.94 685.153 L1548.5 685.153 L1549.06 685.153 L1549.62 685.153 L1550.18 685.153 L1550.73 685.153 L1551.29 685.153 L1551.85 685.153 L1552.41 685.153 L1552.97 685.153 L1553.53 685.153 L1554.09 685.153 L1554.65 685.153 L1555.21 685.153 L1555.77 685.153 L1556.33 685.153 L1556.89 685.153 L1557.45 685.153 L1558 685.153 L1558.56 685.153 L1559.12 685.153 L1559.68 685.153 L1560.24 685.153 L1560.8 685.153 L1561.36 685.153 L1561.92 685.153 L1562.48 685.153 L1563.04 685.153 L1563.6 685.153 L1564.16 685.153 L1564.72 685.153 L1565.28 685.153 L1565.83 685.153 L1566.39 685.153 L1566.95 685.153 L1567.51 685.153 L1568.07 685.153 L1568.63 685.153 L1569.19 685.153 L1569.75 685.153 L1570.31 685.153 L1570.87 685.153 L1571.43 685.153 L1571.99 685.153 L1572.55 685.153 L1573.1 685.153 L1573.66 685.153 L1574.22 685.153 L1574.78 685.153 L1575.34 685.153 L1575.9 685.153 L1576.46 685.153 L1577.02 685.153 L1577.58 685.153 L1578.14 685.153 L1578.7 685.153 L1579.26 685.153 L1579.82 685.153 L1580.37 685.153 L1580.93 685.153 L1581.49 685.153 L1582.05 685.153 L1582.61 685.153 L1583.17 685.153 L1583.73 685.153 L1584.29 685.153 L1584.85 685.153 L1585.41 685.153 L1585.97 685.153 L1586.53 685.153 L1587.09 685.153 L1587.65 685.153 L1588.2 685.153 L1588.76 685.153 L1589.32 685.153 L1589.88 685.153 L1590.44 685.153 L1591 685.153 L1591.56 685.153 L1592.12 685.153 L1592.68 685.153 L1593.24 685.153 L1593.8 685.153 L1594.36 685.153 L1594.92 685.153 L1595.47 685.153 L1596.03 685.153 L1596.59 685.153 L1597.15 685.153 L1597.71 685.153 L1598.27 685.153 L1598.83 685.153 L1599.39 685.153 L1599.95 685.153 L1600.51 685.153 L1601.07 685.153 L1601.63 685.153 L1602.19 685.153 L1602.74 685.153 L1603.3 685.153 L1603.86 685.153 L1604.42 685.153 L1604.98 685.153 L1605.54 685.153 L1606.1 685.153 L1606.66 685.153 L1607.22 685.153 L1607.78 685.153 L1608.34 685.153 L1608.9 685.153 L1609.46 685.153 L1610.02 685.153 L1610.57 685.153 L1611.13 685.153 L1611.69 685.153 L1612.25 685.153 L1612.81 685.153 L1613.37 685.153 L1613.93 685.153 L1614.49 685.153 L1615.05 685.153 L1615.61 685.153 L1616.17 685.153 L1616.73 685.153 L1617.29 685.153 L1617.84 685.153 L1618.4 685.153 L1618.96 685.153 L1619.52 685.153 L1620.08 685.153 L1620.64 685.153 L1621.2 685.153 L1621.76 685.153 L1622.32 685.153 L1622.88 685.153 L1623.44 685.153 L1624 685.153 L1624.56 685.153 L1625.11 685.153 L1625.67 685.153 L1626.23 685.153 L1626.79 685.153 L1627.35 685.153 L1627.91 685.153 L1628.47 685.153 L1629.03 685.153 L1629.59 685.153 L1630.15 685.153 L1630.71 685.153 L1631.27 685.153 L1631.83 685.153 L1632.39 685.153 L1632.94 685.153 L1633.5 685.153 L1634.06 685.153 L1634.62 685.153 L1635.18 685.153 L1635.74 685.153 L1636.3 685.153 L1636.86 685.153 L1637.42 685.153 L1637.98 685.153 L1638.54 685.153 L1639.1 685.153 L1639.66 685.153 L1640.21 685.153 L1640.77 685.153 L1641.33 685.153 L1641.89 685.153 L1642.45 685.153 L1643.01 685.153 L1643.57 685.153 L1644.13 685.153 L1644.69 685.153 L1645.25 685.153 L1645.81 685.153 L1646.37 685.153 L1646.93 685.153 L1647.48 685.153 L1648.04 685.153 L1648.6 685.153 L1649.16 685.153 L1649.72 685.153 L1650.28 685.153 L1650.84 685.153 L1651.4 685.153 L1651.96 685.153 L1652.52 685.153 L1653.08 685.153 L1653.64 685.153 L1654.2 685.153 L1654.76 685.153 L1655.31 685.153 L1655.87 685.153 L1656.43 685.153 L1656.99 685.153 L1657.55 685.153 L1658.11 685.153 L1658.67 685.153 L1659.23 685.153 L1659.79 685.153 L1660.35 685.153 L1660.91 685.153 L1661.47 685.153 L1662.03 685.153 L1662.58 685.153 L1663.14 685.153 L1663.7 685.153 L1664.26 685.153 L1664.82 685.153 L1665.38 685.153 L1665.94 685.153 L1666.5 685.153 L1667.06 685.153 L1667.62 685.153 L1668.18 685.153 L1668.74 685.153 L1669.3 685.153 L1669.85 685.153 L1670.41 685.153 L1670.97 685.153 L1671.53 685.153 L1672.09 685.153 L1672.65 685.153 L1673.21 685.153 L1673.77 685.153 L1674.33 685.153 L1674.89 685.153 L1675.45 685.153 L1676.01 685.153 L1676.57 685.153 L1677.13 685.153 L1677.68 685.153 L1678.24 685.153 L1678.8 685.153 L1679.36 685.153 L1679.92 685.153 L1680.48 685.153 L1681.04 685.153 L1681.6 685.153 L1682.16 685.153 L1682.72 685.153 L1683.28 685.153 L1683.84 685.153 L1684.4 685.153 L1684.95 685.153 L1685.51 685.153 L1686.07 685.153 L1686.63 685.153 L1687.19 685.153 L1687.75 685.153 L1688.31 685.153 L1688.87 685.153 L1689.43 685.153 L1689.99 685.153 L1690.55 685.153 L1691.11 685.153 L1691.67 685.153 L1692.23 685.153 L1692.78 685.153 L1693.34 685.153 L1693.9 685.153 L1694.46 685.153 L1695.02 685.153 L1695.58 685.153 L1696.14 685.153 L1696.7 685.153 L1697.26 685.153 L1697.82 685.153 L1698.38 685.153 L1698.94 685.153 L1699.5 685.153 L1700.05 685.153 L1700.61 685.153 L1701.17 685.153 L1701.73 685.153 L1702.29 685.153 L1702.85 685.153 L1703.41 685.153 L1703.97 685.153 L1704.53 685.153 L1705.09 685.153 L1705.65 685.153 L1706.21 685.153 L1706.77 685.153 L1707.32 685.153 L1707.88 685.153 L1708.44 685.153 L1709 685.153 L1709.56 685.153 L1710.12 685.153 L1710.68 685.153 L1711.24 685.153 L1711.8 685.153 L1712.36 685.153 L1712.92 685.153 L1713.48 685.153 L1714.04 685.153 L1714.6 685.153 L1715.15 685.153 L1715.71 685.153 L1716.27 685.153 L1716.83 685.153 L1717.39 685.153 L1717.95 685.153 L1718.51 685.153 L1719.07 685.153 L1719.63 685.153 L1720.19 685.153 L1720.75 685.153 L1721.31 685.153 L1721.87 685.153 L1722.42 685.153 L1722.98 685.153 L1723.54 685.153 L1724.1 685.153 L1724.66 685.153 L1725.22 685.153 L1725.78 685.153 L1726.34 685.153 L1726.9 685.153 L1727.46 685.153 L1728.02 685.153 L1728.58 685.153 L1729.14 685.153 L1729.69 685.153 L1730.25 685.153 L1730.81 685.153 L1731.37 685.153 L1731.93 685.153 L1732.49 685.153 L1733.05 685.153 L1733.61 685.153 L1734.17 685.153 L1734.73 685.153 L1735.29 685.153 L1735.85 685.153 L1736.41 685.153 L1736.97 685.153 L1737.52 685.153 L1738.08 685.153 L1738.64 685.153 L1739.2 685.153 L1739.76 685.153 L1740.32 685.153 L1740.88 685.153 L1741.44 685.153 L1742 685.153 L1742.56 685.153 L1743.12 685.153 L1743.68 685.153 L1744.24 685.153 L1744.79 685.153 L1745.35 685.153 L1745.91 685.153 L1746.47 685.153 L1747.03 685.153 L1747.59 685.153 L1748.15 685.153 L1748.71 685.153 L1749.27 685.153 L1749.83 685.153 L1750.39 685.153 L1750.95 685.153 L1751.51 685.153 L1752.06 685.153 L1752.62 685.153 L1753.18 685.153 L1753.74 685.153 L1754.3 685.153 L1754.86 685.153 L1755.42 685.153 L1755.98 685.153 L1756.54 685.153 L1757.1 685.153 L1757.66 685.153 L1758.22 685.153 L1758.78 685.153 L1759.34 685.153 L1759.89 685.153 L1760.45 685.153 L1761.01 685.153 L1761.57 685.153 L1762.13 685.153 L1762.69 685.153 L1763.25 685.153 L1763.81 685.153 L1764.37 685.153 L1764.93 685.153 L1765.49 685.153 L1766.05 685.153 L1766.61 685.153 L1767.16 685.153 L1767.72 685.153 L1768.28 685.153 L1768.84 685.153 L1769.4 685.153 L1769.96 685.153 L1770.52 685.153 L1771.08 685.153 L1771.64 685.153 L1772.2 685.153 L1772.76 685.153 L1773.32 685.153 L1773.88 685.153 L1774.43 685.153 L1774.99 685.153 L1775.55 685.153 L1776.11 685.153 L1776.67 685.153 L1777.23 685.153 L1777.79 685.153 L1778.35 685.153 L1778.91 685.153 L1779.47 685.153 L1780.03 685.153 L1780.59 685.153 L1781.15 685.153 L1781.71 685.153 L1782.26 685.153 L1782.82 685.153 L1783.38 685.153 L1783.94 685.153 L1784.5 685.153 L1785.06 685.153 L1785.62 685.153 L1786.18 685.153 L1786.74 685.153 L1787.3 685.153 L1787.86 685.153 L1788.42 685.153 L1788.98 685.153 L1789.53 685.153 L1790.09 685.153 L1790.65 685.153 L1791.21 685.153 L1791.77 685.153 L1792.33 685.153 L1792.89 685.153 L1793.45 685.153 L1794.01 685.153 L1794.57 685.153 L1795.13 685.153 L1795.69 685.153 L1796.25 685.153 L1796.8 685.153 L1797.36 685.153 L1797.92 685.153 L1798.48 685.153 L1799.04 685.153 L1799.6 685.153 L1800.16 685.153 L1800.72 685.153 L1801.28 685.153 L1801.84 685.153 L1802.4 685.153 L1802.96 685.153 L1803.52 685.153 L1804.08 685.153 L1804.63 685.153 L1805.19 685.153 L1805.75 685.153 L1806.31 685.153 L1806.87 685.153 L1807.43 685.153 L1807.99 685.153 L1808.55 685.153 L1809.11 685.153 L1809.67 685.153 L1810.23 685.153 L1810.79 685.153 L1811.35 685.153 L1811.9 685.153 L1812.46 685.153 L1813.02 685.153 L1813.58 685.153 L1814.14 685.153 L1814.7 685.153 L1815.26 685.153 L1815.82 685.153 L1816.38 685.153 L1816.94 685.153 L1817.5 685.153 L1818.06 685.153 L1818.62 685.153 L1819.18 685.153 L1819.73 685.153 L1820.29 685.153 L1820.85 685.153 L1821.41 685.153 L1821.97 685.153 L1822.53 685.153 L1823.09 685.153 L1823.65 685.153 L1824.21 685.153 L1824.77 685.153 L1825.33 685.153 L1825.89 685.153 L1826.45 685.153 L1827 685.153 L1827.56 685.153 L1828.12 685.153 L1828.68 685.153 L1829.24 685.153 L1829.8 685.153 L1830.36 685.153 L1830.92 685.153 L1831.48 685.153 L1832.04 685.153 L1832.6 685.153 L1833.16 685.153 L1833.72 685.153 L1834.27 685.153 L1834.83 685.153 L1835.39 685.153 L1835.95 685.153 L1836.51 685.153 L1837.07 685.153 L1837.63 685.153 L1838.19 685.153 L1838.19 682.483 L1837.63 682.483 L1837.07 682.483 L1836.51 682.483 L1835.95 682.483 L1835.39 682.483 L1834.83 682.483 L1834.27 682.483 L1833.72 682.483 L1833.16 682.483 L1832.6 682.483 L1832.04 682.483 L1831.48 682.483 L1830.92 682.483 L1830.36 682.483 L1829.8 682.483 L1829.24 682.483 L1828.68 682.483 L1828.12 682.483 L1827.56 682.483 L1827 682.483 L1826.45 682.483 L1825.89 682.483 L1825.33 682.483 L1824.77 682.483 L1824.21 682.483 L1823.65 682.483 L1823.09 682.483 L1822.53 682.483 L1821.97 682.483 L1821.41 682.483 L1820.85 682.483 L1820.29 682.483 L1819.73 682.483 L1819.18 682.483 L1818.62 682.483 L1818.06 682.483 L1817.5 682.483 L1816.94 682.483 L1816.38 682.483 L1815.82 682.483 L1815.26 682.483 L1814.7 682.483 L1814.14 682.483 L1813.58 682.483 L1813.02 682.483 L1812.46 682.483 L1811.9 682.483 L1811.35 682.483 L1810.79 682.483 L1810.23 682.483 L1809.67 682.483 L1809.11 682.483 L1808.55 682.483 L1807.99 682.483 L1807.43 682.483 L1806.87 682.483 L1806.31 682.483 L1805.75 682.483 L1805.19 682.483 L1804.63 682.483 L1804.08 682.483 L1803.52 682.483 L1802.96 682.483 L1802.4 682.483 L1801.84 682.483 L1801.28 682.483 L1800.72 682.483 L1800.16 682.483 L1799.6 682.483 L1799.04 682.483 L1798.48 682.483 L1797.92 682.483 L1797.36 682.483 L1796.8 682.483 L1796.25 682.483 L1795.69 682.483 L1795.13 682.483 L1794.57 682.483 L1794.01 682.483 L1793.45 682.483 L1792.89 682.483 L1792.33 682.483 L1791.77 682.483 L1791.21 682.483 L1790.65 682.483 L1790.09 682.483 L1789.53 682.483 L1788.98 682.483 L1788.42 682.483 L1787.86 682.483 L1787.3 682.483 L1786.74 682.483 L1786.18 682.483 L1785.62 682.483 L1785.06 682.483 L1784.5 682.483 L1783.94 682.483 L1783.38 682.483 L1782.82 682.483 L1782.26 682.483 L1781.71 682.483 L1781.15 682.483 L1780.59 682.483 L1780.03 682.483 L1779.47 682.483 L1778.91 682.483 L1778.35 682.483 L1777.79 682.483 L1777.23 682.483 L1776.67 682.483 L1776.11 682.483 L1775.55 682.483 L1774.99 682.483 L1774.43 682.483 L1773.88 682.483 L1773.32 682.483 L1772.76 682.483 L1772.2 682.483 L1771.64 682.483 L1771.08 682.483 L1770.52 682.483 L1769.96 682.483 L1769.4 682.483 L1768.84 682.483 L1768.28 682.483 L1767.72 682.483 L1767.16 682.483 L1766.61 682.483 L1766.05 682.483 L1765.49 682.483 L1764.93 682.483 L1764.37 682.483 L1763.81 682.483 L1763.25 682.483 L1762.69 682.483 L1762.13 682.483 L1761.57 682.483 L1761.01 682.483 L1760.45 682.483 L1759.89 682.483 L1759.34 682.483 L1758.78 682.483 L1758.22 682.483 L1757.66 682.483 L1757.1 682.483 L1756.54 682.483 L1755.98 682.483 L1755.42 682.483 L1754.86 682.483 L1754.3 682.483 L1753.74 682.483 L1753.18 682.483 L1752.62 682.483 L1752.06 682.483 L1751.51 682.483 L1750.95 682.483 L1750.39 682.483 L1749.83 682.483 L1749.27 682.483 L1748.71 682.483 L1748.15 682.483 L1747.59 682.483 L1747.03 682.483 L1746.47 682.483 L1745.91 682.483 L1745.35 682.483 L1744.79 682.483 L1744.24 682.483 L1743.68 682.483 L1743.12 682.483 L1742.56 682.483 L1742 682.483 L1741.44 682.483 L1740.88 682.483 L1740.32 682.483 L1739.76 682.483 L1739.2 682.483 L1738.64 682.483 L1738.08 682.483 L1737.52 682.483 L1736.97 682.483 L1736.41 682.483 L1735.85 682.483 L1735.29 682.483 L1734.73 682.483 L1734.17 682.483 L1733.61 682.483 L1733.05 682.483 L1732.49 682.483 L1731.93 682.483 L1731.37 682.483 L1730.81 682.483 L1730.25 682.483 L1729.69 682.483 L1729.14 682.483 L1728.58 682.483 L1728.02 682.483 L1727.46 682.483 L1726.9 682.483 L1726.34 682.483 L1725.78 682.483 L1725.22 682.483 L1724.66 682.483 L1724.1 682.483 L1723.54 682.483 L1722.98 682.483 L1722.42 682.483 L1721.87 682.483 L1721.31 682.483 L1720.75 682.483 L1720.19 682.483 L1719.63 682.483 L1719.07 682.483 L1718.51 682.483 L1717.95 682.483 L1717.39 682.483 L1716.83 682.483 L1716.27 682.483 L1715.71 682.483 L1715.15 682.483 L1714.6 682.483 L1714.04 682.483 L1713.48 682.483 L1712.92 682.483 L1712.36 682.483 L1711.8 682.483 L1711.24 682.483 L1710.68 682.483 L1710.12 682.483 L1709.56 682.483 L1709 682.483 L1708.44 682.483 L1707.88 682.483 L1707.32 682.483 L1706.77 682.483 L1706.21 682.483 L1705.65 682.483 L1705.09 682.483 L1704.53 682.483 L1703.97 682.483 L1703.41 682.483 L1702.85 682.483 L1702.29 682.483 L1701.73 682.483 L1701.17 682.483 L1700.61 682.483 L1700.05 682.483 L1699.5 682.483 L1698.94 682.483 L1698.38 682.483 L1697.82 682.483 L1697.26 682.483 L1696.7 682.483 L1696.14 682.483 L1695.58 682.483 L1695.02 682.483 L1694.46 682.483 L1693.9 682.483 L1693.34 682.483 L1692.78 682.483 L1692.23 682.483 L1691.67 682.483 L1691.11 682.483 L1690.55 682.483 L1689.99 682.483 L1689.43 682.483 L1688.87 682.483 L1688.31 682.483 L1687.75 682.483 L1687.19 682.483 L1686.63 682.483 L1686.07 682.483 L1685.51 682.483 L1684.95 682.483 L1684.4 682.483 L1683.84 682.483 L1683.28 682.483 L1682.72 682.483 L1682.16 682.483 L1681.6 682.483 L1681.04 682.483 L1680.48 682.483 L1679.92 682.483 L1679.36 682.483 L1678.8 682.483 L1678.24 682.483 L1677.68 682.483 L1677.13 682.483 L1676.57 682.483 L1676.01 682.483 L1675.45 682.483 L1674.89 682.483 L1674.33 682.483 L1673.77 682.483 L1673.21 682.483 L1672.65 682.483 L1672.09 682.483 L1671.53 682.483 L1670.97 682.483 L1670.41 682.483 L1669.85 682.483 L1669.3 682.483 L1668.74 682.483 L1668.18 682.483 L1667.62 682.483 L1667.06 682.483 L1666.5 682.483 L1665.94 682.483 L1665.38 682.483 L1664.82 682.483 L1664.26 682.483 L1663.7 682.483 L1663.14 682.483 L1662.58 682.483 L1662.03 682.483 L1661.47 682.483 L1660.91 682.483 L1660.35 682.483 L1659.79 682.483 L1659.23 682.483 L1658.67 682.483 L1658.11 682.483 L1657.55 682.483 L1656.99 682.483 L1656.43 682.483 L1655.87 682.483 L1655.31 682.483 L1654.76 682.483 L1654.2 682.483 L1653.64 682.483 L1653.08 682.483 L1652.52 682.483 L1651.96 682.483 L1651.4 682.483 L1650.84 682.483 L1650.28 682.483 L1649.72 682.483 L1649.16 682.483 L1648.6 682.483 L1648.04 682.483 L1647.48 682.483 L1646.93 682.483 L1646.37 682.483 L1645.81 682.483 L1645.25 682.483 L1644.69 682.483 L1644.13 682.483 L1643.57 682.483 L1643.01 682.483 L1642.45 682.483 L1641.89 682.483 L1641.33 682.483 L1640.77 682.483 L1640.21 682.483 L1639.66 682.483 L1639.1 682.483 L1638.54 682.483 L1637.98 682.483 L1637.42 682.483 L1636.86 682.483 L1636.3 682.483 L1635.74 682.483 L1635.18 682.483 L1634.62 682.483 L1634.06 682.483 L1633.5 682.483 L1632.94 682.483 L1632.39 682.483 L1631.83 682.483 L1631.27 682.483 L1630.71 682.483 L1630.15 682.483 L1629.59 682.483 L1629.03 682.483 L1628.47 682.483 L1627.91 682.483 L1627.35 682.483 L1626.79 682.483 L1626.23 682.483 L1625.67 682.483 L1625.11 682.483 L1624.56 682.483 L1624 682.483 L1623.44 682.483 L1622.88 682.483 L1622.32 682.483 L1621.76 682.483 L1621.2 682.483 L1620.64 682.483 L1620.08 682.483 L1619.52 682.483 L1618.96 682.483 L1618.4 682.483 L1617.84 682.483 L1617.29 682.483 L1616.73 682.483 L1616.17 682.483 L1615.61 682.483 L1615.05 682.483 L1614.49 682.483 L1613.93 682.483 L1613.37 682.483 L1612.81 682.483 L1612.25 682.483 L1611.69 682.483 L1611.13 682.483 L1610.57 682.483 L1610.02 682.483 L1609.46 682.483 L1608.9 682.483 L1608.34 682.483 L1607.78 682.483 L1607.22 682.483 L1606.66 682.483 L1606.1 682.483 L1605.54 682.483 L1604.98 682.483 L1604.42 682.483 L1603.86 682.483 L1603.3 682.483 L1602.74 682.483 L1602.19 682.483 L1601.63 682.483 L1601.07 682.483 L1600.51 682.483 L1599.95 682.483 L1599.39 682.483 L1598.83 682.483 L1598.27 682.483 L1597.71 682.483 L1597.15 682.483 L1596.59 682.483 L1596.03 682.483 L1595.47 682.483 L1594.92 682.483 L1594.36 682.483 L1593.8 682.483 L1593.24 682.483 L1592.68 682.483 L1592.12 682.483 L1591.56 682.483 L1591 682.483 L1590.44 682.483 L1589.88 682.483 L1589.32 682.483 L1588.76 682.483 L1588.2 682.483 L1587.65 682.483 L1587.09 682.483 L1586.53 682.483 L1585.97 682.483 L1585.41 682.483 L1584.85 682.483 L1584.29 682.483 L1583.73 682.483 L1583.17 682.483 L1582.61 682.483 L1582.05 682.483 L1581.49 682.483 L1580.93 682.483 L1580.37 682.483 L1579.82 682.483 L1579.26 682.483 L1578.7 682.483 L1578.14 682.483 L1577.58 682.483 L1577.02 682.483 L1576.46 682.483 L1575.9 682.483 L1575.34 682.483 L1574.78 682.483 L1574.22 682.483 L1573.66 682.483 L1573.1 682.483 L1572.55 682.483 L1571.99 682.483 L1571.43 682.483 L1570.87 682.483 L1570.31 682.483 L1569.75 682.483 L1569.19 682.483 L1568.63 682.483 L1568.07 682.483 L1567.51 682.483 L1566.95 682.483 L1566.39 682.483 L1565.83 682.483 L1565.28 682.483 L1564.72 682.483 L1564.16 682.483 L1563.6 682.483 L1563.04 682.483 L1562.48 682.483 L1561.92 682.483 L1561.36 682.483 L1560.8 682.483 L1560.24 682.483 L1559.68 682.483 L1559.12 682.483 L1558.56 682.483 L1558 682.483 L1557.45 682.483 L1556.89 682.483 L1556.33 682.483 L1555.77 682.483 L1555.21 682.483 L1554.65 682.483 L1554.09 682.483 L1553.53 682.483 L1552.97 682.483 L1552.41 682.483 L1551.85 682.483 L1551.29 682.483 L1550.73 682.483 L1550.18 682.483 L1549.62 682.483 L1549.06 682.483 L1548.5 682.483 L1547.94 682.483 L1547.38 682.483 L1546.82 682.483 L1546.26 682.483 L1545.7 682.483 L1545.14 682.483 L1544.58 682.483 L1544.02 682.483 L1543.46 682.483 L1542.9 682.483 L1542.35 682.483 L1541.79 682.483 L1541.23 682.483 L1540.67 682.483 L1540.11 682.483 L1539.55 682.483 L1538.99 682.483 L1538.43 682.483 L1537.87 682.483 L1537.31 682.483 L1536.75 682.483 L1536.19 682.483 L1535.63 682.483 L1535.08 682.483 L1534.52 682.483 L1533.96 682.483 L1533.4 682.483 L1532.84 682.483 L1532.28 682.483 L1531.72 682.483 L1531.16 682.483 L1530.6 682.483 L1530.04 682.483 L1529.48 682.483 L1528.92 682.483 L1528.36 682.483 L1527.81 682.483 L1527.25 682.483 L1526.69 682.483 L1526.13 682.483 L1525.57 682.483 L1525.01 682.483 L1524.45 682.483 L1523.89 682.483 L1523.33 682.483 L1522.77 682.483 L1522.21 682.483 L1521.65 682.483 L1521.09 682.483 L1520.53 682.483 L1519.98 682.483 L1519.42 682.483 L1518.86 682.483 L1518.3 682.483 L1517.74 682.483 L1517.18 682.483 L1516.62 682.483 L1516.06 682.483 L1515.5 682.483 L1514.94 682.483 L1514.38 682.483 L1513.82 682.483 L1513.26 682.483 L1512.71 682.483 L1512.15 682.483 L1511.59 682.483 L1511.03 682.483 L1510.47 682.483 L1509.91 682.483 L1509.35 682.483 L1508.79 682.483 L1508.23 682.483 L1507.67 682.483 L1507.11 682.483 L1506.55 682.483 L1505.99 682.483 L1505.44 682.483 L1504.88 682.483 L1504.32 682.483 L1503.76 682.483 L1503.2 682.483 L1502.64 682.483 L1502.08 682.483 L1501.52 682.483 L1500.96 682.483 L1500.4 682.483 L1499.84 682.483 L1499.28 682.483 L1498.72 682.483 L1498.16 682.483 L1497.61 682.483 L1497.05 682.483 L1496.49 682.483 L1495.93 682.483 L1495.37 682.483 L1494.81 682.483 L1494.25 682.483 L1493.69 682.483 L1493.13 682.483 L1492.57 682.483 L1492.01 682.483 L1491.45 682.483 L1490.89 682.483 L1490.34 682.483 L1489.78 682.483 L1489.22 682.483 L1488.66 682.483 L1488.1 682.483 L1487.54 682.483 L1486.98 682.483 L1486.42 682.483 L1485.86 682.483 L1485.3 682.483 L1484.74 682.483 L1484.18 682.483 L1483.62 682.483 L1483.07 682.483 L1482.51 682.483 L1481.95 682.483 L1481.39 682.483 L1480.83 682.483 L1480.27 682.483 L1479.71 682.483 L1479.15 682.483 L1478.59 682.483 L1478.03 682.483 L1477.47 682.483 L1476.91 682.483 L1476.35 682.483 L1475.79 682.483 L1475.24 682.483 L1474.68 682.483 L1474.12 682.483 L1473.56 682.483 L1473 682.483 L1472.44 682.483 L1471.88 682.483 L1471.32 682.483 L1470.76 682.483 L1470.2 682.483 L1469.64 682.483 L1469.08 682.483 L1468.52 682.483 L1467.97 682.483 L1467.41 682.483 L1466.85 682.483 L1466.29 682.483 L1465.73 682.483 L1465.17 682.483 L1464.61 682.483 L1464.05 682.483 L1463.49 682.483 L1462.93 682.483 L1462.37 682.483 L1461.81 682.483 L1461.25 682.483 L1460.7 682.483 L1460.14 682.483 L1459.58 682.483 L1459.02 682.483 L1458.46 682.483 L1457.9 682.483 L1457.34 682.483 L1456.78 682.483 L1456.22 682.483 L1455.66 682.483 L1455.1 682.483 L1454.54 682.483 L1453.98 682.483 L1453.42 682.483 L1452.87 682.483 L1452.31 682.483 L1451.75 682.483 L1451.19 682.483 L1450.63 682.483 L1450.07 682.483 L1449.51 682.483 L1448.95 682.483 L1448.39 682.483 L1447.83 682.483 L1447.27 682.483 L1446.71 682.483 L1446.15 682.483 L1445.6 682.483 L1445.04 682.483 L1444.48 682.483 L1443.92 682.483 L1443.36 682.483 L1442.8 682.483 L1442.24 682.483 L1441.68 682.483 L1441.12 682.483 L1440.56 682.483 L1440 682.483 L1439.44 682.483 L1438.88 682.483 L1438.33 682.483 L1437.77 682.483 L1437.21 682.483 L1436.65 682.483 L1436.09 682.483 L1435.53 682.483 L1434.97 682.483 L1434.41 682.483 L1433.85 682.483 L1433.29 682.483 L1432.73 682.483 L1432.17 682.483 L1431.61 682.483 L1431.05 682.483 L1430.5 682.483 L1429.94 682.483 L1429.38 682.483 L1428.82 682.483 L1428.26 682.483 L1427.7 682.483 L1427.14 682.483 L1426.58 682.483 L1426.02 682.483 L1425.46 682.483 L1424.9 682.483 L1424.34 682.483 L1423.78 682.483 L1423.23 682.483 L1422.67 682.483 L1422.11 682.483 L1421.55 682.483 L1420.99 682.483 L1420.43 682.483 L1419.87 682.483 L1419.31 682.483 L1418.75 682.483 L1418.19 682.483 L1417.63 682.483 L1417.07 682.483 L1416.51 682.483 L1415.95 682.483 L1415.4 682.483 L1414.84 682.483 L1414.28 682.483 L1413.72 682.483 L1413.16 682.483 L1412.6 682.483 L1412.04 682.483 L1411.48 682.483 L1410.92 682.483 L1410.36 682.483 L1409.8 682.483 L1409.24 682.483 L1408.68 682.483 L1408.13 682.483 L1407.57 682.483 L1407.01 682.483 L1406.45 682.483 L1405.89 682.483 L1405.33 682.483 L1404.77 682.483 L1404.21 682.483 L1403.65 682.483 L1403.09 682.483 L1402.53 682.483 L1401.97 682.483 L1401.41 682.483 L1400.86 682.483 L1400.3 682.483 L1399.74 682.483 L1399.18 682.483 L1398.62 682.483 L1398.06 682.483 L1397.5 682.483 L1396.94 682.483 L1396.38 682.483 L1395.82 682.483 L1395.26 682.483 L1394.7 682.483 L1394.14 682.483 L1393.58 682.483 L1393.03 682.483 L1392.47 682.483 L1391.91 682.483 L1391.35 682.483 L1390.79 682.483 L1390.23 682.483 L1389.67 682.483 L1389.11 682.483 L1388.55 682.483 L1387.99 682.483 L1387.43 682.483 L1386.87 682.483 L1386.31 682.483 L1385.76 682.483 L1385.2 682.483 L1384.64 682.483 L1384.08 682.483 L1383.52 682.483 L1382.96 682.483 L1382.4 682.483 L1381.84 682.483 L1381.28 682.483 L1380.72 682.483 L1380.16 682.483 L1379.6 682.483 L1379.04 682.483 L1378.49 682.483 L1377.93 682.483 L1377.37 682.483 L1376.81 682.483 L1376.25 682.483 L1375.69 682.483 L1375.13 682.483 L1374.57 682.483 L1374.01 682.483 L1373.45 682.483 L1372.89 682.483 L1372.33 682.483 L1371.77 682.483 L1371.21 682.483 L1370.66 682.483 L1370.1 682.483 L1369.54 682.483 L1368.98 682.483 L1368.42 682.483 L1367.86 682.483 L1367.3 682.483 L1366.74 682.483 L1366.18 682.483 L1365.62 682.483 L1365.06 682.483 L1364.5 682.483 L1363.94 682.483 L1363.39 682.483 L1362.83 682.483 L1362.27 682.483 L1361.71 682.483 L1361.15 682.483 L1360.59 682.483 L1360.03 682.483 L1359.47 682.483 L1358.91 682.483 L1358.35 682.483 L1357.79 682.483 L1357.23 682.483 L1356.67 682.483 L1356.12 682.483 L1355.56 682.483 L1355 682.483 L1354.44 682.483 L1353.88 682.483 L1353.32 682.483 L1352.76 682.483 L1352.2 682.483 L1351.64 682.483 L1351.08 682.483 L1350.52 682.483 L1349.96 682.483 L1349.4 682.483 L1348.84 682.483 L1348.29 682.483 L1347.73 682.483 L1347.17 682.483 L1346.61 682.483 L1346.05 682.483 L1345.49 682.483 L1344.93 682.483 L1344.37 682.483 L1343.81 682.483 L1343.25 682.483 L1342.69 682.483 L1342.13 682.483 L1341.57 682.483 L1341.02 682.483 L1340.46 682.483 L1339.9 682.483 L1339.34 682.483 L1338.78 682.483 L1338.22 682.483 L1337.66 682.483 L1337.1 682.483 L1336.54 682.483 L1335.98 682.483 L1335.42 682.483 L1334.86 682.483 L1334.3 682.483 L1333.75 682.483 L1333.19 682.483 L1332.63 682.483 L1332.07 682.483 L1331.51 682.483 L1330.95 682.483 L1330.39 682.483 L1329.83 682.483 L1329.27 682.483 L1328.71 682.483 L1328.15 682.483 L1327.59 682.483 L1327.03 682.483 L1326.47 682.483 L1325.92 682.483 L1325.36 682.483 L1324.8 682.483 L1324.24 682.483 L1323.68 682.483 L1323.12 682.483 L1322.56 682.483 L1322 682.483 L1321.44 682.483 L1320.88 682.483 L1320.32 682.483 L1319.76 682.483 L1319.2 682.483 L1318.65 682.483 L1318.09 682.483 L1317.53 682.483 L1316.97 682.483 L1316.41 682.483 L1315.85 682.483 L1315.29 682.483 L1314.73 682.483 L1314.17 682.483 L1313.61 682.483 L1313.05 682.483 L1312.49 682.483 L1311.93 682.483 L1311.38 682.483 L1310.82 682.483 L1310.26 682.483 L1309.7 682.483 L1309.14 682.483 L1308.58 682.483 L1308.02 682.483 L1307.46 682.483 L1306.9 682.483 L1306.34 682.483 L1305.78 682.483 L1305.22 682.483 L1304.66 682.483 L1304.1 682.483 L1303.55 682.483 L1302.99 682.483 L1302.43 682.483 L1301.87 682.483 L1301.31 682.483 L1300.75 682.483 L1300.19 682.483 L1299.63 682.483 L1299.07 682.483 L1298.51 682.483 L1297.95 682.483 L1297.39 682.483 L1296.83 682.483 L1296.28 682.483 L1295.72 682.483 L1295.16 682.483 L1294.6 682.483 L1294.04 682.483 L1293.48 682.483 L1292.92 682.483 L1292.36 682.483 L1291.8 682.483 L1291.24 682.483 L1290.68 682.483 L1290.12 682.483 L1289.56 682.483 L1289 682.483 L1288.45 682.483 L1287.89 682.483 L1287.33 682.483 L1286.77 682.483 L1286.21 682.483 L1285.65 682.483 L1285.09 682.483 L1284.53 682.483 L1283.97 682.483 L1283.41 682.483 L1282.85 682.483 L1282.29 682.483 L1281.73 682.483 L1281.18 682.483 L1280.62 682.483 L1280.06 682.483 L1279.5 682.483 L1278.94 682.483 L1278.38 682.483 L1277.82 682.483 L1277.26 682.483 L1276.7 682.483 L1276.14 682.483 L1275.58 682.483 L1275.02 682.483 L1274.46 682.483 L1273.91 682.483 L1273.35 682.483 L1272.79 682.483 L1272.23 682.483 L1271.67 682.483 L1271.11 682.483 L1270.55 682.483 L1269.99 682.483 L1269.43 682.483 L1268.87 682.483 L1268.31 682.483 L1267.75 682.483 L1267.19 682.483 L1266.63 682.483 L1266.08 682.483 L1265.52 682.483 L1264.96 682.483 L1264.4 682.483 L1263.84 682.483 L1263.28 682.483 L1262.72 682.483 L1262.16 682.483 L1261.6 682.483 L1261.04 682.483 L1260.48 682.483 L1259.92 682.483 L1259.36 682.483 L1258.81 682.483 L1258.25 682.483 L1257.69 682.483 L1257.13 682.483 L1256.57 682.483 L1256.01 682.483 L1255.45 682.483 L1254.89 682.483 L1254.33 682.483 L1253.77 682.483 L1253.21 682.483 L1252.65 682.483 L1252.09 682.483 L1251.54 682.483 L1250.98 682.483 L1250.42 682.483 L1249.86 682.483 L1249.3 682.483 L1248.74 682.483 L1248.18 682.483 L1247.62 682.483 L1247.06 682.483 L1246.5 682.483 L1245.94 682.483 L1245.38 682.483 L1244.82 682.483 L1244.26 682.483 L1243.71 682.483 L1243.15 682.483 L1242.59 682.483 L1242.03 682.483 L1241.47 682.483 L1240.91 682.483 L1240.35 682.483 L1239.79 682.483 L1239.23 682.483 L1238.67 682.483 L1238.11 682.483 L1237.55 682.483 L1236.99 682.483 L1236.44 682.483 L1235.88 682.483 L1235.32 682.483 L1234.76 682.483 L1234.2 682.483 L1233.64 682.483 L1233.08 682.483 L1232.52 682.483 L1231.96 682.483 L1231.4 682.483 L1230.84 682.483 L1230.28 682.483 L1229.72 682.483 L1229.17 682.483 L1228.61 682.483 L1228.05 682.483 L1227.49 682.483 L1226.93 682.483 L1226.37 682.483 L1225.81 682.483 L1225.25 682.483 L1224.69 682.483 L1224.13 682.483 L1223.57 682.483 L1223.01 682.483 L1222.45 682.483 L1221.89 682.483 L1221.34 682.483 L1220.78 682.483 L1220.22 682.483 L1219.66 682.483 L1219.1 682.483 L1218.54 682.483 L1217.98 682.483 L1217.42 682.483 L1216.86 682.483 L1216.3 682.483 L1215.74 682.483 L1215.18 682.483 L1214.62 682.483 L1214.07 682.483 L1213.51 682.483 L1212.95 682.483 L1212.39 682.483 L1211.83 682.483 L1211.27 682.483 L1210.71 682.483 L1210.15 682.483 L1209.59 682.483 L1209.03 682.483 L1208.47 682.483 L1207.91 682.483 L1207.35 682.483 L1206.8 682.483 L1206.24 682.483 L1205.68 682.483 L1205.12 682.483 L1204.56 682.483 L1204 682.483 L1203.44 682.483 L1202.88 682.483 L1202.32 682.483 L1201.76 682.483 L1201.2 682.483 L1200.64 682.483 L1200.08 682.483 L1199.52 682.483 L1198.97 682.483 L1198.41 682.483 L1197.85 682.483 L1197.29 682.483 L1196.73 682.483 L1196.17 682.483 L1195.61 682.483 L1195.05 682.483 L1194.49 682.483 L1193.93 682.483 L1193.37 682.483 L1192.81 682.483 L1192.25 682.483 L1191.7 682.483 L1191.14 682.483 L1190.58 682.483 L1190.02 682.483 L1189.46 682.483 L1188.9 682.483 L1188.34 682.483 L1187.78 682.483 L1187.22 682.483 L1186.66 682.483 L1186.1 682.483 L1185.54 682.483 L1184.98 682.483 L1184.43 682.483 L1183.87 682.483 L1183.31 682.483 L1182.75 682.483 L1182.19 682.483 L1181.63 682.483 L1181.07 682.483 L1180.51 682.483 L1179.95 682.483 L1179.39 682.483 L1178.83 682.483 L1178.27 682.483 L1177.71 682.483 L1177.15 682.483 L1176.6 682.483 L1176.04 682.483 L1175.48 682.483 L1174.92 682.483 L1174.36 682.483 L1173.8 682.483 L1173.24 682.483 L1172.68 682.483 L1172.12 682.483 L1171.56 682.483 L1171 682.483 L1170.44 682.483 L1169.88 682.483 L1169.33 682.483 L1168.77 682.483 L1168.21 682.483 L1167.65 682.483 L1167.09 682.483 L1166.53 682.483 L1165.97 682.483 L1165.41 682.483 L1164.85 682.483 L1164.29 682.483 L1163.73 682.483 L1163.17 682.483 L1162.61 682.483 L1162.05 682.483 L1161.5 682.483 L1160.94 682.483 L1160.38 682.483 L1159.82 682.483 L1159.26 682.483 L1158.7 682.483 L1158.14 682.483 L1157.58 682.483 L1157.02 682.483 L1156.46 682.483 L1155.9 682.483 L1155.34 682.483 L1154.78 682.483 L1154.23 682.483 L1153.67 682.483 L1153.11 682.483 L1152.55 682.483 L1151.99 682.483 L1151.43 682.483 L1150.87 682.483 L1150.31 682.483 L1149.75 682.483 L1149.19 682.483 L1148.63 682.483 L1148.07 682.483 L1147.51 682.483 L1146.96 682.483 L1146.4 682.483 L1145.84 682.483 L1145.28 682.483 L1144.72 682.483 L1144.16 682.483 L1143.6 682.483 L1143.04 682.483 L1142.48 682.483 L1141.92 682.483 L1141.36 682.483 L1140.8 682.483 L1140.24 682.483 L1139.68 682.483 L1139.13 682.483 L1138.57 682.483 L1138.01 682.483 L1137.45 682.483 L1136.89 682.483 L1136.33 682.483 L1135.77 682.483 L1135.21 682.483 L1134.65 682.483 L1134.09 682.483 L1133.53 682.483 L1132.97 682.483 L1132.41 682.483 L1131.86 682.483 L1131.3 682.483 L1130.74 682.483 L1130.18 682.483 L1129.62 682.483 L1129.06 682.483 L1128.5 682.483 L1127.94 682.483 L1127.38 682.483 L1126.82 682.483 L1126.26 682.483 L1125.7 682.483 L1125.14 682.483 L1124.59 682.483 L1124.03 682.483 L1123.47 682.483 L1122.91 682.483 L1122.35 682.483 L1121.79 682.483 L1121.23 682.483 L1120.67 682.483 L1120.11 682.483 L1119.55 682.483 L1118.99 682.483 L1118.43 682.483 L1117.87 682.483 L1117.31 682.483 L1116.76 682.483 L1116.2 682.483 L1115.64 682.483 L1115.08 682.483 L1114.52 682.483 L1113.96 682.483 L1113.4 682.483 L1112.84 682.483 L1112.28 682.483 L1111.72 682.483 L1111.16 682.483 L1110.6 682.483 L1110.04 682.483 L1109.49 682.483 L1108.93 682.483 L1108.37 682.483 L1107.81 682.483 L1107.25 682.483 L1106.69 682.483 L1106.13 682.483 L1105.57 682.483 L1105.01 682.483 L1104.45 682.483 L1103.89 682.483 L1103.33 682.483 L1102.77 682.483 L1102.22 682.483 L1101.66 682.483 L1101.1 682.483 L1100.54 682.483 L1099.98 682.483 L1099.42 682.483 L1098.86 682.483 L1098.3 682.483 L1097.74 682.483 L1097.18 682.483 L1096.62 682.483 L1096.06 682.483 L1095.5 682.483 L1094.94 682.483 L1094.39 682.483 L1093.83 682.483 L1093.27 682.483 L1092.71 682.483 L1092.15 682.483 L1091.59 682.483 L1091.03 682.483 L1090.47 682.483 L1089.91 682.483 L1089.35 682.483 L1088.79 682.483 L1088.23 682.483 L1087.67 682.483 L1087.12 682.483 L1086.56 682.483 L1086 682.483 L1085.44 682.483 L1084.88 682.483 L1084.32 682.483 L1083.76 682.483 L1083.2 682.483 L1082.64 682.483 L1082.08 682.483 L1081.52 682.483 L1080.96 682.483 L1080.4 682.483 L1079.85 682.483 L1079.29 682.483 L1078.73 682.483 L1078.17 682.483 L1077.61 682.483 L1077.05 682.483 L1076.49 682.483 L1075.93 682.483 L1075.37 682.483 L1074.81 682.483 L1074.25 682.483 L1073.69 682.483 L1073.13 682.483 L1072.57 682.483 L1072.02 682.483 L1071.46 682.483 L1070.9 682.483 L1070.34 682.483 L1069.78 682.483 L1069.22 682.483 L1068.66 682.483 L1068.1 682.483 L1067.54 682.483 L1066.98 682.483 L1066.42 682.483 L1065.86 682.483 L1065.3 682.483 L1064.75 682.483 L1064.19 682.483 L1063.63 682.483 L1063.07 682.483 L1062.51 682.483 L1061.95 682.483 L1061.39 682.483 L1060.83 682.483 L1060.27 682.483 L1059.71 682.483 L1059.15 682.483 L1058.59 682.483 L1058.03 682.483 L1057.48 682.483 L1056.92 682.483 L1056.36 682.483 L1055.8 682.483 L1055.24 682.483 L1054.68 682.483 L1054.12 682.483 L1053.56 682.483 L1053 682.483 L1052.44 682.483 L1051.88 682.483 L1051.32 682.483 L1050.76 682.483 L1050.2 682.483 L1049.65 682.483 L1049.09 682.483 L1048.53 682.483 L1047.97 682.483 L1047.41 682.483 L1046.85 682.483 L1046.29 682.483 L1045.73 682.483 L1045.17 682.483 L1044.61 682.483 L1044.05 682.483 L1043.49 682.483 L1042.93 682.483 L1042.38 682.483 L1041.82 682.483 L1041.26 682.483 L1040.7 682.483 L1040.14 682.483 L1039.58 682.483 L1039.02 682.483 L1038.46 682.483 L1037.9 682.483 L1037.34 682.483 L1036.78 682.483 L1036.22 682.483 L1035.66 682.483 L1035.1 682.483 L1034.55 682.483 L1033.99 682.483 L1033.43 682.483 L1032.87 682.483 L1032.31 682.483 L1031.75 682.483 L1031.19 682.483 L1030.63 682.483 L1030.07 682.483 L1029.51 682.483 L1028.95 682.483 L1028.39 682.483 L1027.83 682.483 L1027.28 682.483 L1026.72 682.483 L1026.16 682.483 L1025.6 682.483 L1025.04 682.483 L1024.48 682.483 L1023.92 682.483 L1023.36 682.483 L1022.8 682.483 L1022.24 682.483 L1021.68 682.483 L1021.12 682.483 L1020.56 682.483 L1020.01 682.483 L1019.45 682.483 L1018.89 682.483 L1018.33 682.483 L1017.77 682.483 L1017.21 682.483 L1016.65 682.483 L1016.09 682.483 L1015.53 682.483 L1014.97 682.483 L1014.41 682.483 L1013.85 682.483 L1013.29 682.483 L1012.73 682.483 L1012.18 682.483 L1011.62 682.483 L1011.06 682.483 L1010.5 682.483 L1009.94 682.483 L1009.38 682.483 L1008.82 682.483 L1008.26 682.483 L1007.7 682.483 L1007.14 682.483 L1006.58 682.483 L1006.02 682.483 L1005.46 682.483 L1004.91 682.483 L1004.35 682.483 L1003.79 682.483 L1003.23 682.483 L1002.67 682.483 L1002.11 682.483 L1001.55 682.483 L1000.99 682.483 L1000.43 682.483 L999.872 682.483 L999.313 682.483 L998.754 682.483 L998.194 682.483 L997.635 682.483 L997.076 682.483 L996.517 682.483 L995.957 682.483 L995.398 682.483 L994.839 682.483 L994.28 682.483 L993.72 682.483 L993.161 682.483 L992.602 682.483 L992.043 682.483 L991.483 682.483 L990.924 682.483 L990.365 682.483 L989.806 682.483 L989.246 682.483 L988.687 682.483 L988.128 682.483 L987.569 682.483 L987.009 682.483 L986.45 682.483 L985.891 682.483 L985.332 682.483 L984.772 682.483 L984.213 682.483 L983.654 682.483 L983.095 682.483 L982.535 682.483 L981.976 682.483 L981.417 682.483 L980.858 682.483 L980.298 682.483 L979.739 682.483 L979.18 682.483 L978.621 682.483 L978.061 682.483 L977.502 682.483 L976.943 682.483 L976.384 682.483 L975.824 682.483 L975.265 682.483 L974.706 682.483 L974.147 682.483 L973.587 682.483 L973.028 682.483 L972.469 682.483 L971.91 682.483 L971.35 682.483 L970.791 682.483 L970.232 682.483 L969.673 682.483 L969.113 682.483 L968.554 682.483 L967.995 682.483 L967.436 682.483 L966.876 682.483 L966.317 682.483 L965.758 682.483 L965.199 682.483 L964.639 682.483 L964.08 682.483 L963.521 682.483 L962.962 682.483 L962.402 682.483 L961.843 682.483 L961.284 682.483 L960.725 682.483 L960.165 682.483 L959.606 682.483 L959.047 682.483 L958.488 682.483 L957.928 682.483 L957.369 682.483 L956.81 682.483 L956.251 682.483 L955.691 682.483 L955.132 682.483 L954.573 682.483 L954.014 682.483 L953.454 682.483 L952.895 682.483 L952.336 682.483 L951.777 682.483 L951.217 682.483 L950.658 682.483 L950.099 682.483 L949.54 682.483 L948.98 682.483 L948.421 682.483 L947.862 682.483 L947.303 682.483 L946.743 682.483 L946.184 682.483 L945.625 682.483 L945.066 682.483 L944.506 682.483 L943.947 682.483 L943.388 682.483 L942.829 682.483 L942.269 682.483 L941.71 682.483 L941.151 682.483 L940.592 682.483 L940.032 682.483 L939.473 682.483 L938.914 682.483 L938.355 682.483 L937.795 682.483 L937.236 682.483 L936.677 682.483 L936.118 682.483 L935.558 682.483 L934.999 682.483 L934.44 682.483 L933.881 682.483 L933.321 682.483 L932.762 682.483 L932.203 682.483 L931.644 682.483 L931.084 682.483 L930.525 682.483 L929.966 682.483 L929.406 682.483 L928.847 682.483 L928.288 682.483 L927.729 682.483 L927.169 682.483 L926.61 682.483 L926.051 682.483 L925.492 682.483 L924.932 682.483 L924.373 682.483 L923.814 682.483 L923.255 682.483 L922.695 682.483 L922.136 682.483 L921.577 682.483 L921.018 682.483 L920.458 682.483 L919.899 682.483 L919.34 682.483 L918.781 682.483 L918.221 682.483 L917.662 682.483 L917.103 682.483 L916.544 682.483 L915.984 682.483 L915.425 682.483 L914.866 682.483 L914.307 682.483 L913.747 682.483 L913.188 682.483 L912.629 682.483 L912.07 682.483 L911.51 682.483 L910.951 682.483 L910.392 682.483 L909.833 682.483 L909.273 682.483 L908.714 682.483 L908.155 682.483 L907.596 682.483 L907.036 682.483 L906.477 682.483 L905.918 682.483 L905.359 682.483 L904.799 682.483 L904.24 682.483 L903.681 682.483 L903.122 682.483 L902.562 682.483 L902.003 682.483 L901.444 682.483 L900.885 682.483 L900.325 682.483 L899.766 682.483 L899.207 682.483 L898.648 682.483 L898.088 682.483 L897.529 682.483 L896.97 682.483 L896.411 682.483 L895.851 682.483 L895.292 682.483 L894.733 682.483 L894.174 682.483 L893.614 682.483 L893.055 682.483 L892.496 682.483 L891.937 682.483 L891.377 682.483 L890.818 682.483 L890.259 682.483 L889.7 682.483 L889.14 682.483 L888.581 682.483 L888.022 682.483 L887.463 682.483 L886.903 682.483 L886.344 682.483 L885.785 682.483 L885.226 682.483 L884.666 682.483 L884.107 682.483 L883.548 682.483 L882.989 682.483 L882.429 682.483 L881.87 682.483 L881.311 682.483 L880.752 682.483 L880.192 682.483 L879.633 682.483 L879.074 682.483 L878.515 682.483 L877.955 682.483 L877.396 682.483 L876.837 682.483 L876.278 682.483 L875.718 682.483 L875.159 682.483 L874.6 682.483 L874.041 682.483 L873.481 682.483 L872.922 682.483 L872.363 682.483 L871.804 682.483 L871.244 682.483 L870.685 682.483 L870.126 682.483 L869.567 682.483 L869.007 682.483 L868.448 682.483 L867.889 682.483 L867.33 682.483 L866.77 682.483 L866.211 682.483 L865.652 682.483 L865.093 682.483 L864.533 682.483 L863.974 682.483 L863.415 682.483 L862.856 682.483 L862.296 682.483 L861.737 682.483 L861.178 682.483 L860.619 682.483 L860.059 682.483 L859.5 682.483 L858.941 682.483 L858.382 682.483 L857.822 682.483 L857.263 682.483 L856.704 682.483 L856.145 682.483 L855.585 682.483 L855.026 682.483 L854.467 682.483 L853.908 682.483 L853.348 682.483 L852.789 682.483 L852.23 682.483 L851.671 682.483 L851.111 682.483 L850.552 682.483 L849.993 682.483 L849.434 682.483 L848.874 682.483 L848.315 682.483 L847.756 682.483 L847.197 682.483 L846.637 682.483 L846.078 682.483 L845.519 682.483 L844.96 682.483 L844.4 682.483 L843.841 682.483 L843.282 682.483 L842.723 682.483 L842.163 682.483 L841.604 682.483 L841.045 682.483 L840.486 682.483 L839.926 682.483 L839.367 682.483 L838.808 682.483 L838.249 682.483 L837.689 682.483 L837.13 682.483 L836.571 682.483 L836.012 682.483 L835.452 682.483 L834.893 682.483 L834.334 682.483 L833.775 682.483 L833.215 682.483 L832.656 682.483 L832.097 682.483 L831.538 682.483 L830.978 682.483 L830.419 682.483 L829.86 682.483 L829.301 682.483 L828.741 682.483 L828.182 682.483 L827.623 682.483 L827.064 682.483 L826.504 682.483 L825.945 682.483 L825.386 682.483 L824.827 682.483 L824.267 682.483 L823.708 682.483 L823.149 682.483 L822.59 682.483 L822.03 682.483 L821.471 682.483 L820.912 682.483 L820.353 682.483 L819.793 682.483 L819.234 682.483 L818.675 682.483 L818.116 682.483 L817.556 682.483 L816.997 682.483 L816.438 682.483 L815.879 682.483 L815.319 682.483 L814.76 682.483 L814.201 682.483 L813.642 682.483 L813.082 682.483 L812.523 682.483 L811.964 682.483 L811.405 682.483 L810.845 682.483 L810.286 682.483 L809.727 682.483 L809.168 682.483 L808.608 682.483 L808.049 682.483 L807.49 682.483 L806.931 682.483 L806.371 682.483 L805.812 682.483 L805.253 682.483 L804.693 682.483 L804.134 682.483 L803.575 682.483 L803.016 682.483 L802.456 682.483 L801.897 682.483 L801.338 682.483 L800.779 682.483 L800.219 682.483 L799.66 682.483 L799.101 682.483 L798.542 682.483 L797.982 682.483 L797.423 682.483 L796.864 682.483 L796.305 682.483 L795.745 682.483 L795.186 682.483 L794.627 682.483 L794.068 682.483 L793.508 682.483 L792.949 682.483 L792.39 682.483 L791.831 682.483 L791.271 682.483 L790.712 682.483 L790.153 682.483 L789.594 682.483 L789.034 682.483 L788.475 682.483 L787.916 682.483 L787.357 682.483 L786.797 682.483 L786.238 682.483 L785.679 682.483 L785.12 682.483 L784.56 682.483 L784.001 682.483 L783.442 682.483 L782.883 682.483 L782.323 682.483 L781.764 682.483 L781.205 682.483 L780.646 682.483 L780.086 682.483 L779.527 682.483 L778.968 682.483 L778.409 682.483 L777.849 682.483 L777.29 682.483 L776.731 682.483 L776.172 682.483 L775.612 682.483 L775.053 682.483 L774.494 682.483 L773.935 682.483 L773.375 682.483 L772.816 682.483 L772.257 682.483 L771.698 682.483 L771.138 682.483 L770.579 682.483 L770.02 682.483 L769.461 682.483 L768.901 682.483 L768.342 682.483 L767.783 682.483 L767.224 682.483 L766.664 682.483 L766.105 682.483 L765.546 682.483 L764.987 682.483 L764.427 682.483 L763.868 682.483 L763.309 682.483 L762.75 682.483 L762.19 682.483 L761.631 682.483 L761.072 682.483 L760.513 682.483 L759.953 682.483 L759.394 682.483 L758.835 682.483 L758.276 682.483 L757.716 682.483 L757.157 682.483 L756.598 682.483 L756.039 682.483 L755.479 682.483 L754.92 682.483 L754.361 682.483 L753.802 682.483 L753.242 682.483 L752.683 682.483 L752.124 682.483 L751.565 682.483 L751.005 682.483 L750.446 682.483 L749.887 682.483 L749.328 682.483 L748.768 682.483 L748.209 682.483 L747.65 682.483 L747.091 682.483 L746.531 682.483 L745.972 682.483 L745.413 682.483 L744.854 682.483 L744.294 682.483 L743.735 682.483 L743.176 682.483 L742.617 682.483 L742.057 682.483 L741.498 682.483 L740.939 682.483 L740.38 682.483 L739.82 682.483 L739.261 682.483 L738.702 682.483 L738.143 682.483 L737.583 682.483 L737.024 682.483 L736.465 682.483 L735.906 682.483 L735.346 682.483 L734.787 682.483 L734.228 682.483 L733.669 682.483 L733.109 682.483 L732.55 682.483 L731.991 682.483 L731.432 682.483 L730.872 682.483 L730.313 682.483 L729.754 682.483 L729.195 682.483 L728.635 682.483 L728.076 682.483 L727.517 682.483 L726.958 682.483 L726.398 682.483 L725.839 682.483 L725.28 682.483 L724.721 682.483 L724.161 682.483 L723.602 682.483 L723.043 682.483 L722.484 682.483 L721.924 682.483 L721.365 682.483 L720.806 682.483 L720.247 682.483  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip803)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.79 720.806,683.79 721.365,683.79 721.924,683.79 722.484,683.79 723.043,683.79 723.602,683.79 724.161,683.79 724.721,683.79 725.28,683.79 725.839,683.79 726.398,683.79 726.958,683.79 727.517,683.79 728.076,683.79 728.635,683.79 729.195,683.79 729.754,683.79 730.313,683.79 730.872,683.79 731.432,683.79 731.991,683.79 732.55,683.79 733.109,683.79 733.669,683.79 734.228,683.79 734.787,683.79 735.346,683.79 735.906,683.79 736.465,683.79 737.024,683.79 737.583,683.79 738.143,683.79 738.702,683.79 739.261,683.79 739.82,683.79 740.38,683.79 740.939,683.79 741.498,683.79 742.057,683.79 742.617,683.79 743.176,683.79 743.735,683.79 744.294,683.79 744.854,683.79 745.413,683.79 745.972,683.79 746.531,683.79 747.091,683.79 747.65,683.79 748.209,683.79 748.768,683.79 749.328,683.79 749.887,683.79 750.446,683.79 751.005,683.79 751.565,683.79 752.124,683.79 752.683,683.79 753.242,683.79 753.802,683.79 754.361,683.79 754.92,683.79 755.479,683.79 756.039,683.79 756.598,683.79 757.157,683.79 757.716,683.79 758.276,683.79 758.835,683.79 759.394,683.79 759.953,683.79 760.513,683.79 761.072,683.79 761.631,683.79 762.19,683.79 762.75,683.79 763.309,683.79 763.868,683.79 764.427,683.79 764.987,683.79 765.546,683.79 766.105,683.79 766.664,683.79 767.224,683.79 767.783,683.79 768.342,683.79 768.901,683.79 769.461,683.79 770.02,683.79 770.579,683.79 771.138,683.79 771.698,683.79 772.257,683.79 772.816,683.79 773.375,683.79 773.935,683.79 774.494,683.79 775.053,683.79 775.612,683.79 776.172,683.79 776.731,683.79 777.29,683.79 777.849,683.79 778.409,683.79 778.968,683.79 779.527,683.79 780.086,683.79 780.646,683.79 781.205,683.79 781.764,683.79 782.323,683.79 782.883,683.79 783.442,683.79 784.001,683.79 784.56,683.79 785.12,683.79 785.679,683.79 786.238,683.79 786.797,683.79 787.357,683.79 787.916,683.79 788.475,683.79 789.034,683.79 789.594,683.79 790.153,683.79 790.712,683.79 791.271,683.79 791.831,683.79 792.39,683.79 792.949,683.79 793.508,683.79 794.068,683.79 794.627,683.79 795.186,683.79 795.745,683.79 796.305,683.79 796.864,683.79 797.423,683.79 797.982,683.79 798.542,683.79 799.101,683.79 799.66,683.79 800.219,683.79 800.779,683.79 801.338,683.79 801.897,683.79 802.456,683.79 803.016,683.79 803.575,683.79 804.134,683.79 804.693,683.79 805.253,683.79 805.812,683.79 806.371,683.79 806.931,683.79 807.49,683.79 808.049,683.79 808.608,683.79 809.168,683.79 809.727,683.79 810.286,683.79 810.845,683.79 811.405,683.79 811.964,683.79 812.523,683.79 813.082,683.79 813.642,683.79 814.201,683.79 814.76,683.79 815.319,683.79 815.879,683.79 816.438,683.79 816.997,683.79 817.556,683.79 818.116,683.79 818.675,683.79 819.234,683.79 819.793,683.79 820.353,683.79 820.912,683.79 821.471,683.79 822.03,683.79 822.59,683.79 823.149,683.79 823.708,683.79 824.267,683.79 824.827,683.79 825.386,683.79 825.945,683.79 826.504,683.79 827.064,683.79 827.623,683.79 828.182,683.79 828.741,683.79 829.301,683.79 829.86,683.79 830.419,683.79 830.978,683.79 831.538,683.79 832.097,683.79 832.656,683.79 833.215,683.79 833.775,683.79 834.334,683.79 834.893,683.79 835.452,683.79 836.012,683.79 836.571,683.79 837.13,683.79 837.689,683.79 838.249,683.79 838.808,683.79 839.367,683.79 839.926,683.79 840.486,683.79 841.045,683.79 841.604,683.79 842.163,683.79 842.723,683.79 843.282,683.79 843.841,683.79 844.4,683.79 844.96,683.79 845.519,683.79 846.078,683.79 846.637,683.79 847.197,683.79 847.756,683.79 848.315,683.79 848.874,683.79 849.434,683.79 849.993,683.79 850.552,683.79 851.111,683.79 851.671,683.79 852.23,683.79 852.789,683.79 853.348,683.79 853.908,683.79 854.467,683.79 855.026,683.79 855.585,683.79 856.145,683.79 856.704,683.79 857.263,683.79 857.822,683.79 858.382,683.79 858.941,683.79 859.5,683.79 860.059,683.79 860.619,683.79 861.178,683.79 861.737,683.79 862.296,683.79 862.856,683.79 863.415,683.79 863.974,683.79 864.533,683.79 865.093,683.79 865.652,683.79 866.211,683.79 866.77,683.79 867.33,683.79 867.889,683.79 868.448,683.79 869.007,683.79 869.567,683.79 870.126,683.79 870.685,683.79 871.244,683.79 871.804,683.79 872.363,683.79 872.922,683.79 873.481,683.79 874.041,683.79 874.6,683.79 875.159,683.79 875.718,683.79 876.278,683.79 876.837,683.79 877.396,683.79 877.955,683.79 878.515,683.79 879.074,683.79 879.633,683.79 880.192,683.79 880.752,683.79 881.311,683.79 881.87,683.79 882.429,683.79 882.989,683.79 883.548,683.79 884.107,683.79 884.666,683.79 885.226,683.79 885.785,683.79 886.344,683.79 886.903,683.79 887.463,683.79 888.022,683.79 888.581,683.79 889.14,683.79 889.7,683.79 890.259,683.79 890.818,683.79 891.377,683.79 891.937,683.79 892.496,683.79 893.055,683.79 893.614,683.79 894.174,683.79 894.733,683.79 895.292,683.79 895.851,683.79 896.411,683.79 896.97,683.79 897.529,683.79 898.088,683.79 898.648,683.79 899.207,683.79 899.766,683.79 900.325,683.79 900.885,683.79 901.444,683.79 902.003,683.79 902.562,683.79 903.122,683.79 903.681,683.79 904.24,683.79 904.799,683.79 905.359,683.79 905.918,683.79 906.477,683.79 907.036,683.79 907.596,683.79 908.155,683.79 908.714,683.79 909.273,683.79 909.833,683.79 910.392,683.79 910.951,683.79 911.51,683.79 912.07,683.79 912.629,683.79 913.188,683.79 913.747,683.79 914.307,683.79 914.866,683.79 915.425,683.79 915.984,683.79 916.544,683.79 917.103,683.79 917.662,683.79 918.221,683.79 918.781,683.79 919.34,683.79 919.899,683.79 920.458,683.79 921.018,683.79 921.577,683.79 922.136,683.79 922.695,683.79 923.255,683.79 923.814,683.79 924.373,683.79 924.932,683.79 925.492,683.79 926.051,683.79 926.61,683.79 927.169,683.79 927.729,683.79 928.288,683.79 928.847,683.79 929.406,683.79 929.966,683.79 930.525,683.79 931.084,683.79 931.644,683.79 932.203,683.79 932.762,683.79 933.321,683.79 933.881,683.79 934.44,683.79 934.999,683.79 935.558,683.79 936.118,683.79 936.677,683.79 937.236,683.79 937.795,683.79 938.355,683.79 938.914,683.79 939.473,683.79 940.032,683.79 940.592,683.79 941.151,683.79 941.71,683.79 942.269,683.79 942.829,683.79 943.388,683.79 943.947,683.79 944.506,683.79 945.066,683.79 945.625,683.79 946.184,683.79 946.743,683.79 947.303,683.79 947.862,683.79 948.421,683.79 948.98,683.79 949.54,683.79 950.099,683.79 950.658,683.79 951.217,683.79 951.777,683.79 952.336,683.79 952.895,683.79 953.454,683.79 954.014,683.79 954.573,683.79 955.132,683.79 955.691,683.79 956.251,683.79 956.81,683.79 957.369,683.79 957.928,683.79 958.488,683.79 959.047,683.79 959.606,683.79 960.165,683.79 960.725,683.79 961.284,683.79 961.843,683.79 962.402,683.79 962.962,683.79 963.521,683.79 964.08,683.79 964.639,683.79 965.199,683.79 965.758,683.79 966.317,683.79 966.876,683.79 967.436,683.79 967.995,683.79 968.554,683.79 969.113,683.79 969.673,683.79 970.232,683.79 970.791,683.79 971.35,683.79 971.91,683.79 972.469,683.79 973.028,683.79 973.587,683.79 974.147,683.79 974.706,683.79 975.265,683.79 975.824,683.79 976.384,683.79 976.943,683.79 977.502,683.79 978.061,683.79 978.621,683.79 979.18,683.79 979.739,683.79 980.298,683.79 980.858,683.79 981.417,683.79 981.976,683.79 982.535,683.79 983.095,683.79 983.654,683.79 984.213,683.79 984.772,683.79 985.332,683.79 985.891,683.79 986.45,683.79 987.009,683.79 987.569,683.79 988.128,683.79 988.687,683.79 989.246,683.79 989.806,683.79 990.365,683.79 990.924,683.79 991.483,683.79 992.043,683.79 992.602,683.79 993.161,683.79 993.72,683.79 994.28,683.79 994.839,683.79 995.398,683.79 995.957,683.79 996.517,683.79 997.076,683.79 997.635,683.79 998.194,683.79 998.754,683.79 999.313,683.79 999.872,683.79 1000.43,683.79 1000.99,683.79 1001.55,683.79 1002.11,683.79 1002.67,683.79 1003.23,683.79 1003.79,683.79 1004.35,683.79 1004.91,683.79 1005.46,683.79 1006.02,683.79 1006.58,683.79 1007.14,683.79 1007.7,683.79 1008.26,683.79 1008.82,683.79 1009.38,683.79 1009.94,683.79 1010.5,683.79 1011.06,683.79 1011.62,683.79 1012.18,683.79 1012.73,683.79 1013.29,683.79 1013.85,683.79 1014.41,683.79 1014.97,683.79 1015.53,683.79 1016.09,683.79 1016.65,683.79 1017.21,683.79 1017.77,683.79 1018.33,683.79 1018.89,683.79 1019.45,683.79 1020.01,683.79 1020.56,683.79 1021.12,683.79 1021.68,683.79 1022.24,683.79 1022.8,683.79 1023.36,683.79 1023.92,683.79 1024.48,683.79 1025.04,683.79 1025.6,683.79 1026.16,683.79 1026.72,683.79 1027.28,683.79 1027.83,683.79 1028.39,683.79 1028.95,683.79 1029.51,683.79 1030.07,683.79 1030.63,683.79 1031.19,683.79 1031.75,683.79 1032.31,683.79 1032.87,683.79 1033.43,683.79 1033.99,683.79 1034.55,683.79 1035.1,683.79 1035.66,683.79 1036.22,683.79 1036.78,683.79 1037.34,683.79 1037.9,683.79 1038.46,683.79 1039.02,683.79 1039.58,683.79 1040.14,683.79 1040.7,683.79 1041.26,683.79 1041.82,683.79 1042.38,683.79 1042.93,683.79 1043.49,683.79 1044.05,683.79 1044.61,683.79 1045.17,683.79 1045.73,683.79 1046.29,683.79 1046.85,683.79 1047.41,683.79 1047.97,683.79 1048.53,683.79 1049.09,683.79 1049.65,683.79 1050.2,683.79 1050.76,683.79 1051.32,683.79 1051.88,683.79 1052.44,683.79 1053,683.79 1053.56,683.79 1054.12,683.79 1054.68,683.79 1055.24,683.79 1055.8,683.79 1056.36,683.79 1056.92,683.79 1057.48,683.79 1058.03,683.79 1058.59,683.79 1059.15,683.79 1059.71,683.79 1060.27,683.79 1060.83,683.79 1061.39,683.79 1061.95,683.79 1062.51,683.79 1063.07,683.79 1063.63,683.79 1064.19,683.79 1064.75,683.79 1065.3,683.79 1065.86,683.79 1066.42,683.79 1066.98,683.79 1067.54,683.79 1068.1,683.79 1068.66,683.79 1069.22,683.79 1069.78,683.79 1070.34,683.79 1070.9,683.79 1071.46,683.79 1072.02,683.79 1072.57,683.79 1073.13,683.79 1073.69,683.79 1074.25,683.79 1074.81,683.79 1075.37,683.79 1075.93,683.79 1076.49,683.79 1077.05,683.79 1077.61,683.79 1078.17,683.79 1078.73,683.79 1079.29,683.79 1079.85,683.79 1080.4,683.79 1080.96,683.79 1081.52,683.79 1082.08,683.79 1082.64,683.79 1083.2,683.79 1083.76,683.79 1084.32,683.79 1084.88,683.79 1085.44,683.79 1086,683.79 1086.56,683.79 1087.12,683.79 1087.67,683.79 1088.23,683.79 1088.79,683.79 1089.35,683.79 1089.91,683.79 1090.47,683.79 1091.03,683.79 1091.59,683.79 1092.15,683.79 1092.71,683.79 1093.27,683.79 1093.83,683.79 1094.39,683.79 1094.94,683.79 1095.5,683.79 1096.06,683.79 1096.62,683.79 1097.18,683.79 1097.74,683.79 1098.3,683.79 1098.86,683.79 1099.42,683.79 1099.98,683.79 1100.54,683.79 1101.1,683.79 1101.66,683.79 1102.22,683.79 1102.77,683.79 1103.33,683.79 1103.89,683.79 1104.45,683.79 1105.01,683.79 1105.57,683.79 1106.13,683.79 1106.69,683.79 1107.25,683.79 1107.81,683.79 1108.37,683.79 1108.93,683.79 1109.49,683.79 1110.04,683.79 1110.6,683.79 1111.16,683.79 1111.72,683.79 1112.28,683.79 1112.84,683.79 1113.4,683.79 1113.96,683.79 1114.52,683.79 1115.08,683.79 1115.64,683.79 1116.2,683.79 1116.76,683.79 1117.31,683.79 1117.87,683.79 1118.43,683.79 1118.99,683.79 1119.55,683.79 1120.11,683.79 1120.67,683.79 1121.23,683.79 1121.79,683.79 1122.35,683.79 1122.91,683.79 1123.47,683.79 1124.03,683.79 1124.59,683.79 1125.14,683.79 1125.7,683.79 1126.26,683.79 1126.82,683.79 1127.38,683.79 1127.94,683.79 1128.5,683.79 1129.06,683.79 1129.62,683.79 1130.18,683.79 1130.74,683.79 1131.3,683.79 1131.86,683.79 1132.41,683.79 1132.97,683.79 1133.53,683.79 1134.09,683.79 1134.65,683.79 1135.21,683.79 1135.77,683.79 1136.33,683.79 1136.89,683.79 1137.45,683.79 1138.01,683.79 1138.57,683.79 1139.13,683.79 1139.68,683.79 1140.24,683.79 1140.8,683.79 1141.36,683.79 1141.92,683.79 1142.48,683.79 1143.04,683.79 1143.6,683.79 1144.16,683.79 1144.72,683.79 1145.28,683.79 1145.84,683.79 1146.4,683.79 1146.96,683.79 1147.51,683.79 1148.07,683.79 1148.63,683.79 1149.19,683.79 1149.75,683.79 1150.31,683.79 1150.87,683.79 1151.43,683.79 1151.99,683.79 1152.55,683.79 1153.11,683.79 1153.67,683.79 1154.23,683.79 1154.78,683.79 1155.34,683.79 1155.9,683.79 1156.46,683.79 1157.02,683.79 1157.58,683.79 1158.14,683.79 1158.7,683.79 1159.26,683.79 1159.82,683.79 1160.38,683.79 1160.94,683.79 1161.5,683.79 1162.05,683.79 1162.61,683.79 1163.17,683.79 1163.73,683.79 1164.29,683.79 1164.85,683.79 1165.41,683.79 1165.97,683.79 1166.53,683.79 1167.09,683.79 1167.65,683.79 1168.21,683.79 1168.77,683.79 1169.33,683.79 1169.88,683.79 1170.44,683.79 1171,683.79 1171.56,683.79 1172.12,683.79 1172.68,683.79 1173.24,683.79 1173.8,683.79 1174.36,683.79 1174.92,683.79 1175.48,683.79 1176.04,683.79 1176.6,683.79 1177.15,683.79 1177.71,683.79 1178.27,683.79 1178.83,683.79 1179.39,683.79 1179.95,683.79 1180.51,683.79 1181.07,683.79 1181.63,683.79 1182.19,683.79 1182.75,683.79 1183.31,683.79 1183.87,683.79 1184.43,683.79 1184.98,683.79 1185.54,683.79 1186.1,683.79 1186.66,683.79 1187.22,683.79 1187.78,683.79 1188.34,683.79 1188.9,683.79 1189.46,683.79 1190.02,683.79 1190.58,683.79 1191.14,683.79 1191.7,683.79 1192.25,683.79 1192.81,683.79 1193.37,683.79 1193.93,683.79 1194.49,683.79 1195.05,683.79 1195.61,683.79 1196.17,683.79 1196.73,683.79 1197.29,683.79 1197.85,683.79 1198.41,683.79 1198.97,683.79 1199.52,683.79 1200.08,683.79 1200.64,683.79 1201.2,683.79 1201.76,683.79 1202.32,683.79 1202.88,683.79 1203.44,683.79 1204,683.79 1204.56,683.79 1205.12,683.79 1205.68,683.79 1206.24,683.79 1206.8,683.79 1207.35,683.79 1207.91,683.79 1208.47,683.79 1209.03,683.79 1209.59,683.79 1210.15,683.79 1210.71,683.79 1211.27,683.79 1211.83,683.79 1212.39,683.79 1212.95,683.79 1213.51,683.79 1214.07,683.79 1214.62,683.79 1215.18,683.79 1215.74,683.79 1216.3,683.79 1216.86,683.79 1217.42,683.79 1217.98,683.79 1218.54,683.79 1219.1,683.79 1219.66,683.79 1220.22,683.79 1220.78,683.79 1221.34,683.79 1221.89,683.79 1222.45,683.79 1223.01,683.79 1223.57,683.79 1224.13,683.79 1224.69,683.79 1225.25,683.79 1225.81,683.79 1226.37,683.79 1226.93,683.79 1227.49,683.79 1228.05,683.79 1228.61,683.79 1229.17,683.79 1229.72,683.79 1230.28,683.79 1230.84,683.79 1231.4,683.79 1231.96,683.79 1232.52,683.79 1233.08,683.79 1233.64,683.79 1234.2,683.79 1234.76,683.79 1235.32,683.79 1235.88,683.79 1236.44,683.79 1236.99,683.79 1237.55,683.79 1238.11,683.79 1238.67,683.79 1239.23,683.79 1239.79,683.79 1240.35,683.79 1240.91,683.79 1241.47,683.79 1242.03,683.79 1242.59,683.79 1243.15,683.79 1243.71,683.79 1244.26,683.79 1244.82,683.79 1245.38,683.79 1245.94,683.79 1246.5,683.79 1247.06,683.79 1247.62,683.79 1248.18,683.79 1248.74,683.79 1249.3,683.79 1249.86,683.79 1250.42,683.79 1250.98,683.79 1251.54,683.79 1252.09,683.79 1252.65,683.79 1253.21,683.79 1253.77,683.79 1254.33,683.79 1254.89,683.79 1255.45,683.79 1256.01,683.79 1256.57,683.79 1257.13,683.79 1257.69,683.79 1258.25,683.79 1258.81,683.79 1259.36,683.79 1259.92,683.79 1260.48,683.79 1261.04,683.79 1261.6,683.79 1262.16,683.79 1262.72,683.79 1263.28,683.79 1263.84,683.79 1264.4,683.79 1264.96,683.79 1265.52,683.79 1266.08,683.79 1266.63,683.79 1267.19,683.79 1267.75,683.79 1268.31,683.79 1268.87,683.79 1269.43,683.79 1269.99,683.79 1270.55,683.79 1271.11,683.79 1271.67,683.79 1272.23,683.79 1272.79,683.79 1273.35,683.79 1273.91,683.79 1274.46,683.79 1275.02,683.79 1275.58,683.79 1276.14,683.79 1276.7,683.79 1277.26,683.79 1277.82,683.79 1278.38,683.79 1278.94,683.79 1279.5,683.79 1280.06,683.79 1280.62,683.79 1281.18,683.79 1281.73,683.79 1282.29,683.79 1282.85,683.79 1283.41,683.79 1283.97,683.79 1284.53,683.79 1285.09,683.79 1285.65,683.79 1286.21,683.79 1286.77,683.79 1287.33,683.79 1287.89,683.79 1288.45,683.79 1289,683.79 1289.56,683.79 1290.12,683.79 1290.68,683.79 1291.24,683.79 1291.8,683.79 1292.36,683.79 1292.92,683.79 1293.48,683.79 1294.04,683.79 1294.6,683.79 1295.16,683.79 1295.72,683.79 1296.28,683.79 1296.83,683.79 1297.39,683.79 1297.95,683.79 1298.51,683.79 1299.07,683.79 1299.63,683.79 1300.19,683.79 1300.75,683.79 1301.31,683.79 1301.87,683.79 1302.43,683.79 1302.99,683.79 1303.55,683.79 1304.1,683.79 1304.66,683.79 1305.22,683.79 1305.78,683.79 1306.34,683.79 1306.9,683.79 1307.46,683.79 1308.02,683.79 1308.58,683.79 1309.14,683.79 1309.7,683.79 1310.26,683.79 1310.82,683.79 1311.38,683.79 1311.93,683.79 1312.49,683.79 1313.05,683.79 1313.61,683.79 1314.17,683.79 1314.73,683.79 1315.29,683.79 1315.85,683.79 1316.41,683.79 1316.97,683.79 1317.53,683.79 1318.09,683.79 1318.65,683.79 1319.2,683.79 1319.76,683.79 1320.32,683.79 1320.88,683.79 1321.44,683.79 1322,683.79 1322.56,683.79 1323.12,683.79 1323.68,683.79 1324.24,683.79 1324.8,683.79 1325.36,683.79 1325.92,683.79 1326.47,683.79 1327.03,683.79 1327.59,683.79 1328.15,683.79 1328.71,683.79 1329.27,683.79 1329.83,683.79 1330.39,683.79 1330.95,683.79 1331.51,683.79 1332.07,683.79 1332.63,683.79 1333.19,683.79 1333.75,683.79 1334.3,683.79 1334.86,683.79 1335.42,683.79 1335.98,683.79 1336.54,683.79 1337.1,683.79 1337.66,683.79 1338.22,683.79 1338.78,683.79 1339.34,683.79 1339.9,683.79 1340.46,683.79 1341.02,683.79 1341.57,683.79 1342.13,683.79 1342.69,683.79 1343.25,683.79 1343.81,683.79 1344.37,683.79 1344.93,683.79 1345.49,683.79 1346.05,683.79 1346.61,683.79 1347.17,683.79 1347.73,683.79 1348.29,683.79 1348.84,683.79 1349.4,683.79 1349.96,683.79 1350.52,683.79 1351.08,683.79 1351.64,683.79 1352.2,683.79 1352.76,683.79 1353.32,683.79 1353.88,683.79 1354.44,683.79 1355,683.79 1355.56,683.79 1356.12,683.79 1356.67,683.79 1357.23,683.79 1357.79,683.79 1358.35,683.79 1358.91,683.79 1359.47,683.79 1360.03,683.79 1360.59,683.79 1361.15,683.79 1361.71,683.79 1362.27,683.79 1362.83,683.79 1363.39,683.79 1363.94,683.79 1364.5,683.79 1365.06,683.79 1365.62,683.79 1366.18,683.79 1366.74,683.79 1367.3,683.79 1367.86,683.79 1368.42,683.79 1368.98,683.79 1369.54,683.79 1370.1,683.79 1370.66,683.79 1371.21,683.79 1371.77,683.79 1372.33,683.79 1372.89,683.79 1373.45,683.79 1374.01,683.79 1374.57,683.79 1375.13,683.79 1375.69,683.79 1376.25,683.79 1376.81,683.79 1377.37,683.79 1377.93,683.79 1378.49,683.79 1379.04,683.79 1379.6,683.79 1380.16,683.79 1380.72,683.79 1381.28,683.79 1381.84,683.79 1382.4,683.79 1382.96,683.79 1383.52,683.79 1384.08,683.79 1384.64,683.79 1385.2,683.79 1385.76,683.79 1386.31,683.79 1386.87,683.79 1387.43,683.79 1387.99,683.79 1388.55,683.79 1389.11,683.79 1389.67,683.79 1390.23,683.79 1390.79,683.79 1391.35,683.79 1391.91,683.79 1392.47,683.79 1393.03,683.79 1393.58,683.79 1394.14,683.79 1394.7,683.79 1395.26,683.79 1395.82,683.79 1396.38,683.79 1396.94,683.79 1397.5,683.79 1398.06,683.79 1398.62,683.79 1399.18,683.79 1399.74,683.79 1400.3,683.79 1400.86,683.79 1401.41,683.79 1401.97,683.79 1402.53,683.79 1403.09,683.79 1403.65,683.79 1404.21,683.79 1404.77,683.79 1405.33,683.79 1405.89,683.79 1406.45,683.79 1407.01,683.79 1407.57,683.79 1408.13,683.79 1408.68,683.79 1409.24,683.79 1409.8,683.79 1410.36,683.79 1410.92,683.79 1411.48,683.79 1412.04,683.79 1412.6,683.79 1413.16,683.79 1413.72,683.79 1414.28,683.79 1414.84,683.79 1415.4,683.79 1415.95,683.79 1416.51,683.79 1417.07,683.79 1417.63,683.79 1418.19,683.79 1418.75,683.79 1419.31,683.79 1419.87,683.79 1420.43,683.79 1420.99,683.79 1421.55,683.79 1422.11,683.79 1422.67,683.79 1423.23,683.79 1423.78,683.79 1424.34,683.79 1424.9,683.79 1425.46,683.79 1426.02,683.79 1426.58,683.79 1427.14,683.79 1427.7,683.79 1428.26,683.79 1428.82,683.79 1429.38,683.79 1429.94,683.79 1430.5,683.79 1431.05,683.79 1431.61,683.79 1432.17,683.79 1432.73,683.79 1433.29,683.79 1433.85,683.79 1434.41,683.79 1434.97,683.79 1435.53,683.79 1436.09,683.79 1436.65,683.79 1437.21,683.79 1437.77,683.79 1438.33,683.79 1438.88,683.79 1439.44,683.79 1440,683.79 1440.56,683.79 1441.12,683.79 1441.68,683.79 1442.24,683.79 1442.8,683.79 1443.36,683.79 1443.92,683.79 1444.48,683.79 1445.04,683.79 1445.6,683.79 1446.15,683.79 1446.71,683.79 1447.27,683.79 1447.83,683.79 1448.39,683.79 1448.95,683.79 1449.51,683.79 1450.07,683.79 1450.63,683.79 1451.19,683.79 1451.75,683.79 1452.31,683.79 1452.87,683.79 1453.42,683.79 1453.98,683.79 1454.54,683.79 1455.1,683.79 1455.66,683.79 1456.22,683.79 1456.78,683.79 1457.34,683.79 1457.9,683.79 1458.46,683.79 1459.02,683.79 1459.58,683.79 1460.14,683.79 1460.7,683.79 1461.25,683.79 1461.81,683.79 1462.37,683.79 1462.93,683.79 1463.49,683.79 1464.05,683.79 1464.61,683.79 1465.17,683.79 1465.73,683.79 1466.29,683.79 1466.85,683.79 1467.41,683.79 1467.97,683.79 1468.52,683.79 1469.08,683.79 1469.64,683.79 1470.2,683.79 1470.76,683.79 1471.32,683.79 1471.88,683.79 1472.44,683.79 1473,683.79 1473.56,683.79 1474.12,683.79 1474.68,683.79 1475.24,683.79 1475.79,683.79 1476.35,683.79 1476.91,683.79 1477.47,683.79 1478.03,683.79 1478.59,683.79 1479.15,683.79 1479.71,683.79 1480.27,683.79 1480.83,683.79 1481.39,683.79 1481.95,683.79 1482.51,683.79 1483.07,683.79 1483.62,683.79 1484.18,683.79 1484.74,683.79 1485.3,683.79 1485.86,683.79 1486.42,683.79 1486.98,683.79 1487.54,683.79 1488.1,683.79 1488.66,683.79 1489.22,683.79 1489.78,683.79 1490.34,683.79 1490.89,683.79 1491.45,683.79 1492.01,683.79 1492.57,683.79 1493.13,683.79 1493.69,683.79 1494.25,683.79 1494.81,683.79 1495.37,683.79 1495.93,683.79 1496.49,683.79 1497.05,683.79 1497.61,683.79 1498.16,683.79 1498.72,683.79 1499.28,683.79 1499.84,683.79 1500.4,683.79 1500.96,683.79 1501.52,683.79 1502.08,683.79 1502.64,683.79 1503.2,683.79 1503.76,683.79 1504.32,683.79 1504.88,683.79 1505.44,683.79 1505.99,683.79 1506.55,683.79 1507.11,683.79 1507.67,683.79 1508.23,683.79 1508.79,683.79 1509.35,683.79 1509.91,683.79 1510.47,683.79 1511.03,683.79 1511.59,683.79 1512.15,683.79 1512.71,683.79 1513.26,683.79 1513.82,683.79 1514.38,683.79 1514.94,683.79 1515.5,683.79 1516.06,683.79 1516.62,683.79 1517.18,683.79 1517.74,683.79 1518.3,683.79 1518.86,683.79 1519.42,683.79 1519.98,683.79 1520.53,683.79 1521.09,683.79 1521.65,683.79 1522.21,683.79 1522.77,683.79 1523.33,683.79 1523.89,683.79 1524.45,683.79 1525.01,683.79 1525.57,683.79 1526.13,683.79 1526.69,683.79 1527.25,683.79 1527.81,683.79 1528.36,683.79 1528.92,683.79 1529.48,683.79 1530.04,683.79 1530.6,683.79 1531.16,683.79 1531.72,683.79 1532.28,683.79 1532.84,683.79 1533.4,683.79 1533.96,683.79 1534.52,683.79 1535.08,683.79 1535.63,683.79 1536.19,683.79 1536.75,683.79 1537.31,683.79 1537.87,683.79 1538.43,683.79 1538.99,683.79 1539.55,683.79 1540.11,683.79 1540.67,683.79 1541.23,683.79 1541.79,683.79 1542.35,683.79 1542.9,683.79 1543.46,683.79 1544.02,683.79 1544.58,683.79 1545.14,683.79 1545.7,683.79 1546.26,683.79 1546.82,683.79 1547.38,683.79 1547.94,683.79 1548.5,683.79 1549.06,683.79 1549.62,683.79 1550.18,683.79 1550.73,683.79 1551.29,683.79 1551.85,683.79 1552.41,683.79 1552.97,683.79 1553.53,683.79 1554.09,683.79 1554.65,683.79 1555.21,683.79 1555.77,683.79 1556.33,683.79 1556.89,683.79 1557.45,683.79 1558,683.79 1558.56,683.79 1559.12,683.79 1559.68,683.79 1560.24,683.79 1560.8,683.79 1561.36,683.79 1561.92,683.79 1562.48,683.79 1563.04,683.79 1563.6,683.79 1564.16,683.79 1564.72,683.79 1565.28,683.79 1565.83,683.79 1566.39,683.79 1566.95,683.79 1567.51,683.79 1568.07,683.79 1568.63,683.79 1569.19,683.79 1569.75,683.79 1570.31,683.79 1570.87,683.79 1571.43,683.79 1571.99,683.79 1572.55,683.79 1573.1,683.79 1573.66,683.79 1574.22,683.79 1574.78,683.79 1575.34,683.79 1575.9,683.79 1576.46,683.79 1577.02,683.79 1577.58,683.79 1578.14,683.79 1578.7,683.79 1579.26,683.79 1579.82,683.79 1580.37,683.79 1580.93,683.79 1581.49,683.79 1582.05,683.79 1582.61,683.79 1583.17,683.79 1583.73,683.79 1584.29,683.79 1584.85,683.79 1585.41,683.79 1585.97,683.79 1586.53,683.79 1587.09,683.79 1587.65,683.79 1588.2,683.79 1588.76,683.79 1589.32,683.79 1589.88,683.79 1590.44,683.79 1591,683.79 1591.56,683.79 1592.12,683.79 1592.68,683.79 1593.24,683.79 1593.8,683.79 1594.36,683.79 1594.92,683.79 1595.47,683.79 1596.03,683.79 1596.59,683.79 1597.15,683.79 1597.71,683.79 1598.27,683.79 1598.83,683.79 1599.39,683.79 1599.95,683.79 1600.51,683.79 1601.07,683.79 1601.63,683.79 1602.19,683.79 1602.74,683.79 1603.3,683.79 1603.86,683.79 1604.42,683.79 1604.98,683.79 1605.54,683.79 1606.1,683.79 1606.66,683.79 1607.22,683.79 1607.78,683.79 1608.34,683.79 1608.9,683.79 1609.46,683.79 1610.02,683.79 1610.57,683.79 1611.13,683.79 1611.69,683.79 1612.25,683.79 1612.81,683.79 1613.37,683.79 1613.93,683.79 1614.49,683.79 1615.05,683.79 1615.61,683.79 1616.17,683.79 1616.73,683.79 1617.29,683.79 1617.84,683.79 1618.4,683.79 1618.96,683.79 1619.52,683.79 1620.08,683.79 1620.64,683.79 1621.2,683.79 1621.76,683.79 1622.32,683.79 1622.88,683.79 1623.44,683.79 1624,683.79 1624.56,683.79 1625.11,683.79 1625.67,683.79 1626.23,683.79 1626.79,683.79 1627.35,683.79 1627.91,683.79 1628.47,683.79 1629.03,683.79 1629.59,683.79 1630.15,683.79 1630.71,683.79 1631.27,683.79 1631.83,683.79 1632.39,683.79 1632.94,683.79 1633.5,683.79 1634.06,683.79 1634.62,683.79 1635.18,683.79 1635.74,683.79 1636.3,683.79 1636.86,683.79 1637.42,683.79 1637.98,683.79 1638.54,683.79 1639.1,683.79 1639.66,683.79 1640.21,683.79 1640.77,683.79 1641.33,683.79 1641.89,683.79 1642.45,683.79 1643.01,683.79 1643.57,683.79 1644.13,683.79 1644.69,683.79 1645.25,683.79 1645.81,683.79 1646.37,683.79 1646.93,683.79 1647.48,683.79 1648.04,683.79 1648.6,683.79 1649.16,683.79 1649.72,683.79 1650.28,683.79 1650.84,683.79 1651.4,683.79 1651.96,683.79 1652.52,683.79 1653.08,683.79 1653.64,683.79 1654.2,683.79 1654.76,683.79 1655.31,683.79 1655.87,683.79 1656.43,683.79 1656.99,683.79 1657.55,683.79 1658.11,683.79 1658.67,683.79 1659.23,683.79 1659.79,683.79 1660.35,683.79 1660.91,683.79 1661.47,683.79 1662.03,683.79 1662.58,683.79 1663.14,683.79 1663.7,683.79 1664.26,683.79 1664.82,683.79 1665.38,683.79 1665.94,683.79 1666.5,683.79 1667.06,683.79 1667.62,683.79 1668.18,683.79 1668.74,683.79 1669.3,683.79 1669.85,683.79 1670.41,683.79 1670.97,683.79 1671.53,683.79 1672.09,683.79 1672.65,683.79 1673.21,683.79 1673.77,683.79 1674.33,683.79 1674.89,683.79 1675.45,683.79 1676.01,683.79 1676.57,683.79 1677.13,683.79 1677.68,683.79 1678.24,683.79 1678.8,683.79 1679.36,683.79 1679.92,683.79 1680.48,683.79 1681.04,683.79 1681.6,683.79 1682.16,683.79 1682.72,683.79 1683.28,683.79 1683.84,683.79 1684.4,683.79 1684.95,683.79 1685.51,683.79 1686.07,683.79 1686.63,683.79 1687.19,683.79 1687.75,683.79 1688.31,683.79 1688.87,683.79 1689.43,683.79 1689.99,683.79 1690.55,683.79 1691.11,683.79 1691.67,683.79 1692.23,683.79 1692.78,683.79 1693.34,683.79 1693.9,683.79 1694.46,683.79 1695.02,683.79 1695.58,683.79 1696.14,683.79 1696.7,683.79 1697.26,683.79 1697.82,683.79 1698.38,683.79 1698.94,683.79 1699.5,683.79 1700.05,683.79 1700.61,683.79 1701.17,683.79 1701.73,683.79 1702.29,683.79 1702.85,683.79 1703.41,683.79 1703.97,683.79 1704.53,683.79 1705.09,683.79 1705.65,683.79 1706.21,683.79 1706.77,683.79 1707.32,683.79 1707.88,683.79 1708.44,683.79 1709,683.79 1709.56,683.79 1710.12,683.79 1710.68,683.79 1711.24,683.79 1711.8,683.79 1712.36,683.79 1712.92,683.79 1713.48,683.79 1714.04,683.79 1714.6,683.79 1715.15,683.79 1715.71,683.79 1716.27,683.79 1716.83,683.79 1717.39,683.79 1717.95,683.79 1718.51,683.79 1719.07,683.79 1719.63,683.79 1720.19,683.79 1720.75,683.79 1721.31,683.79 1721.87,683.79 1722.42,683.79 1722.98,683.79 1723.54,683.79 1724.1,683.79 1724.66,683.79 1725.22,683.79 1725.78,683.79 1726.34,683.79 1726.9,683.79 1727.46,683.79 1728.02,683.79 1728.58,683.79 1729.14,683.79 1729.69,683.79 1730.25,683.79 1730.81,683.79 1731.37,683.79 1731.93,683.79 1732.49,683.79 1733.05,683.79 1733.61,683.79 1734.17,683.79 1734.73,683.79 1735.29,683.79 1735.85,683.79 1736.41,683.79 1736.97,683.79 1737.52,683.79 1738.08,683.79 1738.64,683.79 1739.2,683.79 1739.76,683.79 1740.32,683.79 1740.88,683.79 1741.44,683.79 1742,683.79 1742.56,683.79 1743.12,683.79 1743.68,683.79 1744.24,683.79 1744.79,683.79 1745.35,683.79 1745.91,683.79 1746.47,683.79 1747.03,683.79 1747.59,683.79 1748.15,683.79 1748.71,683.79 1749.27,683.79 1749.83,683.79 1750.39,683.79 1750.95,683.79 1751.51,683.79 1752.06,683.79 1752.62,683.79 1753.18,683.79 1753.74,683.79 1754.3,683.79 1754.86,683.79 1755.42,683.79 1755.98,683.79 1756.54,683.79 1757.1,683.79 1757.66,683.79 1758.22,683.79 1758.78,683.79 1759.34,683.79 1759.89,683.79 1760.45,683.79 1761.01,683.79 1761.57,683.79 1762.13,683.79 1762.69,683.79 1763.25,683.79 1763.81,683.79 1764.37,683.79 1764.93,683.79 1765.49,683.79 1766.05,683.79 1766.61,683.79 1767.16,683.79 1767.72,683.79 1768.28,683.79 1768.84,683.79 1769.4,683.79 1769.96,683.79 1770.52,683.79 1771.08,683.79 1771.64,683.79 1772.2,683.79 1772.76,683.79 1773.32,683.79 1773.88,683.79 1774.43,683.79 1774.99,683.79 1775.55,683.79 1776.11,683.79 1776.67,683.79 1777.23,683.79 1777.79,683.79 1778.35,683.79 1778.91,683.79 1779.47,683.79 1780.03,683.79 1780.59,683.79 1781.15,683.79 1781.71,683.79 1782.26,683.79 1782.82,683.79 1783.38,683.79 1783.94,683.79 1784.5,683.79 1785.06,683.79 1785.62,683.79 1786.18,683.79 1786.74,683.79 1787.3,683.79 1787.86,683.79 1788.42,683.79 1788.98,683.79 1789.53,683.79 1790.09,683.79 1790.65,683.79 1791.21,683.79 1791.77,683.79 1792.33,683.79 1792.89,683.79 1793.45,683.79 1794.01,683.79 1794.57,683.79 1795.13,683.79 1795.69,683.79 1796.25,683.79 1796.8,683.79 1797.36,683.79 1797.92,683.79 1798.48,683.79 1799.04,683.79 1799.6,683.79 1800.16,683.79 1800.72,683.79 1801.28,683.79 1801.84,683.79 1802.4,683.79 1802.96,683.79 1803.52,683.79 1804.08,683.79 1804.63,683.79 1805.19,683.79 1805.75,683.79 1806.31,683.79 1806.87,683.79 1807.43,683.79 1807.99,683.79 1808.55,683.79 1809.11,683.79 1809.67,683.79 1810.23,683.79 1810.79,683.79 1811.35,683.79 1811.9,683.79 1812.46,683.79 1813.02,683.79 1813.58,683.79 1814.14,683.79 1814.7,683.79 1815.26,683.79 1815.82,683.79 1816.38,683.79 1816.94,683.79 1817.5,683.79 1818.06,683.79 1818.62,683.79 1819.18,683.79 1819.73,683.79 1820.29,683.79 1820.85,683.79 1821.41,683.79 1821.97,683.79 1822.53,683.79 1823.09,683.79 1823.65,683.79 1824.21,683.79 1824.77,683.79 1825.33,683.79 1825.89,683.79 1826.45,683.79 1827,683.79 1827.56,683.79 1828.12,683.79 1828.68,683.79 1829.24,683.79 1829.8,683.79 1830.36,683.79 1830.92,683.79 1831.48,683.79 1832.04,683.79 1832.6,683.79 1833.16,683.79 1833.72,683.79 1834.27,683.79 1834.83,683.79 1835.39,683.79 1835.95,683.79 1836.51,683.79 1837.07,683.79 1837.63,683.79 1838.19,683.79 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.04168278417559 ± 0.01746313714965972\nProjected Energy: -4.016116811686935 ± (0.0068642383094692505, 0.006577198213700619)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.604032</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">2.2322e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">2.1861e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.1402e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">2.285e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">3.477e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.0129e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321605\n -3.363124291613371\n -0.7590191922770817\n  0.13584182219622676\n  0.15789998694607554\n  0.8767114411781378\n  1.5305929970973375\n  1.5835732611867401\n  3.0728703303258706\n  3.1256726539518382\n  4.862107221562167\n  6.260694850380597\n  6.402671211183108\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
