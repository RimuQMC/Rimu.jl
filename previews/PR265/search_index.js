var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;\ndτ = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(\n    H; style=IsDynamicSemistochastic(),\n    dτ,\n    laststep = steps_equilibrate + steps_measure,\n    targetwalkers,\n    replica_strategy,\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.210397630724869 ± 0.002945411560125692\n   G2(1) = 0.9179375998196901 ± 0.0014487882545570095\n   G2(2) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(3) = 0.9888034965386578 ± 0.0012000192916385307\n   G2(4) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(5) = 0.9179375998196901 ± 0.0014487882545570095\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.982824328882403 ± 0.13748856752861724\n   Replica 2: -3.974753826250174 ± 0.12466355058904417\n   Replica 3: -4.011054302602586 ± 0.12438161612595747\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    targetwalkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [targetwalkers];\n    label=\"targetwalkers\", xlabel=\"steps\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.steps, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip360\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip360)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip361\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip360)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip362\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip360)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1248.87 1391.71 L1248.87 1397.25 Q1246.38 1395.98 1243.71 1395.34 Q1241.04 1394.71 1238.17 1394.71 Q1233.81 1394.71 1231.62 1396.04 Q1229.45 1397.38 1229.45 1400.05 Q1229.45 1402.09 1231.01 1403.27 Q1232.57 1404.41 1237.28 1405.46 L1239.29 1405.91 Q1245.52 1407.25 1248.13 1409.7 Q1250.78 1412.12 1250.78 1416.48 Q1250.78 1421.44 1246.83 1424.34 Q1242.91 1427.23 1236.04 1427.23 Q1233.17 1427.23 1230.06 1426.66 Q1226.97 1426.12 1223.53 1425.01 L1223.53 1418.96 Q1226.78 1420.65 1229.93 1421.51 Q1233.08 1422.33 1236.17 1422.33 Q1240.3 1422.33 1242.53 1420.93 Q1244.76 1419.5 1244.76 1416.92 Q1244.76 1414.54 1243.14 1413.26 Q1241.55 1411.99 1236.1 1410.81 L1234.07 1410.33 Q1228.62 1409.19 1226.2 1406.83 Q1223.79 1404.45 1223.79 1400.31 Q1223.79 1395.28 1227.35 1392.54 Q1230.91 1389.8 1237.47 1389.8 Q1240.72 1389.8 1243.58 1390.28 Q1246.45 1390.76 1248.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1265.89 1380.54 L1265.89 1390.66 L1277.96 1390.66 L1277.96 1395.22 L1265.89 1395.22 L1265.89 1414.57 Q1265.89 1418.93 1267.07 1420.17 Q1268.28 1421.41 1271.94 1421.41 L1277.96 1421.41 L1277.96 1426.31 L1271.94 1426.31 Q1265.16 1426.31 1262.58 1423.8 Q1260.01 1421.25 1260.01 1414.57 L1260.01 1395.22 L1255.71 1395.22 L1255.71 1390.66 L1260.01 1390.66 L1260.01 1380.54 L1265.89 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1316.15 1407.02 L1316.15 1409.89 L1289.22 1409.89 Q1289.61 1415.94 1292.85 1419.12 Q1296.13 1422.27 1301.96 1422.27 Q1305.33 1422.27 1308.48 1421.44 Q1311.66 1420.61 1314.78 1418.96 L1314.78 1424.5 Q1311.63 1425.83 1308.32 1426.53 Q1305.01 1427.23 1301.61 1427.23 Q1293.08 1427.23 1288.08 1422.27 Q1283.11 1417.3 1283.11 1408.84 Q1283.11 1400.08 1287.82 1394.96 Q1292.57 1389.8 1300.59 1389.8 Q1307.78 1389.8 1311.95 1394.45 Q1316.15 1399.07 1316.15 1407.02 M1310.3 1405.3 Q1310.23 1400.5 1307.59 1397.63 Q1304.98 1394.77 1300.65 1394.77 Q1295.75 1394.77 1292.79 1397.54 Q1289.86 1400.31 1289.42 1405.34 L1310.3 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1331.43 1420.96 L1331.43 1439.87 L1325.54 1439.87 L1325.54 1390.66 L1331.43 1390.66 L1331.43 1396.07 Q1333.28 1392.89 1336.08 1391.36 Q1338.91 1389.8 1342.82 1389.8 Q1349.32 1389.8 1353.36 1394.96 Q1357.43 1400.12 1357.43 1408.52 Q1357.43 1416.92 1353.36 1422.08 Q1349.32 1427.23 1342.82 1427.23 Q1338.91 1427.23 1336.08 1425.71 Q1333.28 1424.15 1331.43 1420.96 M1351.35 1408.52 Q1351.35 1402.06 1348.68 1398.4 Q1346.04 1394.71 1341.39 1394.71 Q1336.74 1394.71 1334.07 1398.4 Q1331.43 1402.06 1331.43 1408.52 Q1331.43 1414.98 1334.07 1418.67 Q1336.74 1422.33 1341.39 1422.33 Q1346.04 1422.33 1348.68 1418.67 Q1351.35 1414.98 1351.35 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1389.87 1391.71 L1389.87 1397.25 Q1387.38 1395.98 1384.71 1395.34 Q1382.04 1394.71 1379.17 1394.71 Q1374.81 1394.71 1372.62 1396.04 Q1370.45 1397.38 1370.45 1400.05 Q1370.45 1402.09 1372.01 1403.27 Q1373.57 1404.41 1378.28 1405.46 L1380.29 1405.91 Q1386.52 1407.25 1389.13 1409.7 Q1391.78 1412.12 1391.78 1416.48 Q1391.78 1421.44 1387.83 1424.34 Q1383.91 1427.23 1377.04 1427.23 Q1374.18 1427.23 1371.06 1426.66 Q1367.97 1426.12 1364.53 1425.01 L1364.53 1418.96 Q1367.78 1420.65 1370.93 1421.51 Q1374.08 1422.33 1377.17 1422.33 Q1381.3 1422.33 1383.53 1420.93 Q1385.76 1419.5 1385.76 1416.92 Q1385.76 1414.54 1384.14 1413.26 Q1382.55 1411.99 1377.1 1410.81 L1375.07 1410.33 Q1369.62 1409.19 1367.2 1406.83 Q1364.79 1404.45 1364.79 1400.31 Q1364.79 1395.28 1368.35 1392.54 Q1371.92 1389.8 1378.47 1389.8 Q1381.72 1389.8 1384.58 1390.28 Q1387.45 1390.76 1389.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.24 2211.02,1003.24 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.641 2211.02,745.641 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.045 2211.02,488.045 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.449 2211.02,230.449 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.24 423.181,1003.24 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.641 423.181,745.641 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.045 423.181,488.045 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.449 423.181,230.449 \"/>\n<path clip-path=\"url(#clip360)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.97 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.97 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.53 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.87 Q344.395 1252.12 347.45 1247.53 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M290.043 1016.58 L306.363 1016.58 L306.363 1020.52 L284.418 1020.52 L284.418 1016.58 Q287.08 1013.83 291.664 1009.2 Q296.27 1004.54 297.451 1003.2 Q299.696 1000.68 300.576 998.943 Q301.478 997.183 301.478 995.493 Q301.478 992.739 299.534 991.003 Q297.613 989.267 294.511 989.267 Q292.312 989.267 289.858 990.031 Q287.427 990.794 284.65 992.345 L284.65 987.623 Q287.474 986.489 289.927 985.91 Q292.381 985.331 294.418 985.331 Q299.789 985.331 302.983 988.017 Q306.177 990.702 306.177 995.193 Q306.177 997.322 305.367 999.243 Q304.58 1001.14 302.474 1003.73 Q301.895 1004.41 298.793 1007.62 Q295.691 1010.82 290.043 1016.58 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M316.224 985.956 L334.58 985.956 L334.58 989.892 L320.506 989.892 L320.506 998.364 Q321.524 998.017 322.543 997.855 Q323.562 997.669 324.58 997.669 Q330.367 997.669 333.747 1000.84 Q337.126 1004.01 337.126 1009.43 Q337.126 1015.01 333.654 1018.11 Q330.182 1021.19 323.862 1021.19 Q321.687 1021.19 319.418 1020.82 Q317.173 1020.45 314.765 1019.71 L314.765 1015.01 Q316.849 1016.14 319.071 1016.7 Q321.293 1017.25 323.77 1017.25 Q327.774 1017.25 330.112 1015.15 Q332.45 1013.04 332.45 1009.43 Q332.45 1005.82 330.112 1003.71 Q327.774 1001.6 323.77 1001.6 Q321.895 1001.6 320.02 1002.02 Q318.168 1002.44 316.224 1003.32 L316.224 985.956 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M356.339 989.035 Q352.728 989.035 350.899 992.6 Q349.094 996.142 349.094 1003.27 Q349.094 1010.38 350.899 1013.94 Q352.728 1017.48 356.339 1017.48 Q359.973 1017.48 361.779 1013.94 Q363.608 1010.38 363.608 1003.27 Q363.608 996.142 361.779 992.6 Q359.973 989.035 356.339 989.035 M356.339 985.331 Q362.149 985.331 365.205 989.938 Q368.284 994.521 368.284 1003.27 Q368.284 1012 365.205 1016.6 Q362.149 1021.19 356.339 1021.19 Q350.529 1021.19 347.45 1016.6 Q344.395 1012 344.395 1003.27 Q344.395 994.521 347.45 989.938 Q350.529 985.331 356.339 985.331 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M286.062 728.361 L304.418 728.361 L304.418 732.296 L290.344 732.296 L290.344 740.768 Q291.363 740.421 292.381 740.259 Q293.4 740.073 294.418 740.073 Q300.205 740.073 303.585 743.245 Q306.964 746.416 306.964 751.833 Q306.964 757.411 303.492 760.513 Q300.02 763.592 293.701 763.592 Q291.525 763.592 289.256 763.221 Q287.011 762.851 284.603 762.11 L284.603 757.411 Q286.687 758.546 288.909 759.101 Q291.131 759.657 293.608 759.657 Q297.613 759.657 299.951 757.55 Q302.288 755.444 302.288 751.833 Q302.288 748.222 299.951 746.115 Q297.613 744.009 293.608 744.009 Q291.733 744.009 289.858 744.425 Q288.006 744.842 286.062 745.722 L286.062 728.361 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M326.177 731.439 Q322.566 731.439 320.737 735.004 Q318.932 738.546 318.932 745.675 Q318.932 752.782 320.737 756.346 Q322.566 759.888 326.177 759.888 Q329.811 759.888 331.617 756.346 Q333.446 752.782 333.446 745.675 Q333.446 738.546 331.617 735.004 Q329.811 731.439 326.177 731.439 M326.177 727.736 Q331.987 727.736 335.043 732.342 Q338.122 736.925 338.122 745.675 Q338.122 754.402 335.043 759.009 Q331.987 763.592 326.177 763.592 Q320.367 763.592 317.288 759.009 Q314.233 754.402 314.233 745.675 Q314.233 736.925 317.288 732.342 Q320.367 727.736 326.177 727.736 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M356.339 731.439 Q352.728 731.439 350.899 735.004 Q349.094 738.546 349.094 745.675 Q349.094 752.782 350.899 756.346 Q352.728 759.888 356.339 759.888 Q359.973 759.888 361.779 756.346 Q363.608 752.782 363.608 745.675 Q363.608 738.546 361.779 735.004 Q359.973 731.439 356.339 731.439 M356.339 727.736 Q362.149 727.736 365.205 732.342 Q368.284 736.925 368.284 745.675 Q368.284 754.402 365.205 759.009 Q362.149 763.592 356.339 763.592 Q350.529 763.592 347.45 759.009 Q344.395 754.402 344.395 745.675 Q344.395 736.925 347.45 732.342 Q350.529 727.736 356.339 727.736 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M284.835 470.765 L307.057 470.765 L307.057 472.755 L294.511 505.325 L289.627 505.325 L301.432 474.7 L284.835 474.7 L284.835 470.765 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M316.224 470.765 L334.58 470.765 L334.58 474.7 L320.506 474.7 L320.506 483.172 Q321.524 482.825 322.543 482.663 Q323.562 482.477 324.58 482.477 Q330.367 482.477 333.747 485.649 Q337.126 488.82 337.126 494.237 Q337.126 499.815 333.654 502.917 Q330.182 505.996 323.862 505.996 Q321.687 505.996 319.418 505.626 Q317.173 505.255 314.765 504.514 L314.765 499.815 Q316.849 500.95 319.071 501.505 Q321.293 502.061 323.77 502.061 Q327.774 502.061 330.112 499.954 Q332.45 497.848 332.45 494.237 Q332.45 490.626 330.112 488.519 Q327.774 486.413 323.77 486.413 Q321.895 486.413 320.02 486.829 Q318.168 487.246 316.224 488.126 L316.224 470.765 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M356.339 473.843 Q352.728 473.843 350.899 477.408 Q349.094 480.95 349.094 488.079 Q349.094 495.186 350.899 498.751 Q352.728 502.292 356.339 502.292 Q359.973 502.292 361.779 498.751 Q363.608 495.186 363.608 488.079 Q363.608 480.95 361.779 477.408 Q359.973 473.843 356.339 473.843 M356.339 470.14 Q362.149 470.14 365.205 474.746 Q368.284 479.329 368.284 488.079 Q368.284 496.806 365.205 501.413 Q362.149 505.996 356.339 505.996 Q350.529 505.996 347.45 501.413 Q344.395 496.806 344.395 488.079 Q344.395 479.329 347.45 474.746 Q350.529 470.14 356.339 470.14 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M256.664 243.793 L264.303 243.793 L264.303 217.428 L255.992 219.095 L255.992 214.835 L264.256 213.169 L268.932 213.169 L268.932 243.793 L276.571 243.793 L276.571 247.729 L256.664 247.729 L256.664 243.793 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M296.015 216.247 Q292.404 216.247 290.576 219.812 Q288.77 223.354 288.77 230.483 Q288.77 237.59 290.576 241.155 Q292.404 244.696 296.015 244.696 Q299.65 244.696 301.455 241.155 Q303.284 237.59 303.284 230.483 Q303.284 223.354 301.455 219.812 Q299.65 216.247 296.015 216.247 M296.015 212.544 Q301.826 212.544 304.881 217.15 Q307.96 221.733 307.96 230.483 Q307.96 239.21 304.881 243.817 Q301.826 248.4 296.015 248.4 Q290.205 248.4 287.127 243.817 Q284.071 239.21 284.071 230.483 Q284.071 221.733 287.127 217.15 Q290.205 212.544 296.015 212.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M326.177 216.247 Q322.566 216.247 320.737 219.812 Q318.932 223.354 318.932 230.483 Q318.932 237.59 320.737 241.155 Q322.566 244.696 326.177 244.696 Q329.811 244.696 331.617 241.155 Q333.446 237.59 333.446 230.483 Q333.446 223.354 331.617 219.812 Q329.811 216.247 326.177 216.247 M326.177 212.544 Q331.987 212.544 335.043 217.15 Q338.122 221.733 338.122 230.483 Q338.122 239.21 335.043 243.817 Q331.987 248.4 326.177 248.4 Q320.367 248.4 317.288 243.817 Q314.233 239.21 314.233 230.483 Q314.233 221.733 317.288 217.15 Q320.367 212.544 326.177 212.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M356.339 216.247 Q352.728 216.247 350.899 219.812 Q349.094 223.354 349.094 230.483 Q349.094 237.59 350.899 241.155 Q352.728 244.696 356.339 244.696 Q359.973 244.696 361.779 241.155 Q363.608 237.59 363.608 230.483 Q363.608 223.354 361.779 219.812 Q359.973 216.247 356.339 216.247 M356.339 212.544 Q362.149 212.544 365.205 217.15 Q368.284 221.733 368.284 230.483 Q368.284 239.21 365.205 243.817 Q362.149 248.4 356.339 248.4 Q350.529 248.4 347.45 243.817 Q344.395 239.21 344.395 230.483 Q344.395 221.733 347.45 217.15 Q350.529 212.544 356.339 212.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip362)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.449 4017.76,230.449 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1249.42 456.554,1249.36 457.123,1249.19 457.691,1248.94 458.259,1247.62 458.828,1247.31 459.396,1246.92 459.964,1245.41 460.533,1244.88 461.101,1244.28 461.669,1243.61 462.238,1241.81 462.806,1241 463.375,1240.08 463.943,1239.1 464.511,1238 465.08,1236.81 465.648,1234.48 466.216,1233.08 466.785,1230.5 467.353,1228.86 467.921,1227.09 468.49,1225.16 469.058,1223.05 469.626,1220.86 470.195,1218.49 470.763,1215.98 471.331,1213.25 471.9,1210.41 472.468,1207.38 473.036,1204.12 473.605,1200.7 474.173,1196.06 474.741,1192.23 475.31,1187.2 475.878,1181.92 476.446,1177.48 477.015,1172.81 477.583,1166.89 478.152,1160.62 478.72,1155.09 479.288,1148.44 479.857,1141.58 480.425,1135.49 480.993,1129.21 481.562,1121.65 482.13,1113.78 482.698,1104.65 483.267,1095.33 483.835,1087.78 484.403,1075.9 484.972,1065.84 485.54,1057.74 486.108,1047.35 486.677,1037.97 487.245,1029.36 487.813,1020.77 488.382,1010.82 488.95,999.796 489.518,987.646 490.087,977.65 490.655,968.625 491.224,957.336 491.792,946.031 492.36,934.685 492.929,925.32 493.497,914.909 494.065,905.522 494.634,894.757 495.202,884.023 495.77,874.446 496.339,863.755 496.907,852.919 497.475,841.228 498.044,830.566 498.612,818.816 499.18,809.374 499.749,799.012 500.317,785.606 500.885,776.471 501.454,766.271 502.022,752.98 502.59,742.035 503.159,731.26 503.727,720.547 504.295,711.007 504.864,699.53 505.432,690.137 506.001,677.498 506.569,669.347 507.137,660.221 507.706,650.977 508.274,642.943 508.842,630.889 509.411,621.234 509.979,612.861 510.547,603.527 511.116,596.095 511.684,585.933 512.252,579.185 512.821,572.448 513.389,565.762 513.957,559.149 514.526,549.352 515.094,544.079 515.662,535.522 516.231,528.25 516.799,521.244 517.367,513.202 517.936,506.491 518.504,500.953 519.072,495.37 519.641,486.913 520.209,480.587 520.778,473.316 521.346,467.534 521.914,460.736 522.483,456.961 523.051,452.32 523.619,445.552 524.188,440.175 524.756,434.863 525.324,429.715 525.893,424.6 526.461,418.666 527.029,413.821 527.598,410.119 528.166,406.47 528.734,401.78 529.303,398.324 529.871,392.924 530.439,388.686 531.008,384.508 531.576,379.504 532.144,375.726 532.713,372.867 533.281,369.884 533.85,367.251 534.418,364.436 534.986,359.867 535.555,356.514 536.123,352.973 536.691,347.632 537.26,342.379 537.828,339.503 538.396,336.687 538.965,334.027 539.533,331.468 540.101,330.11 540.67,325.211 541.238,325.001 541.806,320.548 542.375,318.074 542.943,316.789 543.511,316.518 544.08,316.417 544.648,313.072 545.216,309.776 545.785,307.594 546.353,306.394 546.921,305.377 547.49,302.362 548.058,301.53 548.627,299.695 549.195,296.797 549.763,297.086 550.332,297.39 550.9,295.582 551.468,292.956 552.037,289.296 552.605,288.859 553.173,287.093 553.742,283.283 554.31,284.73 554.878,283.07 555.447,281.574 556.015,280.05 556.583,280.855 557.152,279.221 557.72,278.852 558.288,279.35 558.857,276.628 559.425,276.08 559.993,275.52 560.562,274.129 561.13,275.724 561.698,275.133 562.267,272.445 562.835,272.031 563.404,272.439 563.972,271.905 564.54,268.234 565.109,266.696 565.677,266.363 566.245,263.095 566.814,262.009 567.382,258.745 567.95,258.955 568.519,258.124 569.087,256.395 569.655,255.676 570.224,256.916 570.792,261.288 571.36,261.128 571.929,258.012 572.497,256.197 573.065,257.372 573.634,257.692 574.202,255.77 574.77,253.966 575.339,252.31 575.907,254.727 576.476,253.93 577.044,251.982 577.612,251.258 578.181,252.835 578.749,254.205 579.317,254.279 579.886,253.431 580.454,253.624 581.022,252.818 581.591,253.88 582.159,253.931 582.727,253.851 583.296,253.599 583.864,252.437 584.432,252.506 585.001,251.49 585.569,252.505 586.137,250.247 586.706,250.434 587.274,248.504 587.842,246.455 588.411,244.717 588.979,246.259 589.547,246.54 590.116,246.85 590.684,247.098 591.253,246.357 591.821,247.467 592.389,246.451 592.958,246.533 593.526,245.604 594.094,244.904 594.663,245.33 595.231,247.716 595.799,248.847 596.368,245.781 596.936,245.008 597.504,245.203 598.073,244.561 598.641,244.659 599.209,245.009 599.778,245.923 600.346,246.899 600.914,245.941 601.483,246.133 602.051,245.33 602.619,247.511 603.188,246.417 603.756,247.394 604.325,247.359 604.893,246.225 605.461,246.009 606.03,247.015 606.598,244.766 607.166,244.716 607.735,244.781 608.303,241.775 608.871,242.027 609.44,242.266 610.008,241.413 610.576,239.462 611.145,238.877 611.713,240.379 612.281,240.65 612.85,240.941 613.418,241.235 613.986,237.273 614.555,235.631 615.123,237.419 615.691,237.764 616.26,237.992 616.828,238.128 617.396,238.333 617.965,238.748 618.533,239.354 619.102,239.643 619.67,240.887 620.238,241.172 620.807,242.472 621.375,245.389 621.943,244.118 622.512,243.896 623.08,244.402 623.648,243.148 624.217,242.892 624.785,242.002 625.353,241.883 625.922,241.86 626.49,239.878 627.058,240.128 627.627,240.145 628.195,238.178 628.763,238.362 629.332,236.344 629.9,236.711 630.468,236.847 631.037,239.271 631.605,236.414 632.173,234.718 632.742,237.124 633.31,236.188 633.879,235.361 634.447,234.839 635.015,235.231 635.584,235.392 636.152,237.757 636.72,237.8 637.289,240.927 637.857,239.817 638.425,238.815 638.994,238.87 639.562,241.018 640.13,238.802 640.699,237.845 641.267,236.872 641.835,236.078 642.404,236.227 642.972,238.722 643.54,237.6 644.109,238.887 644.677,236.7 645.245,238.915 645.814,241.012 646.382,241.91 646.951,241.821 647.519,242.657 648.087,242.501 648.656,241.896 649.224,241.685 649.792,241.17 650.361,238.85 650.929,243.023 651.497,241.381 652.066,242.045 652.634,241.682 653.202,242.405 653.771,242.104 654.339,239.92 654.907,237.646 655.476,237.49 656.044,236.3 656.612,234.171 657.181,236.165 657.749,235.16 658.317,236.139 658.886,235.168 659.454,232.061 660.022,234.41 660.591,233.439 661.159,233.671 661.728,233.76 662.296,232.923 662.864,233.887 663.433,234.881 664.001,235.08 664.569,235.171 665.138,234.996 665.706,233.942 666.274,233.799 666.843,235.794 667.411,234.757 667.979,234.797 668.548,232.789 669.116,232.149 669.684,229.217 670.253,230.621 670.821,229.215 671.389,228.833 671.958,232.523 672.526,233.785 673.094,230.954 673.663,230.384 674.231,230.884 674.799,228.082 675.368,228.68 675.936,231.094 676.505,232.525 677.073,232.961 677.641,230.089 678.21,231.591 678.778,232.108 679.346,234.549 679.915,235.476 680.483,235.43 681.051,237.519 681.62,234.255 682.188,235.451 682.756,236.378 683.325,238.107 683.893,235.794 684.461,235.767 685.03,233.584 685.598,233.61 686.166,233.404 686.735,233.514 687.303,233.562 687.871,234.546 688.44,234.613 689.008,235.704 689.577,233.654 690.145,232.649 690.713,231.851 691.282,232.338 691.85,232.433 692.418,231.652 692.987,230.851 693.555,232.118 694.123,231.022 694.692,230.382 695.26,230.524 695.828,230.856 696.397,231.137 696.965,231.322 697.533,231.64 698.102,233.818 698.67,234.004 699.238,232.977 699.807,233.248 700.375,231.333 700.943,231.431 701.512,232.582 702.08,232.684 702.648,230.753 703.217,232.218 703.785,232.488 704.354,232.931 704.922,232.016 705.49,231.167 706.059,232.587 706.627,230.651 707.195,231.075 707.764,231.43 708.332,228.673 708.9,229.189 709.469,231.674 710.037,228.861 710.605,230.476 711.174,231.793 711.742,231.994 712.31,232.361 712.879,233.615 713.447,235.006 714.015,234.985 714.584,236.136 715.152,235.853 715.72,234.671 716.289,234.572 716.857,234.651 717.425,236.787 717.994,235.713 718.562,234.521 719.131,233.274 719.699,234.249 720.267,234.424 720.836,234.303 721.404,234.221 721.972,233.392 722.541,233.238 723.109,234.344 723.677,232.349 724.246,231.577 724.814,231.67 725.382,229.896 725.951,230.124 726.519,229.415 727.087,230.601 727.656,232.034 728.224,232.209 728.792,232.332 729.361,231.466 729.929,227.551 730.497,228.077 731.066,228.87 731.634,230.271 732.203,230.487 732.771,229.906 733.339,230.159 733.908,229.423 734.476,232.725 735.044,234.732 735.613,234.568 736.181,236.641 736.749,238.743 737.318,239.413 737.886,239.94 738.454,238.493 739.023,239.233 739.591,238.643 740.159,239.406 740.728,239.021 741.296,238.671 741.864,237.382 742.433,236.054 743.001,236.76 743.569,236.522 744.138,236.317 744.706,236.07 745.274,234.712 745.843,232.406 746.411,230.248 746.98,230.449 747.548,230.667 748.116,231.796 748.685,231.76 749.253,232.835 749.821,232.944 750.39,234.219 750.958,234.395 751.526,234.253 752.095,233.056 752.663,232.93 753.231,234.029 753.8,234.024 754.368,233.777 754.936,232.578 755.505,235.834 756.073,234.802 756.641,234.511 757.21,232.232 757.778,231.137 758.346,230.173 758.915,231.387 759.483,230.712 760.052,230.984 760.62,231.208 761.188,231.345 761.757,231.53 762.325,230.594 762.893,230.934 763.462,230.092 764.03,231.282 764.598,233.418 765.167,234.458 765.735,234.377 766.303,234.222 766.872,232.105 767.44,231.153 768.008,231.215 768.577,232.203 769.145,232.216 769.713,232.121 770.282,234.168 770.85,234.116 771.418,233.179 771.987,234.111 772.555,234.852 773.123,233.593 773.692,233.527 774.26,232.297 774.829,232.266 775.397,232.336 775.965,232.23 776.534,233.226 777.102,232.082 777.67,232.242 778.239,232.409 778.807,232.374 779.375,232.151 779.944,230.068 780.512,229.881 781.08,227.915 781.649,229.49 782.217,231.644 782.785,230.895 783.354,230.981 783.922,232.201 784.49,232.229 785.059,234.339 785.627,234.118 786.195,234.914 786.764,234.711 787.332,234.382 787.9,234.295 788.469,235.176 789.037,235.857 789.606,234.554 790.174,235.258 790.742,234.939 791.311,233.415 791.879,228.328 792.447,229.839 793.016,231.069 793.584,230.178 794.152,230.345 794.721,229.544 795.289,228.727 795.857,230.023 796.426,231.89 796.994,232.995 797.562,232.031 798.131,232.037 798.699,234.243 799.267,234.054 799.836,232.792 800.404,233.73 800.972,233.617 801.541,233.304 802.109,233.112 802.678,231.118 803.246,230.002 803.814,230.98 804.383,229.127 804.951,228.26 805.519,229.451 806.088,229.599 806.656,230.664 807.224,229.832 807.793,229.937 808.361,230.006 808.929,229.054 809.498,229.443 810.066,230.567 810.634,232.804 811.203,231.891 811.771,232.011 812.339,233.052 812.908,232.677 813.476,233.752 814.044,234.663 814.613,234.519 815.181,234.24 815.749,233.044 816.318,232.813 816.886,232.508 817.455,232.285 818.023,232.389 818.591,233.399 819.16,231.152 819.728,229.107 820.296,229.209 820.865,231.406 821.433,231.309 822.001,230.216 822.57,229.142 823.138,228.278 823.706,228.543 824.275,229.792 824.843,230.663 825.411,230.604 825.98,230.335 826.548,232.141 827.116,231.066 827.685,231.994 828.253,232.848 828.821,234.648 829.39,236.437 829.958,236.021 830.526,235.722 831.095,235.235 831.663,234.784 832.232,236.428 832.8,237.203 833.368,235.72 833.937,234.208 834.505,233.847 835.073,234.704 835.642,233.395 836.21,232.018 836.778,230.698 837.347,227.494 837.915,227.522 838.483,227.667 839.052,226.833 839.62,226.306 840.188,225.657 840.757,227.103 841.325,227.216 841.893,229.506 842.462,231.672 843.03,231.627 843.598,230.516 844.167,230.529 844.735,229.516 845.304,228.568 845.872,226.595 846.44,226.961 847.009,229.184 847.577,226.164 848.145,226.332 848.714,227.85 849.282,229.043 849.85,228.385 850.419,227.566 850.987,228.847 851.555,228.042 852.124,227.237 852.692,226.366 853.26,226.476 853.829,225.778 854.397,226.337 854.965,226.771 855.534,228.035 856.102,225.434 856.67,226.935 857.239,227.391 857.807,229.741 858.375,228.839 858.944,229.072 859.512,229.291 860.081,230.453 860.649,231.625 861.217,229.792 861.786,227.814 862.354,228.354 862.922,228.78 863.491,227.086 864.059,226.479 864.627,224.928 865.196,224.263 865.764,224.961 866.332,225.441 866.901,225.968 867.469,225.549 868.037,227.283 868.606,228.816 869.174,230.265 869.742,232.553 870.311,231.577 870.879,232.801 871.447,232.782 872.016,233.897 872.584,235.772 873.152,236.706 873.721,235.694 874.289,235.586 874.858,235.339 875.426,235.123 875.994,235.968 876.563,234.921 877.131,235.793 877.699,234.459 878.268,234.444 878.836,235.426 879.404,237.186 879.973,235.937 880.541,235.801 881.109,235.632 881.678,236.341 882.246,236.087 882.814,235.81 883.383,234.224 883.951,234.949 884.519,233.669 885.088,233.719 885.656,237.752 886.224,236.418 886.793,236.187 887.361,234.756 887.93,235.65 888.498,233.269 889.066,232.192 889.635,231.186 890.203,231.248 890.771,230.023 891.34,227.857 891.908,227.964 892.476,227.171 893.045,224.266 893.613,227.74 894.181,229.083 894.75,231.142 895.318,231.389 895.886,230.384 896.455,230.299 897.023,231.274 897.591,234.383 898.16,235.178 898.728,232.817 899.296,229.61 899.865,229.897 900.433,228.957 901.001,229.092 901.57,228.239 902.138,227.333 902.707,227.34 903.275,226.767 903.843,227.072 904.412,228.582 904.98,229.95 905.548,230.13 906.117,231.329 906.685,230.263 907.253,231.228 907.822,229.201 908.39,229.096 908.958,229.127 909.527,229.206 910.095,226.233 910.663,226.65 911.232,227.969 911.8,226.99 912.368,227.279 912.937,226.564 913.505,225.94 914.073,226.442 914.642,225.681 915.21,223.822 915.779,224.154 916.347,226.847 916.915,226.154 917.484,228.624 918.052,229.927 918.62,232.122 919.189,232.178 919.757,231.186 920.325,233.373 920.894,234.537 921.462,236.362 922.03,234.89 922.599,231.702 923.167,231.661 923.735,231.605 924.304,231.42 924.872,231.401 925.44,232.603 926.009,232.567 926.577,231.675 927.145,228.566 927.714,225.783 928.282,229.236 928.85,226.191 929.419,226.637 929.987,227.17 930.556,226.278 931.124,224.791 931.692,226.53 932.261,223.781 932.829,224.544 933.397,226.076 933.966,226.71 934.534,227.007 935.102,229.525 935.671,229.725 936.239,228.958 936.807,230.22 937.376,231.375 937.944,232.393 938.512,231.386 939.081,232.496 939.649,234.472 940.217,234.317 940.786,235.092 941.354,234.859 941.922,235.873 942.491,235.644 943.059,237.398 943.627,239.056 944.196,238.439 944.764,238.063 945.333,236.688 945.901,235.416 946.469,237.189 947.038,237.906 947.606,237.578 948.174,237.192 948.743,236.84 949.311,236.49 949.879,236.086 950.448,235.69 951.016,234.158 951.584,232.943 952.153,232.739 952.721,231.487 953.289,229.506 953.858,230.389 954.426,231.274 954.994,233.2 955.563,232.135 956.131,235.166 956.699,235.985 957.268,234.385 957.836,233.098 958.405,231.768 958.973,231.679 959.541,231.433 960.11,231.206 960.678,230.012 961.246,229.997 961.815,230.135 962.383,230.022 962.951,231.091 963.52,231.103 964.088,230.23 964.656,229.306 965.225,229.355 965.793,230.556 966.361,230.58 966.93,231.498 967.498,232.379 968.066,232.208 968.635,230.889 969.203,231.997 969.771,231.706 970.34,232.709 970.908,233.648 971.476,237.427 972.045,237.696 972.613,233.913 973.182,235.788 973.75,234.648 974.318,235.287 974.887,235.74 975.455,234.302 976.023,233.947 976.592,233.55 977.16,234.289 977.728,232.911 978.297,231.862 978.865,233.876 979.433,233.691 980.002,235.29 980.57,237.078 981.138,237.441 981.707,238.856 982.275,239.108 982.843,237.495 983.412,235.832 983.98,236.392 984.548,234.87 985.117,234.361 985.685,232.917 986.253,232.542 986.822,229.314 987.39,227.303 987.959,227.37 988.527,227.384 989.095,227.404 989.664,226.246 990.232,225.489 990.8,225.618 991.369,226.824 991.937,227.943 992.505,229.088 993.074,230.138 993.642,231.076 994.21,230.947 994.779,229.712 995.347,228.708 995.915,229.617 996.484,230.457 997.052,229.222 997.62,229.317 998.189,228.333 998.757,227.355 999.325,225.447 999.894,225.618 1000.46,225.979 1001.03,224.07 1001.6,223.115 1002.17,224.679 1002.74,228.151 1003.3,227.148 1003.87,227.285 1004.44,227.481 1005.01,227.772 1005.58,226.882 1006.15,228.14 1006.71,227.338 1007.28,224.45 1007.85,223.867 1008.42,225.171 1008.99,227.453 1009.56,227.805 1010.12,228.142 1010.69,227.064 1011.26,228.122 1011.83,227.345 1012.4,226.657 1012.97,232.064 1013.53,232.882 1014.1,233.391 1014.67,234.285 1015.24,232.921 1015.81,234.834 1016.38,234.582 1016.94,235.449 1017.51,235.285 1018.08,234.071 1018.65,235.754 1019.22,234.436 1019.79,233.119 1020.35,235.08 1020.92,232.762 1021.49,231.478 1022.06,232.444 1022.63,232.177 1023.2,231.834 1023.76,232.746 1024.33,234.59 1024.9,235.41 1025.47,234.966 1026.04,234.594 1026.61,234.078 1027.17,233.614 1027.74,230.288 1028.31,231.496 1028.88,229.116 1029.45,227.393 1030.02,228.619 1030.58,229.738 1031.15,229.497 1031.72,226.674 1032.29,224.757 1032.86,226.141 1033.43,227.064 1033.99,227.364 1034.56,225.544 1035.13,226.074 1035.7,226.236 1036.27,226.581 1036.84,225.862 1037.4,227.233 1037.97,226.405 1038.54,225.55 1039.11,225.874 1039.68,228.377 1040.25,229.573 1040.81,228.634 1041.38,228.756 1041.95,227.965 1042.52,230.18 1043.09,231.063 1043.66,231.928 1044.22,231.883 1044.79,232.074 1045.36,231.88 1045.93,230.905 1046.5,230.777 1047.07,231.657 1047.63,229.558 1048.2,228.511 1048.77,227.452 1049.34,226.729 1049.91,230.005 1050.48,232.163 1051.05,232.015 1051.61,231.726 1052.18,232.494 1052.75,234.274 1053.32,231.898 1053.89,231.629 1054.46,232.56 1055.02,233.561 1055.59,232.162 1056.16,232.168 1056.73,232.093 1057.3,233.879 1057.87,232.577 1058.43,232.236 1059,234.124 1059.57,234.626 1060.14,232.256 1060.71,232.018 1061.28,232.94 1061.84,231.689 1062.41,231.507 1062.98,230.433 1063.55,229.412 1064.12,227.282 1064.69,229.531 1065.25,229.412 1065.82,228.539 1066.39,228.599 1066.96,229.597 1067.53,227.283 1068.1,228.436 1068.66,224.288 1069.23,226.834 1069.8,230.076 1070.37,230.093 1070.94,229.016 1071.51,228.841 1072.07,228.078 1072.64,228.05 1073.21,228.383 1073.78,227.654 1074.35,227.787 1074.92,226.082 1075.48,227.458 1076.05,230.969 1076.62,229.864 1077.19,229.957 1077.76,228.933 1078.33,230.163 1078.89,229.144 1079.46,229.219 1080.03,229.337 1080.6,231.524 1081.17,232.499 1081.74,232.354 1082.3,232.29 1082.87,233.288 1083.44,237.437 1084.01,236.047 1084.58,235.639 1085.15,238.278 1085.71,235.759 1086.28,235.22 1086.85,234.881 1087.42,233.672 1087.99,233.479 1088.56,232.066 1089.12,230.793 1089.69,229.681 1090.26,230.691 1090.83,230.688 1091.4,227.386 1091.97,226.492 1092.53,227.873 1093.1,228.153 1093.67,226.992 1094.24,228.168 1094.81,228.26 1095.38,229.345 1095.94,229.553 1096.51,230.948 1097.08,230.689 1097.65,232.796 1098.22,229.698 1098.79,231.497 1099.35,230.585 1099.92,229.637 1100.49,229.805 1101.06,230.732 1101.63,229.557 1102.2,229.696 1102.76,231.626 1103.33,231.762 1103.9,231.65 1104.47,231.51 1105.04,230.491 1105.61,229.512 1106.17,228.592 1106.74,228.775 1107.31,228.815 1107.88,228.789 1108.45,225.846 1109.02,225.16 1109.58,224.608 1110.15,223.706 1110.72,223.141 1111.29,223.606 1111.86,222.019 1112.43,226.864 1112.99,226.037 1113.56,225.428 1114.13,226 1114.7,225.509 1115.27,223.821 1115.84,224.352 1116.4,224.778 1116.97,225.248 1117.54,226.634 1118.11,226.164 1118.68,225.41 1119.25,228.767 1119.81,227.966 1120.38,229.236 1120.95,230.588 1121.52,230.763 1122.09,229.895 1122.66,230.22 1123.23,231.415 1123.79,233.683 1124.36,233.453 1124.93,231.197 1125.5,231.302 1126.07,232.451 1126.64,232.717 1127.2,231.758 1127.77,231.705 1128.34,231.507 1128.91,230.46 1129.48,231.558 1130.05,231.76 1130.61,228.816 1131.18,229.045 1131.75,230.194 1132.32,233.587 1132.89,234.345 1133.46,234.438 1134.02,234.156 1134.59,235.908 1135.16,234.496 1135.73,234.563 1136.3,235.442 1136.87,236.068 1137.43,235.816 1138,234.384 1138.57,234.212 1139.14,233.85 1139.71,230.415 1140.28,230.228 1140.84,229.217 1141.41,229.397 1141.98,230.713 1142.55,229.829 1143.12,230.105 1143.69,229.086 1144.25,228.454 1144.82,228.645 1145.39,228.782 1145.96,228.889 1146.53,228.108 1147.1,227.118 1147.66,228.493 1148.23,227.528 1148.8,227.898 1149.37,229.018 1149.94,231.24 1150.51,232.361 1151.07,232.286 1151.64,231.279 1152.21,232.511 1152.78,231.417 1153.35,231.295 1153.92,233.042 1154.48,233.858 1155.05,233.66 1155.62,233.452 1156.19,237.244 1156.76,234.579 1157.33,237.558 1157.89,236.132 1158.46,235.675 1159.03,238.157 1159.6,238.75 1160.17,240.215 1160.74,238.493 1161.3,236.892 1161.87,238.607 1162.44,236.078 1163.01,236.707 1163.58,232.985 1164.15,233.847 1164.71,234.546 1165.28,234.352 1165.85,233.922 1166.42,231.898 1166.99,232.885 1167.56,234.304 1168.12,236.99 1168.69,238.647 1169.26,237.071 1169.83,233.31 1170.4,231.048 1170.97,231.998 1171.53,231.698 1172.1,230.558 1172.67,227.402 1173.24,225.423 1173.81,221.809 1174.38,222.329 1174.94,221.56 1175.51,222.277 1176.08,222.997 1176.65,222.625 1177.22,221.083 1177.79,221.803 1178.35,221.117 1178.92,219.895 1179.49,220.713 1180.06,222.646 1180.63,221.951 1181.2,222.726 1181.76,222.248 1182.33,221.738 1182.9,223.431 1183.47,223.961 1184.04,222.31 1184.61,224.155 1185.17,224.702 1185.74,224.441 1186.31,226.201 1186.88,227.86 1187.45,229.174 1188.02,231.438 1188.58,233.715 1189.15,233.797 1189.72,233.588 1190.29,233.486 1190.86,233.236 1191.43,234.072 1192,233.982 1192.56,233.141 1193.13,230.932 1193.7,231.079 1194.27,230.129 1194.84,229.317 1195.41,231.468 1195.97,230.659 1196.54,229.633 1197.11,231.77 1197.68,231.79 1198.25,231.932 1198.82,230.92 1199.38,232.058 1199.95,234.005 1200.52,236.783 1201.09,236.362 1201.66,235.954 1202.23,235.442 1202.79,236.117 1203.36,235.979 1203.93,240.017 1204.5,237.345 1205.07,234.846 1205.64,235.437 1206.2,235.14 1206.77,234.744 1207.34,232.232 1207.91,231.936 1208.48,230.824 1209.05,230.862 1209.61,230.914 1210.18,230.629 1210.75,230.596 1211.32,232.617 1211.89,232.603 1212.46,231.142 1213.02,229.988 1213.59,227.79 1214.16,227.87 1214.73,226.81 1215.3,225.14 1215.87,227.573 1216.43,225.541 1217,227.922 1217.57,227.155 1218.14,224.616 1218.71,222.823 1219.28,223.337 1219.84,221.815 1220.41,223.55 1220.98,223.778 1221.55,225.216 1222.12,227.818 1222.69,227.05 1223.25,227.407 1223.82,229.782 1224.39,231.033 1224.96,231.135 1225.53,229.96 1226.1,231.246 1226.66,233.13 1227.23,231.865 1227.8,232.88 1228.37,232.839 1228.94,233.754 1229.51,232.711 1230.07,231.432 1230.64,233.463 1231.21,233.52 1231.78,234.291 1232.35,236.073 1232.92,233.89 1233.48,233.814 1234.05,230.431 1234.62,231.432 1235.19,230.447 1235.76,230.441 1236.33,230.598 1236.89,229.785 1237.46,231.719 1238.03,231.541 1238.6,232.819 1239.17,231.779 1239.74,231.62 1240.3,231.555 1240.87,231.446 1241.44,231.39 1242.01,231.278 1242.58,228.149 1243.15,230.334 1243.71,229.038 1244.28,229.106 1244.85,230.07 1245.42,230.113 1245.99,228.07 1246.56,229.345 1247.12,230.409 1247.69,228.232 1248.26,230.519 1248.83,230.743 1249.4,230.862 1249.97,229.761 1250.53,231.063 1251.1,230.159 1251.67,230.135 1252.24,228.107 1252.81,228.284 1253.38,231.603 1253.94,232.697 1254.51,232.441 1255.08,233.457 1255.65,234.178 1256.22,233.697 1256.79,231.35 1257.35,231.132 1257.92,230.279 1258.49,230.386 1259.06,228.347 1259.63,226.65 1260.2,228.009 1260.76,228.252 1261.33,228.301 1261.9,228.388 1262.47,227.678 1263.04,227.748 1263.61,224.897 1264.18,227.586 1264.74,227.993 1265.31,228.152 1265.88,225.437 1266.45,224.998 1267.02,224.471 1267.59,224.913 1268.15,223.285 1268.72,224.888 1269.29,226.165 1269.86,228.541 1270.43,229.804 1271,229.046 1271.56,230.141 1272.13,230.153 1272.7,230.278 1273.27,231.398 1273.84,231.322 1274.41,230.371 1274.97,230.35 1275.54,230.427 1276.11,231.619 1276.68,231.524 1277.25,231.771 1277.82,231.869 1278.38,231.061 1278.95,230.198 1279.52,230.328 1280.09,230.631 1280.66,230.677 1281.23,230.905 1281.79,231.964 1282.36,232.04 1282.93,231.794 1283.5,229.807 1284.07,231.927 1284.64,233.956 1285.2,232.932 1285.77,233.935 1286.34,234.616 1286.91,233.19 1287.48,235.364 1288.05,234.331 1288.61,233.114 1289.18,232.058 1289.75,232.803 1290.32,233.71 1290.89,232.506 1291.46,231.492 1292.02,230.18 1292.59,230.049 1293.16,230.375 1293.73,230.387 1294.3,229.593 1294.87,230.775 1295.43,231.973 1296,231.84 1296.57,231.654 1297.14,229.373 1297.71,228.467 1298.28,228.499 1298.84,229.585 1299.41,231.661 1299.98,232.541 1300.55,233.273 1301.12,232.898 1301.69,234.525 1302.25,235.295 1302.82,232.995 1303.39,232.806 1303.96,232.729 1304.53,231.643 1305.1,230.057 1305.66,231.322 1306.23,230.166 1306.8,232.317 1307.37,232.089 1307.94,231.029 1308.51,230.863 1309.07,230.872 1309.64,233.071 1310.21,231.908 1310.78,231.72 1311.35,229.518 1311.92,228.419 1312.48,229.489 1313.05,227.57 1313.62,229.011 1314.19,231.238 1314.76,230.189 1315.33,230.151 1315.89,230.39 1316.46,228.268 1317.03,227.446 1317.6,228.565 1318.17,230.578 1318.74,229.831 1319.3,230.731 1319.87,232.729 1320.44,230.796 1321.01,233.74 1321.58,232.529 1322.15,232.416 1322.71,231.253 1323.28,231.305 1323.85,231.242 1324.42,233.314 1324.99,235.273 1325.56,234.034 1326.12,232.622 1326.69,231.273 1327.26,230.06 1327.83,229.939 1328.4,231.993 1328.97,231.758 1329.53,230.609 1330.1,230.375 1330.67,228.428 1331.24,230.574 1331.81,231.546 1332.38,232.396 1332.94,231.262 1333.51,232.227 1334.08,229.076 1334.65,229.187 1335.22,231.181 1335.79,232.285 1336.36,233.213 1336.92,233.999 1337.49,235.82 1338.06,234.317 1338.63,232.89 1339.2,232.777 1339.77,228.659 1340.33,228.687 1340.9,230.709 1341.47,230.587 1342.04,231.605 1342.61,230.361 1343.18,229.305 1343.74,229.318 1344.31,229.423 1344.88,229.345 1345.45,228.168 1346.02,229.4 1346.59,229.545 1347.15,230.589 1347.72,231.4 1348.29,230.106 1348.86,230.097 1349.43,229.913 1350,229.881 1350.56,229.08 1351.13,230.144 1351.7,231.049 1352.27,231.133 1352.84,231.153 1353.41,232.071 1353.97,231.972 1354.54,232.054 1355.11,230.916 1355.68,230.869 1356.25,231.01 1356.82,230.095 1357.38,230.205 1357.95,231.232 1358.52,230.268 1359.09,231.491 1359.66,230.207 1360.23,230.995 1360.79,230.049 1361.36,230.083 1361.93,230.978 1362.5,230.117 1363.07,229.979 1363.64,231.238 1364.2,230.22 1364.77,227.2 1365.34,224.531 1365.91,225.782 1366.48,224.322 1367.05,224.637 1367.61,223.818 1368.18,224.146 1368.75,226.479 1369.32,231.024 1369.89,230.907 1370.46,232.035 1371.02,231.884 1371.59,231.783 1372.16,233.706 1372.73,234.464 1373.3,229.846 1373.87,227.819 1374.43,229.063 1375,228.246 1375.57,229.182 1376.14,229.155 1376.71,230.137 1377.28,232.127 1377.84,236.097 1378.41,234.567 1378.98,234.593 1379.55,233.427 1380.12,234.222 1380.69,234.189 1381.25,235.003 1381.82,236.809 1382.39,236.102 1382.96,235.404 1383.53,233.094 1384.1,231.867 1384.66,228.537 1385.23,229.646 1385.8,229.723 1386.37,229.805 1386.94,229.843 1387.51,228.915 1388.07,231.11 1388.64,232.118 1389.21,231.059 1389.78,231.976 1390.35,233.072 1390.92,230.907 1391.48,230.811 1392.05,229.823 1392.62,229.594 1393.19,227.507 1393.76,226.539 1394.33,223.681 1394.89,223.215 1395.46,222.776 1396.03,222.37 1396.6,224.178 1397.17,223.774 1397.74,223.305 1398.3,224.671 1398.87,225.162 1399.44,225.739 1400.01,227.076 1400.58,226.139 1401.15,225.253 1401.71,225.046 1402.28,226.532 1402.85,227.062 1403.42,227.424 1403.99,229.978 1404.56,231.095 1405.13,231.228 1405.69,231.076 1406.26,231.179 1406.83,231.356 1407.4,231.394 1407.97,231.413 1408.54,230.354 1409.1,228.222 1409.67,228.372 1410.24,227.457 1410.81,227.77 1411.38,231.062 1411.95,232.152 1412.51,234.165 1413.08,233.106 1413.65,234.238 1414.22,237.203 1414.79,236.736 1415.36,236.464 1415.92,235.887 1416.49,237.74 1417.06,238.247 1417.63,237.844 1418.2,238.144 1418.77,238.715 1419.33,238.186 1419.9,238.853 1420.47,240.23 1421.04,239.309 1421.61,239.681 1422.18,239.951 1422.74,241.292 1423.31,238.486 1423.88,238.999 1424.45,238.352 1425.02,237.577 1425.59,237.039 1426.15,236.496 1426.72,235.099 1427.29,232.499 1427.86,232.367 1428.43,234.153 1429,231.571 1429.56,231.292 1430.13,230.309 1430.7,230.095 1431.27,228.955 1431.84,227.639 1432.41,227.725 1432.97,230.739 1433.54,230.449 1434.11,229.396 1434.68,229.3 1435.25,230.427 1435.82,230.14 1436.38,228.06 1436.95,226.963 1437.52,228.167 1438.09,228.029 1438.66,230.165 1439.23,229.974 1439.79,228.821 1440.36,228.681 1440.93,227.736 1441.5,228.691 1442.07,227.7 1442.64,227.99 1443.2,225.896 1443.77,226.099 1444.34,229.464 1444.91,229.404 1445.48,233.381 1446.05,233.123 1446.61,232.812 1447.18,232.499 1447.75,233.078 1448.32,234.909 1448.89,234.583 1449.46,233.13 1450.02,232.797 1450.59,231.453 1451.16,230.066 1451.73,229.98 1452.3,231.016 1452.87,230.922 1453.43,229.826 1454,227.684 1454.57,229.055 1455.14,227.041 1455.71,229.144 1456.28,228.085 1456.84,229.261 1457.41,228.044 1457.98,228.968 1458.55,226.683 1459.12,227.913 1459.69,228.945 1460.25,227.99 1460.82,229.063 1461.39,227.969 1461.96,226.935 1462.53,228.184 1463.1,230.471 1463.66,230.432 1464.23,231.491 1464.8,229.328 1465.37,229.441 1465.94,227.376 1466.51,226.49 1467.07,225.812 1467.64,225.915 1468.21,227.091 1468.78,229.247 1469.35,228.224 1469.92,228.157 1470.48,228.174 1471.05,227.428 1471.62,227.571 1472.19,224.642 1472.76,224.965 1473.33,223.517 1473.89,223.997 1474.46,224.525 1475.03,227.185 1475.6,227.214 1476.17,227.673 1476.74,227.793 1477.31,228.897 1477.87,228.067 1478.44,229.429 1479.01,231.563 1479.58,230.675 1480.15,229.502 1480.72,227.527 1481.28,227.815 1481.85,227.959 1482.42,227.074 1482.99,228.445 1483.56,230.482 1484.13,229.294 1484.69,228.338 1485.26,227.56 1485.83,224.636 1486.4,230.281 1486.97,231.403 1487.54,231.367 1488.1,232.161 1488.67,230.999 1489.24,231.963 1489.81,231.954 1490.38,229.902 1490.95,230.947 1491.51,231.891 1492.08,233.923 1492.65,233.616 1493.22,235.512 1493.79,235.286 1494.36,233.919 1494.92,233.443 1495.49,230.317 1496.06,230.471 1496.63,230.288 1497.2,230.241 1497.77,230.172 1498.33,228.211 1498.9,229.286 1499.47,227.232 1500.04,224.446 1500.61,224.102 1501.18,223.37 1501.74,226.108 1502.31,226.608 1502.88,223.873 1503.45,224.586 1504.02,224.932 1504.59,225.506 1505.15,225.67 1505.72,225.088 1506.29,224.453 1506.86,225.998 1507.43,225.485 1508,223.896 1508.56,223.427 1509.13,225.028 1509.7,226.686 1510.27,226.302 1510.84,226.803 1511.41,227.116 1511.97,227.301 1512.54,228.646 1513.11,227.691 1513.68,230.103 1514.25,229.065 1514.82,230.367 1515.38,234.735 1515.95,234.333 1516.52,232.17 1517.09,233.341 1517.66,233.21 1518.23,232.145 1518.79,228.081 1519.36,228.533 1519.93,228.645 1520.5,228.813 1521.07,229.054 1521.64,228.375 1522.2,230.737 1522.77,229.768 1523.34,231.136 1523.91,231.359 1524.48,231.51 1525.05,232.77 1525.61,232.954 1526.18,232.878 1526.75,232.924 1527.32,233.585 1527.89,233.6 1528.46,232.417 1529.02,232.212 1529.59,232.244 1530.16,234.336 1530.73,233.956 1531.3,234.882 1531.87,236.809 1532.43,237.367 1533,236.955 1533.57,236.541 1534.14,233.858 1534.71,233.564 1535.28,233.183 1535.84,231.976 1536.41,232.92 1536.98,231.077 1537.55,230.98 1538.12,232.01 1538.69,231.915 1539.25,235.91 1539.82,236.682 1540.39,237.478 1540.96,235.969 1541.53,236.414 1542.1,236.101 1542.66,238.755 1543.23,238.945 1543.8,238.07 1544.37,235.367 1544.94,236.225 1545.51,237.742 1546.08,234.089 1546.64,231.715 1547.21,233.725 1547.78,232.452 1548.35,232.304 1548.92,229.852 1549.49,231.974 1550.05,231.916 1550.62,231.716 1551.19,232.584 1551.76,230.244 1552.33,230.051 1552.9,230.832 1553.46,229.649 1554.03,229.748 1554.6,227.493 1555.17,224.875 1555.74,227.356 1556.31,228.754 1556.87,230.982 1557.44,231.147 1558.01,231.125 1558.58,230.853 1559.15,229.724 1559.72,229.924 1560.28,231.044 1560.85,232.051 1561.42,233.907 1561.99,233.425 1562.56,232.349 1563.13,230.113 1563.69,231.218 1564.26,230.189 1564.83,230.088 1565.4,229.122 1565.97,230.291 1566.54,233.331 1567.1,232.017 1567.67,231.821 1568.24,228.483 1568.81,228.708 1569.38,229.824 1569.95,226.791 1570.51,224.026 1571.08,224.425 1571.65,225.687 1572.22,227.281 1572.79,229.508 1573.36,229.504 1573.92,229.473 1574.49,229.728 1575.06,231.75 1575.63,233.511 1576.2,233.242 1576.77,235.304 1577.33,235.076 1577.9,235.58 1578.47,234.108 1579.04,230.511 1579.61,229.568 1580.18,229.731 1580.74,229.663 1581.31,228.57 1581.88,228.56 1582.45,224.33 1583.02,226.68 1583.59,225.793 1584.15,223.963 1584.72,224.492 1585.29,224.048 1585.86,226.562 1586.43,228.838 1587,230.053 1587.56,230.039 1588.13,228.992 1588.7,228.278 1589.27,228.468 1589.84,229.647 1590.41,231.873 1590.97,233.951 1591.54,231.729 1592.11,231.681 1592.68,231.595 1593.25,229.399 1593.82,229.57 1594.38,226.486 1594.95,226.897 1595.52,227.939 1596.09,228.535 1596.66,230.009 1597.23,230.942 1597.79,233.091 1598.36,231.872 1598.93,231.985 1599.5,230.851 1600.07,227.748 1600.64,228.86 1601.2,228.042 1601.77,227.031 1602.34,226.21 1602.91,228.572 1603.48,228.895 1604.05,227.03 1604.61,227.237 1605.18,226.421 1605.75,228.68 1606.32,228.815 1606.89,225.734 1607.46,227.334 1608.02,228.559 1608.59,229.564 1609.16,229.96 1609.73,229.888 1610.3,230.963 1610.87,230.946 1611.43,231.785 1612,233.815 1612.57,231.41 1613.14,232.47 1613.71,233.396 1614.28,234.358 1614.84,234.064 1615.41,236.949 1615.98,236.461 1616.55,233.956 1617.12,235.768 1617.69,235.461 1618.26,234.999 1618.82,234.613 1619.39,234.344 1619.96,234.922 1620.53,232.764 1621.1,231.541 1621.67,230.175 1622.23,231.1 1622.8,232.878 1623.37,232.733 1623.94,232.662 1624.51,231.489 1625.08,231.339 1625.64,231.122 1626.21,230.153 1626.78,228.062 1627.35,228.261 1627.92,225.224 1628.49,225.689 1629.05,224.964 1629.62,225.167 1630.19,225.503 1630.76,226.773 1631.33,228.994 1631.9,229.982 1632.46,232.106 1633.03,231.921 1633.6,230.997 1634.17,229.713 1634.74,229.753 1635.31,231.01 1635.87,229.811 1636.44,228.934 1637.01,228.801 1637.58,230.845 1638.15,229.998 1638.72,231.076 1639.28,230.087 1639.85,228.936 1640.42,227.037 1640.99,226.178 1641.56,225.505 1642.13,228.89 1642.69,227.046 1643.26,229.363 1643.83,232.623 1644.4,233.54 1644.97,234.385 1645.54,237.389 1646.1,234.98 1646.67,232.788 1647.24,236.485 1647.81,237.244 1648.38,236.776 1648.95,236.375 1649.51,236.147 1650.08,235.691 1650.65,236.145 1651.22,235.699 1651.79,237.24 1652.36,236.526 1652.92,235.053 1653.49,232.401 1654.06,232.207 1654.63,230.093 1655.2,228.993 1655.77,229.242 1656.33,231.19 1656.9,232.279 1657.47,230.229 1658.04,231.298 1658.61,229.189 1659.18,229.363 1659.74,231.412 1660.31,231.352 1660.88,231.094 1661.45,232.015 1662.02,232.946 1662.59,232.501 1663.15,229.013 1663.72,227.829 1664.29,228.962 1664.86,229.121 1665.43,228.158 1666,225.151 1666.56,225.537 1667.13,226.955 1667.7,227.111 1668.27,226.327 1668.84,225.502 1669.41,224.873 1669.97,225.109 1670.54,225.489 1671.11,226.647 1671.68,226.724 1672.25,229.163 1672.82,230.149 1673.38,225.949 1673.95,226.241 1674.52,225.611 1675.09,227.97 1675.66,228.055 1676.23,227.268 1676.79,227.587 1677.36,228.784 1677.93,229.006 1678.5,230.281 1679.07,229.303 1679.64,230.338 1680.2,232.117 1680.77,231.994 1681.34,231.819 1681.91,229.68 1682.48,230.731 1683.05,230.6 1683.61,230.662 1684.18,231.707 1684.75,231.543 1685.32,231.238 1685.89,228.067 1686.46,228.206 1687.02,228.371 1687.59,229.356 1688.16,228.553 1688.73,229.896 1689.3,230.252 1689.87,229.201 1690.44,229.001 1691,230.172 1691.57,230.29 1692.14,230.321 1692.71,230.364 1693.28,229.242 1693.85,230.213 1694.41,231.128 1694.98,229.964 1695.55,229.051 1696.12,228.083 1696.69,228.234 1697.26,227.442 1697.82,226.453 1698.39,225.968 1698.96,226.296 1699.53,226.9 1700.1,227.035 1700.67,225.269 1701.23,225.87 1701.8,227.151 1702.37,227.405 1702.94,227.657 1703.51,227.956 1704.08,227.995 1704.64,229.328 1705.21,229.535 1705.78,230.48 1706.35,230.385 1706.92,229.321 1707.49,230.493 1708.05,230.68 1708.62,230.561 1709.19,229.797 1709.76,229.927 1710.33,230.142 1710.9,229.093 1711.46,229.156 1712.03,230.464 1712.6,229.344 1713.17,230.718 1713.74,233.212 1714.31,235.01 1714.87,235.862 1715.44,236.608 1716.01,235.269 1716.58,234.886 1717.15,233.736 1717.72,235.642 1718.28,234.297 1718.85,234.085 1719.42,234.864 1719.99,234.642 1720.56,233.573 1721.13,231.4 1721.69,232.505 1722.26,233.466 1722.83,233.4 1723.4,235.448 1723.97,236.968 1724.54,237.374 1725.1,238.076 1725.67,239.498 1726.24,239.915 1726.81,240.25 1727.38,240.791 1727.95,238.868 1728.51,238.954 1729.08,239.247 1729.65,237.715 1730.22,234.919 1730.79,233.476 1731.36,233.201 1731.92,232.832 1732.49,233.675 1733.06,234.578 1733.63,231.991 1734.2,230.842 1734.77,230.664 1735.33,232.699 1735.9,232.243 1736.47,231.802 1737.04,230.738 1737.61,230.576 1738.18,229.416 1738.74,229.19 1739.31,232.177 1739.88,236.253 1740.45,235.743 1741.02,235.313 1741.59,232.902 1742.15,231.461 1742.72,232.262 1743.29,233.081 1743.86,230.851 1744.43,231.658 1745,230.445 1745.56,231.36 1746.13,230.306 1746.7,230.1 1747.27,230.187 1747.84,229.049 1748.41,226.918 1748.97,224.948 1749.54,224.013 1750.11,226.395 1750.68,228.607 1751.25,227.873 1751.82,227.905 1752.38,228.859 1752.95,230.058 1753.52,228.086 1754.09,230.19 1754.66,227.977 1755.23,229.063 1755.79,230.148 1756.36,231.239 1756.93,231.012 1757.5,232.942 1758.07,232.553 1758.64,232.206 1759.21,232.903 1759.77,231.478 1760.34,231.302 1760.91,232.114 1761.48,229.693 1762.05,227.641 1762.62,226.748 1763.18,224.887 1763.75,224.219 1764.32,227.654 1764.89,228.928 1765.46,229.08 1766.03,228.908 1766.59,227.978 1767.16,226.844 1767.73,225.979 1768.3,226.258 1768.87,227.61 1769.44,227.9 1770,227.901 1770.57,226.989 1771.14,228.15 1771.71,227.283 1772.28,227.539 1772.85,229.02 1773.41,230.181 1773.98,231.248 1774.55,231.136 1775.12,228.133 1775.69,226.324 1776.26,223.575 1776.82,228.308 1777.39,230.685 1777.96,228.613 1778.53,228.741 1779.1,230.699 1779.67,230.729 1780.23,229.669 1780.8,228.745 1781.37,229.829 1781.94,230.073 1782.51,230.109 1783.08,228.949 1783.64,227.76 1784.21,229.854 1784.78,230.932 1785.35,229.721 1785.92,232.96 1786.49,229.75 1787.05,230.69 1787.62,231.588 1788.19,232.504 1788.76,231.464 1789.33,229.33 1789.9,232.233 1790.46,231.036 1791.03,230.779 1791.6,230.673 1792.17,232.726 1792.74,231.474 1793.31,230.629 1793.87,230.715 1794.44,230.527 1795.01,229.362 1795.58,229.36 1796.15,229.364 1796.72,229.372 1797.28,227.125 1797.85,226.945 1798.42,226.023 1798.99,225.146 1799.56,226.437 1800.13,227.727 1800.69,229.902 1801.26,230.789 1801.83,232.058 1802.4,231.047 1802.97,231.021 1803.54,232.201 1804.1,227.925 1804.67,228.939 1805.24,227.9 1805.81,228.042 1806.38,227.19 1806.95,224.415 1807.51,225.952 1808.08,226.314 1808.65,225.733 1809.22,226.161 1809.79,225.531 1810.36,227.159 1810.92,226.505 1811.49,226.963 1812.06,224.127 1812.63,224.48 1813.2,226.751 1813.77,227.157 1814.33,228.524 1814.9,228.714 1815.47,232.019 1816.04,229.855 1816.61,230.157 1817.18,232.382 1817.74,231.335 1818.31,229.357 1818.88,230.618 1819.45,230.63 1820.02,230.682 1820.59,230.86 1821.15,230.827 1821.72,231.875 1822.29,232.873 1822.86,235.04 1823.43,233.714 1824,232.642 1824.56,232.363 1825.13,234.404 1825.7,234.391 1826.27,233.393 1826.84,232.26 1827.41,232.075 1827.97,230.878 1828.54,229.787 1829.11,231.888 1829.68,233.141 1830.25,233.235 1830.82,233.229 1831.39,232.917 1831.95,233.716 1832.52,231.539 1833.09,232.524 1833.66,232.063 1834.23,231.828 1834.8,230.668 1835.36,232.815 1835.93,232.664 1836.5,234.902 1837.07,234.604 1837.64,234.379 1838.21,234.137 1838.77,230.842 1839.34,231.943 1839.91,232.993 1840.48,232.659 1841.05,230.398 1841.62,230.427 1842.18,229.379 1842.75,229.298 1843.32,229.25 1843.89,227.073 1844.46,227.639 1845.03,226.754 1845.59,229.175 1846.16,230.362 1846.73,230.486 1847.3,230.53 1847.87,230.518 1848.44,233.709 1849,232.352 1849.57,230.886 1850.14,233.042 1850.71,232.028 1851.28,231.677 1851.85,230.48 1852.41,229.395 1852.98,229.518 1853.55,229.493 1854.12,228.494 1854.69,229.681 1855.26,229.856 1855.82,229.625 1856.39,231.829 1856.96,230.783 1857.53,230.778 1858.1,230.827 1858.67,228.827 1859.23,228.928 1859.8,230.049 1860.37,230.067 1860.94,232.341 1861.51,230.176 1862.08,228.972 1862.64,229.242 1863.21,227.45 1863.78,227.589 1864.35,229.823 1864.92,229.836 1865.49,231.801 1866.05,229.735 1866.62,228.94 1867.19,228.013 1867.76,229.075 1868.33,228.937 1868.9,229.103 1869.46,232.473 1870.03,233.561 1870.6,232.371 1871.17,233.219 1871.74,232.953 1872.31,232.582 1872.87,232.367 1873.44,232.37 1874.01,231.991 1874.58,232.744 1875.15,233.738 1875.72,233.621 1876.28,233.614 1876.85,232.209 1877.42,231.069 1877.99,230.833 1878.56,230.57 1879.13,229.702 1879.69,230.461 1880.26,230.506 1880.83,230.39 1881.4,230.464 1881.97,230.534 1882.54,230.693 1883.1,232.656 1883.67,231.356 1884.24,232.274 1884.81,234.218 1885.38,233.888 1885.95,232.607 1886.51,233.519 1887.08,234.135 1887.65,232.82 1888.22,232.664 1888.79,230.336 1889.36,231.149 1889.92,230.017 1890.49,229.682 1891.06,230.512 1891.63,230.491 1892.2,229.478 1892.77,229.652 1893.33,231.742 1893.9,230.656 1894.47,230.685 1895.04,227.723 1895.61,227.779 1896.18,227.793 1896.74,228.813 1897.31,230.902 1897.88,230.868 1898.45,230.698 1899.02,229.422 1899.59,228.501 1900.16,229.384 1900.72,227.455 1901.29,227.806 1901.86,229.08 1902.43,229.189 1903,228.376 1903.57,228.269 1904.13,228.363 1904.7,228.473 1905.27,229.9 1905.84,230.151 1906.41,230.427 1906.98,227.331 1907.54,226.619 1908.11,230.747 1908.68,231.639 1909.25,231.622 1909.82,231.464 1910.39,228.429 1910.95,227.671 1911.52,228.845 1912.09,230.008 1912.66,226.802 1913.23,229.081 1913.8,228.963 1914.36,229.952 1914.93,228.869 1915.5,225.897 1916.07,227.124 1916.64,226.356 1917.21,226.783 1917.77,225.961 1918.34,226.446 1918.91,228.079 1919.48,224.965 1920.05,226.478 1920.62,224.562 1921.18,224.873 1921.75,225.547 1922.32,226.973 1922.89,225.327 1923.46,225.64 1924.03,224.864 1924.59,224.446 1925.16,223.994 1925.73,223.447 1926.3,224.159 1926.87,224.522 1927.44,224.936 1928,225.34 1928.57,224.831 1929.14,227.379 1929.71,228.06 1930.28,228.442 1930.85,230.634 1931.41,234.134 1931.98,232.982 1932.55,235.023 1933.12,235.847 1933.69,236.685 1934.26,236.251 1934.82,234.902 1935.39,234.62 1935.96,235.304 1936.53,235.036 1937.1,235.742 1937.67,234.458 1938.23,234.095 1938.8,236.014 1939.37,234.96 1939.94,237.925 1940.51,237.351 1941.08,238.02 1941.64,237.573 1942.21,239.09 1942.78,237.507 1943.35,236.076 1943.92,235.786 1944.49,233.343 1945.05,233.275 1945.62,232.144 1946.19,230.977 1946.76,231.074 1947.33,231.011 1947.9,230.847 1948.46,232.66 1949.03,232.566 1949.6,232.295 1950.17,231.453 1950.74,232.589 1951.31,232.515 1951.87,231.486 1952.44,232.337 1953.01,232.217 1953.58,234.13 1954.15,232.854 1954.72,231.539 1955.28,231.461 1955.85,226.119 1956.42,227.164 1956.99,226.416 1957.56,224.533 1958.13,223.043 1958.69,224.775 1959.26,226.233 1959.83,226.678 1960.4,227.087 1960.97,227.158 1961.54,227.386 1962.1,227.543 1962.67,226.732 1963.24,224.859 1963.81,224.351 1964.38,228.803 1964.95,229.74 1965.51,233.022 1966.08,230.769 1966.65,230.695 1967.22,229.702 1967.79,229.945 1968.36,231.046 1968.92,232.236 1969.49,232.201 1970.06,233.187 1970.63,234.332 1971.2,233.107 1971.77,231.919 1972.34,228.656 1972.9,229.75 1973.47,229.79 1974.04,228.988 1974.61,231.956 1975.18,232.87 1975.75,232.818 1976.31,232.569 1976.88,231.466 1977.45,232.483 1978.02,231.295 1978.59,231.38 1979.16,231.208 1979.72,231.122 1980.29,231.069 1980.86,230.096 1981.43,228.102 1982,226.249 1982.57,227.695 1983.13,228.915 1983.7,228.215 1984.27,226.321 1984.84,229.833 1985.41,230.065 1985.98,230.045 1986.54,227.933 1987.11,227.018 1987.68,227.122 1988.25,227.427 1988.82,227.621 1989.39,226.902 1989.95,227.396 1990.52,227.898 1991.09,229.43 1991.66,228.447 1992.23,228.688 1992.8,228.1 1993.36,226.28 1993.93,228.665 1994.5,227.74 1995.07,226.965 1995.64,227.232 1996.21,228.437 1996.77,230.868 1997.34,228.898 1997.91,228.932 1998.48,229.279 1999.05,228.334 1999.62,228.561 2000.18,229.768 2000.75,230.932 2001.32,233.012 2001.89,232.924 2002.46,232.839 2003.03,232.966 2003.59,235.218 2004.16,236.078 2004.73,234.852 2005.3,235.82 2005.87,235.44 2006.44,236.114 2007,233.552 2007.57,232.457 2008.14,232.349 2008.71,235.469 2009.28,234.918 2009.85,234.888 2010.41,234.762 2010.98,235.561 2011.55,234.329 2012.12,235.261 2012.69,234.978 2013.26,235.685 2013.82,237.296 2014.39,236.984 2014.96,236.597 2015.53,235.381 2016.1,236.763 2016.67,236.173 2017.23,236.779 2017.8,234.875 2018.37,233.29 2018.94,231.635 2019.51,232.44 2020.08,232.336 2020.64,230.146 2021.21,233.155 2021.78,233.978 2022.35,233.724 2022.92,232.351 2023.49,229.979 2024.05,230.031 2024.62,229.013 2025.19,229.161 2025.76,228.159 2026.33,226.137 2026.9,226.368 2027.46,225.804 2028.03,225.812 2028.6,225.889 2029.17,224.347 2029.74,224.731 2030.31,226.933 2030.87,226.018 2031.44,227.375 2032.01,231.913 2032.58,230.706 2033.15,229.483 2033.72,228.483 2034.28,226.641 2034.85,227.62 2035.42,225.825 2035.99,226.247 2036.56,226.455 2037.13,227.815 2037.69,229.203 2038.26,229.227 2038.83,227.456 2039.4,230.64 2039.97,230.566 2040.54,232.702 2041.11,232.609 2041.67,233.622 2042.24,233.271 2042.81,233.244 2043.38,233.01 2043.95,231.848 2044.52,232.663 2045.08,233.391 2045.65,233.322 2046.22,232.993 2046.79,234.962 2047.36,234.798 2047.93,235.301 2048.49,234.891 2049.06,233.635 2049.63,235.682 2050.2,234.481 2050.77,233.214 2051.34,231.829 2051.9,230.509 2052.47,232.498 2053.04,231.357 2053.61,229.252 2054.18,229.292 2054.75,227.136 2055.31,227.224 2055.88,227.545 2056.45,228.826 2057.02,229.72 2057.59,228.716 2058.16,227.698 2058.72,228.729 2059.29,227.658 2059.86,227.814 2060.43,229.886 2061,229.05 2061.57,230.292 2062.13,228.318 2062.7,226.471 2063.27,226.668 2063.84,226.02 2064.41,229.339 2064.98,230.396 2065.54,229.541 2066.11,229.421 2066.68,229.528 2067.25,228.499 2067.82,229.471 2068.39,226.494 2068.95,227.68 2069.52,228.901 2070.09,228.889 2070.66,227.879 2071.23,229.231 2071.8,227.538 2072.36,227.94 2072.93,226.233 2073.5,227.494 2074.07,229.949 2074.64,229.142 2075.21,228.31 2075.77,228.399 2076.34,228.622 2076.91,228.64 2077.48,230.909 2078.05,231.846 2078.62,232.872 2079.18,233.635 2079.75,231.437 2080.32,232.416 2080.89,232.103 2081.46,231.931 2082.03,232.7 2082.59,232.632 2083.16,232.469 2083.73,232.42 2084.3,234.402 2084.87,235.165 2085.44,234.821 2086,234.513 2086.57,235.204 2087.14,236.106 2087.71,233.7 2088.28,232.51 2088.85,233.526 2089.41,232.208 2089.98,232.938 2090.55,234.685 2091.12,231.401 2091.69,230.359 2092.26,230.198 2092.82,232.091 2093.39,231.512 2093.96,231.341 2094.53,230.432 2095.1,230.335 2095.67,229.319 2096.23,229.48 2096.8,230.764 2097.37,228.73 2097.94,227.582 2098.51,227.79 2099.08,227.904 2099.64,227.916 2100.21,228.188 2100.78,226.231 2101.35,227.484 2101.92,227.609 2102.49,227.673 2103.05,229.118 2103.62,228.017 2104.19,228.278 2104.76,229.65 2105.33,230.61 2105.9,230.682 2106.46,232.78 2107.03,233.764 2107.6,233.441 2108.17,231.185 2108.74,231.268 2109.31,232.369 2109.87,231.186 2110.44,231.213 2111.01,231.089 2111.58,229.193 2112.15,229.355 2112.72,229.308 2113.29,232.756 2113.85,233.533 2114.42,232.309 2114.99,232.154 2115.56,232.113 2116.13,231.949 2116.7,230.589 2117.26,230.543 2117.83,230.632 2118.4,230.671 2118.97,230.652 2119.54,234.914 2120.11,235.664 2120.67,235.146 2121.24,236.889 2121.81,234.494 2122.38,233.269 2122.95,234.932 2123.52,234.691 2124.08,233.284 2124.65,232.092 2125.22,233.936 2125.79,233.522 2126.36,232.203 2126.93,231.125 2127.49,229.781 2128.06,227.44 2128.63,227.659 2129.2,229.879 2129.77,230.766 2130.34,229.605 2130.9,229.585 2131.47,229.451 2132.04,229.512 2132.61,229.465 2133.18,227.587 2133.75,226.565 2134.31,226.692 2134.88,227.957 2135.45,228.137 2136.02,229.408 2136.59,229.437 2137.16,229.371 2137.72,228.525 2138.29,228.67 2138.86,228.95 2139.43,228.203 2140,230.433 2140.57,231.416 2141.13,229.385 2141.7,227.495 2142.27,228.787 2142.84,228.998 2143.41,229.023 2143.98,229.308 2144.54,228.2 2145.11,229.545 2145.68,229.558 2146.25,229.716 2146.82,228.727 2147.39,228.988 2147.95,231.156 2148.52,229.989 2149.09,229.057 2149.66,231.157 2150.23,231.031 2150.8,231.003 2151.36,231.17 2151.93,233.119 2152.5,232.946 2153.07,232.981 2153.64,231.774 2154.21,231.77 2154.77,232.664 2155.34,232.345 2155.91,232.192 2156.48,232.162 2157.05,231.9 2157.62,229.695 2158.18,230.717 2158.75,228.56 2159.32,227.571 2159.89,228.836 \"/>\n<path clip-path=\"url(#clip360)\" d=\"M1649.46 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1649.46 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1649.46,1245.03 2150.8,1245.03 2150.8,1089.51 1649.46,1089.51 1649.46,1245.03 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1669.53,1141.35 1789.98,1141.35 \"/>\n<path clip-path=\"url(#clip360)\" d=\"M1817.46 1125.34 L1817.46 1132.71 L1826.23 1132.71 L1826.23 1136.02 L1817.46 1136.02 L1817.46 1150.09 Q1817.46 1153.26 1818.32 1154.16 Q1819.2 1155.07 1821.86 1155.07 L1826.23 1155.07 L1826.23 1158.63 L1821.86 1158.63 Q1816.93 1158.63 1815.05 1156.8 Q1813.18 1154.95 1813.18 1150.09 L1813.18 1136.02 L1810.05 1136.02 L1810.05 1132.71 L1813.18 1132.71 L1813.18 1125.34 L1817.46 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1843.62 1145.6 Q1838.46 1145.6 1836.47 1146.78 Q1834.48 1147.96 1834.48 1150.81 Q1834.48 1153.08 1835.96 1154.42 Q1837.46 1155.74 1840.03 1155.74 Q1843.57 1155.74 1845.7 1153.24 Q1847.86 1150.72 1847.86 1146.55 L1847.86 1145.6 L1843.62 1145.6 M1852.11 1143.84 L1852.11 1158.63 L1847.86 1158.63 L1847.86 1154.7 Q1846.4 1157.06 1844.22 1158.19 Q1842.05 1159.3 1838.9 1159.3 Q1834.92 1159.3 1832.55 1157.08 Q1830.22 1154.84 1830.22 1151.09 Q1830.22 1146.71 1833.13 1144.49 Q1836.07 1142.27 1841.88 1142.27 L1847.86 1142.27 L1847.86 1141.85 Q1847.86 1138.91 1845.91 1137.31 Q1843.99 1135.69 1840.49 1135.69 Q1838.27 1135.69 1836.17 1136.22 Q1834.06 1136.76 1832.11 1137.82 L1832.11 1133.89 Q1834.45 1132.98 1836.65 1132.54 Q1838.85 1132.08 1840.93 1132.08 Q1846.56 1132.08 1849.34 1135 Q1852.11 1137.91 1852.11 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1875.91 1136.69 Q1875.19 1136.27 1874.34 1136.09 Q1873.5 1135.88 1872.48 1135.88 Q1868.87 1135.88 1866.93 1138.24 Q1865.01 1140.58 1865.01 1144.97 L1865.01 1158.63 L1860.73 1158.63 L1860.73 1132.71 L1865.01 1132.71 L1865.01 1136.73 Q1866.35 1134.37 1868.5 1133.24 Q1870.66 1132.08 1873.73 1132.08 Q1874.17 1132.08 1874.71 1132.15 Q1875.24 1132.2 1875.89 1132.31 L1875.91 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1896.6 1145.37 Q1896.6 1140.74 1894.68 1138.19 Q1892.79 1135.65 1889.34 1135.65 Q1885.91 1135.65 1883.99 1138.19 Q1882.09 1140.74 1882.09 1145.37 Q1882.09 1149.97 1883.99 1152.52 Q1885.91 1155.07 1889.34 1155.07 Q1892.79 1155.07 1894.68 1152.52 Q1896.6 1149.97 1896.6 1145.37 M1900.86 1155.41 Q1900.86 1162.03 1897.92 1165.25 Q1894.98 1168.49 1888.92 1168.49 Q1886.67 1168.49 1884.68 1168.15 Q1882.69 1167.82 1880.82 1167.13 L1880.82 1162.98 Q1882.69 1164 1884.52 1164.49 Q1886.35 1164.97 1888.25 1164.97 Q1892.44 1164.97 1894.52 1162.78 Q1896.6 1160.6 1896.6 1156.18 L1896.6 1154.07 Q1895.29 1156.36 1893.23 1157.5 Q1891.17 1158.63 1888.29 1158.63 Q1883.53 1158.63 1880.61 1155 Q1877.69 1151.36 1877.69 1145.37 Q1877.69 1139.35 1880.61 1135.72 Q1883.53 1132.08 1888.29 1132.08 Q1891.17 1132.08 1893.23 1133.22 Q1895.29 1134.35 1896.6 1136.64 L1896.6 1132.71 L1900.86 1132.71 L1900.86 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1931.81 1144.6 L1931.81 1146.69 L1912.23 1146.69 Q1912.51 1151.09 1914.87 1153.4 Q1917.25 1155.69 1921.49 1155.69 Q1923.94 1155.69 1926.23 1155.09 Q1928.55 1154.49 1930.82 1153.28 L1930.82 1157.31 Q1928.53 1158.28 1926.12 1158.79 Q1923.71 1159.3 1921.23 1159.3 Q1915.03 1159.3 1911.4 1155.69 Q1907.79 1152.08 1907.79 1145.92 Q1907.79 1139.56 1911.21 1135.83 Q1914.66 1132.08 1920.49 1132.08 Q1925.73 1132.08 1928.76 1135.46 Q1931.81 1138.82 1931.81 1144.6 M1927.55 1143.35 Q1927.51 1139.86 1925.59 1137.78 Q1923.69 1135.69 1920.54 1135.69 Q1916.98 1135.69 1914.82 1137.71 Q1912.69 1139.72 1912.37 1143.38 L1927.55 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1943.02 1125.34 L1943.02 1132.71 L1951.79 1132.71 L1951.79 1136.02 L1943.02 1136.02 L1943.02 1150.09 Q1943.02 1153.26 1943.87 1154.16 Q1944.75 1155.07 1947.41 1155.07 L1951.79 1155.07 L1951.79 1158.63 L1947.41 1158.63 Q1942.48 1158.63 1940.61 1156.8 Q1938.73 1154.95 1938.73 1150.09 L1938.73 1136.02 L1935.61 1136.02 L1935.61 1132.71 L1938.73 1132.71 L1938.73 1125.34 L1943.02 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip360)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1669.53,1193.19 1789.98,1193.19 \"/>\n<path clip-path=\"url(#clip360)\" d=\"M1831.77 1194.82 L1831.77 1210.47 L1827.51 1210.47 L1827.51 1194.96 Q1827.51 1191.28 1826.07 1189.45 Q1824.64 1187.62 1821.77 1187.62 Q1818.32 1187.62 1816.33 1189.82 Q1814.34 1192.02 1814.34 1195.82 L1814.34 1210.47 L1810.05 1210.47 L1810.05 1184.55 L1814.34 1184.55 L1814.34 1188.57 Q1815.86 1186.24 1817.92 1185.08 Q1820.01 1183.92 1822.72 1183.92 Q1827.18 1183.92 1829.48 1186.7 Q1831.77 1189.45 1831.77 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1850.31 1187.53 Q1846.88 1187.53 1844.89 1190.22 Q1842.9 1192.88 1842.9 1197.53 Q1842.9 1202.18 1844.87 1204.87 Q1846.86 1207.53 1850.31 1207.53 Q1853.71 1207.53 1855.7 1204.85 Q1857.69 1202.16 1857.69 1197.53 Q1857.69 1192.93 1855.7 1190.24 Q1853.71 1187.53 1850.31 1187.53 M1850.31 1183.92 Q1855.86 1183.92 1859.04 1187.53 Q1862.21 1191.14 1862.21 1197.53 Q1862.21 1203.9 1859.04 1207.53 Q1855.86 1211.14 1850.31 1211.14 Q1844.73 1211.14 1841.56 1207.53 Q1838.41 1203.9 1838.41 1197.53 Q1838.41 1191.14 1841.56 1187.53 Q1844.73 1183.92 1850.31 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1884.29 1188.53 Q1883.57 1188.11 1882.72 1187.93 Q1881.88 1187.72 1880.86 1187.72 Q1877.25 1187.72 1875.31 1190.08 Q1873.39 1192.42 1873.39 1196.81 L1873.39 1210.47 L1869.11 1210.47 L1869.11 1184.55 L1873.39 1184.55 L1873.39 1188.57 Q1874.73 1186.21 1876.88 1185.08 Q1879.04 1183.92 1882.11 1183.92 Q1882.55 1183.92 1883.09 1183.99 Q1883.62 1184.04 1884.27 1184.15 L1884.29 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1908.11 1189.52 Q1909.71 1186.65 1911.93 1185.29 Q1914.15 1183.92 1917.16 1183.92 Q1921.21 1183.92 1923.41 1186.77 Q1925.61 1189.59 1925.61 1194.82 L1925.61 1210.47 L1921.33 1210.47 L1921.33 1194.96 Q1921.33 1191.24 1920.01 1189.43 Q1918.69 1187.62 1915.98 1187.62 Q1912.67 1187.62 1910.75 1189.82 Q1908.83 1192.02 1908.83 1195.82 L1908.83 1210.47 L1904.54 1210.47 L1904.54 1194.96 Q1904.54 1191.21 1903.23 1189.43 Q1901.91 1187.62 1899.15 1187.62 Q1895.89 1187.62 1893.97 1189.85 Q1892.04 1192.05 1892.04 1195.82 L1892.04 1210.47 L1887.76 1210.47 L1887.76 1184.55 L1892.04 1184.55 L1892.04 1188.57 Q1893.5 1186.19 1895.54 1185.06 Q1897.58 1183.92 1900.38 1183.92 Q1903.2 1183.92 1905.17 1185.36 Q1907.16 1186.79 1908.11 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.036 ± 0.023\n  with uncertainty of ± 0.0021135797523381024\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.0176 ± (0.00279941, 0.00302885) (MC)\n  95% confidence interval: [-4.0232, -4.01208]) (MC)\n  linear error propagation: -4.01739 ± 0.00297715\n  |δ_y| = |0.00291567| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.017604702562036, val_l = 0.005593363724967659, val_u = 0.005521220799719728)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.steps, df.shift, ylabel=\"energy\", xlabel=\"steps\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.steps[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.steps[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip390\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip390)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip391\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip390)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip392\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1220.15 1391.71 L1220.15 1397.25 Q1217.67 1395.98 1214.99 1395.34 Q1212.32 1394.71 1209.46 1394.71 Q1205.1 1394.71 1202.9 1396.04 Q1200.74 1397.38 1200.74 1400.05 Q1200.74 1402.09 1202.3 1403.27 Q1203.85 1404.41 1208.57 1405.46 L1210.57 1405.91 Q1216.81 1407.25 1219.42 1409.7 Q1222.06 1412.12 1222.06 1416.48 Q1222.06 1421.44 1218.11 1424.34 Q1214.2 1427.23 1207.32 1427.23 Q1204.46 1427.23 1201.34 1426.66 Q1198.25 1426.12 1194.82 1425.01 L1194.82 1418.96 Q1198.06 1420.65 1201.21 1421.51 Q1204.36 1422.33 1207.45 1422.33 Q1211.59 1422.33 1213.82 1420.93 Q1216.05 1419.5 1216.05 1416.92 Q1216.05 1414.54 1214.42 1413.26 Q1212.83 1411.99 1207.39 1410.81 L1205.35 1410.33 Q1199.91 1409.19 1197.49 1406.83 Q1195.07 1404.45 1195.07 1400.31 Q1195.07 1395.28 1198.64 1392.54 Q1202.2 1389.8 1208.76 1389.8 Q1212 1389.8 1214.87 1390.28 Q1217.73 1390.76 1220.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1237.18 1380.54 L1237.18 1390.66 L1249.24 1390.66 L1249.24 1395.22 L1237.18 1395.22 L1237.18 1414.57 Q1237.18 1418.93 1238.36 1420.17 Q1239.57 1421.41 1243.23 1421.41 L1249.24 1421.41 L1249.24 1426.31 L1243.23 1426.31 Q1236.45 1426.31 1233.87 1423.8 Q1231.29 1421.25 1231.29 1414.57 L1231.29 1395.22 L1226.99 1395.22 L1226.99 1390.66 L1231.29 1390.66 L1231.29 1380.54 L1237.18 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1287.44 1407.02 L1287.44 1409.89 L1260.51 1409.89 Q1260.89 1415.94 1264.14 1419.12 Q1267.42 1422.27 1273.24 1422.27 Q1276.61 1422.27 1279.77 1421.44 Q1282.95 1420.61 1286.07 1418.96 L1286.07 1424.5 Q1282.92 1425.83 1279.61 1426.53 Q1276.3 1427.23 1272.89 1427.23 Q1264.36 1427.23 1259.36 1422.27 Q1254.4 1417.3 1254.4 1408.84 Q1254.4 1400.08 1259.11 1394.96 Q1263.85 1389.8 1271.87 1389.8 Q1279.07 1389.8 1283.24 1394.45 Q1287.44 1399.07 1287.44 1407.02 M1281.58 1405.3 Q1281.52 1400.5 1278.87 1397.63 Q1276.26 1394.77 1271.94 1394.77 Q1267.03 1394.77 1264.07 1397.54 Q1261.15 1400.31 1260.7 1405.34 L1281.58 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1302.71 1420.96 L1302.71 1439.87 L1296.83 1439.87 L1296.83 1390.66 L1302.71 1390.66 L1302.71 1396.07 Q1304.56 1392.89 1307.36 1391.36 Q1310.19 1389.8 1314.11 1389.8 Q1320.6 1389.8 1324.64 1394.96 Q1328.72 1400.12 1328.72 1408.52 Q1328.72 1416.92 1324.64 1422.08 Q1320.6 1427.23 1314.11 1427.23 Q1310.19 1427.23 1307.36 1425.71 Q1304.56 1424.15 1302.71 1420.96 M1322.64 1408.52 Q1322.64 1402.06 1319.97 1398.4 Q1317.32 1394.71 1312.68 1394.71 Q1308.03 1394.71 1305.36 1398.4 Q1302.71 1402.06 1302.71 1408.52 Q1302.71 1414.98 1305.36 1418.67 Q1308.03 1422.33 1312.68 1422.33 Q1317.32 1422.33 1319.97 1418.67 Q1322.64 1414.98 1322.64 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1361.15 1391.71 L1361.15 1397.25 Q1358.67 1395.98 1356 1395.34 Q1353.32 1394.71 1350.46 1394.71 Q1346.1 1394.71 1343.9 1396.04 Q1341.74 1397.38 1341.74 1400.05 Q1341.74 1402.09 1343.3 1403.27 Q1344.86 1404.41 1349.57 1405.46 L1351.57 1405.91 Q1357.81 1407.25 1360.42 1409.7 Q1363.06 1412.12 1363.06 1416.48 Q1363.06 1421.44 1359.11 1424.34 Q1355.2 1427.23 1348.32 1427.23 Q1345.46 1427.23 1342.34 1426.66 Q1339.25 1426.12 1335.82 1425.01 L1335.82 1418.96 Q1339.06 1420.65 1342.21 1421.51 Q1345.36 1422.33 1348.45 1422.33 Q1352.59 1422.33 1354.82 1420.93 Q1357.05 1419.5 1357.05 1416.92 Q1357.05 1414.54 1355.42 1413.26 Q1353.83 1411.99 1348.39 1410.81 L1346.35 1410.33 Q1340.91 1409.19 1338.49 1406.83 Q1336.07 1404.45 1336.07 1400.31 Q1336.07 1395.28 1339.64 1392.54 Q1343.2 1389.8 1349.76 1389.8 Q1353 1389.8 1355.87 1390.28 Q1358.73 1390.76 1361.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1144.8 2211.02,1144.8 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,984.647 2211.02,984.647 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,824.489 2211.02,824.489 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,664.331 2211.02,664.331 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,504.173 2211.02,504.173 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,344.014 2211.02,344.014 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1144.8 365.751,1144.8 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,984.647 365.751,984.647 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,824.489 365.751,824.489 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,664.331 365.751,664.331 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,504.173 365.751,504.173 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,344.014 365.751,344.014 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M298.909 1130.6 Q295.298 1130.6 293.469 1134.17 Q291.664 1137.71 291.664 1144.84 Q291.664 1151.95 293.469 1155.51 Q295.298 1159.05 298.909 1159.05 Q302.543 1159.05 304.349 1155.51 Q306.177 1151.95 306.177 1144.84 Q306.177 1137.71 304.349 1134.17 Q302.543 1130.6 298.909 1130.6 M298.909 1126.9 Q304.719 1126.9 307.775 1131.51 Q310.853 1136.09 310.853 1144.84 Q310.853 1153.57 307.775 1158.17 Q304.719 1162.76 298.909 1162.76 Q293.099 1162.76 290.02 1158.17 Q286.964 1153.57 286.964 1144.84 Q286.964 1136.09 290.02 1131.51 Q293.099 1126.9 298.909 1126.9 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M259.557 997.992 L267.196 997.992 L267.196 971.626 L258.886 973.293 L258.886 969.033 L267.15 967.367 L271.826 967.367 L271.826 997.992 L279.465 997.992 L279.465 1001.93 L259.557 1001.93 L259.557 997.992 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M298.909 970.445 Q295.298 970.445 293.469 974.01 Q291.664 977.552 291.664 984.682 Q291.664 991.788 293.469 995.353 Q295.298 998.894 298.909 998.894 Q302.543 998.894 304.349 995.353 Q306.177 991.788 306.177 984.682 Q306.177 977.552 304.349 974.01 Q302.543 970.445 298.909 970.445 M298.909 966.742 Q304.719 966.742 307.775 971.348 Q310.853 975.932 310.853 984.682 Q310.853 993.408 307.775 998.015 Q304.719 1002.6 298.909 1002.6 Q293.099 1002.6 290.02 998.015 Q286.964 993.408 286.964 984.682 Q286.964 975.932 290.02 971.348 Q293.099 966.742 298.909 966.742 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M262.775 837.834 L279.094 837.834 L279.094 841.769 L257.15 841.769 L257.15 837.834 Q259.812 835.079 264.395 830.449 Q269.002 825.797 270.182 824.454 Q272.428 821.931 273.307 820.195 Q274.21 818.436 274.21 816.746 Q274.21 813.991 272.266 812.255 Q270.344 810.519 267.242 810.519 Q265.043 810.519 262.59 811.283 Q260.159 812.047 257.381 813.598 L257.381 808.875 Q260.205 807.741 262.659 807.162 Q265.113 806.584 267.15 806.584 Q272.52 806.584 275.715 809.269 Q278.909 811.954 278.909 816.445 Q278.909 818.574 278.099 820.496 Q277.312 822.394 275.205 824.986 Q274.627 825.658 271.525 828.875 Q268.423 832.07 262.775 837.834 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M298.909 810.287 Q295.298 810.287 293.469 813.852 Q291.664 817.394 291.664 824.523 Q291.664 831.63 293.469 835.195 Q295.298 838.736 298.909 838.736 Q302.543 838.736 304.349 835.195 Q306.177 831.63 306.177 824.523 Q306.177 817.394 304.349 813.852 Q302.543 810.287 298.909 810.287 M298.909 806.584 Q304.719 806.584 307.775 811.19 Q310.853 815.773 310.853 824.523 Q310.853 833.25 307.775 837.857 Q304.719 842.44 298.909 842.44 Q293.099 842.44 290.02 837.857 Q286.964 833.25 286.964 824.523 Q286.964 815.773 290.02 811.19 Q293.099 806.584 298.909 806.584 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M272.914 662.976 Q276.27 663.694 278.145 665.963 Q280.043 668.231 280.043 671.564 Q280.043 676.68 276.525 679.481 Q273.006 682.282 266.525 682.282 Q264.349 682.282 262.034 681.842 Q259.742 681.425 257.289 680.569 L257.289 676.055 Q259.233 677.189 261.548 677.768 Q263.863 678.347 266.386 678.347 Q270.784 678.347 273.076 676.611 Q275.39 674.875 275.39 671.564 Q275.39 668.509 273.238 666.796 Q271.108 665.06 267.289 665.06 L263.261 665.06 L263.261 661.217 L267.474 661.217 Q270.923 661.217 272.752 659.851 Q274.58 658.463 274.58 655.87 Q274.58 653.208 272.682 651.796 Q270.807 650.361 267.289 650.361 Q265.367 650.361 263.168 650.777 Q260.969 651.194 258.33 652.074 L258.33 647.907 Q260.992 647.166 263.307 646.796 Q265.645 646.426 267.705 646.426 Q273.029 646.426 276.131 648.856 Q279.233 651.264 279.233 655.384 Q279.233 658.254 277.59 660.245 Q275.946 662.213 272.914 662.976 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M298.909 650.129 Q295.298 650.129 293.469 653.694 Q291.664 657.236 291.664 664.365 Q291.664 671.472 293.469 675.037 Q295.298 678.578 298.909 678.578 Q302.543 678.578 304.349 675.037 Q306.177 671.472 306.177 664.365 Q306.177 657.236 304.349 653.694 Q302.543 650.129 298.909 650.129 M298.909 646.426 Q304.719 646.426 307.775 651.032 Q310.853 655.615 310.853 664.365 Q310.853 673.092 307.775 677.699 Q304.719 682.282 298.909 682.282 Q293.099 682.282 290.02 677.699 Q286.964 673.092 286.964 664.365 Q286.964 655.615 290.02 651.032 Q293.099 646.426 298.909 646.426 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M271.594 490.967 L259.789 509.416 L271.594 509.416 L271.594 490.967 M270.367 486.893 L276.247 486.893 L276.247 509.416 L281.177 509.416 L281.177 513.304 L276.247 513.304 L276.247 521.453 L271.594 521.453 L271.594 513.304 L255.992 513.304 L255.992 508.791 L270.367 486.893 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M298.909 489.971 Q295.298 489.971 293.469 493.536 Q291.664 497.078 291.664 504.207 Q291.664 511.314 293.469 514.878 Q295.298 518.42 298.909 518.42 Q302.543 518.42 304.349 514.878 Q306.177 511.314 306.177 504.207 Q306.177 497.078 304.349 493.536 Q302.543 489.971 298.909 489.971 M298.909 486.268 Q304.719 486.268 307.775 490.874 Q310.853 495.457 310.853 504.207 Q310.853 512.934 307.775 517.541 Q304.719 522.124 298.909 522.124 Q293.099 522.124 290.02 517.541 Q286.964 512.934 286.964 504.207 Q286.964 495.457 290.02 490.874 Q293.099 486.268 298.909 486.268 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M258.793 326.734 L277.15 326.734 L277.15 330.67 L263.076 330.67 L263.076 339.142 Q264.094 338.795 265.113 338.633 Q266.131 338.447 267.15 338.447 Q272.937 338.447 276.316 341.619 Q279.696 344.79 279.696 350.207 Q279.696 355.785 276.224 358.887 Q272.752 361.966 266.432 361.966 Q264.256 361.966 261.988 361.595 Q259.742 361.225 257.335 360.484 L257.335 355.785 Q259.418 356.919 261.641 357.475 Q263.863 358.031 266.34 358.031 Q270.344 358.031 272.682 355.924 Q275.02 353.818 275.02 350.207 Q275.02 346.595 272.682 344.489 Q270.344 342.382 266.34 342.382 Q264.465 342.382 262.59 342.799 Q260.738 343.216 258.793 344.095 L258.793 326.734 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M298.909 329.813 Q295.298 329.813 293.469 333.378 Q291.664 336.92 291.664 344.049 Q291.664 351.156 293.469 354.72 Q295.298 358.262 298.909 358.262 Q302.543 358.262 304.349 354.72 Q306.177 351.156 306.177 344.049 Q306.177 336.92 304.349 333.378 Q302.543 329.813 298.909 329.813 M298.909 326.109 Q304.719 326.109 307.775 330.716 Q310.853 335.299 310.853 344.049 Q310.853 352.776 307.775 357.382 Q304.719 361.966 298.909 361.966 Q293.099 361.966 290.02 357.382 Q286.964 352.776 286.964 344.049 Q286.964 335.299 290.02 330.716 Q293.099 326.109 298.909 326.109 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip392)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1026.8 400.199,1042.07 400.786,934.329 401.372,837.443 401.958,750.656 402.545,773.526 403.131,692.394 403.718,618.309 404.304,642.574 404.891,579.665 405.477,520.657 406.063,467.201 406.65,491.732 407.236,444.463 407.823,401.951 408.409,362.541 408.995,328.143 409.582,296.909 410.168,321.518 410.755,295.338 411.341,318.955 411.927,297.408 412.514,278.857 413.1,263.802 413.687,252.527 414.273,241.657 414.86,233.712 415.446,227.167 416.032,223.909 416.619,221.057 417.205,219.895 417.792,221.469 418.378,223.589 418.964,247.98 419.551,252.256 420.137,275.214 420.724,298.111 421.31,303.816 421.896,310.651 422.483,332.653 423.069,355.663 423.656,366.202 424.242,387.61 424.829,408.257 425.415,418.003 426.001,427.979 426.588,448.224 427.174,468.764 427.761,497.604 428.347,525.056 428.933,536.491 429.52,577.512 430.106,602.719 430.693,613.269 431.279,636.867 431.865,652.74 432.452,662.995 433.038,672.394 433.625,688.114 434.211,708.22 434.798,732.494 435.384,745.441 435.97,753.342 436.557,770.59 437.143,787.061 437.73,802.949 438.316,810.472 438.902,821.657 439.489,828.678 440.075,840.402 440.662,851.653 441.248,858.676 441.835,869.211 442.421,879.961 443.007,893.146 443.594,902.919 444.18,915.751 444.767,921.684 445.353,930.196 445.939,947.028 446.526,952.08 447.112,959.974 447.699,975.82 448.285,985.557 448.871,994.838 449.458,1003.96 450.044,1010.29 450.631,1021.19 451.217,1027.32 451.804,1040.8 452.39,1044.36 452.976,1050.15 453.563,1056.28 454.149,1059.94 454.736,1072.09 455.322,1079.36 455.908,1084.13 456.495,1090.94 457.081,1094.11 457.668,1102.71 458.254,1104.87 458.84,1107.13 459.427,1109.43 460.013,1111.72 460.6,1119.99 461.186,1120.15 461.773,1126.36 462.359,1130.4 462.945,1134.1 463.532,1139.74 464.118,1143.2 464.705,1144.76 465.291,1146.53 465.877,1153.27 466.464,1156.58 467.05,1161.57 467.637,1164.24 468.223,1168.7 468.809,1168.37 469.396,1169.53 469.982,1174.21 470.569,1176.8 471.155,1179.4 471.742,1181.85 472.328,1184.36 472.914,1188.26 473.501,1190.58 474.087,1191.26 474.674,1191.94 475.26,1194.3 475.846,1194.88 476.433,1198.48 477.019,1200.45 477.606,1202.43 478.192,1205.72 478.778,1207.3 479.365,1207.62 479.951,1208.2 480.538,1208.33 481.124,1208.79 481.711,1211.86 482.297,1213.28 482.883,1215.04 483.47,1219.46 484.056,1223.86 484.643,1225 485.229,1226.12 485.815,1227.09 486.402,1227.98 486.988,1227.25 487.575,1231.5 488.161,1229.32 488.748,1233.06 489.334,1234.15 489.92,1233.65 490.507,1231.78 491.093,1229.69 491.68,1232.07 492.266,1234.47 492.852,1235.41 493.439,1235.06 494.025,1234.49 494.612,1236.67 495.198,1235.95 495.784,1236.62 496.371,1238.77 496.957,1236.67 497.544,1234.55 498.13,1235.28 498.717,1237.15 499.303,1240.48 499.889,1239.56 500.476,1240.44 501.062,1244.1 501.649,1240.81 502.235,1241.65 502.821,1242.3 503.408,1243.03 503.994,1240.69 504.581,1241.58 505.167,1240.83 505.753,1238.94 506.34,1241.31 506.926,1240.86 507.513,1240.44 508.099,1241.14 508.686,1237.92 509.272,1237.55 509.858,1239.97 510.445,1239.45 511.031,1237.86 511.618,1237.5 512.204,1241.29 512.79,1242.35 513.377,1241.87 513.963,1245.25 514.55,1245.85 515.136,1249.32 515.722,1248.33 516.309,1248.69 516.895,1250.25 517.482,1250.53 518.068,1248.28 518.655,1241.91 519.241,1241.34 519.827,1244.63 520.414,1246.3 521,1244.12 521.587,1243.03 522.173,1244.84 522.759,1246.55 523.346,1248.11 523.932,1244.42 524.519,1244.84 525.105,1246.78 525.691,1247.17 526.278,1244.61 526.864,1242.27 527.451,1241.58 528.037,1242.08 528.624,1241.25 529.21,1241.71 529.796,1239.77 530.383,1239.11 530.969,1238.63 531.556,1238.36 532.142,1239.29 532.728,1238.65 533.315,1239.41 533.901,1237.57 534.488,1239.93 535.074,1239.2 535.661,1241.19 536.247,1243.38 536.833,1245.21 537.42,1242.87 538.006,1242.11 538.593,1241.31 539.179,1240.58 539.765,1241.12 540.352,1239.29 540.938,1240.17 541.525,1239.66 542.111,1240.46 542.697,1240.98 543.284,1240.07 543.87,1236.62 544.457,1234.73 545.043,1238.22 545.63,1238.83 546.216,1238.21 546.802,1238.67 547.389,1238.19 547.975,1237.39 548.562,1235.84 549.148,1234.2 549.734,1235.02 550.321,1234.38 550.907,1235.03 551.494,1231.84 552.08,1232.83 552.666,1231.17 553.253,1230.79 553.839,1231.82 554.426,1231.71 555.012,1230.02 555.599,1232.5 556.185,1232.21 556.771,1231.77 557.358,1235.27 557.944,1234.66 558.531,1234.07 559.117,1234.86 559.703,1237.09 560.29,1237.61 560.876,1235.48 561.463,1234.88 562.049,1234.26 562.635,1233.62 563.222,1238.42 563.808,1240.34 564.395,1237.93 564.981,1237.31 565.568,1236.84 566.154,1236.48 566.74,1236.03 567.327,1235.3 567.913,1234.32 568.5,1233.72 569.086,1231.9 569.672,1231.27 570.259,1229.34 570.845,1225.29 571.432,1226.55 572.018,1226.49 572.605,1225.51 573.191,1226.77 573.777,1226.78 574.364,1227.61 574.95,1227.47 575.537,1227.22 576.123,1229.47 576.709,1228.92 577.296,1228.65 577.882,1230.93 578.469,1230.5 579.055,1232.88 579.641,1232.26 580.228,1231.93 580.814,1228.67 581.401,1232.1 581.987,1234.12 582.574,1230.94 583.16,1231.97 583.746,1232.88 584.333,1233.42 584.919,1232.82 585.506,1232.49 586.092,1229.35 586.678,1229.11 587.265,1224.93 587.851,1226.09 588.438,1227.14 589.024,1226.86 589.61,1223.9 590.197,1226.47 590.783,1227.48 591.37,1228.54 591.956,1229.39 592.543,1229.07 593.129,1225.73 593.715,1226.96 594.302,1225.14 594.888,1227.72 595.475,1224.74 596.061,1221.84 596.647,1220.42 597.234,1220.25 597.82,1218.89 598.407,1218.79 598.993,1219.26 599.579,1219.25 600.166,1219.63 600.752,1222.33 601.339,1216.77 601.925,1218.57 602.512,1217.44 603.098,1217.62 603.684,1216.41 604.271,1216.49 604.857,1219 605.444,1221.67 606.03,1221.69 606.616,1223.04 607.203,1225.6 607.789,1222.97 608.376,1224.11 608.962,1222.74 609.548,1223.84 610.135,1227.67 610.721,1224.65 611.308,1225.78 611.894,1225.41 612.481,1225.22 613.067,1226.2 613.653,1224.91 614.24,1223.56 614.826,1223.2 615.413,1222.97 615.999,1223.07 616.585,1224.3 617.172,1224.4 617.758,1221.77 618.345,1222.96 618.931,1222.8 619.518,1225.25 620.104,1226 620.69,1229.68 621.277,1227.93 621.863,1229.71 622.45,1230.22 623.036,1225.58 623.622,1223.93 624.209,1227.44 624.795,1228.15 625.382,1227.52 625.968,1231.06 626.554,1230.36 627.141,1227.34 627.727,1225.51 628.314,1224.91 628.9,1228.49 629.487,1226.59 630.073,1225.91 630.659,1222.76 631.246,1221.48 631.832,1221.41 632.419,1218.62 633.005,1222.61 633.591,1220.99 634.178,1219.68 634.764,1217.33 635.351,1220.09 635.937,1219.99 636.523,1222.64 637.11,1222.53 637.696,1222.71 638.283,1222.5 638.869,1222.36 639.456,1221.03 640.042,1220.84 640.628,1219.35 641.215,1221.83 641.801,1223.02 642.388,1223.98 642.974,1223.33 643.56,1223.16 644.147,1224.1 644.733,1225.09 645.32,1223.47 645.906,1224.82 646.492,1225.62 647.079,1225.44 647.665,1225.02 648.252,1224.65 648.838,1224.4 649.425,1223.98 650.011,1221.18 650.597,1220.86 651.184,1222.07 651.77,1221.67 652.357,1224.03 652.943,1223.88 653.529,1222.4 654.116,1222.21 654.702,1224.61 655.289,1222.74 655.875,1222.36 656.462,1221.74 657.048,1222.84 657.634,1223.88 658.221,1222.06 658.807,1224.47 659.394,1223.92 659.98,1223.46 660.566,1226.93 661.153,1226.32 661.739,1223.2 662.326,1226.73 662.912,1224.73 663.498,1223.06 664.085,1222.77 664.671,1222.26 665.258,1220.62 665.844,1218.77 666.431,1218.68 667.017,1217.1 667.603,1217.32 668.19,1218.69 668.776,1218.71 669.363,1218.51 669.949,1215.68 670.535,1216.89 671.122,1218.28 671.708,1219.77 672.295,1218.46 672.881,1218.14 673.467,1218.19 674.054,1218.2 674.64,1219.16 675.227,1219.29 675.813,1217.81 676.4,1220.25 676.986,1221.18 677.572,1221.04 678.159,1223.26 678.745,1222.98 679.332,1223.89 679.918,1222.41 680.504,1220.59 681.091,1220.33 681.677,1220.13 682.264,1221.18 682.85,1226.11 683.436,1225.52 684.023,1224.58 684.609,1222.84 685.196,1222.57 685.782,1223.31 686.369,1223 686.955,1223.94 687.541,1219.77 688.128,1217.16 688.714,1217.27 689.301,1214.52 689.887,1211.68 690.473,1210.62 691.06,1209.72 691.646,1211.33 692.233,1210.19 692.819,1210.72 693.405,1209.54 693.992,1209.81 694.578,1210.04 695.165,1211.48 695.751,1213.01 696.338,1211.97 696.924,1212.11 697.51,1212.22 698.097,1212.39 698.683,1213.98 699.27,1216.81 699.856,1219.5 700.442,1219.25 701.029,1218.97 701.615,1217.53 702.202,1217.55 702.788,1216.15 703.375,1215.95 703.961,1214.27 704.547,1213.95 705.134,1214.03 705.72,1215.46 706.307,1215.55 706.893,1214.09 707.479,1214.01 708.066,1214.24 708.652,1215.68 709.239,1211.48 709.825,1212.66 710.411,1212.92 710.998,1215.72 711.584,1217.07 712.171,1218.27 712.757,1216.74 713.344,1217.57 713.93,1217.22 714.516,1216.92 715.103,1216.73 715.689,1216.47 716.276,1217.63 716.862,1217.2 717.448,1218.26 718.035,1216.75 718.621,1214.02 719.208,1212.62 719.794,1212.62 720.38,1212.72 720.967,1215.32 721.553,1216.49 722.14,1216.39 722.726,1215.12 723.313,1215.06 723.899,1215.14 724.485,1212.49 725.072,1212.47 725.658,1213.57 726.245,1212.31 726.831,1211.28 727.417,1212.77 728.004,1212.78 728.59,1214.26 729.177,1214.26 729.763,1214.12 730.349,1214.21 730.936,1212.9 731.522,1214.28 732.109,1214.04 732.695,1213.78 733.282,1213.78 733.868,1214.02 734.454,1216.62 735.041,1216.86 735.627,1219.37 736.214,1217.44 736.8,1214.73 737.386,1215.65 737.973,1215.53 738.559,1213.97 739.146,1213.89 739.732,1211.16 740.318,1211.34 740.905,1210.24 741.491,1210.38 742.078,1210.7 742.664,1210.71 743.251,1209.49 743.837,1208.51 744.423,1210.03 745.01,1209.03 745.596,1209.32 746.183,1211.15 746.769,1217.53 747.355,1215.67 747.942,1214.12 748.528,1215.24 749.115,1215.03 749.701,1216.05 750.288,1217.11 750.874,1215.51 751.46,1213.15 752.047,1211.71 752.633,1212.87 753.22,1212.82 753.806,1209.98 754.392,1210.13 754.979,1211.64 755.565,1210.39 756.152,1210.45 756.738,1210.77 757.324,1210.94 757.911,1213.41 758.497,1214.81 759.084,1213.58 759.67,1215.92 760.257,1217.05 760.843,1215.59 761.429,1215.43 762.016,1214.1 762.602,1215.15 763.189,1215.03 763.775,1214.96 764.361,1216.18 764.948,1215.72 765.534,1214.32 766.121,1211.47 766.707,1212.58 767.293,1212.39 767.88,1211.03 768.466,1211.44 769.053,1210.02 769.639,1208.77 770.226,1208.85 770.812,1209.11 771.398,1210.53 771.985,1210.76 772.571,1211.09 773.158,1211.32 773.744,1211.14 774.33,1209.81 774.917,1212.59 775.503,1215.17 776.09,1215.07 776.676,1212.32 777.262,1212.42 777.849,1213.78 778.435,1215.15 779.022,1216.28 779.608,1215.99 780.195,1214.46 780.781,1213.37 781.367,1213.44 781.954,1213.78 782.54,1211.49 783.127,1212.81 783.713,1211.62 784.299,1210.49 784.886,1208.14 785.472,1205.76 786.059,1206.14 786.645,1206.38 787.232,1206.87 787.818,1207.33 788.404,1205.12 788.991,1203.99 789.577,1205.71 790.164,1207.5 790.75,1207.87 791.336,1206.69 791.923,1208.25 792.509,1209.93 793.096,1211.57 793.682,1215.62 794.268,1215.66 794.855,1215.55 795.441,1216.67 796.028,1217.43 796.614,1218.35 797.201,1216.64 797.787,1216.58 798.373,1213.76 798.96,1211.04 799.546,1211.07 800.133,1212.45 800.719,1212.43 801.305,1213.71 801.892,1214.93 802.478,1217.48 803.065,1217.11 803.651,1214.38 804.237,1218.23 804.824,1218.13 805.41,1216.31 805.997,1214.87 806.583,1215.73 807.17,1216.82 807.756,1215.27 808.342,1216.33 808.929,1217.41 809.515,1218.59 810.102,1218.55 810.688,1219.53 811.274,1218.94 811.861,1218.49 812.447,1216.99 813.034,1220.33 813.62,1218.56 814.206,1218.07 814.793,1215.17 815.379,1216.34 815.966,1216.08 816.552,1215.84 817.139,1214.39 817.725,1212.91 818.311,1215.2 818.898,1217.72 819.484,1217.11 820.071,1216.62 820.657,1218.8 821.243,1219.65 821.83,1221.71 822.416,1222.68 823.003,1221.96 823.589,1221.49 824.175,1220.95 824.762,1221.59 825.348,1219.52 825.935,1217.66 826.521,1215.86 827.108,1212.96 827.694,1214.15 828.28,1212.57 828.867,1212.53 829.453,1211.06 830.04,1208.58 830.626,1207.26 831.212,1208.39 831.799,1208.4 832.385,1208.58 832.972,1208.74 833.558,1207.55 834.145,1208.74 834.731,1207.52 835.317,1209.09 835.904,1209 836.49,1207.65 837.077,1205.29 837.663,1206.71 838.249,1206.75 838.836,1206.83 839.422,1205.8 840.009,1205.97 840.595,1206.19 841.181,1208.07 841.768,1207.06 842.354,1208.57 842.941,1208.43 843.527,1203.21 844.114,1204.73 844.7,1204.87 845.286,1206.55 845.873,1205.31 846.459,1208.21 847.046,1209.51 847.632,1210.74 848.218,1210.64 848.805,1212.18 849.391,1214.93 849.978,1214.86 850.564,1215.93 851.15,1219.67 851.737,1215.44 852.323,1213.81 852.91,1211.23 853.496,1210.9 854.083,1212.15 854.669,1212.26 855.255,1211.03 855.842,1207.06 856.428,1205.94 857.015,1208.83 857.601,1212.84 858.187,1212.5 858.774,1213.71 859.36,1213.57 859.947,1214.69 860.533,1215.89 861.119,1215.96 861.706,1216.76 862.292,1216.46 862.879,1214.64 863.465,1212.95 864.052,1212.73 864.638,1211.22 865.224,1212.55 865.811,1211.33 866.397,1213.88 866.984,1214.05 867.57,1214.04 868.156,1213.97 868.743,1217.77 869.329,1217.34 869.916,1215.77 870.502,1217.07 871.089,1216.79 871.675,1217.77 872.261,1218.66 872.848,1218.13 873.434,1219.2 874.021,1221.66 874.607,1221.4 875.193,1218.16 875.78,1219.13 876.366,1216.11 876.953,1214.5 877.539,1211.73 878.125,1211.62 878.712,1212.84 879.298,1210.04 879.885,1208.48 880.471,1206.06 881.058,1207.78 881.644,1211.73 882.23,1211.75 882.817,1211.79 883.403,1212 883.99,1212 884.576,1210.45 885.162,1210.44 885.749,1211.52 886.335,1215.43 886.922,1219 887.508,1214.74 888.094,1218.63 888.681,1218.17 889.267,1217.59 889.854,1218.8 890.44,1220.78 891.027,1218.72 891.613,1222.29 892.199,1221.49 892.786,1219.71 893.372,1219.01 893.959,1218.73 894.545,1215.63 895.131,1215.4 895.718,1216.39 896.304,1214.83 896.891,1213.37 897.477,1212.05 898.063,1213.28 898.65,1211.85 899.236,1209.28 899.823,1209.38 900.409,1208.3 900.996,1208.48 901.582,1207.08 902.168,1207.23 902.755,1204.86 903.341,1202.57 903.928,1203.15 904.514,1203.43 905.1,1204.99 905.687,1206.46 906.273,1204.07 906.86,1202.99 907.446,1203.22 908.032,1203.54 908.619,1203.82 909.205,1204.11 909.792,1204.47 910.378,1204.83 910.965,1206.66 911.551,1208.11 912.137,1208.31 912.724,1209.84 913.31,1212.33 913.897,1211.23 914.483,1210.11 915.069,1207.64 915.656,1208.93 916.242,1205.03 916.829,1203.87 917.415,1205.77 918.002,1207.31 918.588,1208.93 919.174,1209.01 919.761,1209.29 920.347,1209.56 920.934,1211.05 921.52,1211.08 922.106,1210.92 922.693,1211.07 923.279,1209.73 923.866,1209.69 924.452,1210.79 925.038,1211.96 925.625,1211.93 926.211,1210.43 926.798,1210.4 927.384,1209.23 927.971,1208.09 928.557,1208.26 929.143,1209.89 929.73,1208.47 930.316,1208.8 930.903,1207.49 931.489,1206.24 932.075,1201.35 932.662,1200.83 933.248,1205.47 933.835,1203 934.421,1204.32 935.007,1203.4 935.594,1202.7 936.18,1204.4 936.767,1204.76 937.353,1205.17 937.94,1204.16 938.526,1205.81 939.112,1207.09 939.699,1204.49 940.285,1204.64 940.872,1202.52 941.458,1200.12 942.044,1199.49 942.631,1197.51 943.217,1196.98 943.804,1198.82 944.39,1200.77 944.976,1199.92 945.563,1201.71 946.149,1202.25 946.736,1203.99 947.322,1204.41 947.909,1208.45 948.495,1211.02 949.081,1211.02 949.668,1211.08 950.254,1211.13 950.841,1212.67 951.427,1213.73 952.013,1213.69 952.6,1212.28 953.186,1210.96 953.773,1209.57 954.359,1208.27 954.945,1207.09 955.532,1207.24 956.118,1208.79 956.705,1210.08 957.291,1208.97 957.878,1207.93 958.464,1209.5 959.05,1209.41 959.637,1210.68 960.223,1211.97 960.81,1214.46 961.396,1214.37 961.982,1214.03 962.569,1216.55 963.155,1217.91 963.742,1216.12 964.328,1211.88 964.915,1213.2 965.501,1213.11 966.087,1212.94 966.674,1212.65 967.26,1213.84 967.847,1212.34 968.433,1213.41 969.019,1217.13 969.606,1218.02 970.192,1216.54 970.779,1213.78 971.365,1213.41 971.951,1213.05 972.538,1214.47 973.124,1213.22 973.711,1214.26 974.297,1215.21 974.884,1208.45 975.47,1207.37 976.056,1206.66 976.643,1205.45 977.229,1207.09 977.816,1204.59 978.402,1204.81 978.988,1203.6 979.575,1203.68 980.161,1205.11 980.748,1202.88 981.334,1204.42 981.92,1206 982.507,1203.44 983.093,1206.27 983.68,1207.84 984.266,1206.59 984.853,1206.88 985.439,1207.27 986.025,1206.08 986.612,1203.68 987.198,1202.53 987.785,1202.97 988.371,1203.33 988.957,1203.89 989.544,1204.39 990.13,1208.53 990.717,1207 991.303,1210 991.889,1212.21 992.476,1210.73 993.062,1209.36 993.649,1209.69 994.235,1213.28 994.822,1215.8 995.408,1214.19 995.994,1213.13 996.581,1212.83 997.167,1215.21 997.754,1214.66 998.34,1214.57 998.926,1214.24 999.513,1215.24 1000.1,1213.62 1000.69,1214.75 1001.27,1215.93 1001.86,1215.64 1002.44,1212.59 1003.03,1211.13 1003.62,1212.34 1004.2,1212.23 1004.79,1213.27 1005.38,1210.53 1005.96,1209.41 1006.55,1208.3 1007.14,1208.32 1007.72,1208.04 1008.31,1208.25 1008.9,1209.45 1009.48,1209.6 1010.07,1208.48 1010.65,1211.11 1011.24,1212.46 1011.83,1213.85 1012.41,1214.83 1013,1210.78 1013.59,1208.05 1014.17,1208.2 1014.76,1208.53 1015.35,1207.52 1015.93,1205.2 1016.52,1208.13 1017.11,1208.43 1017.69,1207.22 1018.28,1205.9 1018.86,1207.6 1019.45,1207.55 1020.04,1207.6 1020.62,1205.29 1021.21,1206.86 1021.8,1207.24 1022.38,1204.79 1022.97,1204.06 1023.56,1206.97 1024.14,1207.23 1024.73,1206.02 1025.32,1207.55 1025.9,1207.75 1026.49,1209.08 1027.07,1210.38 1027.66,1213.1 1028.25,1210.33 1028.83,1210.51 1029.42,1211.64 1030.01,1211.61 1030.59,1210.39 1031.18,1213.34 1031.77,1211.96 1032.35,1217.25 1032.94,1214.19 1033.52,1210.18 1034.11,1210.16 1034.7,1211.54 1035.28,1211.8 1035.87,1212.8 1036.46,1212.9 1037.04,1212.53 1037.63,1213.51 1038.22,1213.41 1038.8,1215.63 1039.39,1214 1039.98,1209.63 1040.56,1211.01 1041.15,1210.91 1041.73,1212.22 1042.32,1210.7 1042.91,1212 1043.49,1211.93 1044.08,1211.82 1044.67,1209.07 1045.25,1207.8 1045.84,1207.94 1046.43,1207.97 1047.01,1206.66 1047.6,1201.3 1048.19,1202.9 1048.77,1203.28 1049.36,1199.78 1049.94,1202.8 1050.53,1203.36 1051.12,1203.67 1051.7,1205.1 1052.29,1205.26 1052.88,1206.98 1053.46,1208.56 1054.05,1209.96 1054.64,1208.7 1055.22,1208.7 1055.81,1212.87 1056.39,1214.08 1056.98,1212.43 1057.57,1212.14 1058.15,1213.67 1058.74,1212.26 1059.33,1212.2 1059.91,1210.89 1060.5,1210.65 1061.09,1208.9 1061.67,1209.22 1062.26,1206.54 1062.85,1210.41 1063.43,1208.15 1064.02,1209.28 1064.6,1210.48 1065.19,1210.28 1065.78,1209.13 1066.36,1210.61 1066.95,1210.45 1067.54,1208.02 1068.12,1207.82 1068.71,1207.93 1069.3,1208.08 1069.88,1209.35 1070.47,1210.59 1071.06,1211.78 1071.64,1211.59 1072.23,1211.58 1072.81,1211.65 1073.4,1215.42 1073.99,1216.4 1074.57,1217.22 1075.16,1218.51 1075.75,1219.39 1076.33,1218.98 1076.92,1221.15 1077.51,1215.25 1078.09,1216.38 1078.68,1217.26 1079.26,1216.66 1079.85,1217.39 1080.44,1219.64 1081.02,1219.14 1081.61,1218.75 1082.2,1218.3 1082.78,1216.68 1083.37,1217.37 1083.96,1218.43 1084.54,1214.31 1085.13,1215.36 1085.72,1213.82 1086.3,1212.13 1086.89,1211.91 1087.47,1213 1088.06,1212.6 1088.65,1211.09 1089.23,1208.18 1089.82,1208.4 1090.41,1211.19 1090.99,1211.04 1091.58,1209.56 1092.17,1209.17 1092.75,1210.33 1093.34,1210.37 1093.93,1210.59 1094.51,1211.89 1095.1,1210.49 1095.68,1210.21 1096.27,1213.91 1096.86,1213.66 1097.44,1212.24 1098.03,1207.94 1098.62,1206.89 1099.2,1206.68 1099.79,1206.94 1100.38,1204.61 1100.96,1206.28 1101.55,1206.09 1102.14,1204.87 1102.72,1203.95 1103.31,1204.13 1103.89,1205.82 1104.48,1205.94 1105.07,1206.31 1105.65,1210.58 1106.24,1210.82 1106.83,1212.11 1107.41,1211.91 1108,1210.27 1108.59,1211.38 1109.17,1211.05 1109.76,1212.35 1110.34,1213.18 1110.93,1212.99 1111.52,1212.86 1112.1,1212.77 1112.69,1213.8 1113.28,1215.11 1113.86,1213.45 1114.45,1214.72 1115.04,1214.32 1115.62,1212.97 1116.21,1210.19 1116.8,1208.74 1117.38,1208.79 1117.97,1210.03 1118.55,1208.44 1119.14,1209.78 1119.73,1209.91 1120.31,1207.67 1120.9,1206.57 1121.49,1206.73 1122.07,1206.92 1122.66,1202.01 1123.25,1205.24 1123.83,1201.34 1124.42,1202.98 1125.01,1203.42 1125.59,1200.12 1126.18,1199.17 1126.76,1197.09 1127.35,1199.05 1127.94,1200.89 1128.52,1198.54 1129.11,1201.57 1129.7,1200.62 1130.28,1205.21 1130.87,1204.05 1131.46,1203.07 1132.04,1203.22 1132.63,1203.67 1133.21,1206.16 1133.8,1204.87 1134.39,1203 1134.97,1199.48 1135.56,1197.2 1136.15,1199.01 1136.73,1203.64 1137.32,1206.44 1137.91,1205.22 1138.49,1205.56 1139.08,1206.98 1139.67,1210.97 1140.25,1213.55 1140.84,1218.22 1141.42,1217.78 1142.01,1218.95 1142.6,1218.27 1143.18,1217.57 1143.77,1218.22 1144.36,1220.35 1144.94,1219.68 1145.53,1220.76 1146.12,1222.52 1146.7,1221.76 1147.29,1219.57 1147.88,1220.63 1148.46,1219.87 1149.05,1220.66 1149.63,1221.51 1150.22,1219.59 1150.81,1219.1 1151.39,1221.34 1151.98,1219.22 1152.57,1218.68 1153.15,1219.15 1153.74,1217.08 1154.33,1215.09 1154.91,1213.49 1155.5,1210.65 1156.09,1207.73 1156.67,1207.55 1157.26,1207.73 1157.84,1207.78 1158.43,1208.02 1159.02,1206.89 1159.6,1206.91 1160.19,1207.9 1160.78,1210.63 1161.36,1210.44 1161.95,1211.63 1162.54,1212.66 1163.12,1209.96 1163.71,1210.96 1164.29,1212.26 1164.88,1209.57 1165.47,1209.51 1166.05,1209.3 1166.64,1210.55 1167.23,1209.09 1167.81,1206.57 1168.4,1202.94 1168.99,1203.32 1169.57,1203.7 1170.16,1204.21 1170.75,1203.23 1171.33,1203.26 1171.92,1197.96 1172.5,1201.14 1173.09,1204.16 1173.68,1203.29 1174.26,1203.55 1174.85,1203.93 1175.44,1207.02 1176.02,1207.36 1176.61,1208.73 1177.2,1208.67 1177.78,1208.6 1178.37,1208.95 1178.96,1208.98 1179.54,1206.41 1180.13,1206.38 1180.71,1208.18 1181.3,1209.63 1181.89,1212.42 1182.47,1212.39 1183.06,1213.79 1183.65,1215.99 1184.23,1213.05 1184.82,1215.69 1185.41,1212.8 1185.99,1213.83 1186.58,1217.12 1187.16,1219.52 1187.75,1219.07 1188.34,1221.16 1188.92,1219.19 1189.51,1219.07 1190.1,1217.42 1190.68,1214.27 1191.27,1215.3 1191.86,1214.93 1192.44,1212 1193.03,1210.43 1193.62,1210.29 1194.2,1211.76 1194.79,1210.14 1195.37,1207.73 1195.96,1209.27 1196.55,1207.95 1197.13,1207.94 1197.72,1206.71 1198.31,1207.96 1198.89,1209.53 1199.48,1206.92 1200.07,1206.77 1200.65,1205.72 1201.24,1203.35 1201.83,1205.99 1202.41,1206 1203,1210.22 1203.58,1208.95 1204.17,1210.17 1204.76,1210.18 1205.34,1209.98 1205.93,1211.01 1206.52,1208.57 1207.1,1208.76 1207.69,1207.11 1208.28,1208.38 1208.86,1208.54 1209.45,1208.6 1210.03,1208.71 1210.62,1208.76 1211.21,1208.87 1211.79,1212.82 1212.38,1210.11 1212.97,1211.75 1213.55,1211.7 1214.14,1210.51 1214.73,1210.47 1215.31,1213.07 1215.9,1211.51 1216.49,1210.19 1217.07,1212.95 1217.66,1210.1 1218.24,1209.82 1218.83,1209.66 1219.42,1211.05 1220,1209.41 1220.59,1210.54 1221.18,1210.58 1221.76,1213.16 1222.35,1212.99 1222.94,1208.84 1223.52,1207.42 1224.11,1207.69 1224.7,1206.35 1225.28,1205.36 1225.87,1205.87 1226.45,1208.78 1227.04,1209.03 1227.63,1210.1 1228.21,1209.96 1228.8,1212.55 1229.39,1214.75 1229.97,1213.12 1230.56,1212.88 1231.15,1212.87 1231.73,1212.81 1232.32,1213.76 1232.91,1213.74 1233.49,1217.41 1234.08,1214.15 1234.66,1213.71 1235.25,1213.57 1235.84,1217.06 1236.42,1217.74 1237.01,1218.54 1237.6,1218.13 1238.18,1220.32 1238.77,1218.47 1239.36,1217 1239.94,1214.1 1240.53,1212.55 1241.11,1213.52 1241.7,1212.17 1242.29,1212.16 1242.87,1212.01 1243.46,1210.59 1244.05,1210.67 1244.63,1211.85 1245.22,1211.88 1245.81,1211.79 1246.39,1210.27 1246.98,1210.37 1247.57,1210.03 1248.15,1209.87 1248.74,1210.86 1249.32,1211.94 1249.91,1211.78 1250.5,1211.4 1251.08,1211.34 1251.67,1211.04 1252.26,1209.68 1252.84,1209.55 1253.43,1209.82 1254.02,1212.31 1254.6,1209.64 1255.19,1207.02 1255.78,1208.24 1256.36,1206.9 1256.95,1205.94 1257.53,1207.65 1258.12,1204.82 1258.71,1206.01 1259.29,1207.46 1259.88,1208.74 1260.47,1207.75 1261.05,1206.54 1261.64,1207.99 1262.23,1209.23 1262.81,1210.87 1263.4,1211.04 1263.98,1210.64 1264.57,1210.62 1265.16,1211.63 1265.74,1210.15 1266.33,1208.62 1266.92,1208.76 1267.5,1208.96 1268.09,1211.82 1268.68,1212.99 1269.26,1213 1269.85,1211.68 1270.44,1209.06 1271.02,1207.92 1271.61,1206.93 1272.19,1207.34 1272.78,1205.21 1273.37,1204.13 1273.95,1206.93 1274.54,1207.11 1275.13,1207.15 1275.71,1208.47 1276.3,1210.45 1276.89,1208.86 1277.47,1210.3 1278.06,1207.58 1278.65,1207.82 1279.23,1209.13 1279.82,1209.32 1280.4,1209.3 1280.99,1206.5 1281.58,1207.91 1282.16,1208.11 1282.75,1210.88 1283.34,1212.29 1283.92,1210.99 1284.51,1213.44 1285.1,1211.69 1285.68,1208.9 1286.27,1210.21 1286.86,1210.27 1287.44,1209.97 1288.03,1212.66 1288.61,1213.75 1289.2,1212.41 1289.79,1209.91 1290.37,1210.85 1290.96,1209.73 1291.55,1207.18 1292.13,1209.58 1292.72,1205.83 1293.31,1207.29 1293.89,1207.38 1294.48,1208.81 1295.06,1208.72 1295.65,1208.78 1296.24,1206.13 1296.82,1203.56 1297.41,1205.02 1298,1206.73 1298.58,1208.39 1299.17,1209.91 1299.76,1210.07 1300.34,1207.48 1300.93,1207.74 1301.52,1209.16 1302.1,1209.45 1302.69,1211.92 1303.27,1209.25 1303.86,1208.02 1304.45,1206.91 1305.03,1208.3 1305.62,1207.06 1306.21,1211.01 1306.79,1210.9 1307.38,1208.41 1307.97,1206.98 1308.55,1205.76 1309.14,1204.69 1309.73,1202.28 1310.31,1204.06 1310.9,1205.78 1311.48,1205.87 1312.07,1211.03 1312.66,1211.04 1313.24,1208.52 1313.83,1208.67 1314.42,1207.37 1315,1208.93 1315.59,1210.27 1316.18,1210.28 1316.76,1210.17 1317.35,1210.3 1317.93,1211.81 1318.52,1210.31 1319.11,1210.15 1319.69,1208.85 1320.28,1207.82 1320.87,1209.44 1321.45,1209.46 1322.04,1209.7 1322.63,1209.75 1323.21,1210.78 1323.8,1209.47 1324.39,1208.33 1324.97,1208.21 1325.56,1208.16 1326.14,1206.98 1326.73,1207.07 1327.32,1206.92 1327.9,1208.33 1328.49,1208.38 1329.08,1208.19 1329.66,1209.33 1330.25,1209.2 1330.84,1207.91 1331.42,1209.11 1332.01,1207.56 1332.6,1209.17 1333.18,1208.17 1333.77,1209.36 1334.35,1209.33 1334.94,1208.2 1335.53,1209.28 1336.11,1209.46 1336.7,1207.88 1337.29,1209.15 1337.87,1212.98 1338.46,1216.43 1339.05,1215 1339.63,1216.95 1340.22,1216.71 1340.8,1217.89 1341.39,1217.64 1341.98,1214.85 1342.56,1209.19 1343.15,1209.33 1343.74,1207.88 1344.32,1208.04 1344.91,1208.13 1345.5,1205.65 1346.08,1204.6 1346.67,1210.37 1347.26,1212.95 1347.84,1211.44 1348.43,1212.51 1349.01,1211.38 1349.6,1211.45 1350.19,1210.24 1350.77,1207.72 1351.36,1202.62 1351.95,1204.43 1352.53,1204.3 1353.12,1205.68 1353.71,1204.59 1354.29,1204.54 1354.88,1203.41 1355.47,1200.99 1356.05,1201.74 1356.64,1202.48 1357.22,1205.3 1357.81,1206.8 1358.4,1210.98 1358.98,1209.62 1359.57,1209.55 1360.16,1209.46 1360.74,1209.43 1361.33,1210.62 1361.92,1207.88 1362.5,1206.58 1363.09,1207.88 1363.68,1206.7 1364.26,1205.27 1364.85,1207.96 1365.43,1208.07 1366.02,1209.31 1366.61,1209.62 1367.19,1212.28 1367.78,1213.58 1368.37,1217.28 1368.95,1218.04 1369.54,1218.77 1370.13,1219.47 1370.71,1217.39 1371.3,1218.06 1371.88,1218.81 1372.47,1217.27 1373.06,1216.79 1373.64,1216.19 1374.23,1214.62 1374.82,1215.89 1375.4,1217.11 1375.99,1217.5 1376.58,1215.76 1377.16,1215.19 1377.75,1214.82 1378.34,1211.66 1378.92,1210.25 1379.51,1210.07 1380.09,1210.24 1380.68,1210.1 1381.27,1209.85 1381.85,1209.78 1382.44,1209.73 1383.03,1211.05 1383.61,1213.76 1384.2,1213.62 1384.79,1214.83 1385.37,1214.51 1385.96,1210.41 1386.55,1209.01 1387.13,1206.4 1387.72,1207.66 1388.3,1206.15 1388.89,1202.28 1389.48,1202.71 1390.06,1202.9 1390.65,1203.48 1391.24,1200.98 1391.82,1200.15 1392.41,1200.47 1393,1199.9 1393.58,1198.98 1394.17,1199.45 1394.75,1198.41 1395.34,1196.43 1395.93,1197.37 1396.51,1196.67 1397.1,1196.09 1397.69,1194.14 1398.27,1197.46 1398.86,1196.6 1399.45,1197.22 1400.03,1198.01 1400.62,1198.52 1401.21,1199.05 1401.79,1200.68 1402.38,1203.87 1402.96,1203.99 1403.55,1201.67 1404.14,1204.86 1404.72,1205.18 1405.31,1206.41 1405.9,1206.68 1406.48,1208.14 1407.07,1209.84 1407.66,1209.8 1408.24,1206.05 1408.83,1206.41 1409.42,1207.75 1410,1207.9 1410.59,1206.5 1411.17,1206.86 1411.76,1209.5 1412.35,1210.95 1412.93,1209.51 1413.52,1209.74 1414.11,1207.1 1414.69,1207.35 1415.28,1208.82 1415.87,1209.04 1416.45,1210.28 1417.04,1209.14 1417.63,1210.43 1418.21,1210.14 1418.8,1212.84 1419.38,1212.7 1419.97,1208.55 1420.56,1208.65 1421.14,1203.63 1421.73,1203.88 1422.32,1204.21 1422.9,1204.55 1423.49,1203.76 1424.08,1201.37 1424.66,1201.67 1425.25,1203.42 1425.83,1203.78 1426.42,1205.43 1427.01,1207.16 1427.59,1207.28 1428.18,1205.98 1428.77,1206.08 1429.35,1207.46 1429.94,1210.19 1430.53,1208.52 1431.11,1211.1 1431.7,1208.53 1432.29,1209.9 1432.87,1208.47 1433.46,1210.04 1434.04,1208.93 1434.63,1211.86 1435.22,1210.4 1435.8,1209.15 1436.39,1210.4 1436.98,1209.1 1437.56,1210.52 1438.15,1211.89 1438.74,1210.4 1439.32,1207.56 1439.91,1207.61 1440.5,1206.26 1441.08,1208.98 1441.67,1208.86 1442.25,1211.5 1442.84,1212.7 1443.43,1213.65 1444.01,1213.64 1444.6,1212.27 1445.19,1209.62 1445.77,1210.95 1446.36,1211.09 1446.95,1211.12 1447.53,1212.12 1448.12,1212.02 1448.7,1215.79 1449.29,1215.52 1449.88,1217.48 1450.46,1217.05 1451.05,1216.55 1451.64,1213.33 1452.22,1213.38 1452.81,1212.88 1453.4,1212.8 1453.98,1211.46 1454.57,1212.55 1455.16,1210.89 1455.74,1208.21 1456.33,1209.3 1456.91,1210.79 1457.5,1213.31 1458.09,1213.02 1458.67,1212.9 1459.26,1214.08 1459.85,1212.43 1460.43,1209.9 1461.02,1211.41 1461.61,1212.65 1462.19,1213.68 1462.78,1217.45 1463.37,1210.45 1463.95,1209.03 1464.54,1209.05 1465.12,1208.02 1465.71,1209.46 1466.3,1208.22 1466.88,1208.19 1467.47,1210.76 1468.06,1209.45 1468.64,1208.24 1469.23,1205.62 1469.82,1205.92 1470.4,1203.43 1470.99,1203.59 1471.57,1205.21 1472.16,1205.73 1472.75,1209.62 1473.33,1209.43 1473.92,1209.66 1474.51,1209.73 1475.09,1209.82 1475.68,1212.31 1476.27,1211.01 1476.85,1213.63 1477.44,1217.23 1478.03,1217.82 1478.61,1218.89 1479.2,1215.62 1479.78,1215.09 1480.37,1218.64 1480.96,1217.9 1481.54,1217.61 1482.13,1217.02 1482.72,1216.94 1483.3,1217.79 1483.89,1218.73 1484.48,1216.93 1485.06,1217.68 1485.65,1219.81 1486.24,1220.57 1486.82,1218.72 1487.41,1216.76 1487.99,1217.34 1488.58,1216.81 1489.17,1216.51 1489.75,1216.35 1490.34,1214.73 1490.93,1215.98 1491.51,1213 1492.1,1214.32 1492.69,1212.71 1493.27,1207.16 1493.86,1207.56 1494.45,1210.22 1495.03,1208.68 1495.62,1208.78 1496.2,1210.06 1496.79,1215.18 1497.38,1214.66 1497.96,1214.57 1498.55,1214.4 1499.14,1214.13 1499.72,1215.03 1500.31,1212.09 1500.9,1213.31 1501.48,1211.59 1502.07,1211.29 1502.65,1211.08 1503.24,1209.45 1503.83,1209.16 1504.41,1209.19 1505,1209.07 1505.59,1208.17 1506.17,1208.07 1506.76,1209.5 1507.35,1209.71 1507.93,1209.63 1508.52,1206.92 1509.11,1207.31 1509.69,1206.04 1510.28,1203.47 1510.86,1202.6 1511.45,1202.96 1512.04,1203.32 1512.62,1206.59 1513.21,1206.88 1513.8,1207.29 1514.38,1208.75 1514.97,1207.51 1515.56,1209.79 1516.14,1209.9 1516.73,1208.58 1517.32,1208.66 1517.9,1203.54 1518.49,1202.42 1519.07,1201.25 1519.66,1203 1520.25,1202.29 1520.83,1202.54 1521.42,1199.01 1522.01,1198.56 1522.59,1199.47 1523.18,1202.73 1523.77,1201.51 1524.35,1199.43 1524.94,1203.91 1525.52,1206.83 1526.11,1204.25 1526.7,1205.79 1527.28,1205.92 1527.87,1208.99 1528.46,1206.31 1529.04,1206.35 1529.63,1206.56 1530.22,1205.43 1530.8,1208.35 1531.39,1208.6 1531.98,1207.62 1532.56,1209.11 1533.15,1209 1533.73,1211.87 1534.32,1215.25 1534.91,1212.26 1535.49,1210.57 1536.08,1207.78 1536.67,1207.56 1537.25,1207.57 1537.84,1207.9 1538.43,1209.32 1539.01,1209.09 1539.6,1207.68 1540.19,1206.39 1540.77,1203.99 1541.36,1204.51 1541.94,1205.81 1542.53,1208.6 1543.12,1207.2 1543.7,1208.49 1544.29,1208.63 1544.88,1209.86 1545.46,1208.41 1546.05,1204.55 1546.64,1206.15 1547.22,1206.36 1547.81,1210.56 1548.4,1210.32 1548.98,1208.95 1549.57,1212.81 1550.15,1216.39 1550.74,1216.04 1551.33,1214.6 1551.91,1212.71 1552.5,1209.97 1553.09,1209.99 1553.67,1210.06 1554.26,1209.76 1554.85,1207.21 1555.43,1204.94 1556.02,1205.21 1556.6,1202.51 1557.19,1202.68 1557.78,1201.92 1558.36,1203.67 1558.95,1208.15 1559.54,1209.34 1560.12,1209.16 1560.71,1209.26 1561.3,1210.67 1561.88,1210.73 1562.47,1216.12 1563.06,1213.3 1563.64,1214.52 1564.23,1216.94 1564.81,1216.43 1565.4,1217.14 1565.99,1214.13 1566.57,1211.35 1567.16,1209.85 1567.75,1209.87 1568.33,1211.21 1568.92,1212.15 1569.51,1211.96 1570.09,1210.52 1570.68,1207.72 1571.27,1205.04 1571.85,1207.78 1572.44,1207.8 1573.02,1207.88 1573.61,1210.64 1574.2,1210.45 1574.78,1214.37 1575.37,1213.95 1575.96,1212.72 1576.54,1212.03 1577.13,1210.21 1577.72,1209.04 1578.3,1206.3 1578.89,1207.78 1579.47,1207.6 1580.06,1209 1580.65,1212.92 1581.23,1211.58 1581.82,1212.66 1582.41,1214 1582.99,1215.12 1583.58,1212.24 1584.17,1211.88 1584.75,1214.27 1585.34,1214.1 1585.93,1215.21 1586.51,1212.45 1587.1,1212.32 1587.68,1216.26 1588.27,1214.36 1588.86,1212.88 1589.44,1211.66 1590.03,1211.18 1590.62,1211.28 1591.2,1209.93 1591.79,1209.94 1592.38,1208.86 1592.96,1206.25 1593.55,1209.22 1594.14,1207.85 1594.72,1206.62 1595.31,1205.33 1595.89,1205.6 1596.48,1201.84 1597.07,1202.3 1597.65,1205.34 1598.24,1202.94 1598.83,1203.2 1599.41,1203.66 1600,1204.04 1600.59,1204.28 1601.17,1203.45 1601.76,1206.08 1602.34,1207.58 1602.93,1209.28 1603.52,1208.12 1604.1,1205.84 1604.69,1205.97 1605.28,1206 1605.86,1207.44 1606.45,1207.6 1607.04,1207.85 1607.62,1209.07 1608.21,1211.72 1608.8,1211.53 1609.38,1215.42 1609.97,1214.97 1610.55,1216 1611.14,1215.88 1611.73,1215.59 1612.31,1214.1 1612.9,1211.39 1613.49,1210.17 1614.07,1207.49 1614.66,1207.68 1615.25,1208.82 1615.83,1210.43 1616.42,1210.4 1617.01,1208.82 1617.59,1210.33 1618.18,1211.46 1618.76,1211.66 1619.35,1209.11 1619.94,1210.17 1620.52,1208.82 1621.11,1210.06 1621.7,1211.53 1622.28,1213.97 1622.87,1215.14 1623.46,1216.09 1624.04,1211.93 1624.63,1214.31 1625.22,1211.46 1625.8,1207.35 1626.39,1206.13 1626.97,1204.98 1627.56,1201.05 1628.15,1203.95 1628.73,1206.62 1629.32,1201.86 1629.91,1200.74 1630.49,1201.17 1631.08,1201.52 1631.67,1201.66 1632.25,1202.1 1632.84,1201.39 1633.42,1201.82 1634.01,1199.72 1634.6,1200.46 1635.18,1202.19 1635.77,1205.45 1636.36,1205.65 1636.94,1208.29 1637.53,1209.69 1638.12,1209.41 1638.7,1206.97 1639.29,1205.57 1639.88,1208.13 1640.46,1206.78 1641.05,1209.43 1641.63,1209.24 1642.22,1206.67 1642.81,1206.72 1643.39,1207.02 1643.98,1205.84 1644.57,1204.62 1645.15,1205.12 1645.74,1209.49 1646.33,1211.03 1646.91,1209.66 1647.5,1209.5 1648.09,1210.75 1648.67,1214.6 1649.26,1214.25 1649.84,1212.58 1650.43,1212.47 1651.02,1213.54 1651.6,1214.69 1652.19,1215.6 1652.78,1215.44 1653.36,1215.1 1653.95,1213.76 1654.54,1213.75 1655.12,1210.76 1655.71,1209.54 1656.29,1214.87 1656.88,1214.61 1657.47,1215.51 1658.05,1212.65 1658.64,1212.6 1659.23,1213.66 1659.81,1213.33 1660.4,1211.89 1660.99,1211.65 1661.57,1210.07 1662.16,1211.31 1662.75,1210.03 1663.33,1207.77 1663.92,1207.89 1664.5,1208.07 1665.09,1210.75 1665.68,1209.44 1666.26,1209.6 1666.85,1209.51 1667.44,1208.18 1668.02,1208.36 1668.61,1208.72 1669.2,1212.72 1669.78,1212.6 1670.37,1212.45 1670.96,1211.25 1671.54,1212.3 1672.13,1210.64 1672.71,1210.2 1673.3,1211.54 1673.89,1211.83 1674.47,1210.38 1675.06,1210.24 1675.65,1210.2 1676.23,1210.15 1676.82,1211.57 1677.41,1210.37 1677.99,1209.22 1678.58,1210.68 1679.17,1211.85 1679.75,1213.11 1680.34,1212.97 1680.92,1214.03 1681.51,1215.36 1682.1,1216.07 1682.68,1215.76 1683.27,1215.1 1683.86,1215.02 1684.44,1217.34 1685.03,1216.71 1685.62,1215.2 1686.2,1214.96 1686.79,1214.72 1687.37,1214.41 1687.96,1214.42 1688.55,1212.8 1689.13,1212.56 1689.72,1211.39 1690.31,1211.51 1690.89,1212.86 1691.48,1211.4 1692.07,1211.16 1692.65,1211.31 1693.24,1212.27 1693.83,1212.12 1694.41,1211.86 1695,1213.2 1695.58,1213.15 1696.17,1211.53 1696.76,1212.95 1697.34,1211.23 1697.93,1208.06 1698.52,1205.7 1699.1,1204.5 1699.69,1203.41 1700.28,1204.97 1700.86,1205.34 1701.45,1206.69 1702.04,1204.18 1702.62,1205.76 1703.21,1205.94 1703.79,1204.86 1704.38,1205.03 1704.97,1206.29 1705.55,1208.97 1706.14,1207.54 1706.73,1206.27 1707.31,1206.28 1707.9,1203.6 1708.49,1201.53 1709.07,1200.85 1709.66,1199.78 1710.24,1197.77 1710.83,1197.01 1711.42,1196.35 1712,1195.41 1712.59,1197.61 1713.18,1197.29 1713.76,1196.71 1714.35,1198.44 1714.94,1201.83 1715.52,1203.56 1716.11,1203.83 1716.7,1204.23 1717.28,1203.1 1717.87,1201.87 1718.45,1205.06 1719.04,1206.48 1719.63,1206.69 1720.21,1204.1 1720.8,1204.63 1721.39,1205.14 1721.97,1206.46 1722.56,1206.66 1723.15,1208.13 1723.73,1208.44 1724.32,1204.68 1724.91,1199.45 1725.49,1199.95 1726.08,1200.37 1726.66,1203.32 1727.25,1205.09 1727.84,1204.04 1728.42,1202.96 1729.01,1205.73 1729.6,1204.69 1730.18,1206.2 1730.77,1205.04 1731.36,1206.35 1731.94,1206.62 1732.53,1206.52 1733.11,1207.97 1733.7,1210.7 1734.29,1213.27 1734.87,1214.59 1735.46,1211.74 1736.05,1209.04 1736.63,1210.02 1737.22,1210.04 1737.81,1208.9 1738.39,1207.42 1738.98,1209.93 1739.57,1207.32 1740.15,1210.13 1740.74,1208.82 1741.32,1207.48 1741.91,1206.1 1742.5,1206.37 1743.08,1203.9 1743.67,1204.33 1744.26,1204.72 1744.84,1203.79 1745.43,1205.54 1746.02,1205.74 1746.6,1204.69 1747.19,1207.72 1747.78,1210.34 1748.36,1211.53 1748.95,1213.98 1749.53,1214.96 1750.12,1210.77 1750.71,1209.23 1751.29,1209.08 1751.88,1209.33 1752.47,1210.54 1753.05,1212.04 1753.64,1213.22 1754.23,1212.98 1754.81,1211.37 1755.4,1211.08 1755.99,1211.14 1756.57,1212.36 1757.16,1210.97 1757.74,1212.13 1758.33,1211.88 1758.92,1210.08 1759.5,1208.64 1760.09,1207.3 1760.68,1207.42 1761.26,1211.21 1761.85,1213.55 1762.44,1217.12 1763.02,1211.32 1763.61,1208.36 1764.19,1210.98 1764.78,1210.86 1765.37,1208.42 1765.95,1208.38 1766.54,1209.72 1767.13,1210.9 1767.71,1209.57 1768.3,1209.28 1768.89,1209.24 1769.47,1210.72 1770.06,1212.26 1770.65,1209.68 1771.23,1208.33 1771.82,1209.85 1772.4,1205.76 1772.99,1209.77 1773.58,1208.6 1774.16,1207.45 1774.75,1206.26 1775.34,1207.53 1775.92,1210.21 1776.51,1206.55 1777.1,1208.03 1777.68,1208.34 1778.27,1208.47 1778.86,1205.85 1779.44,1207.39 1780.03,1208.43 1780.61,1208.32 1781.2,1208.55 1781.79,1210.03 1782.37,1210.06 1782.96,1210.08 1783.55,1210.1 1784.13,1212.97 1784.72,1213.28 1785.31,1214.53 1785.89,1215.75 1786.48,1214.25 1787.06,1212.72 1787.65,1210.03 1788.24,1208.92 1788.82,1207.3 1789.41,1208.54 1790,1208.56 1790.58,1207.05 1791.17,1212.43 1791.76,1211.2 1792.34,1212.56 1792.93,1212.44 1793.52,1213.58 1794.1,1217.16 1794.69,1215.37 1795.27,1215.03 1795.86,1215.86 1796.45,1215.44 1797.03,1216.34 1797.62,1214.41 1798.21,1215.32 1798.79,1214.83 1799.38,1218.5 1799.97,1218.21 1800.55,1215.49 1801.14,1215.07 1801.73,1213.43 1802.31,1213.23 1802.9,1209.08 1803.48,1211.79 1804.07,1211.42 1804.66,1208.61 1805.24,1209.89 1805.83,1212.37 1806.42,1210.8 1807,1210.78 1807.59,1210.71 1808.18,1210.48 1808.76,1210.51 1809.35,1209.17 1809.94,1207.87 1810.52,1205.05 1811.11,1206.62 1811.69,1207.91 1812.28,1208.21 1812.87,1205.56 1813.45,1205.48 1814.04,1206.65 1814.63,1208.02 1815.21,1208.21 1815.8,1209.69 1816.39,1211.06 1816.97,1208.41 1817.56,1206.78 1818.14,1206.6 1818.73,1206.54 1819.32,1206.86 1819.9,1205.79 1820.49,1208.47 1821.08,1207.19 1821.66,1207.73 1822.25,1207.98 1822.84,1209.42 1823.42,1206.69 1824.01,1206.82 1824.6,1203.92 1825.18,1204.19 1825.77,1204.37 1826.35,1204.58 1826.94,1208.68 1827.53,1207.27 1828.11,1205.9 1828.7,1206.26 1829.29,1209.08 1829.87,1209.04 1830.46,1210.37 1831.05,1210.5 1831.63,1210.59 1832.22,1213.37 1832.81,1212.74 1833.39,1213.93 1833.98,1210.96 1834.56,1209.49 1835.15,1209.33 1835.74,1209.27 1836.32,1209.29 1836.91,1205.23 1837.5,1206.88 1838.08,1208.69 1838.67,1205.94 1839.26,1207.16 1839.84,1207.57 1840.43,1209.06 1841.01,1210.43 1841.6,1210.3 1842.19,1210.36 1842.77,1211.65 1843.36,1210.19 1843.95,1209.99 1844.53,1210.3 1845.12,1207.52 1845.71,1208.82 1846.29,1208.81 1846.88,1208.74 1847.47,1211.27 1848.05,1211.18 1848.64,1209.8 1849.22,1209.79 1849.81,1206.91 1850.4,1209.61 1850.98,1211.14 1851.57,1210.84 1852.16,1213.14 1852.74,1213.03 1853.33,1210.28 1853.92,1210.28 1854.5,1207.8 1855.09,1210.39 1855.68,1211.41 1856.26,1212.62 1856.85,1211.34 1857.43,1211.55 1858.02,1211.37 1858.61,1207.13 1859.19,1205.7 1859.78,1207.13 1860.37,1206.01 1860.95,1206.28 1861.54,1206.69 1862.13,1206.91 1862.71,1206.85 1863.3,1207.29 1863.88,1206.29 1864.47,1204.97 1865.06,1205.04 1865.64,1204.97 1866.23,1206.68 1866.82,1208.08 1867.4,1208.36 1867.99,1208.69 1868.58,1209.79 1869.16,1208.84 1869.75,1208.78 1870.34,1208.93 1870.92,1208.84 1871.51,1208.75 1872.09,1208.54 1872.68,1206.05 1873.27,1207.64 1873.85,1206.45 1874.44,1203.94 1875.03,1204.26 1875.61,1205.81 1876.2,1204.59 1876.79,1203.73 1877.37,1205.31 1877.96,1205.45 1878.55,1208.35 1879.13,1207.32 1879.72,1208.74 1880.3,1209.18 1880.89,1208.14 1881.48,1208.17 1882.06,1209.45 1882.65,1209.26 1883.24,1206.62 1883.82,1207.97 1884.41,1207.93 1885,1211.68 1885.58,1211.67 1886.17,1211.72 1886.76,1210.5 1887.34,1207.89 1887.93,1207.92 1888.51,1208.13 1889.1,1209.74 1889.69,1210.93 1890.27,1209.86 1890.86,1212.33 1891.45,1211.96 1892.03,1210.41 1892.62,1210.31 1893.21,1211.37 1893.79,1211.56 1894.38,1211.49 1894.96,1211.4 1895.55,1209.64 1896.14,1209.34 1896.72,1209 1897.31,1212.92 1897.9,1213.89 1898.48,1208.76 1899.07,1207.62 1899.66,1207.62 1900.24,1207.79 1900.83,1211.61 1901.42,1212.62 1902,1211.2 1902.59,1209.77 1903.17,1213.84 1903.76,1211.04 1904.35,1211.23 1904.93,1210.01 1905.52,1211.4 1906.11,1215.19 1906.69,1213.76 1907.28,1214.81 1907.87,1214.37 1908.45,1215.5 1909.04,1215 1909.63,1213.03 1910.21,1217.03 1910.8,1215.25 1911.38,1217.77 1911.97,1217.52 1912.56,1216.81 1913.14,1215.13 1913.73,1217.3 1914.32,1217.03 1914.9,1218.13 1915.49,1218.79 1916.08,1219.51 1916.66,1220.36 1917.25,1219.64 1917.83,1219.34 1918.42,1218.96 1919.01,1218.59 1919.59,1219.36 1920.18,1216.28 1920.77,1215.49 1921.35,1215.07 1921.94,1212.34 1922.53,1207.89 1923.11,1209.26 1923.7,1206.6 1924.29,1205.44 1924.87,1204.23 1925.46,1204.63 1926.04,1206.21 1926.63,1206.46 1927.22,1205.48 1927.8,1205.7 1928.39,1204.69 1928.98,1206.19 1929.56,1206.55 1930.15,1204.02 1930.74,1205.22 1931.32,1201.33 1931.91,1201.87 1932.5,1200.85 1933.08,1201.23 1933.67,1199.11 1934.25,1200.92 1934.84,1202.57 1935.43,1202.8 1936.01,1205.78 1936.6,1205.79 1937.19,1207.16 1937.77,1208.6 1938.36,1208.46 1938.95,1208.53 1939.53,1208.72 1940.12,1206.41 1940.71,1206.47 1941.29,1206.76 1941.88,1207.79 1942.46,1206.32 1943.05,1206.36 1943.64,1207.62 1944.22,1206.51 1944.81,1206.61 1945.4,1204.14 1945.98,1205.67 1946.57,1207.28 1947.16,1207.35 1947.74,1214.09 1948.33,1212.88 1948.91,1213.9 1949.5,1216.38 1950.09,1218.41 1950.67,1216.41 1951.26,1214.71 1951.85,1214.25 1952.43,1213.83 1953.02,1213.82 1953.61,1213.61 1954.19,1213.49 1954.78,1214.59 1955.37,1217.04 1955.95,1217.83 1956.54,1212.35 1957.12,1211.2 1957.71,1207.06 1958.3,1209.85 1958.88,1209.94 1959.47,1211.19 1960.06,1210.9 1960.64,1209.52 1961.23,1207.99 1961.82,1207.99 1962.4,1206.7 1962.99,1205.17 1963.58,1206.63 1964.16,1208.08 1964.75,1212.18 1965.33,1210.84 1965.92,1210.8 1966.51,1211.84 1967.09,1208.11 1967.68,1206.91 1968.27,1206.91 1968.85,1207.17 1969.44,1208.52 1970.03,1207.2 1970.61,1208.66 1971.2,1208.53 1971.78,1208.73 1972.37,1208.82 1972.96,1208.87 1973.54,1210.09 1974.13,1212.62 1974.72,1215.02 1975.3,1213.3 1975.89,1211.82 1976.48,1212.75 1977.06,1215.2 1977.65,1210.86 1978.24,1210.58 1978.82,1210.61 1979.41,1213.3 1979.99,1214.52 1980.58,1214.47 1981.17,1214.17 1981.75,1214 1982.34,1214.98 1982.93,1214.44 1983.51,1213.88 1984.1,1212 1984.69,1213.27 1985.27,1213.02 1985.86,1213.81 1986.45,1216.17 1987.03,1213.25 1987.62,1214.47 1988.2,1215.52 1988.79,1215.27 1989.38,1213.82 1989.96,1210.79 1990.55,1213.28 1991.14,1213.27 1991.72,1212.87 1992.31,1214.1 1992.9,1213.86 1993.48,1212.38 1994.07,1210.92 1994.65,1208.27 1995.24,1208.31 1995.83,1208.36 1996.41,1208.14 1997,1205.21 1997.59,1203.99 1998.17,1205.42 1998.76,1204.07 1999.35,1204.42 1999.93,1203.44 2000.52,1206.56 2001.11,1207.88 2001.69,1207.96 2002.28,1203.95 2002.86,1204.52 2003.45,1204.45 2004.04,1204.5 2004.62,1203.37 2005.21,1204.82 2005.8,1203.53 2006.38,1203.77 2006.97,1202.76 2007.56,1200.57 2008.14,1200.8 2008.73,1201.13 2009.32,1202.53 2009.9,1200.64 2010.49,1201.24 2011.07,1200.32 2011.66,1202.59 2012.25,1204.5 2012.83,1206.53 2013.42,1205.48 2014.01,1205.56 2014.59,1208.3 2015.18,1204.48 2015.77,1203.37 2016.35,1203.6 2016.94,1205.27 2017.53,1208.23 2018.11,1208.18 2018.7,1209.48 2019.28,1209.32 2019.87,1210.63 2020.46,1213.24 2021.04,1213.05 2021.63,1213.87 2022.22,1213.97 2022.8,1213.99 2023.39,1216.05 2023.98,1215.72 2024.56,1213.08 2025.15,1214.32 2025.73,1212.72 2026.32,1207.04 2026.91,1208.54 2027.49,1210.08 2028.08,1211.37 2028.67,1213.75 2029.25,1212.61 2029.84,1214.95 2030.43,1214.53 2031.01,1214.37 2031.6,1212.75 2032.19,1211.06 2032.77,1211.06 2033.36,1213.33 2033.94,1209.37 2034.53,1209.46 2035.12,1206.75 2035.7,1206.81 2036.29,1205.47 2036.88,1205.83 2037.46,1205.8 2038.05,1206.02 2038.64,1207.44 2039.22,1206.37 2039.81,1205.39 2040.4,1205.4 2040.98,1205.75 2041.57,1203.18 2042.15,1203.28 2042.74,1202.53 2043.33,1202.93 2043.91,1204.42 2044.5,1201.73 2045.09,1203.13 2045.67,1204.64 2046.26,1206.33 2046.85,1207.97 2047.43,1205.45 2048.02,1206.84 2048.6,1209.49 2049.19,1209.47 2049.78,1212.23 2050.36,1212.2 2050.95,1211.87 2051.54,1210.32 2052.12,1209.23 2052.71,1210.52 2053.3,1211.85 2053.88,1210.62 2054.47,1212.01 2055.06,1211.89 2055.64,1209.33 2056.23,1210.4 2056.81,1208.86 2057.4,1211.37 2057.99,1213.76 2058.57,1213.61 2059.16,1214.52 2059.75,1210.43 2060.33,1209.12 2060.92,1210.2 2061.51,1210.38 2062.09,1210.27 2062.68,1211.59 2063.27,1210.41 2063.85,1214.2 2064.44,1212.8 2065.02,1211.32 2065.61,1211.38 2066.2,1212.69 2066.78,1211.05 2067.37,1213.22 2067.96,1212.78 2068.54,1215 2069.13,1213.51 2069.72,1210.48 2070.3,1211.51 2070.89,1212.6 2071.48,1212.54 2072.06,1212.31 2072.65,1212.33 2073.23,1209.5 2073.82,1208.3 2074.41,1206.96 2074.99,1205.93 2075.58,1208.65 2076.17,1207.38 2076.75,1207.73 2077.34,1207.9 2077.93,1206.89 2078.51,1206.92 2079.1,1207.07 2079.68,1207.08 2080.27,1204.51 2080.86,1203.44 2081.44,1203.76 2082.03,1204.05 2082.62,1203.07 2083.2,1201.8 2083.79,1204.72 2084.38,1206.15 2084.96,1204.81 2085.55,1206.41 2086.14,1205.44 2086.72,1203.15 2087.31,1207.22 2087.89,1208.52 2088.48,1208.73 2089.07,1206.33 2089.65,1207.03 2090.24,1207.22 2090.83,1208.35 2091.41,1208.47 2092,1209.76 2092.59,1209.59 2093.17,1207.98 2093.76,1210.55 2094.35,1212.05 2094.93,1211.86 2095.52,1211.78 2096.1,1211.83 2096.69,1211.55 2097.28,1214.08 2097.86,1212.6 2098.45,1212.51 2099.04,1212.5 2099.62,1210.74 2100.21,1212.17 2100.8,1211.9 2101.38,1210.21 2101.97,1209.02 2102.55,1208.92 2103.14,1206.25 2103.73,1204.94 2104.31,1205.27 2104.9,1208.06 2105.49,1207.94 2106.07,1206.52 2106.66,1207.98 2107.25,1207.92 2107.83,1208.06 2108.42,1210.45 2109.01,1210.27 2109.59,1210.36 2110.18,1206.01 2110.76,1204.97 2111.35,1206.45 2111.94,1206.6 2112.52,1206.61 2113.11,1206.78 2113.7,1208.46 2114.28,1208.52 2114.87,1208.4 2115.46,1208.35 2116.04,1208.37 2116.63,1202.94 2117.22,1201.88 2117.8,1202.41 2118.39,1200.07 2118.97,1202.96 2119.56,1204.42 2120.15,1202.23 2120.73,1202.43 2121.32,1204.11 2121.91,1205.56 2122.49,1203.17 2123.08,1203.61 2123.67,1205.21 2124.25,1206.54 2124.84,1208.23 2125.42,1211.2 2126.01,1211 2126.6,1208.26 2127.18,1207.15 2127.77,1208.61 2128.36,1208.66 2128.94,1208.85 2129.53,1208.8 2130.12,1208.88 2130.7,1211.28 2131.29,1212.65 2131.88,1212.58 2132.46,1211.08 2133.05,1210.91 2133.63,1209.36 2134.22,1209.35 2134.81,1209.46 2135.39,1210.55 2135.98,1210.42 2136.57,1210.11 2137.15,1211.09 2137.74,1208.32 2138.33,1207.08 2138.91,1209.63 2139.5,1212.05 2140.09,1210.48 2140.67,1210.26 2141.26,1210.26 2141.84,1209.94 2142.43,1211.37 2143.02,1209.72 2143.6,1209.73 2144.19,1209.55 2144.78,1210.82 2145.36,1210.53 2145.95,1207.82 2146.54,1209.28 2147.12,1210.48 2147.71,1207.85 2148.3,1207.99 2148.88,1208.01 2149.47,1207.78 2150.05,1205.29 2150.64,1205.44 2151.23,1205.34 2151.81,1206.81 2152.4,1206.78 2152.99,1205.61 2153.57,1205.96 2154.16,1206.11 2154.75,1206.1 2155.33,1206.39 2155.92,1209.16 2156.5,1207.88 2157.09,1210.61 2157.68,1211.9 2158.26,1210.37 \"/>\n<path clip-path=\"url(#clip392)\" d=\"M986.025 1209.83 L986.612 1209.83 L987.198 1209.83 L987.785 1209.83 L988.371 1209.83 L988.957 1209.83 L989.544 1209.83 L990.13 1209.83 L990.717 1209.83 L991.303 1209.83 L991.889 1209.83 L992.476 1209.83 L993.062 1209.83 L993.649 1209.83 L994.235 1209.83 L994.822 1209.83 L995.408 1209.83 L995.994 1209.83 L996.581 1209.83 L997.167 1209.83 L997.754 1209.83 L998.34 1209.83 L998.926 1209.83 L999.513 1209.83 L1000.1 1209.83 L1000.69 1209.83 L1001.27 1209.83 L1001.86 1209.83 L1002.44 1209.83 L1003.03 1209.83 L1003.62 1209.83 L1004.2 1209.83 L1004.79 1209.83 L1005.38 1209.83 L1005.96 1209.83 L1006.55 1209.83 L1007.14 1209.83 L1007.72 1209.83 L1008.31 1209.83 L1008.9 1209.83 L1009.48 1209.83 L1010.07 1209.83 L1010.65 1209.83 L1011.24 1209.83 L1011.83 1209.83 L1012.41 1209.83 L1013 1209.83 L1013.59 1209.83 L1014.17 1209.83 L1014.76 1209.83 L1015.35 1209.83 L1015.93 1209.83 L1016.52 1209.83 L1017.11 1209.83 L1017.69 1209.83 L1018.28 1209.83 L1018.86 1209.83 L1019.45 1209.83 L1020.04 1209.83 L1020.62 1209.83 L1021.21 1209.83 L1021.8 1209.83 L1022.38 1209.83 L1022.97 1209.83 L1023.56 1209.83 L1024.14 1209.83 L1024.73 1209.83 L1025.32 1209.83 L1025.9 1209.83 L1026.49 1209.83 L1027.07 1209.83 L1027.66 1209.83 L1028.25 1209.83 L1028.83 1209.83 L1029.42 1209.83 L1030.01 1209.83 L1030.59 1209.83 L1031.18 1209.83 L1031.77 1209.83 L1032.35 1209.83 L1032.94 1209.83 L1033.52 1209.83 L1034.11 1209.83 L1034.7 1209.83 L1035.28 1209.83 L1035.87 1209.83 L1036.46 1209.83 L1037.04 1209.83 L1037.63 1209.83 L1038.22 1209.83 L1038.8 1209.83 L1039.39 1209.83 L1039.98 1209.83 L1040.56 1209.83 L1041.15 1209.83 L1041.73 1209.83 L1042.32 1209.83 L1042.91 1209.83 L1043.49 1209.83 L1044.08 1209.83 L1044.67 1209.83 L1045.25 1209.83 L1045.84 1209.83 L1046.43 1209.83 L1047.01 1209.83 L1047.6 1209.83 L1048.19 1209.83 L1048.77 1209.83 L1049.36 1209.83 L1049.94 1209.83 L1050.53 1209.83 L1051.12 1209.83 L1051.7 1209.83 L1052.29 1209.83 L1052.88 1209.83 L1053.46 1209.83 L1054.05 1209.83 L1054.64 1209.83 L1055.22 1209.83 L1055.81 1209.83 L1056.39 1209.83 L1056.98 1209.83 L1057.57 1209.83 L1058.15 1209.83 L1058.74 1209.83 L1059.33 1209.83 L1059.91 1209.83 L1060.5 1209.83 L1061.09 1209.83 L1061.67 1209.83 L1062.26 1209.83 L1062.85 1209.83 L1063.43 1209.83 L1064.02 1209.83 L1064.6 1209.83 L1065.19 1209.83 L1065.78 1209.83 L1066.36 1209.83 L1066.95 1209.83 L1067.54 1209.83 L1068.12 1209.83 L1068.71 1209.83 L1069.3 1209.83 L1069.88 1209.83 L1070.47 1209.83 L1071.06 1209.83 L1071.64 1209.83 L1072.23 1209.83 L1072.81 1209.83 L1073.4 1209.83 L1073.99 1209.83 L1074.57 1209.83 L1075.16 1209.83 L1075.75 1209.83 L1076.33 1209.83 L1076.92 1209.83 L1077.51 1209.83 L1078.09 1209.83 L1078.68 1209.83 L1079.26 1209.83 L1079.85 1209.83 L1080.44 1209.83 L1081.02 1209.83 L1081.61 1209.83 L1082.2 1209.83 L1082.78 1209.83 L1083.37 1209.83 L1083.96 1209.83 L1084.54 1209.83 L1085.13 1209.83 L1085.72 1209.83 L1086.3 1209.83 L1086.89 1209.83 L1087.47 1209.83 L1088.06 1209.83 L1088.65 1209.83 L1089.23 1209.83 L1089.82 1209.83 L1090.41 1209.83 L1090.99 1209.83 L1091.58 1209.83 L1092.17 1209.83 L1092.75 1209.83 L1093.34 1209.83 L1093.93 1209.83 L1094.51 1209.83 L1095.1 1209.83 L1095.68 1209.83 L1096.27 1209.83 L1096.86 1209.83 L1097.44 1209.83 L1098.03 1209.83 L1098.62 1209.83 L1099.2 1209.83 L1099.79 1209.83 L1100.38 1209.83 L1100.96 1209.83 L1101.55 1209.83 L1102.14 1209.83 L1102.72 1209.83 L1103.31 1209.83 L1103.89 1209.83 L1104.48 1209.83 L1105.07 1209.83 L1105.65 1209.83 L1106.24 1209.83 L1106.83 1209.83 L1107.41 1209.83 L1108 1209.83 L1108.59 1209.83 L1109.17 1209.83 L1109.76 1209.83 L1110.34 1209.83 L1110.93 1209.83 L1111.52 1209.83 L1112.1 1209.83 L1112.69 1209.83 L1113.28 1209.83 L1113.86 1209.83 L1114.45 1209.83 L1115.04 1209.83 L1115.62 1209.83 L1116.21 1209.83 L1116.8 1209.83 L1117.38 1209.83 L1117.97 1209.83 L1118.55 1209.83 L1119.14 1209.83 L1119.73 1209.83 L1120.31 1209.83 L1120.9 1209.83 L1121.49 1209.83 L1122.07 1209.83 L1122.66 1209.83 L1123.25 1209.83 L1123.83 1209.83 L1124.42 1209.83 L1125.01 1209.83 L1125.59 1209.83 L1126.18 1209.83 L1126.76 1209.83 L1127.35 1209.83 L1127.94 1209.83 L1128.52 1209.83 L1129.11 1209.83 L1129.7 1209.83 L1130.28 1209.83 L1130.87 1209.83 L1131.46 1209.83 L1132.04 1209.83 L1132.63 1209.83 L1133.21 1209.83 L1133.8 1209.83 L1134.39 1209.83 L1134.97 1209.83 L1135.56 1209.83 L1136.15 1209.83 L1136.73 1209.83 L1137.32 1209.83 L1137.91 1209.83 L1138.49 1209.83 L1139.08 1209.83 L1139.67 1209.83 L1140.25 1209.83 L1140.84 1209.83 L1141.42 1209.83 L1142.01 1209.83 L1142.6 1209.83 L1143.18 1209.83 L1143.77 1209.83 L1144.36 1209.83 L1144.94 1209.83 L1145.53 1209.83 L1146.12 1209.83 L1146.7 1209.83 L1147.29 1209.83 L1147.88 1209.83 L1148.46 1209.83 L1149.05 1209.83 L1149.63 1209.83 L1150.22 1209.83 L1150.81 1209.83 L1151.39 1209.83 L1151.98 1209.83 L1152.57 1209.83 L1153.15 1209.83 L1153.74 1209.83 L1154.33 1209.83 L1154.91 1209.83 L1155.5 1209.83 L1156.09 1209.83 L1156.67 1209.83 L1157.26 1209.83 L1157.84 1209.83 L1158.43 1209.83 L1159.02 1209.83 L1159.6 1209.83 L1160.19 1209.83 L1160.78 1209.83 L1161.36 1209.83 L1161.95 1209.83 L1162.54 1209.83 L1163.12 1209.83 L1163.71 1209.83 L1164.29 1209.83 L1164.88 1209.83 L1165.47 1209.83 L1166.05 1209.83 L1166.64 1209.83 L1167.23 1209.83 L1167.81 1209.83 L1168.4 1209.83 L1168.99 1209.83 L1169.57 1209.83 L1170.16 1209.83 L1170.75 1209.83 L1171.33 1209.83 L1171.92 1209.83 L1172.5 1209.83 L1173.09 1209.83 L1173.68 1209.83 L1174.26 1209.83 L1174.85 1209.83 L1175.44 1209.83 L1176.02 1209.83 L1176.61 1209.83 L1177.2 1209.83 L1177.78 1209.83 L1178.37 1209.83 L1178.96 1209.83 L1179.54 1209.83 L1180.13 1209.83 L1180.71 1209.83 L1181.3 1209.83 L1181.89 1209.83 L1182.47 1209.83 L1183.06 1209.83 L1183.65 1209.83 L1184.23 1209.83 L1184.82 1209.83 L1185.41 1209.83 L1185.99 1209.83 L1186.58 1209.83 L1187.16 1209.83 L1187.75 1209.83 L1188.34 1209.83 L1188.92 1209.83 L1189.51 1209.83 L1190.1 1209.83 L1190.68 1209.83 L1191.27 1209.83 L1191.86 1209.83 L1192.44 1209.83 L1193.03 1209.83 L1193.62 1209.83 L1194.2 1209.83 L1194.79 1209.83 L1195.37 1209.83 L1195.96 1209.83 L1196.55 1209.83 L1197.13 1209.83 L1197.72 1209.83 L1198.31 1209.83 L1198.89 1209.83 L1199.48 1209.83 L1200.07 1209.83 L1200.65 1209.83 L1201.24 1209.83 L1201.83 1209.83 L1202.41 1209.83 L1203 1209.83 L1203.58 1209.83 L1204.17 1209.83 L1204.76 1209.83 L1205.34 1209.83 L1205.93 1209.83 L1206.52 1209.83 L1207.1 1209.83 L1207.69 1209.83 L1208.28 1209.83 L1208.86 1209.83 L1209.45 1209.83 L1210.03 1209.83 L1210.62 1209.83 L1211.21 1209.83 L1211.79 1209.83 L1212.38 1209.83 L1212.97 1209.83 L1213.55 1209.83 L1214.14 1209.83 L1214.73 1209.83 L1215.31 1209.83 L1215.9 1209.83 L1216.49 1209.83 L1217.07 1209.83 L1217.66 1209.83 L1218.24 1209.83 L1218.83 1209.83 L1219.42 1209.83 L1220 1209.83 L1220.59 1209.83 L1221.18 1209.83 L1221.76 1209.83 L1222.35 1209.83 L1222.94 1209.83 L1223.52 1209.83 L1224.11 1209.83 L1224.7 1209.83 L1225.28 1209.83 L1225.87 1209.83 L1226.45 1209.83 L1227.04 1209.83 L1227.63 1209.83 L1228.21 1209.83 L1228.8 1209.83 L1229.39 1209.83 L1229.97 1209.83 L1230.56 1209.83 L1231.15 1209.83 L1231.73 1209.83 L1232.32 1209.83 L1232.91 1209.83 L1233.49 1209.83 L1234.08 1209.83 L1234.66 1209.83 L1235.25 1209.83 L1235.84 1209.83 L1236.42 1209.83 L1237.01 1209.83 L1237.6 1209.83 L1238.18 1209.83 L1238.77 1209.83 L1239.36 1209.83 L1239.94 1209.83 L1240.53 1209.83 L1241.11 1209.83 L1241.7 1209.83 L1242.29 1209.83 L1242.87 1209.83 L1243.46 1209.83 L1244.05 1209.83 L1244.63 1209.83 L1245.22 1209.83 L1245.81 1209.83 L1246.39 1209.83 L1246.98 1209.83 L1247.57 1209.83 L1248.15 1209.83 L1248.74 1209.83 L1249.32 1209.83 L1249.91 1209.83 L1250.5 1209.83 L1251.08 1209.83 L1251.67 1209.83 L1252.26 1209.83 L1252.84 1209.83 L1253.43 1209.83 L1254.02 1209.83 L1254.6 1209.83 L1255.19 1209.83 L1255.78 1209.83 L1256.36 1209.83 L1256.95 1209.83 L1257.53 1209.83 L1258.12 1209.83 L1258.71 1209.83 L1259.29 1209.83 L1259.88 1209.83 L1260.47 1209.83 L1261.05 1209.83 L1261.64 1209.83 L1262.23 1209.83 L1262.81 1209.83 L1263.4 1209.83 L1263.98 1209.83 L1264.57 1209.83 L1265.16 1209.83 L1265.74 1209.83 L1266.33 1209.83 L1266.92 1209.83 L1267.5 1209.83 L1268.09 1209.83 L1268.68 1209.83 L1269.26 1209.83 L1269.85 1209.83 L1270.44 1209.83 L1271.02 1209.83 L1271.61 1209.83 L1272.19 1209.83 L1272.78 1209.83 L1273.37 1209.83 L1273.95 1209.83 L1274.54 1209.83 L1275.13 1209.83 L1275.71 1209.83 L1276.3 1209.83 L1276.89 1209.83 L1277.47 1209.83 L1278.06 1209.83 L1278.65 1209.83 L1279.23 1209.83 L1279.82 1209.83 L1280.4 1209.83 L1280.99 1209.83 L1281.58 1209.83 L1282.16 1209.83 L1282.75 1209.83 L1283.34 1209.83 L1283.92 1209.83 L1284.51 1209.83 L1285.1 1209.83 L1285.68 1209.83 L1286.27 1209.83 L1286.86 1209.83 L1287.44 1209.83 L1288.03 1209.83 L1288.61 1209.83 L1289.2 1209.83 L1289.79 1209.83 L1290.37 1209.83 L1290.96 1209.83 L1291.55 1209.83 L1292.13 1209.83 L1292.72 1209.83 L1293.31 1209.83 L1293.89 1209.83 L1294.48 1209.83 L1295.06 1209.83 L1295.65 1209.83 L1296.24 1209.83 L1296.82 1209.83 L1297.41 1209.83 L1298 1209.83 L1298.58 1209.83 L1299.17 1209.83 L1299.76 1209.83 L1300.34 1209.83 L1300.93 1209.83 L1301.52 1209.83 L1302.1 1209.83 L1302.69 1209.83 L1303.27 1209.83 L1303.86 1209.83 L1304.45 1209.83 L1305.03 1209.83 L1305.62 1209.83 L1306.21 1209.83 L1306.79 1209.83 L1307.38 1209.83 L1307.97 1209.83 L1308.55 1209.83 L1309.14 1209.83 L1309.73 1209.83 L1310.31 1209.83 L1310.9 1209.83 L1311.48 1209.83 L1312.07 1209.83 L1312.66 1209.83 L1313.24 1209.83 L1313.83 1209.83 L1314.42 1209.83 L1315 1209.83 L1315.59 1209.83 L1316.18 1209.83 L1316.76 1209.83 L1317.35 1209.83 L1317.93 1209.83 L1318.52 1209.83 L1319.11 1209.83 L1319.69 1209.83 L1320.28 1209.83 L1320.87 1209.83 L1321.45 1209.83 L1322.04 1209.83 L1322.63 1209.83 L1323.21 1209.83 L1323.8 1209.83 L1324.39 1209.83 L1324.97 1209.83 L1325.56 1209.83 L1326.14 1209.83 L1326.73 1209.83 L1327.32 1209.83 L1327.9 1209.83 L1328.49 1209.83 L1329.08 1209.83 L1329.66 1209.83 L1330.25 1209.83 L1330.84 1209.83 L1331.42 1209.83 L1332.01 1209.83 L1332.6 1209.83 L1333.18 1209.83 L1333.77 1209.83 L1334.35 1209.83 L1334.94 1209.83 L1335.53 1209.83 L1336.11 1209.83 L1336.7 1209.83 L1337.29 1209.83 L1337.87 1209.83 L1338.46 1209.83 L1339.05 1209.83 L1339.63 1209.83 L1340.22 1209.83 L1340.8 1209.83 L1341.39 1209.83 L1341.98 1209.83 L1342.56 1209.83 L1343.15 1209.83 L1343.74 1209.83 L1344.32 1209.83 L1344.91 1209.83 L1345.5 1209.83 L1346.08 1209.83 L1346.67 1209.83 L1347.26 1209.83 L1347.84 1209.83 L1348.43 1209.83 L1349.01 1209.83 L1349.6 1209.83 L1350.19 1209.83 L1350.77 1209.83 L1351.36 1209.83 L1351.95 1209.83 L1352.53 1209.83 L1353.12 1209.83 L1353.71 1209.83 L1354.29 1209.83 L1354.88 1209.83 L1355.47 1209.83 L1356.05 1209.83 L1356.64 1209.83 L1357.22 1209.83 L1357.81 1209.83 L1358.4 1209.83 L1358.98 1209.83 L1359.57 1209.83 L1360.16 1209.83 L1360.74 1209.83 L1361.33 1209.83 L1361.92 1209.83 L1362.5 1209.83 L1363.09 1209.83 L1363.68 1209.83 L1364.26 1209.83 L1364.85 1209.83 L1365.43 1209.83 L1366.02 1209.83 L1366.61 1209.83 L1367.19 1209.83 L1367.78 1209.83 L1368.37 1209.83 L1368.95 1209.83 L1369.54 1209.83 L1370.13 1209.83 L1370.71 1209.83 L1371.3 1209.83 L1371.88 1209.83 L1372.47 1209.83 L1373.06 1209.83 L1373.64 1209.83 L1374.23 1209.83 L1374.82 1209.83 L1375.4 1209.83 L1375.99 1209.83 L1376.58 1209.83 L1377.16 1209.83 L1377.75 1209.83 L1378.34 1209.83 L1378.92 1209.83 L1379.51 1209.83 L1380.09 1209.83 L1380.68 1209.83 L1381.27 1209.83 L1381.85 1209.83 L1382.44 1209.83 L1383.03 1209.83 L1383.61 1209.83 L1384.2 1209.83 L1384.79 1209.83 L1385.37 1209.83 L1385.96 1209.83 L1386.55 1209.83 L1387.13 1209.83 L1387.72 1209.83 L1388.3 1209.83 L1388.89 1209.83 L1389.48 1209.83 L1390.06 1209.83 L1390.65 1209.83 L1391.24 1209.83 L1391.82 1209.83 L1392.41 1209.83 L1393 1209.83 L1393.58 1209.83 L1394.17 1209.83 L1394.75 1209.83 L1395.34 1209.83 L1395.93 1209.83 L1396.51 1209.83 L1397.1 1209.83 L1397.69 1209.83 L1398.27 1209.83 L1398.86 1209.83 L1399.45 1209.83 L1400.03 1209.83 L1400.62 1209.83 L1401.21 1209.83 L1401.79 1209.83 L1402.38 1209.83 L1402.96 1209.83 L1403.55 1209.83 L1404.14 1209.83 L1404.72 1209.83 L1405.31 1209.83 L1405.9 1209.83 L1406.48 1209.83 L1407.07 1209.83 L1407.66 1209.83 L1408.24 1209.83 L1408.83 1209.83 L1409.42 1209.83 L1410 1209.83 L1410.59 1209.83 L1411.17 1209.83 L1411.76 1209.83 L1412.35 1209.83 L1412.93 1209.83 L1413.52 1209.83 L1414.11 1209.83 L1414.69 1209.83 L1415.28 1209.83 L1415.87 1209.83 L1416.45 1209.83 L1417.04 1209.83 L1417.63 1209.83 L1418.21 1209.83 L1418.8 1209.83 L1419.38 1209.83 L1419.97 1209.83 L1420.56 1209.83 L1421.14 1209.83 L1421.73 1209.83 L1422.32 1209.83 L1422.9 1209.83 L1423.49 1209.83 L1424.08 1209.83 L1424.66 1209.83 L1425.25 1209.83 L1425.83 1209.83 L1426.42 1209.83 L1427.01 1209.83 L1427.59 1209.83 L1428.18 1209.83 L1428.77 1209.83 L1429.35 1209.83 L1429.94 1209.83 L1430.53 1209.83 L1431.11 1209.83 L1431.7 1209.83 L1432.29 1209.83 L1432.87 1209.83 L1433.46 1209.83 L1434.04 1209.83 L1434.63 1209.83 L1435.22 1209.83 L1435.8 1209.83 L1436.39 1209.83 L1436.98 1209.83 L1437.56 1209.83 L1438.15 1209.83 L1438.74 1209.83 L1439.32 1209.83 L1439.91 1209.83 L1440.5 1209.83 L1441.08 1209.83 L1441.67 1209.83 L1442.25 1209.83 L1442.84 1209.83 L1443.43 1209.83 L1444.01 1209.83 L1444.6 1209.83 L1445.19 1209.83 L1445.77 1209.83 L1446.36 1209.83 L1446.95 1209.83 L1447.53 1209.83 L1448.12 1209.83 L1448.7 1209.83 L1449.29 1209.83 L1449.88 1209.83 L1450.46 1209.83 L1451.05 1209.83 L1451.64 1209.83 L1452.22 1209.83 L1452.81 1209.83 L1453.4 1209.83 L1453.98 1209.83 L1454.57 1209.83 L1455.16 1209.83 L1455.74 1209.83 L1456.33 1209.83 L1456.91 1209.83 L1457.5 1209.83 L1458.09 1209.83 L1458.67 1209.83 L1459.26 1209.83 L1459.85 1209.83 L1460.43 1209.83 L1461.02 1209.83 L1461.61 1209.83 L1462.19 1209.83 L1462.78 1209.83 L1463.37 1209.83 L1463.95 1209.83 L1464.54 1209.83 L1465.12 1209.83 L1465.71 1209.83 L1466.3 1209.83 L1466.88 1209.83 L1467.47 1209.83 L1468.06 1209.83 L1468.64 1209.83 L1469.23 1209.83 L1469.82 1209.83 L1470.4 1209.83 L1470.99 1209.83 L1471.57 1209.83 L1472.16 1209.83 L1472.75 1209.83 L1473.33 1209.83 L1473.92 1209.83 L1474.51 1209.83 L1475.09 1209.83 L1475.68 1209.83 L1476.27 1209.83 L1476.85 1209.83 L1477.44 1209.83 L1478.03 1209.83 L1478.61 1209.83 L1479.2 1209.83 L1479.78 1209.83 L1480.37 1209.83 L1480.96 1209.83 L1481.54 1209.83 L1482.13 1209.83 L1482.72 1209.83 L1483.3 1209.83 L1483.89 1209.83 L1484.48 1209.83 L1485.06 1209.83 L1485.65 1209.83 L1486.24 1209.83 L1486.82 1209.83 L1487.41 1209.83 L1487.99 1209.83 L1488.58 1209.83 L1489.17 1209.83 L1489.75 1209.83 L1490.34 1209.83 L1490.93 1209.83 L1491.51 1209.83 L1492.1 1209.83 L1492.69 1209.83 L1493.27 1209.83 L1493.86 1209.83 L1494.45 1209.83 L1495.03 1209.83 L1495.62 1209.83 L1496.2 1209.83 L1496.79 1209.83 L1497.38 1209.83 L1497.96 1209.83 L1498.55 1209.83 L1499.14 1209.83 L1499.72 1209.83 L1500.31 1209.83 L1500.9 1209.83 L1501.48 1209.83 L1502.07 1209.83 L1502.65 1209.83 L1503.24 1209.83 L1503.83 1209.83 L1504.41 1209.83 L1505 1209.83 L1505.59 1209.83 L1506.17 1209.83 L1506.76 1209.83 L1507.35 1209.83 L1507.93 1209.83 L1508.52 1209.83 L1509.11 1209.83 L1509.69 1209.83 L1510.28 1209.83 L1510.86 1209.83 L1511.45 1209.83 L1512.04 1209.83 L1512.62 1209.83 L1513.21 1209.83 L1513.8 1209.83 L1514.38 1209.83 L1514.97 1209.83 L1515.56 1209.83 L1516.14 1209.83 L1516.73 1209.83 L1517.32 1209.83 L1517.9 1209.83 L1518.49 1209.83 L1519.07 1209.83 L1519.66 1209.83 L1520.25 1209.83 L1520.83 1209.83 L1521.42 1209.83 L1522.01 1209.83 L1522.59 1209.83 L1523.18 1209.83 L1523.77 1209.83 L1524.35 1209.83 L1524.94 1209.83 L1525.52 1209.83 L1526.11 1209.83 L1526.7 1209.83 L1527.28 1209.83 L1527.87 1209.83 L1528.46 1209.83 L1529.04 1209.83 L1529.63 1209.83 L1530.22 1209.83 L1530.8 1209.83 L1531.39 1209.83 L1531.98 1209.83 L1532.56 1209.83 L1533.15 1209.83 L1533.73 1209.83 L1534.32 1209.83 L1534.91 1209.83 L1535.49 1209.83 L1536.08 1209.83 L1536.67 1209.83 L1537.25 1209.83 L1537.84 1209.83 L1538.43 1209.83 L1539.01 1209.83 L1539.6 1209.83 L1540.19 1209.83 L1540.77 1209.83 L1541.36 1209.83 L1541.94 1209.83 L1542.53 1209.83 L1543.12 1209.83 L1543.7 1209.83 L1544.29 1209.83 L1544.88 1209.83 L1545.46 1209.83 L1546.05 1209.83 L1546.64 1209.83 L1547.22 1209.83 L1547.81 1209.83 L1548.4 1209.83 L1548.98 1209.83 L1549.57 1209.83 L1550.15 1209.83 L1550.74 1209.83 L1551.33 1209.83 L1551.91 1209.83 L1552.5 1209.83 L1553.09 1209.83 L1553.67 1209.83 L1554.26 1209.83 L1554.85 1209.83 L1555.43 1209.83 L1556.02 1209.83 L1556.6 1209.83 L1557.19 1209.83 L1557.78 1209.83 L1558.36 1209.83 L1558.95 1209.83 L1559.54 1209.83 L1560.12 1209.83 L1560.71 1209.83 L1561.3 1209.83 L1561.88 1209.83 L1562.47 1209.83 L1563.06 1209.83 L1563.64 1209.83 L1564.23 1209.83 L1564.81 1209.83 L1565.4 1209.83 L1565.99 1209.83 L1566.57 1209.83 L1567.16 1209.83 L1567.75 1209.83 L1568.33 1209.83 L1568.92 1209.83 L1569.51 1209.83 L1570.09 1209.83 L1570.68 1209.83 L1571.27 1209.83 L1571.85 1209.83 L1572.44 1209.83 L1573.02 1209.83 L1573.61 1209.83 L1574.2 1209.83 L1574.78 1209.83 L1575.37 1209.83 L1575.96 1209.83 L1576.54 1209.83 L1577.13 1209.83 L1577.72 1209.83 L1578.3 1209.83 L1578.89 1209.83 L1579.47 1209.83 L1580.06 1209.83 L1580.65 1209.83 L1581.23 1209.83 L1581.82 1209.83 L1582.41 1209.83 L1582.99 1209.83 L1583.58 1209.83 L1584.17 1209.83 L1584.75 1209.83 L1585.34 1209.83 L1585.93 1209.83 L1586.51 1209.83 L1587.1 1209.83 L1587.68 1209.83 L1588.27 1209.83 L1588.86 1209.83 L1589.44 1209.83 L1590.03 1209.83 L1590.62 1209.83 L1591.2 1209.83 L1591.79 1209.83 L1592.38 1209.83 L1592.96 1209.83 L1593.55 1209.83 L1594.14 1209.83 L1594.72 1209.83 L1595.31 1209.83 L1595.89 1209.83 L1596.48 1209.83 L1597.07 1209.83 L1597.65 1209.83 L1598.24 1209.83 L1598.83 1209.83 L1599.41 1209.83 L1600 1209.83 L1600.59 1209.83 L1601.17 1209.83 L1601.76 1209.83 L1602.34 1209.83 L1602.93 1209.83 L1603.52 1209.83 L1604.1 1209.83 L1604.69 1209.83 L1605.28 1209.83 L1605.86 1209.83 L1606.45 1209.83 L1607.04 1209.83 L1607.62 1209.83 L1608.21 1209.83 L1608.8 1209.83 L1609.38 1209.83 L1609.97 1209.83 L1610.55 1209.83 L1611.14 1209.83 L1611.73 1209.83 L1612.31 1209.83 L1612.9 1209.83 L1613.49 1209.83 L1614.07 1209.83 L1614.66 1209.83 L1615.25 1209.83 L1615.83 1209.83 L1616.42 1209.83 L1617.01 1209.83 L1617.59 1209.83 L1618.18 1209.83 L1618.76 1209.83 L1619.35 1209.83 L1619.94 1209.83 L1620.52 1209.83 L1621.11 1209.83 L1621.7 1209.83 L1622.28 1209.83 L1622.87 1209.83 L1623.46 1209.83 L1624.04 1209.83 L1624.63 1209.83 L1625.22 1209.83 L1625.8 1209.83 L1626.39 1209.83 L1626.97 1209.83 L1627.56 1209.83 L1628.15 1209.83 L1628.73 1209.83 L1629.32 1209.83 L1629.91 1209.83 L1630.49 1209.83 L1631.08 1209.83 L1631.67 1209.83 L1632.25 1209.83 L1632.84 1209.83 L1633.42 1209.83 L1634.01 1209.83 L1634.6 1209.83 L1635.18 1209.83 L1635.77 1209.83 L1636.36 1209.83 L1636.94 1209.83 L1637.53 1209.83 L1638.12 1209.83 L1638.7 1209.83 L1639.29 1209.83 L1639.88 1209.83 L1640.46 1209.83 L1641.05 1209.83 L1641.63 1209.83 L1642.22 1209.83 L1642.81 1209.83 L1643.39 1209.83 L1643.98 1209.83 L1644.57 1209.83 L1645.15 1209.83 L1645.74 1209.83 L1646.33 1209.83 L1646.91 1209.83 L1647.5 1209.83 L1648.09 1209.83 L1648.67 1209.83 L1649.26 1209.83 L1649.84 1209.83 L1650.43 1209.83 L1651.02 1209.83 L1651.6 1209.83 L1652.19 1209.83 L1652.78 1209.83 L1653.36 1209.83 L1653.95 1209.83 L1654.54 1209.83 L1655.12 1209.83 L1655.71 1209.83 L1656.29 1209.83 L1656.88 1209.83 L1657.47 1209.83 L1658.05 1209.83 L1658.64 1209.83 L1659.23 1209.83 L1659.81 1209.83 L1660.4 1209.83 L1660.99 1209.83 L1661.57 1209.83 L1662.16 1209.83 L1662.75 1209.83 L1663.33 1209.83 L1663.92 1209.83 L1664.5 1209.83 L1665.09 1209.83 L1665.68 1209.83 L1666.26 1209.83 L1666.85 1209.83 L1667.44 1209.83 L1668.02 1209.83 L1668.61 1209.83 L1669.2 1209.83 L1669.78 1209.83 L1670.37 1209.83 L1670.96 1209.83 L1671.54 1209.83 L1672.13 1209.83 L1672.71 1209.83 L1673.3 1209.83 L1673.89 1209.83 L1674.47 1209.83 L1675.06 1209.83 L1675.65 1209.83 L1676.23 1209.83 L1676.82 1209.83 L1677.41 1209.83 L1677.99 1209.83 L1678.58 1209.83 L1679.17 1209.83 L1679.75 1209.83 L1680.34 1209.83 L1680.92 1209.83 L1681.51 1209.83 L1682.1 1209.83 L1682.68 1209.83 L1683.27 1209.83 L1683.86 1209.83 L1684.44 1209.83 L1685.03 1209.83 L1685.62 1209.83 L1686.2 1209.83 L1686.79 1209.83 L1687.37 1209.83 L1687.96 1209.83 L1688.55 1209.83 L1689.13 1209.83 L1689.72 1209.83 L1690.31 1209.83 L1690.89 1209.83 L1691.48 1209.83 L1692.07 1209.83 L1692.65 1209.83 L1693.24 1209.83 L1693.83 1209.83 L1694.41 1209.83 L1695 1209.83 L1695.58 1209.83 L1696.17 1209.83 L1696.76 1209.83 L1697.34 1209.83 L1697.93 1209.83 L1698.52 1209.83 L1699.1 1209.83 L1699.69 1209.83 L1700.28 1209.83 L1700.86 1209.83 L1701.45 1209.83 L1702.04 1209.83 L1702.62 1209.83 L1703.21 1209.83 L1703.79 1209.83 L1704.38 1209.83 L1704.97 1209.83 L1705.55 1209.83 L1706.14 1209.83 L1706.73 1209.83 L1707.31 1209.83 L1707.9 1209.83 L1708.49 1209.83 L1709.07 1209.83 L1709.66 1209.83 L1710.24 1209.83 L1710.83 1209.83 L1711.42 1209.83 L1712 1209.83 L1712.59 1209.83 L1713.18 1209.83 L1713.76 1209.83 L1714.35 1209.83 L1714.94 1209.83 L1715.52 1209.83 L1716.11 1209.83 L1716.7 1209.83 L1717.28 1209.83 L1717.87 1209.83 L1718.45 1209.83 L1719.04 1209.83 L1719.63 1209.83 L1720.21 1209.83 L1720.8 1209.83 L1721.39 1209.83 L1721.97 1209.83 L1722.56 1209.83 L1723.15 1209.83 L1723.73 1209.83 L1724.32 1209.83 L1724.91 1209.83 L1725.49 1209.83 L1726.08 1209.83 L1726.66 1209.83 L1727.25 1209.83 L1727.84 1209.83 L1728.42 1209.83 L1729.01 1209.83 L1729.6 1209.83 L1730.18 1209.83 L1730.77 1209.83 L1731.36 1209.83 L1731.94 1209.83 L1732.53 1209.83 L1733.11 1209.83 L1733.7 1209.83 L1734.29 1209.83 L1734.87 1209.83 L1735.46 1209.83 L1736.05 1209.83 L1736.63 1209.83 L1737.22 1209.83 L1737.81 1209.83 L1738.39 1209.83 L1738.98 1209.83 L1739.57 1209.83 L1740.15 1209.83 L1740.74 1209.83 L1741.32 1209.83 L1741.91 1209.83 L1742.5 1209.83 L1743.08 1209.83 L1743.67 1209.83 L1744.26 1209.83 L1744.84 1209.83 L1745.43 1209.83 L1746.02 1209.83 L1746.6 1209.83 L1747.19 1209.83 L1747.78 1209.83 L1748.36 1209.83 L1748.95 1209.83 L1749.53 1209.83 L1750.12 1209.83 L1750.71 1209.83 L1751.29 1209.83 L1751.88 1209.83 L1752.47 1209.83 L1753.05 1209.83 L1753.64 1209.83 L1754.23 1209.83 L1754.81 1209.83 L1755.4 1209.83 L1755.99 1209.83 L1756.57 1209.83 L1757.16 1209.83 L1757.74 1209.83 L1758.33 1209.83 L1758.92 1209.83 L1759.5 1209.83 L1760.09 1209.83 L1760.68 1209.83 L1761.26 1209.83 L1761.85 1209.83 L1762.44 1209.83 L1763.02 1209.83 L1763.61 1209.83 L1764.19 1209.83 L1764.78 1209.83 L1765.37 1209.83 L1765.95 1209.83 L1766.54 1209.83 L1767.13 1209.83 L1767.71 1209.83 L1768.3 1209.83 L1768.89 1209.83 L1769.47 1209.83 L1770.06 1209.83 L1770.65 1209.83 L1771.23 1209.83 L1771.82 1209.83 L1772.4 1209.83 L1772.99 1209.83 L1773.58 1209.83 L1774.16 1209.83 L1774.75 1209.83 L1775.34 1209.83 L1775.92 1209.83 L1776.51 1209.83 L1777.1 1209.83 L1777.68 1209.83 L1778.27 1209.83 L1778.86 1209.83 L1779.44 1209.83 L1780.03 1209.83 L1780.61 1209.83 L1781.2 1209.83 L1781.79 1209.83 L1782.37 1209.83 L1782.96 1209.83 L1783.55 1209.83 L1784.13 1209.83 L1784.72 1209.83 L1785.31 1209.83 L1785.89 1209.83 L1786.48 1209.83 L1787.06 1209.83 L1787.65 1209.83 L1788.24 1209.83 L1788.82 1209.83 L1789.41 1209.83 L1790 1209.83 L1790.58 1209.83 L1791.17 1209.83 L1791.76 1209.83 L1792.34 1209.83 L1792.93 1209.83 L1793.52 1209.83 L1794.1 1209.83 L1794.69 1209.83 L1795.27 1209.83 L1795.86 1209.83 L1796.45 1209.83 L1797.03 1209.83 L1797.62 1209.83 L1798.21 1209.83 L1798.79 1209.83 L1799.38 1209.83 L1799.97 1209.83 L1800.55 1209.83 L1801.14 1209.83 L1801.73 1209.83 L1802.31 1209.83 L1802.9 1209.83 L1803.48 1209.83 L1804.07 1209.83 L1804.66 1209.83 L1805.24 1209.83 L1805.83 1209.83 L1806.42 1209.83 L1807 1209.83 L1807.59 1209.83 L1808.18 1209.83 L1808.76 1209.83 L1809.35 1209.83 L1809.94 1209.83 L1810.52 1209.83 L1811.11 1209.83 L1811.69 1209.83 L1812.28 1209.83 L1812.87 1209.83 L1813.45 1209.83 L1814.04 1209.83 L1814.63 1209.83 L1815.21 1209.83 L1815.8 1209.83 L1816.39 1209.83 L1816.97 1209.83 L1817.56 1209.83 L1818.14 1209.83 L1818.73 1209.83 L1819.32 1209.83 L1819.9 1209.83 L1820.49 1209.83 L1821.08 1209.83 L1821.66 1209.83 L1822.25 1209.83 L1822.84 1209.83 L1823.42 1209.83 L1824.01 1209.83 L1824.6 1209.83 L1825.18 1209.83 L1825.77 1209.83 L1826.35 1209.83 L1826.94 1209.83 L1827.53 1209.83 L1828.11 1209.83 L1828.7 1209.83 L1829.29 1209.83 L1829.87 1209.83 L1830.46 1209.83 L1831.05 1209.83 L1831.63 1209.83 L1832.22 1209.83 L1832.81 1209.83 L1833.39 1209.83 L1833.98 1209.83 L1834.56 1209.83 L1835.15 1209.83 L1835.74 1209.83 L1836.32 1209.83 L1836.91 1209.83 L1837.5 1209.83 L1838.08 1209.83 L1838.67 1209.83 L1839.26 1209.83 L1839.84 1209.83 L1840.43 1209.83 L1841.01 1209.83 L1841.6 1209.83 L1842.19 1209.83 L1842.77 1209.83 L1843.36 1209.83 L1843.95 1209.83 L1844.53 1209.83 L1845.12 1209.83 L1845.71 1209.83 L1846.29 1209.83 L1846.88 1209.83 L1847.47 1209.83 L1848.05 1209.83 L1848.64 1209.83 L1849.22 1209.83 L1849.81 1209.83 L1850.4 1209.83 L1850.98 1209.83 L1851.57 1209.83 L1852.16 1209.83 L1852.74 1209.83 L1853.33 1209.83 L1853.92 1209.83 L1854.5 1209.83 L1855.09 1209.83 L1855.68 1209.83 L1856.26 1209.83 L1856.85 1209.83 L1857.43 1209.83 L1858.02 1209.83 L1858.61 1209.83 L1859.19 1209.83 L1859.78 1209.83 L1860.37 1209.83 L1860.95 1209.83 L1861.54 1209.83 L1862.13 1209.83 L1862.71 1209.83 L1863.3 1209.83 L1863.88 1209.83 L1864.47 1209.83 L1865.06 1209.83 L1865.64 1209.83 L1866.23 1209.83 L1866.82 1209.83 L1867.4 1209.83 L1867.99 1209.83 L1868.58 1209.83 L1869.16 1209.83 L1869.75 1209.83 L1870.34 1209.83 L1870.92 1209.83 L1871.51 1209.83 L1872.09 1209.83 L1872.68 1209.83 L1873.27 1209.83 L1873.85 1209.83 L1874.44 1209.83 L1875.03 1209.83 L1875.61 1209.83 L1876.2 1209.83 L1876.79 1209.83 L1877.37 1209.83 L1877.96 1209.83 L1878.55 1209.83 L1879.13 1209.83 L1879.72 1209.83 L1880.3 1209.83 L1880.89 1209.83 L1881.48 1209.83 L1882.06 1209.83 L1882.65 1209.83 L1883.24 1209.83 L1883.82 1209.83 L1884.41 1209.83 L1885 1209.83 L1885.58 1209.83 L1886.17 1209.83 L1886.76 1209.83 L1887.34 1209.83 L1887.93 1209.83 L1888.51 1209.83 L1889.1 1209.83 L1889.69 1209.83 L1890.27 1209.83 L1890.86 1209.83 L1891.45 1209.83 L1892.03 1209.83 L1892.62 1209.83 L1893.21 1209.83 L1893.79 1209.83 L1894.38 1209.83 L1894.96 1209.83 L1895.55 1209.83 L1896.14 1209.83 L1896.72 1209.83 L1897.31 1209.83 L1897.9 1209.83 L1898.48 1209.83 L1899.07 1209.83 L1899.66 1209.83 L1900.24 1209.83 L1900.83 1209.83 L1901.42 1209.83 L1902 1209.83 L1902.59 1209.83 L1903.17 1209.83 L1903.76 1209.83 L1904.35 1209.83 L1904.93 1209.83 L1905.52 1209.83 L1906.11 1209.83 L1906.69 1209.83 L1907.28 1209.83 L1907.87 1209.83 L1908.45 1209.83 L1909.04 1209.83 L1909.63 1209.83 L1910.21 1209.83 L1910.8 1209.83 L1911.38 1209.83 L1911.97 1209.83 L1912.56 1209.83 L1913.14 1209.83 L1913.73 1209.83 L1914.32 1209.83 L1914.9 1209.83 L1915.49 1209.83 L1916.08 1209.83 L1916.66 1209.83 L1917.25 1209.83 L1917.83 1209.83 L1918.42 1209.83 L1919.01 1209.83 L1919.59 1209.83 L1920.18 1209.83 L1920.77 1209.83 L1921.35 1209.83 L1921.94 1209.83 L1922.53 1209.83 L1923.11 1209.83 L1923.7 1209.83 L1924.29 1209.83 L1924.87 1209.83 L1925.46 1209.83 L1926.04 1209.83 L1926.63 1209.83 L1927.22 1209.83 L1927.8 1209.83 L1928.39 1209.83 L1928.98 1209.83 L1929.56 1209.83 L1930.15 1209.83 L1930.74 1209.83 L1931.32 1209.83 L1931.91 1209.83 L1932.5 1209.83 L1933.08 1209.83 L1933.67 1209.83 L1934.25 1209.83 L1934.84 1209.83 L1935.43 1209.83 L1936.01 1209.83 L1936.6 1209.83 L1937.19 1209.83 L1937.77 1209.83 L1938.36 1209.83 L1938.95 1209.83 L1939.53 1209.83 L1940.12 1209.83 L1940.71 1209.83 L1941.29 1209.83 L1941.88 1209.83 L1942.46 1209.83 L1943.05 1209.83 L1943.64 1209.83 L1944.22 1209.83 L1944.81 1209.83 L1945.4 1209.83 L1945.98 1209.83 L1946.57 1209.83 L1947.16 1209.83 L1947.74 1209.83 L1948.33 1209.83 L1948.91 1209.83 L1949.5 1209.83 L1950.09 1209.83 L1950.67 1209.83 L1951.26 1209.83 L1951.85 1209.83 L1952.43 1209.83 L1953.02 1209.83 L1953.61 1209.83 L1954.19 1209.83 L1954.78 1209.83 L1955.37 1209.83 L1955.95 1209.83 L1956.54 1209.83 L1957.12 1209.83 L1957.71 1209.83 L1958.3 1209.83 L1958.88 1209.83 L1959.47 1209.83 L1960.06 1209.83 L1960.64 1209.83 L1961.23 1209.83 L1961.82 1209.83 L1962.4 1209.83 L1962.99 1209.83 L1963.58 1209.83 L1964.16 1209.83 L1964.75 1209.83 L1965.33 1209.83 L1965.92 1209.83 L1966.51 1209.83 L1967.09 1209.83 L1967.68 1209.83 L1968.27 1209.83 L1968.85 1209.83 L1969.44 1209.83 L1970.03 1209.83 L1970.61 1209.83 L1971.2 1209.83 L1971.78 1209.83 L1972.37 1209.83 L1972.96 1209.83 L1973.54 1209.83 L1974.13 1209.83 L1974.72 1209.83 L1975.3 1209.83 L1975.89 1209.83 L1976.48 1209.83 L1977.06 1209.83 L1977.65 1209.83 L1978.24 1209.83 L1978.82 1209.83 L1979.41 1209.83 L1979.99 1209.83 L1980.58 1209.83 L1981.17 1209.83 L1981.75 1209.83 L1982.34 1209.83 L1982.93 1209.83 L1983.51 1209.83 L1984.1 1209.83 L1984.69 1209.83 L1985.27 1209.83 L1985.86 1209.83 L1986.45 1209.83 L1987.03 1209.83 L1987.62 1209.83 L1988.2 1209.83 L1988.79 1209.83 L1989.38 1209.83 L1989.96 1209.83 L1990.55 1209.83 L1991.14 1209.83 L1991.72 1209.83 L1992.31 1209.83 L1992.9 1209.83 L1993.48 1209.83 L1994.07 1209.83 L1994.65 1209.83 L1995.24 1209.83 L1995.83 1209.83 L1996.41 1209.83 L1997 1209.83 L1997.59 1209.83 L1998.17 1209.83 L1998.76 1209.83 L1999.35 1209.83 L1999.93 1209.83 L2000.52 1209.83 L2001.11 1209.83 L2001.69 1209.83 L2002.28 1209.83 L2002.86 1209.83 L2003.45 1209.83 L2004.04 1209.83 L2004.62 1209.83 L2005.21 1209.83 L2005.8 1209.83 L2006.38 1209.83 L2006.97 1209.83 L2007.56 1209.83 L2008.14 1209.83 L2008.73 1209.83 L2009.32 1209.83 L2009.9 1209.83 L2010.49 1209.83 L2011.07 1209.83 L2011.66 1209.83 L2012.25 1209.83 L2012.83 1209.83 L2013.42 1209.83 L2014.01 1209.83 L2014.59 1209.83 L2015.18 1209.83 L2015.77 1209.83 L2016.35 1209.83 L2016.94 1209.83 L2017.53 1209.83 L2018.11 1209.83 L2018.7 1209.83 L2019.28 1209.83 L2019.87 1209.83 L2020.46 1209.83 L2021.04 1209.83 L2021.63 1209.83 L2022.22 1209.83 L2022.8 1209.83 L2023.39 1209.83 L2023.98 1209.83 L2024.56 1209.83 L2025.15 1209.83 L2025.73 1209.83 L2026.32 1209.83 L2026.91 1209.83 L2027.49 1209.83 L2028.08 1209.83 L2028.67 1209.83 L2029.25 1209.83 L2029.84 1209.83 L2030.43 1209.83 L2031.01 1209.83 L2031.6 1209.83 L2032.19 1209.83 L2032.77 1209.83 L2033.36 1209.83 L2033.94 1209.83 L2034.53 1209.83 L2035.12 1209.83 L2035.7 1209.83 L2036.29 1209.83 L2036.88 1209.83 L2037.46 1209.83 L2038.05 1209.83 L2038.64 1209.83 L2039.22 1209.83 L2039.81 1209.83 L2040.4 1209.83 L2040.98 1209.83 L2041.57 1209.83 L2042.15 1209.83 L2042.74 1209.83 L2043.33 1209.83 L2043.91 1209.83 L2044.5 1209.83 L2045.09 1209.83 L2045.67 1209.83 L2046.26 1209.83 L2046.85 1209.83 L2047.43 1209.83 L2048.02 1209.83 L2048.6 1209.83 L2049.19 1209.83 L2049.78 1209.83 L2050.36 1209.83 L2050.95 1209.83 L2051.54 1209.83 L2052.12 1209.83 L2052.71 1209.83 L2053.3 1209.83 L2053.88 1209.83 L2054.47 1209.83 L2055.06 1209.83 L2055.64 1209.83 L2056.23 1209.83 L2056.81 1209.83 L2057.4 1209.83 L2057.99 1209.83 L2058.57 1209.83 L2059.16 1209.83 L2059.75 1209.83 L2060.33 1209.83 L2060.92 1209.83 L2061.51 1209.83 L2062.09 1209.83 L2062.68 1209.83 L2063.27 1209.83 L2063.85 1209.83 L2064.44 1209.83 L2065.02 1209.83 L2065.61 1209.83 L2066.2 1209.83 L2066.78 1209.83 L2067.37 1209.83 L2067.96 1209.83 L2068.54 1209.83 L2069.13 1209.83 L2069.72 1209.83 L2070.3 1209.83 L2070.89 1209.83 L2071.48 1209.83 L2072.06 1209.83 L2072.65 1209.83 L2073.23 1209.83 L2073.82 1209.83 L2074.41 1209.83 L2074.99 1209.83 L2075.58 1209.83 L2076.17 1209.83 L2076.75 1209.83 L2077.34 1209.83 L2077.93 1209.83 L2078.51 1209.83 L2079.1 1209.83 L2079.68 1209.83 L2080.27 1209.83 L2080.86 1209.83 L2081.44 1209.83 L2082.03 1209.83 L2082.62 1209.83 L2083.2 1209.83 L2083.79 1209.83 L2084.38 1209.83 L2084.96 1209.83 L2085.55 1209.83 L2086.14 1209.83 L2086.72 1209.83 L2087.31 1209.83 L2087.89 1209.83 L2088.48 1209.83 L2089.07 1209.83 L2089.65 1209.83 L2090.24 1209.83 L2090.83 1209.83 L2091.41 1209.83 L2092 1209.83 L2092.59 1209.83 L2093.17 1209.83 L2093.76 1209.83 L2094.35 1209.83 L2094.93 1209.83 L2095.52 1209.83 L2096.1 1209.83 L2096.69 1209.83 L2097.28 1209.83 L2097.86 1209.83 L2098.45 1209.83 L2099.04 1209.83 L2099.62 1209.83 L2100.21 1209.83 L2100.8 1209.83 L2101.38 1209.83 L2101.97 1209.83 L2102.55 1209.83 L2103.14 1209.83 L2103.73 1209.83 L2104.31 1209.83 L2104.9 1209.83 L2105.49 1209.83 L2106.07 1209.83 L2106.66 1209.83 L2107.25 1209.83 L2107.83 1209.83 L2108.42 1209.83 L2109.01 1209.83 L2109.59 1209.83 L2110.18 1209.83 L2110.76 1209.83 L2111.35 1209.83 L2111.94 1209.83 L2112.52 1209.83 L2113.11 1209.83 L2113.7 1209.83 L2114.28 1209.83 L2114.87 1209.83 L2115.46 1209.83 L2116.04 1209.83 L2116.63 1209.83 L2117.22 1209.83 L2117.8 1209.83 L2118.39 1209.83 L2118.97 1209.83 L2119.56 1209.83 L2120.15 1209.83 L2120.73 1209.83 L2121.32 1209.83 L2121.91 1209.83 L2122.49 1209.83 L2123.08 1209.83 L2123.67 1209.83 L2124.25 1209.83 L2124.84 1209.83 L2125.42 1209.83 L2126.01 1209.83 L2126.6 1209.83 L2127.18 1209.83 L2127.77 1209.83 L2128.36 1209.83 L2128.94 1209.83 L2129.53 1209.83 L2130.12 1209.83 L2130.7 1209.83 L2131.29 1209.83 L2131.88 1209.83 L2132.46 1209.83 L2133.05 1209.83 L2133.63 1209.83 L2134.22 1209.83 L2134.81 1209.83 L2135.39 1209.83 L2135.98 1209.83 L2136.57 1209.83 L2137.15 1209.83 L2137.74 1209.83 L2138.33 1209.83 L2138.91 1209.83 L2139.5 1209.83 L2140.09 1209.83 L2140.67 1209.83 L2141.26 1209.83 L2141.84 1209.83 L2142.43 1209.83 L2143.02 1209.83 L2143.6 1209.83 L2144.19 1209.83 L2144.78 1209.83 L2145.36 1209.83 L2145.95 1209.83 L2146.54 1209.83 L2147.12 1209.83 L2147.71 1209.83 L2148.3 1209.83 L2148.88 1209.83 L2149.47 1209.83 L2150.05 1209.83 L2150.64 1209.83 L2151.23 1209.83 L2151.81 1209.83 L2152.4 1209.83 L2152.99 1209.83 L2153.57 1209.83 L2154.16 1209.83 L2154.75 1209.83 L2155.33 1209.83 L2155.92 1209.83 L2156.5 1209.83 L2157.09 1209.83 L2157.68 1209.83 L2158.26 1209.83 L2158.26 1209.08 L2157.68 1209.08 L2157.09 1209.08 L2156.5 1209.08 L2155.92 1209.08 L2155.33 1209.08 L2154.75 1209.08 L2154.16 1209.08 L2153.57 1209.08 L2152.99 1209.08 L2152.4 1209.08 L2151.81 1209.08 L2151.23 1209.08 L2150.64 1209.08 L2150.05 1209.08 L2149.47 1209.08 L2148.88 1209.08 L2148.3 1209.08 L2147.71 1209.08 L2147.12 1209.08 L2146.54 1209.08 L2145.95 1209.08 L2145.36 1209.08 L2144.78 1209.08 L2144.19 1209.08 L2143.6 1209.08 L2143.02 1209.08 L2142.43 1209.08 L2141.84 1209.08 L2141.26 1209.08 L2140.67 1209.08 L2140.09 1209.08 L2139.5 1209.08 L2138.91 1209.08 L2138.33 1209.08 L2137.74 1209.08 L2137.15 1209.08 L2136.57 1209.08 L2135.98 1209.08 L2135.39 1209.08 L2134.81 1209.08 L2134.22 1209.08 L2133.63 1209.08 L2133.05 1209.08 L2132.46 1209.08 L2131.88 1209.08 L2131.29 1209.08 L2130.7 1209.08 L2130.12 1209.08 L2129.53 1209.08 L2128.94 1209.08 L2128.36 1209.08 L2127.77 1209.08 L2127.18 1209.08 L2126.6 1209.08 L2126.01 1209.08 L2125.42 1209.08 L2124.84 1209.08 L2124.25 1209.08 L2123.67 1209.08 L2123.08 1209.08 L2122.49 1209.08 L2121.91 1209.08 L2121.32 1209.08 L2120.73 1209.08 L2120.15 1209.08 L2119.56 1209.08 L2118.97 1209.08 L2118.39 1209.08 L2117.8 1209.08 L2117.22 1209.08 L2116.63 1209.08 L2116.04 1209.08 L2115.46 1209.08 L2114.87 1209.08 L2114.28 1209.08 L2113.7 1209.08 L2113.11 1209.08 L2112.52 1209.08 L2111.94 1209.08 L2111.35 1209.08 L2110.76 1209.08 L2110.18 1209.08 L2109.59 1209.08 L2109.01 1209.08 L2108.42 1209.08 L2107.83 1209.08 L2107.25 1209.08 L2106.66 1209.08 L2106.07 1209.08 L2105.49 1209.08 L2104.9 1209.08 L2104.31 1209.08 L2103.73 1209.08 L2103.14 1209.08 L2102.55 1209.08 L2101.97 1209.08 L2101.38 1209.08 L2100.8 1209.08 L2100.21 1209.08 L2099.62 1209.08 L2099.04 1209.08 L2098.45 1209.08 L2097.86 1209.08 L2097.28 1209.08 L2096.69 1209.08 L2096.1 1209.08 L2095.52 1209.08 L2094.93 1209.08 L2094.35 1209.08 L2093.76 1209.08 L2093.17 1209.08 L2092.59 1209.08 L2092 1209.08 L2091.41 1209.08 L2090.83 1209.08 L2090.24 1209.08 L2089.65 1209.08 L2089.07 1209.08 L2088.48 1209.08 L2087.89 1209.08 L2087.31 1209.08 L2086.72 1209.08 L2086.14 1209.08 L2085.55 1209.08 L2084.96 1209.08 L2084.38 1209.08 L2083.79 1209.08 L2083.2 1209.08 L2082.62 1209.08 L2082.03 1209.08 L2081.44 1209.08 L2080.86 1209.08 L2080.27 1209.08 L2079.68 1209.08 L2079.1 1209.08 L2078.51 1209.08 L2077.93 1209.08 L2077.34 1209.08 L2076.75 1209.08 L2076.17 1209.08 L2075.58 1209.08 L2074.99 1209.08 L2074.41 1209.08 L2073.82 1209.08 L2073.23 1209.08 L2072.65 1209.08 L2072.06 1209.08 L2071.48 1209.08 L2070.89 1209.08 L2070.3 1209.08 L2069.72 1209.08 L2069.13 1209.08 L2068.54 1209.08 L2067.96 1209.08 L2067.37 1209.08 L2066.78 1209.08 L2066.2 1209.08 L2065.61 1209.08 L2065.02 1209.08 L2064.44 1209.08 L2063.85 1209.08 L2063.27 1209.08 L2062.68 1209.08 L2062.09 1209.08 L2061.51 1209.08 L2060.92 1209.08 L2060.33 1209.08 L2059.75 1209.08 L2059.16 1209.08 L2058.57 1209.08 L2057.99 1209.08 L2057.4 1209.08 L2056.81 1209.08 L2056.23 1209.08 L2055.64 1209.08 L2055.06 1209.08 L2054.47 1209.08 L2053.88 1209.08 L2053.3 1209.08 L2052.71 1209.08 L2052.12 1209.08 L2051.54 1209.08 L2050.95 1209.08 L2050.36 1209.08 L2049.78 1209.08 L2049.19 1209.08 L2048.6 1209.08 L2048.02 1209.08 L2047.43 1209.08 L2046.85 1209.08 L2046.26 1209.08 L2045.67 1209.08 L2045.09 1209.08 L2044.5 1209.08 L2043.91 1209.08 L2043.33 1209.08 L2042.74 1209.08 L2042.15 1209.08 L2041.57 1209.08 L2040.98 1209.08 L2040.4 1209.08 L2039.81 1209.08 L2039.22 1209.08 L2038.64 1209.08 L2038.05 1209.08 L2037.46 1209.08 L2036.88 1209.08 L2036.29 1209.08 L2035.7 1209.08 L2035.12 1209.08 L2034.53 1209.08 L2033.94 1209.08 L2033.36 1209.08 L2032.77 1209.08 L2032.19 1209.08 L2031.6 1209.08 L2031.01 1209.08 L2030.43 1209.08 L2029.84 1209.08 L2029.25 1209.08 L2028.67 1209.08 L2028.08 1209.08 L2027.49 1209.08 L2026.91 1209.08 L2026.32 1209.08 L2025.73 1209.08 L2025.15 1209.08 L2024.56 1209.08 L2023.98 1209.08 L2023.39 1209.08 L2022.8 1209.08 L2022.22 1209.08 L2021.63 1209.08 L2021.04 1209.08 L2020.46 1209.08 L2019.87 1209.08 L2019.28 1209.08 L2018.7 1209.08 L2018.11 1209.08 L2017.53 1209.08 L2016.94 1209.08 L2016.35 1209.08 L2015.77 1209.08 L2015.18 1209.08 L2014.59 1209.08 L2014.01 1209.08 L2013.42 1209.08 L2012.83 1209.08 L2012.25 1209.08 L2011.66 1209.08 L2011.07 1209.08 L2010.49 1209.08 L2009.9 1209.08 L2009.32 1209.08 L2008.73 1209.08 L2008.14 1209.08 L2007.56 1209.08 L2006.97 1209.08 L2006.38 1209.08 L2005.8 1209.08 L2005.21 1209.08 L2004.62 1209.08 L2004.04 1209.08 L2003.45 1209.08 L2002.86 1209.08 L2002.28 1209.08 L2001.69 1209.08 L2001.11 1209.08 L2000.52 1209.08 L1999.93 1209.08 L1999.35 1209.08 L1998.76 1209.08 L1998.17 1209.08 L1997.59 1209.08 L1997 1209.08 L1996.41 1209.08 L1995.83 1209.08 L1995.24 1209.08 L1994.65 1209.08 L1994.07 1209.08 L1993.48 1209.08 L1992.9 1209.08 L1992.31 1209.08 L1991.72 1209.08 L1991.14 1209.08 L1990.55 1209.08 L1989.96 1209.08 L1989.38 1209.08 L1988.79 1209.08 L1988.2 1209.08 L1987.62 1209.08 L1987.03 1209.08 L1986.45 1209.08 L1985.86 1209.08 L1985.27 1209.08 L1984.69 1209.08 L1984.1 1209.08 L1983.51 1209.08 L1982.93 1209.08 L1982.34 1209.08 L1981.75 1209.08 L1981.17 1209.08 L1980.58 1209.08 L1979.99 1209.08 L1979.41 1209.08 L1978.82 1209.08 L1978.24 1209.08 L1977.65 1209.08 L1977.06 1209.08 L1976.48 1209.08 L1975.89 1209.08 L1975.3 1209.08 L1974.72 1209.08 L1974.13 1209.08 L1973.54 1209.08 L1972.96 1209.08 L1972.37 1209.08 L1971.78 1209.08 L1971.2 1209.08 L1970.61 1209.08 L1970.03 1209.08 L1969.44 1209.08 L1968.85 1209.08 L1968.27 1209.08 L1967.68 1209.08 L1967.09 1209.08 L1966.51 1209.08 L1965.92 1209.08 L1965.33 1209.08 L1964.75 1209.08 L1964.16 1209.08 L1963.58 1209.08 L1962.99 1209.08 L1962.4 1209.08 L1961.82 1209.08 L1961.23 1209.08 L1960.64 1209.08 L1960.06 1209.08 L1959.47 1209.08 L1958.88 1209.08 L1958.3 1209.08 L1957.71 1209.08 L1957.12 1209.08 L1956.54 1209.08 L1955.95 1209.08 L1955.37 1209.08 L1954.78 1209.08 L1954.19 1209.08 L1953.61 1209.08 L1953.02 1209.08 L1952.43 1209.08 L1951.85 1209.08 L1951.26 1209.08 L1950.67 1209.08 L1950.09 1209.08 L1949.5 1209.08 L1948.91 1209.08 L1948.33 1209.08 L1947.74 1209.08 L1947.16 1209.08 L1946.57 1209.08 L1945.98 1209.08 L1945.4 1209.08 L1944.81 1209.08 L1944.22 1209.08 L1943.64 1209.08 L1943.05 1209.08 L1942.46 1209.08 L1941.88 1209.08 L1941.29 1209.08 L1940.71 1209.08 L1940.12 1209.08 L1939.53 1209.08 L1938.95 1209.08 L1938.36 1209.08 L1937.77 1209.08 L1937.19 1209.08 L1936.6 1209.08 L1936.01 1209.08 L1935.43 1209.08 L1934.84 1209.08 L1934.25 1209.08 L1933.67 1209.08 L1933.08 1209.08 L1932.5 1209.08 L1931.91 1209.08 L1931.32 1209.08 L1930.74 1209.08 L1930.15 1209.08 L1929.56 1209.08 L1928.98 1209.08 L1928.39 1209.08 L1927.8 1209.08 L1927.22 1209.08 L1926.63 1209.08 L1926.04 1209.08 L1925.46 1209.08 L1924.87 1209.08 L1924.29 1209.08 L1923.7 1209.08 L1923.11 1209.08 L1922.53 1209.08 L1921.94 1209.08 L1921.35 1209.08 L1920.77 1209.08 L1920.18 1209.08 L1919.59 1209.08 L1919.01 1209.08 L1918.42 1209.08 L1917.83 1209.08 L1917.25 1209.08 L1916.66 1209.08 L1916.08 1209.08 L1915.49 1209.08 L1914.9 1209.08 L1914.32 1209.08 L1913.73 1209.08 L1913.14 1209.08 L1912.56 1209.08 L1911.97 1209.08 L1911.38 1209.08 L1910.8 1209.08 L1910.21 1209.08 L1909.63 1209.08 L1909.04 1209.08 L1908.45 1209.08 L1907.87 1209.08 L1907.28 1209.08 L1906.69 1209.08 L1906.11 1209.08 L1905.52 1209.08 L1904.93 1209.08 L1904.35 1209.08 L1903.76 1209.08 L1903.17 1209.08 L1902.59 1209.08 L1902 1209.08 L1901.42 1209.08 L1900.83 1209.08 L1900.24 1209.08 L1899.66 1209.08 L1899.07 1209.08 L1898.48 1209.08 L1897.9 1209.08 L1897.31 1209.08 L1896.72 1209.08 L1896.14 1209.08 L1895.55 1209.08 L1894.96 1209.08 L1894.38 1209.08 L1893.79 1209.08 L1893.21 1209.08 L1892.62 1209.08 L1892.03 1209.08 L1891.45 1209.08 L1890.86 1209.08 L1890.27 1209.08 L1889.69 1209.08 L1889.1 1209.08 L1888.51 1209.08 L1887.93 1209.08 L1887.34 1209.08 L1886.76 1209.08 L1886.17 1209.08 L1885.58 1209.08 L1885 1209.08 L1884.41 1209.08 L1883.82 1209.08 L1883.24 1209.08 L1882.65 1209.08 L1882.06 1209.08 L1881.48 1209.08 L1880.89 1209.08 L1880.3 1209.08 L1879.72 1209.08 L1879.13 1209.08 L1878.55 1209.08 L1877.96 1209.08 L1877.37 1209.08 L1876.79 1209.08 L1876.2 1209.08 L1875.61 1209.08 L1875.03 1209.08 L1874.44 1209.08 L1873.85 1209.08 L1873.27 1209.08 L1872.68 1209.08 L1872.09 1209.08 L1871.51 1209.08 L1870.92 1209.08 L1870.34 1209.08 L1869.75 1209.08 L1869.16 1209.08 L1868.58 1209.08 L1867.99 1209.08 L1867.4 1209.08 L1866.82 1209.08 L1866.23 1209.08 L1865.64 1209.08 L1865.06 1209.08 L1864.47 1209.08 L1863.88 1209.08 L1863.3 1209.08 L1862.71 1209.08 L1862.13 1209.08 L1861.54 1209.08 L1860.95 1209.08 L1860.37 1209.08 L1859.78 1209.08 L1859.19 1209.08 L1858.61 1209.08 L1858.02 1209.08 L1857.43 1209.08 L1856.85 1209.08 L1856.26 1209.08 L1855.68 1209.08 L1855.09 1209.08 L1854.5 1209.08 L1853.92 1209.08 L1853.33 1209.08 L1852.74 1209.08 L1852.16 1209.08 L1851.57 1209.08 L1850.98 1209.08 L1850.4 1209.08 L1849.81 1209.08 L1849.22 1209.08 L1848.64 1209.08 L1848.05 1209.08 L1847.47 1209.08 L1846.88 1209.08 L1846.29 1209.08 L1845.71 1209.08 L1845.12 1209.08 L1844.53 1209.08 L1843.95 1209.08 L1843.36 1209.08 L1842.77 1209.08 L1842.19 1209.08 L1841.6 1209.08 L1841.01 1209.08 L1840.43 1209.08 L1839.84 1209.08 L1839.26 1209.08 L1838.67 1209.08 L1838.08 1209.08 L1837.5 1209.08 L1836.91 1209.08 L1836.32 1209.08 L1835.74 1209.08 L1835.15 1209.08 L1834.56 1209.08 L1833.98 1209.08 L1833.39 1209.08 L1832.81 1209.08 L1832.22 1209.08 L1831.63 1209.08 L1831.05 1209.08 L1830.46 1209.08 L1829.87 1209.08 L1829.29 1209.08 L1828.7 1209.08 L1828.11 1209.08 L1827.53 1209.08 L1826.94 1209.08 L1826.35 1209.08 L1825.77 1209.08 L1825.18 1209.08 L1824.6 1209.08 L1824.01 1209.08 L1823.42 1209.08 L1822.84 1209.08 L1822.25 1209.08 L1821.66 1209.08 L1821.08 1209.08 L1820.49 1209.08 L1819.9 1209.08 L1819.32 1209.08 L1818.73 1209.08 L1818.14 1209.08 L1817.56 1209.08 L1816.97 1209.08 L1816.39 1209.08 L1815.8 1209.08 L1815.21 1209.08 L1814.63 1209.08 L1814.04 1209.08 L1813.45 1209.08 L1812.87 1209.08 L1812.28 1209.08 L1811.69 1209.08 L1811.11 1209.08 L1810.52 1209.08 L1809.94 1209.08 L1809.35 1209.08 L1808.76 1209.08 L1808.18 1209.08 L1807.59 1209.08 L1807 1209.08 L1806.42 1209.08 L1805.83 1209.08 L1805.24 1209.08 L1804.66 1209.08 L1804.07 1209.08 L1803.48 1209.08 L1802.9 1209.08 L1802.31 1209.08 L1801.73 1209.08 L1801.14 1209.08 L1800.55 1209.08 L1799.97 1209.08 L1799.38 1209.08 L1798.79 1209.08 L1798.21 1209.08 L1797.62 1209.08 L1797.03 1209.08 L1796.45 1209.08 L1795.86 1209.08 L1795.27 1209.08 L1794.69 1209.08 L1794.1 1209.08 L1793.52 1209.08 L1792.93 1209.08 L1792.34 1209.08 L1791.76 1209.08 L1791.17 1209.08 L1790.58 1209.08 L1790 1209.08 L1789.41 1209.08 L1788.82 1209.08 L1788.24 1209.08 L1787.65 1209.08 L1787.06 1209.08 L1786.48 1209.08 L1785.89 1209.08 L1785.31 1209.08 L1784.72 1209.08 L1784.13 1209.08 L1783.55 1209.08 L1782.96 1209.08 L1782.37 1209.08 L1781.79 1209.08 L1781.2 1209.08 L1780.61 1209.08 L1780.03 1209.08 L1779.44 1209.08 L1778.86 1209.08 L1778.27 1209.08 L1777.68 1209.08 L1777.1 1209.08 L1776.51 1209.08 L1775.92 1209.08 L1775.34 1209.08 L1774.75 1209.08 L1774.16 1209.08 L1773.58 1209.08 L1772.99 1209.08 L1772.4 1209.08 L1771.82 1209.08 L1771.23 1209.08 L1770.65 1209.08 L1770.06 1209.08 L1769.47 1209.08 L1768.89 1209.08 L1768.3 1209.08 L1767.71 1209.08 L1767.13 1209.08 L1766.54 1209.08 L1765.95 1209.08 L1765.37 1209.08 L1764.78 1209.08 L1764.19 1209.08 L1763.61 1209.08 L1763.02 1209.08 L1762.44 1209.08 L1761.85 1209.08 L1761.26 1209.08 L1760.68 1209.08 L1760.09 1209.08 L1759.5 1209.08 L1758.92 1209.08 L1758.33 1209.08 L1757.74 1209.08 L1757.16 1209.08 L1756.57 1209.08 L1755.99 1209.08 L1755.4 1209.08 L1754.81 1209.08 L1754.23 1209.08 L1753.64 1209.08 L1753.05 1209.08 L1752.47 1209.08 L1751.88 1209.08 L1751.29 1209.08 L1750.71 1209.08 L1750.12 1209.08 L1749.53 1209.08 L1748.95 1209.08 L1748.36 1209.08 L1747.78 1209.08 L1747.19 1209.08 L1746.6 1209.08 L1746.02 1209.08 L1745.43 1209.08 L1744.84 1209.08 L1744.26 1209.08 L1743.67 1209.08 L1743.08 1209.08 L1742.5 1209.08 L1741.91 1209.08 L1741.32 1209.08 L1740.74 1209.08 L1740.15 1209.08 L1739.57 1209.08 L1738.98 1209.08 L1738.39 1209.08 L1737.81 1209.08 L1737.22 1209.08 L1736.63 1209.08 L1736.05 1209.08 L1735.46 1209.08 L1734.87 1209.08 L1734.29 1209.08 L1733.7 1209.08 L1733.11 1209.08 L1732.53 1209.08 L1731.94 1209.08 L1731.36 1209.08 L1730.77 1209.08 L1730.18 1209.08 L1729.6 1209.08 L1729.01 1209.08 L1728.42 1209.08 L1727.84 1209.08 L1727.25 1209.08 L1726.66 1209.08 L1726.08 1209.08 L1725.49 1209.08 L1724.91 1209.08 L1724.32 1209.08 L1723.73 1209.08 L1723.15 1209.08 L1722.56 1209.08 L1721.97 1209.08 L1721.39 1209.08 L1720.8 1209.08 L1720.21 1209.08 L1719.63 1209.08 L1719.04 1209.08 L1718.45 1209.08 L1717.87 1209.08 L1717.28 1209.08 L1716.7 1209.08 L1716.11 1209.08 L1715.52 1209.08 L1714.94 1209.08 L1714.35 1209.08 L1713.76 1209.08 L1713.18 1209.08 L1712.59 1209.08 L1712 1209.08 L1711.42 1209.08 L1710.83 1209.08 L1710.24 1209.08 L1709.66 1209.08 L1709.07 1209.08 L1708.49 1209.08 L1707.9 1209.08 L1707.31 1209.08 L1706.73 1209.08 L1706.14 1209.08 L1705.55 1209.08 L1704.97 1209.08 L1704.38 1209.08 L1703.79 1209.08 L1703.21 1209.08 L1702.62 1209.08 L1702.04 1209.08 L1701.45 1209.08 L1700.86 1209.08 L1700.28 1209.08 L1699.69 1209.08 L1699.1 1209.08 L1698.52 1209.08 L1697.93 1209.08 L1697.34 1209.08 L1696.76 1209.08 L1696.17 1209.08 L1695.58 1209.08 L1695 1209.08 L1694.41 1209.08 L1693.83 1209.08 L1693.24 1209.08 L1692.65 1209.08 L1692.07 1209.08 L1691.48 1209.08 L1690.89 1209.08 L1690.31 1209.08 L1689.72 1209.08 L1689.13 1209.08 L1688.55 1209.08 L1687.96 1209.08 L1687.37 1209.08 L1686.79 1209.08 L1686.2 1209.08 L1685.62 1209.08 L1685.03 1209.08 L1684.44 1209.08 L1683.86 1209.08 L1683.27 1209.08 L1682.68 1209.08 L1682.1 1209.08 L1681.51 1209.08 L1680.92 1209.08 L1680.34 1209.08 L1679.75 1209.08 L1679.17 1209.08 L1678.58 1209.08 L1677.99 1209.08 L1677.41 1209.08 L1676.82 1209.08 L1676.23 1209.08 L1675.65 1209.08 L1675.06 1209.08 L1674.47 1209.08 L1673.89 1209.08 L1673.3 1209.08 L1672.71 1209.08 L1672.13 1209.08 L1671.54 1209.08 L1670.96 1209.08 L1670.37 1209.08 L1669.78 1209.08 L1669.2 1209.08 L1668.61 1209.08 L1668.02 1209.08 L1667.44 1209.08 L1666.85 1209.08 L1666.26 1209.08 L1665.68 1209.08 L1665.09 1209.08 L1664.5 1209.08 L1663.92 1209.08 L1663.33 1209.08 L1662.75 1209.08 L1662.16 1209.08 L1661.57 1209.08 L1660.99 1209.08 L1660.4 1209.08 L1659.81 1209.08 L1659.23 1209.08 L1658.64 1209.08 L1658.05 1209.08 L1657.47 1209.08 L1656.88 1209.08 L1656.29 1209.08 L1655.71 1209.08 L1655.12 1209.08 L1654.54 1209.08 L1653.95 1209.08 L1653.36 1209.08 L1652.78 1209.08 L1652.19 1209.08 L1651.6 1209.08 L1651.02 1209.08 L1650.43 1209.08 L1649.84 1209.08 L1649.26 1209.08 L1648.67 1209.08 L1648.09 1209.08 L1647.5 1209.08 L1646.91 1209.08 L1646.33 1209.08 L1645.74 1209.08 L1645.15 1209.08 L1644.57 1209.08 L1643.98 1209.08 L1643.39 1209.08 L1642.81 1209.08 L1642.22 1209.08 L1641.63 1209.08 L1641.05 1209.08 L1640.46 1209.08 L1639.88 1209.08 L1639.29 1209.08 L1638.7 1209.08 L1638.12 1209.08 L1637.53 1209.08 L1636.94 1209.08 L1636.36 1209.08 L1635.77 1209.08 L1635.18 1209.08 L1634.6 1209.08 L1634.01 1209.08 L1633.42 1209.08 L1632.84 1209.08 L1632.25 1209.08 L1631.67 1209.08 L1631.08 1209.08 L1630.49 1209.08 L1629.91 1209.08 L1629.32 1209.08 L1628.73 1209.08 L1628.15 1209.08 L1627.56 1209.08 L1626.97 1209.08 L1626.39 1209.08 L1625.8 1209.08 L1625.22 1209.08 L1624.63 1209.08 L1624.04 1209.08 L1623.46 1209.08 L1622.87 1209.08 L1622.28 1209.08 L1621.7 1209.08 L1621.11 1209.08 L1620.52 1209.08 L1619.94 1209.08 L1619.35 1209.08 L1618.76 1209.08 L1618.18 1209.08 L1617.59 1209.08 L1617.01 1209.08 L1616.42 1209.08 L1615.83 1209.08 L1615.25 1209.08 L1614.66 1209.08 L1614.07 1209.08 L1613.49 1209.08 L1612.9 1209.08 L1612.31 1209.08 L1611.73 1209.08 L1611.14 1209.08 L1610.55 1209.08 L1609.97 1209.08 L1609.38 1209.08 L1608.8 1209.08 L1608.21 1209.08 L1607.62 1209.08 L1607.04 1209.08 L1606.45 1209.08 L1605.86 1209.08 L1605.28 1209.08 L1604.69 1209.08 L1604.1 1209.08 L1603.52 1209.08 L1602.93 1209.08 L1602.34 1209.08 L1601.76 1209.08 L1601.17 1209.08 L1600.59 1209.08 L1600 1209.08 L1599.41 1209.08 L1598.83 1209.08 L1598.24 1209.08 L1597.65 1209.08 L1597.07 1209.08 L1596.48 1209.08 L1595.89 1209.08 L1595.31 1209.08 L1594.72 1209.08 L1594.14 1209.08 L1593.55 1209.08 L1592.96 1209.08 L1592.38 1209.08 L1591.79 1209.08 L1591.2 1209.08 L1590.62 1209.08 L1590.03 1209.08 L1589.44 1209.08 L1588.86 1209.08 L1588.27 1209.08 L1587.68 1209.08 L1587.1 1209.08 L1586.51 1209.08 L1585.93 1209.08 L1585.34 1209.08 L1584.75 1209.08 L1584.17 1209.08 L1583.58 1209.08 L1582.99 1209.08 L1582.41 1209.08 L1581.82 1209.08 L1581.23 1209.08 L1580.65 1209.08 L1580.06 1209.08 L1579.47 1209.08 L1578.89 1209.08 L1578.3 1209.08 L1577.72 1209.08 L1577.13 1209.08 L1576.54 1209.08 L1575.96 1209.08 L1575.37 1209.08 L1574.78 1209.08 L1574.2 1209.08 L1573.61 1209.08 L1573.02 1209.08 L1572.44 1209.08 L1571.85 1209.08 L1571.27 1209.08 L1570.68 1209.08 L1570.09 1209.08 L1569.51 1209.08 L1568.92 1209.08 L1568.33 1209.08 L1567.75 1209.08 L1567.16 1209.08 L1566.57 1209.08 L1565.99 1209.08 L1565.4 1209.08 L1564.81 1209.08 L1564.23 1209.08 L1563.64 1209.08 L1563.06 1209.08 L1562.47 1209.08 L1561.88 1209.08 L1561.3 1209.08 L1560.71 1209.08 L1560.12 1209.08 L1559.54 1209.08 L1558.95 1209.08 L1558.36 1209.08 L1557.78 1209.08 L1557.19 1209.08 L1556.6 1209.08 L1556.02 1209.08 L1555.43 1209.08 L1554.85 1209.08 L1554.26 1209.08 L1553.67 1209.08 L1553.09 1209.08 L1552.5 1209.08 L1551.91 1209.08 L1551.33 1209.08 L1550.74 1209.08 L1550.15 1209.08 L1549.57 1209.08 L1548.98 1209.08 L1548.4 1209.08 L1547.81 1209.08 L1547.22 1209.08 L1546.64 1209.08 L1546.05 1209.08 L1545.46 1209.08 L1544.88 1209.08 L1544.29 1209.08 L1543.7 1209.08 L1543.12 1209.08 L1542.53 1209.08 L1541.94 1209.08 L1541.36 1209.08 L1540.77 1209.08 L1540.19 1209.08 L1539.6 1209.08 L1539.01 1209.08 L1538.43 1209.08 L1537.84 1209.08 L1537.25 1209.08 L1536.67 1209.08 L1536.08 1209.08 L1535.49 1209.08 L1534.91 1209.08 L1534.32 1209.08 L1533.73 1209.08 L1533.15 1209.08 L1532.56 1209.08 L1531.98 1209.08 L1531.39 1209.08 L1530.8 1209.08 L1530.22 1209.08 L1529.63 1209.08 L1529.04 1209.08 L1528.46 1209.08 L1527.87 1209.08 L1527.28 1209.08 L1526.7 1209.08 L1526.11 1209.08 L1525.52 1209.08 L1524.94 1209.08 L1524.35 1209.08 L1523.77 1209.08 L1523.18 1209.08 L1522.59 1209.08 L1522.01 1209.08 L1521.42 1209.08 L1520.83 1209.08 L1520.25 1209.08 L1519.66 1209.08 L1519.07 1209.08 L1518.49 1209.08 L1517.9 1209.08 L1517.32 1209.08 L1516.73 1209.08 L1516.14 1209.08 L1515.56 1209.08 L1514.97 1209.08 L1514.38 1209.08 L1513.8 1209.08 L1513.21 1209.08 L1512.62 1209.08 L1512.04 1209.08 L1511.45 1209.08 L1510.86 1209.08 L1510.28 1209.08 L1509.69 1209.08 L1509.11 1209.08 L1508.52 1209.08 L1507.93 1209.08 L1507.35 1209.08 L1506.76 1209.08 L1506.17 1209.08 L1505.59 1209.08 L1505 1209.08 L1504.41 1209.08 L1503.83 1209.08 L1503.24 1209.08 L1502.65 1209.08 L1502.07 1209.08 L1501.48 1209.08 L1500.9 1209.08 L1500.31 1209.08 L1499.72 1209.08 L1499.14 1209.08 L1498.55 1209.08 L1497.96 1209.08 L1497.38 1209.08 L1496.79 1209.08 L1496.2 1209.08 L1495.62 1209.08 L1495.03 1209.08 L1494.45 1209.08 L1493.86 1209.08 L1493.27 1209.08 L1492.69 1209.08 L1492.1 1209.08 L1491.51 1209.08 L1490.93 1209.08 L1490.34 1209.08 L1489.75 1209.08 L1489.17 1209.08 L1488.58 1209.08 L1487.99 1209.08 L1487.41 1209.08 L1486.82 1209.08 L1486.24 1209.08 L1485.65 1209.08 L1485.06 1209.08 L1484.48 1209.08 L1483.89 1209.08 L1483.3 1209.08 L1482.72 1209.08 L1482.13 1209.08 L1481.54 1209.08 L1480.96 1209.08 L1480.37 1209.08 L1479.78 1209.08 L1479.2 1209.08 L1478.61 1209.08 L1478.03 1209.08 L1477.44 1209.08 L1476.85 1209.08 L1476.27 1209.08 L1475.68 1209.08 L1475.09 1209.08 L1474.51 1209.08 L1473.92 1209.08 L1473.33 1209.08 L1472.75 1209.08 L1472.16 1209.08 L1471.57 1209.08 L1470.99 1209.08 L1470.4 1209.08 L1469.82 1209.08 L1469.23 1209.08 L1468.64 1209.08 L1468.06 1209.08 L1467.47 1209.08 L1466.88 1209.08 L1466.3 1209.08 L1465.71 1209.08 L1465.12 1209.08 L1464.54 1209.08 L1463.95 1209.08 L1463.37 1209.08 L1462.78 1209.08 L1462.19 1209.08 L1461.61 1209.08 L1461.02 1209.08 L1460.43 1209.08 L1459.85 1209.08 L1459.26 1209.08 L1458.67 1209.08 L1458.09 1209.08 L1457.5 1209.08 L1456.91 1209.08 L1456.33 1209.08 L1455.74 1209.08 L1455.16 1209.08 L1454.57 1209.08 L1453.98 1209.08 L1453.4 1209.08 L1452.81 1209.08 L1452.22 1209.08 L1451.64 1209.08 L1451.05 1209.08 L1450.46 1209.08 L1449.88 1209.08 L1449.29 1209.08 L1448.7 1209.08 L1448.12 1209.08 L1447.53 1209.08 L1446.95 1209.08 L1446.36 1209.08 L1445.77 1209.08 L1445.19 1209.08 L1444.6 1209.08 L1444.01 1209.08 L1443.43 1209.08 L1442.84 1209.08 L1442.25 1209.08 L1441.67 1209.08 L1441.08 1209.08 L1440.5 1209.08 L1439.91 1209.08 L1439.32 1209.08 L1438.74 1209.08 L1438.15 1209.08 L1437.56 1209.08 L1436.98 1209.08 L1436.39 1209.08 L1435.8 1209.08 L1435.22 1209.08 L1434.63 1209.08 L1434.04 1209.08 L1433.46 1209.08 L1432.87 1209.08 L1432.29 1209.08 L1431.7 1209.08 L1431.11 1209.08 L1430.53 1209.08 L1429.94 1209.08 L1429.35 1209.08 L1428.77 1209.08 L1428.18 1209.08 L1427.59 1209.08 L1427.01 1209.08 L1426.42 1209.08 L1425.83 1209.08 L1425.25 1209.08 L1424.66 1209.08 L1424.08 1209.08 L1423.49 1209.08 L1422.9 1209.08 L1422.32 1209.08 L1421.73 1209.08 L1421.14 1209.08 L1420.56 1209.08 L1419.97 1209.08 L1419.38 1209.08 L1418.8 1209.08 L1418.21 1209.08 L1417.63 1209.08 L1417.04 1209.08 L1416.45 1209.08 L1415.87 1209.08 L1415.28 1209.08 L1414.69 1209.08 L1414.11 1209.08 L1413.52 1209.08 L1412.93 1209.08 L1412.35 1209.08 L1411.76 1209.08 L1411.17 1209.08 L1410.59 1209.08 L1410 1209.08 L1409.42 1209.08 L1408.83 1209.08 L1408.24 1209.08 L1407.66 1209.08 L1407.07 1209.08 L1406.48 1209.08 L1405.9 1209.08 L1405.31 1209.08 L1404.72 1209.08 L1404.14 1209.08 L1403.55 1209.08 L1402.96 1209.08 L1402.38 1209.08 L1401.79 1209.08 L1401.21 1209.08 L1400.62 1209.08 L1400.03 1209.08 L1399.45 1209.08 L1398.86 1209.08 L1398.27 1209.08 L1397.69 1209.08 L1397.1 1209.08 L1396.51 1209.08 L1395.93 1209.08 L1395.34 1209.08 L1394.75 1209.08 L1394.17 1209.08 L1393.58 1209.08 L1393 1209.08 L1392.41 1209.08 L1391.82 1209.08 L1391.24 1209.08 L1390.65 1209.08 L1390.06 1209.08 L1389.48 1209.08 L1388.89 1209.08 L1388.3 1209.08 L1387.72 1209.08 L1387.13 1209.08 L1386.55 1209.08 L1385.96 1209.08 L1385.37 1209.08 L1384.79 1209.08 L1384.2 1209.08 L1383.61 1209.08 L1383.03 1209.08 L1382.44 1209.08 L1381.85 1209.08 L1381.27 1209.08 L1380.68 1209.08 L1380.09 1209.08 L1379.51 1209.08 L1378.92 1209.08 L1378.34 1209.08 L1377.75 1209.08 L1377.16 1209.08 L1376.58 1209.08 L1375.99 1209.08 L1375.4 1209.08 L1374.82 1209.08 L1374.23 1209.08 L1373.64 1209.08 L1373.06 1209.08 L1372.47 1209.08 L1371.88 1209.08 L1371.3 1209.08 L1370.71 1209.08 L1370.13 1209.08 L1369.54 1209.08 L1368.95 1209.08 L1368.37 1209.08 L1367.78 1209.08 L1367.19 1209.08 L1366.61 1209.08 L1366.02 1209.08 L1365.43 1209.08 L1364.85 1209.08 L1364.26 1209.08 L1363.68 1209.08 L1363.09 1209.08 L1362.5 1209.08 L1361.92 1209.08 L1361.33 1209.08 L1360.74 1209.08 L1360.16 1209.08 L1359.57 1209.08 L1358.98 1209.08 L1358.4 1209.08 L1357.81 1209.08 L1357.22 1209.08 L1356.64 1209.08 L1356.05 1209.08 L1355.47 1209.08 L1354.88 1209.08 L1354.29 1209.08 L1353.71 1209.08 L1353.12 1209.08 L1352.53 1209.08 L1351.95 1209.08 L1351.36 1209.08 L1350.77 1209.08 L1350.19 1209.08 L1349.6 1209.08 L1349.01 1209.08 L1348.43 1209.08 L1347.84 1209.08 L1347.26 1209.08 L1346.67 1209.08 L1346.08 1209.08 L1345.5 1209.08 L1344.91 1209.08 L1344.32 1209.08 L1343.74 1209.08 L1343.15 1209.08 L1342.56 1209.08 L1341.98 1209.08 L1341.39 1209.08 L1340.8 1209.08 L1340.22 1209.08 L1339.63 1209.08 L1339.05 1209.08 L1338.46 1209.08 L1337.87 1209.08 L1337.29 1209.08 L1336.7 1209.08 L1336.11 1209.08 L1335.53 1209.08 L1334.94 1209.08 L1334.35 1209.08 L1333.77 1209.08 L1333.18 1209.08 L1332.6 1209.08 L1332.01 1209.08 L1331.42 1209.08 L1330.84 1209.08 L1330.25 1209.08 L1329.66 1209.08 L1329.08 1209.08 L1328.49 1209.08 L1327.9 1209.08 L1327.32 1209.08 L1326.73 1209.08 L1326.14 1209.08 L1325.56 1209.08 L1324.97 1209.08 L1324.39 1209.08 L1323.8 1209.08 L1323.21 1209.08 L1322.63 1209.08 L1322.04 1209.08 L1321.45 1209.08 L1320.87 1209.08 L1320.28 1209.08 L1319.69 1209.08 L1319.11 1209.08 L1318.52 1209.08 L1317.93 1209.08 L1317.35 1209.08 L1316.76 1209.08 L1316.18 1209.08 L1315.59 1209.08 L1315 1209.08 L1314.42 1209.08 L1313.83 1209.08 L1313.24 1209.08 L1312.66 1209.08 L1312.07 1209.08 L1311.48 1209.08 L1310.9 1209.08 L1310.31 1209.08 L1309.73 1209.08 L1309.14 1209.08 L1308.55 1209.08 L1307.97 1209.08 L1307.38 1209.08 L1306.79 1209.08 L1306.21 1209.08 L1305.62 1209.08 L1305.03 1209.08 L1304.45 1209.08 L1303.86 1209.08 L1303.27 1209.08 L1302.69 1209.08 L1302.1 1209.08 L1301.52 1209.08 L1300.93 1209.08 L1300.34 1209.08 L1299.76 1209.08 L1299.17 1209.08 L1298.58 1209.08 L1298 1209.08 L1297.41 1209.08 L1296.82 1209.08 L1296.24 1209.08 L1295.65 1209.08 L1295.06 1209.08 L1294.48 1209.08 L1293.89 1209.08 L1293.31 1209.08 L1292.72 1209.08 L1292.13 1209.08 L1291.55 1209.08 L1290.96 1209.08 L1290.37 1209.08 L1289.79 1209.08 L1289.2 1209.08 L1288.61 1209.08 L1288.03 1209.08 L1287.44 1209.08 L1286.86 1209.08 L1286.27 1209.08 L1285.68 1209.08 L1285.1 1209.08 L1284.51 1209.08 L1283.92 1209.08 L1283.34 1209.08 L1282.75 1209.08 L1282.16 1209.08 L1281.58 1209.08 L1280.99 1209.08 L1280.4 1209.08 L1279.82 1209.08 L1279.23 1209.08 L1278.65 1209.08 L1278.06 1209.08 L1277.47 1209.08 L1276.89 1209.08 L1276.3 1209.08 L1275.71 1209.08 L1275.13 1209.08 L1274.54 1209.08 L1273.95 1209.08 L1273.37 1209.08 L1272.78 1209.08 L1272.19 1209.08 L1271.61 1209.08 L1271.02 1209.08 L1270.44 1209.08 L1269.85 1209.08 L1269.26 1209.08 L1268.68 1209.08 L1268.09 1209.08 L1267.5 1209.08 L1266.92 1209.08 L1266.33 1209.08 L1265.74 1209.08 L1265.16 1209.08 L1264.57 1209.08 L1263.98 1209.08 L1263.4 1209.08 L1262.81 1209.08 L1262.23 1209.08 L1261.64 1209.08 L1261.05 1209.08 L1260.47 1209.08 L1259.88 1209.08 L1259.29 1209.08 L1258.71 1209.08 L1258.12 1209.08 L1257.53 1209.08 L1256.95 1209.08 L1256.36 1209.08 L1255.78 1209.08 L1255.19 1209.08 L1254.6 1209.08 L1254.02 1209.08 L1253.43 1209.08 L1252.84 1209.08 L1252.26 1209.08 L1251.67 1209.08 L1251.08 1209.08 L1250.5 1209.08 L1249.91 1209.08 L1249.32 1209.08 L1248.74 1209.08 L1248.15 1209.08 L1247.57 1209.08 L1246.98 1209.08 L1246.39 1209.08 L1245.81 1209.08 L1245.22 1209.08 L1244.63 1209.08 L1244.05 1209.08 L1243.46 1209.08 L1242.87 1209.08 L1242.29 1209.08 L1241.7 1209.08 L1241.11 1209.08 L1240.53 1209.08 L1239.94 1209.08 L1239.36 1209.08 L1238.77 1209.08 L1238.18 1209.08 L1237.6 1209.08 L1237.01 1209.08 L1236.42 1209.08 L1235.84 1209.08 L1235.25 1209.08 L1234.66 1209.08 L1234.08 1209.08 L1233.49 1209.08 L1232.91 1209.08 L1232.32 1209.08 L1231.73 1209.08 L1231.15 1209.08 L1230.56 1209.08 L1229.97 1209.08 L1229.39 1209.08 L1228.8 1209.08 L1228.21 1209.08 L1227.63 1209.08 L1227.04 1209.08 L1226.45 1209.08 L1225.87 1209.08 L1225.28 1209.08 L1224.7 1209.08 L1224.11 1209.08 L1223.52 1209.08 L1222.94 1209.08 L1222.35 1209.08 L1221.76 1209.08 L1221.18 1209.08 L1220.59 1209.08 L1220 1209.08 L1219.42 1209.08 L1218.83 1209.08 L1218.24 1209.08 L1217.66 1209.08 L1217.07 1209.08 L1216.49 1209.08 L1215.9 1209.08 L1215.31 1209.08 L1214.73 1209.08 L1214.14 1209.08 L1213.55 1209.08 L1212.97 1209.08 L1212.38 1209.08 L1211.79 1209.08 L1211.21 1209.08 L1210.62 1209.08 L1210.03 1209.08 L1209.45 1209.08 L1208.86 1209.08 L1208.28 1209.08 L1207.69 1209.08 L1207.1 1209.08 L1206.52 1209.08 L1205.93 1209.08 L1205.34 1209.08 L1204.76 1209.08 L1204.17 1209.08 L1203.58 1209.08 L1203 1209.08 L1202.41 1209.08 L1201.83 1209.08 L1201.24 1209.08 L1200.65 1209.08 L1200.07 1209.08 L1199.48 1209.08 L1198.89 1209.08 L1198.31 1209.08 L1197.72 1209.08 L1197.13 1209.08 L1196.55 1209.08 L1195.96 1209.08 L1195.37 1209.08 L1194.79 1209.08 L1194.2 1209.08 L1193.62 1209.08 L1193.03 1209.08 L1192.44 1209.08 L1191.86 1209.08 L1191.27 1209.08 L1190.68 1209.08 L1190.1 1209.08 L1189.51 1209.08 L1188.92 1209.08 L1188.34 1209.08 L1187.75 1209.08 L1187.16 1209.08 L1186.58 1209.08 L1185.99 1209.08 L1185.41 1209.08 L1184.82 1209.08 L1184.23 1209.08 L1183.65 1209.08 L1183.06 1209.08 L1182.47 1209.08 L1181.89 1209.08 L1181.3 1209.08 L1180.71 1209.08 L1180.13 1209.08 L1179.54 1209.08 L1178.96 1209.08 L1178.37 1209.08 L1177.78 1209.08 L1177.2 1209.08 L1176.61 1209.08 L1176.02 1209.08 L1175.44 1209.08 L1174.85 1209.08 L1174.26 1209.08 L1173.68 1209.08 L1173.09 1209.08 L1172.5 1209.08 L1171.92 1209.08 L1171.33 1209.08 L1170.75 1209.08 L1170.16 1209.08 L1169.57 1209.08 L1168.99 1209.08 L1168.4 1209.08 L1167.81 1209.08 L1167.23 1209.08 L1166.64 1209.08 L1166.05 1209.08 L1165.47 1209.08 L1164.88 1209.08 L1164.29 1209.08 L1163.71 1209.08 L1163.12 1209.08 L1162.54 1209.08 L1161.95 1209.08 L1161.36 1209.08 L1160.78 1209.08 L1160.19 1209.08 L1159.6 1209.08 L1159.02 1209.08 L1158.43 1209.08 L1157.84 1209.08 L1157.26 1209.08 L1156.67 1209.08 L1156.09 1209.08 L1155.5 1209.08 L1154.91 1209.08 L1154.33 1209.08 L1153.74 1209.08 L1153.15 1209.08 L1152.57 1209.08 L1151.98 1209.08 L1151.39 1209.08 L1150.81 1209.08 L1150.22 1209.08 L1149.63 1209.08 L1149.05 1209.08 L1148.46 1209.08 L1147.88 1209.08 L1147.29 1209.08 L1146.7 1209.08 L1146.12 1209.08 L1145.53 1209.08 L1144.94 1209.08 L1144.36 1209.08 L1143.77 1209.08 L1143.18 1209.08 L1142.6 1209.08 L1142.01 1209.08 L1141.42 1209.08 L1140.84 1209.08 L1140.25 1209.08 L1139.67 1209.08 L1139.08 1209.08 L1138.49 1209.08 L1137.91 1209.08 L1137.32 1209.08 L1136.73 1209.08 L1136.15 1209.08 L1135.56 1209.08 L1134.97 1209.08 L1134.39 1209.08 L1133.8 1209.08 L1133.21 1209.08 L1132.63 1209.08 L1132.04 1209.08 L1131.46 1209.08 L1130.87 1209.08 L1130.28 1209.08 L1129.7 1209.08 L1129.11 1209.08 L1128.52 1209.08 L1127.94 1209.08 L1127.35 1209.08 L1126.76 1209.08 L1126.18 1209.08 L1125.59 1209.08 L1125.01 1209.08 L1124.42 1209.08 L1123.83 1209.08 L1123.25 1209.08 L1122.66 1209.08 L1122.07 1209.08 L1121.49 1209.08 L1120.9 1209.08 L1120.31 1209.08 L1119.73 1209.08 L1119.14 1209.08 L1118.55 1209.08 L1117.97 1209.08 L1117.38 1209.08 L1116.8 1209.08 L1116.21 1209.08 L1115.62 1209.08 L1115.04 1209.08 L1114.45 1209.08 L1113.86 1209.08 L1113.28 1209.08 L1112.69 1209.08 L1112.1 1209.08 L1111.52 1209.08 L1110.93 1209.08 L1110.34 1209.08 L1109.76 1209.08 L1109.17 1209.08 L1108.59 1209.08 L1108 1209.08 L1107.41 1209.08 L1106.83 1209.08 L1106.24 1209.08 L1105.65 1209.08 L1105.07 1209.08 L1104.48 1209.08 L1103.89 1209.08 L1103.31 1209.08 L1102.72 1209.08 L1102.14 1209.08 L1101.55 1209.08 L1100.96 1209.08 L1100.38 1209.08 L1099.79 1209.08 L1099.2 1209.08 L1098.62 1209.08 L1098.03 1209.08 L1097.44 1209.08 L1096.86 1209.08 L1096.27 1209.08 L1095.68 1209.08 L1095.1 1209.08 L1094.51 1209.08 L1093.93 1209.08 L1093.34 1209.08 L1092.75 1209.08 L1092.17 1209.08 L1091.58 1209.08 L1090.99 1209.08 L1090.41 1209.08 L1089.82 1209.08 L1089.23 1209.08 L1088.65 1209.08 L1088.06 1209.08 L1087.47 1209.08 L1086.89 1209.08 L1086.3 1209.08 L1085.72 1209.08 L1085.13 1209.08 L1084.54 1209.08 L1083.96 1209.08 L1083.37 1209.08 L1082.78 1209.08 L1082.2 1209.08 L1081.61 1209.08 L1081.02 1209.08 L1080.44 1209.08 L1079.85 1209.08 L1079.26 1209.08 L1078.68 1209.08 L1078.09 1209.08 L1077.51 1209.08 L1076.92 1209.08 L1076.33 1209.08 L1075.75 1209.08 L1075.16 1209.08 L1074.57 1209.08 L1073.99 1209.08 L1073.4 1209.08 L1072.81 1209.08 L1072.23 1209.08 L1071.64 1209.08 L1071.06 1209.08 L1070.47 1209.08 L1069.88 1209.08 L1069.3 1209.08 L1068.71 1209.08 L1068.12 1209.08 L1067.54 1209.08 L1066.95 1209.08 L1066.36 1209.08 L1065.78 1209.08 L1065.19 1209.08 L1064.6 1209.08 L1064.02 1209.08 L1063.43 1209.08 L1062.85 1209.08 L1062.26 1209.08 L1061.67 1209.08 L1061.09 1209.08 L1060.5 1209.08 L1059.91 1209.08 L1059.33 1209.08 L1058.74 1209.08 L1058.15 1209.08 L1057.57 1209.08 L1056.98 1209.08 L1056.39 1209.08 L1055.81 1209.08 L1055.22 1209.08 L1054.64 1209.08 L1054.05 1209.08 L1053.46 1209.08 L1052.88 1209.08 L1052.29 1209.08 L1051.7 1209.08 L1051.12 1209.08 L1050.53 1209.08 L1049.94 1209.08 L1049.36 1209.08 L1048.77 1209.08 L1048.19 1209.08 L1047.6 1209.08 L1047.01 1209.08 L1046.43 1209.08 L1045.84 1209.08 L1045.25 1209.08 L1044.67 1209.08 L1044.08 1209.08 L1043.49 1209.08 L1042.91 1209.08 L1042.32 1209.08 L1041.73 1209.08 L1041.15 1209.08 L1040.56 1209.08 L1039.98 1209.08 L1039.39 1209.08 L1038.8 1209.08 L1038.22 1209.08 L1037.63 1209.08 L1037.04 1209.08 L1036.46 1209.08 L1035.87 1209.08 L1035.28 1209.08 L1034.7 1209.08 L1034.11 1209.08 L1033.52 1209.08 L1032.94 1209.08 L1032.35 1209.08 L1031.77 1209.08 L1031.18 1209.08 L1030.59 1209.08 L1030.01 1209.08 L1029.42 1209.08 L1028.83 1209.08 L1028.25 1209.08 L1027.66 1209.08 L1027.07 1209.08 L1026.49 1209.08 L1025.9 1209.08 L1025.32 1209.08 L1024.73 1209.08 L1024.14 1209.08 L1023.56 1209.08 L1022.97 1209.08 L1022.38 1209.08 L1021.8 1209.08 L1021.21 1209.08 L1020.62 1209.08 L1020.04 1209.08 L1019.45 1209.08 L1018.86 1209.08 L1018.28 1209.08 L1017.69 1209.08 L1017.11 1209.08 L1016.52 1209.08 L1015.93 1209.08 L1015.35 1209.08 L1014.76 1209.08 L1014.17 1209.08 L1013.59 1209.08 L1013 1209.08 L1012.41 1209.08 L1011.83 1209.08 L1011.24 1209.08 L1010.65 1209.08 L1010.07 1209.08 L1009.48 1209.08 L1008.9 1209.08 L1008.31 1209.08 L1007.72 1209.08 L1007.14 1209.08 L1006.55 1209.08 L1005.96 1209.08 L1005.38 1209.08 L1004.79 1209.08 L1004.2 1209.08 L1003.62 1209.08 L1003.03 1209.08 L1002.44 1209.08 L1001.86 1209.08 L1001.27 1209.08 L1000.69 1209.08 L1000.1 1209.08 L999.513 1209.08 L998.926 1209.08 L998.34 1209.08 L997.754 1209.08 L997.167 1209.08 L996.581 1209.08 L995.994 1209.08 L995.408 1209.08 L994.822 1209.08 L994.235 1209.08 L993.649 1209.08 L993.062 1209.08 L992.476 1209.08 L991.889 1209.08 L991.303 1209.08 L990.717 1209.08 L990.13 1209.08 L989.544 1209.08 L988.957 1209.08 L988.371 1209.08 L987.785 1209.08 L987.198 1209.08 L986.612 1209.08 L986.025 1209.08  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.45 986.612,1209.45 987.198,1209.45 987.785,1209.45 988.371,1209.45 988.957,1209.45 989.544,1209.45 990.13,1209.45 990.717,1209.45 991.303,1209.45 991.889,1209.45 992.476,1209.45 993.062,1209.45 993.649,1209.45 994.235,1209.45 994.822,1209.45 995.408,1209.45 995.994,1209.45 996.581,1209.45 997.167,1209.45 997.754,1209.45 998.34,1209.45 998.926,1209.45 999.513,1209.45 1000.1,1209.45 1000.69,1209.45 1001.27,1209.45 1001.86,1209.45 1002.44,1209.45 1003.03,1209.45 1003.62,1209.45 1004.2,1209.45 1004.79,1209.45 1005.38,1209.45 1005.96,1209.45 1006.55,1209.45 1007.14,1209.45 1007.72,1209.45 1008.31,1209.45 1008.9,1209.45 1009.48,1209.45 1010.07,1209.45 1010.65,1209.45 1011.24,1209.45 1011.83,1209.45 1012.41,1209.45 1013,1209.45 1013.59,1209.45 1014.17,1209.45 1014.76,1209.45 1015.35,1209.45 1015.93,1209.45 1016.52,1209.45 1017.11,1209.45 1017.69,1209.45 1018.28,1209.45 1018.86,1209.45 1019.45,1209.45 1020.04,1209.45 1020.62,1209.45 1021.21,1209.45 1021.8,1209.45 1022.38,1209.45 1022.97,1209.45 1023.56,1209.45 1024.14,1209.45 1024.73,1209.45 1025.32,1209.45 1025.9,1209.45 1026.49,1209.45 1027.07,1209.45 1027.66,1209.45 1028.25,1209.45 1028.83,1209.45 1029.42,1209.45 1030.01,1209.45 1030.59,1209.45 1031.18,1209.45 1031.77,1209.45 1032.35,1209.45 1032.94,1209.45 1033.52,1209.45 1034.11,1209.45 1034.7,1209.45 1035.28,1209.45 1035.87,1209.45 1036.46,1209.45 1037.04,1209.45 1037.63,1209.45 1038.22,1209.45 1038.8,1209.45 1039.39,1209.45 1039.98,1209.45 1040.56,1209.45 1041.15,1209.45 1041.73,1209.45 1042.32,1209.45 1042.91,1209.45 1043.49,1209.45 1044.08,1209.45 1044.67,1209.45 1045.25,1209.45 1045.84,1209.45 1046.43,1209.45 1047.01,1209.45 1047.6,1209.45 1048.19,1209.45 1048.77,1209.45 1049.36,1209.45 1049.94,1209.45 1050.53,1209.45 1051.12,1209.45 1051.7,1209.45 1052.29,1209.45 1052.88,1209.45 1053.46,1209.45 1054.05,1209.45 1054.64,1209.45 1055.22,1209.45 1055.81,1209.45 1056.39,1209.45 1056.98,1209.45 1057.57,1209.45 1058.15,1209.45 1058.74,1209.45 1059.33,1209.45 1059.91,1209.45 1060.5,1209.45 1061.09,1209.45 1061.67,1209.45 1062.26,1209.45 1062.85,1209.45 1063.43,1209.45 1064.02,1209.45 1064.6,1209.45 1065.19,1209.45 1065.78,1209.45 1066.36,1209.45 1066.95,1209.45 1067.54,1209.45 1068.12,1209.45 1068.71,1209.45 1069.3,1209.45 1069.88,1209.45 1070.47,1209.45 1071.06,1209.45 1071.64,1209.45 1072.23,1209.45 1072.81,1209.45 1073.4,1209.45 1073.99,1209.45 1074.57,1209.45 1075.16,1209.45 1075.75,1209.45 1076.33,1209.45 1076.92,1209.45 1077.51,1209.45 1078.09,1209.45 1078.68,1209.45 1079.26,1209.45 1079.85,1209.45 1080.44,1209.45 1081.02,1209.45 1081.61,1209.45 1082.2,1209.45 1082.78,1209.45 1083.37,1209.45 1083.96,1209.45 1084.54,1209.45 1085.13,1209.45 1085.72,1209.45 1086.3,1209.45 1086.89,1209.45 1087.47,1209.45 1088.06,1209.45 1088.65,1209.45 1089.23,1209.45 1089.82,1209.45 1090.41,1209.45 1090.99,1209.45 1091.58,1209.45 1092.17,1209.45 1092.75,1209.45 1093.34,1209.45 1093.93,1209.45 1094.51,1209.45 1095.1,1209.45 1095.68,1209.45 1096.27,1209.45 1096.86,1209.45 1097.44,1209.45 1098.03,1209.45 1098.62,1209.45 1099.2,1209.45 1099.79,1209.45 1100.38,1209.45 1100.96,1209.45 1101.55,1209.45 1102.14,1209.45 1102.72,1209.45 1103.31,1209.45 1103.89,1209.45 1104.48,1209.45 1105.07,1209.45 1105.65,1209.45 1106.24,1209.45 1106.83,1209.45 1107.41,1209.45 1108,1209.45 1108.59,1209.45 1109.17,1209.45 1109.76,1209.45 1110.34,1209.45 1110.93,1209.45 1111.52,1209.45 1112.1,1209.45 1112.69,1209.45 1113.28,1209.45 1113.86,1209.45 1114.45,1209.45 1115.04,1209.45 1115.62,1209.45 1116.21,1209.45 1116.8,1209.45 1117.38,1209.45 1117.97,1209.45 1118.55,1209.45 1119.14,1209.45 1119.73,1209.45 1120.31,1209.45 1120.9,1209.45 1121.49,1209.45 1122.07,1209.45 1122.66,1209.45 1123.25,1209.45 1123.83,1209.45 1124.42,1209.45 1125.01,1209.45 1125.59,1209.45 1126.18,1209.45 1126.76,1209.45 1127.35,1209.45 1127.94,1209.45 1128.52,1209.45 1129.11,1209.45 1129.7,1209.45 1130.28,1209.45 1130.87,1209.45 1131.46,1209.45 1132.04,1209.45 1132.63,1209.45 1133.21,1209.45 1133.8,1209.45 1134.39,1209.45 1134.97,1209.45 1135.56,1209.45 1136.15,1209.45 1136.73,1209.45 1137.32,1209.45 1137.91,1209.45 1138.49,1209.45 1139.08,1209.45 1139.67,1209.45 1140.25,1209.45 1140.84,1209.45 1141.42,1209.45 1142.01,1209.45 1142.6,1209.45 1143.18,1209.45 1143.77,1209.45 1144.36,1209.45 1144.94,1209.45 1145.53,1209.45 1146.12,1209.45 1146.7,1209.45 1147.29,1209.45 1147.88,1209.45 1148.46,1209.45 1149.05,1209.45 1149.63,1209.45 1150.22,1209.45 1150.81,1209.45 1151.39,1209.45 1151.98,1209.45 1152.57,1209.45 1153.15,1209.45 1153.74,1209.45 1154.33,1209.45 1154.91,1209.45 1155.5,1209.45 1156.09,1209.45 1156.67,1209.45 1157.26,1209.45 1157.84,1209.45 1158.43,1209.45 1159.02,1209.45 1159.6,1209.45 1160.19,1209.45 1160.78,1209.45 1161.36,1209.45 1161.95,1209.45 1162.54,1209.45 1163.12,1209.45 1163.71,1209.45 1164.29,1209.45 1164.88,1209.45 1165.47,1209.45 1166.05,1209.45 1166.64,1209.45 1167.23,1209.45 1167.81,1209.45 1168.4,1209.45 1168.99,1209.45 1169.57,1209.45 1170.16,1209.45 1170.75,1209.45 1171.33,1209.45 1171.92,1209.45 1172.5,1209.45 1173.09,1209.45 1173.68,1209.45 1174.26,1209.45 1174.85,1209.45 1175.44,1209.45 1176.02,1209.45 1176.61,1209.45 1177.2,1209.45 1177.78,1209.45 1178.37,1209.45 1178.96,1209.45 1179.54,1209.45 1180.13,1209.45 1180.71,1209.45 1181.3,1209.45 1181.89,1209.45 1182.47,1209.45 1183.06,1209.45 1183.65,1209.45 1184.23,1209.45 1184.82,1209.45 1185.41,1209.45 1185.99,1209.45 1186.58,1209.45 1187.16,1209.45 1187.75,1209.45 1188.34,1209.45 1188.92,1209.45 1189.51,1209.45 1190.1,1209.45 1190.68,1209.45 1191.27,1209.45 1191.86,1209.45 1192.44,1209.45 1193.03,1209.45 1193.62,1209.45 1194.2,1209.45 1194.79,1209.45 1195.37,1209.45 1195.96,1209.45 1196.55,1209.45 1197.13,1209.45 1197.72,1209.45 1198.31,1209.45 1198.89,1209.45 1199.48,1209.45 1200.07,1209.45 1200.65,1209.45 1201.24,1209.45 1201.83,1209.45 1202.41,1209.45 1203,1209.45 1203.58,1209.45 1204.17,1209.45 1204.76,1209.45 1205.34,1209.45 1205.93,1209.45 1206.52,1209.45 1207.1,1209.45 1207.69,1209.45 1208.28,1209.45 1208.86,1209.45 1209.45,1209.45 1210.03,1209.45 1210.62,1209.45 1211.21,1209.45 1211.79,1209.45 1212.38,1209.45 1212.97,1209.45 1213.55,1209.45 1214.14,1209.45 1214.73,1209.45 1215.31,1209.45 1215.9,1209.45 1216.49,1209.45 1217.07,1209.45 1217.66,1209.45 1218.24,1209.45 1218.83,1209.45 1219.42,1209.45 1220,1209.45 1220.59,1209.45 1221.18,1209.45 1221.76,1209.45 1222.35,1209.45 1222.94,1209.45 1223.52,1209.45 1224.11,1209.45 1224.7,1209.45 1225.28,1209.45 1225.87,1209.45 1226.45,1209.45 1227.04,1209.45 1227.63,1209.45 1228.21,1209.45 1228.8,1209.45 1229.39,1209.45 1229.97,1209.45 1230.56,1209.45 1231.15,1209.45 1231.73,1209.45 1232.32,1209.45 1232.91,1209.45 1233.49,1209.45 1234.08,1209.45 1234.66,1209.45 1235.25,1209.45 1235.84,1209.45 1236.42,1209.45 1237.01,1209.45 1237.6,1209.45 1238.18,1209.45 1238.77,1209.45 1239.36,1209.45 1239.94,1209.45 1240.53,1209.45 1241.11,1209.45 1241.7,1209.45 1242.29,1209.45 1242.87,1209.45 1243.46,1209.45 1244.05,1209.45 1244.63,1209.45 1245.22,1209.45 1245.81,1209.45 1246.39,1209.45 1246.98,1209.45 1247.57,1209.45 1248.15,1209.45 1248.74,1209.45 1249.32,1209.45 1249.91,1209.45 1250.5,1209.45 1251.08,1209.45 1251.67,1209.45 1252.26,1209.45 1252.84,1209.45 1253.43,1209.45 1254.02,1209.45 1254.6,1209.45 1255.19,1209.45 1255.78,1209.45 1256.36,1209.45 1256.95,1209.45 1257.53,1209.45 1258.12,1209.45 1258.71,1209.45 1259.29,1209.45 1259.88,1209.45 1260.47,1209.45 1261.05,1209.45 1261.64,1209.45 1262.23,1209.45 1262.81,1209.45 1263.4,1209.45 1263.98,1209.45 1264.57,1209.45 1265.16,1209.45 1265.74,1209.45 1266.33,1209.45 1266.92,1209.45 1267.5,1209.45 1268.09,1209.45 1268.68,1209.45 1269.26,1209.45 1269.85,1209.45 1270.44,1209.45 1271.02,1209.45 1271.61,1209.45 1272.19,1209.45 1272.78,1209.45 1273.37,1209.45 1273.95,1209.45 1274.54,1209.45 1275.13,1209.45 1275.71,1209.45 1276.3,1209.45 1276.89,1209.45 1277.47,1209.45 1278.06,1209.45 1278.65,1209.45 1279.23,1209.45 1279.82,1209.45 1280.4,1209.45 1280.99,1209.45 1281.58,1209.45 1282.16,1209.45 1282.75,1209.45 1283.34,1209.45 1283.92,1209.45 1284.51,1209.45 1285.1,1209.45 1285.68,1209.45 1286.27,1209.45 1286.86,1209.45 1287.44,1209.45 1288.03,1209.45 1288.61,1209.45 1289.2,1209.45 1289.79,1209.45 1290.37,1209.45 1290.96,1209.45 1291.55,1209.45 1292.13,1209.45 1292.72,1209.45 1293.31,1209.45 1293.89,1209.45 1294.48,1209.45 1295.06,1209.45 1295.65,1209.45 1296.24,1209.45 1296.82,1209.45 1297.41,1209.45 1298,1209.45 1298.58,1209.45 1299.17,1209.45 1299.76,1209.45 1300.34,1209.45 1300.93,1209.45 1301.52,1209.45 1302.1,1209.45 1302.69,1209.45 1303.27,1209.45 1303.86,1209.45 1304.45,1209.45 1305.03,1209.45 1305.62,1209.45 1306.21,1209.45 1306.79,1209.45 1307.38,1209.45 1307.97,1209.45 1308.55,1209.45 1309.14,1209.45 1309.73,1209.45 1310.31,1209.45 1310.9,1209.45 1311.48,1209.45 1312.07,1209.45 1312.66,1209.45 1313.24,1209.45 1313.83,1209.45 1314.42,1209.45 1315,1209.45 1315.59,1209.45 1316.18,1209.45 1316.76,1209.45 1317.35,1209.45 1317.93,1209.45 1318.52,1209.45 1319.11,1209.45 1319.69,1209.45 1320.28,1209.45 1320.87,1209.45 1321.45,1209.45 1322.04,1209.45 1322.63,1209.45 1323.21,1209.45 1323.8,1209.45 1324.39,1209.45 1324.97,1209.45 1325.56,1209.45 1326.14,1209.45 1326.73,1209.45 1327.32,1209.45 1327.9,1209.45 1328.49,1209.45 1329.08,1209.45 1329.66,1209.45 1330.25,1209.45 1330.84,1209.45 1331.42,1209.45 1332.01,1209.45 1332.6,1209.45 1333.18,1209.45 1333.77,1209.45 1334.35,1209.45 1334.94,1209.45 1335.53,1209.45 1336.11,1209.45 1336.7,1209.45 1337.29,1209.45 1337.87,1209.45 1338.46,1209.45 1339.05,1209.45 1339.63,1209.45 1340.22,1209.45 1340.8,1209.45 1341.39,1209.45 1341.98,1209.45 1342.56,1209.45 1343.15,1209.45 1343.74,1209.45 1344.32,1209.45 1344.91,1209.45 1345.5,1209.45 1346.08,1209.45 1346.67,1209.45 1347.26,1209.45 1347.84,1209.45 1348.43,1209.45 1349.01,1209.45 1349.6,1209.45 1350.19,1209.45 1350.77,1209.45 1351.36,1209.45 1351.95,1209.45 1352.53,1209.45 1353.12,1209.45 1353.71,1209.45 1354.29,1209.45 1354.88,1209.45 1355.47,1209.45 1356.05,1209.45 1356.64,1209.45 1357.22,1209.45 1357.81,1209.45 1358.4,1209.45 1358.98,1209.45 1359.57,1209.45 1360.16,1209.45 1360.74,1209.45 1361.33,1209.45 1361.92,1209.45 1362.5,1209.45 1363.09,1209.45 1363.68,1209.45 1364.26,1209.45 1364.85,1209.45 1365.43,1209.45 1366.02,1209.45 1366.61,1209.45 1367.19,1209.45 1367.78,1209.45 1368.37,1209.45 1368.95,1209.45 1369.54,1209.45 1370.13,1209.45 1370.71,1209.45 1371.3,1209.45 1371.88,1209.45 1372.47,1209.45 1373.06,1209.45 1373.64,1209.45 1374.23,1209.45 1374.82,1209.45 1375.4,1209.45 1375.99,1209.45 1376.58,1209.45 1377.16,1209.45 1377.75,1209.45 1378.34,1209.45 1378.92,1209.45 1379.51,1209.45 1380.09,1209.45 1380.68,1209.45 1381.27,1209.45 1381.85,1209.45 1382.44,1209.45 1383.03,1209.45 1383.61,1209.45 1384.2,1209.45 1384.79,1209.45 1385.37,1209.45 1385.96,1209.45 1386.55,1209.45 1387.13,1209.45 1387.72,1209.45 1388.3,1209.45 1388.89,1209.45 1389.48,1209.45 1390.06,1209.45 1390.65,1209.45 1391.24,1209.45 1391.82,1209.45 1392.41,1209.45 1393,1209.45 1393.58,1209.45 1394.17,1209.45 1394.75,1209.45 1395.34,1209.45 1395.93,1209.45 1396.51,1209.45 1397.1,1209.45 1397.69,1209.45 1398.27,1209.45 1398.86,1209.45 1399.45,1209.45 1400.03,1209.45 1400.62,1209.45 1401.21,1209.45 1401.79,1209.45 1402.38,1209.45 1402.96,1209.45 1403.55,1209.45 1404.14,1209.45 1404.72,1209.45 1405.31,1209.45 1405.9,1209.45 1406.48,1209.45 1407.07,1209.45 1407.66,1209.45 1408.24,1209.45 1408.83,1209.45 1409.42,1209.45 1410,1209.45 1410.59,1209.45 1411.17,1209.45 1411.76,1209.45 1412.35,1209.45 1412.93,1209.45 1413.52,1209.45 1414.11,1209.45 1414.69,1209.45 1415.28,1209.45 1415.87,1209.45 1416.45,1209.45 1417.04,1209.45 1417.63,1209.45 1418.21,1209.45 1418.8,1209.45 1419.38,1209.45 1419.97,1209.45 1420.56,1209.45 1421.14,1209.45 1421.73,1209.45 1422.32,1209.45 1422.9,1209.45 1423.49,1209.45 1424.08,1209.45 1424.66,1209.45 1425.25,1209.45 1425.83,1209.45 1426.42,1209.45 1427.01,1209.45 1427.59,1209.45 1428.18,1209.45 1428.77,1209.45 1429.35,1209.45 1429.94,1209.45 1430.53,1209.45 1431.11,1209.45 1431.7,1209.45 1432.29,1209.45 1432.87,1209.45 1433.46,1209.45 1434.04,1209.45 1434.63,1209.45 1435.22,1209.45 1435.8,1209.45 1436.39,1209.45 1436.98,1209.45 1437.56,1209.45 1438.15,1209.45 1438.74,1209.45 1439.32,1209.45 1439.91,1209.45 1440.5,1209.45 1441.08,1209.45 1441.67,1209.45 1442.25,1209.45 1442.84,1209.45 1443.43,1209.45 1444.01,1209.45 1444.6,1209.45 1445.19,1209.45 1445.77,1209.45 1446.36,1209.45 1446.95,1209.45 1447.53,1209.45 1448.12,1209.45 1448.7,1209.45 1449.29,1209.45 1449.88,1209.45 1450.46,1209.45 1451.05,1209.45 1451.64,1209.45 1452.22,1209.45 1452.81,1209.45 1453.4,1209.45 1453.98,1209.45 1454.57,1209.45 1455.16,1209.45 1455.74,1209.45 1456.33,1209.45 1456.91,1209.45 1457.5,1209.45 1458.09,1209.45 1458.67,1209.45 1459.26,1209.45 1459.85,1209.45 1460.43,1209.45 1461.02,1209.45 1461.61,1209.45 1462.19,1209.45 1462.78,1209.45 1463.37,1209.45 1463.95,1209.45 1464.54,1209.45 1465.12,1209.45 1465.71,1209.45 1466.3,1209.45 1466.88,1209.45 1467.47,1209.45 1468.06,1209.45 1468.64,1209.45 1469.23,1209.45 1469.82,1209.45 1470.4,1209.45 1470.99,1209.45 1471.57,1209.45 1472.16,1209.45 1472.75,1209.45 1473.33,1209.45 1473.92,1209.45 1474.51,1209.45 1475.09,1209.45 1475.68,1209.45 1476.27,1209.45 1476.85,1209.45 1477.44,1209.45 1478.03,1209.45 1478.61,1209.45 1479.2,1209.45 1479.78,1209.45 1480.37,1209.45 1480.96,1209.45 1481.54,1209.45 1482.13,1209.45 1482.72,1209.45 1483.3,1209.45 1483.89,1209.45 1484.48,1209.45 1485.06,1209.45 1485.65,1209.45 1486.24,1209.45 1486.82,1209.45 1487.41,1209.45 1487.99,1209.45 1488.58,1209.45 1489.17,1209.45 1489.75,1209.45 1490.34,1209.45 1490.93,1209.45 1491.51,1209.45 1492.1,1209.45 1492.69,1209.45 1493.27,1209.45 1493.86,1209.45 1494.45,1209.45 1495.03,1209.45 1495.62,1209.45 1496.2,1209.45 1496.79,1209.45 1497.38,1209.45 1497.96,1209.45 1498.55,1209.45 1499.14,1209.45 1499.72,1209.45 1500.31,1209.45 1500.9,1209.45 1501.48,1209.45 1502.07,1209.45 1502.65,1209.45 1503.24,1209.45 1503.83,1209.45 1504.41,1209.45 1505,1209.45 1505.59,1209.45 1506.17,1209.45 1506.76,1209.45 1507.35,1209.45 1507.93,1209.45 1508.52,1209.45 1509.11,1209.45 1509.69,1209.45 1510.28,1209.45 1510.86,1209.45 1511.45,1209.45 1512.04,1209.45 1512.62,1209.45 1513.21,1209.45 1513.8,1209.45 1514.38,1209.45 1514.97,1209.45 1515.56,1209.45 1516.14,1209.45 1516.73,1209.45 1517.32,1209.45 1517.9,1209.45 1518.49,1209.45 1519.07,1209.45 1519.66,1209.45 1520.25,1209.45 1520.83,1209.45 1521.42,1209.45 1522.01,1209.45 1522.59,1209.45 1523.18,1209.45 1523.77,1209.45 1524.35,1209.45 1524.94,1209.45 1525.52,1209.45 1526.11,1209.45 1526.7,1209.45 1527.28,1209.45 1527.87,1209.45 1528.46,1209.45 1529.04,1209.45 1529.63,1209.45 1530.22,1209.45 1530.8,1209.45 1531.39,1209.45 1531.98,1209.45 1532.56,1209.45 1533.15,1209.45 1533.73,1209.45 1534.32,1209.45 1534.91,1209.45 1535.49,1209.45 1536.08,1209.45 1536.67,1209.45 1537.25,1209.45 1537.84,1209.45 1538.43,1209.45 1539.01,1209.45 1539.6,1209.45 1540.19,1209.45 1540.77,1209.45 1541.36,1209.45 1541.94,1209.45 1542.53,1209.45 1543.12,1209.45 1543.7,1209.45 1544.29,1209.45 1544.88,1209.45 1545.46,1209.45 1546.05,1209.45 1546.64,1209.45 1547.22,1209.45 1547.81,1209.45 1548.4,1209.45 1548.98,1209.45 1549.57,1209.45 1550.15,1209.45 1550.74,1209.45 1551.33,1209.45 1551.91,1209.45 1552.5,1209.45 1553.09,1209.45 1553.67,1209.45 1554.26,1209.45 1554.85,1209.45 1555.43,1209.45 1556.02,1209.45 1556.6,1209.45 1557.19,1209.45 1557.78,1209.45 1558.36,1209.45 1558.95,1209.45 1559.54,1209.45 1560.12,1209.45 1560.71,1209.45 1561.3,1209.45 1561.88,1209.45 1562.47,1209.45 1563.06,1209.45 1563.64,1209.45 1564.23,1209.45 1564.81,1209.45 1565.4,1209.45 1565.99,1209.45 1566.57,1209.45 1567.16,1209.45 1567.75,1209.45 1568.33,1209.45 1568.92,1209.45 1569.51,1209.45 1570.09,1209.45 1570.68,1209.45 1571.27,1209.45 1571.85,1209.45 1572.44,1209.45 1573.02,1209.45 1573.61,1209.45 1574.2,1209.45 1574.78,1209.45 1575.37,1209.45 1575.96,1209.45 1576.54,1209.45 1577.13,1209.45 1577.72,1209.45 1578.3,1209.45 1578.89,1209.45 1579.47,1209.45 1580.06,1209.45 1580.65,1209.45 1581.23,1209.45 1581.82,1209.45 1582.41,1209.45 1582.99,1209.45 1583.58,1209.45 1584.17,1209.45 1584.75,1209.45 1585.34,1209.45 1585.93,1209.45 1586.51,1209.45 1587.1,1209.45 1587.68,1209.45 1588.27,1209.45 1588.86,1209.45 1589.44,1209.45 1590.03,1209.45 1590.62,1209.45 1591.2,1209.45 1591.79,1209.45 1592.38,1209.45 1592.96,1209.45 1593.55,1209.45 1594.14,1209.45 1594.72,1209.45 1595.31,1209.45 1595.89,1209.45 1596.48,1209.45 1597.07,1209.45 1597.65,1209.45 1598.24,1209.45 1598.83,1209.45 1599.41,1209.45 1600,1209.45 1600.59,1209.45 1601.17,1209.45 1601.76,1209.45 1602.34,1209.45 1602.93,1209.45 1603.52,1209.45 1604.1,1209.45 1604.69,1209.45 1605.28,1209.45 1605.86,1209.45 1606.45,1209.45 1607.04,1209.45 1607.62,1209.45 1608.21,1209.45 1608.8,1209.45 1609.38,1209.45 1609.97,1209.45 1610.55,1209.45 1611.14,1209.45 1611.73,1209.45 1612.31,1209.45 1612.9,1209.45 1613.49,1209.45 1614.07,1209.45 1614.66,1209.45 1615.25,1209.45 1615.83,1209.45 1616.42,1209.45 1617.01,1209.45 1617.59,1209.45 1618.18,1209.45 1618.76,1209.45 1619.35,1209.45 1619.94,1209.45 1620.52,1209.45 1621.11,1209.45 1621.7,1209.45 1622.28,1209.45 1622.87,1209.45 1623.46,1209.45 1624.04,1209.45 1624.63,1209.45 1625.22,1209.45 1625.8,1209.45 1626.39,1209.45 1626.97,1209.45 1627.56,1209.45 1628.15,1209.45 1628.73,1209.45 1629.32,1209.45 1629.91,1209.45 1630.49,1209.45 1631.08,1209.45 1631.67,1209.45 1632.25,1209.45 1632.84,1209.45 1633.42,1209.45 1634.01,1209.45 1634.6,1209.45 1635.18,1209.45 1635.77,1209.45 1636.36,1209.45 1636.94,1209.45 1637.53,1209.45 1638.12,1209.45 1638.7,1209.45 1639.29,1209.45 1639.88,1209.45 1640.46,1209.45 1641.05,1209.45 1641.63,1209.45 1642.22,1209.45 1642.81,1209.45 1643.39,1209.45 1643.98,1209.45 1644.57,1209.45 1645.15,1209.45 1645.74,1209.45 1646.33,1209.45 1646.91,1209.45 1647.5,1209.45 1648.09,1209.45 1648.67,1209.45 1649.26,1209.45 1649.84,1209.45 1650.43,1209.45 1651.02,1209.45 1651.6,1209.45 1652.19,1209.45 1652.78,1209.45 1653.36,1209.45 1653.95,1209.45 1654.54,1209.45 1655.12,1209.45 1655.71,1209.45 1656.29,1209.45 1656.88,1209.45 1657.47,1209.45 1658.05,1209.45 1658.64,1209.45 1659.23,1209.45 1659.81,1209.45 1660.4,1209.45 1660.99,1209.45 1661.57,1209.45 1662.16,1209.45 1662.75,1209.45 1663.33,1209.45 1663.92,1209.45 1664.5,1209.45 1665.09,1209.45 1665.68,1209.45 1666.26,1209.45 1666.85,1209.45 1667.44,1209.45 1668.02,1209.45 1668.61,1209.45 1669.2,1209.45 1669.78,1209.45 1670.37,1209.45 1670.96,1209.45 1671.54,1209.45 1672.13,1209.45 1672.71,1209.45 1673.3,1209.45 1673.89,1209.45 1674.47,1209.45 1675.06,1209.45 1675.65,1209.45 1676.23,1209.45 1676.82,1209.45 1677.41,1209.45 1677.99,1209.45 1678.58,1209.45 1679.17,1209.45 1679.75,1209.45 1680.34,1209.45 1680.92,1209.45 1681.51,1209.45 1682.1,1209.45 1682.68,1209.45 1683.27,1209.45 1683.86,1209.45 1684.44,1209.45 1685.03,1209.45 1685.62,1209.45 1686.2,1209.45 1686.79,1209.45 1687.37,1209.45 1687.96,1209.45 1688.55,1209.45 1689.13,1209.45 1689.72,1209.45 1690.31,1209.45 1690.89,1209.45 1691.48,1209.45 1692.07,1209.45 1692.65,1209.45 1693.24,1209.45 1693.83,1209.45 1694.41,1209.45 1695,1209.45 1695.58,1209.45 1696.17,1209.45 1696.76,1209.45 1697.34,1209.45 1697.93,1209.45 1698.52,1209.45 1699.1,1209.45 1699.69,1209.45 1700.28,1209.45 1700.86,1209.45 1701.45,1209.45 1702.04,1209.45 1702.62,1209.45 1703.21,1209.45 1703.79,1209.45 1704.38,1209.45 1704.97,1209.45 1705.55,1209.45 1706.14,1209.45 1706.73,1209.45 1707.31,1209.45 1707.9,1209.45 1708.49,1209.45 1709.07,1209.45 1709.66,1209.45 1710.24,1209.45 1710.83,1209.45 1711.42,1209.45 1712,1209.45 1712.59,1209.45 1713.18,1209.45 1713.76,1209.45 1714.35,1209.45 1714.94,1209.45 1715.52,1209.45 1716.11,1209.45 1716.7,1209.45 1717.28,1209.45 1717.87,1209.45 1718.45,1209.45 1719.04,1209.45 1719.63,1209.45 1720.21,1209.45 1720.8,1209.45 1721.39,1209.45 1721.97,1209.45 1722.56,1209.45 1723.15,1209.45 1723.73,1209.45 1724.32,1209.45 1724.91,1209.45 1725.49,1209.45 1726.08,1209.45 1726.66,1209.45 1727.25,1209.45 1727.84,1209.45 1728.42,1209.45 1729.01,1209.45 1729.6,1209.45 1730.18,1209.45 1730.77,1209.45 1731.36,1209.45 1731.94,1209.45 1732.53,1209.45 1733.11,1209.45 1733.7,1209.45 1734.29,1209.45 1734.87,1209.45 1735.46,1209.45 1736.05,1209.45 1736.63,1209.45 1737.22,1209.45 1737.81,1209.45 1738.39,1209.45 1738.98,1209.45 1739.57,1209.45 1740.15,1209.45 1740.74,1209.45 1741.32,1209.45 1741.91,1209.45 1742.5,1209.45 1743.08,1209.45 1743.67,1209.45 1744.26,1209.45 1744.84,1209.45 1745.43,1209.45 1746.02,1209.45 1746.6,1209.45 1747.19,1209.45 1747.78,1209.45 1748.36,1209.45 1748.95,1209.45 1749.53,1209.45 1750.12,1209.45 1750.71,1209.45 1751.29,1209.45 1751.88,1209.45 1752.47,1209.45 1753.05,1209.45 1753.64,1209.45 1754.23,1209.45 1754.81,1209.45 1755.4,1209.45 1755.99,1209.45 1756.57,1209.45 1757.16,1209.45 1757.74,1209.45 1758.33,1209.45 1758.92,1209.45 1759.5,1209.45 1760.09,1209.45 1760.68,1209.45 1761.26,1209.45 1761.85,1209.45 1762.44,1209.45 1763.02,1209.45 1763.61,1209.45 1764.19,1209.45 1764.78,1209.45 1765.37,1209.45 1765.95,1209.45 1766.54,1209.45 1767.13,1209.45 1767.71,1209.45 1768.3,1209.45 1768.89,1209.45 1769.47,1209.45 1770.06,1209.45 1770.65,1209.45 1771.23,1209.45 1771.82,1209.45 1772.4,1209.45 1772.99,1209.45 1773.58,1209.45 1774.16,1209.45 1774.75,1209.45 1775.34,1209.45 1775.92,1209.45 1776.51,1209.45 1777.1,1209.45 1777.68,1209.45 1778.27,1209.45 1778.86,1209.45 1779.44,1209.45 1780.03,1209.45 1780.61,1209.45 1781.2,1209.45 1781.79,1209.45 1782.37,1209.45 1782.96,1209.45 1783.55,1209.45 1784.13,1209.45 1784.72,1209.45 1785.31,1209.45 1785.89,1209.45 1786.48,1209.45 1787.06,1209.45 1787.65,1209.45 1788.24,1209.45 1788.82,1209.45 1789.41,1209.45 1790,1209.45 1790.58,1209.45 1791.17,1209.45 1791.76,1209.45 1792.34,1209.45 1792.93,1209.45 1793.52,1209.45 1794.1,1209.45 1794.69,1209.45 1795.27,1209.45 1795.86,1209.45 1796.45,1209.45 1797.03,1209.45 1797.62,1209.45 1798.21,1209.45 1798.79,1209.45 1799.38,1209.45 1799.97,1209.45 1800.55,1209.45 1801.14,1209.45 1801.73,1209.45 1802.31,1209.45 1802.9,1209.45 1803.48,1209.45 1804.07,1209.45 1804.66,1209.45 1805.24,1209.45 1805.83,1209.45 1806.42,1209.45 1807,1209.45 1807.59,1209.45 1808.18,1209.45 1808.76,1209.45 1809.35,1209.45 1809.94,1209.45 1810.52,1209.45 1811.11,1209.45 1811.69,1209.45 1812.28,1209.45 1812.87,1209.45 1813.45,1209.45 1814.04,1209.45 1814.63,1209.45 1815.21,1209.45 1815.8,1209.45 1816.39,1209.45 1816.97,1209.45 1817.56,1209.45 1818.14,1209.45 1818.73,1209.45 1819.32,1209.45 1819.9,1209.45 1820.49,1209.45 1821.08,1209.45 1821.66,1209.45 1822.25,1209.45 1822.84,1209.45 1823.42,1209.45 1824.01,1209.45 1824.6,1209.45 1825.18,1209.45 1825.77,1209.45 1826.35,1209.45 1826.94,1209.45 1827.53,1209.45 1828.11,1209.45 1828.7,1209.45 1829.29,1209.45 1829.87,1209.45 1830.46,1209.45 1831.05,1209.45 1831.63,1209.45 1832.22,1209.45 1832.81,1209.45 1833.39,1209.45 1833.98,1209.45 1834.56,1209.45 1835.15,1209.45 1835.74,1209.45 1836.32,1209.45 1836.91,1209.45 1837.5,1209.45 1838.08,1209.45 1838.67,1209.45 1839.26,1209.45 1839.84,1209.45 1840.43,1209.45 1841.01,1209.45 1841.6,1209.45 1842.19,1209.45 1842.77,1209.45 1843.36,1209.45 1843.95,1209.45 1844.53,1209.45 1845.12,1209.45 1845.71,1209.45 1846.29,1209.45 1846.88,1209.45 1847.47,1209.45 1848.05,1209.45 1848.64,1209.45 1849.22,1209.45 1849.81,1209.45 1850.4,1209.45 1850.98,1209.45 1851.57,1209.45 1852.16,1209.45 1852.74,1209.45 1853.33,1209.45 1853.92,1209.45 1854.5,1209.45 1855.09,1209.45 1855.68,1209.45 1856.26,1209.45 1856.85,1209.45 1857.43,1209.45 1858.02,1209.45 1858.61,1209.45 1859.19,1209.45 1859.78,1209.45 1860.37,1209.45 1860.95,1209.45 1861.54,1209.45 1862.13,1209.45 1862.71,1209.45 1863.3,1209.45 1863.88,1209.45 1864.47,1209.45 1865.06,1209.45 1865.64,1209.45 1866.23,1209.45 1866.82,1209.45 1867.4,1209.45 1867.99,1209.45 1868.58,1209.45 1869.16,1209.45 1869.75,1209.45 1870.34,1209.45 1870.92,1209.45 1871.51,1209.45 1872.09,1209.45 1872.68,1209.45 1873.27,1209.45 1873.85,1209.45 1874.44,1209.45 1875.03,1209.45 1875.61,1209.45 1876.2,1209.45 1876.79,1209.45 1877.37,1209.45 1877.96,1209.45 1878.55,1209.45 1879.13,1209.45 1879.72,1209.45 1880.3,1209.45 1880.89,1209.45 1881.48,1209.45 1882.06,1209.45 1882.65,1209.45 1883.24,1209.45 1883.82,1209.45 1884.41,1209.45 1885,1209.45 1885.58,1209.45 1886.17,1209.45 1886.76,1209.45 1887.34,1209.45 1887.93,1209.45 1888.51,1209.45 1889.1,1209.45 1889.69,1209.45 1890.27,1209.45 1890.86,1209.45 1891.45,1209.45 1892.03,1209.45 1892.62,1209.45 1893.21,1209.45 1893.79,1209.45 1894.38,1209.45 1894.96,1209.45 1895.55,1209.45 1896.14,1209.45 1896.72,1209.45 1897.31,1209.45 1897.9,1209.45 1898.48,1209.45 1899.07,1209.45 1899.66,1209.45 1900.24,1209.45 1900.83,1209.45 1901.42,1209.45 1902,1209.45 1902.59,1209.45 1903.17,1209.45 1903.76,1209.45 1904.35,1209.45 1904.93,1209.45 1905.52,1209.45 1906.11,1209.45 1906.69,1209.45 1907.28,1209.45 1907.87,1209.45 1908.45,1209.45 1909.04,1209.45 1909.63,1209.45 1910.21,1209.45 1910.8,1209.45 1911.38,1209.45 1911.97,1209.45 1912.56,1209.45 1913.14,1209.45 1913.73,1209.45 1914.32,1209.45 1914.9,1209.45 1915.49,1209.45 1916.08,1209.45 1916.66,1209.45 1917.25,1209.45 1917.83,1209.45 1918.42,1209.45 1919.01,1209.45 1919.59,1209.45 1920.18,1209.45 1920.77,1209.45 1921.35,1209.45 1921.94,1209.45 1922.53,1209.45 1923.11,1209.45 1923.7,1209.45 1924.29,1209.45 1924.87,1209.45 1925.46,1209.45 1926.04,1209.45 1926.63,1209.45 1927.22,1209.45 1927.8,1209.45 1928.39,1209.45 1928.98,1209.45 1929.56,1209.45 1930.15,1209.45 1930.74,1209.45 1931.32,1209.45 1931.91,1209.45 1932.5,1209.45 1933.08,1209.45 1933.67,1209.45 1934.25,1209.45 1934.84,1209.45 1935.43,1209.45 1936.01,1209.45 1936.6,1209.45 1937.19,1209.45 1937.77,1209.45 1938.36,1209.45 1938.95,1209.45 1939.53,1209.45 1940.12,1209.45 1940.71,1209.45 1941.29,1209.45 1941.88,1209.45 1942.46,1209.45 1943.05,1209.45 1943.64,1209.45 1944.22,1209.45 1944.81,1209.45 1945.4,1209.45 1945.98,1209.45 1946.57,1209.45 1947.16,1209.45 1947.74,1209.45 1948.33,1209.45 1948.91,1209.45 1949.5,1209.45 1950.09,1209.45 1950.67,1209.45 1951.26,1209.45 1951.85,1209.45 1952.43,1209.45 1953.02,1209.45 1953.61,1209.45 1954.19,1209.45 1954.78,1209.45 1955.37,1209.45 1955.95,1209.45 1956.54,1209.45 1957.12,1209.45 1957.71,1209.45 1958.3,1209.45 1958.88,1209.45 1959.47,1209.45 1960.06,1209.45 1960.64,1209.45 1961.23,1209.45 1961.82,1209.45 1962.4,1209.45 1962.99,1209.45 1963.58,1209.45 1964.16,1209.45 1964.75,1209.45 1965.33,1209.45 1965.92,1209.45 1966.51,1209.45 1967.09,1209.45 1967.68,1209.45 1968.27,1209.45 1968.85,1209.45 1969.44,1209.45 1970.03,1209.45 1970.61,1209.45 1971.2,1209.45 1971.78,1209.45 1972.37,1209.45 1972.96,1209.45 1973.54,1209.45 1974.13,1209.45 1974.72,1209.45 1975.3,1209.45 1975.89,1209.45 1976.48,1209.45 1977.06,1209.45 1977.65,1209.45 1978.24,1209.45 1978.82,1209.45 1979.41,1209.45 1979.99,1209.45 1980.58,1209.45 1981.17,1209.45 1981.75,1209.45 1982.34,1209.45 1982.93,1209.45 1983.51,1209.45 1984.1,1209.45 1984.69,1209.45 1985.27,1209.45 1985.86,1209.45 1986.45,1209.45 1987.03,1209.45 1987.62,1209.45 1988.2,1209.45 1988.79,1209.45 1989.38,1209.45 1989.96,1209.45 1990.55,1209.45 1991.14,1209.45 1991.72,1209.45 1992.31,1209.45 1992.9,1209.45 1993.48,1209.45 1994.07,1209.45 1994.65,1209.45 1995.24,1209.45 1995.83,1209.45 1996.41,1209.45 1997,1209.45 1997.59,1209.45 1998.17,1209.45 1998.76,1209.45 1999.35,1209.45 1999.93,1209.45 2000.52,1209.45 2001.11,1209.45 2001.69,1209.45 2002.28,1209.45 2002.86,1209.45 2003.45,1209.45 2004.04,1209.45 2004.62,1209.45 2005.21,1209.45 2005.8,1209.45 2006.38,1209.45 2006.97,1209.45 2007.56,1209.45 2008.14,1209.45 2008.73,1209.45 2009.32,1209.45 2009.9,1209.45 2010.49,1209.45 2011.07,1209.45 2011.66,1209.45 2012.25,1209.45 2012.83,1209.45 2013.42,1209.45 2014.01,1209.45 2014.59,1209.45 2015.18,1209.45 2015.77,1209.45 2016.35,1209.45 2016.94,1209.45 2017.53,1209.45 2018.11,1209.45 2018.7,1209.45 2019.28,1209.45 2019.87,1209.45 2020.46,1209.45 2021.04,1209.45 2021.63,1209.45 2022.22,1209.45 2022.8,1209.45 2023.39,1209.45 2023.98,1209.45 2024.56,1209.45 2025.15,1209.45 2025.73,1209.45 2026.32,1209.45 2026.91,1209.45 2027.49,1209.45 2028.08,1209.45 2028.67,1209.45 2029.25,1209.45 2029.84,1209.45 2030.43,1209.45 2031.01,1209.45 2031.6,1209.45 2032.19,1209.45 2032.77,1209.45 2033.36,1209.45 2033.94,1209.45 2034.53,1209.45 2035.12,1209.45 2035.7,1209.45 2036.29,1209.45 2036.88,1209.45 2037.46,1209.45 2038.05,1209.45 2038.64,1209.45 2039.22,1209.45 2039.81,1209.45 2040.4,1209.45 2040.98,1209.45 2041.57,1209.45 2042.15,1209.45 2042.74,1209.45 2043.33,1209.45 2043.91,1209.45 2044.5,1209.45 2045.09,1209.45 2045.67,1209.45 2046.26,1209.45 2046.85,1209.45 2047.43,1209.45 2048.02,1209.45 2048.6,1209.45 2049.19,1209.45 2049.78,1209.45 2050.36,1209.45 2050.95,1209.45 2051.54,1209.45 2052.12,1209.45 2052.71,1209.45 2053.3,1209.45 2053.88,1209.45 2054.47,1209.45 2055.06,1209.45 2055.64,1209.45 2056.23,1209.45 2056.81,1209.45 2057.4,1209.45 2057.99,1209.45 2058.57,1209.45 2059.16,1209.45 2059.75,1209.45 2060.33,1209.45 2060.92,1209.45 2061.51,1209.45 2062.09,1209.45 2062.68,1209.45 2063.27,1209.45 2063.85,1209.45 2064.44,1209.45 2065.02,1209.45 2065.61,1209.45 2066.2,1209.45 2066.78,1209.45 2067.37,1209.45 2067.96,1209.45 2068.54,1209.45 2069.13,1209.45 2069.72,1209.45 2070.3,1209.45 2070.89,1209.45 2071.48,1209.45 2072.06,1209.45 2072.65,1209.45 2073.23,1209.45 2073.82,1209.45 2074.41,1209.45 2074.99,1209.45 2075.58,1209.45 2076.17,1209.45 2076.75,1209.45 2077.34,1209.45 2077.93,1209.45 2078.51,1209.45 2079.1,1209.45 2079.68,1209.45 2080.27,1209.45 2080.86,1209.45 2081.44,1209.45 2082.03,1209.45 2082.62,1209.45 2083.2,1209.45 2083.79,1209.45 2084.38,1209.45 2084.96,1209.45 2085.55,1209.45 2086.14,1209.45 2086.72,1209.45 2087.31,1209.45 2087.89,1209.45 2088.48,1209.45 2089.07,1209.45 2089.65,1209.45 2090.24,1209.45 2090.83,1209.45 2091.41,1209.45 2092,1209.45 2092.59,1209.45 2093.17,1209.45 2093.76,1209.45 2094.35,1209.45 2094.93,1209.45 2095.52,1209.45 2096.1,1209.45 2096.69,1209.45 2097.28,1209.45 2097.86,1209.45 2098.45,1209.45 2099.04,1209.45 2099.62,1209.45 2100.21,1209.45 2100.8,1209.45 2101.38,1209.45 2101.97,1209.45 2102.55,1209.45 2103.14,1209.45 2103.73,1209.45 2104.31,1209.45 2104.9,1209.45 2105.49,1209.45 2106.07,1209.45 2106.66,1209.45 2107.25,1209.45 2107.83,1209.45 2108.42,1209.45 2109.01,1209.45 2109.59,1209.45 2110.18,1209.45 2110.76,1209.45 2111.35,1209.45 2111.94,1209.45 2112.52,1209.45 2113.11,1209.45 2113.7,1209.45 2114.28,1209.45 2114.87,1209.45 2115.46,1209.45 2116.04,1209.45 2116.63,1209.45 2117.22,1209.45 2117.8,1209.45 2118.39,1209.45 2118.97,1209.45 2119.56,1209.45 2120.15,1209.45 2120.73,1209.45 2121.32,1209.45 2121.91,1209.45 2122.49,1209.45 2123.08,1209.45 2123.67,1209.45 2124.25,1209.45 2124.84,1209.45 2125.42,1209.45 2126.01,1209.45 2126.6,1209.45 2127.18,1209.45 2127.77,1209.45 2128.36,1209.45 2128.94,1209.45 2129.53,1209.45 2130.12,1209.45 2130.7,1209.45 2131.29,1209.45 2131.88,1209.45 2132.46,1209.45 2133.05,1209.45 2133.63,1209.45 2134.22,1209.45 2134.81,1209.45 2135.39,1209.45 2135.98,1209.45 2136.57,1209.45 2137.15,1209.45 2137.74,1209.45 2138.33,1209.45 2138.91,1209.45 2139.5,1209.45 2140.09,1209.45 2140.67,1209.45 2141.26,1209.45 2141.84,1209.45 2142.43,1209.45 2143.02,1209.45 2143.6,1209.45 2144.19,1209.45 2144.78,1209.45 2145.36,1209.45 2145.95,1209.45 2146.54,1209.45 2147.12,1209.45 2147.71,1209.45 2148.3,1209.45 2148.88,1209.45 2149.47,1209.45 2150.05,1209.45 2150.64,1209.45 2151.23,1209.45 2151.81,1209.45 2152.4,1209.45 2152.99,1209.45 2153.57,1209.45 2154.16,1209.45 2154.75,1209.45 2155.33,1209.45 2155.92,1209.45 2156.5,1209.45 2157.09,1209.45 2157.68,1209.45 2158.26,1209.45 \"/>\n<path clip-path=\"url(#clip392)\" d=\"M986.025 1209.24 L986.612 1209.24 L987.198 1209.24 L987.785 1209.24 L988.371 1209.24 L988.957 1209.24 L989.544 1209.24 L990.13 1209.24 L990.717 1209.24 L991.303 1209.24 L991.889 1209.24 L992.476 1209.24 L993.062 1209.24 L993.649 1209.24 L994.235 1209.24 L994.822 1209.24 L995.408 1209.24 L995.994 1209.24 L996.581 1209.24 L997.167 1209.24 L997.754 1209.24 L998.34 1209.24 L998.926 1209.24 L999.513 1209.24 L1000.1 1209.24 L1000.69 1209.24 L1001.27 1209.24 L1001.86 1209.24 L1002.44 1209.24 L1003.03 1209.24 L1003.62 1209.24 L1004.2 1209.24 L1004.79 1209.24 L1005.38 1209.24 L1005.96 1209.24 L1006.55 1209.24 L1007.14 1209.24 L1007.72 1209.24 L1008.31 1209.24 L1008.9 1209.24 L1009.48 1209.24 L1010.07 1209.24 L1010.65 1209.24 L1011.24 1209.24 L1011.83 1209.24 L1012.41 1209.24 L1013 1209.24 L1013.59 1209.24 L1014.17 1209.24 L1014.76 1209.24 L1015.35 1209.24 L1015.93 1209.24 L1016.52 1209.24 L1017.11 1209.24 L1017.69 1209.24 L1018.28 1209.24 L1018.86 1209.24 L1019.45 1209.24 L1020.04 1209.24 L1020.62 1209.24 L1021.21 1209.24 L1021.8 1209.24 L1022.38 1209.24 L1022.97 1209.24 L1023.56 1209.24 L1024.14 1209.24 L1024.73 1209.24 L1025.32 1209.24 L1025.9 1209.24 L1026.49 1209.24 L1027.07 1209.24 L1027.66 1209.24 L1028.25 1209.24 L1028.83 1209.24 L1029.42 1209.24 L1030.01 1209.24 L1030.59 1209.24 L1031.18 1209.24 L1031.77 1209.24 L1032.35 1209.24 L1032.94 1209.24 L1033.52 1209.24 L1034.11 1209.24 L1034.7 1209.24 L1035.28 1209.24 L1035.87 1209.24 L1036.46 1209.24 L1037.04 1209.24 L1037.63 1209.24 L1038.22 1209.24 L1038.8 1209.24 L1039.39 1209.24 L1039.98 1209.24 L1040.56 1209.24 L1041.15 1209.24 L1041.73 1209.24 L1042.32 1209.24 L1042.91 1209.24 L1043.49 1209.24 L1044.08 1209.24 L1044.67 1209.24 L1045.25 1209.24 L1045.84 1209.24 L1046.43 1209.24 L1047.01 1209.24 L1047.6 1209.24 L1048.19 1209.24 L1048.77 1209.24 L1049.36 1209.24 L1049.94 1209.24 L1050.53 1209.24 L1051.12 1209.24 L1051.7 1209.24 L1052.29 1209.24 L1052.88 1209.24 L1053.46 1209.24 L1054.05 1209.24 L1054.64 1209.24 L1055.22 1209.24 L1055.81 1209.24 L1056.39 1209.24 L1056.98 1209.24 L1057.57 1209.24 L1058.15 1209.24 L1058.74 1209.24 L1059.33 1209.24 L1059.91 1209.24 L1060.5 1209.24 L1061.09 1209.24 L1061.67 1209.24 L1062.26 1209.24 L1062.85 1209.24 L1063.43 1209.24 L1064.02 1209.24 L1064.6 1209.24 L1065.19 1209.24 L1065.78 1209.24 L1066.36 1209.24 L1066.95 1209.24 L1067.54 1209.24 L1068.12 1209.24 L1068.71 1209.24 L1069.3 1209.24 L1069.88 1209.24 L1070.47 1209.24 L1071.06 1209.24 L1071.64 1209.24 L1072.23 1209.24 L1072.81 1209.24 L1073.4 1209.24 L1073.99 1209.24 L1074.57 1209.24 L1075.16 1209.24 L1075.75 1209.24 L1076.33 1209.24 L1076.92 1209.24 L1077.51 1209.24 L1078.09 1209.24 L1078.68 1209.24 L1079.26 1209.24 L1079.85 1209.24 L1080.44 1209.24 L1081.02 1209.24 L1081.61 1209.24 L1082.2 1209.24 L1082.78 1209.24 L1083.37 1209.24 L1083.96 1209.24 L1084.54 1209.24 L1085.13 1209.24 L1085.72 1209.24 L1086.3 1209.24 L1086.89 1209.24 L1087.47 1209.24 L1088.06 1209.24 L1088.65 1209.24 L1089.23 1209.24 L1089.82 1209.24 L1090.41 1209.24 L1090.99 1209.24 L1091.58 1209.24 L1092.17 1209.24 L1092.75 1209.24 L1093.34 1209.24 L1093.93 1209.24 L1094.51 1209.24 L1095.1 1209.24 L1095.68 1209.24 L1096.27 1209.24 L1096.86 1209.24 L1097.44 1209.24 L1098.03 1209.24 L1098.62 1209.24 L1099.2 1209.24 L1099.79 1209.24 L1100.38 1209.24 L1100.96 1209.24 L1101.55 1209.24 L1102.14 1209.24 L1102.72 1209.24 L1103.31 1209.24 L1103.89 1209.24 L1104.48 1209.24 L1105.07 1209.24 L1105.65 1209.24 L1106.24 1209.24 L1106.83 1209.24 L1107.41 1209.24 L1108 1209.24 L1108.59 1209.24 L1109.17 1209.24 L1109.76 1209.24 L1110.34 1209.24 L1110.93 1209.24 L1111.52 1209.24 L1112.1 1209.24 L1112.69 1209.24 L1113.28 1209.24 L1113.86 1209.24 L1114.45 1209.24 L1115.04 1209.24 L1115.62 1209.24 L1116.21 1209.24 L1116.8 1209.24 L1117.38 1209.24 L1117.97 1209.24 L1118.55 1209.24 L1119.14 1209.24 L1119.73 1209.24 L1120.31 1209.24 L1120.9 1209.24 L1121.49 1209.24 L1122.07 1209.24 L1122.66 1209.24 L1123.25 1209.24 L1123.83 1209.24 L1124.42 1209.24 L1125.01 1209.24 L1125.59 1209.24 L1126.18 1209.24 L1126.76 1209.24 L1127.35 1209.24 L1127.94 1209.24 L1128.52 1209.24 L1129.11 1209.24 L1129.7 1209.24 L1130.28 1209.24 L1130.87 1209.24 L1131.46 1209.24 L1132.04 1209.24 L1132.63 1209.24 L1133.21 1209.24 L1133.8 1209.24 L1134.39 1209.24 L1134.97 1209.24 L1135.56 1209.24 L1136.15 1209.24 L1136.73 1209.24 L1137.32 1209.24 L1137.91 1209.24 L1138.49 1209.24 L1139.08 1209.24 L1139.67 1209.24 L1140.25 1209.24 L1140.84 1209.24 L1141.42 1209.24 L1142.01 1209.24 L1142.6 1209.24 L1143.18 1209.24 L1143.77 1209.24 L1144.36 1209.24 L1144.94 1209.24 L1145.53 1209.24 L1146.12 1209.24 L1146.7 1209.24 L1147.29 1209.24 L1147.88 1209.24 L1148.46 1209.24 L1149.05 1209.24 L1149.63 1209.24 L1150.22 1209.24 L1150.81 1209.24 L1151.39 1209.24 L1151.98 1209.24 L1152.57 1209.24 L1153.15 1209.24 L1153.74 1209.24 L1154.33 1209.24 L1154.91 1209.24 L1155.5 1209.24 L1156.09 1209.24 L1156.67 1209.24 L1157.26 1209.24 L1157.84 1209.24 L1158.43 1209.24 L1159.02 1209.24 L1159.6 1209.24 L1160.19 1209.24 L1160.78 1209.24 L1161.36 1209.24 L1161.95 1209.24 L1162.54 1209.24 L1163.12 1209.24 L1163.71 1209.24 L1164.29 1209.24 L1164.88 1209.24 L1165.47 1209.24 L1166.05 1209.24 L1166.64 1209.24 L1167.23 1209.24 L1167.81 1209.24 L1168.4 1209.24 L1168.99 1209.24 L1169.57 1209.24 L1170.16 1209.24 L1170.75 1209.24 L1171.33 1209.24 L1171.92 1209.24 L1172.5 1209.24 L1173.09 1209.24 L1173.68 1209.24 L1174.26 1209.24 L1174.85 1209.24 L1175.44 1209.24 L1176.02 1209.24 L1176.61 1209.24 L1177.2 1209.24 L1177.78 1209.24 L1178.37 1209.24 L1178.96 1209.24 L1179.54 1209.24 L1180.13 1209.24 L1180.71 1209.24 L1181.3 1209.24 L1181.89 1209.24 L1182.47 1209.24 L1183.06 1209.24 L1183.65 1209.24 L1184.23 1209.24 L1184.82 1209.24 L1185.41 1209.24 L1185.99 1209.24 L1186.58 1209.24 L1187.16 1209.24 L1187.75 1209.24 L1188.34 1209.24 L1188.92 1209.24 L1189.51 1209.24 L1190.1 1209.24 L1190.68 1209.24 L1191.27 1209.24 L1191.86 1209.24 L1192.44 1209.24 L1193.03 1209.24 L1193.62 1209.24 L1194.2 1209.24 L1194.79 1209.24 L1195.37 1209.24 L1195.96 1209.24 L1196.55 1209.24 L1197.13 1209.24 L1197.72 1209.24 L1198.31 1209.24 L1198.89 1209.24 L1199.48 1209.24 L1200.07 1209.24 L1200.65 1209.24 L1201.24 1209.24 L1201.83 1209.24 L1202.41 1209.24 L1203 1209.24 L1203.58 1209.24 L1204.17 1209.24 L1204.76 1209.24 L1205.34 1209.24 L1205.93 1209.24 L1206.52 1209.24 L1207.1 1209.24 L1207.69 1209.24 L1208.28 1209.24 L1208.86 1209.24 L1209.45 1209.24 L1210.03 1209.24 L1210.62 1209.24 L1211.21 1209.24 L1211.79 1209.24 L1212.38 1209.24 L1212.97 1209.24 L1213.55 1209.24 L1214.14 1209.24 L1214.73 1209.24 L1215.31 1209.24 L1215.9 1209.24 L1216.49 1209.24 L1217.07 1209.24 L1217.66 1209.24 L1218.24 1209.24 L1218.83 1209.24 L1219.42 1209.24 L1220 1209.24 L1220.59 1209.24 L1221.18 1209.24 L1221.76 1209.24 L1222.35 1209.24 L1222.94 1209.24 L1223.52 1209.24 L1224.11 1209.24 L1224.7 1209.24 L1225.28 1209.24 L1225.87 1209.24 L1226.45 1209.24 L1227.04 1209.24 L1227.63 1209.24 L1228.21 1209.24 L1228.8 1209.24 L1229.39 1209.24 L1229.97 1209.24 L1230.56 1209.24 L1231.15 1209.24 L1231.73 1209.24 L1232.32 1209.24 L1232.91 1209.24 L1233.49 1209.24 L1234.08 1209.24 L1234.66 1209.24 L1235.25 1209.24 L1235.84 1209.24 L1236.42 1209.24 L1237.01 1209.24 L1237.6 1209.24 L1238.18 1209.24 L1238.77 1209.24 L1239.36 1209.24 L1239.94 1209.24 L1240.53 1209.24 L1241.11 1209.24 L1241.7 1209.24 L1242.29 1209.24 L1242.87 1209.24 L1243.46 1209.24 L1244.05 1209.24 L1244.63 1209.24 L1245.22 1209.24 L1245.81 1209.24 L1246.39 1209.24 L1246.98 1209.24 L1247.57 1209.24 L1248.15 1209.24 L1248.74 1209.24 L1249.32 1209.24 L1249.91 1209.24 L1250.5 1209.24 L1251.08 1209.24 L1251.67 1209.24 L1252.26 1209.24 L1252.84 1209.24 L1253.43 1209.24 L1254.02 1209.24 L1254.6 1209.24 L1255.19 1209.24 L1255.78 1209.24 L1256.36 1209.24 L1256.95 1209.24 L1257.53 1209.24 L1258.12 1209.24 L1258.71 1209.24 L1259.29 1209.24 L1259.88 1209.24 L1260.47 1209.24 L1261.05 1209.24 L1261.64 1209.24 L1262.23 1209.24 L1262.81 1209.24 L1263.4 1209.24 L1263.98 1209.24 L1264.57 1209.24 L1265.16 1209.24 L1265.74 1209.24 L1266.33 1209.24 L1266.92 1209.24 L1267.5 1209.24 L1268.09 1209.24 L1268.68 1209.24 L1269.26 1209.24 L1269.85 1209.24 L1270.44 1209.24 L1271.02 1209.24 L1271.61 1209.24 L1272.19 1209.24 L1272.78 1209.24 L1273.37 1209.24 L1273.95 1209.24 L1274.54 1209.24 L1275.13 1209.24 L1275.71 1209.24 L1276.3 1209.24 L1276.89 1209.24 L1277.47 1209.24 L1278.06 1209.24 L1278.65 1209.24 L1279.23 1209.24 L1279.82 1209.24 L1280.4 1209.24 L1280.99 1209.24 L1281.58 1209.24 L1282.16 1209.24 L1282.75 1209.24 L1283.34 1209.24 L1283.92 1209.24 L1284.51 1209.24 L1285.1 1209.24 L1285.68 1209.24 L1286.27 1209.24 L1286.86 1209.24 L1287.44 1209.24 L1288.03 1209.24 L1288.61 1209.24 L1289.2 1209.24 L1289.79 1209.24 L1290.37 1209.24 L1290.96 1209.24 L1291.55 1209.24 L1292.13 1209.24 L1292.72 1209.24 L1293.31 1209.24 L1293.89 1209.24 L1294.48 1209.24 L1295.06 1209.24 L1295.65 1209.24 L1296.24 1209.24 L1296.82 1209.24 L1297.41 1209.24 L1298 1209.24 L1298.58 1209.24 L1299.17 1209.24 L1299.76 1209.24 L1300.34 1209.24 L1300.93 1209.24 L1301.52 1209.24 L1302.1 1209.24 L1302.69 1209.24 L1303.27 1209.24 L1303.86 1209.24 L1304.45 1209.24 L1305.03 1209.24 L1305.62 1209.24 L1306.21 1209.24 L1306.79 1209.24 L1307.38 1209.24 L1307.97 1209.24 L1308.55 1209.24 L1309.14 1209.24 L1309.73 1209.24 L1310.31 1209.24 L1310.9 1209.24 L1311.48 1209.24 L1312.07 1209.24 L1312.66 1209.24 L1313.24 1209.24 L1313.83 1209.24 L1314.42 1209.24 L1315 1209.24 L1315.59 1209.24 L1316.18 1209.24 L1316.76 1209.24 L1317.35 1209.24 L1317.93 1209.24 L1318.52 1209.24 L1319.11 1209.24 L1319.69 1209.24 L1320.28 1209.24 L1320.87 1209.24 L1321.45 1209.24 L1322.04 1209.24 L1322.63 1209.24 L1323.21 1209.24 L1323.8 1209.24 L1324.39 1209.24 L1324.97 1209.24 L1325.56 1209.24 L1326.14 1209.24 L1326.73 1209.24 L1327.32 1209.24 L1327.9 1209.24 L1328.49 1209.24 L1329.08 1209.24 L1329.66 1209.24 L1330.25 1209.24 L1330.84 1209.24 L1331.42 1209.24 L1332.01 1209.24 L1332.6 1209.24 L1333.18 1209.24 L1333.77 1209.24 L1334.35 1209.24 L1334.94 1209.24 L1335.53 1209.24 L1336.11 1209.24 L1336.7 1209.24 L1337.29 1209.24 L1337.87 1209.24 L1338.46 1209.24 L1339.05 1209.24 L1339.63 1209.24 L1340.22 1209.24 L1340.8 1209.24 L1341.39 1209.24 L1341.98 1209.24 L1342.56 1209.24 L1343.15 1209.24 L1343.74 1209.24 L1344.32 1209.24 L1344.91 1209.24 L1345.5 1209.24 L1346.08 1209.24 L1346.67 1209.24 L1347.26 1209.24 L1347.84 1209.24 L1348.43 1209.24 L1349.01 1209.24 L1349.6 1209.24 L1350.19 1209.24 L1350.77 1209.24 L1351.36 1209.24 L1351.95 1209.24 L1352.53 1209.24 L1353.12 1209.24 L1353.71 1209.24 L1354.29 1209.24 L1354.88 1209.24 L1355.47 1209.24 L1356.05 1209.24 L1356.64 1209.24 L1357.22 1209.24 L1357.81 1209.24 L1358.4 1209.24 L1358.98 1209.24 L1359.57 1209.24 L1360.16 1209.24 L1360.74 1209.24 L1361.33 1209.24 L1361.92 1209.24 L1362.5 1209.24 L1363.09 1209.24 L1363.68 1209.24 L1364.26 1209.24 L1364.85 1209.24 L1365.43 1209.24 L1366.02 1209.24 L1366.61 1209.24 L1367.19 1209.24 L1367.78 1209.24 L1368.37 1209.24 L1368.95 1209.24 L1369.54 1209.24 L1370.13 1209.24 L1370.71 1209.24 L1371.3 1209.24 L1371.88 1209.24 L1372.47 1209.24 L1373.06 1209.24 L1373.64 1209.24 L1374.23 1209.24 L1374.82 1209.24 L1375.4 1209.24 L1375.99 1209.24 L1376.58 1209.24 L1377.16 1209.24 L1377.75 1209.24 L1378.34 1209.24 L1378.92 1209.24 L1379.51 1209.24 L1380.09 1209.24 L1380.68 1209.24 L1381.27 1209.24 L1381.85 1209.24 L1382.44 1209.24 L1383.03 1209.24 L1383.61 1209.24 L1384.2 1209.24 L1384.79 1209.24 L1385.37 1209.24 L1385.96 1209.24 L1386.55 1209.24 L1387.13 1209.24 L1387.72 1209.24 L1388.3 1209.24 L1388.89 1209.24 L1389.48 1209.24 L1390.06 1209.24 L1390.65 1209.24 L1391.24 1209.24 L1391.82 1209.24 L1392.41 1209.24 L1393 1209.24 L1393.58 1209.24 L1394.17 1209.24 L1394.75 1209.24 L1395.34 1209.24 L1395.93 1209.24 L1396.51 1209.24 L1397.1 1209.24 L1397.69 1209.24 L1398.27 1209.24 L1398.86 1209.24 L1399.45 1209.24 L1400.03 1209.24 L1400.62 1209.24 L1401.21 1209.24 L1401.79 1209.24 L1402.38 1209.24 L1402.96 1209.24 L1403.55 1209.24 L1404.14 1209.24 L1404.72 1209.24 L1405.31 1209.24 L1405.9 1209.24 L1406.48 1209.24 L1407.07 1209.24 L1407.66 1209.24 L1408.24 1209.24 L1408.83 1209.24 L1409.42 1209.24 L1410 1209.24 L1410.59 1209.24 L1411.17 1209.24 L1411.76 1209.24 L1412.35 1209.24 L1412.93 1209.24 L1413.52 1209.24 L1414.11 1209.24 L1414.69 1209.24 L1415.28 1209.24 L1415.87 1209.24 L1416.45 1209.24 L1417.04 1209.24 L1417.63 1209.24 L1418.21 1209.24 L1418.8 1209.24 L1419.38 1209.24 L1419.97 1209.24 L1420.56 1209.24 L1421.14 1209.24 L1421.73 1209.24 L1422.32 1209.24 L1422.9 1209.24 L1423.49 1209.24 L1424.08 1209.24 L1424.66 1209.24 L1425.25 1209.24 L1425.83 1209.24 L1426.42 1209.24 L1427.01 1209.24 L1427.59 1209.24 L1428.18 1209.24 L1428.77 1209.24 L1429.35 1209.24 L1429.94 1209.24 L1430.53 1209.24 L1431.11 1209.24 L1431.7 1209.24 L1432.29 1209.24 L1432.87 1209.24 L1433.46 1209.24 L1434.04 1209.24 L1434.63 1209.24 L1435.22 1209.24 L1435.8 1209.24 L1436.39 1209.24 L1436.98 1209.24 L1437.56 1209.24 L1438.15 1209.24 L1438.74 1209.24 L1439.32 1209.24 L1439.91 1209.24 L1440.5 1209.24 L1441.08 1209.24 L1441.67 1209.24 L1442.25 1209.24 L1442.84 1209.24 L1443.43 1209.24 L1444.01 1209.24 L1444.6 1209.24 L1445.19 1209.24 L1445.77 1209.24 L1446.36 1209.24 L1446.95 1209.24 L1447.53 1209.24 L1448.12 1209.24 L1448.7 1209.24 L1449.29 1209.24 L1449.88 1209.24 L1450.46 1209.24 L1451.05 1209.24 L1451.64 1209.24 L1452.22 1209.24 L1452.81 1209.24 L1453.4 1209.24 L1453.98 1209.24 L1454.57 1209.24 L1455.16 1209.24 L1455.74 1209.24 L1456.33 1209.24 L1456.91 1209.24 L1457.5 1209.24 L1458.09 1209.24 L1458.67 1209.24 L1459.26 1209.24 L1459.85 1209.24 L1460.43 1209.24 L1461.02 1209.24 L1461.61 1209.24 L1462.19 1209.24 L1462.78 1209.24 L1463.37 1209.24 L1463.95 1209.24 L1464.54 1209.24 L1465.12 1209.24 L1465.71 1209.24 L1466.3 1209.24 L1466.88 1209.24 L1467.47 1209.24 L1468.06 1209.24 L1468.64 1209.24 L1469.23 1209.24 L1469.82 1209.24 L1470.4 1209.24 L1470.99 1209.24 L1471.57 1209.24 L1472.16 1209.24 L1472.75 1209.24 L1473.33 1209.24 L1473.92 1209.24 L1474.51 1209.24 L1475.09 1209.24 L1475.68 1209.24 L1476.27 1209.24 L1476.85 1209.24 L1477.44 1209.24 L1478.03 1209.24 L1478.61 1209.24 L1479.2 1209.24 L1479.78 1209.24 L1480.37 1209.24 L1480.96 1209.24 L1481.54 1209.24 L1482.13 1209.24 L1482.72 1209.24 L1483.3 1209.24 L1483.89 1209.24 L1484.48 1209.24 L1485.06 1209.24 L1485.65 1209.24 L1486.24 1209.24 L1486.82 1209.24 L1487.41 1209.24 L1487.99 1209.24 L1488.58 1209.24 L1489.17 1209.24 L1489.75 1209.24 L1490.34 1209.24 L1490.93 1209.24 L1491.51 1209.24 L1492.1 1209.24 L1492.69 1209.24 L1493.27 1209.24 L1493.86 1209.24 L1494.45 1209.24 L1495.03 1209.24 L1495.62 1209.24 L1496.2 1209.24 L1496.79 1209.24 L1497.38 1209.24 L1497.96 1209.24 L1498.55 1209.24 L1499.14 1209.24 L1499.72 1209.24 L1500.31 1209.24 L1500.9 1209.24 L1501.48 1209.24 L1502.07 1209.24 L1502.65 1209.24 L1503.24 1209.24 L1503.83 1209.24 L1504.41 1209.24 L1505 1209.24 L1505.59 1209.24 L1506.17 1209.24 L1506.76 1209.24 L1507.35 1209.24 L1507.93 1209.24 L1508.52 1209.24 L1509.11 1209.24 L1509.69 1209.24 L1510.28 1209.24 L1510.86 1209.24 L1511.45 1209.24 L1512.04 1209.24 L1512.62 1209.24 L1513.21 1209.24 L1513.8 1209.24 L1514.38 1209.24 L1514.97 1209.24 L1515.56 1209.24 L1516.14 1209.24 L1516.73 1209.24 L1517.32 1209.24 L1517.9 1209.24 L1518.49 1209.24 L1519.07 1209.24 L1519.66 1209.24 L1520.25 1209.24 L1520.83 1209.24 L1521.42 1209.24 L1522.01 1209.24 L1522.59 1209.24 L1523.18 1209.24 L1523.77 1209.24 L1524.35 1209.24 L1524.94 1209.24 L1525.52 1209.24 L1526.11 1209.24 L1526.7 1209.24 L1527.28 1209.24 L1527.87 1209.24 L1528.46 1209.24 L1529.04 1209.24 L1529.63 1209.24 L1530.22 1209.24 L1530.8 1209.24 L1531.39 1209.24 L1531.98 1209.24 L1532.56 1209.24 L1533.15 1209.24 L1533.73 1209.24 L1534.32 1209.24 L1534.91 1209.24 L1535.49 1209.24 L1536.08 1209.24 L1536.67 1209.24 L1537.25 1209.24 L1537.84 1209.24 L1538.43 1209.24 L1539.01 1209.24 L1539.6 1209.24 L1540.19 1209.24 L1540.77 1209.24 L1541.36 1209.24 L1541.94 1209.24 L1542.53 1209.24 L1543.12 1209.24 L1543.7 1209.24 L1544.29 1209.24 L1544.88 1209.24 L1545.46 1209.24 L1546.05 1209.24 L1546.64 1209.24 L1547.22 1209.24 L1547.81 1209.24 L1548.4 1209.24 L1548.98 1209.24 L1549.57 1209.24 L1550.15 1209.24 L1550.74 1209.24 L1551.33 1209.24 L1551.91 1209.24 L1552.5 1209.24 L1553.09 1209.24 L1553.67 1209.24 L1554.26 1209.24 L1554.85 1209.24 L1555.43 1209.24 L1556.02 1209.24 L1556.6 1209.24 L1557.19 1209.24 L1557.78 1209.24 L1558.36 1209.24 L1558.95 1209.24 L1559.54 1209.24 L1560.12 1209.24 L1560.71 1209.24 L1561.3 1209.24 L1561.88 1209.24 L1562.47 1209.24 L1563.06 1209.24 L1563.64 1209.24 L1564.23 1209.24 L1564.81 1209.24 L1565.4 1209.24 L1565.99 1209.24 L1566.57 1209.24 L1567.16 1209.24 L1567.75 1209.24 L1568.33 1209.24 L1568.92 1209.24 L1569.51 1209.24 L1570.09 1209.24 L1570.68 1209.24 L1571.27 1209.24 L1571.85 1209.24 L1572.44 1209.24 L1573.02 1209.24 L1573.61 1209.24 L1574.2 1209.24 L1574.78 1209.24 L1575.37 1209.24 L1575.96 1209.24 L1576.54 1209.24 L1577.13 1209.24 L1577.72 1209.24 L1578.3 1209.24 L1578.89 1209.24 L1579.47 1209.24 L1580.06 1209.24 L1580.65 1209.24 L1581.23 1209.24 L1581.82 1209.24 L1582.41 1209.24 L1582.99 1209.24 L1583.58 1209.24 L1584.17 1209.24 L1584.75 1209.24 L1585.34 1209.24 L1585.93 1209.24 L1586.51 1209.24 L1587.1 1209.24 L1587.68 1209.24 L1588.27 1209.24 L1588.86 1209.24 L1589.44 1209.24 L1590.03 1209.24 L1590.62 1209.24 L1591.2 1209.24 L1591.79 1209.24 L1592.38 1209.24 L1592.96 1209.24 L1593.55 1209.24 L1594.14 1209.24 L1594.72 1209.24 L1595.31 1209.24 L1595.89 1209.24 L1596.48 1209.24 L1597.07 1209.24 L1597.65 1209.24 L1598.24 1209.24 L1598.83 1209.24 L1599.41 1209.24 L1600 1209.24 L1600.59 1209.24 L1601.17 1209.24 L1601.76 1209.24 L1602.34 1209.24 L1602.93 1209.24 L1603.52 1209.24 L1604.1 1209.24 L1604.69 1209.24 L1605.28 1209.24 L1605.86 1209.24 L1606.45 1209.24 L1607.04 1209.24 L1607.62 1209.24 L1608.21 1209.24 L1608.8 1209.24 L1609.38 1209.24 L1609.97 1209.24 L1610.55 1209.24 L1611.14 1209.24 L1611.73 1209.24 L1612.31 1209.24 L1612.9 1209.24 L1613.49 1209.24 L1614.07 1209.24 L1614.66 1209.24 L1615.25 1209.24 L1615.83 1209.24 L1616.42 1209.24 L1617.01 1209.24 L1617.59 1209.24 L1618.18 1209.24 L1618.76 1209.24 L1619.35 1209.24 L1619.94 1209.24 L1620.52 1209.24 L1621.11 1209.24 L1621.7 1209.24 L1622.28 1209.24 L1622.87 1209.24 L1623.46 1209.24 L1624.04 1209.24 L1624.63 1209.24 L1625.22 1209.24 L1625.8 1209.24 L1626.39 1209.24 L1626.97 1209.24 L1627.56 1209.24 L1628.15 1209.24 L1628.73 1209.24 L1629.32 1209.24 L1629.91 1209.24 L1630.49 1209.24 L1631.08 1209.24 L1631.67 1209.24 L1632.25 1209.24 L1632.84 1209.24 L1633.42 1209.24 L1634.01 1209.24 L1634.6 1209.24 L1635.18 1209.24 L1635.77 1209.24 L1636.36 1209.24 L1636.94 1209.24 L1637.53 1209.24 L1638.12 1209.24 L1638.7 1209.24 L1639.29 1209.24 L1639.88 1209.24 L1640.46 1209.24 L1641.05 1209.24 L1641.63 1209.24 L1642.22 1209.24 L1642.81 1209.24 L1643.39 1209.24 L1643.98 1209.24 L1644.57 1209.24 L1645.15 1209.24 L1645.74 1209.24 L1646.33 1209.24 L1646.91 1209.24 L1647.5 1209.24 L1648.09 1209.24 L1648.67 1209.24 L1649.26 1209.24 L1649.84 1209.24 L1650.43 1209.24 L1651.02 1209.24 L1651.6 1209.24 L1652.19 1209.24 L1652.78 1209.24 L1653.36 1209.24 L1653.95 1209.24 L1654.54 1209.24 L1655.12 1209.24 L1655.71 1209.24 L1656.29 1209.24 L1656.88 1209.24 L1657.47 1209.24 L1658.05 1209.24 L1658.64 1209.24 L1659.23 1209.24 L1659.81 1209.24 L1660.4 1209.24 L1660.99 1209.24 L1661.57 1209.24 L1662.16 1209.24 L1662.75 1209.24 L1663.33 1209.24 L1663.92 1209.24 L1664.5 1209.24 L1665.09 1209.24 L1665.68 1209.24 L1666.26 1209.24 L1666.85 1209.24 L1667.44 1209.24 L1668.02 1209.24 L1668.61 1209.24 L1669.2 1209.24 L1669.78 1209.24 L1670.37 1209.24 L1670.96 1209.24 L1671.54 1209.24 L1672.13 1209.24 L1672.71 1209.24 L1673.3 1209.24 L1673.89 1209.24 L1674.47 1209.24 L1675.06 1209.24 L1675.65 1209.24 L1676.23 1209.24 L1676.82 1209.24 L1677.41 1209.24 L1677.99 1209.24 L1678.58 1209.24 L1679.17 1209.24 L1679.75 1209.24 L1680.34 1209.24 L1680.92 1209.24 L1681.51 1209.24 L1682.1 1209.24 L1682.68 1209.24 L1683.27 1209.24 L1683.86 1209.24 L1684.44 1209.24 L1685.03 1209.24 L1685.62 1209.24 L1686.2 1209.24 L1686.79 1209.24 L1687.37 1209.24 L1687.96 1209.24 L1688.55 1209.24 L1689.13 1209.24 L1689.72 1209.24 L1690.31 1209.24 L1690.89 1209.24 L1691.48 1209.24 L1692.07 1209.24 L1692.65 1209.24 L1693.24 1209.24 L1693.83 1209.24 L1694.41 1209.24 L1695 1209.24 L1695.58 1209.24 L1696.17 1209.24 L1696.76 1209.24 L1697.34 1209.24 L1697.93 1209.24 L1698.52 1209.24 L1699.1 1209.24 L1699.69 1209.24 L1700.28 1209.24 L1700.86 1209.24 L1701.45 1209.24 L1702.04 1209.24 L1702.62 1209.24 L1703.21 1209.24 L1703.79 1209.24 L1704.38 1209.24 L1704.97 1209.24 L1705.55 1209.24 L1706.14 1209.24 L1706.73 1209.24 L1707.31 1209.24 L1707.9 1209.24 L1708.49 1209.24 L1709.07 1209.24 L1709.66 1209.24 L1710.24 1209.24 L1710.83 1209.24 L1711.42 1209.24 L1712 1209.24 L1712.59 1209.24 L1713.18 1209.24 L1713.76 1209.24 L1714.35 1209.24 L1714.94 1209.24 L1715.52 1209.24 L1716.11 1209.24 L1716.7 1209.24 L1717.28 1209.24 L1717.87 1209.24 L1718.45 1209.24 L1719.04 1209.24 L1719.63 1209.24 L1720.21 1209.24 L1720.8 1209.24 L1721.39 1209.24 L1721.97 1209.24 L1722.56 1209.24 L1723.15 1209.24 L1723.73 1209.24 L1724.32 1209.24 L1724.91 1209.24 L1725.49 1209.24 L1726.08 1209.24 L1726.66 1209.24 L1727.25 1209.24 L1727.84 1209.24 L1728.42 1209.24 L1729.01 1209.24 L1729.6 1209.24 L1730.18 1209.24 L1730.77 1209.24 L1731.36 1209.24 L1731.94 1209.24 L1732.53 1209.24 L1733.11 1209.24 L1733.7 1209.24 L1734.29 1209.24 L1734.87 1209.24 L1735.46 1209.24 L1736.05 1209.24 L1736.63 1209.24 L1737.22 1209.24 L1737.81 1209.24 L1738.39 1209.24 L1738.98 1209.24 L1739.57 1209.24 L1740.15 1209.24 L1740.74 1209.24 L1741.32 1209.24 L1741.91 1209.24 L1742.5 1209.24 L1743.08 1209.24 L1743.67 1209.24 L1744.26 1209.24 L1744.84 1209.24 L1745.43 1209.24 L1746.02 1209.24 L1746.6 1209.24 L1747.19 1209.24 L1747.78 1209.24 L1748.36 1209.24 L1748.95 1209.24 L1749.53 1209.24 L1750.12 1209.24 L1750.71 1209.24 L1751.29 1209.24 L1751.88 1209.24 L1752.47 1209.24 L1753.05 1209.24 L1753.64 1209.24 L1754.23 1209.24 L1754.81 1209.24 L1755.4 1209.24 L1755.99 1209.24 L1756.57 1209.24 L1757.16 1209.24 L1757.74 1209.24 L1758.33 1209.24 L1758.92 1209.24 L1759.5 1209.24 L1760.09 1209.24 L1760.68 1209.24 L1761.26 1209.24 L1761.85 1209.24 L1762.44 1209.24 L1763.02 1209.24 L1763.61 1209.24 L1764.19 1209.24 L1764.78 1209.24 L1765.37 1209.24 L1765.95 1209.24 L1766.54 1209.24 L1767.13 1209.24 L1767.71 1209.24 L1768.3 1209.24 L1768.89 1209.24 L1769.47 1209.24 L1770.06 1209.24 L1770.65 1209.24 L1771.23 1209.24 L1771.82 1209.24 L1772.4 1209.24 L1772.99 1209.24 L1773.58 1209.24 L1774.16 1209.24 L1774.75 1209.24 L1775.34 1209.24 L1775.92 1209.24 L1776.51 1209.24 L1777.1 1209.24 L1777.68 1209.24 L1778.27 1209.24 L1778.86 1209.24 L1779.44 1209.24 L1780.03 1209.24 L1780.61 1209.24 L1781.2 1209.24 L1781.79 1209.24 L1782.37 1209.24 L1782.96 1209.24 L1783.55 1209.24 L1784.13 1209.24 L1784.72 1209.24 L1785.31 1209.24 L1785.89 1209.24 L1786.48 1209.24 L1787.06 1209.24 L1787.65 1209.24 L1788.24 1209.24 L1788.82 1209.24 L1789.41 1209.24 L1790 1209.24 L1790.58 1209.24 L1791.17 1209.24 L1791.76 1209.24 L1792.34 1209.24 L1792.93 1209.24 L1793.52 1209.24 L1794.1 1209.24 L1794.69 1209.24 L1795.27 1209.24 L1795.86 1209.24 L1796.45 1209.24 L1797.03 1209.24 L1797.62 1209.24 L1798.21 1209.24 L1798.79 1209.24 L1799.38 1209.24 L1799.97 1209.24 L1800.55 1209.24 L1801.14 1209.24 L1801.73 1209.24 L1802.31 1209.24 L1802.9 1209.24 L1803.48 1209.24 L1804.07 1209.24 L1804.66 1209.24 L1805.24 1209.24 L1805.83 1209.24 L1806.42 1209.24 L1807 1209.24 L1807.59 1209.24 L1808.18 1209.24 L1808.76 1209.24 L1809.35 1209.24 L1809.94 1209.24 L1810.52 1209.24 L1811.11 1209.24 L1811.69 1209.24 L1812.28 1209.24 L1812.87 1209.24 L1813.45 1209.24 L1814.04 1209.24 L1814.63 1209.24 L1815.21 1209.24 L1815.8 1209.24 L1816.39 1209.24 L1816.97 1209.24 L1817.56 1209.24 L1818.14 1209.24 L1818.73 1209.24 L1819.32 1209.24 L1819.9 1209.24 L1820.49 1209.24 L1821.08 1209.24 L1821.66 1209.24 L1822.25 1209.24 L1822.84 1209.24 L1823.42 1209.24 L1824.01 1209.24 L1824.6 1209.24 L1825.18 1209.24 L1825.77 1209.24 L1826.35 1209.24 L1826.94 1209.24 L1827.53 1209.24 L1828.11 1209.24 L1828.7 1209.24 L1829.29 1209.24 L1829.87 1209.24 L1830.46 1209.24 L1831.05 1209.24 L1831.63 1209.24 L1832.22 1209.24 L1832.81 1209.24 L1833.39 1209.24 L1833.98 1209.24 L1834.56 1209.24 L1835.15 1209.24 L1835.74 1209.24 L1836.32 1209.24 L1836.91 1209.24 L1837.5 1209.24 L1838.08 1209.24 L1838.67 1209.24 L1839.26 1209.24 L1839.84 1209.24 L1840.43 1209.24 L1841.01 1209.24 L1841.6 1209.24 L1842.19 1209.24 L1842.77 1209.24 L1843.36 1209.24 L1843.95 1209.24 L1844.53 1209.24 L1845.12 1209.24 L1845.71 1209.24 L1846.29 1209.24 L1846.88 1209.24 L1847.47 1209.24 L1848.05 1209.24 L1848.64 1209.24 L1849.22 1209.24 L1849.81 1209.24 L1850.4 1209.24 L1850.98 1209.24 L1851.57 1209.24 L1852.16 1209.24 L1852.74 1209.24 L1853.33 1209.24 L1853.92 1209.24 L1854.5 1209.24 L1855.09 1209.24 L1855.68 1209.24 L1856.26 1209.24 L1856.85 1209.24 L1857.43 1209.24 L1858.02 1209.24 L1858.61 1209.24 L1859.19 1209.24 L1859.78 1209.24 L1860.37 1209.24 L1860.95 1209.24 L1861.54 1209.24 L1862.13 1209.24 L1862.71 1209.24 L1863.3 1209.24 L1863.88 1209.24 L1864.47 1209.24 L1865.06 1209.24 L1865.64 1209.24 L1866.23 1209.24 L1866.82 1209.24 L1867.4 1209.24 L1867.99 1209.24 L1868.58 1209.24 L1869.16 1209.24 L1869.75 1209.24 L1870.34 1209.24 L1870.92 1209.24 L1871.51 1209.24 L1872.09 1209.24 L1872.68 1209.24 L1873.27 1209.24 L1873.85 1209.24 L1874.44 1209.24 L1875.03 1209.24 L1875.61 1209.24 L1876.2 1209.24 L1876.79 1209.24 L1877.37 1209.24 L1877.96 1209.24 L1878.55 1209.24 L1879.13 1209.24 L1879.72 1209.24 L1880.3 1209.24 L1880.89 1209.24 L1881.48 1209.24 L1882.06 1209.24 L1882.65 1209.24 L1883.24 1209.24 L1883.82 1209.24 L1884.41 1209.24 L1885 1209.24 L1885.58 1209.24 L1886.17 1209.24 L1886.76 1209.24 L1887.34 1209.24 L1887.93 1209.24 L1888.51 1209.24 L1889.1 1209.24 L1889.69 1209.24 L1890.27 1209.24 L1890.86 1209.24 L1891.45 1209.24 L1892.03 1209.24 L1892.62 1209.24 L1893.21 1209.24 L1893.79 1209.24 L1894.38 1209.24 L1894.96 1209.24 L1895.55 1209.24 L1896.14 1209.24 L1896.72 1209.24 L1897.31 1209.24 L1897.9 1209.24 L1898.48 1209.24 L1899.07 1209.24 L1899.66 1209.24 L1900.24 1209.24 L1900.83 1209.24 L1901.42 1209.24 L1902 1209.24 L1902.59 1209.24 L1903.17 1209.24 L1903.76 1209.24 L1904.35 1209.24 L1904.93 1209.24 L1905.52 1209.24 L1906.11 1209.24 L1906.69 1209.24 L1907.28 1209.24 L1907.87 1209.24 L1908.45 1209.24 L1909.04 1209.24 L1909.63 1209.24 L1910.21 1209.24 L1910.8 1209.24 L1911.38 1209.24 L1911.97 1209.24 L1912.56 1209.24 L1913.14 1209.24 L1913.73 1209.24 L1914.32 1209.24 L1914.9 1209.24 L1915.49 1209.24 L1916.08 1209.24 L1916.66 1209.24 L1917.25 1209.24 L1917.83 1209.24 L1918.42 1209.24 L1919.01 1209.24 L1919.59 1209.24 L1920.18 1209.24 L1920.77 1209.24 L1921.35 1209.24 L1921.94 1209.24 L1922.53 1209.24 L1923.11 1209.24 L1923.7 1209.24 L1924.29 1209.24 L1924.87 1209.24 L1925.46 1209.24 L1926.04 1209.24 L1926.63 1209.24 L1927.22 1209.24 L1927.8 1209.24 L1928.39 1209.24 L1928.98 1209.24 L1929.56 1209.24 L1930.15 1209.24 L1930.74 1209.24 L1931.32 1209.24 L1931.91 1209.24 L1932.5 1209.24 L1933.08 1209.24 L1933.67 1209.24 L1934.25 1209.24 L1934.84 1209.24 L1935.43 1209.24 L1936.01 1209.24 L1936.6 1209.24 L1937.19 1209.24 L1937.77 1209.24 L1938.36 1209.24 L1938.95 1209.24 L1939.53 1209.24 L1940.12 1209.24 L1940.71 1209.24 L1941.29 1209.24 L1941.88 1209.24 L1942.46 1209.24 L1943.05 1209.24 L1943.64 1209.24 L1944.22 1209.24 L1944.81 1209.24 L1945.4 1209.24 L1945.98 1209.24 L1946.57 1209.24 L1947.16 1209.24 L1947.74 1209.24 L1948.33 1209.24 L1948.91 1209.24 L1949.5 1209.24 L1950.09 1209.24 L1950.67 1209.24 L1951.26 1209.24 L1951.85 1209.24 L1952.43 1209.24 L1953.02 1209.24 L1953.61 1209.24 L1954.19 1209.24 L1954.78 1209.24 L1955.37 1209.24 L1955.95 1209.24 L1956.54 1209.24 L1957.12 1209.24 L1957.71 1209.24 L1958.3 1209.24 L1958.88 1209.24 L1959.47 1209.24 L1960.06 1209.24 L1960.64 1209.24 L1961.23 1209.24 L1961.82 1209.24 L1962.4 1209.24 L1962.99 1209.24 L1963.58 1209.24 L1964.16 1209.24 L1964.75 1209.24 L1965.33 1209.24 L1965.92 1209.24 L1966.51 1209.24 L1967.09 1209.24 L1967.68 1209.24 L1968.27 1209.24 L1968.85 1209.24 L1969.44 1209.24 L1970.03 1209.24 L1970.61 1209.24 L1971.2 1209.24 L1971.78 1209.24 L1972.37 1209.24 L1972.96 1209.24 L1973.54 1209.24 L1974.13 1209.24 L1974.72 1209.24 L1975.3 1209.24 L1975.89 1209.24 L1976.48 1209.24 L1977.06 1209.24 L1977.65 1209.24 L1978.24 1209.24 L1978.82 1209.24 L1979.41 1209.24 L1979.99 1209.24 L1980.58 1209.24 L1981.17 1209.24 L1981.75 1209.24 L1982.34 1209.24 L1982.93 1209.24 L1983.51 1209.24 L1984.1 1209.24 L1984.69 1209.24 L1985.27 1209.24 L1985.86 1209.24 L1986.45 1209.24 L1987.03 1209.24 L1987.62 1209.24 L1988.2 1209.24 L1988.79 1209.24 L1989.38 1209.24 L1989.96 1209.24 L1990.55 1209.24 L1991.14 1209.24 L1991.72 1209.24 L1992.31 1209.24 L1992.9 1209.24 L1993.48 1209.24 L1994.07 1209.24 L1994.65 1209.24 L1995.24 1209.24 L1995.83 1209.24 L1996.41 1209.24 L1997 1209.24 L1997.59 1209.24 L1998.17 1209.24 L1998.76 1209.24 L1999.35 1209.24 L1999.93 1209.24 L2000.52 1209.24 L2001.11 1209.24 L2001.69 1209.24 L2002.28 1209.24 L2002.86 1209.24 L2003.45 1209.24 L2004.04 1209.24 L2004.62 1209.24 L2005.21 1209.24 L2005.8 1209.24 L2006.38 1209.24 L2006.97 1209.24 L2007.56 1209.24 L2008.14 1209.24 L2008.73 1209.24 L2009.32 1209.24 L2009.9 1209.24 L2010.49 1209.24 L2011.07 1209.24 L2011.66 1209.24 L2012.25 1209.24 L2012.83 1209.24 L2013.42 1209.24 L2014.01 1209.24 L2014.59 1209.24 L2015.18 1209.24 L2015.77 1209.24 L2016.35 1209.24 L2016.94 1209.24 L2017.53 1209.24 L2018.11 1209.24 L2018.7 1209.24 L2019.28 1209.24 L2019.87 1209.24 L2020.46 1209.24 L2021.04 1209.24 L2021.63 1209.24 L2022.22 1209.24 L2022.8 1209.24 L2023.39 1209.24 L2023.98 1209.24 L2024.56 1209.24 L2025.15 1209.24 L2025.73 1209.24 L2026.32 1209.24 L2026.91 1209.24 L2027.49 1209.24 L2028.08 1209.24 L2028.67 1209.24 L2029.25 1209.24 L2029.84 1209.24 L2030.43 1209.24 L2031.01 1209.24 L2031.6 1209.24 L2032.19 1209.24 L2032.77 1209.24 L2033.36 1209.24 L2033.94 1209.24 L2034.53 1209.24 L2035.12 1209.24 L2035.7 1209.24 L2036.29 1209.24 L2036.88 1209.24 L2037.46 1209.24 L2038.05 1209.24 L2038.64 1209.24 L2039.22 1209.24 L2039.81 1209.24 L2040.4 1209.24 L2040.98 1209.24 L2041.57 1209.24 L2042.15 1209.24 L2042.74 1209.24 L2043.33 1209.24 L2043.91 1209.24 L2044.5 1209.24 L2045.09 1209.24 L2045.67 1209.24 L2046.26 1209.24 L2046.85 1209.24 L2047.43 1209.24 L2048.02 1209.24 L2048.6 1209.24 L2049.19 1209.24 L2049.78 1209.24 L2050.36 1209.24 L2050.95 1209.24 L2051.54 1209.24 L2052.12 1209.24 L2052.71 1209.24 L2053.3 1209.24 L2053.88 1209.24 L2054.47 1209.24 L2055.06 1209.24 L2055.64 1209.24 L2056.23 1209.24 L2056.81 1209.24 L2057.4 1209.24 L2057.99 1209.24 L2058.57 1209.24 L2059.16 1209.24 L2059.75 1209.24 L2060.33 1209.24 L2060.92 1209.24 L2061.51 1209.24 L2062.09 1209.24 L2062.68 1209.24 L2063.27 1209.24 L2063.85 1209.24 L2064.44 1209.24 L2065.02 1209.24 L2065.61 1209.24 L2066.2 1209.24 L2066.78 1209.24 L2067.37 1209.24 L2067.96 1209.24 L2068.54 1209.24 L2069.13 1209.24 L2069.72 1209.24 L2070.3 1209.24 L2070.89 1209.24 L2071.48 1209.24 L2072.06 1209.24 L2072.65 1209.24 L2073.23 1209.24 L2073.82 1209.24 L2074.41 1209.24 L2074.99 1209.24 L2075.58 1209.24 L2076.17 1209.24 L2076.75 1209.24 L2077.34 1209.24 L2077.93 1209.24 L2078.51 1209.24 L2079.1 1209.24 L2079.68 1209.24 L2080.27 1209.24 L2080.86 1209.24 L2081.44 1209.24 L2082.03 1209.24 L2082.62 1209.24 L2083.2 1209.24 L2083.79 1209.24 L2084.38 1209.24 L2084.96 1209.24 L2085.55 1209.24 L2086.14 1209.24 L2086.72 1209.24 L2087.31 1209.24 L2087.89 1209.24 L2088.48 1209.24 L2089.07 1209.24 L2089.65 1209.24 L2090.24 1209.24 L2090.83 1209.24 L2091.41 1209.24 L2092 1209.24 L2092.59 1209.24 L2093.17 1209.24 L2093.76 1209.24 L2094.35 1209.24 L2094.93 1209.24 L2095.52 1209.24 L2096.1 1209.24 L2096.69 1209.24 L2097.28 1209.24 L2097.86 1209.24 L2098.45 1209.24 L2099.04 1209.24 L2099.62 1209.24 L2100.21 1209.24 L2100.8 1209.24 L2101.38 1209.24 L2101.97 1209.24 L2102.55 1209.24 L2103.14 1209.24 L2103.73 1209.24 L2104.31 1209.24 L2104.9 1209.24 L2105.49 1209.24 L2106.07 1209.24 L2106.66 1209.24 L2107.25 1209.24 L2107.83 1209.24 L2108.42 1209.24 L2109.01 1209.24 L2109.59 1209.24 L2110.18 1209.24 L2110.76 1209.24 L2111.35 1209.24 L2111.94 1209.24 L2112.52 1209.24 L2113.11 1209.24 L2113.7 1209.24 L2114.28 1209.24 L2114.87 1209.24 L2115.46 1209.24 L2116.04 1209.24 L2116.63 1209.24 L2117.22 1209.24 L2117.8 1209.24 L2118.39 1209.24 L2118.97 1209.24 L2119.56 1209.24 L2120.15 1209.24 L2120.73 1209.24 L2121.32 1209.24 L2121.91 1209.24 L2122.49 1209.24 L2123.08 1209.24 L2123.67 1209.24 L2124.25 1209.24 L2124.84 1209.24 L2125.42 1209.24 L2126.01 1209.24 L2126.6 1209.24 L2127.18 1209.24 L2127.77 1209.24 L2128.36 1209.24 L2128.94 1209.24 L2129.53 1209.24 L2130.12 1209.24 L2130.7 1209.24 L2131.29 1209.24 L2131.88 1209.24 L2132.46 1209.24 L2133.05 1209.24 L2133.63 1209.24 L2134.22 1209.24 L2134.81 1209.24 L2135.39 1209.24 L2135.98 1209.24 L2136.57 1209.24 L2137.15 1209.24 L2137.74 1209.24 L2138.33 1209.24 L2138.91 1209.24 L2139.5 1209.24 L2140.09 1209.24 L2140.67 1209.24 L2141.26 1209.24 L2141.84 1209.24 L2142.43 1209.24 L2143.02 1209.24 L2143.6 1209.24 L2144.19 1209.24 L2144.78 1209.24 L2145.36 1209.24 L2145.95 1209.24 L2146.54 1209.24 L2147.12 1209.24 L2147.71 1209.24 L2148.3 1209.24 L2148.88 1209.24 L2149.47 1209.24 L2150.05 1209.24 L2150.64 1209.24 L2151.23 1209.24 L2151.81 1209.24 L2152.4 1209.24 L2152.99 1209.24 L2153.57 1209.24 L2154.16 1209.24 L2154.75 1209.24 L2155.33 1209.24 L2155.92 1209.24 L2156.5 1209.24 L2157.09 1209.24 L2157.68 1209.24 L2158.26 1209.24 L2158.26 1209.06 L2157.68 1209.06 L2157.09 1209.06 L2156.5 1209.06 L2155.92 1209.06 L2155.33 1209.06 L2154.75 1209.06 L2154.16 1209.06 L2153.57 1209.06 L2152.99 1209.06 L2152.4 1209.06 L2151.81 1209.06 L2151.23 1209.06 L2150.64 1209.06 L2150.05 1209.06 L2149.47 1209.06 L2148.88 1209.06 L2148.3 1209.06 L2147.71 1209.06 L2147.12 1209.06 L2146.54 1209.06 L2145.95 1209.06 L2145.36 1209.06 L2144.78 1209.06 L2144.19 1209.06 L2143.6 1209.06 L2143.02 1209.06 L2142.43 1209.06 L2141.84 1209.06 L2141.26 1209.06 L2140.67 1209.06 L2140.09 1209.06 L2139.5 1209.06 L2138.91 1209.06 L2138.33 1209.06 L2137.74 1209.06 L2137.15 1209.06 L2136.57 1209.06 L2135.98 1209.06 L2135.39 1209.06 L2134.81 1209.06 L2134.22 1209.06 L2133.63 1209.06 L2133.05 1209.06 L2132.46 1209.06 L2131.88 1209.06 L2131.29 1209.06 L2130.7 1209.06 L2130.12 1209.06 L2129.53 1209.06 L2128.94 1209.06 L2128.36 1209.06 L2127.77 1209.06 L2127.18 1209.06 L2126.6 1209.06 L2126.01 1209.06 L2125.42 1209.06 L2124.84 1209.06 L2124.25 1209.06 L2123.67 1209.06 L2123.08 1209.06 L2122.49 1209.06 L2121.91 1209.06 L2121.32 1209.06 L2120.73 1209.06 L2120.15 1209.06 L2119.56 1209.06 L2118.97 1209.06 L2118.39 1209.06 L2117.8 1209.06 L2117.22 1209.06 L2116.63 1209.06 L2116.04 1209.06 L2115.46 1209.06 L2114.87 1209.06 L2114.28 1209.06 L2113.7 1209.06 L2113.11 1209.06 L2112.52 1209.06 L2111.94 1209.06 L2111.35 1209.06 L2110.76 1209.06 L2110.18 1209.06 L2109.59 1209.06 L2109.01 1209.06 L2108.42 1209.06 L2107.83 1209.06 L2107.25 1209.06 L2106.66 1209.06 L2106.07 1209.06 L2105.49 1209.06 L2104.9 1209.06 L2104.31 1209.06 L2103.73 1209.06 L2103.14 1209.06 L2102.55 1209.06 L2101.97 1209.06 L2101.38 1209.06 L2100.8 1209.06 L2100.21 1209.06 L2099.62 1209.06 L2099.04 1209.06 L2098.45 1209.06 L2097.86 1209.06 L2097.28 1209.06 L2096.69 1209.06 L2096.1 1209.06 L2095.52 1209.06 L2094.93 1209.06 L2094.35 1209.06 L2093.76 1209.06 L2093.17 1209.06 L2092.59 1209.06 L2092 1209.06 L2091.41 1209.06 L2090.83 1209.06 L2090.24 1209.06 L2089.65 1209.06 L2089.07 1209.06 L2088.48 1209.06 L2087.89 1209.06 L2087.31 1209.06 L2086.72 1209.06 L2086.14 1209.06 L2085.55 1209.06 L2084.96 1209.06 L2084.38 1209.06 L2083.79 1209.06 L2083.2 1209.06 L2082.62 1209.06 L2082.03 1209.06 L2081.44 1209.06 L2080.86 1209.06 L2080.27 1209.06 L2079.68 1209.06 L2079.1 1209.06 L2078.51 1209.06 L2077.93 1209.06 L2077.34 1209.06 L2076.75 1209.06 L2076.17 1209.06 L2075.58 1209.06 L2074.99 1209.06 L2074.41 1209.06 L2073.82 1209.06 L2073.23 1209.06 L2072.65 1209.06 L2072.06 1209.06 L2071.48 1209.06 L2070.89 1209.06 L2070.3 1209.06 L2069.72 1209.06 L2069.13 1209.06 L2068.54 1209.06 L2067.96 1209.06 L2067.37 1209.06 L2066.78 1209.06 L2066.2 1209.06 L2065.61 1209.06 L2065.02 1209.06 L2064.44 1209.06 L2063.85 1209.06 L2063.27 1209.06 L2062.68 1209.06 L2062.09 1209.06 L2061.51 1209.06 L2060.92 1209.06 L2060.33 1209.06 L2059.75 1209.06 L2059.16 1209.06 L2058.57 1209.06 L2057.99 1209.06 L2057.4 1209.06 L2056.81 1209.06 L2056.23 1209.06 L2055.64 1209.06 L2055.06 1209.06 L2054.47 1209.06 L2053.88 1209.06 L2053.3 1209.06 L2052.71 1209.06 L2052.12 1209.06 L2051.54 1209.06 L2050.95 1209.06 L2050.36 1209.06 L2049.78 1209.06 L2049.19 1209.06 L2048.6 1209.06 L2048.02 1209.06 L2047.43 1209.06 L2046.85 1209.06 L2046.26 1209.06 L2045.67 1209.06 L2045.09 1209.06 L2044.5 1209.06 L2043.91 1209.06 L2043.33 1209.06 L2042.74 1209.06 L2042.15 1209.06 L2041.57 1209.06 L2040.98 1209.06 L2040.4 1209.06 L2039.81 1209.06 L2039.22 1209.06 L2038.64 1209.06 L2038.05 1209.06 L2037.46 1209.06 L2036.88 1209.06 L2036.29 1209.06 L2035.7 1209.06 L2035.12 1209.06 L2034.53 1209.06 L2033.94 1209.06 L2033.36 1209.06 L2032.77 1209.06 L2032.19 1209.06 L2031.6 1209.06 L2031.01 1209.06 L2030.43 1209.06 L2029.84 1209.06 L2029.25 1209.06 L2028.67 1209.06 L2028.08 1209.06 L2027.49 1209.06 L2026.91 1209.06 L2026.32 1209.06 L2025.73 1209.06 L2025.15 1209.06 L2024.56 1209.06 L2023.98 1209.06 L2023.39 1209.06 L2022.8 1209.06 L2022.22 1209.06 L2021.63 1209.06 L2021.04 1209.06 L2020.46 1209.06 L2019.87 1209.06 L2019.28 1209.06 L2018.7 1209.06 L2018.11 1209.06 L2017.53 1209.06 L2016.94 1209.06 L2016.35 1209.06 L2015.77 1209.06 L2015.18 1209.06 L2014.59 1209.06 L2014.01 1209.06 L2013.42 1209.06 L2012.83 1209.06 L2012.25 1209.06 L2011.66 1209.06 L2011.07 1209.06 L2010.49 1209.06 L2009.9 1209.06 L2009.32 1209.06 L2008.73 1209.06 L2008.14 1209.06 L2007.56 1209.06 L2006.97 1209.06 L2006.38 1209.06 L2005.8 1209.06 L2005.21 1209.06 L2004.62 1209.06 L2004.04 1209.06 L2003.45 1209.06 L2002.86 1209.06 L2002.28 1209.06 L2001.69 1209.06 L2001.11 1209.06 L2000.52 1209.06 L1999.93 1209.06 L1999.35 1209.06 L1998.76 1209.06 L1998.17 1209.06 L1997.59 1209.06 L1997 1209.06 L1996.41 1209.06 L1995.83 1209.06 L1995.24 1209.06 L1994.65 1209.06 L1994.07 1209.06 L1993.48 1209.06 L1992.9 1209.06 L1992.31 1209.06 L1991.72 1209.06 L1991.14 1209.06 L1990.55 1209.06 L1989.96 1209.06 L1989.38 1209.06 L1988.79 1209.06 L1988.2 1209.06 L1987.62 1209.06 L1987.03 1209.06 L1986.45 1209.06 L1985.86 1209.06 L1985.27 1209.06 L1984.69 1209.06 L1984.1 1209.06 L1983.51 1209.06 L1982.93 1209.06 L1982.34 1209.06 L1981.75 1209.06 L1981.17 1209.06 L1980.58 1209.06 L1979.99 1209.06 L1979.41 1209.06 L1978.82 1209.06 L1978.24 1209.06 L1977.65 1209.06 L1977.06 1209.06 L1976.48 1209.06 L1975.89 1209.06 L1975.3 1209.06 L1974.72 1209.06 L1974.13 1209.06 L1973.54 1209.06 L1972.96 1209.06 L1972.37 1209.06 L1971.78 1209.06 L1971.2 1209.06 L1970.61 1209.06 L1970.03 1209.06 L1969.44 1209.06 L1968.85 1209.06 L1968.27 1209.06 L1967.68 1209.06 L1967.09 1209.06 L1966.51 1209.06 L1965.92 1209.06 L1965.33 1209.06 L1964.75 1209.06 L1964.16 1209.06 L1963.58 1209.06 L1962.99 1209.06 L1962.4 1209.06 L1961.82 1209.06 L1961.23 1209.06 L1960.64 1209.06 L1960.06 1209.06 L1959.47 1209.06 L1958.88 1209.06 L1958.3 1209.06 L1957.71 1209.06 L1957.12 1209.06 L1956.54 1209.06 L1955.95 1209.06 L1955.37 1209.06 L1954.78 1209.06 L1954.19 1209.06 L1953.61 1209.06 L1953.02 1209.06 L1952.43 1209.06 L1951.85 1209.06 L1951.26 1209.06 L1950.67 1209.06 L1950.09 1209.06 L1949.5 1209.06 L1948.91 1209.06 L1948.33 1209.06 L1947.74 1209.06 L1947.16 1209.06 L1946.57 1209.06 L1945.98 1209.06 L1945.4 1209.06 L1944.81 1209.06 L1944.22 1209.06 L1943.64 1209.06 L1943.05 1209.06 L1942.46 1209.06 L1941.88 1209.06 L1941.29 1209.06 L1940.71 1209.06 L1940.12 1209.06 L1939.53 1209.06 L1938.95 1209.06 L1938.36 1209.06 L1937.77 1209.06 L1937.19 1209.06 L1936.6 1209.06 L1936.01 1209.06 L1935.43 1209.06 L1934.84 1209.06 L1934.25 1209.06 L1933.67 1209.06 L1933.08 1209.06 L1932.5 1209.06 L1931.91 1209.06 L1931.32 1209.06 L1930.74 1209.06 L1930.15 1209.06 L1929.56 1209.06 L1928.98 1209.06 L1928.39 1209.06 L1927.8 1209.06 L1927.22 1209.06 L1926.63 1209.06 L1926.04 1209.06 L1925.46 1209.06 L1924.87 1209.06 L1924.29 1209.06 L1923.7 1209.06 L1923.11 1209.06 L1922.53 1209.06 L1921.94 1209.06 L1921.35 1209.06 L1920.77 1209.06 L1920.18 1209.06 L1919.59 1209.06 L1919.01 1209.06 L1918.42 1209.06 L1917.83 1209.06 L1917.25 1209.06 L1916.66 1209.06 L1916.08 1209.06 L1915.49 1209.06 L1914.9 1209.06 L1914.32 1209.06 L1913.73 1209.06 L1913.14 1209.06 L1912.56 1209.06 L1911.97 1209.06 L1911.38 1209.06 L1910.8 1209.06 L1910.21 1209.06 L1909.63 1209.06 L1909.04 1209.06 L1908.45 1209.06 L1907.87 1209.06 L1907.28 1209.06 L1906.69 1209.06 L1906.11 1209.06 L1905.52 1209.06 L1904.93 1209.06 L1904.35 1209.06 L1903.76 1209.06 L1903.17 1209.06 L1902.59 1209.06 L1902 1209.06 L1901.42 1209.06 L1900.83 1209.06 L1900.24 1209.06 L1899.66 1209.06 L1899.07 1209.06 L1898.48 1209.06 L1897.9 1209.06 L1897.31 1209.06 L1896.72 1209.06 L1896.14 1209.06 L1895.55 1209.06 L1894.96 1209.06 L1894.38 1209.06 L1893.79 1209.06 L1893.21 1209.06 L1892.62 1209.06 L1892.03 1209.06 L1891.45 1209.06 L1890.86 1209.06 L1890.27 1209.06 L1889.69 1209.06 L1889.1 1209.06 L1888.51 1209.06 L1887.93 1209.06 L1887.34 1209.06 L1886.76 1209.06 L1886.17 1209.06 L1885.58 1209.06 L1885 1209.06 L1884.41 1209.06 L1883.82 1209.06 L1883.24 1209.06 L1882.65 1209.06 L1882.06 1209.06 L1881.48 1209.06 L1880.89 1209.06 L1880.3 1209.06 L1879.72 1209.06 L1879.13 1209.06 L1878.55 1209.06 L1877.96 1209.06 L1877.37 1209.06 L1876.79 1209.06 L1876.2 1209.06 L1875.61 1209.06 L1875.03 1209.06 L1874.44 1209.06 L1873.85 1209.06 L1873.27 1209.06 L1872.68 1209.06 L1872.09 1209.06 L1871.51 1209.06 L1870.92 1209.06 L1870.34 1209.06 L1869.75 1209.06 L1869.16 1209.06 L1868.58 1209.06 L1867.99 1209.06 L1867.4 1209.06 L1866.82 1209.06 L1866.23 1209.06 L1865.64 1209.06 L1865.06 1209.06 L1864.47 1209.06 L1863.88 1209.06 L1863.3 1209.06 L1862.71 1209.06 L1862.13 1209.06 L1861.54 1209.06 L1860.95 1209.06 L1860.37 1209.06 L1859.78 1209.06 L1859.19 1209.06 L1858.61 1209.06 L1858.02 1209.06 L1857.43 1209.06 L1856.85 1209.06 L1856.26 1209.06 L1855.68 1209.06 L1855.09 1209.06 L1854.5 1209.06 L1853.92 1209.06 L1853.33 1209.06 L1852.74 1209.06 L1852.16 1209.06 L1851.57 1209.06 L1850.98 1209.06 L1850.4 1209.06 L1849.81 1209.06 L1849.22 1209.06 L1848.64 1209.06 L1848.05 1209.06 L1847.47 1209.06 L1846.88 1209.06 L1846.29 1209.06 L1845.71 1209.06 L1845.12 1209.06 L1844.53 1209.06 L1843.95 1209.06 L1843.36 1209.06 L1842.77 1209.06 L1842.19 1209.06 L1841.6 1209.06 L1841.01 1209.06 L1840.43 1209.06 L1839.84 1209.06 L1839.26 1209.06 L1838.67 1209.06 L1838.08 1209.06 L1837.5 1209.06 L1836.91 1209.06 L1836.32 1209.06 L1835.74 1209.06 L1835.15 1209.06 L1834.56 1209.06 L1833.98 1209.06 L1833.39 1209.06 L1832.81 1209.06 L1832.22 1209.06 L1831.63 1209.06 L1831.05 1209.06 L1830.46 1209.06 L1829.87 1209.06 L1829.29 1209.06 L1828.7 1209.06 L1828.11 1209.06 L1827.53 1209.06 L1826.94 1209.06 L1826.35 1209.06 L1825.77 1209.06 L1825.18 1209.06 L1824.6 1209.06 L1824.01 1209.06 L1823.42 1209.06 L1822.84 1209.06 L1822.25 1209.06 L1821.66 1209.06 L1821.08 1209.06 L1820.49 1209.06 L1819.9 1209.06 L1819.32 1209.06 L1818.73 1209.06 L1818.14 1209.06 L1817.56 1209.06 L1816.97 1209.06 L1816.39 1209.06 L1815.8 1209.06 L1815.21 1209.06 L1814.63 1209.06 L1814.04 1209.06 L1813.45 1209.06 L1812.87 1209.06 L1812.28 1209.06 L1811.69 1209.06 L1811.11 1209.06 L1810.52 1209.06 L1809.94 1209.06 L1809.35 1209.06 L1808.76 1209.06 L1808.18 1209.06 L1807.59 1209.06 L1807 1209.06 L1806.42 1209.06 L1805.83 1209.06 L1805.24 1209.06 L1804.66 1209.06 L1804.07 1209.06 L1803.48 1209.06 L1802.9 1209.06 L1802.31 1209.06 L1801.73 1209.06 L1801.14 1209.06 L1800.55 1209.06 L1799.97 1209.06 L1799.38 1209.06 L1798.79 1209.06 L1798.21 1209.06 L1797.62 1209.06 L1797.03 1209.06 L1796.45 1209.06 L1795.86 1209.06 L1795.27 1209.06 L1794.69 1209.06 L1794.1 1209.06 L1793.52 1209.06 L1792.93 1209.06 L1792.34 1209.06 L1791.76 1209.06 L1791.17 1209.06 L1790.58 1209.06 L1790 1209.06 L1789.41 1209.06 L1788.82 1209.06 L1788.24 1209.06 L1787.65 1209.06 L1787.06 1209.06 L1786.48 1209.06 L1785.89 1209.06 L1785.31 1209.06 L1784.72 1209.06 L1784.13 1209.06 L1783.55 1209.06 L1782.96 1209.06 L1782.37 1209.06 L1781.79 1209.06 L1781.2 1209.06 L1780.61 1209.06 L1780.03 1209.06 L1779.44 1209.06 L1778.86 1209.06 L1778.27 1209.06 L1777.68 1209.06 L1777.1 1209.06 L1776.51 1209.06 L1775.92 1209.06 L1775.34 1209.06 L1774.75 1209.06 L1774.16 1209.06 L1773.58 1209.06 L1772.99 1209.06 L1772.4 1209.06 L1771.82 1209.06 L1771.23 1209.06 L1770.65 1209.06 L1770.06 1209.06 L1769.47 1209.06 L1768.89 1209.06 L1768.3 1209.06 L1767.71 1209.06 L1767.13 1209.06 L1766.54 1209.06 L1765.95 1209.06 L1765.37 1209.06 L1764.78 1209.06 L1764.19 1209.06 L1763.61 1209.06 L1763.02 1209.06 L1762.44 1209.06 L1761.85 1209.06 L1761.26 1209.06 L1760.68 1209.06 L1760.09 1209.06 L1759.5 1209.06 L1758.92 1209.06 L1758.33 1209.06 L1757.74 1209.06 L1757.16 1209.06 L1756.57 1209.06 L1755.99 1209.06 L1755.4 1209.06 L1754.81 1209.06 L1754.23 1209.06 L1753.64 1209.06 L1753.05 1209.06 L1752.47 1209.06 L1751.88 1209.06 L1751.29 1209.06 L1750.71 1209.06 L1750.12 1209.06 L1749.53 1209.06 L1748.95 1209.06 L1748.36 1209.06 L1747.78 1209.06 L1747.19 1209.06 L1746.6 1209.06 L1746.02 1209.06 L1745.43 1209.06 L1744.84 1209.06 L1744.26 1209.06 L1743.67 1209.06 L1743.08 1209.06 L1742.5 1209.06 L1741.91 1209.06 L1741.32 1209.06 L1740.74 1209.06 L1740.15 1209.06 L1739.57 1209.06 L1738.98 1209.06 L1738.39 1209.06 L1737.81 1209.06 L1737.22 1209.06 L1736.63 1209.06 L1736.05 1209.06 L1735.46 1209.06 L1734.87 1209.06 L1734.29 1209.06 L1733.7 1209.06 L1733.11 1209.06 L1732.53 1209.06 L1731.94 1209.06 L1731.36 1209.06 L1730.77 1209.06 L1730.18 1209.06 L1729.6 1209.06 L1729.01 1209.06 L1728.42 1209.06 L1727.84 1209.06 L1727.25 1209.06 L1726.66 1209.06 L1726.08 1209.06 L1725.49 1209.06 L1724.91 1209.06 L1724.32 1209.06 L1723.73 1209.06 L1723.15 1209.06 L1722.56 1209.06 L1721.97 1209.06 L1721.39 1209.06 L1720.8 1209.06 L1720.21 1209.06 L1719.63 1209.06 L1719.04 1209.06 L1718.45 1209.06 L1717.87 1209.06 L1717.28 1209.06 L1716.7 1209.06 L1716.11 1209.06 L1715.52 1209.06 L1714.94 1209.06 L1714.35 1209.06 L1713.76 1209.06 L1713.18 1209.06 L1712.59 1209.06 L1712 1209.06 L1711.42 1209.06 L1710.83 1209.06 L1710.24 1209.06 L1709.66 1209.06 L1709.07 1209.06 L1708.49 1209.06 L1707.9 1209.06 L1707.31 1209.06 L1706.73 1209.06 L1706.14 1209.06 L1705.55 1209.06 L1704.97 1209.06 L1704.38 1209.06 L1703.79 1209.06 L1703.21 1209.06 L1702.62 1209.06 L1702.04 1209.06 L1701.45 1209.06 L1700.86 1209.06 L1700.28 1209.06 L1699.69 1209.06 L1699.1 1209.06 L1698.52 1209.06 L1697.93 1209.06 L1697.34 1209.06 L1696.76 1209.06 L1696.17 1209.06 L1695.58 1209.06 L1695 1209.06 L1694.41 1209.06 L1693.83 1209.06 L1693.24 1209.06 L1692.65 1209.06 L1692.07 1209.06 L1691.48 1209.06 L1690.89 1209.06 L1690.31 1209.06 L1689.72 1209.06 L1689.13 1209.06 L1688.55 1209.06 L1687.96 1209.06 L1687.37 1209.06 L1686.79 1209.06 L1686.2 1209.06 L1685.62 1209.06 L1685.03 1209.06 L1684.44 1209.06 L1683.86 1209.06 L1683.27 1209.06 L1682.68 1209.06 L1682.1 1209.06 L1681.51 1209.06 L1680.92 1209.06 L1680.34 1209.06 L1679.75 1209.06 L1679.17 1209.06 L1678.58 1209.06 L1677.99 1209.06 L1677.41 1209.06 L1676.82 1209.06 L1676.23 1209.06 L1675.65 1209.06 L1675.06 1209.06 L1674.47 1209.06 L1673.89 1209.06 L1673.3 1209.06 L1672.71 1209.06 L1672.13 1209.06 L1671.54 1209.06 L1670.96 1209.06 L1670.37 1209.06 L1669.78 1209.06 L1669.2 1209.06 L1668.61 1209.06 L1668.02 1209.06 L1667.44 1209.06 L1666.85 1209.06 L1666.26 1209.06 L1665.68 1209.06 L1665.09 1209.06 L1664.5 1209.06 L1663.92 1209.06 L1663.33 1209.06 L1662.75 1209.06 L1662.16 1209.06 L1661.57 1209.06 L1660.99 1209.06 L1660.4 1209.06 L1659.81 1209.06 L1659.23 1209.06 L1658.64 1209.06 L1658.05 1209.06 L1657.47 1209.06 L1656.88 1209.06 L1656.29 1209.06 L1655.71 1209.06 L1655.12 1209.06 L1654.54 1209.06 L1653.95 1209.06 L1653.36 1209.06 L1652.78 1209.06 L1652.19 1209.06 L1651.6 1209.06 L1651.02 1209.06 L1650.43 1209.06 L1649.84 1209.06 L1649.26 1209.06 L1648.67 1209.06 L1648.09 1209.06 L1647.5 1209.06 L1646.91 1209.06 L1646.33 1209.06 L1645.74 1209.06 L1645.15 1209.06 L1644.57 1209.06 L1643.98 1209.06 L1643.39 1209.06 L1642.81 1209.06 L1642.22 1209.06 L1641.63 1209.06 L1641.05 1209.06 L1640.46 1209.06 L1639.88 1209.06 L1639.29 1209.06 L1638.7 1209.06 L1638.12 1209.06 L1637.53 1209.06 L1636.94 1209.06 L1636.36 1209.06 L1635.77 1209.06 L1635.18 1209.06 L1634.6 1209.06 L1634.01 1209.06 L1633.42 1209.06 L1632.84 1209.06 L1632.25 1209.06 L1631.67 1209.06 L1631.08 1209.06 L1630.49 1209.06 L1629.91 1209.06 L1629.32 1209.06 L1628.73 1209.06 L1628.15 1209.06 L1627.56 1209.06 L1626.97 1209.06 L1626.39 1209.06 L1625.8 1209.06 L1625.22 1209.06 L1624.63 1209.06 L1624.04 1209.06 L1623.46 1209.06 L1622.87 1209.06 L1622.28 1209.06 L1621.7 1209.06 L1621.11 1209.06 L1620.52 1209.06 L1619.94 1209.06 L1619.35 1209.06 L1618.76 1209.06 L1618.18 1209.06 L1617.59 1209.06 L1617.01 1209.06 L1616.42 1209.06 L1615.83 1209.06 L1615.25 1209.06 L1614.66 1209.06 L1614.07 1209.06 L1613.49 1209.06 L1612.9 1209.06 L1612.31 1209.06 L1611.73 1209.06 L1611.14 1209.06 L1610.55 1209.06 L1609.97 1209.06 L1609.38 1209.06 L1608.8 1209.06 L1608.21 1209.06 L1607.62 1209.06 L1607.04 1209.06 L1606.45 1209.06 L1605.86 1209.06 L1605.28 1209.06 L1604.69 1209.06 L1604.1 1209.06 L1603.52 1209.06 L1602.93 1209.06 L1602.34 1209.06 L1601.76 1209.06 L1601.17 1209.06 L1600.59 1209.06 L1600 1209.06 L1599.41 1209.06 L1598.83 1209.06 L1598.24 1209.06 L1597.65 1209.06 L1597.07 1209.06 L1596.48 1209.06 L1595.89 1209.06 L1595.31 1209.06 L1594.72 1209.06 L1594.14 1209.06 L1593.55 1209.06 L1592.96 1209.06 L1592.38 1209.06 L1591.79 1209.06 L1591.2 1209.06 L1590.62 1209.06 L1590.03 1209.06 L1589.44 1209.06 L1588.86 1209.06 L1588.27 1209.06 L1587.68 1209.06 L1587.1 1209.06 L1586.51 1209.06 L1585.93 1209.06 L1585.34 1209.06 L1584.75 1209.06 L1584.17 1209.06 L1583.58 1209.06 L1582.99 1209.06 L1582.41 1209.06 L1581.82 1209.06 L1581.23 1209.06 L1580.65 1209.06 L1580.06 1209.06 L1579.47 1209.06 L1578.89 1209.06 L1578.3 1209.06 L1577.72 1209.06 L1577.13 1209.06 L1576.54 1209.06 L1575.96 1209.06 L1575.37 1209.06 L1574.78 1209.06 L1574.2 1209.06 L1573.61 1209.06 L1573.02 1209.06 L1572.44 1209.06 L1571.85 1209.06 L1571.27 1209.06 L1570.68 1209.06 L1570.09 1209.06 L1569.51 1209.06 L1568.92 1209.06 L1568.33 1209.06 L1567.75 1209.06 L1567.16 1209.06 L1566.57 1209.06 L1565.99 1209.06 L1565.4 1209.06 L1564.81 1209.06 L1564.23 1209.06 L1563.64 1209.06 L1563.06 1209.06 L1562.47 1209.06 L1561.88 1209.06 L1561.3 1209.06 L1560.71 1209.06 L1560.12 1209.06 L1559.54 1209.06 L1558.95 1209.06 L1558.36 1209.06 L1557.78 1209.06 L1557.19 1209.06 L1556.6 1209.06 L1556.02 1209.06 L1555.43 1209.06 L1554.85 1209.06 L1554.26 1209.06 L1553.67 1209.06 L1553.09 1209.06 L1552.5 1209.06 L1551.91 1209.06 L1551.33 1209.06 L1550.74 1209.06 L1550.15 1209.06 L1549.57 1209.06 L1548.98 1209.06 L1548.4 1209.06 L1547.81 1209.06 L1547.22 1209.06 L1546.64 1209.06 L1546.05 1209.06 L1545.46 1209.06 L1544.88 1209.06 L1544.29 1209.06 L1543.7 1209.06 L1543.12 1209.06 L1542.53 1209.06 L1541.94 1209.06 L1541.36 1209.06 L1540.77 1209.06 L1540.19 1209.06 L1539.6 1209.06 L1539.01 1209.06 L1538.43 1209.06 L1537.84 1209.06 L1537.25 1209.06 L1536.67 1209.06 L1536.08 1209.06 L1535.49 1209.06 L1534.91 1209.06 L1534.32 1209.06 L1533.73 1209.06 L1533.15 1209.06 L1532.56 1209.06 L1531.98 1209.06 L1531.39 1209.06 L1530.8 1209.06 L1530.22 1209.06 L1529.63 1209.06 L1529.04 1209.06 L1528.46 1209.06 L1527.87 1209.06 L1527.28 1209.06 L1526.7 1209.06 L1526.11 1209.06 L1525.52 1209.06 L1524.94 1209.06 L1524.35 1209.06 L1523.77 1209.06 L1523.18 1209.06 L1522.59 1209.06 L1522.01 1209.06 L1521.42 1209.06 L1520.83 1209.06 L1520.25 1209.06 L1519.66 1209.06 L1519.07 1209.06 L1518.49 1209.06 L1517.9 1209.06 L1517.32 1209.06 L1516.73 1209.06 L1516.14 1209.06 L1515.56 1209.06 L1514.97 1209.06 L1514.38 1209.06 L1513.8 1209.06 L1513.21 1209.06 L1512.62 1209.06 L1512.04 1209.06 L1511.45 1209.06 L1510.86 1209.06 L1510.28 1209.06 L1509.69 1209.06 L1509.11 1209.06 L1508.52 1209.06 L1507.93 1209.06 L1507.35 1209.06 L1506.76 1209.06 L1506.17 1209.06 L1505.59 1209.06 L1505 1209.06 L1504.41 1209.06 L1503.83 1209.06 L1503.24 1209.06 L1502.65 1209.06 L1502.07 1209.06 L1501.48 1209.06 L1500.9 1209.06 L1500.31 1209.06 L1499.72 1209.06 L1499.14 1209.06 L1498.55 1209.06 L1497.96 1209.06 L1497.38 1209.06 L1496.79 1209.06 L1496.2 1209.06 L1495.62 1209.06 L1495.03 1209.06 L1494.45 1209.06 L1493.86 1209.06 L1493.27 1209.06 L1492.69 1209.06 L1492.1 1209.06 L1491.51 1209.06 L1490.93 1209.06 L1490.34 1209.06 L1489.75 1209.06 L1489.17 1209.06 L1488.58 1209.06 L1487.99 1209.06 L1487.41 1209.06 L1486.82 1209.06 L1486.24 1209.06 L1485.65 1209.06 L1485.06 1209.06 L1484.48 1209.06 L1483.89 1209.06 L1483.3 1209.06 L1482.72 1209.06 L1482.13 1209.06 L1481.54 1209.06 L1480.96 1209.06 L1480.37 1209.06 L1479.78 1209.06 L1479.2 1209.06 L1478.61 1209.06 L1478.03 1209.06 L1477.44 1209.06 L1476.85 1209.06 L1476.27 1209.06 L1475.68 1209.06 L1475.09 1209.06 L1474.51 1209.06 L1473.92 1209.06 L1473.33 1209.06 L1472.75 1209.06 L1472.16 1209.06 L1471.57 1209.06 L1470.99 1209.06 L1470.4 1209.06 L1469.82 1209.06 L1469.23 1209.06 L1468.64 1209.06 L1468.06 1209.06 L1467.47 1209.06 L1466.88 1209.06 L1466.3 1209.06 L1465.71 1209.06 L1465.12 1209.06 L1464.54 1209.06 L1463.95 1209.06 L1463.37 1209.06 L1462.78 1209.06 L1462.19 1209.06 L1461.61 1209.06 L1461.02 1209.06 L1460.43 1209.06 L1459.85 1209.06 L1459.26 1209.06 L1458.67 1209.06 L1458.09 1209.06 L1457.5 1209.06 L1456.91 1209.06 L1456.33 1209.06 L1455.74 1209.06 L1455.16 1209.06 L1454.57 1209.06 L1453.98 1209.06 L1453.4 1209.06 L1452.81 1209.06 L1452.22 1209.06 L1451.64 1209.06 L1451.05 1209.06 L1450.46 1209.06 L1449.88 1209.06 L1449.29 1209.06 L1448.7 1209.06 L1448.12 1209.06 L1447.53 1209.06 L1446.95 1209.06 L1446.36 1209.06 L1445.77 1209.06 L1445.19 1209.06 L1444.6 1209.06 L1444.01 1209.06 L1443.43 1209.06 L1442.84 1209.06 L1442.25 1209.06 L1441.67 1209.06 L1441.08 1209.06 L1440.5 1209.06 L1439.91 1209.06 L1439.32 1209.06 L1438.74 1209.06 L1438.15 1209.06 L1437.56 1209.06 L1436.98 1209.06 L1436.39 1209.06 L1435.8 1209.06 L1435.22 1209.06 L1434.63 1209.06 L1434.04 1209.06 L1433.46 1209.06 L1432.87 1209.06 L1432.29 1209.06 L1431.7 1209.06 L1431.11 1209.06 L1430.53 1209.06 L1429.94 1209.06 L1429.35 1209.06 L1428.77 1209.06 L1428.18 1209.06 L1427.59 1209.06 L1427.01 1209.06 L1426.42 1209.06 L1425.83 1209.06 L1425.25 1209.06 L1424.66 1209.06 L1424.08 1209.06 L1423.49 1209.06 L1422.9 1209.06 L1422.32 1209.06 L1421.73 1209.06 L1421.14 1209.06 L1420.56 1209.06 L1419.97 1209.06 L1419.38 1209.06 L1418.8 1209.06 L1418.21 1209.06 L1417.63 1209.06 L1417.04 1209.06 L1416.45 1209.06 L1415.87 1209.06 L1415.28 1209.06 L1414.69 1209.06 L1414.11 1209.06 L1413.52 1209.06 L1412.93 1209.06 L1412.35 1209.06 L1411.76 1209.06 L1411.17 1209.06 L1410.59 1209.06 L1410 1209.06 L1409.42 1209.06 L1408.83 1209.06 L1408.24 1209.06 L1407.66 1209.06 L1407.07 1209.06 L1406.48 1209.06 L1405.9 1209.06 L1405.31 1209.06 L1404.72 1209.06 L1404.14 1209.06 L1403.55 1209.06 L1402.96 1209.06 L1402.38 1209.06 L1401.79 1209.06 L1401.21 1209.06 L1400.62 1209.06 L1400.03 1209.06 L1399.45 1209.06 L1398.86 1209.06 L1398.27 1209.06 L1397.69 1209.06 L1397.1 1209.06 L1396.51 1209.06 L1395.93 1209.06 L1395.34 1209.06 L1394.75 1209.06 L1394.17 1209.06 L1393.58 1209.06 L1393 1209.06 L1392.41 1209.06 L1391.82 1209.06 L1391.24 1209.06 L1390.65 1209.06 L1390.06 1209.06 L1389.48 1209.06 L1388.89 1209.06 L1388.3 1209.06 L1387.72 1209.06 L1387.13 1209.06 L1386.55 1209.06 L1385.96 1209.06 L1385.37 1209.06 L1384.79 1209.06 L1384.2 1209.06 L1383.61 1209.06 L1383.03 1209.06 L1382.44 1209.06 L1381.85 1209.06 L1381.27 1209.06 L1380.68 1209.06 L1380.09 1209.06 L1379.51 1209.06 L1378.92 1209.06 L1378.34 1209.06 L1377.75 1209.06 L1377.16 1209.06 L1376.58 1209.06 L1375.99 1209.06 L1375.4 1209.06 L1374.82 1209.06 L1374.23 1209.06 L1373.64 1209.06 L1373.06 1209.06 L1372.47 1209.06 L1371.88 1209.06 L1371.3 1209.06 L1370.71 1209.06 L1370.13 1209.06 L1369.54 1209.06 L1368.95 1209.06 L1368.37 1209.06 L1367.78 1209.06 L1367.19 1209.06 L1366.61 1209.06 L1366.02 1209.06 L1365.43 1209.06 L1364.85 1209.06 L1364.26 1209.06 L1363.68 1209.06 L1363.09 1209.06 L1362.5 1209.06 L1361.92 1209.06 L1361.33 1209.06 L1360.74 1209.06 L1360.16 1209.06 L1359.57 1209.06 L1358.98 1209.06 L1358.4 1209.06 L1357.81 1209.06 L1357.22 1209.06 L1356.64 1209.06 L1356.05 1209.06 L1355.47 1209.06 L1354.88 1209.06 L1354.29 1209.06 L1353.71 1209.06 L1353.12 1209.06 L1352.53 1209.06 L1351.95 1209.06 L1351.36 1209.06 L1350.77 1209.06 L1350.19 1209.06 L1349.6 1209.06 L1349.01 1209.06 L1348.43 1209.06 L1347.84 1209.06 L1347.26 1209.06 L1346.67 1209.06 L1346.08 1209.06 L1345.5 1209.06 L1344.91 1209.06 L1344.32 1209.06 L1343.74 1209.06 L1343.15 1209.06 L1342.56 1209.06 L1341.98 1209.06 L1341.39 1209.06 L1340.8 1209.06 L1340.22 1209.06 L1339.63 1209.06 L1339.05 1209.06 L1338.46 1209.06 L1337.87 1209.06 L1337.29 1209.06 L1336.7 1209.06 L1336.11 1209.06 L1335.53 1209.06 L1334.94 1209.06 L1334.35 1209.06 L1333.77 1209.06 L1333.18 1209.06 L1332.6 1209.06 L1332.01 1209.06 L1331.42 1209.06 L1330.84 1209.06 L1330.25 1209.06 L1329.66 1209.06 L1329.08 1209.06 L1328.49 1209.06 L1327.9 1209.06 L1327.32 1209.06 L1326.73 1209.06 L1326.14 1209.06 L1325.56 1209.06 L1324.97 1209.06 L1324.39 1209.06 L1323.8 1209.06 L1323.21 1209.06 L1322.63 1209.06 L1322.04 1209.06 L1321.45 1209.06 L1320.87 1209.06 L1320.28 1209.06 L1319.69 1209.06 L1319.11 1209.06 L1318.52 1209.06 L1317.93 1209.06 L1317.35 1209.06 L1316.76 1209.06 L1316.18 1209.06 L1315.59 1209.06 L1315 1209.06 L1314.42 1209.06 L1313.83 1209.06 L1313.24 1209.06 L1312.66 1209.06 L1312.07 1209.06 L1311.48 1209.06 L1310.9 1209.06 L1310.31 1209.06 L1309.73 1209.06 L1309.14 1209.06 L1308.55 1209.06 L1307.97 1209.06 L1307.38 1209.06 L1306.79 1209.06 L1306.21 1209.06 L1305.62 1209.06 L1305.03 1209.06 L1304.45 1209.06 L1303.86 1209.06 L1303.27 1209.06 L1302.69 1209.06 L1302.1 1209.06 L1301.52 1209.06 L1300.93 1209.06 L1300.34 1209.06 L1299.76 1209.06 L1299.17 1209.06 L1298.58 1209.06 L1298 1209.06 L1297.41 1209.06 L1296.82 1209.06 L1296.24 1209.06 L1295.65 1209.06 L1295.06 1209.06 L1294.48 1209.06 L1293.89 1209.06 L1293.31 1209.06 L1292.72 1209.06 L1292.13 1209.06 L1291.55 1209.06 L1290.96 1209.06 L1290.37 1209.06 L1289.79 1209.06 L1289.2 1209.06 L1288.61 1209.06 L1288.03 1209.06 L1287.44 1209.06 L1286.86 1209.06 L1286.27 1209.06 L1285.68 1209.06 L1285.1 1209.06 L1284.51 1209.06 L1283.92 1209.06 L1283.34 1209.06 L1282.75 1209.06 L1282.16 1209.06 L1281.58 1209.06 L1280.99 1209.06 L1280.4 1209.06 L1279.82 1209.06 L1279.23 1209.06 L1278.65 1209.06 L1278.06 1209.06 L1277.47 1209.06 L1276.89 1209.06 L1276.3 1209.06 L1275.71 1209.06 L1275.13 1209.06 L1274.54 1209.06 L1273.95 1209.06 L1273.37 1209.06 L1272.78 1209.06 L1272.19 1209.06 L1271.61 1209.06 L1271.02 1209.06 L1270.44 1209.06 L1269.85 1209.06 L1269.26 1209.06 L1268.68 1209.06 L1268.09 1209.06 L1267.5 1209.06 L1266.92 1209.06 L1266.33 1209.06 L1265.74 1209.06 L1265.16 1209.06 L1264.57 1209.06 L1263.98 1209.06 L1263.4 1209.06 L1262.81 1209.06 L1262.23 1209.06 L1261.64 1209.06 L1261.05 1209.06 L1260.47 1209.06 L1259.88 1209.06 L1259.29 1209.06 L1258.71 1209.06 L1258.12 1209.06 L1257.53 1209.06 L1256.95 1209.06 L1256.36 1209.06 L1255.78 1209.06 L1255.19 1209.06 L1254.6 1209.06 L1254.02 1209.06 L1253.43 1209.06 L1252.84 1209.06 L1252.26 1209.06 L1251.67 1209.06 L1251.08 1209.06 L1250.5 1209.06 L1249.91 1209.06 L1249.32 1209.06 L1248.74 1209.06 L1248.15 1209.06 L1247.57 1209.06 L1246.98 1209.06 L1246.39 1209.06 L1245.81 1209.06 L1245.22 1209.06 L1244.63 1209.06 L1244.05 1209.06 L1243.46 1209.06 L1242.87 1209.06 L1242.29 1209.06 L1241.7 1209.06 L1241.11 1209.06 L1240.53 1209.06 L1239.94 1209.06 L1239.36 1209.06 L1238.77 1209.06 L1238.18 1209.06 L1237.6 1209.06 L1237.01 1209.06 L1236.42 1209.06 L1235.84 1209.06 L1235.25 1209.06 L1234.66 1209.06 L1234.08 1209.06 L1233.49 1209.06 L1232.91 1209.06 L1232.32 1209.06 L1231.73 1209.06 L1231.15 1209.06 L1230.56 1209.06 L1229.97 1209.06 L1229.39 1209.06 L1228.8 1209.06 L1228.21 1209.06 L1227.63 1209.06 L1227.04 1209.06 L1226.45 1209.06 L1225.87 1209.06 L1225.28 1209.06 L1224.7 1209.06 L1224.11 1209.06 L1223.52 1209.06 L1222.94 1209.06 L1222.35 1209.06 L1221.76 1209.06 L1221.18 1209.06 L1220.59 1209.06 L1220 1209.06 L1219.42 1209.06 L1218.83 1209.06 L1218.24 1209.06 L1217.66 1209.06 L1217.07 1209.06 L1216.49 1209.06 L1215.9 1209.06 L1215.31 1209.06 L1214.73 1209.06 L1214.14 1209.06 L1213.55 1209.06 L1212.97 1209.06 L1212.38 1209.06 L1211.79 1209.06 L1211.21 1209.06 L1210.62 1209.06 L1210.03 1209.06 L1209.45 1209.06 L1208.86 1209.06 L1208.28 1209.06 L1207.69 1209.06 L1207.1 1209.06 L1206.52 1209.06 L1205.93 1209.06 L1205.34 1209.06 L1204.76 1209.06 L1204.17 1209.06 L1203.58 1209.06 L1203 1209.06 L1202.41 1209.06 L1201.83 1209.06 L1201.24 1209.06 L1200.65 1209.06 L1200.07 1209.06 L1199.48 1209.06 L1198.89 1209.06 L1198.31 1209.06 L1197.72 1209.06 L1197.13 1209.06 L1196.55 1209.06 L1195.96 1209.06 L1195.37 1209.06 L1194.79 1209.06 L1194.2 1209.06 L1193.62 1209.06 L1193.03 1209.06 L1192.44 1209.06 L1191.86 1209.06 L1191.27 1209.06 L1190.68 1209.06 L1190.1 1209.06 L1189.51 1209.06 L1188.92 1209.06 L1188.34 1209.06 L1187.75 1209.06 L1187.16 1209.06 L1186.58 1209.06 L1185.99 1209.06 L1185.41 1209.06 L1184.82 1209.06 L1184.23 1209.06 L1183.65 1209.06 L1183.06 1209.06 L1182.47 1209.06 L1181.89 1209.06 L1181.3 1209.06 L1180.71 1209.06 L1180.13 1209.06 L1179.54 1209.06 L1178.96 1209.06 L1178.37 1209.06 L1177.78 1209.06 L1177.2 1209.06 L1176.61 1209.06 L1176.02 1209.06 L1175.44 1209.06 L1174.85 1209.06 L1174.26 1209.06 L1173.68 1209.06 L1173.09 1209.06 L1172.5 1209.06 L1171.92 1209.06 L1171.33 1209.06 L1170.75 1209.06 L1170.16 1209.06 L1169.57 1209.06 L1168.99 1209.06 L1168.4 1209.06 L1167.81 1209.06 L1167.23 1209.06 L1166.64 1209.06 L1166.05 1209.06 L1165.47 1209.06 L1164.88 1209.06 L1164.29 1209.06 L1163.71 1209.06 L1163.12 1209.06 L1162.54 1209.06 L1161.95 1209.06 L1161.36 1209.06 L1160.78 1209.06 L1160.19 1209.06 L1159.6 1209.06 L1159.02 1209.06 L1158.43 1209.06 L1157.84 1209.06 L1157.26 1209.06 L1156.67 1209.06 L1156.09 1209.06 L1155.5 1209.06 L1154.91 1209.06 L1154.33 1209.06 L1153.74 1209.06 L1153.15 1209.06 L1152.57 1209.06 L1151.98 1209.06 L1151.39 1209.06 L1150.81 1209.06 L1150.22 1209.06 L1149.63 1209.06 L1149.05 1209.06 L1148.46 1209.06 L1147.88 1209.06 L1147.29 1209.06 L1146.7 1209.06 L1146.12 1209.06 L1145.53 1209.06 L1144.94 1209.06 L1144.36 1209.06 L1143.77 1209.06 L1143.18 1209.06 L1142.6 1209.06 L1142.01 1209.06 L1141.42 1209.06 L1140.84 1209.06 L1140.25 1209.06 L1139.67 1209.06 L1139.08 1209.06 L1138.49 1209.06 L1137.91 1209.06 L1137.32 1209.06 L1136.73 1209.06 L1136.15 1209.06 L1135.56 1209.06 L1134.97 1209.06 L1134.39 1209.06 L1133.8 1209.06 L1133.21 1209.06 L1132.63 1209.06 L1132.04 1209.06 L1131.46 1209.06 L1130.87 1209.06 L1130.28 1209.06 L1129.7 1209.06 L1129.11 1209.06 L1128.52 1209.06 L1127.94 1209.06 L1127.35 1209.06 L1126.76 1209.06 L1126.18 1209.06 L1125.59 1209.06 L1125.01 1209.06 L1124.42 1209.06 L1123.83 1209.06 L1123.25 1209.06 L1122.66 1209.06 L1122.07 1209.06 L1121.49 1209.06 L1120.9 1209.06 L1120.31 1209.06 L1119.73 1209.06 L1119.14 1209.06 L1118.55 1209.06 L1117.97 1209.06 L1117.38 1209.06 L1116.8 1209.06 L1116.21 1209.06 L1115.62 1209.06 L1115.04 1209.06 L1114.45 1209.06 L1113.86 1209.06 L1113.28 1209.06 L1112.69 1209.06 L1112.1 1209.06 L1111.52 1209.06 L1110.93 1209.06 L1110.34 1209.06 L1109.76 1209.06 L1109.17 1209.06 L1108.59 1209.06 L1108 1209.06 L1107.41 1209.06 L1106.83 1209.06 L1106.24 1209.06 L1105.65 1209.06 L1105.07 1209.06 L1104.48 1209.06 L1103.89 1209.06 L1103.31 1209.06 L1102.72 1209.06 L1102.14 1209.06 L1101.55 1209.06 L1100.96 1209.06 L1100.38 1209.06 L1099.79 1209.06 L1099.2 1209.06 L1098.62 1209.06 L1098.03 1209.06 L1097.44 1209.06 L1096.86 1209.06 L1096.27 1209.06 L1095.68 1209.06 L1095.1 1209.06 L1094.51 1209.06 L1093.93 1209.06 L1093.34 1209.06 L1092.75 1209.06 L1092.17 1209.06 L1091.58 1209.06 L1090.99 1209.06 L1090.41 1209.06 L1089.82 1209.06 L1089.23 1209.06 L1088.65 1209.06 L1088.06 1209.06 L1087.47 1209.06 L1086.89 1209.06 L1086.3 1209.06 L1085.72 1209.06 L1085.13 1209.06 L1084.54 1209.06 L1083.96 1209.06 L1083.37 1209.06 L1082.78 1209.06 L1082.2 1209.06 L1081.61 1209.06 L1081.02 1209.06 L1080.44 1209.06 L1079.85 1209.06 L1079.26 1209.06 L1078.68 1209.06 L1078.09 1209.06 L1077.51 1209.06 L1076.92 1209.06 L1076.33 1209.06 L1075.75 1209.06 L1075.16 1209.06 L1074.57 1209.06 L1073.99 1209.06 L1073.4 1209.06 L1072.81 1209.06 L1072.23 1209.06 L1071.64 1209.06 L1071.06 1209.06 L1070.47 1209.06 L1069.88 1209.06 L1069.3 1209.06 L1068.71 1209.06 L1068.12 1209.06 L1067.54 1209.06 L1066.95 1209.06 L1066.36 1209.06 L1065.78 1209.06 L1065.19 1209.06 L1064.6 1209.06 L1064.02 1209.06 L1063.43 1209.06 L1062.85 1209.06 L1062.26 1209.06 L1061.67 1209.06 L1061.09 1209.06 L1060.5 1209.06 L1059.91 1209.06 L1059.33 1209.06 L1058.74 1209.06 L1058.15 1209.06 L1057.57 1209.06 L1056.98 1209.06 L1056.39 1209.06 L1055.81 1209.06 L1055.22 1209.06 L1054.64 1209.06 L1054.05 1209.06 L1053.46 1209.06 L1052.88 1209.06 L1052.29 1209.06 L1051.7 1209.06 L1051.12 1209.06 L1050.53 1209.06 L1049.94 1209.06 L1049.36 1209.06 L1048.77 1209.06 L1048.19 1209.06 L1047.6 1209.06 L1047.01 1209.06 L1046.43 1209.06 L1045.84 1209.06 L1045.25 1209.06 L1044.67 1209.06 L1044.08 1209.06 L1043.49 1209.06 L1042.91 1209.06 L1042.32 1209.06 L1041.73 1209.06 L1041.15 1209.06 L1040.56 1209.06 L1039.98 1209.06 L1039.39 1209.06 L1038.8 1209.06 L1038.22 1209.06 L1037.63 1209.06 L1037.04 1209.06 L1036.46 1209.06 L1035.87 1209.06 L1035.28 1209.06 L1034.7 1209.06 L1034.11 1209.06 L1033.52 1209.06 L1032.94 1209.06 L1032.35 1209.06 L1031.77 1209.06 L1031.18 1209.06 L1030.59 1209.06 L1030.01 1209.06 L1029.42 1209.06 L1028.83 1209.06 L1028.25 1209.06 L1027.66 1209.06 L1027.07 1209.06 L1026.49 1209.06 L1025.9 1209.06 L1025.32 1209.06 L1024.73 1209.06 L1024.14 1209.06 L1023.56 1209.06 L1022.97 1209.06 L1022.38 1209.06 L1021.8 1209.06 L1021.21 1209.06 L1020.62 1209.06 L1020.04 1209.06 L1019.45 1209.06 L1018.86 1209.06 L1018.28 1209.06 L1017.69 1209.06 L1017.11 1209.06 L1016.52 1209.06 L1015.93 1209.06 L1015.35 1209.06 L1014.76 1209.06 L1014.17 1209.06 L1013.59 1209.06 L1013 1209.06 L1012.41 1209.06 L1011.83 1209.06 L1011.24 1209.06 L1010.65 1209.06 L1010.07 1209.06 L1009.48 1209.06 L1008.9 1209.06 L1008.31 1209.06 L1007.72 1209.06 L1007.14 1209.06 L1006.55 1209.06 L1005.96 1209.06 L1005.38 1209.06 L1004.79 1209.06 L1004.2 1209.06 L1003.62 1209.06 L1003.03 1209.06 L1002.44 1209.06 L1001.86 1209.06 L1001.27 1209.06 L1000.69 1209.06 L1000.1 1209.06 L999.513 1209.06 L998.926 1209.06 L998.34 1209.06 L997.754 1209.06 L997.167 1209.06 L996.581 1209.06 L995.994 1209.06 L995.408 1209.06 L994.822 1209.06 L994.235 1209.06 L993.649 1209.06 L993.062 1209.06 L992.476 1209.06 L991.889 1209.06 L991.303 1209.06 L990.717 1209.06 L990.13 1209.06 L989.544 1209.06 L988.957 1209.06 L988.371 1209.06 L987.785 1209.06 L987.198 1209.06 L986.612 1209.06 L986.025 1209.06  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.15 986.612,1209.15 987.198,1209.15 987.785,1209.15 988.371,1209.15 988.957,1209.15 989.544,1209.15 990.13,1209.15 990.717,1209.15 991.303,1209.15 991.889,1209.15 992.476,1209.15 993.062,1209.15 993.649,1209.15 994.235,1209.15 994.822,1209.15 995.408,1209.15 995.994,1209.15 996.581,1209.15 997.167,1209.15 997.754,1209.15 998.34,1209.15 998.926,1209.15 999.513,1209.15 1000.1,1209.15 1000.69,1209.15 1001.27,1209.15 1001.86,1209.15 1002.44,1209.15 1003.03,1209.15 1003.62,1209.15 1004.2,1209.15 1004.79,1209.15 1005.38,1209.15 1005.96,1209.15 1006.55,1209.15 1007.14,1209.15 1007.72,1209.15 1008.31,1209.15 1008.9,1209.15 1009.48,1209.15 1010.07,1209.15 1010.65,1209.15 1011.24,1209.15 1011.83,1209.15 1012.41,1209.15 1013,1209.15 1013.59,1209.15 1014.17,1209.15 1014.76,1209.15 1015.35,1209.15 1015.93,1209.15 1016.52,1209.15 1017.11,1209.15 1017.69,1209.15 1018.28,1209.15 1018.86,1209.15 1019.45,1209.15 1020.04,1209.15 1020.62,1209.15 1021.21,1209.15 1021.8,1209.15 1022.38,1209.15 1022.97,1209.15 1023.56,1209.15 1024.14,1209.15 1024.73,1209.15 1025.32,1209.15 1025.9,1209.15 1026.49,1209.15 1027.07,1209.15 1027.66,1209.15 1028.25,1209.15 1028.83,1209.15 1029.42,1209.15 1030.01,1209.15 1030.59,1209.15 1031.18,1209.15 1031.77,1209.15 1032.35,1209.15 1032.94,1209.15 1033.52,1209.15 1034.11,1209.15 1034.7,1209.15 1035.28,1209.15 1035.87,1209.15 1036.46,1209.15 1037.04,1209.15 1037.63,1209.15 1038.22,1209.15 1038.8,1209.15 1039.39,1209.15 1039.98,1209.15 1040.56,1209.15 1041.15,1209.15 1041.73,1209.15 1042.32,1209.15 1042.91,1209.15 1043.49,1209.15 1044.08,1209.15 1044.67,1209.15 1045.25,1209.15 1045.84,1209.15 1046.43,1209.15 1047.01,1209.15 1047.6,1209.15 1048.19,1209.15 1048.77,1209.15 1049.36,1209.15 1049.94,1209.15 1050.53,1209.15 1051.12,1209.15 1051.7,1209.15 1052.29,1209.15 1052.88,1209.15 1053.46,1209.15 1054.05,1209.15 1054.64,1209.15 1055.22,1209.15 1055.81,1209.15 1056.39,1209.15 1056.98,1209.15 1057.57,1209.15 1058.15,1209.15 1058.74,1209.15 1059.33,1209.15 1059.91,1209.15 1060.5,1209.15 1061.09,1209.15 1061.67,1209.15 1062.26,1209.15 1062.85,1209.15 1063.43,1209.15 1064.02,1209.15 1064.6,1209.15 1065.19,1209.15 1065.78,1209.15 1066.36,1209.15 1066.95,1209.15 1067.54,1209.15 1068.12,1209.15 1068.71,1209.15 1069.3,1209.15 1069.88,1209.15 1070.47,1209.15 1071.06,1209.15 1071.64,1209.15 1072.23,1209.15 1072.81,1209.15 1073.4,1209.15 1073.99,1209.15 1074.57,1209.15 1075.16,1209.15 1075.75,1209.15 1076.33,1209.15 1076.92,1209.15 1077.51,1209.15 1078.09,1209.15 1078.68,1209.15 1079.26,1209.15 1079.85,1209.15 1080.44,1209.15 1081.02,1209.15 1081.61,1209.15 1082.2,1209.15 1082.78,1209.15 1083.37,1209.15 1083.96,1209.15 1084.54,1209.15 1085.13,1209.15 1085.72,1209.15 1086.3,1209.15 1086.89,1209.15 1087.47,1209.15 1088.06,1209.15 1088.65,1209.15 1089.23,1209.15 1089.82,1209.15 1090.41,1209.15 1090.99,1209.15 1091.58,1209.15 1092.17,1209.15 1092.75,1209.15 1093.34,1209.15 1093.93,1209.15 1094.51,1209.15 1095.1,1209.15 1095.68,1209.15 1096.27,1209.15 1096.86,1209.15 1097.44,1209.15 1098.03,1209.15 1098.62,1209.15 1099.2,1209.15 1099.79,1209.15 1100.38,1209.15 1100.96,1209.15 1101.55,1209.15 1102.14,1209.15 1102.72,1209.15 1103.31,1209.15 1103.89,1209.15 1104.48,1209.15 1105.07,1209.15 1105.65,1209.15 1106.24,1209.15 1106.83,1209.15 1107.41,1209.15 1108,1209.15 1108.59,1209.15 1109.17,1209.15 1109.76,1209.15 1110.34,1209.15 1110.93,1209.15 1111.52,1209.15 1112.1,1209.15 1112.69,1209.15 1113.28,1209.15 1113.86,1209.15 1114.45,1209.15 1115.04,1209.15 1115.62,1209.15 1116.21,1209.15 1116.8,1209.15 1117.38,1209.15 1117.97,1209.15 1118.55,1209.15 1119.14,1209.15 1119.73,1209.15 1120.31,1209.15 1120.9,1209.15 1121.49,1209.15 1122.07,1209.15 1122.66,1209.15 1123.25,1209.15 1123.83,1209.15 1124.42,1209.15 1125.01,1209.15 1125.59,1209.15 1126.18,1209.15 1126.76,1209.15 1127.35,1209.15 1127.94,1209.15 1128.52,1209.15 1129.11,1209.15 1129.7,1209.15 1130.28,1209.15 1130.87,1209.15 1131.46,1209.15 1132.04,1209.15 1132.63,1209.15 1133.21,1209.15 1133.8,1209.15 1134.39,1209.15 1134.97,1209.15 1135.56,1209.15 1136.15,1209.15 1136.73,1209.15 1137.32,1209.15 1137.91,1209.15 1138.49,1209.15 1139.08,1209.15 1139.67,1209.15 1140.25,1209.15 1140.84,1209.15 1141.42,1209.15 1142.01,1209.15 1142.6,1209.15 1143.18,1209.15 1143.77,1209.15 1144.36,1209.15 1144.94,1209.15 1145.53,1209.15 1146.12,1209.15 1146.7,1209.15 1147.29,1209.15 1147.88,1209.15 1148.46,1209.15 1149.05,1209.15 1149.63,1209.15 1150.22,1209.15 1150.81,1209.15 1151.39,1209.15 1151.98,1209.15 1152.57,1209.15 1153.15,1209.15 1153.74,1209.15 1154.33,1209.15 1154.91,1209.15 1155.5,1209.15 1156.09,1209.15 1156.67,1209.15 1157.26,1209.15 1157.84,1209.15 1158.43,1209.15 1159.02,1209.15 1159.6,1209.15 1160.19,1209.15 1160.78,1209.15 1161.36,1209.15 1161.95,1209.15 1162.54,1209.15 1163.12,1209.15 1163.71,1209.15 1164.29,1209.15 1164.88,1209.15 1165.47,1209.15 1166.05,1209.15 1166.64,1209.15 1167.23,1209.15 1167.81,1209.15 1168.4,1209.15 1168.99,1209.15 1169.57,1209.15 1170.16,1209.15 1170.75,1209.15 1171.33,1209.15 1171.92,1209.15 1172.5,1209.15 1173.09,1209.15 1173.68,1209.15 1174.26,1209.15 1174.85,1209.15 1175.44,1209.15 1176.02,1209.15 1176.61,1209.15 1177.2,1209.15 1177.78,1209.15 1178.37,1209.15 1178.96,1209.15 1179.54,1209.15 1180.13,1209.15 1180.71,1209.15 1181.3,1209.15 1181.89,1209.15 1182.47,1209.15 1183.06,1209.15 1183.65,1209.15 1184.23,1209.15 1184.82,1209.15 1185.41,1209.15 1185.99,1209.15 1186.58,1209.15 1187.16,1209.15 1187.75,1209.15 1188.34,1209.15 1188.92,1209.15 1189.51,1209.15 1190.1,1209.15 1190.68,1209.15 1191.27,1209.15 1191.86,1209.15 1192.44,1209.15 1193.03,1209.15 1193.62,1209.15 1194.2,1209.15 1194.79,1209.15 1195.37,1209.15 1195.96,1209.15 1196.55,1209.15 1197.13,1209.15 1197.72,1209.15 1198.31,1209.15 1198.89,1209.15 1199.48,1209.15 1200.07,1209.15 1200.65,1209.15 1201.24,1209.15 1201.83,1209.15 1202.41,1209.15 1203,1209.15 1203.58,1209.15 1204.17,1209.15 1204.76,1209.15 1205.34,1209.15 1205.93,1209.15 1206.52,1209.15 1207.1,1209.15 1207.69,1209.15 1208.28,1209.15 1208.86,1209.15 1209.45,1209.15 1210.03,1209.15 1210.62,1209.15 1211.21,1209.15 1211.79,1209.15 1212.38,1209.15 1212.97,1209.15 1213.55,1209.15 1214.14,1209.15 1214.73,1209.15 1215.31,1209.15 1215.9,1209.15 1216.49,1209.15 1217.07,1209.15 1217.66,1209.15 1218.24,1209.15 1218.83,1209.15 1219.42,1209.15 1220,1209.15 1220.59,1209.15 1221.18,1209.15 1221.76,1209.15 1222.35,1209.15 1222.94,1209.15 1223.52,1209.15 1224.11,1209.15 1224.7,1209.15 1225.28,1209.15 1225.87,1209.15 1226.45,1209.15 1227.04,1209.15 1227.63,1209.15 1228.21,1209.15 1228.8,1209.15 1229.39,1209.15 1229.97,1209.15 1230.56,1209.15 1231.15,1209.15 1231.73,1209.15 1232.32,1209.15 1232.91,1209.15 1233.49,1209.15 1234.08,1209.15 1234.66,1209.15 1235.25,1209.15 1235.84,1209.15 1236.42,1209.15 1237.01,1209.15 1237.6,1209.15 1238.18,1209.15 1238.77,1209.15 1239.36,1209.15 1239.94,1209.15 1240.53,1209.15 1241.11,1209.15 1241.7,1209.15 1242.29,1209.15 1242.87,1209.15 1243.46,1209.15 1244.05,1209.15 1244.63,1209.15 1245.22,1209.15 1245.81,1209.15 1246.39,1209.15 1246.98,1209.15 1247.57,1209.15 1248.15,1209.15 1248.74,1209.15 1249.32,1209.15 1249.91,1209.15 1250.5,1209.15 1251.08,1209.15 1251.67,1209.15 1252.26,1209.15 1252.84,1209.15 1253.43,1209.15 1254.02,1209.15 1254.6,1209.15 1255.19,1209.15 1255.78,1209.15 1256.36,1209.15 1256.95,1209.15 1257.53,1209.15 1258.12,1209.15 1258.71,1209.15 1259.29,1209.15 1259.88,1209.15 1260.47,1209.15 1261.05,1209.15 1261.64,1209.15 1262.23,1209.15 1262.81,1209.15 1263.4,1209.15 1263.98,1209.15 1264.57,1209.15 1265.16,1209.15 1265.74,1209.15 1266.33,1209.15 1266.92,1209.15 1267.5,1209.15 1268.09,1209.15 1268.68,1209.15 1269.26,1209.15 1269.85,1209.15 1270.44,1209.15 1271.02,1209.15 1271.61,1209.15 1272.19,1209.15 1272.78,1209.15 1273.37,1209.15 1273.95,1209.15 1274.54,1209.15 1275.13,1209.15 1275.71,1209.15 1276.3,1209.15 1276.89,1209.15 1277.47,1209.15 1278.06,1209.15 1278.65,1209.15 1279.23,1209.15 1279.82,1209.15 1280.4,1209.15 1280.99,1209.15 1281.58,1209.15 1282.16,1209.15 1282.75,1209.15 1283.34,1209.15 1283.92,1209.15 1284.51,1209.15 1285.1,1209.15 1285.68,1209.15 1286.27,1209.15 1286.86,1209.15 1287.44,1209.15 1288.03,1209.15 1288.61,1209.15 1289.2,1209.15 1289.79,1209.15 1290.37,1209.15 1290.96,1209.15 1291.55,1209.15 1292.13,1209.15 1292.72,1209.15 1293.31,1209.15 1293.89,1209.15 1294.48,1209.15 1295.06,1209.15 1295.65,1209.15 1296.24,1209.15 1296.82,1209.15 1297.41,1209.15 1298,1209.15 1298.58,1209.15 1299.17,1209.15 1299.76,1209.15 1300.34,1209.15 1300.93,1209.15 1301.52,1209.15 1302.1,1209.15 1302.69,1209.15 1303.27,1209.15 1303.86,1209.15 1304.45,1209.15 1305.03,1209.15 1305.62,1209.15 1306.21,1209.15 1306.79,1209.15 1307.38,1209.15 1307.97,1209.15 1308.55,1209.15 1309.14,1209.15 1309.73,1209.15 1310.31,1209.15 1310.9,1209.15 1311.48,1209.15 1312.07,1209.15 1312.66,1209.15 1313.24,1209.15 1313.83,1209.15 1314.42,1209.15 1315,1209.15 1315.59,1209.15 1316.18,1209.15 1316.76,1209.15 1317.35,1209.15 1317.93,1209.15 1318.52,1209.15 1319.11,1209.15 1319.69,1209.15 1320.28,1209.15 1320.87,1209.15 1321.45,1209.15 1322.04,1209.15 1322.63,1209.15 1323.21,1209.15 1323.8,1209.15 1324.39,1209.15 1324.97,1209.15 1325.56,1209.15 1326.14,1209.15 1326.73,1209.15 1327.32,1209.15 1327.9,1209.15 1328.49,1209.15 1329.08,1209.15 1329.66,1209.15 1330.25,1209.15 1330.84,1209.15 1331.42,1209.15 1332.01,1209.15 1332.6,1209.15 1333.18,1209.15 1333.77,1209.15 1334.35,1209.15 1334.94,1209.15 1335.53,1209.15 1336.11,1209.15 1336.7,1209.15 1337.29,1209.15 1337.87,1209.15 1338.46,1209.15 1339.05,1209.15 1339.63,1209.15 1340.22,1209.15 1340.8,1209.15 1341.39,1209.15 1341.98,1209.15 1342.56,1209.15 1343.15,1209.15 1343.74,1209.15 1344.32,1209.15 1344.91,1209.15 1345.5,1209.15 1346.08,1209.15 1346.67,1209.15 1347.26,1209.15 1347.84,1209.15 1348.43,1209.15 1349.01,1209.15 1349.6,1209.15 1350.19,1209.15 1350.77,1209.15 1351.36,1209.15 1351.95,1209.15 1352.53,1209.15 1353.12,1209.15 1353.71,1209.15 1354.29,1209.15 1354.88,1209.15 1355.47,1209.15 1356.05,1209.15 1356.64,1209.15 1357.22,1209.15 1357.81,1209.15 1358.4,1209.15 1358.98,1209.15 1359.57,1209.15 1360.16,1209.15 1360.74,1209.15 1361.33,1209.15 1361.92,1209.15 1362.5,1209.15 1363.09,1209.15 1363.68,1209.15 1364.26,1209.15 1364.85,1209.15 1365.43,1209.15 1366.02,1209.15 1366.61,1209.15 1367.19,1209.15 1367.78,1209.15 1368.37,1209.15 1368.95,1209.15 1369.54,1209.15 1370.13,1209.15 1370.71,1209.15 1371.3,1209.15 1371.88,1209.15 1372.47,1209.15 1373.06,1209.15 1373.64,1209.15 1374.23,1209.15 1374.82,1209.15 1375.4,1209.15 1375.99,1209.15 1376.58,1209.15 1377.16,1209.15 1377.75,1209.15 1378.34,1209.15 1378.92,1209.15 1379.51,1209.15 1380.09,1209.15 1380.68,1209.15 1381.27,1209.15 1381.85,1209.15 1382.44,1209.15 1383.03,1209.15 1383.61,1209.15 1384.2,1209.15 1384.79,1209.15 1385.37,1209.15 1385.96,1209.15 1386.55,1209.15 1387.13,1209.15 1387.72,1209.15 1388.3,1209.15 1388.89,1209.15 1389.48,1209.15 1390.06,1209.15 1390.65,1209.15 1391.24,1209.15 1391.82,1209.15 1392.41,1209.15 1393,1209.15 1393.58,1209.15 1394.17,1209.15 1394.75,1209.15 1395.34,1209.15 1395.93,1209.15 1396.51,1209.15 1397.1,1209.15 1397.69,1209.15 1398.27,1209.15 1398.86,1209.15 1399.45,1209.15 1400.03,1209.15 1400.62,1209.15 1401.21,1209.15 1401.79,1209.15 1402.38,1209.15 1402.96,1209.15 1403.55,1209.15 1404.14,1209.15 1404.72,1209.15 1405.31,1209.15 1405.9,1209.15 1406.48,1209.15 1407.07,1209.15 1407.66,1209.15 1408.24,1209.15 1408.83,1209.15 1409.42,1209.15 1410,1209.15 1410.59,1209.15 1411.17,1209.15 1411.76,1209.15 1412.35,1209.15 1412.93,1209.15 1413.52,1209.15 1414.11,1209.15 1414.69,1209.15 1415.28,1209.15 1415.87,1209.15 1416.45,1209.15 1417.04,1209.15 1417.63,1209.15 1418.21,1209.15 1418.8,1209.15 1419.38,1209.15 1419.97,1209.15 1420.56,1209.15 1421.14,1209.15 1421.73,1209.15 1422.32,1209.15 1422.9,1209.15 1423.49,1209.15 1424.08,1209.15 1424.66,1209.15 1425.25,1209.15 1425.83,1209.15 1426.42,1209.15 1427.01,1209.15 1427.59,1209.15 1428.18,1209.15 1428.77,1209.15 1429.35,1209.15 1429.94,1209.15 1430.53,1209.15 1431.11,1209.15 1431.7,1209.15 1432.29,1209.15 1432.87,1209.15 1433.46,1209.15 1434.04,1209.15 1434.63,1209.15 1435.22,1209.15 1435.8,1209.15 1436.39,1209.15 1436.98,1209.15 1437.56,1209.15 1438.15,1209.15 1438.74,1209.15 1439.32,1209.15 1439.91,1209.15 1440.5,1209.15 1441.08,1209.15 1441.67,1209.15 1442.25,1209.15 1442.84,1209.15 1443.43,1209.15 1444.01,1209.15 1444.6,1209.15 1445.19,1209.15 1445.77,1209.15 1446.36,1209.15 1446.95,1209.15 1447.53,1209.15 1448.12,1209.15 1448.7,1209.15 1449.29,1209.15 1449.88,1209.15 1450.46,1209.15 1451.05,1209.15 1451.64,1209.15 1452.22,1209.15 1452.81,1209.15 1453.4,1209.15 1453.98,1209.15 1454.57,1209.15 1455.16,1209.15 1455.74,1209.15 1456.33,1209.15 1456.91,1209.15 1457.5,1209.15 1458.09,1209.15 1458.67,1209.15 1459.26,1209.15 1459.85,1209.15 1460.43,1209.15 1461.02,1209.15 1461.61,1209.15 1462.19,1209.15 1462.78,1209.15 1463.37,1209.15 1463.95,1209.15 1464.54,1209.15 1465.12,1209.15 1465.71,1209.15 1466.3,1209.15 1466.88,1209.15 1467.47,1209.15 1468.06,1209.15 1468.64,1209.15 1469.23,1209.15 1469.82,1209.15 1470.4,1209.15 1470.99,1209.15 1471.57,1209.15 1472.16,1209.15 1472.75,1209.15 1473.33,1209.15 1473.92,1209.15 1474.51,1209.15 1475.09,1209.15 1475.68,1209.15 1476.27,1209.15 1476.85,1209.15 1477.44,1209.15 1478.03,1209.15 1478.61,1209.15 1479.2,1209.15 1479.78,1209.15 1480.37,1209.15 1480.96,1209.15 1481.54,1209.15 1482.13,1209.15 1482.72,1209.15 1483.3,1209.15 1483.89,1209.15 1484.48,1209.15 1485.06,1209.15 1485.65,1209.15 1486.24,1209.15 1486.82,1209.15 1487.41,1209.15 1487.99,1209.15 1488.58,1209.15 1489.17,1209.15 1489.75,1209.15 1490.34,1209.15 1490.93,1209.15 1491.51,1209.15 1492.1,1209.15 1492.69,1209.15 1493.27,1209.15 1493.86,1209.15 1494.45,1209.15 1495.03,1209.15 1495.62,1209.15 1496.2,1209.15 1496.79,1209.15 1497.38,1209.15 1497.96,1209.15 1498.55,1209.15 1499.14,1209.15 1499.72,1209.15 1500.31,1209.15 1500.9,1209.15 1501.48,1209.15 1502.07,1209.15 1502.65,1209.15 1503.24,1209.15 1503.83,1209.15 1504.41,1209.15 1505,1209.15 1505.59,1209.15 1506.17,1209.15 1506.76,1209.15 1507.35,1209.15 1507.93,1209.15 1508.52,1209.15 1509.11,1209.15 1509.69,1209.15 1510.28,1209.15 1510.86,1209.15 1511.45,1209.15 1512.04,1209.15 1512.62,1209.15 1513.21,1209.15 1513.8,1209.15 1514.38,1209.15 1514.97,1209.15 1515.56,1209.15 1516.14,1209.15 1516.73,1209.15 1517.32,1209.15 1517.9,1209.15 1518.49,1209.15 1519.07,1209.15 1519.66,1209.15 1520.25,1209.15 1520.83,1209.15 1521.42,1209.15 1522.01,1209.15 1522.59,1209.15 1523.18,1209.15 1523.77,1209.15 1524.35,1209.15 1524.94,1209.15 1525.52,1209.15 1526.11,1209.15 1526.7,1209.15 1527.28,1209.15 1527.87,1209.15 1528.46,1209.15 1529.04,1209.15 1529.63,1209.15 1530.22,1209.15 1530.8,1209.15 1531.39,1209.15 1531.98,1209.15 1532.56,1209.15 1533.15,1209.15 1533.73,1209.15 1534.32,1209.15 1534.91,1209.15 1535.49,1209.15 1536.08,1209.15 1536.67,1209.15 1537.25,1209.15 1537.84,1209.15 1538.43,1209.15 1539.01,1209.15 1539.6,1209.15 1540.19,1209.15 1540.77,1209.15 1541.36,1209.15 1541.94,1209.15 1542.53,1209.15 1543.12,1209.15 1543.7,1209.15 1544.29,1209.15 1544.88,1209.15 1545.46,1209.15 1546.05,1209.15 1546.64,1209.15 1547.22,1209.15 1547.81,1209.15 1548.4,1209.15 1548.98,1209.15 1549.57,1209.15 1550.15,1209.15 1550.74,1209.15 1551.33,1209.15 1551.91,1209.15 1552.5,1209.15 1553.09,1209.15 1553.67,1209.15 1554.26,1209.15 1554.85,1209.15 1555.43,1209.15 1556.02,1209.15 1556.6,1209.15 1557.19,1209.15 1557.78,1209.15 1558.36,1209.15 1558.95,1209.15 1559.54,1209.15 1560.12,1209.15 1560.71,1209.15 1561.3,1209.15 1561.88,1209.15 1562.47,1209.15 1563.06,1209.15 1563.64,1209.15 1564.23,1209.15 1564.81,1209.15 1565.4,1209.15 1565.99,1209.15 1566.57,1209.15 1567.16,1209.15 1567.75,1209.15 1568.33,1209.15 1568.92,1209.15 1569.51,1209.15 1570.09,1209.15 1570.68,1209.15 1571.27,1209.15 1571.85,1209.15 1572.44,1209.15 1573.02,1209.15 1573.61,1209.15 1574.2,1209.15 1574.78,1209.15 1575.37,1209.15 1575.96,1209.15 1576.54,1209.15 1577.13,1209.15 1577.72,1209.15 1578.3,1209.15 1578.89,1209.15 1579.47,1209.15 1580.06,1209.15 1580.65,1209.15 1581.23,1209.15 1581.82,1209.15 1582.41,1209.15 1582.99,1209.15 1583.58,1209.15 1584.17,1209.15 1584.75,1209.15 1585.34,1209.15 1585.93,1209.15 1586.51,1209.15 1587.1,1209.15 1587.68,1209.15 1588.27,1209.15 1588.86,1209.15 1589.44,1209.15 1590.03,1209.15 1590.62,1209.15 1591.2,1209.15 1591.79,1209.15 1592.38,1209.15 1592.96,1209.15 1593.55,1209.15 1594.14,1209.15 1594.72,1209.15 1595.31,1209.15 1595.89,1209.15 1596.48,1209.15 1597.07,1209.15 1597.65,1209.15 1598.24,1209.15 1598.83,1209.15 1599.41,1209.15 1600,1209.15 1600.59,1209.15 1601.17,1209.15 1601.76,1209.15 1602.34,1209.15 1602.93,1209.15 1603.52,1209.15 1604.1,1209.15 1604.69,1209.15 1605.28,1209.15 1605.86,1209.15 1606.45,1209.15 1607.04,1209.15 1607.62,1209.15 1608.21,1209.15 1608.8,1209.15 1609.38,1209.15 1609.97,1209.15 1610.55,1209.15 1611.14,1209.15 1611.73,1209.15 1612.31,1209.15 1612.9,1209.15 1613.49,1209.15 1614.07,1209.15 1614.66,1209.15 1615.25,1209.15 1615.83,1209.15 1616.42,1209.15 1617.01,1209.15 1617.59,1209.15 1618.18,1209.15 1618.76,1209.15 1619.35,1209.15 1619.94,1209.15 1620.52,1209.15 1621.11,1209.15 1621.7,1209.15 1622.28,1209.15 1622.87,1209.15 1623.46,1209.15 1624.04,1209.15 1624.63,1209.15 1625.22,1209.15 1625.8,1209.15 1626.39,1209.15 1626.97,1209.15 1627.56,1209.15 1628.15,1209.15 1628.73,1209.15 1629.32,1209.15 1629.91,1209.15 1630.49,1209.15 1631.08,1209.15 1631.67,1209.15 1632.25,1209.15 1632.84,1209.15 1633.42,1209.15 1634.01,1209.15 1634.6,1209.15 1635.18,1209.15 1635.77,1209.15 1636.36,1209.15 1636.94,1209.15 1637.53,1209.15 1638.12,1209.15 1638.7,1209.15 1639.29,1209.15 1639.88,1209.15 1640.46,1209.15 1641.05,1209.15 1641.63,1209.15 1642.22,1209.15 1642.81,1209.15 1643.39,1209.15 1643.98,1209.15 1644.57,1209.15 1645.15,1209.15 1645.74,1209.15 1646.33,1209.15 1646.91,1209.15 1647.5,1209.15 1648.09,1209.15 1648.67,1209.15 1649.26,1209.15 1649.84,1209.15 1650.43,1209.15 1651.02,1209.15 1651.6,1209.15 1652.19,1209.15 1652.78,1209.15 1653.36,1209.15 1653.95,1209.15 1654.54,1209.15 1655.12,1209.15 1655.71,1209.15 1656.29,1209.15 1656.88,1209.15 1657.47,1209.15 1658.05,1209.15 1658.64,1209.15 1659.23,1209.15 1659.81,1209.15 1660.4,1209.15 1660.99,1209.15 1661.57,1209.15 1662.16,1209.15 1662.75,1209.15 1663.33,1209.15 1663.92,1209.15 1664.5,1209.15 1665.09,1209.15 1665.68,1209.15 1666.26,1209.15 1666.85,1209.15 1667.44,1209.15 1668.02,1209.15 1668.61,1209.15 1669.2,1209.15 1669.78,1209.15 1670.37,1209.15 1670.96,1209.15 1671.54,1209.15 1672.13,1209.15 1672.71,1209.15 1673.3,1209.15 1673.89,1209.15 1674.47,1209.15 1675.06,1209.15 1675.65,1209.15 1676.23,1209.15 1676.82,1209.15 1677.41,1209.15 1677.99,1209.15 1678.58,1209.15 1679.17,1209.15 1679.75,1209.15 1680.34,1209.15 1680.92,1209.15 1681.51,1209.15 1682.1,1209.15 1682.68,1209.15 1683.27,1209.15 1683.86,1209.15 1684.44,1209.15 1685.03,1209.15 1685.62,1209.15 1686.2,1209.15 1686.79,1209.15 1687.37,1209.15 1687.96,1209.15 1688.55,1209.15 1689.13,1209.15 1689.72,1209.15 1690.31,1209.15 1690.89,1209.15 1691.48,1209.15 1692.07,1209.15 1692.65,1209.15 1693.24,1209.15 1693.83,1209.15 1694.41,1209.15 1695,1209.15 1695.58,1209.15 1696.17,1209.15 1696.76,1209.15 1697.34,1209.15 1697.93,1209.15 1698.52,1209.15 1699.1,1209.15 1699.69,1209.15 1700.28,1209.15 1700.86,1209.15 1701.45,1209.15 1702.04,1209.15 1702.62,1209.15 1703.21,1209.15 1703.79,1209.15 1704.38,1209.15 1704.97,1209.15 1705.55,1209.15 1706.14,1209.15 1706.73,1209.15 1707.31,1209.15 1707.9,1209.15 1708.49,1209.15 1709.07,1209.15 1709.66,1209.15 1710.24,1209.15 1710.83,1209.15 1711.42,1209.15 1712,1209.15 1712.59,1209.15 1713.18,1209.15 1713.76,1209.15 1714.35,1209.15 1714.94,1209.15 1715.52,1209.15 1716.11,1209.15 1716.7,1209.15 1717.28,1209.15 1717.87,1209.15 1718.45,1209.15 1719.04,1209.15 1719.63,1209.15 1720.21,1209.15 1720.8,1209.15 1721.39,1209.15 1721.97,1209.15 1722.56,1209.15 1723.15,1209.15 1723.73,1209.15 1724.32,1209.15 1724.91,1209.15 1725.49,1209.15 1726.08,1209.15 1726.66,1209.15 1727.25,1209.15 1727.84,1209.15 1728.42,1209.15 1729.01,1209.15 1729.6,1209.15 1730.18,1209.15 1730.77,1209.15 1731.36,1209.15 1731.94,1209.15 1732.53,1209.15 1733.11,1209.15 1733.7,1209.15 1734.29,1209.15 1734.87,1209.15 1735.46,1209.15 1736.05,1209.15 1736.63,1209.15 1737.22,1209.15 1737.81,1209.15 1738.39,1209.15 1738.98,1209.15 1739.57,1209.15 1740.15,1209.15 1740.74,1209.15 1741.32,1209.15 1741.91,1209.15 1742.5,1209.15 1743.08,1209.15 1743.67,1209.15 1744.26,1209.15 1744.84,1209.15 1745.43,1209.15 1746.02,1209.15 1746.6,1209.15 1747.19,1209.15 1747.78,1209.15 1748.36,1209.15 1748.95,1209.15 1749.53,1209.15 1750.12,1209.15 1750.71,1209.15 1751.29,1209.15 1751.88,1209.15 1752.47,1209.15 1753.05,1209.15 1753.64,1209.15 1754.23,1209.15 1754.81,1209.15 1755.4,1209.15 1755.99,1209.15 1756.57,1209.15 1757.16,1209.15 1757.74,1209.15 1758.33,1209.15 1758.92,1209.15 1759.5,1209.15 1760.09,1209.15 1760.68,1209.15 1761.26,1209.15 1761.85,1209.15 1762.44,1209.15 1763.02,1209.15 1763.61,1209.15 1764.19,1209.15 1764.78,1209.15 1765.37,1209.15 1765.95,1209.15 1766.54,1209.15 1767.13,1209.15 1767.71,1209.15 1768.3,1209.15 1768.89,1209.15 1769.47,1209.15 1770.06,1209.15 1770.65,1209.15 1771.23,1209.15 1771.82,1209.15 1772.4,1209.15 1772.99,1209.15 1773.58,1209.15 1774.16,1209.15 1774.75,1209.15 1775.34,1209.15 1775.92,1209.15 1776.51,1209.15 1777.1,1209.15 1777.68,1209.15 1778.27,1209.15 1778.86,1209.15 1779.44,1209.15 1780.03,1209.15 1780.61,1209.15 1781.2,1209.15 1781.79,1209.15 1782.37,1209.15 1782.96,1209.15 1783.55,1209.15 1784.13,1209.15 1784.72,1209.15 1785.31,1209.15 1785.89,1209.15 1786.48,1209.15 1787.06,1209.15 1787.65,1209.15 1788.24,1209.15 1788.82,1209.15 1789.41,1209.15 1790,1209.15 1790.58,1209.15 1791.17,1209.15 1791.76,1209.15 1792.34,1209.15 1792.93,1209.15 1793.52,1209.15 1794.1,1209.15 1794.69,1209.15 1795.27,1209.15 1795.86,1209.15 1796.45,1209.15 1797.03,1209.15 1797.62,1209.15 1798.21,1209.15 1798.79,1209.15 1799.38,1209.15 1799.97,1209.15 1800.55,1209.15 1801.14,1209.15 1801.73,1209.15 1802.31,1209.15 1802.9,1209.15 1803.48,1209.15 1804.07,1209.15 1804.66,1209.15 1805.24,1209.15 1805.83,1209.15 1806.42,1209.15 1807,1209.15 1807.59,1209.15 1808.18,1209.15 1808.76,1209.15 1809.35,1209.15 1809.94,1209.15 1810.52,1209.15 1811.11,1209.15 1811.69,1209.15 1812.28,1209.15 1812.87,1209.15 1813.45,1209.15 1814.04,1209.15 1814.63,1209.15 1815.21,1209.15 1815.8,1209.15 1816.39,1209.15 1816.97,1209.15 1817.56,1209.15 1818.14,1209.15 1818.73,1209.15 1819.32,1209.15 1819.9,1209.15 1820.49,1209.15 1821.08,1209.15 1821.66,1209.15 1822.25,1209.15 1822.84,1209.15 1823.42,1209.15 1824.01,1209.15 1824.6,1209.15 1825.18,1209.15 1825.77,1209.15 1826.35,1209.15 1826.94,1209.15 1827.53,1209.15 1828.11,1209.15 1828.7,1209.15 1829.29,1209.15 1829.87,1209.15 1830.46,1209.15 1831.05,1209.15 1831.63,1209.15 1832.22,1209.15 1832.81,1209.15 1833.39,1209.15 1833.98,1209.15 1834.56,1209.15 1835.15,1209.15 1835.74,1209.15 1836.32,1209.15 1836.91,1209.15 1837.5,1209.15 1838.08,1209.15 1838.67,1209.15 1839.26,1209.15 1839.84,1209.15 1840.43,1209.15 1841.01,1209.15 1841.6,1209.15 1842.19,1209.15 1842.77,1209.15 1843.36,1209.15 1843.95,1209.15 1844.53,1209.15 1845.12,1209.15 1845.71,1209.15 1846.29,1209.15 1846.88,1209.15 1847.47,1209.15 1848.05,1209.15 1848.64,1209.15 1849.22,1209.15 1849.81,1209.15 1850.4,1209.15 1850.98,1209.15 1851.57,1209.15 1852.16,1209.15 1852.74,1209.15 1853.33,1209.15 1853.92,1209.15 1854.5,1209.15 1855.09,1209.15 1855.68,1209.15 1856.26,1209.15 1856.85,1209.15 1857.43,1209.15 1858.02,1209.15 1858.61,1209.15 1859.19,1209.15 1859.78,1209.15 1860.37,1209.15 1860.95,1209.15 1861.54,1209.15 1862.13,1209.15 1862.71,1209.15 1863.3,1209.15 1863.88,1209.15 1864.47,1209.15 1865.06,1209.15 1865.64,1209.15 1866.23,1209.15 1866.82,1209.15 1867.4,1209.15 1867.99,1209.15 1868.58,1209.15 1869.16,1209.15 1869.75,1209.15 1870.34,1209.15 1870.92,1209.15 1871.51,1209.15 1872.09,1209.15 1872.68,1209.15 1873.27,1209.15 1873.85,1209.15 1874.44,1209.15 1875.03,1209.15 1875.61,1209.15 1876.2,1209.15 1876.79,1209.15 1877.37,1209.15 1877.96,1209.15 1878.55,1209.15 1879.13,1209.15 1879.72,1209.15 1880.3,1209.15 1880.89,1209.15 1881.48,1209.15 1882.06,1209.15 1882.65,1209.15 1883.24,1209.15 1883.82,1209.15 1884.41,1209.15 1885,1209.15 1885.58,1209.15 1886.17,1209.15 1886.76,1209.15 1887.34,1209.15 1887.93,1209.15 1888.51,1209.15 1889.1,1209.15 1889.69,1209.15 1890.27,1209.15 1890.86,1209.15 1891.45,1209.15 1892.03,1209.15 1892.62,1209.15 1893.21,1209.15 1893.79,1209.15 1894.38,1209.15 1894.96,1209.15 1895.55,1209.15 1896.14,1209.15 1896.72,1209.15 1897.31,1209.15 1897.9,1209.15 1898.48,1209.15 1899.07,1209.15 1899.66,1209.15 1900.24,1209.15 1900.83,1209.15 1901.42,1209.15 1902,1209.15 1902.59,1209.15 1903.17,1209.15 1903.76,1209.15 1904.35,1209.15 1904.93,1209.15 1905.52,1209.15 1906.11,1209.15 1906.69,1209.15 1907.28,1209.15 1907.87,1209.15 1908.45,1209.15 1909.04,1209.15 1909.63,1209.15 1910.21,1209.15 1910.8,1209.15 1911.38,1209.15 1911.97,1209.15 1912.56,1209.15 1913.14,1209.15 1913.73,1209.15 1914.32,1209.15 1914.9,1209.15 1915.49,1209.15 1916.08,1209.15 1916.66,1209.15 1917.25,1209.15 1917.83,1209.15 1918.42,1209.15 1919.01,1209.15 1919.59,1209.15 1920.18,1209.15 1920.77,1209.15 1921.35,1209.15 1921.94,1209.15 1922.53,1209.15 1923.11,1209.15 1923.7,1209.15 1924.29,1209.15 1924.87,1209.15 1925.46,1209.15 1926.04,1209.15 1926.63,1209.15 1927.22,1209.15 1927.8,1209.15 1928.39,1209.15 1928.98,1209.15 1929.56,1209.15 1930.15,1209.15 1930.74,1209.15 1931.32,1209.15 1931.91,1209.15 1932.5,1209.15 1933.08,1209.15 1933.67,1209.15 1934.25,1209.15 1934.84,1209.15 1935.43,1209.15 1936.01,1209.15 1936.6,1209.15 1937.19,1209.15 1937.77,1209.15 1938.36,1209.15 1938.95,1209.15 1939.53,1209.15 1940.12,1209.15 1940.71,1209.15 1941.29,1209.15 1941.88,1209.15 1942.46,1209.15 1943.05,1209.15 1943.64,1209.15 1944.22,1209.15 1944.81,1209.15 1945.4,1209.15 1945.98,1209.15 1946.57,1209.15 1947.16,1209.15 1947.74,1209.15 1948.33,1209.15 1948.91,1209.15 1949.5,1209.15 1950.09,1209.15 1950.67,1209.15 1951.26,1209.15 1951.85,1209.15 1952.43,1209.15 1953.02,1209.15 1953.61,1209.15 1954.19,1209.15 1954.78,1209.15 1955.37,1209.15 1955.95,1209.15 1956.54,1209.15 1957.12,1209.15 1957.71,1209.15 1958.3,1209.15 1958.88,1209.15 1959.47,1209.15 1960.06,1209.15 1960.64,1209.15 1961.23,1209.15 1961.82,1209.15 1962.4,1209.15 1962.99,1209.15 1963.58,1209.15 1964.16,1209.15 1964.75,1209.15 1965.33,1209.15 1965.92,1209.15 1966.51,1209.15 1967.09,1209.15 1967.68,1209.15 1968.27,1209.15 1968.85,1209.15 1969.44,1209.15 1970.03,1209.15 1970.61,1209.15 1971.2,1209.15 1971.78,1209.15 1972.37,1209.15 1972.96,1209.15 1973.54,1209.15 1974.13,1209.15 1974.72,1209.15 1975.3,1209.15 1975.89,1209.15 1976.48,1209.15 1977.06,1209.15 1977.65,1209.15 1978.24,1209.15 1978.82,1209.15 1979.41,1209.15 1979.99,1209.15 1980.58,1209.15 1981.17,1209.15 1981.75,1209.15 1982.34,1209.15 1982.93,1209.15 1983.51,1209.15 1984.1,1209.15 1984.69,1209.15 1985.27,1209.15 1985.86,1209.15 1986.45,1209.15 1987.03,1209.15 1987.62,1209.15 1988.2,1209.15 1988.79,1209.15 1989.38,1209.15 1989.96,1209.15 1990.55,1209.15 1991.14,1209.15 1991.72,1209.15 1992.31,1209.15 1992.9,1209.15 1993.48,1209.15 1994.07,1209.15 1994.65,1209.15 1995.24,1209.15 1995.83,1209.15 1996.41,1209.15 1997,1209.15 1997.59,1209.15 1998.17,1209.15 1998.76,1209.15 1999.35,1209.15 1999.93,1209.15 2000.52,1209.15 2001.11,1209.15 2001.69,1209.15 2002.28,1209.15 2002.86,1209.15 2003.45,1209.15 2004.04,1209.15 2004.62,1209.15 2005.21,1209.15 2005.8,1209.15 2006.38,1209.15 2006.97,1209.15 2007.56,1209.15 2008.14,1209.15 2008.73,1209.15 2009.32,1209.15 2009.9,1209.15 2010.49,1209.15 2011.07,1209.15 2011.66,1209.15 2012.25,1209.15 2012.83,1209.15 2013.42,1209.15 2014.01,1209.15 2014.59,1209.15 2015.18,1209.15 2015.77,1209.15 2016.35,1209.15 2016.94,1209.15 2017.53,1209.15 2018.11,1209.15 2018.7,1209.15 2019.28,1209.15 2019.87,1209.15 2020.46,1209.15 2021.04,1209.15 2021.63,1209.15 2022.22,1209.15 2022.8,1209.15 2023.39,1209.15 2023.98,1209.15 2024.56,1209.15 2025.15,1209.15 2025.73,1209.15 2026.32,1209.15 2026.91,1209.15 2027.49,1209.15 2028.08,1209.15 2028.67,1209.15 2029.25,1209.15 2029.84,1209.15 2030.43,1209.15 2031.01,1209.15 2031.6,1209.15 2032.19,1209.15 2032.77,1209.15 2033.36,1209.15 2033.94,1209.15 2034.53,1209.15 2035.12,1209.15 2035.7,1209.15 2036.29,1209.15 2036.88,1209.15 2037.46,1209.15 2038.05,1209.15 2038.64,1209.15 2039.22,1209.15 2039.81,1209.15 2040.4,1209.15 2040.98,1209.15 2041.57,1209.15 2042.15,1209.15 2042.74,1209.15 2043.33,1209.15 2043.91,1209.15 2044.5,1209.15 2045.09,1209.15 2045.67,1209.15 2046.26,1209.15 2046.85,1209.15 2047.43,1209.15 2048.02,1209.15 2048.6,1209.15 2049.19,1209.15 2049.78,1209.15 2050.36,1209.15 2050.95,1209.15 2051.54,1209.15 2052.12,1209.15 2052.71,1209.15 2053.3,1209.15 2053.88,1209.15 2054.47,1209.15 2055.06,1209.15 2055.64,1209.15 2056.23,1209.15 2056.81,1209.15 2057.4,1209.15 2057.99,1209.15 2058.57,1209.15 2059.16,1209.15 2059.75,1209.15 2060.33,1209.15 2060.92,1209.15 2061.51,1209.15 2062.09,1209.15 2062.68,1209.15 2063.27,1209.15 2063.85,1209.15 2064.44,1209.15 2065.02,1209.15 2065.61,1209.15 2066.2,1209.15 2066.78,1209.15 2067.37,1209.15 2067.96,1209.15 2068.54,1209.15 2069.13,1209.15 2069.72,1209.15 2070.3,1209.15 2070.89,1209.15 2071.48,1209.15 2072.06,1209.15 2072.65,1209.15 2073.23,1209.15 2073.82,1209.15 2074.41,1209.15 2074.99,1209.15 2075.58,1209.15 2076.17,1209.15 2076.75,1209.15 2077.34,1209.15 2077.93,1209.15 2078.51,1209.15 2079.1,1209.15 2079.68,1209.15 2080.27,1209.15 2080.86,1209.15 2081.44,1209.15 2082.03,1209.15 2082.62,1209.15 2083.2,1209.15 2083.79,1209.15 2084.38,1209.15 2084.96,1209.15 2085.55,1209.15 2086.14,1209.15 2086.72,1209.15 2087.31,1209.15 2087.89,1209.15 2088.48,1209.15 2089.07,1209.15 2089.65,1209.15 2090.24,1209.15 2090.83,1209.15 2091.41,1209.15 2092,1209.15 2092.59,1209.15 2093.17,1209.15 2093.76,1209.15 2094.35,1209.15 2094.93,1209.15 2095.52,1209.15 2096.1,1209.15 2096.69,1209.15 2097.28,1209.15 2097.86,1209.15 2098.45,1209.15 2099.04,1209.15 2099.62,1209.15 2100.21,1209.15 2100.8,1209.15 2101.38,1209.15 2101.97,1209.15 2102.55,1209.15 2103.14,1209.15 2103.73,1209.15 2104.31,1209.15 2104.9,1209.15 2105.49,1209.15 2106.07,1209.15 2106.66,1209.15 2107.25,1209.15 2107.83,1209.15 2108.42,1209.15 2109.01,1209.15 2109.59,1209.15 2110.18,1209.15 2110.76,1209.15 2111.35,1209.15 2111.94,1209.15 2112.52,1209.15 2113.11,1209.15 2113.7,1209.15 2114.28,1209.15 2114.87,1209.15 2115.46,1209.15 2116.04,1209.15 2116.63,1209.15 2117.22,1209.15 2117.8,1209.15 2118.39,1209.15 2118.97,1209.15 2119.56,1209.15 2120.15,1209.15 2120.73,1209.15 2121.32,1209.15 2121.91,1209.15 2122.49,1209.15 2123.08,1209.15 2123.67,1209.15 2124.25,1209.15 2124.84,1209.15 2125.42,1209.15 2126.01,1209.15 2126.6,1209.15 2127.18,1209.15 2127.77,1209.15 2128.36,1209.15 2128.94,1209.15 2129.53,1209.15 2130.12,1209.15 2130.7,1209.15 2131.29,1209.15 2131.88,1209.15 2132.46,1209.15 2133.05,1209.15 2133.63,1209.15 2134.22,1209.15 2134.81,1209.15 2135.39,1209.15 2135.98,1209.15 2136.57,1209.15 2137.15,1209.15 2137.74,1209.15 2138.33,1209.15 2138.91,1209.15 2139.5,1209.15 2140.09,1209.15 2140.67,1209.15 2141.26,1209.15 2141.84,1209.15 2142.43,1209.15 2143.02,1209.15 2143.6,1209.15 2144.19,1209.15 2144.78,1209.15 2145.36,1209.15 2145.95,1209.15 2146.54,1209.15 2147.12,1209.15 2147.71,1209.15 2148.3,1209.15 2148.88,1209.15 2149.47,1209.15 2150.05,1209.15 2150.64,1209.15 2151.23,1209.15 2151.81,1209.15 2152.4,1209.15 2152.99,1209.15 2153.57,1209.15 2154.16,1209.15 2154.75,1209.15 2155.33,1209.15 2155.92,1209.15 2156.5,1209.15 2157.09,1209.15 2157.68,1209.15 2158.26,1209.15 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.08,1191.25 1400.09,899.083 \"/>\n<polyline clip-path=\"url(#clip392)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1226.49 985.439,1191.25 2158.26,1191.25 2158.26,1226.49 985.439,1226.49 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip390)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip390)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip393\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip390)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip390)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip390)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip393)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-1388.05 162.114,-2724.3 162.673,-3925.89 163.232,-5002.24 163.792,-4718.61 164.351,-5724.82 164.91,-6643.64 165.469,-6342.7 166.029,-7122.91 166.588,-7854.74 167.147,-8517.71 167.706,-8213.48 168.266,-8799.71 168.825,-9326.95 169.384,-9815.72 169.943,-10242.3 170.503,-10629.7 171.062,-10324.5 171.621,-10649.2 172.18,-10356.3 172.74,-10623.5 173.299,-10853.6 173.858,-11040.3 174.417,-11180.1 174.977,-11314.9 175.536,-11413.5 176.095,-11494.7 176.655,-11535.1 177.214,-11570.4 177.773,-11584.8 178.332,-11565.3 178.892,-11539 179.451,-11236.5 180.01,-11183.5 180.569,-10898.8 181.129,-10614.8 181.688,-10544 182.247,-10459.3 182.806,-10186.4 183.366,-9901.02 183.925,-9770.32 184.484,-9504.82 185.043,-9248.75 185.603,-9127.87 186.162,-9004.15 186.721,-8753.06 187.28,-8498.32 187.84,-8140.65 188.399,-7800.18 188.958,-7658.36 189.517,-7149.62 190.077,-6836.99 190.636,-6706.14 191.195,-6413.48 191.754,-6216.62 192.314,-6089.44 192.873,-5972.87 193.432,-5777.9 193.991,-5528.55 194.551,-5227.5 195.11,-5066.92 195.669,-4968.93 196.228,-4755.02 196.788,-4550.75 197.347,-4353.7 197.906,-4260.4 198.465,-4121.68 199.025,-4034.6 199.584,-3889.2 200.143,-3749.66 200.702,-3662.56 201.262,-3531.9 201.821,-3398.58 202.38,-3235.06 202.939,-3113.85 203.499,-2954.71 204.058,-2881.12 204.617,-2775.56 205.176,-2566.8 205.736,-2504.15 206.295,-2406.25 206.854,-2209.71 207.413,-2088.96 207.973,-1973.85 208.532,-1860.76 209.091,-1782.24 209.65,-1647.01 210.21,-1571.07 210.769,-1403.79 211.328,-1359.67 211.887,-1287.91 212.447,-1211.89 213.006,-1166.44 213.565,-1015.8 214.124,-925.657 214.684,-866.396 215.243,-781.986 215.802,-742.618 216.361,-636.025 216.921,-609.233 217.48,-581.135 218.039,-552.653 218.598,-524.287 219.158,-421.655 219.717,-419.674 220.276,-342.658 220.835,-292.554 221.395,-246.685 221.954,-176.789 222.513,-133.887 223.072,-114.439 223.632,-92.5523 224.191,-8.91722 224.75,32.0664 225.309,94.0302 225.869,127.162 226.428,182.363 226.987,178.271 227.546,192.672 228.106,250.726 228.665,282.847 229.224,315.105 229.783,345.531 230.343,376.676 230.902,424.944 231.461,453.805 232.02,462.212 232.58,470.689 233.139,499.892 233.698,507.162 234.257,551.802 234.817,576.219 235.376,600.697 235.935,641.521 236.494,661.198 237.054,665.154 237.613,672.243 238.172,673.861 238.731,679.572 239.291,717.702 239.85,735.249 240.409,757.129 240.968,811.963 241.528,866.557 242.087,880.682 242.646,894.6 243.205,906.599 243.765,917.631 244.324,908.507 244.883,961.252 245.442,934.241 246.002,980.583 246.561,994.102 247.12,987.922 247.679,964.768 248.239,938.781 248.798,968.396 249.357,998.099 249.916,1009.79 250.476,1005.44 251.035,998.38 251.594,1025.44 252.153,1016.52 252.713,1024.77 253.272,1051.45 253.831,1025.44 254.39,999.081 254.95,1008.12 255.509,1031.4 256.068,1072.69 256.627,1061.29 257.187,1072.17 257.746,1117.49 258.305,1076.76 258.864,1087.11 259.424,1095.21 259.983,1104.24 260.542,1075.26 261.101,1086.33 261.661,1077.01 262.22,1053.5 262.779,1082.94 263.338,1077.37 263.898,1072.19 264.457,1080.85 265.016,1040.86 265.575,1036.3 266.135,1066.35 266.694,1059.92 267.253,1040.12 267.812,1035.66 268.372,1082.67 268.931,1095.88 269.49,1089.93 270.049,1131.84 270.609,1139.23 271.168,1182.23 271.727,1169.98 272.286,1174.51 272.846,1193.78 273.405,1197.27 273.964,1169.38 274.523,1090.37 275.083,1083.31 275.642,1124.14 276.201,1144.84 276.76,1117.82 277.32,1104.24 277.879,1126.75 278.438,1147.91 278.997,1167.21 279.557,1121.49 280.116,1126.77 280.675,1150.75 281.234,1155.68 281.794,1123.85 282.353,1094.82 282.912,1086.23 283.471,1092.43 284.031,1082.16 284.59,1087.9 285.149,1063.83 285.708,1055.71 286.268,1049.66 286.827,1046.41 287.386,1057.88 287.945,1049.92 288.505,1059.36 289.064,1036.5 289.623,1065.88 290.182,1056.72 290.742,1081.41 291.301,1108.58 291.86,1131.35 292.419,1102.3 292.979,1092.9 293.538,1082.93 294.097,1073.87 294.656,1080.54 295.216,1057.85 295.775,1068.8 296.334,1062.52 296.893,1072.35 297.453,1078.82 298.012,1067.52 298.571,1024.77 299.13,1001.3 299.69,1044.61 300.249,1052.18 300.808,1044.54 301.368,1050.21 301.927,1044.26 302.486,1034.26 303.045,1015.15 303.605,994.752 304.164,1004.94 304.723,997.053 305.282,1005 305.842,965.535 306.401,977.712 306.96,957.132 307.519,952.422 308.079,965.287 308.638,963.844 309.197,942.933 309.756,973.687 310.316,970.048 310.875,964.564 311.434,1008 311.993,1000.49 312.553,993.094 313.112,1002.99 313.671,1030.58 314.23,1037.06 314.79,1010.62 315.349,1003.23 315.908,995.451 316.467,987.525 317.027,1047.04 317.586,1070.9 318.145,1041.01 318.704,1033.39 319.264,1027.51 319.823,1023.03 320.382,1017.39 320.941,1008.37 321.501,996.185 322.06,988.855 322.619,966.239 323.178,958.482 323.738,934.467 324.297,884.244 324.856,899.875 325.415,899.182 325.975,886.942 326.534,902.59 327.093,902.726 327.652,913.033 328.212,911.336 328.771,908.162 329.33,936.105 329.889,929.227 330.449,925.958 331.008,954.154 331.567,948.835 332.126,978.347 332.686,970.713 333.245,966.626 333.804,926.232 334.363,968.761 334.923,993.741 335.482,954.365 336.041,967.115 336.6,978.421 337.16,985.14 337.719,977.589 338.278,973.575 338.837,934.625 339.397,931.67 339.956,879.773 340.515,894.163 341.074,907.164 341.634,903.7 342.193,866.986 342.752,898.89 343.311,911.474 343.871,924.586 344.43,935.159 344.989,931.074 345.548,889.768 346.108,904.987 346.667,882.37 347.226,914.411 347.785,877.376 348.345,841.459 348.904,823.914 349.463,821.773 350.022,804.943 350.582,803.639 351.141,809.522 351.7,809.329 352.259,814.035 352.819,847.542 353.378,778.626 353.937,800.858 354.496,786.904 355.056,789.082 355.615,774.086 356.174,775.172 356.733,806.26 357.293,839.394 357.852,839.64 358.411,856.301 358.97,888.127 359.53,855.475 360.089,869.587 360.648,852.665 361.207,866.243 361.767,913.811 362.326,876.26 362.885,890.361 363.444,885.792 364.004,883.39 364.563,895.561 365.122,879.585 365.681,862.841 366.241,858.315 366.8,855.448 367.359,856.758 367.918,872 368.478,873.181 369.037,840.626 369.596,855.352 370.155,853.402 370.715,883.741 371.274,893.103 371.833,938.707 372.392,917.013 372.952,939.072 373.511,945.445 374.07,887.897 374.629,867.342 375.189,910.935 375.748,919.747 376.307,911.901 376.866,955.791 377.426,947.142 377.985,909.737 378.544,886.994 379.103,879.486 379.663,923.931 380.222,900.402 380.781,891.908 381.34,852.885 381.9,836.982 382.459,836.144 383.018,801.556 383.577,850.985 384.137,830.911 384.696,814.699 385.255,785.488 385.814,819.731 386.374,818.511 386.933,851.342 387.492,849.971 388.051,852.238 388.611,849.601 389.17,847.888 389.729,831.39 390.288,829.063 390.848,810.547 391.407,841.294 391.966,856.163 392.525,868.054 393.085,859.942 393.644,857.865 394.203,869.556 394.762,881.804 395.322,861.714 395.881,878.467 396.44,888.352 396.999,886.147 397.559,880.895 398.118,876.348 398.677,873.228 399.236,867.954 399.796,833.237 400.355,829.274 400.914,844.368 401.473,839.325 402.033,868.628 402.592,866.817 403.151,848.384 403.71,846.105 404.27,875.836 404.829,852.679 405.388,847.867 405.947,840.252 406.507,853.92 407.066,866.801 407.625,844.21 408.184,874.041 408.744,867.305 409.303,861.519 409.862,904.564 410.421,897.012 410.981,858.305 411.54,902.172 412.099,877.285 412.658,856.546 413.218,852.96 413.777,846.702 414.336,826.337 414.895,803.392 415.455,802.323 416.014,782.714 416.573,785.439 417.132,802.438 417.692,802.706 418.251,800.188 418.81,765.111 419.369,780.134 419.929,797.338 420.488,815.771 421.047,799.513 421.606,795.568 422.166,796.253 422.725,796.358 423.284,808.267 423.843,809.802 424.403,791.486 424.962,821.749 425.521,833.317 426.08,831.514 426.64,859.048 427.199,855.626 427.758,866.873 428.318,848.545 428.877,825.938 429.436,822.686 429.995,820.209 430.555,833.278 431.114,894.479 431.673,887.13 432.232,875.41 432.792,853.879 433.351,850.527 433.91,859.658 434.469,855.84 435.029,867.5 435.588,815.849 436.147,783.469 436.706,784.746 437.266,750.69 437.825,715.474 438.384,702.283 438.943,691.134 439.503,711.151 440.062,696.926 440.621,703.568 441.18,688.917 441.74,692.263 442.299,695.159 442.858,713.04 443.417,731.903 443.977,719.002 444.536,720.811 445.095,722.177 445.654,724.266 446.214,743.998 446.773,779.072 447.332,812.436 447.891,809.343 448.451,805.91 449.01,788.058 449.569,788.214 450.128,770.879 450.688,768.422 451.247,747.53 451.806,743.585 452.365,744.612 452.925,762.316 453.484,763.505 454.043,745.4 454.602,744.369 455.162,747.169 455.721,765.042 456.28,712.976 456.839,727.622 457.399,730.876 457.958,765.571 458.517,782.262 459.076,797.223 459.636,778.211 460.195,788.547 460.754,784.187 461.313,780.485 461.873,778.1 462.432,774.904 462.991,789.305 463.55,783.906 464.11,797.013 464.669,778.399 465.228,744.475 465.787,727.141 466.347,727.181 466.906,728.412 467.465,760.646 468.024,775.125 468.584,773.929 469.143,758.131 469.702,757.384 470.261,758.33 470.821,725.536 471.38,725.208 471.939,738.86 472.498,723.304 473.058,710.472 473.617,728.985 474.176,729.055 474.735,747.507 475.295,747.424 475.854,745.756 476.413,746.847 476.972,730.59 477.532,747.769 478.091,744.75 478.65,741.56 479.209,741.501 479.769,744.427 480.328,776.689 480.887,779.75 481.446,810.801 482.006,786.848 482.565,753.256 483.124,764.683 483.683,763.183 484.243,743.812 484.802,742.836 485.361,708.993 485.92,711.288 486.48,697.58 487.039,699.401 487.598,703.283 488.157,703.439 488.717,688.33 489.276,676.112 489.835,695.024 490.394,682.63 490.954,686.199 491.513,708.858 492.072,788.002 492.631,764.911 493.191,745.764 493.75,759.581 494.309,757.046 494.868,769.659 495.428,782.781 495.987,762.94 496.546,733.699 497.105,715.836 497.665,730.249 498.224,729.654 498.783,694.376 499.342,696.188 499.902,714.978 500.461,699.467 501.02,700.228 501.579,704.2 502.139,706.335 502.698,736.939 503.257,754.278 503.816,739.034 504.376,768.013 504.935,782.031 505.494,763.994 506.053,761.982 506.613,745.492 507.172,758.51 507.731,757.061 508.29,756.133 508.85,771.226 509.409,765.541 509.968,748.184 510.527,712.915 511.087,726.569 511.646,724.233 512.205,707.35 512.764,712.456 513.324,694.815 513.883,679.403 514.442,680.384 515.001,683.528 515.561,701.223 516.12,704.074 516.679,708.145 517.238,711.023 517.798,708.825 518.357,692.293 518.916,726.786 519.475,758.735 520.035,757.539 520.594,723.379 521.153,724.603 521.712,741.538 522.272,758.494 522.831,772.466 523.39,768.968 523.949,749.941 524.509,736.438 525.068,737.298 525.627,741.479 526.186,713.083 526.746,729.504 527.305,714.687 527.864,700.754 528.423,671.611 528.983,642.038 529.542,646.764 530.101,649.763 530.66,655.834 531.22,661.483 531.779,634.146 532.338,620.036 532.897,641.4 533.457,663.661 534.016,668.208 534.575,653.617 535.134,672.97 535.694,693.768 536.253,714.057 536.812,764.324 537.371,764.794 537.931,763.412 538.49,777.355 539.049,786.724 539.608,798.167 540.168,776.982 540.727,776.25 541.286,741.287 541.845,707.503 542.405,707.834 542.964,724.962 543.523,724.736 544.082,740.63 544.642,755.817 545.201,787.343 545.76,782.793 546.319,748.984 546.879,796.749 547.438,795.433 547.997,772.893 548.556,754.967 549.116,765.734 549.675,779.219 550.234,760.006 550.793,773.132 551.353,786.507 551.912,801.147 552.471,800.682 553.031,812.841 553.59,805.526 554.149,799.98 554.708,781.291 555.268,822.8 555.827,800.832 556.386,794.765 556.945,758.802 557.505,773.207 558.064,770.029 558.623,767.025 559.182,749.102 559.742,730.658 560.301,759.138 560.86,790.401 561.419,782.748 561.979,776.703 562.538,803.798 563.097,814.342 563.656,839.855 564.216,851.947 564.775,842.929 565.334,837.114 565.893,830.394 566.453,838.336 567.012,812.677 567.571,789.595 568.13,767.325 568.69,731.357 569.249,746.088 569.808,726.454 570.367,726.015 570.927,707.717 571.486,677.024 572.045,660.611 572.604,674.687 573.164,674.763 573.723,677.074 574.282,678.979 574.841,664.183 575.401,679.025 575.96,663.861 576.519,683.281 577.078,682.281 577.638,665.54 578.197,636.157 578.756,653.828 579.315,654.279 579.875,655.304 580.434,642.482 580.993,644.681 581.552,647.323 582.112,670.722 582.671,658.108 583.23,676.914 583.789,675.138 584.349,610.364 584.908,629.221 585.467,631.024 586.026,651.876 586.586,636.408 587.145,672.397 587.704,688.518 588.263,703.824 588.823,702.618 589.382,721.645 589.941,755.797 590.5,754.915 591.06,768.116 591.619,814.615 592.178,762.112 592.737,741.848 593.297,709.904 593.856,705.802 594.415,721.328 594.974,722.681 595.534,707.38 596.093,658.111 596.652,644.331 597.211,680.136 597.771,729.899 598.33,725.643 598.889,740.578 599.448,738.925 600.008,752.738 600.567,767.627 601.126,768.484 601.685,778.423 602.245,774.774 602.804,752.119 603.363,731.194 603.922,728.532 604.482,709.757 605.041,726.259 605.6,711.126 606.159,742.776 606.719,744.806 607.278,744.728 607.837,743.9 608.396,790.931 608.956,785.692 609.515,766.178 610.074,782.301 610.633,778.833 611.193,791.018 611.752,801.99 612.311,795.512 612.87,808.668 613.43,839.208 613.989,836.054 614.548,795.838 615.107,807.802 615.667,770.383 616.226,750.47 616.785,716.093 617.344,714.686 617.904,729.786 618.463,695.096 619.022,675.805 619.581,645.701 620.141,667.15 620.7,716.062 621.259,716.318 621.818,716.83 622.378,719.38 622.937,719.378 623.496,700.151 624.055,700.059 624.615,713.457 625.174,761.962 625.733,806.186 626.292,753.461 626.852,801.609 627.411,795.923 627.97,788.736 628.529,803.741 629.089,828.298 629.648,802.81 630.207,847.036 630.766,837.164 631.326,814.997 631.885,806.405 632.444,802.897 633.003,764.434 633.563,761.572 634.122,773.858 634.681,754.477 635.24,736.371 635.8,720.054 636.359,735.313 636.918,717.535 637.477,685.739 638.037,686.93 638.596,673.498 639.155,675.749 639.714,658.356 640.274,660.302 640.833,630.934 641.392,602.511 641.951,609.628 642.511,613.106 643.07,632.529 643.629,650.714 644.188,621.132 644.748,607.681 645.307,610.578 645.866,614.478 646.425,617.966 646.985,621.532 647.544,626.06 648.103,630.564 648.662,653.161 649.222,671.187 649.781,673.619 650.34,692.641 650.899,723.492 651.459,709.892 652.018,695.985 652.577,665.382 653.136,681.32 653.696,632.979 654.255,618.573 654.814,642.136 655.373,661.23 655.933,681.372 656.492,682.365 657.051,685.859 657.61,689.139 658.17,707.69 658.729,708.057 659.288,706.029 659.847,707.902 660.407,691.221 660.966,690.823 661.525,704.369 662.084,718.961 662.644,718.531 663.203,699.988 663.762,699.58 664.321,685.09 664.881,670.889 665.44,672.985 665.999,693.218 666.558,675.633 667.118,679.741 667.677,663.543 668.236,648.038 668.795,587.309 669.355,580.888 669.914,638.457 670.473,607.777 671.032,624.142 671.592,612.741 672.151,604.084 672.71,625.172 673.269,629.588 673.829,634.775 674.388,622.142 674.947,642.702 675.506,658.475 676.066,626.289 676.625,628.142 677.184,601.888 677.743,572.111 678.303,564.319 678.862,539.723 679.421,533.113 679.981,556.007 680.54,580.151 681.099,569.617 681.658,591.841 682.218,598.511 682.777,620.099 683.336,625.246 683.895,675.396 684.455,707.324 685.014,707.227 685.573,707.964 686.132,708.599 686.692,727.678 687.251,740.83 687.81,740.345 688.369,722.928 688.929,706.501 689.488,689.288 690.047,673.212 690.606,658.55 691.166,660.379 691.725,679.655 692.284,695.656 692.843,681.907 693.403,668.954 693.962,688.377 694.521,687.262 695.08,703.054 695.64,719.057 696.199,749.911 696.758,748.762 697.317,744.61 697.877,775.844 698.436,792.732 698.995,770.549 699.554,717.905 700.114,734.36 700.673,733.227 701.232,731.123 701.791,727.475 702.351,742.248 702.91,723.619 703.469,736.912 704.028,783.095 704.588,794.055 705.147,775.696 705.706,741.559 706.265,736.956 706.825,732.492 707.384,750.115 707.943,734.551 708.502,747.458 709.062,759.198 709.621,675.406 710.18,662.019 710.739,653.237 711.299,638.218 711.858,658.553 712.417,627.591 712.976,630.216 713.536,615.25 714.095,616.298 714.654,633.98 715.213,606.264 715.773,625.45 716.332,645.007 716.891,613.216 717.45,648.37 718.01,667.892 718.569,652.353 719.128,655.944 719.687,660.823 720.247,646.012 720.806,616.211 721.365,601.974 721.924,607.456 722.484,611.937 723.043,618.801 723.602,625.009 724.161,676.417 724.721,657.46 725.28,694.58 725.839,722.034 726.398,703.737 726.958,686.721 727.517,690.724 728.076,735.327 728.635,766.497 729.195,746.585 729.754,733.443 730.313,729.78 730.872,759.258 731.432,752.468 731.991,751.264 732.55,747.166 733.109,759.612 733.669,739.549 734.228,753.514 734.787,768.145 735.346,764.576 735.906,726.741 736.465,708.598 737.024,723.615 737.583,722.252 738.143,735.204 738.702,701.168 739.261,687.364 739.82,673.555 740.38,673.796 740.939,670.345 741.498,672.909 742.057,687.818 742.617,689.685 743.176,675.739 743.735,708.384 744.294,725.1 744.854,742.317 745.413,754.581 745.972,704.298 746.531,670.468 747.091,672.273 747.65,676.34 748.209,663.838 748.768,635.131 749.328,671.415 749.887,675.207 750.446,660.177 751.005,643.732 751.565,664.829 752.124,664.213 752.683,664.87 753.242,636.193 753.802,655.674 754.361,660.385 754.92,630.052 755.479,620.985 756.039,657.091 756.598,660.281 757.157,645.268 757.716,664.215 758.276,666.703 758.835,683.265 759.394,699.322 759.953,733.083 760.513,698.76 761.072,700.91 761.631,714.932 762.19,714.581 762.75,699.484 763.309,736.076 763.868,718.959 764.427,784.571 764.987,746.593 765.546,696.808 766.105,696.667 766.664,713.697 767.224,716.894 767.783,729.365 768.342,730.536 768.901,726.049 769.461,738.119 770.02,736.89 770.579,764.443 771.138,744.215 771.698,689.983 772.257,707.2 772.816,705.918 773.375,722.159 773.935,703.297 774.494,719.396 775.053,718.624 775.612,717.143 776.172,683.098 776.731,667.395 777.29,669.047 777.849,669.477 778.409,653.162 778.968,586.713 779.527,606.55 780.086,611.263 780.646,567.888 781.205,605.346 781.764,612.218 782.323,616.096 782.883,633.82 783.442,635.879 784.001,657.219 784.56,676.758 785.12,694.141 785.679,678.495 786.238,678.458 786.797,730.256 787.357,745.222 787.916,724.776 788.475,721.19 789.034,740.1 789.594,722.716 790.153,721.971 790.712,705.612 791.271,702.686 791.831,681.02 792.39,684.945 792.949,651.681 793.508,699.728 794.068,671.65 794.627,685.681 795.186,700.547 795.745,698.157 796.305,683.782 796.864,702.165 797.423,700.254 797.982,670.119 798.542,667.614 799.101,668.985 799.66,670.819 800.219,686.53 800.779,701.909 801.338,716.643 801.897,714.34 802.456,714.224 803.016,715.143 803.575,761.816 804.134,773.968 804.693,784.23 805.253,800.135 805.812,811.03 806.371,806.017 806.931,832.886 807.49,759.715 808.049,773.778 808.608,784.665 809.168,777.252 809.727,786.312 810.286,814.238 810.845,807.972 811.405,803.18 811.964,797.572 812.523,777.469 813.082,786.005 813.642,799.132 814.201,748.041 814.76,761.148 815.319,741.962 815.879,721.078 816.438,718.281 816.997,731.842 817.556,726.894 818.116,708.168 818.675,672.111 819.234,674.748 819.793,709.377 820.353,707.482 820.912,689.125 821.471,684.32 822.03,698.722 822.59,699.155 823.149,701.882 823.708,718.036 824.267,700.756 824.827,697.225 825.386,743.136 825.945,740.031 826.504,722.411 827.064,669.033 827.623,656.109 828.182,653.428 828.741,656.656 829.301,627.822 829.86,648.45 830.419,646.134 830.978,630.985 831.538,619.541 832.097,621.793 832.656,642.751 833.215,644.252 833.775,648.801 834.334,701.87 834.893,704.829 835.452,720.785 836.012,718.346 836.571,697.965 837.13,711.787 837.689,707.637 838.249,723.769 838.808,734.112 839.367,731.729 839.926,730.125 840.486,728.964 841.045,741.706 841.604,757.962 842.163,737.417 842.723,753.152 843.282,748.258 843.841,731.455 844.4,696.952 844.96,679.051 845.519,679.65 846.078,694.944 846.637,675.275 847.197,691.87 847.756,693.487 848.315,665.71 848.874,652.025 849.434,654.096 849.993,656.387 850.552,595.531 851.111,635.565 851.671,587.169 852.23,607.556 852.789,613.011 853.348,572.108 853.908,560.332 854.467,534.497 855.026,558.796 855.585,581.672 856.145,552.507 856.704,590.029 857.263,578.335 857.822,635.207 858.382,620.827 858.941,608.739 859.5,610.527 860.059,616.117 860.619,646.952 861.178,630.951 861.737,607.818 862.296,564.15 862.856,535.881 863.415,558.304 863.974,615.695 864.533,650.458 865.093,635.312 865.652,639.56 866.211,657.123 866.77,706.653 867.33,738.605 867.889,796.619 868.448,791.171 869.007,805.665 869.567,797.202 870.126,788.467 870.685,796.57 871.244,823.025 871.804,814.677 872.363,828.038 872.922,849.929 873.481,840.429 874.041,813.27 874.6,826.51 875.159,817.028 875.718,826.862 876.278,837.341 876.837,813.591 877.396,807.466 877.955,835.25 878.515,808.926 879.074,802.297 879.633,808.149 880.192,782.446 880.752,757.748 881.311,737.916 881.87,702.693 882.429,666.503 882.989,664.201 883.548,666.46 884.107,667.097 884.666,670.1 885.226,656.062 885.785,656.364 886.344,668.533 886.903,702.501 887.463,700.044 888.022,714.791 888.581,727.653 889.14,694.175 889.7,706.585 890.259,722.658 890.818,689.293 891.377,688.57 891.937,685.914 892.496,701.386 893.055,683.332 893.614,652.124 894.174,607.114 894.733,611.818 895.292,616.443 895.851,622.838 896.411,610.61 896.97,611.042 897.529,545.354 898.088,584.76 898.648,622.148 899.207,611.453 899.766,614.594 900.325,619.4 900.885,657.71 901.444,661.823 902.003,678.877 902.562,678.165 903.122,677.207 903.681,681.553 904.24,682.022 904.799,650.148 905.359,649.69 905.918,672.052 906.477,689.989 907.036,724.652 907.596,724.209 908.155,741.627 908.714,768.916 909.273,732.415 909.833,765.156 910.392,729.349 910.951,742.149 911.51,782.926 912.07,812.75 912.629,807.065 913.188,833.001 913.747,808.563 914.307,807.134 914.866,786.686 915.425,747.523 915.984,760.384 916.544,755.824 917.103,719.472 917.662,699.997 918.221,698.208 918.781,716.479 919.34,696.399 919.899,666.474 920.458,685.583 921.018,669.146 921.577,669.04 922.136,653.87 922.695,669.305 923.255,688.758 923.814,656.446 924.373,654.605 924.932,641.494 925.492,612.147 926.051,644.895 926.61,645.038 927.169,697.302 927.729,681.545 928.288,696.748 928.847,696.842 929.406,694.376 929.966,707.115 930.525,676.887 931.084,679.291 931.644,658.819 932.203,674.474 932.762,676.568 933.321,677.23 933.881,678.616 934.44,679.189 934.999,680.665 935.558,729.591 936.118,695.966 936.677,716.368 937.236,715.738 937.795,701.009 938.355,700.441 938.914,732.647 939.473,713.356 940.032,696.965 940.592,731.181 941.151,695.922 941.71,692.386 942.269,690.412 942.829,707.615 943.388,687.341 943.947,701.379 944.506,701.834 945.066,733.8 945.625,731.74 946.184,680.227 946.743,662.628 947.303,665.968 947.862,649.332 948.421,637.034 948.98,643.46 949.54,679.462 950.099,682.609 950.658,695.818 951.217,694.191 951.777,726.243 952.336,753.509 952.895,733.374 953.454,730.303 954.014,730.213 954.573,729.506 955.132,741.291 955.691,741.041 956.251,786.543 956.81,746.134 957.369,740.617 957.928,738.88 958.488,782.144 959.047,790.563 959.606,800.486 960.165,795.409 960.725,822.558 961.284,799.701 961.843,781.423 962.402,745.472 962.962,726.217 963.521,738.326 964.08,721.547 964.639,721.453 965.199,719.586 965.758,702.005 966.317,702.921 966.876,717.613 967.436,717.969 967.995,716.79 968.554,698.036 969.113,699.161 969.673,694.944 970.232,692.998 970.791,705.283 971.35,718.67 971.91,716.702 972.469,711.965 973.028,711.188 973.587,707.533 974.147,690.709 974.706,689.045 975.265,692.441 975.824,723.285 976.384,690.114 976.943,657.678 977.502,672.75 978.061,656.153 978.621,644.326 979.18,665.542 979.739,630.366 980.298,645.172 980.858,663.17 981.417,679.004 981.976,666.763 982.535,651.724 983.095,669.703 983.654,685.051 984.213,705.37 984.772,707.52 985.332,702.512 985.891,702.335 986.45,714.851 987.009,696.525 987.569,677.565 988.128,679.19 988.687,681.686 989.246,717.188 989.806,731.751 990.365,731.864 990.924,715.404 991.483,683.008 992.043,668.772 992.602,656.581 993.161,661.63 993.72,635.188 994.28,621.77 994.839,656.581 995.398,658.78 995.957,659.262 996.517,675.677 997.076,700.263 997.635,680.471 998.194,698.403 998.754,664.614 999.313,667.64 999.872,683.816 1000.43,686.251 1000.99,685.982 1001.55,651.209 1002.11,668.742 1002.67,671.242 1003.23,705.497 1003.79,723.04 1004.35,706.857 1004.91,737.292 1005.46,715.553 1006.02,680.986 1006.58,697.241 1007.14,697.915 1007.7,694.251 1008.26,727.619 1008.82,741.176 1009.38,724.545 1009.94,693.482 1010.5,705.194 1011.06,691.232 1011.62,659.673 1012.18,689.417 1012.73,642.92 1013.29,661.001 1013.85,662.135 1014.41,679.847 1014.97,678.792 1015.53,679.519 1016.09,646.622 1016.65,614.807 1017.21,632.881 1017.77,654.041 1018.33,674.618 1018.89,693.456 1019.45,695.48 1020.01,663.311 1020.56,666.537 1021.12,684.21 1021.68,687.854 1022.24,718.473 1022.8,685.356 1023.36,670.032 1023.92,656.293 1024.48,673.56 1025.04,658.105 1025.6,707.141 1026.16,705.811 1026.72,674.845 1027.28,657.232 1027.83,642.041 1028.39,628.777 1028.95,598.916 1029.51,621.005 1030.07,642.32 1030.63,643.356 1031.19,707.418 1031.75,707.536 1032.31,676.295 1032.87,678.128 1033.43,662.066 1033.99,681.296 1034.55,697.922 1035.1,698.064 1035.66,696.758 1036.22,698.314 1036.78,717.129 1037.34,698.489 1037.9,696.531 1038.46,680.387 1039.02,667.585 1039.58,687.645 1040.14,687.895 1040.7,690.908 1041.26,691.563 1041.82,704.332 1042.38,688.038 1042.93,673.887 1043.49,672.374 1044.05,671.852 1044.61,657.184 1045.17,658.241 1045.73,656.476 1046.29,673.899 1046.85,674.502 1047.41,672.151 1047.97,686.361 1048.53,684.741 1049.09,668.668 1049.65,683.597 1050.2,664.392 1050.76,684.282 1051.32,671.968 1051.88,686.68 1052.44,686.258 1053,672.296 1053.56,685.681 1054.12,687.954 1054.68,668.288 1055.24,684.055 1055.8,731.559 1056.36,774.355 1056.92,756.592 1057.48,780.879 1058.03,777.833 1058.59,792.429 1059.15,789.341 1059.71,754.765 1060.27,684.604 1060.83,686.268 1061.39,668.371 1061.95,670.258 1062.51,671.404 1063.07,640.674 1063.63,627.706 1064.19,699.231 1064.75,731.243 1065.3,712.532 1065.86,725.79 1066.42,711.768 1066.98,712.577 1067.54,697.546 1068.1,666.314 1068.66,603.129 1069.22,625.554 1069.78,623.874 1070.34,640.994 1070.9,627.533 1071.46,626.893 1072.02,612.878 1072.57,582.914 1073.13,592.131 1073.69,601.411 1074.25,636.357 1074.81,654.885 1075.37,706.817 1075.93,689.972 1076.49,689.022 1077.05,687.956 1077.61,687.548 1078.17,702.316 1078.73,668.285 1079.29,652.194 1079.85,668.362 1080.4,653.737 1080.96,635.992 1081.52,669.279 1082.08,670.657 1082.64,686.083 1083.2,689.874 1083.76,722.911 1084.32,738.988 1084.88,784.915 1085.44,794.285 1086,803.355 1086.56,812.058 1087.12,786.286 1087.67,794.54 1088.23,803.925 1088.79,784.753 1089.35,778.859 1089.91,771.444 1090.47,751.942 1091.03,767.665 1091.59,782.864 1092.15,787.704 1092.71,766.102 1093.27,758.996 1093.83,754.369 1094.39,715.191 1094.94,697.754 1095.5,695.471 1096.06,697.623 1096.62,695.807 1097.18,692.79 1097.74,691.908 1098.3,691.329 1098.86,707.699 1099.42,741.219 1099.98,739.549 1100.54,754.552 1101.1,750.561 1101.66,699.66 1102.22,682.303 1102.77,650.026 1103.33,665.585 1103.89,646.902 1104.45,598.857 1105.01,604.158 1105.57,606.509 1106.13,613.773 1106.69,582.77 1107.25,572.479 1107.81,576.457 1108.37,569.41 1108.93,557.971 1109.49,563.805 1110.04,550.831 1110.6,526.366 1111.16,537.962 1111.72,529.306 1112.28,522.171 1112.84,497.914 1113.4,539.098 1113.96,528.474 1114.52,536.082 1115.08,545.93 1115.64,552.232 1116.2,558.784 1116.76,579.014 1117.31,618.602 1117.87,620.046 1118.43,591.281 1118.99,630.857 1119.55,634.903 1120.11,650.105 1120.67,653.511 1121.23,671.539 1121.79,692.661 1122.35,692.181 1122.91,645.665 1123.47,650.136 1124.03,666.689 1124.59,668.529 1125.14,651.164 1125.7,655.682 1126.26,688.444 1126.82,706.395 1127.38,688.576 1127.94,691.447 1128.5,658.633 1129.06,661.723 1129.62,679.992 1130.18,682.7 1130.74,698.067 1131.3,683.914 1131.86,700.016 1132.41,696.318 1132.97,729.89 1133.53,728.125 1134.09,676.665 1134.65,677.915 1135.21,615.618 1135.77,618.769 1136.33,622.856 1136.89,627.063 1137.45,617.293 1138.01,587.589 1138.57,591.356 1139.13,613.016 1139.68,617.437 1140.24,637.89 1140.8,659.404 1141.36,660.867 1141.92,644.718 1142.48,646.013 1143.04,663.118 1143.6,696.941 1144.16,676.277 1144.72,708.307 1145.28,676.349 1145.84,693.388 1146.4,675.643 1146.96,695.118 1147.51,681.347 1148.07,717.659 1148.63,699.533 1149.19,684.115 1149.75,699.571 1150.31,683.484 1150.87,701.081 1151.43,718.062 1151.99,699.552 1152.55,664.318 1153.11,664.929 1153.67,648.261 1154.23,681.957 1154.78,680.53 1155.34,713.266 1155.9,728.097 1156.46,739.943 1157.02,739.751 1157.58,722.723 1158.14,689.919 1158.7,706.349 1159.26,708.091 1159.82,708.522 1160.38,720.939 1160.94,719.623 1161.5,766.381 1162.05,763.114 1162.61,787.441 1163.17,782.074 1163.73,775.81 1164.29,735.974 1164.85,736.513 1165.41,730.319 1165.97,729.295 1166.53,712.775 1167.09,726.281 1167.65,705.622 1168.21,672.374 1168.77,686.003 1169.33,704.381 1169.88,735.682 1170.44,732.072 1171,730.615 1171.56,745.26 1172.12,724.79 1172.68,693.394 1173.24,712.072 1173.8,727.444 1174.36,740.29 1174.92,786.994 1175.48,700.243 1176.04,682.626 1176.6,682.899 1177.15,670.121 1177.71,687.877 1178.27,672.541 1178.83,672.207 1179.39,704.039 1179.95,687.767 1180.51,672.757 1181.07,640.271 1181.63,644.035 1182.19,613.113 1182.75,615.125 1183.31,635.217 1183.87,641.651 1184.43,689.97 1184.98,687.593 1185.54,690.465 1186.1,691.254 1186.66,692.407 1187.22,723.296 1187.78,707.106 1188.34,739.702 1188.9,784.319 1189.46,791.554 1190.02,804.932 1190.58,764.285 1191.14,757.777 1191.7,801.776 1192.25,792.654 1192.81,789.04 1193.37,781.748 1193.93,780.707 1194.49,791.281 1195.05,802.86 1195.61,780.534 1196.17,789.931 1196.73,816.312 1197.29,825.66 1197.85,802.787 1198.41,778.493 1198.97,785.67 1199.52,779.094 1200.08,775.312 1200.64,773.424 1201.2,753.298 1201.76,768.844 1202.32,731.811 1202.88,748.23 1203.44,728.188 1204,659.365 1204.56,664.391 1205.12,697.305 1205.68,678.308 1206.24,679.487 1206.8,695.41 1207.35,758.808 1207.91,752.435 1208.47,751.27 1209.03,749.182 1209.59,745.9 1210.15,756.997 1210.71,720.512 1211.27,735.656 1211.83,714.352 1212.39,710.637 1212.95,707.972 1213.51,687.793 1214.07,684.17 1214.62,684.606 1215.18,683.119 1215.74,671.933 1216.3,670.73 1216.86,688.412 1217.42,691.038 1217.98,689.981 1218.54,656.429 1219.1,661.227 1219.66,645.527 1220.22,613.685 1220.78,602.878 1221.34,607.261 1221.89,611.793 1222.45,652.309 1223.01,655.903 1223.57,660.954 1224.13,679.128 1224.69,663.787 1225.25,692.05 1225.81,693.381 1226.37,677.004 1226.93,678.011 1227.49,614.516 1228.05,600.602 1228.61,586.071 1229.17,607.786 1229.72,599.036 1230.28,602.135 1230.84,558.357 1231.4,552.782 1231.96,564.023 1232.52,604.43 1233.08,589.354 1233.64,563.551 1234.2,619.056 1234.76,655.363 1235.32,623.29 1235.88,642.351 1236.44,644.059 1236.99,682.081 1237.55,648.874 1238.11,649.325 1238.67,652.022 1239.23,637.946 1239.79,674.141 1240.35,677.23 1240.91,665.071 1241.47,683.559 1242.03,682.245 1242.59,717.878 1243.15,759.793 1243.71,722.642 1244.26,701.656 1244.82,667.15 1245.38,664.398 1245.94,664.522 1246.5,668.587 1247.06,686.221 1247.62,683.312 1248.18,665.842 1248.74,649.805 1249.3,620.041 1249.86,626.588 1250.42,642.627 1250.98,677.239 1251.54,659.96 1252.09,675.908 1252.65,677.576 1253.21,692.88 1253.77,674.909 1254.33,627.07 1254.89,646.902 1255.45,649.502 1256.01,701.563 1256.57,698.64 1257.13,681.647 1257.69,729.449 1258.25,773.854 1258.81,769.597 1259.36,751.692 1259.92,728.185 1260.48,694.197 1261.04,694.549 1261.6,695.334 1262.16,691.63 1262.72,660.03 1263.28,631.87 1263.84,635.16 1264.4,601.747 1264.96,603.851 1265.52,594.452 1266.08,616.123 1266.63,671.675 1267.19,686.489 1267.75,684.185 1268.31,685.474 1268.87,702.895 1269.43,703.632 1269.99,770.487 1270.55,735.594 1271.11,750.639 1271.67,780.703 1272.23,774.426 1272.79,783.201 1273.35,745.827 1273.91,711.31 1274.46,692.708 1275.02,693.051 1275.58,709.643 1276.14,721.298 1276.7,718.988 1277.26,701.082 1277.82,666.3 1278.38,633.091 1278.94,667.049 1279.5,667.396 1280.06,668.373 1280.62,702.572 1281.18,700.197 1281.73,748.874 1282.29,743.659 1282.85,728.402 1283.41,719.821 1283.97,697.248 1284.53,682.716 1285.09,648.704 1285.65,667.099 1286.21,664.878 1286.77,682.255 1287.33,730.9 1287.89,714.273 1288.45,727.605 1289,744.195 1289.56,758.125 1290.12,722.382 1290.68,717.892 1291.24,747.627 1291.8,745.431 1292.36,759.219 1292.92,725.015 1293.48,723.44 1294.04,772.259 1294.6,748.65 1295.16,730.382 1295.72,715.173 1296.28,709.221 1296.83,710.51 1297.39,693.776 1297.95,693.873 1298.51,680.515 1299.07,648.091 1299.63,684.974 1300.19,667.974 1300.75,652.748 1301.31,636.652 1301.87,640.083 1302.43,593.365 1302.99,599.076 1303.55,636.797 1304.1,607.087 1304.66,610.306 1305.22,616.053 1305.78,620.748 1306.34,623.704 1306.9,613.377 1307.46,646.042 1308.02,664.602 1308.58,685.756 1309.14,671.293 1309.7,643.078 1310.26,644.615 1310.82,645.036 1311.38,662.832 1311.93,664.877 1312.49,668.017 1313.05,683.055 1313.61,715.985 1314.17,713.608 1314.73,761.878 1315.29,756.211 1315.85,769.026 1316.41,767.537 1316.97,763.895 1317.53,745.517 1318.09,711.811 1318.65,696.732 1319.2,663.438 1319.76,665.842 1320.32,679.94 1320.88,699.962 1321.44,699.555 1322,679.999 1322.56,698.691 1323.12,712.671 1323.68,715.218 1324.24,683.598 1324.8,696.793 1325.36,679.981 1325.92,695.343 1326.47,713.546 1327.03,743.813 1327.59,758.326 1328.15,770.178 1328.71,718.623 1329.27,748.039 1329.83,712.723 1330.39,661.75 1330.95,646.608 1331.51,632.323 1332.07,583.603 1332.63,619.557 1333.19,652.753 1333.75,593.637 1334.3,579.762 1334.86,585.06 1335.42,589.449 1335.98,591.23 1336.54,596.669 1337.1,587.878 1337.66,593.168 1338.22,567.151 1338.78,576.352 1339.34,597.774 1339.9,638.198 1340.46,640.653 1341.02,673.389 1341.57,690.789 1342.13,687.313 1342.69,657.056 1343.25,639.668 1343.81,671.387 1344.37,654.631 1344.93,687.529 1345.49,685.183 1346.05,653.3 1346.61,653.949 1347.17,657.723 1347.73,643.027 1348.29,627.868 1348.84,634.111 1349.4,688.356 1349.96,707.392 1350.52,690.411 1351.08,688.371 1351.64,703.908 1352.2,751.732 1352.76,747.328 1353.32,726.617 1353.88,725.252 1354.44,738.563 1355,752.752 1355.56,764.126 1356.12,762.144 1356.67,757.832 1357.23,741.231 1357.79,741.194 1358.35,704.07 1358.91,688.957 1359.47,754.965 1360.03,751.78 1360.59,762.935 1361.15,727.458 1361.71,726.888 1362.27,739.974 1362.83,735.944 1363.39,718.038 1363.94,715.064 1364.5,695.461 1365.06,710.889 1365.62,694.975 1366.18,666.996 1366.74,668.433 1367.3,670.704 1367.86,703.936 1368.42,687.646 1368.98,689.618 1369.54,688.595 1370.1,672.089 1370.66,674.281 1371.21,678.75 1371.77,728.337 1372.33,726.895 1372.89,724.988 1373.45,710.167 1374.01,723.118 1374.57,702.6 1375.13,697.165 1375.69,713.745 1376.25,717.275 1376.81,699.313 1377.37,697.546 1377.93,697.103 1378.49,696.473 1379.04,714.131 1379.6,699.251 1380.16,684.926 1380.72,703.024 1381.28,717.525 1381.84,733.159 1382.4,731.507 1382.96,744.62 1383.52,761.047 1384.08,769.877 1384.64,766.113 1385.2,757.938 1385.76,756.908 1386.31,785.621 1386.87,777.802 1387.43,759.142 1387.99,756.181 1388.55,753.154 1389.11,749.334 1389.67,749.481 1390.23,729.313 1390.79,726.404 1391.35,711.818 1391.91,713.308 1392.47,730.054 1393.03,711.981 1393.58,709.024 1394.14,710.815 1394.7,722.801 1395.26,720.953 1395.82,717.742 1396.38,734.316 1396.94,733.753 1397.5,713.578 1398.06,731.187 1398.62,709.928 1399.18,670.556 1399.74,641.31 1400.3,626.435 1400.86,612.955 1401.41,632.241 1401.97,636.792 1402.53,653.575 1403.09,622.455 1403.65,642.098 1404.21,644.268 1404.77,630.832 1405.33,632.985 1405.89,648.564 1406.45,681.837 1407.01,664.14 1407.57,648.352 1408.13,648.459 1408.68,615.215 1409.24,589.619 1409.8,581.18 1410.36,567.915 1410.92,542.995 1411.48,533.576 1412.04,525.327 1412.6,513.685 1413.16,541.014 1413.72,537.045 1414.28,529.766 1414.84,551.317 1415.4,593.31 1415.95,614.709 1416.51,618.107 1417.07,623.084 1417.63,609.048 1418.19,593.787 1418.75,633.324 1419.31,650.945 1419.87,653.613 1420.43,621.507 1420.99,627.999 1421.55,634.386 1422.11,650.728 1422.67,653.181 1423.23,671.379 1423.78,675.252 1424.34,628.645 1424.9,563.756 1425.46,570.031 1426.02,575.189 1426.58,611.736 1427.14,633.695 1427.7,620.764 1428.26,607.291 1428.82,641.609 1429.38,628.775 1429.94,647.5 1430.5,633.096 1431.05,649.406 1431.61,652.682 1432.17,651.423 1432.73,669.392 1433.29,703.263 1433.85,735.205 1434.41,751.525 1434.97,716.223 1435.53,682.77 1436.09,694.868 1436.65,695.154 1437.21,680.969 1437.77,662.616 1438.33,693.705 1438.88,661.387 1439.44,696.232 1440,679.936 1440.56,663.313 1441.12,646.241 1441.68,649.569 1442.24,618.988 1442.8,624.345 1443.36,629.166 1443.92,617.639 1444.48,639.333 1445.04,641.792 1445.6,628.731 1446.15,666.323 1446.71,698.784 1447.27,713.653 1447.83,743.93 1448.39,756.082 1448.95,704.206 1449.51,685.063 1450.07,683.154 1450.63,686.268 1451.19,701.351 1451.75,719.89 1452.31,734.554 1452.87,731.561 1453.42,711.663 1453.98,707.989 1454.54,708.753 1455.1,723.845 1455.66,706.699 1456.22,721.013 1456.78,717.96 1457.34,695.613 1457.9,677.808 1458.46,661.108 1459.02,662.615 1459.58,709.607 1460.14,738.683 1460.7,782.972 1461.25,710.948 1461.81,674.264 1462.37,706.759 1462.93,705.304 1463.49,675.061 1464.05,674.506 1464.61,691.099 1465.17,705.843 1465.73,689.349 1466.29,685.691 1466.85,685.251 1467.41,703.584 1467.97,722.708 1468.52,690.648 1469.08,673.876 1469.64,692.782 1470.2,642.007 1470.76,691.774 1471.32,677.202 1471.88,662.997 1472.44,648.209 1473,663.963 1473.56,697.208 1474.12,651.879 1474.68,670.18 1475.24,674.04 1475.79,675.613 1476.35,643.198 1476.91,662.223 1477.47,675.206 1478.03,673.797 1478.59,676.676 1479.15,694.973 1479.71,695.336 1480.27,695.608 1480.83,695.819 1481.39,731.423 1481.95,735.272 1482.51,750.788 1483.07,765.892 1483.62,747.298 1484.18,728.31 1484.74,694.992 1485.3,681.206 1485.86,661.113 1486.42,676.544 1486.98,676.769 1487.54,658.015 1488.1,724.711 1488.66,709.567 1489.22,726.34 1489.78,724.9 1490.34,738.999 1490.89,783.456 1491.45,761.26 1492.01,756.974 1492.57,767.354 1493.13,762.106 1493.69,773.282 1494.25,749.294 1494.81,760.562 1495.37,754.583 1495.93,800.056 1496.49,796.494 1497.05,762.768 1497.61,757.545 1498.16,737.107 1498.72,734.717 1499.28,683.27 1499.84,716.835 1500.4,712.277 1500.96,677.34 1501.52,693.227 1502.08,724.066 1502.64,704.569 1503.2,704.34 1503.76,703.461 1504.32,700.585 1504.88,700.977 1505.44,684.356 1505.99,668.202 1506.55,633.243 1507.11,652.753 1507.67,668.653 1508.23,672.386 1508.79,639.592 1509.35,638.57 1509.91,653.102 1510.47,670.066 1511.03,672.416 1511.59,690.76 1512.15,707.798 1512.71,674.933 1513.26,654.736 1513.82,652.418 1514.38,651.654 1514.94,655.719 1515.5,642.361 1516.06,675.67 1516.62,659.804 1517.18,666.437 1517.74,669.63 1518.3,687.478 1518.86,653.596 1519.42,655.239 1519.98,619.236 1520.53,622.567 1521.09,624.836 1521.65,627.44 1522.21,678.231 1522.77,660.788 1523.33,643.767 1523.89,648.243 1524.45,683.176 1525.01,682.737 1525.57,699.219 1526.13,700.818 1526.69,701.918 1527.25,736.456 1527.81,728.629 1528.36,743.372 1528.92,706.51 1529.48,688.242 1530.04,686.317 1530.6,685.626 1531.16,685.787 1531.72,635.489 1532.28,655.882 1532.84,678.373 1533.4,644.283 1533.96,659.457 1534.52,664.508 1535.08,682.972 1535.63,700.017 1536.19,698.408 1536.75,699.082 1537.31,715.076 1537.87,697.024 1538.43,694.507 1538.99,698.333 1539.55,663.902 1540.11,679.941 1540.67,679.922 1541.23,679.051 1541.79,710.372 1542.35,709.282 1542.9,692.129 1543.46,691.97 1544.02,656.297 1544.58,689.792 1545.14,708.802 1545.7,705.009 1546.26,733.518 1546.82,732.262 1547.38,698.06 1547.94,698.044 1548.5,667.313 1549.06,699.404 1549.62,712.129 1550.18,727.146 1550.73,711.223 1551.29,713.814 1551.85,711.669 1552.41,659.053 1552.97,641.264 1553.53,659.072 1554.09,645.11 1554.65,648.441 1555.21,653.526 1555.77,656.249 1556.33,655.62 1556.89,660.993 1557.45,648.656 1558,632.27 1558.56,633.096 1559.12,632.224 1559.68,653.405 1560.24,670.811 1560.8,674.338 1561.36,678.359 1561.92,691.967 1562.48,680.257 1563.04,679.551 1563.6,681.351 1564.16,680.211 1564.72,679.107 1565.28,676.579 1565.83,645.578 1566.39,665.389 1566.95,650.648 1567.51,619.424 1568.07,623.461 1568.63,642.601 1569.19,627.553 1569.75,616.893 1570.31,636.49 1570.87,638.224 1571.43,674.196 1571.99,661.441 1572.55,679.031 1573.1,684.424 1573.66,671.607 1574.22,671.93 1574.78,687.839 1575.34,685.405 1575.9,652.761 1576.46,669.464 1577.02,668.935 1577.58,715.4 1578.14,715.363 1578.7,715.963 1579.26,700.777 1579.82,668.438 1580.37,668.831 1580.93,671.376 1581.49,691.367 1582.05,706.149 1582.61,692.882 1583.17,723.491 1583.73,718.904 1584.29,699.713 1584.85,698.431 1585.41,711.59 1585.97,713.912 1586.53,713.098 1587.09,712.021 1587.65,690.203 1588.2,686.425 1588.76,682.179 1589.32,730.809 1589.88,742.93 1590.44,679.298 1591,665.157 1591.56,665.06 1592.12,667.177 1592.68,714.581 1593.24,727.102 1593.8,709.53 1594.36,691.758 1594.92,742.213 1595.47,707.586 1596.03,709.854 1596.59,694.767 1597.15,711.939 1597.71,759.042 1598.27,741.206 1598.83,754.27 1599.39,748.838 1599.95,762.858 1600.51,756.641 1601.07,732.257 1601.63,781.787 1602.19,759.786 1602.74,790.994 1603.3,787.939 1603.86,779.107 1604.42,758.287 1604.98,785.141 1605.54,781.817 1606.1,795.436 1606.66,803.686 1607.22,812.606 1607.78,823.136 1608.34,814.156 1608.9,810.417 1609.46,805.761 1610.02,801.144 1610.57,810.677 1611.13,772.486 1611.69,762.761 1612.25,757.495 1612.81,723.665 1613.37,668.447 1613.93,685.475 1614.49,652.479 1615.05,638.045 1615.61,623.123 1616.17,628.061 1616.73,647.589 1617.29,650.673 1617.84,638.575 1618.4,641.303 1618.96,628.721 1619.52,647.375 1620.08,651.869 1620.64,620.428 1621.2,635.369 1621.76,587.056 1622.32,593.838 1622.88,581.102 1623.44,585.839 1624,559.579 1624.56,581.998 1625.11,602.46 1625.67,605.314 1626.23,642.246 1626.79,642.425 1627.35,659.385 1627.91,677.239 1628.47,675.545 1629.03,676.339 1629.59,678.746 1630.15,650.077 1630.71,650.871 1631.27,654.49 1631.83,667.174 1632.39,648.967 1632.94,649.477 1633.5,665.055 1634.06,651.334 1634.62,652.636 1635.18,621.921 1635.74,640.908 1636.3,660.892 1636.86,661.779 1637.42,745.373 1637.98,730.327 1638.54,743.053 1639.1,773.77 1639.66,798.885 1640.21,774.084 1640.77,752.999 1641.33,747.328 1641.89,742.079 1642.45,741.998 1643.01,739.447 1643.57,737.925 1644.13,751.524 1644.69,781.999 1645.25,791.677 1645.81,723.78 1646.37,709.563 1646.93,658.114 1647.48,692.808 1648.04,693.862 1648.6,709.406 1649.16,705.818 1649.72,688.655 1650.28,669.736 1650.84,669.731 1651.4,653.651 1651.96,634.732 1652.52,652.853 1653.08,670.761 1653.64,721.634 1654.2,705.002 1654.76,704.58 1655.31,717.389 1655.87,671.151 1656.43,656.271 1656.99,656.352 1657.55,659.538 1658.11,676.259 1658.67,659.936 1659.23,678.018 1659.79,676.421 1660.35,678.84 1660.91,679.958 1661.47,680.579 1662.03,695.696 1662.58,727.14 1663.14,756.908 1663.7,735.543 1664.26,717.239 1664.82,728.699 1665.38,759.091 1665.94,705.239 1666.5,701.786 1667.06,702.217 1667.62,735.519 1668.18,750.645 1668.74,750.065 1669.3,746.316 1669.85,744.201 1670.41,756.345 1670.97,749.697 1671.53,742.746 1672.09,719.487 1672.65,735.237 1673.21,732.069 1673.77,741.843 1674.33,771.11 1674.89,734.977 1675.45,750.055 1676.01,763.039 1676.57,759.929 1677.13,742.015 1677.68,704.42 1678.24,735.263 1678.8,735.201 1679.36,730.213 1679.92,745.422 1680.48,742.503 1681.04,724.123 1681.6,706.027 1682.16,673.112 1682.72,673.702 1683.28,674.288 1683.84,671.542 1684.4,635.211 1684.95,620.138 1685.51,637.789 1686.07,621.12 1686.63,625.468 1687.19,613.273 1687.75,651.992 1688.31,668.301 1688.87,669.382 1689.43,619.547 1689.99,626.698 1690.55,625.798 1691.11,626.418 1691.67,612.461 1692.23,630.333 1692.78,614.422 1693.34,617.399 1693.9,604.824 1694.46,577.725 1695.02,580.54 1695.58,584.647 1696.14,601.974 1696.7,578.595 1697.26,585.965 1697.82,574.605 1698.38,602.765 1698.94,626.41 1699.5,651.618 1700.05,638.578 1700.61,639.595 1701.17,673.495 1701.73,626.192 1702.29,612.379 1702.85,615.287 1703.41,635.925 1703.97,672.686 1704.53,672.003 1705.09,688.139 1705.65,686.251 1706.21,702.382 1706.77,734.792 1707.32,732.502 1707.88,742.596 1708.44,743.896 1709,744.124 1709.56,769.656 1710.12,765.533 1710.68,732.802 1711.24,748.214 1711.8,728.324 1712.36,657.934 1712.92,676.48 1713.48,695.637 1714.04,711.639 1714.6,741.146 1715.15,726.964 1715.71,755.969 1716.27,750.781 1716.83,748.822 1717.39,728.724 1717.95,707.735 1718.51,707.752 1719.07,735.927 1719.63,686.826 1720.19,687.934 1720.75,654.257 1721.31,655.031 1721.87,638.389 1722.42,642.946 1722.98,642.493 1723.54,645.326 1724.1,662.845 1724.66,649.58 1725.22,637.415 1725.78,637.591 1726.34,641.887 1726.9,610.028 1727.46,611.225 1728.02,601.922 1728.58,606.903 1729.14,625.372 1729.69,592.052 1730.25,609.405 1730.81,628.161 1731.37,649.135 1731.93,669.485 1732.49,638.142 1733.05,655.497 1733.61,688.322 1734.17,688.058 1734.73,722.249 1735.29,721.898 1735.85,717.851 1736.41,698.644 1736.97,685.102 1737.52,701.099 1738.08,717.602 1738.64,702.276 1739.2,719.614 1739.76,718.021 1740.32,686.298 1740.88,699.607 1741.44,680.51 1742,711.586 1742.56,741.2 1743.12,739.345 1743.68,750.655 1744.24,699.951 1744.79,683.672 1745.35,697.134 1745.91,699.3 1746.47,697.93 1747.03,714.391 1747.59,699.722 1748.15,746.729 1748.71,729.358 1749.27,711.039 1749.83,711.706 1750.39,728.043 1750.95,707.604 1751.51,734.562 1752.06,729.144 1752.62,756.693 1753.18,738.217 1753.74,700.576 1754.3,713.407 1754.86,726.884 1755.42,726.144 1755.98,723.275 1756.54,723.56 1757.1,688.441 1757.66,673.54 1758.22,656.946 1758.78,644.162 1759.34,677.829 1759.89,662.097 1760.45,666.419 1761.01,668.626 1761.57,656.052 1762.13,656.423 1762.69,658.318 1763.25,658.463 1763.81,626.592 1764.37,613.308 1764.93,617.294 1765.49,620.812 1766.05,608.635 1766.61,592.904 1767.16,629.172 1767.72,646.922 1768.28,630.276 1768.84,650.101 1769.4,638.058 1769.96,609.71 1770.52,660.19 1771.08,676.292 1771.64,678.858 1772.2,649.135 1772.76,657.744 1773.32,660.115 1773.88,674.145 1774.43,675.67 1774.99,691.676 1775.55,689.49 1776.11,669.598 1776.67,701.486 1777.23,720.031 1777.79,717.645 1778.35,716.68 1778.91,717.271 1779.47,713.793 1780.03,745.167 1780.59,726.822 1781.15,725.782 1781.71,725.647 1782.26,703.824 1782.82,721.511 1783.38,718.176 1783.94,697.281 1784.5,682.435 1785.06,681.259 1785.62,648.147 1786.18,631.905 1786.74,635.965 1787.3,670.597 1787.86,669.063 1788.42,651.476 1788.98,669.512 1789.53,668.852 1790.09,670.571 1790.65,700.194 1791.21,698.036 1791.77,699.114 1792.33,645.194 1792.89,632.224 1793.45,650.572 1794.01,652.44 1794.57,652.557 1795.13,654.633 1795.69,675.581 1796.25,676.26 1796.8,674.821 1797.36,674.153 1797.92,674.39 1798.48,607.126 1799.04,593.896 1799.6,600.472 1800.16,571.45 1800.72,607.33 1801.28,625.416 1801.84,598.281 1802.4,600.713 1802.96,621.614 1803.52,639.515 1804.08,609.934 1804.63,615.391 1805.19,635.231 1805.75,651.679 1806.31,672.612 1806.87,709.569 1807.43,707.057 1807.99,673.057 1808.55,659.289 1809.11,677.446 1809.67,678.022 1810.23,680.383 1810.79,679.735 1811.35,680.772 1811.9,710.557 1812.46,727.461 1813.02,726.663 1813.58,707.983 1814.14,705.926 1814.7,686.686 1815.26,686.54 1815.82,687.889 1816.38,701.508 1816.94,699.836 1817.5,695.986 1818.06,708.175 1818.62,673.825 1819.18,658.36 1819.73,690.012 1820.29,720.012 1820.85,700.637 1821.41,697.832 1821.97,697.884 1822.53,693.852 1823.09,711.606 1823.65,691.173 1824.21,691.249 1824.77,689.045 1825.33,704.796 1825.89,701.227 1826.45,667.601 1827,685.739 1827.56,700.525 1828.12,667.924 1828.68,669.697 1829.24,669.963 1829.8,667.149 1830.36,636.232 1830.92,638.128 1831.48,636.806 1832.04,655.052 1832.6,654.706 1833.16,640.206 1833.72,644.547 1834.27,646.374 1834.83,646.304 1835.39,649.91 1835.95,684.158 1836.51,668.323 1837.07,702.143 1837.63,718.241 1838.19,699.265 \"/>\n<path clip-path=\"url(#clip393)\" d=\"M720.247 692.471 L720.806 692.471 L721.365 692.471 L721.924 692.471 L722.484 692.471 L723.043 692.471 L723.602 692.471 L724.161 692.471 L724.721 692.471 L725.28 692.471 L725.839 692.471 L726.398 692.471 L726.958 692.471 L727.517 692.471 L728.076 692.471 L728.635 692.471 L729.195 692.471 L729.754 692.471 L730.313 692.471 L730.872 692.471 L731.432 692.471 L731.991 692.471 L732.55 692.471 L733.109 692.471 L733.669 692.471 L734.228 692.471 L734.787 692.471 L735.346 692.471 L735.906 692.471 L736.465 692.471 L737.024 692.471 L737.583 692.471 L738.143 692.471 L738.702 692.471 L739.261 692.471 L739.82 692.471 L740.38 692.471 L740.939 692.471 L741.498 692.471 L742.057 692.471 L742.617 692.471 L743.176 692.471 L743.735 692.471 L744.294 692.471 L744.854 692.471 L745.413 692.471 L745.972 692.471 L746.531 692.471 L747.091 692.471 L747.65 692.471 L748.209 692.471 L748.768 692.471 L749.328 692.471 L749.887 692.471 L750.446 692.471 L751.005 692.471 L751.565 692.471 L752.124 692.471 L752.683 692.471 L753.242 692.471 L753.802 692.471 L754.361 692.471 L754.92 692.471 L755.479 692.471 L756.039 692.471 L756.598 692.471 L757.157 692.471 L757.716 692.471 L758.276 692.471 L758.835 692.471 L759.394 692.471 L759.953 692.471 L760.513 692.471 L761.072 692.471 L761.631 692.471 L762.19 692.471 L762.75 692.471 L763.309 692.471 L763.868 692.471 L764.427 692.471 L764.987 692.471 L765.546 692.471 L766.105 692.471 L766.664 692.471 L767.224 692.471 L767.783 692.471 L768.342 692.471 L768.901 692.471 L769.461 692.471 L770.02 692.471 L770.579 692.471 L771.138 692.471 L771.698 692.471 L772.257 692.471 L772.816 692.471 L773.375 692.471 L773.935 692.471 L774.494 692.471 L775.053 692.471 L775.612 692.471 L776.172 692.471 L776.731 692.471 L777.29 692.471 L777.849 692.471 L778.409 692.471 L778.968 692.471 L779.527 692.471 L780.086 692.471 L780.646 692.471 L781.205 692.471 L781.764 692.471 L782.323 692.471 L782.883 692.471 L783.442 692.471 L784.001 692.471 L784.56 692.471 L785.12 692.471 L785.679 692.471 L786.238 692.471 L786.797 692.471 L787.357 692.471 L787.916 692.471 L788.475 692.471 L789.034 692.471 L789.594 692.471 L790.153 692.471 L790.712 692.471 L791.271 692.471 L791.831 692.471 L792.39 692.471 L792.949 692.471 L793.508 692.471 L794.068 692.471 L794.627 692.471 L795.186 692.471 L795.745 692.471 L796.305 692.471 L796.864 692.471 L797.423 692.471 L797.982 692.471 L798.542 692.471 L799.101 692.471 L799.66 692.471 L800.219 692.471 L800.779 692.471 L801.338 692.471 L801.897 692.471 L802.456 692.471 L803.016 692.471 L803.575 692.471 L804.134 692.471 L804.693 692.471 L805.253 692.471 L805.812 692.471 L806.371 692.471 L806.931 692.471 L807.49 692.471 L808.049 692.471 L808.608 692.471 L809.168 692.471 L809.727 692.471 L810.286 692.471 L810.845 692.471 L811.405 692.471 L811.964 692.471 L812.523 692.471 L813.082 692.471 L813.642 692.471 L814.201 692.471 L814.76 692.471 L815.319 692.471 L815.879 692.471 L816.438 692.471 L816.997 692.471 L817.556 692.471 L818.116 692.471 L818.675 692.471 L819.234 692.471 L819.793 692.471 L820.353 692.471 L820.912 692.471 L821.471 692.471 L822.03 692.471 L822.59 692.471 L823.149 692.471 L823.708 692.471 L824.267 692.471 L824.827 692.471 L825.386 692.471 L825.945 692.471 L826.504 692.471 L827.064 692.471 L827.623 692.471 L828.182 692.471 L828.741 692.471 L829.301 692.471 L829.86 692.471 L830.419 692.471 L830.978 692.471 L831.538 692.471 L832.097 692.471 L832.656 692.471 L833.215 692.471 L833.775 692.471 L834.334 692.471 L834.893 692.471 L835.452 692.471 L836.012 692.471 L836.571 692.471 L837.13 692.471 L837.689 692.471 L838.249 692.471 L838.808 692.471 L839.367 692.471 L839.926 692.471 L840.486 692.471 L841.045 692.471 L841.604 692.471 L842.163 692.471 L842.723 692.471 L843.282 692.471 L843.841 692.471 L844.4 692.471 L844.96 692.471 L845.519 692.471 L846.078 692.471 L846.637 692.471 L847.197 692.471 L847.756 692.471 L848.315 692.471 L848.874 692.471 L849.434 692.471 L849.993 692.471 L850.552 692.471 L851.111 692.471 L851.671 692.471 L852.23 692.471 L852.789 692.471 L853.348 692.471 L853.908 692.471 L854.467 692.471 L855.026 692.471 L855.585 692.471 L856.145 692.471 L856.704 692.471 L857.263 692.471 L857.822 692.471 L858.382 692.471 L858.941 692.471 L859.5 692.471 L860.059 692.471 L860.619 692.471 L861.178 692.471 L861.737 692.471 L862.296 692.471 L862.856 692.471 L863.415 692.471 L863.974 692.471 L864.533 692.471 L865.093 692.471 L865.652 692.471 L866.211 692.471 L866.77 692.471 L867.33 692.471 L867.889 692.471 L868.448 692.471 L869.007 692.471 L869.567 692.471 L870.126 692.471 L870.685 692.471 L871.244 692.471 L871.804 692.471 L872.363 692.471 L872.922 692.471 L873.481 692.471 L874.041 692.471 L874.6 692.471 L875.159 692.471 L875.718 692.471 L876.278 692.471 L876.837 692.471 L877.396 692.471 L877.955 692.471 L878.515 692.471 L879.074 692.471 L879.633 692.471 L880.192 692.471 L880.752 692.471 L881.311 692.471 L881.87 692.471 L882.429 692.471 L882.989 692.471 L883.548 692.471 L884.107 692.471 L884.666 692.471 L885.226 692.471 L885.785 692.471 L886.344 692.471 L886.903 692.471 L887.463 692.471 L888.022 692.471 L888.581 692.471 L889.14 692.471 L889.7 692.471 L890.259 692.471 L890.818 692.471 L891.377 692.471 L891.937 692.471 L892.496 692.471 L893.055 692.471 L893.614 692.471 L894.174 692.471 L894.733 692.471 L895.292 692.471 L895.851 692.471 L896.411 692.471 L896.97 692.471 L897.529 692.471 L898.088 692.471 L898.648 692.471 L899.207 692.471 L899.766 692.471 L900.325 692.471 L900.885 692.471 L901.444 692.471 L902.003 692.471 L902.562 692.471 L903.122 692.471 L903.681 692.471 L904.24 692.471 L904.799 692.471 L905.359 692.471 L905.918 692.471 L906.477 692.471 L907.036 692.471 L907.596 692.471 L908.155 692.471 L908.714 692.471 L909.273 692.471 L909.833 692.471 L910.392 692.471 L910.951 692.471 L911.51 692.471 L912.07 692.471 L912.629 692.471 L913.188 692.471 L913.747 692.471 L914.307 692.471 L914.866 692.471 L915.425 692.471 L915.984 692.471 L916.544 692.471 L917.103 692.471 L917.662 692.471 L918.221 692.471 L918.781 692.471 L919.34 692.471 L919.899 692.471 L920.458 692.471 L921.018 692.471 L921.577 692.471 L922.136 692.471 L922.695 692.471 L923.255 692.471 L923.814 692.471 L924.373 692.471 L924.932 692.471 L925.492 692.471 L926.051 692.471 L926.61 692.471 L927.169 692.471 L927.729 692.471 L928.288 692.471 L928.847 692.471 L929.406 692.471 L929.966 692.471 L930.525 692.471 L931.084 692.471 L931.644 692.471 L932.203 692.471 L932.762 692.471 L933.321 692.471 L933.881 692.471 L934.44 692.471 L934.999 692.471 L935.558 692.471 L936.118 692.471 L936.677 692.471 L937.236 692.471 L937.795 692.471 L938.355 692.471 L938.914 692.471 L939.473 692.471 L940.032 692.471 L940.592 692.471 L941.151 692.471 L941.71 692.471 L942.269 692.471 L942.829 692.471 L943.388 692.471 L943.947 692.471 L944.506 692.471 L945.066 692.471 L945.625 692.471 L946.184 692.471 L946.743 692.471 L947.303 692.471 L947.862 692.471 L948.421 692.471 L948.98 692.471 L949.54 692.471 L950.099 692.471 L950.658 692.471 L951.217 692.471 L951.777 692.471 L952.336 692.471 L952.895 692.471 L953.454 692.471 L954.014 692.471 L954.573 692.471 L955.132 692.471 L955.691 692.471 L956.251 692.471 L956.81 692.471 L957.369 692.471 L957.928 692.471 L958.488 692.471 L959.047 692.471 L959.606 692.471 L960.165 692.471 L960.725 692.471 L961.284 692.471 L961.843 692.471 L962.402 692.471 L962.962 692.471 L963.521 692.471 L964.08 692.471 L964.639 692.471 L965.199 692.471 L965.758 692.471 L966.317 692.471 L966.876 692.471 L967.436 692.471 L967.995 692.471 L968.554 692.471 L969.113 692.471 L969.673 692.471 L970.232 692.471 L970.791 692.471 L971.35 692.471 L971.91 692.471 L972.469 692.471 L973.028 692.471 L973.587 692.471 L974.147 692.471 L974.706 692.471 L975.265 692.471 L975.824 692.471 L976.384 692.471 L976.943 692.471 L977.502 692.471 L978.061 692.471 L978.621 692.471 L979.18 692.471 L979.739 692.471 L980.298 692.471 L980.858 692.471 L981.417 692.471 L981.976 692.471 L982.535 692.471 L983.095 692.471 L983.654 692.471 L984.213 692.471 L984.772 692.471 L985.332 692.471 L985.891 692.471 L986.45 692.471 L987.009 692.471 L987.569 692.471 L988.128 692.471 L988.687 692.471 L989.246 692.471 L989.806 692.471 L990.365 692.471 L990.924 692.471 L991.483 692.471 L992.043 692.471 L992.602 692.471 L993.161 692.471 L993.72 692.471 L994.28 692.471 L994.839 692.471 L995.398 692.471 L995.957 692.471 L996.517 692.471 L997.076 692.471 L997.635 692.471 L998.194 692.471 L998.754 692.471 L999.313 692.471 L999.872 692.471 L1000.43 692.471 L1000.99 692.471 L1001.55 692.471 L1002.11 692.471 L1002.67 692.471 L1003.23 692.471 L1003.79 692.471 L1004.35 692.471 L1004.91 692.471 L1005.46 692.471 L1006.02 692.471 L1006.58 692.471 L1007.14 692.471 L1007.7 692.471 L1008.26 692.471 L1008.82 692.471 L1009.38 692.471 L1009.94 692.471 L1010.5 692.471 L1011.06 692.471 L1011.62 692.471 L1012.18 692.471 L1012.73 692.471 L1013.29 692.471 L1013.85 692.471 L1014.41 692.471 L1014.97 692.471 L1015.53 692.471 L1016.09 692.471 L1016.65 692.471 L1017.21 692.471 L1017.77 692.471 L1018.33 692.471 L1018.89 692.471 L1019.45 692.471 L1020.01 692.471 L1020.56 692.471 L1021.12 692.471 L1021.68 692.471 L1022.24 692.471 L1022.8 692.471 L1023.36 692.471 L1023.92 692.471 L1024.48 692.471 L1025.04 692.471 L1025.6 692.471 L1026.16 692.471 L1026.72 692.471 L1027.28 692.471 L1027.83 692.471 L1028.39 692.471 L1028.95 692.471 L1029.51 692.471 L1030.07 692.471 L1030.63 692.471 L1031.19 692.471 L1031.75 692.471 L1032.31 692.471 L1032.87 692.471 L1033.43 692.471 L1033.99 692.471 L1034.55 692.471 L1035.1 692.471 L1035.66 692.471 L1036.22 692.471 L1036.78 692.471 L1037.34 692.471 L1037.9 692.471 L1038.46 692.471 L1039.02 692.471 L1039.58 692.471 L1040.14 692.471 L1040.7 692.471 L1041.26 692.471 L1041.82 692.471 L1042.38 692.471 L1042.93 692.471 L1043.49 692.471 L1044.05 692.471 L1044.61 692.471 L1045.17 692.471 L1045.73 692.471 L1046.29 692.471 L1046.85 692.471 L1047.41 692.471 L1047.97 692.471 L1048.53 692.471 L1049.09 692.471 L1049.65 692.471 L1050.2 692.471 L1050.76 692.471 L1051.32 692.471 L1051.88 692.471 L1052.44 692.471 L1053 692.471 L1053.56 692.471 L1054.12 692.471 L1054.68 692.471 L1055.24 692.471 L1055.8 692.471 L1056.36 692.471 L1056.92 692.471 L1057.48 692.471 L1058.03 692.471 L1058.59 692.471 L1059.15 692.471 L1059.71 692.471 L1060.27 692.471 L1060.83 692.471 L1061.39 692.471 L1061.95 692.471 L1062.51 692.471 L1063.07 692.471 L1063.63 692.471 L1064.19 692.471 L1064.75 692.471 L1065.3 692.471 L1065.86 692.471 L1066.42 692.471 L1066.98 692.471 L1067.54 692.471 L1068.1 692.471 L1068.66 692.471 L1069.22 692.471 L1069.78 692.471 L1070.34 692.471 L1070.9 692.471 L1071.46 692.471 L1072.02 692.471 L1072.57 692.471 L1073.13 692.471 L1073.69 692.471 L1074.25 692.471 L1074.81 692.471 L1075.37 692.471 L1075.93 692.471 L1076.49 692.471 L1077.05 692.471 L1077.61 692.471 L1078.17 692.471 L1078.73 692.471 L1079.29 692.471 L1079.85 692.471 L1080.4 692.471 L1080.96 692.471 L1081.52 692.471 L1082.08 692.471 L1082.64 692.471 L1083.2 692.471 L1083.76 692.471 L1084.32 692.471 L1084.88 692.471 L1085.44 692.471 L1086 692.471 L1086.56 692.471 L1087.12 692.471 L1087.67 692.471 L1088.23 692.471 L1088.79 692.471 L1089.35 692.471 L1089.91 692.471 L1090.47 692.471 L1091.03 692.471 L1091.59 692.471 L1092.15 692.471 L1092.71 692.471 L1093.27 692.471 L1093.83 692.471 L1094.39 692.471 L1094.94 692.471 L1095.5 692.471 L1096.06 692.471 L1096.62 692.471 L1097.18 692.471 L1097.74 692.471 L1098.3 692.471 L1098.86 692.471 L1099.42 692.471 L1099.98 692.471 L1100.54 692.471 L1101.1 692.471 L1101.66 692.471 L1102.22 692.471 L1102.77 692.471 L1103.33 692.471 L1103.89 692.471 L1104.45 692.471 L1105.01 692.471 L1105.57 692.471 L1106.13 692.471 L1106.69 692.471 L1107.25 692.471 L1107.81 692.471 L1108.37 692.471 L1108.93 692.471 L1109.49 692.471 L1110.04 692.471 L1110.6 692.471 L1111.16 692.471 L1111.72 692.471 L1112.28 692.471 L1112.84 692.471 L1113.4 692.471 L1113.96 692.471 L1114.52 692.471 L1115.08 692.471 L1115.64 692.471 L1116.2 692.471 L1116.76 692.471 L1117.31 692.471 L1117.87 692.471 L1118.43 692.471 L1118.99 692.471 L1119.55 692.471 L1120.11 692.471 L1120.67 692.471 L1121.23 692.471 L1121.79 692.471 L1122.35 692.471 L1122.91 692.471 L1123.47 692.471 L1124.03 692.471 L1124.59 692.471 L1125.14 692.471 L1125.7 692.471 L1126.26 692.471 L1126.82 692.471 L1127.38 692.471 L1127.94 692.471 L1128.5 692.471 L1129.06 692.471 L1129.62 692.471 L1130.18 692.471 L1130.74 692.471 L1131.3 692.471 L1131.86 692.471 L1132.41 692.471 L1132.97 692.471 L1133.53 692.471 L1134.09 692.471 L1134.65 692.471 L1135.21 692.471 L1135.77 692.471 L1136.33 692.471 L1136.89 692.471 L1137.45 692.471 L1138.01 692.471 L1138.57 692.471 L1139.13 692.471 L1139.68 692.471 L1140.24 692.471 L1140.8 692.471 L1141.36 692.471 L1141.92 692.471 L1142.48 692.471 L1143.04 692.471 L1143.6 692.471 L1144.16 692.471 L1144.72 692.471 L1145.28 692.471 L1145.84 692.471 L1146.4 692.471 L1146.96 692.471 L1147.51 692.471 L1148.07 692.471 L1148.63 692.471 L1149.19 692.471 L1149.75 692.471 L1150.31 692.471 L1150.87 692.471 L1151.43 692.471 L1151.99 692.471 L1152.55 692.471 L1153.11 692.471 L1153.67 692.471 L1154.23 692.471 L1154.78 692.471 L1155.34 692.471 L1155.9 692.471 L1156.46 692.471 L1157.02 692.471 L1157.58 692.471 L1158.14 692.471 L1158.7 692.471 L1159.26 692.471 L1159.82 692.471 L1160.38 692.471 L1160.94 692.471 L1161.5 692.471 L1162.05 692.471 L1162.61 692.471 L1163.17 692.471 L1163.73 692.471 L1164.29 692.471 L1164.85 692.471 L1165.41 692.471 L1165.97 692.471 L1166.53 692.471 L1167.09 692.471 L1167.65 692.471 L1168.21 692.471 L1168.77 692.471 L1169.33 692.471 L1169.88 692.471 L1170.44 692.471 L1171 692.471 L1171.56 692.471 L1172.12 692.471 L1172.68 692.471 L1173.24 692.471 L1173.8 692.471 L1174.36 692.471 L1174.92 692.471 L1175.48 692.471 L1176.04 692.471 L1176.6 692.471 L1177.15 692.471 L1177.71 692.471 L1178.27 692.471 L1178.83 692.471 L1179.39 692.471 L1179.95 692.471 L1180.51 692.471 L1181.07 692.471 L1181.63 692.471 L1182.19 692.471 L1182.75 692.471 L1183.31 692.471 L1183.87 692.471 L1184.43 692.471 L1184.98 692.471 L1185.54 692.471 L1186.1 692.471 L1186.66 692.471 L1187.22 692.471 L1187.78 692.471 L1188.34 692.471 L1188.9 692.471 L1189.46 692.471 L1190.02 692.471 L1190.58 692.471 L1191.14 692.471 L1191.7 692.471 L1192.25 692.471 L1192.81 692.471 L1193.37 692.471 L1193.93 692.471 L1194.49 692.471 L1195.05 692.471 L1195.61 692.471 L1196.17 692.471 L1196.73 692.471 L1197.29 692.471 L1197.85 692.471 L1198.41 692.471 L1198.97 692.471 L1199.52 692.471 L1200.08 692.471 L1200.64 692.471 L1201.2 692.471 L1201.76 692.471 L1202.32 692.471 L1202.88 692.471 L1203.44 692.471 L1204 692.471 L1204.56 692.471 L1205.12 692.471 L1205.68 692.471 L1206.24 692.471 L1206.8 692.471 L1207.35 692.471 L1207.91 692.471 L1208.47 692.471 L1209.03 692.471 L1209.59 692.471 L1210.15 692.471 L1210.71 692.471 L1211.27 692.471 L1211.83 692.471 L1212.39 692.471 L1212.95 692.471 L1213.51 692.471 L1214.07 692.471 L1214.62 692.471 L1215.18 692.471 L1215.74 692.471 L1216.3 692.471 L1216.86 692.471 L1217.42 692.471 L1217.98 692.471 L1218.54 692.471 L1219.1 692.471 L1219.66 692.471 L1220.22 692.471 L1220.78 692.471 L1221.34 692.471 L1221.89 692.471 L1222.45 692.471 L1223.01 692.471 L1223.57 692.471 L1224.13 692.471 L1224.69 692.471 L1225.25 692.471 L1225.81 692.471 L1226.37 692.471 L1226.93 692.471 L1227.49 692.471 L1228.05 692.471 L1228.61 692.471 L1229.17 692.471 L1229.72 692.471 L1230.28 692.471 L1230.84 692.471 L1231.4 692.471 L1231.96 692.471 L1232.52 692.471 L1233.08 692.471 L1233.64 692.471 L1234.2 692.471 L1234.76 692.471 L1235.32 692.471 L1235.88 692.471 L1236.44 692.471 L1236.99 692.471 L1237.55 692.471 L1238.11 692.471 L1238.67 692.471 L1239.23 692.471 L1239.79 692.471 L1240.35 692.471 L1240.91 692.471 L1241.47 692.471 L1242.03 692.471 L1242.59 692.471 L1243.15 692.471 L1243.71 692.471 L1244.26 692.471 L1244.82 692.471 L1245.38 692.471 L1245.94 692.471 L1246.5 692.471 L1247.06 692.471 L1247.62 692.471 L1248.18 692.471 L1248.74 692.471 L1249.3 692.471 L1249.86 692.471 L1250.42 692.471 L1250.98 692.471 L1251.54 692.471 L1252.09 692.471 L1252.65 692.471 L1253.21 692.471 L1253.77 692.471 L1254.33 692.471 L1254.89 692.471 L1255.45 692.471 L1256.01 692.471 L1256.57 692.471 L1257.13 692.471 L1257.69 692.471 L1258.25 692.471 L1258.81 692.471 L1259.36 692.471 L1259.92 692.471 L1260.48 692.471 L1261.04 692.471 L1261.6 692.471 L1262.16 692.471 L1262.72 692.471 L1263.28 692.471 L1263.84 692.471 L1264.4 692.471 L1264.96 692.471 L1265.52 692.471 L1266.08 692.471 L1266.63 692.471 L1267.19 692.471 L1267.75 692.471 L1268.31 692.471 L1268.87 692.471 L1269.43 692.471 L1269.99 692.471 L1270.55 692.471 L1271.11 692.471 L1271.67 692.471 L1272.23 692.471 L1272.79 692.471 L1273.35 692.471 L1273.91 692.471 L1274.46 692.471 L1275.02 692.471 L1275.58 692.471 L1276.14 692.471 L1276.7 692.471 L1277.26 692.471 L1277.82 692.471 L1278.38 692.471 L1278.94 692.471 L1279.5 692.471 L1280.06 692.471 L1280.62 692.471 L1281.18 692.471 L1281.73 692.471 L1282.29 692.471 L1282.85 692.471 L1283.41 692.471 L1283.97 692.471 L1284.53 692.471 L1285.09 692.471 L1285.65 692.471 L1286.21 692.471 L1286.77 692.471 L1287.33 692.471 L1287.89 692.471 L1288.45 692.471 L1289 692.471 L1289.56 692.471 L1290.12 692.471 L1290.68 692.471 L1291.24 692.471 L1291.8 692.471 L1292.36 692.471 L1292.92 692.471 L1293.48 692.471 L1294.04 692.471 L1294.6 692.471 L1295.16 692.471 L1295.72 692.471 L1296.28 692.471 L1296.83 692.471 L1297.39 692.471 L1297.95 692.471 L1298.51 692.471 L1299.07 692.471 L1299.63 692.471 L1300.19 692.471 L1300.75 692.471 L1301.31 692.471 L1301.87 692.471 L1302.43 692.471 L1302.99 692.471 L1303.55 692.471 L1304.1 692.471 L1304.66 692.471 L1305.22 692.471 L1305.78 692.471 L1306.34 692.471 L1306.9 692.471 L1307.46 692.471 L1308.02 692.471 L1308.58 692.471 L1309.14 692.471 L1309.7 692.471 L1310.26 692.471 L1310.82 692.471 L1311.38 692.471 L1311.93 692.471 L1312.49 692.471 L1313.05 692.471 L1313.61 692.471 L1314.17 692.471 L1314.73 692.471 L1315.29 692.471 L1315.85 692.471 L1316.41 692.471 L1316.97 692.471 L1317.53 692.471 L1318.09 692.471 L1318.65 692.471 L1319.2 692.471 L1319.76 692.471 L1320.32 692.471 L1320.88 692.471 L1321.44 692.471 L1322 692.471 L1322.56 692.471 L1323.12 692.471 L1323.68 692.471 L1324.24 692.471 L1324.8 692.471 L1325.36 692.471 L1325.92 692.471 L1326.47 692.471 L1327.03 692.471 L1327.59 692.471 L1328.15 692.471 L1328.71 692.471 L1329.27 692.471 L1329.83 692.471 L1330.39 692.471 L1330.95 692.471 L1331.51 692.471 L1332.07 692.471 L1332.63 692.471 L1333.19 692.471 L1333.75 692.471 L1334.3 692.471 L1334.86 692.471 L1335.42 692.471 L1335.98 692.471 L1336.54 692.471 L1337.1 692.471 L1337.66 692.471 L1338.22 692.471 L1338.78 692.471 L1339.34 692.471 L1339.9 692.471 L1340.46 692.471 L1341.02 692.471 L1341.57 692.471 L1342.13 692.471 L1342.69 692.471 L1343.25 692.471 L1343.81 692.471 L1344.37 692.471 L1344.93 692.471 L1345.49 692.471 L1346.05 692.471 L1346.61 692.471 L1347.17 692.471 L1347.73 692.471 L1348.29 692.471 L1348.84 692.471 L1349.4 692.471 L1349.96 692.471 L1350.52 692.471 L1351.08 692.471 L1351.64 692.471 L1352.2 692.471 L1352.76 692.471 L1353.32 692.471 L1353.88 692.471 L1354.44 692.471 L1355 692.471 L1355.56 692.471 L1356.12 692.471 L1356.67 692.471 L1357.23 692.471 L1357.79 692.471 L1358.35 692.471 L1358.91 692.471 L1359.47 692.471 L1360.03 692.471 L1360.59 692.471 L1361.15 692.471 L1361.71 692.471 L1362.27 692.471 L1362.83 692.471 L1363.39 692.471 L1363.94 692.471 L1364.5 692.471 L1365.06 692.471 L1365.62 692.471 L1366.18 692.471 L1366.74 692.471 L1367.3 692.471 L1367.86 692.471 L1368.42 692.471 L1368.98 692.471 L1369.54 692.471 L1370.1 692.471 L1370.66 692.471 L1371.21 692.471 L1371.77 692.471 L1372.33 692.471 L1372.89 692.471 L1373.45 692.471 L1374.01 692.471 L1374.57 692.471 L1375.13 692.471 L1375.69 692.471 L1376.25 692.471 L1376.81 692.471 L1377.37 692.471 L1377.93 692.471 L1378.49 692.471 L1379.04 692.471 L1379.6 692.471 L1380.16 692.471 L1380.72 692.471 L1381.28 692.471 L1381.84 692.471 L1382.4 692.471 L1382.96 692.471 L1383.52 692.471 L1384.08 692.471 L1384.64 692.471 L1385.2 692.471 L1385.76 692.471 L1386.31 692.471 L1386.87 692.471 L1387.43 692.471 L1387.99 692.471 L1388.55 692.471 L1389.11 692.471 L1389.67 692.471 L1390.23 692.471 L1390.79 692.471 L1391.35 692.471 L1391.91 692.471 L1392.47 692.471 L1393.03 692.471 L1393.58 692.471 L1394.14 692.471 L1394.7 692.471 L1395.26 692.471 L1395.82 692.471 L1396.38 692.471 L1396.94 692.471 L1397.5 692.471 L1398.06 692.471 L1398.62 692.471 L1399.18 692.471 L1399.74 692.471 L1400.3 692.471 L1400.86 692.471 L1401.41 692.471 L1401.97 692.471 L1402.53 692.471 L1403.09 692.471 L1403.65 692.471 L1404.21 692.471 L1404.77 692.471 L1405.33 692.471 L1405.89 692.471 L1406.45 692.471 L1407.01 692.471 L1407.57 692.471 L1408.13 692.471 L1408.68 692.471 L1409.24 692.471 L1409.8 692.471 L1410.36 692.471 L1410.92 692.471 L1411.48 692.471 L1412.04 692.471 L1412.6 692.471 L1413.16 692.471 L1413.72 692.471 L1414.28 692.471 L1414.84 692.471 L1415.4 692.471 L1415.95 692.471 L1416.51 692.471 L1417.07 692.471 L1417.63 692.471 L1418.19 692.471 L1418.75 692.471 L1419.31 692.471 L1419.87 692.471 L1420.43 692.471 L1420.99 692.471 L1421.55 692.471 L1422.11 692.471 L1422.67 692.471 L1423.23 692.471 L1423.78 692.471 L1424.34 692.471 L1424.9 692.471 L1425.46 692.471 L1426.02 692.471 L1426.58 692.471 L1427.14 692.471 L1427.7 692.471 L1428.26 692.471 L1428.82 692.471 L1429.38 692.471 L1429.94 692.471 L1430.5 692.471 L1431.05 692.471 L1431.61 692.471 L1432.17 692.471 L1432.73 692.471 L1433.29 692.471 L1433.85 692.471 L1434.41 692.471 L1434.97 692.471 L1435.53 692.471 L1436.09 692.471 L1436.65 692.471 L1437.21 692.471 L1437.77 692.471 L1438.33 692.471 L1438.88 692.471 L1439.44 692.471 L1440 692.471 L1440.56 692.471 L1441.12 692.471 L1441.68 692.471 L1442.24 692.471 L1442.8 692.471 L1443.36 692.471 L1443.92 692.471 L1444.48 692.471 L1445.04 692.471 L1445.6 692.471 L1446.15 692.471 L1446.71 692.471 L1447.27 692.471 L1447.83 692.471 L1448.39 692.471 L1448.95 692.471 L1449.51 692.471 L1450.07 692.471 L1450.63 692.471 L1451.19 692.471 L1451.75 692.471 L1452.31 692.471 L1452.87 692.471 L1453.42 692.471 L1453.98 692.471 L1454.54 692.471 L1455.1 692.471 L1455.66 692.471 L1456.22 692.471 L1456.78 692.471 L1457.34 692.471 L1457.9 692.471 L1458.46 692.471 L1459.02 692.471 L1459.58 692.471 L1460.14 692.471 L1460.7 692.471 L1461.25 692.471 L1461.81 692.471 L1462.37 692.471 L1462.93 692.471 L1463.49 692.471 L1464.05 692.471 L1464.61 692.471 L1465.17 692.471 L1465.73 692.471 L1466.29 692.471 L1466.85 692.471 L1467.41 692.471 L1467.97 692.471 L1468.52 692.471 L1469.08 692.471 L1469.64 692.471 L1470.2 692.471 L1470.76 692.471 L1471.32 692.471 L1471.88 692.471 L1472.44 692.471 L1473 692.471 L1473.56 692.471 L1474.12 692.471 L1474.68 692.471 L1475.24 692.471 L1475.79 692.471 L1476.35 692.471 L1476.91 692.471 L1477.47 692.471 L1478.03 692.471 L1478.59 692.471 L1479.15 692.471 L1479.71 692.471 L1480.27 692.471 L1480.83 692.471 L1481.39 692.471 L1481.95 692.471 L1482.51 692.471 L1483.07 692.471 L1483.62 692.471 L1484.18 692.471 L1484.74 692.471 L1485.3 692.471 L1485.86 692.471 L1486.42 692.471 L1486.98 692.471 L1487.54 692.471 L1488.1 692.471 L1488.66 692.471 L1489.22 692.471 L1489.78 692.471 L1490.34 692.471 L1490.89 692.471 L1491.45 692.471 L1492.01 692.471 L1492.57 692.471 L1493.13 692.471 L1493.69 692.471 L1494.25 692.471 L1494.81 692.471 L1495.37 692.471 L1495.93 692.471 L1496.49 692.471 L1497.05 692.471 L1497.61 692.471 L1498.16 692.471 L1498.72 692.471 L1499.28 692.471 L1499.84 692.471 L1500.4 692.471 L1500.96 692.471 L1501.52 692.471 L1502.08 692.471 L1502.64 692.471 L1503.2 692.471 L1503.76 692.471 L1504.32 692.471 L1504.88 692.471 L1505.44 692.471 L1505.99 692.471 L1506.55 692.471 L1507.11 692.471 L1507.67 692.471 L1508.23 692.471 L1508.79 692.471 L1509.35 692.471 L1509.91 692.471 L1510.47 692.471 L1511.03 692.471 L1511.59 692.471 L1512.15 692.471 L1512.71 692.471 L1513.26 692.471 L1513.82 692.471 L1514.38 692.471 L1514.94 692.471 L1515.5 692.471 L1516.06 692.471 L1516.62 692.471 L1517.18 692.471 L1517.74 692.471 L1518.3 692.471 L1518.86 692.471 L1519.42 692.471 L1519.98 692.471 L1520.53 692.471 L1521.09 692.471 L1521.65 692.471 L1522.21 692.471 L1522.77 692.471 L1523.33 692.471 L1523.89 692.471 L1524.45 692.471 L1525.01 692.471 L1525.57 692.471 L1526.13 692.471 L1526.69 692.471 L1527.25 692.471 L1527.81 692.471 L1528.36 692.471 L1528.92 692.471 L1529.48 692.471 L1530.04 692.471 L1530.6 692.471 L1531.16 692.471 L1531.72 692.471 L1532.28 692.471 L1532.84 692.471 L1533.4 692.471 L1533.96 692.471 L1534.52 692.471 L1535.08 692.471 L1535.63 692.471 L1536.19 692.471 L1536.75 692.471 L1537.31 692.471 L1537.87 692.471 L1538.43 692.471 L1538.99 692.471 L1539.55 692.471 L1540.11 692.471 L1540.67 692.471 L1541.23 692.471 L1541.79 692.471 L1542.35 692.471 L1542.9 692.471 L1543.46 692.471 L1544.02 692.471 L1544.58 692.471 L1545.14 692.471 L1545.7 692.471 L1546.26 692.471 L1546.82 692.471 L1547.38 692.471 L1547.94 692.471 L1548.5 692.471 L1549.06 692.471 L1549.62 692.471 L1550.18 692.471 L1550.73 692.471 L1551.29 692.471 L1551.85 692.471 L1552.41 692.471 L1552.97 692.471 L1553.53 692.471 L1554.09 692.471 L1554.65 692.471 L1555.21 692.471 L1555.77 692.471 L1556.33 692.471 L1556.89 692.471 L1557.45 692.471 L1558 692.471 L1558.56 692.471 L1559.12 692.471 L1559.68 692.471 L1560.24 692.471 L1560.8 692.471 L1561.36 692.471 L1561.92 692.471 L1562.48 692.471 L1563.04 692.471 L1563.6 692.471 L1564.16 692.471 L1564.72 692.471 L1565.28 692.471 L1565.83 692.471 L1566.39 692.471 L1566.95 692.471 L1567.51 692.471 L1568.07 692.471 L1568.63 692.471 L1569.19 692.471 L1569.75 692.471 L1570.31 692.471 L1570.87 692.471 L1571.43 692.471 L1571.99 692.471 L1572.55 692.471 L1573.1 692.471 L1573.66 692.471 L1574.22 692.471 L1574.78 692.471 L1575.34 692.471 L1575.9 692.471 L1576.46 692.471 L1577.02 692.471 L1577.58 692.471 L1578.14 692.471 L1578.7 692.471 L1579.26 692.471 L1579.82 692.471 L1580.37 692.471 L1580.93 692.471 L1581.49 692.471 L1582.05 692.471 L1582.61 692.471 L1583.17 692.471 L1583.73 692.471 L1584.29 692.471 L1584.85 692.471 L1585.41 692.471 L1585.97 692.471 L1586.53 692.471 L1587.09 692.471 L1587.65 692.471 L1588.2 692.471 L1588.76 692.471 L1589.32 692.471 L1589.88 692.471 L1590.44 692.471 L1591 692.471 L1591.56 692.471 L1592.12 692.471 L1592.68 692.471 L1593.24 692.471 L1593.8 692.471 L1594.36 692.471 L1594.92 692.471 L1595.47 692.471 L1596.03 692.471 L1596.59 692.471 L1597.15 692.471 L1597.71 692.471 L1598.27 692.471 L1598.83 692.471 L1599.39 692.471 L1599.95 692.471 L1600.51 692.471 L1601.07 692.471 L1601.63 692.471 L1602.19 692.471 L1602.74 692.471 L1603.3 692.471 L1603.86 692.471 L1604.42 692.471 L1604.98 692.471 L1605.54 692.471 L1606.1 692.471 L1606.66 692.471 L1607.22 692.471 L1607.78 692.471 L1608.34 692.471 L1608.9 692.471 L1609.46 692.471 L1610.02 692.471 L1610.57 692.471 L1611.13 692.471 L1611.69 692.471 L1612.25 692.471 L1612.81 692.471 L1613.37 692.471 L1613.93 692.471 L1614.49 692.471 L1615.05 692.471 L1615.61 692.471 L1616.17 692.471 L1616.73 692.471 L1617.29 692.471 L1617.84 692.471 L1618.4 692.471 L1618.96 692.471 L1619.52 692.471 L1620.08 692.471 L1620.64 692.471 L1621.2 692.471 L1621.76 692.471 L1622.32 692.471 L1622.88 692.471 L1623.44 692.471 L1624 692.471 L1624.56 692.471 L1625.11 692.471 L1625.67 692.471 L1626.23 692.471 L1626.79 692.471 L1627.35 692.471 L1627.91 692.471 L1628.47 692.471 L1629.03 692.471 L1629.59 692.471 L1630.15 692.471 L1630.71 692.471 L1631.27 692.471 L1631.83 692.471 L1632.39 692.471 L1632.94 692.471 L1633.5 692.471 L1634.06 692.471 L1634.62 692.471 L1635.18 692.471 L1635.74 692.471 L1636.3 692.471 L1636.86 692.471 L1637.42 692.471 L1637.98 692.471 L1638.54 692.471 L1639.1 692.471 L1639.66 692.471 L1640.21 692.471 L1640.77 692.471 L1641.33 692.471 L1641.89 692.471 L1642.45 692.471 L1643.01 692.471 L1643.57 692.471 L1644.13 692.471 L1644.69 692.471 L1645.25 692.471 L1645.81 692.471 L1646.37 692.471 L1646.93 692.471 L1647.48 692.471 L1648.04 692.471 L1648.6 692.471 L1649.16 692.471 L1649.72 692.471 L1650.28 692.471 L1650.84 692.471 L1651.4 692.471 L1651.96 692.471 L1652.52 692.471 L1653.08 692.471 L1653.64 692.471 L1654.2 692.471 L1654.76 692.471 L1655.31 692.471 L1655.87 692.471 L1656.43 692.471 L1656.99 692.471 L1657.55 692.471 L1658.11 692.471 L1658.67 692.471 L1659.23 692.471 L1659.79 692.471 L1660.35 692.471 L1660.91 692.471 L1661.47 692.471 L1662.03 692.471 L1662.58 692.471 L1663.14 692.471 L1663.7 692.471 L1664.26 692.471 L1664.82 692.471 L1665.38 692.471 L1665.94 692.471 L1666.5 692.471 L1667.06 692.471 L1667.62 692.471 L1668.18 692.471 L1668.74 692.471 L1669.3 692.471 L1669.85 692.471 L1670.41 692.471 L1670.97 692.471 L1671.53 692.471 L1672.09 692.471 L1672.65 692.471 L1673.21 692.471 L1673.77 692.471 L1674.33 692.471 L1674.89 692.471 L1675.45 692.471 L1676.01 692.471 L1676.57 692.471 L1677.13 692.471 L1677.68 692.471 L1678.24 692.471 L1678.8 692.471 L1679.36 692.471 L1679.92 692.471 L1680.48 692.471 L1681.04 692.471 L1681.6 692.471 L1682.16 692.471 L1682.72 692.471 L1683.28 692.471 L1683.84 692.471 L1684.4 692.471 L1684.95 692.471 L1685.51 692.471 L1686.07 692.471 L1686.63 692.471 L1687.19 692.471 L1687.75 692.471 L1688.31 692.471 L1688.87 692.471 L1689.43 692.471 L1689.99 692.471 L1690.55 692.471 L1691.11 692.471 L1691.67 692.471 L1692.23 692.471 L1692.78 692.471 L1693.34 692.471 L1693.9 692.471 L1694.46 692.471 L1695.02 692.471 L1695.58 692.471 L1696.14 692.471 L1696.7 692.471 L1697.26 692.471 L1697.82 692.471 L1698.38 692.471 L1698.94 692.471 L1699.5 692.471 L1700.05 692.471 L1700.61 692.471 L1701.17 692.471 L1701.73 692.471 L1702.29 692.471 L1702.85 692.471 L1703.41 692.471 L1703.97 692.471 L1704.53 692.471 L1705.09 692.471 L1705.65 692.471 L1706.21 692.471 L1706.77 692.471 L1707.32 692.471 L1707.88 692.471 L1708.44 692.471 L1709 692.471 L1709.56 692.471 L1710.12 692.471 L1710.68 692.471 L1711.24 692.471 L1711.8 692.471 L1712.36 692.471 L1712.92 692.471 L1713.48 692.471 L1714.04 692.471 L1714.6 692.471 L1715.15 692.471 L1715.71 692.471 L1716.27 692.471 L1716.83 692.471 L1717.39 692.471 L1717.95 692.471 L1718.51 692.471 L1719.07 692.471 L1719.63 692.471 L1720.19 692.471 L1720.75 692.471 L1721.31 692.471 L1721.87 692.471 L1722.42 692.471 L1722.98 692.471 L1723.54 692.471 L1724.1 692.471 L1724.66 692.471 L1725.22 692.471 L1725.78 692.471 L1726.34 692.471 L1726.9 692.471 L1727.46 692.471 L1728.02 692.471 L1728.58 692.471 L1729.14 692.471 L1729.69 692.471 L1730.25 692.471 L1730.81 692.471 L1731.37 692.471 L1731.93 692.471 L1732.49 692.471 L1733.05 692.471 L1733.61 692.471 L1734.17 692.471 L1734.73 692.471 L1735.29 692.471 L1735.85 692.471 L1736.41 692.471 L1736.97 692.471 L1737.52 692.471 L1738.08 692.471 L1738.64 692.471 L1739.2 692.471 L1739.76 692.471 L1740.32 692.471 L1740.88 692.471 L1741.44 692.471 L1742 692.471 L1742.56 692.471 L1743.12 692.471 L1743.68 692.471 L1744.24 692.471 L1744.79 692.471 L1745.35 692.471 L1745.91 692.471 L1746.47 692.471 L1747.03 692.471 L1747.59 692.471 L1748.15 692.471 L1748.71 692.471 L1749.27 692.471 L1749.83 692.471 L1750.39 692.471 L1750.95 692.471 L1751.51 692.471 L1752.06 692.471 L1752.62 692.471 L1753.18 692.471 L1753.74 692.471 L1754.3 692.471 L1754.86 692.471 L1755.42 692.471 L1755.98 692.471 L1756.54 692.471 L1757.1 692.471 L1757.66 692.471 L1758.22 692.471 L1758.78 692.471 L1759.34 692.471 L1759.89 692.471 L1760.45 692.471 L1761.01 692.471 L1761.57 692.471 L1762.13 692.471 L1762.69 692.471 L1763.25 692.471 L1763.81 692.471 L1764.37 692.471 L1764.93 692.471 L1765.49 692.471 L1766.05 692.471 L1766.61 692.471 L1767.16 692.471 L1767.72 692.471 L1768.28 692.471 L1768.84 692.471 L1769.4 692.471 L1769.96 692.471 L1770.52 692.471 L1771.08 692.471 L1771.64 692.471 L1772.2 692.471 L1772.76 692.471 L1773.32 692.471 L1773.88 692.471 L1774.43 692.471 L1774.99 692.471 L1775.55 692.471 L1776.11 692.471 L1776.67 692.471 L1777.23 692.471 L1777.79 692.471 L1778.35 692.471 L1778.91 692.471 L1779.47 692.471 L1780.03 692.471 L1780.59 692.471 L1781.15 692.471 L1781.71 692.471 L1782.26 692.471 L1782.82 692.471 L1783.38 692.471 L1783.94 692.471 L1784.5 692.471 L1785.06 692.471 L1785.62 692.471 L1786.18 692.471 L1786.74 692.471 L1787.3 692.471 L1787.86 692.471 L1788.42 692.471 L1788.98 692.471 L1789.53 692.471 L1790.09 692.471 L1790.65 692.471 L1791.21 692.471 L1791.77 692.471 L1792.33 692.471 L1792.89 692.471 L1793.45 692.471 L1794.01 692.471 L1794.57 692.471 L1795.13 692.471 L1795.69 692.471 L1796.25 692.471 L1796.8 692.471 L1797.36 692.471 L1797.92 692.471 L1798.48 692.471 L1799.04 692.471 L1799.6 692.471 L1800.16 692.471 L1800.72 692.471 L1801.28 692.471 L1801.84 692.471 L1802.4 692.471 L1802.96 692.471 L1803.52 692.471 L1804.08 692.471 L1804.63 692.471 L1805.19 692.471 L1805.75 692.471 L1806.31 692.471 L1806.87 692.471 L1807.43 692.471 L1807.99 692.471 L1808.55 692.471 L1809.11 692.471 L1809.67 692.471 L1810.23 692.471 L1810.79 692.471 L1811.35 692.471 L1811.9 692.471 L1812.46 692.471 L1813.02 692.471 L1813.58 692.471 L1814.14 692.471 L1814.7 692.471 L1815.26 692.471 L1815.82 692.471 L1816.38 692.471 L1816.94 692.471 L1817.5 692.471 L1818.06 692.471 L1818.62 692.471 L1819.18 692.471 L1819.73 692.471 L1820.29 692.471 L1820.85 692.471 L1821.41 692.471 L1821.97 692.471 L1822.53 692.471 L1823.09 692.471 L1823.65 692.471 L1824.21 692.471 L1824.77 692.471 L1825.33 692.471 L1825.89 692.471 L1826.45 692.471 L1827 692.471 L1827.56 692.471 L1828.12 692.471 L1828.68 692.471 L1829.24 692.471 L1829.8 692.471 L1830.36 692.471 L1830.92 692.471 L1831.48 692.471 L1832.04 692.471 L1832.6 692.471 L1833.16 692.471 L1833.72 692.471 L1834.27 692.471 L1834.83 692.471 L1835.39 692.471 L1835.95 692.471 L1836.51 692.471 L1837.07 692.471 L1837.63 692.471 L1838.19 692.471 L1838.19 683.197 L1837.63 683.197 L1837.07 683.197 L1836.51 683.197 L1835.95 683.197 L1835.39 683.197 L1834.83 683.197 L1834.27 683.197 L1833.72 683.197 L1833.16 683.197 L1832.6 683.197 L1832.04 683.197 L1831.48 683.197 L1830.92 683.197 L1830.36 683.197 L1829.8 683.197 L1829.24 683.197 L1828.68 683.197 L1828.12 683.197 L1827.56 683.197 L1827 683.197 L1826.45 683.197 L1825.89 683.197 L1825.33 683.197 L1824.77 683.197 L1824.21 683.197 L1823.65 683.197 L1823.09 683.197 L1822.53 683.197 L1821.97 683.197 L1821.41 683.197 L1820.85 683.197 L1820.29 683.197 L1819.73 683.197 L1819.18 683.197 L1818.62 683.197 L1818.06 683.197 L1817.5 683.197 L1816.94 683.197 L1816.38 683.197 L1815.82 683.197 L1815.26 683.197 L1814.7 683.197 L1814.14 683.197 L1813.58 683.197 L1813.02 683.197 L1812.46 683.197 L1811.9 683.197 L1811.35 683.197 L1810.79 683.197 L1810.23 683.197 L1809.67 683.197 L1809.11 683.197 L1808.55 683.197 L1807.99 683.197 L1807.43 683.197 L1806.87 683.197 L1806.31 683.197 L1805.75 683.197 L1805.19 683.197 L1804.63 683.197 L1804.08 683.197 L1803.52 683.197 L1802.96 683.197 L1802.4 683.197 L1801.84 683.197 L1801.28 683.197 L1800.72 683.197 L1800.16 683.197 L1799.6 683.197 L1799.04 683.197 L1798.48 683.197 L1797.92 683.197 L1797.36 683.197 L1796.8 683.197 L1796.25 683.197 L1795.69 683.197 L1795.13 683.197 L1794.57 683.197 L1794.01 683.197 L1793.45 683.197 L1792.89 683.197 L1792.33 683.197 L1791.77 683.197 L1791.21 683.197 L1790.65 683.197 L1790.09 683.197 L1789.53 683.197 L1788.98 683.197 L1788.42 683.197 L1787.86 683.197 L1787.3 683.197 L1786.74 683.197 L1786.18 683.197 L1785.62 683.197 L1785.06 683.197 L1784.5 683.197 L1783.94 683.197 L1783.38 683.197 L1782.82 683.197 L1782.26 683.197 L1781.71 683.197 L1781.15 683.197 L1780.59 683.197 L1780.03 683.197 L1779.47 683.197 L1778.91 683.197 L1778.35 683.197 L1777.79 683.197 L1777.23 683.197 L1776.67 683.197 L1776.11 683.197 L1775.55 683.197 L1774.99 683.197 L1774.43 683.197 L1773.88 683.197 L1773.32 683.197 L1772.76 683.197 L1772.2 683.197 L1771.64 683.197 L1771.08 683.197 L1770.52 683.197 L1769.96 683.197 L1769.4 683.197 L1768.84 683.197 L1768.28 683.197 L1767.72 683.197 L1767.16 683.197 L1766.61 683.197 L1766.05 683.197 L1765.49 683.197 L1764.93 683.197 L1764.37 683.197 L1763.81 683.197 L1763.25 683.197 L1762.69 683.197 L1762.13 683.197 L1761.57 683.197 L1761.01 683.197 L1760.45 683.197 L1759.89 683.197 L1759.34 683.197 L1758.78 683.197 L1758.22 683.197 L1757.66 683.197 L1757.1 683.197 L1756.54 683.197 L1755.98 683.197 L1755.42 683.197 L1754.86 683.197 L1754.3 683.197 L1753.74 683.197 L1753.18 683.197 L1752.62 683.197 L1752.06 683.197 L1751.51 683.197 L1750.95 683.197 L1750.39 683.197 L1749.83 683.197 L1749.27 683.197 L1748.71 683.197 L1748.15 683.197 L1747.59 683.197 L1747.03 683.197 L1746.47 683.197 L1745.91 683.197 L1745.35 683.197 L1744.79 683.197 L1744.24 683.197 L1743.68 683.197 L1743.12 683.197 L1742.56 683.197 L1742 683.197 L1741.44 683.197 L1740.88 683.197 L1740.32 683.197 L1739.76 683.197 L1739.2 683.197 L1738.64 683.197 L1738.08 683.197 L1737.52 683.197 L1736.97 683.197 L1736.41 683.197 L1735.85 683.197 L1735.29 683.197 L1734.73 683.197 L1734.17 683.197 L1733.61 683.197 L1733.05 683.197 L1732.49 683.197 L1731.93 683.197 L1731.37 683.197 L1730.81 683.197 L1730.25 683.197 L1729.69 683.197 L1729.14 683.197 L1728.58 683.197 L1728.02 683.197 L1727.46 683.197 L1726.9 683.197 L1726.34 683.197 L1725.78 683.197 L1725.22 683.197 L1724.66 683.197 L1724.1 683.197 L1723.54 683.197 L1722.98 683.197 L1722.42 683.197 L1721.87 683.197 L1721.31 683.197 L1720.75 683.197 L1720.19 683.197 L1719.63 683.197 L1719.07 683.197 L1718.51 683.197 L1717.95 683.197 L1717.39 683.197 L1716.83 683.197 L1716.27 683.197 L1715.71 683.197 L1715.15 683.197 L1714.6 683.197 L1714.04 683.197 L1713.48 683.197 L1712.92 683.197 L1712.36 683.197 L1711.8 683.197 L1711.24 683.197 L1710.68 683.197 L1710.12 683.197 L1709.56 683.197 L1709 683.197 L1708.44 683.197 L1707.88 683.197 L1707.32 683.197 L1706.77 683.197 L1706.21 683.197 L1705.65 683.197 L1705.09 683.197 L1704.53 683.197 L1703.97 683.197 L1703.41 683.197 L1702.85 683.197 L1702.29 683.197 L1701.73 683.197 L1701.17 683.197 L1700.61 683.197 L1700.05 683.197 L1699.5 683.197 L1698.94 683.197 L1698.38 683.197 L1697.82 683.197 L1697.26 683.197 L1696.7 683.197 L1696.14 683.197 L1695.58 683.197 L1695.02 683.197 L1694.46 683.197 L1693.9 683.197 L1693.34 683.197 L1692.78 683.197 L1692.23 683.197 L1691.67 683.197 L1691.11 683.197 L1690.55 683.197 L1689.99 683.197 L1689.43 683.197 L1688.87 683.197 L1688.31 683.197 L1687.75 683.197 L1687.19 683.197 L1686.63 683.197 L1686.07 683.197 L1685.51 683.197 L1684.95 683.197 L1684.4 683.197 L1683.84 683.197 L1683.28 683.197 L1682.72 683.197 L1682.16 683.197 L1681.6 683.197 L1681.04 683.197 L1680.48 683.197 L1679.92 683.197 L1679.36 683.197 L1678.8 683.197 L1678.24 683.197 L1677.68 683.197 L1677.13 683.197 L1676.57 683.197 L1676.01 683.197 L1675.45 683.197 L1674.89 683.197 L1674.33 683.197 L1673.77 683.197 L1673.21 683.197 L1672.65 683.197 L1672.09 683.197 L1671.53 683.197 L1670.97 683.197 L1670.41 683.197 L1669.85 683.197 L1669.3 683.197 L1668.74 683.197 L1668.18 683.197 L1667.62 683.197 L1667.06 683.197 L1666.5 683.197 L1665.94 683.197 L1665.38 683.197 L1664.82 683.197 L1664.26 683.197 L1663.7 683.197 L1663.14 683.197 L1662.58 683.197 L1662.03 683.197 L1661.47 683.197 L1660.91 683.197 L1660.35 683.197 L1659.79 683.197 L1659.23 683.197 L1658.67 683.197 L1658.11 683.197 L1657.55 683.197 L1656.99 683.197 L1656.43 683.197 L1655.87 683.197 L1655.31 683.197 L1654.76 683.197 L1654.2 683.197 L1653.64 683.197 L1653.08 683.197 L1652.52 683.197 L1651.96 683.197 L1651.4 683.197 L1650.84 683.197 L1650.28 683.197 L1649.72 683.197 L1649.16 683.197 L1648.6 683.197 L1648.04 683.197 L1647.48 683.197 L1646.93 683.197 L1646.37 683.197 L1645.81 683.197 L1645.25 683.197 L1644.69 683.197 L1644.13 683.197 L1643.57 683.197 L1643.01 683.197 L1642.45 683.197 L1641.89 683.197 L1641.33 683.197 L1640.77 683.197 L1640.21 683.197 L1639.66 683.197 L1639.1 683.197 L1638.54 683.197 L1637.98 683.197 L1637.42 683.197 L1636.86 683.197 L1636.3 683.197 L1635.74 683.197 L1635.18 683.197 L1634.62 683.197 L1634.06 683.197 L1633.5 683.197 L1632.94 683.197 L1632.39 683.197 L1631.83 683.197 L1631.27 683.197 L1630.71 683.197 L1630.15 683.197 L1629.59 683.197 L1629.03 683.197 L1628.47 683.197 L1627.91 683.197 L1627.35 683.197 L1626.79 683.197 L1626.23 683.197 L1625.67 683.197 L1625.11 683.197 L1624.56 683.197 L1624 683.197 L1623.44 683.197 L1622.88 683.197 L1622.32 683.197 L1621.76 683.197 L1621.2 683.197 L1620.64 683.197 L1620.08 683.197 L1619.52 683.197 L1618.96 683.197 L1618.4 683.197 L1617.84 683.197 L1617.29 683.197 L1616.73 683.197 L1616.17 683.197 L1615.61 683.197 L1615.05 683.197 L1614.49 683.197 L1613.93 683.197 L1613.37 683.197 L1612.81 683.197 L1612.25 683.197 L1611.69 683.197 L1611.13 683.197 L1610.57 683.197 L1610.02 683.197 L1609.46 683.197 L1608.9 683.197 L1608.34 683.197 L1607.78 683.197 L1607.22 683.197 L1606.66 683.197 L1606.1 683.197 L1605.54 683.197 L1604.98 683.197 L1604.42 683.197 L1603.86 683.197 L1603.3 683.197 L1602.74 683.197 L1602.19 683.197 L1601.63 683.197 L1601.07 683.197 L1600.51 683.197 L1599.95 683.197 L1599.39 683.197 L1598.83 683.197 L1598.27 683.197 L1597.71 683.197 L1597.15 683.197 L1596.59 683.197 L1596.03 683.197 L1595.47 683.197 L1594.92 683.197 L1594.36 683.197 L1593.8 683.197 L1593.24 683.197 L1592.68 683.197 L1592.12 683.197 L1591.56 683.197 L1591 683.197 L1590.44 683.197 L1589.88 683.197 L1589.32 683.197 L1588.76 683.197 L1588.2 683.197 L1587.65 683.197 L1587.09 683.197 L1586.53 683.197 L1585.97 683.197 L1585.41 683.197 L1584.85 683.197 L1584.29 683.197 L1583.73 683.197 L1583.17 683.197 L1582.61 683.197 L1582.05 683.197 L1581.49 683.197 L1580.93 683.197 L1580.37 683.197 L1579.82 683.197 L1579.26 683.197 L1578.7 683.197 L1578.14 683.197 L1577.58 683.197 L1577.02 683.197 L1576.46 683.197 L1575.9 683.197 L1575.34 683.197 L1574.78 683.197 L1574.22 683.197 L1573.66 683.197 L1573.1 683.197 L1572.55 683.197 L1571.99 683.197 L1571.43 683.197 L1570.87 683.197 L1570.31 683.197 L1569.75 683.197 L1569.19 683.197 L1568.63 683.197 L1568.07 683.197 L1567.51 683.197 L1566.95 683.197 L1566.39 683.197 L1565.83 683.197 L1565.28 683.197 L1564.72 683.197 L1564.16 683.197 L1563.6 683.197 L1563.04 683.197 L1562.48 683.197 L1561.92 683.197 L1561.36 683.197 L1560.8 683.197 L1560.24 683.197 L1559.68 683.197 L1559.12 683.197 L1558.56 683.197 L1558 683.197 L1557.45 683.197 L1556.89 683.197 L1556.33 683.197 L1555.77 683.197 L1555.21 683.197 L1554.65 683.197 L1554.09 683.197 L1553.53 683.197 L1552.97 683.197 L1552.41 683.197 L1551.85 683.197 L1551.29 683.197 L1550.73 683.197 L1550.18 683.197 L1549.62 683.197 L1549.06 683.197 L1548.5 683.197 L1547.94 683.197 L1547.38 683.197 L1546.82 683.197 L1546.26 683.197 L1545.7 683.197 L1545.14 683.197 L1544.58 683.197 L1544.02 683.197 L1543.46 683.197 L1542.9 683.197 L1542.35 683.197 L1541.79 683.197 L1541.23 683.197 L1540.67 683.197 L1540.11 683.197 L1539.55 683.197 L1538.99 683.197 L1538.43 683.197 L1537.87 683.197 L1537.31 683.197 L1536.75 683.197 L1536.19 683.197 L1535.63 683.197 L1535.08 683.197 L1534.52 683.197 L1533.96 683.197 L1533.4 683.197 L1532.84 683.197 L1532.28 683.197 L1531.72 683.197 L1531.16 683.197 L1530.6 683.197 L1530.04 683.197 L1529.48 683.197 L1528.92 683.197 L1528.36 683.197 L1527.81 683.197 L1527.25 683.197 L1526.69 683.197 L1526.13 683.197 L1525.57 683.197 L1525.01 683.197 L1524.45 683.197 L1523.89 683.197 L1523.33 683.197 L1522.77 683.197 L1522.21 683.197 L1521.65 683.197 L1521.09 683.197 L1520.53 683.197 L1519.98 683.197 L1519.42 683.197 L1518.86 683.197 L1518.3 683.197 L1517.74 683.197 L1517.18 683.197 L1516.62 683.197 L1516.06 683.197 L1515.5 683.197 L1514.94 683.197 L1514.38 683.197 L1513.82 683.197 L1513.26 683.197 L1512.71 683.197 L1512.15 683.197 L1511.59 683.197 L1511.03 683.197 L1510.47 683.197 L1509.91 683.197 L1509.35 683.197 L1508.79 683.197 L1508.23 683.197 L1507.67 683.197 L1507.11 683.197 L1506.55 683.197 L1505.99 683.197 L1505.44 683.197 L1504.88 683.197 L1504.32 683.197 L1503.76 683.197 L1503.2 683.197 L1502.64 683.197 L1502.08 683.197 L1501.52 683.197 L1500.96 683.197 L1500.4 683.197 L1499.84 683.197 L1499.28 683.197 L1498.72 683.197 L1498.16 683.197 L1497.61 683.197 L1497.05 683.197 L1496.49 683.197 L1495.93 683.197 L1495.37 683.197 L1494.81 683.197 L1494.25 683.197 L1493.69 683.197 L1493.13 683.197 L1492.57 683.197 L1492.01 683.197 L1491.45 683.197 L1490.89 683.197 L1490.34 683.197 L1489.78 683.197 L1489.22 683.197 L1488.66 683.197 L1488.1 683.197 L1487.54 683.197 L1486.98 683.197 L1486.42 683.197 L1485.86 683.197 L1485.3 683.197 L1484.74 683.197 L1484.18 683.197 L1483.62 683.197 L1483.07 683.197 L1482.51 683.197 L1481.95 683.197 L1481.39 683.197 L1480.83 683.197 L1480.27 683.197 L1479.71 683.197 L1479.15 683.197 L1478.59 683.197 L1478.03 683.197 L1477.47 683.197 L1476.91 683.197 L1476.35 683.197 L1475.79 683.197 L1475.24 683.197 L1474.68 683.197 L1474.12 683.197 L1473.56 683.197 L1473 683.197 L1472.44 683.197 L1471.88 683.197 L1471.32 683.197 L1470.76 683.197 L1470.2 683.197 L1469.64 683.197 L1469.08 683.197 L1468.52 683.197 L1467.97 683.197 L1467.41 683.197 L1466.85 683.197 L1466.29 683.197 L1465.73 683.197 L1465.17 683.197 L1464.61 683.197 L1464.05 683.197 L1463.49 683.197 L1462.93 683.197 L1462.37 683.197 L1461.81 683.197 L1461.25 683.197 L1460.7 683.197 L1460.14 683.197 L1459.58 683.197 L1459.02 683.197 L1458.46 683.197 L1457.9 683.197 L1457.34 683.197 L1456.78 683.197 L1456.22 683.197 L1455.66 683.197 L1455.1 683.197 L1454.54 683.197 L1453.98 683.197 L1453.42 683.197 L1452.87 683.197 L1452.31 683.197 L1451.75 683.197 L1451.19 683.197 L1450.63 683.197 L1450.07 683.197 L1449.51 683.197 L1448.95 683.197 L1448.39 683.197 L1447.83 683.197 L1447.27 683.197 L1446.71 683.197 L1446.15 683.197 L1445.6 683.197 L1445.04 683.197 L1444.48 683.197 L1443.92 683.197 L1443.36 683.197 L1442.8 683.197 L1442.24 683.197 L1441.68 683.197 L1441.12 683.197 L1440.56 683.197 L1440 683.197 L1439.44 683.197 L1438.88 683.197 L1438.33 683.197 L1437.77 683.197 L1437.21 683.197 L1436.65 683.197 L1436.09 683.197 L1435.53 683.197 L1434.97 683.197 L1434.41 683.197 L1433.85 683.197 L1433.29 683.197 L1432.73 683.197 L1432.17 683.197 L1431.61 683.197 L1431.05 683.197 L1430.5 683.197 L1429.94 683.197 L1429.38 683.197 L1428.82 683.197 L1428.26 683.197 L1427.7 683.197 L1427.14 683.197 L1426.58 683.197 L1426.02 683.197 L1425.46 683.197 L1424.9 683.197 L1424.34 683.197 L1423.78 683.197 L1423.23 683.197 L1422.67 683.197 L1422.11 683.197 L1421.55 683.197 L1420.99 683.197 L1420.43 683.197 L1419.87 683.197 L1419.31 683.197 L1418.75 683.197 L1418.19 683.197 L1417.63 683.197 L1417.07 683.197 L1416.51 683.197 L1415.95 683.197 L1415.4 683.197 L1414.84 683.197 L1414.28 683.197 L1413.72 683.197 L1413.16 683.197 L1412.6 683.197 L1412.04 683.197 L1411.48 683.197 L1410.92 683.197 L1410.36 683.197 L1409.8 683.197 L1409.24 683.197 L1408.68 683.197 L1408.13 683.197 L1407.57 683.197 L1407.01 683.197 L1406.45 683.197 L1405.89 683.197 L1405.33 683.197 L1404.77 683.197 L1404.21 683.197 L1403.65 683.197 L1403.09 683.197 L1402.53 683.197 L1401.97 683.197 L1401.41 683.197 L1400.86 683.197 L1400.3 683.197 L1399.74 683.197 L1399.18 683.197 L1398.62 683.197 L1398.06 683.197 L1397.5 683.197 L1396.94 683.197 L1396.38 683.197 L1395.82 683.197 L1395.26 683.197 L1394.7 683.197 L1394.14 683.197 L1393.58 683.197 L1393.03 683.197 L1392.47 683.197 L1391.91 683.197 L1391.35 683.197 L1390.79 683.197 L1390.23 683.197 L1389.67 683.197 L1389.11 683.197 L1388.55 683.197 L1387.99 683.197 L1387.43 683.197 L1386.87 683.197 L1386.31 683.197 L1385.76 683.197 L1385.2 683.197 L1384.64 683.197 L1384.08 683.197 L1383.52 683.197 L1382.96 683.197 L1382.4 683.197 L1381.84 683.197 L1381.28 683.197 L1380.72 683.197 L1380.16 683.197 L1379.6 683.197 L1379.04 683.197 L1378.49 683.197 L1377.93 683.197 L1377.37 683.197 L1376.81 683.197 L1376.25 683.197 L1375.69 683.197 L1375.13 683.197 L1374.57 683.197 L1374.01 683.197 L1373.45 683.197 L1372.89 683.197 L1372.33 683.197 L1371.77 683.197 L1371.21 683.197 L1370.66 683.197 L1370.1 683.197 L1369.54 683.197 L1368.98 683.197 L1368.42 683.197 L1367.86 683.197 L1367.3 683.197 L1366.74 683.197 L1366.18 683.197 L1365.62 683.197 L1365.06 683.197 L1364.5 683.197 L1363.94 683.197 L1363.39 683.197 L1362.83 683.197 L1362.27 683.197 L1361.71 683.197 L1361.15 683.197 L1360.59 683.197 L1360.03 683.197 L1359.47 683.197 L1358.91 683.197 L1358.35 683.197 L1357.79 683.197 L1357.23 683.197 L1356.67 683.197 L1356.12 683.197 L1355.56 683.197 L1355 683.197 L1354.44 683.197 L1353.88 683.197 L1353.32 683.197 L1352.76 683.197 L1352.2 683.197 L1351.64 683.197 L1351.08 683.197 L1350.52 683.197 L1349.96 683.197 L1349.4 683.197 L1348.84 683.197 L1348.29 683.197 L1347.73 683.197 L1347.17 683.197 L1346.61 683.197 L1346.05 683.197 L1345.49 683.197 L1344.93 683.197 L1344.37 683.197 L1343.81 683.197 L1343.25 683.197 L1342.69 683.197 L1342.13 683.197 L1341.57 683.197 L1341.02 683.197 L1340.46 683.197 L1339.9 683.197 L1339.34 683.197 L1338.78 683.197 L1338.22 683.197 L1337.66 683.197 L1337.1 683.197 L1336.54 683.197 L1335.98 683.197 L1335.42 683.197 L1334.86 683.197 L1334.3 683.197 L1333.75 683.197 L1333.19 683.197 L1332.63 683.197 L1332.07 683.197 L1331.51 683.197 L1330.95 683.197 L1330.39 683.197 L1329.83 683.197 L1329.27 683.197 L1328.71 683.197 L1328.15 683.197 L1327.59 683.197 L1327.03 683.197 L1326.47 683.197 L1325.92 683.197 L1325.36 683.197 L1324.8 683.197 L1324.24 683.197 L1323.68 683.197 L1323.12 683.197 L1322.56 683.197 L1322 683.197 L1321.44 683.197 L1320.88 683.197 L1320.32 683.197 L1319.76 683.197 L1319.2 683.197 L1318.65 683.197 L1318.09 683.197 L1317.53 683.197 L1316.97 683.197 L1316.41 683.197 L1315.85 683.197 L1315.29 683.197 L1314.73 683.197 L1314.17 683.197 L1313.61 683.197 L1313.05 683.197 L1312.49 683.197 L1311.93 683.197 L1311.38 683.197 L1310.82 683.197 L1310.26 683.197 L1309.7 683.197 L1309.14 683.197 L1308.58 683.197 L1308.02 683.197 L1307.46 683.197 L1306.9 683.197 L1306.34 683.197 L1305.78 683.197 L1305.22 683.197 L1304.66 683.197 L1304.1 683.197 L1303.55 683.197 L1302.99 683.197 L1302.43 683.197 L1301.87 683.197 L1301.31 683.197 L1300.75 683.197 L1300.19 683.197 L1299.63 683.197 L1299.07 683.197 L1298.51 683.197 L1297.95 683.197 L1297.39 683.197 L1296.83 683.197 L1296.28 683.197 L1295.72 683.197 L1295.16 683.197 L1294.6 683.197 L1294.04 683.197 L1293.48 683.197 L1292.92 683.197 L1292.36 683.197 L1291.8 683.197 L1291.24 683.197 L1290.68 683.197 L1290.12 683.197 L1289.56 683.197 L1289 683.197 L1288.45 683.197 L1287.89 683.197 L1287.33 683.197 L1286.77 683.197 L1286.21 683.197 L1285.65 683.197 L1285.09 683.197 L1284.53 683.197 L1283.97 683.197 L1283.41 683.197 L1282.85 683.197 L1282.29 683.197 L1281.73 683.197 L1281.18 683.197 L1280.62 683.197 L1280.06 683.197 L1279.5 683.197 L1278.94 683.197 L1278.38 683.197 L1277.82 683.197 L1277.26 683.197 L1276.7 683.197 L1276.14 683.197 L1275.58 683.197 L1275.02 683.197 L1274.46 683.197 L1273.91 683.197 L1273.35 683.197 L1272.79 683.197 L1272.23 683.197 L1271.67 683.197 L1271.11 683.197 L1270.55 683.197 L1269.99 683.197 L1269.43 683.197 L1268.87 683.197 L1268.31 683.197 L1267.75 683.197 L1267.19 683.197 L1266.63 683.197 L1266.08 683.197 L1265.52 683.197 L1264.96 683.197 L1264.4 683.197 L1263.84 683.197 L1263.28 683.197 L1262.72 683.197 L1262.16 683.197 L1261.6 683.197 L1261.04 683.197 L1260.48 683.197 L1259.92 683.197 L1259.36 683.197 L1258.81 683.197 L1258.25 683.197 L1257.69 683.197 L1257.13 683.197 L1256.57 683.197 L1256.01 683.197 L1255.45 683.197 L1254.89 683.197 L1254.33 683.197 L1253.77 683.197 L1253.21 683.197 L1252.65 683.197 L1252.09 683.197 L1251.54 683.197 L1250.98 683.197 L1250.42 683.197 L1249.86 683.197 L1249.3 683.197 L1248.74 683.197 L1248.18 683.197 L1247.62 683.197 L1247.06 683.197 L1246.5 683.197 L1245.94 683.197 L1245.38 683.197 L1244.82 683.197 L1244.26 683.197 L1243.71 683.197 L1243.15 683.197 L1242.59 683.197 L1242.03 683.197 L1241.47 683.197 L1240.91 683.197 L1240.35 683.197 L1239.79 683.197 L1239.23 683.197 L1238.67 683.197 L1238.11 683.197 L1237.55 683.197 L1236.99 683.197 L1236.44 683.197 L1235.88 683.197 L1235.32 683.197 L1234.76 683.197 L1234.2 683.197 L1233.64 683.197 L1233.08 683.197 L1232.52 683.197 L1231.96 683.197 L1231.4 683.197 L1230.84 683.197 L1230.28 683.197 L1229.72 683.197 L1229.17 683.197 L1228.61 683.197 L1228.05 683.197 L1227.49 683.197 L1226.93 683.197 L1226.37 683.197 L1225.81 683.197 L1225.25 683.197 L1224.69 683.197 L1224.13 683.197 L1223.57 683.197 L1223.01 683.197 L1222.45 683.197 L1221.89 683.197 L1221.34 683.197 L1220.78 683.197 L1220.22 683.197 L1219.66 683.197 L1219.1 683.197 L1218.54 683.197 L1217.98 683.197 L1217.42 683.197 L1216.86 683.197 L1216.3 683.197 L1215.74 683.197 L1215.18 683.197 L1214.62 683.197 L1214.07 683.197 L1213.51 683.197 L1212.95 683.197 L1212.39 683.197 L1211.83 683.197 L1211.27 683.197 L1210.71 683.197 L1210.15 683.197 L1209.59 683.197 L1209.03 683.197 L1208.47 683.197 L1207.91 683.197 L1207.35 683.197 L1206.8 683.197 L1206.24 683.197 L1205.68 683.197 L1205.12 683.197 L1204.56 683.197 L1204 683.197 L1203.44 683.197 L1202.88 683.197 L1202.32 683.197 L1201.76 683.197 L1201.2 683.197 L1200.64 683.197 L1200.08 683.197 L1199.52 683.197 L1198.97 683.197 L1198.41 683.197 L1197.85 683.197 L1197.29 683.197 L1196.73 683.197 L1196.17 683.197 L1195.61 683.197 L1195.05 683.197 L1194.49 683.197 L1193.93 683.197 L1193.37 683.197 L1192.81 683.197 L1192.25 683.197 L1191.7 683.197 L1191.14 683.197 L1190.58 683.197 L1190.02 683.197 L1189.46 683.197 L1188.9 683.197 L1188.34 683.197 L1187.78 683.197 L1187.22 683.197 L1186.66 683.197 L1186.1 683.197 L1185.54 683.197 L1184.98 683.197 L1184.43 683.197 L1183.87 683.197 L1183.31 683.197 L1182.75 683.197 L1182.19 683.197 L1181.63 683.197 L1181.07 683.197 L1180.51 683.197 L1179.95 683.197 L1179.39 683.197 L1178.83 683.197 L1178.27 683.197 L1177.71 683.197 L1177.15 683.197 L1176.6 683.197 L1176.04 683.197 L1175.48 683.197 L1174.92 683.197 L1174.36 683.197 L1173.8 683.197 L1173.24 683.197 L1172.68 683.197 L1172.12 683.197 L1171.56 683.197 L1171 683.197 L1170.44 683.197 L1169.88 683.197 L1169.33 683.197 L1168.77 683.197 L1168.21 683.197 L1167.65 683.197 L1167.09 683.197 L1166.53 683.197 L1165.97 683.197 L1165.41 683.197 L1164.85 683.197 L1164.29 683.197 L1163.73 683.197 L1163.17 683.197 L1162.61 683.197 L1162.05 683.197 L1161.5 683.197 L1160.94 683.197 L1160.38 683.197 L1159.82 683.197 L1159.26 683.197 L1158.7 683.197 L1158.14 683.197 L1157.58 683.197 L1157.02 683.197 L1156.46 683.197 L1155.9 683.197 L1155.34 683.197 L1154.78 683.197 L1154.23 683.197 L1153.67 683.197 L1153.11 683.197 L1152.55 683.197 L1151.99 683.197 L1151.43 683.197 L1150.87 683.197 L1150.31 683.197 L1149.75 683.197 L1149.19 683.197 L1148.63 683.197 L1148.07 683.197 L1147.51 683.197 L1146.96 683.197 L1146.4 683.197 L1145.84 683.197 L1145.28 683.197 L1144.72 683.197 L1144.16 683.197 L1143.6 683.197 L1143.04 683.197 L1142.48 683.197 L1141.92 683.197 L1141.36 683.197 L1140.8 683.197 L1140.24 683.197 L1139.68 683.197 L1139.13 683.197 L1138.57 683.197 L1138.01 683.197 L1137.45 683.197 L1136.89 683.197 L1136.33 683.197 L1135.77 683.197 L1135.21 683.197 L1134.65 683.197 L1134.09 683.197 L1133.53 683.197 L1132.97 683.197 L1132.41 683.197 L1131.86 683.197 L1131.3 683.197 L1130.74 683.197 L1130.18 683.197 L1129.62 683.197 L1129.06 683.197 L1128.5 683.197 L1127.94 683.197 L1127.38 683.197 L1126.82 683.197 L1126.26 683.197 L1125.7 683.197 L1125.14 683.197 L1124.59 683.197 L1124.03 683.197 L1123.47 683.197 L1122.91 683.197 L1122.35 683.197 L1121.79 683.197 L1121.23 683.197 L1120.67 683.197 L1120.11 683.197 L1119.55 683.197 L1118.99 683.197 L1118.43 683.197 L1117.87 683.197 L1117.31 683.197 L1116.76 683.197 L1116.2 683.197 L1115.64 683.197 L1115.08 683.197 L1114.52 683.197 L1113.96 683.197 L1113.4 683.197 L1112.84 683.197 L1112.28 683.197 L1111.72 683.197 L1111.16 683.197 L1110.6 683.197 L1110.04 683.197 L1109.49 683.197 L1108.93 683.197 L1108.37 683.197 L1107.81 683.197 L1107.25 683.197 L1106.69 683.197 L1106.13 683.197 L1105.57 683.197 L1105.01 683.197 L1104.45 683.197 L1103.89 683.197 L1103.33 683.197 L1102.77 683.197 L1102.22 683.197 L1101.66 683.197 L1101.1 683.197 L1100.54 683.197 L1099.98 683.197 L1099.42 683.197 L1098.86 683.197 L1098.3 683.197 L1097.74 683.197 L1097.18 683.197 L1096.62 683.197 L1096.06 683.197 L1095.5 683.197 L1094.94 683.197 L1094.39 683.197 L1093.83 683.197 L1093.27 683.197 L1092.71 683.197 L1092.15 683.197 L1091.59 683.197 L1091.03 683.197 L1090.47 683.197 L1089.91 683.197 L1089.35 683.197 L1088.79 683.197 L1088.23 683.197 L1087.67 683.197 L1087.12 683.197 L1086.56 683.197 L1086 683.197 L1085.44 683.197 L1084.88 683.197 L1084.32 683.197 L1083.76 683.197 L1083.2 683.197 L1082.64 683.197 L1082.08 683.197 L1081.52 683.197 L1080.96 683.197 L1080.4 683.197 L1079.85 683.197 L1079.29 683.197 L1078.73 683.197 L1078.17 683.197 L1077.61 683.197 L1077.05 683.197 L1076.49 683.197 L1075.93 683.197 L1075.37 683.197 L1074.81 683.197 L1074.25 683.197 L1073.69 683.197 L1073.13 683.197 L1072.57 683.197 L1072.02 683.197 L1071.46 683.197 L1070.9 683.197 L1070.34 683.197 L1069.78 683.197 L1069.22 683.197 L1068.66 683.197 L1068.1 683.197 L1067.54 683.197 L1066.98 683.197 L1066.42 683.197 L1065.86 683.197 L1065.3 683.197 L1064.75 683.197 L1064.19 683.197 L1063.63 683.197 L1063.07 683.197 L1062.51 683.197 L1061.95 683.197 L1061.39 683.197 L1060.83 683.197 L1060.27 683.197 L1059.71 683.197 L1059.15 683.197 L1058.59 683.197 L1058.03 683.197 L1057.48 683.197 L1056.92 683.197 L1056.36 683.197 L1055.8 683.197 L1055.24 683.197 L1054.68 683.197 L1054.12 683.197 L1053.56 683.197 L1053 683.197 L1052.44 683.197 L1051.88 683.197 L1051.32 683.197 L1050.76 683.197 L1050.2 683.197 L1049.65 683.197 L1049.09 683.197 L1048.53 683.197 L1047.97 683.197 L1047.41 683.197 L1046.85 683.197 L1046.29 683.197 L1045.73 683.197 L1045.17 683.197 L1044.61 683.197 L1044.05 683.197 L1043.49 683.197 L1042.93 683.197 L1042.38 683.197 L1041.82 683.197 L1041.26 683.197 L1040.7 683.197 L1040.14 683.197 L1039.58 683.197 L1039.02 683.197 L1038.46 683.197 L1037.9 683.197 L1037.34 683.197 L1036.78 683.197 L1036.22 683.197 L1035.66 683.197 L1035.1 683.197 L1034.55 683.197 L1033.99 683.197 L1033.43 683.197 L1032.87 683.197 L1032.31 683.197 L1031.75 683.197 L1031.19 683.197 L1030.63 683.197 L1030.07 683.197 L1029.51 683.197 L1028.95 683.197 L1028.39 683.197 L1027.83 683.197 L1027.28 683.197 L1026.72 683.197 L1026.16 683.197 L1025.6 683.197 L1025.04 683.197 L1024.48 683.197 L1023.92 683.197 L1023.36 683.197 L1022.8 683.197 L1022.24 683.197 L1021.68 683.197 L1021.12 683.197 L1020.56 683.197 L1020.01 683.197 L1019.45 683.197 L1018.89 683.197 L1018.33 683.197 L1017.77 683.197 L1017.21 683.197 L1016.65 683.197 L1016.09 683.197 L1015.53 683.197 L1014.97 683.197 L1014.41 683.197 L1013.85 683.197 L1013.29 683.197 L1012.73 683.197 L1012.18 683.197 L1011.62 683.197 L1011.06 683.197 L1010.5 683.197 L1009.94 683.197 L1009.38 683.197 L1008.82 683.197 L1008.26 683.197 L1007.7 683.197 L1007.14 683.197 L1006.58 683.197 L1006.02 683.197 L1005.46 683.197 L1004.91 683.197 L1004.35 683.197 L1003.79 683.197 L1003.23 683.197 L1002.67 683.197 L1002.11 683.197 L1001.55 683.197 L1000.99 683.197 L1000.43 683.197 L999.872 683.197 L999.313 683.197 L998.754 683.197 L998.194 683.197 L997.635 683.197 L997.076 683.197 L996.517 683.197 L995.957 683.197 L995.398 683.197 L994.839 683.197 L994.28 683.197 L993.72 683.197 L993.161 683.197 L992.602 683.197 L992.043 683.197 L991.483 683.197 L990.924 683.197 L990.365 683.197 L989.806 683.197 L989.246 683.197 L988.687 683.197 L988.128 683.197 L987.569 683.197 L987.009 683.197 L986.45 683.197 L985.891 683.197 L985.332 683.197 L984.772 683.197 L984.213 683.197 L983.654 683.197 L983.095 683.197 L982.535 683.197 L981.976 683.197 L981.417 683.197 L980.858 683.197 L980.298 683.197 L979.739 683.197 L979.18 683.197 L978.621 683.197 L978.061 683.197 L977.502 683.197 L976.943 683.197 L976.384 683.197 L975.824 683.197 L975.265 683.197 L974.706 683.197 L974.147 683.197 L973.587 683.197 L973.028 683.197 L972.469 683.197 L971.91 683.197 L971.35 683.197 L970.791 683.197 L970.232 683.197 L969.673 683.197 L969.113 683.197 L968.554 683.197 L967.995 683.197 L967.436 683.197 L966.876 683.197 L966.317 683.197 L965.758 683.197 L965.199 683.197 L964.639 683.197 L964.08 683.197 L963.521 683.197 L962.962 683.197 L962.402 683.197 L961.843 683.197 L961.284 683.197 L960.725 683.197 L960.165 683.197 L959.606 683.197 L959.047 683.197 L958.488 683.197 L957.928 683.197 L957.369 683.197 L956.81 683.197 L956.251 683.197 L955.691 683.197 L955.132 683.197 L954.573 683.197 L954.014 683.197 L953.454 683.197 L952.895 683.197 L952.336 683.197 L951.777 683.197 L951.217 683.197 L950.658 683.197 L950.099 683.197 L949.54 683.197 L948.98 683.197 L948.421 683.197 L947.862 683.197 L947.303 683.197 L946.743 683.197 L946.184 683.197 L945.625 683.197 L945.066 683.197 L944.506 683.197 L943.947 683.197 L943.388 683.197 L942.829 683.197 L942.269 683.197 L941.71 683.197 L941.151 683.197 L940.592 683.197 L940.032 683.197 L939.473 683.197 L938.914 683.197 L938.355 683.197 L937.795 683.197 L937.236 683.197 L936.677 683.197 L936.118 683.197 L935.558 683.197 L934.999 683.197 L934.44 683.197 L933.881 683.197 L933.321 683.197 L932.762 683.197 L932.203 683.197 L931.644 683.197 L931.084 683.197 L930.525 683.197 L929.966 683.197 L929.406 683.197 L928.847 683.197 L928.288 683.197 L927.729 683.197 L927.169 683.197 L926.61 683.197 L926.051 683.197 L925.492 683.197 L924.932 683.197 L924.373 683.197 L923.814 683.197 L923.255 683.197 L922.695 683.197 L922.136 683.197 L921.577 683.197 L921.018 683.197 L920.458 683.197 L919.899 683.197 L919.34 683.197 L918.781 683.197 L918.221 683.197 L917.662 683.197 L917.103 683.197 L916.544 683.197 L915.984 683.197 L915.425 683.197 L914.866 683.197 L914.307 683.197 L913.747 683.197 L913.188 683.197 L912.629 683.197 L912.07 683.197 L911.51 683.197 L910.951 683.197 L910.392 683.197 L909.833 683.197 L909.273 683.197 L908.714 683.197 L908.155 683.197 L907.596 683.197 L907.036 683.197 L906.477 683.197 L905.918 683.197 L905.359 683.197 L904.799 683.197 L904.24 683.197 L903.681 683.197 L903.122 683.197 L902.562 683.197 L902.003 683.197 L901.444 683.197 L900.885 683.197 L900.325 683.197 L899.766 683.197 L899.207 683.197 L898.648 683.197 L898.088 683.197 L897.529 683.197 L896.97 683.197 L896.411 683.197 L895.851 683.197 L895.292 683.197 L894.733 683.197 L894.174 683.197 L893.614 683.197 L893.055 683.197 L892.496 683.197 L891.937 683.197 L891.377 683.197 L890.818 683.197 L890.259 683.197 L889.7 683.197 L889.14 683.197 L888.581 683.197 L888.022 683.197 L887.463 683.197 L886.903 683.197 L886.344 683.197 L885.785 683.197 L885.226 683.197 L884.666 683.197 L884.107 683.197 L883.548 683.197 L882.989 683.197 L882.429 683.197 L881.87 683.197 L881.311 683.197 L880.752 683.197 L880.192 683.197 L879.633 683.197 L879.074 683.197 L878.515 683.197 L877.955 683.197 L877.396 683.197 L876.837 683.197 L876.278 683.197 L875.718 683.197 L875.159 683.197 L874.6 683.197 L874.041 683.197 L873.481 683.197 L872.922 683.197 L872.363 683.197 L871.804 683.197 L871.244 683.197 L870.685 683.197 L870.126 683.197 L869.567 683.197 L869.007 683.197 L868.448 683.197 L867.889 683.197 L867.33 683.197 L866.77 683.197 L866.211 683.197 L865.652 683.197 L865.093 683.197 L864.533 683.197 L863.974 683.197 L863.415 683.197 L862.856 683.197 L862.296 683.197 L861.737 683.197 L861.178 683.197 L860.619 683.197 L860.059 683.197 L859.5 683.197 L858.941 683.197 L858.382 683.197 L857.822 683.197 L857.263 683.197 L856.704 683.197 L856.145 683.197 L855.585 683.197 L855.026 683.197 L854.467 683.197 L853.908 683.197 L853.348 683.197 L852.789 683.197 L852.23 683.197 L851.671 683.197 L851.111 683.197 L850.552 683.197 L849.993 683.197 L849.434 683.197 L848.874 683.197 L848.315 683.197 L847.756 683.197 L847.197 683.197 L846.637 683.197 L846.078 683.197 L845.519 683.197 L844.96 683.197 L844.4 683.197 L843.841 683.197 L843.282 683.197 L842.723 683.197 L842.163 683.197 L841.604 683.197 L841.045 683.197 L840.486 683.197 L839.926 683.197 L839.367 683.197 L838.808 683.197 L838.249 683.197 L837.689 683.197 L837.13 683.197 L836.571 683.197 L836.012 683.197 L835.452 683.197 L834.893 683.197 L834.334 683.197 L833.775 683.197 L833.215 683.197 L832.656 683.197 L832.097 683.197 L831.538 683.197 L830.978 683.197 L830.419 683.197 L829.86 683.197 L829.301 683.197 L828.741 683.197 L828.182 683.197 L827.623 683.197 L827.064 683.197 L826.504 683.197 L825.945 683.197 L825.386 683.197 L824.827 683.197 L824.267 683.197 L823.708 683.197 L823.149 683.197 L822.59 683.197 L822.03 683.197 L821.471 683.197 L820.912 683.197 L820.353 683.197 L819.793 683.197 L819.234 683.197 L818.675 683.197 L818.116 683.197 L817.556 683.197 L816.997 683.197 L816.438 683.197 L815.879 683.197 L815.319 683.197 L814.76 683.197 L814.201 683.197 L813.642 683.197 L813.082 683.197 L812.523 683.197 L811.964 683.197 L811.405 683.197 L810.845 683.197 L810.286 683.197 L809.727 683.197 L809.168 683.197 L808.608 683.197 L808.049 683.197 L807.49 683.197 L806.931 683.197 L806.371 683.197 L805.812 683.197 L805.253 683.197 L804.693 683.197 L804.134 683.197 L803.575 683.197 L803.016 683.197 L802.456 683.197 L801.897 683.197 L801.338 683.197 L800.779 683.197 L800.219 683.197 L799.66 683.197 L799.101 683.197 L798.542 683.197 L797.982 683.197 L797.423 683.197 L796.864 683.197 L796.305 683.197 L795.745 683.197 L795.186 683.197 L794.627 683.197 L794.068 683.197 L793.508 683.197 L792.949 683.197 L792.39 683.197 L791.831 683.197 L791.271 683.197 L790.712 683.197 L790.153 683.197 L789.594 683.197 L789.034 683.197 L788.475 683.197 L787.916 683.197 L787.357 683.197 L786.797 683.197 L786.238 683.197 L785.679 683.197 L785.12 683.197 L784.56 683.197 L784.001 683.197 L783.442 683.197 L782.883 683.197 L782.323 683.197 L781.764 683.197 L781.205 683.197 L780.646 683.197 L780.086 683.197 L779.527 683.197 L778.968 683.197 L778.409 683.197 L777.849 683.197 L777.29 683.197 L776.731 683.197 L776.172 683.197 L775.612 683.197 L775.053 683.197 L774.494 683.197 L773.935 683.197 L773.375 683.197 L772.816 683.197 L772.257 683.197 L771.698 683.197 L771.138 683.197 L770.579 683.197 L770.02 683.197 L769.461 683.197 L768.901 683.197 L768.342 683.197 L767.783 683.197 L767.224 683.197 L766.664 683.197 L766.105 683.197 L765.546 683.197 L764.987 683.197 L764.427 683.197 L763.868 683.197 L763.309 683.197 L762.75 683.197 L762.19 683.197 L761.631 683.197 L761.072 683.197 L760.513 683.197 L759.953 683.197 L759.394 683.197 L758.835 683.197 L758.276 683.197 L757.716 683.197 L757.157 683.197 L756.598 683.197 L756.039 683.197 L755.479 683.197 L754.92 683.197 L754.361 683.197 L753.802 683.197 L753.242 683.197 L752.683 683.197 L752.124 683.197 L751.565 683.197 L751.005 683.197 L750.446 683.197 L749.887 683.197 L749.328 683.197 L748.768 683.197 L748.209 683.197 L747.65 683.197 L747.091 683.197 L746.531 683.197 L745.972 683.197 L745.413 683.197 L744.854 683.197 L744.294 683.197 L743.735 683.197 L743.176 683.197 L742.617 683.197 L742.057 683.197 L741.498 683.197 L740.939 683.197 L740.38 683.197 L739.82 683.197 L739.261 683.197 L738.702 683.197 L738.143 683.197 L737.583 683.197 L737.024 683.197 L736.465 683.197 L735.906 683.197 L735.346 683.197 L734.787 683.197 L734.228 683.197 L733.669 683.197 L733.109 683.197 L732.55 683.197 L731.991 683.197 L731.432 683.197 L730.872 683.197 L730.313 683.197 L729.754 683.197 L729.195 683.197 L728.635 683.197 L728.076 683.197 L727.517 683.197 L726.958 683.197 L726.398 683.197 L725.839 683.197 L725.28 683.197 L724.721 683.197 L724.161 683.197 L723.602 683.197 L723.043 683.197 L722.484 683.197 L721.924 683.197 L721.365 683.197 L720.806 683.197 L720.247 683.197  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.834 720.806,687.834 721.365,687.834 721.924,687.834 722.484,687.834 723.043,687.834 723.602,687.834 724.161,687.834 724.721,687.834 725.28,687.834 725.839,687.834 726.398,687.834 726.958,687.834 727.517,687.834 728.076,687.834 728.635,687.834 729.195,687.834 729.754,687.834 730.313,687.834 730.872,687.834 731.432,687.834 731.991,687.834 732.55,687.834 733.109,687.834 733.669,687.834 734.228,687.834 734.787,687.834 735.346,687.834 735.906,687.834 736.465,687.834 737.024,687.834 737.583,687.834 738.143,687.834 738.702,687.834 739.261,687.834 739.82,687.834 740.38,687.834 740.939,687.834 741.498,687.834 742.057,687.834 742.617,687.834 743.176,687.834 743.735,687.834 744.294,687.834 744.854,687.834 745.413,687.834 745.972,687.834 746.531,687.834 747.091,687.834 747.65,687.834 748.209,687.834 748.768,687.834 749.328,687.834 749.887,687.834 750.446,687.834 751.005,687.834 751.565,687.834 752.124,687.834 752.683,687.834 753.242,687.834 753.802,687.834 754.361,687.834 754.92,687.834 755.479,687.834 756.039,687.834 756.598,687.834 757.157,687.834 757.716,687.834 758.276,687.834 758.835,687.834 759.394,687.834 759.953,687.834 760.513,687.834 761.072,687.834 761.631,687.834 762.19,687.834 762.75,687.834 763.309,687.834 763.868,687.834 764.427,687.834 764.987,687.834 765.546,687.834 766.105,687.834 766.664,687.834 767.224,687.834 767.783,687.834 768.342,687.834 768.901,687.834 769.461,687.834 770.02,687.834 770.579,687.834 771.138,687.834 771.698,687.834 772.257,687.834 772.816,687.834 773.375,687.834 773.935,687.834 774.494,687.834 775.053,687.834 775.612,687.834 776.172,687.834 776.731,687.834 777.29,687.834 777.849,687.834 778.409,687.834 778.968,687.834 779.527,687.834 780.086,687.834 780.646,687.834 781.205,687.834 781.764,687.834 782.323,687.834 782.883,687.834 783.442,687.834 784.001,687.834 784.56,687.834 785.12,687.834 785.679,687.834 786.238,687.834 786.797,687.834 787.357,687.834 787.916,687.834 788.475,687.834 789.034,687.834 789.594,687.834 790.153,687.834 790.712,687.834 791.271,687.834 791.831,687.834 792.39,687.834 792.949,687.834 793.508,687.834 794.068,687.834 794.627,687.834 795.186,687.834 795.745,687.834 796.305,687.834 796.864,687.834 797.423,687.834 797.982,687.834 798.542,687.834 799.101,687.834 799.66,687.834 800.219,687.834 800.779,687.834 801.338,687.834 801.897,687.834 802.456,687.834 803.016,687.834 803.575,687.834 804.134,687.834 804.693,687.834 805.253,687.834 805.812,687.834 806.371,687.834 806.931,687.834 807.49,687.834 808.049,687.834 808.608,687.834 809.168,687.834 809.727,687.834 810.286,687.834 810.845,687.834 811.405,687.834 811.964,687.834 812.523,687.834 813.082,687.834 813.642,687.834 814.201,687.834 814.76,687.834 815.319,687.834 815.879,687.834 816.438,687.834 816.997,687.834 817.556,687.834 818.116,687.834 818.675,687.834 819.234,687.834 819.793,687.834 820.353,687.834 820.912,687.834 821.471,687.834 822.03,687.834 822.59,687.834 823.149,687.834 823.708,687.834 824.267,687.834 824.827,687.834 825.386,687.834 825.945,687.834 826.504,687.834 827.064,687.834 827.623,687.834 828.182,687.834 828.741,687.834 829.301,687.834 829.86,687.834 830.419,687.834 830.978,687.834 831.538,687.834 832.097,687.834 832.656,687.834 833.215,687.834 833.775,687.834 834.334,687.834 834.893,687.834 835.452,687.834 836.012,687.834 836.571,687.834 837.13,687.834 837.689,687.834 838.249,687.834 838.808,687.834 839.367,687.834 839.926,687.834 840.486,687.834 841.045,687.834 841.604,687.834 842.163,687.834 842.723,687.834 843.282,687.834 843.841,687.834 844.4,687.834 844.96,687.834 845.519,687.834 846.078,687.834 846.637,687.834 847.197,687.834 847.756,687.834 848.315,687.834 848.874,687.834 849.434,687.834 849.993,687.834 850.552,687.834 851.111,687.834 851.671,687.834 852.23,687.834 852.789,687.834 853.348,687.834 853.908,687.834 854.467,687.834 855.026,687.834 855.585,687.834 856.145,687.834 856.704,687.834 857.263,687.834 857.822,687.834 858.382,687.834 858.941,687.834 859.5,687.834 860.059,687.834 860.619,687.834 861.178,687.834 861.737,687.834 862.296,687.834 862.856,687.834 863.415,687.834 863.974,687.834 864.533,687.834 865.093,687.834 865.652,687.834 866.211,687.834 866.77,687.834 867.33,687.834 867.889,687.834 868.448,687.834 869.007,687.834 869.567,687.834 870.126,687.834 870.685,687.834 871.244,687.834 871.804,687.834 872.363,687.834 872.922,687.834 873.481,687.834 874.041,687.834 874.6,687.834 875.159,687.834 875.718,687.834 876.278,687.834 876.837,687.834 877.396,687.834 877.955,687.834 878.515,687.834 879.074,687.834 879.633,687.834 880.192,687.834 880.752,687.834 881.311,687.834 881.87,687.834 882.429,687.834 882.989,687.834 883.548,687.834 884.107,687.834 884.666,687.834 885.226,687.834 885.785,687.834 886.344,687.834 886.903,687.834 887.463,687.834 888.022,687.834 888.581,687.834 889.14,687.834 889.7,687.834 890.259,687.834 890.818,687.834 891.377,687.834 891.937,687.834 892.496,687.834 893.055,687.834 893.614,687.834 894.174,687.834 894.733,687.834 895.292,687.834 895.851,687.834 896.411,687.834 896.97,687.834 897.529,687.834 898.088,687.834 898.648,687.834 899.207,687.834 899.766,687.834 900.325,687.834 900.885,687.834 901.444,687.834 902.003,687.834 902.562,687.834 903.122,687.834 903.681,687.834 904.24,687.834 904.799,687.834 905.359,687.834 905.918,687.834 906.477,687.834 907.036,687.834 907.596,687.834 908.155,687.834 908.714,687.834 909.273,687.834 909.833,687.834 910.392,687.834 910.951,687.834 911.51,687.834 912.07,687.834 912.629,687.834 913.188,687.834 913.747,687.834 914.307,687.834 914.866,687.834 915.425,687.834 915.984,687.834 916.544,687.834 917.103,687.834 917.662,687.834 918.221,687.834 918.781,687.834 919.34,687.834 919.899,687.834 920.458,687.834 921.018,687.834 921.577,687.834 922.136,687.834 922.695,687.834 923.255,687.834 923.814,687.834 924.373,687.834 924.932,687.834 925.492,687.834 926.051,687.834 926.61,687.834 927.169,687.834 927.729,687.834 928.288,687.834 928.847,687.834 929.406,687.834 929.966,687.834 930.525,687.834 931.084,687.834 931.644,687.834 932.203,687.834 932.762,687.834 933.321,687.834 933.881,687.834 934.44,687.834 934.999,687.834 935.558,687.834 936.118,687.834 936.677,687.834 937.236,687.834 937.795,687.834 938.355,687.834 938.914,687.834 939.473,687.834 940.032,687.834 940.592,687.834 941.151,687.834 941.71,687.834 942.269,687.834 942.829,687.834 943.388,687.834 943.947,687.834 944.506,687.834 945.066,687.834 945.625,687.834 946.184,687.834 946.743,687.834 947.303,687.834 947.862,687.834 948.421,687.834 948.98,687.834 949.54,687.834 950.099,687.834 950.658,687.834 951.217,687.834 951.777,687.834 952.336,687.834 952.895,687.834 953.454,687.834 954.014,687.834 954.573,687.834 955.132,687.834 955.691,687.834 956.251,687.834 956.81,687.834 957.369,687.834 957.928,687.834 958.488,687.834 959.047,687.834 959.606,687.834 960.165,687.834 960.725,687.834 961.284,687.834 961.843,687.834 962.402,687.834 962.962,687.834 963.521,687.834 964.08,687.834 964.639,687.834 965.199,687.834 965.758,687.834 966.317,687.834 966.876,687.834 967.436,687.834 967.995,687.834 968.554,687.834 969.113,687.834 969.673,687.834 970.232,687.834 970.791,687.834 971.35,687.834 971.91,687.834 972.469,687.834 973.028,687.834 973.587,687.834 974.147,687.834 974.706,687.834 975.265,687.834 975.824,687.834 976.384,687.834 976.943,687.834 977.502,687.834 978.061,687.834 978.621,687.834 979.18,687.834 979.739,687.834 980.298,687.834 980.858,687.834 981.417,687.834 981.976,687.834 982.535,687.834 983.095,687.834 983.654,687.834 984.213,687.834 984.772,687.834 985.332,687.834 985.891,687.834 986.45,687.834 987.009,687.834 987.569,687.834 988.128,687.834 988.687,687.834 989.246,687.834 989.806,687.834 990.365,687.834 990.924,687.834 991.483,687.834 992.043,687.834 992.602,687.834 993.161,687.834 993.72,687.834 994.28,687.834 994.839,687.834 995.398,687.834 995.957,687.834 996.517,687.834 997.076,687.834 997.635,687.834 998.194,687.834 998.754,687.834 999.313,687.834 999.872,687.834 1000.43,687.834 1000.99,687.834 1001.55,687.834 1002.11,687.834 1002.67,687.834 1003.23,687.834 1003.79,687.834 1004.35,687.834 1004.91,687.834 1005.46,687.834 1006.02,687.834 1006.58,687.834 1007.14,687.834 1007.7,687.834 1008.26,687.834 1008.82,687.834 1009.38,687.834 1009.94,687.834 1010.5,687.834 1011.06,687.834 1011.62,687.834 1012.18,687.834 1012.73,687.834 1013.29,687.834 1013.85,687.834 1014.41,687.834 1014.97,687.834 1015.53,687.834 1016.09,687.834 1016.65,687.834 1017.21,687.834 1017.77,687.834 1018.33,687.834 1018.89,687.834 1019.45,687.834 1020.01,687.834 1020.56,687.834 1021.12,687.834 1021.68,687.834 1022.24,687.834 1022.8,687.834 1023.36,687.834 1023.92,687.834 1024.48,687.834 1025.04,687.834 1025.6,687.834 1026.16,687.834 1026.72,687.834 1027.28,687.834 1027.83,687.834 1028.39,687.834 1028.95,687.834 1029.51,687.834 1030.07,687.834 1030.63,687.834 1031.19,687.834 1031.75,687.834 1032.31,687.834 1032.87,687.834 1033.43,687.834 1033.99,687.834 1034.55,687.834 1035.1,687.834 1035.66,687.834 1036.22,687.834 1036.78,687.834 1037.34,687.834 1037.9,687.834 1038.46,687.834 1039.02,687.834 1039.58,687.834 1040.14,687.834 1040.7,687.834 1041.26,687.834 1041.82,687.834 1042.38,687.834 1042.93,687.834 1043.49,687.834 1044.05,687.834 1044.61,687.834 1045.17,687.834 1045.73,687.834 1046.29,687.834 1046.85,687.834 1047.41,687.834 1047.97,687.834 1048.53,687.834 1049.09,687.834 1049.65,687.834 1050.2,687.834 1050.76,687.834 1051.32,687.834 1051.88,687.834 1052.44,687.834 1053,687.834 1053.56,687.834 1054.12,687.834 1054.68,687.834 1055.24,687.834 1055.8,687.834 1056.36,687.834 1056.92,687.834 1057.48,687.834 1058.03,687.834 1058.59,687.834 1059.15,687.834 1059.71,687.834 1060.27,687.834 1060.83,687.834 1061.39,687.834 1061.95,687.834 1062.51,687.834 1063.07,687.834 1063.63,687.834 1064.19,687.834 1064.75,687.834 1065.3,687.834 1065.86,687.834 1066.42,687.834 1066.98,687.834 1067.54,687.834 1068.1,687.834 1068.66,687.834 1069.22,687.834 1069.78,687.834 1070.34,687.834 1070.9,687.834 1071.46,687.834 1072.02,687.834 1072.57,687.834 1073.13,687.834 1073.69,687.834 1074.25,687.834 1074.81,687.834 1075.37,687.834 1075.93,687.834 1076.49,687.834 1077.05,687.834 1077.61,687.834 1078.17,687.834 1078.73,687.834 1079.29,687.834 1079.85,687.834 1080.4,687.834 1080.96,687.834 1081.52,687.834 1082.08,687.834 1082.64,687.834 1083.2,687.834 1083.76,687.834 1084.32,687.834 1084.88,687.834 1085.44,687.834 1086,687.834 1086.56,687.834 1087.12,687.834 1087.67,687.834 1088.23,687.834 1088.79,687.834 1089.35,687.834 1089.91,687.834 1090.47,687.834 1091.03,687.834 1091.59,687.834 1092.15,687.834 1092.71,687.834 1093.27,687.834 1093.83,687.834 1094.39,687.834 1094.94,687.834 1095.5,687.834 1096.06,687.834 1096.62,687.834 1097.18,687.834 1097.74,687.834 1098.3,687.834 1098.86,687.834 1099.42,687.834 1099.98,687.834 1100.54,687.834 1101.1,687.834 1101.66,687.834 1102.22,687.834 1102.77,687.834 1103.33,687.834 1103.89,687.834 1104.45,687.834 1105.01,687.834 1105.57,687.834 1106.13,687.834 1106.69,687.834 1107.25,687.834 1107.81,687.834 1108.37,687.834 1108.93,687.834 1109.49,687.834 1110.04,687.834 1110.6,687.834 1111.16,687.834 1111.72,687.834 1112.28,687.834 1112.84,687.834 1113.4,687.834 1113.96,687.834 1114.52,687.834 1115.08,687.834 1115.64,687.834 1116.2,687.834 1116.76,687.834 1117.31,687.834 1117.87,687.834 1118.43,687.834 1118.99,687.834 1119.55,687.834 1120.11,687.834 1120.67,687.834 1121.23,687.834 1121.79,687.834 1122.35,687.834 1122.91,687.834 1123.47,687.834 1124.03,687.834 1124.59,687.834 1125.14,687.834 1125.7,687.834 1126.26,687.834 1126.82,687.834 1127.38,687.834 1127.94,687.834 1128.5,687.834 1129.06,687.834 1129.62,687.834 1130.18,687.834 1130.74,687.834 1131.3,687.834 1131.86,687.834 1132.41,687.834 1132.97,687.834 1133.53,687.834 1134.09,687.834 1134.65,687.834 1135.21,687.834 1135.77,687.834 1136.33,687.834 1136.89,687.834 1137.45,687.834 1138.01,687.834 1138.57,687.834 1139.13,687.834 1139.68,687.834 1140.24,687.834 1140.8,687.834 1141.36,687.834 1141.92,687.834 1142.48,687.834 1143.04,687.834 1143.6,687.834 1144.16,687.834 1144.72,687.834 1145.28,687.834 1145.84,687.834 1146.4,687.834 1146.96,687.834 1147.51,687.834 1148.07,687.834 1148.63,687.834 1149.19,687.834 1149.75,687.834 1150.31,687.834 1150.87,687.834 1151.43,687.834 1151.99,687.834 1152.55,687.834 1153.11,687.834 1153.67,687.834 1154.23,687.834 1154.78,687.834 1155.34,687.834 1155.9,687.834 1156.46,687.834 1157.02,687.834 1157.58,687.834 1158.14,687.834 1158.7,687.834 1159.26,687.834 1159.82,687.834 1160.38,687.834 1160.94,687.834 1161.5,687.834 1162.05,687.834 1162.61,687.834 1163.17,687.834 1163.73,687.834 1164.29,687.834 1164.85,687.834 1165.41,687.834 1165.97,687.834 1166.53,687.834 1167.09,687.834 1167.65,687.834 1168.21,687.834 1168.77,687.834 1169.33,687.834 1169.88,687.834 1170.44,687.834 1171,687.834 1171.56,687.834 1172.12,687.834 1172.68,687.834 1173.24,687.834 1173.8,687.834 1174.36,687.834 1174.92,687.834 1175.48,687.834 1176.04,687.834 1176.6,687.834 1177.15,687.834 1177.71,687.834 1178.27,687.834 1178.83,687.834 1179.39,687.834 1179.95,687.834 1180.51,687.834 1181.07,687.834 1181.63,687.834 1182.19,687.834 1182.75,687.834 1183.31,687.834 1183.87,687.834 1184.43,687.834 1184.98,687.834 1185.54,687.834 1186.1,687.834 1186.66,687.834 1187.22,687.834 1187.78,687.834 1188.34,687.834 1188.9,687.834 1189.46,687.834 1190.02,687.834 1190.58,687.834 1191.14,687.834 1191.7,687.834 1192.25,687.834 1192.81,687.834 1193.37,687.834 1193.93,687.834 1194.49,687.834 1195.05,687.834 1195.61,687.834 1196.17,687.834 1196.73,687.834 1197.29,687.834 1197.85,687.834 1198.41,687.834 1198.97,687.834 1199.52,687.834 1200.08,687.834 1200.64,687.834 1201.2,687.834 1201.76,687.834 1202.32,687.834 1202.88,687.834 1203.44,687.834 1204,687.834 1204.56,687.834 1205.12,687.834 1205.68,687.834 1206.24,687.834 1206.8,687.834 1207.35,687.834 1207.91,687.834 1208.47,687.834 1209.03,687.834 1209.59,687.834 1210.15,687.834 1210.71,687.834 1211.27,687.834 1211.83,687.834 1212.39,687.834 1212.95,687.834 1213.51,687.834 1214.07,687.834 1214.62,687.834 1215.18,687.834 1215.74,687.834 1216.3,687.834 1216.86,687.834 1217.42,687.834 1217.98,687.834 1218.54,687.834 1219.1,687.834 1219.66,687.834 1220.22,687.834 1220.78,687.834 1221.34,687.834 1221.89,687.834 1222.45,687.834 1223.01,687.834 1223.57,687.834 1224.13,687.834 1224.69,687.834 1225.25,687.834 1225.81,687.834 1226.37,687.834 1226.93,687.834 1227.49,687.834 1228.05,687.834 1228.61,687.834 1229.17,687.834 1229.72,687.834 1230.28,687.834 1230.84,687.834 1231.4,687.834 1231.96,687.834 1232.52,687.834 1233.08,687.834 1233.64,687.834 1234.2,687.834 1234.76,687.834 1235.32,687.834 1235.88,687.834 1236.44,687.834 1236.99,687.834 1237.55,687.834 1238.11,687.834 1238.67,687.834 1239.23,687.834 1239.79,687.834 1240.35,687.834 1240.91,687.834 1241.47,687.834 1242.03,687.834 1242.59,687.834 1243.15,687.834 1243.71,687.834 1244.26,687.834 1244.82,687.834 1245.38,687.834 1245.94,687.834 1246.5,687.834 1247.06,687.834 1247.62,687.834 1248.18,687.834 1248.74,687.834 1249.3,687.834 1249.86,687.834 1250.42,687.834 1250.98,687.834 1251.54,687.834 1252.09,687.834 1252.65,687.834 1253.21,687.834 1253.77,687.834 1254.33,687.834 1254.89,687.834 1255.45,687.834 1256.01,687.834 1256.57,687.834 1257.13,687.834 1257.69,687.834 1258.25,687.834 1258.81,687.834 1259.36,687.834 1259.92,687.834 1260.48,687.834 1261.04,687.834 1261.6,687.834 1262.16,687.834 1262.72,687.834 1263.28,687.834 1263.84,687.834 1264.4,687.834 1264.96,687.834 1265.52,687.834 1266.08,687.834 1266.63,687.834 1267.19,687.834 1267.75,687.834 1268.31,687.834 1268.87,687.834 1269.43,687.834 1269.99,687.834 1270.55,687.834 1271.11,687.834 1271.67,687.834 1272.23,687.834 1272.79,687.834 1273.35,687.834 1273.91,687.834 1274.46,687.834 1275.02,687.834 1275.58,687.834 1276.14,687.834 1276.7,687.834 1277.26,687.834 1277.82,687.834 1278.38,687.834 1278.94,687.834 1279.5,687.834 1280.06,687.834 1280.62,687.834 1281.18,687.834 1281.73,687.834 1282.29,687.834 1282.85,687.834 1283.41,687.834 1283.97,687.834 1284.53,687.834 1285.09,687.834 1285.65,687.834 1286.21,687.834 1286.77,687.834 1287.33,687.834 1287.89,687.834 1288.45,687.834 1289,687.834 1289.56,687.834 1290.12,687.834 1290.68,687.834 1291.24,687.834 1291.8,687.834 1292.36,687.834 1292.92,687.834 1293.48,687.834 1294.04,687.834 1294.6,687.834 1295.16,687.834 1295.72,687.834 1296.28,687.834 1296.83,687.834 1297.39,687.834 1297.95,687.834 1298.51,687.834 1299.07,687.834 1299.63,687.834 1300.19,687.834 1300.75,687.834 1301.31,687.834 1301.87,687.834 1302.43,687.834 1302.99,687.834 1303.55,687.834 1304.1,687.834 1304.66,687.834 1305.22,687.834 1305.78,687.834 1306.34,687.834 1306.9,687.834 1307.46,687.834 1308.02,687.834 1308.58,687.834 1309.14,687.834 1309.7,687.834 1310.26,687.834 1310.82,687.834 1311.38,687.834 1311.93,687.834 1312.49,687.834 1313.05,687.834 1313.61,687.834 1314.17,687.834 1314.73,687.834 1315.29,687.834 1315.85,687.834 1316.41,687.834 1316.97,687.834 1317.53,687.834 1318.09,687.834 1318.65,687.834 1319.2,687.834 1319.76,687.834 1320.32,687.834 1320.88,687.834 1321.44,687.834 1322,687.834 1322.56,687.834 1323.12,687.834 1323.68,687.834 1324.24,687.834 1324.8,687.834 1325.36,687.834 1325.92,687.834 1326.47,687.834 1327.03,687.834 1327.59,687.834 1328.15,687.834 1328.71,687.834 1329.27,687.834 1329.83,687.834 1330.39,687.834 1330.95,687.834 1331.51,687.834 1332.07,687.834 1332.63,687.834 1333.19,687.834 1333.75,687.834 1334.3,687.834 1334.86,687.834 1335.42,687.834 1335.98,687.834 1336.54,687.834 1337.1,687.834 1337.66,687.834 1338.22,687.834 1338.78,687.834 1339.34,687.834 1339.9,687.834 1340.46,687.834 1341.02,687.834 1341.57,687.834 1342.13,687.834 1342.69,687.834 1343.25,687.834 1343.81,687.834 1344.37,687.834 1344.93,687.834 1345.49,687.834 1346.05,687.834 1346.61,687.834 1347.17,687.834 1347.73,687.834 1348.29,687.834 1348.84,687.834 1349.4,687.834 1349.96,687.834 1350.52,687.834 1351.08,687.834 1351.64,687.834 1352.2,687.834 1352.76,687.834 1353.32,687.834 1353.88,687.834 1354.44,687.834 1355,687.834 1355.56,687.834 1356.12,687.834 1356.67,687.834 1357.23,687.834 1357.79,687.834 1358.35,687.834 1358.91,687.834 1359.47,687.834 1360.03,687.834 1360.59,687.834 1361.15,687.834 1361.71,687.834 1362.27,687.834 1362.83,687.834 1363.39,687.834 1363.94,687.834 1364.5,687.834 1365.06,687.834 1365.62,687.834 1366.18,687.834 1366.74,687.834 1367.3,687.834 1367.86,687.834 1368.42,687.834 1368.98,687.834 1369.54,687.834 1370.1,687.834 1370.66,687.834 1371.21,687.834 1371.77,687.834 1372.33,687.834 1372.89,687.834 1373.45,687.834 1374.01,687.834 1374.57,687.834 1375.13,687.834 1375.69,687.834 1376.25,687.834 1376.81,687.834 1377.37,687.834 1377.93,687.834 1378.49,687.834 1379.04,687.834 1379.6,687.834 1380.16,687.834 1380.72,687.834 1381.28,687.834 1381.84,687.834 1382.4,687.834 1382.96,687.834 1383.52,687.834 1384.08,687.834 1384.64,687.834 1385.2,687.834 1385.76,687.834 1386.31,687.834 1386.87,687.834 1387.43,687.834 1387.99,687.834 1388.55,687.834 1389.11,687.834 1389.67,687.834 1390.23,687.834 1390.79,687.834 1391.35,687.834 1391.91,687.834 1392.47,687.834 1393.03,687.834 1393.58,687.834 1394.14,687.834 1394.7,687.834 1395.26,687.834 1395.82,687.834 1396.38,687.834 1396.94,687.834 1397.5,687.834 1398.06,687.834 1398.62,687.834 1399.18,687.834 1399.74,687.834 1400.3,687.834 1400.86,687.834 1401.41,687.834 1401.97,687.834 1402.53,687.834 1403.09,687.834 1403.65,687.834 1404.21,687.834 1404.77,687.834 1405.33,687.834 1405.89,687.834 1406.45,687.834 1407.01,687.834 1407.57,687.834 1408.13,687.834 1408.68,687.834 1409.24,687.834 1409.8,687.834 1410.36,687.834 1410.92,687.834 1411.48,687.834 1412.04,687.834 1412.6,687.834 1413.16,687.834 1413.72,687.834 1414.28,687.834 1414.84,687.834 1415.4,687.834 1415.95,687.834 1416.51,687.834 1417.07,687.834 1417.63,687.834 1418.19,687.834 1418.75,687.834 1419.31,687.834 1419.87,687.834 1420.43,687.834 1420.99,687.834 1421.55,687.834 1422.11,687.834 1422.67,687.834 1423.23,687.834 1423.78,687.834 1424.34,687.834 1424.9,687.834 1425.46,687.834 1426.02,687.834 1426.58,687.834 1427.14,687.834 1427.7,687.834 1428.26,687.834 1428.82,687.834 1429.38,687.834 1429.94,687.834 1430.5,687.834 1431.05,687.834 1431.61,687.834 1432.17,687.834 1432.73,687.834 1433.29,687.834 1433.85,687.834 1434.41,687.834 1434.97,687.834 1435.53,687.834 1436.09,687.834 1436.65,687.834 1437.21,687.834 1437.77,687.834 1438.33,687.834 1438.88,687.834 1439.44,687.834 1440,687.834 1440.56,687.834 1441.12,687.834 1441.68,687.834 1442.24,687.834 1442.8,687.834 1443.36,687.834 1443.92,687.834 1444.48,687.834 1445.04,687.834 1445.6,687.834 1446.15,687.834 1446.71,687.834 1447.27,687.834 1447.83,687.834 1448.39,687.834 1448.95,687.834 1449.51,687.834 1450.07,687.834 1450.63,687.834 1451.19,687.834 1451.75,687.834 1452.31,687.834 1452.87,687.834 1453.42,687.834 1453.98,687.834 1454.54,687.834 1455.1,687.834 1455.66,687.834 1456.22,687.834 1456.78,687.834 1457.34,687.834 1457.9,687.834 1458.46,687.834 1459.02,687.834 1459.58,687.834 1460.14,687.834 1460.7,687.834 1461.25,687.834 1461.81,687.834 1462.37,687.834 1462.93,687.834 1463.49,687.834 1464.05,687.834 1464.61,687.834 1465.17,687.834 1465.73,687.834 1466.29,687.834 1466.85,687.834 1467.41,687.834 1467.97,687.834 1468.52,687.834 1469.08,687.834 1469.64,687.834 1470.2,687.834 1470.76,687.834 1471.32,687.834 1471.88,687.834 1472.44,687.834 1473,687.834 1473.56,687.834 1474.12,687.834 1474.68,687.834 1475.24,687.834 1475.79,687.834 1476.35,687.834 1476.91,687.834 1477.47,687.834 1478.03,687.834 1478.59,687.834 1479.15,687.834 1479.71,687.834 1480.27,687.834 1480.83,687.834 1481.39,687.834 1481.95,687.834 1482.51,687.834 1483.07,687.834 1483.62,687.834 1484.18,687.834 1484.74,687.834 1485.3,687.834 1485.86,687.834 1486.42,687.834 1486.98,687.834 1487.54,687.834 1488.1,687.834 1488.66,687.834 1489.22,687.834 1489.78,687.834 1490.34,687.834 1490.89,687.834 1491.45,687.834 1492.01,687.834 1492.57,687.834 1493.13,687.834 1493.69,687.834 1494.25,687.834 1494.81,687.834 1495.37,687.834 1495.93,687.834 1496.49,687.834 1497.05,687.834 1497.61,687.834 1498.16,687.834 1498.72,687.834 1499.28,687.834 1499.84,687.834 1500.4,687.834 1500.96,687.834 1501.52,687.834 1502.08,687.834 1502.64,687.834 1503.2,687.834 1503.76,687.834 1504.32,687.834 1504.88,687.834 1505.44,687.834 1505.99,687.834 1506.55,687.834 1507.11,687.834 1507.67,687.834 1508.23,687.834 1508.79,687.834 1509.35,687.834 1509.91,687.834 1510.47,687.834 1511.03,687.834 1511.59,687.834 1512.15,687.834 1512.71,687.834 1513.26,687.834 1513.82,687.834 1514.38,687.834 1514.94,687.834 1515.5,687.834 1516.06,687.834 1516.62,687.834 1517.18,687.834 1517.74,687.834 1518.3,687.834 1518.86,687.834 1519.42,687.834 1519.98,687.834 1520.53,687.834 1521.09,687.834 1521.65,687.834 1522.21,687.834 1522.77,687.834 1523.33,687.834 1523.89,687.834 1524.45,687.834 1525.01,687.834 1525.57,687.834 1526.13,687.834 1526.69,687.834 1527.25,687.834 1527.81,687.834 1528.36,687.834 1528.92,687.834 1529.48,687.834 1530.04,687.834 1530.6,687.834 1531.16,687.834 1531.72,687.834 1532.28,687.834 1532.84,687.834 1533.4,687.834 1533.96,687.834 1534.52,687.834 1535.08,687.834 1535.63,687.834 1536.19,687.834 1536.75,687.834 1537.31,687.834 1537.87,687.834 1538.43,687.834 1538.99,687.834 1539.55,687.834 1540.11,687.834 1540.67,687.834 1541.23,687.834 1541.79,687.834 1542.35,687.834 1542.9,687.834 1543.46,687.834 1544.02,687.834 1544.58,687.834 1545.14,687.834 1545.7,687.834 1546.26,687.834 1546.82,687.834 1547.38,687.834 1547.94,687.834 1548.5,687.834 1549.06,687.834 1549.62,687.834 1550.18,687.834 1550.73,687.834 1551.29,687.834 1551.85,687.834 1552.41,687.834 1552.97,687.834 1553.53,687.834 1554.09,687.834 1554.65,687.834 1555.21,687.834 1555.77,687.834 1556.33,687.834 1556.89,687.834 1557.45,687.834 1558,687.834 1558.56,687.834 1559.12,687.834 1559.68,687.834 1560.24,687.834 1560.8,687.834 1561.36,687.834 1561.92,687.834 1562.48,687.834 1563.04,687.834 1563.6,687.834 1564.16,687.834 1564.72,687.834 1565.28,687.834 1565.83,687.834 1566.39,687.834 1566.95,687.834 1567.51,687.834 1568.07,687.834 1568.63,687.834 1569.19,687.834 1569.75,687.834 1570.31,687.834 1570.87,687.834 1571.43,687.834 1571.99,687.834 1572.55,687.834 1573.1,687.834 1573.66,687.834 1574.22,687.834 1574.78,687.834 1575.34,687.834 1575.9,687.834 1576.46,687.834 1577.02,687.834 1577.58,687.834 1578.14,687.834 1578.7,687.834 1579.26,687.834 1579.82,687.834 1580.37,687.834 1580.93,687.834 1581.49,687.834 1582.05,687.834 1582.61,687.834 1583.17,687.834 1583.73,687.834 1584.29,687.834 1584.85,687.834 1585.41,687.834 1585.97,687.834 1586.53,687.834 1587.09,687.834 1587.65,687.834 1588.2,687.834 1588.76,687.834 1589.32,687.834 1589.88,687.834 1590.44,687.834 1591,687.834 1591.56,687.834 1592.12,687.834 1592.68,687.834 1593.24,687.834 1593.8,687.834 1594.36,687.834 1594.92,687.834 1595.47,687.834 1596.03,687.834 1596.59,687.834 1597.15,687.834 1597.71,687.834 1598.27,687.834 1598.83,687.834 1599.39,687.834 1599.95,687.834 1600.51,687.834 1601.07,687.834 1601.63,687.834 1602.19,687.834 1602.74,687.834 1603.3,687.834 1603.86,687.834 1604.42,687.834 1604.98,687.834 1605.54,687.834 1606.1,687.834 1606.66,687.834 1607.22,687.834 1607.78,687.834 1608.34,687.834 1608.9,687.834 1609.46,687.834 1610.02,687.834 1610.57,687.834 1611.13,687.834 1611.69,687.834 1612.25,687.834 1612.81,687.834 1613.37,687.834 1613.93,687.834 1614.49,687.834 1615.05,687.834 1615.61,687.834 1616.17,687.834 1616.73,687.834 1617.29,687.834 1617.84,687.834 1618.4,687.834 1618.96,687.834 1619.52,687.834 1620.08,687.834 1620.64,687.834 1621.2,687.834 1621.76,687.834 1622.32,687.834 1622.88,687.834 1623.44,687.834 1624,687.834 1624.56,687.834 1625.11,687.834 1625.67,687.834 1626.23,687.834 1626.79,687.834 1627.35,687.834 1627.91,687.834 1628.47,687.834 1629.03,687.834 1629.59,687.834 1630.15,687.834 1630.71,687.834 1631.27,687.834 1631.83,687.834 1632.39,687.834 1632.94,687.834 1633.5,687.834 1634.06,687.834 1634.62,687.834 1635.18,687.834 1635.74,687.834 1636.3,687.834 1636.86,687.834 1637.42,687.834 1637.98,687.834 1638.54,687.834 1639.1,687.834 1639.66,687.834 1640.21,687.834 1640.77,687.834 1641.33,687.834 1641.89,687.834 1642.45,687.834 1643.01,687.834 1643.57,687.834 1644.13,687.834 1644.69,687.834 1645.25,687.834 1645.81,687.834 1646.37,687.834 1646.93,687.834 1647.48,687.834 1648.04,687.834 1648.6,687.834 1649.16,687.834 1649.72,687.834 1650.28,687.834 1650.84,687.834 1651.4,687.834 1651.96,687.834 1652.52,687.834 1653.08,687.834 1653.64,687.834 1654.2,687.834 1654.76,687.834 1655.31,687.834 1655.87,687.834 1656.43,687.834 1656.99,687.834 1657.55,687.834 1658.11,687.834 1658.67,687.834 1659.23,687.834 1659.79,687.834 1660.35,687.834 1660.91,687.834 1661.47,687.834 1662.03,687.834 1662.58,687.834 1663.14,687.834 1663.7,687.834 1664.26,687.834 1664.82,687.834 1665.38,687.834 1665.94,687.834 1666.5,687.834 1667.06,687.834 1667.62,687.834 1668.18,687.834 1668.74,687.834 1669.3,687.834 1669.85,687.834 1670.41,687.834 1670.97,687.834 1671.53,687.834 1672.09,687.834 1672.65,687.834 1673.21,687.834 1673.77,687.834 1674.33,687.834 1674.89,687.834 1675.45,687.834 1676.01,687.834 1676.57,687.834 1677.13,687.834 1677.68,687.834 1678.24,687.834 1678.8,687.834 1679.36,687.834 1679.92,687.834 1680.48,687.834 1681.04,687.834 1681.6,687.834 1682.16,687.834 1682.72,687.834 1683.28,687.834 1683.84,687.834 1684.4,687.834 1684.95,687.834 1685.51,687.834 1686.07,687.834 1686.63,687.834 1687.19,687.834 1687.75,687.834 1688.31,687.834 1688.87,687.834 1689.43,687.834 1689.99,687.834 1690.55,687.834 1691.11,687.834 1691.67,687.834 1692.23,687.834 1692.78,687.834 1693.34,687.834 1693.9,687.834 1694.46,687.834 1695.02,687.834 1695.58,687.834 1696.14,687.834 1696.7,687.834 1697.26,687.834 1697.82,687.834 1698.38,687.834 1698.94,687.834 1699.5,687.834 1700.05,687.834 1700.61,687.834 1701.17,687.834 1701.73,687.834 1702.29,687.834 1702.85,687.834 1703.41,687.834 1703.97,687.834 1704.53,687.834 1705.09,687.834 1705.65,687.834 1706.21,687.834 1706.77,687.834 1707.32,687.834 1707.88,687.834 1708.44,687.834 1709,687.834 1709.56,687.834 1710.12,687.834 1710.68,687.834 1711.24,687.834 1711.8,687.834 1712.36,687.834 1712.92,687.834 1713.48,687.834 1714.04,687.834 1714.6,687.834 1715.15,687.834 1715.71,687.834 1716.27,687.834 1716.83,687.834 1717.39,687.834 1717.95,687.834 1718.51,687.834 1719.07,687.834 1719.63,687.834 1720.19,687.834 1720.75,687.834 1721.31,687.834 1721.87,687.834 1722.42,687.834 1722.98,687.834 1723.54,687.834 1724.1,687.834 1724.66,687.834 1725.22,687.834 1725.78,687.834 1726.34,687.834 1726.9,687.834 1727.46,687.834 1728.02,687.834 1728.58,687.834 1729.14,687.834 1729.69,687.834 1730.25,687.834 1730.81,687.834 1731.37,687.834 1731.93,687.834 1732.49,687.834 1733.05,687.834 1733.61,687.834 1734.17,687.834 1734.73,687.834 1735.29,687.834 1735.85,687.834 1736.41,687.834 1736.97,687.834 1737.52,687.834 1738.08,687.834 1738.64,687.834 1739.2,687.834 1739.76,687.834 1740.32,687.834 1740.88,687.834 1741.44,687.834 1742,687.834 1742.56,687.834 1743.12,687.834 1743.68,687.834 1744.24,687.834 1744.79,687.834 1745.35,687.834 1745.91,687.834 1746.47,687.834 1747.03,687.834 1747.59,687.834 1748.15,687.834 1748.71,687.834 1749.27,687.834 1749.83,687.834 1750.39,687.834 1750.95,687.834 1751.51,687.834 1752.06,687.834 1752.62,687.834 1753.18,687.834 1753.74,687.834 1754.3,687.834 1754.86,687.834 1755.42,687.834 1755.98,687.834 1756.54,687.834 1757.1,687.834 1757.66,687.834 1758.22,687.834 1758.78,687.834 1759.34,687.834 1759.89,687.834 1760.45,687.834 1761.01,687.834 1761.57,687.834 1762.13,687.834 1762.69,687.834 1763.25,687.834 1763.81,687.834 1764.37,687.834 1764.93,687.834 1765.49,687.834 1766.05,687.834 1766.61,687.834 1767.16,687.834 1767.72,687.834 1768.28,687.834 1768.84,687.834 1769.4,687.834 1769.96,687.834 1770.52,687.834 1771.08,687.834 1771.64,687.834 1772.2,687.834 1772.76,687.834 1773.32,687.834 1773.88,687.834 1774.43,687.834 1774.99,687.834 1775.55,687.834 1776.11,687.834 1776.67,687.834 1777.23,687.834 1777.79,687.834 1778.35,687.834 1778.91,687.834 1779.47,687.834 1780.03,687.834 1780.59,687.834 1781.15,687.834 1781.71,687.834 1782.26,687.834 1782.82,687.834 1783.38,687.834 1783.94,687.834 1784.5,687.834 1785.06,687.834 1785.62,687.834 1786.18,687.834 1786.74,687.834 1787.3,687.834 1787.86,687.834 1788.42,687.834 1788.98,687.834 1789.53,687.834 1790.09,687.834 1790.65,687.834 1791.21,687.834 1791.77,687.834 1792.33,687.834 1792.89,687.834 1793.45,687.834 1794.01,687.834 1794.57,687.834 1795.13,687.834 1795.69,687.834 1796.25,687.834 1796.8,687.834 1797.36,687.834 1797.92,687.834 1798.48,687.834 1799.04,687.834 1799.6,687.834 1800.16,687.834 1800.72,687.834 1801.28,687.834 1801.84,687.834 1802.4,687.834 1802.96,687.834 1803.52,687.834 1804.08,687.834 1804.63,687.834 1805.19,687.834 1805.75,687.834 1806.31,687.834 1806.87,687.834 1807.43,687.834 1807.99,687.834 1808.55,687.834 1809.11,687.834 1809.67,687.834 1810.23,687.834 1810.79,687.834 1811.35,687.834 1811.9,687.834 1812.46,687.834 1813.02,687.834 1813.58,687.834 1814.14,687.834 1814.7,687.834 1815.26,687.834 1815.82,687.834 1816.38,687.834 1816.94,687.834 1817.5,687.834 1818.06,687.834 1818.62,687.834 1819.18,687.834 1819.73,687.834 1820.29,687.834 1820.85,687.834 1821.41,687.834 1821.97,687.834 1822.53,687.834 1823.09,687.834 1823.65,687.834 1824.21,687.834 1824.77,687.834 1825.33,687.834 1825.89,687.834 1826.45,687.834 1827,687.834 1827.56,687.834 1828.12,687.834 1828.68,687.834 1829.24,687.834 1829.8,687.834 1830.36,687.834 1830.92,687.834 1831.48,687.834 1832.04,687.834 1832.6,687.834 1833.16,687.834 1833.72,687.834 1834.27,687.834 1834.83,687.834 1835.39,687.834 1835.95,687.834 1836.51,687.834 1837.07,687.834 1837.63,687.834 1838.19,687.834 \"/>\n<path clip-path=\"url(#clip393)\" d=\"M720.247 685.196 L720.806 685.196 L721.365 685.196 L721.924 685.196 L722.484 685.196 L723.043 685.196 L723.602 685.196 L724.161 685.196 L724.721 685.196 L725.28 685.196 L725.839 685.196 L726.398 685.196 L726.958 685.196 L727.517 685.196 L728.076 685.196 L728.635 685.196 L729.195 685.196 L729.754 685.196 L730.313 685.196 L730.872 685.196 L731.432 685.196 L731.991 685.196 L732.55 685.196 L733.109 685.196 L733.669 685.196 L734.228 685.196 L734.787 685.196 L735.346 685.196 L735.906 685.196 L736.465 685.196 L737.024 685.196 L737.583 685.196 L738.143 685.196 L738.702 685.196 L739.261 685.196 L739.82 685.196 L740.38 685.196 L740.939 685.196 L741.498 685.196 L742.057 685.196 L742.617 685.196 L743.176 685.196 L743.735 685.196 L744.294 685.196 L744.854 685.196 L745.413 685.196 L745.972 685.196 L746.531 685.196 L747.091 685.196 L747.65 685.196 L748.209 685.196 L748.768 685.196 L749.328 685.196 L749.887 685.196 L750.446 685.196 L751.005 685.196 L751.565 685.196 L752.124 685.196 L752.683 685.196 L753.242 685.196 L753.802 685.196 L754.361 685.196 L754.92 685.196 L755.479 685.196 L756.039 685.196 L756.598 685.196 L757.157 685.196 L757.716 685.196 L758.276 685.196 L758.835 685.196 L759.394 685.196 L759.953 685.196 L760.513 685.196 L761.072 685.196 L761.631 685.196 L762.19 685.196 L762.75 685.196 L763.309 685.196 L763.868 685.196 L764.427 685.196 L764.987 685.196 L765.546 685.196 L766.105 685.196 L766.664 685.196 L767.224 685.196 L767.783 685.196 L768.342 685.196 L768.901 685.196 L769.461 685.196 L770.02 685.196 L770.579 685.196 L771.138 685.196 L771.698 685.196 L772.257 685.196 L772.816 685.196 L773.375 685.196 L773.935 685.196 L774.494 685.196 L775.053 685.196 L775.612 685.196 L776.172 685.196 L776.731 685.196 L777.29 685.196 L777.849 685.196 L778.409 685.196 L778.968 685.196 L779.527 685.196 L780.086 685.196 L780.646 685.196 L781.205 685.196 L781.764 685.196 L782.323 685.196 L782.883 685.196 L783.442 685.196 L784.001 685.196 L784.56 685.196 L785.12 685.196 L785.679 685.196 L786.238 685.196 L786.797 685.196 L787.357 685.196 L787.916 685.196 L788.475 685.196 L789.034 685.196 L789.594 685.196 L790.153 685.196 L790.712 685.196 L791.271 685.196 L791.831 685.196 L792.39 685.196 L792.949 685.196 L793.508 685.196 L794.068 685.196 L794.627 685.196 L795.186 685.196 L795.745 685.196 L796.305 685.196 L796.864 685.196 L797.423 685.196 L797.982 685.196 L798.542 685.196 L799.101 685.196 L799.66 685.196 L800.219 685.196 L800.779 685.196 L801.338 685.196 L801.897 685.196 L802.456 685.196 L803.016 685.196 L803.575 685.196 L804.134 685.196 L804.693 685.196 L805.253 685.196 L805.812 685.196 L806.371 685.196 L806.931 685.196 L807.49 685.196 L808.049 685.196 L808.608 685.196 L809.168 685.196 L809.727 685.196 L810.286 685.196 L810.845 685.196 L811.405 685.196 L811.964 685.196 L812.523 685.196 L813.082 685.196 L813.642 685.196 L814.201 685.196 L814.76 685.196 L815.319 685.196 L815.879 685.196 L816.438 685.196 L816.997 685.196 L817.556 685.196 L818.116 685.196 L818.675 685.196 L819.234 685.196 L819.793 685.196 L820.353 685.196 L820.912 685.196 L821.471 685.196 L822.03 685.196 L822.59 685.196 L823.149 685.196 L823.708 685.196 L824.267 685.196 L824.827 685.196 L825.386 685.196 L825.945 685.196 L826.504 685.196 L827.064 685.196 L827.623 685.196 L828.182 685.196 L828.741 685.196 L829.301 685.196 L829.86 685.196 L830.419 685.196 L830.978 685.196 L831.538 685.196 L832.097 685.196 L832.656 685.196 L833.215 685.196 L833.775 685.196 L834.334 685.196 L834.893 685.196 L835.452 685.196 L836.012 685.196 L836.571 685.196 L837.13 685.196 L837.689 685.196 L838.249 685.196 L838.808 685.196 L839.367 685.196 L839.926 685.196 L840.486 685.196 L841.045 685.196 L841.604 685.196 L842.163 685.196 L842.723 685.196 L843.282 685.196 L843.841 685.196 L844.4 685.196 L844.96 685.196 L845.519 685.196 L846.078 685.196 L846.637 685.196 L847.197 685.196 L847.756 685.196 L848.315 685.196 L848.874 685.196 L849.434 685.196 L849.993 685.196 L850.552 685.196 L851.111 685.196 L851.671 685.196 L852.23 685.196 L852.789 685.196 L853.348 685.196 L853.908 685.196 L854.467 685.196 L855.026 685.196 L855.585 685.196 L856.145 685.196 L856.704 685.196 L857.263 685.196 L857.822 685.196 L858.382 685.196 L858.941 685.196 L859.5 685.196 L860.059 685.196 L860.619 685.196 L861.178 685.196 L861.737 685.196 L862.296 685.196 L862.856 685.196 L863.415 685.196 L863.974 685.196 L864.533 685.196 L865.093 685.196 L865.652 685.196 L866.211 685.196 L866.77 685.196 L867.33 685.196 L867.889 685.196 L868.448 685.196 L869.007 685.196 L869.567 685.196 L870.126 685.196 L870.685 685.196 L871.244 685.196 L871.804 685.196 L872.363 685.196 L872.922 685.196 L873.481 685.196 L874.041 685.196 L874.6 685.196 L875.159 685.196 L875.718 685.196 L876.278 685.196 L876.837 685.196 L877.396 685.196 L877.955 685.196 L878.515 685.196 L879.074 685.196 L879.633 685.196 L880.192 685.196 L880.752 685.196 L881.311 685.196 L881.87 685.196 L882.429 685.196 L882.989 685.196 L883.548 685.196 L884.107 685.196 L884.666 685.196 L885.226 685.196 L885.785 685.196 L886.344 685.196 L886.903 685.196 L887.463 685.196 L888.022 685.196 L888.581 685.196 L889.14 685.196 L889.7 685.196 L890.259 685.196 L890.818 685.196 L891.377 685.196 L891.937 685.196 L892.496 685.196 L893.055 685.196 L893.614 685.196 L894.174 685.196 L894.733 685.196 L895.292 685.196 L895.851 685.196 L896.411 685.196 L896.97 685.196 L897.529 685.196 L898.088 685.196 L898.648 685.196 L899.207 685.196 L899.766 685.196 L900.325 685.196 L900.885 685.196 L901.444 685.196 L902.003 685.196 L902.562 685.196 L903.122 685.196 L903.681 685.196 L904.24 685.196 L904.799 685.196 L905.359 685.196 L905.918 685.196 L906.477 685.196 L907.036 685.196 L907.596 685.196 L908.155 685.196 L908.714 685.196 L909.273 685.196 L909.833 685.196 L910.392 685.196 L910.951 685.196 L911.51 685.196 L912.07 685.196 L912.629 685.196 L913.188 685.196 L913.747 685.196 L914.307 685.196 L914.866 685.196 L915.425 685.196 L915.984 685.196 L916.544 685.196 L917.103 685.196 L917.662 685.196 L918.221 685.196 L918.781 685.196 L919.34 685.196 L919.899 685.196 L920.458 685.196 L921.018 685.196 L921.577 685.196 L922.136 685.196 L922.695 685.196 L923.255 685.196 L923.814 685.196 L924.373 685.196 L924.932 685.196 L925.492 685.196 L926.051 685.196 L926.61 685.196 L927.169 685.196 L927.729 685.196 L928.288 685.196 L928.847 685.196 L929.406 685.196 L929.966 685.196 L930.525 685.196 L931.084 685.196 L931.644 685.196 L932.203 685.196 L932.762 685.196 L933.321 685.196 L933.881 685.196 L934.44 685.196 L934.999 685.196 L935.558 685.196 L936.118 685.196 L936.677 685.196 L937.236 685.196 L937.795 685.196 L938.355 685.196 L938.914 685.196 L939.473 685.196 L940.032 685.196 L940.592 685.196 L941.151 685.196 L941.71 685.196 L942.269 685.196 L942.829 685.196 L943.388 685.196 L943.947 685.196 L944.506 685.196 L945.066 685.196 L945.625 685.196 L946.184 685.196 L946.743 685.196 L947.303 685.196 L947.862 685.196 L948.421 685.196 L948.98 685.196 L949.54 685.196 L950.099 685.196 L950.658 685.196 L951.217 685.196 L951.777 685.196 L952.336 685.196 L952.895 685.196 L953.454 685.196 L954.014 685.196 L954.573 685.196 L955.132 685.196 L955.691 685.196 L956.251 685.196 L956.81 685.196 L957.369 685.196 L957.928 685.196 L958.488 685.196 L959.047 685.196 L959.606 685.196 L960.165 685.196 L960.725 685.196 L961.284 685.196 L961.843 685.196 L962.402 685.196 L962.962 685.196 L963.521 685.196 L964.08 685.196 L964.639 685.196 L965.199 685.196 L965.758 685.196 L966.317 685.196 L966.876 685.196 L967.436 685.196 L967.995 685.196 L968.554 685.196 L969.113 685.196 L969.673 685.196 L970.232 685.196 L970.791 685.196 L971.35 685.196 L971.91 685.196 L972.469 685.196 L973.028 685.196 L973.587 685.196 L974.147 685.196 L974.706 685.196 L975.265 685.196 L975.824 685.196 L976.384 685.196 L976.943 685.196 L977.502 685.196 L978.061 685.196 L978.621 685.196 L979.18 685.196 L979.739 685.196 L980.298 685.196 L980.858 685.196 L981.417 685.196 L981.976 685.196 L982.535 685.196 L983.095 685.196 L983.654 685.196 L984.213 685.196 L984.772 685.196 L985.332 685.196 L985.891 685.196 L986.45 685.196 L987.009 685.196 L987.569 685.196 L988.128 685.196 L988.687 685.196 L989.246 685.196 L989.806 685.196 L990.365 685.196 L990.924 685.196 L991.483 685.196 L992.043 685.196 L992.602 685.196 L993.161 685.196 L993.72 685.196 L994.28 685.196 L994.839 685.196 L995.398 685.196 L995.957 685.196 L996.517 685.196 L997.076 685.196 L997.635 685.196 L998.194 685.196 L998.754 685.196 L999.313 685.196 L999.872 685.196 L1000.43 685.196 L1000.99 685.196 L1001.55 685.196 L1002.11 685.196 L1002.67 685.196 L1003.23 685.196 L1003.79 685.196 L1004.35 685.196 L1004.91 685.196 L1005.46 685.196 L1006.02 685.196 L1006.58 685.196 L1007.14 685.196 L1007.7 685.196 L1008.26 685.196 L1008.82 685.196 L1009.38 685.196 L1009.94 685.196 L1010.5 685.196 L1011.06 685.196 L1011.62 685.196 L1012.18 685.196 L1012.73 685.196 L1013.29 685.196 L1013.85 685.196 L1014.41 685.196 L1014.97 685.196 L1015.53 685.196 L1016.09 685.196 L1016.65 685.196 L1017.21 685.196 L1017.77 685.196 L1018.33 685.196 L1018.89 685.196 L1019.45 685.196 L1020.01 685.196 L1020.56 685.196 L1021.12 685.196 L1021.68 685.196 L1022.24 685.196 L1022.8 685.196 L1023.36 685.196 L1023.92 685.196 L1024.48 685.196 L1025.04 685.196 L1025.6 685.196 L1026.16 685.196 L1026.72 685.196 L1027.28 685.196 L1027.83 685.196 L1028.39 685.196 L1028.95 685.196 L1029.51 685.196 L1030.07 685.196 L1030.63 685.196 L1031.19 685.196 L1031.75 685.196 L1032.31 685.196 L1032.87 685.196 L1033.43 685.196 L1033.99 685.196 L1034.55 685.196 L1035.1 685.196 L1035.66 685.196 L1036.22 685.196 L1036.78 685.196 L1037.34 685.196 L1037.9 685.196 L1038.46 685.196 L1039.02 685.196 L1039.58 685.196 L1040.14 685.196 L1040.7 685.196 L1041.26 685.196 L1041.82 685.196 L1042.38 685.196 L1042.93 685.196 L1043.49 685.196 L1044.05 685.196 L1044.61 685.196 L1045.17 685.196 L1045.73 685.196 L1046.29 685.196 L1046.85 685.196 L1047.41 685.196 L1047.97 685.196 L1048.53 685.196 L1049.09 685.196 L1049.65 685.196 L1050.2 685.196 L1050.76 685.196 L1051.32 685.196 L1051.88 685.196 L1052.44 685.196 L1053 685.196 L1053.56 685.196 L1054.12 685.196 L1054.68 685.196 L1055.24 685.196 L1055.8 685.196 L1056.36 685.196 L1056.92 685.196 L1057.48 685.196 L1058.03 685.196 L1058.59 685.196 L1059.15 685.196 L1059.71 685.196 L1060.27 685.196 L1060.83 685.196 L1061.39 685.196 L1061.95 685.196 L1062.51 685.196 L1063.07 685.196 L1063.63 685.196 L1064.19 685.196 L1064.75 685.196 L1065.3 685.196 L1065.86 685.196 L1066.42 685.196 L1066.98 685.196 L1067.54 685.196 L1068.1 685.196 L1068.66 685.196 L1069.22 685.196 L1069.78 685.196 L1070.34 685.196 L1070.9 685.196 L1071.46 685.196 L1072.02 685.196 L1072.57 685.196 L1073.13 685.196 L1073.69 685.196 L1074.25 685.196 L1074.81 685.196 L1075.37 685.196 L1075.93 685.196 L1076.49 685.196 L1077.05 685.196 L1077.61 685.196 L1078.17 685.196 L1078.73 685.196 L1079.29 685.196 L1079.85 685.196 L1080.4 685.196 L1080.96 685.196 L1081.52 685.196 L1082.08 685.196 L1082.64 685.196 L1083.2 685.196 L1083.76 685.196 L1084.32 685.196 L1084.88 685.196 L1085.44 685.196 L1086 685.196 L1086.56 685.196 L1087.12 685.196 L1087.67 685.196 L1088.23 685.196 L1088.79 685.196 L1089.35 685.196 L1089.91 685.196 L1090.47 685.196 L1091.03 685.196 L1091.59 685.196 L1092.15 685.196 L1092.71 685.196 L1093.27 685.196 L1093.83 685.196 L1094.39 685.196 L1094.94 685.196 L1095.5 685.196 L1096.06 685.196 L1096.62 685.196 L1097.18 685.196 L1097.74 685.196 L1098.3 685.196 L1098.86 685.196 L1099.42 685.196 L1099.98 685.196 L1100.54 685.196 L1101.1 685.196 L1101.66 685.196 L1102.22 685.196 L1102.77 685.196 L1103.33 685.196 L1103.89 685.196 L1104.45 685.196 L1105.01 685.196 L1105.57 685.196 L1106.13 685.196 L1106.69 685.196 L1107.25 685.196 L1107.81 685.196 L1108.37 685.196 L1108.93 685.196 L1109.49 685.196 L1110.04 685.196 L1110.6 685.196 L1111.16 685.196 L1111.72 685.196 L1112.28 685.196 L1112.84 685.196 L1113.4 685.196 L1113.96 685.196 L1114.52 685.196 L1115.08 685.196 L1115.64 685.196 L1116.2 685.196 L1116.76 685.196 L1117.31 685.196 L1117.87 685.196 L1118.43 685.196 L1118.99 685.196 L1119.55 685.196 L1120.11 685.196 L1120.67 685.196 L1121.23 685.196 L1121.79 685.196 L1122.35 685.196 L1122.91 685.196 L1123.47 685.196 L1124.03 685.196 L1124.59 685.196 L1125.14 685.196 L1125.7 685.196 L1126.26 685.196 L1126.82 685.196 L1127.38 685.196 L1127.94 685.196 L1128.5 685.196 L1129.06 685.196 L1129.62 685.196 L1130.18 685.196 L1130.74 685.196 L1131.3 685.196 L1131.86 685.196 L1132.41 685.196 L1132.97 685.196 L1133.53 685.196 L1134.09 685.196 L1134.65 685.196 L1135.21 685.196 L1135.77 685.196 L1136.33 685.196 L1136.89 685.196 L1137.45 685.196 L1138.01 685.196 L1138.57 685.196 L1139.13 685.196 L1139.68 685.196 L1140.24 685.196 L1140.8 685.196 L1141.36 685.196 L1141.92 685.196 L1142.48 685.196 L1143.04 685.196 L1143.6 685.196 L1144.16 685.196 L1144.72 685.196 L1145.28 685.196 L1145.84 685.196 L1146.4 685.196 L1146.96 685.196 L1147.51 685.196 L1148.07 685.196 L1148.63 685.196 L1149.19 685.196 L1149.75 685.196 L1150.31 685.196 L1150.87 685.196 L1151.43 685.196 L1151.99 685.196 L1152.55 685.196 L1153.11 685.196 L1153.67 685.196 L1154.23 685.196 L1154.78 685.196 L1155.34 685.196 L1155.9 685.196 L1156.46 685.196 L1157.02 685.196 L1157.58 685.196 L1158.14 685.196 L1158.7 685.196 L1159.26 685.196 L1159.82 685.196 L1160.38 685.196 L1160.94 685.196 L1161.5 685.196 L1162.05 685.196 L1162.61 685.196 L1163.17 685.196 L1163.73 685.196 L1164.29 685.196 L1164.85 685.196 L1165.41 685.196 L1165.97 685.196 L1166.53 685.196 L1167.09 685.196 L1167.65 685.196 L1168.21 685.196 L1168.77 685.196 L1169.33 685.196 L1169.88 685.196 L1170.44 685.196 L1171 685.196 L1171.56 685.196 L1172.12 685.196 L1172.68 685.196 L1173.24 685.196 L1173.8 685.196 L1174.36 685.196 L1174.92 685.196 L1175.48 685.196 L1176.04 685.196 L1176.6 685.196 L1177.15 685.196 L1177.71 685.196 L1178.27 685.196 L1178.83 685.196 L1179.39 685.196 L1179.95 685.196 L1180.51 685.196 L1181.07 685.196 L1181.63 685.196 L1182.19 685.196 L1182.75 685.196 L1183.31 685.196 L1183.87 685.196 L1184.43 685.196 L1184.98 685.196 L1185.54 685.196 L1186.1 685.196 L1186.66 685.196 L1187.22 685.196 L1187.78 685.196 L1188.34 685.196 L1188.9 685.196 L1189.46 685.196 L1190.02 685.196 L1190.58 685.196 L1191.14 685.196 L1191.7 685.196 L1192.25 685.196 L1192.81 685.196 L1193.37 685.196 L1193.93 685.196 L1194.49 685.196 L1195.05 685.196 L1195.61 685.196 L1196.17 685.196 L1196.73 685.196 L1197.29 685.196 L1197.85 685.196 L1198.41 685.196 L1198.97 685.196 L1199.52 685.196 L1200.08 685.196 L1200.64 685.196 L1201.2 685.196 L1201.76 685.196 L1202.32 685.196 L1202.88 685.196 L1203.44 685.196 L1204 685.196 L1204.56 685.196 L1205.12 685.196 L1205.68 685.196 L1206.24 685.196 L1206.8 685.196 L1207.35 685.196 L1207.91 685.196 L1208.47 685.196 L1209.03 685.196 L1209.59 685.196 L1210.15 685.196 L1210.71 685.196 L1211.27 685.196 L1211.83 685.196 L1212.39 685.196 L1212.95 685.196 L1213.51 685.196 L1214.07 685.196 L1214.62 685.196 L1215.18 685.196 L1215.74 685.196 L1216.3 685.196 L1216.86 685.196 L1217.42 685.196 L1217.98 685.196 L1218.54 685.196 L1219.1 685.196 L1219.66 685.196 L1220.22 685.196 L1220.78 685.196 L1221.34 685.196 L1221.89 685.196 L1222.45 685.196 L1223.01 685.196 L1223.57 685.196 L1224.13 685.196 L1224.69 685.196 L1225.25 685.196 L1225.81 685.196 L1226.37 685.196 L1226.93 685.196 L1227.49 685.196 L1228.05 685.196 L1228.61 685.196 L1229.17 685.196 L1229.72 685.196 L1230.28 685.196 L1230.84 685.196 L1231.4 685.196 L1231.96 685.196 L1232.52 685.196 L1233.08 685.196 L1233.64 685.196 L1234.2 685.196 L1234.76 685.196 L1235.32 685.196 L1235.88 685.196 L1236.44 685.196 L1236.99 685.196 L1237.55 685.196 L1238.11 685.196 L1238.67 685.196 L1239.23 685.196 L1239.79 685.196 L1240.35 685.196 L1240.91 685.196 L1241.47 685.196 L1242.03 685.196 L1242.59 685.196 L1243.15 685.196 L1243.71 685.196 L1244.26 685.196 L1244.82 685.196 L1245.38 685.196 L1245.94 685.196 L1246.5 685.196 L1247.06 685.196 L1247.62 685.196 L1248.18 685.196 L1248.74 685.196 L1249.3 685.196 L1249.86 685.196 L1250.42 685.196 L1250.98 685.196 L1251.54 685.196 L1252.09 685.196 L1252.65 685.196 L1253.21 685.196 L1253.77 685.196 L1254.33 685.196 L1254.89 685.196 L1255.45 685.196 L1256.01 685.196 L1256.57 685.196 L1257.13 685.196 L1257.69 685.196 L1258.25 685.196 L1258.81 685.196 L1259.36 685.196 L1259.92 685.196 L1260.48 685.196 L1261.04 685.196 L1261.6 685.196 L1262.16 685.196 L1262.72 685.196 L1263.28 685.196 L1263.84 685.196 L1264.4 685.196 L1264.96 685.196 L1265.52 685.196 L1266.08 685.196 L1266.63 685.196 L1267.19 685.196 L1267.75 685.196 L1268.31 685.196 L1268.87 685.196 L1269.43 685.196 L1269.99 685.196 L1270.55 685.196 L1271.11 685.196 L1271.67 685.196 L1272.23 685.196 L1272.79 685.196 L1273.35 685.196 L1273.91 685.196 L1274.46 685.196 L1275.02 685.196 L1275.58 685.196 L1276.14 685.196 L1276.7 685.196 L1277.26 685.196 L1277.82 685.196 L1278.38 685.196 L1278.94 685.196 L1279.5 685.196 L1280.06 685.196 L1280.62 685.196 L1281.18 685.196 L1281.73 685.196 L1282.29 685.196 L1282.85 685.196 L1283.41 685.196 L1283.97 685.196 L1284.53 685.196 L1285.09 685.196 L1285.65 685.196 L1286.21 685.196 L1286.77 685.196 L1287.33 685.196 L1287.89 685.196 L1288.45 685.196 L1289 685.196 L1289.56 685.196 L1290.12 685.196 L1290.68 685.196 L1291.24 685.196 L1291.8 685.196 L1292.36 685.196 L1292.92 685.196 L1293.48 685.196 L1294.04 685.196 L1294.6 685.196 L1295.16 685.196 L1295.72 685.196 L1296.28 685.196 L1296.83 685.196 L1297.39 685.196 L1297.95 685.196 L1298.51 685.196 L1299.07 685.196 L1299.63 685.196 L1300.19 685.196 L1300.75 685.196 L1301.31 685.196 L1301.87 685.196 L1302.43 685.196 L1302.99 685.196 L1303.55 685.196 L1304.1 685.196 L1304.66 685.196 L1305.22 685.196 L1305.78 685.196 L1306.34 685.196 L1306.9 685.196 L1307.46 685.196 L1308.02 685.196 L1308.58 685.196 L1309.14 685.196 L1309.7 685.196 L1310.26 685.196 L1310.82 685.196 L1311.38 685.196 L1311.93 685.196 L1312.49 685.196 L1313.05 685.196 L1313.61 685.196 L1314.17 685.196 L1314.73 685.196 L1315.29 685.196 L1315.85 685.196 L1316.41 685.196 L1316.97 685.196 L1317.53 685.196 L1318.09 685.196 L1318.65 685.196 L1319.2 685.196 L1319.76 685.196 L1320.32 685.196 L1320.88 685.196 L1321.44 685.196 L1322 685.196 L1322.56 685.196 L1323.12 685.196 L1323.68 685.196 L1324.24 685.196 L1324.8 685.196 L1325.36 685.196 L1325.92 685.196 L1326.47 685.196 L1327.03 685.196 L1327.59 685.196 L1328.15 685.196 L1328.71 685.196 L1329.27 685.196 L1329.83 685.196 L1330.39 685.196 L1330.95 685.196 L1331.51 685.196 L1332.07 685.196 L1332.63 685.196 L1333.19 685.196 L1333.75 685.196 L1334.3 685.196 L1334.86 685.196 L1335.42 685.196 L1335.98 685.196 L1336.54 685.196 L1337.1 685.196 L1337.66 685.196 L1338.22 685.196 L1338.78 685.196 L1339.34 685.196 L1339.9 685.196 L1340.46 685.196 L1341.02 685.196 L1341.57 685.196 L1342.13 685.196 L1342.69 685.196 L1343.25 685.196 L1343.81 685.196 L1344.37 685.196 L1344.93 685.196 L1345.49 685.196 L1346.05 685.196 L1346.61 685.196 L1347.17 685.196 L1347.73 685.196 L1348.29 685.196 L1348.84 685.196 L1349.4 685.196 L1349.96 685.196 L1350.52 685.196 L1351.08 685.196 L1351.64 685.196 L1352.2 685.196 L1352.76 685.196 L1353.32 685.196 L1353.88 685.196 L1354.44 685.196 L1355 685.196 L1355.56 685.196 L1356.12 685.196 L1356.67 685.196 L1357.23 685.196 L1357.79 685.196 L1358.35 685.196 L1358.91 685.196 L1359.47 685.196 L1360.03 685.196 L1360.59 685.196 L1361.15 685.196 L1361.71 685.196 L1362.27 685.196 L1362.83 685.196 L1363.39 685.196 L1363.94 685.196 L1364.5 685.196 L1365.06 685.196 L1365.62 685.196 L1366.18 685.196 L1366.74 685.196 L1367.3 685.196 L1367.86 685.196 L1368.42 685.196 L1368.98 685.196 L1369.54 685.196 L1370.1 685.196 L1370.66 685.196 L1371.21 685.196 L1371.77 685.196 L1372.33 685.196 L1372.89 685.196 L1373.45 685.196 L1374.01 685.196 L1374.57 685.196 L1375.13 685.196 L1375.69 685.196 L1376.25 685.196 L1376.81 685.196 L1377.37 685.196 L1377.93 685.196 L1378.49 685.196 L1379.04 685.196 L1379.6 685.196 L1380.16 685.196 L1380.72 685.196 L1381.28 685.196 L1381.84 685.196 L1382.4 685.196 L1382.96 685.196 L1383.52 685.196 L1384.08 685.196 L1384.64 685.196 L1385.2 685.196 L1385.76 685.196 L1386.31 685.196 L1386.87 685.196 L1387.43 685.196 L1387.99 685.196 L1388.55 685.196 L1389.11 685.196 L1389.67 685.196 L1390.23 685.196 L1390.79 685.196 L1391.35 685.196 L1391.91 685.196 L1392.47 685.196 L1393.03 685.196 L1393.58 685.196 L1394.14 685.196 L1394.7 685.196 L1395.26 685.196 L1395.82 685.196 L1396.38 685.196 L1396.94 685.196 L1397.5 685.196 L1398.06 685.196 L1398.62 685.196 L1399.18 685.196 L1399.74 685.196 L1400.3 685.196 L1400.86 685.196 L1401.41 685.196 L1401.97 685.196 L1402.53 685.196 L1403.09 685.196 L1403.65 685.196 L1404.21 685.196 L1404.77 685.196 L1405.33 685.196 L1405.89 685.196 L1406.45 685.196 L1407.01 685.196 L1407.57 685.196 L1408.13 685.196 L1408.68 685.196 L1409.24 685.196 L1409.8 685.196 L1410.36 685.196 L1410.92 685.196 L1411.48 685.196 L1412.04 685.196 L1412.6 685.196 L1413.16 685.196 L1413.72 685.196 L1414.28 685.196 L1414.84 685.196 L1415.4 685.196 L1415.95 685.196 L1416.51 685.196 L1417.07 685.196 L1417.63 685.196 L1418.19 685.196 L1418.75 685.196 L1419.31 685.196 L1419.87 685.196 L1420.43 685.196 L1420.99 685.196 L1421.55 685.196 L1422.11 685.196 L1422.67 685.196 L1423.23 685.196 L1423.78 685.196 L1424.34 685.196 L1424.9 685.196 L1425.46 685.196 L1426.02 685.196 L1426.58 685.196 L1427.14 685.196 L1427.7 685.196 L1428.26 685.196 L1428.82 685.196 L1429.38 685.196 L1429.94 685.196 L1430.5 685.196 L1431.05 685.196 L1431.61 685.196 L1432.17 685.196 L1432.73 685.196 L1433.29 685.196 L1433.85 685.196 L1434.41 685.196 L1434.97 685.196 L1435.53 685.196 L1436.09 685.196 L1436.65 685.196 L1437.21 685.196 L1437.77 685.196 L1438.33 685.196 L1438.88 685.196 L1439.44 685.196 L1440 685.196 L1440.56 685.196 L1441.12 685.196 L1441.68 685.196 L1442.24 685.196 L1442.8 685.196 L1443.36 685.196 L1443.92 685.196 L1444.48 685.196 L1445.04 685.196 L1445.6 685.196 L1446.15 685.196 L1446.71 685.196 L1447.27 685.196 L1447.83 685.196 L1448.39 685.196 L1448.95 685.196 L1449.51 685.196 L1450.07 685.196 L1450.63 685.196 L1451.19 685.196 L1451.75 685.196 L1452.31 685.196 L1452.87 685.196 L1453.42 685.196 L1453.98 685.196 L1454.54 685.196 L1455.1 685.196 L1455.66 685.196 L1456.22 685.196 L1456.78 685.196 L1457.34 685.196 L1457.9 685.196 L1458.46 685.196 L1459.02 685.196 L1459.58 685.196 L1460.14 685.196 L1460.7 685.196 L1461.25 685.196 L1461.81 685.196 L1462.37 685.196 L1462.93 685.196 L1463.49 685.196 L1464.05 685.196 L1464.61 685.196 L1465.17 685.196 L1465.73 685.196 L1466.29 685.196 L1466.85 685.196 L1467.41 685.196 L1467.97 685.196 L1468.52 685.196 L1469.08 685.196 L1469.64 685.196 L1470.2 685.196 L1470.76 685.196 L1471.32 685.196 L1471.88 685.196 L1472.44 685.196 L1473 685.196 L1473.56 685.196 L1474.12 685.196 L1474.68 685.196 L1475.24 685.196 L1475.79 685.196 L1476.35 685.196 L1476.91 685.196 L1477.47 685.196 L1478.03 685.196 L1478.59 685.196 L1479.15 685.196 L1479.71 685.196 L1480.27 685.196 L1480.83 685.196 L1481.39 685.196 L1481.95 685.196 L1482.51 685.196 L1483.07 685.196 L1483.62 685.196 L1484.18 685.196 L1484.74 685.196 L1485.3 685.196 L1485.86 685.196 L1486.42 685.196 L1486.98 685.196 L1487.54 685.196 L1488.1 685.196 L1488.66 685.196 L1489.22 685.196 L1489.78 685.196 L1490.34 685.196 L1490.89 685.196 L1491.45 685.196 L1492.01 685.196 L1492.57 685.196 L1493.13 685.196 L1493.69 685.196 L1494.25 685.196 L1494.81 685.196 L1495.37 685.196 L1495.93 685.196 L1496.49 685.196 L1497.05 685.196 L1497.61 685.196 L1498.16 685.196 L1498.72 685.196 L1499.28 685.196 L1499.84 685.196 L1500.4 685.196 L1500.96 685.196 L1501.52 685.196 L1502.08 685.196 L1502.64 685.196 L1503.2 685.196 L1503.76 685.196 L1504.32 685.196 L1504.88 685.196 L1505.44 685.196 L1505.99 685.196 L1506.55 685.196 L1507.11 685.196 L1507.67 685.196 L1508.23 685.196 L1508.79 685.196 L1509.35 685.196 L1509.91 685.196 L1510.47 685.196 L1511.03 685.196 L1511.59 685.196 L1512.15 685.196 L1512.71 685.196 L1513.26 685.196 L1513.82 685.196 L1514.38 685.196 L1514.94 685.196 L1515.5 685.196 L1516.06 685.196 L1516.62 685.196 L1517.18 685.196 L1517.74 685.196 L1518.3 685.196 L1518.86 685.196 L1519.42 685.196 L1519.98 685.196 L1520.53 685.196 L1521.09 685.196 L1521.65 685.196 L1522.21 685.196 L1522.77 685.196 L1523.33 685.196 L1523.89 685.196 L1524.45 685.196 L1525.01 685.196 L1525.57 685.196 L1526.13 685.196 L1526.69 685.196 L1527.25 685.196 L1527.81 685.196 L1528.36 685.196 L1528.92 685.196 L1529.48 685.196 L1530.04 685.196 L1530.6 685.196 L1531.16 685.196 L1531.72 685.196 L1532.28 685.196 L1532.84 685.196 L1533.4 685.196 L1533.96 685.196 L1534.52 685.196 L1535.08 685.196 L1535.63 685.196 L1536.19 685.196 L1536.75 685.196 L1537.31 685.196 L1537.87 685.196 L1538.43 685.196 L1538.99 685.196 L1539.55 685.196 L1540.11 685.196 L1540.67 685.196 L1541.23 685.196 L1541.79 685.196 L1542.35 685.196 L1542.9 685.196 L1543.46 685.196 L1544.02 685.196 L1544.58 685.196 L1545.14 685.196 L1545.7 685.196 L1546.26 685.196 L1546.82 685.196 L1547.38 685.196 L1547.94 685.196 L1548.5 685.196 L1549.06 685.196 L1549.62 685.196 L1550.18 685.196 L1550.73 685.196 L1551.29 685.196 L1551.85 685.196 L1552.41 685.196 L1552.97 685.196 L1553.53 685.196 L1554.09 685.196 L1554.65 685.196 L1555.21 685.196 L1555.77 685.196 L1556.33 685.196 L1556.89 685.196 L1557.45 685.196 L1558 685.196 L1558.56 685.196 L1559.12 685.196 L1559.68 685.196 L1560.24 685.196 L1560.8 685.196 L1561.36 685.196 L1561.92 685.196 L1562.48 685.196 L1563.04 685.196 L1563.6 685.196 L1564.16 685.196 L1564.72 685.196 L1565.28 685.196 L1565.83 685.196 L1566.39 685.196 L1566.95 685.196 L1567.51 685.196 L1568.07 685.196 L1568.63 685.196 L1569.19 685.196 L1569.75 685.196 L1570.31 685.196 L1570.87 685.196 L1571.43 685.196 L1571.99 685.196 L1572.55 685.196 L1573.1 685.196 L1573.66 685.196 L1574.22 685.196 L1574.78 685.196 L1575.34 685.196 L1575.9 685.196 L1576.46 685.196 L1577.02 685.196 L1577.58 685.196 L1578.14 685.196 L1578.7 685.196 L1579.26 685.196 L1579.82 685.196 L1580.37 685.196 L1580.93 685.196 L1581.49 685.196 L1582.05 685.196 L1582.61 685.196 L1583.17 685.196 L1583.73 685.196 L1584.29 685.196 L1584.85 685.196 L1585.41 685.196 L1585.97 685.196 L1586.53 685.196 L1587.09 685.196 L1587.65 685.196 L1588.2 685.196 L1588.76 685.196 L1589.32 685.196 L1589.88 685.196 L1590.44 685.196 L1591 685.196 L1591.56 685.196 L1592.12 685.196 L1592.68 685.196 L1593.24 685.196 L1593.8 685.196 L1594.36 685.196 L1594.92 685.196 L1595.47 685.196 L1596.03 685.196 L1596.59 685.196 L1597.15 685.196 L1597.71 685.196 L1598.27 685.196 L1598.83 685.196 L1599.39 685.196 L1599.95 685.196 L1600.51 685.196 L1601.07 685.196 L1601.63 685.196 L1602.19 685.196 L1602.74 685.196 L1603.3 685.196 L1603.86 685.196 L1604.42 685.196 L1604.98 685.196 L1605.54 685.196 L1606.1 685.196 L1606.66 685.196 L1607.22 685.196 L1607.78 685.196 L1608.34 685.196 L1608.9 685.196 L1609.46 685.196 L1610.02 685.196 L1610.57 685.196 L1611.13 685.196 L1611.69 685.196 L1612.25 685.196 L1612.81 685.196 L1613.37 685.196 L1613.93 685.196 L1614.49 685.196 L1615.05 685.196 L1615.61 685.196 L1616.17 685.196 L1616.73 685.196 L1617.29 685.196 L1617.84 685.196 L1618.4 685.196 L1618.96 685.196 L1619.52 685.196 L1620.08 685.196 L1620.64 685.196 L1621.2 685.196 L1621.76 685.196 L1622.32 685.196 L1622.88 685.196 L1623.44 685.196 L1624 685.196 L1624.56 685.196 L1625.11 685.196 L1625.67 685.196 L1626.23 685.196 L1626.79 685.196 L1627.35 685.196 L1627.91 685.196 L1628.47 685.196 L1629.03 685.196 L1629.59 685.196 L1630.15 685.196 L1630.71 685.196 L1631.27 685.196 L1631.83 685.196 L1632.39 685.196 L1632.94 685.196 L1633.5 685.196 L1634.06 685.196 L1634.62 685.196 L1635.18 685.196 L1635.74 685.196 L1636.3 685.196 L1636.86 685.196 L1637.42 685.196 L1637.98 685.196 L1638.54 685.196 L1639.1 685.196 L1639.66 685.196 L1640.21 685.196 L1640.77 685.196 L1641.33 685.196 L1641.89 685.196 L1642.45 685.196 L1643.01 685.196 L1643.57 685.196 L1644.13 685.196 L1644.69 685.196 L1645.25 685.196 L1645.81 685.196 L1646.37 685.196 L1646.93 685.196 L1647.48 685.196 L1648.04 685.196 L1648.6 685.196 L1649.16 685.196 L1649.72 685.196 L1650.28 685.196 L1650.84 685.196 L1651.4 685.196 L1651.96 685.196 L1652.52 685.196 L1653.08 685.196 L1653.64 685.196 L1654.2 685.196 L1654.76 685.196 L1655.31 685.196 L1655.87 685.196 L1656.43 685.196 L1656.99 685.196 L1657.55 685.196 L1658.11 685.196 L1658.67 685.196 L1659.23 685.196 L1659.79 685.196 L1660.35 685.196 L1660.91 685.196 L1661.47 685.196 L1662.03 685.196 L1662.58 685.196 L1663.14 685.196 L1663.7 685.196 L1664.26 685.196 L1664.82 685.196 L1665.38 685.196 L1665.94 685.196 L1666.5 685.196 L1667.06 685.196 L1667.62 685.196 L1668.18 685.196 L1668.74 685.196 L1669.3 685.196 L1669.85 685.196 L1670.41 685.196 L1670.97 685.196 L1671.53 685.196 L1672.09 685.196 L1672.65 685.196 L1673.21 685.196 L1673.77 685.196 L1674.33 685.196 L1674.89 685.196 L1675.45 685.196 L1676.01 685.196 L1676.57 685.196 L1677.13 685.196 L1677.68 685.196 L1678.24 685.196 L1678.8 685.196 L1679.36 685.196 L1679.92 685.196 L1680.48 685.196 L1681.04 685.196 L1681.6 685.196 L1682.16 685.196 L1682.72 685.196 L1683.28 685.196 L1683.84 685.196 L1684.4 685.196 L1684.95 685.196 L1685.51 685.196 L1686.07 685.196 L1686.63 685.196 L1687.19 685.196 L1687.75 685.196 L1688.31 685.196 L1688.87 685.196 L1689.43 685.196 L1689.99 685.196 L1690.55 685.196 L1691.11 685.196 L1691.67 685.196 L1692.23 685.196 L1692.78 685.196 L1693.34 685.196 L1693.9 685.196 L1694.46 685.196 L1695.02 685.196 L1695.58 685.196 L1696.14 685.196 L1696.7 685.196 L1697.26 685.196 L1697.82 685.196 L1698.38 685.196 L1698.94 685.196 L1699.5 685.196 L1700.05 685.196 L1700.61 685.196 L1701.17 685.196 L1701.73 685.196 L1702.29 685.196 L1702.85 685.196 L1703.41 685.196 L1703.97 685.196 L1704.53 685.196 L1705.09 685.196 L1705.65 685.196 L1706.21 685.196 L1706.77 685.196 L1707.32 685.196 L1707.88 685.196 L1708.44 685.196 L1709 685.196 L1709.56 685.196 L1710.12 685.196 L1710.68 685.196 L1711.24 685.196 L1711.8 685.196 L1712.36 685.196 L1712.92 685.196 L1713.48 685.196 L1714.04 685.196 L1714.6 685.196 L1715.15 685.196 L1715.71 685.196 L1716.27 685.196 L1716.83 685.196 L1717.39 685.196 L1717.95 685.196 L1718.51 685.196 L1719.07 685.196 L1719.63 685.196 L1720.19 685.196 L1720.75 685.196 L1721.31 685.196 L1721.87 685.196 L1722.42 685.196 L1722.98 685.196 L1723.54 685.196 L1724.1 685.196 L1724.66 685.196 L1725.22 685.196 L1725.78 685.196 L1726.34 685.196 L1726.9 685.196 L1727.46 685.196 L1728.02 685.196 L1728.58 685.196 L1729.14 685.196 L1729.69 685.196 L1730.25 685.196 L1730.81 685.196 L1731.37 685.196 L1731.93 685.196 L1732.49 685.196 L1733.05 685.196 L1733.61 685.196 L1734.17 685.196 L1734.73 685.196 L1735.29 685.196 L1735.85 685.196 L1736.41 685.196 L1736.97 685.196 L1737.52 685.196 L1738.08 685.196 L1738.64 685.196 L1739.2 685.196 L1739.76 685.196 L1740.32 685.196 L1740.88 685.196 L1741.44 685.196 L1742 685.196 L1742.56 685.196 L1743.12 685.196 L1743.68 685.196 L1744.24 685.196 L1744.79 685.196 L1745.35 685.196 L1745.91 685.196 L1746.47 685.196 L1747.03 685.196 L1747.59 685.196 L1748.15 685.196 L1748.71 685.196 L1749.27 685.196 L1749.83 685.196 L1750.39 685.196 L1750.95 685.196 L1751.51 685.196 L1752.06 685.196 L1752.62 685.196 L1753.18 685.196 L1753.74 685.196 L1754.3 685.196 L1754.86 685.196 L1755.42 685.196 L1755.98 685.196 L1756.54 685.196 L1757.1 685.196 L1757.66 685.196 L1758.22 685.196 L1758.78 685.196 L1759.34 685.196 L1759.89 685.196 L1760.45 685.196 L1761.01 685.196 L1761.57 685.196 L1762.13 685.196 L1762.69 685.196 L1763.25 685.196 L1763.81 685.196 L1764.37 685.196 L1764.93 685.196 L1765.49 685.196 L1766.05 685.196 L1766.61 685.196 L1767.16 685.196 L1767.72 685.196 L1768.28 685.196 L1768.84 685.196 L1769.4 685.196 L1769.96 685.196 L1770.52 685.196 L1771.08 685.196 L1771.64 685.196 L1772.2 685.196 L1772.76 685.196 L1773.32 685.196 L1773.88 685.196 L1774.43 685.196 L1774.99 685.196 L1775.55 685.196 L1776.11 685.196 L1776.67 685.196 L1777.23 685.196 L1777.79 685.196 L1778.35 685.196 L1778.91 685.196 L1779.47 685.196 L1780.03 685.196 L1780.59 685.196 L1781.15 685.196 L1781.71 685.196 L1782.26 685.196 L1782.82 685.196 L1783.38 685.196 L1783.94 685.196 L1784.5 685.196 L1785.06 685.196 L1785.62 685.196 L1786.18 685.196 L1786.74 685.196 L1787.3 685.196 L1787.86 685.196 L1788.42 685.196 L1788.98 685.196 L1789.53 685.196 L1790.09 685.196 L1790.65 685.196 L1791.21 685.196 L1791.77 685.196 L1792.33 685.196 L1792.89 685.196 L1793.45 685.196 L1794.01 685.196 L1794.57 685.196 L1795.13 685.196 L1795.69 685.196 L1796.25 685.196 L1796.8 685.196 L1797.36 685.196 L1797.92 685.196 L1798.48 685.196 L1799.04 685.196 L1799.6 685.196 L1800.16 685.196 L1800.72 685.196 L1801.28 685.196 L1801.84 685.196 L1802.4 685.196 L1802.96 685.196 L1803.52 685.196 L1804.08 685.196 L1804.63 685.196 L1805.19 685.196 L1805.75 685.196 L1806.31 685.196 L1806.87 685.196 L1807.43 685.196 L1807.99 685.196 L1808.55 685.196 L1809.11 685.196 L1809.67 685.196 L1810.23 685.196 L1810.79 685.196 L1811.35 685.196 L1811.9 685.196 L1812.46 685.196 L1813.02 685.196 L1813.58 685.196 L1814.14 685.196 L1814.7 685.196 L1815.26 685.196 L1815.82 685.196 L1816.38 685.196 L1816.94 685.196 L1817.5 685.196 L1818.06 685.196 L1818.62 685.196 L1819.18 685.196 L1819.73 685.196 L1820.29 685.196 L1820.85 685.196 L1821.41 685.196 L1821.97 685.196 L1822.53 685.196 L1823.09 685.196 L1823.65 685.196 L1824.21 685.196 L1824.77 685.196 L1825.33 685.196 L1825.89 685.196 L1826.45 685.196 L1827 685.196 L1827.56 685.196 L1828.12 685.196 L1828.68 685.196 L1829.24 685.196 L1829.8 685.196 L1830.36 685.196 L1830.92 685.196 L1831.48 685.196 L1832.04 685.196 L1832.6 685.196 L1833.16 685.196 L1833.72 685.196 L1834.27 685.196 L1834.83 685.196 L1835.39 685.196 L1835.95 685.196 L1836.51 685.196 L1837.07 685.196 L1837.63 685.196 L1838.19 685.196 L1838.19 682.989 L1837.63 682.989 L1837.07 682.989 L1836.51 682.989 L1835.95 682.989 L1835.39 682.989 L1834.83 682.989 L1834.27 682.989 L1833.72 682.989 L1833.16 682.989 L1832.6 682.989 L1832.04 682.989 L1831.48 682.989 L1830.92 682.989 L1830.36 682.989 L1829.8 682.989 L1829.24 682.989 L1828.68 682.989 L1828.12 682.989 L1827.56 682.989 L1827 682.989 L1826.45 682.989 L1825.89 682.989 L1825.33 682.989 L1824.77 682.989 L1824.21 682.989 L1823.65 682.989 L1823.09 682.989 L1822.53 682.989 L1821.97 682.989 L1821.41 682.989 L1820.85 682.989 L1820.29 682.989 L1819.73 682.989 L1819.18 682.989 L1818.62 682.989 L1818.06 682.989 L1817.5 682.989 L1816.94 682.989 L1816.38 682.989 L1815.82 682.989 L1815.26 682.989 L1814.7 682.989 L1814.14 682.989 L1813.58 682.989 L1813.02 682.989 L1812.46 682.989 L1811.9 682.989 L1811.35 682.989 L1810.79 682.989 L1810.23 682.989 L1809.67 682.989 L1809.11 682.989 L1808.55 682.989 L1807.99 682.989 L1807.43 682.989 L1806.87 682.989 L1806.31 682.989 L1805.75 682.989 L1805.19 682.989 L1804.63 682.989 L1804.08 682.989 L1803.52 682.989 L1802.96 682.989 L1802.4 682.989 L1801.84 682.989 L1801.28 682.989 L1800.72 682.989 L1800.16 682.989 L1799.6 682.989 L1799.04 682.989 L1798.48 682.989 L1797.92 682.989 L1797.36 682.989 L1796.8 682.989 L1796.25 682.989 L1795.69 682.989 L1795.13 682.989 L1794.57 682.989 L1794.01 682.989 L1793.45 682.989 L1792.89 682.989 L1792.33 682.989 L1791.77 682.989 L1791.21 682.989 L1790.65 682.989 L1790.09 682.989 L1789.53 682.989 L1788.98 682.989 L1788.42 682.989 L1787.86 682.989 L1787.3 682.989 L1786.74 682.989 L1786.18 682.989 L1785.62 682.989 L1785.06 682.989 L1784.5 682.989 L1783.94 682.989 L1783.38 682.989 L1782.82 682.989 L1782.26 682.989 L1781.71 682.989 L1781.15 682.989 L1780.59 682.989 L1780.03 682.989 L1779.47 682.989 L1778.91 682.989 L1778.35 682.989 L1777.79 682.989 L1777.23 682.989 L1776.67 682.989 L1776.11 682.989 L1775.55 682.989 L1774.99 682.989 L1774.43 682.989 L1773.88 682.989 L1773.32 682.989 L1772.76 682.989 L1772.2 682.989 L1771.64 682.989 L1771.08 682.989 L1770.52 682.989 L1769.96 682.989 L1769.4 682.989 L1768.84 682.989 L1768.28 682.989 L1767.72 682.989 L1767.16 682.989 L1766.61 682.989 L1766.05 682.989 L1765.49 682.989 L1764.93 682.989 L1764.37 682.989 L1763.81 682.989 L1763.25 682.989 L1762.69 682.989 L1762.13 682.989 L1761.57 682.989 L1761.01 682.989 L1760.45 682.989 L1759.89 682.989 L1759.34 682.989 L1758.78 682.989 L1758.22 682.989 L1757.66 682.989 L1757.1 682.989 L1756.54 682.989 L1755.98 682.989 L1755.42 682.989 L1754.86 682.989 L1754.3 682.989 L1753.74 682.989 L1753.18 682.989 L1752.62 682.989 L1752.06 682.989 L1751.51 682.989 L1750.95 682.989 L1750.39 682.989 L1749.83 682.989 L1749.27 682.989 L1748.71 682.989 L1748.15 682.989 L1747.59 682.989 L1747.03 682.989 L1746.47 682.989 L1745.91 682.989 L1745.35 682.989 L1744.79 682.989 L1744.24 682.989 L1743.68 682.989 L1743.12 682.989 L1742.56 682.989 L1742 682.989 L1741.44 682.989 L1740.88 682.989 L1740.32 682.989 L1739.76 682.989 L1739.2 682.989 L1738.64 682.989 L1738.08 682.989 L1737.52 682.989 L1736.97 682.989 L1736.41 682.989 L1735.85 682.989 L1735.29 682.989 L1734.73 682.989 L1734.17 682.989 L1733.61 682.989 L1733.05 682.989 L1732.49 682.989 L1731.93 682.989 L1731.37 682.989 L1730.81 682.989 L1730.25 682.989 L1729.69 682.989 L1729.14 682.989 L1728.58 682.989 L1728.02 682.989 L1727.46 682.989 L1726.9 682.989 L1726.34 682.989 L1725.78 682.989 L1725.22 682.989 L1724.66 682.989 L1724.1 682.989 L1723.54 682.989 L1722.98 682.989 L1722.42 682.989 L1721.87 682.989 L1721.31 682.989 L1720.75 682.989 L1720.19 682.989 L1719.63 682.989 L1719.07 682.989 L1718.51 682.989 L1717.95 682.989 L1717.39 682.989 L1716.83 682.989 L1716.27 682.989 L1715.71 682.989 L1715.15 682.989 L1714.6 682.989 L1714.04 682.989 L1713.48 682.989 L1712.92 682.989 L1712.36 682.989 L1711.8 682.989 L1711.24 682.989 L1710.68 682.989 L1710.12 682.989 L1709.56 682.989 L1709 682.989 L1708.44 682.989 L1707.88 682.989 L1707.32 682.989 L1706.77 682.989 L1706.21 682.989 L1705.65 682.989 L1705.09 682.989 L1704.53 682.989 L1703.97 682.989 L1703.41 682.989 L1702.85 682.989 L1702.29 682.989 L1701.73 682.989 L1701.17 682.989 L1700.61 682.989 L1700.05 682.989 L1699.5 682.989 L1698.94 682.989 L1698.38 682.989 L1697.82 682.989 L1697.26 682.989 L1696.7 682.989 L1696.14 682.989 L1695.58 682.989 L1695.02 682.989 L1694.46 682.989 L1693.9 682.989 L1693.34 682.989 L1692.78 682.989 L1692.23 682.989 L1691.67 682.989 L1691.11 682.989 L1690.55 682.989 L1689.99 682.989 L1689.43 682.989 L1688.87 682.989 L1688.31 682.989 L1687.75 682.989 L1687.19 682.989 L1686.63 682.989 L1686.07 682.989 L1685.51 682.989 L1684.95 682.989 L1684.4 682.989 L1683.84 682.989 L1683.28 682.989 L1682.72 682.989 L1682.16 682.989 L1681.6 682.989 L1681.04 682.989 L1680.48 682.989 L1679.92 682.989 L1679.36 682.989 L1678.8 682.989 L1678.24 682.989 L1677.68 682.989 L1677.13 682.989 L1676.57 682.989 L1676.01 682.989 L1675.45 682.989 L1674.89 682.989 L1674.33 682.989 L1673.77 682.989 L1673.21 682.989 L1672.65 682.989 L1672.09 682.989 L1671.53 682.989 L1670.97 682.989 L1670.41 682.989 L1669.85 682.989 L1669.3 682.989 L1668.74 682.989 L1668.18 682.989 L1667.62 682.989 L1667.06 682.989 L1666.5 682.989 L1665.94 682.989 L1665.38 682.989 L1664.82 682.989 L1664.26 682.989 L1663.7 682.989 L1663.14 682.989 L1662.58 682.989 L1662.03 682.989 L1661.47 682.989 L1660.91 682.989 L1660.35 682.989 L1659.79 682.989 L1659.23 682.989 L1658.67 682.989 L1658.11 682.989 L1657.55 682.989 L1656.99 682.989 L1656.43 682.989 L1655.87 682.989 L1655.31 682.989 L1654.76 682.989 L1654.2 682.989 L1653.64 682.989 L1653.08 682.989 L1652.52 682.989 L1651.96 682.989 L1651.4 682.989 L1650.84 682.989 L1650.28 682.989 L1649.72 682.989 L1649.16 682.989 L1648.6 682.989 L1648.04 682.989 L1647.48 682.989 L1646.93 682.989 L1646.37 682.989 L1645.81 682.989 L1645.25 682.989 L1644.69 682.989 L1644.13 682.989 L1643.57 682.989 L1643.01 682.989 L1642.45 682.989 L1641.89 682.989 L1641.33 682.989 L1640.77 682.989 L1640.21 682.989 L1639.66 682.989 L1639.1 682.989 L1638.54 682.989 L1637.98 682.989 L1637.42 682.989 L1636.86 682.989 L1636.3 682.989 L1635.74 682.989 L1635.18 682.989 L1634.62 682.989 L1634.06 682.989 L1633.5 682.989 L1632.94 682.989 L1632.39 682.989 L1631.83 682.989 L1631.27 682.989 L1630.71 682.989 L1630.15 682.989 L1629.59 682.989 L1629.03 682.989 L1628.47 682.989 L1627.91 682.989 L1627.35 682.989 L1626.79 682.989 L1626.23 682.989 L1625.67 682.989 L1625.11 682.989 L1624.56 682.989 L1624 682.989 L1623.44 682.989 L1622.88 682.989 L1622.32 682.989 L1621.76 682.989 L1621.2 682.989 L1620.64 682.989 L1620.08 682.989 L1619.52 682.989 L1618.96 682.989 L1618.4 682.989 L1617.84 682.989 L1617.29 682.989 L1616.73 682.989 L1616.17 682.989 L1615.61 682.989 L1615.05 682.989 L1614.49 682.989 L1613.93 682.989 L1613.37 682.989 L1612.81 682.989 L1612.25 682.989 L1611.69 682.989 L1611.13 682.989 L1610.57 682.989 L1610.02 682.989 L1609.46 682.989 L1608.9 682.989 L1608.34 682.989 L1607.78 682.989 L1607.22 682.989 L1606.66 682.989 L1606.1 682.989 L1605.54 682.989 L1604.98 682.989 L1604.42 682.989 L1603.86 682.989 L1603.3 682.989 L1602.74 682.989 L1602.19 682.989 L1601.63 682.989 L1601.07 682.989 L1600.51 682.989 L1599.95 682.989 L1599.39 682.989 L1598.83 682.989 L1598.27 682.989 L1597.71 682.989 L1597.15 682.989 L1596.59 682.989 L1596.03 682.989 L1595.47 682.989 L1594.92 682.989 L1594.36 682.989 L1593.8 682.989 L1593.24 682.989 L1592.68 682.989 L1592.12 682.989 L1591.56 682.989 L1591 682.989 L1590.44 682.989 L1589.88 682.989 L1589.32 682.989 L1588.76 682.989 L1588.2 682.989 L1587.65 682.989 L1587.09 682.989 L1586.53 682.989 L1585.97 682.989 L1585.41 682.989 L1584.85 682.989 L1584.29 682.989 L1583.73 682.989 L1583.17 682.989 L1582.61 682.989 L1582.05 682.989 L1581.49 682.989 L1580.93 682.989 L1580.37 682.989 L1579.82 682.989 L1579.26 682.989 L1578.7 682.989 L1578.14 682.989 L1577.58 682.989 L1577.02 682.989 L1576.46 682.989 L1575.9 682.989 L1575.34 682.989 L1574.78 682.989 L1574.22 682.989 L1573.66 682.989 L1573.1 682.989 L1572.55 682.989 L1571.99 682.989 L1571.43 682.989 L1570.87 682.989 L1570.31 682.989 L1569.75 682.989 L1569.19 682.989 L1568.63 682.989 L1568.07 682.989 L1567.51 682.989 L1566.95 682.989 L1566.39 682.989 L1565.83 682.989 L1565.28 682.989 L1564.72 682.989 L1564.16 682.989 L1563.6 682.989 L1563.04 682.989 L1562.48 682.989 L1561.92 682.989 L1561.36 682.989 L1560.8 682.989 L1560.24 682.989 L1559.68 682.989 L1559.12 682.989 L1558.56 682.989 L1558 682.989 L1557.45 682.989 L1556.89 682.989 L1556.33 682.989 L1555.77 682.989 L1555.21 682.989 L1554.65 682.989 L1554.09 682.989 L1553.53 682.989 L1552.97 682.989 L1552.41 682.989 L1551.85 682.989 L1551.29 682.989 L1550.73 682.989 L1550.18 682.989 L1549.62 682.989 L1549.06 682.989 L1548.5 682.989 L1547.94 682.989 L1547.38 682.989 L1546.82 682.989 L1546.26 682.989 L1545.7 682.989 L1545.14 682.989 L1544.58 682.989 L1544.02 682.989 L1543.46 682.989 L1542.9 682.989 L1542.35 682.989 L1541.79 682.989 L1541.23 682.989 L1540.67 682.989 L1540.11 682.989 L1539.55 682.989 L1538.99 682.989 L1538.43 682.989 L1537.87 682.989 L1537.31 682.989 L1536.75 682.989 L1536.19 682.989 L1535.63 682.989 L1535.08 682.989 L1534.52 682.989 L1533.96 682.989 L1533.4 682.989 L1532.84 682.989 L1532.28 682.989 L1531.72 682.989 L1531.16 682.989 L1530.6 682.989 L1530.04 682.989 L1529.48 682.989 L1528.92 682.989 L1528.36 682.989 L1527.81 682.989 L1527.25 682.989 L1526.69 682.989 L1526.13 682.989 L1525.57 682.989 L1525.01 682.989 L1524.45 682.989 L1523.89 682.989 L1523.33 682.989 L1522.77 682.989 L1522.21 682.989 L1521.65 682.989 L1521.09 682.989 L1520.53 682.989 L1519.98 682.989 L1519.42 682.989 L1518.86 682.989 L1518.3 682.989 L1517.74 682.989 L1517.18 682.989 L1516.62 682.989 L1516.06 682.989 L1515.5 682.989 L1514.94 682.989 L1514.38 682.989 L1513.82 682.989 L1513.26 682.989 L1512.71 682.989 L1512.15 682.989 L1511.59 682.989 L1511.03 682.989 L1510.47 682.989 L1509.91 682.989 L1509.35 682.989 L1508.79 682.989 L1508.23 682.989 L1507.67 682.989 L1507.11 682.989 L1506.55 682.989 L1505.99 682.989 L1505.44 682.989 L1504.88 682.989 L1504.32 682.989 L1503.76 682.989 L1503.2 682.989 L1502.64 682.989 L1502.08 682.989 L1501.52 682.989 L1500.96 682.989 L1500.4 682.989 L1499.84 682.989 L1499.28 682.989 L1498.72 682.989 L1498.16 682.989 L1497.61 682.989 L1497.05 682.989 L1496.49 682.989 L1495.93 682.989 L1495.37 682.989 L1494.81 682.989 L1494.25 682.989 L1493.69 682.989 L1493.13 682.989 L1492.57 682.989 L1492.01 682.989 L1491.45 682.989 L1490.89 682.989 L1490.34 682.989 L1489.78 682.989 L1489.22 682.989 L1488.66 682.989 L1488.1 682.989 L1487.54 682.989 L1486.98 682.989 L1486.42 682.989 L1485.86 682.989 L1485.3 682.989 L1484.74 682.989 L1484.18 682.989 L1483.62 682.989 L1483.07 682.989 L1482.51 682.989 L1481.95 682.989 L1481.39 682.989 L1480.83 682.989 L1480.27 682.989 L1479.71 682.989 L1479.15 682.989 L1478.59 682.989 L1478.03 682.989 L1477.47 682.989 L1476.91 682.989 L1476.35 682.989 L1475.79 682.989 L1475.24 682.989 L1474.68 682.989 L1474.12 682.989 L1473.56 682.989 L1473 682.989 L1472.44 682.989 L1471.88 682.989 L1471.32 682.989 L1470.76 682.989 L1470.2 682.989 L1469.64 682.989 L1469.08 682.989 L1468.52 682.989 L1467.97 682.989 L1467.41 682.989 L1466.85 682.989 L1466.29 682.989 L1465.73 682.989 L1465.17 682.989 L1464.61 682.989 L1464.05 682.989 L1463.49 682.989 L1462.93 682.989 L1462.37 682.989 L1461.81 682.989 L1461.25 682.989 L1460.7 682.989 L1460.14 682.989 L1459.58 682.989 L1459.02 682.989 L1458.46 682.989 L1457.9 682.989 L1457.34 682.989 L1456.78 682.989 L1456.22 682.989 L1455.66 682.989 L1455.1 682.989 L1454.54 682.989 L1453.98 682.989 L1453.42 682.989 L1452.87 682.989 L1452.31 682.989 L1451.75 682.989 L1451.19 682.989 L1450.63 682.989 L1450.07 682.989 L1449.51 682.989 L1448.95 682.989 L1448.39 682.989 L1447.83 682.989 L1447.27 682.989 L1446.71 682.989 L1446.15 682.989 L1445.6 682.989 L1445.04 682.989 L1444.48 682.989 L1443.92 682.989 L1443.36 682.989 L1442.8 682.989 L1442.24 682.989 L1441.68 682.989 L1441.12 682.989 L1440.56 682.989 L1440 682.989 L1439.44 682.989 L1438.88 682.989 L1438.33 682.989 L1437.77 682.989 L1437.21 682.989 L1436.65 682.989 L1436.09 682.989 L1435.53 682.989 L1434.97 682.989 L1434.41 682.989 L1433.85 682.989 L1433.29 682.989 L1432.73 682.989 L1432.17 682.989 L1431.61 682.989 L1431.05 682.989 L1430.5 682.989 L1429.94 682.989 L1429.38 682.989 L1428.82 682.989 L1428.26 682.989 L1427.7 682.989 L1427.14 682.989 L1426.58 682.989 L1426.02 682.989 L1425.46 682.989 L1424.9 682.989 L1424.34 682.989 L1423.78 682.989 L1423.23 682.989 L1422.67 682.989 L1422.11 682.989 L1421.55 682.989 L1420.99 682.989 L1420.43 682.989 L1419.87 682.989 L1419.31 682.989 L1418.75 682.989 L1418.19 682.989 L1417.63 682.989 L1417.07 682.989 L1416.51 682.989 L1415.95 682.989 L1415.4 682.989 L1414.84 682.989 L1414.28 682.989 L1413.72 682.989 L1413.16 682.989 L1412.6 682.989 L1412.04 682.989 L1411.48 682.989 L1410.92 682.989 L1410.36 682.989 L1409.8 682.989 L1409.24 682.989 L1408.68 682.989 L1408.13 682.989 L1407.57 682.989 L1407.01 682.989 L1406.45 682.989 L1405.89 682.989 L1405.33 682.989 L1404.77 682.989 L1404.21 682.989 L1403.65 682.989 L1403.09 682.989 L1402.53 682.989 L1401.97 682.989 L1401.41 682.989 L1400.86 682.989 L1400.3 682.989 L1399.74 682.989 L1399.18 682.989 L1398.62 682.989 L1398.06 682.989 L1397.5 682.989 L1396.94 682.989 L1396.38 682.989 L1395.82 682.989 L1395.26 682.989 L1394.7 682.989 L1394.14 682.989 L1393.58 682.989 L1393.03 682.989 L1392.47 682.989 L1391.91 682.989 L1391.35 682.989 L1390.79 682.989 L1390.23 682.989 L1389.67 682.989 L1389.11 682.989 L1388.55 682.989 L1387.99 682.989 L1387.43 682.989 L1386.87 682.989 L1386.31 682.989 L1385.76 682.989 L1385.2 682.989 L1384.64 682.989 L1384.08 682.989 L1383.52 682.989 L1382.96 682.989 L1382.4 682.989 L1381.84 682.989 L1381.28 682.989 L1380.72 682.989 L1380.16 682.989 L1379.6 682.989 L1379.04 682.989 L1378.49 682.989 L1377.93 682.989 L1377.37 682.989 L1376.81 682.989 L1376.25 682.989 L1375.69 682.989 L1375.13 682.989 L1374.57 682.989 L1374.01 682.989 L1373.45 682.989 L1372.89 682.989 L1372.33 682.989 L1371.77 682.989 L1371.21 682.989 L1370.66 682.989 L1370.1 682.989 L1369.54 682.989 L1368.98 682.989 L1368.42 682.989 L1367.86 682.989 L1367.3 682.989 L1366.74 682.989 L1366.18 682.989 L1365.62 682.989 L1365.06 682.989 L1364.5 682.989 L1363.94 682.989 L1363.39 682.989 L1362.83 682.989 L1362.27 682.989 L1361.71 682.989 L1361.15 682.989 L1360.59 682.989 L1360.03 682.989 L1359.47 682.989 L1358.91 682.989 L1358.35 682.989 L1357.79 682.989 L1357.23 682.989 L1356.67 682.989 L1356.12 682.989 L1355.56 682.989 L1355 682.989 L1354.44 682.989 L1353.88 682.989 L1353.32 682.989 L1352.76 682.989 L1352.2 682.989 L1351.64 682.989 L1351.08 682.989 L1350.52 682.989 L1349.96 682.989 L1349.4 682.989 L1348.84 682.989 L1348.29 682.989 L1347.73 682.989 L1347.17 682.989 L1346.61 682.989 L1346.05 682.989 L1345.49 682.989 L1344.93 682.989 L1344.37 682.989 L1343.81 682.989 L1343.25 682.989 L1342.69 682.989 L1342.13 682.989 L1341.57 682.989 L1341.02 682.989 L1340.46 682.989 L1339.9 682.989 L1339.34 682.989 L1338.78 682.989 L1338.22 682.989 L1337.66 682.989 L1337.1 682.989 L1336.54 682.989 L1335.98 682.989 L1335.42 682.989 L1334.86 682.989 L1334.3 682.989 L1333.75 682.989 L1333.19 682.989 L1332.63 682.989 L1332.07 682.989 L1331.51 682.989 L1330.95 682.989 L1330.39 682.989 L1329.83 682.989 L1329.27 682.989 L1328.71 682.989 L1328.15 682.989 L1327.59 682.989 L1327.03 682.989 L1326.47 682.989 L1325.92 682.989 L1325.36 682.989 L1324.8 682.989 L1324.24 682.989 L1323.68 682.989 L1323.12 682.989 L1322.56 682.989 L1322 682.989 L1321.44 682.989 L1320.88 682.989 L1320.32 682.989 L1319.76 682.989 L1319.2 682.989 L1318.65 682.989 L1318.09 682.989 L1317.53 682.989 L1316.97 682.989 L1316.41 682.989 L1315.85 682.989 L1315.29 682.989 L1314.73 682.989 L1314.17 682.989 L1313.61 682.989 L1313.05 682.989 L1312.49 682.989 L1311.93 682.989 L1311.38 682.989 L1310.82 682.989 L1310.26 682.989 L1309.7 682.989 L1309.14 682.989 L1308.58 682.989 L1308.02 682.989 L1307.46 682.989 L1306.9 682.989 L1306.34 682.989 L1305.78 682.989 L1305.22 682.989 L1304.66 682.989 L1304.1 682.989 L1303.55 682.989 L1302.99 682.989 L1302.43 682.989 L1301.87 682.989 L1301.31 682.989 L1300.75 682.989 L1300.19 682.989 L1299.63 682.989 L1299.07 682.989 L1298.51 682.989 L1297.95 682.989 L1297.39 682.989 L1296.83 682.989 L1296.28 682.989 L1295.72 682.989 L1295.16 682.989 L1294.6 682.989 L1294.04 682.989 L1293.48 682.989 L1292.92 682.989 L1292.36 682.989 L1291.8 682.989 L1291.24 682.989 L1290.68 682.989 L1290.12 682.989 L1289.56 682.989 L1289 682.989 L1288.45 682.989 L1287.89 682.989 L1287.33 682.989 L1286.77 682.989 L1286.21 682.989 L1285.65 682.989 L1285.09 682.989 L1284.53 682.989 L1283.97 682.989 L1283.41 682.989 L1282.85 682.989 L1282.29 682.989 L1281.73 682.989 L1281.18 682.989 L1280.62 682.989 L1280.06 682.989 L1279.5 682.989 L1278.94 682.989 L1278.38 682.989 L1277.82 682.989 L1277.26 682.989 L1276.7 682.989 L1276.14 682.989 L1275.58 682.989 L1275.02 682.989 L1274.46 682.989 L1273.91 682.989 L1273.35 682.989 L1272.79 682.989 L1272.23 682.989 L1271.67 682.989 L1271.11 682.989 L1270.55 682.989 L1269.99 682.989 L1269.43 682.989 L1268.87 682.989 L1268.31 682.989 L1267.75 682.989 L1267.19 682.989 L1266.63 682.989 L1266.08 682.989 L1265.52 682.989 L1264.96 682.989 L1264.4 682.989 L1263.84 682.989 L1263.28 682.989 L1262.72 682.989 L1262.16 682.989 L1261.6 682.989 L1261.04 682.989 L1260.48 682.989 L1259.92 682.989 L1259.36 682.989 L1258.81 682.989 L1258.25 682.989 L1257.69 682.989 L1257.13 682.989 L1256.57 682.989 L1256.01 682.989 L1255.45 682.989 L1254.89 682.989 L1254.33 682.989 L1253.77 682.989 L1253.21 682.989 L1252.65 682.989 L1252.09 682.989 L1251.54 682.989 L1250.98 682.989 L1250.42 682.989 L1249.86 682.989 L1249.3 682.989 L1248.74 682.989 L1248.18 682.989 L1247.62 682.989 L1247.06 682.989 L1246.5 682.989 L1245.94 682.989 L1245.38 682.989 L1244.82 682.989 L1244.26 682.989 L1243.71 682.989 L1243.15 682.989 L1242.59 682.989 L1242.03 682.989 L1241.47 682.989 L1240.91 682.989 L1240.35 682.989 L1239.79 682.989 L1239.23 682.989 L1238.67 682.989 L1238.11 682.989 L1237.55 682.989 L1236.99 682.989 L1236.44 682.989 L1235.88 682.989 L1235.32 682.989 L1234.76 682.989 L1234.2 682.989 L1233.64 682.989 L1233.08 682.989 L1232.52 682.989 L1231.96 682.989 L1231.4 682.989 L1230.84 682.989 L1230.28 682.989 L1229.72 682.989 L1229.17 682.989 L1228.61 682.989 L1228.05 682.989 L1227.49 682.989 L1226.93 682.989 L1226.37 682.989 L1225.81 682.989 L1225.25 682.989 L1224.69 682.989 L1224.13 682.989 L1223.57 682.989 L1223.01 682.989 L1222.45 682.989 L1221.89 682.989 L1221.34 682.989 L1220.78 682.989 L1220.22 682.989 L1219.66 682.989 L1219.1 682.989 L1218.54 682.989 L1217.98 682.989 L1217.42 682.989 L1216.86 682.989 L1216.3 682.989 L1215.74 682.989 L1215.18 682.989 L1214.62 682.989 L1214.07 682.989 L1213.51 682.989 L1212.95 682.989 L1212.39 682.989 L1211.83 682.989 L1211.27 682.989 L1210.71 682.989 L1210.15 682.989 L1209.59 682.989 L1209.03 682.989 L1208.47 682.989 L1207.91 682.989 L1207.35 682.989 L1206.8 682.989 L1206.24 682.989 L1205.68 682.989 L1205.12 682.989 L1204.56 682.989 L1204 682.989 L1203.44 682.989 L1202.88 682.989 L1202.32 682.989 L1201.76 682.989 L1201.2 682.989 L1200.64 682.989 L1200.08 682.989 L1199.52 682.989 L1198.97 682.989 L1198.41 682.989 L1197.85 682.989 L1197.29 682.989 L1196.73 682.989 L1196.17 682.989 L1195.61 682.989 L1195.05 682.989 L1194.49 682.989 L1193.93 682.989 L1193.37 682.989 L1192.81 682.989 L1192.25 682.989 L1191.7 682.989 L1191.14 682.989 L1190.58 682.989 L1190.02 682.989 L1189.46 682.989 L1188.9 682.989 L1188.34 682.989 L1187.78 682.989 L1187.22 682.989 L1186.66 682.989 L1186.1 682.989 L1185.54 682.989 L1184.98 682.989 L1184.43 682.989 L1183.87 682.989 L1183.31 682.989 L1182.75 682.989 L1182.19 682.989 L1181.63 682.989 L1181.07 682.989 L1180.51 682.989 L1179.95 682.989 L1179.39 682.989 L1178.83 682.989 L1178.27 682.989 L1177.71 682.989 L1177.15 682.989 L1176.6 682.989 L1176.04 682.989 L1175.48 682.989 L1174.92 682.989 L1174.36 682.989 L1173.8 682.989 L1173.24 682.989 L1172.68 682.989 L1172.12 682.989 L1171.56 682.989 L1171 682.989 L1170.44 682.989 L1169.88 682.989 L1169.33 682.989 L1168.77 682.989 L1168.21 682.989 L1167.65 682.989 L1167.09 682.989 L1166.53 682.989 L1165.97 682.989 L1165.41 682.989 L1164.85 682.989 L1164.29 682.989 L1163.73 682.989 L1163.17 682.989 L1162.61 682.989 L1162.05 682.989 L1161.5 682.989 L1160.94 682.989 L1160.38 682.989 L1159.82 682.989 L1159.26 682.989 L1158.7 682.989 L1158.14 682.989 L1157.58 682.989 L1157.02 682.989 L1156.46 682.989 L1155.9 682.989 L1155.34 682.989 L1154.78 682.989 L1154.23 682.989 L1153.67 682.989 L1153.11 682.989 L1152.55 682.989 L1151.99 682.989 L1151.43 682.989 L1150.87 682.989 L1150.31 682.989 L1149.75 682.989 L1149.19 682.989 L1148.63 682.989 L1148.07 682.989 L1147.51 682.989 L1146.96 682.989 L1146.4 682.989 L1145.84 682.989 L1145.28 682.989 L1144.72 682.989 L1144.16 682.989 L1143.6 682.989 L1143.04 682.989 L1142.48 682.989 L1141.92 682.989 L1141.36 682.989 L1140.8 682.989 L1140.24 682.989 L1139.68 682.989 L1139.13 682.989 L1138.57 682.989 L1138.01 682.989 L1137.45 682.989 L1136.89 682.989 L1136.33 682.989 L1135.77 682.989 L1135.21 682.989 L1134.65 682.989 L1134.09 682.989 L1133.53 682.989 L1132.97 682.989 L1132.41 682.989 L1131.86 682.989 L1131.3 682.989 L1130.74 682.989 L1130.18 682.989 L1129.62 682.989 L1129.06 682.989 L1128.5 682.989 L1127.94 682.989 L1127.38 682.989 L1126.82 682.989 L1126.26 682.989 L1125.7 682.989 L1125.14 682.989 L1124.59 682.989 L1124.03 682.989 L1123.47 682.989 L1122.91 682.989 L1122.35 682.989 L1121.79 682.989 L1121.23 682.989 L1120.67 682.989 L1120.11 682.989 L1119.55 682.989 L1118.99 682.989 L1118.43 682.989 L1117.87 682.989 L1117.31 682.989 L1116.76 682.989 L1116.2 682.989 L1115.64 682.989 L1115.08 682.989 L1114.52 682.989 L1113.96 682.989 L1113.4 682.989 L1112.84 682.989 L1112.28 682.989 L1111.72 682.989 L1111.16 682.989 L1110.6 682.989 L1110.04 682.989 L1109.49 682.989 L1108.93 682.989 L1108.37 682.989 L1107.81 682.989 L1107.25 682.989 L1106.69 682.989 L1106.13 682.989 L1105.57 682.989 L1105.01 682.989 L1104.45 682.989 L1103.89 682.989 L1103.33 682.989 L1102.77 682.989 L1102.22 682.989 L1101.66 682.989 L1101.1 682.989 L1100.54 682.989 L1099.98 682.989 L1099.42 682.989 L1098.86 682.989 L1098.3 682.989 L1097.74 682.989 L1097.18 682.989 L1096.62 682.989 L1096.06 682.989 L1095.5 682.989 L1094.94 682.989 L1094.39 682.989 L1093.83 682.989 L1093.27 682.989 L1092.71 682.989 L1092.15 682.989 L1091.59 682.989 L1091.03 682.989 L1090.47 682.989 L1089.91 682.989 L1089.35 682.989 L1088.79 682.989 L1088.23 682.989 L1087.67 682.989 L1087.12 682.989 L1086.56 682.989 L1086 682.989 L1085.44 682.989 L1084.88 682.989 L1084.32 682.989 L1083.76 682.989 L1083.2 682.989 L1082.64 682.989 L1082.08 682.989 L1081.52 682.989 L1080.96 682.989 L1080.4 682.989 L1079.85 682.989 L1079.29 682.989 L1078.73 682.989 L1078.17 682.989 L1077.61 682.989 L1077.05 682.989 L1076.49 682.989 L1075.93 682.989 L1075.37 682.989 L1074.81 682.989 L1074.25 682.989 L1073.69 682.989 L1073.13 682.989 L1072.57 682.989 L1072.02 682.989 L1071.46 682.989 L1070.9 682.989 L1070.34 682.989 L1069.78 682.989 L1069.22 682.989 L1068.66 682.989 L1068.1 682.989 L1067.54 682.989 L1066.98 682.989 L1066.42 682.989 L1065.86 682.989 L1065.3 682.989 L1064.75 682.989 L1064.19 682.989 L1063.63 682.989 L1063.07 682.989 L1062.51 682.989 L1061.95 682.989 L1061.39 682.989 L1060.83 682.989 L1060.27 682.989 L1059.71 682.989 L1059.15 682.989 L1058.59 682.989 L1058.03 682.989 L1057.48 682.989 L1056.92 682.989 L1056.36 682.989 L1055.8 682.989 L1055.24 682.989 L1054.68 682.989 L1054.12 682.989 L1053.56 682.989 L1053 682.989 L1052.44 682.989 L1051.88 682.989 L1051.32 682.989 L1050.76 682.989 L1050.2 682.989 L1049.65 682.989 L1049.09 682.989 L1048.53 682.989 L1047.97 682.989 L1047.41 682.989 L1046.85 682.989 L1046.29 682.989 L1045.73 682.989 L1045.17 682.989 L1044.61 682.989 L1044.05 682.989 L1043.49 682.989 L1042.93 682.989 L1042.38 682.989 L1041.82 682.989 L1041.26 682.989 L1040.7 682.989 L1040.14 682.989 L1039.58 682.989 L1039.02 682.989 L1038.46 682.989 L1037.9 682.989 L1037.34 682.989 L1036.78 682.989 L1036.22 682.989 L1035.66 682.989 L1035.1 682.989 L1034.55 682.989 L1033.99 682.989 L1033.43 682.989 L1032.87 682.989 L1032.31 682.989 L1031.75 682.989 L1031.19 682.989 L1030.63 682.989 L1030.07 682.989 L1029.51 682.989 L1028.95 682.989 L1028.39 682.989 L1027.83 682.989 L1027.28 682.989 L1026.72 682.989 L1026.16 682.989 L1025.6 682.989 L1025.04 682.989 L1024.48 682.989 L1023.92 682.989 L1023.36 682.989 L1022.8 682.989 L1022.24 682.989 L1021.68 682.989 L1021.12 682.989 L1020.56 682.989 L1020.01 682.989 L1019.45 682.989 L1018.89 682.989 L1018.33 682.989 L1017.77 682.989 L1017.21 682.989 L1016.65 682.989 L1016.09 682.989 L1015.53 682.989 L1014.97 682.989 L1014.41 682.989 L1013.85 682.989 L1013.29 682.989 L1012.73 682.989 L1012.18 682.989 L1011.62 682.989 L1011.06 682.989 L1010.5 682.989 L1009.94 682.989 L1009.38 682.989 L1008.82 682.989 L1008.26 682.989 L1007.7 682.989 L1007.14 682.989 L1006.58 682.989 L1006.02 682.989 L1005.46 682.989 L1004.91 682.989 L1004.35 682.989 L1003.79 682.989 L1003.23 682.989 L1002.67 682.989 L1002.11 682.989 L1001.55 682.989 L1000.99 682.989 L1000.43 682.989 L999.872 682.989 L999.313 682.989 L998.754 682.989 L998.194 682.989 L997.635 682.989 L997.076 682.989 L996.517 682.989 L995.957 682.989 L995.398 682.989 L994.839 682.989 L994.28 682.989 L993.72 682.989 L993.161 682.989 L992.602 682.989 L992.043 682.989 L991.483 682.989 L990.924 682.989 L990.365 682.989 L989.806 682.989 L989.246 682.989 L988.687 682.989 L988.128 682.989 L987.569 682.989 L987.009 682.989 L986.45 682.989 L985.891 682.989 L985.332 682.989 L984.772 682.989 L984.213 682.989 L983.654 682.989 L983.095 682.989 L982.535 682.989 L981.976 682.989 L981.417 682.989 L980.858 682.989 L980.298 682.989 L979.739 682.989 L979.18 682.989 L978.621 682.989 L978.061 682.989 L977.502 682.989 L976.943 682.989 L976.384 682.989 L975.824 682.989 L975.265 682.989 L974.706 682.989 L974.147 682.989 L973.587 682.989 L973.028 682.989 L972.469 682.989 L971.91 682.989 L971.35 682.989 L970.791 682.989 L970.232 682.989 L969.673 682.989 L969.113 682.989 L968.554 682.989 L967.995 682.989 L967.436 682.989 L966.876 682.989 L966.317 682.989 L965.758 682.989 L965.199 682.989 L964.639 682.989 L964.08 682.989 L963.521 682.989 L962.962 682.989 L962.402 682.989 L961.843 682.989 L961.284 682.989 L960.725 682.989 L960.165 682.989 L959.606 682.989 L959.047 682.989 L958.488 682.989 L957.928 682.989 L957.369 682.989 L956.81 682.989 L956.251 682.989 L955.691 682.989 L955.132 682.989 L954.573 682.989 L954.014 682.989 L953.454 682.989 L952.895 682.989 L952.336 682.989 L951.777 682.989 L951.217 682.989 L950.658 682.989 L950.099 682.989 L949.54 682.989 L948.98 682.989 L948.421 682.989 L947.862 682.989 L947.303 682.989 L946.743 682.989 L946.184 682.989 L945.625 682.989 L945.066 682.989 L944.506 682.989 L943.947 682.989 L943.388 682.989 L942.829 682.989 L942.269 682.989 L941.71 682.989 L941.151 682.989 L940.592 682.989 L940.032 682.989 L939.473 682.989 L938.914 682.989 L938.355 682.989 L937.795 682.989 L937.236 682.989 L936.677 682.989 L936.118 682.989 L935.558 682.989 L934.999 682.989 L934.44 682.989 L933.881 682.989 L933.321 682.989 L932.762 682.989 L932.203 682.989 L931.644 682.989 L931.084 682.989 L930.525 682.989 L929.966 682.989 L929.406 682.989 L928.847 682.989 L928.288 682.989 L927.729 682.989 L927.169 682.989 L926.61 682.989 L926.051 682.989 L925.492 682.989 L924.932 682.989 L924.373 682.989 L923.814 682.989 L923.255 682.989 L922.695 682.989 L922.136 682.989 L921.577 682.989 L921.018 682.989 L920.458 682.989 L919.899 682.989 L919.34 682.989 L918.781 682.989 L918.221 682.989 L917.662 682.989 L917.103 682.989 L916.544 682.989 L915.984 682.989 L915.425 682.989 L914.866 682.989 L914.307 682.989 L913.747 682.989 L913.188 682.989 L912.629 682.989 L912.07 682.989 L911.51 682.989 L910.951 682.989 L910.392 682.989 L909.833 682.989 L909.273 682.989 L908.714 682.989 L908.155 682.989 L907.596 682.989 L907.036 682.989 L906.477 682.989 L905.918 682.989 L905.359 682.989 L904.799 682.989 L904.24 682.989 L903.681 682.989 L903.122 682.989 L902.562 682.989 L902.003 682.989 L901.444 682.989 L900.885 682.989 L900.325 682.989 L899.766 682.989 L899.207 682.989 L898.648 682.989 L898.088 682.989 L897.529 682.989 L896.97 682.989 L896.411 682.989 L895.851 682.989 L895.292 682.989 L894.733 682.989 L894.174 682.989 L893.614 682.989 L893.055 682.989 L892.496 682.989 L891.937 682.989 L891.377 682.989 L890.818 682.989 L890.259 682.989 L889.7 682.989 L889.14 682.989 L888.581 682.989 L888.022 682.989 L887.463 682.989 L886.903 682.989 L886.344 682.989 L885.785 682.989 L885.226 682.989 L884.666 682.989 L884.107 682.989 L883.548 682.989 L882.989 682.989 L882.429 682.989 L881.87 682.989 L881.311 682.989 L880.752 682.989 L880.192 682.989 L879.633 682.989 L879.074 682.989 L878.515 682.989 L877.955 682.989 L877.396 682.989 L876.837 682.989 L876.278 682.989 L875.718 682.989 L875.159 682.989 L874.6 682.989 L874.041 682.989 L873.481 682.989 L872.922 682.989 L872.363 682.989 L871.804 682.989 L871.244 682.989 L870.685 682.989 L870.126 682.989 L869.567 682.989 L869.007 682.989 L868.448 682.989 L867.889 682.989 L867.33 682.989 L866.77 682.989 L866.211 682.989 L865.652 682.989 L865.093 682.989 L864.533 682.989 L863.974 682.989 L863.415 682.989 L862.856 682.989 L862.296 682.989 L861.737 682.989 L861.178 682.989 L860.619 682.989 L860.059 682.989 L859.5 682.989 L858.941 682.989 L858.382 682.989 L857.822 682.989 L857.263 682.989 L856.704 682.989 L856.145 682.989 L855.585 682.989 L855.026 682.989 L854.467 682.989 L853.908 682.989 L853.348 682.989 L852.789 682.989 L852.23 682.989 L851.671 682.989 L851.111 682.989 L850.552 682.989 L849.993 682.989 L849.434 682.989 L848.874 682.989 L848.315 682.989 L847.756 682.989 L847.197 682.989 L846.637 682.989 L846.078 682.989 L845.519 682.989 L844.96 682.989 L844.4 682.989 L843.841 682.989 L843.282 682.989 L842.723 682.989 L842.163 682.989 L841.604 682.989 L841.045 682.989 L840.486 682.989 L839.926 682.989 L839.367 682.989 L838.808 682.989 L838.249 682.989 L837.689 682.989 L837.13 682.989 L836.571 682.989 L836.012 682.989 L835.452 682.989 L834.893 682.989 L834.334 682.989 L833.775 682.989 L833.215 682.989 L832.656 682.989 L832.097 682.989 L831.538 682.989 L830.978 682.989 L830.419 682.989 L829.86 682.989 L829.301 682.989 L828.741 682.989 L828.182 682.989 L827.623 682.989 L827.064 682.989 L826.504 682.989 L825.945 682.989 L825.386 682.989 L824.827 682.989 L824.267 682.989 L823.708 682.989 L823.149 682.989 L822.59 682.989 L822.03 682.989 L821.471 682.989 L820.912 682.989 L820.353 682.989 L819.793 682.989 L819.234 682.989 L818.675 682.989 L818.116 682.989 L817.556 682.989 L816.997 682.989 L816.438 682.989 L815.879 682.989 L815.319 682.989 L814.76 682.989 L814.201 682.989 L813.642 682.989 L813.082 682.989 L812.523 682.989 L811.964 682.989 L811.405 682.989 L810.845 682.989 L810.286 682.989 L809.727 682.989 L809.168 682.989 L808.608 682.989 L808.049 682.989 L807.49 682.989 L806.931 682.989 L806.371 682.989 L805.812 682.989 L805.253 682.989 L804.693 682.989 L804.134 682.989 L803.575 682.989 L803.016 682.989 L802.456 682.989 L801.897 682.989 L801.338 682.989 L800.779 682.989 L800.219 682.989 L799.66 682.989 L799.101 682.989 L798.542 682.989 L797.982 682.989 L797.423 682.989 L796.864 682.989 L796.305 682.989 L795.745 682.989 L795.186 682.989 L794.627 682.989 L794.068 682.989 L793.508 682.989 L792.949 682.989 L792.39 682.989 L791.831 682.989 L791.271 682.989 L790.712 682.989 L790.153 682.989 L789.594 682.989 L789.034 682.989 L788.475 682.989 L787.916 682.989 L787.357 682.989 L786.797 682.989 L786.238 682.989 L785.679 682.989 L785.12 682.989 L784.56 682.989 L784.001 682.989 L783.442 682.989 L782.883 682.989 L782.323 682.989 L781.764 682.989 L781.205 682.989 L780.646 682.989 L780.086 682.989 L779.527 682.989 L778.968 682.989 L778.409 682.989 L777.849 682.989 L777.29 682.989 L776.731 682.989 L776.172 682.989 L775.612 682.989 L775.053 682.989 L774.494 682.989 L773.935 682.989 L773.375 682.989 L772.816 682.989 L772.257 682.989 L771.698 682.989 L771.138 682.989 L770.579 682.989 L770.02 682.989 L769.461 682.989 L768.901 682.989 L768.342 682.989 L767.783 682.989 L767.224 682.989 L766.664 682.989 L766.105 682.989 L765.546 682.989 L764.987 682.989 L764.427 682.989 L763.868 682.989 L763.309 682.989 L762.75 682.989 L762.19 682.989 L761.631 682.989 L761.072 682.989 L760.513 682.989 L759.953 682.989 L759.394 682.989 L758.835 682.989 L758.276 682.989 L757.716 682.989 L757.157 682.989 L756.598 682.989 L756.039 682.989 L755.479 682.989 L754.92 682.989 L754.361 682.989 L753.802 682.989 L753.242 682.989 L752.683 682.989 L752.124 682.989 L751.565 682.989 L751.005 682.989 L750.446 682.989 L749.887 682.989 L749.328 682.989 L748.768 682.989 L748.209 682.989 L747.65 682.989 L747.091 682.989 L746.531 682.989 L745.972 682.989 L745.413 682.989 L744.854 682.989 L744.294 682.989 L743.735 682.989 L743.176 682.989 L742.617 682.989 L742.057 682.989 L741.498 682.989 L740.939 682.989 L740.38 682.989 L739.82 682.989 L739.261 682.989 L738.702 682.989 L738.143 682.989 L737.583 682.989 L737.024 682.989 L736.465 682.989 L735.906 682.989 L735.346 682.989 L734.787 682.989 L734.228 682.989 L733.669 682.989 L733.109 682.989 L732.55 682.989 L731.991 682.989 L731.432 682.989 L730.872 682.989 L730.313 682.989 L729.754 682.989 L729.195 682.989 L728.635 682.989 L728.076 682.989 L727.517 682.989 L726.958 682.989 L726.398 682.989 L725.839 682.989 L725.28 682.989 L724.721 682.989 L724.161 682.989 L723.602 682.989 L723.043 682.989 L722.484 682.989 L721.924 682.989 L721.365 682.989 L720.806 682.989 L720.247 682.989  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip393)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.085 720.806,684.085 721.365,684.085 721.924,684.085 722.484,684.085 723.043,684.085 723.602,684.085 724.161,684.085 724.721,684.085 725.28,684.085 725.839,684.085 726.398,684.085 726.958,684.085 727.517,684.085 728.076,684.085 728.635,684.085 729.195,684.085 729.754,684.085 730.313,684.085 730.872,684.085 731.432,684.085 731.991,684.085 732.55,684.085 733.109,684.085 733.669,684.085 734.228,684.085 734.787,684.085 735.346,684.085 735.906,684.085 736.465,684.085 737.024,684.085 737.583,684.085 738.143,684.085 738.702,684.085 739.261,684.085 739.82,684.085 740.38,684.085 740.939,684.085 741.498,684.085 742.057,684.085 742.617,684.085 743.176,684.085 743.735,684.085 744.294,684.085 744.854,684.085 745.413,684.085 745.972,684.085 746.531,684.085 747.091,684.085 747.65,684.085 748.209,684.085 748.768,684.085 749.328,684.085 749.887,684.085 750.446,684.085 751.005,684.085 751.565,684.085 752.124,684.085 752.683,684.085 753.242,684.085 753.802,684.085 754.361,684.085 754.92,684.085 755.479,684.085 756.039,684.085 756.598,684.085 757.157,684.085 757.716,684.085 758.276,684.085 758.835,684.085 759.394,684.085 759.953,684.085 760.513,684.085 761.072,684.085 761.631,684.085 762.19,684.085 762.75,684.085 763.309,684.085 763.868,684.085 764.427,684.085 764.987,684.085 765.546,684.085 766.105,684.085 766.664,684.085 767.224,684.085 767.783,684.085 768.342,684.085 768.901,684.085 769.461,684.085 770.02,684.085 770.579,684.085 771.138,684.085 771.698,684.085 772.257,684.085 772.816,684.085 773.375,684.085 773.935,684.085 774.494,684.085 775.053,684.085 775.612,684.085 776.172,684.085 776.731,684.085 777.29,684.085 777.849,684.085 778.409,684.085 778.968,684.085 779.527,684.085 780.086,684.085 780.646,684.085 781.205,684.085 781.764,684.085 782.323,684.085 782.883,684.085 783.442,684.085 784.001,684.085 784.56,684.085 785.12,684.085 785.679,684.085 786.238,684.085 786.797,684.085 787.357,684.085 787.916,684.085 788.475,684.085 789.034,684.085 789.594,684.085 790.153,684.085 790.712,684.085 791.271,684.085 791.831,684.085 792.39,684.085 792.949,684.085 793.508,684.085 794.068,684.085 794.627,684.085 795.186,684.085 795.745,684.085 796.305,684.085 796.864,684.085 797.423,684.085 797.982,684.085 798.542,684.085 799.101,684.085 799.66,684.085 800.219,684.085 800.779,684.085 801.338,684.085 801.897,684.085 802.456,684.085 803.016,684.085 803.575,684.085 804.134,684.085 804.693,684.085 805.253,684.085 805.812,684.085 806.371,684.085 806.931,684.085 807.49,684.085 808.049,684.085 808.608,684.085 809.168,684.085 809.727,684.085 810.286,684.085 810.845,684.085 811.405,684.085 811.964,684.085 812.523,684.085 813.082,684.085 813.642,684.085 814.201,684.085 814.76,684.085 815.319,684.085 815.879,684.085 816.438,684.085 816.997,684.085 817.556,684.085 818.116,684.085 818.675,684.085 819.234,684.085 819.793,684.085 820.353,684.085 820.912,684.085 821.471,684.085 822.03,684.085 822.59,684.085 823.149,684.085 823.708,684.085 824.267,684.085 824.827,684.085 825.386,684.085 825.945,684.085 826.504,684.085 827.064,684.085 827.623,684.085 828.182,684.085 828.741,684.085 829.301,684.085 829.86,684.085 830.419,684.085 830.978,684.085 831.538,684.085 832.097,684.085 832.656,684.085 833.215,684.085 833.775,684.085 834.334,684.085 834.893,684.085 835.452,684.085 836.012,684.085 836.571,684.085 837.13,684.085 837.689,684.085 838.249,684.085 838.808,684.085 839.367,684.085 839.926,684.085 840.486,684.085 841.045,684.085 841.604,684.085 842.163,684.085 842.723,684.085 843.282,684.085 843.841,684.085 844.4,684.085 844.96,684.085 845.519,684.085 846.078,684.085 846.637,684.085 847.197,684.085 847.756,684.085 848.315,684.085 848.874,684.085 849.434,684.085 849.993,684.085 850.552,684.085 851.111,684.085 851.671,684.085 852.23,684.085 852.789,684.085 853.348,684.085 853.908,684.085 854.467,684.085 855.026,684.085 855.585,684.085 856.145,684.085 856.704,684.085 857.263,684.085 857.822,684.085 858.382,684.085 858.941,684.085 859.5,684.085 860.059,684.085 860.619,684.085 861.178,684.085 861.737,684.085 862.296,684.085 862.856,684.085 863.415,684.085 863.974,684.085 864.533,684.085 865.093,684.085 865.652,684.085 866.211,684.085 866.77,684.085 867.33,684.085 867.889,684.085 868.448,684.085 869.007,684.085 869.567,684.085 870.126,684.085 870.685,684.085 871.244,684.085 871.804,684.085 872.363,684.085 872.922,684.085 873.481,684.085 874.041,684.085 874.6,684.085 875.159,684.085 875.718,684.085 876.278,684.085 876.837,684.085 877.396,684.085 877.955,684.085 878.515,684.085 879.074,684.085 879.633,684.085 880.192,684.085 880.752,684.085 881.311,684.085 881.87,684.085 882.429,684.085 882.989,684.085 883.548,684.085 884.107,684.085 884.666,684.085 885.226,684.085 885.785,684.085 886.344,684.085 886.903,684.085 887.463,684.085 888.022,684.085 888.581,684.085 889.14,684.085 889.7,684.085 890.259,684.085 890.818,684.085 891.377,684.085 891.937,684.085 892.496,684.085 893.055,684.085 893.614,684.085 894.174,684.085 894.733,684.085 895.292,684.085 895.851,684.085 896.411,684.085 896.97,684.085 897.529,684.085 898.088,684.085 898.648,684.085 899.207,684.085 899.766,684.085 900.325,684.085 900.885,684.085 901.444,684.085 902.003,684.085 902.562,684.085 903.122,684.085 903.681,684.085 904.24,684.085 904.799,684.085 905.359,684.085 905.918,684.085 906.477,684.085 907.036,684.085 907.596,684.085 908.155,684.085 908.714,684.085 909.273,684.085 909.833,684.085 910.392,684.085 910.951,684.085 911.51,684.085 912.07,684.085 912.629,684.085 913.188,684.085 913.747,684.085 914.307,684.085 914.866,684.085 915.425,684.085 915.984,684.085 916.544,684.085 917.103,684.085 917.662,684.085 918.221,684.085 918.781,684.085 919.34,684.085 919.899,684.085 920.458,684.085 921.018,684.085 921.577,684.085 922.136,684.085 922.695,684.085 923.255,684.085 923.814,684.085 924.373,684.085 924.932,684.085 925.492,684.085 926.051,684.085 926.61,684.085 927.169,684.085 927.729,684.085 928.288,684.085 928.847,684.085 929.406,684.085 929.966,684.085 930.525,684.085 931.084,684.085 931.644,684.085 932.203,684.085 932.762,684.085 933.321,684.085 933.881,684.085 934.44,684.085 934.999,684.085 935.558,684.085 936.118,684.085 936.677,684.085 937.236,684.085 937.795,684.085 938.355,684.085 938.914,684.085 939.473,684.085 940.032,684.085 940.592,684.085 941.151,684.085 941.71,684.085 942.269,684.085 942.829,684.085 943.388,684.085 943.947,684.085 944.506,684.085 945.066,684.085 945.625,684.085 946.184,684.085 946.743,684.085 947.303,684.085 947.862,684.085 948.421,684.085 948.98,684.085 949.54,684.085 950.099,684.085 950.658,684.085 951.217,684.085 951.777,684.085 952.336,684.085 952.895,684.085 953.454,684.085 954.014,684.085 954.573,684.085 955.132,684.085 955.691,684.085 956.251,684.085 956.81,684.085 957.369,684.085 957.928,684.085 958.488,684.085 959.047,684.085 959.606,684.085 960.165,684.085 960.725,684.085 961.284,684.085 961.843,684.085 962.402,684.085 962.962,684.085 963.521,684.085 964.08,684.085 964.639,684.085 965.199,684.085 965.758,684.085 966.317,684.085 966.876,684.085 967.436,684.085 967.995,684.085 968.554,684.085 969.113,684.085 969.673,684.085 970.232,684.085 970.791,684.085 971.35,684.085 971.91,684.085 972.469,684.085 973.028,684.085 973.587,684.085 974.147,684.085 974.706,684.085 975.265,684.085 975.824,684.085 976.384,684.085 976.943,684.085 977.502,684.085 978.061,684.085 978.621,684.085 979.18,684.085 979.739,684.085 980.298,684.085 980.858,684.085 981.417,684.085 981.976,684.085 982.535,684.085 983.095,684.085 983.654,684.085 984.213,684.085 984.772,684.085 985.332,684.085 985.891,684.085 986.45,684.085 987.009,684.085 987.569,684.085 988.128,684.085 988.687,684.085 989.246,684.085 989.806,684.085 990.365,684.085 990.924,684.085 991.483,684.085 992.043,684.085 992.602,684.085 993.161,684.085 993.72,684.085 994.28,684.085 994.839,684.085 995.398,684.085 995.957,684.085 996.517,684.085 997.076,684.085 997.635,684.085 998.194,684.085 998.754,684.085 999.313,684.085 999.872,684.085 1000.43,684.085 1000.99,684.085 1001.55,684.085 1002.11,684.085 1002.67,684.085 1003.23,684.085 1003.79,684.085 1004.35,684.085 1004.91,684.085 1005.46,684.085 1006.02,684.085 1006.58,684.085 1007.14,684.085 1007.7,684.085 1008.26,684.085 1008.82,684.085 1009.38,684.085 1009.94,684.085 1010.5,684.085 1011.06,684.085 1011.62,684.085 1012.18,684.085 1012.73,684.085 1013.29,684.085 1013.85,684.085 1014.41,684.085 1014.97,684.085 1015.53,684.085 1016.09,684.085 1016.65,684.085 1017.21,684.085 1017.77,684.085 1018.33,684.085 1018.89,684.085 1019.45,684.085 1020.01,684.085 1020.56,684.085 1021.12,684.085 1021.68,684.085 1022.24,684.085 1022.8,684.085 1023.36,684.085 1023.92,684.085 1024.48,684.085 1025.04,684.085 1025.6,684.085 1026.16,684.085 1026.72,684.085 1027.28,684.085 1027.83,684.085 1028.39,684.085 1028.95,684.085 1029.51,684.085 1030.07,684.085 1030.63,684.085 1031.19,684.085 1031.75,684.085 1032.31,684.085 1032.87,684.085 1033.43,684.085 1033.99,684.085 1034.55,684.085 1035.1,684.085 1035.66,684.085 1036.22,684.085 1036.78,684.085 1037.34,684.085 1037.9,684.085 1038.46,684.085 1039.02,684.085 1039.58,684.085 1040.14,684.085 1040.7,684.085 1041.26,684.085 1041.82,684.085 1042.38,684.085 1042.93,684.085 1043.49,684.085 1044.05,684.085 1044.61,684.085 1045.17,684.085 1045.73,684.085 1046.29,684.085 1046.85,684.085 1047.41,684.085 1047.97,684.085 1048.53,684.085 1049.09,684.085 1049.65,684.085 1050.2,684.085 1050.76,684.085 1051.32,684.085 1051.88,684.085 1052.44,684.085 1053,684.085 1053.56,684.085 1054.12,684.085 1054.68,684.085 1055.24,684.085 1055.8,684.085 1056.36,684.085 1056.92,684.085 1057.48,684.085 1058.03,684.085 1058.59,684.085 1059.15,684.085 1059.71,684.085 1060.27,684.085 1060.83,684.085 1061.39,684.085 1061.95,684.085 1062.51,684.085 1063.07,684.085 1063.63,684.085 1064.19,684.085 1064.75,684.085 1065.3,684.085 1065.86,684.085 1066.42,684.085 1066.98,684.085 1067.54,684.085 1068.1,684.085 1068.66,684.085 1069.22,684.085 1069.78,684.085 1070.34,684.085 1070.9,684.085 1071.46,684.085 1072.02,684.085 1072.57,684.085 1073.13,684.085 1073.69,684.085 1074.25,684.085 1074.81,684.085 1075.37,684.085 1075.93,684.085 1076.49,684.085 1077.05,684.085 1077.61,684.085 1078.17,684.085 1078.73,684.085 1079.29,684.085 1079.85,684.085 1080.4,684.085 1080.96,684.085 1081.52,684.085 1082.08,684.085 1082.64,684.085 1083.2,684.085 1083.76,684.085 1084.32,684.085 1084.88,684.085 1085.44,684.085 1086,684.085 1086.56,684.085 1087.12,684.085 1087.67,684.085 1088.23,684.085 1088.79,684.085 1089.35,684.085 1089.91,684.085 1090.47,684.085 1091.03,684.085 1091.59,684.085 1092.15,684.085 1092.71,684.085 1093.27,684.085 1093.83,684.085 1094.39,684.085 1094.94,684.085 1095.5,684.085 1096.06,684.085 1096.62,684.085 1097.18,684.085 1097.74,684.085 1098.3,684.085 1098.86,684.085 1099.42,684.085 1099.98,684.085 1100.54,684.085 1101.1,684.085 1101.66,684.085 1102.22,684.085 1102.77,684.085 1103.33,684.085 1103.89,684.085 1104.45,684.085 1105.01,684.085 1105.57,684.085 1106.13,684.085 1106.69,684.085 1107.25,684.085 1107.81,684.085 1108.37,684.085 1108.93,684.085 1109.49,684.085 1110.04,684.085 1110.6,684.085 1111.16,684.085 1111.72,684.085 1112.28,684.085 1112.84,684.085 1113.4,684.085 1113.96,684.085 1114.52,684.085 1115.08,684.085 1115.64,684.085 1116.2,684.085 1116.76,684.085 1117.31,684.085 1117.87,684.085 1118.43,684.085 1118.99,684.085 1119.55,684.085 1120.11,684.085 1120.67,684.085 1121.23,684.085 1121.79,684.085 1122.35,684.085 1122.91,684.085 1123.47,684.085 1124.03,684.085 1124.59,684.085 1125.14,684.085 1125.7,684.085 1126.26,684.085 1126.82,684.085 1127.38,684.085 1127.94,684.085 1128.5,684.085 1129.06,684.085 1129.62,684.085 1130.18,684.085 1130.74,684.085 1131.3,684.085 1131.86,684.085 1132.41,684.085 1132.97,684.085 1133.53,684.085 1134.09,684.085 1134.65,684.085 1135.21,684.085 1135.77,684.085 1136.33,684.085 1136.89,684.085 1137.45,684.085 1138.01,684.085 1138.57,684.085 1139.13,684.085 1139.68,684.085 1140.24,684.085 1140.8,684.085 1141.36,684.085 1141.92,684.085 1142.48,684.085 1143.04,684.085 1143.6,684.085 1144.16,684.085 1144.72,684.085 1145.28,684.085 1145.84,684.085 1146.4,684.085 1146.96,684.085 1147.51,684.085 1148.07,684.085 1148.63,684.085 1149.19,684.085 1149.75,684.085 1150.31,684.085 1150.87,684.085 1151.43,684.085 1151.99,684.085 1152.55,684.085 1153.11,684.085 1153.67,684.085 1154.23,684.085 1154.78,684.085 1155.34,684.085 1155.9,684.085 1156.46,684.085 1157.02,684.085 1157.58,684.085 1158.14,684.085 1158.7,684.085 1159.26,684.085 1159.82,684.085 1160.38,684.085 1160.94,684.085 1161.5,684.085 1162.05,684.085 1162.61,684.085 1163.17,684.085 1163.73,684.085 1164.29,684.085 1164.85,684.085 1165.41,684.085 1165.97,684.085 1166.53,684.085 1167.09,684.085 1167.65,684.085 1168.21,684.085 1168.77,684.085 1169.33,684.085 1169.88,684.085 1170.44,684.085 1171,684.085 1171.56,684.085 1172.12,684.085 1172.68,684.085 1173.24,684.085 1173.8,684.085 1174.36,684.085 1174.92,684.085 1175.48,684.085 1176.04,684.085 1176.6,684.085 1177.15,684.085 1177.71,684.085 1178.27,684.085 1178.83,684.085 1179.39,684.085 1179.95,684.085 1180.51,684.085 1181.07,684.085 1181.63,684.085 1182.19,684.085 1182.75,684.085 1183.31,684.085 1183.87,684.085 1184.43,684.085 1184.98,684.085 1185.54,684.085 1186.1,684.085 1186.66,684.085 1187.22,684.085 1187.78,684.085 1188.34,684.085 1188.9,684.085 1189.46,684.085 1190.02,684.085 1190.58,684.085 1191.14,684.085 1191.7,684.085 1192.25,684.085 1192.81,684.085 1193.37,684.085 1193.93,684.085 1194.49,684.085 1195.05,684.085 1195.61,684.085 1196.17,684.085 1196.73,684.085 1197.29,684.085 1197.85,684.085 1198.41,684.085 1198.97,684.085 1199.52,684.085 1200.08,684.085 1200.64,684.085 1201.2,684.085 1201.76,684.085 1202.32,684.085 1202.88,684.085 1203.44,684.085 1204,684.085 1204.56,684.085 1205.12,684.085 1205.68,684.085 1206.24,684.085 1206.8,684.085 1207.35,684.085 1207.91,684.085 1208.47,684.085 1209.03,684.085 1209.59,684.085 1210.15,684.085 1210.71,684.085 1211.27,684.085 1211.83,684.085 1212.39,684.085 1212.95,684.085 1213.51,684.085 1214.07,684.085 1214.62,684.085 1215.18,684.085 1215.74,684.085 1216.3,684.085 1216.86,684.085 1217.42,684.085 1217.98,684.085 1218.54,684.085 1219.1,684.085 1219.66,684.085 1220.22,684.085 1220.78,684.085 1221.34,684.085 1221.89,684.085 1222.45,684.085 1223.01,684.085 1223.57,684.085 1224.13,684.085 1224.69,684.085 1225.25,684.085 1225.81,684.085 1226.37,684.085 1226.93,684.085 1227.49,684.085 1228.05,684.085 1228.61,684.085 1229.17,684.085 1229.72,684.085 1230.28,684.085 1230.84,684.085 1231.4,684.085 1231.96,684.085 1232.52,684.085 1233.08,684.085 1233.64,684.085 1234.2,684.085 1234.76,684.085 1235.32,684.085 1235.88,684.085 1236.44,684.085 1236.99,684.085 1237.55,684.085 1238.11,684.085 1238.67,684.085 1239.23,684.085 1239.79,684.085 1240.35,684.085 1240.91,684.085 1241.47,684.085 1242.03,684.085 1242.59,684.085 1243.15,684.085 1243.71,684.085 1244.26,684.085 1244.82,684.085 1245.38,684.085 1245.94,684.085 1246.5,684.085 1247.06,684.085 1247.62,684.085 1248.18,684.085 1248.74,684.085 1249.3,684.085 1249.86,684.085 1250.42,684.085 1250.98,684.085 1251.54,684.085 1252.09,684.085 1252.65,684.085 1253.21,684.085 1253.77,684.085 1254.33,684.085 1254.89,684.085 1255.45,684.085 1256.01,684.085 1256.57,684.085 1257.13,684.085 1257.69,684.085 1258.25,684.085 1258.81,684.085 1259.36,684.085 1259.92,684.085 1260.48,684.085 1261.04,684.085 1261.6,684.085 1262.16,684.085 1262.72,684.085 1263.28,684.085 1263.84,684.085 1264.4,684.085 1264.96,684.085 1265.52,684.085 1266.08,684.085 1266.63,684.085 1267.19,684.085 1267.75,684.085 1268.31,684.085 1268.87,684.085 1269.43,684.085 1269.99,684.085 1270.55,684.085 1271.11,684.085 1271.67,684.085 1272.23,684.085 1272.79,684.085 1273.35,684.085 1273.91,684.085 1274.46,684.085 1275.02,684.085 1275.58,684.085 1276.14,684.085 1276.7,684.085 1277.26,684.085 1277.82,684.085 1278.38,684.085 1278.94,684.085 1279.5,684.085 1280.06,684.085 1280.62,684.085 1281.18,684.085 1281.73,684.085 1282.29,684.085 1282.85,684.085 1283.41,684.085 1283.97,684.085 1284.53,684.085 1285.09,684.085 1285.65,684.085 1286.21,684.085 1286.77,684.085 1287.33,684.085 1287.89,684.085 1288.45,684.085 1289,684.085 1289.56,684.085 1290.12,684.085 1290.68,684.085 1291.24,684.085 1291.8,684.085 1292.36,684.085 1292.92,684.085 1293.48,684.085 1294.04,684.085 1294.6,684.085 1295.16,684.085 1295.72,684.085 1296.28,684.085 1296.83,684.085 1297.39,684.085 1297.95,684.085 1298.51,684.085 1299.07,684.085 1299.63,684.085 1300.19,684.085 1300.75,684.085 1301.31,684.085 1301.87,684.085 1302.43,684.085 1302.99,684.085 1303.55,684.085 1304.1,684.085 1304.66,684.085 1305.22,684.085 1305.78,684.085 1306.34,684.085 1306.9,684.085 1307.46,684.085 1308.02,684.085 1308.58,684.085 1309.14,684.085 1309.7,684.085 1310.26,684.085 1310.82,684.085 1311.38,684.085 1311.93,684.085 1312.49,684.085 1313.05,684.085 1313.61,684.085 1314.17,684.085 1314.73,684.085 1315.29,684.085 1315.85,684.085 1316.41,684.085 1316.97,684.085 1317.53,684.085 1318.09,684.085 1318.65,684.085 1319.2,684.085 1319.76,684.085 1320.32,684.085 1320.88,684.085 1321.44,684.085 1322,684.085 1322.56,684.085 1323.12,684.085 1323.68,684.085 1324.24,684.085 1324.8,684.085 1325.36,684.085 1325.92,684.085 1326.47,684.085 1327.03,684.085 1327.59,684.085 1328.15,684.085 1328.71,684.085 1329.27,684.085 1329.83,684.085 1330.39,684.085 1330.95,684.085 1331.51,684.085 1332.07,684.085 1332.63,684.085 1333.19,684.085 1333.75,684.085 1334.3,684.085 1334.86,684.085 1335.42,684.085 1335.98,684.085 1336.54,684.085 1337.1,684.085 1337.66,684.085 1338.22,684.085 1338.78,684.085 1339.34,684.085 1339.9,684.085 1340.46,684.085 1341.02,684.085 1341.57,684.085 1342.13,684.085 1342.69,684.085 1343.25,684.085 1343.81,684.085 1344.37,684.085 1344.93,684.085 1345.49,684.085 1346.05,684.085 1346.61,684.085 1347.17,684.085 1347.73,684.085 1348.29,684.085 1348.84,684.085 1349.4,684.085 1349.96,684.085 1350.52,684.085 1351.08,684.085 1351.64,684.085 1352.2,684.085 1352.76,684.085 1353.32,684.085 1353.88,684.085 1354.44,684.085 1355,684.085 1355.56,684.085 1356.12,684.085 1356.67,684.085 1357.23,684.085 1357.79,684.085 1358.35,684.085 1358.91,684.085 1359.47,684.085 1360.03,684.085 1360.59,684.085 1361.15,684.085 1361.71,684.085 1362.27,684.085 1362.83,684.085 1363.39,684.085 1363.94,684.085 1364.5,684.085 1365.06,684.085 1365.62,684.085 1366.18,684.085 1366.74,684.085 1367.3,684.085 1367.86,684.085 1368.42,684.085 1368.98,684.085 1369.54,684.085 1370.1,684.085 1370.66,684.085 1371.21,684.085 1371.77,684.085 1372.33,684.085 1372.89,684.085 1373.45,684.085 1374.01,684.085 1374.57,684.085 1375.13,684.085 1375.69,684.085 1376.25,684.085 1376.81,684.085 1377.37,684.085 1377.93,684.085 1378.49,684.085 1379.04,684.085 1379.6,684.085 1380.16,684.085 1380.72,684.085 1381.28,684.085 1381.84,684.085 1382.4,684.085 1382.96,684.085 1383.52,684.085 1384.08,684.085 1384.64,684.085 1385.2,684.085 1385.76,684.085 1386.31,684.085 1386.87,684.085 1387.43,684.085 1387.99,684.085 1388.55,684.085 1389.11,684.085 1389.67,684.085 1390.23,684.085 1390.79,684.085 1391.35,684.085 1391.91,684.085 1392.47,684.085 1393.03,684.085 1393.58,684.085 1394.14,684.085 1394.7,684.085 1395.26,684.085 1395.82,684.085 1396.38,684.085 1396.94,684.085 1397.5,684.085 1398.06,684.085 1398.62,684.085 1399.18,684.085 1399.74,684.085 1400.3,684.085 1400.86,684.085 1401.41,684.085 1401.97,684.085 1402.53,684.085 1403.09,684.085 1403.65,684.085 1404.21,684.085 1404.77,684.085 1405.33,684.085 1405.89,684.085 1406.45,684.085 1407.01,684.085 1407.57,684.085 1408.13,684.085 1408.68,684.085 1409.24,684.085 1409.8,684.085 1410.36,684.085 1410.92,684.085 1411.48,684.085 1412.04,684.085 1412.6,684.085 1413.16,684.085 1413.72,684.085 1414.28,684.085 1414.84,684.085 1415.4,684.085 1415.95,684.085 1416.51,684.085 1417.07,684.085 1417.63,684.085 1418.19,684.085 1418.75,684.085 1419.31,684.085 1419.87,684.085 1420.43,684.085 1420.99,684.085 1421.55,684.085 1422.11,684.085 1422.67,684.085 1423.23,684.085 1423.78,684.085 1424.34,684.085 1424.9,684.085 1425.46,684.085 1426.02,684.085 1426.58,684.085 1427.14,684.085 1427.7,684.085 1428.26,684.085 1428.82,684.085 1429.38,684.085 1429.94,684.085 1430.5,684.085 1431.05,684.085 1431.61,684.085 1432.17,684.085 1432.73,684.085 1433.29,684.085 1433.85,684.085 1434.41,684.085 1434.97,684.085 1435.53,684.085 1436.09,684.085 1436.65,684.085 1437.21,684.085 1437.77,684.085 1438.33,684.085 1438.88,684.085 1439.44,684.085 1440,684.085 1440.56,684.085 1441.12,684.085 1441.68,684.085 1442.24,684.085 1442.8,684.085 1443.36,684.085 1443.92,684.085 1444.48,684.085 1445.04,684.085 1445.6,684.085 1446.15,684.085 1446.71,684.085 1447.27,684.085 1447.83,684.085 1448.39,684.085 1448.95,684.085 1449.51,684.085 1450.07,684.085 1450.63,684.085 1451.19,684.085 1451.75,684.085 1452.31,684.085 1452.87,684.085 1453.42,684.085 1453.98,684.085 1454.54,684.085 1455.1,684.085 1455.66,684.085 1456.22,684.085 1456.78,684.085 1457.34,684.085 1457.9,684.085 1458.46,684.085 1459.02,684.085 1459.58,684.085 1460.14,684.085 1460.7,684.085 1461.25,684.085 1461.81,684.085 1462.37,684.085 1462.93,684.085 1463.49,684.085 1464.05,684.085 1464.61,684.085 1465.17,684.085 1465.73,684.085 1466.29,684.085 1466.85,684.085 1467.41,684.085 1467.97,684.085 1468.52,684.085 1469.08,684.085 1469.64,684.085 1470.2,684.085 1470.76,684.085 1471.32,684.085 1471.88,684.085 1472.44,684.085 1473,684.085 1473.56,684.085 1474.12,684.085 1474.68,684.085 1475.24,684.085 1475.79,684.085 1476.35,684.085 1476.91,684.085 1477.47,684.085 1478.03,684.085 1478.59,684.085 1479.15,684.085 1479.71,684.085 1480.27,684.085 1480.83,684.085 1481.39,684.085 1481.95,684.085 1482.51,684.085 1483.07,684.085 1483.62,684.085 1484.18,684.085 1484.74,684.085 1485.3,684.085 1485.86,684.085 1486.42,684.085 1486.98,684.085 1487.54,684.085 1488.1,684.085 1488.66,684.085 1489.22,684.085 1489.78,684.085 1490.34,684.085 1490.89,684.085 1491.45,684.085 1492.01,684.085 1492.57,684.085 1493.13,684.085 1493.69,684.085 1494.25,684.085 1494.81,684.085 1495.37,684.085 1495.93,684.085 1496.49,684.085 1497.05,684.085 1497.61,684.085 1498.16,684.085 1498.72,684.085 1499.28,684.085 1499.84,684.085 1500.4,684.085 1500.96,684.085 1501.52,684.085 1502.08,684.085 1502.64,684.085 1503.2,684.085 1503.76,684.085 1504.32,684.085 1504.88,684.085 1505.44,684.085 1505.99,684.085 1506.55,684.085 1507.11,684.085 1507.67,684.085 1508.23,684.085 1508.79,684.085 1509.35,684.085 1509.91,684.085 1510.47,684.085 1511.03,684.085 1511.59,684.085 1512.15,684.085 1512.71,684.085 1513.26,684.085 1513.82,684.085 1514.38,684.085 1514.94,684.085 1515.5,684.085 1516.06,684.085 1516.62,684.085 1517.18,684.085 1517.74,684.085 1518.3,684.085 1518.86,684.085 1519.42,684.085 1519.98,684.085 1520.53,684.085 1521.09,684.085 1521.65,684.085 1522.21,684.085 1522.77,684.085 1523.33,684.085 1523.89,684.085 1524.45,684.085 1525.01,684.085 1525.57,684.085 1526.13,684.085 1526.69,684.085 1527.25,684.085 1527.81,684.085 1528.36,684.085 1528.92,684.085 1529.48,684.085 1530.04,684.085 1530.6,684.085 1531.16,684.085 1531.72,684.085 1532.28,684.085 1532.84,684.085 1533.4,684.085 1533.96,684.085 1534.52,684.085 1535.08,684.085 1535.63,684.085 1536.19,684.085 1536.75,684.085 1537.31,684.085 1537.87,684.085 1538.43,684.085 1538.99,684.085 1539.55,684.085 1540.11,684.085 1540.67,684.085 1541.23,684.085 1541.79,684.085 1542.35,684.085 1542.9,684.085 1543.46,684.085 1544.02,684.085 1544.58,684.085 1545.14,684.085 1545.7,684.085 1546.26,684.085 1546.82,684.085 1547.38,684.085 1547.94,684.085 1548.5,684.085 1549.06,684.085 1549.62,684.085 1550.18,684.085 1550.73,684.085 1551.29,684.085 1551.85,684.085 1552.41,684.085 1552.97,684.085 1553.53,684.085 1554.09,684.085 1554.65,684.085 1555.21,684.085 1555.77,684.085 1556.33,684.085 1556.89,684.085 1557.45,684.085 1558,684.085 1558.56,684.085 1559.12,684.085 1559.68,684.085 1560.24,684.085 1560.8,684.085 1561.36,684.085 1561.92,684.085 1562.48,684.085 1563.04,684.085 1563.6,684.085 1564.16,684.085 1564.72,684.085 1565.28,684.085 1565.83,684.085 1566.39,684.085 1566.95,684.085 1567.51,684.085 1568.07,684.085 1568.63,684.085 1569.19,684.085 1569.75,684.085 1570.31,684.085 1570.87,684.085 1571.43,684.085 1571.99,684.085 1572.55,684.085 1573.1,684.085 1573.66,684.085 1574.22,684.085 1574.78,684.085 1575.34,684.085 1575.9,684.085 1576.46,684.085 1577.02,684.085 1577.58,684.085 1578.14,684.085 1578.7,684.085 1579.26,684.085 1579.82,684.085 1580.37,684.085 1580.93,684.085 1581.49,684.085 1582.05,684.085 1582.61,684.085 1583.17,684.085 1583.73,684.085 1584.29,684.085 1584.85,684.085 1585.41,684.085 1585.97,684.085 1586.53,684.085 1587.09,684.085 1587.65,684.085 1588.2,684.085 1588.76,684.085 1589.32,684.085 1589.88,684.085 1590.44,684.085 1591,684.085 1591.56,684.085 1592.12,684.085 1592.68,684.085 1593.24,684.085 1593.8,684.085 1594.36,684.085 1594.92,684.085 1595.47,684.085 1596.03,684.085 1596.59,684.085 1597.15,684.085 1597.71,684.085 1598.27,684.085 1598.83,684.085 1599.39,684.085 1599.95,684.085 1600.51,684.085 1601.07,684.085 1601.63,684.085 1602.19,684.085 1602.74,684.085 1603.3,684.085 1603.86,684.085 1604.42,684.085 1604.98,684.085 1605.54,684.085 1606.1,684.085 1606.66,684.085 1607.22,684.085 1607.78,684.085 1608.34,684.085 1608.9,684.085 1609.46,684.085 1610.02,684.085 1610.57,684.085 1611.13,684.085 1611.69,684.085 1612.25,684.085 1612.81,684.085 1613.37,684.085 1613.93,684.085 1614.49,684.085 1615.05,684.085 1615.61,684.085 1616.17,684.085 1616.73,684.085 1617.29,684.085 1617.84,684.085 1618.4,684.085 1618.96,684.085 1619.52,684.085 1620.08,684.085 1620.64,684.085 1621.2,684.085 1621.76,684.085 1622.32,684.085 1622.88,684.085 1623.44,684.085 1624,684.085 1624.56,684.085 1625.11,684.085 1625.67,684.085 1626.23,684.085 1626.79,684.085 1627.35,684.085 1627.91,684.085 1628.47,684.085 1629.03,684.085 1629.59,684.085 1630.15,684.085 1630.71,684.085 1631.27,684.085 1631.83,684.085 1632.39,684.085 1632.94,684.085 1633.5,684.085 1634.06,684.085 1634.62,684.085 1635.18,684.085 1635.74,684.085 1636.3,684.085 1636.86,684.085 1637.42,684.085 1637.98,684.085 1638.54,684.085 1639.1,684.085 1639.66,684.085 1640.21,684.085 1640.77,684.085 1641.33,684.085 1641.89,684.085 1642.45,684.085 1643.01,684.085 1643.57,684.085 1644.13,684.085 1644.69,684.085 1645.25,684.085 1645.81,684.085 1646.37,684.085 1646.93,684.085 1647.48,684.085 1648.04,684.085 1648.6,684.085 1649.16,684.085 1649.72,684.085 1650.28,684.085 1650.84,684.085 1651.4,684.085 1651.96,684.085 1652.52,684.085 1653.08,684.085 1653.64,684.085 1654.2,684.085 1654.76,684.085 1655.31,684.085 1655.87,684.085 1656.43,684.085 1656.99,684.085 1657.55,684.085 1658.11,684.085 1658.67,684.085 1659.23,684.085 1659.79,684.085 1660.35,684.085 1660.91,684.085 1661.47,684.085 1662.03,684.085 1662.58,684.085 1663.14,684.085 1663.7,684.085 1664.26,684.085 1664.82,684.085 1665.38,684.085 1665.94,684.085 1666.5,684.085 1667.06,684.085 1667.62,684.085 1668.18,684.085 1668.74,684.085 1669.3,684.085 1669.85,684.085 1670.41,684.085 1670.97,684.085 1671.53,684.085 1672.09,684.085 1672.65,684.085 1673.21,684.085 1673.77,684.085 1674.33,684.085 1674.89,684.085 1675.45,684.085 1676.01,684.085 1676.57,684.085 1677.13,684.085 1677.68,684.085 1678.24,684.085 1678.8,684.085 1679.36,684.085 1679.92,684.085 1680.48,684.085 1681.04,684.085 1681.6,684.085 1682.16,684.085 1682.72,684.085 1683.28,684.085 1683.84,684.085 1684.4,684.085 1684.95,684.085 1685.51,684.085 1686.07,684.085 1686.63,684.085 1687.19,684.085 1687.75,684.085 1688.31,684.085 1688.87,684.085 1689.43,684.085 1689.99,684.085 1690.55,684.085 1691.11,684.085 1691.67,684.085 1692.23,684.085 1692.78,684.085 1693.34,684.085 1693.9,684.085 1694.46,684.085 1695.02,684.085 1695.58,684.085 1696.14,684.085 1696.7,684.085 1697.26,684.085 1697.82,684.085 1698.38,684.085 1698.94,684.085 1699.5,684.085 1700.05,684.085 1700.61,684.085 1701.17,684.085 1701.73,684.085 1702.29,684.085 1702.85,684.085 1703.41,684.085 1703.97,684.085 1704.53,684.085 1705.09,684.085 1705.65,684.085 1706.21,684.085 1706.77,684.085 1707.32,684.085 1707.88,684.085 1708.44,684.085 1709,684.085 1709.56,684.085 1710.12,684.085 1710.68,684.085 1711.24,684.085 1711.8,684.085 1712.36,684.085 1712.92,684.085 1713.48,684.085 1714.04,684.085 1714.6,684.085 1715.15,684.085 1715.71,684.085 1716.27,684.085 1716.83,684.085 1717.39,684.085 1717.95,684.085 1718.51,684.085 1719.07,684.085 1719.63,684.085 1720.19,684.085 1720.75,684.085 1721.31,684.085 1721.87,684.085 1722.42,684.085 1722.98,684.085 1723.54,684.085 1724.1,684.085 1724.66,684.085 1725.22,684.085 1725.78,684.085 1726.34,684.085 1726.9,684.085 1727.46,684.085 1728.02,684.085 1728.58,684.085 1729.14,684.085 1729.69,684.085 1730.25,684.085 1730.81,684.085 1731.37,684.085 1731.93,684.085 1732.49,684.085 1733.05,684.085 1733.61,684.085 1734.17,684.085 1734.73,684.085 1735.29,684.085 1735.85,684.085 1736.41,684.085 1736.97,684.085 1737.52,684.085 1738.08,684.085 1738.64,684.085 1739.2,684.085 1739.76,684.085 1740.32,684.085 1740.88,684.085 1741.44,684.085 1742,684.085 1742.56,684.085 1743.12,684.085 1743.68,684.085 1744.24,684.085 1744.79,684.085 1745.35,684.085 1745.91,684.085 1746.47,684.085 1747.03,684.085 1747.59,684.085 1748.15,684.085 1748.71,684.085 1749.27,684.085 1749.83,684.085 1750.39,684.085 1750.95,684.085 1751.51,684.085 1752.06,684.085 1752.62,684.085 1753.18,684.085 1753.74,684.085 1754.3,684.085 1754.86,684.085 1755.42,684.085 1755.98,684.085 1756.54,684.085 1757.1,684.085 1757.66,684.085 1758.22,684.085 1758.78,684.085 1759.34,684.085 1759.89,684.085 1760.45,684.085 1761.01,684.085 1761.57,684.085 1762.13,684.085 1762.69,684.085 1763.25,684.085 1763.81,684.085 1764.37,684.085 1764.93,684.085 1765.49,684.085 1766.05,684.085 1766.61,684.085 1767.16,684.085 1767.72,684.085 1768.28,684.085 1768.84,684.085 1769.4,684.085 1769.96,684.085 1770.52,684.085 1771.08,684.085 1771.64,684.085 1772.2,684.085 1772.76,684.085 1773.32,684.085 1773.88,684.085 1774.43,684.085 1774.99,684.085 1775.55,684.085 1776.11,684.085 1776.67,684.085 1777.23,684.085 1777.79,684.085 1778.35,684.085 1778.91,684.085 1779.47,684.085 1780.03,684.085 1780.59,684.085 1781.15,684.085 1781.71,684.085 1782.26,684.085 1782.82,684.085 1783.38,684.085 1783.94,684.085 1784.5,684.085 1785.06,684.085 1785.62,684.085 1786.18,684.085 1786.74,684.085 1787.3,684.085 1787.86,684.085 1788.42,684.085 1788.98,684.085 1789.53,684.085 1790.09,684.085 1790.65,684.085 1791.21,684.085 1791.77,684.085 1792.33,684.085 1792.89,684.085 1793.45,684.085 1794.01,684.085 1794.57,684.085 1795.13,684.085 1795.69,684.085 1796.25,684.085 1796.8,684.085 1797.36,684.085 1797.92,684.085 1798.48,684.085 1799.04,684.085 1799.6,684.085 1800.16,684.085 1800.72,684.085 1801.28,684.085 1801.84,684.085 1802.4,684.085 1802.96,684.085 1803.52,684.085 1804.08,684.085 1804.63,684.085 1805.19,684.085 1805.75,684.085 1806.31,684.085 1806.87,684.085 1807.43,684.085 1807.99,684.085 1808.55,684.085 1809.11,684.085 1809.67,684.085 1810.23,684.085 1810.79,684.085 1811.35,684.085 1811.9,684.085 1812.46,684.085 1813.02,684.085 1813.58,684.085 1814.14,684.085 1814.7,684.085 1815.26,684.085 1815.82,684.085 1816.38,684.085 1816.94,684.085 1817.5,684.085 1818.06,684.085 1818.62,684.085 1819.18,684.085 1819.73,684.085 1820.29,684.085 1820.85,684.085 1821.41,684.085 1821.97,684.085 1822.53,684.085 1823.09,684.085 1823.65,684.085 1824.21,684.085 1824.77,684.085 1825.33,684.085 1825.89,684.085 1826.45,684.085 1827,684.085 1827.56,684.085 1828.12,684.085 1828.68,684.085 1829.24,684.085 1829.8,684.085 1830.36,684.085 1830.92,684.085 1831.48,684.085 1832.04,684.085 1832.6,684.085 1833.16,684.085 1833.72,684.085 1834.27,684.085 1834.83,684.085 1835.39,684.085 1835.95,684.085 1836.51,684.085 1837.07,684.085 1837.63,684.085 1838.19,684.085 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $targetwalkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.036477684242974 ± 0.02334525140319158\nProjected Energy: -4.017604702562036 ± (0.005593363724967659, 0.005521220799719728)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from lomc! as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dτ=df.dτ[end], skip=0)\n\nCalculate the growth witness directly from a DataFrame returned by lomc!. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0) -> g\ngrowth_witness(df::DataFrame, [b]; skip=0) -> g\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n) -> r::RatioBlockingResult\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    dτ=df.dτ[end],\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively. Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin().\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator. Error propagation is done with MonteCarloMeasurements. Progagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a DataFrame returned by lomc!. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator() and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\n-> (;df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    dτ=df.dτ[end],\n    kwargs...\n)\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the unweighted ratio. Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame returned by lomc!. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(\n    df::DataFrame;\n    skip=0, hproj=:hproj, vproj=:vproj, kwargs...\n) -> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy() to set these up in lomc!()). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame returned by lomc!. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...) -> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the result of replica lomc! passed as  argument df, using replicas _1 and _2. Calls ratio_of_means() to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame version can extract the relevant information from the result of lomc!. Set up lomc! with the keyword argument replica = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.661968</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3816e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.0499e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.596e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.163e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.805e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.116e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(BoseFS{4,5}(0, 0, 4, 0, 0); u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613371\n -0.7590191922770853\n  0.13584182219621077\n  0.15789998694609508\n  0.876711441178136\n  1.530592997097317\n  1.5835732611867481\n  3.0728703303258706\n  3.1256726539518365\n  4.862107221562165\n  6.260694850380596\n  6.4026712111831126\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(add::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\nadd: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl \n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order  degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl \n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and  the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between  basis states of any noninteracting energy level, leading to many more offdiagonals and  fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger  restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The    allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make    the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the    interactions. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without    comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building  a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that  conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using  first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d) \n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, see four_oscillator_integral_general, with the additional restriction  that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to    make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function  potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi \n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix  representation of this Hamiltonian for a single particle is completely dense in the even-parity  subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty    for a 1D trap or contain values greater than 1.0. The maximum index    in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,    including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if    only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of \nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(BoseFS{3,3}(0, 2, 1); u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into lomc! with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions, \n\n    mathcalI(ijkl) = int_-infty^infty dx  \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function,  and is non-zero unless i+j+k+l is odd. See e.g.  Titchmarsh (1948). This is a generalisation of the closed form in  Papenbrock (2002), which is is the special  case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin, \n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state  corresponds to a D-tuple of harmonic oscillator indices mathbfn_i.  S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of  phi_i(0) to speed-up the calculation. The values can be calculated with  log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D  harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues\n3-element Vector{Float64}:\n -1.9999999999999996\n  0.9999999999999997\n  1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector\n3-element Vector{Float64}:\n -0.5773502691896257\n -0.5773502691896255\n -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => -0.57735\n  fs\"|0 1 0⟩\" => -0.57735\n  fs\"|1 0 0⟩\" => -0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dτ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08, ξ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, dτ) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntargetwalkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; targetwalkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 10)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; targetwalkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, seeTimeStepStrategy`.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * targetwalkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dτ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> add = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(add);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 10)\n\njulia> size(df2)\n(200, 10)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(BoseFS{6,3}(1, 2, 3); u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dτ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dτ","text":"update_dτ(s<:TimeStepStrategy, dτ, tnorm) -> new dτ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc!, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with mpirun julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Next, we construct the starting vector. We use a PDVec, which is automatically MPI-distributed if MPI is available. We set the vector's stochastic style to IsDynamicSemistochastic, which improves statistics and reduces the sign problem.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails. Setting save_if=is_mpi_root() will ensure only the root MPI rank will write to the file. The chunk_size parameter determines how often the data is saved to the file. Progress messages are suppressed with io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    save_if=is_mpi_root(),\n    reporting_interval=1,\n    chunk_size=1000,\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10_000 walkers. We will also compute the projected energy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"s_strat = DoubleLogUpdate(targetwalkers=10_000)\npost_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ProjectedEnergy{HubbardMom1D{Float64, 10, BoseFS{10, 10, BitString{19, 1, UInt32}}, 6.0, 1.0}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}}(:vproj, :hproj, HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 1.0],)), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(1, 0, 0, 0, 8, 0, 0, 0, 1, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 0, 8, 0, 0, 0, 0, 2) => 4.024922359499621, BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 7.0, BoseFS{10,10}(0, 0, 1, 0, 8, 0, 1, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 1, 8, 1, 0, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 1, 0, 0, 8, 0, 0, 1, 0, 0) => 5.692099788303083],)))","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"lomc!(H, initial_vector; reporting_strategy, s_strat, post_step_strategy, dτ=1e-4, laststep=10_000);\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. lomc!.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main lomc!() computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI for use in lomc!() is enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and PointToPoint when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> map!(x -> -x, values(pv)); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.MainSegmentIterator","page":"Dict vectors","title":"Rimu.DictVectors.MainSegmentIterator","text":"MainSegmentIterator{W,D} <: AbstractVector{D}\n\nIterates the main segments of a specified rank. See remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured in a series of columns, where each has a number of segments (see PDVec) equal to the number of segments across all MPI ranks. The purpose of this organisation is to allow spawning in parallel without using locks or atomic operations.\n\nThe steps performed on a PDWorkingMemory during a typical operation are perform_spawns!, collect_local!, synchronize_remote!, and move_and_compress!.\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports deposit! and StochasticStyle and acts as a target for spawning.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nCollect each row in w into its main segment. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the main segments on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.main_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.main_column","text":"main_column(::PDWorkingMemory) -> PDVec\n\nReturn the \"main\" column of the working memory wrapped in a PDVec.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local rank.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, t::PDVec, ham, boost)\n\nPerform spawns from t through ham to w.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the main segments that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!(w::PDWorkingMemory)\n\nSynchronize non-local segments across MPI. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, two implementations are provided, NotDistributed, and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint <: Communicator\n\nCommunicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer\n\nMultiple vectors stored in a simple buffer with MPI communication.\n\nSee replace_collections!, mpi_send, mpi_recv_any!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm)\n\nSend the buffers to dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into buffers.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] ::PDWorkingMemory)\n\nCopy pairs from remote ranks to the local part of the PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored.\n\nIf the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
